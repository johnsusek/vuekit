import AppKit
import JavaScriptCore

let subclassed = [
  "NSTokenField",
  "NSSlider",
  "NSScroller",
  "NSSecureTextField",
  "NSMatrix",
  "NSTabView",
  "NSVisualEffectView",
  "NSRuleEditor",
  "NSBox",
  "NSPredicateEditor",
  "NSSwitch",
  "NSWindow",
  "NSTableView",
  "NSScrubberArrangedView",
  "NSTextField",
  "NSPopUpButton",
  "NSScrubberImageItemView",
  "NSScrollView",
  "NSScrubberTextItemView",
  "NSRulerView",
  "NSText",
  "NSButton",
  "NSImageView",
  "NSControl",
  "NSStatusBarButton",
  "NSTextView",
  "NSStackView",
  "NSDatePicker",
  "NSTableRowView",
  "NSStepper",
  "NSComboBox",
  "NSSegmentedControl",
  "NSSearchField",
  "NSPathControl",
  "NSTableCellView",
  "NSScrubber",
  "NSColorWell",
  "NSSplitView",
  "NSBrowser",
  "NSGridView",
  "NSClipView",
  "NSOutlineView",
  "NSTableHeaderView",
  "NSCollectionView",
  "NSLevelIndicator",
  "NSProgressIndicator",
  "IKFilterUIView",
  "IKFilterBrowserView",
  "IKScannerDeviceView",
  "QuartzFilterView",
  "QLPreviewView",
  "IKCameraDeviceView",
  "IKImageView",
  "IKDeviceBrowserView"
]

let allClasses = [
  "CAAnimation",
  "CAAnimationGroup",
  "CABasicAnimation",
  "CAConstraint",
  "CAConstraintLayoutManager",
  "CAEDRMetadata",
  "CAEmitterCell",
  "CAEmitterLayer",
  "CAGradientLayer",
  "CAKeyframeAnimation",
  "CALayer",
  "CAMediaTimingFunction",
  "CAMetalLayer",
  "CAPropertyAnimation",
  "CARemoteLayerClient",
  "CARemoteLayerServer",
  "CARenderer",
  "CAReplicatorLayer",
  "CAScrollLayer",
  "CAShapeLayer",
  "CASpringAnimation",
  "CATextLayer",
  "CATiledLayer",
  "CATransaction",
  "CATransformLayer",
  "CATransition",
  "CAValueFunction",
  "IKCameraDeviceView",
  "IKDeviceBrowserView",
  "IKFilterBrowserPanel",
  "IKFilterBrowserView",
  "IKFilterUIView",
  "IKImageBrowserCell",
  "IKImageEditPanel",
  "IKImageView",
  "IKPictureTaker",
  "IKSaveOptions",
  "IKScannerDeviceView",
  "IKSlideshow",
  "NSAccessibilityCustomAction",
  "NSAccessibilityCustomRotor",
  "NSAccessibilityCustomRotorItemResult",
  "NSAccessibilityCustomRotorSearchParameters",
  "NSAccessibilityElement",
  "NSAffineTransform",
  "NSAlert",
  "NSAlignmentFeedbackFilter",
  "NSAnimation",
  "NSAnimationContext",
  "NSAppearance",
  "NSAppleEventDescriptor",
  "NSAppleEventManager",
  "NSAppleScript",
  "NSApplication",
  "NSArray",
  "NSArrayController",
  "NSAssertionHandler",
  "NSATSTypesetter",
  "NSAttributedString",
  "NSAutoreleasePool",
  "NSBackgroundActivityScheduler",
  "NSBezierPath",
  "NSBindingSelectionMarker",
  "NSBitmapImageRep",
  "NSBlockOperation",
  "NSBox",
  "NSBrowser",
  "NSBrowserCell",
  "NSBundle",
  "NSButton",
  "NSButtonCell",
  "NSButtonTouchBarItem",
  "NSByteCountFormatter",
  "NSCache",
  "NSCachedURLResponse",
  "NSCalendar",
  "NSCandidateListTouchBarItem",
  "NSCell",
  "NSCharacterSet",
  "NSCIImageRep",
  "NSClassDescription",
  "NSClickGestureRecognizer",
  "NSClipView",
  "NSCloneCommand",
  "NSCloseCommand",
  "NSCoder",
  "NSCollectionLayoutAnchor",
  "NSCollectionLayoutBoundarySupplementaryItem",
  "NSCollectionLayoutDecorationItem",
  "NSCollectionLayoutDimension",
  "NSCollectionLayoutEdgeSpacing",
  "NSCollectionLayoutGroup",
  "NSCollectionLayoutGroupCustomItem",
  "NSCollectionLayoutItem",
  "NSCollectionLayoutSection",
  "NSCollectionLayoutSize",
  "NSCollectionLayoutSpacing",
  "NSCollectionLayoutSupplementaryItem",
  "NSCollectionView",
  "NSCollectionViewCompositionalLayout",
  "NSCollectionViewCompositionalLayoutConfiguration",
  "NSCollectionViewDiffableDataSource",
  "NSCollectionViewFlowLayout",
  "NSCollectionViewFlowLayoutInvalidationContext",
  "NSCollectionViewGridLayout",
  "NSCollectionViewItem",
  "NSCollectionViewLayout",
  "NSCollectionViewLayoutAttributes",
  "NSCollectionViewLayoutInvalidationContext",
  "NSCollectionViewTransitionLayout",
  "NSCollectionViewUpdateItem",
  "NSColor",
  "NSColorList",
  "NSColorPanel",
  "NSColorPicker",
  "NSColorPickerTouchBarItem",
  "NSColorSampler",
  "NSColorSpace",
  "NSColorWell",
  "NSComboBox",
  "NSComboBoxCell",
  "NSComparisonPredicate",
  "NSCompoundPredicate",
  "NSCondition",
  "NSConditionLock",
  "NSControl",
  "NSController",
  "NSCountedSet",
  "NSCreateCommand",
  "NSCursor",
  "NSCustomImageRep",
  "NSCustomTouchBarItem",
  "NSData",
  "NSDataAsset",
  "NSDataDetector",
  "NSDate",
  "NSDateComponents",
  "NSDateComponentsFormatter",
  "NSDateFormatter",
  "NSDateInterval",
  "NSDateIntervalFormatter",
  "NSDatePicker",
  "NSDatePickerCell",
  "NSDecimalNumber",
  "NSDecimalNumberHandler",
  "NSDeleteCommand",
  "NSDictionary",
  "NSDictionaryController",
  "NSDictionaryControllerKeyValuePair",
  "NSDiffableDataSourceSnapshot",
  "NSDimension",
  "NSDirectoryEnumerator",
  "NSDistributedLock",
  "NSDistributedNotificationCenter",
  "NSDockTile",
  "NSDocument",
  "NSDocumentController",
  "NSDraggingImageComponent",
  "NSDraggingItem",
  "NSDraggingSession",
  "NSEnergyFormatter",
  "NSEnumerator",
  "NSEPSImageRep",
  "NSError",
  "NSEvent",
  "NSException",
  "NSExpression",
  "NSExtensionContext",
  "NSExtensionItem",
  "NSFileAccessIntent",
  "NSFileCoordinator",
  "NSFileHandle",
  "NSFileManager",
  "NSFilePromiseProvider",
  "NSFilePromiseReceiver",
  "NSFileProviderService",
  "NSFileVersion",
  "NSFileWrapper",
  "NSFont",
  "NSFontAssetRequest",
  "NSFontCollection",
  "NSFontDescriptor",
  "NSFontManager",
  "NSFontPanel",
  "NSFormatter",
  "NSFormCell",
  "NSGestureRecognizer",
  "NSGlyphGenerator",
  "NSGlyphInfo",
  "NSGradient",
  "NSGraphicsContext",
  "NSGridCell",
  "NSGridColumn",
  "NSGridRow",
  "NSGridView",
  "NSGroupTouchBarItem",
  "NSHapticFeedbackManager",
  "NSHashTable",
  "NSHelpManager",
  "NSHost",
  "NSHTTPCookie",
  "NSHTTPCookieStorage",
  "NSHTTPURLResponse",
  "NSImage",
  "NSImageCell",
  "NSImageRep",
  "NSImageView",
  "NSIndexPath",
  "NSIndexSet",
  "NSIndexSpecifier",
  "NSInputStream",
  "NSISO8601DateFormatter",
  "NSItemProvider",
  "NSJSONSerialization",
  "NSKeyedArchiver",
  "NSKeyedUnarchiver",
  "NSLayoutAnchor",
  "NSLayoutConstraint",
  "NSLayoutDimension",
  "NSLayoutGuide",
  "NSLayoutManager",
  "NSLayoutXAxisAnchor",
  "NSLayoutYAxisAnchor",
  "NSLengthFormatter",
  "NSLevelIndicator",
  "NSLevelIndicatorCell",
  "NSLinguisticTagger",
  "NSListFormatter",
  "NSLocale",
  "NSLock",
  "NSLogicalTest",
  "NSMachPort",
  "NSMagnificationGestureRecognizer",
  "NSMapTable",
  "NSMassFormatter",
  "NSMatrix",
  "NSMeasurement",
  "NSMeasurementFormatter",
  "NSMediaLibraryBrowserController",
  "NSMenu",
  "NSMenuItem",
  "NSMenuItemCell",
  "NSMenuToolbarItem",
  "NSMetadataItem",
  "NSMetadataQuery",
  "NSMetadataQueryAttributeValueTuple",
  "NSMetadataQueryResultGroup",
  "NSMoveCommand",
  "NSMutableArray",
  "NSMutableAttributedString",
  "NSMutableCharacterSet",
  "NSMutableData",
  "NSMutableDictionary",
  "NSMutableFontCollection",
  "NSMutableIndexSet",
  "NSMutableOrderedSet",
  "NSMutableParagraphStyle",
  "NSMutableSet",
  "NSMutableString",
  "NSMutableURLRequest",
  "NSNameSpecifier",
  "NSNetService",
  "NSNetServiceBrowser",
  "NSNib",
  "NSNotification",
  "NSNotificationCenter",
  "NSNotificationQueue",
  "NSNull",
  "NSNumber",
  "NSNumberFormatter",
  "NSObject",
  "NSObjectController",
  "NSOpenPanel",
  "NSOperation",
  "NSOperationQueue",
  "NSOrderedCollectionChange",
  "NSOrderedCollectionDifference",
  "NSOrderedSet",
  "NSOrthography",
  "NSOutlineView",
  "NSOutputStream",
  "NSPageController",
  "NSPageLayout",
  "NSPanel",
  "NSPanGestureRecognizer",
  "NSParagraphStyle",
  "NSPasteboard",
  "NSPasteboardItem",
  "NSPathCell",
  "NSPathComponentCell",
  "NSPathControl",
  "NSPathControlItem",
  "NSPDFImageRep",
  "NSPDFInfo",
  "NSPDFPanel",
  "NSPersistentDocument",
  "NSPersonNameComponents",
  "NSPersonNameComponentsFormatter",
  "NSPickerTouchBarItem",
  "NSPICTImageRep",
  "NSPipe",
  "NSPointerArray",
  "NSPointerFunctions",
  "NSPopover",
  "NSPopoverTouchBarItem",
  "NSPopUpButton",
  "NSPopUpButtonCell",
  "NSPort",
  "NSPortMessage",
  "NSPositionalSpecifier",
  "NSPredicate",
  "NSPredicateEditor",
  "NSPredicateEditorRowTemplate",
  "NSPressGestureRecognizer",
  "NSPressureConfiguration",
  "NSPrinter",
  "NSPrintInfo",
  "NSPrintOperation",
  "NSPrintPanel",
  "NSProcessInfo",
  "NSProgress",
  "NSProgressIndicator",
  "NSPropertyListSerialization",
  "NSProtocolChecker",
  "NSProxy",
  "NSPurgeableData",
  "NSQuitCommand",
  "NSRangeSpecifier",
  "NSRecursiveLock",
  "NSRegularExpression",
  "NSRelativeDateTimeFormatter",
  "NSRelativeSpecifier",
  "NSResponder",
  "NSRotationGestureRecognizer",
  "NSRuleEditor",
  "NSRulerMarker",
  "NSRulerView",
  "NSRunLoop",
  "NSRunningApplication",
  "NSSavePanel",
  "NSScanner",
  "NSScreen",
  "NSScriptClassDescription",
  "NSScriptCoercionHandler",
  "NSScriptCommand",
  "NSScriptCommandDescription",
  "NSScriptExecutionContext",
  "NSScriptObjectSpecifier",
  "NSScriptSuiteRegistry",
  "NSScriptWhoseTest",
  "NSScroller",
  "NSScrollView",
  "NSScrubber",
  "NSScrubberArrangedView",
  "NSScrubberFlowLayout",
  "NSScrubberImageItemView",
  "NSScrubberLayout",
  "NSScrubberLayoutAttributes",
  "NSScrubberProportionalLayout",
  "NSScrubberSelectionStyle",
  "NSScrubberTextItemView",
  "NSSearchField",
  "NSSearchFieldCell",
  "NSSecureTextField",
  "NSSecureTextFieldCell",
  "NSSecureUnarchiveFromDataTransformer",
  "NSSegmentedCell",
  "NSSegmentedControl",
  "NSSet",
  "NSSetCommand",
  "NSShadow",
  "NSSharingService",
  "NSSharingServicePicker",
  "NSSharingServicePickerToolbarItem",
  "NSSharingServicePickerTouchBarItem",
  "NSSlider",
  "NSSliderAccessory",
  "NSSliderAccessoryBehavior",
  "NSSliderCell",
  "NSSliderTouchBarItem",
  "NSSocketPort",
  "NSSortDescriptor",
  "NSSound",
  "NSSpecifierTest",
  "NSSpeechRecognizer",
  "NSSpeechSynthesizer",
  "NSSpellChecker",
  "NSSpellServer",
  "NSSplitView",
  "NSSplitViewController",
  "NSSplitViewItem",
  "NSStackView",
  "NSStatusBar",
  "NSStatusBarButton",
  "NSStatusItem",
  "NSStepper",
  "NSStepperCell",
  "NSStepperTouchBarItem",
  "NSStoryboard",
  "NSStoryboardSegue",
  "NSStream",
  "NSString",
  "NSStringDrawingContext",
  "NSSwitch",
  "NSTableCellView",
  "NSTableColumn",
  "NSTableHeaderCell",
  "NSTableHeaderView",
  "NSTableRowView",
  "NSTableView",
  "NSTableViewRowAction",
  "NSTabView",
  "NSTabViewController",
  "NSTabViewItem",
  "NSTask",
  "NSText",
  "NSTextAlternatives",
  "NSTextAttachment",
  "NSTextBlock",
  "NSTextCheckingController",
  "NSTextCheckingResult",
  "NSTextContainer",
  "NSTextField",
  "NSTextFieldCell",
  "NSTextFinder",
  "NSTextInputContext",
  "NSTextList",
  "NSTextStorage",
  "NSTextTab",
  "NSTextTable",
  "NSTextTableBlock",
  "NSTextView",
  "NSThread",
  "NSTimer",
  "NSTimeZone",
  "NSTitlebarAccessoryViewController",
  "NSTokenField",
  "NSTokenFieldCell",
  "NSToolbar",
  "NSToolbarItem",
  "NSToolbarItemGroup",
  "NSTouch",
  "NSTouchBar",
  "NSTouchBarItem",
  "NSTrackingArea",
  "NSTreeController",
  "NSTreeNode",
  "NSTypesetter",
  "NSUbiquitousKeyValueStore",
  "NSUndoManager",
  "NSUniqueIDSpecifier",
  "NSUnit",
  "NSUnitAcceleration",
  "NSUnitAngle",
  "NSUnitArea",
  "NSUnitConcentrationMass",
  "NSUnitConverter",
  "NSUnitConverterLinear",
  "NSUnitDispersion",
  "NSUnitDuration",
  "NSUnitElectricCharge",
  "NSUnitElectricCurrent",
  "NSUnitElectricPotentialDifference",
  "NSUnitElectricResistance",
  "NSUnitEnergy",
  "NSUnitFrequency",
  "NSUnitFuelEfficiency",
  "NSUnitIlluminance",
  "NSUnitInformationStorage",
  "NSUnitLength",
  "NSUnitMass",
  "NSUnitPower",
  "NSUnitPressure",
  "NSUnitSpeed",
  "NSUnitTemperature",
  "NSUnitVolume",
  "NSURL",
  "NSURLAuthenticationChallenge",
  "NSURLCache",
  "NSURLComponents",
  "NSURLConnection",
  "NSURLCredential",
  "NSURLCredentialStorage",
  "NSURLDownload",
  "NSURLProtectionSpace",
  "NSURLProtocol",
  "NSURLQueryItem",
  "NSURLRequest",
  "NSURLResponse",
  "NSURLSession",
  "NSURLSessionConfiguration",
  "NSURLSessionDownloadTask",
  "NSURLSessionStreamTask",
  "NSURLSessionTask",
  "NSURLSessionTaskMetrics",
  "NSURLSessionTaskTransactionMetrics",
  "NSURLSessionWebSocketMessage",
  "NSURLSessionWebSocketTask",
  "NSUserActivity",
  "NSUserAppleScriptTask",
  "NSUserAutomatorTask",
  "NSUserDefaults",
  "NSUserDefaultsController",
  "NSUserInterfaceCompressionOptions",
  "NSUserNotification",
  "NSUserNotificationAction",
  "NSUserNotificationCenter",
  "NSUserScriptTask",
  "NSUserUnixTask",
  "NSUUID",
  "NSValue",
  "NSValueTransformer",
  "NSView",
  "NSViewAnimation",
  "NSViewController",
  "NSVisualEffectView",
  "NSWhoseSpecifier",
  "NSWindow",
  "NSWindowController",
  "NSWindowTab",
  "NSWindowTabGroup",
  "NSWorkspace",
  "NSWorkspaceOpenConfiguration",
  "NSXMLDocument",
  "NSXMLDTD",
  "NSXMLDTDNode",
  "NSXMLElement",
  "NSXMLNode",
  "NSXMLParser",
  "NSXPCCoder",
  "NSXPCConnection",
  "NSXPCInterface",
  "NSXPCListener",
  "QLPreviewPanel",
  "QLPreviewView",
  "QuartzFilter",
  "QuartzFilterManager",
  "QuartzFilterView"
]

class VueKitRegistration {
  let context: JSContext

  init(context: JSContext) {
    self.context = context
  }

  func classOrProtoFromString(_ name: String) -> Any? {
    let cls: AnyClass? = NSClassFromString(name)

    if cls != nil { return cls }

    let pro = NSProtocolFromString(name)

    if pro != nil { return pro }

//    print("! Could not load class nor protocol with name: \(name)")

    return nil
  }

  func registerClassOrProto(classOrProto: Any, bridgedName: String) {
    var out = "✔ Registered \(classOrProto) as "

    out += bridgedName

    context.setObject(
      classOrProto,
      forKeyedSubscript: bridgedName as (NSCopying & NSObjectProtocol)?)

    print(out)
  }

  func registerClasses() {
    let fm = FileManager.default
    let path = Bundle.main.resourcePath!

    for classToRegister in allClasses {
      var classType = classOrProtoFromString(classToRegister)

      if subclassed.contains(classToRegister) {
        let subclassName = String(classToRegister.dropFirst(2))
        let subClassType = classOrProtoFromString("VueKit." + subclassName)
        if (subClassType != nil) {
          classType = subClassType
        }
      }

      if (classType != nil) {
        registerClassOrProto(classOrProto: classType!, bridgedName: classToRegister)
      }
    }

    // TODO: build this list automatically + use subclasses like SegmentedControl below
    let tenderClasses = [
      // This is a HostElement/HostNode in Vue parlance
      // One of these is created for every vue vnode
      // (but this is not a vnode, this is vnode.el)
      // and is akin to an HTML element in the Vue DOM renderer
      // A VueKitNode has a 1:1 correspondence to an NSView, but
      // doesn't always contain an NSView (e.g. for comment/text nodes)
      "VueKitNode": VueKitNode.self,

//      "NSSegmentedControl": SegmentedControl.self,
//      "NSStackView": StackView.self,
//
      // Can't subclass non-views because we don't always instantiate these
      // This means it's possible to call invalid selectors on these objects and crash
      // the app. Proper typescript typings should prevent this, but the user will always
      // be able to trigger this in the safari console by entering e.g. `NSColor.redColor()`
      // which will trigger a crash "blackComponent not valid for the NSColor" because the
      // inspector is trying to call every method.
      // TODO: Possible idea for this is to use extensions and add respondsTo: to all these classes?
//      "NSColor": NSColor.self,
//      "NSBox": NSBox.self,
//      "NSFont": NSFont.self,
//      "NSEvent": NSEvent.self,
//      "NSWindow": NSWindow.self,
//      "CALayer": CALayer.self,
//      "NSGraphicsContext": NSGraphicsContext.self,
//      "NSBezierPath": NSBezierPath.self
    ]

    for (bridgedName, classToRegister) in tenderClasses {
      registerClassOrProto(classOrProto: classToRegister, bridgedName: bridgedName)
    }

    do {
      let frameworks = try fm.contentsOfDirectory(atPath: path + "/swift")

      for framework in frameworks {
        if framework.hasSuffix(".swift") { continue }

        let jsExportFilenames = try fm.contentsOfDirectory(atPath: path + "/swift/" + framework)

        for jsExportFilename in jsExportFilenames {
          let nameParts = jsExportFilename.split(separator: "+")
          let classToRegister = "\(nameParts[0])"

          registerClassOrProto(classOrProto: classOrProtoFromString(classToRegister).self as Any, bridgedName: classToRegister)
        }
      }
    } catch {
      print("! Failed to read directory \(path)")
    }
  }

}
