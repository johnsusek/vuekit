/* eslint-disable */

declare global {

  // interface
  class AVAsset extends NSObject {
    // ownInstanceProperties
    allMediaSelections: AVMediaSelection[];
    // ownInstanceProperties
    availableChapterLocales: NSLocale[];
    // ownInstanceProperties
    availableMediaCharacteristicsWithMediaSelectionOptions: string[];
    // ownInstanceProperties
    availableMetadataFormats: string[];
    // ownInstanceProperties
    canContainFragments: boolean;
    // ownInstanceProperties
    commonMetadata: AVMetadataItem[];
    // ownInstanceProperties
    isCompatibleWithAirPlayVideo: boolean;
    // ownInstanceProperties
    isComposable: boolean;
    // ownInstanceProperties
    containsFragments: boolean;
    // ownInstanceProperties
    creationDate: AVMetadataItem;
    // ownInstanceProperties
    duration: CMTime;
    // ownInstanceProperties
    isExportable: boolean;
    // ownInstanceProperties
    hasProtectedContent: boolean;
    // ownInstanceProperties
    lyrics: string;
    // ownInstanceProperties
    metadata: AVMetadataItem[];
    // ownInstanceProperties
    minimumTimeOffsetFromLive: CMTime;
    // ownInstanceProperties
    overallDurationHint: CMTime;
    // ownInstanceProperties
    isPlayable: boolean;
    // ownInstanceProperties
    preferredMediaSelection: AVMediaSelection;
    // ownInstanceProperties
    preferredRate: number;
    // ownInstanceProperties
    preferredTransform: CGAffineTransform;
    // ownInstanceProperties
    preferredVolume: number;
    // ownInstanceProperties
    providesPreciseDurationAndTiming: boolean;
    // ownInstanceProperties
    isReadable: boolean;
    // ownInstanceProperties
    referenceRestrictions: AVAssetReferenceRestrictions;
    // ownInstanceProperties
    trackGroups: AVAssetTrackGroup[];
    // ownInstanceProperties
    tracks: AVAssetTrack[];
    // compoundInstanceMethods
    cancelLoading(): void;
    // compoundInstanceMethods
    chapterMetadataGroupsBestMatchingPreferredLanguages(bestMatchingPreferredLanguages: string[]): AVTimedMetadataGroup[];
    // compoundInstanceMethods
    chapterMetadataGroupsWithTitleLocaleContainingItemsWithCommonKeys(withTitleLocale: NSLocale, containingItemsWithCommonKeys?: string[]): AVTimedMetadataGroup[];
    // compoundInstanceMethods
    mediaSelectionGroupForMediaCharacteristic(forMediaCharacteristic: string): AVMediaSelectionGroup;
    // compoundInstanceMethods
    metadataForFormat(forFormat: string): AVMetadataItem[];
    // compoundInstanceMethods
    trackWithTrackID(withTrackID: number): AVAssetTrack;
    // compoundInstanceMethods
    tracksWithMediaCharacteristic(withMediaCharacteristic: string): AVAssetTrack[];
    // compoundInstanceMethods
    tracksWithMediaType(withMediaType: string): AVAssetTrack[];
    // compoundInstanceMethods
    unusedTrackID(): number;
  }

  // interface
  class AVAssetCache extends NSObject {
    // ownInstanceProperties
    isPlayableOffline: boolean;
    // compoundInstanceMethods
    mediaSelectionOptionsInMediaSelectionGroup(in_: AVMediaSelectionGroup): AVMediaSelectionOption[];
  }

  // interface
  class AVAssetExportSession extends NSObject {
    // compoundStaticMethods
    static allExportPresets(): string[];
    // compoundStaticMethods
    static determineCompatibilityWithOfExportPresetWithOutputFileTypeCompletionHandler(ofExportPreset: string, with_: AVAsset, outputFileType?: string, completionHandler?: (p1: boolean) => void): void;
    // compoundStaticMethods
    static exportPresetsCompatibleWithAsset(compatibleWith: AVAsset): string[];
    // ownInstanceProperties
    asset: AVAsset;
    // ownInstanceProperties
    audioMix: AVAudioMix;
    setAudioMix(_: AVAudioMix)
    // ownInstanceProperties
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string)
    // ownInstanceProperties
    canPerformMultiplePassesOverSourceMediaData: boolean;
    setCanPerformMultiplePassesOverSourceMediaData(_: boolean)
    // ownInstanceProperties
    customVideoCompositor: AVVideoCompositing;
    // ownInstanceProperties
    directoryForTemporaryFiles: NSURL;
    setDirectoryForTemporaryFiles(_: NSURL)
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    estimatedOutputFileLength: number;
    // ownInstanceProperties
    fileLengthLimit: number;
    setFileLengthLimit(_: number)
    // ownInstanceProperties
    maxDuration: CMTime;
    // ownInstanceProperties
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[])
    // ownInstanceProperties
    metadataItemFilter: AVMetadataItemFilter;
    setMetadataItemFilter(_: AVMetadataItemFilter)
    // ownInstanceProperties
    outputFileType: string;
    setOutputFileType(_: string)
    // ownInstanceProperties
    outputURL: NSURL;
    setOutputURL(_: NSURL)
    // ownInstanceProperties
    presetName: string;
    // ownInstanceProperties
    progress: number;
    // ownInstanceProperties
    shouldOptimizeForNetworkUse: boolean;
    setShouldOptimizeForNetworkUse(_: boolean)
    // ownInstanceProperties
    status: AVAssetExportSession.Status;
    // ownInstanceProperties
    supportedFileTypes: string[];
    // ownInstanceProperties
    timeRange: CMTimeRange;
    setTimeRange(_: CMTimeRange)
    // ownInstanceProperties
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition)
    // compoundInstanceMethods
    cancelExport(): void;
    // compoundInstanceMethods
    determineCompatibleFileTypesWithCompletionHandler(completionHandler: (p1: string[]) => void): void;
    // compoundInstanceMethods
    estimateMaximumDurationWithCompletionHandler(completionHandler?: (p1: CMTime, p2: NSError) => void): void;
    // compoundInstanceMethods
    estimateOutputFileLengthWithCompletionHandler(completionHandler?: (p1: number, p2: NSError) => void): void;
    // compoundInstanceMethods
    exportAsynchronouslyWithCompletionHandler(completionHandler: () => void): void;
    // compoundInstanceMethods
    static createWithAssetPresetName(asset: AVAsset, presetName: string): AVAssetExportSession;
  }

  // interface
  class AVAssetImageGenerator extends NSObject {
    // ownInstanceProperties
    apertureMode: string;
    setApertureMode(_: string)
    // ownInstanceProperties
    appliesPreferredTrackTransform: boolean;
    setAppliesPreferredTrackTransform(_: boolean)
    // ownInstanceProperties
    asset: AVAsset;
    // ownInstanceProperties
    customVideoCompositor: AVVideoCompositing;
    // ownInstanceProperties
    maximumSize: CGSize;
    setMaximumSize(_: CGSize)
    // ownInstanceProperties
    requestedTimeToleranceAfter: CMTime;
    setRequestedTimeToleranceAfter(_: CMTime)
    // ownInstanceProperties
    requestedTimeToleranceBefore: CMTime;
    setRequestedTimeToleranceBefore(_: CMTime)
    // ownInstanceProperties
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition)
    // compoundInstanceMethods
    cancelAllCGImageGeneration(): void;
    // compoundInstanceMethods
    copyCGImageAtTimeActualTimeError(actualTime: CMTime, error?: CMTime): any;
    // compoundInstanceMethods
    generateCGImagesAsynchronouslyWithForTimesCompletionHandler(forTimes: NSValue[], completionHandler: (p1: CMTime, p2: any, p3: CMTime, p4: AVAssetImageGenerator.Result, p5: NSError) => void): void;
    // compoundInstanceMethods
    static createWithAsset(asset: AVAsset): AVAssetImageGenerator;
  }

  // interface
  class AVAssetReader extends NSObject {
    // compoundStaticMethods
    static assetReaderWithAssetError(error: AVAsset): AVAssetReader;
    // ownInstanceProperties
    asset: AVAsset;
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    outputs: AVAssetReaderOutput[];
    // ownInstanceProperties
    status: AVAssetReader.Status;
    // ownInstanceProperties
    timeRange: CMTimeRange;
    setTimeRange(_: CMTimeRange)
    // compoundInstanceMethods
    addOutput(_: AVAssetReaderOutput): void;
    // compoundInstanceMethods
    canAddOutput(_: AVAssetReaderOutput): boolean;
    // compoundInstanceMethods
    cancelReading(): void;
    // compoundInstanceMethods
    static createWithAsset(asset: AVAsset): AVAssetReader;
    // compoundInstanceMethods
    startReading(): boolean;
  }

  // interface
  class AVAssetReaderAudioMixOutput extends AVAssetReaderOutput {
    // compoundStaticMethods
    static assetReaderAudioMixOutputWithAudioTracksAudioSettings(audioTracks: AVAssetTrack[], audioSettings?: Map<string, any>): AVAssetReaderAudioMixOutput;
    // ownInstanceProperties
    audioMix: AVAudioMix;
    setAudioMix(_: AVAudioMix)
    // ownInstanceProperties
    audioSettings: Map<string, any>;
    // ownInstanceProperties
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string)
    // ownInstanceProperties
    audioTracks: AVAssetTrack[];
    // compoundInstanceMethods
    static createWithAudioTracksAudioSettings(audioTracks: AVAssetTrack[], audioSettings?: Map<string, any>): AVAssetReaderAudioMixOutput;
  }

  // interface
  class AVAssetReaderOutput extends NSObject {
    // ownInstanceProperties
    alwaysCopiesSampleData: boolean;
    setAlwaysCopiesSampleData(_: boolean)
    // ownInstanceProperties
    mediaType: string;
    // ownInstanceProperties
    supportsRandomAccess: boolean;
    setSupportsRandomAccess(_: boolean)
    // compoundInstanceMethods
    copyNextSampleBuffer(): any;
    // compoundInstanceMethods
    markConfigurationAsFinal(): void;
    // compoundInstanceMethods
    resetForReadingTimeRanges(forReadingTimeRanges: NSValue[]): void;
  }

  // interface
  class AVAssetReaderOutputMetadataAdaptor extends NSObject {
    // compoundStaticMethods
    static assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput(assetReaderTrackOutput: AVAssetReaderTrackOutput): AVAssetReaderOutputMetadataAdaptor;
    // ownInstanceProperties
    assetReaderTrackOutput: AVAssetReaderTrackOutput;
    // compoundInstanceMethods
    static createWithAssetReaderTrackOutput(assetReaderTrackOutput: AVAssetReaderTrackOutput): AVAssetReaderOutputMetadataAdaptor;
    // compoundInstanceMethods
    nextTimedMetadataGroup(): AVTimedMetadataGroup;
  }

  // interface
  class AVAssetReaderSampleReferenceOutput extends AVAssetReaderOutput {
    // compoundStaticMethods
    static assetReaderSampleReferenceOutputWithTrack(track: AVAssetTrack): AVAssetReaderSampleReferenceOutput;
    // ownInstanceProperties
    track: AVAssetTrack;
    // compoundInstanceMethods
    static createWithTrack(track: AVAssetTrack): AVAssetReaderSampleReferenceOutput;
  }

  // interface
  class AVAssetReaderTrackOutput extends AVAssetReaderOutput {
    // compoundStaticMethods
    static assetReaderTrackOutputWithTrackOutputSettings(track: AVAssetTrack, outputSettings?: Map<string, any>): AVAssetReaderTrackOutput;
    // ownInstanceProperties
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string)
    // ownInstanceProperties
    outputSettings: Map<string, any>;
    // ownInstanceProperties
    track: AVAssetTrack;
    // compoundInstanceMethods
    static createWithTrackOutputSettings(track: AVAssetTrack, outputSettings?: Map<string, any>): AVAssetReaderTrackOutput;
  }

  // interface
  class AVAssetReaderVideoCompositionOutput extends AVAssetReaderOutput {
    // compoundStaticMethods
    static assetReaderVideoCompositionOutputWithVideoTracksVideoSettings(videoTracks: AVAssetTrack[], videoSettings?: Map<string, any>): AVAssetReaderVideoCompositionOutput;
    // ownInstanceProperties
    customVideoCompositor: AVVideoCompositing;
    // ownInstanceProperties
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition)
    // ownInstanceProperties
    videoSettings: Map<string, any>;
    // ownInstanceProperties
    videoTracks: AVAssetTrack[];
    // compoundInstanceMethods
    static createWithVideoTracksVideoSettings(videoTracks: AVAssetTrack[], videoSettings?: Map<string, any>): AVAssetReaderVideoCompositionOutput;
  }

  // interface
  class AVAssetResourceLoader extends NSObject {
    // ownInstanceProperties
    delegate: AVAssetResourceLoaderDelegate;
    // ownInstanceProperties
    delegateQueue: NSObject;
    // ownInstanceProperties
    preloadsEligibleContentKeys: boolean;
    setPreloadsEligibleContentKeys(_: boolean)
    // compoundInstanceMethods
    setDelegateQueue(_?: AVAssetResourceLoaderDelegate, queue?: NSObject): void;
  }

  interface AVAssetResourceLoaderDelegate extends NSObject {
    // instance method
    resourceLoaderDidCancelLoadingRequest?(_: AVAssetResourceLoader, didCancel: AVAssetResourceLoadingRequest): void;
    // instance method
    resourceLoaderShouldWaitForResponseToAuthenticationChallenge?(_: AVAssetResourceLoader, shouldWaitForResponseTo: URLAuthenticationChallenge): boolean;
    // instance method
    resourceLoaderDidCancelAuthenticationChallenge?(_: AVAssetResourceLoader, didCancel: URLAuthenticationChallenge): void;
    // instance method
    resourceLoaderShouldWaitForLoadingOfRequestedResource?(_: AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource: AVAssetResourceLoadingRequest): boolean;
    // instance method
    resourceLoaderShouldWaitForRenewalOfRequestedResource?(_: AVAssetResourceLoader, shouldWaitForRenewalOfRequestedResource: AVAssetResourceRenewalRequest): boolean;
  }

  // interface
  class AVAssetResourceLoadingContentInformationRequest extends NSObject {
    // ownInstanceProperties
    allowedContentTypes: string[];
    // ownInstanceProperties
    isByteRangeAccessSupported: boolean;
    setByteRangeAccessSupported(_: boolean)
    // ownInstanceProperties
    contentLength: number;
    setContentLength(_: number)
    // ownInstanceProperties
    contentType: string;
    setContentType(_: string)
    // ownInstanceProperties
    renewalDate: Date;
    setRenewalDate(_: Date)
  }

  // interface
  class AVAssetResourceLoadingDataRequest extends NSObject {
    // ownInstanceProperties
    currentOffset: number;
    // ownInstanceProperties
    requestedLength: number;
    // ownInstanceProperties
    requestedOffset: number;
    // ownInstanceProperties
    requestsAllDataToEndOfResource: boolean;
    // compoundInstanceMethods
    respondWithData(with_: NSData): void;
  }

  // interface
  class AVAssetResourceLoadingRequest extends NSObject {
    // ownInstanceProperties
    isCancelled: boolean;
    // ownInstanceProperties
    contentInformationRequest: AVAssetResourceLoadingContentInformationRequest;
    // ownInstanceProperties
    dataRequest: AVAssetResourceLoadingDataRequest;
    // ownInstanceProperties
    isFinished: boolean;
    // ownInstanceProperties
    redirect: NSURLRequest;
    setRedirect(_: NSURLRequest)
    // ownInstanceProperties
    request: NSURLRequest;
    // ownInstanceProperties
    requestor: AVAssetResourceLoadingRequestor;
    // ownInstanceProperties
    response: URLResponse;
    setResponse(_: URLResponse)
    // compoundInstanceMethods
    finishLoading(): void;
    // compoundInstanceMethods
    finishLoadingWithError(with_?: NSError): void;
    // compoundInstanceMethods
    persistentContentKeyFromKeyVendorResponseOptionsError(options: NSData, error?: Map<string, any>): NSData;
    // compoundInstanceMethods
    streamingContentKeyRequestDataForAppContentIdentifierOptionsError(contentIdentifier: NSData, options: NSData, error?: Map<string, any>): NSData;
  }

  // interface
  class AVAssetResourceLoadingRequestor extends NSObject {
    // ownInstanceProperties
    providesExpiredSessionReports: boolean;
  }

  // interface
  class AVAssetResourceRenewalRequest extends AVAssetResourceLoadingRequest {
  }

  // interface
  class AVAssetTrack extends NSObject {
    // ownInstanceProperties
    asset: AVAsset;
    // ownInstanceProperties
    availableMetadataFormats: string[];
    // ownInstanceProperties
    availableTrackAssociationTypes: string[];
    // ownInstanceProperties
    canProvideSampleCursors: boolean;
    // ownInstanceProperties
    commonMetadata: AVMetadataItem[];
    // ownInstanceProperties
    isDecodable: boolean;
    // ownInstanceProperties
    isEnabled: boolean;
    // ownInstanceProperties
    estimatedDataRate: number;
    // ownInstanceProperties
    extendedLanguageTag: string;
    // ownInstanceProperties
    formatDescriptions: any[];
    // ownInstanceProperties
    hasAudioSampleDependencies: boolean;
    // ownInstanceProperties
    languageCode: string;
    // ownInstanceProperties
    mediaType: string;
    // ownInstanceProperties
    metadata: AVMetadataItem[];
    // ownInstanceProperties
    minFrameDuration: CMTime;
    // ownInstanceProperties
    naturalSize: CGSize;
    // ownInstanceProperties
    naturalTimeScale: number;
    // ownInstanceProperties
    nominalFrameRate: number;
    // ownInstanceProperties
    isPlayable: boolean;
    // ownInstanceProperties
    preferredTransform: CGAffineTransform;
    // ownInstanceProperties
    preferredVolume: number;
    // ownInstanceProperties
    requiresFrameReordering: boolean;
    // ownInstanceProperties
    segments: AVAssetTrackSegment[];
    // ownInstanceProperties
    isSelfContained: boolean;
    // ownInstanceProperties
    timeRange: CMTimeRange;
    // ownInstanceProperties
    totalSampleDataLength: number;
    // ownInstanceProperties
    trackID: number;
    // compoundInstanceMethods
    associatedTracksOfType(ofType: string): AVAssetTrack[];
    // compoundInstanceMethods
    hasMediaCharacteristic(_: string): boolean;
    // compoundInstanceMethods
    makeSampleCursorAtFirstSampleInDecodeOrder(): AVSampleCursor;
    // compoundInstanceMethods
    makeSampleCursorAtLastSampleInDecodeOrder(): AVSampleCursor;
    // compoundInstanceMethods
    makeSampleCursorWithPresentationTimeStamp(presentationTimeStamp: CMTime): AVSampleCursor;
    // compoundInstanceMethods
    metadataForFormat(forFormat: string): AVMetadataItem[];
    // compoundInstanceMethods
    samplePresentationTimeForTrackTime(forTrackTime: CMTime): CMTime;
    // compoundInstanceMethods
    segmentForTrackTime(forTrackTime: CMTime): AVAssetTrackSegment;
  }

  // interface
  class AVAssetTrackGroup extends NSObject {
    // ownInstanceProperties
    trackIDs: number[];
  }

  // interface
  class AVAssetTrackSegment extends NSObject {
    // ownInstanceProperties
    isEmpty: boolean;
    // ownInstanceProperties
    timeMapping: CMTimeMapping;
  }

  // interface
  class AVAssetWriter extends NSObject {
    // compoundStaticMethods
    static assetWriterWithURLFileTypeError(fileType: NSURL, error: string): AVAssetWriter;
    // ownInstanceProperties
    availableMediaTypes: string[];
    // ownInstanceProperties
    directoryForTemporaryFiles: NSURL;
    setDirectoryForTemporaryFiles(_: NSURL)
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    inputGroups: AVAssetWriterInputGroup[];
    // ownInstanceProperties
    inputs: AVAssetWriterInput[];
    // ownInstanceProperties
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[])
    // ownInstanceProperties
    movieFragmentInterval: CMTime;
    setMovieFragmentInterval(_: CMTime)
    // ownInstanceProperties
    movieTimeScale: number;
    setMovieTimeScale(_: number)
    // ownInstanceProperties
    outputFileType: string;
    // ownInstanceProperties
    outputURL: NSURL;
    // ownInstanceProperties
    overallDurationHint: CMTime;
    setOverallDurationHint(_: CMTime)
    // ownInstanceProperties
    shouldOptimizeForNetworkUse: boolean;
    setShouldOptimizeForNetworkUse(_: boolean)
    // ownInstanceProperties
    status: AVAssetWriter.Status;
    // compoundInstanceMethods
    addInput(_: AVAssetWriterInput): void;
    // compoundInstanceMethods
    addInputGroup(_: AVAssetWriterInputGroup): void;
    // compoundInstanceMethods
    canAddInput(_: AVAssetWriterInput): boolean;
    // compoundInstanceMethods
    canAddInputGroup(_: AVAssetWriterInputGroup): boolean;
    // compoundInstanceMethods
    canApplyOutputSettingsForMediaType(outputSettings?: Map<string, any>, forMediaType?: string): boolean;
    // compoundInstanceMethods
    cancelWriting(): void;
    // compoundInstanceMethods
    endSessionAtSourceTime(atSourceTime: CMTime): void;
    // compoundInstanceMethods
    finishWritingWithCompletionHandler(completionHandler: () => void): void;
    // compoundInstanceMethods
    static createWithUrlFileType(URL: NSURL, fileType: string): AVAssetWriter;
    // compoundInstanceMethods
    startSessionAtSourceTime(atSourceTime: CMTime): void;
    // compoundInstanceMethods
    startWriting(): boolean;
  }

  // interface
  class AVAssetWriterInput extends NSObject {
    // ownInstanceProperties
    canPerformMultiplePasses: boolean;
    // ownInstanceProperties
    currentPassDescription: AVAssetWriterInputPassDescription;
    // ownInstanceProperties
    expectsMediaDataInRealTime: boolean;
    setExpectsMediaDataInRealTime(_: boolean)
    // ownInstanceProperties
    extendedLanguageTag: string;
    setExtendedLanguageTag(_: string)
    // ownInstanceProperties
    languageCode: string;
    setLanguageCode(_: string)
    // ownInstanceProperties
    marksOutputTrackAsEnabled: boolean;
    setMarksOutputTrackAsEnabled(_: boolean)
    // ownInstanceProperties
    mediaDataLocation: string;
    setMediaDataLocation(_: string)
    // ownInstanceProperties
    mediaTimeScale: number;
    setMediaTimeScale(_: number)
    // ownInstanceProperties
    mediaType: string;
    // ownInstanceProperties
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[])
    // ownInstanceProperties
    naturalSize: CGSize;
    setNaturalSize(_: CGSize)
    // ownInstanceProperties
    outputSettings: Map<string, any>;
    // ownInstanceProperties
    performsMultiPassEncodingIfSupported: boolean;
    setPerformsMultiPassEncodingIfSupported(_: boolean)
    // ownInstanceProperties
    preferredMediaChunkAlignment: number;
    setPreferredMediaChunkAlignment(_: number)
    // ownInstanceProperties
    preferredMediaChunkDuration: CMTime;
    setPreferredMediaChunkDuration(_: CMTime)
    // ownInstanceProperties
    preferredVolume: number;
    setPreferredVolume(_: number)
    // ownInstanceProperties
    isReadyForMoreMediaData: boolean;
    // ownInstanceProperties
    sampleReferenceBaseURL: NSURL;
    setSampleReferenceBaseURL(_: NSURL)
    // ownInstanceProperties
    sourceFormatHint: any;
    // ownInstanceProperties
    transform: CGAffineTransform;
    setTransform(_: CGAffineTransform)
    // compoundInstanceMethods
    addTrackAssociationWithTrackOfInputType(withTrackOf: AVAssetWriterInput, type: string): void;
    // compoundInstanceMethods
    appendSampleBuffer(_: any): boolean;
    // compoundInstanceMethods
    canAddTrackAssociationWithTrackOfInputType(withTrackOf: AVAssetWriterInput, type: string): boolean;
    // compoundInstanceMethods
    static createWithMediaTypeOutputSettings(mediaType: string, outputSettings?: Map<string, any>): AVAssetWriterInput;
    // compoundInstanceMethods
    static createWithMediaTypeOutputSettingsSourceFormatHint(mediaType: string, outputSettings?: Map<string, any>, sourceFormatHint?: any): AVAssetWriterInput;
    // compoundInstanceMethods
    markAsFinished(): void;
    // compoundInstanceMethods
    markCurrentPassAsFinished(): void;
    // compoundInstanceMethods
    requestMediaDataWhenReadyWithOnUsing(on: NSObject, using: () => void): void;
    // compoundInstanceMethods
    respondToEachPassDescriptionWithOnUsing(on: NSObject, using: () => void): void;
  }

  // interface
  class AVAssetWriterInputGroup extends AVMediaSelectionGroup {
    // compoundStaticMethods
    static assetWriterInputGroupWithInputsDefaultInput(inputs: AVAssetWriterInput[], defaultInput?: AVAssetWriterInput): AVAssetWriterInputGroup;
    // ownInstanceProperties
    defaultInput: AVAssetWriterInput;
    // ownInstanceProperties
    inputs: AVAssetWriterInput[];
    // compoundInstanceMethods
    static createWithInputsDefaultInput(inputs: AVAssetWriterInput[], defaultInput?: AVAssetWriterInput): AVAssetWriterInputGroup;
  }

  // interface
  class AVAssetWriterInputMetadataAdaptor extends NSObject {
    // compoundStaticMethods
    static assetWriterInputMetadataAdaptorWithAssetWriterInput(assetWriterInput: AVAssetWriterInput): AVAssetWriterInputMetadataAdaptor;
    // ownInstanceProperties
    assetWriterInput: AVAssetWriterInput;
    // compoundInstanceMethods
    appendTimedMetadataGroup(_: AVTimedMetadataGroup): boolean;
    // compoundInstanceMethods
    static createWithAssetWriterInput(assetWriterInput: AVAssetWriterInput): AVAssetWriterInputMetadataAdaptor;
  }

  // interface
  class AVAssetWriterInputPassDescription extends NSObject {
    // ownInstanceProperties
    sourceTimeRanges: NSValue[];
  }

  // interface
  class AVAssetWriterInputPixelBufferAdaptor extends NSObject {
    // compoundStaticMethods
    static assetWriterInputPixelBufferAdaptorWithAssetWriterInputSourcePixelBufferAttributes(assetWriterInput: AVAssetWriterInput, sourcePixelBufferAttributes?: Map<string, any>): AVAssetWriterInputPixelBufferAdaptor;
    // ownInstanceProperties
    assetWriterInput: AVAssetWriterInput;
    // ownInstanceProperties
    pixelBufferPool: any;
    // ownInstanceProperties
    sourcePixelBufferAttributes: Map<string, any>;
    // compoundInstanceMethods
    appendPixelBufferWithPresentationTime(_: any, withPresentationTime: CMTime): boolean;
    // compoundInstanceMethods
    static createWithAssetWriterInputSourcePixelBufferAttributes(assetWriterInput: AVAssetWriterInput, sourcePixelBufferAttributes?: Map<string, any>): AVAssetWriterInputPixelBufferAdaptor;
  }

  // interface
  class AVAsynchronousCIImageFilteringRequest extends NSObject {
    // ownInstanceProperties
    compositionTime: CMTime;
    // ownInstanceProperties
    renderSize: CGSize;
    // ownInstanceProperties
    sourceImage: CIImage;
    // compoundInstanceMethods
    finishWithError(with_: NSError): void;
    // compoundInstanceMethods
    finishWithImageContext(with_: CIImage, context?: CIContext): void;
  }

  interface AVAsynchronousKeyValueLoading {
    // instance method
    loadValuesAsynchronouslyWithForKeysCompletionHandler(forKeys: string[], completionHandler?: () => void): void;
    // instance method
    statusOfValueForKeyError(forKey: string): AVKeyValueStatus;
  }

  // interface
  class AVAsynchronousVideoCompositionRequest extends NSObject {
    // ownInstanceProperties
    compositionTime: CMTime;
    // ownInstanceProperties
    renderContext: AVVideoCompositionRenderContext;
    // ownInstanceProperties
    sourceTrackIDs: number[];
    // ownInstanceProperties
    videoCompositionInstruction: AVVideoCompositionInstruction;
    // compoundInstanceMethods
    finishCancelledRequest(): void;
    // compoundInstanceMethods
    finishWithComposedVideoFrame(withComposedVideoFrame: any): void;
    // compoundInstanceMethods
    finishWithError(with_: NSError): void;
    // compoundInstanceMethods
    sourceFrameByTrackID(byTrackID: number): any;
  }

  interface AVAudio3DMixing extends NSObject {
    obstruction: number;
    setObstruction(_: number)
    occlusion: number;
    setOcclusion(_: number)
    pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode;
    setPointSourceInHeadMode(_: AVAudio3DMixingPointSourceInHeadMode)
    // position: AVFAudio.AVAudioTypes;
    // setPosition(_: AVFAudio.AVAudioTypes)
    rate: number;
    setRate(_: number)
    renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm;
    setRenderingAlgorithm(_: AVAudio3DMixingRenderingAlgorithm)
    reverbBlend: number;
    setReverbBlend(_: number)
    sourceMode: AVAudio3DMixingSourceMode;
    setSourceMode(_: AVAudio3DMixingSourceMode)
  }

  // interface
  class AVAudioBuffer extends NSObject {
    // ownInstanceProperties
    audioBufferList: AudioBufferList;
    // ownInstanceProperties
    format: AVAudioFormat;
    // ownInstanceProperties
    mutableAudioBufferList: AudioBufferList;
  }

  // interface
  class AVAudioChannelLayout extends NSObject {
    // ownInstanceProperties
    channelCount: number;
    // ownInstanceProperties
    layout: AudioChannelLayout;
    // ownInstanceProperties
    layoutTag: number;
    // compoundInstanceMethods
    static createWithLayout(layout: AudioChannelLayout): AVAudioChannelLayout;
    // compoundInstanceMethods
    static createWithLayoutTag(layoutTag: number): AVAudioChannelLayout;
  }

  // interface
  class AVAudioCompressedBuffer extends AVAudioBuffer {
    // ownInstanceProperties
    byteCapacity: number;
    // ownInstanceProperties
    byteLength: number;
    setByteLength(_: number)
    // ownInstanceProperties
    data: any;
    // ownInstanceProperties
    maximumPacketSize: number;
    // ownInstanceProperties
    packetCapacity: number;
    // ownInstanceProperties
    packetCount: number;
    setPacketCount(_: number)
    // ownInstanceProperties
    packetDescriptions: AudioStreamPacketDescription;
    // compoundInstanceMethods
    static createWithFormatPacketCapacity(format: AVAudioFormat, packetCapacity: number): AVAudioCompressedBuffer;
    // compoundInstanceMethods
    static createWithFormatPacketCapacityMaximumPacketSize(format: AVAudioFormat, packetCapacity: number, maximumPacketSize: number): AVAudioCompressedBuffer;
  }

  // interface
  class AVAudioConnectionPoint extends NSObject {
    // ownInstanceProperties
    bus: number;
    // ownInstanceProperties
    node: AVAudioNode;
    // compoundInstanceMethods
    static createWithNodeBus(node: AVAudioNode, bus: number): AVAudioConnectionPoint;
  }

  // interface
  class AVAudioConverter extends NSObject {
    // ownInstanceProperties
    applicableEncodeBitRates: number[];
    // ownInstanceProperties
    applicableEncodeSampleRates: number[];
    // ownInstanceProperties
    availableEncodeBitRates: number[];
    // ownInstanceProperties
    availableEncodeChannelLayoutTags: number[];
    // ownInstanceProperties
    availableEncodeSampleRates: number[];
    // ownInstanceProperties
    bitRate: number;
    setBitRate(_: number)
    // ownInstanceProperties
    bitRateStrategy: string;
    setBitRateStrategy(_: string)
    // ownInstanceProperties
    channelMap: number[];
    setChannelMap(_: number[])
    // ownInstanceProperties
    dither: boolean;
    setDither(_: boolean)
    // ownInstanceProperties
    downmix: boolean;
    setDownmix(_: boolean)
    // ownInstanceProperties
    inputFormat: AVAudioFormat;
    // ownInstanceProperties
    magicCookie: NSData;
    setMagicCookie(_: NSData)
    // ownInstanceProperties
    maximumOutputPacketSize: number;
    // ownInstanceProperties
    outputFormat: AVAudioFormat;
    // ownInstanceProperties
    primeInfo: AVFAudio.AVAudioConverter;
    setPrimeInfo(_: AVFAudio.AVAudioConverter)
    // ownInstanceProperties
    primeMethod: AVAudioConverterPrimeMethod;
    setPrimeMethod(_: AVAudioConverterPrimeMethod)
    // ownInstanceProperties
    sampleRateConverterAlgorithm: string;
    setSampleRateConverterAlgorithm(_: string)
    // ownInstanceProperties
    sampleRateConverterQuality: number;
    setSampleRateConverterQuality(_: number)
    // compoundInstanceMethods
    convertWithToErrorWithInputFrom(to: AVAudioBuffer, error?: Error, withInputFrom?: (p1: number, p2: AVAudioConverterInputStatus) => AVAudioBuffer): AVAudioConverterOutputStatus;
    // compoundInstanceMethods
    convertToBufferFromBufferError(fromBuffer: AVAudioPCMBuffer, error: AVAudioPCMBuffer): boolean;
    // compoundInstanceMethods
    static createWithFromFormatToFormat(fromFormat: AVAudioFormat, toFormat: AVAudioFormat): AVAudioConverter;
    // compoundInstanceMethods
    reset(): void;
  }

  // interface
  class AVAudioEngine extends NSObject {
    // ownInstanceProperties
    attachedNodes: NSSet<AVAudioNode>;
    // ownInstanceProperties
    isAutoShutdownEnabled: boolean;
    setAutoShutdownEnabled(_: boolean)
    // ownInstanceProperties
    inputNode: AVAudioInputNode;
    // ownInstanceProperties
    isInManualRenderingMode: boolean;
    // ownInstanceProperties
    mainMixerNode: AVAudioMixerNode;
    // ownInstanceProperties
    manualRenderingBlock: (p1: number, p2: AudioBufferList, p3: number) => AVAudioEngineManualRenderingStatus;
    // ownInstanceProperties
    manualRenderingFormat: AVAudioFormat;
    // ownInstanceProperties
    manualRenderingMaximumFrameCount: number;
    // ownInstanceProperties
    manualRenderingMode: AVAudioEngineManualRenderingMode;
    // ownInstanceProperties
    manualRenderingSampleTime: number;
    // ownInstanceProperties
    musicSequence: any;
    setMusicSequence(_: any)
    // ownInstanceProperties
    outputNode: AVAudioOutputNode;
    // ownInstanceProperties
    isRunning: boolean;
    // compoundInstanceMethods
    attachNode(_: AVAudioNode): void;
    // compoundInstanceMethods
    connectToFormat(_: AVAudioNode, to: AVAudioNode, format?: AVAudioFormat): void;
    // compoundInstanceMethods
    connectToFromBusToBusFormat(_: AVAudioNode, to: AVAudioNode, fromBus: number, toBus: number, format?: AVAudioFormat): void;
    // compoundInstanceMethods
    connectToConnectionPointsFromBusFormat(_: AVAudioNode, to: AVAudioConnectionPoint[], fromBus: number, format?: AVAudioFormat): void;
    // compoundInstanceMethods
    connectMIDIWithToFormatBlock(_: AVAudioNode, to: AVAudioNode, format?: AVAudioFormat, block?: (p1: number, p2: number, p3: number, p4: string) => number): void;
    // compoundInstanceMethods
    connectMIDIToFormatBlock(_: AVAudioNode, to: AVAudioNode[], format?: AVAudioFormat, block?: (p1: number, p2: number, p3: number, p4: string) => number): void;
    // compoundInstanceMethods
    detachNode(_: AVAudioNode): void;
    // compoundInstanceMethods
    disableManualRenderingMode(): void;
    // compoundInstanceMethods
    disconnectMIDIFrom(_: AVAudioNode, from: AVAudioNode): void;
    // compoundInstanceMethods
    disconnectMIDIFromNodes(_: AVAudioNode, from: AVAudioNode[]): void;
    // compoundInstanceMethods
    disconnectMIDIInput(_: AVAudioNode): void;
    // compoundInstanceMethods
    disconnectMIDIOutput(_: AVAudioNode): void;
    // compoundInstanceMethods
    disconnectNodeInput(_: AVAudioNode): void;
    // compoundInstanceMethods
    disconnectNodeInputBus(_: AVAudioNode, bus: number): void;
    // compoundInstanceMethods
    disconnectNodeOutput(_: AVAudioNode): void;
    // compoundInstanceMethods
    disconnectNodeOutputBus(_: AVAudioNode, bus: number): void;
    // compoundInstanceMethods
    enableManualRenderingModeFormatMaximumFrameCountError(format: AVAudioEngineManualRenderingMode, maximumFrameCount: AVAudioFormat, error: number): boolean;
    // compoundInstanceMethods
    inputConnectionPointForNodeInputBus(for_: AVAudioNode, inputBus: number): AVAudioConnectionPoint;
    // compoundInstanceMethods
    outputConnectionPointsForNodeOutputBus(for_: AVAudioNode, outputBus: number): AVAudioConnectionPoint[];
    // compoundInstanceMethods
    pause(): void;
    // compoundInstanceMethods
    prepare(): void;
    // compoundInstanceMethods
    renderOfflineToBufferError(toBuffer: number, error: AVAudioPCMBuffer): AVAudioEngineManualRenderingStatus;
    // compoundInstanceMethods
    reset(): void;
    // compoundInstanceMethods
    startAndReturnError(): boolean;
    // compoundInstanceMethods
    stop(): void;
  }

  // interface
  class AVAudioEnvironmentDistanceAttenuationParameters extends NSObject {
    // ownInstanceProperties
    distanceAttenuationModel: AVAudioEnvironmentDistanceAttenuationModel;
    setDistanceAttenuationModel(_: AVAudioEnvironmentDistanceAttenuationModel)
    // ownInstanceProperties
    maximumDistance: number;
    setMaximumDistance(_: number)
    // ownInstanceProperties
    referenceDistance: number;
    setReferenceDistance(_: number)
    // ownInstanceProperties
    rolloffFactor: number;
    setRolloffFactor(_: number)
  }

  // interface
  class AVAudioEnvironmentNode extends AVAudioNode {
    // ownInstanceProperties
    applicableRenderingAlgorithms: number[];
    // ownInstanceProperties
    distanceAttenuationParameters: AVAudioEnvironmentDistanceAttenuationParameters;
    // ownInstanceProperties
    // listenerAngularOrientation: AVFAudio.AVAudioTypes;
    // setListenerAngularOrientation(_: AVFAudio.AVAudioTypes)
    // ownInstanceProperties
    // listenerPosition: AVFAudio.AVAudioTypes;
    // setListenerPosition(_: AVFAudio.AVAudioTypes)
    // ownInstanceProperties
    // listenerVectorOrientation: AVFAudio.AVAudioTypes;
    // setListenerVectorOrientation(_: AVFAudio.AVAudioTypes)
    // ownInstanceProperties
    nextAvailableInputBus: number;
    // ownInstanceProperties
    outputType: AVAudioEnvironmentOutputType;
    setOutputType(_: AVAudioEnvironmentOutputType)
    // ownInstanceProperties
    outputVolume: number;
    setOutputVolume(_: number)
    // ownInstanceProperties
    reverbParameters: AVAudioEnvironmentReverbParameters;
  }

  // interface
  class AVAudioEnvironmentReverbParameters extends NSObject {
    // ownInstanceProperties
    enable: boolean;
    setEnable(_: boolean)
    // ownInstanceProperties
    filterParameters: AVAudioUnitEQFilterParameters;
    // ownInstanceProperties
    level: number;
    setLevel(_: number)
    // compoundInstanceMethods
    loadFactoryReverbPreset(_: AVAudioUnitReverbPreset): void;
  }

  // interface
  class AVAudioFile extends NSObject {
    // ownInstanceProperties
    fileFormat: AVAudioFormat;
    // ownInstanceProperties
    framePosition: number;
    setFramePosition(_: number)
    // ownInstanceProperties
    length: number;
    // ownInstanceProperties
    processingFormat: AVAudioFormat;
    // ownInstanceProperties
    url: NSURL;
    // compoundInstanceMethods
    static createWithForReadingCommonFormatInterleaved(forReading: NSURL, commonFormat: AVAudioCommonFormat, interleaved: boolean): AVAudioFile;
    // compoundInstanceMethods
    static createWithForReading(forReading: NSURL): AVAudioFile;
    // compoundInstanceMethods
    static createWithForWritingSettingsCommonFormatInterleaved(forWriting: NSURL, settings: Map<string, any>, commonFormat: AVAudioCommonFormat, interleaved: boolean): AVAudioFile;
    // compoundInstanceMethods
    static createWithForWritingSettings(forWriting: NSURL, settings: Map<string, any>): AVAudioFile;
    // compoundInstanceMethods
    readIntoBufferError(error: AVAudioPCMBuffer): boolean;
    // compoundInstanceMethods
    readIntoBufferFrameCountError(frameCount: AVAudioPCMBuffer, error: number): boolean;
    // compoundInstanceMethods
    writeFromBufferError(error: AVAudioPCMBuffer): boolean;
  }

  // interface
  class AVAudioFormat extends NSObject {
    // ownInstanceProperties
    channelCount: number;
    // ownInstanceProperties
    channelLayout: AVAudioChannelLayout;
    // ownInstanceProperties
    commonFormat: AVAudioCommonFormat;
    // ownInstanceProperties
    formatDescription: any;
    // ownInstanceProperties
    isInterleaved: boolean;
    // ownInstanceProperties
    magicCookie: NSData;
    setMagicCookie(_: NSData)
    // ownInstanceProperties
    sampleRate: number;
    // ownInstanceProperties
    settings: Map<string, any>;
    // ownInstanceProperties
    isStandard: boolean;
    // ownInstanceProperties
    streamDescription: AudioStreamBasicDescription;
    // compoundInstanceMethods
    static createWithStandardFormatWithSampleRateChannelLayout(standardFormatWithSampleRate: number, channelLayout: AVAudioChannelLayout): AVAudioFormat;
    // compoundInstanceMethods
    static createWithStandardFormatWithSampleRateChannels(standardFormatWithSampleRate: number, channels: number): AVAudioFormat;
    // compoundInstanceMethods
    static createWithCMAudioFormatDescription(CMAudioFormatDescription: any): AVAudioFormat;
    // compoundInstanceMethods
    static createWithCommonFormatSampleRateChannelsInterleaved(commonFormat: AVAudioCommonFormat, sampleRate: number, channels: number, interleaved: boolean): AVAudioFormat;
    // compoundInstanceMethods
    static createWithCommonFormatSampleRateInterleavedChannelLayout(commonFormat: AVAudioCommonFormat, sampleRate: number, interleaved: boolean, channelLayout: AVAudioChannelLayout): AVAudioFormat;
    // compoundInstanceMethods
    static createWithSettings(settings: Map<string, any>): AVAudioFormat;
    // compoundInstanceMethods
    static createWithStreamDescription(streamDescription: AudioStreamBasicDescription): AVAudioFormat;
    // compoundInstanceMethods
    static createWithStreamDescriptionChannelLayout(streamDescription: AudioStreamBasicDescription, channelLayout?: AVAudioChannelLayout): AVAudioFormat;
  }

  // interface
  class AVAudioIONode extends AVAudioNode {
    // ownInstanceProperties
    audioUnit: CarbonCore.Components;
    // ownInstanceProperties
    presentationLatency: number;
    // ownInstanceProperties
    isVoiceProcessingEnabled: boolean;
    // compoundInstanceMethods
    setVoiceProcessingEnabledError(error: boolean): boolean;
  }

  // interface
  class AVAudioInputNode extends AVAudioIONode {
    // ownInstanceProperties
    isVoiceProcessingAGCEnabled: boolean;
    setVoiceProcessingAGCEnabled(_: boolean)
    // ownInstanceProperties
    isVoiceProcessingBypassed: boolean;
    setVoiceProcessingBypassed(_: boolean)
    // ownInstanceProperties
    isVoiceProcessingInputMuted: boolean;
    setVoiceProcessingInputMuted(_: boolean)
    // compoundInstanceMethods
    setManualRenderingInputPCMFormatWithInputBlock(_: AVAudioFormat, inputBlock: (p1: number) => AudioBufferList): boolean;
  }

  // interface
  class AVAudioMix extends NSObject {
    // ownInstanceProperties
    inputParameters: AVAudioMixInputParameters[];
  }

  // interface
  class AVAudioMixInputParameters extends NSObject {
    // ownInstanceProperties
    audioTapProcessor: any;
    // ownInstanceProperties
    audioTimePitchAlgorithm: string;
    // ownInstanceProperties
    trackID: number;
    // compoundInstanceMethods
    getVolumeRampForTimeStartVolumeEndVolumeTimeRange(for_: CMTime, startVolume?: number, endVolume?: number, timeRange?: CMTimeRange): boolean;
  }

  // interface
  class AVAudioMixerNode extends AVAudioNode {
    // ownInstanceProperties
    nextAvailableInputBus: number;
    // ownInstanceProperties
    outputVolume: number;
    setOutputVolume(_: number)
  }

  interface AVAudioMixing extends AVAudio3DMixing, AVAudioStereoMixing {
    volume: number;
    setVolume(_: number)
    // instance method
    destinationForMixerBus(forMixer: AVAudioNode, bus: number): AVAudioMixingDestination;
  }

  // interface
  class AVAudioMixingDestination extends NSObject {
    // ownInstanceProperties
    connectionPoint: AVAudioConnectionPoint;
  }

  // interface
  class AVAudioNode extends NSObject {
    // ownInstanceProperties
    AUAudioUnit: AUAudioUnit;
    // ownInstanceProperties
    engine: AVAudioEngine;
    // ownInstanceProperties
    lastRenderTime: AVAudioTime;
    // ownInstanceProperties
    latency: number;
    // ownInstanceProperties
    numberOfInputs: number;
    // ownInstanceProperties
    numberOfOutputs: number;
    // ownInstanceProperties
    outputPresentationLatency: number;
    // compoundInstanceMethods
    inputFormatForBus(forBus: number): AVAudioFormat;
    // compoundInstanceMethods
    installTapWithOnBusBufferSizeFormatBlock(onBus: number, bufferSize: number, format?: AVAudioFormat, block?: (p1: AVAudioPCMBuffer, p2: AVAudioTime) => void): void;
    // compoundInstanceMethods
    nameForInputBus(forInputBus: number): string;
    // compoundInstanceMethods
    nameForOutputBus(forOutputBus: number): string;
    // compoundInstanceMethods
    outputFormatForBus(forBus: number): AVAudioFormat;
    // compoundInstanceMethods
    removeTapOnBus(onBus: number): void;
    // compoundInstanceMethods
    reset(): void;
  }

  // interface
  class AVAudioOutputNode extends AVAudioIONode {
  }

  // interface
  class AVAudioPCMBuffer extends AVAudioBuffer {
    // ownInstanceProperties
    floatChannelData: number;
    // ownInstanceProperties
    frameCapacity: number;
    // ownInstanceProperties
    frameLength: number;
    setFrameLength(_: number)
    // ownInstanceProperties
    int16ChannelData: number;
    // ownInstanceProperties
    int32ChannelData: number;
    // ownInstanceProperties
    stride: number;
    // compoundInstanceMethods
    static createWithPCMFormatFrameCapacity(PCMFormat: AVAudioFormat, frameCapacity: number): AVAudioPCMBuffer;
  }

  // interface
  class AVAudioPlayer extends NSObject {
    // ownInstanceProperties
    currentDevice: string;
    setCurrentDevice(_: string)
    // ownInstanceProperties
    currentTime: number;
    setCurrentTime(_: number)
    // ownInstanceProperties
    data: NSData;
    // ownInstanceProperties
    delegate: AVAudioPlayerDelegate;
    setDelegate(_: AVAudioPlayerDelegate)
    // ownInstanceProperties
    deviceCurrentTime: number;
    // ownInstanceProperties
    duration: number;
    // ownInstanceProperties
    enableRate: boolean;
    setEnableRate(_: boolean)
    // ownInstanceProperties
    format: AVAudioFormat;
    // ownInstanceProperties
    isMeteringEnabled: boolean;
    setMeteringEnabled(_: boolean)
    // ownInstanceProperties
    numberOfChannels: number;
    // ownInstanceProperties
    numberOfLoops: number;
    setNumberOfLoops(_: number)
    // ownInstanceProperties
    pan: number;
    setPan(_: number)
    // ownInstanceProperties
    isPlaying: boolean;
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
    // ownInstanceProperties
    settings: Map<string, any>;
    // ownInstanceProperties
    url: NSURL;
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
    // compoundInstanceMethods
    averagePowerForChannel(forChannel: number): number;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): AVAudioPlayer;
    // compoundInstanceMethods
    static createWithContentsOfURLFileTypeHint(contentsOfURL: NSURL, fileTypeHint?: string): AVAudioPlayer;
    // compoundInstanceMethods
    static createWithData(data: NSData): AVAudioPlayer;
    // compoundInstanceMethods
    static createWithDataFileTypeHint(data: NSData, fileTypeHint?: string): AVAudioPlayer;
    // compoundInstanceMethods
    pause(): void;
    // compoundInstanceMethods
    peakPowerForChannel(forChannel: number): number;
    // compoundInstanceMethods
    play(): boolean;
    // compoundInstanceMethods
    playAtTime(atTime: number): boolean;
    // compoundInstanceMethods
    prepareToPlay(): boolean;
    // compoundInstanceMethods
    setVolumeFadeDuration(_: number, fadeDuration: number): void;
    // compoundInstanceMethods
    stop(): void;
    // compoundInstanceMethods
    updateMeters(): void;
  }

  interface AVAudioPlayerDelegate extends NSObject {
    // instance method
    audioPlayerDecodeErrorDidOccurError?(_: AVAudioPlayer, error?: NSError): void;
    // instance method
    audioPlayerDidFinishPlayingSuccessfully?(_: AVAudioPlayer, successfully: boolean): void;
  }

  // interface
  class AVAudioPlayerNode extends AVAudioNode {
    // ownInstanceProperties
    isPlaying: boolean;
    // compoundInstanceMethods
    nodeTimeForPlayerTime(forPlayerTime: AVAudioTime): AVAudioTime;
    // compoundInstanceMethods
    pause(): void;
    // compoundInstanceMethods
    play(): void;
    // compoundInstanceMethods
    playAtTime(at?: AVAudioTime): void;
    // compoundInstanceMethods
    playerTimeForNodeTime(forNodeTime: AVAudioTime): AVAudioTime;
    // compoundInstanceMethods
    prepareWithFrameCount(withFrameCount: number): void;
    // compoundInstanceMethods
    scheduleBufferAtOptionsCompletionCallbackTypeCompletionHandler(_: AVAudioPCMBuffer, at?: AVAudioTime, options?: AVAudioPlayerNodeBufferOptions, completionCallbackType?: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    // compoundInstanceMethods
    scheduleBufferAtOptionsCompletionHandler(_: AVAudioPCMBuffer, at?: AVAudioTime, options?: AVAudioPlayerNodeBufferOptions, completionHandler?: () => void): void;
    // compoundInstanceMethods
    scheduleBufferWithCompletionCallbackTypeCompletionHandler(_: AVAudioPCMBuffer, completionCallbackType: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    // compoundInstanceMethods
    scheduleBufferWithCompletionHandler(_: AVAudioPCMBuffer, completionHandler?: () => void): void;
    // compoundInstanceMethods
    scheduleFileAtCompletionCallbackTypeCompletionHandler(_: AVAudioFile, at?: AVAudioTime, completionCallbackType?: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    // compoundInstanceMethods
    scheduleFileAtCompletionHandler(_: AVAudioFile, at?: AVAudioTime, completionHandler?: () => void): void;
    // compoundInstanceMethods
    scheduleSegmentStartingFrameFrameCountAtCompletionCallbackTypeCompletionHandler(_: AVAudioFile, startingFrame: number, frameCount: number, at?: AVAudioTime, completionCallbackType?: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    // compoundInstanceMethods
    scheduleSegmentStartingFrameFrameCountAtCompletionHandler(_: AVAudioFile, startingFrame: number, frameCount: number, at?: AVAudioTime, completionHandler?: () => void): void;
    // compoundInstanceMethods
    stop(): void;
  }

  // interface
  class AVAudioRecorder extends NSObject {
    // ownInstanceProperties
    currentTime: number;
    // ownInstanceProperties
    delegate: AVAudioRecorderDelegate;
    setDelegate(_: AVAudioRecorderDelegate)
    // ownInstanceProperties
    deviceCurrentTime: number;
    // ownInstanceProperties
    format: AVAudioFormat;
    // ownInstanceProperties
    isMeteringEnabled: boolean;
    setMeteringEnabled(_: boolean)
    // ownInstanceProperties
    isRecording: boolean;
    // ownInstanceProperties
    settings: Map<string, any>;
    // ownInstanceProperties
    url: NSURL;
    // compoundInstanceMethods
    averagePowerForChannel(forChannel: number): number;
    // compoundInstanceMethods
    deleteRecording(): boolean;
    // compoundInstanceMethods
    static createWithUrlFormat(URL: NSURL, format: AVAudioFormat): AVAudioRecorder;
    // compoundInstanceMethods
    static createWithUrlSettings(URL: NSURL, settings: Map<string, any>): AVAudioRecorder;
    // compoundInstanceMethods
    pause(): void;
    // compoundInstanceMethods
    peakPowerForChannel(forChannel: number): number;
    // compoundInstanceMethods
    prepareToRecord(): boolean;
    // compoundInstanceMethods
    record(): boolean;
    // compoundInstanceMethods
    recordAtTime(atTime: number): boolean;
    // compoundInstanceMethods
    recordAtTimeForDuration(atTime: number, forDuration: number): boolean;
    // compoundInstanceMethods
    recordForDuration(forDuration: number): boolean;
    // compoundInstanceMethods
    stop(): void;
    // compoundInstanceMethods
    updateMeters(): void;
  }

  interface AVAudioRecorderDelegate extends NSObject {
    // instance method
    audioRecorderDidFinishRecordingSuccessfully?(_: AVAudioRecorder, successfully: boolean): void;
    // instance method
    audioRecorderEncodeErrorDidOccurError?(_: AVAudioRecorder, error?: NSError): void;
  }

  // interface
  class AVAudioSequencer extends NSObject {
    // ownInstanceProperties
    currentPositionInBeats: number;
    setCurrentPositionInBeats(_: number)
    // ownInstanceProperties
    currentPositionInSeconds: number;
    setCurrentPositionInSeconds(_: number)
    // ownInstanceProperties
    isPlaying: boolean;
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
    // ownInstanceProperties
    tempoTrack: AVMusicTrack;
    // ownInstanceProperties
    tracks: AVMusicTrack[];
    // ownInstanceProperties
    userInfo: Map<string, any>;
    // compoundInstanceMethods
    beatsForHostTimeError(forHostTime: number): number;
    // compoundInstanceMethods
    beatsForSeconds(forSeconds: number): number;
    // compoundInstanceMethods
    dataWithSMPTEResolutionError(withSMPTEResolution: number): NSData;
    // compoundInstanceMethods
    hostTimeForBeatsError(forBeats: number): number;
    // compoundInstanceMethods
    static createWithAudioEngine(audioEngine: AVAudioEngine): AVAudioSequencer;
    // compoundInstanceMethods
    loadFromDataOptionsError(options: NSData, error: AVMusicSequenceLoadOptions): boolean;
    // compoundInstanceMethods
    loadFromURLOptionsError(options: NSURL, error: AVMusicSequenceLoadOptions): boolean;
    // compoundInstanceMethods
    prepareToPlay(): void;
    // compoundInstanceMethods
    secondsForBeats(forBeats: number): number;
    // compoundInstanceMethods
    startAndReturnError(): boolean;
    // compoundInstanceMethods
    stop(): void;
    // compoundInstanceMethods
    writeToURLSMPTEResolutionReplaceExistingError(SMPTEResolution: NSURL, replaceExisting: number, error: boolean): boolean;
  }

  // interface
  class AVAudioSinkNode extends AVAudioNode {
    // compoundInstanceMethods
    static createWithReceiverBlock(receiverBlock: (p1: AudioTimeStamp, p2: number, p3: AudioBufferList) => number): AVAudioSinkNode;
  }

  // interface
  class AVAudioSourceNode extends AVAudioNode {
    // compoundInstanceMethods
    static createWithFormatRenderBlock(format: AVAudioFormat, renderBlock: (p1: boolean, p2: AudioTimeStamp, p3: number, p4: AudioBufferList) => number): AVAudioSourceNode;
    // compoundInstanceMethods
    static createWithRenderBlock(renderBlock: (p1: boolean, p2: AudioTimeStamp, p3: number, p4: AudioBufferList) => number): AVAudioSourceNode;
  }

  interface AVAudioStereoMixing extends NSObject {
    pan: number;
    setPan(_: number)
  }

  // interface
  class AVAudioTime extends NSObject {
    // compoundStaticMethods
    static hostTimeForSeconds(forSeconds: number): number;
    // compoundStaticMethods
    static secondsForHostTime(forHostTime: number): number;
    // ownInstanceProperties
    audioTimeStamp: AudioTimeStamp;
    // ownInstanceProperties
    hostTime: number;
    // ownInstanceProperties
    isHostTimeValid: boolean;
    // ownInstanceProperties
    sampleRate: number;
    // ownInstanceProperties
    sampleTime: number;
    // ownInstanceProperties
    isSampleTimeValid: boolean;
    // compoundInstanceMethods
    extrapolateTimeFromAnchor(fromAnchor: AVAudioTime): AVAudioTime;
    // compoundInstanceMethods
    static createWithAudioTimeStampSampleRate(audioTimeStamp: AudioTimeStamp, sampleRate: number): AVAudioTime;
    // compoundInstanceMethods
    static createWithHostTime(hostTime: number): AVAudioTime;
    // compoundInstanceMethods
    static createWithHostTimeSampleTimeAtRate(hostTime: number, sampleTime: number, atRate: number): AVAudioTime;
    // compoundInstanceMethods
    static createWithSampleTimeAtRate(sampleTime: number, atRate: number): AVAudioTime;
  }

  // interface
  class AVAudioUnit extends AVAudioNode {
    // compoundStaticMethods
    static instantiateWithWithOptionsCompletionHandler(with_: AudioComponentDescription, options: AudioComponentInstantiationOptions, completionHandler?: (p1: AVAudioUnit, p2: NSError) => void): void;
    // ownInstanceProperties
    audioComponentDescription: AudioComponentDescription;
    // ownInstanceProperties
    audioUnit: CarbonCore.Components;
    // ownInstanceProperties
    manufacturerName: string;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    //   version: number;
    // compoundInstanceMethods
    loadAudioUnitPresetAtURLError(error: NSURL): boolean;
  }

  // interface
  class AVAudioUnitComponent extends NSObject {
    // ownInstanceProperties
    allTagNames: string[];
    // ownInstanceProperties
    audioComponent: any;
    // ownInstanceProperties
    audioComponentDescription: AudioComponentDescription;
    // ownInstanceProperties
    availableArchitectures: number[];
    // ownInstanceProperties
    configurationDictionary: Map<string, any>;
    // ownInstanceProperties
    hasCustomView: boolean;
    // ownInstanceProperties
    hasMIDIInput: boolean;
    // ownInstanceProperties
    hasMIDIOutput: boolean;
    // ownInstanceProperties
    icon: NSImage;
    // ownInstanceProperties
    iconURL: NSURL;
    // ownInstanceProperties
    localizedTypeName: string;
    // ownInstanceProperties
    manufacturerName: string;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    passesAUVal: boolean;
    // ownInstanceProperties
    isSandboxSafe: boolean;
    // ownInstanceProperties
    typeName: string;
    // ownInstanceProperties
    userTagNames: string[];
    setUserTagNames(_: string[])
    // ownInstanceProperties
    //   version: number;
    // ownInstanceProperties
    versionString: string;
    // compoundInstanceMethods
    supportsNumberInputChannelsOutputChannels(_: number, outputChannels: number): boolean;
  }

  // interface
  class AVAudioUnitComponentManager extends NSObject {
    // compoundStaticMethods
    static sharedAudioUnitComponentManager(): AVAudioUnitComponentManager;
    // ownInstanceProperties
    standardLocalizedTagNames: string[];
    // ownInstanceProperties
    tagNames: string[];
    // compoundInstanceMethods
    componentsMatchingDescription(matching: AudioComponentDescription): AVAudioUnitComponent[];
    // compoundInstanceMethods
    componentsMatchingPredicate(matching: NSPredicate): AVAudioUnitComponent[];
    // compoundInstanceMethods
    componentsWithPassingTest(passingTest: (p1: AVAudioUnitComponent, p2: boolean) => boolean): AVAudioUnitComponent[];
  }

  // interface
  class AVAudioUnitDelay extends AVAudioUnitEffect {
    // ownInstanceProperties
    delayTime: number;
    setDelayTime(_: number)
    // ownInstanceProperties
    feedback: number;
    setFeedback(_: number)
    // ownInstanceProperties
    lowPassCutoff: number;
    setLowPassCutoff(_: number)
    // ownInstanceProperties
    wetDryMix: number;
    setWetDryMix(_: number)
  }

  // interface
  class AVAudioUnitDistortion extends AVAudioUnitEffect {
    // ownInstanceProperties
    preGain: number;
    setPreGain(_: number)
    // ownInstanceProperties
    wetDryMix: number;
    setWetDryMix(_: number)
    // compoundInstanceMethods
    loadFactoryPreset(_: AVAudioUnitDistortionPreset): void;
  }

  // interface
  class AVAudioUnitEQ extends AVAudioUnitEffect {
    // ownInstanceProperties
    bands: AVAudioUnitEQFilterParameters[];
    // ownInstanceProperties
    globalGain: number;
    setGlobalGain(_: number)
    // compoundInstanceMethods
    static createWithNumberOfBands(numberOfBands: number): AVAudioUnitEQ;
  }

  // interface
  class AVAudioUnitEQFilterParameters extends NSObject {
    // ownInstanceProperties
    bandwidth: number;
    setBandwidth(_: number)
    // ownInstanceProperties
    bypass: boolean;
    setBypass(_: boolean)
    // ownInstanceProperties
    filterType: AVAudioUnitEQFilterType;
    setFilterType(_: AVAudioUnitEQFilterType)
    // ownInstanceProperties
    frequency: number;
    setFrequency(_: number)
    // ownInstanceProperties
    gain: number;
    setGain(_: number)
  }

  // interface
  class AVAudioUnitEffect extends AVAudioUnit {
    // ownInstanceProperties
    bypass: boolean;
    setBypass(_: boolean)
    // compoundInstanceMethods
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitEffect;
  }

  // interface
  class AVAudioUnitGenerator extends AVAudioUnit {
    // ownInstanceProperties
    bypass: boolean;
    setBypass(_: boolean)
    // compoundInstanceMethods
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitGenerator;
  }

  // interface
  class AVAudioUnitMIDIInstrument extends AVAudioUnit {
    // compoundInstanceMethods
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitMIDIInstrument;
    // compoundInstanceMethods
    sendControllerWithValueOnChannel(_: number, withValue: number, onChannel: number): void;
    // compoundInstanceMethods
    sendMIDIEventData1(_: number, data1: number): void;
    // compoundInstanceMethods
    sendMIDIEventData1Data2(_: number, data1: number, data2: number): void;
    // compoundInstanceMethods
    sendMIDISysExEvent(_: NSData): void;
    // compoundInstanceMethods
    sendPitchBendOnChannel(_: number, onChannel: number): void;
    // compoundInstanceMethods
    sendPressureOnChannel(_: number, onChannel: number): void;
    // compoundInstanceMethods
    sendPressureForKeyWithValueOnChannel(forKey: number, withValue: number, onChannel: number): void;
    // compoundInstanceMethods
    sendProgramChangeBankMSBBankLSBOnChannel(_: number, bankMSB: number, bankLSB: number, onChannel: number): void;
    // compoundInstanceMethods
    sendProgramChangeOnChannel(_: number, onChannel: number): void;
    // compoundInstanceMethods
    startNoteWithVelocityOnChannel(_: number, withVelocity: number, onChannel: number): void;
    // compoundInstanceMethods
    stopNoteOnChannel(_: number, onChannel: number): void;
  }

  // interface
  class AVAudioUnitReverb extends AVAudioUnitEffect {
    // ownInstanceProperties
    wetDryMix: number;
    setWetDryMix(_: number)
    // compoundInstanceMethods
    loadFactoryPreset(_: AVAudioUnitReverbPreset): void;
  }

  // interface
  class AVAudioUnitSampler extends AVAudioUnitMIDIInstrument {
    // ownInstanceProperties
    globalTuning: number;
    setGlobalTuning(_: number)
    // ownInstanceProperties
    masterGain: number;
    setMasterGain(_: number)
    // ownInstanceProperties
    stereoPan: number;
    setStereoPan(_: number)
    // compoundInstanceMethods
    loadAudioFilesAtURLsError(error: NSURL[]): boolean;
    // compoundInstanceMethods
    loadInstrumentAtURLError(error: NSURL): boolean;
    // compoundInstanceMethods
    loadSoundBankInstrumentAtURLProgramBankMSBBankLSBError(program: NSURL, bankMSB: number, bankLSB: number, error: number): boolean;
  }

  // interface
  class AVAudioUnitTimeEffect extends AVAudioUnit {
    // ownInstanceProperties
    bypass: boolean;
    setBypass(_: boolean)
    // compoundInstanceMethods
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitTimeEffect;
  }

  // interface
  class AVAudioUnitTimePitch extends AVAudioUnitTimeEffect {
    // ownInstanceProperties
    overlap: number;
    setOverlap(_: number)
    // ownInstanceProperties
    pitch: number;
    setPitch(_: number)
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
  }

  // interface
  class AVAudioUnitVarispeed extends AVAudioUnitTimeEffect {
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
  }

  // interface
  class AVCameraCalibrationData extends NSObject {
    // ownInstanceProperties
    extrinsicMatrix: simd_float4x3;
    // ownInstanceProperties
    intrinsicMatrix: simd_float3x3;
    // ownInstanceProperties
    intrinsicMatrixReferenceDimensions: CGSize;
    // ownInstanceProperties
    inverseLensDistortionLookupTable: NSData;
    // ownInstanceProperties
    lensDistortionCenter: CGPoint;
    // ownInstanceProperties
    lensDistortionLookupTable: NSData;
    // ownInstanceProperties
    pixelSize: number;
  }

  // interface
  class AVCaptureAudioChannel extends NSObject {
    // ownInstanceProperties
    averagePowerLevel: number;
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    peakHoldLevel: number;
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
  }

  // interface
  class AVCaptureAudioDataOutput extends AVCaptureOutput {
    // ownInstanceProperties
    audioSettings: Map<string, any>;
    setAudioSettings(_: Map<string, any>)
    // ownInstanceProperties
    sampleBufferCallbackQueue: NSObject;
    // ownInstanceProperties
    sampleBufferDelegate: AVCaptureAudioDataOutputSampleBufferDelegate;
    // compoundInstanceMethods
    recommendedAudioSettingsForAssetWriterWithOutputFileType(writingTo: string): Map<any, any>;
    // compoundInstanceMethods
    setSampleBufferDelegateQueue(_?: AVCaptureAudioDataOutputSampleBufferDelegate, queue?: NSObject): void;
  }

  interface AVCaptureAudioDataOutputSampleBufferDelegate extends NSObject {
    // instance method
    captureOutputDidOutputSampleBufferFromConnection?(_: AVCaptureOutput, didOutput: any, from: AVCaptureConnection): void;
  }

  // interface
  class AVCaptureAudioFileOutput extends AVCaptureFileOutput {
    // compoundStaticMethods
    static availableOutputFileTypes(): string[];
    // ownInstanceProperties
    audioSettings: Map<string, any>;
    setAudioSettings(_: Map<string, any>)
    // ownInstanceProperties
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[])
    // compoundInstanceMethods
    startRecordingToOutputFileURLOutputFileTypeRecordingDelegate(to: NSURL, outputFileType: string, recordingDelegate: AVCaptureFileOutputRecordingDelegate): void;
  }

  // interface
  class AVCaptureAudioPreviewOutput extends AVCaptureOutput {
    // ownInstanceProperties
    outputDeviceUniqueID: string;
    setOutputDeviceUniqueID(_: string)
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
  }

  // interface
  class AVCaptureConnection extends NSObject {
    // compoundStaticMethods
    static connectionWithInputPortVideoPreviewLayer(inputPort: Port, videoPreviewLayer: AVCaptureVideoPreviewLayer): AVCaptureConnection;
    // compoundStaticMethods
    static connectionWithInputPortsOutput(inputPorts: Port[], output: AVCaptureOutput): AVCaptureConnection;
    // ownInstanceProperties
    isActive: boolean;
    // ownInstanceProperties
    audioChannels: AVCaptureAudioChannel[];
    // ownInstanceProperties
    automaticallyAdjustsVideoMirroring: boolean;
    setAutomaticallyAdjustsVideoMirroring(_: boolean)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    inputPorts: Port[];
    // ownInstanceProperties
    output: AVCaptureOutput;
    // ownInstanceProperties
    isVideoFieldModeSupported: boolean;
    // ownInstanceProperties
    isVideoMaxFrameDurationSupported: boolean;
    // ownInstanceProperties
    isVideoMinFrameDurationSupported: boolean;
    // ownInstanceProperties
    isVideoMirroringSupported: boolean;
    // ownInstanceProperties
    isVideoOrientationSupported: boolean;
    // ownInstanceProperties
    videoFieldMode: AVVideoFieldMode;
    setVideoFieldMode(_: AVVideoFieldMode)
    // ownInstanceProperties
    videoMaxFrameDuration: CMTime;
    setVideoMaxFrameDuration(_: CMTime)
    // ownInstanceProperties
    videoMinFrameDuration: CMTime;
    setVideoMinFrameDuration(_: CMTime)
    // ownInstanceProperties
    isVideoMirrored: boolean;
    setVideoMirrored(_: boolean)
    // ownInstanceProperties
    videoOrientation: AVCaptureVideoOrientation;
    setVideoOrientation(_: AVCaptureVideoOrientation)
    // ownInstanceProperties
    videoPreviewLayer: AVCaptureVideoPreviewLayer;
    // compoundInstanceMethods
    static createWithInputPortVideoPreviewLayer(inputPort: Port, videoPreviewLayer: AVCaptureVideoPreviewLayer): AVCaptureConnection;
    // compoundInstanceMethods
    static createWithInputPortsOutput(inputPorts: Port[], output: AVCaptureOutput): AVCaptureConnection;
  }

  // interface
  class AVCaptureDevice extends NSObject {
    // compoundStaticMethods
    static authorizationStatusForMediaType(for_: string): AVAuthorizationStatus;
    // compoundStaticMethods
    static defaultDeviceWithDeviceTypeMediaTypePosition(_: string, for_?: string, position?: AVCaptureDevice.Position): AVCaptureDevice;
    // compoundStaticMethods
    static defaultDeviceWithMediaType(for_: string): AVCaptureDevice;
    // compoundStaticMethods
    static requestAccessForCompletionHandler(for_: string, completionHandler: (p1: boolean) => void): void;
    // ownInstanceProperties
    activeColorSpace: AVCaptureColorSpace;
    setActiveColorSpace(_: AVCaptureColorSpace)
    // ownInstanceProperties
    activeFormat: Format;
    setActiveFormat(_: Format)
    // ownInstanceProperties
    activeInputSource: InputSource;
    setActiveInputSource(_: InputSource)
    // ownInstanceProperties
    activeVideoMaxFrameDuration: CMTime;
    setActiveVideoMaxFrameDuration(_: CMTime)
    // ownInstanceProperties
    activeVideoMinFrameDuration: CMTime;
    setActiveVideoMinFrameDuration(_: CMTime)
    // ownInstanceProperties
    isAdjustingExposure: boolean;
    // ownInstanceProperties
    isAdjustingFocus: boolean;
    // ownInstanceProperties
    isAdjustingWhiteBalance: boolean;
    // ownInstanceProperties
    isConnected: boolean;
    // ownInstanceProperties
    deviceType: string;
    // ownInstanceProperties
    exposureMode: AVCaptureDevice.ExposureMode;
    setExposureMode(_: AVCaptureDevice.ExposureMode)
    // ownInstanceProperties
    exposurePointOfInterest: CGPoint;
    setExposurePointOfInterest(_: CGPoint)
    // ownInstanceProperties
    isExposurePointOfInterestSupported: boolean;
    // ownInstanceProperties
    isFlashAvailable: boolean;
    // ownInstanceProperties
    flashMode: AVCaptureDevice.FlashMode;
    setFlashMode(_: AVCaptureDevice.FlashMode)
    // ownInstanceProperties
    focusMode: AVCaptureDevice.FocusMode;
    setFocusMode(_: AVCaptureDevice.FocusMode)
    // ownInstanceProperties
    focusPointOfInterest: CGPoint;
    setFocusPointOfInterest(_: CGPoint)
    // ownInstanceProperties
    isFocusPointOfInterestSupported: boolean;
    // ownInstanceProperties
    formats: Format[];
    // ownInstanceProperties
    hasFlash: boolean;
    // ownInstanceProperties
    hasTorch: boolean;
    // ownInstanceProperties
    isInUseByAnotherApplication: boolean;
    // ownInstanceProperties
    inputSources: InputSource[];
    // ownInstanceProperties
    linkedDevices: AVCaptureDevice[];
    // ownInstanceProperties
    localizedName: string;
    // ownInstanceProperties
    manufacturer: string;
    // ownInstanceProperties
    modelID: string;
    // ownInstanceProperties
    position: AVCaptureDevice.Position;
    // ownInstanceProperties
    isSuspended: boolean;
    // ownInstanceProperties
    isTorchActive: boolean;
    // ownInstanceProperties
    isTorchAvailable: boolean;
    // ownInstanceProperties
    torchLevel: number;
    // ownInstanceProperties
    torchMode: AVCaptureDevice.TorchMode;
    setTorchMode(_: AVCaptureDevice.TorchMode)
    // ownInstanceProperties
    transportControlsPlaybackMode: AVCaptureDevice.TransportControlsPlaybackMode;
    // ownInstanceProperties
    transportControlsSpeed: number;
    // ownInstanceProperties
    transportControlsSupported: boolean;
    // ownInstanceProperties
    transportType: number;
    // ownInstanceProperties
    uniqueID: string;
    // ownInstanceProperties
    whiteBalanceMode: AVCaptureDevice.WhiteBalanceMode;
    setWhiteBalanceMode(_: AVCaptureDevice.WhiteBalanceMode)
    // compoundInstanceMethods
    hasMediaType(_: string): boolean;
    // compoundInstanceMethods
    isExposureModeSupported(_: AVCaptureDevice.ExposureMode): boolean;
    // compoundInstanceMethods
    isFlashModeSupported(_: AVCaptureDevice.FlashMode): boolean;
    // compoundInstanceMethods
    isFocusModeSupported(_: AVCaptureDevice.FocusMode): boolean;
    // compoundInstanceMethods
    isTorchModeSupported(_: AVCaptureDevice.TorchMode): boolean;
    // compoundInstanceMethods
    isWhiteBalanceModeSupported(_: AVCaptureDevice.WhiteBalanceMode): boolean;
    // compoundInstanceMethods
    lockForConfiguration(): boolean;
    // compoundInstanceMethods
    setTorchModeOnWithLevelError(level: number): boolean;
    // compoundInstanceMethods
    setTransportControlsPlaybackModeSpeed(_: AVCaptureDevice.TransportControlsPlaybackMode, speed: number): void;
    // compoundInstanceMethods
    supportsAVCaptureSessionPreset(_: string): boolean;
    // compoundInstanceMethods
    unlockForConfiguration(): void;
  }

  // interface
  class DiscoverySession extends NSObject {
    // compoundStaticMethods
    static discoverySessionWithDeviceTypesMediaTypePosition(_: string[], mediaType?: string, position?: AVCaptureDevice.Position): DiscoverySession;
  }

  // interface
  class Format extends NSObject {
    // ownInstanceProperties
    autoFocusSystem: AVCaptureDeviceFormat.AutoFocusSystem;
    // ownInstanceProperties
    formatDescription: any;
    // ownInstanceProperties
    mediaType: string;
    // ownInstanceProperties
    supportedColorSpaces: number[];
    // ownInstanceProperties
    videoSupportedFrameRateRanges: AVFrameRateRange[];
  }

  // interface
  class AVCaptureDeviceInput extends AVCaptureInput {
    // compoundStaticMethods
    static deviceInputWithDeviceError(error: AVCaptureDevice): AVCaptureDeviceInput;
    // ownInstanceProperties
    device: AVCaptureDevice;
    // compoundInstanceMethods
    static createWithDevice(device: AVCaptureDevice): AVCaptureDeviceInput;
  }

  // interface
  class InputSource extends NSObject {
    // ownInstanceProperties
    inputSourceID: string;
    // ownInstanceProperties
    localizedName: string;
  }

  // interface
  class AVCaptureFileOutput extends AVCaptureOutput {
    // ownInstanceProperties
    delegate: AVCaptureFileOutputDelegate;
    setDelegate(_: AVCaptureFileOutputDelegate)
    // ownInstanceProperties
    maxRecordedDuration: CMTime;
    setMaxRecordedDuration(_: CMTime)
    // ownInstanceProperties
    maxRecordedFileSize: number;
    setMaxRecordedFileSize(_: number)
    // ownInstanceProperties
    minFreeDiskSpaceLimit: number;
    setMinFreeDiskSpaceLimit(_: number)
    // ownInstanceProperties
    outputFileURL: NSURL;
    // ownInstanceProperties
    recordedDuration: CMTime;
    // ownInstanceProperties
    recordedFileSize: number;
    // ownInstanceProperties
    isRecording: boolean;
    // ownInstanceProperties
    isRecordingPaused: boolean;
    // compoundInstanceMethods
    pauseRecording(): void;
    // compoundInstanceMethods
    resumeRecording(): void;
    // compoundInstanceMethods
    startRecordingToOutputFileURLRecordingDelegate(to: NSURL, recordingDelegate: AVCaptureFileOutputRecordingDelegate): void;
    // compoundInstanceMethods
    stopRecording(): void;
  }

  interface AVCaptureFileOutputDelegate extends NSObject {
    // instance method
    captureOutputDidOutputSampleBufferFromConnection?(_: AVCaptureFileOutput, didOutputSampleBuffer: any, from: AVCaptureConnection): void;
    // instance method
    captureOutputShouldProvideSampleAccurateRecordingStart(_: AVCaptureOutput): boolean;
  }

  interface AVCaptureFileOutputRecordingDelegate extends NSObject {
    // instance method
    captureOutputDidStartRecordingToOutputFileAtURLFromConnections?(_: AVCaptureFileOutput, didStartRecordingTo: NSURL, from: AVCaptureConnection[]): void;
    // instance method
    captureOutputDidPauseRecordingToOutputFileAtURLFromConnections?(_: AVCaptureFileOutput, didPauseRecordingTo: NSURL, from: AVCaptureConnection[]): void;
    // instance method
    captureOutputDidResumeRecordingToOutputFileAtURLFromConnections?(_: AVCaptureFileOutput, didResumeRecordingTo: NSURL, from: AVCaptureConnection[]): void;
    // instance method
    captureOutputWillFinishRecordingToOutputFileAtURLFromConnectionsError?(_: AVCaptureFileOutput, willFinishRecordingTo: NSURL, from: AVCaptureConnection[], error?: NSError): void;
    // instance method
    captureOutputDidFinishRecordingToOutputFileAtURLFromConnectionsError(_: AVCaptureFileOutput, didFinishRecordingTo: NSURL, from: AVCaptureConnection[], error?: NSError): void;
  }

  // interface
  class AVCaptureInput extends NSObject {
    // ownInstanceProperties
    ports: Port[];
  }

  // interface
  class AVCaptureMovieFileOutput extends AVCaptureFileOutput {
    // ownInstanceProperties
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[])
    // ownInstanceProperties
    movieFragmentInterval: CMTime;
    setMovieFragmentInterval(_: CMTime)
    // compoundInstanceMethods
    outputSettingsForConnection(for_: AVCaptureConnection): Map<string, any>;
    // compoundInstanceMethods
    setOutputSettingsForConnection(_?: Map<string, any>, for_?: AVCaptureConnection): void;
  }

  // interface
  class AVCaptureOutput extends NSObject {
    // ownInstanceProperties
    connections: AVCaptureConnection[];
    // compoundInstanceMethods
    connectionWithMediaType(with_: string): AVCaptureConnection;
    // compoundInstanceMethods
    metadataOutputRectOfInterestForRect(fromOutputRect: CGRect): CGRect;
    // compoundInstanceMethods
    rectForMetadataOutputRectOfInterest(fromMetadataOutputRect: CGRect): CGRect;
    // compoundInstanceMethods
    transformedMetadataObjectForMetadataObjectConnection(for_: AVMetadataObject, connection: AVCaptureConnection): AVMetadataObject;
  }

  // interface
  class AVCapturePhoto extends NSObject {
    // ownInstanceProperties
    photoCount: number;
    // ownInstanceProperties
    pixelBuffer: any;
    // ownInstanceProperties
    resolvedSettings: AVCaptureResolvedPhotoSettings;
    // ownInstanceProperties
    timestamp: CMTime;
    // compoundInstanceMethods
    CGImageRepresentation(): any;
    // compoundInstanceMethods
    fileDataRepresentation(): NSData;
  }

  interface AVCapturePhotoCaptureDelegate extends NSObject {
    // instance method
    captureOutputWillBeginCaptureForResolvedSettings?(_: AVCapturePhotoOutput, willBeginCaptureFor: AVCaptureResolvedPhotoSettings): void;
    // instance method
    captureOutputWillCapturePhotoForResolvedSettings?(_: AVCapturePhotoOutput, willCapturePhotoFor: AVCaptureResolvedPhotoSettings): void;
    // instance method
    captureOutputDidCapturePhotoForResolvedSettings?(_: AVCapturePhotoOutput, didCapturePhotoFor: AVCaptureResolvedPhotoSettings): void;
    // instance method
    captureOutputDidFinishProcessingPhotoError?(_: AVCapturePhotoOutput, didFinishProcessingPhoto: AVCapturePhoto, error?: NSError): void;
    // instance method
    captureOutputDidFinishCaptureForResolvedSettingsError?(_: AVCapturePhotoOutput, didFinishCaptureFor: AVCaptureResolvedPhotoSettings, error?: NSError): void;
  }

  // interface
  class AVCapturePhotoOutput extends AVCaptureOutput {
    // ownInstanceProperties
    availablePhotoCodecTypes: string[];
    // ownInstanceProperties
    availablePhotoFileTypes: string[];
    // ownInstanceProperties
    availablePhotoPixelFormatTypes: number[];
    // compoundInstanceMethods
    capturePhotoWithSettingsDelegate(with_: AVCapturePhotoSettings, delegate: AVCapturePhotoCaptureDelegate): void;
    // compoundInstanceMethods
    supportedPhotoCodecTypesForFileType(for_: string): string[];
    // compoundInstanceMethods
    supportedPhotoPixelFormatTypesForFileType(for_: string): number[];
  }

  // interface
  class AVCapturePhotoSettings extends NSObject {
    // compoundStaticMethods
    static photoSettings(): AVCapturePhotoSettings;
    // compoundStaticMethods
    static photoSettingsFromPhotoSettings(from: AVCapturePhotoSettings): AVCapturePhotoSettings;
    // compoundStaticMethods
    static photoSettingsWithFormat(format?: Map<string, any>): AVCapturePhotoSettings;
    // ownInstanceProperties
    format: Map<string, any>;
    // ownInstanceProperties
    processedFileType: string;
    // ownInstanceProperties
    uniqueID: number;
  }

  // interface
  class AVCaptureResolvedPhotoSettings extends NSObject {
    // ownInstanceProperties
    expectedPhotoCount: number;
    // ownInstanceProperties
    photoDimensions: CMVideoDimensions;
    // ownInstanceProperties
    uniqueID: number;
  }

  // interface
  class AVCaptureScreenInput extends AVCaptureInput {
    // ownInstanceProperties
    capturesCursor: boolean;
    setCapturesCursor(_: boolean)
    // ownInstanceProperties
    capturesMouseClicks: boolean;
    setCapturesMouseClicks(_: boolean)
    // ownInstanceProperties
    cropRect: CGRect;
    setCropRect(_: CGRect)
    // ownInstanceProperties
    minFrameDuration: CMTime;
    setMinFrameDuration(_: CMTime)
    // ownInstanceProperties
    scaleFactor: number;
    setScaleFactor(_: number)
    // compoundInstanceMethods
    static createWithDisplayID(displayID: number): AVCaptureScreenInput;
  }

  // interface
  class AVCaptureSession extends NSObject {
    // ownInstanceProperties
    connections: AVCaptureConnection[];
    // ownInstanceProperties
    inputs: AVCaptureInput[];
    // ownInstanceProperties
    masterClock: any;
    // ownInstanceProperties
    outputs: AVCaptureOutput[];
    // ownInstanceProperties
    isRunning: boolean;
    // ownInstanceProperties
    sessionPreset: string;
    setSessionPreset(_: string)
    // compoundInstanceMethods
    addConnection(_: AVCaptureConnection): void;
    // compoundInstanceMethods
    addInput(_: AVCaptureInput): void;
    // compoundInstanceMethods
    addInputWithNoConnections(_: AVCaptureInput): void;
    // compoundInstanceMethods
    addOutput(_: AVCaptureOutput): void;
    // compoundInstanceMethods
    addOutputWithNoConnections(_: AVCaptureOutput): void;
    // compoundInstanceMethods
    beginConfiguration(): void;
    // compoundInstanceMethods
    canAddConnection(_: AVCaptureConnection): boolean;
    // compoundInstanceMethods
    canAddInput(_: AVCaptureInput): boolean;
    // compoundInstanceMethods
    canAddOutput(_: AVCaptureOutput): boolean;
    // compoundInstanceMethods
    canSetSessionPreset(_: string): boolean;
    // compoundInstanceMethods
    commitConfiguration(): void;
    // compoundInstanceMethods
    removeConnection(_: AVCaptureConnection): void;
    // compoundInstanceMethods
    removeInput(_: AVCaptureInput): void;
    // compoundInstanceMethods
    removeOutput(_: AVCaptureOutput): void;
    // compoundInstanceMethods
    startRunning(): void;
    // compoundInstanceMethods
    stopRunning(): void;
  }

  // interface
  class SystemPressureState extends NSObject {
    // ownInstanceProperties
    factors: AVCaptureSystemPressureState.Factors;
    // ownInstanceProperties
    level: string;
  }

  // interface
  class AVCaptureVideoDataOutput extends AVCaptureOutput {
    // ownInstanceProperties
    alwaysDiscardsLateVideoFrames: boolean;
    setAlwaysDiscardsLateVideoFrames(_: boolean)
    // ownInstanceProperties
    availableVideoCVPixelFormatTypes: number[];
    // ownInstanceProperties
    availableVideoCodecTypes: string[];
    // ownInstanceProperties
    sampleBufferCallbackQueue: NSObject;
    // ownInstanceProperties
    sampleBufferDelegate: AVCaptureVideoDataOutputSampleBufferDelegate;
    // ownInstanceProperties
    videoSettings: Map<string, any>;
    setVideoSettings(_: Map<string, any>)
    // compoundInstanceMethods
    availableVideoCodecTypesForAssetWriterWithOutputFileType(writingTo: string): string[];
    // compoundInstanceMethods
    recommendedVideoSettingsForAssetWriterWithOutputFileType(writingTo: string): Map<string, any>;
    // compoundInstanceMethods
    recommendedVideoSettingsForVideoCodecTypeAssetWriterOutputFileType(forVideoCodecType: string, assetWriterOutputFileType: string): Map<any, any>;
    // compoundInstanceMethods
    setSampleBufferDelegateQueue(_?: AVCaptureVideoDataOutputSampleBufferDelegate, queue?: NSObject): void;
  }

  interface AVCaptureVideoDataOutputSampleBufferDelegate extends NSObject {
    // instance method
    captureOutputDidOutputSampleBufferFromConnection?(_: AVCaptureOutput, didOutput: any, from: AVCaptureConnection): void;
    // instance method
    captureOutputDidDropSampleBufferFromConnection?(_: AVCaptureOutput, didDrop: any, from: AVCaptureConnection): void;
  }

  // interface
  class AVCaptureVideoPreviewLayer extends CALayer {
    // ownInstanceProperties
    connection: AVCaptureConnection;
    // ownInstanceProperties
    session: AVCaptureSession;
    setSession(_: AVCaptureSession)
    // ownInstanceProperties
    videoGravity: string;
    setVideoGravity(_: string)
    // compoundInstanceMethods
    captureDevicePointOfInterestForPoint(fromLayerPoint: CGPoint): CGPoint;
    // compoundInstanceMethods
    static createWithSession(session: AVCaptureSession): AVCaptureVideoPreviewLayer;
    // compoundInstanceMethods
    static createWithSessionWithNoConnection(sessionWithNoConnection: AVCaptureSession): AVCaptureVideoPreviewLayer;
    // compoundInstanceMethods
    metadataOutputRectOfInterestForRect(fromLayerRect: CGRect): CGRect;
    // compoundInstanceMethods
    pointForCaptureDevicePointOfInterest(fromCaptureDevicePoint: CGPoint): CGPoint;
    // compoundInstanceMethods
    rectForMetadataOutputRectOfInterest(fromMetadataOutputRect: CGRect): CGRect;
    // compoundInstanceMethods
    setSessionWithNoConnection(_: AVCaptureSession): void;
    // compoundInstanceMethods
    transformedMetadataObjectForMetadataObject(for_: AVMetadataObject): AVMetadataObject;
  }

  // interface
  class AVComposition extends AVAsset {
    // ownInstanceProperties
    URLAssetInitializationOptions: Map<string, any>;
    // ownInstanceProperties
    naturalSize: CGSize;
    // compoundInstanceMethods
    //  trackWithTrackID(withTrackID: number): AVCompositionTrack;
  }

  // interface
  class AVCompositionTrack extends AVAssetTrack {
    // ownInstanceProperties
    formatDescriptionReplacements: AVCompositionTrackFormatDescriptionReplacement[];
    // compoundInstanceMethods
    //  segmentForTrackTime(forTrackTime: CMTime): AVCompositionTrackSegment;
  }

  // interface
  class AVCompositionTrackFormatDescriptionReplacement extends NSObject {
    // ownInstanceProperties
    originalFormatDescription: any;
    // ownInstanceProperties
    replacementFormatDescription: any;
  }

  // interface
  class AVCompositionTrackSegment extends AVAssetTrackSegment {
    // ownInstanceProperties
    sourceTrackID: number;
    // ownInstanceProperties
    sourceURL: NSURL;
    // compoundInstanceMethods
    static createWithTimeRange(timeRange: CMTimeRange): AVCompositionTrackSegment;
    // compoundInstanceMethods
    static createWithUrlTrackIDSourceTimeRangeTargetTimeRange(URL: NSURL, trackID: number, sourceTimeRange: CMTimeRange, targetTimeRange: CMTimeRange): AVCompositionTrackSegment;
  }

  interface AVContentKeyRecipient {
    mayRequireContentKeysForMediaDataProcessing: boolean;
  }

  // interface
  class AVContentKeyRequest extends NSObject {
    // ownInstanceProperties
    canProvidePersistableContentKey: boolean;
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    identifier: any;
    // ownInstanceProperties
    initializationData: NSData;
    // ownInstanceProperties
    options: Map<string, any>;
    // ownInstanceProperties
    renewsExpiringResponseData: boolean;
    // ownInstanceProperties
    status: AVContentKeyRequest.Status;
    // compoundInstanceMethods
    makeStreamingContentKeyRequestDataWithForAppContentIdentifierOptionsCompletionHandler(forApp: NSData, contentIdentifier?: NSData, options?: Map<string, any>, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    // compoundInstanceMethods
    processContentKeyResponse(_: AVContentKeyResponse): void;
    // compoundInstanceMethods
    processContentKeyResponseError(_: NSError): void;
    // compoundInstanceMethods
    respondByRequestingPersistableContentKeyRequestAndReturnError(): boolean;
  }

  // interface
  class AVContentKeyResponse extends NSObject {
    // compoundStaticMethods
    static contentKeyResponseWithAuthorizationTokenData(authorizationTokenData: NSData): AVContentKeyResponse;
    // compoundStaticMethods
    static contentKeyResponseWithClearKeyDataInitializationVector(clearKeyData: NSData, initializationVector?: NSData): AVContentKeyResponse;
    // compoundStaticMethods
    static contentKeyResponseWithFairPlayStreamingKeyResponseData(fairPlayStreamingKeyResponseData: NSData): AVContentKeyResponse;
  }

  // interface
  class AVContentKeySession extends NSObject {
    // compoundStaticMethods
    static pendingExpiredSessionReportsWithAppIdentifierStorageDirectoryAtURL(withAppIdentifier: NSData, storageDirectoryAt: NSURL): NSData[];
    // compoundStaticMethods
    static removePendingExpiredSessionReportsWithAppIdentifierStorageDirectoryAtURL(_: NSData[], withAppIdentifier: NSData, storageDirectoryAt: NSURL): void;
    // ownInstanceProperties
    contentKeyRecipients: AVContentKeyRecipient[];
    // ownInstanceProperties
    contentProtectionSessionIdentifier: NSData;
    // ownInstanceProperties
    delegate: AVContentKeySessionDelegate;
    // ownInstanceProperties
    delegateQueue: NSObject;
    // ownInstanceProperties
    keySystem: string;
    // ownInstanceProperties
    storageURL: NSURL;
    // compoundInstanceMethods
    addContentKeyRecipient(_: AVContentKeyRecipient): void;
    // compoundInstanceMethods
    expire(): void;
    // compoundInstanceMethods
    invalidateAllPersistableContentKeysWithForAppOptionsCompletionHandler(forApp: NSData, options?: Map<string, any>, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    // compoundInstanceMethods
    invalidatePersistableContentKeyWithOptionsCompletionHandler(_: NSData, options?: Map<string, any>, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    // compoundInstanceMethods
    makeSecureTokenForExpirationDateWithOfPersistableContentKeyCompletionHandler(ofPersistableContentKey: NSData, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    // compoundInstanceMethods
    processContentKeyRequestWithIdentifierInitializationDataOptions(withIdentifier?: any, initializationData?: NSData, options?: Map<string, any>): void;
    // compoundInstanceMethods
    removeContentKeyRecipient(_: AVContentKeyRecipient): void;
    // compoundInstanceMethods
    renewExpiringResponseDataForContentKeyRequest(for_: AVContentKeyRequest): void;
    // compoundInstanceMethods
    setDelegateQueue(_?: AVContentKeySessionDelegate, queue?: NSObject): void;
  }

  interface AVContentKeySessionDelegate extends NSObject {
    // instance method
    contentKeySessionDidProvideContentKeyRequest(_: AVContentKeySession, didProvide: AVContentKeyRequest): void;
    // instance method
    contentKeySessionDidProvidePersistableContentKeyRequest?(_: AVContentKeySession, didProvide: AVPersistableContentKeyRequest): void;
    // instance method
    contentKeySessionShouldRetryContentKeyRequestReason?(_: AVContentKeySession, shouldRetry: AVContentKeyRequest, reason: string): boolean;
    // instance method
    contentKeySessionContentKeyRequestDidFailWithError?(_: AVContentKeySession, contentKeyRequest: AVContentKeyRequest, didFailWithError: NSError): void;
    // instance method
    contentKeySessionContentKeyRequestDidSucceed?(_: AVContentKeySession, contentKeyRequestDidSucceed: AVContentKeyRequest): void;
    // instance method
    contentKeySessionDidProvideRenewingContentKeyRequest?(_: AVContentKeySession, didProvideRenewingContentKeyRequest: AVContentKeyRequest): void;
    // instance method
    contentKeySessionDidUpdatePersistableContentKeyForContentKeyIdentifier?(_: AVContentKeySession, didUpdatePersistableContentKey: NSData, forContentKeyIdentifier: any): void;
    // instance method
    contentKeySessionContentProtectionSessionIdentifierDidChange?(_: AVContentKeySession): void;
    // instance method
    contentKeySessionDidGenerateExpiredSessionReport?(_: AVContentKeySession): void;
  }

  // interface
  class AVDateRangeMetadataGroup extends AVMetadataGroup {
    // ownInstanceProperties
    endDate: Date;
    // ownInstanceProperties
    startDate: Date;
    // compoundInstanceMethods
    static createWithItemsStartDateEndDate(items: AVMetadataItem[], startDate: Date, endDate?: Date): AVDateRangeMetadataGroup;
  }

  // interface
  class AVDepthData extends NSObject {
    // compoundStaticMethods
    static depthDataFromDictionaryRepresentationError(error: Map<any, any>): AVDepthData;
    // ownInstanceProperties
    availableDepthDataTypes: number[];
    // ownInstanceProperties
    cameraCalibrationData: AVCameraCalibrationData;
    // ownInstanceProperties
    depthDataAccuracy: AVDepthData.Accuracy;
    // ownInstanceProperties
    isDepthDataFiltered: boolean;
    // ownInstanceProperties
    depthDataMap: any;
    // ownInstanceProperties
    depthDataQuality: AVDepthData.Quality;
    // ownInstanceProperties
    depthDataType: number;
    // compoundInstanceMethods
    depthDataByApplyingExifOrientation(_: CGImagePropertyOrientation): AVDepthData;
    // compoundInstanceMethods
    depthDataByConvertingToDepthDataType(toDepthDataType: number): AVDepthData;
    // compoundInstanceMethods
    depthDataByReplacingDepthDataMapWithPixelBufferError(error: any): AVDepthData;
    // compoundInstanceMethods
    dictionaryRepresentationForAuxiliaryDataType(forAuxiliaryDataType?: string): Map<any, any>;
  }

  interface AVFragmentMinding {
    isAssociatedWithFragmentMinder: boolean;
  }

  // interface
  class AVFragmentedAsset extends AVURLAsset {
    // compoundStaticMethods
    //  static URLAssetWithURLOptions(url: NSURL, options?: Map<string, any>): AVFragmentedAsset;
    // compoundStaticMethods
    static fragmentedAssetWithURLOptions(url: NSURL, options?: Map<string, any>): AVFragmentedAsset;
    // compoundInstanceMethods
    //  trackWithTrackID(withTrackID: number): AVFragmentedAssetTrack;
  }

  // interface
  class AVFragmentedAssetMinder extends NSObject {
    // compoundStaticMethods
    static fragmentedAssetMinderWithAssetMindingInterval(asset: AVAsset, mindingInterval: number): AVFragmentedAssetMinder;
    // ownInstanceProperties
    assets: AVAsset[];
    // ownInstanceProperties
    mindingInterval: number;
    setMindingInterval(_: number)
    // compoundInstanceMethods
    addFragmentedAsset(_: AVAsset): void;
    // compoundInstanceMethods
    static createWithAssetMindingInterval(asset: AVAsset, mindingInterval: number): AVFragmentedAssetMinder;
    // compoundInstanceMethods
    removeFragmentedAsset(_: AVAsset): void;
  }

  // interface
  class AVFragmentedAssetTrack extends AVAssetTrack {
  }

  // interface
  class AVFragmentedMovie extends AVMovie {
    // compoundInstanceMethods
    //  trackWithTrackID(withTrackID: number): AVFragmentedMovieTrack;
  }

  // interface
  class AVFragmentedMovieMinder extends AVFragmentedAssetMinder {
    // compoundStaticMethods
    //  static fragmentedAssetMinderWithAssetMindingInterval(asset: AVAsset, mindingInterval: number): AVFragmentedMovieMinder;
    // compoundStaticMethods
    static fragmentedMovieMinderWithMovieMindingInterval(movie: AVFragmentedMovie, mindingInterval: number): AVFragmentedMovieMinder;
    // ownInstanceProperties
    movies: AVFragmentedMovie[];
    // compoundInstanceMethods
    addFragmentedMovie(_: AVFragmentedMovie): void;
    // compoundInstanceMethods
    static createWithMovieMindingInterval(movie: AVFragmentedMovie, mindingInterval: number): AVFragmentedMovieMinder;
    // compoundInstanceMethods
    removeFragmentedMovie(_: AVFragmentedMovie): void;
  }

  // interface
  class AVFragmentedMovieTrack extends AVMovieTrack {
  }

  // interface
  class AVFrameRateRange extends NSObject {
    // ownInstanceProperties
    maxFrameDuration: CMTime;
    // ownInstanceProperties
    maxFrameRate: number;
    // ownInstanceProperties
    minFrameDuration: CMTime;
    // ownInstanceProperties
    minFrameRate: number;
  }

  // interface
  class AVMIDIPlayer extends NSObject {
    // ownInstanceProperties
    currentPosition: number;
    setCurrentPosition(_: number)
    // ownInstanceProperties
    duration: number;
    // ownInstanceProperties
    isPlaying: boolean;
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
    // compoundInstanceMethods
    static createWithContentsOfURLSoundBankURL(contentsOfURL: NSURL, soundBankURL?: NSURL): AVMIDIPlayer;
    // compoundInstanceMethods
    static createWithDataSoundBankURL(data: NSData, soundBankURL?: NSURL): AVMIDIPlayer;
    // compoundInstanceMethods
    play(_?: () => void): void;
    // compoundInstanceMethods
    prepareToPlay(): void;
    // compoundInstanceMethods
    stop(): void;
  }

  // export function AVMakeRectWithAspectRatioInsideRect(aspectRatio: CGSize, boundingRect: CGRect): CGRect;

  // interface
  class AVMediaDataStorage extends NSObject {
    // compoundInstanceMethods
    URL(): NSURL;
    // compoundInstanceMethods
    static createWithUrlOptions(URL: NSURL, options?: Map<string, any>): AVMediaDataStorage;
  }

  // interface
  class AVMediaSelection extends NSObject {
    // ownInstanceProperties
    asset: AVAsset;
    // compoundInstanceMethods
    mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup(to: AVMediaSelectionGroup): boolean;
    // compoundInstanceMethods
    selectedMediaOptionInMediaSelectionGroup(in_: AVMediaSelectionGroup): AVMediaSelectionOption;
  }

  // interface
  class AVMediaSelectionGroup extends NSObject {
    // compoundStaticMethods
    static mediaSelectionOptionsFromArrayFilteredAndSortedAccordingToPreferredLanguages(from: AVMediaSelectionOption[], filteredAndSortedAccordingToPreferredLanguages: string[]): AVMediaSelectionOption[];
    // compoundStaticMethods
    static mediaSelectionOptionsFromArrayWithLocale(from: AVMediaSelectionOption[], with_: NSLocale): AVMediaSelectionOption[];
    // compoundStaticMethods
    static mediaSelectionOptionsFromArrayWithMediaCharacteristics(from: AVMediaSelectionOption[], withMediaCharacteristics: string[]): AVMediaSelectionOption[];
    // compoundStaticMethods
    static mediaSelectionOptionsFromArrayWithoutMediaCharacteristics(from: AVMediaSelectionOption[], withoutMediaCharacteristics: string[]): AVMediaSelectionOption[];
    // compoundStaticMethods
    static playableMediaSelectionOptionsFromArray(from: AVMediaSelectionOption[]): AVMediaSelectionOption[];
    // ownInstanceProperties
    allowsEmptySelection: boolean;
    // ownInstanceProperties
    defaultOption: AVMediaSelectionOption;
    // ownInstanceProperties
    options: AVMediaSelectionOption[];
    // compoundInstanceMethods
    mediaSelectionOptionWithPropertyList(withPropertyList: any): AVMediaSelectionOption;
  }

  // interface
  class AVMediaSelectionOption extends NSObject {
    // ownInstanceProperties
    availableMetadataFormats: string[];
    // ownInstanceProperties
    commonMetadata: AVMetadataItem[];
    // ownInstanceProperties
    displayName: string;
    // ownInstanceProperties
    extendedLanguageTag: string;
    // ownInstanceProperties
    locale: NSLocale;
    // ownInstanceProperties
    mediaSubTypes: number[];
    // ownInstanceProperties
    mediaType: string;
    // ownInstanceProperties
    isPlayable: boolean;
    // compoundInstanceMethods
    associatedMediaSelectionOptionInMediaSelectionGroup(in_: AVMediaSelectionGroup): AVMediaSelectionOption;
    // compoundInstanceMethods
    displayNameWithLocale(with_: NSLocale): string;
    // compoundInstanceMethods
    hasMediaCharacteristic(_: string): boolean;
    // compoundInstanceMethods
    metadataForFormat(forFormat: string): AVMetadataItem[];
    // compoundInstanceMethods
    propertyList(): any;
  }

  // interface
  class AVMetadataBodyObject extends AVMetadataObject {
    // ownInstanceProperties
    bodyID: number;
  }

  // interface
  class AVMetadataCatBodyObject extends AVMetadataBodyObject {
  }

  // interface
  class AVMetadataDogBodyObject extends AVMetadataBodyObject {
  }

  // interface
  class AVMetadataFaceObject extends AVMetadataObject {
    // ownInstanceProperties
    faceID: number;
    // ownInstanceProperties
    hasRollAngle: boolean;
    // ownInstanceProperties
    hasYawAngle: boolean;
    // ownInstanceProperties
    rollAngle: number;
    // ownInstanceProperties
    yawAngle: number;
  }

  // interface
  class AVMetadataGroup extends NSObject {
    // ownInstanceProperties
    classifyingLabel: string;
    // ownInstanceProperties
    items: AVMetadataItem[];
    // ownInstanceProperties
    uniqueID: string;
  }

  // interface
  class AVMetadataHumanBodyObject extends AVMetadataBodyObject {
  }

  // interface
  class AVMetadataItem extends NSObject {
    // compoundStaticMethods
    static identifierForKeyKeySpace(forKey: any, keySpace: string): string;
    // compoundStaticMethods
    static keyForIdentifier(forIdentifier: string): any;
    // compoundStaticMethods
    static keySpaceForIdentifier(forIdentifier: string): string;
    // compoundStaticMethods
    static metadataItemsFromArrayFilteredAndSortedAccordingToPreferredLanguages(from: AVMetadataItem[], filteredAndSortedAccordingToPreferredLanguages: string[]): AVMetadataItem[];
    // compoundStaticMethods
    static metadataItemsFromArrayFilteredByIdentifier(from: AVMetadataItem[], filteredByIdentifier: string): AVMetadataItem[];
    // compoundStaticMethods
    static metadataItemsFromArrayFilteredByMetadataItemFilter(from: AVMetadataItem[], filteredBy: AVMetadataItemFilter): AVMetadataItem[];
    // compoundStaticMethods
    static metadataItemsFromArrayWithKeyKeySpace(from: AVMetadataItem[], withKey?: any, keySpace?: string): AVMetadataItem[];
    // compoundStaticMethods
    static metadataItemsFromArrayWithLocale(from: AVMetadataItem[], with_: NSLocale): AVMetadataItem[];
    // ownInstanceProperties
    commonKey: string;
    // ownInstanceProperties
    dataType: string;
    // ownInstanceProperties
    dataValue: NSData;
    // ownInstanceProperties
    dateValue: Date;
    // ownInstanceProperties
    duration: CMTime;
    // ownInstanceProperties
    extendedLanguageTag: string;
    // ownInstanceProperties
    extraAttributes: Map<string, any>;
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    key: any;
    // ownInstanceProperties
    keySpace: string;
    // ownInstanceProperties
    locale: NSLocale;
    // ownInstanceProperties
    numberValue: number;
    // ownInstanceProperties
    startDate: Date;
    // ownInstanceProperties
    stringValue: string;
    // ownInstanceProperties
    time: CMTime;
    // ownInstanceProperties
    value: any;
  }

  // interface
  class AVMetadataItemFilter extends NSObject {
    // compoundStaticMethods
    static metadataItemFilterForSharing(): AVMetadataItemFilter;
  }

  // interface
  class AVMetadataItemValueRequest extends NSObject {
    // ownInstanceProperties
    metadataItem: AVMetadataItem;
    // compoundInstanceMethods
    respondWithError(error: NSError): void;
    // compoundInstanceMethods
    respondWithValue(value: any): void;
  }

  // interface
  class AVMetadataMachineReadableCodeObject extends AVMetadataObject {
    // ownInstanceProperties
    corners: Map<any, any>[];
    // ownInstanceProperties
    descriptor: CIBarcodeDescriptor;
    // ownInstanceProperties
    stringValue: string;
  }

  // interface
  class AVMetadataObject extends NSObject {
    // ownInstanceProperties
    bounds: CGRect;
    // ownInstanceProperties
    duration: CMTime;
    // ownInstanceProperties
    time: CMTime;
    // ownInstanceProperties
    type: string;
  }

  // interface
  class AVMetadataSalientObject extends AVMetadataObject {
    // ownInstanceProperties
    objectID: number;
  }

  // interface
  class AVMovie extends AVAsset {
    // compoundStaticMethods
    static movieTypes(): string[];
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    canContainMovieFragments: boolean;
    // ownInstanceProperties
    containsMovieFragments: boolean;
    // ownInstanceProperties
    data: NSData;
    // ownInstanceProperties
    defaultMediaDataStorage: AVMediaDataStorage;
    // compoundInstanceMethods
    static createWithDataOptions(data: NSData, options?: Map<string, any>): AVMovie;
    // compoundInstanceMethods
    static createWithUrlOptions(URL: NSURL, options?: Map<string, any>): AVMovie;
    // compoundInstanceMethods
    isCompatibleWithFileType(compatibleWithFileType: string): boolean;
    // compoundInstanceMethods
    movieHeaderWithFileTypeError(fileType: string): NSData;
    // compoundInstanceMethods
    //  trackWithTrackID(withTrackID: number): AVMovieTrack;
    // compoundInstanceMethods
    writeMovieHeaderToURLFileTypeOptionsError(fileType: NSURL, options: string, error: AVMovieWritingOptions): boolean;
  }

  // interface
  class AVMovieTrack extends AVAssetTrack {
    // ownInstanceProperties
    alternateGroupID: number;
    // ownInstanceProperties
    mediaDataStorage: AVMediaDataStorage;
    // ownInstanceProperties
    mediaDecodeTimeRange: CMTimeRange;
    // ownInstanceProperties
    mediaPresentationTimeRange: CMTimeRange;
  }

  // interface
  class AVMusicTrack extends NSObject {
    // ownInstanceProperties
    destinationAudioUnit: AVAudioUnit;
    setDestinationAudioUnit(_: AVAudioUnit)
    // ownInstanceProperties
    destinationMIDIEndpoint: number;
    setDestinationMIDIEndpoint(_: number)
    // ownInstanceProperties
    lengthInBeats: number;
    setLengthInBeats(_: number)
    // ownInstanceProperties
    lengthInSeconds: number;
    setLengthInSeconds(_: number)
    // ownInstanceProperties
    loopRange: AVFAudio.AVAudioSequencer;
    setLoopRange(_: AVFAudio.AVAudioSequencer)
    // ownInstanceProperties
    isLoopingEnabled: boolean;
    setLoopingEnabled(_: boolean)
    // ownInstanceProperties
    isMuted: boolean;
    setMuted(_: boolean)
    // ownInstanceProperties
    numberOfLoops: number;
    setNumberOfLoops(_: number)
    // ownInstanceProperties
    offsetTime: number;
    setOffsetTime(_: number)
    // ownInstanceProperties
    isSoloed: boolean;
    setSoloed(_: boolean)
    // ownInstanceProperties
    timeResolution: number;
  }

  // interface
  class AVMutableAudioMix extends AVAudioMix {
    // compoundStaticMethods
    static audioMix(): AVMutableAudioMix;
    // ownInstanceProperties
    //   inputParameters: AVAudioMixInputParameters[];
    setInputParameters(_: AVAudioMixInputParameters[])
  }

  // interface
  class AVMutableAudioMixInputParameters extends AVAudioMixInputParameters {
    // compoundStaticMethods
    static audioMixInputParameters(): AVMutableAudioMixInputParameters;
    // compoundStaticMethods
    static audioMixInputParametersWithTrack(track?: AVAssetTrack): AVMutableAudioMixInputParameters;
    // ownInstanceProperties
    //   audioTapProcessor: any;
    setAudioTapProcessor(_: any)
    // ownInstanceProperties
    //   audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string)
    // ownInstanceProperties
    //   trackID: number;
    setTrackID(_: number)
    // compoundInstanceMethods
    setVolumeAtTime(_: number, at: CMTime): void;
    // compoundInstanceMethods
    setVolumeRampFromStartVolumeToEndVolumeTimeRange(fromStartVolume: number, toEndVolume: number, timeRange: CMTimeRange): void;
  }

  // interface
  class AVMutableComposition extends AVComposition {
    // compoundStaticMethods
    static composition(): AVMutableComposition;
    // compoundStaticMethods
    static compositionWithURLAssetInitializationOptions(urlAssetInitializationOptions?: Map<string, any>): AVMutableComposition;
    // ownInstanceProperties
    //   naturalSize: CGSize;
    setNaturalSize(_: CGSize)
    // compoundInstanceMethods
    addMutableTrackWithMediaTypePreferredTrackID(withMediaType: string, preferredTrackID: number): AVMutableCompositionTrack;
    // compoundInstanceMethods
    insertEmptyTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    insertTimeRangeOfAssetAtTimeError(_: CMTimeRange, of: AVAsset, at: CMTime): boolean;
    // compoundInstanceMethods
    mutableTrackCompatibleWithTrack(compatibleWith: AVAssetTrack): AVMutableCompositionTrack;
    // compoundInstanceMethods
    removeTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    removeTrack(_: AVCompositionTrack): void;
    // compoundInstanceMethods
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
    // compoundInstanceMethods
    //  trackWithTrackID(withTrackID: number): AVMutableCompositionTrack;
  }

  // interface
  class AVMutableCompositionTrack extends AVCompositionTrack {
    // ownInstanceProperties
    //   isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    //   extendedLanguageTag: string;
    setExtendedLanguageTag(_: string)
    // ownInstanceProperties
    //   languageCode: string;
    setLanguageCode(_: string)
    // ownInstanceProperties
    //   naturalTimeScale: number;
    setNaturalTimeScale(_: number)
    // ownInstanceProperties
    //   preferredTransform: CGAffineTransform;
    setPreferredTransform(_: CGAffineTransform)
    // ownInstanceProperties
    //   preferredVolume: number;
    setPreferredVolume(_: number)
    // ownInstanceProperties
    //   segments: AVCompositionTrackSegment[];
    setSegments(_: AVCompositionTrackSegment[])
    // compoundInstanceMethods
    addTrackAssociationToTrackType(to: AVCompositionTrack, type: string): void;
    // compoundInstanceMethods
    insertEmptyTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    insertTimeRangeOfTrackAtTimeError(ofTrack: CMTimeRange, atTime: AVAssetTrack, error: CMTime): boolean;
    // compoundInstanceMethods
    insertTimeRangesOfTracksAtTimeError(ofTracks: NSValue[], atTime: AVAssetTrack[], error: CMTime): boolean;
    // compoundInstanceMethods
    removeTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    removeTrackAssociationToTrackType(to: AVCompositionTrack, type: string): void;
    // compoundInstanceMethods
    replaceFormatDescriptionWithFormatDescription(_: any, with_?: any): void;
    // compoundInstanceMethods
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
    // compoundInstanceMethods
    validateTrackSegmentsError(error: AVCompositionTrackSegment[]): boolean;
  }

  // interface
  class AVMutableDateRangeMetadataGroup extends AVDateRangeMetadataGroup {
    // ownInstanceProperties
    //   endDate: Date;
    setEndDate(_: Date)
    // ownInstanceProperties
    //   items: AVMetadataItem[];
    setItems(_: AVMetadataItem[])
    // ownInstanceProperties
    //   startDate: Date;
    setStartDate(_: Date)
  }

  // interface
  class AVMutableMediaSelection extends AVMediaSelection {
    // compoundInstanceMethods
    selectMediaOptionInMediaSelectionGroup(_?: AVMediaSelectionOption, in_?: AVMediaSelectionGroup): void;
  }

  // interface
  class AVMutableMetadataItem extends AVMetadataItem {
    // compoundStaticMethods
    static metadataItem(): AVMutableMetadataItem;
    // ownInstanceProperties
    //   dataType: string;
    setDataType(_: string)
    // ownInstanceProperties
    //   duration: CMTime;
    setDuration(_: CMTime)
    // ownInstanceProperties
    //   extendedLanguageTag: string;
    setExtendedLanguageTag(_: string)
    // ownInstanceProperties
    //   extraAttributes: Map<string, any>;
    setExtraAttributes(_: Map<string, any>)
    // ownInstanceProperties
    //   identifier: string;
    setIdentifier(_: string)
    // ownInstanceProperties
    //   key: any;
    setKey(_: any)
    // ownInstanceProperties
    //   keySpace: string;
    setKeySpace(_: string)
    // ownInstanceProperties
    //   locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    //   startDate: Date;
    setStartDate(_: Date)
    // ownInstanceProperties
    //   time: CMTime;
    setTime(_: CMTime)
    // ownInstanceProperties
    //   value: any;
    setValue(_: any)
  }

  // interface
  class AVMutableMovie extends AVMovie {
    // compoundStaticMethods
    static movieWithDataOptionsError(data: NSData, options?: Map<string, any>): AVMutableMovie;
    // compoundStaticMethods
    static movieWithSettingsFromMovieOptionsError(options?: AVMovie, error?: Map<string, any>): AVMutableMovie;
    // compoundStaticMethods
    static movieWithURLOptionsError(url: NSURL, options?: Map<string, any>): AVMutableMovie;
    // ownInstanceProperties
    //   defaultMediaDataStorage: AVMediaDataStorage;
    setDefaultMediaDataStorage(_: AVMediaDataStorage)
    // ownInstanceProperties
    interleavingPeriod: CMTime;
    setInterleavingPeriod(_: CMTime)
    // ownInstanceProperties
    //   metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[])
    // ownInstanceProperties
    isModified: boolean;
    setModified(_: boolean)
    // ownInstanceProperties
    //   preferredRate: number;
    setPreferredRate(_: number)
    // ownInstanceProperties
    //   preferredTransform: CGAffineTransform;
    setPreferredTransform(_: CGAffineTransform)
    // ownInstanceProperties
    //   preferredVolume: number;
    setPreferredVolume(_: number)
    // ownInstanceProperties
    timescale: number;
    setTimescale(_: number)
    // compoundInstanceMethods
    addMutableTrackWithMediaTypeCopySettingsFromTrackOptions(withMediaType: string, copySettingsFrom?: AVAssetTrack, options?: Map<string, any>): AVMutableMovieTrack;
    // compoundInstanceMethods
    addMutableTracksCopyingSettingsFromTracksOptions(from: AVAssetTrack[], options?: Map<string, any>): AVMutableMovieTrack[];
    // compoundInstanceMethods
    //  static createWithDataOptions(data: NSData, options?: Map<string, any>): AVMutableMovie;
    // compoundInstanceMethods
    static createWithSettingsFromMovieOptions(settingsFromMovie?: AVMovie, options?: Map<string, any>): AVMutableMovie;
    // compoundInstanceMethods
    //  static createWithUrlOptions(URL: NSURL, options?: Map<string, any>): AVMutableMovie;
    // compoundInstanceMethods
    insertEmptyTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    insertTimeRangeOfAssetAtTimeCopySampleDataError(_: CMTimeRange, of: AVAsset, at: CMTime, copySampleData: boolean): boolean;
    // compoundInstanceMethods
    mutableTrackCompatibleWithTrack(compatibleWith: AVAssetTrack): AVMutableMovieTrack;
    // compoundInstanceMethods
    removeTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    removeTrack(_: AVMovieTrack): void;
    // compoundInstanceMethods
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
    // compoundInstanceMethods
    //  trackWithTrackID(withTrackID: number): AVMutableMovieTrack;
  }

  // interface
  class AVMutableMovieTrack extends AVMovieTrack {
    // ownInstanceProperties
    //   alternateGroupID: number;
    setAlternateGroupID(_: number)
    // ownInstanceProperties
    cleanApertureDimensions: CGSize;
    setCleanApertureDimensions(_: CGSize)
    // ownInstanceProperties
    //   isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    encodedPixelsDimensions: CGSize;
    setEncodedPixelsDimensions(_: CGSize)
    // ownInstanceProperties
    //   extendedLanguageTag: string;
    setExtendedLanguageTag(_: string)
    // ownInstanceProperties
    hasProtectedContent: boolean;
    // ownInstanceProperties
    //   languageCode: string;
    setLanguageCode(_: string)
    // ownInstanceProperties
    layer: number;
    setLayer(_: number)
    // ownInstanceProperties
    //   mediaDataStorage: AVMediaDataStorage;
    setMediaDataStorage(_: AVMediaDataStorage)
    // ownInstanceProperties
    //   metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[])
    // ownInstanceProperties
    isModified: boolean;
    setModified(_: boolean)
    // ownInstanceProperties
    //   naturalSize: CGSize;
    setNaturalSize(_: CGSize)
    // ownInstanceProperties
    preferredMediaChunkAlignment: number;
    setPreferredMediaChunkAlignment(_: number)
    // ownInstanceProperties
    preferredMediaChunkDuration: CMTime;
    setPreferredMediaChunkDuration(_: CMTime)
    // ownInstanceProperties
    preferredMediaChunkSize: number;
    setPreferredMediaChunkSize(_: number)
    // ownInstanceProperties
    //   preferredTransform: CGAffineTransform;
    setPreferredTransform(_: CGAffineTransform)
    // ownInstanceProperties
    //   preferredVolume: number;
    setPreferredVolume(_: number)
    // ownInstanceProperties
    productionApertureDimensions: CGSize;
    setProductionApertureDimensions(_: CGSize)
    // ownInstanceProperties
    sampleReferenceBaseURL: NSURL;
    setSampleReferenceBaseURL(_: NSURL)
    // ownInstanceProperties
    timescale: number;
    setTimescale(_: number)
    // compoundInstanceMethods
    addTrackAssociationToTrackType(to: AVMovieTrack, type: string): void;
    // compoundInstanceMethods
    appendSampleBufferDecodeTimePresentationTimeError(_: any, decodeTime?: CMTime, presentationTime?: CMTime): boolean;
    // compoundInstanceMethods
    insertEmptyTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    insertMediaTimeRangeIntoTimeRange(_: CMTimeRange, into: CMTimeRange): boolean;
    // compoundInstanceMethods
    insertTimeRangeOfTrackAtTimeCopySampleDataError(ofTrack: CMTimeRange, atTime: AVAssetTrack, copySampleData: CMTime, error: boolean): boolean;
    // compoundInstanceMethods
    removeTimeRange(_: CMTimeRange): void;
    // compoundInstanceMethods
    removeTrackAssociationToTrackType(to: AVMovieTrack, type: string): void;
    // compoundInstanceMethods
    replaceFormatDescriptionWithFormatDescription(_: any, with_: any): void;
    // compoundInstanceMethods
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
  }

  // interface
  class AVMutableTimedMetadataGroup extends AVTimedMetadataGroup {
    // ownInstanceProperties
    //   items: AVMetadataItem[];
    setItems(_: AVMetadataItem[])
    // ownInstanceProperties
    //   timeRange: CMTimeRange;
    setTimeRange(_: CMTimeRange)
  }

  // interface
  class AVMutableVideoComposition extends AVVideoComposition {
    // compoundStaticMethods
    static videoComposition(): AVMutableVideoComposition;
    // compoundStaticMethods
    static videoCompositionWithPropertiesOfAssetPrototypeInstruction(propertiesOf: AVAsset, prototypeInstruction: AVVideoCompositionInstruction): AVMutableVideoComposition;
    // ownInstanceProperties
    //   animationTool: AVVideoCompositionCoreAnimationTool;
    setAnimationTool(_: AVVideoCompositionCoreAnimationTool)
    // ownInstanceProperties
    //   colorPrimaries: string;
    setColorPrimaries(_: string)
    // ownInstanceProperties
    //   colorTransferFunction: string;
    setColorTransferFunction(_: string)
    // ownInstanceProperties
    //   colorYCbCrMatrix: string;
    setColorYCbCrMatrix(_: string)
    // ownInstanceProperties
    //   customVideoCompositorClass: typeof NSObject;
    setCustomVideoCompositorClass(_: typeof NSObject)
    // ownInstanceProperties
    //   frameDuration: CMTime;
    setFrameDuration(_: CMTime)
    // ownInstanceProperties
    //   instructions: AVVideoCompositionInstruction[];
    setInstructions(_: AVVideoCompositionInstruction[])
    // ownInstanceProperties
    //   renderScale: number;
    setRenderScale(_: number)
    // ownInstanceProperties
    //   renderSize: CGSize;
    setRenderSize(_: CGSize)
    // ownInstanceProperties
    //   sourceTrackIDForFrameTiming: number;
    setSourceTrackIDForFrameTiming(_: number)
  }

  // interface
  class AVMutableVideoCompositionInstruction extends AVVideoCompositionInstruction {
    // compoundStaticMethods
    static videoCompositionInstruction(): AVMutableVideoCompositionInstruction;
    // ownInstanceProperties
    //   backgroundColor: any;
    setBackgroundColor(_: any)
    // ownInstanceProperties
    enablePostProcessing: boolean;
    setEnablePostProcessing(_: boolean)
    // ownInstanceProperties
    //   layerInstructions: AVVideoCompositionLayerInstruction[];
    setLayerInstructions(_: AVVideoCompositionLayerInstruction[])
    // ownInstanceProperties
    timeRange: CMTimeRange;
    setTimeRange(_: CMTimeRange)
  }

  // interface
  class AVMutableVideoCompositionLayerInstruction extends AVVideoCompositionLayerInstruction {
    // compoundStaticMethods
    static videoCompositionLayerInstruction(): AVMutableVideoCompositionLayerInstruction;
    // compoundStaticMethods
    static videoCompositionLayerInstructionWithAssetTrack(assetTrack: AVAssetTrack): AVMutableVideoCompositionLayerInstruction;
    // ownInstanceProperties
    //   trackID: number;
    setTrackID(_: number)
    // compoundInstanceMethods
    setCropRectangleAtTime(_: CGRect, at: CMTime): void;
    // compoundInstanceMethods
    setCropRectangleRampFromStartCropRectangleToEndCropRectangleTimeRange(fromStartCropRectangle: CGRect, toEndCropRectangle: CGRect, timeRange: CMTimeRange): void;
    // compoundInstanceMethods
    setOpacityAtTime(_: number, at: CMTime): void;
    // compoundInstanceMethods
    setOpacityRampFromStartOpacityToEndOpacityTimeRange(fromStartOpacity: number, toEndOpacity: number, timeRange: CMTimeRange): void;
    // compoundInstanceMethods
    setTransformAtTime(_: CGAffineTransform, at: CMTime): void;
    // compoundInstanceMethods
    setTransformRampFromStartTransformToEndTransformTimeRange(fromStart: CGAffineTransform, toEnd: CGAffineTransform, timeRange: CMTimeRange): void;
  }

  // interface
  class AVOutputSettingsAssistant extends NSObject {
    // compoundStaticMethods
    static availableOutputSettingsPresets(): string[];
    // ownInstanceProperties
    audioSettings: Map<string, any>;
    // ownInstanceProperties
    outputFileType: string;
    // ownInstanceProperties
    sourceAudioFormat: any;
    setSourceAudioFormat(_: any)
    // ownInstanceProperties
    sourceVideoAverageFrameDuration: CMTime;
    setSourceVideoAverageFrameDuration(_: CMTime)
    // ownInstanceProperties
    sourceVideoFormat: any;
    setSourceVideoFormat(_: any)
    // ownInstanceProperties
    sourceVideoMinFrameDuration: CMTime;
    setSourceVideoMinFrameDuration(_: CMTime)
    // ownInstanceProperties
    videoSettings: Map<string, any>;
  }

  // interface
  class AVPersistableContentKeyRequest extends AVContentKeyRequest {
    // compoundInstanceMethods
    persistableContentKeyFromKeyVendorResponseOptionsError(options: NSData, error?: Map<string, any>): NSData;
  }

  // interface
  class AVPlayer extends NSObject {
    // ownInstanceProperties
    actionAtItemEnd: AVPlayer.ActionAtItemEnd;
    setActionAtItemEnd(_: AVPlayer.ActionAtItemEnd)
    // ownInstanceProperties
    allowsExternalPlayback: boolean;
    setAllowsExternalPlayback(_: boolean)
    // ownInstanceProperties
    appliesMediaSelectionCriteriaAutomatically: boolean;
    setAppliesMediaSelectionCriteriaAutomatically(_: boolean)
    // ownInstanceProperties
    audioOutputDeviceUniqueID: string;
    setAudioOutputDeviceUniqueID(_: string)
    // ownInstanceProperties
    automaticallyWaitsToMinimizeStalling: boolean;
    setAutomaticallyWaitsToMinimizeStalling(_: boolean)
    // ownInstanceProperties
    currentItem: AVPlayerItem;
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    isExternalPlaybackActive: boolean;
    // ownInstanceProperties
    masterClock: any;
    setMasterClock(_: any)
    // ownInstanceProperties
    isMuted: boolean;
    setMuted(_: boolean)
    // ownInstanceProperties
    outputObscuredDueToInsufficientExternalProtection: boolean;
    // ownInstanceProperties
    preferredVideoDecoderGPURegistryID: number;
    setPreferredVideoDecoderGPURegistryID(_: number)
    // ownInstanceProperties
    preventsDisplaySleepDuringVideoPlayback: boolean;
    setPreventsDisplaySleepDuringVideoPlayback(_: boolean)
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
    // ownInstanceProperties
    reasonForWaitingToPlay: string;
    // ownInstanceProperties
    status: AVPlayer.Status;
    // ownInstanceProperties
    timeControlStatus: AVPlayer.TimeControlStatus;
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
    // ownStaticProperties
    static eligibleForHDRPlayback: boolean;
    // compoundInstanceMethods
    addBoundaryTimeObserverWithForTimesQueueUsing(forTimes: NSValue[], queue?: NSObject, using?: () => void): any;
    // compoundInstanceMethods
    addPeriodicTimeObserverWithForIntervalQueueUsing(forInterval: CMTime, queue?: NSObject, using?: (p1: CMTime) => void): any;
    // compoundInstanceMethods
    cancelPendingPrerolls(): void;
    // compoundInstanceMethods
    currentTime(): CMTime;
    // compoundInstanceMethods
    static createWithPlayerItem(playerItem?: AVPlayerItem): AVPlayer;
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): AVPlayer;
    // compoundInstanceMethods
    mediaSelectionCriteriaForMediaCharacteristic(forMediaCharacteristic: string): AVPlayerMediaSelectionCriteria;
    // compoundInstanceMethods
    pause(): void;
    // compoundInstanceMethods
    play(): void;
    // compoundInstanceMethods
    playImmediatelyAtRate(atRate: number): void;
    // compoundInstanceMethods
    prerollWithAtRateCompletionHandler(atRate: number, completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    removeTimeObserver(_: any): void;
    // compoundInstanceMethods
    replaceCurrentItemWithPlayerItem(with_?: AVPlayerItem): void;
    // compoundInstanceMethods
    seekToDate(to: Date): void;
    // compoundInstanceMethods
    seekWithToCompletionHandler(to: Date, completionHandler: (p1: boolean) => void): void;
    // compoundInstanceMethods
    seekToTime(to: CMTime): void;
    // compoundInstanceMethods
    seekWithToCompletionHandler(to: CMTime, completionHandler: (p1: boolean) => void): void;
    // compoundInstanceMethods
    seekToTimeToleranceBeforeToleranceAfter(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime): void;
    // compoundInstanceMethods
    seekWithToToleranceBeforeToleranceAfterCompletionHandler(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime, completionHandler: (p1: boolean) => void): void;
    // compoundInstanceMethods
    setMediaSelectionCriteriaForMediaCharacteristic(_?: AVPlayerMediaSelectionCriteria, forMediaCharacteristic?: string): void;
    // compoundInstanceMethods
    setRateTimeAtHostTime(_: number, time: CMTime, atHostTime: CMTime): void;
  }

  // interface
  class AVPlayerItem extends NSObject {
    // ownInstanceProperties
    isApplicationAuthorizedForPlayback: boolean;
    // ownInstanceProperties
    asset: AVAsset;
    // ownInstanceProperties
    audioMix: AVAudioMix;
    setAudioMix(_: AVAudioMix)
    // ownInstanceProperties
    isAudioSpatializationAllowed: boolean;
    setAudioSpatializationAllowed(_: boolean)
    // ownInstanceProperties
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string)
    // ownInstanceProperties
    isAuthorizationRequiredForPlayback: boolean;
    // ownInstanceProperties
    automaticallyLoadedAssetKeys: string[];
    // ownInstanceProperties
    automaticallyPreservesTimeOffsetFromLive: boolean;
    setAutomaticallyPreservesTimeOffsetFromLive(_: boolean)
    // ownInstanceProperties
    canPlayFastForward: boolean;
    // ownInstanceProperties
    canPlayFastReverse: boolean;
    // ownInstanceProperties
    canPlayReverse: boolean;
    // ownInstanceProperties
    canPlaySlowForward: boolean;
    // ownInstanceProperties
    canPlaySlowReverse: boolean;
    // ownInstanceProperties
    canStepBackward: boolean;
    // ownInstanceProperties
    canStepForward: boolean;
    // ownInstanceProperties
    canUseNetworkResourcesForLiveStreamingWhilePaused: boolean;
    setCanUseNetworkResourcesForLiveStreamingWhilePaused(_: boolean)
    // ownInstanceProperties
    configuredTimeOffsetFromLive: CMTime;
    setConfiguredTimeOffsetFromLive(_: CMTime)
    // ownInstanceProperties
    contentAuthorizationRequestStatus: AVContentAuthorizationStatus;
    // ownInstanceProperties
    isContentAuthorizedForPlayback: boolean;
    // ownInstanceProperties
    currentMediaSelection: AVMediaSelection;
    // ownInstanceProperties
    customVideoCompositor: AVVideoCompositing;
    // ownInstanceProperties
    duration: CMTime;
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    forwardPlaybackEndTime: CMTime;
    setForwardPlaybackEndTime(_: CMTime)
    // ownInstanceProperties
    loadedTimeRanges: NSValue[];
    // ownInstanceProperties
    mediaDataCollectors: AVPlayerItemMediaDataCollector[];
    // ownInstanceProperties
    outputs: AVPlayerItemOutput[];
    // ownInstanceProperties
    isPlaybackBufferEmpty: boolean;
    // ownInstanceProperties
    isPlaybackBufferFull: boolean;
    // ownInstanceProperties
    isPlaybackLikelyToKeepUp: boolean;
    // ownInstanceProperties
    preferredForwardBufferDuration: number;
    setPreferredForwardBufferDuration(_: number)
    // ownInstanceProperties
    preferredMaximumResolution: CGSize;
    setPreferredMaximumResolution(_: CGSize)
    // ownInstanceProperties
    preferredPeakBitRate: number;
    setPreferredPeakBitRate(_: number)
    // ownInstanceProperties
    presentationSize: CGSize;
    // ownInstanceProperties
    recommendedTimeOffsetFromLive: CMTime;
    // ownInstanceProperties
    reversePlaybackEndTime: CMTime;
    setReversePlaybackEndTime(_: CMTime)
    // ownInstanceProperties
    seekableTimeRanges: NSValue[];
    // ownInstanceProperties
    seekingWaitsForVideoCompositionRendering: boolean;
    setSeekingWaitsForVideoCompositionRendering(_: boolean)
    // ownInstanceProperties
    status: AVPlayerItem.Status;
    // ownInstanceProperties
    textStyleRules: AVTextStyleRule[];
    setTextStyleRules(_: AVTextStyleRule[])
    // ownInstanceProperties
    timebase: any;
    // ownInstanceProperties
    tracks: AVPlayerItemTrack[];
    // ownInstanceProperties
    videoApertureMode: string;
    setVideoApertureMode(_: string)
    // ownInstanceProperties
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition)
    // compoundInstanceMethods
    accessLog(): AVPlayerItemAccessLog;
    // compoundInstanceMethods
    addMediaDataCollector(_: AVPlayerItemMediaDataCollector): void;
    // compoundInstanceMethods
    addOutput(_: AVPlayerItemOutput): void;
    // compoundInstanceMethods
    cancelContentAuthorizationRequest(): void;
    // compoundInstanceMethods
    cancelPendingSeeks(): void;
    // compoundInstanceMethods
    currentDate(): Date;
    // compoundInstanceMethods
    currentTime(): CMTime;
    // compoundInstanceMethods
    errorLog(): AVPlayerItemErrorLog;
    // compoundInstanceMethods
    static createWithAsset(asset: AVAsset): AVPlayerItem;
    // compoundInstanceMethods
    static createWithAssetAutomaticallyLoadedAssetKeys(asset: AVAsset, automaticallyLoadedAssetKeys?: string[]): AVPlayerItem;
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): AVPlayerItem;
    // compoundInstanceMethods
    removeMediaDataCollector(_: AVPlayerItemMediaDataCollector): void;
    // compoundInstanceMethods
    removeOutput(_: AVPlayerItemOutput): void;
    // compoundInstanceMethods
    requestContentAuthorizationAsynchronouslyWithWithTimeoutIntervalCompletionHandler(withTimeoutInterval: number, completionHandler: () => void): void;
    // compoundInstanceMethods
    seekWithToCompletionHandler(to: Date, completionHandler?: (p1: boolean) => void): boolean;
    // compoundInstanceMethods
    seekWithToCompletionHandler(to: CMTime, completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    seekWithToToleranceBeforeToleranceAfterCompletionHandler(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime, completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    selectMediaOptionInMediaSelectionGroup(_?: AVMediaSelectionOption, in_?: AVMediaSelectionGroup): void;
    // compoundInstanceMethods
    selectMediaOptionAutomaticallyInMediaSelectionGroup(in_: AVMediaSelectionGroup): void;
    // compoundInstanceMethods
    stepByCount(byCount: number): void;
  }

  // interface
  class AVPlayerItemAccessLog extends NSObject {
    // ownInstanceProperties
    events: AVPlayerItemAccessLogEvent[];
    // ownInstanceProperties
    extendedLogDataStringEncoding: number;
    // compoundInstanceMethods
    extendedLogData(): NSData;
  }

  // interface
  class AVPlayerItemAccessLogEvent extends NSObject {
    // ownInstanceProperties
    URI: string;
    // ownInstanceProperties
    averageAudioBitrate: number;
    // ownInstanceProperties
    averageVideoBitrate: number;
    // ownInstanceProperties
    downloadOverdue: number;
    // ownInstanceProperties
    durationWatched: number;
    // ownInstanceProperties
    indicatedAverageBitrate: number;
    // ownInstanceProperties
    indicatedBitrate: number;
    // ownInstanceProperties
    mediaRequestsWWAN: number;
    // ownInstanceProperties
    numberOfBytesTransferred: number;
    // ownInstanceProperties
    numberOfDroppedVideoFrames: number;
    // ownInstanceProperties
    numberOfMediaRequests: number;
    // ownInstanceProperties
    numberOfServerAddressChanges: number;
    // ownInstanceProperties
    numberOfStalls: number;
    // ownInstanceProperties
    observedBitrate: number;
    // ownInstanceProperties
    observedBitrateStandardDeviation: number;
    // ownInstanceProperties
    observedMaxBitrate: number;
    // ownInstanceProperties
    observedMinBitrate: number;
    // ownInstanceProperties
    playbackSessionID: string;
    // ownInstanceProperties
    playbackStartDate: Date;
    // ownInstanceProperties
    playbackStartOffset: number;
    // ownInstanceProperties
    playbackType: string;
    // ownInstanceProperties
    segmentsDownloadedDuration: number;
    // ownInstanceProperties
    serverAddress: string;
    // ownInstanceProperties
    startupTime: number;
    // ownInstanceProperties
    switchBitrate: number;
    // ownInstanceProperties
    transferDuration: number;
  }

  // interface
  class AVPlayerItemErrorLog extends NSObject {
    // ownInstanceProperties
    events: AVPlayerItemErrorLogEvent[];
    // ownInstanceProperties
    extendedLogDataStringEncoding: number;
    // compoundInstanceMethods
    extendedLogData(): NSData;
  }

  // interface
  class AVPlayerItemErrorLogEvent extends NSObject {
    // ownInstanceProperties
    URI: string;
    // ownInstanceProperties
    date: Date;
    // ownInstanceProperties
    errorComment: string;
    // ownInstanceProperties
    errorDomain: string;
    // ownInstanceProperties
    errorStatusCode: number;
    // ownInstanceProperties
    playbackSessionID: string;
    // ownInstanceProperties
    serverAddress: string;
  }

  // interface
  class AVPlayerItemLegibleOutput extends AVPlayerItemOutput {
    // ownInstanceProperties
    advanceIntervalForDelegateInvocation: number;
    setAdvanceIntervalForDelegateInvocation(_: number)
    // ownInstanceProperties
    delegate: AVPlayerItemLegibleOutputPushDelegate;
    // ownInstanceProperties
    delegateQueue: NSObject;
    // ownInstanceProperties
    textStylingResolution: string;
    setTextStylingResolution(_: string)
    // compoundInstanceMethods
    static createWithMediaSubtypesForNativeRepresentation(mediaSubtypesForNativeRepresentation: number[]): AVPlayerItemLegibleOutput;
    // compoundInstanceMethods
    setDelegateQueue(_?: AVPlayerItemLegibleOutputPushDelegate, queue?: NSObject): void;
  }

  interface AVPlayerItemLegibleOutputPushDelegate extends AVPlayerItemOutputPushDelegate {
    // instance method
    legibleOutputDidOutputAttributedStringsNativeSampleBuffersForItemTime?(_: AVPlayerItemLegibleOutput, didOutputAttributedStrings: NSAttributedString[], nativeSampleBuffers: any[], forItemTime: CMTime): void;
  }

  // interface
  class AVPlayerItemMediaDataCollector extends NSObject {
  }

  // interface
  class AVPlayerItemMetadataCollector extends AVPlayerItemMediaDataCollector {
    // ownInstanceProperties
    delegate: AVPlayerItemMetadataCollectorPushDelegate;
    // ownInstanceProperties
    delegateQueue: NSObject;
    // compoundInstanceMethods
    static createWithIdentifiersClassifyingLabels(identifiers?: string[], classifyingLabels?: string[]): AVPlayerItemMetadataCollector;
    // compoundInstanceMethods
    setDelegateQueue(_?: AVPlayerItemMetadataCollectorPushDelegate, queue?: NSObject): void;
  }

  interface AVPlayerItemMetadataCollectorPushDelegate extends NSObject {
    // instance method
    metadataCollectorDidCollectDateRangeMetadataGroupsIndexesOfNewGroupsIndexesOfModifiedGroups(_: AVPlayerItemMetadataCollector, didCollect: AVDateRangeMetadataGroup[], indexesOfNewGroups: NSIndexSet, indexesOfModifiedGroups: NSIndexSet): void;
  }

  // interface
  class AVPlayerItemMetadataOutput extends AVPlayerItemOutput {
    // ownInstanceProperties
    advanceIntervalForDelegateInvocation: number;
    setAdvanceIntervalForDelegateInvocation(_: number)
    // ownInstanceProperties
    delegate: AVPlayerItemMetadataOutputPushDelegate;
    // ownInstanceProperties
    delegateQueue: NSObject;
    // compoundInstanceMethods
    static createWithIdentifiers(identifiers?: string[]): AVPlayerItemMetadataOutput;
    // compoundInstanceMethods
    setDelegateQueue(_?: AVPlayerItemMetadataOutputPushDelegate, queue?: NSObject): void;
  }

  interface AVPlayerItemMetadataOutputPushDelegate extends AVPlayerItemOutputPushDelegate {
    // instance method
    metadataOutputDidOutputTimedMetadataGroupsFromPlayerItemTrack?(_: AVPlayerItemMetadataOutput, didOutputTimedMetadataGroups: AVTimedMetadataGroup[], from?: AVPlayerItemTrack): void;
  }

  // interface
  class AVPlayerItemOutput extends NSObject {
    // ownInstanceProperties
    suppressesPlayerRendering: boolean;
    setSuppressesPlayerRendering(_: boolean)
    // compoundInstanceMethods
    itemTimeForCVTimeStamp(for_: CVTimeStamp): CMTime;
    // compoundInstanceMethods
    itemTimeForHostTime(forHostTime: number): CMTime;
    // compoundInstanceMethods
    itemTimeForMachAbsoluteTime(forMachAbsoluteTime: number): CMTime;
  }

  interface AVPlayerItemOutputPullDelegate extends NSObject {
    // instance method
    outputMediaDataWillChange?(_: AVPlayerItemOutput): void;
    // instance method
    outputSequenceWasFlushed?(_: AVPlayerItemOutput): void;
  }

  interface AVPlayerItemOutputPushDelegate extends NSObject {
    // instance method
    outputSequenceWasFlushed?(_: AVPlayerItemOutput): void;
  }

  // interface
  class AVPlayerItemTrack extends NSObject {
    // ownInstanceProperties
    assetTrack: AVAssetTrack;
    // ownInstanceProperties
    currentVideoFrameRate: number;
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    videoFieldMode: string;
    setVideoFieldMode(_: string)
  }

  // interface
  class AVPlayerItemVideoOutput extends AVPlayerItemOutput {
    // ownInstanceProperties
    delegate: AVPlayerItemOutputPullDelegate;
    // ownInstanceProperties
    delegateQueue: NSObject;
    // compoundInstanceMethods
    copyPixelBufferForItemTimeItemTimeForDisplay(forItemTime: CMTime, itemTimeForDisplay?: CMTime): any;
    // compoundInstanceMethods
    hasNewPixelBufferForItemTime(forItemTime: CMTime): boolean;
    // compoundInstanceMethods
    static createWithOutputSettings(outputSettings?: Map<string, any>): AVPlayerItemVideoOutput;
    // compoundInstanceMethods
    static createWithPixelBufferAttributes(pixelBufferAttributes?: Map<string, any>): AVPlayerItemVideoOutput;
    // compoundInstanceMethods
    requestNotificationOfMediaDataChangeWithAdvanceInterval(withAdvanceInterval: number): void;
    // compoundInstanceMethods
    setDelegateQueue(_?: AVPlayerItemOutputPullDelegate, queue?: NSObject): void;
  }

  // interface
  class AVPlayerLayer extends CALayer {
    // ownInstanceProperties
    pixelBufferAttributes: Map<string, any>;
    setPixelBufferAttributes(_: Map<string, any>)
    // ownInstanceProperties
    player: AVPlayer;
    setPlayer(_: AVPlayer)
    // ownInstanceProperties
    isReadyForDisplay: boolean;
    // ownInstanceProperties
    videoGravity: string;
    setVideoGravity(_: string)
    // ownInstanceProperties
    videoRect: CGRect;
  }

  // interface
  class AVPlayerLooper extends NSObject {
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    loopCount: number;
    // ownInstanceProperties
    loopingPlayerItems: AVPlayerItem[];
    // ownInstanceProperties
    status: AVPlayerLooper.Status;
    // compoundInstanceMethods
    disableLooping(): void;
    // compoundInstanceMethods
    static createWithPlayerTemplateItemTimeRange(player: AVQueuePlayer, templateItem: AVPlayerItem, timeRange: CMTimeRange): AVPlayerLooper;
  }

  // interface
  class AVPlayerMediaSelectionCriteria extends NSObject {
    // ownInstanceProperties
    preferredLanguages: string[];
    // ownInstanceProperties
    preferredMediaCharacteristics: string[];
    // ownInstanceProperties
    principalMediaCharacteristics: string[];
    // compoundInstanceMethods
    static createWithPreferredLanguagesPreferredMediaCharacteristics(preferredLanguages?: string[], preferredMediaCharacteristics?: string[]): AVPlayerMediaSelectionCriteria;
    // compoundInstanceMethods
    static createWithPrincipalMediaCharacteristicsPreferredLanguagesPreferredMediaCharacteristics(principalMediaCharacteristics?: string[], preferredLanguages?: string[], preferredMediaCharacteristics?: string[]): AVPlayerMediaSelectionCriteria;
  }

  // interface
  class AVPortraitEffectsMatte extends NSObject {
    // compoundStaticMethods
    static portraitEffectsMatteFromDictionaryRepresentationError(error: Map<any, any>): AVPortraitEffectsMatte;
    // ownInstanceProperties
    mattingImage: any;
    // ownInstanceProperties
    pixelFormatType: number;
    // compoundInstanceMethods
    dictionaryRepresentationForAuxiliaryDataType(forAuxiliaryDataType?: string): Map<any, any>;
    // compoundInstanceMethods
    portraitEffectsMatteByApplyingExifOrientation(_: CGImagePropertyOrientation): AVPortraitEffectsMatte;
    // compoundInstanceMethods
    portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBufferError(error: any): AVPortraitEffectsMatte;
  }

  // interface
  class AVQueuePlayer extends AVPlayer {
    // compoundStaticMethods
    static queuePlayerWithItems(items: AVPlayerItem[]): AVQueuePlayer;
    // compoundInstanceMethods
    advanceToNextItem(): void;
    // compoundInstanceMethods
    canInsertItemAfterItem(_: AVPlayerItem, after?: AVPlayerItem): boolean;
    // compoundInstanceMethods
    static createWithItems(items: AVPlayerItem[]): AVQueuePlayer;
    // compoundInstanceMethods
    insertItemAfterItem(_: AVPlayerItem, after?: AVPlayerItem): void;
    // compoundInstanceMethods
    items(): AVPlayerItem[];
    // compoundInstanceMethods
    removeAllItems(): void;
    // compoundInstanceMethods
    removeItem(_: AVPlayerItem): void;
  }

  interface AVQueuedSampleBufferRendering extends NSObject {
    isReadyForMoreMediaData: boolean;
    timebase: any;
    // instance method
    enqueueSampleBuffer(_: any): void;
    // instance method
    flush(): void;
    // instance method
    requestMediaDataWhenReadyWithOnUsing(on: NSObject, using: () => void): void;
    // instance method
    stopRequestingMediaData(): void;
  }

  // interface
  class AVRouteDetector extends NSObject {
    // ownInstanceProperties
    multipleRoutesDetected: boolean;
    // ownInstanceProperties
    isRouteDetectionEnabled: boolean;
    setRouteDetectionEnabled(_: boolean)
  }

  // interface
  class AVSampleBufferAudioRenderer extends NSObject {
    // ownInstanceProperties
    audioOutputDeviceUniqueID: string;
    setAudioOutputDeviceUniqueID(_: string)
    // ownInstanceProperties
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string)
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    isMuted: boolean;
    setMuted(_: boolean)
    // ownInstanceProperties
    status: AVQueuedSampleBufferRenderingStatus;
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
    // compoundInstanceMethods
    flushWithFromSourceTimeCompletionHandler(fromSourceTime: CMTime, completionHandler: (p1: boolean) => void): void;
  }

  // interface
  class AVSampleBufferDisplayLayer extends CALayer {
    // ownInstanceProperties
    controlTimebase: any;
    setControlTimebase(_: any)
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    preventsCapture: boolean;
    setPreventsCapture(_: boolean)
    // ownInstanceProperties
    preventsDisplaySleepDuringVideoPlayback: boolean;
    setPreventsDisplaySleepDuringVideoPlayback(_: boolean)
    // ownInstanceProperties
    status: AVQueuedSampleBufferRenderingStatus;
    // ownInstanceProperties
    videoGravity: string;
    setVideoGravity(_: string)
    // compoundInstanceMethods
    flushAndRemoveImage(): void;
  }

  // interface
  class AVSampleBufferGenerator extends NSObject {
    // compoundStaticMethods
    static notifyOfDataReadyForCompletionHandler(for_: any, completionHandler: (p1: boolean, p2: NSError) => void): void;
    // compoundInstanceMethods
    createSampleBufferForRequest(for_: AVSampleBufferRequest): any;
    // compoundInstanceMethods
    static createWithAssetTimebase(asset: AVAsset, timebase?: any): AVSampleBufferGenerator;
  }

  // interface
  class AVSampleBufferRenderSynchronizer extends NSObject {
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
    // ownInstanceProperties
    renderers: AVQueuedSampleBufferRendering[];
    // ownInstanceProperties
    timebase: any;
    // compoundInstanceMethods
    addBoundaryTimeObserverWithForTimesQueueUsing(forTimes: NSValue[], queue?: NSObject, using?: () => void): any;
    // compoundInstanceMethods
    addPeriodicTimeObserverWithForIntervalQueueUsing(forInterval: CMTime, queue?: NSObject, using?: (p1: CMTime) => void): any;
    // compoundInstanceMethods
    addRenderer(_: AVQueuedSampleBufferRendering): void;
    // compoundInstanceMethods
    currentTime(): CMTime;
    // compoundInstanceMethods
    removeRendererAtCompletionHandler(_: AVQueuedSampleBufferRendering, at: CMTime, completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    removeTimeObserver(_: any): void;
    // compoundInstanceMethods
    setRateTime(_: number, time: CMTime): void;
  }

  // interface
  class AVSampleBufferRequest extends NSObject {
    // ownInstanceProperties
    direction: AVSampleBufferRequest.Direction;
    setDirection(_: AVSampleBufferRequest.Direction)
    // ownInstanceProperties
    limitCursor: AVSampleCursor;
    setLimitCursor(_: AVSampleCursor)
    // ownInstanceProperties
    maxSampleCount: number;
    setMaxSampleCount(_: number)
    // ownInstanceProperties
    mode: AVSampleBufferRequest.Mode;
    setMode(_: AVSampleBufferRequest.Mode)
    // ownInstanceProperties
    overrideTime: CMTime;
    setOverrideTime(_: CMTime)
    // ownInstanceProperties
    preferredMinSampleCount: number;
    setPreferredMinSampleCount(_: number)
    // ownInstanceProperties
    startCursor: AVSampleCursor;
    // compoundInstanceMethods
    static createWithStartCursor(startCursor: AVSampleCursor): AVSampleBufferRequest;
  }

  // interface
  class AVSampleCursor extends NSObject {
    // ownInstanceProperties
    currentChunkInfo: AVSampleCursorChunkInfo;
    // ownInstanceProperties
    currentChunkStorageRange: AVSampleCursorStorageRange;
    // ownInstanceProperties
    currentChunkStorageURL: NSURL;
    // ownInstanceProperties
    currentSampleAudioDependencyInfo: AVSampleCursorAudioDependencyInfo;
    // ownInstanceProperties
    currentSampleDependencyInfo: AVSampleCursorDependencyInfo;
    // ownInstanceProperties
    currentSampleDuration: CMTime;
    // ownInstanceProperties
    currentSampleIndexInChunk: number;
    // ownInstanceProperties
    currentSampleStorageRange: AVSampleCursorStorageRange;
    // ownInstanceProperties
    currentSampleSyncInfo: AVSampleCursorSyncInfo;
    // ownInstanceProperties
    decodeTimeStamp: CMTime;
    // ownInstanceProperties
    presentationTimeStamp: CMTime;
    // ownInstanceProperties
    samplesRequiredForDecoderRefresh: number;
    // compoundInstanceMethods
    comparePositionInDecodeOrderWithPositionOfCursor(withPositionOf: AVSampleCursor): ComparisonResult;
    // compoundInstanceMethods
    copyCurrentSampleFormatDescription(): any;
    // compoundInstanceMethods
    samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor(laterThan: AVSampleCursor): boolean;
    // compoundInstanceMethods
    samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor(earlierThan: AVSampleCursor): boolean;
    // compoundInstanceMethods
    stepByDecodeTimeWasPinned(byDecodeTime: CMTime, wasPinned?: boolean): CMTime;
    // compoundInstanceMethods
    stepByPresentationTimeWasPinned(byPresentationTime: CMTime, wasPinned?: boolean): CMTime;
    // compoundInstanceMethods
    stepInDecodeOrderByCount(byCount: number): number;
    // compoundInstanceMethods
    stepInPresentationOrderByCount(byCount: number): number;
  }

  // interface
  class AVSemanticSegmentationMatte extends NSObject {
    // compoundStaticMethods
    static semanticSegmentationMatteFromImageSourceAuxiliaryDataTypeDictionaryRepresentationError(dictionaryRepresentation: string, error: Map<any, any>): AVSemanticSegmentationMatte;
    // ownInstanceProperties
    matteType: string;
    // ownInstanceProperties
    mattingImage: any;
    // ownInstanceProperties
    pixelFormatType: number;
    // compoundInstanceMethods
    dictionaryRepresentationForAuxiliaryDataType(forAuxiliaryDataType?: string): Map<any, any>;
    // compoundInstanceMethods
    semanticSegmentationMatteByApplyingExifOrientation(_: CGImagePropertyOrientation): AVSemanticSegmentationMatte;
    // compoundInstanceMethods
    semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBufferError(error: any): AVSemanticSegmentationMatte;
  }

  // interface
  class AVSpeechSynthesisVoice extends NSObject {
    // compoundStaticMethods
    static currentLanguageCode(): string;
    // compoundStaticMethods
    static speechVoices(): AVSpeechSynthesisVoice[];
    // compoundStaticMethods
    static voiceWithIdentifier(identifier: string): AVSpeechSynthesisVoice;
    // compoundStaticMethods
    static voiceWithLanguage(language?: string): AVSpeechSynthesisVoice;
    // ownInstanceProperties
    audioFileSettings: Map<string, any>;
    // ownInstanceProperties
    gender: AVSpeechSynthesisVoiceGender;
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    language: string;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    quality: AVSpeechSynthesisVoiceQuality;
  }

  // interface
  class AVSpeechSynthesizer extends NSObject {
    // ownInstanceProperties
    delegate: AVSpeechSynthesizerDelegate;
    setDelegate(_: AVSpeechSynthesizerDelegate)
    // ownInstanceProperties
    isPaused: boolean;
    // ownInstanceProperties
    isSpeaking: boolean;
    // compoundInstanceMethods
    continueSpeaking(): boolean;
    // compoundInstanceMethods
    pauseSpeakingAtBoundary(at: AVSpeechBoundary): boolean;
    // compoundInstanceMethods
    speakUtterance(_: AVSpeechUtterance): void;
    // compoundInstanceMethods
    stopSpeakingAtBoundary(at: AVSpeechBoundary): boolean;
    // compoundInstanceMethods
    writeToBufferCallback(_: AVSpeechUtterance, toBufferCallback: (p1: AVAudioBuffer) => void): void;
  }

  interface AVSpeechSynthesizerDelegate extends NSObject {
    // instance method
    speechSynthesizerDidStartSpeechUtterance?(_: AVSpeechSynthesizer, didStart: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidFinishSpeechUtterance?(_: AVSpeechSynthesizer, didFinish: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidPauseSpeechUtterance?(_: AVSpeechSynthesizer, didPause: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidContinueSpeechUtterance?(_: AVSpeechSynthesizer, didContinue: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidCancelSpeechUtterance?(_: AVSpeechSynthesizer, didCancel: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerWillSpeakRangeOfSpeechStringUtterance?(_: AVSpeechSynthesizer, willSpeakRangeOfSpeechString: NSRange, utterance: AVSpeechUtterance): void;
  }

  // interface
  class AVSpeechUtterance extends NSObject {
    // compoundStaticMethods
    static speechUtteranceWithAttributedString(attributedString: NSAttributedString): AVSpeechUtterance;
    // compoundStaticMethods
    static speechUtteranceWithString(string: string): AVSpeechUtterance;
    // ownInstanceProperties
    attributedSpeechString: NSAttributedString;
    // ownInstanceProperties
    pitchMultiplier: number;
    setPitchMultiplier(_: number)
    // ownInstanceProperties
    postUtteranceDelay: number;
    setPostUtteranceDelay(_: number)
    // ownInstanceProperties
    preUtteranceDelay: number;
    setPreUtteranceDelay(_: number)
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
    // ownInstanceProperties
    speechString: string;
    // ownInstanceProperties
    voice: AVSpeechSynthesisVoice;
    setVoice(_: AVSpeechSynthesisVoice)
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
    // compoundInstanceMethods
    static createWithAttributedString(attributedString: NSAttributedString): AVSpeechUtterance;
    // compoundInstanceMethods
    static createWithString(string: string): AVSpeechUtterance;
  }

  // interface
  class AVSynchronizedLayer extends CALayer {
    // ownInstanceProperties
    playerItem: AVPlayerItem;
    setPlayerItem(_: AVPlayerItem)
  }

  // interface
  class AVTextStyleRule extends NSObject {
    // compoundStaticMethods
    static propertyListForTextStyleRules(for_: AVTextStyleRule[]): any;
    // compoundStaticMethods
    static textStyleRulesFromPropertyList(fromPropertyList: any): AVTextStyleRule[];
    // ownInstanceProperties
    textMarkupAttributes: Map<string, any>;
    // ownInstanceProperties
    textSelector: string;
    // compoundInstanceMethods
    static createWithTextMarkupAttributes(textMarkupAttributes: Map<string, any>): AVTextStyleRule;
    // compoundInstanceMethods
    static createWithTextMarkupAttributesTextSelector(textMarkupAttributes: Map<string, any>, textSelector?: string): AVTextStyleRule;
  }

  // interface
  class AVTimedMetadataGroup extends AVMetadataGroup {
    // ownInstanceProperties
    timeRange: CMTimeRange;
    // compoundInstanceMethods
    copyFormatDescription(): any;
    // compoundInstanceMethods
    static createWithItemsTimeRange(items: AVMetadataItem[], timeRange: CMTimeRange): AVTimedMetadataGroup;
    // compoundInstanceMethods
    static createWithSampleBuffer(sampleBuffer: any): AVTimedMetadataGroup;
  }

  // interface
  class AVURLAsset extends AVAsset {
    // compoundStaticMethods
    static URLAssetWithURLOptions(url: NSURL, options?: Map<string, any>): AVURLAsset;
    // compoundStaticMethods
    static audiovisualMIMETypes(): string[];
    // compoundStaticMethods
    static audiovisualTypes(): string[];
    // compoundStaticMethods
    static isPlayableExtendedMIMEType(_: string): boolean;
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    assetCache: AVAssetCache;
    // ownInstanceProperties
    resourceLoader: AVAssetResourceLoader;
    // compoundInstanceMethods
    compatibleTrackForCompositionTrack(for_: AVCompositionTrack): AVAssetTrack;
    // compoundInstanceMethods
    static createWithUrlOptions(URL: NSURL, options?: Map<string, any>): AVURLAsset;
  }

  interface AVVideoCompositing extends NSObject {
    requiredPixelBufferAttributesForRenderContext: Map<string, any>;
    sourcePixelBufferAttributes: Map<string, any>;
    supportsWideColorSourceFrames?: boolean;
    // instance method
    anticipateRenderingUsingHint?(using: AVVideoCompositionRenderHint): void;
    // instance method
    cancelAllPendingVideoCompositionRequests?(): void;
    // instance method
    prerollForRenderingUsingHint?(using: AVVideoCompositionRenderHint): void;
    // instance method
    renderContextChanged(_: AVVideoCompositionRenderContext): void;
    // instance method
    startVideoCompositionRequest(_: AVAsynchronousVideoCompositionRequest): void;
  }

  // interface
  class AVVideoComposition extends NSObject {
    // ownInstanceProperties
    animationTool: AVVideoCompositionCoreAnimationTool;
    // ownInstanceProperties
    colorPrimaries: string;
    // ownInstanceProperties
    colorTransferFunction: string;
    // ownInstanceProperties
    colorYCbCrMatrix: string;
    // ownInstanceProperties
    customVideoCompositorClass: typeof NSObject;
    // ownInstanceProperties
    frameDuration: CMTime;
    // ownInstanceProperties
    instructions: AVVideoCompositionInstruction[];
    // ownInstanceProperties
    renderScale: number;
    // ownInstanceProperties
    renderSize: CGSize;
    // ownInstanceProperties
    sourceTrackIDForFrameTiming: number;
    // compoundInstanceMethods
    isValidForAssetTimeRangeValidationDelegate(for_?: AVAsset, timeRange?: CMTimeRange, validationDelegate?: AVVideoCompositionValidationHandling): boolean;
  }

  // interface
  class AVVideoCompositionCoreAnimationTool extends NSObject {
    // compoundStaticMethods
    static videoCompositionCoreAnimationToolWithAdditionalLayerAsTrackID(additionalLayer: CALayer, asTrackID: number): AVVideoCompositionCoreAnimationTool;
    // compoundStaticMethods
    static videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayerInLayer(postProcessingAsVideoLayer: CALayer, in_: CALayer): AVVideoCompositionCoreAnimationTool;
    // compoundStaticMethods
    static videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayersInLayer(postProcessingAsVideoLayers: CALayer[], in_: CALayer): AVVideoCompositionCoreAnimationTool;
  }

  // interface
  class AVVideoCompositionInstruction extends NSObject {
    // ownInstanceProperties
    backgroundColor: any;
    // ownInstanceProperties
    layerInstructions: AVVideoCompositionLayerInstruction[];
  }

  interface AVVideoCompositionInstruction extends NSObject {
    containsTweening: boolean;
    enablePostProcessing: boolean;
    passthroughTrackID: number;
    requiredSourceTrackIDs: NSValue[];
    timeRange: CMTimeRange;
  }

  // interface
  class AVVideoCompositionLayerInstruction extends NSObject {
    // ownInstanceProperties
    trackID: number;
    // compoundInstanceMethods
    getCropRectangleRampForTimeStartCropRectangleEndCropRectangleTimeRange(for_: CMTime, startCropRectangle?: NSRect, endCropRectangle?: NSRect, timeRange?: CMTimeRange): boolean;
    // compoundInstanceMethods
    getOpacityRampForTimeStartOpacityEndOpacityTimeRange(for_: CMTime, startOpacity?: number, endOpacity?: number, timeRange?: CMTimeRange): boolean;
    // compoundInstanceMethods
    getTransformRampForTimeStartTransformEndTransformTimeRange(for_: CMTime, start?: CGAffineTransform, end?: CGAffineTransform, timeRange?: CMTimeRange): boolean;
  }

  // interface
  class AVVideoCompositionRenderContext extends NSObject {
    // ownInstanceProperties
    edgeWidths: AVEdgeWidths;
    // ownInstanceProperties
    highQualityRendering: boolean;
    // ownInstanceProperties
    pixelAspectRatio: AVPixelAspectRatio;
    // ownInstanceProperties
    renderScale: number;
    // ownInstanceProperties
    renderTransform: CGAffineTransform;
    // ownInstanceProperties
    size: CGSize;
    // ownInstanceProperties
    videoComposition: AVVideoComposition;
    // compoundInstanceMethods
    newPixelBuffer(): any;
  }

  // interface
  class AVVideoCompositionRenderHint extends NSObject {
    // ownInstanceProperties
    endCompositionTime: CMTime;
    // ownInstanceProperties
    startCompositionTime: CMTime;
  }

  interface AVVideoCompositionValidationHandling extends NSObject {
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction?(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidTimeRangeIn: AVVideoCompositionInstruction): boolean;
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingInvalidTrackIDInInstructionLayerInstructionAsset?(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidTrackIDIn: AVVideoCompositionInstruction, layerInstruction: AVVideoCompositionLayerInstruction, asset: AVAsset): boolean;
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingEmptyTimeRange?(_: AVVideoComposition, shouldContinueValidatingAfterFindingEmptyTimeRange: CMTimeRange): boolean;
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingInvalidValueForKey?(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidValueForKey: string): boolean;
  }

  // interface
  class AVCaptureView extends NSView {
    // ownInstanceProperties
    controlsStyle: AVCaptureViewControlsStyle;
    setControlsStyle(_: AVCaptureViewControlsStyle)
    // ownInstanceProperties
    delegate: AVCaptureViewDelegate;
    setDelegate(_: AVCaptureViewDelegate)
    // ownInstanceProperties
    fileOutput: AVCaptureFileOutput;
    // ownInstanceProperties
    session: AVCaptureSession;
    // ownInstanceProperties
    videoGravity: string;
    setVideoGravity(_: string)
    // compoundInstanceMethods
    setSessionShowVideoPreviewShowAudioPreview(_?: AVCaptureSession, showVideoPreview?: boolean, showAudioPreview?: boolean): void;
  }

  interface AVCaptureViewDelegate extends NSObject {
    // instance method
    captureViewStartRecordingToFileOutput(_: AVCaptureView, startRecordingTo: AVCaptureFileOutput): void;
  }

  // interface
  class AVPictureInPictureController extends NSObject {
    // compoundStaticMethods
    static isPictureInPictureSupported(): boolean;
    // ownInstanceProperties
    delegate: AVPictureInPictureControllerDelegate;
    setDelegate(_: AVPictureInPictureControllerDelegate)
    // ownInstanceProperties
    isPictureInPictureActive: boolean;
    // ownInstanceProperties
    isPictureInPicturePossible: boolean;
    // ownInstanceProperties
    isPictureInPictureSuspended: boolean;
    // ownInstanceProperties
    playerLayer: AVPlayerLayer;
    // ownStaticProperties
    static pictureInPictureButtonStartImage: NSImage;
    // ownStaticProperties
    static pictureInPictureButtonStopImage: NSImage;
    // compoundInstanceMethods
    static createWithPlayerLayer(playerLayer: AVPlayerLayer): AVPictureInPictureController;
    // compoundInstanceMethods
    startPictureInPicture(): void;
    // compoundInstanceMethods
    stopPictureInPicture(): void;
  }

  interface AVPictureInPictureControllerDelegate extends NSObject {
    // instance method
    pictureInPictureControllerFailedToStartPictureInPictureWithError?(_: AVPictureInPictureController, failedToStartPictureInPictureWithError: NSError): void;
    // instance method
    pictureInPictureControllerWithRestoreUserInterfaceForPictureInPictureStopWithCompletionHandler?(_: AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (p1: boolean) => void): void;
    // instance method
    pictureInPictureControllerDidStartPictureInPicture?(_: AVPictureInPictureController): void;
    // instance method
    pictureInPictureControllerDidStopPictureInPicture?(_: AVPictureInPictureController): void;
    // instance method
    pictureInPictureControllerWillStartPictureInPicture?(_: AVPictureInPictureController): void;
    // instance method
    pictureInPictureControllerWillStopPictureInPicture?(_: AVPictureInPictureController): void;
  }

  // interface
  class AVPlayerView extends NSView {
    // ownInstanceProperties
    actionPopUpButtonMenu: NSMenu;
    setActionPopUpButtonMenu(_: NSMenu)
    // ownInstanceProperties
    allowsPictureInPicturePlayback: boolean;
    setAllowsPictureInPicturePlayback(_: boolean)
    // ownInstanceProperties
    canBeginTrimming: boolean;
    // ownInstanceProperties
    contentOverlayView: NSView;
    // ownInstanceProperties
    controlsStyle: AVPlayerViewControlsStyle;
    setControlsStyle(_: AVPlayerViewControlsStyle)
    // ownInstanceProperties
    pictureInPictureDelegate: AVPlayerViewPictureInPictureDelegate;
    setPictureInPictureDelegate(_: AVPlayerViewPictureInPictureDelegate)
    // ownInstanceProperties
    player: AVPlayer;
    setPlayer(_: AVPlayer)
    // ownInstanceProperties
    isReadyForDisplay: boolean;
    // ownInstanceProperties
    showsFrameSteppingButtons: boolean;
    setShowsFrameSteppingButtons(_: boolean)
    // ownInstanceProperties
    showsFullScreenToggleButton: boolean;
    setShowsFullScreenToggleButton(_: boolean)
    // ownInstanceProperties
    showsSharingServiceButton: boolean;
    setShowsSharingServiceButton(_: boolean)
    // ownInstanceProperties
    showsTimecodes: boolean;
    setShowsTimecodes(_: boolean)
    // ownInstanceProperties
    updatesNowPlayingInfoCenter: boolean;
    setUpdatesNowPlayingInfoCenter(_: boolean)
    // ownInstanceProperties
    videoBounds: CGRect;
    // ownInstanceProperties
    videoGravity: string;
    setVideoGravity(_: string)
    // compoundInstanceMethods
    beginTrimmingWithCompletionHandler(completionHandler?: (p1: AVPlayerViewTrimResult) => void): void;
    // compoundInstanceMethods
    flashChapterNumberChapterTitle(_: number, chapterTitle?: string): void;
  }

  interface AVPlayerViewPictureInPictureDelegate extends NSObject {
    // instance method
    playerViewFailedToStartPictureInPictureWithError?(_: AVPlayerView, failedToStartPictureInPictureWithError: NSError): void;
    // instance method
    playerViewWithRestoreUserInterfaceForPictureInPictureStopWithCompletionHandler?(_: AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (p1: boolean) => void): void;
    // instance method
    playerViewDidStartPictureInPicture?(inPicture: AVPlayerView): void;
    // instance method
    playerViewDidStopPictureInPicture?(inPicture: AVPlayerView): void;
    // instance method
    playerViewShouldAutomaticallyDismissAtPictureInPictureStart?(inPictureStart: AVPlayerView): boolean;
    // instance method
    playerViewWillStartPictureInPicture?(inPicture: AVPlayerView): void;
    // instance method
    playerViewWillStopPictureInPicture?(inPicture: AVPlayerView): void;
  }

  // interface
  class AVRoutePickerView extends NSView {
    // ownInstanceProperties
    delegate: AVRoutePickerViewDelegate;
    setDelegate(_: AVRoutePickerViewDelegate)
    // ownInstanceProperties
    player: AVPlayer;
    setPlayer(_: AVPlayer)
    // ownInstanceProperties
    isRoutePickerButtonBordered: boolean;
    setRoutePickerButtonBordered(_: boolean)
    // compoundInstanceMethods
    routePickerButtonColorForState(for_: AVRoutePickerViewButtonState): NSColor;
    // compoundInstanceMethods
    setRoutePickerButtonColorForState(_?: NSColor, for_?: AVRoutePickerViewButtonState): void;
  }

  interface AVRoutePickerViewDelegate extends NSObject {
    // instance method
    routePickerViewDidEndPresentingRoutes?(_: AVRoutePickerView): void;
    // instance method
    routePickerViewWillBeginPresentingRoutes?(_: AVRoutePickerView): void;
  }

  // interface
  class NSATSTypesetter extends NSTypesetter {
    // ownStaticProperties
    static sharedTypesetter: NSATSTypesetter;
  }

  interface NSAccessibility extends NSObject {
    accessibilityActivationPoint: CGPoint;
    setAccessibilityActivationPoint(_: CGPoint)
    accessibilityAllowedValues: number[];
    setAccessibilityAllowedValues(_: number[])
    isAccessibilityAlternateUIVisible: boolean;
    setAccessibilityAlternateUIVisible(_: boolean)
    accessibilityApplicationFocusedUIElement: any;
    setAccessibilityApplicationFocusedUIElement(_: any)
    accessibilityCancelButton: any;
    setAccessibilityCancelButton(_: any)
    accessibilityChildren: any[];
    setAccessibilityChildren(_: any[])
    accessibilityChildrenInNavigationOrder: NSAccessibilityElement[];
    setAccessibilityChildrenInNavigationOrder(_: NSAccessibilityElement[])
    accessibilityClearButton: any;
    setAccessibilityClearButton(_: any)
    accessibilityCloseButton: any;
    setAccessibilityCloseButton(_: any)
    accessibilityColumnCount: number;
    setAccessibilityColumnCount(_: number)
    accessibilityColumnHeaderUIElements: any[];
    setAccessibilityColumnHeaderUIElements(_: any[])
    accessibilityColumnIndexRange: NSRange;
    setAccessibilityColumnIndexRange(_: NSRange)
    accessibilityColumns: any[];
    setAccessibilityColumns(_: any[])
    accessibilityColumnTitles: any[];
    setAccessibilityColumnTitles(_: any[])
    accessibilityContents: any[];
    setAccessibilityContents(_: any[])
    accessibilityCriticalValue: any;
    setAccessibilityCriticalValue(_: any)
    accessibilityCustomActions: NSAccessibilityCustomAction[];
    setAccessibilityCustomActions(_: NSAccessibilityCustomAction[])
    accessibilityCustomRotors: NSAccessibilityCustomRotor[];
    setAccessibilityCustomRotors(_: NSAccessibilityCustomRotor[])
    accessibilityDecrementButton: any;
    setAccessibilityDecrementButton(_: any)
    accessibilityDefaultButton: any;
    setAccessibilityDefaultButton(_: any)
    isAccessibilityDisclosed: boolean;
    setAccessibilityDisclosed(_: boolean)
    accessibilityDisclosedByRow: any;
    setAccessibilityDisclosedByRow(_: any)
    accessibilityDisclosedRows: any;
    setAccessibilityDisclosedRows(_: any)
    accessibilityDisclosureLevel: number;
    setAccessibilityDisclosureLevel(_: number)
    accessibilityDocument: string;
    setAccessibilityDocument(_: string)
    isAccessibilityEdited: boolean;
    setAccessibilityEdited(_: boolean)
    isAccessibilityElement: boolean;
    setAccessibilityElement(_: boolean)
    isAccessibilityEnabled: boolean;
    setAccessibilityEnabled(_: boolean)
    isAccessibilityExpanded: boolean;
    setAccessibilityExpanded(_: boolean)
    accessibilityExtrasMenuBar: any;
    setAccessibilityExtrasMenuBar(_: any)
    accessibilityFilename: string;
    setAccessibilityFilename(_: string)
    isAccessibilityFocused: boolean;
    setAccessibilityFocused(_: boolean)
    accessibilityFocusedWindow: any;
    setAccessibilityFocusedWindow(_: any)
    accessibilityFrame: CGRect;
    setAccessibilityFrame(_: CGRect)
    isAccessibilityFrontmost: boolean;
    setAccessibilityFrontmost(_: boolean)
    accessibilityFullScreenButton: any;
    setAccessibilityFullScreenButton(_: any)
    accessibilityGrowArea: any;
    setAccessibilityGrowArea(_: any)
    accessibilityHandles: any[];
    setAccessibilityHandles(_: any[])
    accessibilityHeader: any;
    setAccessibilityHeader(_: any)
    accessibilityHelp: string;
    setAccessibilityHelp(_: string)
    isAccessibilityHidden: boolean;
    setAccessibilityHidden(_: boolean)
    accessibilityHorizontalScrollBar: any;
    setAccessibilityHorizontalScrollBar(_: any)
    accessibilityHorizontalUnitDescription: string;
    setAccessibilityHorizontalUnitDescription(_: string)
    accessibilityHorizontalUnits: NSAccessibility.Units;
    setAccessibilityHorizontalUnits(_: NSAccessibility.Units)
    accessibilityIdentifier: string;
    setAccessibilityIdentifier(_: string)
    accessibilityIncrementButton: any;
    setAccessibilityIncrementButton(_: any)
    accessibilityIndex: number;
    setAccessibilityIndex(_: number)
    accessibilityInsertionPointLineNumber: number;
    setAccessibilityInsertionPointLineNumber(_: number)
    accessibilityLabel: string;
    setAccessibilityLabel(_: string)
    accessibilityLabelUIElements: any[];
    setAccessibilityLabelUIElements(_: any[])
    accessibilityLabelValue: number;
    setAccessibilityLabelValue(_: number)
    accessibilityLinkedUIElements: any[];
    setAccessibilityLinkedUIElements(_: any[])
    isAccessibilityMain: boolean;
    setAccessibilityMain(_: boolean)
    accessibilityMainWindow: any;
    setAccessibilityMainWindow(_: any)
    accessibilityMarkerGroupUIElement: any;
    setAccessibilityMarkerGroupUIElement(_: any)
    accessibilityMarkerTypeDescription: string;
    setAccessibilityMarkerTypeDescription(_: string)
    accessibilityMarkerUIElements: any[];
    setAccessibilityMarkerUIElements(_: any[])
    accessibilityMarkerValues: any;
    setAccessibilityMarkerValues(_: any)
    accessibilityMaxValue: any;
    setAccessibilityMaxValue(_: any)
    accessibilityMenuBar: any;
    setAccessibilityMenuBar(_: any)
    accessibilityMinimizeButton: any;
    setAccessibilityMinimizeButton(_: any)
    isAccessibilityMinimized: boolean;
    setAccessibilityMinimized(_: boolean)
    accessibilityMinValue: any;
    setAccessibilityMinValue(_: any)
    isAccessibilityModal: boolean;
    setAccessibilityModal(_: boolean)
    accessibilityNextContents: any[];
    setAccessibilityNextContents(_: any[])
    accessibilityNumberOfCharacters: number;
    setAccessibilityNumberOfCharacters(_: number)
    isAccessibilityOrderedByRow: boolean;
    setAccessibilityOrderedByRow(_: boolean)
    accessibilityOrientation: NSAccessibility.Orientation;
    setAccessibilityOrientation(_: NSAccessibility.Orientation)
    accessibilityOverflowButton: any;
    setAccessibilityOverflowButton(_: any)
    accessibilityParent: any;
    setAccessibilityParent(_: any)
    accessibilityPlaceholderValue: string;
    setAccessibilityPlaceholderValue(_: string)
    accessibilityPreviousContents: any[];
    setAccessibilityPreviousContents(_: any[])
    isAccessibilityProtectedContent: boolean;
    setAccessibilityProtectedContent(_: boolean)
    accessibilityProxy: any;
    setAccessibilityProxy(_: any)
    isAccessibilityRequired: boolean;
    setAccessibilityRequired(_: boolean)
    accessibilityRole: string;
    setAccessibilityRole(_: string)
    accessibilityRoleDescription: string;
    setAccessibilityRoleDescription(_: string)
    accessibilityRowCount: number;
    setAccessibilityRowCount(_: number)
    accessibilityRowHeaderUIElements: any[];
    setAccessibilityRowHeaderUIElements(_: any[])
    accessibilityRowIndexRange: NSRange;
    setAccessibilityRowIndexRange(_: NSRange)
    accessibilityRows: any[];
    setAccessibilityRows(_: any[])
    accessibilityRulerMarkerType: NSAccessibility.RulerMarkerType;
    setAccessibilityRulerMarkerType(_: NSAccessibility.RulerMarkerType)
    accessibilitySearchButton: any;
    setAccessibilitySearchButton(_: any)
    accessibilitySearchMenu: any;
    setAccessibilitySearchMenu(_: any)
    isAccessibilitySelected: boolean;
    setAccessibilitySelected(_: boolean)
    accessibilitySelectedCells: any[];
    setAccessibilitySelectedCells(_: any[])
    accessibilitySelectedChildren: any[];
    setAccessibilitySelectedChildren(_: any[])
    accessibilitySelectedColumns: any[];
    setAccessibilitySelectedColumns(_: any[])
    accessibilitySelectedRows: any[];
    setAccessibilitySelectedRows(_: any[])
    accessibilitySelectedText: string;
    setAccessibilitySelectedText(_: string)
    accessibilitySelectedTextRange: NSRange;
    setAccessibilitySelectedTextRange(_: NSRange)
    accessibilitySelectedTextRanges: NSValue[];
    setAccessibilitySelectedTextRanges(_: NSValue[])
    accessibilityServesAsTitleForUIElements: any[];
    setAccessibilityServesAsTitleForUIElements(_: any[])
    accessibilitySharedCharacterRange: NSRange;
    setAccessibilitySharedCharacterRange(_: NSRange)
    accessibilitySharedFocusElements: any[];
    setAccessibilitySharedFocusElements(_: any[])
    accessibilitySharedTextUIElements: any[];
    setAccessibilitySharedTextUIElements(_: any[])
    accessibilityShownMenu: any;
    setAccessibilityShownMenu(_: any)
    accessibilitySortDirection: NSAccessibility.SortDirection;
    setAccessibilitySortDirection(_: NSAccessibility.SortDirection)
    accessibilitySplitters: any[];
    setAccessibilitySplitters(_: any[])
    accessibilitySubrole: string;
    setAccessibilitySubrole(_: string)
    accessibilityTabs: any[];
    setAccessibilityTabs(_: any[])
    accessibilityTitle: string;
    setAccessibilityTitle(_: string)
    accessibilityTitleUIElement: any;
    setAccessibilityTitleUIElement(_: any)
    accessibilityToolbarButton: any;
    setAccessibilityToolbarButton(_: any)
    accessibilityTopLevelUIElement: any;
    setAccessibilityTopLevelUIElement(_: any)
    accessibilityUnitDescription: string;
    setAccessibilityUnitDescription(_: string)
    accessibilityUnits: NSAccessibility.Units;
    setAccessibilityUnits(_: NSAccessibility.Units)
    accessibilityURL: NSURL;
    setAccessibilityURL(_: NSURL)
    accessibilityValue: any;
    setAccessibilityValue(_: any)
    accessibilityValueDescription: string;
    setAccessibilityValueDescription(_: string)
    accessibilityVerticalScrollBar: any;
    setAccessibilityVerticalScrollBar(_: any)
    accessibilityVerticalUnitDescription: string;
    setAccessibilityVerticalUnitDescription(_: string)
    accessibilityVerticalUnits: NSAccessibility.Units;
    setAccessibilityVerticalUnits(_: NSAccessibility.Units)
    accessibilityVisibleCells: any[];
    setAccessibilityVisibleCells(_: any[])
    accessibilityVisibleCharacterRange: NSRange;
    setAccessibilityVisibleCharacterRange(_: NSRange)
    accessibilityVisibleChildren: any[];
    setAccessibilityVisibleChildren(_: any[])
    accessibilityVisibleColumns: any[];
    setAccessibilityVisibleColumns(_: any[])
    accessibilityVisibleRows: any[];
    setAccessibilityVisibleRows(_: any[])
    accessibilityWarningValue: any;
    setAccessibilityWarningValue(_: any)
    accessibilityWindow: any;
    setAccessibilityWindow(_: any)
    accessibilityWindows: any[];
    setAccessibilityWindows(_: any[])
    accessibilityZoomButton: any;
    setAccessibilityZoomButton(_: any)
    // instance method
    accessibilityAttributedStringForRange(_: NSRange): NSAttributedString;
    // instance method
    accessibilityCellForColumnRow(_: number, row: number): any;
    // instance method
    accessibilityFrameForRange(_: NSRange): CGRect;
    // instance method
    accessibilityLayoutPointForScreenPoint(_: CGPoint): CGPoint;
    // instance method
    accessibilityLayoutSizeForScreenSize(_: CGSize): CGSize;
    // instance method
    accessibilityLineForIndex(_: number): number;
    // instance method
    accessibilityPerformCancel(): boolean;
    // instance method
    accessibilityPerformConfirm(): boolean;
    // instance method
    accessibilityPerformDecrement(): boolean;
    // instance method
    accessibilityPerformDelete(): boolean;
    // instance method
    accessibilityPerformIncrement(): boolean;
    // instance method
    accessibilityPerformPick(): boolean;
    // instance method
    accessibilityPerformPress(): boolean;
    // instance method
    accessibilityPerformRaise(): boolean;
    // instance method
    accessibilityPerformShowAlternateUI(): boolean;
    // instance method
    accessibilityPerformShowDefaultUI(): boolean;
    // instance method
    accessibilityPerformShowMenu(): boolean;
    // instance method
    accessibilityRangeForIndex(_: number): NSRange;
    // instance method
    accessibilityRangeForLine(_: number): NSRange;
    // instance method
    accessibilityRangeForPosition(_: CGPoint): NSRange;
    // instance method
    accessibilityRTFForRange(_: NSRange): NSData;
    // instance method
    accessibilityScreenPointForLayoutPoint(_: CGPoint): CGPoint;
    // instance method
    accessibilityScreenSizeForLayoutSize(_: CGSize): CGSize;
    // instance method
    accessibilityStringForRange(_: NSRange): string;
    // instance method
    accessibilityStyleRangeForIndex(_: number): NSRange;
    // instance method
    isAccessibilitySelectorAllowed(_: string): boolean;
  }

  // export function NSAccessibilityActionDescription(action: string): string;

  interface NSAccessibilityButton extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityPerformPress(): boolean;
  }

  interface NSAccessibilityCheckBox extends NSAccessibilityButton {
    // instance method
    accessibilityValue(): number;
  }

  interface NSAccessibilityContainsTransientUI extends NSAccessibilityElement {
    // instance method
    accessibilityPerformShowAlternateUI(): boolean;
    // instance method
    accessibilityPerformShowDefaultUI(): boolean;
    // instance method
    isAccessibilityAlternateUIVisible(): boolean;
  }

  // interface
  class NSAccessibilityCustomAction extends NSObject {
    // ownInstanceProperties
    handler: () => boolean;
    setHandler(_: () => boolean)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    selector: string;
    setSelector(_: string)
    // ownInstanceProperties
    target: NSObject;
    setTarget(_: NSObject)
    // compoundInstanceMethods
    static createWithNameHandler(name: string, handler?: () => boolean): NSAccessibilityCustomAction;
    // compoundInstanceMethods
    static createWithNameTargetSelector(name: string, target: NSObject, selector: string): NSAccessibilityCustomAction;
  }

  // interface
  class NSAccessibilityCustomRotor extends NSObject {
    // ownInstanceProperties
    itemLoadingDelegate: NSAccessibilityElementLoading;
    setItemLoadingDelegate(_: NSAccessibilityElementLoading)
    // ownInstanceProperties
    itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate;
    setItemSearchDelegate(_: NSAccessibilityCustomRotorItemSearchDelegate)
    // ownInstanceProperties
    label: string;
    setLabel(_: string)
    // ownInstanceProperties
    type: NSAccessibilityCustomRotor.RotorType;
    setType(_: NSAccessibilityCustomRotor.RotorType)
    // compoundInstanceMethods
    static createWithLabelItemSearchDelegate(label: string, itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate): NSAccessibilityCustomRotor;
    // compoundInstanceMethods
    static createWithRotorTypeItemSearchDelegate(rotorType: NSAccessibilityCustomRotor.RotorType, itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate): NSAccessibilityCustomRotor;
  }

  // interface
  class ItemResult extends NSObject {
    // ownInstanceProperties
    customLabel: string;
    setCustomLabel(_: string)
    // ownInstanceProperties
    itemLoadingToken: any;
    // ownInstanceProperties
    targetElement: NSAccessibilityElement;
    // ownInstanceProperties
    targetRange: NSRange;
    setTargetRange(_: NSRange)
    // compoundInstanceMethods
    static createWithItemLoadingTokenCustomLabel(itemLoadingToken: any, customLabel: string): ItemResult;
    // compoundInstanceMethods
    static createWithTargetElement(targetElement: NSAccessibilityElement): ItemResult;
  }

  interface NSAccessibilityCustomRotorItemSearchDelegate extends NSObject {
    // instance method
    rotorResultForSearchParameters(_: NSAccessibilityCustomRotor, resultFor: SearchParameters): ItemResult;
  }

  // interface
  class SearchParameters extends NSObject {
    // ownInstanceProperties
    currentItem: ItemResult;
    setCurrentItem(_: ItemResult)
    // ownInstanceProperties
    filterString: string;
    setFilterString(_: string)
    // ownInstanceProperties
    searchDirection: NSAccessibilityCustomRotor.SearchDirection;
    setSearchDirection(_: NSAccessibilityCustomRotor.SearchDirection)
  }

  // interface
  class NSAccessibilityElement extends NSObject {
    // compoundStaticMethods
    static accessibilityElementWithRoleFrameLabelParent(withRole: string, frame: CGRect, label?: string, parent?: any): any;
    // ownInstanceProperties
    accessibilityFrameInParentSpace: CGRect;
    setAccessibilityFrameInParentSpace(_: CGRect)
    // compoundInstanceMethods
    accessibilityAddChildElement(_: NSAccessibilityElement): void;
  }

  interface NSAccessibilityElementLoading extends NSObject {
    // instance method
    accessibilityElementWithToken(withToken: any): NSAccessibilityElement;
    // instance method
    accessibilityRangeInTargetElementWithToken?(withToken: any): NSRange;
  }

  interface NSAccessibilityElement extends NSObject {
    // instance method
    accessibilityFrame(): CGRect;
    // instance method
    accessibilityIdentifier?(): string;
    // instance method
    accessibilityParent(): any;
    // instance method
    isAccessibilityFocused?(): boolean;
  }

  // export function NSAccessibilityFrameInView(parentView: NSView, frame: CGRect): CGRect;

  interface NSAccessibilityGroup extends NSAccessibilityElement {
  }

  interface NSAccessibilityImage extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
  }

  interface NSAccessibilityLayoutArea extends NSAccessibilityGroup {
    accessibilityFocusedUIElement: any;
    // instance method
    accessibilityChildren(): any[];
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilitySelectedChildren(): any[];
  }

  interface NSAccessibilityLayoutItem extends NSAccessibilityGroup {
    // instance method
    setAccessibilityFrame?(_: CGRect): void;
  }

  interface NSAccessibilityList extends NSAccessibilityTable {
  }

  interface NSAccessibilityNavigableStaticText extends NSAccessibilityStaticText {
    // instance method
    accessibilityFrameForRange(for_: NSRange): CGRect;
    // instance method
    accessibilityLineForIndex(for_: number): number;
    // instance method
    accessibilityRangeForLine(forLine: number): NSRange;
    // instance method
    accessibilityStringForRange(for_: NSRange): string;
  }

  interface NSAccessibilityOutline extends NSAccessibilityTable {
  }

  // export function NSAccessibilityPointInView(parentView: NSView, point: CGPoint): CGPoint;

  // export function NSAccessibilityPostNotification(element: any, notification: string): void;

  // export function NSAccessibilityPostNotificationWithUserInfo(element: any, notification: string, userInfo: Map<string, any>): void;

  interface NSAccessibilityProgressIndicator extends NSAccessibilityGroup {
    // instance method
    accessibilityValue(): number;
  }

  interface NSAccessibilityRadioButton extends NSAccessibilityButton {
    // instance method
    accessibilityValue(): number;
  }

  // export function NSAccessibilityRoleDescription(role: string, subrole: string): string;

  // export function NSAccessibilityRoleDescriptionForUIElement(element: any): string;

  interface NSAccessibilityRow extends NSAccessibilityGroup {
    // instance method
    accessibilityDisclosureLevel?(): number;
    // instance method
    accessibilityIndex(): number;
  }

  // export function NSAccessibilitySetMayContainProtectedContent(flag: boolean): boolean;

  interface NSAccessibilitySlider extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityPerformDecrement(): boolean;
    // instance method
    accessibilityPerformIncrement(): boolean;
    // instance method
    accessibilityValue(): any;
  }

  interface NSAccessibilityStaticText extends NSAccessibilityElement {
    // instance method
    accessibilityAttributedStringForRange?(for_: NSRange): NSAttributedString;
    // instance method
    accessibilityValue(): string;
    // instance method
    accessibilityVisibleCharacterRange?(): NSRange;
  }

  interface NSAccessibilityStepper extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityPerformDecrement(): boolean;
    // instance method
    accessibilityPerformIncrement(): boolean;
    // instance method
    accessibilityValue?(): any;
  }

  interface NSAccessibilitySwitch extends NSAccessibilityButton {
    // instance method
    accessibilityPerformDecrement?(): boolean;
    // instance method
    accessibilityPerformIncrement?(): boolean;
    // instance method
    accessibilityValue(): string;
  }

  interface NSAccessibilityTable extends NSAccessibilityGroup {
    // instance method
    accessibilityColumnHeaderUIElements?(): any[];
    // instance method
    accessibilityColumns?(): any[];
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityRowHeaderUIElements?(): any[];
    // instance method
    accessibilityRows(): NSAccessibilityRow[];
    // instance method
    accessibilitySelectedCells?(): any[];
    // instance method
    accessibilitySelectedColumns?(): any[];
    // instance method
    accessibilitySelectedRows?(): NSAccessibilityRow[];
    // instance method
    accessibilityVisibleCells?(): any[];
    // instance method
    accessibilityVisibleColumns?(): any[];
    // instance method
    accessibilityVisibleRows?(): NSAccessibilityRow[];
    // instance method
    setAccessibilitySelectedRows?(_: NSAccessibilityRow[]): void;
  }

  // export function NSAccessibilityUnignoredAncestor(element: any): any;

  // export function NSAccessibilityUnignoredChildren(originalChildren: any[]): any[];

  // export function NSAccessibilityUnignoredChildrenForOnlyChild(originalChild: any): any[];

  // export function NSAccessibilityUnignoredDescendant(element: any): any;

  // interface
  class NSActionCell extends NSCell {
  }

  // interface
  class NSAlert extends NSObject {
    // ownInstanceProperties
    accessoryView: NSView;
    setAccessoryView(_: NSView)
    // ownInstanceProperties
    alertStyle: NSAlert.Style;
    setAlertStyle(_: NSAlert.Style)
    // ownInstanceProperties
    buttons: NSButton[];
    // ownInstanceProperties
    delegate: NSAlertDelegate;
    setDelegate(_: NSAlertDelegate)
    // ownInstanceProperties
    helpAnchor: string;
    setHelpAnchor(_: string)
    // ownInstanceProperties
    icon: NSImage;
    setIcon(_: NSImage)
    // ownInstanceProperties
    informativeText: string;
    setInformativeText(_: string)
    // ownInstanceProperties
    messageText: string;
    setMessageText(_: string)
    // ownInstanceProperties
    showsHelp: boolean;
    setShowsHelp(_: boolean)
    // ownInstanceProperties
    showsSuppressionButton: boolean;
    setShowsSuppressionButton(_: boolean)
    // ownInstanceProperties
    suppressionButton: NSButton;
    // ownInstanceProperties
    window: NSWindow;
    // compoundInstanceMethods
    addButtonWithTitle(withTitle: string): NSButton;
    // compoundInstanceMethods
    beginSheetModalForCompletionHandler(for_: NSWindow, completionHandler?: (p1: number) => void): void;
    // compoundInstanceMethods
    layout(): void;
    // compoundInstanceMethods
    runModal(): number;
  }

  interface NSAlertDelegate extends NSObject {
    // instance method
    alertShowHelp?(_: NSAlert): boolean;
  }

  // interface
  class NSAlignmentFeedbackFilter extends NSObject {
    // ownStaticProperties
    static inputEventMask: NSEvent.EventTypeMask;
    // compoundInstanceMethods
    alignmentFeedbackTokenForHorizontalMovementInViewPreviousXAlignedXDefaultX(in_?: NSView, previousX?: number, alignedX?: number, defaultX?: number): NSAlignmentFeedbackToken;
    // compoundInstanceMethods
    alignmentFeedbackTokenForMovementInViewPreviousPointAlignedPointDefaultPoint(in_?: NSView, previousPoint?: CGPoint, alignedPoint?: CGPoint, defaultPoint?: CGPoint): NSAlignmentFeedbackToken;
    // compoundInstanceMethods
    alignmentFeedbackTokenForVerticalMovementInViewPreviousYAlignedYDefaultY(in_?: NSView, previousY?: number, alignedY?: number, defaultY?: number): NSAlignmentFeedbackToken;
    // compoundInstanceMethods
    performFeedbackWithPerformanceTime(_: NSAlignmentFeedbackToken[], performanceTime: NSHapticFeedbackManager.PerformanceTime): void;
    // compoundInstanceMethods
    updateWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    updateWithPanRecognizer(withPanRecognizer: NSPanGestureRecognizer): void;
  }

  interface NSAlignmentFeedbackToken extends NSObject {
  }

  interface NSAnimatablePropertyContainer {
    animations: Map<string, any>;
    setAnimations(_: Map<string, any>)
    // instance method
    animationForKey(forKey: string): any;
    // instance method
    animator(): NSAnimatablePropertyContainer;
  }

  // interface
  class NSAnimation extends NSObject {
    // ownInstanceProperties
    isAnimating: boolean;
    // ownInstanceProperties
    animationBlockingMode: NSAnimation.BlockingMode;
    setAnimationBlockingMode(_: NSAnimation.BlockingMode)
    // ownInstanceProperties
    animationCurve: NSAnimation.Curve;
    setAnimationCurve(_: NSAnimation.Curve)
    // ownInstanceProperties
    currentProgress: number;
    setCurrentProgress(_: number)
    // ownInstanceProperties
    currentValue: number;
    // ownInstanceProperties
    delegate: NSAnimationDelegate;
    setDelegate(_: NSAnimationDelegate)
    // ownInstanceProperties
    duration: number;
    setDuration(_: number)
    // ownInstanceProperties
    frameRate: number;
    setFrameRate(_: number)
    // ownInstanceProperties
    progressMarks: number[];
    setProgressMarks(_: number[])
    // ownInstanceProperties
    runLoopModesForAnimating: string[];
    // compoundInstanceMethods
    addProgressMark(_: number): void;
    // compoundInstanceMethods
    clearStartAnimation(): void;
    // compoundInstanceMethods
    clearStopAnimation(): void;
    // compoundInstanceMethods
    static createWithDurationAnimationCurve(duration: number, animationCurve: NSAnimation.Curve): NSAnimation;
    // compoundInstanceMethods
    removeProgressMark(_: number): void;
    // compoundInstanceMethods
    startAnimation(): void;
    // compoundInstanceMethods
    startWhenAnimationReachesProgress(when: NSAnimation, reachesProgress: number): void;
    // compoundInstanceMethods
    stopAnimation(): void;
    // compoundInstanceMethods
    stopWhenAnimationReachesProgress(when: NSAnimation, reachesProgress: number): void;
  }

  // interface
  class NSAnimationContext extends NSObject {
    // compoundStaticMethods
    static beginGrouping(): void;
    // compoundStaticMethods
    static endGrouping(): void;
    // compoundStaticMethods
    static runAnimationGroup(_: (p1: NSAnimationContext) => void): void;
    // compoundStaticMethods
    static runAnimationGroupWithCompletionHandler(_: (p1: NSAnimationContext) => void, completionHandler?: () => void): void;
    // ownInstanceProperties
    allowsImplicitAnimation: boolean;
    setAllowsImplicitAnimation(_: boolean)
    // ownInstanceProperties
    completionHandler: () => void;
    setCompletionHandler(_: () => void)
    // ownInstanceProperties
    duration: number;
    setDuration(_: number)
    // ownInstanceProperties
    timingFunction: CAMediaTimingFunction;
    setTimingFunction(_: CAMediaTimingFunction)
    // ownStaticProperties
    static currentContext: NSAnimationContext;
  }

  interface NSAnimationDelegate extends NSObject {
    // instance method
    animationDidReachProgressMark?(_: NSAnimation, didReachProgressMark: number): void;
    // instance method
    animationValueForProgress?(_: NSAnimation, valueForProgress: number): number;
    // instance method
    animationDidEnd?(_: NSAnimation): void;
    // instance method
    animationDidStop?(_: NSAnimation): void;
    // instance method
    animationShouldStart?(_: NSAnimation): boolean;
  }

  // interface
  class NSAppearance extends NSObject {
    // ownInstanceProperties
    allowsVibrancy: boolean;
    // ownInstanceProperties
    name: string;
    // ownStaticProperties
    static currentAppearance: NSAppearance;
    setCurrentAppearance(_: NSAppearance)
    // compoundInstanceMethods
    bestMatchFromAppearancesWithNames(from: string[]): string;
    // compoundInstanceMethods
    static createWithAppearanceNamedBundle(appearanceNamed: string, bundle?: Bundle): NSAppearance;
  }

  interface NSAppearanceCustomization extends NSObject {
    appearance: NSAppearance;
    setAppearance(_: NSAppearance)
    effectiveAppearance: NSAppearance;
  }

  // interface
  class NSApplication extends NSResponder {
    // compoundStaticMethods
    static detachDrawingThreadToTargetWithObject(_: string, toTarget: any, with_?: any): void;
    // ownInstanceProperties
    isActive: boolean;
    // ownInstanceProperties
    applicationIconImage: NSImage;
    setApplicationIconImage(_: NSImage)
    // ownInstanceProperties
    isAutomaticCustomizeTouchBarMenuItemEnabled: boolean;
    setAutomaticCustomizeTouchBarMenuItemEnabled(_: boolean)
    // ownInstanceProperties
    currentEvent: NSEvent;
    // ownInstanceProperties
    currentSystemPresentationOptions: NSApplication.PresentationOptions;
    // ownInstanceProperties
    delegate: NSApplicationDelegate;
    setDelegate(_: NSApplicationDelegate)
    // ownInstanceProperties
    dockTile: NSDockTile;
    // ownInstanceProperties
    enabledRemoteNotificationTypes: NSApplication.RemoteNotificationType;
    // ownInstanceProperties
    isFullKeyboardAccessEnabled: boolean;
    // ownInstanceProperties
    helpMenu: NSMenu;
    setHelpMenu(_: NSMenu)
    // ownInstanceProperties
    isHidden: boolean;
    // ownInstanceProperties
    keyWindow: NSWindow;
    // ownInstanceProperties
    mainMenu: NSMenu;
    setMainMenu(_: NSMenu)
    // ownInstanceProperties
    mainWindow: NSWindow;
    // ownInstanceProperties
    modalWindow: NSWindow;
    // ownInstanceProperties
    occlusionState: NSApplication.OcclusionState;
    // ownInstanceProperties
    orderedDocuments: NSDocument[];
    // ownInstanceProperties
    orderedWindows: NSWindow[];
    // ownInstanceProperties
    presentationOptions: NSApplication.PresentationOptions;
    setPresentationOptions(_: NSApplication.PresentationOptions)
    // ownInstanceProperties
    isRegisteredForRemoteNotifications: boolean;
    // ownInstanceProperties
    isRunning: boolean;
    // ownInstanceProperties
    servicesMenu: NSMenu;
    setServicesMenu(_: NSMenu)
    // ownInstanceProperties
    servicesProvider: any;
    setServicesProvider(_: any)
    // ownInstanceProperties
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    // ownInstanceProperties
    windows: NSWindow[];
    // ownInstanceProperties
    windowsMenu: NSMenu;
    setWindowsMenu(_: NSMenu)
    // ownStaticProperties
    static sharedApplication: NSApplication;
    // compoundInstanceMethods
    abortModal(): void;
    // compoundInstanceMethods
    activateContextHelpMode(_?: any): void;
    // compoundInstanceMethods
    activateIgnoringOtherApps(ignoringOtherApps: boolean): void;
    // compoundInstanceMethods
    activationPolicy(): NSApplication.ActivationPolicy;
    // compoundInstanceMethods
    addWindowsItemTitleFilename(_: NSWindow, title: string, filename: boolean): void;
    // compoundInstanceMethods
    arrangeInFront(_?: any): void;
    // compoundInstanceMethods
    beginModalSessionForWindow(for_: NSWindow): any;
    // compoundInstanceMethods
    cancelUserAttentionRequest(_: number): void;
    // compoundInstanceMethods
    changeWindowsItemTitleFilename(_: NSWindow, title: string, filename: boolean): void;
    // compoundInstanceMethods
    completeStateRestoration(): void;
    // compoundInstanceMethods
    deactivate(): void;
    // compoundInstanceMethods
    disableRelaunchOnLogin(): void;
    // compoundInstanceMethods
    discardEventsMatchingMaskBeforeEvent(matching: NSEvent.EventTypeMask, before?: NSEvent): void;
    // compoundInstanceMethods
    enableRelaunchOnLogin(): void;
    // compoundInstanceMethods
    endModalSession(_: any): void;
    // compoundInstanceMethods
    enumerateWindowsWithOptionsUsing(options: NSApplication.WindowListOptions, using: (p1: NSWindow, p2: boolean) => void): void;
    // compoundInstanceMethods
    extendStateRestoration(): void;
    // compoundInstanceMethods
    finishLaunching(): void;
    // compoundInstanceMethods
    hide(_?: any): void;
    // compoundInstanceMethods
    hideOtherApplications(_?: any): void;
    // compoundInstanceMethods
    miniaturizeAll(_?: any): void;
    // compoundInstanceMethods
    nextEventMatchingMaskUntilDateInModeDequeue(matching: NSEvent.EventTypeMask, until?: Date, inMode?: string, dequeue?: boolean): NSEvent;
    // compoundInstanceMethods
    orderFrontCharacterPalette(_?: any): void;
    // compoundInstanceMethods
    orderFrontColorPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontStandardAboutPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontStandardAboutPanelWithOptions(options: Map<string, any>): void;
    // compoundInstanceMethods
    postEventAtStart(_: NSEvent, atStart: boolean): void;
    // compoundInstanceMethods
    preventWindowOrdering(): void;
    // compoundInstanceMethods
    registerForRemoteNotificationTypes(matching: NSApplication.RemoteNotificationType): void;
    // compoundInstanceMethods
    registerForRemoteNotifications(): void;
    // compoundInstanceMethods
    registerServicesMenuSendTypesReturnTypes(_: string[], returnTypes: string[]): void;
    // compoundInstanceMethods
    registerUserInterfaceItemSearchHandler(_: NSUserInterfaceItemSearching): void;
    // compoundInstanceMethods
    removeWindowsItem(_: NSWindow): void;
    // compoundInstanceMethods
    replyToApplicationShouldTerminate(toApplicationShouldTerminate: boolean): void;
    // compoundInstanceMethods
    replyToOpenOrPrint(toOpenOrPrint: NSApplication.DelegateReply): void;
    // compoundInstanceMethods
    reportException(_: NSException): void;
    // compoundInstanceMethods
    requestUserAttention(_: NSApplication.RequestUserAttentionType): number;
    // compoundInstanceMethods
    restoreWindowWithWithIdentifierStateCompletionHandler(withIdentifier: string, state: NSCoder, completionHandler?: (p1: NSWindow, p2: NSError) => void): boolean;
    // compoundInstanceMethods
    run(): void;
    // compoundInstanceMethods
    runModalForWindow(for_: NSWindow): number;
    // compoundInstanceMethods
    runModalSession(_: any): number;
    // compoundInstanceMethods
    runPageLayout(_?: any): void;
    // compoundInstanceMethods
    searchStringInUserInterfaceItemStringSearchRangeFoundRange(_: string, inUserInterfaceItemString: string, range: NSRange, found?: NSRange): boolean;
    // compoundInstanceMethods
    sendActionToFrom(_: string, to?: any, from?: any): boolean;
    // compoundInstanceMethods
    sendEvent(_: NSEvent): void;
    // compoundInstanceMethods
    setActivationPolicy(_: NSApplication.ActivationPolicy): boolean;
    // compoundInstanceMethods
    setWindowsNeedUpdate(_: boolean): void;
    // compoundInstanceMethods
    showHelp(_?: any): void;
    // compoundInstanceMethods
    stop(_?: any): void;
    // compoundInstanceMethods
    stopModal(): void;
    // compoundInstanceMethods
    stopModalWithCode(withCode: number): void;
    // compoundInstanceMethods
    targetForAction(forAction: string): any;
    // compoundInstanceMethods
    targetForActionToFrom(forAction: string, to?: any, from?: any): any;
    // compoundInstanceMethods
    terminate(_?: any): void;
    // compoundInstanceMethods
    toggleTouchBarCustomizationPalette(_?: any): void;
    // compoundInstanceMethods
    unhide(_?: any): void;
    // compoundInstanceMethods
    unhideAllApplications(_?: any): void;
    // compoundInstanceMethods
    unhideWithoutActivation(): void;
    // compoundInstanceMethods
    unregisterForRemoteNotifications(): void;
    // compoundInstanceMethods
    unregisterUserInterfaceItemSearchHandler(_: NSUserInterfaceItemSearching): void;
    // compoundInstanceMethods
    updateWindows(): void;
    // compoundInstanceMethods
    updateWindowsItem(_: NSWindow): void;
    // compoundInstanceMethods
    windowWithWindowNumber(withWindowNumber: number): NSWindow;
  }

  interface NSApplicationDelegate extends NSObject {
    // instance method
    applicationContinueRestorationHandler?(_: NSApplication, continue_: NSUserActivity, restorationHandler: (p1: NSUserActivityRestoring[]) => void): boolean;
    // instance method
    applicationOpenURLs?(_: NSApplication, open: NSURL[]): void;
    // instance method
    applicationUserDidAcceptCloudKitShareWithMetadata?(_: NSApplication, userDidAcceptCloudKitShareWith: Metadata): void;
    // instance method
    applicationDidUpdateUserActivity?(_: NSApplication, didUpdate: NSUserActivity): void;
    // instance method
    applicationDelegateHandlesKey?(_: NSApplication, delegateHandlesKey: string): boolean;
    // instance method
    applicationDidDecodeRestorableState?(_: NSApplication, didDecodeRestorableState: NSCoder): void;
    // instance method
    applicationDidFailToContinueUserActivityWithTypeError?(_: NSApplication, didFailToContinueUserActivityWithType: string, error: NSError): void;
    // instance method
    applicationDidFailToRegisterForRemoteNotificationsWithError?(_: NSApplication, didFailToRegisterForRemoteNotificationsWithError: NSError): void;
    // instance method
    applicationDidReceiveRemoteNotification?(_: NSApplication, didReceiveRemoteNotification: Map<string, any>): void;
    // instance method
    applicationDidRegisterForRemoteNotificationsWithDeviceToken?(_: NSApplication, didRegisterForRemoteNotificationsWithDeviceToken: NSData): void;
    // instance method
    applicationOpenFile?(_: NSApplication, openFile: string): boolean;
    // instance method
    applicationOpenFiles?(_: NSApplication, openFiles: string[]): void;
    // instance method
    applicationOpenFileWithoutUI?(_: any, openFileWithoutUI: string): boolean;
    // instance method
    applicationOpenTempFile?(_: NSApplication, openTempFile: string): boolean;
    // instance method
    applicationPrintFile?(_: NSApplication, printFile: string): boolean;
    // instance method
    applicationPrintFilesWithSettingsShowPrintPanels?(_: NSApplication, printFiles: string[], withSettings: Map<string, any>, showPrintPanels: boolean): NSApplication.PrintReply;
    // instance method
    applicationWillContinueUserActivityWithType?(_: NSApplication, willContinueUserActivityWithType: string): boolean;
    // instance method
    applicationWillEncodeRestorableState?(_: NSApplication, willEncodeRestorableState: NSCoder): void;
    // instance method
    applicationWillPresentError?(_: NSApplication, willPresentError: NSError): NSError;
    // instance method
    applicationDidBecomeActive?(_: NSNotification): void;
    // instance method
    applicationDidChangeOcclusionState?(_: NSNotification): void;
    // instance method
    applicationDidChangeScreenParameters?(_: NSNotification): void;
    // instance method
    applicationDidFinishLaunching?(_: NSNotification): void;
    // instance method
    applicationDidHide?(_: NSNotification): void;
    // instance method
    applicationDidResignActive?(_: NSNotification): void;
    // instance method
    applicationDidUnhide?(_: NSNotification): void;
    // instance method
    applicationDidUpdate?(_: NSNotification): void;
    // instance method
    applicationDockMenu?(_: NSApplication): NSMenu;
    // instance method
    applicationOpenUntitledFile?(_: NSApplication): boolean;
    // instance method
    applicationShouldHandleReopenHasVisibleWindows?(_: NSApplication, hasVisibleWindows: boolean): boolean;
    // instance method
    applicationShouldOpenUntitledFile?(_: NSApplication): boolean;
    // instance method
    applicationShouldTerminate?(_: NSApplication): NSApplication.TerminateReply;
    // instance method
    applicationShouldTerminateAfterLastWindowClosed?(_: NSApplication): boolean;
    // instance method
    applicationWillBecomeActive?(_: NSNotification): void;
    // instance method
    applicationWillFinishLaunching?(_: NSNotification): void;
    // instance method
    applicationWillHide?(_: NSNotification): void;
    // instance method
    applicationWillResignActive?(_: NSNotification): void;
    // instance method
    applicationWillTerminate?(_: NSNotification): void;
    // instance method
    applicationWillUnhide?(_: NSNotification): void;
    // instance method
    applicationWillUpdate?(_: NSNotification): void;
  }

  // export function NSApplicationLoad(): boolean;

  // export function NSApplicationMain(argc: number, argv: string): never;

  // interface
  class NSArrayController extends NSObjectController {
    // ownInstanceProperties
    alwaysUsesMultipleValuesMarker: boolean;
    setAlwaysUsesMultipleValuesMarker(_: boolean)
    // ownInstanceProperties
    arrangedObjects: any;
    // ownInstanceProperties
    automaticRearrangementKeyPaths: string[];
    // ownInstanceProperties
    automaticallyRearrangesObjects: boolean;
    setAutomaticallyRearrangesObjects(_: boolean)
    // ownInstanceProperties
    avoidsEmptySelection: boolean;
    setAvoidsEmptySelection(_: boolean)
    // ownInstanceProperties
    canInsert: boolean;
    // ownInstanceProperties
    canSelectNext: boolean;
    // ownInstanceProperties
    canSelectPrevious: boolean;
    // ownInstanceProperties
    clearsFilterPredicateOnInsertion: boolean;
    setClearsFilterPredicateOnInsertion(_: boolean)
    // ownInstanceProperties
    filterPredicate: NSPredicate;
    setFilterPredicate(_: NSPredicate)
    // ownInstanceProperties
    preservesSelection: boolean;
    setPreservesSelection(_: boolean)
    // ownInstanceProperties
    selectionIndex: number;
    // ownInstanceProperties
    selectionIndexes: NSIndexSet;
    // ownInstanceProperties
    selectsInsertedObjects: boolean;
    setSelectsInsertedObjects(_: boolean)
    // ownInstanceProperties
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[])
    // compoundInstanceMethods
    addObjects(contentsOf: any[]): void;
    // compoundInstanceMethods
    addSelectedObjects(_: any[]): boolean;
    // compoundInstanceMethods
    addSelectionIndexes(_: NSIndexSet): boolean;
    // compoundInstanceMethods
    arrangeObjects(_: any[]): any[];
    // compoundInstanceMethods
    didChangeArrangementCriteria(): void;
    // compoundInstanceMethods
    insert(_?: any): void;
    // compoundInstanceMethods
    insertObjectAtArrangedObjectIndex(_: any, atArrangedObjectIndex: number): void;
    // compoundInstanceMethods
    insertObjectsAtArrangedObjectIndexes(contentsOf: any[], atArrangedObjectIndexes: NSIndexSet): void;
    // compoundInstanceMethods
    rearrangeObjects(): void;
    // compoundInstanceMethods
    removeObjectAtArrangedObjectIndex(atArrangedObjectIndex: number): void;
    // compoundInstanceMethods
    removeObjects(contentsOf: any[]): void;
    // compoundInstanceMethods
    removeObjectsAtArrangedObjectIndexes(atArrangedObjectIndexes: NSIndexSet): void;
    // compoundInstanceMethods
    removeSelectedObjects(_: any[]): boolean;
    // compoundInstanceMethods
    removeSelectionIndexes(_: NSIndexSet): boolean;
    // compoundInstanceMethods
    selectNext(_?: any): void;
    // compoundInstanceMethods
    selectPrevious(_?: any): void;
    // compoundInstanceMethods
    setSelectedObjects(_: any[]): boolean;
    // compoundInstanceMethods
    setSelectionIndex(_: number): boolean;
    // compoundInstanceMethods
    setSelectionIndexes(_: NSIndexSet): boolean;
  }

  // export function NSAvailableWindowDepths(): NSWindow.Depth;

  // export function NSBeep(): void;

  // export function NSBestDepth(colorSpace: string, bps: number, bpp: number, planar: boolean, exactMatch: boolean): NSWindow.Depth;

  // interface
  class NSBezierPath extends NSObject {
    // compoundStaticMethods
    static clipRect(_: CGRect): void;
    // compoundStaticMethods
    static drawPackedGlyphsAtPoint(_: string, at: CGPoint): void;
    // compoundStaticMethods
    static fillRect(_: CGRect): void;
    // compoundStaticMethods
    static strokeLineFromPointToPoint(from: CGPoint, to: CGPoint): void;
    // compoundStaticMethods
    static strokeRect(_: CGRect): void;
    // ownInstanceProperties
    bezierPathByFlatteningPath: NSBezierPath;
    // ownInstanceProperties
    bezierPathByReversingPath: NSBezierPath;
    // ownInstanceProperties
    bounds: CGRect;
    // ownInstanceProperties
    controlPointBounds: CGRect;
    // ownInstanceProperties
    currentPoint: CGPoint;
    // ownInstanceProperties
    elementCount: number;
    // ownInstanceProperties
    isEmpty: boolean;
    // ownInstanceProperties
    flatness: number;
    setFlatness(_: number)
    // ownInstanceProperties
    lineCapStyle: NSBezierPath.LineCapStyle;
    setLineCapStyle(_: NSBezierPath.LineCapStyle)
    // ownInstanceProperties
    lineJoinStyle: NSBezierPath.LineJoinStyle;
    setLineJoinStyle(_: NSBezierPath.LineJoinStyle)
    // ownInstanceProperties
    lineWidth: number;
    setLineWidth(_: number)
    // ownInstanceProperties
    miterLimit: number;
    setMiterLimit(_: number)
    // ownInstanceProperties
    windingRule: NSBezierPath.WindingRule;
    setWindingRule(_: NSBezierPath.WindingRule)
    // ownStaticProperties
    static defaultFlatness: number;
    setDefaultFlatness(_: number)
    // ownStaticProperties
    static defaultLineCapStyle: NSBezierPath.LineCapStyle;
    setDefaultLineCapStyle(_: NSBezierPath.LineCapStyle)
    // ownStaticProperties
    static defaultLineJoinStyle: NSBezierPath.LineJoinStyle;
    setDefaultLineJoinStyle(_: NSBezierPath.LineJoinStyle)
    // ownStaticProperties
    static defaultLineWidth: number;
    setDefaultLineWidth(_: number)
    // ownStaticProperties
    static defaultMiterLimit: number;
    setDefaultMiterLimit(_: number)
    // ownStaticProperties
    static defaultWindingRule: NSBezierPath.WindingRule;
    setDefaultWindingRule(_: NSBezierPath.WindingRule)
    // compoundInstanceMethods
    addClip(): void;
    // compoundInstanceMethods
    appendBezierPath(_: NSBezierPath): void;
    // compoundInstanceMethods
    appendBezierPathWithArcFromPointToPointRadius(from: CGPoint, to: CGPoint, radius: number): void;
    // compoundInstanceMethods
    appendBezierPathWithArcWithCenterRadiusStartAngleEndAngle(withCenter: CGPoint, radius: number, startAngle: number, endAngle: number): void;
    // compoundInstanceMethods
    appendBezierPathWithArcWithCenterRadiusStartAngleEndAngleClockwise(withCenter: CGPoint, radius: number, startAngle: number, endAngle: number, clockwise: boolean): void;
    // compoundInstanceMethods
    appendBezierPathWithCGGlyphInFont(withCGGlyph: number, in_: NSFont): void;
    // compoundInstanceMethods
    appendBezierPathWithCGGlyphsCountInFont(withCGGlyphs: number, count: number, in_: NSFont): void;
    // compoundInstanceMethods
    appendBezierPathWithOvalInRect(in_: CGRect): void;
    // compoundInstanceMethods
    appendBezierPathWithPointsCount(_: NSPoint, count: number): void;
    // compoundInstanceMethods
    appendBezierPathWithRect(_: CGRect): void;
    // compoundInstanceMethods
    appendBezierPathWithRoundedRectXRadiusYRadius(_: CGRect, xRadius: number, yRadius: number): void;
    // compoundInstanceMethods
    closePath(): void;
    // compoundInstanceMethods
    containsPoint(_: CGPoint): boolean;
    // compoundInstanceMethods
    curveToPointControlPoint1ControlPoint2(to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): void;
    // compoundInstanceMethods
    elementAtIndex(at: number): NSBezierPath.ElementType;
    // compoundInstanceMethods
    elementAtIndexAssociatedPoints(at: number, associatedPoints?: NSPoint): NSBezierPath.ElementType;
    // compoundInstanceMethods
    fill(): void;
    // compoundInstanceMethods
    getLineDashCountPhase(_?: number, count?: number, phase?: number): void;
    // compoundInstanceMethods
    lineToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    moveToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    relativeCurveToPointControlPoint1ControlPoint2(to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): void;
    // compoundInstanceMethods
    relativeLineToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    relativeMoveToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    removeAllPoints(): void;
    // compoundInstanceMethods
    setAssociatedPointsAtIndex(_?: NSPoint, at?: number): void;
    // compoundInstanceMethods
    setClip(): void;
    // compoundInstanceMethods
    setLineDashCountPhase(_?: number, count?: number, phase?: number): void;
    // compoundInstanceMethods
    stroke(): void;
    // compoundInstanceMethods
    transformUsingAffineTransform(using: NSAffineTransform): void;
  }

  // interface
  class NSBindingSelectionMarker extends NSObject {
    // compoundStaticMethods
    static defaultPlaceholderForMarkerOnClassWithBinding(for_?: NSBindingSelectionMarker, on?: typeof NSObject, withBinding?: string): any;
    // compoundStaticMethods
    static setDefaultPlaceholderForMarkerOnClassWithBinding(_?: any, for_?: NSBindingSelectionMarker, on?: typeof NSObject, withBinding?: string): void;
    // ownStaticProperties
    static multipleValuesSelectionMarker: NSBindingSelectionMarker;
    // ownStaticProperties
    static noSelectionMarker: NSBindingSelectionMarker;
    // ownStaticProperties
    static notApplicableSelectionMarker: NSBindingSelectionMarker;
  }

  // interface
  class NSBitmapImageRep extends NSImageRep {
    // compoundStaticMethods
    static TIFFRepresentationOfImageRepsInArray(in_: NSImageRep[]): NSData;
    // compoundStaticMethods
    static TIFFRepresentationOfImageRepsInArrayUsingCompressionFactor(in_: NSImageRep[], using: NSBitmapImageRep.TIFFCompression, factor: number): NSData;
    // compoundStaticMethods
    static getTIFFCompressionTypesCount(_?: NSBitmapImageRep.TIFFCompression, count?: number): void;
    // compoundStaticMethods
    static imageRepsWithData(with_: NSData): NSImageRep[];
    // compoundStaticMethods
    static localizedNameForTIFFCompressionType(forTIFFCompressionType: NSBitmapImageRep.TIFFCompression): string;
    // compoundStaticMethods
    static representationOfImageRepsInArrayUsingTypeProperties(in_: NSImageRep[], using: NSBitmapImageRep.FileType, properties: Map<string, any>): NSData;
    // ownInstanceProperties
    CGImage: any;
    // ownInstanceProperties
    TIFFRepresentation: NSData;
    // ownInstanceProperties
    bitmapData: string;
    // ownInstanceProperties
    bitmapFormat: NSBitmapImageRep.Format;
    // ownInstanceProperties
    bitsPerPixel: number;
    // ownInstanceProperties
    bytesPerPlane: number;
    // ownInstanceProperties
    bytesPerRow: number;
    // ownInstanceProperties
    colorSpace: NSColorSpace;
    // ownInstanceProperties
    numberOfPlanes: number;
    // ownInstanceProperties
    isPlanar: boolean;
    // ownInstanceProperties
    samplesPerPixel: number;
    // compoundInstanceMethods
    TIFFRepresentationUsingCompressionFactor(using: NSBitmapImageRep.TIFFCompression, factor: number): NSData;
    // compoundInstanceMethods
    bitmapImageRepByConvertingToColorSpaceRenderingIntent(to: NSColorSpace, renderingIntent: NSColorRenderingIntent): NSBitmapImageRep;
    // compoundInstanceMethods
    bitmapImageRepByRetaggingWithColorSpace(with_: NSColorSpace): NSBitmapImageRep;
    // compoundInstanceMethods
    canBeCompressedUsing(using: NSBitmapImageRep.TIFFCompression): boolean;
    // compoundInstanceMethods
    colorAtXY(x: number, y: number): NSColor;
    // compoundInstanceMethods
    colorizeByMappingGrayToColorBlackMappingWhiteMapping(byMappingGray: number, to?: NSColor, blackMapping?: NSColor, whiteMapping?: NSColor): void;
    // compoundInstanceMethods
    getBitmapDataPlanes(_?: string): void;
    // compoundInstanceMethods
    getCompressionFactor(_?: NSBitmapImageRep.TIFFCompression, factor?: number): void;
    // compoundInstanceMethods
    getPixelAtXY(_: number, atX: number, y: number): void;
    // compoundInstanceMethods
    incrementalLoadFromDataComplete(from: NSData, complete: boolean): number;
    // compoundInstanceMethods
    static createWithForIncrementalLoad(): NSBitmapImageRep;
    // compoundInstanceMethods
    static createWithBitmapDataPlanesPixelsWidePixelsHighBitsPerSampleSamplesPerPixelHasAlphaIsPlanarColorSpaceNameBitmapFormatBytesPerRowBitsPerPixel(bitmapDataPlanes?: string, pixelsWide?: number, pixelsHigh?: number, bitsPerSample?: number, samplesPerPixel?: number, hasAlpha?: boolean, isPlanar?: boolean, colorSpaceName?: string, bitmapFormat?: NSBitmapImageRep.Format, bytesPerRow?: number, bitsPerPixel?: number): NSBitmapImageRep;
    // compoundInstanceMethods
    static createWithBitmapDataPlanesPixelsWidePixelsHighBitsPerSampleSamplesPerPixelHasAlphaIsPlanarColorSpaceNameBytesPerRowBitsPerPixel(bitmapDataPlanes?: string, pixelsWide?: number, pixelsHigh?: number, bitsPerSample?: number, samplesPerPixel?: number, hasAlpha?: boolean, isPlanar?: boolean, colorSpaceName?: string, bytesPerRow?: number, bitsPerPixel?: number): NSBitmapImageRep;
    // compoundInstanceMethods
    static createWithCGImage(CGImage: any): NSBitmapImageRep;
    // compoundInstanceMethods
    static createWithCIImage(CIImage: CIImage): NSBitmapImageRep;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSBitmapImageRep;
    // compoundInstanceMethods
    representationUsingTypeProperties(using: NSBitmapImageRep.FileType, properties: Map<string, any>): NSData;
    // compoundInstanceMethods
    setColorAtXY(_: NSColor, atX: number, y: number): void;
    // compoundInstanceMethods
    setCompressionFactor(_: NSBitmapImageRep.TIFFCompression, factor: number): void;
    // compoundInstanceMethods
    setPixelAtXY(_: number, atX: number, y: number): void;
    // compoundInstanceMethods
    setPropertyWithValue(_: string, withValue?: any): void;
    // compoundInstanceMethods
    valueForProperty(forProperty: string): any;
  }

  // export function NSBitsPerPixelFromDepth(depth: NSWindow.Depth): number;

  // export function NSBitsPerSampleFromDepth(depth: NSWindow.Depth): number;

  // interface
  class NSBox extends NSView {
    // ownInstanceProperties
    borderColor: NSColor;
    setBorderColor(_: NSColor)
    // ownInstanceProperties
    borderRect: CGRect;
    // ownInstanceProperties
    borderWidth: number;
    setBorderWidth(_: number)
    // ownInstanceProperties
    boxType: NSBox.BoxType;
    setBoxType(_: NSBox.BoxType)
    // ownInstanceProperties
    contentView: NSView;
    setContentView(_: NSView)
    // ownInstanceProperties
    contentViewMargins: CGSize;
    setContentViewMargins(_: CGSize)
    // ownInstanceProperties
    cornerRadius: number;
    setCornerRadius(_: number)
    // ownInstanceProperties
    fillColor: NSColor;
    setFillColor(_: NSColor)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    titleCell: any;
    // ownInstanceProperties
    titleFont: NSFont;
    setTitleFont(_: NSFont)
    // ownInstanceProperties
    titlePosition: NSBox.TitlePosition;
    setTitlePosition(_: NSBox.TitlePosition)
    // ownInstanceProperties
    titleRect: CGRect;
    // ownInstanceProperties
    isTransparent: boolean;
    setTransparent(_: boolean)
    // compoundInstanceMethods
    setFrameFromContentFrame(_: CGRect): void;
    // compoundInstanceMethods
    sizeToFit(): void;
  }

  // interface
  class NSBrowser extends NSControl {
    // compoundStaticMethods
    static removeSavedColumnsWithAutosaveName(withAutosaveName: string): void;
    // ownInstanceProperties
    allowsBranchSelection: boolean;
    setAllowsBranchSelection(_: boolean)
    // ownInstanceProperties
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean)
    // ownInstanceProperties
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean)
    // ownInstanceProperties
    allowsTypeSelect: boolean;
    setAllowsTypeSelect(_: boolean)
    // ownInstanceProperties
    autohidesScroller: boolean;
    setAutohidesScroller(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    cellPrototype: any;
    setCellPrototype(_: any)
    // ownInstanceProperties
    clickedColumn: number;
    // ownInstanceProperties
    clickedRow: number;
    // ownInstanceProperties
    columnResizingType: NSBrowser.ColumnResizingType;
    setColumnResizingType(_: NSBrowser.ColumnResizingType)
    // ownInstanceProperties
    columnsAutosaveName: string;
    setColumnsAutosaveName(_: string)
    // ownInstanceProperties
    delegate: NSBrowserDelegate;
    setDelegate(_: NSBrowserDelegate)
    // ownInstanceProperties
    doubleAction: string;
    setDoubleAction(_: string)
    // ownInstanceProperties
    firstVisibleColumn: number;
    // ownInstanceProperties
    hasHorizontalScroller: boolean;
    setHasHorizontalScroller(_: boolean)
    // ownInstanceProperties
    lastColumn: number;
    setLastColumn(_: number)
    // ownInstanceProperties
    lastVisibleColumn: number;
    // ownInstanceProperties
    isLoaded: boolean;
    // ownInstanceProperties
    maxVisibleColumns: number;
    setMaxVisibleColumns(_: number)
    // ownInstanceProperties
    minColumnWidth: number;
    setMinColumnWidth(_: number)
    // ownInstanceProperties
    numberOfVisibleColumns: number;
    // ownInstanceProperties
    pathSeparator: string;
    setPathSeparator(_: string)
    // ownInstanceProperties
    prefersAllColumnUserResizing: boolean;
    setPrefersAllColumnUserResizing(_: boolean)
    // ownInstanceProperties
    reusesColumns: boolean;
    setReusesColumns(_: boolean)
    // ownInstanceProperties
    rowHeight: number;
    setRowHeight(_: number)
    // ownInstanceProperties
    //   selectedCell: any;
    // ownInstanceProperties
    selectedCells: NSCell[];
    // ownInstanceProperties
    selectedColumn: number;
    // ownInstanceProperties
    selectionIndexPath: NSIndexPath;
    setSelectionIndexPath(_: NSIndexPath)
    // ownInstanceProperties
    selectionIndexPaths: NSIndexPath[];
    setSelectionIndexPaths(_: NSIndexPath[])
    // ownInstanceProperties
    sendsActionOnArrowKeys: boolean;
    setSendsActionOnArrowKeys(_: boolean)
    // ownInstanceProperties
    separatesColumns: boolean;
    setSeparatesColumns(_: boolean)
    // ownInstanceProperties
    takesTitleFromPreviousColumn: boolean;
    setTakesTitleFromPreviousColumn(_: boolean)
    // ownInstanceProperties
    titleHeight: number;
    // ownInstanceProperties
    isTitled: boolean;
    setTitled(_: boolean)
    // ownStaticProperties
    static cellClass: typeof NSObject;
    // compoundInstanceMethods
    addColumn(): void;
    // compoundInstanceMethods
    canDragRowsWithIndexesInColumnWithEvent(with_: NSIndexSet, inColumn: number, with_2: NSEvent): boolean;
    // compoundInstanceMethods
    columnContentWidthForColumnWidth(forColumnWidth: number): number;
    // compoundInstanceMethods
    columnWidthForColumnContentWidth(forColumnContentWidth: number): number;
    // compoundInstanceMethods
    defaultColumnWidth(): number;
    // compoundInstanceMethods
    doClick(_?: any): void;
    // compoundInstanceMethods
    doDoubleClick(_?: any): void;
    // compoundInstanceMethods
    draggingImageForRowsWithIndexesInColumnWithEventOffset(with_: NSIndexSet, inColumn: number, with_2: NSEvent, offset?: NSPoint): NSImage;
    // compoundInstanceMethods
    drawTitleOfColumnInRect(ofColumn: number, in_: CGRect): void;
    // compoundInstanceMethods
    editItemAtIndexPathWithEventSelect(at: NSIndexPath, with_?: NSEvent, select?: boolean): void;
    // compoundInstanceMethods
    frameOfColumn(ofColumn: number): CGRect;
    // compoundInstanceMethods
    frameOfInsideOfColumn(ofInsideOfColumn: number): CGRect;
    // compoundInstanceMethods
    frameOfRowInColumn(ofRow: number, inColumn: number): CGRect;
    // compoundInstanceMethods
    getRowColumnForPoint(_?: number, column?: number, for_?: CGPoint): boolean;
    // compoundInstanceMethods
    indexPathForColumn(forColumn: number): NSIndexPath;
    // compoundInstanceMethods
    isLeafItem(_?: any): boolean;
    // compoundInstanceMethods
    itemAtIndexPath(at: NSIndexPath): any;
    // compoundInstanceMethods
    itemAtRowInColumn(atRow: number, inColumn: number): any;
    // compoundInstanceMethods
    loadColumnZero(): void;
    // compoundInstanceMethods
    loadedCellAtRowColumn(atRow: number, column: number): any;
    // compoundInstanceMethods
    noteHeightOfRowsWithIndexesChangedInColumn(_: NSIndexSet, inColumn: number): void;
    // compoundInstanceMethods
    parentForItemsInColumn(inColumn: number): any;
    // compoundInstanceMethods
    path(): string;
    // compoundInstanceMethods
    pathToColumn(toColumn: number): string;
    // compoundInstanceMethods
    reloadColumn(_: number): void;
    // compoundInstanceMethods
    reloadDataForRowIndexesInColumn(forRowIndexes: NSIndexSet, inColumn: number): void;
    // compoundInstanceMethods
    scrollColumnToVisible(_: number): void;
    // compoundInstanceMethods
    scrollColumnsLeftBy(by: number): void;
    // compoundInstanceMethods
    scrollColumnsRightBy(by: number): void;
    // compoundInstanceMethods
    scrollRowToVisibleInColumn(_: number, inColumn: number): void;
    // compoundInstanceMethods
    selectRowInColumn(_: number, inColumn: number): void;
    // compoundInstanceMethods
    selectRowIndexesInColumn(_: NSIndexSet, inColumn: number): void;
    // compoundInstanceMethods
    selectedCellInColumn(inColumn: number): any;
    // compoundInstanceMethods
    selectedRowInColumn(inColumn: number): number;
    // compoundInstanceMethods
    selectedRowIndexesInColumn(inColumn: number): NSIndexSet;
    // compoundInstanceMethods
    sendAction(): boolean;
    // compoundInstanceMethods
    setCellClass(_: typeof NSObject): void;
    // compoundInstanceMethods
    setDefaultColumnWidth(_: number): void;
    // compoundInstanceMethods
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
    // compoundInstanceMethods
    setPath(_: string): boolean;
    // compoundInstanceMethods
    setTitleOfColumn(_: string, ofColumn: number): void;
    // compoundInstanceMethods
    setWidthOfColumn(_: number, ofColumn: number): void;
    // compoundInstanceMethods
    tile(): void;
    // compoundInstanceMethods
    titleFrameOfColumn(ofColumn: number): CGRect;
    // compoundInstanceMethods
    titleOfColumn(ofColumn: number): string;
    // compoundInstanceMethods
    validateVisibleColumns(): void;
    // compoundInstanceMethods
    widthOfColumn(ofColumn: number): number;
  }

  // interface
  class NSBrowserCell extends NSCell {
    // ownInstanceProperties
    alternateImage: NSImage;
    setAlternateImage(_: NSImage)
    // ownInstanceProperties
    isLeaf: boolean;
    setLeaf(_: boolean)
    // ownInstanceProperties
    isLoaded: boolean;
    setLoaded(_: boolean)
    // ownStaticProperties
    static branchImage: NSImage;
    // ownStaticProperties
    static highlightedBranchImage: NSImage;
    // compoundInstanceMethods
    highlightColorInView(in_: NSView): NSColor;
    // compoundInstanceMethods
    reset(): void;
    // compoundInstanceMethods
    set(): void;
  }

  interface NSBrowserDelegate extends NSObject {
    // instance method
    browserCreateRowsForColumnInMatrix?(_: NSBrowser, createRowsForColumn: number, in_: NSMatrix): void;
    // instance method
    browserNextTypeSelectMatchFromRowToRowInColumnForString?(_: NSBrowser, nextTypeSelectMatchFromRow: number, toRow: number, inColumn: number, for_?: string): number;
    // instance method
    browserShouldTypeSelectForEventWithCurrentSearchString?(_: NSBrowser, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
    // instance method
    browserSelectCellWithStringInColumn?(_: NSBrowser, selectCellWith: string, inColumn: number): boolean;
    // instance method
    browserDraggingImageForRowsWithIndexesInColumnWithEventOffset?(_: NSBrowser, draggingImageForRowsWith: NSIndexSet, inColumn: number, with_: NSEvent, offset: NSPoint): NSImage;
    // instance method
    browserCanDragRowsWithIndexesInColumnWithEvent?(_: NSBrowser, canDragRowsWith: NSIndexSet, inColumn: number, with_: NSEvent): boolean;
    // instance method
    browserWriteRowsWithIndexesInColumnToPasteboard?(_: NSBrowser, writeRowsWith: NSIndexSet, inColumn: number, to: NSPasteboard): boolean;
    // instance method
    browserAcceptDropAtRowColumnDropOperation?(_: NSBrowser, acceptDrop: NSDraggingInfo, atRow: number, column: number, dropOperation: NSBrowser.DropOperation): boolean;
    // instance method
    browserChildOfItem?(_: NSBrowser, child: number, ofItem?: any): any;
    // instance method
    browserDidChangeLastColumnToColumn?(_: NSBrowser, didChangeLastColumn: number, toColumn: number): void;
    // instance method
    browserHeaderViewControllerForItem?(_: NSBrowser, headerViewControllerForItem?: any): NSViewController;
    // instance method
    browserHeightOfRowInColumn?(_: NSBrowser, heightOfRow: number, inColumn: number): number;
    // instance method
    browserIsColumnValid?(_: NSBrowser, isColumnValid: number): boolean;
    // instance method
    browserIsLeafItem?(_: NSBrowser, isLeafItem?: any): boolean;
    // instance method
    browserNumberOfChildrenOfItem?(_: NSBrowser, numberOfChildrenOfItem?: any): number;
    // instance method
    browserNumberOfRowsInColumn?(_: NSBrowser, numberOfRowsInColumn: number): number;
    // instance method
    browserObjectValueForItem?(_: NSBrowser, objectValueForItem?: any): any;
    // instance method
    browserPreviewViewControllerForLeafItem?(_: NSBrowser, previewViewControllerForLeafItem: any): NSViewController;
    // instance method
    browserSelectionIndexesForProposedSelectionInColumn?(_: NSBrowser, selectionIndexesForProposedSelection: NSIndexSet, inColumn: number): NSIndexSet;
    // instance method
    browserSelectRowInColumn?(_: NSBrowser, selectRow: number, inColumn: number): boolean;
    // instance method
    browserSetObjectValueForItem?(_: NSBrowser, setObjectValue?: any, forItem?: any): void;
    // instance method
    browserShouldEditItem?(_: NSBrowser, shouldEditItem?: any): boolean;
    // instance method
    browserShouldShowCellExpansionForRowColumn?(_: NSBrowser, shouldShowCellExpansionForRow: number, column: number): boolean;
    // instance method
    browserShouldSizeColumnForUserResizeToWidth?(_: NSBrowser, shouldSizeColumn: number, forUserResize: boolean, toWidth: number): number;
    // instance method
    browserSizeToFitWidthOfColumn?(_: NSBrowser, sizeToFitWidthOfColumn: number): number;
    // instance method
    browserTitleOfColumn?(_: NSBrowser, titleOfColumn: number): string;
    // instance method
    browserTypeSelectStringForRowInColumn?(_: NSBrowser, typeSelectStringForRow: number, inColumn: number): string;
    // instance method
    browserValidateDropProposedRowColumnDropOperation?(_: NSBrowser, validateDrop: NSDraggingInfo, proposedRow: number, column: number, dropOperation: NSBrowser.DropOperation): NSDragOperation;
    // instance method
    browserWillDisplayCellAtRowColumn?(_: NSBrowser, willDisplayCell: any, atRow: number, column: number): void;
    // instance method
    browserColumnConfigurationDidChange?(_: NSNotification): void;
    // instance method
    browserDidScroll?(_: NSBrowser): void;
    // instance method
    browserWillScroll?(_: NSBrowser): void;
    // instance method
    rootItemForBrowser?(for_: NSBrowser): any;
  }

  // interface
  class NSButton extends NSControl {
    // compoundStaticMethods
    static checkboxWithTitleTargetAction(checkboxWithTitle: string, target?: any, action?: string): NSButton;
    // compoundStaticMethods
    static radioButtonWithTitleTargetAction(radioButtonWithTitle: string, target?: any, action?: string): NSButton;
    // ownInstanceProperties
    allowsMixedState: boolean;
    setAllowsMixedState(_: boolean)
    // ownInstanceProperties
    alternateImage: NSImage;
    setAlternateImage(_: NSImage)
    // ownInstanceProperties
    alternateTitle: string;
    setAlternateTitle(_: string)
    // ownInstanceProperties
    attributedAlternateTitle: NSAttributedString;
    setAttributedAlternateTitle(_: NSAttributedString)
    // ownInstanceProperties
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString)
    // ownInstanceProperties
    bezelColor: NSColor;
    setBezelColor(_: NSColor)
    // ownInstanceProperties
    bezelStyle: NSButton.BezelStyle;
    setBezelStyle(_: NSButton.BezelStyle)
    // ownInstanceProperties
    isBordered: boolean;
    setBordered(_: boolean)
    // ownInstanceProperties
    contentTintColor: NSColor;
    setContentTintColor(_: NSColor)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    imageHugsTitle: boolean;
    setImageHugsTitle(_: boolean)
    // ownInstanceProperties
    imagePosition: NSControl.ImagePosition;
    setImagePosition(_: NSControl.ImagePosition)
    // ownInstanceProperties
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling)
    // ownInstanceProperties
    keyEquivalent: string;
    setKeyEquivalent(_: string)
    // ownInstanceProperties
    keyEquivalentModifierMask: NSEvent.ModifierFlags;
    setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags)
    // ownInstanceProperties
    maxAcceleratorLevel: number;
    setMaxAcceleratorLevel(_: number)
    // ownInstanceProperties
    showsBorderOnlyWhileMouseInside: boolean;
    setShowsBorderOnlyWhileMouseInside(_: boolean)
    // ownInstanceProperties
    sound: NSSound;
    setSound(_: NSSound)
    // ownInstanceProperties
    isSpringLoaded: boolean;
    setSpringLoaded(_: boolean)
    // ownInstanceProperties
    state: number;
    setState(_: number)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    isTransparent: boolean;
    setTransparent(_: boolean)
    // compoundInstanceMethods
    getPeriodicDelayInterval(_: number, interval: number): void;
    // compoundInstanceMethods
    highlight(_: boolean): void;
    // compoundInstanceMethods
    setButtonType(_: NSButton.ButtonType): void;
    // compoundInstanceMethods
    setNextState(): void;
    // compoundInstanceMethods
    setPeriodicDelayInterval(_: number, interval: number): void;
  }

  // interface
  class NSButtonCell extends NSActionCell {
    // ownInstanceProperties
    alternateImage: NSImage;
    setAlternateImage(_: NSImage)
    // ownInstanceProperties
    alternateTitle: string;
    setAlternateTitle(_: string)
    // ownInstanceProperties
    attributedAlternateTitle: NSAttributedString;
    setAttributedAlternateTitle(_: NSAttributedString)
    // ownInstanceProperties
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    bezelStyle: NSButton.BezelStyle;
    setBezelStyle(_: NSButton.BezelStyle)
    // ownInstanceProperties
    highlightsBy: NSCell.StyleMask;
    setHighlightsBy(_: NSCell.StyleMask)
    // ownInstanceProperties
    imageDimsWhenDisabled: boolean;
    setImageDimsWhenDisabled(_: boolean)
    // ownInstanceProperties
    imagePosition: NSControl.ImagePosition;
    setImagePosition(_: NSControl.ImagePosition)
    // ownInstanceProperties
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling)
    // ownInstanceProperties
    //   keyEquivalent: string;
    setKeyEquivalent(_: string)
    // ownInstanceProperties
    keyEquivalentModifierMask: NSEvent.ModifierFlags;
    setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags)
    // ownInstanceProperties
    showsBorderOnlyWhileMouseInside: boolean;
    setShowsBorderOnlyWhileMouseInside(_: boolean)
    // ownInstanceProperties
    showsStateBy: NSCell.StyleMask;
    setShowsStateBy(_: NSCell.StyleMask)
    // ownInstanceProperties
    sound: NSSound;
    setSound(_: NSSound)
    // ownInstanceProperties
    isTransparent: boolean;
    setTransparent(_: boolean)
    // compoundInstanceMethods
    drawBezelWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawImageWithFrameInView(_: NSImage, withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawTitleWithFrameInView(_: NSAttributedString, withFrame: CGRect, in_: NSView): CGRect;
    // compoundInstanceMethods
    mouseEntered(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseExited(with_: NSEvent): void;
    // compoundInstanceMethods
    setButtonType(_: NSButton.ButtonType): void;
    // compoundInstanceMethods
    setPeriodicDelayInterval(_: number, interval: number): void;
  }

  // interface
  class NSButtonTouchBarItem extends NSTouchBarItem {
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    bezelColor: NSColor;
    setBezelColor(_: NSColor)
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
  }

  // interface
  class NSCIImageRep extends NSImageRep {
    // ownInstanceProperties
    CIImage: CIImage;
    // compoundInstanceMethods
    static createWithCIImage(CIImage: CIImage): NSCIImageRep;
  }

  // interface
  class NSCandidateListTouchBarItem<CandidateType> extends NSTouchBarItem {
    // ownInstanceProperties
    allowsCollapsing: boolean;
    setAllowsCollapsing(_: boolean)
    // ownInstanceProperties
    allowsTextInputContextCandidates: boolean;
    setAllowsTextInputContextCandidates(_: boolean)
    // ownInstanceProperties
    attributedStringForCandidate: (p1: CandidateType, p2: number) => NSAttributedString;
    setAttributedStringForCandidate(_: (p1: CandidateType, p2: number) => NSAttributedString)
    // ownInstanceProperties
    isCandidateListVisible: boolean;
    // ownInstanceProperties
    candidates: CandidateType[];
    // ownInstanceProperties
    client: NSView;
    setClient(_: NSView)
    // ownInstanceProperties
    isCollapsed: boolean;
    setCollapsed(_: boolean)
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    delegate: NSCandidateListTouchBarItemDelegate;
    setDelegate(_: NSCandidateListTouchBarItemDelegate)
    // compoundInstanceMethods
    setCandidatesForSelectedRangeInString(_: CandidateType[], forSelectedRange: NSRange, in_?: string): void;
    // compoundInstanceMethods
    updateWithInsertionPointVisibility(withInsertionPointVisibility: boolean): void;
  }

  interface NSCandidateListTouchBarItemDelegate extends NSObject {
    // instance method
    candidateListTouchBarItemBeginSelectingCandidateAtIndex?(_: NSCandidateListTouchBarItem<any>, beginSelectingCandidateAt: number): void;
    // instance method
    candidateListTouchBarItemChangeSelectionFromCandidateAtIndexToIndex?(_: NSCandidateListTouchBarItem<any>, changeSelectionFromCandidateAt: number, to: number): void;
    // instance method
    candidateListTouchBarItemEndSelectingCandidateAtIndex?(_: NSCandidateListTouchBarItem<any>, endSelectingCandidateAt: number): void;
    // instance method
    candidateListTouchBarItemChangedCandidateListVisibility?(_: NSCandidateListTouchBarItem<any>, changedCandidateListVisibility: boolean): void;
  }

  // interface
  class NSCell extends NSObject implements NSUserInterfaceItemIdentification {
    // ownInstanceProperties
    acceptsFirstResponder: boolean;
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    alignment: NSTextAlignment;
    setAlignment(_: NSTextAlignment)
    // ownInstanceProperties
    allowsEditingTextAttributes: boolean;
    setAllowsEditingTextAttributes(_: boolean)
    // ownInstanceProperties
    allowsMixedState: boolean;
    setAllowsMixedState(_: boolean)
    // ownInstanceProperties
    allowsUndo: boolean;
    setAllowsUndo(_: boolean)
    // ownInstanceProperties
    attributedStringValue: NSAttributedString;
    setAttributedStringValue(_: NSAttributedString)
    // ownInstanceProperties
    backgroundStyle: NSView.BackgroundStyle;
    setBackgroundStyle(_: NSView.BackgroundStyle)
    // ownInstanceProperties
    baseWritingDirection: NSWritingDirection;
    setBaseWritingDirection(_: NSWritingDirection)
    // ownInstanceProperties
    isBezeled: boolean;
    setBezeled(_: boolean)
    // ownInstanceProperties
    isBordered: boolean;
    setBordered(_: boolean)
    // ownInstanceProperties
    cellSize: CGSize;
    // ownInstanceProperties
    isContinuous: boolean;
    setContinuous(_: boolean)
    // ownInstanceProperties
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize)
    // ownInstanceProperties
    controlView: NSView;
    setControlView(_: NSView)
    // ownInstanceProperties
    doubleValue: number;
    setDoubleValue(_: number)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    floatValue: number;
    setFloatValue(_: number)
    // ownInstanceProperties
    focusRingType: NSFocusRingType;
    setFocusRingType(_: NSFocusRingType)
    // ownInstanceProperties
    font: NSFont;
    setFont(_: NSFont)
    // ownInstanceProperties
    formatter: Formatter;
    setFormatter(_: Formatter)
    // ownInstanceProperties
    hasValidObjectValue: boolean;
    // ownInstanceProperties
    isHighlighted: boolean;
    setHighlighted(_: boolean)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    importsGraphics: boolean;
    setImportsGraphics(_: boolean)
    // ownInstanceProperties
    intValue: number;
    setIntValue(_: number)
    // ownInstanceProperties
    integerValue: number;
    setIntegerValue(_: number)
    // ownInstanceProperties
    interiorBackgroundStyle: NSView.BackgroundStyle;
    // ownInstanceProperties
    keyEquivalent: string;
    // ownInstanceProperties
    lineBreakMode: NSLineBreakMode;
    setLineBreakMode(_: NSLineBreakMode)
    // ownInstanceProperties
    menu: NSMenu;
    setMenu(_: NSMenu)
    // ownInstanceProperties
    mouseDownFlags: number;
    // ownInstanceProperties
    nextState: number;
    // ownInstanceProperties
    objectValue: any;
    setObjectValue(_: any)
    // ownInstanceProperties
    isOpaque: boolean;
    // ownInstanceProperties
    refusesFirstResponder: boolean;
    setRefusesFirstResponder(_: boolean)
    // ownInstanceProperties
    representedObject: any;
    setRepresentedObject(_: any)
    // ownInstanceProperties
    isScrollable: boolean;
    setScrollable(_: boolean)
    // ownInstanceProperties
    isSelectable: boolean;
    setSelectable(_: boolean)
    // ownInstanceProperties
    sendsActionOnEndEditing: boolean;
    setSendsActionOnEndEditing(_: boolean)
    // ownInstanceProperties
    showsFirstResponder: boolean;
    setShowsFirstResponder(_: boolean)
    // ownInstanceProperties
    state: number;
    setState(_: number)
    // ownInstanceProperties
    stringValue: string;
    setStringValue(_: string)
    // ownInstanceProperties
    tag: number;
    setTag(_: number)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    truncatesLastVisibleLine: boolean;
    setTruncatesLastVisibleLine(_: boolean)
    // ownInstanceProperties
    type: NSCell.CellType;
    setType(_: NSCell.CellType)
    // ownInstanceProperties
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection)
    // ownInstanceProperties
    usesSingleLineMode: boolean;
    setUsesSingleLineMode(_: boolean)
    // ownInstanceProperties
    wantsNotificationForMarkedText: boolean;
    // ownInstanceProperties
    wraps: boolean;
    setWraps(_: boolean)
    // ownStaticProperties
    static defaultFocusRingType: NSFocusRingType;
    // ownStaticProperties
    static defaultMenu: NSMenu;
    // ownStaticProperties
    static prefersTrackingUntilMouseUp: boolean;
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    calcDrawInfo(_: CGRect): void;
    // compoundInstanceMethods
    cellAttribute(_: NSCell.Attribute): number;
    // compoundInstanceMethods
    cellSizeForBounds(forBounds: CGRect): CGSize;
    // compoundInstanceMethods
    compare(_: any): ComparisonResult;
    // compoundInstanceMethods
    continueTrackingAtInView(last: CGPoint, current: CGPoint, in_: NSView): boolean;
    // compoundInstanceMethods
    draggingImageComponentsWithFrameInView(withFrame: CGRect, in_: NSView): NSDraggingImageComponent[];
    // compoundInstanceMethods
    drawFocusRingMaskWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawInteriorWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawWithExpansionFrameInView(withExpansionFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawingRectForBounds(forBounds: CGRect): CGRect;
    // compoundInstanceMethods
    editWithFrameInViewEditorDelegateEvent(withFrame: CGRect, in_: NSView, editor: NSText, delegate?: any, event?: NSEvent): void;
    // compoundInstanceMethods
    endEditing(_: NSText): void;
    // compoundInstanceMethods
    expansionFrameWithFrameInView(withFrame: CGRect, in_: NSView): CGRect;
    // compoundInstanceMethods
    fieldEditorForView(for_: NSView): NSTextView;
    // compoundInstanceMethods
    focusRingMaskBoundsForFrameInView(forFrame: CGRect, in_: NSView): CGRect;
    // compoundInstanceMethods
    getPeriodicDelayInterval(_: number, interval: number): void;
    // compoundInstanceMethods
    highlightWithFrameInView(_: boolean, withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    highlightColorWithFrameInView(withFrame: CGRect, in_: NSView): NSColor;
    // compoundInstanceMethods
    hitTestForEventInRectOfView(for_: NSEvent, in_: CGRect, of: NSView): NSCell.HitResult;
    // compoundInstanceMethods
    imageRectForBounds(forBounds: CGRect): CGRect;
    // compoundInstanceMethods
    static createWithImageCell(imageCell?: NSImage): NSCell;
    // compoundInstanceMethods
    static createWithTextCell(textCell: string): NSCell;
    // compoundInstanceMethods
    menuForEventInRectOfView(for_: NSEvent, in_: CGRect, of: NSView): NSMenu;
    // compoundInstanceMethods
    performClick(_?: any): void;
    // compoundInstanceMethods
    resetCursorRectInView(_: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    selectWithFrameInViewEditorDelegateStartLength(withFrame: CGRect, in_: NSView, editor: NSText, delegate?: any, start?: number, length?: number): void;
    // compoundInstanceMethods
    sendActionOn(on: NSEvent.EventTypeMask): number;
    // compoundInstanceMethods
    setCellAttributeTo(_: NSCell.Attribute, to: number): void;
    // compoundInstanceMethods
    setNextState(): void;
    // compoundInstanceMethods
    setUpFieldEditorAttributes(_: NSText): NSText;
    // compoundInstanceMethods
    startTrackingAtInView(at: CGPoint, in_: NSView): boolean;
    // compoundInstanceMethods
    stopTrackingAtInViewMouseIsUp(last: CGPoint, current: CGPoint, in_: NSView, mouseIsUp: boolean): void;
    // compoundInstanceMethods
    takeDoubleValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeFloatValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeIntValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeIntegerValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeObjectValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeStringValueFrom(_?: any): void;
    // compoundInstanceMethods
    titleRectForBounds(forBounds: CGRect): CGRect;
    // compoundInstanceMethods
    trackMouseInRectOfViewUntilMouseUp(with_: NSEvent, in_: CGRect, of: NSView, untilMouseUp: boolean): boolean;
  }

  interface NSChangeSpelling {
    // instance method
    changeSpelling(_?: any): void;
  }

  // interface
  class NSClickGestureRecognizer extends NSGestureRecognizer {
    // ownInstanceProperties
    buttonMask: number;
    setButtonMask(_: number)
    // ownInstanceProperties
    numberOfClicksRequired: number;
    setNumberOfClicksRequired(_: number)
    // ownInstanceProperties
    numberOfTouchesRequired: number;
    setNumberOfTouchesRequired(_: number)
  }

  // interface
  class NSClipView extends NSView {
    // ownInstanceProperties
    automaticallyAdjustsContentInsets: boolean;
    setAutomaticallyAdjustsContentInsets(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    contentInsets: NSEdgeInsets;
    setContentInsets(_: NSEdgeInsets)
    // ownInstanceProperties
    documentCursor: NSCursor;
    setDocumentCursor(_: NSCursor)
    // ownInstanceProperties
    documentRect: CGRect;
    // ownInstanceProperties
    documentView: NSView;
    setDocumentView(_: NSView)
    // ownInstanceProperties
    documentVisibleRect: CGRect;
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // compoundInstanceMethods
    constrainBoundsRect(_: CGRect): CGRect;
    // compoundInstanceMethods
    scrollToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    viewBoundsChanged(_: NSNotification): void;
    // compoundInstanceMethods
    viewFrameChanged(_: NSNotification): void;
  }

  interface NSCloudSharingServiceDelegate extends NSSharingServiceDelegate {
    // instance method
    optionsForSharingServiceShareProvider?(for_: NSSharingService, share: NSItemProvider): NSSharingService.CloudKitOptions;
    // instance method
    sharingServiceDidSaveShare?(_: NSSharingService, didSave: CKShare): void;
    // instance method
    sharingServiceDidCompleteForItemsError?(_: NSSharingService, didCompleteForItems: any[], error?: NSError): void;
    // instance method
    sharingServiceDidStopSharing?(_: NSSharingService, didStopSharing: CKShare): void;
  }

  interface NSCloudSharingValidation extends NSObject {
    // instance method
    cloudShareForUserInterfaceItem(for_: NSValidatedUserInterfaceItem): CKShare;
  }

  // interface
  class NSCollectionLayoutAnchor extends NSObject {
    // compoundStaticMethods
    static layoutAnchorWithEdges(edges: NSDirectionalRectEdge): NSCollectionLayoutAnchor;
    // compoundStaticMethods
    static layoutAnchorWithEdgesAbsoluteOffset(edges: NSDirectionalRectEdge, absoluteOffset: CGPoint): NSCollectionLayoutAnchor;
    // compoundStaticMethods
    static layoutAnchorWithEdgesFractionalOffset(edges: NSDirectionalRectEdge, fractionalOffset: CGPoint): NSCollectionLayoutAnchor;
    // ownInstanceProperties
    edges: NSDirectionalRectEdge;
    // ownInstanceProperties
    isAbsoluteOffset: boolean;
    // ownInstanceProperties
    isFractionalOffset: boolean;
    // ownInstanceProperties
    offset: CGPoint;
  }

  // interface
  class NSCollectionLayoutBoundarySupplementaryItem extends NSCollectionLayoutSupplementaryItem {
    // compoundStaticMethods
    static boundarySupplementaryItemWithLayoutSizeElementKindAlignment(layoutSize: NSCollectionLayoutSize, elementKind: string, alignment: NSRectAlignment): NSCollectionLayoutBoundarySupplementaryItem;
    // compoundStaticMethods
    static boundarySupplementaryItemWithLayoutSizeElementKindAlignmentAbsoluteOffset(layoutSize: NSCollectionLayoutSize, elementKind: string, alignment: NSRectAlignment, absoluteOffset: CGPoint): NSCollectionLayoutBoundarySupplementaryItem;
    // compoundStaticMethods
    //  static itemWithLayoutSize(layoutSize: NSCollectionLayoutSize): NSCollectionLayoutBoundarySupplementaryItem;
    // compoundStaticMethods
    //  static itemWithLayoutSizeSupplementaryItems(layoutSize: NSCollectionLayoutSize, supplementaryItems: NSCollectionLayoutSupplementaryItem[]): NSCollectionLayoutBoundarySupplementaryItem;
    // compoundStaticMethods
    //  static supplementaryItemWithLayoutSizeElementKindContainerAnchor(layoutSize: NSCollectionLayoutSize, elementKind: string, containerAnchor: NSCollectionLayoutAnchor): NSCollectionLayoutBoundarySupplementaryItem;
    // compoundStaticMethods
    //  static supplementaryItemWithLayoutSizeElementKindContainerAnchorItemAnchor(layoutSize: NSCollectionLayoutSize, elementKind: string, containerAnchor: NSCollectionLayoutAnchor, itemAnchor: NSCollectionLayoutAnchor): NSCollectionLayoutBoundarySupplementaryItem;
    // ownInstanceProperties
    alignment: NSRectAlignment;
    // ownInstanceProperties
    extendsBoundary: boolean;
    setExtendsBoundary(_: boolean)
    // ownInstanceProperties
    offset: CGPoint;
    // ownInstanceProperties
    pinToVisibleBounds: boolean;
    setPinToVisibleBounds(_: boolean)
  }

  interface NSCollectionLayoutContainer extends NSObject {
    contentInsets: NSDirectionalEdgeInsets;
    contentSize: CGSize;
    effectiveContentInsets: NSDirectionalEdgeInsets;
    effectiveContentSize: CGSize;
  }

  // interface
  class NSCollectionLayoutDecorationItem extends NSCollectionLayoutItem {
    // compoundStaticMethods
    static backgroundDecorationItemWithElementKind(elementKind: string): NSCollectionLayoutDecorationItem;
    // compoundStaticMethods
    //  static itemWithLayoutSize(layoutSize: NSCollectionLayoutSize): NSCollectionLayoutDecorationItem;
    // compoundStaticMethods
    //  static itemWithLayoutSizeSupplementaryItems(layoutSize: NSCollectionLayoutSize, supplementaryItems: NSCollectionLayoutSupplementaryItem[]): NSCollectionLayoutDecorationItem;
    // ownInstanceProperties
    elementKind: string;
    // ownInstanceProperties
    zIndex: number;
    setZIndex(_: number)
  }

  // interface
  class NSCollectionLayoutDimension extends NSObject {
    // compoundStaticMethods
    static absoluteDimension(_: number): NSCollectionLayoutDimension;
    // compoundStaticMethods
    static estimatedDimension(_: number): NSCollectionLayoutDimension;
    // compoundStaticMethods
    static fractionalHeightDimension(_: number): NSCollectionLayoutDimension;
    // compoundStaticMethods
    static fractionalWidthDimension(_: number): NSCollectionLayoutDimension;
    // ownInstanceProperties
    dimension: number;
    // ownInstanceProperties
    isAbsolute: boolean;
    // ownInstanceProperties
    isEstimated: boolean;
    // ownInstanceProperties
    isFractionalHeight: boolean;
    // ownInstanceProperties
    isFractionalWidth: boolean;
  }

  // interface
  class NSCollectionLayoutEdgeSpacing extends NSObject {
    // compoundStaticMethods
    static spacingForLeadingTopTrailingBottom(leading?: NSCollectionLayoutSpacing, top?: NSCollectionLayoutSpacing, trailing?: NSCollectionLayoutSpacing, bottom?: NSCollectionLayoutSpacing): NSCollectionLayoutEdgeSpacing;
    // ownInstanceProperties
    bottom: NSCollectionLayoutSpacing;
    // ownInstanceProperties
    leading: NSCollectionLayoutSpacing;
    // ownInstanceProperties
    top: NSCollectionLayoutSpacing;
    // ownInstanceProperties
    trailing: NSCollectionLayoutSpacing;
  }

  interface NSCollectionLayoutEnvironment extends NSObject {
    container: NSCollectionLayoutContainer;
  }

  // interface
  class NSCollectionLayoutGroup extends NSCollectionLayoutItem {
    // compoundStaticMethods
    static customWithLayoutSizeItemProvider(layoutSize: NSCollectionLayoutSize, itemProvider: (p1: NSCollectionLayoutEnvironment) => NSCollectionLayoutGroupCustomItem[]): NSCollectionLayoutGroup;
    // compoundStaticMethods
    static horizontalGroupWithLayoutSizeSubitemCount(layoutSize: NSCollectionLayoutSize, subitem: NSCollectionLayoutItem, count: number): NSCollectionLayoutGroup;
    // compoundStaticMethods
    static horizontalGroupWithLayoutSizeSubitems(layoutSize: NSCollectionLayoutSize, subitems: NSCollectionLayoutItem[]): NSCollectionLayoutGroup;
    // compoundStaticMethods
    //  static itemWithLayoutSize(layoutSize: NSCollectionLayoutSize): NSCollectionLayoutGroup;
    // compoundStaticMethods
    //  static itemWithLayoutSizeSupplementaryItems(layoutSize: NSCollectionLayoutSize, supplementaryItems: NSCollectionLayoutSupplementaryItem[]): NSCollectionLayoutGroup;
    // compoundStaticMethods
    static verticalGroupWithLayoutSizeSubitemCount(layoutSize: NSCollectionLayoutSize, subitem: NSCollectionLayoutItem, count: number): NSCollectionLayoutGroup;
    // compoundStaticMethods
    static verticalGroupWithLayoutSizeSubitems(layoutSize: NSCollectionLayoutSize, subitems: NSCollectionLayoutItem[]): NSCollectionLayoutGroup;
    // ownInstanceProperties
    interItemSpacing: NSCollectionLayoutSpacing;
    setInterItemSpacing(_: NSCollectionLayoutSpacing)
    // ownInstanceProperties
    subitems: NSCollectionLayoutItem[];
    // ownInstanceProperties
    //   supplementaryItems: NSCollectionLayoutSupplementaryItem[];
    setSupplementaryItems(_: NSCollectionLayoutSupplementaryItem[])
    // compoundInstanceMethods
    visualDescription(): string;
  }

  // interface
  class NSCollectionLayoutGroupCustomItem extends NSObject {
    // compoundStaticMethods
    static customItemWithFrame(frame: CGRect): NSCollectionLayoutGroupCustomItem;
    // compoundStaticMethods
    static customItemWithFrameZIndex(frame: CGRect, zIndex: number): NSCollectionLayoutGroupCustomItem;
    // ownInstanceProperties
    frame: CGRect;
    // ownInstanceProperties
    zIndex: number;
  }

  // interface
  class NSCollectionLayoutItem extends NSObject {
    // compoundStaticMethods
    static itemWithLayoutSize(layoutSize: NSCollectionLayoutSize): NSCollectionLayoutItem;
    // compoundStaticMethods
    static itemWithLayoutSizeSupplementaryItems(layoutSize: NSCollectionLayoutSize, supplementaryItems: NSCollectionLayoutSupplementaryItem[]): NSCollectionLayoutItem;
    // ownInstanceProperties
    contentInsets: NSDirectionalEdgeInsets;
    setContentInsets(_: NSDirectionalEdgeInsets)
    // ownInstanceProperties
    edgeSpacing: NSCollectionLayoutEdgeSpacing;
    setEdgeSpacing(_: NSCollectionLayoutEdgeSpacing)
    // ownInstanceProperties
    layoutSize: NSCollectionLayoutSize;
    // ownInstanceProperties
    supplementaryItems: NSCollectionLayoutSupplementaryItem[];
  }

  // interface
  class NSCollectionLayoutSection extends NSObject {
    // compoundStaticMethods
    static sectionWithGroup(group: NSCollectionLayoutGroup): NSCollectionLayoutSection;
    // ownInstanceProperties
    boundarySupplementaryItems: NSCollectionLayoutBoundarySupplementaryItem[];
    setBoundarySupplementaryItems(_: NSCollectionLayoutBoundarySupplementaryItem[])
    // ownInstanceProperties
    contentInsets: NSDirectionalEdgeInsets;
    setContentInsets(_: NSDirectionalEdgeInsets)
    // ownInstanceProperties
    decorationItems: NSCollectionLayoutDecorationItem[];
    setDecorationItems(_: NSCollectionLayoutDecorationItem[])
    // ownInstanceProperties
    interGroupSpacing: number;
    setInterGroupSpacing(_: number)
    // ownInstanceProperties
    orthogonalScrollingBehavior: NSCollectionLayoutSectionOrthogonalScrollingBehavior;
    setOrthogonalScrollingBehavior(_: NSCollectionLayoutSectionOrthogonalScrollingBehavior)
    // ownInstanceProperties
    supplementariesFollowContentInsets: boolean;
    setSupplementariesFollowContentInsets(_: boolean)
    // ownInstanceProperties
    visibleItemsInvalidationHandler: (p1: NSCollectionLayoutVisibleItem[], p2: CGPoint, p3: NSCollectionLayoutEnvironment) => void;
    setVisibleItemsInvalidationHandler(_: (p1: NSCollectionLayoutVisibleItem[], p2: CGPoint, p3: NSCollectionLayoutEnvironment) => void)
  }

  // interface
  class NSCollectionLayoutSize extends NSObject {
    // compoundStaticMethods
    static sizeWithWidthDimensionHeightDimension(widthDimension: NSCollectionLayoutDimension, heightDimension: NSCollectionLayoutDimension): NSCollectionLayoutSize;
    // ownInstanceProperties
    heightDimension: NSCollectionLayoutDimension;
    // ownInstanceProperties
    widthDimension: NSCollectionLayoutDimension;
  }

  // interface
  class NSCollectionLayoutSpacing extends NSObject {
    // compoundStaticMethods
    static fixedSpacing(_: number): NSCollectionLayoutSpacing;
    // compoundStaticMethods
    static flexibleSpacing(_: number): NSCollectionLayoutSpacing;
    // ownInstanceProperties
    isFixedSpacing: boolean;
    // ownInstanceProperties
    isFlexibleSpacing: boolean;
    // ownInstanceProperties
    spacing: number;
  }

  // interface
  class NSCollectionLayoutSupplementaryItem extends NSCollectionLayoutItem {
    // compoundStaticMethods
    //  static itemWithLayoutSize(layoutSize: NSCollectionLayoutSize): NSCollectionLayoutSupplementaryItem;
    // compoundStaticMethods
    //  static itemWithLayoutSizeSupplementaryItems(layoutSize: NSCollectionLayoutSize, supplementaryItems: NSCollectionLayoutSupplementaryItem[]): NSCollectionLayoutSupplementaryItem;
    // compoundStaticMethods
    static supplementaryItemWithLayoutSizeElementKindContainerAnchor(layoutSize: NSCollectionLayoutSize, elementKind: string, containerAnchor: NSCollectionLayoutAnchor): NSCollectionLayoutSupplementaryItem;
    // compoundStaticMethods
    static supplementaryItemWithLayoutSizeElementKindContainerAnchorItemAnchor(layoutSize: NSCollectionLayoutSize, elementKind: string, containerAnchor: NSCollectionLayoutAnchor, itemAnchor: NSCollectionLayoutAnchor): NSCollectionLayoutSupplementaryItem;
    // ownInstanceProperties
    containerAnchor: NSCollectionLayoutAnchor;
    // ownInstanceProperties
    elementKind: string;
    // ownInstanceProperties
    itemAnchor: NSCollectionLayoutAnchor;
    // ownInstanceProperties
    zIndex: number;
    setZIndex(_: number)
  }

  interface NSCollectionLayoutVisibleItem extends NSObject {
    alpha: number;
    setAlpha(_: number)
    bounds: CGRect;
    center: CGPoint;
    setCenter(_: CGPoint)
    frame: CGRect;
    isHidden: boolean;
    setHidden(_: boolean)
    indexPath: NSIndexPath;
    name: string;
    representedElementCategory: NSCollectionElementCategory;
    representedElementKind: string;
    zIndex: number;
    setZIndex(_: number)
  }

  // interface
  class NSCollectionView extends NSView {
    // ownInstanceProperties
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean)
    // ownInstanceProperties
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean)
    // ownInstanceProperties
    backgroundColors: NSColor[];
    setBackgroundColors(_: NSColor[])
    // ownInstanceProperties
    backgroundView: NSView;
    setBackgroundView(_: NSView)
    // ownInstanceProperties
    backgroundViewScrollsWithContent: boolean;
    setBackgroundViewScrollsWithContent(_: boolean)
    // ownInstanceProperties
    collectionViewLayout: NSCollectionViewLayout;
    setCollectionViewLayout(_: NSCollectionViewLayout)
    // ownInstanceProperties
    content: any[];
    setContent(_: any[])
    // ownInstanceProperties
    dataSource: NSCollectionViewDataSource;
    setDataSource(_: NSCollectionViewDataSource)
    // ownInstanceProperties
    delegate: NSCollectionViewDelegate;
    setDelegate(_: NSCollectionViewDelegate)
    // ownInstanceProperties
    isFirstResponder: boolean;
    // ownInstanceProperties
    numberOfSections: number;
    // ownInstanceProperties
    prefetchDataSource: NSCollectionViewPrefetching;
    setPrefetchDataSource(_: NSCollectionViewPrefetching)
    // ownInstanceProperties
    isSelectable: boolean;
    setSelectable(_: boolean)
    // ownInstanceProperties
    selectionIndexPaths: NSSet<IndexPath>;
    setSelectionIndexPaths(_: NSSet<IndexPath>)
    // ownInstanceProperties
    selectionIndexes: NSIndexSet;
    setSelectionIndexes(_: NSIndexSet)
    // compoundInstanceMethods
    deleteItemsWithAt(at: NSSet<IndexPath>): void;
    // compoundInstanceMethods
    deleteSections(_: NSIndexSet): void;
    // compoundInstanceMethods
    deselectAll(_?: any): void;
    // compoundInstanceMethods
    deselectItemsWithAt(at: NSSet<IndexPath>): void;
    // compoundInstanceMethods
    draggingImageForItemsWithAtWithOffset(at: NSSet<IndexPath>, with_: NSEvent, offset: NSPoint): NSImage;
    // compoundInstanceMethods
    draggingImageForItemsAtIndexesWithEventOffset(at: NSIndexSet, with_: NSEvent, offset: NSPoint): NSImage;
    // compoundInstanceMethods
    frameForItemAtIndex(at: number): CGRect;
    // compoundInstanceMethods
    frameForItemAtIndexWithNumberOfItems(at: number, withNumberOfItems: number): CGRect;
    // compoundInstanceMethods
    indexPathForItem(for_: NSCollectionViewItem): NSIndexPath;
    // compoundInstanceMethods
    indexPathForItemAtPoint(at: CGPoint): NSIndexPath;
    // compoundInstanceMethods
    indexPathsForVisibleItems(): NSSet<IndexPath>;
    // compoundInstanceMethods
    indexPathsForVisibleSupplementaryElementsOfKind(ofKind: string): NSSet<IndexPath>;
    // compoundInstanceMethods
    insertItemsWithAt(at: NSSet<IndexPath>): void;
    // compoundInstanceMethods
    insertSections(_: NSIndexSet): void;
    // compoundInstanceMethods
    itemAtIndex(at: number): NSCollectionViewItem;
    // compoundInstanceMethods
    itemAtIndexPath(at: NSIndexPath): NSCollectionViewItem;
    // compoundInstanceMethods
    layoutAttributesForItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    layoutAttributesForSupplementaryElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    makeItemWithIdentifierForIndexPath(withIdentifier: string, for_: NSIndexPath): NSCollectionViewItem;
    // compoundInstanceMethods
    makeSupplementaryViewOfKindWithIdentifierForIndexPath(ofKind: string, withIdentifier: string, for_: NSIndexPath): NSView;
    // compoundInstanceMethods
    moveItemAtIndexPathToIndexPath(at: NSIndexPath, to: NSIndexPath): void;
    // compoundInstanceMethods
    moveSectionToSection(_: number, toSection: number): void;
    // compoundInstanceMethods
    numberOfItemsInSection(inSection: number): number;
    // compoundInstanceMethods
    performBatchUpdatesWithCompletionHandler(_?: () => void, completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    registerClassForItemWithIdentifier(_?: typeof NSObject, forItemWithIdentifier?: string): void;
    // compoundInstanceMethods
    registerClassForSupplementaryViewOfKindWithIdentifier(_?: typeof NSObject, forSupplementaryViewOfKind?: string, withIdentifier?: string): void;
    // compoundInstanceMethods
    registerNibForItemWithIdentifier(_?: NSNib, forItemWithIdentifier?: string): void;
    // compoundInstanceMethods
    registerNibForSupplementaryViewOfKindWithIdentifier(_?: NSNib, forSupplementaryViewOfKind?: string, withIdentifier?: string): void;
    // compoundInstanceMethods
    reloadData(): void;
    // compoundInstanceMethods
    reloadItemsWithAt(at: NSSet<IndexPath>): void;
    // compoundInstanceMethods
    reloadSections(_: NSIndexSet): void;
    // compoundInstanceMethods
    scrollToItemsWithAtScrollPosition(at: NSSet<IndexPath>, scrollPosition: NSCollectionView.ScrollPosition): void;
    // compoundInstanceMethods
    selectItemsWithAtScrollPosition(at: NSSet<IndexPath>, scrollPosition: NSCollectionView.ScrollPosition): void;
    // compoundInstanceMethods
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
    // compoundInstanceMethods
    supplementaryViewForElementKindAtIndexPath(forElementKind: string, at: NSIndexPath): NSView;
    // compoundInstanceMethods
    toggleSectionCollapse(_: any): void;
    // compoundInstanceMethods
    visibleItems(): NSCollectionViewItem[];
    // compoundInstanceMethods
    visibleSupplementaryViewsOfKind(ofKind: string): NSView[];
  }

  // interface
  class NSCollectionViewCompositionalLayout extends NSCollectionViewLayout {
    // ownInstanceProperties
    configuration: NSCollectionViewCompositionalLayoutConfiguration;
    setConfiguration(_: NSCollectionViewCompositionalLayoutConfiguration)
    // compoundInstanceMethods
    static createWithSection(section: NSCollectionLayoutSection): NSCollectionViewCompositionalLayout;
    // compoundInstanceMethods
    static createWithSectionConfiguration(section: NSCollectionLayoutSection, configuration: NSCollectionViewCompositionalLayoutConfiguration): NSCollectionViewCompositionalLayout;
    // compoundInstanceMethods
    static createWithSectionProvider(sectionProvider: (p1: number, p2: NSCollectionLayoutEnvironment) => NSCollectionLayoutSection): NSCollectionViewCompositionalLayout;
    // compoundInstanceMethods
    static createWithSectionProviderConfiguration(sectionProvider: (p1: number, p2: NSCollectionLayoutEnvironment) => NSCollectionLayoutSection, configuration: NSCollectionViewCompositionalLayoutConfiguration): NSCollectionViewCompositionalLayout;
  }

  // interface
  class NSCollectionViewCompositionalLayoutConfiguration extends NSObject {
    // ownInstanceProperties
    boundarySupplementaryItems: NSCollectionLayoutBoundarySupplementaryItem[];
    setBoundarySupplementaryItems(_: NSCollectionLayoutBoundarySupplementaryItem[])
    // ownInstanceProperties
    interSectionSpacing: number;
    setInterSectionSpacing(_: number)
    // ownInstanceProperties
    scrollDirection: NSCollectionView.ScrollDirection;
    setScrollDirection(_: NSCollectionView.ScrollDirection)
  }

  interface NSCollectionViewDataSource extends NSObject {
    // instance method
    collectionViewItemForRepresentedObjectAtIndexPath(_: NSCollectionView, itemForRepresentedObjectAt: NSIndexPath): NSCollectionViewItem;
    // instance method
    collectionViewViewForSupplementaryElementOfKindAtIndexPath?(_: NSCollectionView, viewForSupplementaryElementOfKind: string, at: NSIndexPath): NSView;
    // instance method
    collectionViewNumberOfItemsInSection(_: NSCollectionView, numberOfItemsInSection: number): number;
    // instance method
    numberOfSectionsInCollectionView?(in_: NSCollectionView): number;
  }

  interface NSCollectionViewDelegate extends NSObject {
    // instance method
    collectionViewCanDragItemsAtWith?(_: NSCollectionView, canDragItemsAt: NSSet<IndexPath>, with_: NSEvent): boolean;
    // instance method
    collectionViewCanDragItemsAtIndexesWithEvent?(_: NSCollectionView, canDragItemsAt: NSIndexSet, with_: NSEvent): boolean;
    // instance method
    collectionViewWriteItemsAtTo?(_: NSCollectionView, writeItemsAt: NSSet<IndexPath>, to: NSPasteboard): boolean;
    // instance method
    collectionViewWriteItemsAtIndexesToPasteboard?(_: NSCollectionView, writeItemsAt: NSIndexSet, to: NSPasteboard): boolean;
    // instance method
    collectionViewDraggingImageForItemsAtWithOffset?(_: NSCollectionView, draggingImageForItemsAt: NSSet<IndexPath>, with_: NSEvent, offset: NSPoint): NSImage;
    // instance method
    collectionViewDraggingImageForItemsAtIndexesWithEventOffset?(_: NSCollectionView, draggingImageForItemsAt: NSIndexSet, with_: NSEvent, offset: NSPoint): NSImage;
    // instance method
    collectionViewPasteboardWriterForItemAtIndexPath?(_: NSCollectionView, pasteboardWriterForItemAt: NSIndexPath): NSPasteboardWriting;
    // instance method
    collectionViewPasteboardWriterForItemAtIndex?(_: NSCollectionView, pasteboardWriterForItemAt: number): NSPasteboardWriting;
    // instance method
    collectionViewDraggingSessionWillBeginAtForItemsAt?(_: NSCollectionView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItemsAt: NSSet<IndexPath>): void;
    // instance method
    collectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes?(_: NSCollectionView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItemsAt: NSIndexSet): void;
    // instance method
    collectionViewDraggingSessionEndedAtPointDragOperation?(_: NSCollectionView, draggingSession: NSDraggingSession, endedAt: CGPoint, dragOperation: NSDragOperation): void;
    // instance method
    collectionViewShouldChangeItemsAtTo?(_: NSCollectionView, shouldChangeItemsAt: NSSet<IndexPath>, to: NSCollectionViewItem.HighlightState): NSSet<IndexPath>;
    // instance method
    collectionViewDidChangeItemsAtTo?(_: NSCollectionView, didChangeItemsAt: NSSet<IndexPath>, to: NSCollectionViewItem.HighlightState): void;
    // instance method
    collectionViewShouldSelectItemsAt?(_: NSCollectionView, shouldSelectItemsAt: NSSet<IndexPath>): NSSet<IndexPath>;
    // instance method
    collectionViewShouldDeselectItemsAt?(_: NSCollectionView, shouldDeselectItemsAt: NSSet<IndexPath>): NSSet<IndexPath>;
    // instance method
    collectionViewDidSelectItemsAt?(_: NSCollectionView, didSelectItemsAt: NSSet<IndexPath>): void;
    // instance method
    collectionViewDidDeselectItemsAt?(_: NSCollectionView, didDeselectItemsAt: NSSet<IndexPath>): void;
    // instance method
    collectionViewWillDisplayItemForRepresentedObjectAtIndexPath?(_: NSCollectionView, willDisplay: NSCollectionViewItem, forRepresentedObjectAt: NSIndexPath): void;
    // instance method
    collectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath?(_: NSCollectionView, willDisplaySupplementaryView: NSView, forElementKind: string, at: NSIndexPath): void;
    // instance method
    collectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath?(_: NSCollectionView, didEndDisplaying: NSCollectionViewItem, forRepresentedObjectAt: NSIndexPath): void;
    // instance method
    collectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath?(_: NSCollectionView, didEndDisplayingSupplementaryView: NSView, forElementOfKind: string, at: NSIndexPath): void;
    // instance method
    collectionViewAcceptDropIndexDropOperation?(_: NSCollectionView, acceptDrop: NSDraggingInfo, index: number, dropOperation: NSCollectionView.DropOperation): boolean;
    // instance method
    collectionViewAcceptDropIndexPathDropOperation?(_: NSCollectionView, acceptDrop: NSDraggingInfo, indexPath: NSIndexPath, dropOperation: NSCollectionView.DropOperation): boolean;
    // instance method
    collectionViewTransitionLayoutForOldLayoutNewLayout?(_: NSCollectionView, transitionLayoutForOldLayout: NSCollectionViewLayout, newLayout: NSCollectionViewLayout): NSCollectionViewTransitionLayout;
    // instance method
    collectionViewUpdateDraggingItemsForDrag?(_: NSCollectionView, updateDraggingItemsForDrag: NSDraggingInfo): void;
    // instance method
    collectionViewValidateDropProposedIndexDropOperation?(_: NSCollectionView, validateDrop: NSDraggingInfo, proposedIndex: number, dropOperation: NSCollectionView.DropOperation): NSDragOperation;
    // instance method
    collectionViewValidateDropProposedIndexPathDropOperation?(_: NSCollectionView, validateDrop: NSDraggingInfo, proposedIndexPath: IndexPath, dropOperation: NSCollectionView.DropOperation): NSDragOperation;
  }

  interface NSCollectionViewDelegateFlowLayout extends NSCollectionViewDelegate {
    // instance method
    collectionViewLayoutSizeForItemAtIndexPath?(_: NSCollectionView, layout: NSCollectionViewLayout, sizeForItemAt: NSIndexPath): CGSize;
    // instance method
    collectionViewLayoutInsetForSectionAtIndex?(_: NSCollectionView, layout: NSCollectionViewLayout, insetForSectionAt: number): NSEdgeInsets;
    // instance method
    collectionViewLayoutMinimumLineSpacingForSectionAtIndex?(_: NSCollectionView, layout: NSCollectionViewLayout, minimumLineSpacingForSectionAt: number): number;
    // instance method
    collectionViewLayoutMinimumInteritemSpacingForSectionAtIndex?(_: NSCollectionView, layout: NSCollectionViewLayout, minimumInteritemSpacingForSectionAt: number): number;
    // instance method
    collectionViewLayoutReferenceSizeForFooterInSection?(_: NSCollectionView, layout: NSCollectionViewLayout, referenceSizeForFooterInSection: number): CGSize;
    // instance method
    collectionViewLayoutReferenceSizeForHeaderInSection?(_: NSCollectionView, layout: NSCollectionViewLayout, referenceSizeForHeaderInSection: number): CGSize;
  }

  // interface
  class NSCollectionViewDiffableDataSourceReference<SectionIdentifierType, ItemIdentifierType> extends NSObject {
    // ownInstanceProperties
    supplementaryViewProvider: (p1: NSCollectionView, p2: string, p3: NSIndexPath) => NSView;
    setSupplementaryViewProvider(_: (p1: NSCollectionView, p2: string, p3: NSIndexPath) => NSView)
    // compoundInstanceMethods
    applySnapshotWithAnimatingDifferences(_: NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: boolean): void;
    // compoundInstanceMethods
    indexPathForItemIdentifier(_: ItemIdentifierType): NSIndexPath;
    // compoundInstanceMethods
    itemIdentifierForIndexPath(_: NSIndexPath): ItemIdentifierType;
    // compoundInstanceMethods
    snapshot(): NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType>;
  }

  interface NSCollectionViewElement extends NSObject, NSUserInterfaceItemIdentification {
    // instance method
    applyLayoutAttributes?(_: NSCollectionViewLayoutAttributes): void;
    // instance method
    didTransitionFromLayoutToLayout?(from: NSCollectionViewLayout, to: NSCollectionViewLayout): void;
    // instance method
    preferredLayoutAttributesFittingAttributes?(_: NSCollectionViewLayoutAttributes): NSCollectionViewLayoutAttributes;
    // instance method
    prepareForReuse?(): void;
    // instance method
    willTransitionFromLayoutToLayout?(from: NSCollectionViewLayout, to: NSCollectionViewLayout): void;
  }

  // interface
  class NSCollectionViewFlowLayout extends NSCollectionViewLayout {
    // ownInstanceProperties
    estimatedItemSize: CGSize;
    setEstimatedItemSize(_: CGSize)
    // ownInstanceProperties
    footerReferenceSize: CGSize;
    setFooterReferenceSize(_: CGSize)
    // ownInstanceProperties
    headerReferenceSize: CGSize;
    setHeaderReferenceSize(_: CGSize)
    // ownInstanceProperties
    itemSize: CGSize;
    setItemSize(_: CGSize)
    // ownInstanceProperties
    minimumInteritemSpacing: number;
    setMinimumInteritemSpacing(_: number)
    // ownInstanceProperties
    minimumLineSpacing: number;
    setMinimumLineSpacing(_: number)
    // ownInstanceProperties
    scrollDirection: NSCollectionView.ScrollDirection;
    setScrollDirection(_: NSCollectionView.ScrollDirection)
    // ownInstanceProperties
    sectionFootersPinToVisibleBounds: boolean;
    setSectionFootersPinToVisibleBounds(_: boolean)
    // ownInstanceProperties
    sectionHeadersPinToVisibleBounds: boolean;
    setSectionHeadersPinToVisibleBounds(_: boolean)
    // ownInstanceProperties
    sectionInset: NSEdgeInsets;
    setSectionInset(_: NSEdgeInsets)
    // compoundInstanceMethods
    collapseSectionAtIndex(at: number): void;
    // compoundInstanceMethods
    expandSectionAtIndex(at: number): void;
    // compoundInstanceMethods
    sectionAtIndexIsCollapsed(atIndexIsCollapsed: number): boolean;
  }

  // interface
  class NSCollectionViewFlowLayoutInvalidationContext extends NSCollectionViewLayoutInvalidationContext {
    // ownInstanceProperties
    invalidateFlowLayoutAttributes: boolean;
    setInvalidateFlowLayoutAttributes(_: boolean)
    // ownInstanceProperties
    invalidateFlowLayoutDelegateMetrics: boolean;
    setInvalidateFlowLayoutDelegateMetrics(_: boolean)
  }

  // interface
  class NSCollectionViewGridLayout extends NSCollectionViewLayout {
    // ownInstanceProperties
    backgroundColors: NSColor[];
    setBackgroundColors(_: NSColor[])
    // ownInstanceProperties
    margins: NSEdgeInsets;
    setMargins(_: NSEdgeInsets)
    // ownInstanceProperties
    maximumItemSize: CGSize;
    setMaximumItemSize(_: CGSize)
    // ownInstanceProperties
    maximumNumberOfColumns: number;
    setMaximumNumberOfColumns(_: number)
    // ownInstanceProperties
    maximumNumberOfRows: number;
    setMaximumNumberOfRows(_: number)
    // ownInstanceProperties
    minimumInteritemSpacing: number;
    setMinimumInteritemSpacing(_: number)
    // ownInstanceProperties
    minimumItemSize: CGSize;
    setMinimumItemSize(_: CGSize)
    // ownInstanceProperties
    minimumLineSpacing: number;
    setMinimumLineSpacing(_: number)
  }

  // interface
  class NSCollectionViewItem extends NSViewController {
    // ownInstanceProperties
    collectionView: NSCollectionView;
    // ownInstanceProperties
    draggingImageComponents: NSDraggingImageComponent[];
    // ownInstanceProperties
    highlightState: NSCollectionViewItem.HighlightState;
    setHighlightState(_: NSCollectionViewItem.HighlightState)
    // ownInstanceProperties
    imageView: NSImageView;
    setImageView(_: NSImageView)
    // ownInstanceProperties
    isSelected: boolean;
    setSelected(_: boolean)
    // ownInstanceProperties
    textField: NSTextField;
    setTextField(_: NSTextField)
  }

  // interface
  class NSCollectionViewLayout extends NSObject {
    // ownInstanceProperties
    collectionView: NSCollectionView;
    // ownInstanceProperties
    collectionViewContentSize: CGSize;
    // ownStaticProperties
    static invalidationContextClass: typeof NSObject;
    // ownStaticProperties
    static layoutAttributesClass: typeof NSObject;
    // compoundInstanceMethods
    finalLayoutAttributesForDisappearingDecorationElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    finalLayoutAttributesForDisappearingItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    finalLayoutAttributesForDisappearingSupplementaryElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    finalizeAnimatedBoundsChange(): void;
    // compoundInstanceMethods
    finalizeCollectionViewUpdates(): void;
    // compoundInstanceMethods
    finalizeLayoutTransition(): void;
    // compoundInstanceMethods
    indexPathsToDeleteForDecorationViewOfKind(ofKind: string): NSSet<IndexPath>;
    // compoundInstanceMethods
    indexPathsToDeleteForSupplementaryViewOfKind(ofKind: string): NSSet<IndexPath>;
    // compoundInstanceMethods
    indexPathsToInsertForDecorationViewOfKind(ofKind: string): NSSet<IndexPath>;
    // compoundInstanceMethods
    indexPathsToInsertForSupplementaryViewOfKind(ofKind: string): NSSet<IndexPath>;
    // compoundInstanceMethods
    initialLayoutAttributesForAppearingDecorationElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    initialLayoutAttributesForAppearingItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    initialLayoutAttributesForAppearingSupplementaryElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    invalidateLayout(): void;
    // compoundInstanceMethods
    invalidateLayoutWithContext(with_: NSCollectionViewLayoutInvalidationContext): void;
    // compoundInstanceMethods
    invalidationContextForBoundsChange(forBoundsChange: CGRect): NSCollectionViewLayoutInvalidationContext;
    // compoundInstanceMethods
    invalidationContextForPreferredLayoutAttributesWithOriginalAttributes(forPreferredLayoutAttributes: NSCollectionViewLayoutAttributes, withOriginalAttributes: NSCollectionViewLayoutAttributes): NSCollectionViewLayoutInvalidationContext;
    // compoundInstanceMethods
    layoutAttributesForDecorationViewOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    layoutAttributesForDropTargetAtPoint(at: CGPoint): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    layoutAttributesForElementsInRect(in_: CGRect): NSCollectionViewLayoutAttributes[];
    // compoundInstanceMethods
    layoutAttributesForInterItemGapBeforeIndexPath(before: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    layoutAttributesForItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    layoutAttributesForSupplementaryViewOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundInstanceMethods
    prepareForAnimatedBoundsChange(forAnimatedBoundsChange: CGRect): void;
    // compoundInstanceMethods
    prepareForCollectionViewUpdates(forCollectionViewUpdates: NSCollectionViewUpdateItem[]): void;
    // compoundInstanceMethods
    prepareForTransitionFromLayout(from: NSCollectionViewLayout): void;
    // compoundInstanceMethods
    prepareForTransitionToLayout(to: NSCollectionViewLayout): void;
    // compoundInstanceMethods
    prepareLayout(): void;
    // compoundInstanceMethods
    registerClassForDecorationViewOfKind(_?: typeof NSObject, forDecorationViewOfKind?: string): void;
    // compoundInstanceMethods
    registerNibForDecorationViewOfKind(_?: NSNib, forDecorationViewOfKind?: string): void;
    // compoundInstanceMethods
    shouldInvalidateLayoutForBoundsChange(forBoundsChange: CGRect): boolean;
    // compoundInstanceMethods
    shouldInvalidateLayoutForPreferredLayoutAttributesWithOriginalAttributes(forPreferredLayoutAttributes: NSCollectionViewLayoutAttributes, withOriginalAttributes: NSCollectionViewLayoutAttributes): boolean;
    // compoundInstanceMethods
    targetContentOffsetForProposedContentOffset(forProposedContentOffset: CGPoint): CGPoint;
    // compoundInstanceMethods
    targetContentOffsetForProposedContentOffsetWithScrollingVelocity(forProposedContentOffset: CGPoint, withScrollingVelocity: CGPoint): CGPoint;
  }

  // interface
  class NSCollectionViewLayoutAttributes extends NSObject {
    // compoundStaticMethods
    static layoutAttributesForDecorationViewOfKindWithIndexPath(forDecorationViewOfKind: string, with_: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundStaticMethods
    static layoutAttributesForInterItemGapBeforeIndexPath(forInterItemGapBefore: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundStaticMethods
    static layoutAttributesForItemWithIndexPath(forItemWith: NSIndexPath): NSCollectionViewLayoutAttributes;
    // compoundStaticMethods
    static layoutAttributesForSupplementaryViewOfKindWithIndexPath(forSupplementaryViewOfKind: string, with_: NSIndexPath): NSCollectionViewLayoutAttributes;
    // ownInstanceProperties
    alpha: number;
    setAlpha(_: number)
    // ownInstanceProperties
    frame: CGRect;
    setFrame(_: CGRect)
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    indexPath: NSIndexPath;
    setIndexPath(_: NSIndexPath)
    // ownInstanceProperties
    representedElementCategory: NSCollectionElementCategory;
    // ownInstanceProperties
    representedElementKind: string;
    // ownInstanceProperties
    size: CGSize;
    setSize(_: CGSize)
    // ownInstanceProperties
    zIndex: number;
    setZIndex(_: number)
  }

  // interface
  class NSCollectionViewLayoutInvalidationContext extends NSObject {
    // ownInstanceProperties
    contentOffsetAdjustment: CGPoint;
    setContentOffsetAdjustment(_: CGPoint)
    // ownInstanceProperties
    contentSizeAdjustment: CGSize;
    setContentSizeAdjustment(_: CGSize)
    // ownInstanceProperties
    invalidateDataSourceCounts: boolean;
    // ownInstanceProperties
    invalidateEverything: boolean;
    // ownInstanceProperties
    invalidatedDecorationIndexPaths: Map<string, NSSet<IndexPath>>;
    // ownInstanceProperties
    invalidatedItemIndexPaths: NSSet<IndexPath>;
    // ownInstanceProperties
    invalidatedSupplementaryIndexPaths: Map<string, NSSet<IndexPath>>;
    // compoundInstanceMethods
    invalidateDecorationElementsWithOfKindAt(ofKind: string, at: NSSet<IndexPath>): void;
    // compoundInstanceMethods
    invalidateItemsWithAt(at: NSSet<IndexPath>): void;
    // compoundInstanceMethods
    invalidateSupplementaryElementsWithOfKindAt(ofKind: string, at: NSSet<IndexPath>): void;
  }

  interface NSCollectionViewPrefetching extends NSObject {
    // instance method
    collectionViewPrefetchItemsAtIndexPaths(_: NSCollectionView, prefetchItemsAt: NSIndexPath[]): void;
    // instance method
    collectionViewCancelPrefetchingForItemsAtIndexPaths?(_: NSCollectionView, cancelPrefetchingForItemsAt: NSIndexPath[]): void;
  }

  interface NSCollectionViewSectionHeaderView extends NSCollectionViewElement {
    sectionCollapseButton?: NSButton;
    setSectionCollapseButton(_: NSButton)
  }

  // interface
  class NSCollectionViewTransitionLayout extends NSCollectionViewLayout {
    // ownInstanceProperties
    currentLayout: NSCollectionViewLayout;
    // ownInstanceProperties
    nextLayout: NSCollectionViewLayout;
    // ownInstanceProperties
    transitionProgress: number;
    setTransitionProgress(_: number)
    // compoundInstanceMethods
    static createWithCurrentLayoutNextLayout(currentLayout: NSCollectionViewLayout, nextLayout: NSCollectionViewLayout): NSCollectionViewTransitionLayout;
    // compoundInstanceMethods
    updateValueForAnimatedKey(_: number, forAnimatedKey: string): void;
    // compoundInstanceMethods
    valueForAnimatedKey(forAnimatedKey: string): number;
  }

  // interface
  class NSCollectionViewUpdateItem extends NSObject {
    // ownInstanceProperties
    indexPathAfterUpdate: NSIndexPath;
    // ownInstanceProperties
    indexPathBeforeUpdate: NSIndexPath;
    // ownInstanceProperties
    updateAction: NSCollectionView.UpdateAction;
  }

  // interface
  class NSColor extends NSObject {
    // ownInstanceProperties
    CGColor: any;
    // ownInstanceProperties
    alphaComponent: number;
    // ownInstanceProperties
    blackComponent: number;
    // ownInstanceProperties
    blueComponent: number;
    // ownInstanceProperties
    brightnessComponent: number;
    // ownInstanceProperties
    catalogNameComponent: string;
    // ownInstanceProperties
    colorNameComponent: string;
    // ownInstanceProperties
    colorSpace: NSColorSpace;
    // ownInstanceProperties
    cyanComponent: number;
    // ownInstanceProperties
    greenComponent: number;
    // ownInstanceProperties
    hueComponent: number;
    // ownInstanceProperties
    localizedCatalogNameComponent: string;
    // ownInstanceProperties
    localizedColorNameComponent: string;
    // ownInstanceProperties
    magentaComponent: number;
    // ownInstanceProperties
    numberOfComponents: number;
    // ownInstanceProperties
    patternImage: NSImage;
    // ownInstanceProperties
    redComponent: number;
    // ownInstanceProperties
    saturationComponent: number;
    // ownInstanceProperties
    type: NSColor.ColorType;
    // ownInstanceProperties
    whiteComponent: number;
    // ownInstanceProperties
    yellowComponent: number;
    // ownStaticProperties
    static alternateSelectedControlTextColor: NSColor;
    // ownStaticProperties
    static alternatingContentBackgroundColors: NSColor[];
    // ownStaticProperties
    static blackColor: NSColor;
    // ownStaticProperties
    static blueColor: NSColor;
    // ownStaticProperties
    static brownColor: NSColor;
    // ownStaticProperties
    static clearColor: NSColor;
    // ownStaticProperties
    static controlAccentColor: NSColor;
    // ownStaticProperties
    static controlBackgroundColor: NSColor;
    // ownStaticProperties
    static controlColor: NSColor;
    // ownStaticProperties
    static controlTextColor: NSColor;
    // ownStaticProperties
    static currentControlTint: NSControlTint;
    // ownStaticProperties
    static cyanColor: NSColor;
    // ownStaticProperties
    static darkGrayColor: NSColor;
    // ownStaticProperties
    static disabledControlTextColor: NSColor;
    // ownStaticProperties
    static findHighlightColor: NSColor;
    // ownStaticProperties
    static grayColor: NSColor;
    // ownStaticProperties
    static greenColor: NSColor;
    // ownStaticProperties
    static gridColor: NSColor;
    // ownStaticProperties
    static headerTextColor: NSColor;
    // ownStaticProperties
    static highlightColor: NSColor;
    // ownStaticProperties
    static ignoresAlpha: boolean;
    setIgnoresAlpha(_: boolean)
    // ownStaticProperties
    static keyboardFocusIndicatorColor: NSColor;
    // ownStaticProperties
    static labelColor: NSColor;
    // ownStaticProperties
    static lightGrayColor: NSColor;
    // ownStaticProperties
    static linkColor: NSColor;
    // ownStaticProperties
    static magentaColor: NSColor;
    // ownStaticProperties
    static orangeColor: NSColor;
    // ownStaticProperties
    static placeholderTextColor: NSColor;
    // ownStaticProperties
    static purpleColor: NSColor;
    // ownStaticProperties
    static quaternaryLabelColor: NSColor;
    // ownStaticProperties
    static redColor: NSColor;
    // ownStaticProperties
    static scrubberTexturedBackgroundColor: NSColor;
    // ownStaticProperties
    static secondaryLabelColor: NSColor;
    // ownStaticProperties
    static selectedContentBackgroundColor: NSColor;
    // ownStaticProperties
    static selectedControlColor: NSColor;
    // ownStaticProperties
    static selectedControlTextColor: NSColor;
    // ownStaticProperties
    static selectedMenuItemTextColor: NSColor;
    // ownStaticProperties
    static selectedTextBackgroundColor: NSColor;
    // ownStaticProperties
    static selectedTextColor: NSColor;
    // ownStaticProperties
    static separatorColor: NSColor;
    // ownStaticProperties
    static shadowColor: NSColor;
    // ownStaticProperties
    static systemBlueColor: NSColor;
    // ownStaticProperties
    static systemBrownColor: NSColor;
    // ownStaticProperties
    static systemGrayColor: NSColor;
    // ownStaticProperties
    static systemGreenColor: NSColor;
    // ownStaticProperties
    static systemIndigoColor: NSColor;
    // ownStaticProperties
    static systemOrangeColor: NSColor;
    // ownStaticProperties
    static systemPinkColor: NSColor;
    // ownStaticProperties
    static systemPurpleColor: NSColor;
    // ownStaticProperties
    static systemRedColor: NSColor;
    // ownStaticProperties
    static systemTealColor: NSColor;
    // ownStaticProperties
    static systemYellowColor: NSColor;
    // ownStaticProperties
    static tertiaryLabelColor: NSColor;
    // ownStaticProperties
    static textBackgroundColor: NSColor;
    // ownStaticProperties
    static textColor: NSColor;
    // ownStaticProperties
    static underPageBackgroundColor: NSColor;
    // ownStaticProperties
    static unemphasizedSelectedContentBackgroundColor: NSColor;
    // ownStaticProperties
    static unemphasizedSelectedTextBackgroundColor: NSColor;
    // ownStaticProperties
    static unemphasizedSelectedTextColor: NSColor;
    // ownStaticProperties
    static whiteColor: NSColor;
    // ownStaticProperties
    static windowBackgroundColor: NSColor;
    // ownStaticProperties
    static windowFrameTextColor: NSColor;
    // ownStaticProperties
    static yellowColor: NSColor;
    // compoundInstanceMethods
    blendedColorWithFractionOfColor(withFraction: number, of: NSColor): NSColor;
    // compoundInstanceMethods
    colorUsingColorSpace(_: NSColorSpace): NSColor;
    // compoundInstanceMethods
    colorUsingType(_: NSColor.ColorType): NSColor;
    // compoundInstanceMethods
    colorWithAlphaComponent(_: number): NSColor;
    // compoundInstanceMethods
    colorWithSystemEffect(_: NSColor.SystemEffect): NSColor;
    // compoundInstanceMethods
    drawSwatchInRect(in_: CGRect): void;
    // compoundInstanceMethods
    getComponents(_: number): void;
    // compoundInstanceMethods
    getCyanMagentaYellowBlackAlpha(_?: number, magenta?: number, yellow?: number, black?: number, alpha?: number): void;
    // compoundInstanceMethods
    getHueSaturationBrightnessAlpha(_?: number, saturation?: number, brightness?: number, alpha?: number): void;
    // compoundInstanceMethods
    getRedGreenBlueAlpha(_?: number, green?: number, blue?: number, alpha?: number): void;
    // compoundInstanceMethods
    getWhiteAlpha(_?: number, alpha?: number): void;
    // compoundInstanceMethods
    highlightWithLevel(withLevel: number): NSColor;
    // compoundInstanceMethods
    set(): void;
    // compoundInstanceMethods
    setFill(): void;
    // compoundInstanceMethods
    setStroke(): void;
    // compoundInstanceMethods
    shadowWithLevel(withLevel: number): NSColor;
    // compoundInstanceMethods
    writeToPasteboard(to: NSPasteboard): void;
  }

  interface NSColorChanging extends NSObject {
    // instance method
    changeColor(_?: NSColorPanel): void;
  }

  // interface
  class NSColorList extends NSObject {
    // ownInstanceProperties
    allKeys: string[];
    // ownInstanceProperties
    isEditable: boolean;
    // ownInstanceProperties
    name: string;
    // ownStaticProperties
    static availableColorLists: NSColorList[];
    // compoundInstanceMethods
    colorWithKey(withKey: string): NSColor;
    // compoundInstanceMethods
    static createWithName(name: string): NSColorList;
    // compoundInstanceMethods
    static createWithNameFromFile(name: string, fromFile?: string): NSColorList;
    // compoundInstanceMethods
    insertColorKeyAtIndex(_: NSColor, key: string, at: number): void;
    // compoundInstanceMethods
    removeColorWithKey(withKey: string): void;
    // compoundInstanceMethods
    removeFile(): void;
    // compoundInstanceMethods
    setColorForKey(_: NSColor, forKey: string): void;
    // compoundInstanceMethods
    writeToURLError(error?: NSURL): boolean;
  }

  // interface
  class NSColorPanel extends NSPanel {
    // compoundStaticMethods
    static dragColorWithEventFromView(_: NSColor, with_: NSEvent, from: NSView): boolean;
    // compoundStaticMethods
    static setPickerMask(_: NSColorPanel.Options): void;
    // compoundStaticMethods
    static setPickerMode(_: NSColorPanel.Mode): void;
    // ownInstanceProperties
    accessoryView: NSView;
    setAccessoryView(_: NSView)
    // ownInstanceProperties
    alpha: number;
    // ownInstanceProperties
    color: NSColor;
    setColor(_: NSColor)
    // ownInstanceProperties
    isContinuous: boolean;
    setContinuous(_: boolean)
    // ownInstanceProperties
    mode: NSColorPanel.Mode;
    setMode(_: NSColorPanel.Mode)
    // ownInstanceProperties
    showsAlpha: boolean;
    setShowsAlpha(_: boolean)
    // ownStaticProperties
    static sharedColorPanel: NSColorPanel;
    // ownStaticProperties
    static sharedColorPanelExists: boolean;
    // compoundInstanceMethods
    attachColorList(_: NSColorList): void;
    // compoundInstanceMethods
    detachColorList(_: NSColorList): void;
    // compoundInstanceMethods
    setAction(_?: string): void;
    // compoundInstanceMethods
    setTarget(_?: any): void;
  }

  // interface
  class NSColorPicker extends NSObject {
    // ownInstanceProperties
    buttonToolTip: string;
    // ownInstanceProperties
    colorPanel: NSColorPanel;
    // ownInstanceProperties
    minContentSize: CGSize;
    // ownInstanceProperties
    provideNewButtonImage: NSImage;
  }

  // interface
  class NSColorPickerTouchBarItem extends NSTouchBarItem {
    // compoundStaticMethods
    static colorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
    // compoundStaticMethods
    static colorPickerWithIdentifierButtonImage(withIdentifier: string, buttonImage: NSImage): NSColorPickerTouchBarItem;
    // compoundStaticMethods
    static strokeColorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
    // compoundStaticMethods
    static textColorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    allowedColorSpaces: NSColorSpace[];
    setAllowedColorSpaces(_: NSColorSpace[])
    // ownInstanceProperties
    color: NSColor;
    setColor(_: NSColor)
    // ownInstanceProperties
    colorList: NSColorList;
    setColorList(_: NSColorList)
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    showsAlpha: boolean;
    setShowsAlpha(_: boolean)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
  }

  interface NSColorPickingCustom extends NSColorPickingDefault {
    // instance method
    currentMode(): NSColorPanel.Mode;
    // instance method
    provideNewView(_: boolean): NSView;
    // instance method
    setColor(_: NSColor): void;
    // instance method
    supportsMode(_: NSColorPanel.Mode): boolean;
  }

  interface NSColorPickingDefault {
    provideNewButtonImage: NSImage;
    buttonToolTip: string;
    minContentSize: CGSize;
    // instance method
    alphaControlAddedOrRemoved(_?: any): void;
    // instance method
    attachColorList(_: NSColorList): void;
    // instance method
    detachColorList(_: NSColorList): void;
    // instance method
    insertNewButtonImageIn(_: NSImage, in_: NSButtonCell): void;
    // instance method
    setMode(_: NSColorPanel.Mode): void;
    // instance method
    viewSizeChanged(_?: any): void;
  }

  // interface
  class NSColorSampler extends NSObject {
    // compoundInstanceMethods
    showWithSelectionHandler(selectionHandler?: (p1: NSColor) => void): void;
  }

  // interface
  class NSColorSpace extends NSObject {
    // compoundStaticMethods
    static availableColorSpacesWithModel(with_: NSColorSpace.Model): NSColorSpace[];
    // ownInstanceProperties
    CGColorSpace: any;
    // ownInstanceProperties
    ICCProfileData: NSData;
    // ownInstanceProperties
    colorSpaceModel: NSColorSpace.Model;
    // ownInstanceProperties
    colorSyncProfile: any;
    // ownInstanceProperties
    localizedName: string;
    // ownInstanceProperties
    numberOfColorComponents: number;
    // ownStaticProperties
    static adobeRGB1998ColorSpace: NSColorSpace;
    // ownStaticProperties
    static deviceCMYKColorSpace: NSColorSpace;
    // ownStaticProperties
    static deviceGrayColorSpace: NSColorSpace;
    // ownStaticProperties
    static deviceRGBColorSpace: NSColorSpace;
    // ownStaticProperties
    static displayP3ColorSpace: NSColorSpace;
    // ownStaticProperties
    static extendedGenericGamma22GrayColorSpace: NSColorSpace;
    // ownStaticProperties
    static extendedSRGBColorSpace: NSColorSpace;
    // ownStaticProperties
    static genericCMYKColorSpace: NSColorSpace;
    // ownStaticProperties
    static genericGamma22GrayColorSpace: NSColorSpace;
    // ownStaticProperties
    static genericGrayColorSpace: NSColorSpace;
    // ownStaticProperties
    static genericRGBColorSpace: NSColorSpace;
    // ownStaticProperties
    static sRGBColorSpace: NSColorSpace;
    // compoundInstanceMethods
    static createWithCGColorSpace(CGColorSpace: any): NSColorSpace;
    // compoundInstanceMethods
    static createWithColorSyncProfile(colorSyncProfile: any): NSColorSpace;
    // compoundInstanceMethods
    static createWithICCProfileData(ICCProfileData: NSData): NSColorSpace;
  }

  // export function NSColorSpaceFromDepth(depth: NSWindow.Depth): string;

  // interface
  class NSColorWell extends NSControl {
    // ownInstanceProperties
    isActive: boolean;
    // ownInstanceProperties
    isBordered: boolean;
    setBordered(_: boolean)
    // ownInstanceProperties
    color: NSColor;
    setColor(_: NSColor)
    // compoundInstanceMethods
    activate(_: boolean): void;
    // compoundInstanceMethods
    deactivate(): void;
    // compoundInstanceMethods
    drawWellInside(inside: CGRect): void;
    // compoundInstanceMethods
    takeColorFrom(_?: any): void;
  }

  // interface
  class NSComboBox extends NSTextField {
    // compoundStaticMethods
    //  static labelWithAttributedString(labelWithAttributedString: NSAttributedString): NSComboBox;
    // compoundStaticMethods
    //  static labelWithString(labelWithString: string): NSComboBox;
    // compoundStaticMethods
    //  static wrappingLabelWithString(wrappingLabelWithString: string): NSComboBox;
    // ownInstanceProperties
    isButtonBordered: boolean;
    setButtonBordered(_: boolean)
    // ownInstanceProperties
    completes: boolean;
    setCompletes(_: boolean)
    // ownInstanceProperties
    dataSource: NSComboBoxDataSource;
    setDataSource(_: NSComboBoxDataSource)
    // ownInstanceProperties
    //   delegate: NSComboBoxDelegate;
    setDelegate(_: NSComboBoxDelegate)
    // ownInstanceProperties
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean)
    // ownInstanceProperties
    indexOfSelectedItem: number;
    // ownInstanceProperties
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize)
    // ownInstanceProperties
    itemHeight: number;
    setItemHeight(_: number)
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    numberOfVisibleItems: number;
    setNumberOfVisibleItems(_: number)
    // ownInstanceProperties
    objectValueOfSelectedItem: any;
    // ownInstanceProperties
    objectValues: any[];
    // ownInstanceProperties
    usesDataSource: boolean;
    setUsesDataSource(_: boolean)
    // compoundInstanceMethods
    addItemWithObjectValue(withObjectValue: any): void;
    // compoundInstanceMethods
    addItemsWithObjectValues(withObjectValues: any[]): void;
    // compoundInstanceMethods
    deselectItemAtIndex(at: number): void;
    // compoundInstanceMethods
    indexOfItemWithObjectValue(withObjectValue: any): number;
    // compoundInstanceMethods
    insertItemWithObjectValueAtIndex(withObjectValue: any, at: number): void;
    // compoundInstanceMethods
    itemObjectValueAtIndex(at: number): any;
    // compoundInstanceMethods
    noteNumberOfItemsChanged(): void;
    // compoundInstanceMethods
    reloadData(): void;
    // compoundInstanceMethods
    removeAllItems(): void;
    // compoundInstanceMethods
    removeItemAtIndex(at: number): void;
    // compoundInstanceMethods
    removeItemWithObjectValue(withObjectValue: any): void;
    // compoundInstanceMethods
    scrollItemAtIndexToTop(_: number): void;
    // compoundInstanceMethods
    scrollItemAtIndexToVisible(_: number): void;
    // compoundInstanceMethods
    selectItemAtIndex(at: number): void;
    // compoundInstanceMethods
    selectItemWithObjectValue(withObjectValue?: any): void;
  }

  // interface
  class NSComboBoxCell extends NSTextFieldCell {
    // ownInstanceProperties
    isButtonBordered: boolean;
    setButtonBordered(_: boolean)
    // ownInstanceProperties
    completes: boolean;
    setCompletes(_: boolean)
    // ownInstanceProperties
    dataSource: NSComboBoxCellDataSource;
    setDataSource(_: NSComboBoxCellDataSource)
    // ownInstanceProperties
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean)
    // ownInstanceProperties
    indexOfSelectedItem: number;
    // ownInstanceProperties
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize)
    // ownInstanceProperties
    itemHeight: number;
    setItemHeight(_: number)
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    numberOfVisibleItems: number;
    setNumberOfVisibleItems(_: number)
    // ownInstanceProperties
    objectValueOfSelectedItem: any;
    // ownInstanceProperties
    objectValues: any[];
    // ownInstanceProperties
    usesDataSource: boolean;
    setUsesDataSource(_: boolean)
    // compoundInstanceMethods
    addItemWithObjectValue(withObjectValue: any): void;
    // compoundInstanceMethods
    addItemsWithObjectValues(withObjectValues: any[]): void;
    // compoundInstanceMethods
    completedString(_: string): string;
    // compoundInstanceMethods
    deselectItemAtIndex(at: number): void;
    // compoundInstanceMethods
    indexOfItemWithObjectValue(withObjectValue: any): number;
    // compoundInstanceMethods
    insertItemWithObjectValueAtIndex(withObjectValue: any, at: number): void;
    // compoundInstanceMethods
    itemObjectValueAtIndex(at: number): any;
    // compoundInstanceMethods
    noteNumberOfItemsChanged(): void;
    // compoundInstanceMethods
    reloadData(): void;
    // compoundInstanceMethods
    removeAllItems(): void;
    // compoundInstanceMethods
    removeItemAtIndex(at: number): void;
    // compoundInstanceMethods
    removeItemWithObjectValue(withObjectValue: any): void;
    // compoundInstanceMethods
    scrollItemAtIndexToTop(_: number): void;
    // compoundInstanceMethods
    scrollItemAtIndexToVisible(_: number): void;
    // compoundInstanceMethods
    selectItemAtIndex(at: number): void;
    // compoundInstanceMethods
    selectItemWithObjectValue(withObjectValue?: any): void;
  }

  interface NSComboBoxCellDataSource extends NSObject {
    // instance method
    comboBoxCellObjectValueForItemAtIndex?(_: NSComboBoxCell, objectValueForItemAt: number): any;
    // instance method
    comboBoxCellCompletedString?(_: NSComboBoxCell, completedString: string): string;
    // instance method
    comboBoxCellIndexOfItemWithStringValue?(_: NSComboBoxCell, indexOfItemWithStringValue: string): number;
    // instance method
    numberOfItemsInComboBoxCell?(in_: NSComboBoxCell): number;
  }

  interface NSComboBoxDataSource extends NSObject {
    // instance method
    comboBoxObjectValueForItemAtIndex?(_: NSComboBox, objectValueForItemAt: number): any;
    // instance method
    comboBoxCompletedString?(_: NSComboBox, completedString: string): string;
    // instance method
    comboBoxIndexOfItemWithStringValue?(_: NSComboBox, indexOfItemWithStringValue: string): number;
    // instance method
    numberOfItemsInComboBox?(in_: NSComboBox): number;
  }

  interface NSComboBoxDelegate extends NSTextFieldDelegate {
    // instance method
    comboBoxSelectionDidChange?(_: NSNotification): void;
    // instance method
    comboBoxSelectionIsChanging?(_: NSNotification): void;
    // instance method
    comboBoxWillDismiss?(_: NSNotification): void;
    // instance method
    comboBoxWillPopUp?(_: NSNotification): void;
  }

  // interface
  class NSControl extends NSView {
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    alignment: NSTextAlignment;
    setAlignment(_: NSTextAlignment)
    // ownInstanceProperties
    allowsExpansionToolTips: boolean;
    setAllowsExpansionToolTips(_: boolean)
    // ownInstanceProperties
    attributedStringValue: NSAttributedString;
    setAttributedStringValue(_: NSAttributedString)
    // ownInstanceProperties
    baseWritingDirection: NSWritingDirection;
    setBaseWritingDirection(_: NSWritingDirection)
    // ownInstanceProperties
    cell: NSCell;
    setCell(_: NSCell)
    // ownInstanceProperties
    isContinuous: boolean;
    setContinuous(_: boolean)
    // ownInstanceProperties
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize)
    // ownInstanceProperties
    doubleValue: number;
    setDoubleValue(_: number)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    floatValue: number;
    setFloatValue(_: number)
    // ownInstanceProperties
    font: NSFont;
    setFont(_: NSFont)
    // ownInstanceProperties
    formatter: Formatter;
    setFormatter(_: Formatter)
    // ownInstanceProperties
    isHighlighted: boolean;
    setHighlighted(_: boolean)
    // ownInstanceProperties
    ignoresMultiClick: boolean;
    setIgnoresMultiClick(_: boolean)
    // ownInstanceProperties
    intValue: number;
    setIntValue(_: number)
    // ownInstanceProperties
    integerValue: number;
    setIntegerValue(_: number)
    // ownInstanceProperties
    lineBreakMode: NSLineBreakMode;
    setLineBreakMode(_: NSLineBreakMode)
    // ownInstanceProperties
    objectValue: any;
    setObjectValue(_: any)
    // ownInstanceProperties
    refusesFirstResponder: boolean;
    setRefusesFirstResponder(_: boolean)
    // ownInstanceProperties
    stringValue: string;
    setStringValue(_: string)
    // ownInstanceProperties
    //   tag: number;
    setTag(_: number)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    usesSingleLineMode: boolean;
    setUsesSingleLineMode(_: boolean)
    // ownStaticProperties
    static cellClass: typeof NSObject;
    setCellClass(_: typeof NSObject)
    // compoundInstanceMethods
    abortEditing(): boolean;
    // compoundInstanceMethods
    currentEditor(): NSText;
    // compoundInstanceMethods
    drawCell(_: NSCell): void;
    // compoundInstanceMethods
    drawCellInside(_: NSCell): void;
    // compoundInstanceMethods
    drawWithExpansionFrameInView(withExpansionFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    editWithFrameEditorDelegateEvent(withFrame: CGRect, editor: NSText, delegate?: any, event?: NSEvent): void;
    // compoundInstanceMethods
    endEditing(_: NSText): void;
    // compoundInstanceMethods
    expansionFrameWithFrame(withFrame: CGRect): CGRect;
    // compoundInstanceMethods
    invalidateIntrinsicContentSizeForCell(for_: NSCell): void;
    // compoundInstanceMethods
    performClick(_?: any): void;
    // compoundInstanceMethods
    selectCell(_: NSCell): void;
    // compoundInstanceMethods
    selectWithFrameEditorDelegateStartLength(withFrame: CGRect, editor: NSText, delegate?: any, start?: number, length?: number): void;
    // compoundInstanceMethods
    selectedCell(): NSCell;
    // compoundInstanceMethods
    selectedTag(): number;
    // compoundInstanceMethods
    sendActionTo(_?: string, to?: any): boolean;
    // compoundInstanceMethods
    sendActionOn(on: NSEvent.EventTypeMask): number;
    // compoundInstanceMethods
    sizeThatFits(_: CGSize): CGSize;
    // compoundInstanceMethods
    sizeToFit(): void;
    // compoundInstanceMethods
    takeDoubleValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeFloatValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeIntValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeIntegerValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeObjectValueFrom(_?: any): void;
    // compoundInstanceMethods
    takeStringValueFrom(_?: any): void;
    // compoundInstanceMethods
    updateCell(_: NSCell): void;
    // compoundInstanceMethods
    updateCellInside(_: NSCell): void;
    // compoundInstanceMethods
    validateEditing(): void;
  }

  interface NSControlTextEditingDelegate extends NSObject {
    // instance method
    controlTextViewDoCommandBySelector?(_: NSControl, textView: NSTextView, doCommandBy: string): boolean;
    // instance method
    controlDidFailToFormatStringErrorDescription?(_: NSControl, didFailToFormatString: string, errorDescription?: string): boolean;
    // instance method
    controlDidFailToValidatePartialStringErrorDescription?(_: NSControl, didFailToValidatePartialString: string, errorDescription?: string): void;
    // instance method
    controlIsValidObject?(_: NSControl, isValidObject?: any): boolean;
    // instance method
    controlTextShouldBeginEditing?(_: NSControl, textShouldBeginEditing: NSText): boolean;
    // instance method
    controlTextShouldEndEditing?(_: NSControl, textShouldEndEditing: NSText): boolean;
    // instance method
    controlTextViewCompletionsForPartialWordRangeIndexOfSelectedItem?(_: NSControl, textView: NSTextView, completions: string[], forPartialWordRange: NSRange, indexOfSelectedItem: number): string[];
    // instance method
    controlTextDidBeginEditing?(_: NSNotification): void;
    // instance method
    controlTextDidChange?(_: NSNotification): void;
    // instance method
    controlTextDidEndEditing?(_: NSNotification): void;
  }

  // interface
  class NSController extends NSObject {
    // ownInstanceProperties
    isEditing: boolean;
  }

  // export function NSCreateFileContentsPboardType(fileType: string): string;

  // export function NSCreateFilenamePboardType(fileType: string): string;

  // interface
  class NSCursor extends NSObject {
    // compoundStaticMethods
    static hide(): void;
    // compoundStaticMethods
    static pop(): void;
    // compoundStaticMethods
    static setHiddenUntilMouseMoves(_: boolean): void;
    // compoundStaticMethods
    static unhide(): void;
    // ownInstanceProperties
    hotSpot: CGPoint;
    // ownInstanceProperties
    image: NSImage;
    // ownStaticProperties
    static IBeamCursor: NSCursor;
    // ownStaticProperties
    static IBeamCursorForVerticalLayout: NSCursor;
    // ownStaticProperties
    static arrowCursor: NSCursor;
    // ownStaticProperties
    static closedHandCursor: NSCursor;
    // ownStaticProperties
    static contextualMenuCursor: NSCursor;
    // ownStaticProperties
    static crosshairCursor: NSCursor;
    // ownStaticProperties
    static currentCursor: NSCursor;
    // ownStaticProperties
    static currentSystemCursor: NSCursor;
    // ownStaticProperties
    static disappearingItemCursor: NSCursor;
    // ownStaticProperties
    static dragCopyCursor: NSCursor;
    // ownStaticProperties
    static dragLinkCursor: NSCursor;
    // ownStaticProperties
    static openHandCursor: NSCursor;
    // ownStaticProperties
    static operationNotAllowedCursor: NSCursor;
    // ownStaticProperties
    static pointingHandCursor: NSCursor;
    // ownStaticProperties
    static resizeDownCursor: NSCursor;
    // ownStaticProperties
    static resizeLeftCursor: NSCursor;
    // ownStaticProperties
    static resizeLeftRightCursor: NSCursor;
    // ownStaticProperties
    static resizeRightCursor: NSCursor;
    // ownStaticProperties
    static resizeUpCursor: NSCursor;
    // ownStaticProperties
    static resizeUpDownCursor: NSCursor;
    // compoundInstanceMethods
    static createWithImageHotSpot(image: NSImage, hotSpot: CGPoint): NSCursor;
    // compoundInstanceMethods
    pop(): void;
    // compoundInstanceMethods
    push(): void;
    // compoundInstanceMethods
    set(): void;
  }

  // interface
  class NSCustomImageRep extends NSImageRep {
    // ownInstanceProperties
    delegate: any;
    // ownInstanceProperties
    drawSelector: string;
    // ownInstanceProperties
    drawingHandler: (p1: CGRect) => boolean;
    // compoundInstanceMethods
    static createWithDrawSelectorDelegate(drawSelector: string, delegate: any): NSCustomImageRep;
    // compoundInstanceMethods
    static createWithSizeFlippedDrawingHandler(size: CGSize, flipped: boolean, drawingHandler: (p1: CGRect) => boolean): NSCustomImageRep;
  }

  // interface
  class NSCustomTouchBarItem extends NSTouchBarItem {
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    //   view: NSView;
    setView(_: NSView)
    // ownInstanceProperties
    //   viewController: NSViewController;
    setViewController(_: NSViewController)
  }

  // interface
  class NSDataAsset extends NSObject {
    // ownInstanceProperties
    data: NSData;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    typeIdentifier: string;
    // compoundInstanceMethods
    static createWithName(name: string): NSDataAsset;
    // compoundInstanceMethods
    static createWithNameBundle(name: string, bundle: Bundle): NSDataAsset;
  }

  // interface
  class NSDatePicker extends NSControl {
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    isBezeled: boolean;
    setBezeled(_: boolean)
    // ownInstanceProperties
    isBordered: boolean;
    setBordered(_: boolean)
    // ownInstanceProperties
    calendar: NSCalendar;
    setCalendar(_: NSCalendar)
    // ownInstanceProperties
    datePickerElements: NSDatePicker.ElementFlags;
    setDatePickerElements(_: NSDatePicker.ElementFlags)
    // ownInstanceProperties
    datePickerMode: NSDatePicker.Mode;
    setDatePickerMode(_: NSDatePicker.Mode)
    // ownInstanceProperties
    datePickerStyle: NSDatePicker.Style;
    setDatePickerStyle(_: NSDatePicker.Style)
    // ownInstanceProperties
    dateValue: Date;
    setDateValue(_: Date)
    // ownInstanceProperties
    delegate: NSDatePickerCellDelegate;
    setDelegate(_: NSDatePickerCellDelegate)
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    maxDate: Date;
    setMaxDate(_: Date)
    // ownInstanceProperties
    minDate: Date;
    setMinDate(_: Date)
    // ownInstanceProperties
    presentsCalendarOverlay: boolean;
    setPresentsCalendarOverlay(_: boolean)
    // ownInstanceProperties
    textColor: NSColor;
    setTextColor(_: NSColor)
    // ownInstanceProperties
    timeInterval: number;
    setTimeInterval(_: number)
    // ownInstanceProperties
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone)
  }

  // interface
  class NSDatePickerCell extends NSActionCell {
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    calendar: NSCalendar;
    setCalendar(_: NSCalendar)
    // ownInstanceProperties
    datePickerElements: NSDatePicker.ElementFlags;
    setDatePickerElements(_: NSDatePicker.ElementFlags)
    // ownInstanceProperties
    datePickerMode: NSDatePicker.Mode;
    setDatePickerMode(_: NSDatePicker.Mode)
    // ownInstanceProperties
    datePickerStyle: NSDatePicker.Style;
    setDatePickerStyle(_: NSDatePicker.Style)
    // ownInstanceProperties
    dateValue: Date;
    setDateValue(_: Date)
    // ownInstanceProperties
    delegate: NSDatePickerCellDelegate;
    setDelegate(_: NSDatePickerCellDelegate)
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    maxDate: Date;
    setMaxDate(_: Date)
    // ownInstanceProperties
    minDate: Date;
    setMinDate(_: Date)
    // ownInstanceProperties
    textColor: NSColor;
    setTextColor(_: NSColor)
    // ownInstanceProperties
    timeInterval: number;
    setTimeInterval(_: number)
    // ownInstanceProperties
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone)
  }

  interface NSDatePickerCellDelegate extends NSObject {
    // instance method
    datePickerCellValidateProposedDateValueTimeInterval?(_: NSDatePickerCell, validateProposedDateValue: Date, timeInterval?: number): void;
  }

  // interface
  class NSDictionaryController extends NSArrayController {
    // ownInstanceProperties
    excludedKeys: string[];
    setExcludedKeys(_: string[])
    // ownInstanceProperties
    includedKeys: string[];
    setIncludedKeys(_: string[])
    // ownInstanceProperties
    initialKey: string;
    setInitialKey(_: string)
    // ownInstanceProperties
    initialValue: any;
    setInitialValue(_: any)
    // ownInstanceProperties
    localizedKeyDictionary: Map<string, string>;
    setLocalizedKeyDictionary(_: Map<string, string>)
    // ownInstanceProperties
    localizedKeyTable: string;
    setLocalizedKeyTable(_: string)
    // compoundInstanceMethods
    //  newObject(): NSDictionaryControllerKeyValuePair;
  }

  // interface
  class NSDictionaryControllerKeyValuePair extends NSObject {
    // ownInstanceProperties
    isExplicitlyIncluded: boolean;
    // ownInstanceProperties
    key: string;
    setKey(_: string)
    // ownInstanceProperties
    localizedKey: string;
    setLocalizedKey(_: string)
    // ownInstanceProperties
    value: any;
    setValue(_: any)
  }

  // interface
  class NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType> extends NSObject {
    // ownInstanceProperties
    itemIdentifiers: ItemIdentifierType[];
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    numberOfSections: number;
    // ownInstanceProperties
    sectionIdentifiers: SectionIdentifierType[];
    // compoundInstanceMethods
    appendItemsWithIdentifiers(_: ItemIdentifierType[]): void;
    // compoundInstanceMethods
    appendItemsWithIdentifiersIntoSectionWithIdentifier(_: ItemIdentifierType[], intoSectionWithIdentifier: SectionIdentifierType): void;
    // compoundInstanceMethods
    appendSectionsWithIdentifiers(_: any[]): void;
    // compoundInstanceMethods
    deleteAllItems(): void;
    // compoundInstanceMethods
    deleteItemsWithIdentifiers(_: ItemIdentifierType[]): void;
    // compoundInstanceMethods
    deleteSectionsWithIdentifiers(_: SectionIdentifierType[]): void;
    // compoundInstanceMethods
    indexOfItemIdentifier(_: ItemIdentifierType): number;
    // compoundInstanceMethods
    indexOfSectionIdentifier(_: SectionIdentifierType): number;
    // compoundInstanceMethods
    insertItemsWithIdentifiersAfterItemWithIdentifier(_: ItemIdentifierType[], afterItemWithIdentifier: ItemIdentifierType): void;
    // compoundInstanceMethods
    insertItemsWithIdentifiersBeforeItemWithIdentifier(_: ItemIdentifierType[], beforeItemWithIdentifier: ItemIdentifierType): void;
    // compoundInstanceMethods
    insertSectionsWithIdentifiersAfterSectionWithIdentifier(_: SectionIdentifierType[], afterSectionWithIdentifier: SectionIdentifierType): void;
    // compoundInstanceMethods
    insertSectionsWithIdentifiersBeforeSectionWithIdentifier(_: SectionIdentifierType[], beforeSectionWithIdentifier: SectionIdentifierType): void;
    // compoundInstanceMethods
    itemIdentifiersInSectionWithIdentifier(_: SectionIdentifierType): ItemIdentifierType[];
    // compoundInstanceMethods
    moveItemWithIdentifierAfterItemWithIdentifier(_: ItemIdentifierType, afterItemWithIdentifier: ItemIdentifierType): void;
    // compoundInstanceMethods
    moveItemWithIdentifierBeforeItemWithIdentifier(_: ItemIdentifierType, beforeItemWithIdentifier: ItemIdentifierType): void;
    // compoundInstanceMethods
    moveSectionWithIdentifierAfterSectionWithIdentifier(_: SectionIdentifierType, afterSectionWithIdentifier: SectionIdentifierType): void;
    // compoundInstanceMethods
    moveSectionWithIdentifierBeforeSectionWithIdentifier(_: SectionIdentifierType, beforeSectionWithIdentifier: SectionIdentifierType): void;
    // compoundInstanceMethods
    numberOfItemsInSection(_: SectionIdentifierType): number;
    // compoundInstanceMethods
    reloadItemsWithIdentifiers(_: ItemIdentifierType[]): void;
    // compoundInstanceMethods
    reloadSectionsWithIdentifiers(_: SectionIdentifierType[]): void;
    // compoundInstanceMethods
    sectionIdentifierForSectionContainingItemIdentifier(_: ItemIdentifierType): SectionIdentifierType;
  }

  // interface
  class NSDockTile extends NSObject {
    // ownInstanceProperties
    badgeLabel: string;
    setBadgeLabel(_: string)
    // ownInstanceProperties
    contentView: NSView;
    setContentView(_: NSView)
    // ownInstanceProperties
    owner: any;
    // ownInstanceProperties
    showsApplicationBadge: boolean;
    setShowsApplicationBadge(_: boolean)
    // ownInstanceProperties
    size: CGSize;
    // compoundInstanceMethods
    display(): void;
  }

  interface NSDockTilePlugIn extends NSObject {
    // instance method
    dockMenu?(): NSMenu;
    // instance method
    setDockTile(_?: NSDockTile): void;
  }

  // interface
  class NSDocument extends NSObject {
    // compoundStaticMethods
    static canConcurrentlyReadDocumentsOfType(ofType: string): boolean;
    // compoundStaticMethods
    static isNativeType(_: string): boolean;
    // ownInstanceProperties
    PDFPrintOperation: NSPrintOperation;
    // ownInstanceProperties
    allowsDocumentSharing: boolean;
    // ownInstanceProperties
    autosavedContentsFileURL: NSURL;
    setAutosavedContentsFileURL(_: NSURL)
    // ownInstanceProperties
    autosavingFileType: string;
    // ownInstanceProperties
    autosavingIsImplicitlyCancellable: boolean;
    // ownInstanceProperties
    backupFileURL: NSURL;
    // ownInstanceProperties
    isBrowsingVersions: boolean;
    // ownInstanceProperties
    displayName: string;
    setDisplayName(_: string)
    // ownInstanceProperties
    isDocumentEdited: boolean;
    // ownInstanceProperties
    isDraft: boolean;
    setDraft(_: boolean)
    // ownInstanceProperties
    isEntireFileLoaded: boolean;
    // ownInstanceProperties
    fileModificationDate: Date;
    setFileModificationDate(_: Date)
    // ownInstanceProperties
    fileNameExtensionWasHiddenInLastRunSavePanel: boolean;
    // ownInstanceProperties
    fileType: string;
    setFileType(_: string)
    // ownInstanceProperties
    fileTypeFromLastRunSavePanel: string;
    // ownInstanceProperties
    fileURL: NSURL;
    setFileURL(_: NSURL)
    // ownInstanceProperties
    hasUnautosavedChanges: boolean;
    // ownInstanceProperties
    hasUndoManager: boolean;
    setHasUndoManager(_: boolean)
    // ownInstanceProperties
    isInViewingMode: boolean;
    // ownInstanceProperties
    keepBackupFile: boolean;
    // ownInstanceProperties
    lastComponentOfFileName: string;
    setLastComponentOfFileName(_: string)
    // ownInstanceProperties
    isLocked: boolean;
    // ownInstanceProperties
    printInfo: NSPrintInfo;
    setPrintInfo(_: NSPrintInfo)
    // ownInstanceProperties
    shouldRunSavePanelWithAccessoryView: boolean;
    // ownInstanceProperties
    undoManager: UndoManager;
    setUndoManager(_: UndoManager)
    // ownInstanceProperties
    userActivity: NSUserActivity;
    setUserActivity(_: NSUserActivity)
    // ownInstanceProperties
    windowControllers: NSWindowController[];
    // ownInstanceProperties
    windowForSheet: NSWindow;
    // ownInstanceProperties
    windowNibName: string;
    // ownStaticProperties
    static autosavesDrafts: boolean;
    // ownStaticProperties
    static autosavesInPlace: boolean;
    // ownStaticProperties
    static preservesVersions: boolean;
    // ownStaticProperties
    static readableTypes: string[];
    // ownStaticProperties
    static restorableStateKeyPaths: string[];
    // ownStaticProperties
    static usesUbiquitousStorage: boolean;
    // ownStaticProperties
    static writableTypes: string[];
    // compoundInstanceMethods
    addWindowController(_: NSWindowController): void;
    // compoundInstanceMethods
    autosaveDocumentWithDelegateDidAutosaveSelectorContextInfo(withDelegate?: any, didAutosave?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    autosaveWithWithImplicitCancellabilityCompletionHandler(withImplicitCancellability: boolean, completionHandler?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    browseDocumentVersions(_?: any): void;
    // compoundInstanceMethods
    canAsynchronouslyWriteToURLOfTypeForSaveOperation(to: NSURL, ofType: string, for_: NSDocument.SaveOperationType): boolean;
    // compoundInstanceMethods
    canCloseDocumentWithDelegateShouldCloseSelectorContextInfo(withDelegate: any, shouldClose?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    changeCountTokenForSaveOperation(for_: NSDocument.SaveOperationType): any;
    // compoundInstanceMethods
    checkAutosavingSafetyAndReturnError(): boolean;
    // compoundInstanceMethods
    close(): void;
    // compoundInstanceMethods
    continueActivity(_: () => void): void;
    // compoundInstanceMethods
    continueAsynchronousWorkOnMainThread(_: () => void): void;
    // compoundInstanceMethods
    dataOfTypeError(error: string): NSData;
    // compoundInstanceMethods
    defaultDraftName(): string;
    // compoundInstanceMethods
    duplicateAndReturnError(): NSDocument;
    // compoundInstanceMethods
    duplicateDocument(_?: any): void;
    // compoundInstanceMethods
    duplicateDocumentWithDelegateDidDuplicateSelectorContextInfo(withDelegate?: any, didDuplicate?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    encodeRestorableStateWithCoder(with_: NSCoder): void;
    // compoundInstanceMethods
    encodeRestorableStateWithCoderBackgroundQueue(with_: NSCoder, backgroundQueue: OperationQueue): void;
    // compoundInstanceMethods
    fileAttributesToWriteToURLOfTypeForSaveOperationOriginalContentsURLError(ofType: NSURL, forSaveOperation: string, originalContentsURL: NSDocument.SaveOperationType, error?: NSURL): Map<string, any>;
    // compoundInstanceMethods
    fileNameExtensionForTypeSaveOperation(forType: string, saveOperation: NSDocument.SaveOperationType): string;
    // compoundInstanceMethods
    fileWrapperOfTypeError(error: string): FileWrapper;
    // compoundInstanceMethods
    handleCloseScriptCommand(_: NSCloseCommand): any;
    // compoundInstanceMethods
    handlePrintScriptCommand(_: NSScriptCommand): any;
    // compoundInstanceMethods
    handleSaveScriptCommand(_: NSScriptCommand): any;
    // compoundInstanceMethods
    static createWithForURLWithContentsOfURLOfType(forURL?: NSURL, withContentsOfURL?: NSURL, ofType?: string): NSDocument;
    // compoundInstanceMethods
    static createWithContentsOfURLOfType(contentsOfURL: NSURL, ofType: string): NSDocument;
    // compoundInstanceMethods
    static createWithType(type: string): NSDocument;
    // compoundInstanceMethods
    invalidateRestorableState(): void;
    // compoundInstanceMethods
    lockDocument(_?: any): void;
    // compoundInstanceMethods
    lockWithCompletionHandler(completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    lockWithCompletionHandler(completionHandler?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    makeWindowControllers(): void;
    // compoundInstanceMethods
    moveDocument(_?: any): void;
    // compoundInstanceMethods
    moveDocumentToUbiquityContainer(_?: any): void;
    // compoundInstanceMethods
    moveWithCompletionHandler(completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    moveWithToCompletionHandler(to: NSURL, completionHandler?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    performActivityWithWithSynchronousWaitingUsing(withSynchronousWaiting: boolean, using: (p1: () => void) => void): void;
    // compoundInstanceMethods
    performAsynchronousFileAccess(_: (p1: () => void) => void): void;
    // compoundInstanceMethods
    performSynchronousFileAccess(_: () => void): void;
    // compoundInstanceMethods
    preparePageLayout(_: NSPageLayout): boolean;
    // compoundInstanceMethods
    prepareSavePanel(_: NSSavePanel): boolean;
    // compoundInstanceMethods
    prepareSharingServicePicker(_: NSSharingServicePicker): void;
    // compoundInstanceMethods
    presentError(_: NSError): boolean;
    // compoundInstanceMethods
    presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(_: NSError, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    printDocument(_?: any): void;
    // compoundInstanceMethods
    printDocumentWithSettingsShowPrintPanelDelegateDidPrintSelectorContextInfo(withSettings: Map<string, any>, showPrintPanel: boolean, delegate?: any, didPrint?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    printOperationWithSettingsError(error: Map<string, any>): NSPrintOperation;
    // compoundInstanceMethods
    readFromDataOfTypeError(ofType: NSData, error: string): boolean;
    // compoundInstanceMethods
    readFromFileWrapperOfTypeError(ofType: FileWrapper, error: string): boolean;
    // compoundInstanceMethods
    readFromURLOfTypeError(ofType: NSURL, error: string): boolean;
    // compoundInstanceMethods
    removeWindowController(_: NSWindowController): void;
    // compoundInstanceMethods
    renameDocument(_?: any): void;
    // compoundInstanceMethods
    restoreWindowWithWithIdentifierStateCompletionHandler(withIdentifier: string, state: NSCoder, completionHandler?: (p1: NSWindow, p2: NSError) => void): void;
    // compoundInstanceMethods
    restoreStateWithCoder(with_: NSCoder): void;
    // compoundInstanceMethods
    revertDocumentToSaved(_?: any): void;
    // compoundInstanceMethods
    revertToContentsOfURLOfTypeError(ofType: NSURL, error: string): boolean;
    // compoundInstanceMethods
    runModalPageLayoutWithPrintInfoDelegateDidRunSelectorContextInfo(with_: NSPrintInfo, delegate?: any, didRun?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    runModalPrintOperationDelegateDidRunSelectorContextInfo(_: NSPrintOperation, delegate?: any, didRun?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    runModalSavePanelForSaveOperationDelegateDidSaveSelectorContextInfo(for_: NSDocument.SaveOperationType, delegate?: any, didSave?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    runPageLayout(_?: any): void;
    // compoundInstanceMethods
    saveDocument(_?: any): void;
    // compoundInstanceMethods
    saveDocumentAs(_?: any): void;
    // compoundInstanceMethods
    saveDocumentTo(_?: any): void;
    // compoundInstanceMethods
    saveDocumentToPDF(_?: any): void;
    // compoundInstanceMethods
    saveDocumentWithDelegateDidSaveSelectorContextInfo(withDelegate?: any, didSave?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    saveWithToOfTypeForCompletionHandler(to: NSURL, ofType: string, for_: NSDocument.SaveOperationType, completionHandler?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    saveToURLOfTypeForSaveOperationDelegateDidSaveSelectorContextInfo(to: NSURL, ofType: string, for_: NSDocument.SaveOperationType, delegate?: any, didSave?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    scheduleAutosaving(): void;
    // compoundInstanceMethods
    setDisplayName(_?: string): void;
    // compoundInstanceMethods
    setWindow(_?: NSWindow): void;
    // compoundInstanceMethods
    shareWithWithCompletionHandler(with_: NSSharingService, completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    shouldChangePrintInfo(_: NSPrintInfo): boolean;
    // compoundInstanceMethods
    shouldCloseWindowControllerDelegateShouldCloseSelectorContextInfo(_: NSWindowController, delegate?: any, shouldClose?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    showWindows(): void;
    // compoundInstanceMethods
    stopBrowsingVersionsWithCompletionHandler(completionHandler?: () => void): void;
    // compoundInstanceMethods
    unblockUserInteraction(): void;
    // compoundInstanceMethods
    unlockDocument(_?: any): void;
    // compoundInstanceMethods
    unlockWithCompletionHandler(completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    unlockWithCompletionHandler(completionHandler?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    updateChangeCount(_: NSDocument.ChangeType): void;
    // compoundInstanceMethods
    updateChangeCountWithTokenForSaveOperation(withToken: any, for_: NSDocument.SaveOperationType): void;
    // compoundInstanceMethods
    updateUserActivityState(_: NSUserActivity): void;
    // compoundInstanceMethods
    willNotPresentError(_: NSError): void;
    // compoundInstanceMethods
    willPresentError(_: NSError): NSError;
    // compoundInstanceMethods
    windowControllerDidLoadNib(_: NSWindowController): void;
    // compoundInstanceMethods
    windowControllerWillLoadNib(_: NSWindowController): void;
    // compoundInstanceMethods
    writableTypesForSaveOperation(for_: NSDocument.SaveOperationType): string[];
    // compoundInstanceMethods
    writeSafelyToURLOfTypeForSaveOperationError(ofType: NSURL, forSaveOperation: string, error: NSDocument.SaveOperationType): boolean;
    // compoundInstanceMethods
    writeToURLOfTypeError(ofType: NSURL, error: string): boolean;
    // compoundInstanceMethods
    writeToURLOfTypeForSaveOperationOriginalContentsURLError(ofType: NSURL, forSaveOperation: string, originalContentsURL: NSDocument.SaveOperationType, error?: NSURL): boolean;
  }

  // interface
  class NSDocumentController extends NSObject {
    // ownInstanceProperties
    allowsAutomaticShareMenu: boolean;
    // ownInstanceProperties
    autosavingDelay: number;
    setAutosavingDelay(_: number)
    // ownInstanceProperties
    currentDirectory: string;
    // ownInstanceProperties
    currentDocument: NSDocument;
    // ownInstanceProperties
    defaultType: string;
    // ownInstanceProperties
    documentClassNames: string[];
    // ownInstanceProperties
    documents: NSDocument[];
    // ownInstanceProperties
    hasEditedDocuments: boolean;
    // ownInstanceProperties
    maximumRecentDocumentCount: number;
    // ownInstanceProperties
    recentDocumentURLs: NSURL[];
    // ownStaticProperties
    static sharedDocumentController: NSDocumentController;
    // compoundInstanceMethods
    URLsFromRunningOpenPanel(): NSURL[];
    // compoundInstanceMethods
    addDocument(_: NSDocument): void;
    // compoundInstanceMethods
    beginOpenPanelForTypesCompletionHandler(_: NSOpenPanel, forTypes?: string[], completionHandler?: (p1: number) => void): void;
    // compoundInstanceMethods
    beginOpenPanelWithCompletionHandler(completionHandler?: (p1: NSURL[]) => void): void;
    // compoundInstanceMethods
    clearRecentDocuments(_?: any): void;
    // compoundInstanceMethods
    closeAllDocumentsWithDelegateDidCloseAllSelectorContextInfo(withDelegate?: any, didCloseAllSelector?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    displayNameForType(forType: string): string;
    // compoundInstanceMethods
    documentClassForType(forType: string): typeof NSObject;
    // compoundInstanceMethods
    documentForURL(for_: NSURL): NSDocument;
    // compoundInstanceMethods
    documentForWindow(for_: NSWindow): NSDocument;
    // compoundInstanceMethods
    duplicateDocumentWithContentsOfURLCopyingDisplayNameError(copying: NSURL, displayName: boolean, error?: string): NSDocument;
    // compoundInstanceMethods
    makeDocumentForURLWithContentsOfURLOfTypeError(withContentsOfURL?: NSURL, ofType?: NSURL, error?: string): NSDocument;
    // compoundInstanceMethods
    makeDocumentWithContentsOfURLOfTypeError(ofType: NSURL, error: string): NSDocument;
    // compoundInstanceMethods
    makeUntitledDocumentOfTypeError(error: string): NSDocument;
    // compoundInstanceMethods
    newDocument(_?: any): void;
    // compoundInstanceMethods
    noteNewRecentDocument(_: NSDocument): void;
    // compoundInstanceMethods
    noteNewRecentDocumentURL(_: NSURL): void;
    // compoundInstanceMethods
    openDocument(_?: any): void;
    // compoundInstanceMethods
    openDocumentWithWithContentsOfDisplayCompletionHandler(withContentsOf: NSURL, display: boolean, completionHandler?: (p1: NSDocument, p2: boolean, p3: NSError) => void): void;
    // compoundInstanceMethods
    openUntitledDocumentAndDisplayError(error: boolean): NSDocument;
    // compoundInstanceMethods
    presentError(_: NSError): boolean;
    // compoundInstanceMethods
    presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(_: NSError, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    removeDocument(_: NSDocument): void;
    // compoundInstanceMethods
    reopenDocumentForWithContentsOfDisplayCompletionHandler(for_?: NSURL, withContentsOf?: NSURL, display?: boolean, completionHandler?: (p1: NSDocument, p2: boolean, p3: NSError) => void): void;
    // compoundInstanceMethods
    reviewUnsavedDocumentsWithAlertTitleCancellableDelegateDidReviewAllSelectorContextInfo(withAlertTitle?: string, cancellable?: boolean, delegate?: any, didReviewAllSelector?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    runModalOpenPanelForTypes(_: NSOpenPanel, forTypes?: string[]): number;
    // compoundInstanceMethods
    saveAllDocuments(_?: any): void;
    // compoundInstanceMethods
    standardShareMenuItem(): NSMenuItem;
    // compoundInstanceMethods
    typeForContentsOfURLError(error: NSURL): string;
    // compoundInstanceMethods
    willPresentError(_: NSError): NSError;
  }

  // export function NSDottedFrameRect(rect: CGRect): void;

  interface NSDraggingDestination extends NSObject {
    // instance method
    concludeDragOperation?(_?: NSDraggingInfo): void;
    // instance method
    draggingEnded?(_: NSDraggingInfo): void;
    // instance method
    draggingEntered?(_: NSDraggingInfo): NSDragOperation;
    // instance method
    draggingExited?(_?: NSDraggingInfo): void;
    // instance method
    draggingUpdated?(_: NSDraggingInfo): NSDragOperation;
    // instance method
    performDragOperation?(_: NSDraggingInfo): boolean;
    // instance method
    prepareForDragOperation?(_: NSDraggingInfo): boolean;
    // instance method
    updateDraggingItemsForDrag?(_?: NSDraggingInfo): void;
    // instance method
    wantsPeriodicDraggingUpdates?(): boolean;
  }

  // interface
  class NSDraggingImageComponent extends NSObject {
    // compoundStaticMethods
    static draggingImageComponentWithKey(key: string): NSDraggingImageComponent;
    // ownInstanceProperties
    contents: any;
    setContents(_: any)
    // ownInstanceProperties
    frame: CGRect;
    setFrame(_: CGRect)
    // ownInstanceProperties
    key: string;
    setKey(_: string)
    // compoundInstanceMethods
    static createWithKey(key: string): NSDraggingImageComponent;
  }

  interface NSDraggingInfo extends NSObject {
    animatesToDestination: boolean;
    setAnimatesToDestination(_: boolean)
    draggedImage: NSImage;
    draggedImageLocation: CGPoint;
    draggingDestinationWindow: NSWindow;
    draggingFormation: NSDraggingFormation;
    setDraggingFormation(_: NSDraggingFormation)
    draggingLocation: CGPoint;
    draggingPasteboard: NSPasteboard;
    draggingSequenceNumber: number;
    draggingSource: any;
    draggingSourceOperationMask: NSDragOperation;
    numberOfValidItemsForDrop: number;
    setNumberOfValidItemsForDrop(_: number)
    springLoadingHighlight: NSSpringLoadingHighlight;
    // instance method
    enumerateDraggingItemsWithOptionsForClassesSearchOptionsUsing(options: NSDraggingItemEnumerationOptions, for_?: NSView, classes?: typeof NSObject[], searchOptions?: Map<string, any>, using?: (p1: NSDraggingItem, p2: number, p3: boolean) => void): void;
    // instance method
    resetSpringLoading(): void;
    // instance method
    slideDraggedImageTo(to: CGPoint): void;
  }

  // interface
  class NSDraggingItem extends NSObject {
    // ownInstanceProperties
    draggingFrame: CGRect;
    setDraggingFrame(_: CGRect)
    // ownInstanceProperties
    imageComponents: NSDraggingImageComponent[];
    // ownInstanceProperties
    imageComponentsProvider: () => NSDraggingImageComponent[];
    setImageComponentsProvider(_: () => NSDraggingImageComponent[])
    // ownInstanceProperties
    item: any;
    // compoundInstanceMethods
    static createWithPasteboardWriter(pasteboardWriter: NSPasteboardWriting): NSDraggingItem;
    // compoundInstanceMethods
    setDraggingFrameContents(_: CGRect, contents?: any): void;
  }

  // interface
  class NSDraggingSession extends NSObject {
    // ownInstanceProperties
    animatesToStartingPositionsOnCancelOrFail: boolean;
    setAnimatesToStartingPositionsOnCancelOrFail(_: boolean)
    // ownInstanceProperties
    draggingFormation: NSDraggingFormation;
    setDraggingFormation(_: NSDraggingFormation)
    // ownInstanceProperties
    draggingLeaderIndex: number;
    setDraggingLeaderIndex(_: number)
    // ownInstanceProperties
    draggingLocation: CGPoint;
    // ownInstanceProperties
    draggingPasteboard: NSPasteboard;
    // ownInstanceProperties
    draggingSequenceNumber: number;
    // compoundInstanceMethods
    enumerateDraggingItemsWithOptionsForClassesSearchOptionsUsing(options: NSDraggingItemEnumerationOptions, for_?: NSView, classes?: typeof NSObject[], searchOptions?: Map<string, any>, using?: (p1: NSDraggingItem, p2: number, p3: boolean) => void): void;
  }

  interface NSDraggingSource extends NSObject {
    // instance method
    draggingSessionSourceOperationMaskForDraggingContext(_: NSDraggingSession, sourceOperationMaskFor: NSDraggingContext): NSDragOperation;
    // instance method
    draggingSessionWillBeginAtPoint?(_: NSDraggingSession, willBeginAt: CGPoint): void;
    // instance method
    draggingSessionMovedToPoint?(_: NSDraggingSession, movedTo: CGPoint): void;
    // instance method
    draggingSessionEndedAtPointOperation?(_: NSDraggingSession, endedAt: CGPoint, operation: NSDragOperation): void;
    // instance method
    ignoreModifierKeysForDraggingSession?(for_: NSDraggingSession): boolean;
  }

  // export function NSDrawBitmap(rect: CGRect, width: number, height: number, bps: number, spp: number, bpp: number, bpr: number, isPlanar: boolean, hasAlpha: boolean, colorSpaceName: string, data: string): void;

  // export function NSDrawButton(rect: CGRect, clipRect: CGRect): void;

  // export function NSDrawColorTiledRects(boundsRect: CGRect, clipRect: CGRect, sides: NSRectEdge, colors: NSColor, count: number): CGRect;

  // export function NSDrawDarkBezel(rect: CGRect, clipRect: CGRect): void;

  // export function NSDrawGrayBezel(rect: CGRect, clipRect: CGRect): void;

  // export function NSDrawGroove(rect: CGRect, clipRect: CGRect): void;

  // export function NSDrawLightBezel(rect: CGRect, clipRect: CGRect): void;

  // export function NSDrawNinePartImage(frame: CGRect, topLeftCorner: NSImage, topEdgeFill: NSImage, topRightCorner: NSImage, leftEdgeFill: NSImage, centerFill: NSImage, rightEdgeFill: NSImage, bottomLeftCorner: NSImage, bottomEdgeFill: NSImage, bottomRightCorner: NSImage, op: NSCompositingOperation, alphaFraction: number, flipped: boolean): void;

  // export function NSDrawThreePartImage(frame: CGRect, startCap: NSImage, centerFill: NSImage, endCap: NSImage, vertical: boolean, op: NSCompositingOperation, alphaFraction: number, flipped: boolean): void;

  // export function NSDrawTiledRects(boundsRect: CGRect, clipRect: CGRect, sides: NSRectEdge, grays: number, count: number): CGRect;

  // export function NSDrawWhiteBezel(rect: CGRect, clipRect: CGRect): void;

  // export function NSDrawWindowBackground(rect: CGRect): void;

  interface NSDrawerDelegate extends NSObject {
  }

  // interface
  class NSEPSImageRep extends NSImageRep {
    // ownInstanceProperties
    EPSRepresentation: NSData;
    // ownInstanceProperties
    boundingBox: CGRect;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSEPSImageRep;
  }

  interface NSEditor extends NSObject {
    // instance method
    commitEditing(): boolean;
    // instance method
    commitEditingWithDelegateDidCommitSelectorContextInfo(withDelegate?: any, didCommit?: string, contextInfo?: any): void;
    // instance method
    commitEditingAndReturnError(): boolean;
    // instance method
    discardEditing(): void;
  }

  interface NSEditorRegistration extends NSObject {
    // instance method
    objectDidBeginEditing?(_: NSEditor): void;
    // instance method
    objectDidEndEditing?(_: NSEditor): void;
  }

  // export function NSEraseRect(rect: CGRect): void;

  // interface
  class NSEvent extends NSObject {
    // compoundStaticMethods
    static addGlobalMonitorForEventsWithMatchingHandler(matching: NSEvent.EventTypeMask, handler: (p1: NSEvent) => void): any;
    // compoundStaticMethods
    static addLocalMonitorForEventsWithMatchingHandler(matching: NSEvent.EventTypeMask, handler?: (p1: NSEvent) => NSEvent): any;
    // compoundStaticMethods
    static enterExitEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberTrackingNumberUserData(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, eventNumber?: number, trackingNumber?: number, userData?: any): NSEvent;
    // compoundStaticMethods
    static keyEventWithTypeLocationModifierFlagsTimestampWindowNumberContextCharactersCharactersIgnoringModifiersIsARepeatKeyCode(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, characters?: string, charactersIgnoringModifiers?: string, isARepeat?: boolean, keyCode?: number): NSEvent;
    // compoundStaticMethods
    static mouseEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberClickCountPressure(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, eventNumber?: number, clickCount?: number, pressure?: number): NSEvent;
    // compoundStaticMethods
    static otherEventWithTypeLocationModifierFlagsTimestampWindowNumberContextSubtypeData1Data2(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, subtype?: number, data1?: number, data2?: number): NSEvent;
    // compoundStaticMethods
    static removeMonitor(_: any): void;
    // compoundStaticMethods
    static startPeriodicEventsAfterDelayWithPeriod(afterDelay: number, withPeriod: number): void;
    // compoundStaticMethods
    static stopPeriodicEvents(): void;
    // ownInstanceProperties
    isARepeat: boolean;
    // ownInstanceProperties
    CGEvent: any;
    // ownInstanceProperties
    absoluteX: number;
    // ownInstanceProperties
    absoluteY: number;
    // ownInstanceProperties
    absoluteZ: number;
    // ownInstanceProperties
    associatedEventsMask: NSEvent.EventTypeMask;
    // ownInstanceProperties
    buttonMask: NSEvent.ButtonMask;
    // ownInstanceProperties
    buttonNumber: number;
    // ownInstanceProperties
    capabilityMask: number;
    // ownInstanceProperties
    characters: string;
    // ownInstanceProperties
    charactersIgnoringModifiers: string;
    // ownInstanceProperties
    clickCount: number;
    // ownInstanceProperties
    data1: number;
    // ownInstanceProperties
    data2: number;
    // ownInstanceProperties
    deltaX: number;
    // ownInstanceProperties
    deltaY: number;
    // ownInstanceProperties
    deltaZ: number;
    // ownInstanceProperties
    deviceID: number;
    // ownInstanceProperties
    isDirectionInvertedFromDevice: boolean;
    // ownInstanceProperties
    isEnteringProximity: boolean;
    // ownInstanceProperties
    eventNumber: number;
    // ownInstanceProperties
    eventRef: any;
    // ownInstanceProperties
    hasPreciseScrollingDeltas: boolean;
    // ownInstanceProperties
    keyCode: number;
    // ownInstanceProperties
    locationInWindow: CGPoint;
    // ownInstanceProperties
    magnification: number;
    // ownInstanceProperties
    //   modifierFlags: NSEvent.ModifierFlags;
    // ownInstanceProperties
    momentumPhase: NSEvent.Phase;
    // ownInstanceProperties
    phase: NSEvent.Phase;
    // ownInstanceProperties
    pointingDeviceID: number;
    // ownInstanceProperties
    pointingDeviceSerialNumber: number;
    // ownInstanceProperties
    pointingDeviceType: NSEvent.PointingDeviceType;
    // ownInstanceProperties
    pressure: number;
    // ownInstanceProperties
    pressureBehavior: NSEvent.PressureBehavior;
    // ownInstanceProperties
    rotation: number;
    // ownInstanceProperties
    scrollingDeltaX: number;
    // ownInstanceProperties
    scrollingDeltaY: number;
    // ownInstanceProperties
    stage: number;
    // ownInstanceProperties
    stageTransition: number;
    // ownInstanceProperties
    subtype: NSEvent.EventSubtype;
    // ownInstanceProperties
    systemTabletID: number;
    // ownInstanceProperties
    tabletID: number;
    // ownInstanceProperties
    tangentialPressure: number;
    // ownInstanceProperties
    tilt: CGPoint;
    // ownInstanceProperties
    timestamp: number;
    // ownInstanceProperties
    trackingArea: NSTrackingArea;
    // ownInstanceProperties
    trackingNumber: number;
    // ownInstanceProperties
    type: NSEvent.EventType;
    // ownInstanceProperties
    uniqueID: number;
    // ownInstanceProperties
    userData: any;
    // ownInstanceProperties
    vendorDefined: any;
    // ownInstanceProperties
    vendorID: number;
    // ownInstanceProperties
    vendorPointingDeviceType: number;
    // ownInstanceProperties
    window: NSWindow;
    // ownInstanceProperties
    windowNumber: number;
    // ownStaticProperties
    static doubleClickInterval: number;
    // ownStaticProperties
    static keyRepeatDelay: number;
    // ownStaticProperties
    static keyRepeatInterval: number;
    // ownStaticProperties
    static modifierFlags: NSEvent.ModifierFlags;
    // ownStaticProperties
    static isMouseCoalescingEnabled: boolean;
    setMouseCoalescingEnabled(_: boolean)
    // ownStaticProperties
    static mouseLocation: CGPoint;
    // ownStaticProperties
    static pressedMouseButtons: number;
    // ownStaticProperties
    static isSwipeTrackingFromScrollEventsEnabled: boolean;
    // compoundInstanceMethods
    allTouches(): NSSet<NSTouch>;
    // compoundInstanceMethods
    charactersByApplyingModifiers(byApplyingModifiers: NSEvent.ModifierFlags): string;
    // compoundInstanceMethods
    coalescedTouchesForTouch(for_: NSTouch): NSTouch[];
    // compoundInstanceMethods
    touchesForView(for_: NSView): NSSet<NSTouch>;
    // compoundInstanceMethods
    touchesMatchingPhaseInView(matching: NSTouch.Phase, in_?: NSView): NSSet<NSTouch>;
    // compoundInstanceMethods
    trackSwipeEventWithOptionsDampenAmountThresholdMinMaxUsingHandler(options: NSEvent.SwipeTrackingOptions, dampenAmountThresholdMin: number, max: number, usingHandler: (p1: number, p2: NSEvent.Phase, p3: boolean, p4: boolean) => void): void;
  }

  // interface
  class NSFilePromiseProvider extends NSObject {
    // ownInstanceProperties
    delegate: NSFilePromiseProviderDelegate;
    setDelegate(_: NSFilePromiseProviderDelegate)
    // ownInstanceProperties
    fileType: string;
    setFileType(_: string)
    // ownInstanceProperties
    userInfo: any;
    setUserInfo(_: any)
    // compoundInstanceMethods
    static createWithFileTypeDelegate(fileType: string, delegate: NSFilePromiseProviderDelegate): NSFilePromiseProvider;
  }

  interface NSFilePromiseProviderDelegate extends NSObject {
    // instance method
    filePromiseProviderWritePromiseToCompletionHandler(_: NSFilePromiseProvider, writePromiseTo: NSURL, completionHandler?: (p1: NSError) => void): void;
    // instance method
    filePromiseProviderFileNameForType(_: NSFilePromiseProvider, fileNameForType: string): string;
    // instance method
    operationQueueForFilePromiseProvider?(for_: NSFilePromiseProvider): OperationQueue;
  }

  // interface
  class NSFilePromiseReceiver extends NSObject {
    // ownInstanceProperties
    fileNames: string[];
    // ownInstanceProperties
    fileTypes: string[];
    // ownStaticProperties
    static readableDraggedTypes: string[];
    // compoundInstanceMethods
    receivePromisedFilesWithAtDestinationOptionsOperationQueueReader(atDestination: NSURL, options: Map<any, any>, operationQueue: OperationQueue, reader?: (p1: NSURL, p2: NSError) => void): void;
  }

  // interface
  class NSFont extends NSObject {
    // compoundStaticMethods
    static boldSystemFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static controlContentFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static labelFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static menuBarFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static menuFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static messageFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static monospacedDigitSystemFontOfSizeWeight(ofSize: number, weight: number): NSFont;
    // compoundStaticMethods
    static monospacedSystemFontOfSizeWeight(ofSize: number, weight: number): NSFont;
    // compoundStaticMethods
    static paletteFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static setUserFixedPitchFont(_?: NSFont): void;
    // compoundStaticMethods
    static setUserFont(_?: NSFont): void;
    // compoundStaticMethods
    static systemFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static systemFontOfSizeWeight(ofSize: number, weight: number): NSFont;
    // compoundStaticMethods
    static systemFontSizeForControlSize(for_: NSControl.ControlSize): number;
    // compoundStaticMethods
    static titleBarFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static toolTipsFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static userFixedPitchFontOfSize(ofSize: number): NSFont;
    // compoundStaticMethods
    static userFontOfSize(ofSize: number): NSFont;
    // ownInstanceProperties
    ascender: number;
    // ownInstanceProperties
    boundingRectForFont: CGRect;
    // ownInstanceProperties
    capHeight: number;
    // ownInstanceProperties
    coveredCharacterSet: NSCharacterSet;
    // ownInstanceProperties
    descender: number;
    // ownInstanceProperties
    displayName: string;
    // ownInstanceProperties
    familyName: string;
    // ownInstanceProperties
    isFixedPitch: boolean;
    // ownInstanceProperties
    fontDescriptor: NSFontDescriptor;
    // ownInstanceProperties
    fontName: string;
    // ownInstanceProperties
    italicAngle: number;
    // ownInstanceProperties
    leading: number;
    // ownInstanceProperties
    matrix: number;
    // ownInstanceProperties
    maximumAdvancement: CGSize;
    // ownInstanceProperties
    mostCompatibleStringEncoding: number;
    // ownInstanceProperties
    numberOfGlyphs: number;
    // ownInstanceProperties
    pointSize: number;
    // ownInstanceProperties
    printerFont: NSFont;
    // ownInstanceProperties
    renderingMode: NSFontRenderingMode;
    // ownInstanceProperties
    screenFont: NSFont;
    // ownInstanceProperties
    textTransform: NSAffineTransform;
    // ownInstanceProperties
    underlinePosition: number;
    // ownInstanceProperties
    underlineThickness: number;
    // ownInstanceProperties
    isVertical: boolean;
    // ownInstanceProperties
    verticalFont: NSFont;
    // ownInstanceProperties
    xHeight: number;
    // ownStaticProperties
    static labelFontSize: number;
    // ownStaticProperties
    static smallSystemFontSize: number;
    // ownStaticProperties
    static systemFontSize: number;
    // compoundInstanceMethods
    advancementForCGGlyph(forCGGlyph: number): CGSize;
    // compoundInstanceMethods
    advancementForGlyph(forGlyph: number): CGSize;
    // compoundInstanceMethods
    boundingRectForCGGlyph(forCGGlyph: number): CGRect;
    // compoundInstanceMethods
    boundingRectForGlyph(forGlyph: number): CGRect;
    // compoundInstanceMethods
    getAdvancementsForCGGlyphsCount(_: NSSize, forCGGlyphs: number, count: number): void;
    // compoundInstanceMethods
    getAdvancementsForGlyphsCount(_: NSSize, forGlyphs: number, count: number): void;
    // compoundInstanceMethods
    getAdvancementsForPackedGlyphsLength(_: NSSize, forPackedGlyphs: any, length: number): void;
    // compoundInstanceMethods
    getBoundingRectsForCGGlyphsCount(_: NSRect, forCGGlyphs: number, count: number): void;
    // compoundInstanceMethods
    getBoundingRectsForGlyphsCount(_: NSRect, forGlyphs: number, count: number): void;
    // compoundInstanceMethods
    glyphWithName(withName: string): number;
    // compoundInstanceMethods
    screenFontWithRenderingMode(with_: NSFontRenderingMode): NSFont;
    // compoundInstanceMethods
    set(): void;
    // compoundInstanceMethods
    setInContext(in_: NSGraphicsContext): void;
  }

  // interface
  class NSFontAssetRequest extends NSObject {
    // ownInstanceProperties
    downloadedFontDescriptors: NSFontDescriptor[];
    // compoundInstanceMethods
    downloadWithWithCompletionHandler(withCompletionHandler?: (p1: NSError) => boolean): void;
    // compoundInstanceMethods
    static createWithFontDescriptorsOptions(fontDescriptors: NSFontDescriptor[], options: NSFontAssetRequest.Options): NSFontAssetRequest;
  }

  interface NSFontChanging extends NSObject {
    // instance method
    changeFont?(_?: NSFontManager): void;
    // instance method
    validModesForFontPanel?(_: NSFontPanel): NSFontPanel.ModeMask;
  }

  // interface
  class NSFontCollection extends NSObject {
    // compoundStaticMethods
    static hideFontCollectionWithNameVisibilityError(visibility: string, error: NSFontCollection.Visibility): boolean;
    // compoundStaticMethods
    static renameFontCollectionWithNameVisibilityToNameError(fromName: string, visibility: NSFontCollection.Visibility, toName: string): boolean;
    // compoundStaticMethods
    static showFontCollectionWithNameVisibilityError(withName: NSFontCollection, visibility: string, error: NSFontCollection.Visibility): boolean;
    // ownInstanceProperties
    exclusionDescriptors: NSFontDescriptor[];
    // ownInstanceProperties
    matchingDescriptors: NSFontDescriptor[];
    // ownInstanceProperties
    queryDescriptors: NSFontDescriptor[];
    // ownStaticProperties
    static allFontCollectionNames: string[];
    // ownStaticProperties
    static fontCollectionWithAllAvailableDescriptors: NSFontCollection;
    // compoundInstanceMethods
    matchingDescriptorsForFamily(forFamily: string): NSFontDescriptor[];
    // compoundInstanceMethods
    matchingDescriptorsForFamilyOptions(forFamily: string, options?: Map<string, number>): NSFontDescriptor[];
    // compoundInstanceMethods
    matchingDescriptorsWithOptions(options?: Map<string, number>): NSFontDescriptor[];
  }

  // interface
  class NSFontDescriptor extends NSObject {
    // ownInstanceProperties
    fontAttributes: Map<string, any>;
    // ownInstanceProperties
    matrix: NSAffineTransform;
    // ownInstanceProperties
    pointSize: number;
    // ownInstanceProperties
    postscriptName: string;
    // ownInstanceProperties
    requiresFontAssetRequest: boolean;
    // ownInstanceProperties
    symbolicTraits: NSFontDescriptor.SymbolicTraits;
    // compoundInstanceMethods
    fontDescriptorByAddingAttributes(_: Map<string, any>): NSFontDescriptor;
    // compoundInstanceMethods
    fontDescriptorWithDesign(_: string): NSFontDescriptor;
    // compoundInstanceMethods
    fontDescriptorWithFace(_: string): NSFontDescriptor;
    // compoundInstanceMethods
    fontDescriptorWithFamily(_: string): NSFontDescriptor;
    // compoundInstanceMethods
    fontDescriptorWithMatrix(_: NSAffineTransform): NSFontDescriptor;
    // compoundInstanceMethods
    fontDescriptorWithSize(_: number): NSFontDescriptor;
    // compoundInstanceMethods
    fontDescriptorWithSymbolicTraits(_: NSFontDescriptor.SymbolicTraits): NSFontDescriptor;
    // compoundInstanceMethods
    static createWithFontAttributes(fontAttributes?: Map<string, any>): NSFontDescriptor;
    // compoundInstanceMethods
    matchingFontDescriptorWithWithMandatoryKeys(withMandatoryKeys?: NSSet<string>): NSFontDescriptor;
    // compoundInstanceMethods
    matchingFontDescriptorsWithWithMandatoryKeys(withMandatoryKeys?: NSSet<string>): NSFontDescriptor[];
    // compoundInstanceMethods
    objectForKey(forKey: string): any;
  }

  // interface
  class NSFontManager extends NSObject {
    // compoundStaticMethods
    static setFontManagerFactory(_?: typeof NSObject): void;
    // compoundStaticMethods
    static setFontPanelFactory(_?: typeof NSObject): void;
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    availableFontFamilies: string[];
    // ownInstanceProperties
    availableFonts: string[];
    // ownInstanceProperties
    currentFontAction: NSFontAction;
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    isMultiple: boolean;
    // ownInstanceProperties
    selectedFont: NSFont;
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownStaticProperties
    static sharedFontManager: NSFontManager;
    // compoundInstanceMethods
    addFontTrait(_?: any): void;
    // compoundInstanceMethods
    availableFontNamesWithTraits(with_: NSFontTraitMask): string[];
    // compoundInstanceMethods
    availableMembersOfFontFamily(ofFontFamily: string): any[][];
    // compoundInstanceMethods
    convertAttributes(_: Map<string, any>): Map<string, any>;
    // compoundInstanceMethods
    convertFont(_: NSFont): NSFont;
    // compoundInstanceMethods
    convertFontToFace(_: NSFont, toFace: string): NSFont;
    // compoundInstanceMethods
    convertFontToFamily(_: NSFont, toFamily: string): NSFont;
    // compoundInstanceMethods
    convertFontToHaveTrait(_: NSFont, toHaveTrait: NSFontTraitMask): NSFont;
    // compoundInstanceMethods
    convertFontToNotHaveTrait(_: NSFont, toNotHaveTrait: NSFontTraitMask): NSFont;
    // compoundInstanceMethods
    convertFontToSize(_: NSFont, toSize: number): NSFont;
    // compoundInstanceMethods
    convertFontTraits(_: NSFontTraitMask): NSFontTraitMask;
    // compoundInstanceMethods
    convertWeightOfFont(_: boolean, of: NSFont): NSFont;
    // compoundInstanceMethods
    fontMenu(_: boolean): NSMenu;
    // compoundInstanceMethods
    fontNamedHasTraits(_: string, hasTraits: NSFontTraitMask): boolean;
    // compoundInstanceMethods
    fontPanel(_: boolean): NSFontPanel;
    // compoundInstanceMethods
    fontWithFamilyTraitsWeightSize(withFamily: string, traits: NSFontTraitMask, weight: number, size: number): NSFont;
    // compoundInstanceMethods
    localizedNameForFamilyFace(forFamily: string, face?: string): string;
    // compoundInstanceMethods
    modifyFont(_?: any): void;
    // compoundInstanceMethods
    modifyFontViaPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontFontPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontStylesPanel(_?: any): void;
    // compoundInstanceMethods
    removeFontTrait(_?: any): void;
    // compoundInstanceMethods
    sendAction(): boolean;
    // compoundInstanceMethods
    setFontMenu(_: NSMenu): void;
    // compoundInstanceMethods
    setSelectedAttributesIsMultiple(_: Map<string, any>, isMultiple: boolean): void;
    // compoundInstanceMethods
    setSelectedFontIsMultiple(_: NSFont, isMultiple: boolean): void;
    // compoundInstanceMethods
    traitsOfFont(of: NSFont): NSFontTraitMask;
    // compoundInstanceMethods
    weightOfFont(of: NSFont): number;
  }

  // interface
  class NSFontPanel extends NSPanel {
    // ownInstanceProperties
    accessoryView: NSView;
    setAccessoryView(_: NSView)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownStaticProperties
    static sharedFontPanel: NSFontPanel;
    // ownStaticProperties
    static sharedFontPanelExists: boolean;
    // compoundInstanceMethods
    panelConvertFont(_: NSFont): NSFont;
    // compoundInstanceMethods
    reloadDefaultFontFamilies(): void;
    // compoundInstanceMethods
    setPanelFontIsMultiple(_: NSFont, isMultiple: boolean): void;
  }

  // interface
  class NSFormCell extends NSActionCell {
    // ownInstanceProperties
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString)
    // ownInstanceProperties
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString)
    // ownInstanceProperties
    placeholderString: string;
    setPlaceholderString(_: string)
    // ownInstanceProperties
    preferredTextFieldWidth: number;
    setPreferredTextFieldWidth(_: number)
    // ownInstanceProperties
    titleAlignment: NSTextAlignment;
    setTitleAlignment(_: NSTextAlignment)
    // ownInstanceProperties
    titleBaseWritingDirection: NSWritingDirection;
    setTitleBaseWritingDirection(_: NSWritingDirection)
    // ownInstanceProperties
    titleFont: NSFont;
    setTitleFont(_: NSFont)
    // ownInstanceProperties
    titleWidth: number;
    setTitleWidth(_: number)
    // compoundInstanceMethods
    //  titleWidth(_: CGSize): number;
  }

  // export function NSFrameRect(rect: CGRect): void;

  // export function NSFrameRectWithWidth(rect: CGRect, frameWidth: number): void;

  // export function NSFrameRectWithWidthUsingOperation(rect: CGRect, frameWidth: number, op: NSCompositingOperation): void;

  // interface
  class NSGestureRecognizer extends NSObject {
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    allowedTouchTypes: NSTouch.TouchTypeMask;
    setAllowedTouchTypes(_: NSTouch.TouchTypeMask)
    // ownInstanceProperties
    delaysKeyEvents: boolean;
    setDelaysKeyEvents(_: boolean)
    // ownInstanceProperties
    delaysMagnificationEvents: boolean;
    setDelaysMagnificationEvents(_: boolean)
    // ownInstanceProperties
    delaysOtherMouseButtonEvents: boolean;
    setDelaysOtherMouseButtonEvents(_: boolean)
    // ownInstanceProperties
    delaysPrimaryMouseButtonEvents: boolean;
    setDelaysPrimaryMouseButtonEvents(_: boolean)
    // ownInstanceProperties
    delaysRotationEvents: boolean;
    setDelaysRotationEvents(_: boolean)
    // ownInstanceProperties
    delaysSecondaryMouseButtonEvents: boolean;
    setDelaysSecondaryMouseButtonEvents(_: boolean)
    // ownInstanceProperties
    delegate: NSGestureRecognizerDelegate;
    setDelegate(_: NSGestureRecognizerDelegate)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    pressureConfiguration: NSPressureConfiguration;
    setPressureConfiguration(_: NSPressureConfiguration)
    // ownInstanceProperties
    state: NSGestureRecognizer.State;
    setState(_: NSGestureRecognizer.State)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    view: NSView;
    // compoundInstanceMethods
    canBePreventedByGestureRecognizer(by: NSGestureRecognizer): boolean;
    // compoundInstanceMethods
    canPreventGestureRecognizer(_: NSGestureRecognizer): boolean;
    // compoundInstanceMethods
    flagsChanged(with_: NSEvent): void;
    // compoundInstanceMethods
    static createWithTargetAction(target?: any, action?: string): NSGestureRecognizer;
    // compoundInstanceMethods
    keyDown(with_: NSEvent): void;
    // compoundInstanceMethods
    keyUp(with_: NSEvent): void;
    // compoundInstanceMethods
    locationInView(in_?: NSView): CGPoint;
    // compoundInstanceMethods
    magnifyWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseDown(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseDragged(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseUp(with_: NSEvent): void;
    // compoundInstanceMethods
    otherMouseDown(with_: NSEvent): void;
    // compoundInstanceMethods
    otherMouseDragged(with_: NSEvent): void;
    // compoundInstanceMethods
    otherMouseUp(with_: NSEvent): void;
    // compoundInstanceMethods
    pressureChangeWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    reset(): void;
    // compoundInstanceMethods
    rightMouseDown(with_: NSEvent): void;
    // compoundInstanceMethods
    rightMouseDragged(with_: NSEvent): void;
    // compoundInstanceMethods
    rightMouseUp(with_: NSEvent): void;
    // compoundInstanceMethods
    rotateWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    shouldBeRequiredToFailByGestureRecognizer(by: NSGestureRecognizer): boolean;
    // compoundInstanceMethods
    shouldRequireFailureOfGestureRecognizer(of: NSGestureRecognizer): boolean;
    // compoundInstanceMethods
    tabletPoint(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesBeganWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesCancelledWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesEndedWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesMovedWithEvent(with_: NSEvent): void;
  }

  interface NSGestureRecognizerDelegate extends NSObject {
    // instance method
    gestureRecognizerShouldAttemptToRecognizeWithEvent?(_: NSGestureRecognizer, shouldAttemptToRecognizeWith: NSEvent): boolean;
    // instance method
    gestureRecognizerShouldRecognizeSimultaneouslyWithGestureRecognizer?(_: NSGestureRecognizer, shouldRecognizeSimultaneouslyWith: NSGestureRecognizer): boolean;
    // instance method
    gestureRecognizerShouldRequireFailureOfGestureRecognizer?(_: NSGestureRecognizer, shouldRequireFailureOf: NSGestureRecognizer): boolean;
    // instance method
    gestureRecognizerShouldBeRequiredToFailByGestureRecognizer?(_: NSGestureRecognizer, shouldBeRequiredToFailBy: NSGestureRecognizer): boolean;
    // instance method
    gestureRecognizerShouldReceiveTouch?(_: NSGestureRecognizer, shouldReceive: NSTouch): boolean;
    // instance method
    gestureRecognizerShouldBegin?(_: NSGestureRecognizer): boolean;
  }

  // export function NSGetFileType(pboardType: string): string;

  // export function NSGetFileTypes(pboardTypes: string[]): string[];

  // interface
  class NSGlyphGenerator extends NSObject {
    // ownStaticProperties
    static sharedGlyphGenerator: NSGlyphGenerator;
    // compoundInstanceMethods
    generateGlyphsForGlyphStorageDesiredNumberOfCharactersGlyphIndexCharacterIndex(for_: NSGlyphStorage, desiredNumberOfCharacters: number, glyphIndex?: number, characterIndex?: number): void;
  }

  // interface
  class NSGlyphInfo extends NSObject {
    // ownInstanceProperties
    baseString: string;
    // ownInstanceProperties
    characterCollection: NSCharacterCollection;
    // ownInstanceProperties
    characterIdentifier: number;
    // ownInstanceProperties
    glyphID: number;
    // ownInstanceProperties
    glyphName: string;
  }

  interface NSGlyphStorage {
    // instance method
    attributedString(): NSAttributedString;
    // instance method
    insertGlyphsLengthForStartingGlyphAtIndexCharacterIndex(_: number, length: number, forStartingGlyphAt: number, characterIndex: number): void;
    // instance method
    layoutOptions(): number;
    // instance method
    setIntAttributeValueForGlyphAtIndex(_: number, value: number, forGlyphAt: number): void;
  }

  // interface
  class NSGradient extends NSObject {
    // ownInstanceProperties
    colorSpace: NSColorSpace;
    // ownInstanceProperties
    numberOfColorStops: number;
    // compoundInstanceMethods
    drawFromCenterRadiusToCenterRadiusOptions(fromCenter: CGPoint, radius: number, toCenter: CGPoint, radius2: number, options: NSGradient.DrawingOptions): void;
    // compoundInstanceMethods
    drawFromPointToPointOptions(from: CGPoint, to: CGPoint, options: NSGradient.DrawingOptions): void;
    // compoundInstanceMethods
    drawInBezierPathAngle(in_: NSBezierPath, angle: number): void;
    // compoundInstanceMethods
    drawInBezierPathRelativeCenterPosition(in_: NSBezierPath, relativeCenterPosition: CGPoint): void;
    // compoundInstanceMethods
    drawInRectAngle(in_: CGRect, angle: number): void;
    // compoundInstanceMethods
    drawInRectRelativeCenterPosition(in_: CGRect, relativeCenterPosition: CGPoint): void;
    // compoundInstanceMethods
    getColorLocationAtIndex(_?: NSColor, location?: number, at?: number): void;
    // compoundInstanceMethods
    static createWithColors(colors: NSColor[]): NSGradient;
    // compoundInstanceMethods
    static createWithColorsAtLocationsColorSpace(colors: NSColor[], atLocations?: number, colorSpace?: NSColorSpace): NSGradient;
    // compoundInstanceMethods
    static createWithColorsAndLocations(colorsAndLocations: NSColor): NSGradient;
    // compoundInstanceMethods
    static createWithStartingColorEndingColor(startingColor: NSColor, endingColor: NSColor): NSGradient;
    // compoundInstanceMethods
    interpolatedColorAtLocation(atLocation: number): NSColor;
  }

  // interface
  class NSGraphicsContext extends NSObject {
    // compoundStaticMethods
    static currentContextDrawingToScreen(): boolean;
    // compoundStaticMethods
    static restoreGraphicsState(): void;
    // compoundStaticMethods
    static saveGraphicsState(): void;
    // ownInstanceProperties
    CGContext: any;
    // ownInstanceProperties
    CIContext: CIContext;
    // ownInstanceProperties
    attributes: Map<string, any>;
    // ownInstanceProperties
    colorRenderingIntent: NSColorRenderingIntent;
    setColorRenderingIntent(_: NSColorRenderingIntent)
    // ownInstanceProperties
    compositingOperation: NSCompositingOperation;
    setCompositingOperation(_: NSCompositingOperation)
    // ownInstanceProperties
    isDrawingToScreen: boolean;
    // ownInstanceProperties
    isFlipped: boolean;
    // ownInstanceProperties
    imageInterpolation: NSImageInterpolation;
    setImageInterpolation(_: NSImageInterpolation)
    // ownInstanceProperties
    patternPhase: CGPoint;
    setPatternPhase(_: CGPoint)
    // ownInstanceProperties
    shouldAntialias: boolean;
    setShouldAntialias(_: boolean)
    // ownStaticProperties
    static currentContext: NSGraphicsContext;
    setCurrentContext(_: NSGraphicsContext)
    // compoundInstanceMethods
    flushGraphics(): void;
    // compoundInstanceMethods
    restoreGraphicsState(): void;
    // compoundInstanceMethods
    saveGraphicsState(): void;
  }

  // interface
  class NSGridCell extends NSObject {
    // ownInstanceProperties
    column: NSGridColumn;
    // ownInstanceProperties
    contentView: NSView;
    setContentView(_: NSView)
    // ownInstanceProperties
    customPlacementConstraints: NSLayoutConstraint[];
    setCustomPlacementConstraints(_: NSLayoutConstraint[])
    // ownInstanceProperties
    row: NSGridRow;
    // ownInstanceProperties
    rowAlignment: NSGridRow.Alignment;
    setRowAlignment(_: NSGridRow.Alignment)
    // ownInstanceProperties
    xPlacement: NSGridCell.Placement;
    setXPlacement(_: NSGridCell.Placement)
    // ownInstanceProperties
    yPlacement: NSGridCell.Placement;
    setYPlacement(_: NSGridCell.Placement)
    // ownStaticProperties
    static emptyContentView: NSView;
  }

  // interface
  class NSGridColumn extends NSObject {
    // ownInstanceProperties
    gridView: NSGridView;
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    leadingPadding: number;
    setLeadingPadding(_: number)
    // ownInstanceProperties
    numberOfCells: number;
    // ownInstanceProperties
    trailingPadding: number;
    setTrailingPadding(_: number)
    // ownInstanceProperties
    width: number;
    setWidth(_: number)
    // ownInstanceProperties
    xPlacement: NSGridCell.Placement;
    setXPlacement(_: NSGridCell.Placement)
    // compoundInstanceMethods
    cellAtIndex(at: number): NSGridCell;
    // compoundInstanceMethods
    mergeCellsInRange(in_: NSRange): void;
  }

  // interface
  class NSGridRow extends NSObject {
    // ownInstanceProperties
    bottomPadding: number;
    setBottomPadding(_: number)
    // ownInstanceProperties
    gridView: NSGridView;
    // ownInstanceProperties
    height: number;
    setHeight(_: number)
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    numberOfCells: number;
    // ownInstanceProperties
    rowAlignment: NSGridRow.Alignment;
    setRowAlignment(_: NSGridRow.Alignment)
    // ownInstanceProperties
    topPadding: number;
    setTopPadding(_: number)
    // ownInstanceProperties
    yPlacement: NSGridCell.Placement;
    setYPlacement(_: NSGridCell.Placement)
    // compoundInstanceMethods
    cellAtIndex(at: number): NSGridCell;
    // compoundInstanceMethods
    mergeCellsInRange(in_: NSRange): void;
  }

  // interface
  class NSGridView extends NSView {
    // ownInstanceProperties
    columnSpacing: number;
    setColumnSpacing(_: number)
    // ownInstanceProperties
    numberOfColumns: number;
    // ownInstanceProperties
    numberOfRows: number;
    // ownInstanceProperties
    rowAlignment: NSGridRow.Alignment;
    setRowAlignment(_: NSGridRow.Alignment)
    // ownInstanceProperties
    rowSpacing: number;
    setRowSpacing(_: number)
    // ownInstanceProperties
    xPlacement: NSGridCell.Placement;
    setXPlacement(_: NSGridCell.Placement)
    // ownInstanceProperties
    yPlacement: NSGridCell.Placement;
    setYPlacement(_: NSGridCell.Placement)
    // compoundInstanceMethods
    addColumnWithViews(with_: NSView[]): NSGridColumn;
    // compoundInstanceMethods
    addRowWithViews(with_: NSView[]): NSGridRow;
    // compoundInstanceMethods
    cellAtColumnIndexRowIndex(atColumnIndex: number, rowIndex: number): NSGridCell;
    // compoundInstanceMethods
    cellForView(for_: NSView): NSGridCell;
    // compoundInstanceMethods
    columnAtIndex(at: number): NSGridColumn;
    // compoundInstanceMethods
    indexOfColumn(of: NSGridColumn): number;
    // compoundInstanceMethods
    indexOfRow(of: NSGridRow): number;
    // compoundInstanceMethods
    insertColumnAtIndexWithViews(at: number, with_: NSView[]): NSGridColumn;
    // compoundInstanceMethods
    insertRowAtIndexWithViews(at: number, with_: NSView[]): NSGridRow;
    // compoundInstanceMethods
    mergeCellsInHorizontalRangeVerticalRange(inHorizontalRange: NSRange, verticalRange: NSRange): void;
    // compoundInstanceMethods
    moveColumnAtIndexToIndex(at: number, to: number): void;
    // compoundInstanceMethods
    moveRowAtIndexToIndex(at: number, to: number): void;
    // compoundInstanceMethods
    removeColumnAtIndex(at: number): void;
    // compoundInstanceMethods
    removeRowAtIndex(at: number): void;
    // compoundInstanceMethods
    rowAtIndex(at: number): NSGridRow;
  }

  // interface
  class NSGroupTouchBarItem extends NSTouchBarItem {
    // compoundStaticMethods
    static alertStyleGroupItemWithIdentifier(alertStyleWithIdentifier: string): NSGroupTouchBarItem;
    // compoundStaticMethods
    static groupItemWithIdentifierItems(identifier: string, items: NSTouchBarItem[]): NSGroupTouchBarItem;
    // compoundStaticMethods
    static groupItemWithIdentifierItemsAllowedCompressionOptions(identifier: string, items: NSTouchBarItem[], allowedCompressionOptions: NSUserInterfaceCompressionOptions): NSGroupTouchBarItem;
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    effectiveCompressionOptions: NSUserInterfaceCompressionOptions;
    // ownInstanceProperties
    groupTouchBar: NSTouchBar;
    setGroupTouchBar(_: NSTouchBar)
    // ownInstanceProperties
    groupUserInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setGroupUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection)
    // ownInstanceProperties
    preferredItemWidth: number;
    setPreferredItemWidth(_: number)
    // ownInstanceProperties
    prefersEqualWidths: boolean;
    setPrefersEqualWidths(_: boolean)
    // ownInstanceProperties
    prioritizedCompressionOptions: NSUserInterfaceCompressionOptions[];
    setPrioritizedCompressionOptions(_: NSUserInterfaceCompressionOptions[])
  }

  // interface
  class NSHapticFeedbackManager extends NSObject {
    // ownStaticProperties
    static defaultPerformer: NSHapticFeedbackPerformer;
  }

  interface NSHapticFeedbackPerformer extends NSObject {
    // instance method
    performFeedbackPatternPerformanceTime(_: NSHapticFeedbackManager.FeedbackPattern, performanceTime: NSHapticFeedbackManager.PerformanceTime): void;
  }

  // interface
  class NSHelpManager extends NSObject {
    // ownStaticProperties
    static isContextHelpModeActive: boolean;
    setContextHelpModeActive(_: boolean)
    // ownStaticProperties
    static sharedHelpManager: NSHelpManager;
    // compoundInstanceMethods
    contextHelpForObject(for_: any): NSAttributedString;
    // compoundInstanceMethods
    findStringInBook(_: string, inBook?: string): void;
    // compoundInstanceMethods
    openHelpAnchorInBook(_: string, inBook?: string): void;
    // compoundInstanceMethods
    registerBooksInBundle(in_: Bundle): boolean;
    // compoundInstanceMethods
    removeContextHelpForObject(for_: any): void;
    // compoundInstanceMethods
    setContextHelpForObject(_: NSAttributedString, for_: any): void;
    // compoundInstanceMethods
    showContextHelpForObjectLocationHint(for_: any, locationHint: CGPoint): boolean;
  }

  interface NSIgnoreMisspelledWords {
    // instance method
    ignoreSpelling(_?: any): void;
  }

  // interface
  class NSImage extends NSObject {
    // compoundStaticMethods
    static canInitWithPasteboard(with_: NSPasteboard): boolean;
    // ownInstanceProperties
    TIFFRepresentation: NSData;
    // ownInstanceProperties
    accessibilityDescription: string;
    setAccessibilityDescription(_: string)
    // ownInstanceProperties
    alignmentRect: CGRect;
    setAlignmentRect(_: CGRect)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    cacheMode: NSImage.CacheMode;
    setCacheMode(_: NSImage.CacheMode)
    // ownInstanceProperties
    capInsets: NSEdgeInsets;
    setCapInsets(_: NSEdgeInsets)
    // ownInstanceProperties
    delegate: NSImageDelegate;
    setDelegate(_: NSImageDelegate)
    // ownInstanceProperties
    matchesOnMultipleResolution: boolean;
    setMatchesOnMultipleResolution(_: boolean)
    // ownInstanceProperties
    matchesOnlyOnBestFittingAxis: boolean;
    setMatchesOnlyOnBestFittingAxis(_: boolean)
    // ownInstanceProperties
    prefersColorMatch: boolean;
    setPrefersColorMatch(_: boolean)
    // ownInstanceProperties
    representations: NSImageRep[];
    // ownInstanceProperties
    resizingMode: NSImage.ResizingMode;
    setResizingMode(_: NSImage.ResizingMode)
    // ownInstanceProperties
    size: CGSize;
    setSize(_: CGSize)
    // ownInstanceProperties
    isTemplate: boolean;
    setTemplate(_: boolean)
    // ownInstanceProperties
    usesEPSOnResolutionMismatch: boolean;
    setUsesEPSOnResolutionMismatch(_: boolean)
    // ownInstanceProperties
    isValid: boolean;
    // ownStaticProperties
    static imageTypes: string[];
    // ownStaticProperties
    static imageUnfilteredTypes: string[];
    // compoundInstanceMethods
    CGImageForProposedRectContextHints(forProposedRect?: NSRect, context?: NSGraphicsContext, hints?: Map<string, any>): any;
    // compoundInstanceMethods
    TIFFRepresentationUsingCompressionFactor(using: NSBitmapImageRep.TIFFCompression, factor: number): NSData;
    // compoundInstanceMethods
    addRepresentation(_: NSImageRep): void;
    // compoundInstanceMethods
    addRepresentations(_: NSImageRep[]): void;
    // compoundInstanceMethods
    bestRepresentationForRectContextHints(for_: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>): NSImageRep;
    // compoundInstanceMethods
    cancelIncrementalLoad(): void;
    // compoundInstanceMethods
    drawAtPointFromRectOperationFraction(at: CGPoint, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    // compoundInstanceMethods
    drawInRect(in_: CGRect): void;
    // compoundInstanceMethods
    drawInRectFromRectOperationFraction(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    // compoundInstanceMethods
    drawInRectFromRectOperationFractionRespectFlippedHints(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number, respectFlipped: boolean, hints?: Map<string, any>): void;
    // compoundInstanceMethods
    drawRepresentationInRect(_: NSImageRep, in_: CGRect): boolean;
    // compoundInstanceMethods
    hitTestRectWithImageDestinationRectContextHintsFlipped(_: CGRect, withDestinationRect: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>, flipped?: boolean): boolean;
    // compoundInstanceMethods
    static createWithByReferencingFile(byReferencingFile: string): NSImage;
    // compoundInstanceMethods
    static createWithByReferencingURL(byReferencingURL: NSURL): NSImage;
    // compoundInstanceMethods
    static createWithCGImageSize(CGImage: any, size: CGSize): NSImage;
    // compoundInstanceMethods
    static createWithContentsOfFile(contentsOfFile: string): NSImage;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): NSImage;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSImage;
    // compoundInstanceMethods
    static createWithDataIgnoringOrientation(dataIgnoringOrientation: NSData): NSImage;
    // compoundInstanceMethods
    static createWithIconRef(iconRef: any): NSImage;
    // compoundInstanceMethods
    static createWithPasteboard(pasteboard: NSPasteboard): NSImage;
    // compoundInstanceMethods
    static createWithSize(size: CGSize): NSImage;
    // compoundInstanceMethods
    layerContentsForContentsScale(forContentsScale: number): any;
    // compoundInstanceMethods
    lockFocus(): void;
    // compoundInstanceMethods
    lockFocusFlipped(_: boolean): void;
    // compoundInstanceMethods
    name(): string;
    // compoundInstanceMethods
    recache(): void;
    // compoundInstanceMethods
    recommendedLayerContentsScale(_: number): number;
    // compoundInstanceMethods
    removeRepresentation(_: NSImageRep): void;
    // compoundInstanceMethods
    setName(_?: string): boolean;
    // compoundInstanceMethods
    unlockFocus(): void;
  }

  // interface
  class NSImageCell extends NSCell {
    // ownInstanceProperties
    imageAlignment: NSImageAlignment;
    setImageAlignment(_: NSImageAlignment)
    // ownInstanceProperties
    imageFrameStyle: NSImageView.FrameStyle;
    setImageFrameStyle(_: NSImageView.FrameStyle)
    // ownInstanceProperties
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling)
  }

  interface NSImageDelegate extends NSObject {
    // instance method
    imageDidLoadRepresentationWithStatus?(_: NSImage, didLoadRepresentation: NSImageRep, with_: NSImage.LoadStatus): void;
    // instance method
    imageDidLoadPartOfRepresentationWithValidRows?(_: NSImage, didLoadPartOfRepresentation: NSImageRep, withValidRows: number): void;
    // instance method
    imageDidLoadRepresentationHeader?(_: NSImage, didLoadRepresentationHeader: NSImageRep): void;
    // instance method
    imageWillLoadRepresentation?(_: NSImage, willLoadRepresentation: NSImageRep): void;
    // instance method
    imageDidNotDrawInRect?(_: NSImage, in_: CGRect): NSImage;
  }

  // interface
  class NSImageRep extends NSObject {
    // compoundStaticMethods
    static canInitWithData(with_: NSData): boolean;
    // compoundStaticMethods
    static canInitWithPasteboard(with_: NSPasteboard): boolean;
    // compoundStaticMethods
    static imageRepClassForData(for_: NSData): typeof NSObject;
    // compoundStaticMethods
    static imageRepClassForType(forType: string): typeof NSObject;
    // compoundStaticMethods
    static imageRepsWithContentsOfFile(withContentsOfFile: string): NSImageRep[];
    // compoundStaticMethods
    static imageRepsWithContentsOfURL(withContentsOf: NSURL): NSImageRep[];
    // compoundStaticMethods
    static imageRepsWithPasteboard(with_: NSPasteboard): NSImageRep[];
    // compoundStaticMethods
    static registerImageRepClass(_: typeof NSObject): void;
    // compoundStaticMethods
    static unregisterImageRepClass(_: typeof NSObject): void;
    // ownInstanceProperties
    hasAlpha: boolean;
    setAlpha(_: boolean)
    // ownInstanceProperties
    bitsPerSample: number;
    setBitsPerSample(_: number)
    // ownInstanceProperties
    colorSpaceName: string;
    setColorSpaceName(_: string)
    // ownInstanceProperties
    layoutDirection: NSImage.LayoutDirection;
    setLayoutDirection(_: NSImage.LayoutDirection)
    // ownInstanceProperties
    isOpaque: boolean;
    setOpaque(_: boolean)
    // ownInstanceProperties
    pixelsHigh: number;
    setPixelsHigh(_: number)
    // ownInstanceProperties
    pixelsWide: number;
    setPixelsWide(_: number)
    // ownInstanceProperties
    size: CGSize;
    setSize(_: CGSize)
    // ownStaticProperties
    static imageTypes: string[];
    // ownStaticProperties
    static imageUnfilteredTypes: string[];
    // ownStaticProperties
    static registeredImageRepClasses: typeof NSObject[];
    // compoundInstanceMethods
    CGImageForProposedRectContextHints(forProposedRect?: NSRect, context?: NSGraphicsContext, hints?: Map<string, any>): any;
    // compoundInstanceMethods
    draw(): boolean;
    // compoundInstanceMethods
    drawAtPoint(at: CGPoint): boolean;
    // compoundInstanceMethods
    drawInRect(in_: CGRect): boolean;
    // compoundInstanceMethods
    drawInRectFromRectOperationFractionRespectFlippedHints(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number, respectFlipped: boolean, hints?: Map<string, any>): boolean;
  }

  // interface
  class NSImageView extends NSControl {
    // ownInstanceProperties
    allowsCutCopyPaste: boolean;
    setAllowsCutCopyPaste(_: boolean)
    // ownInstanceProperties
    animates: boolean;
    setAnimates(_: boolean)
    // ownInstanceProperties
    contentTintColor: NSColor;
    setContentTintColor(_: NSColor)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    imageAlignment: NSImageAlignment;
    setImageAlignment(_: NSImageAlignment)
    // ownInstanceProperties
    imageFrameStyle: NSImageView.FrameStyle;
    setImageFrameStyle(_: NSImageView.FrameStyle)
    // ownInstanceProperties
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling)
  }

  interface NSInputServerMouseTracker {
  }

  interface NSInputServiceProvider {
  }

  // export function NSIsControllerMarker(object_: any): boolean;

  // interface
  class NSLayoutAnchor<AnchorType> extends NSObject {
    // ownInstanceProperties
    constraintsAffectingLayout: NSLayoutConstraint[];
    // ownInstanceProperties
    hasAmbiguousLayout: boolean;
    // ownInstanceProperties
    item: any;
    // ownInstanceProperties
    name: string;
    // compoundInstanceMethods
    constraintWithEqualTo(equalTo: NSLayoutAnchor<AnchorType>): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintWithEqualToConstant(equalTo: NSLayoutAnchor<AnchorType>, constant: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintWithGreaterThanOrEqualTo(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintWithGreaterThanOrEqualToConstant(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintWithLessThanOrEqualTo(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintWithLessThanOrEqualToConstant(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: number): NSLayoutConstraint;
  }

  // interface
  class NSLayoutConstraint extends NSObject {
    // compoundStaticMethods
    static activateConstraints(_: NSLayoutConstraint[]): void;
    // compoundStaticMethods
    static constraintsWithVisualFormatOptionsMetricsViews(withVisualFormat: string, options: NSLayoutConstraint.FormatOptions, metrics?: Map<string, any>, views?: Map<string, any>): NSLayoutConstraint[];
    // compoundStaticMethods
    static deactivateConstraints(_: NSLayoutConstraint[]): void;
    // ownInstanceProperties
    isActive: boolean;
    setActive(_: boolean)
    // ownInstanceProperties
    constant: number;
    setConstant(_: number)
    // ownInstanceProperties
    firstAnchor: NSLayoutAnchor<any>;
    // ownInstanceProperties
    firstAttribute: NSLayoutConstraint.Attribute;
    // ownInstanceProperties
    firstItem: any;
    // ownInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // ownInstanceProperties
    multiplier: number;
    // ownInstanceProperties
    priority: number;
    setPriority(_: number)
    // ownInstanceProperties
    relation: NSLayoutConstraint.Relation;
    // ownInstanceProperties
    secondAnchor: NSLayoutAnchor<any>;
    // ownInstanceProperties
    secondAttribute: NSLayoutConstraint.Attribute;
    // ownInstanceProperties
    secondItem: any;
    // ownInstanceProperties
    shouldBeArchived: boolean;
    setShouldBeArchived(_: boolean)
  }

  // interface
  class NSLayoutDimension extends NSLayoutAnchor<NSLayoutDimension> {
    // compoundInstanceMethods
    constraintEqualToAnchorMultiplier(equalTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintEqualToAnchorMultiplierConstant(equalTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintEqualToConstant(equalToConstant: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintGreaterThanOrEqualToAnchorMultiplier(greaterThanOrEqualTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintGreaterThanOrEqualToAnchorMultiplierConstant(greaterThanOrEqualTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintGreaterThanOrEqualToConstant(greaterThanOrEqualToConstant: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintLessThanOrEqualToAnchorMultiplier(lessThanOrEqualTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintLessThanOrEqualToAnchorMultiplierConstant(lessThanOrEqualTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
    // compoundInstanceMethods
    constraintLessThanOrEqualToConstant(lessThanOrEqualToConstant: number): NSLayoutConstraint;
  }

  // interface
  class NSLayoutGuide extends NSObject implements NSUserInterfaceItemIdentification {
    // ownInstanceProperties
    bottomAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    centerXAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    centerYAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    frame: CGRect;
    // ownInstanceProperties
    hasAmbiguousLayout: boolean;
    // ownInstanceProperties
    heightAnchor: NSLayoutDimension;
    // ownInstanceProperties
    leadingAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    leftAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    owningView: NSView;
    setOwningView(_: NSView)
    // ownInstanceProperties
    rightAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    topAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    trailingAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    widthAnchor: NSLayoutDimension;
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    constraintsAffectingLayoutForOrientation(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint[];
  }

  // interface
  class NSLayoutManager extends NSObject {
    // ownInstanceProperties
    allowsNonContiguousLayout: boolean;
    setAllowsNonContiguousLayout(_: boolean)
    // ownInstanceProperties
    backgroundLayoutEnabled: boolean;
    setBackgroundLayoutEnabled(_: boolean)
    // ownInstanceProperties
    defaultAttachmentScaling: NSImageScaling;
    setDefaultAttachmentScaling(_: NSImageScaling)
    // ownInstanceProperties
    delegate: NSLayoutManagerDelegate;
    setDelegate(_: NSLayoutManagerDelegate)
    // ownInstanceProperties
    extraLineFragmentRect: CGRect;
    // ownInstanceProperties
    extraLineFragmentTextContainer: NSTextContainer;
    // ownInstanceProperties
    extraLineFragmentUsedRect: CGRect;
    // ownInstanceProperties
    firstTextView: NSTextView;
    // ownInstanceProperties
    glyphGenerator: NSGlyphGenerator;
    setGlyphGenerator(_: NSGlyphGenerator)
    // ownInstanceProperties
    hasNonContiguousLayout: boolean;
    // ownInstanceProperties
    limitsLayoutForSuspiciousContents: boolean;
    setLimitsLayoutForSuspiciousContents(_: boolean)
    // ownInstanceProperties
    numberOfGlyphs: number;
    // ownInstanceProperties
    showsControlCharacters: boolean;
    setShowsControlCharacters(_: boolean)
    // ownInstanceProperties
    showsInvisibleCharacters: boolean;
    setShowsInvisibleCharacters(_: boolean)
    // ownInstanceProperties
    textContainers: NSTextContainer[];
    // ownInstanceProperties
    textStorage: NSTextStorage;
    setTextStorage(_: NSTextStorage)
    // ownInstanceProperties
    textViewForBeginningOfSelection: NSTextView;
    // ownInstanceProperties
    typesetter: NSTypesetter;
    setTypesetter(_: NSTypesetter)
    // ownInstanceProperties
    typesetterBehavior: NSLayoutManager.TypesetterBehavior;
    setTypesetterBehavior(_: NSLayoutManager.TypesetterBehavior)
    // ownInstanceProperties
    usesDefaultHyphenation: boolean;
    setUsesDefaultHyphenation(_: boolean)
    // ownInstanceProperties
    usesFontLeading: boolean;
    setUsesFontLeading(_: boolean)
    // compoundInstanceMethods
    CGGlyphAtIndex(at: number): number;
    // compoundInstanceMethods
    CGGlyphAtIndexIsValidIndex(at: number, isValidIndex?: boolean): number;
    // compoundInstanceMethods
    addTemporaryAttributeValueForCharacterRange(_: string, value: any, forCharacterRange: NSRange): void;
    // compoundInstanceMethods
    addTemporaryAttributesForCharacterRange(_: Map<string, any>, forCharacterRange: NSRange): void;
    // compoundInstanceMethods
    addTextContainer(_: NSTextContainer): void;
    // compoundInstanceMethods
    attachmentSizeForGlyphAtIndex(forGlyphAt: number): CGSize;
    // compoundInstanceMethods
    boundingRectForGlyphRangeInTextContainer(forGlyphRange: NSRange, in_: NSTextContainer): CGRect;
    // compoundInstanceMethods
    boundsRectForTextBlockAtIndexEffectiveRange(for_: NSTextBlock, at: number, effectiveRange?: NSRange): CGRect;
    // compoundInstanceMethods
    boundsRectForTextBlockGlyphRange(for_: NSTextBlock, glyphRange: NSRange): CGRect;
    // compoundInstanceMethods
    characterIndexForGlyphAtIndex(at: number): number;
    // compoundInstanceMethods
    characterIndexForPointInTextContainerFractionOfDistanceBetweenInsertionPoints(for_: CGPoint, in_: NSTextContainer, fractionOfDistanceBetweenInsertionPoints?: number): number;
    // compoundInstanceMethods
    characterRangeForGlyphRangeActualGlyphRange(forGlyphRange: NSRange, actualGlyphRange?: NSRange): NSRange;
    // compoundInstanceMethods
    defaultBaselineOffsetForFont(for_: NSFont): number;
    // compoundInstanceMethods
    defaultLineHeightForFont(for_: NSFont): number;
    // compoundInstanceMethods
    drawBackgroundForGlyphRangeAtPoint(forGlyphRange: NSRange, at: CGPoint): void;
    // compoundInstanceMethods
    drawGlyphsForGlyphRangeAtPoint(forGlyphRange: NSRange, at: CGPoint): void;
    // compoundInstanceMethods
    drawStrikethroughForGlyphRangeStrikethroughTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: number, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    // compoundInstanceMethods
    drawUnderlineForGlyphRangeUnderlineTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: number, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    // compoundInstanceMethods
    drawsOutsideLineFragmentForGlyphAtIndex(forGlyphAt: number): boolean;
    // compoundInstanceMethods
    ensureGlyphsForCharacterRange(forCharacterRange: NSRange): void;
    // compoundInstanceMethods
    ensureGlyphsForGlyphRange(forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    ensureLayoutForBoundingRectInTextContainer(forBoundingRect: CGRect, in_: NSTextContainer): void;
    // compoundInstanceMethods
    ensureLayoutForCharacterRange(forCharacterRange: NSRange): void;
    // compoundInstanceMethods
    ensureLayoutForGlyphRange(forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    ensureLayoutForTextContainer(for_: NSTextContainer): void;
    // compoundInstanceMethods
    enumerateEnclosingRectsWithForGlyphRangeWithinSelectedGlyphRangeInUsing(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in_: NSTextContainer, using: (p1: CGRect, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateLineFragmentsWithForGlyphRangeUsing(forGlyphRange: NSRange, using: (p1: CGRect, p2: CGRect, p3: NSTextContainer, p4: NSRange, p5: boolean) => void): void;
    // compoundInstanceMethods
    fillBackgroundRectArrayCountForCharacterRangeColor(_: NSRect, count: number, forCharacterRange: NSRange, color: NSColor): void;
    // compoundInstanceMethods
    firstUnlaidCharacterIndex(): number;
    // compoundInstanceMethods
    firstUnlaidGlyphIndex(): number;
    // compoundInstanceMethods
    fractionOfDistanceThroughGlyphForPointInTextContainer(for_: CGPoint, in_: NSTextContainer): number;
    // compoundInstanceMethods
    getFirstUnlaidCharacterIndexGlyphIndex(_?: number, glyphIndex?: number): void;
    // compoundInstanceMethods
    getGlyphsInRangeGlyphsPropertiesCharacterIndexesBidiLevels(in_: NSRange, glyphs?: number, properties?: NSLayoutManager.GlyphProperty, characterIndexes?: number, bidiLevels?: string): number;
    // compoundInstanceMethods
    getLineFragmentInsertionPointsForCharacterAtIndexAlternatePositionsInDisplayOrderPositionsCharacterIndexes(forCharacterAt: number, alternatePositions: boolean, inDisplayOrder: boolean, positions?: number, characterIndexes?: number): number;
    // compoundInstanceMethods
    glyphAtIndex(at: number): number;
    // compoundInstanceMethods
    glyphAtIndexIsValidIndex(at: number, isValidIndex?: boolean): number;
    // compoundInstanceMethods
    glyphIndexForCharacterAtIndex(at: number): number;
    // compoundInstanceMethods
    glyphIndexForPointInTextContainer(for_: CGPoint, in_: NSTextContainer): number;
    // compoundInstanceMethods
    glyphIndexForPointInTextContainerFractionOfDistanceThroughGlyph(for_: CGPoint, in_: NSTextContainer, fractionOfDistanceThroughGlyph?: number): number;
    // compoundInstanceMethods
    glyphRangeForBoundingRectInTextContainer(forBoundingRect: CGRect, in_: NSTextContainer): NSRange;
    // compoundInstanceMethods
    glyphRangeForBoundingRectWithoutAdditionalLayoutInTextContainer(forBoundingRectWithoutAdditionalLayout: CGRect, in_: NSTextContainer): NSRange;
    // compoundInstanceMethods
    glyphRangeForCharacterRangeActualCharacterRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): NSRange;
    // compoundInstanceMethods
    glyphRangeForTextContainer(for_: NSTextContainer): NSRange;
    // compoundInstanceMethods
    insertTextContainerAtIndex(_: NSTextContainer, at: number): void;
    // compoundInstanceMethods
    invalidateDisplayForCharacterRange(forCharacterRange: NSRange): void;
    // compoundInstanceMethods
    invalidateDisplayForGlyphRange(forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    invalidateGlyphsForCharacterRangeChangeInLengthActualCharacterRange(forCharacterRange: NSRange, changeInLength: number, actualCharacterRange?: NSRange): void;
    // compoundInstanceMethods
    invalidateLayoutForCharacterRangeActualCharacterRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): void;
    // compoundInstanceMethods
    isValidGlyphIndex(_: number): boolean;
    // compoundInstanceMethods
    layoutManagerOwnsFirstResponderInWindow(in_: NSWindow): boolean;
    // compoundInstanceMethods
    layoutRectForTextBlockAtIndexEffectiveRange(for_: NSTextBlock, at: number, effectiveRange?: NSRange): CGRect;
    // compoundInstanceMethods
    layoutRectForTextBlockGlyphRange(for_: NSTextBlock, glyphRange: NSRange): CGRect;
    // compoundInstanceMethods
    lineFragmentRectForGlyphAtIndexEffectiveRange(forGlyphAt: number, effectiveRange?: NSRange): CGRect;
    // compoundInstanceMethods
    lineFragmentRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): CGRect;
    // compoundInstanceMethods
    lineFragmentUsedRectForGlyphAtIndexEffectiveRange(forGlyphAt: number, effectiveRange?: NSRange): CGRect;
    // compoundInstanceMethods
    lineFragmentUsedRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): CGRect;
    // compoundInstanceMethods
    locationForGlyphAtIndex(forGlyphAt: number): CGPoint;
    // compoundInstanceMethods
    notShownAttributeForGlyphAtIndex(forGlyphAt: number): boolean;
    // compoundInstanceMethods
    processEditingForTextStorageEditedRangeChangeInLengthInvalidatedRange(for_: NSTextStorage, edited: NSTextStorageEditActions, range: NSRange, changeInLength: number, invalidatedRange: NSRange): void;
    // compoundInstanceMethods
    propertyForGlyphAtIndex(at: number): NSLayoutManager.GlyphProperty;
    // compoundInstanceMethods
    rangeOfNominallySpacedGlyphsContainingIndex(ofNominallySpacedGlyphsContaining: number): NSRange;
    // compoundInstanceMethods
    rectArrayForCharacterRangeWithinSelectedCharacterRangeInTextContainerRectCount(forCharacterRange: NSRange, withinSelectedCharacterRange: NSRange, in_: NSTextContainer, rectCount: number): NSRect;
    // compoundInstanceMethods
    rectArrayForGlyphRangeWithinSelectedGlyphRangeInTextContainerRectCount(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in_: NSTextContainer, rectCount: number): NSRect;
    // compoundInstanceMethods
    removeTemporaryAttributeForCharacterRange(_: string, forCharacterRange: NSRange): void;
    // compoundInstanceMethods
    removeTextContainerAtIndex(at: number): void;
    // compoundInstanceMethods
    replaceTextStorage(_: NSTextStorage): void;
    // compoundInstanceMethods
    rulerAccessoryViewForTextViewParagraphStyleRulerEnabled(for_: NSTextView, paragraphStyle: NSParagraphStyle, ruler: NSRulerView, enabled: boolean): NSView;
    // compoundInstanceMethods
    rulerMarkersForTextViewParagraphStyleRuler(for_: NSTextView, paragraphStyle: NSParagraphStyle, ruler: NSRulerView): NSRulerMarker[];
    // compoundInstanceMethods
    setAttachmentSizeForGlyphRange(_: CGSize, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setBoundsRectForTextBlockGlyphRange(_: CGRect, for_: NSTextBlock, glyphRange: NSRange): void;
    // compoundInstanceMethods
    setDrawsOutsideLineFragmentForGlyphAtIndex(_: boolean, forGlyphAt: number): void;
    // compoundInstanceMethods
    setExtraLineFragmentRectUsedRectTextContainer(_: CGRect, usedRect: CGRect, textContainer: NSTextContainer): void;
    // compoundInstanceMethods
    setGlyphsPropertiesCharacterIndexesFontForGlyphRange(_: number, properties: NSLayoutManager.GlyphProperty, characterIndexes: number, font: NSFont, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setLayoutRectForTextBlockGlyphRange(_: CGRect, for_: NSTextBlock, glyphRange: NSRange): void;
    // compoundInstanceMethods
    setLineFragmentRectForGlyphRangeUsedRect(_: CGRect, forGlyphRange: NSRange, usedRect: CGRect): void;
    // compoundInstanceMethods
    setLocationForStartOfGlyphRange(_: CGPoint, forStartOfGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setNotShownAttributeForGlyphAtIndex(_: boolean, forGlyphAt: number): void;
    // compoundInstanceMethods
    setTemporaryAttributesForCharacterRange(_: Map<string, any>, forCharacterRange: NSRange): void;
    // compoundInstanceMethods
    setTextContainerForGlyphRange(_: NSTextContainer, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    showAttachmentCellInRectCharacterIndex(_: NSCell, in_: CGRect, characterIndex: number): void;
    // compoundInstanceMethods
    showCGGlyphsPositionsCountFontTextMatrixAttributesInContext(_: number, positions: NSPoint, count: number, font: NSFont, textMatrix: CGAffineTransform, attributes: Map<string, any>, in_: any): void;
    // compoundInstanceMethods
    strikethroughGlyphRangeStrikethroughTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(_: NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    // compoundInstanceMethods
    temporaryAttributeAtCharacterIndexEffectiveRange(_: string, atCharacterIndex: number, effectiveRange?: NSRange): any;
    // compoundInstanceMethods
    temporaryAttributeAtCharacterIndexLongestEffectiveRangeInRange(_: string, atCharacterIndex: number, longestEffectiveRange?: NSRange, in_?: NSRange): any;
    // compoundInstanceMethods
    temporaryAttributesAtCharacterIndexEffectiveRange(atCharacterIndex: number, effectiveRange?: NSRange): Map<string, any>;
    // compoundInstanceMethods
    temporaryAttributesAtCharacterIndexLongestEffectiveRangeInRange(atCharacterIndex: number, longestEffectiveRange?: NSRange, in_?: NSRange): Map<string, any>;
    // compoundInstanceMethods
    textContainerChangedGeometry(_: NSTextContainer): void;
    // compoundInstanceMethods
    textContainerChangedTextView(_: NSTextContainer): void;
    // compoundInstanceMethods
    textContainerForGlyphAtIndexEffectiveRange(forGlyphAt: number, effectiveRange?: NSRange): NSTextContainer;
    // compoundInstanceMethods
    textContainerForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): NSTextContainer;
    // compoundInstanceMethods
    truncatedGlyphRangeInLineFragmentForGlyphAtIndex(inLineFragmentForGlyphAt: number): NSRange;
    // compoundInstanceMethods
    underlineGlyphRangeUnderlineTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(_: NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    // compoundInstanceMethods
    usedRectForTextContainer(for_: NSTextContainer): CGRect;
  }

  interface NSLayoutManagerDelegate extends NSObject {
    // instance method
    layoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect?(_: NSLayoutManager, lineSpacingAfterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // instance method
    layoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect?(_: NSLayoutManager, paragraphSpacingBeforeGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // instance method
    layoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect?(_: NSLayoutManager, paragraphSpacingAfterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // instance method
    layoutManagerShouldUseActionForControlCharacterAtIndex?(_: NSLayoutManager, shouldUse: NSLayoutManager.ControlCharacterAction, forControlCharacterAt: number): NSLayoutManager.ControlCharacterAction;
    // instance method
    layoutManagerShouldBreakLineByWordBeforeCharacterAtIndex?(_: NSLayoutManager, shouldBreakLineByWordBeforeCharacterAt: number): boolean;
    // instance method
    layoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex?(_: NSLayoutManager, shouldBreakLineByHyphenatingBeforeCharacterAt: number): boolean;
    // instance method
    layoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex?(_: NSLayoutManager, boundingBoxForControlGlyphAt: number, for_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
    // instance method
    layoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange?(_: NSLayoutManager, shouldSetLineFragmentRect: NSRect, lineFragmentUsedRect: NSRect, baselineOffset: number, in_: NSTextContainer, forGlyphRange: NSRange): boolean;
    // instance method
    layoutManagerDidCompleteLayoutForTextContainerAtEnd?(_: NSLayoutManager, didCompleteLayoutFor?: NSTextContainer, atEnd?: boolean): void;
    // instance method
    layoutManagerTextContainerDidChangeGeometryFromSize?(_: NSLayoutManager, textContainer: NSTextContainer, didChangeGeometryFrom: CGSize): void;
    // instance method
    layoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange?(_: NSLayoutManager, shouldGenerateGlyphs: number, properties: NSLayoutManager.GlyphProperty, characterIndexes: number, font: NSFont, forGlyphRange: NSRange): number;
    // instance method
    layoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange?(_: NSLayoutManager, shouldUseTemporaryAttributes: Map<string, any>, forDrawingToScreen: boolean, atCharacterIndex: number, effectiveRange?: NSRange): Map<string, any>;
    // instance method
    layoutManagerDidInvalidateLayout?(_: NSLayoutManager): void;
  }

  // interface
  class NSLayoutXAxisAnchor extends NSLayoutAnchor<NSLayoutXAxisAnchor> {
    // compoundInstanceMethods
    anchorWithOffsetToAnchor(to: NSLayoutXAxisAnchor): NSLayoutDimension;
  }

  // interface
  class NSLayoutYAxisAnchor extends NSLayoutAnchor<NSLayoutYAxisAnchor> {
    // compoundInstanceMethods
    anchorWithOffsetToAnchor(to: NSLayoutYAxisAnchor): NSLayoutDimension;
  }

  // interface
  class NSLevelIndicator extends NSControl {
    // ownInstanceProperties
    criticalFillColor: NSColor;
    setCriticalFillColor(_: NSColor)
    // ownInstanceProperties
    criticalValue: number;
    setCriticalValue(_: number)
    // ownInstanceProperties
    drawsTieredCapacityLevels: boolean;
    setDrawsTieredCapacityLevels(_: boolean)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    fillColor: NSColor;
    setFillColor(_: NSColor)
    // ownInstanceProperties
    levelIndicatorStyle: NSLevelIndicator.Style;
    setLevelIndicatorStyle(_: NSLevelIndicator.Style)
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    numberOfMajorTickMarks: number;
    setNumberOfMajorTickMarks(_: number)
    // ownInstanceProperties
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number)
    // ownInstanceProperties
    placeholderVisibility: NSLevelIndicator.PlaceholderVisibility;
    setPlaceholderVisibility(_: NSLevelIndicator.PlaceholderVisibility)
    // ownInstanceProperties
    ratingImage: NSImage;
    setRatingImage(_: NSImage)
    // ownInstanceProperties
    ratingPlaceholderImage: NSImage;
    setRatingPlaceholderImage(_: NSImage)
    // ownInstanceProperties
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition)
    // ownInstanceProperties
    warningFillColor: NSColor;
    setWarningFillColor(_: NSColor)
    // ownInstanceProperties
    warningValue: number;
    setWarningValue(_: number)
    // compoundInstanceMethods
    rectOfTickMarkAtIndex(at: number): CGRect;
    // compoundInstanceMethods
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSLevelIndicatorCell extends NSActionCell {
    // ownInstanceProperties
    criticalValue: number;
    setCriticalValue(_: number)
    // ownInstanceProperties
    levelIndicatorStyle: NSLevelIndicator.Style;
    setLevelIndicatorStyle(_: NSLevelIndicator.Style)
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    numberOfMajorTickMarks: number;
    setNumberOfMajorTickMarks(_: number)
    // ownInstanceProperties
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number)
    // ownInstanceProperties
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition)
    // ownInstanceProperties
    warningValue: number;
    setWarningValue(_: number)
    // compoundInstanceMethods
    static createWithLevelIndicatorStyle(levelIndicatorStyle: NSLevelIndicator.Style): NSLevelIndicatorCell;
    // compoundInstanceMethods
    rectOfTickMarkAtIndex(at: number): CGRect;
    // compoundInstanceMethods
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSMagnificationGestureRecognizer extends NSGestureRecognizer {
    // ownInstanceProperties
    magnification: number;
    setMagnification(_: number)
  }

  // interface
  class NSMatrix extends NSControl {
    // ownInstanceProperties
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean)
    // ownInstanceProperties
    autorecalculatesCellSize: boolean;
    setAutorecalculatesCellSize(_: boolean)
    // ownInstanceProperties
    isAutoscroll: boolean;
    setAutoscroll(_: boolean)
    // ownInstanceProperties
    autosizesCells: boolean;
    setAutosizesCells(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    cellBackgroundColor: NSColor;
    setCellBackgroundColor(_: NSColor)
    // ownInstanceProperties
    cellClass: typeof NSObject;
    setCellClass(_: typeof NSObject)
    // ownInstanceProperties
    cellSize: CGSize;
    setCellSize(_: CGSize)
    // ownInstanceProperties
    cells: NSCell[];
    // ownInstanceProperties
    delegate: NSMatrixDelegate;
    setDelegate(_: NSMatrixDelegate)
    // ownInstanceProperties
    doubleAction: string;
    setDoubleAction(_: string)
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    drawsCellBackground: boolean;
    setDrawsCellBackground(_: boolean)
    // ownInstanceProperties
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize)
    // ownInstanceProperties
    keyCell: NSCell;
    setKeyCell(_: NSCell)
    // ownInstanceProperties
    mode: NSMatrix.Mode;
    setMode(_: NSMatrix.Mode)
    // ownInstanceProperties
    mouseDownFlags: number;
    // ownInstanceProperties
    numberOfColumns: number;
    // ownInstanceProperties
    numberOfRows: number;
    // ownInstanceProperties
    prototype: NSCell;
    setPrototype(_: NSCell)
    // ownInstanceProperties
    //   selectedCell: NSCell;
    // ownInstanceProperties
    selectedCells: NSCell[];
    // ownInstanceProperties
    selectedColumn: number;
    // ownInstanceProperties
    selectedRow: number;
    // ownInstanceProperties
    isSelectionByRect: boolean;
    setSelectionByRect(_: boolean)
    // ownInstanceProperties
    tabKeyTraversesCells: boolean;
    setTabKeyTraversesCells(_: boolean)
    // compoundInstanceMethods
    addColumn(): void;
    // compoundInstanceMethods
    addColumnWithCells(with_: NSCell[]): void;
    // compoundInstanceMethods
    addRow(): void;
    // compoundInstanceMethods
    addRowWithCells(with_: NSCell[]): void;
    // compoundInstanceMethods
    cellAtRowColumn(atRow: number, column: number): NSCell;
    // compoundInstanceMethods
    cellFrameAtRowColumn(atRow: number, column: number): CGRect;
    // compoundInstanceMethods
    cellWithTag(withTag: number): NSCell;
    // compoundInstanceMethods
    deselectAllCells(): void;
    // compoundInstanceMethods
    deselectSelectedCell(): void;
    // compoundInstanceMethods
    drawCellAtRowColumn(atRow: number, column: number): void;
    // compoundInstanceMethods
    getNumberOfRowsColumns(_?: number, columns?: number): void;
    // compoundInstanceMethods
    getRowColumnForPoint(_: number, column: number, for_: CGPoint): boolean;
    // compoundInstanceMethods
    getRowColumnOfCell(_: number, column: number, of: NSCell): boolean;
    // compoundInstanceMethods
    highlightCellAtRowColumn(_: boolean, atRow: number, column: number): void;
    // compoundInstanceMethods
    static createWithFrameModeCellClassNumberOfRowsNumberOfColumns(frame: CGRect, mode: NSMatrix.Mode, cellClass?: typeof NSObject, numberOfRows?: number, numberOfColumns?: number): NSMatrix;
    // compoundInstanceMethods
    static createWithFrameModePrototypeNumberOfRowsNumberOfColumns(frame: CGRect, mode: NSMatrix.Mode, prototype: NSCell, numberOfRows: number, numberOfColumns: number): NSMatrix;
    // compoundInstanceMethods
    insertColumn(_: number): void;
    // compoundInstanceMethods
    insertColumnWithCells(_: number, with_?: NSCell[]): void;
    // compoundInstanceMethods
    insertRow(_: number): void;
    // compoundInstanceMethods
    insertRowWithCells(_: number, with_?: NSCell[]): void;
    // compoundInstanceMethods
    makeCellAtRowColumn(atRow: number, column: number): NSCell;
    // compoundInstanceMethods
    putCellAtRowColumn(_: NSCell, atRow: number, column: number): void;
    // compoundInstanceMethods
    removeColumn(_: number): void;
    // compoundInstanceMethods
    removeRow(_: number): void;
    // compoundInstanceMethods
    renewRowsColumns(_: number, columns: number): void;
    // compoundInstanceMethods
    scrollCellToVisibleAtRowColumn(atRow: number, column: number): void;
    // compoundInstanceMethods
    selectCellAtRowColumn(atRow: number, column: number): void;
    // compoundInstanceMethods
    selectCellWithTag(withTag: number): boolean;
    // compoundInstanceMethods
    selectText(_?: any): void;
    // compoundInstanceMethods
    selectTextAtRowColumn(atRow: number, column: number): NSCell;
    // compoundInstanceMethods
    sendAction(): boolean;
    // compoundInstanceMethods
    sendActionToForAllCells(_: string, to: any, forAllCells: boolean): void;
    // compoundInstanceMethods
    sendDoubleAction(): void;
    // compoundInstanceMethods
    setScrollable(_: boolean): void;
    // compoundInstanceMethods
    setSelectionFromToAnchorHighlight(_: number, to: number, anchor: number, highlight: boolean): void;
    // compoundInstanceMethods
    setStateAtRowColumn(_: number, atRow: number, column: number): void;
    // compoundInstanceMethods
    setToolTipForCell(_?: string, for_?: NSCell): void;
    // compoundInstanceMethods
    setValidateSize(_: boolean): void;
    // compoundInstanceMethods
    sizeToCells(): void;
    // compoundInstanceMethods
    sortWithUsingContext(using?: (p1: any, p2: any, p3: any) => number, context?: any): void;
    // compoundInstanceMethods
    sortUsingSelector(using: string): void;
    // compoundInstanceMethods
    textDidBeginEditing(_: NSNotification): void;
    // compoundInstanceMethods
    textDidChange(_: NSNotification): void;
    // compoundInstanceMethods
    textDidEndEditing(_: NSNotification): void;
    // compoundInstanceMethods
    textShouldBeginEditing(_: NSText): boolean;
    // compoundInstanceMethods
    textShouldEndEditing(_: NSText): boolean;
    // compoundInstanceMethods
    toolTipForCell(for_: NSCell): string;
  }

  interface NSMatrixDelegate extends NSControlTextEditingDelegate {
  }

  // interface
  class NSMediaLibraryBrowserController extends NSObject {
    // ownInstanceProperties
    frame: CGRect;
    setFrame(_: CGRect)
    // ownInstanceProperties
    mediaLibraries: NSMediaLibraryBrowserController.Library;
    setMediaLibraries(_: NSMediaLibraryBrowserController.Library)
    // ownInstanceProperties
    isVisible: boolean;
    setVisible(_: boolean)
    // ownStaticProperties
    static sharedMediaLibraryBrowserController: NSMediaLibraryBrowserController;
    // compoundInstanceMethods
    togglePanel(_?: any): void;
  }

  // interface
  class NSMenu extends NSObject implements NSUserInterfaceItemIdentification {
    // compoundStaticMethods
    static menuBarVisible(): boolean;
    // compoundStaticMethods
    static popUpContextMenuWithEventForView(_: NSMenu, with_: NSEvent, for_: NSView): void;
    // compoundStaticMethods
    static popUpContextMenuWithEventForViewWithFont(_: NSMenu, with_: NSEvent, for_: NSView, with_2?: NSFont): void;
    // compoundStaticMethods
    static setMenuBarVisible(_: boolean): void;
    // ownInstanceProperties
    allowsContextMenuPlugIns: boolean;
    setAllowsContextMenuPlugIns(_: boolean)
    // ownInstanceProperties
    autoenablesItems: boolean;
    setAutoenablesItems(_: boolean)
    // ownInstanceProperties
    delegate: NSMenuDelegate;
    setDelegate(_: NSMenuDelegate)
    // ownInstanceProperties
    font: NSFont;
    setFont(_: NSFont)
    // ownInstanceProperties
    highlightedItem: NSMenuItem;
    // ownInstanceProperties
    itemArray: NSMenuItem[];
    setItemArray(_: NSMenuItem[])
    // ownInstanceProperties
    menuBarHeight: number;
    // ownInstanceProperties
    minimumWidth: number;
    setMinimumWidth(_: number)
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    propertiesToUpdate: NSMenu.Properties;
    // ownInstanceProperties
    showsStateColumn: boolean;
    setShowsStateColumn(_: boolean)
    // ownInstanceProperties
    size: CGSize;
    // ownInstanceProperties
    supermenu: NSMenu;
    setSupermenu(_: NSMenu)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection)
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    addItem(_: NSMenuItem): void;
    // compoundInstanceMethods
    addItemWithTitleActionKeyEquivalent(withTitle: string, action?: string, keyEquivalent?: string): NSMenuItem;
    // compoundInstanceMethods
    cancelTracking(): void;
    // compoundInstanceMethods
    cancelTrackingWithoutAnimation(): void;
    // compoundInstanceMethods
    indexOfItem(of: NSMenuItem): number;
    // compoundInstanceMethods
    indexOfItemWithRepresentedObject(withRepresentedObject?: any): number;
    // compoundInstanceMethods
    indexOfItemWithSubmenu(withSubmenu?: NSMenu): number;
    // compoundInstanceMethods
    indexOfItemWithTag(withTag: number): number;
    // compoundInstanceMethods
    indexOfItemWithTargetAndAction(withTarget?: any, andAction?: string): number;
    // compoundInstanceMethods
    indexOfItemWithTitle(withTitle: string): number;
    // compoundInstanceMethods
    static createWithTitle(title: string): NSMenu;
    // compoundInstanceMethods
    insertItemAtIndex(_: NSMenuItem, at: number): void;
    // compoundInstanceMethods
    insertItemWithTitleActionKeyEquivalentAtIndex(withTitle: string, action?: string, keyEquivalent?: string, at?: number): NSMenuItem;
    // compoundInstanceMethods
    itemAtIndex(at: number): NSMenuItem;
    // compoundInstanceMethods
    itemChanged(_: NSMenuItem): void;
    // compoundInstanceMethods
    itemWithTag(withTag: number): NSMenuItem;
    // compoundInstanceMethods
    itemWithTitle(withTitle: string): NSMenuItem;
    // compoundInstanceMethods
    performActionForItemAtIndex(at: number): void;
    // compoundInstanceMethods
    performKeyEquivalent(with_: NSEvent): boolean;
    // compoundInstanceMethods
    popUpMenuPositioningItemAtLocationInView(positioning?: NSMenuItem, at?: CGPoint, in_?: NSView): boolean;
    // compoundInstanceMethods
    removeAllItems(): void;
    // compoundInstanceMethods
    removeItem(_: NSMenuItem): void;
    // compoundInstanceMethods
    removeItemAtIndex(at: number): void;
    // compoundInstanceMethods
    setSubmenuForItem(_?: NSMenu, for_?: NSMenuItem): void;
    // compoundInstanceMethods
    submenuAction(_?: any): void;
    // compoundInstanceMethods
    update(): void;
  }

  interface NSMenuDelegate extends NSObject {
    // instance method
    confinementRectForMenuOnScreen?(for_: NSMenu, on?: NSScreen): CGRect;
    // instance method
    menuUpdateItemAtIndexShouldCancel?(_: NSMenu, update: NSMenuItem, at: number, shouldCancel: boolean): boolean;
    // instance method
    menuWillHighlightItem?(_: NSMenu, willHighlight?: NSMenuItem): void;
    // instance method
    menuDidClose?(_: NSMenu): void;
    // instance method
    menuHasKeyEquivalentForEventTargetAction?(_: NSMenu, for_: NSEvent, target?: any, action?: string): boolean;
    // instance method
    menuNeedsUpdate?(_: NSMenu): void;
    // instance method
    menuWillOpen?(_: NSMenu): void;
    // instance method
    numberOfItemsInMenu?(in_: NSMenu): number;
  }

  // interface
  class NSMenuItem extends NSObject implements NSUserInterfaceItemIdentification {
    // compoundStaticMethods
    static separatorItem(): NSMenuItem;
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    allowsKeyEquivalentWhenHidden: boolean;
    setAllowsKeyEquivalentWhenHidden(_: boolean)
    // ownInstanceProperties
    isAlternate: boolean;
    setAlternate(_: boolean)
    // ownInstanceProperties
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    hasSubmenu: boolean;
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    isHiddenOrHasHiddenAncestor: boolean;
    // ownInstanceProperties
    isHighlighted: boolean;
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    indentationLevel: number;
    setIndentationLevel(_: number)
    // ownInstanceProperties
    keyEquivalent: string;
    setKeyEquivalent(_: string)
    // ownInstanceProperties
    keyEquivalentModifierMask: NSEvent.ModifierFlags;
    setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags)
    // ownInstanceProperties
    menu: NSMenu;
    setMenu(_: NSMenu)
    // ownInstanceProperties
    mixedStateImage: NSImage;
    setMixedStateImage(_: NSImage)
    // ownInstanceProperties
    offStateImage: NSImage;
    setOffStateImage(_: NSImage)
    // ownInstanceProperties
    onStateImage: NSImage;
    setOnStateImage(_: NSImage)
    // ownInstanceProperties
    parentItem: NSMenuItem;
    // ownInstanceProperties
    representedObject: any;
    setRepresentedObject(_: any)
    // ownInstanceProperties
    isSeparatorItem: boolean;
    // ownInstanceProperties
    state: number;
    setState(_: number)
    // ownInstanceProperties
    submenu: NSMenu;
    setSubmenu(_: NSMenu)
    // ownInstanceProperties
    tag: number;
    setTag(_: number)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    toolTip: string;
    setToolTip(_: string)
    // ownInstanceProperties
    userKeyEquivalent: string;
    // ownInstanceProperties
    view: NSView;
    setView(_: NSView)
    // ownStaticProperties
    static usesUserKeyEquivalents: boolean;
    setUsesUserKeyEquivalents(_: boolean)
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    static createWithTitleActionKeyEquivalent(title: string, action?: string, keyEquivalent?: string): NSMenuItem;
  }

  // interface
  class NSMenuItemCell extends NSButtonCell {
    // ownInstanceProperties
    imageWidth: number;
    // ownInstanceProperties
    keyEquivalentWidth: number;
    // ownInstanceProperties
    menuItem: NSMenuItem;
    setMenuItem(_: NSMenuItem)
    // ownInstanceProperties
    needsDisplay: boolean;
    setNeedsDisplay(_: boolean)
    // ownInstanceProperties
    needsSizing: boolean;
    setNeedsSizing(_: boolean)
    // ownInstanceProperties
    stateImageWidth: number;
    // ownInstanceProperties
    titleWidth: number;
    // compoundInstanceMethods
    calcSize(): void;
    // compoundInstanceMethods
    drawBorderAndBackgroundWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    //  drawImageWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawKeyEquivalentWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawSeparatorItemWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    drawStateImageWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    //  drawTitleWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    keyEquivalentRectForBounds(forBounds: CGRect): CGRect;
    // compoundInstanceMethods
    stateImageRectForBounds(forBounds: CGRect): CGRect;
  }

  interface NSMenuItemValidation extends NSObject {
    // instance method
    validateMenuItem(_: NSMenuItem): boolean;
  }

  // interface
  class NSMenuToolbarItem extends NSToolbarItem {
    // ownInstanceProperties
    menu: NSMenu;
    setMenu(_: NSMenu)
    // ownInstanceProperties
    showsIndicator: boolean;
    setShowsIndicator(_: boolean)
  }

  // interface
  class NSMutableFontCollection extends NSFontCollection {
    // ownInstanceProperties
    //   exclusionDescriptors: NSFontDescriptor[];
    setExclusionDescriptors(_: NSFontDescriptor[])
    // ownInstanceProperties
    //   queryDescriptors: NSFontDescriptor[];
    setQueryDescriptors(_: NSFontDescriptor[])
    // ownStaticProperties
    static fontCollectionWithAllAvailableDescriptors: NSMutableFontCollection;
    // compoundInstanceMethods
    addQueryForDescriptors(for_: NSFontDescriptor[]): void;
    // compoundInstanceMethods
    removeQueryForDescriptors(for_: NSFontDescriptor[]): void;
  }

  // interface
  class NSMutableParagraphStyle extends NSParagraphStyle {
    // ownInstanceProperties
    //   alignment: NSTextAlignment;
    setAlignment(_: NSTextAlignment)
    // ownInstanceProperties
    //   allowsDefaultTighteningForTruncation: boolean;
    setAllowsDefaultTighteningForTruncation(_: boolean)
    // ownInstanceProperties
    //   baseWritingDirection: NSWritingDirection;
    setBaseWritingDirection(_: NSWritingDirection)
    // ownInstanceProperties
    //   defaultTabInterval: number;
    setDefaultTabInterval(_: number)
    // ownInstanceProperties
    //   firstLineHeadIndent: number;
    setFirstLineHeadIndent(_: number)
    // ownInstanceProperties
    //   headIndent: number;
    setHeadIndent(_: number)
    // ownInstanceProperties
    //   headerLevel: number;
    setHeaderLevel(_: number)
    // ownInstanceProperties
    //   hyphenationFactor: number;
    setHyphenationFactor(_: number)
    // ownInstanceProperties
    //   lineBreakMode: NSLineBreakMode;
    setLineBreakMode(_: NSLineBreakMode)
    // ownInstanceProperties
    //   lineHeightMultiple: number;
    setLineHeightMultiple(_: number)
    // ownInstanceProperties
    //   lineSpacing: number;
    setLineSpacing(_: number)
    // ownInstanceProperties
    //   maximumLineHeight: number;
    setMaximumLineHeight(_: number)
    // ownInstanceProperties
    //   minimumLineHeight: number;
    setMinimumLineHeight(_: number)
    // ownInstanceProperties
    //   paragraphSpacing: number;
    setParagraphSpacing(_: number)
    // ownInstanceProperties
    //   paragraphSpacingBefore: number;
    setParagraphSpacingBefore(_: number)
    // ownInstanceProperties
    //   tabStops: NSTextTab[];
    setTabStops(_: NSTextTab[])
    // ownInstanceProperties
    //   tailIndent: number;
    setTailIndent(_: number)
    // ownInstanceProperties
    //   textBlocks: NSTextBlock[];
    setTextBlocks(_: NSTextBlock[])
    // ownInstanceProperties
    //   textLists: NSTextList[];
    setTextLists(_: NSTextList[])
    // ownInstanceProperties
    //   tighteningFactorForTruncation: number;
    setTighteningFactorForTruncation(_: number)
    // compoundInstanceMethods
    addTabStop(_: NSTextTab): void;
    // compoundInstanceMethods
    removeTabStop(_: NSTextTab): void;
    // compoundInstanceMethods
    setParagraphStyle(_: NSParagraphStyle): void;
  }

  // interface
  class NSNib extends NSObject {
    // compoundInstanceMethods
    static createWithNibDataBundle(nibData: NSData, bundle?: Bundle): NSNib;
    // compoundInstanceMethods
    static createWithNibNamedBundle(nibNamed: string, bundle?: Bundle): NSNib;
    // compoundInstanceMethods
    instantiateWithOwnerTopLevelObjects(withOwner?: any, topLevelObjects?: any[]): boolean;
  }

  // export function NSNumberOfColorComponents(colorSpaceName: string): number;

  // interface
  class NSObjectController extends NSController {
    // ownInstanceProperties
    automaticallyPreparesContent: boolean;
    setAutomaticallyPreparesContent(_: boolean)
    // ownInstanceProperties
    canAdd: boolean;
    // ownInstanceProperties
    canRemove: boolean;
    // ownInstanceProperties
    content: any;
    setContent(_: any)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    entityName: string;
    setEntityName(_: string)
    // ownInstanceProperties
    fetchPredicate: NSPredicate;
    setFetchPredicate(_: NSPredicate)
    // ownInstanceProperties
    managedObjectContext: NSManagedObjectContext;
    setManagedObjectContext(_: NSManagedObjectContext)
    // ownInstanceProperties
    objectClass: typeof NSObject;
    setObjectClass(_: typeof NSObject)
    // ownInstanceProperties
    selectedObjects: any[];
    // ownInstanceProperties
    selection: any;
    // ownInstanceProperties
    usesLazyFetching: boolean;
    setUsesLazyFetching(_: boolean)
    // compoundInstanceMethods
    add(_?: any): void;
    // compoundInstanceMethods
    addObject(_: any): void;
    // compoundInstanceMethods
    defaultFetchRequest(): NSFetchRequest<any>;
    // compoundInstanceMethods
    fetch(_?: any): void;
    // compoundInstanceMethods
    fetchWithRequestMergeError(merge?: NSFetchRequest<any>, error?: boolean): boolean;
    // compoundInstanceMethods
    static createWithContent(content?: any): NSObjectController;
    // compoundInstanceMethods
    newObject(): any;
    // compoundInstanceMethods
    prepareContent(): void;
    // compoundInstanceMethods
    remove(_?: any): void;
    // compoundInstanceMethods
    removeObject(_: any): void;
    // compoundInstanceMethods
    validateUserInterfaceItem(_: NSValidatedUserInterfaceItem): boolean;
  }

  // interface
  class NSOpenPanel extends NSSavePanel {
    // ownInstanceProperties
    URLs: NSURL[];
    // ownInstanceProperties
    isAccessoryViewDisclosed: boolean;
    setAccessoryViewDisclosed(_: boolean)
    // ownInstanceProperties
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean)
    // ownInstanceProperties
    canChooseDirectories: boolean;
    setCanChooseDirectories(_: boolean)
    // ownInstanceProperties
    canChooseFiles: boolean;
    setCanChooseFiles(_: boolean)
    // ownInstanceProperties
    canDownloadUbiquitousContents: boolean;
    setCanDownloadUbiquitousContents(_: boolean)
    // ownInstanceProperties
    canResolveUbiquitousConflicts: boolean;
    setCanResolveUbiquitousConflicts(_: boolean)
    // ownInstanceProperties
    resolvesAliases: boolean;
    setResolvesAliases(_: boolean)
  }

  interface NSOpenSavePanelDelegate extends NSObject {
    shouldEnableURL?(_: any, shouldEnable: NSURL): boolean;
    didChangeToDirectoryURL?(_: any, didChangeToDirectoryURL?: NSURL): void;
    userEnteredFilenameConfirmed?(_: any, userEnteredFilename: string, confirmed: boolean): string;
    validateURLError?(validateURL: any, error: NSURL): boolean;
    willExpand?(_: any, willExpand: boolean): void;
    selectionDidChange?(_?: any): void;
  }

  // interface
  class NSOutlineView extends NSTableView {
    // ownInstanceProperties
    autoresizesOutlineColumn: boolean;
    setAutoresizesOutlineColumn(_: boolean)
    // ownInstanceProperties
    autosaveExpandedItems: boolean;
    setAutosaveExpandedItems(_: boolean)
    // ownInstanceProperties
    //   dataSource: NSOutlineViewDataSource;
    setDataSource(_: NSOutlineViewDataSource)
    // ownInstanceProperties
    //   delegate: NSOutlineViewDelegate;
    setDelegate(_: NSOutlineViewDelegate)
    // ownInstanceProperties
    indentationMarkerFollowsCell: boolean;
    setIndentationMarkerFollowsCell(_: boolean)
    // ownInstanceProperties
    indentationPerLevel: number;
    setIndentationPerLevel(_: number)
    // ownInstanceProperties
    outlineTableColumn: NSTableColumn;
    setOutlineTableColumn(_: NSTableColumn)
    // ownInstanceProperties
    stronglyReferencesItems: boolean;
    setStronglyReferencesItems(_: boolean)
    // compoundInstanceMethods
    childOfItem(_: number, ofItem?: any): any;
    // compoundInstanceMethods
    childIndexForItem(forItem: any): number;
    // compoundInstanceMethods
    collapseItem(_?: any): void;
    // compoundInstanceMethods
    collapseItemCollapseChildren(_?: any, collapseChildren?: boolean): void;
    // compoundInstanceMethods
    expandItem(_?: any): void;
    // compoundInstanceMethods
    expandItemExpandChildren(_?: any, expandChildren?: boolean): void;
    // compoundInstanceMethods
    frameOfOutlineCellAtRow(atRow: number): CGRect;
    // compoundInstanceMethods
    insertItemsAtIndexesInParentWithAnimation(at: NSIndexSet, inParent?: any, withAnimation?: NSTableView.AnimationOptions): void;
    // compoundInstanceMethods
    isExpandable(_?: any): boolean;
    // compoundInstanceMethods
    isItemExpanded(_?: any): boolean;
    // compoundInstanceMethods
    itemAtRow(atRow: number): any;
    // compoundInstanceMethods
    levelForItem(forItem?: any): number;
    // compoundInstanceMethods
    levelForRow(forRow: number): number;
    // compoundInstanceMethods
    moveItemAtIndexInParentToIndexInParent(at: number, inParent?: any, to?: number, inParent2?: any): void;
    // compoundInstanceMethods
    numberOfChildrenOfItem(ofItem?: any): number;
    // compoundInstanceMethods
    parentForItem(forItem?: any): any;
    // compoundInstanceMethods
    reloadItem(_?: any): void;
    // compoundInstanceMethods
    reloadItemReloadChildren(_?: any, reloadChildren?: boolean): void;
    // compoundInstanceMethods
    removeItemsAtIndexesInParentWithAnimation(at: NSIndexSet, inParent?: any, withAnimation?: NSTableView.AnimationOptions): void;
    // compoundInstanceMethods
    rowForItem(forItem?: any): number;
    // compoundInstanceMethods
    setDropItemDropChildIndex(_?: any, dropChildIndex?: number): void;
    // compoundInstanceMethods
    shouldCollapseAutoExpandedItemsForDeposited(forDeposited: boolean): boolean;
  }

  interface NSOutlineViewDataSource extends NSObject {
    objectValueForTableColumnByItem?(_: NSOutlineView, objectValueFor?: NSTableColumn, byItem?: any): any;
    setObjectValueForTableColumnByItem?(_: NSOutlineView, setObjectValue?: any, for_?: NSTableColumn, byItem?: any): void;
    draggingSessionWillBeginAtPointForItems?(_: NSOutlineView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItems: any[]): void;
    draggingSessionEndedAtPointOperation?(_: NSOutlineView, draggingSession: NSDraggingSession, endedAt: CGPoint, operation: NSDragOperation): void;
    writeItemsToPasteboard?(_: NSOutlineView, writeItems: any[], to: NSPasteboard): boolean;
    acceptDropItemChildIndex?(_: NSOutlineView, acceptDrop: NSDraggingInfo, item?: any, childIndex?: number): boolean;
    childOfItem?(_: NSOutlineView, child: number, ofItem?: any): any;
    isItemExpandable?(_: NSOutlineView, isItemExpandable: any): boolean;
    itemForPersistentObject?(_: NSOutlineView, itemForPersistentObject: any): any;
    numberOfChildrenOfItem?(_: NSOutlineView, numberOfChildrenOfItem?: any): number;
    pasteboardWriterForItem?(_: NSOutlineView, pasteboardWriterForItem: any): NSPasteboardWriting;
    persistentObjectForItem?(_: NSOutlineView, persistentObjectForItem?: any): any;
    sortDescriptorsDidChange?(_: NSOutlineView, sortDescriptorsDidChange: NSSortDescriptor[]): void;
    updateDraggingItemsForDrag?(_: NSOutlineView, updateDraggingItemsForDrag: NSDraggingInfo): void;
    validateDropProposedItemProposedChildIndex?(_: NSOutlineView, validateDrop: NSDraggingInfo, proposedItem?: any, proposedChildIndex?: number): NSDragOperation;
  }

  interface NSOutlineViewDelegate extends NSControlTextEditingDelegate {
    viewForTableColumnItem?(_: NSOutlineView, viewFor?: NSTableColumn, item?: any): NSView;
    willDisplayOutlineCellForTableColumnItem?(_: NSOutlineView, willDisplayOutlineCell: any, for_?: NSTableColumn, item?: any): void;
    didAddRowViewForRow?(_: NSOutlineView, didAdd: NSTableRowView, forRow: number): void;
    didRemoveRowViewForRow?(_: NSOutlineView, didRemove: NSTableRowView, forRow: number): void;
    willDisplayCellForTableColumnItem?(_: NSOutlineView, willDisplayCell: any, for_?: NSTableColumn, item?: any): void;
    shouldEditTableColumnItem?(_: NSOutlineView, shouldEdit?: NSTableColumn, item?: any): boolean;
    dataCellForTableColumnItem?(_: NSOutlineView, dataCellFor?: NSTableColumn, item?: any): NSCell;
    shouldTrackCellForTableColumnItem?(_: NSOutlineView, shouldTrackCell: NSCell, for_?: NSTableColumn, item?: any): boolean;
    shouldShowCellExpansionForTableColumnItem?(_: NSOutlineView, shouldShowCellExpansionFor?: NSTableColumn, item?: any): boolean;
    shouldSelectTableColumn?(_: NSOutlineView, shouldSelect?: NSTableColumn): boolean;
    mouseDownInHeaderOfTableColumn?(_: NSOutlineView, mouseDownInHeaderOf: NSTableColumn): void;
    didClickTableColumn?(_: NSOutlineView, didClick: NSTableColumn): void;
    didDragTableColumn?(_: NSOutlineView, didDrag: NSTableColumn): void;
    toolTipForCellRectTableColumnItemMouseLocation?(_: NSOutlineView, toolTipFor: NSCell, rect: NSRect, tableColumn?: NSTableColumn, item?: any, mouseLocation?: CGPoint): string;
    shouldTypeSelectForEventWithCurrentSearchString?(_: NSOutlineView, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
    typeSelectStringForTableColumnItem?(_: NSOutlineView, typeSelectStringFor?: NSTableColumn, item?: any): string;
    nextTypeSelectMatchFromItemToItemForString?(_: NSOutlineView, nextTypeSelectMatchFromItem: any, toItem: any, for_: string): any;
    heightOfRowByItem?(_: NSOutlineView, heightOfRowByItem: any): number;
    isGroupItem?(_: NSOutlineView, isGroupItem: any): boolean;
    rowViewForItem?(_: NSOutlineView, rowViewForItem: any): NSTableRowView;
    selectionIndexesForProposedSelection?(_: NSOutlineView, selectionIndexesForProposedSelection: NSIndexSet): NSIndexSet;
    shouldCollapseItem?(_: NSOutlineView, shouldCollapseItem: any): boolean;
    shouldExpandItem?(_: NSOutlineView, shouldExpandItem: any): boolean;
    shouldReorderColumnToColumn?(_: NSOutlineView, shouldReorderColumn: number, toColumn: number): boolean;
    shouldSelectItem?(_: NSOutlineView, shouldSelectItem: any): boolean;
    shouldShowOutlineCellForItem?(_: NSOutlineView, shouldShowOutlineCellForItem: any): boolean;
    sizeToFitWidthOfColumn?(_: NSOutlineView, sizeToFitWidthOfColumn: number): number;
    columnDidMove?(_: NSNotification): void;
    columnDidResize?(_: NSNotification): void;
    itemDidCollapse?(_: NSNotification): void;
    itemDidExpand?(_: NSNotification): void;
    itemWillCollapse?(_: NSNotification): void;
    itemWillExpand?(_: NSNotification): void;
    selectionDidChange?(_: NSNotification): void;
    selectionIsChanging?(_: NSNotification): void;
    // instance method
    selectionShouldChangeInOutlineView?(in_: NSOutlineView): boolean;
  }

  // interface
  class NSPDFImageRep extends NSImageRep {
    // ownInstanceProperties
    PDFRepresentation: NSData;
    // ownInstanceProperties
    bounds: CGRect;
    // ownInstanceProperties
    currentPage: number;
    setCurrentPage(_: number)
    // ownInstanceProperties
    pageCount: number;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSPDFImageRep;
  }

  // interface
  class NSPDFInfo extends NSObject {
    // ownInstanceProperties
    URL: NSURL;
    setURL(_: NSURL)
    // ownInstanceProperties
    attributes: NSMutableDictionary<string, any>;
    // ownInstanceProperties
    isFileExtensionHidden: boolean;
    setFileExtensionHidden(_: boolean)
    // ownInstanceProperties
    orientation: NSPrintInfo.PaperOrientation;
    setOrientation(_: NSPrintInfo.PaperOrientation)
    // ownInstanceProperties
    paperSize: CGSize;
    setPaperSize(_: CGSize)
    // ownInstanceProperties
    tagNames: string[];
    setTagNames(_: string[])
  }

  // interface
  class NSPDFPanel extends NSObject {
    // ownInstanceProperties
    accessoryController: NSViewController;
    setAccessoryController(_: NSViewController)
    // ownInstanceProperties
    defaultFileName: string;
    setDefaultFileName(_: string)
    // ownInstanceProperties
    options: NSPDFPanel.Options;
    setOptions(_: NSPDFPanel.Options)
    // compoundInstanceMethods
    beginSheetWithWithModalForCompletionHandler(with_: NSPDFInfo, modalFor?: NSWindow, completionHandler?: (p1: number) => void): void;
  }

  // interface
  class NSPICTImageRep extends NSImageRep {
    // ownInstanceProperties
    PICTRepresentation: NSData;
    // ownInstanceProperties
    boundingBox: CGRect;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSPICTImageRep;
  }

  // interface
  class NSPageController extends NSViewController {
    // ownInstanceProperties
    arrangedObjects: any[];
    setArrangedObjects(_: any[])
    // ownInstanceProperties
    delegate: NSPageControllerDelegate;
    setDelegate(_: NSPageControllerDelegate)
    // ownInstanceProperties
    selectedIndex: number;
    setSelectedIndex(_: number)
    // ownInstanceProperties
    selectedViewController: NSViewController;
    // ownInstanceProperties
    transitionStyle: NSPageController.TransitionStyle;
    setTransitionStyle(_: NSPageController.TransitionStyle)
    // compoundInstanceMethods
    completeTransition(): void;
    // compoundInstanceMethods
    navigateBack(_?: any): void;
    // compoundInstanceMethods
    navigateForward(_?: any): void;
    // compoundInstanceMethods
    navigateForwardToObject(to: any): void;
    // compoundInstanceMethods
    takeSelectedIndexFrom(_?: any): void;
  }

  interface NSPageControllerDelegate extends NSObject {
    // instance method
    pageControllerIdentifierForObject?(_: NSPageController, identifierFor: any): string;
    // instance method
    pageControllerFrameForObject?(_: NSPageController, frameFor?: any): CGRect;
    // instance method
    pageControllerPrepareViewControllerWithObject?(_: NSPageController, prepare: NSViewController, with_?: any): void;
    // instance method
    pageControllerDidTransitionToObject?(_: NSPageController, didTransitionTo: any): void;
    // instance method
    pageControllerViewControllerForIdentifier?(_: NSPageController, viewControllerForIdentifier: string): NSViewController;
    // instance method
    pageControllerDidEndLiveTransition?(_: NSPageController): void;
    // instance method
    pageControllerWillStartLiveTransition?(_: NSPageController): void;
  }

  // interface
  class NSPageLayout extends NSObject {
    // ownInstanceProperties
    accessoryControllers: NSViewController[];
    // ownInstanceProperties
    printInfo: NSPrintInfo;
    // compoundInstanceMethods
    addAccessoryController(_: NSViewController): void;
    // compoundInstanceMethods
    beginSheetWithPrintInfoModalForWindowDelegateDidEndSelectorContextInfo(with_: NSPrintInfo, modalFor: NSWindow, delegate?: any, didEnd?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    removeAccessoryController(_: NSViewController): void;
    // compoundInstanceMethods
    runModal(): number;
    // compoundInstanceMethods
    runModalWithPrintInfo(with_: NSPrintInfo): number;
  }

  // interface
  class NSPanGestureRecognizer extends NSGestureRecognizer {
    // ownInstanceProperties
    buttonMask: number;
    setButtonMask(_: number)
    // ownInstanceProperties
    numberOfTouchesRequired: number;
    setNumberOfTouchesRequired(_: number)
    // compoundInstanceMethods
    setTranslationInView(_: CGPoint, in_?: NSView): void;
    // compoundInstanceMethods
    translationInView(in_?: NSView): CGPoint;
    // compoundInstanceMethods
    velocityInView(in_?: NSView): CGPoint;
  }

  // interface
  class NSPanel extends NSWindow {
    // ownInstanceProperties
    becomesKeyOnlyIfNeeded: boolean;
    setBecomesKeyOnlyIfNeeded(_: boolean)
    // ownInstanceProperties
    //   isFloatingPanel: boolean;
    setFloatingPanel(_: boolean)
    // ownInstanceProperties
    //   worksWhenModal: boolean;
    setWorksWhenModal(_: boolean)
  }

  // interface
  class NSParagraphStyle extends NSObject {
    // compoundStaticMethods
    static defaultWritingDirectionForLanguage(forLanguage?: string): NSWritingDirection;
    // ownInstanceProperties
    alignment: NSTextAlignment;
    // ownInstanceProperties
    allowsDefaultTighteningForTruncation: boolean;
    // ownInstanceProperties
    baseWritingDirection: NSWritingDirection;
    // ownInstanceProperties
    defaultTabInterval: number;
    // ownInstanceProperties
    firstLineHeadIndent: number;
    // ownInstanceProperties
    headIndent: number;
    // ownInstanceProperties
    headerLevel: number;
    // ownInstanceProperties
    hyphenationFactor: number;
    // ownInstanceProperties
    lineBreakMode: NSLineBreakMode;
    // ownInstanceProperties
    lineHeightMultiple: number;
    // ownInstanceProperties
    lineSpacing: number;
    // ownInstanceProperties
    maximumLineHeight: number;
    // ownInstanceProperties
    minimumLineHeight: number;
    // ownInstanceProperties
    paragraphSpacing: number;
    // ownInstanceProperties
    paragraphSpacingBefore: number;
    // ownInstanceProperties
    tabStops: NSTextTab[];
    // ownInstanceProperties
    tailIndent: number;
    // ownInstanceProperties
    textBlocks: NSTextBlock[];
    // ownInstanceProperties
    textLists: NSTextList[];
    // ownInstanceProperties
    tighteningFactorForTruncation: number;
    // ownStaticProperties
    static defaultParagraphStyle: NSParagraphStyle;
  }

  // interface
  class NSPasteboard extends NSObject {
    // compoundStaticMethods
    static pasteboardWithUniqueName(): NSPasteboard;
    // compoundStaticMethods
    static typesFilterableTo(filterableTo: string): string[];
    // ownInstanceProperties
    changeCount: number;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    pasteboardItems: NSPasteboardItem[];
    // ownInstanceProperties
    types: string[];
    // ownStaticProperties
    static generalPasteboard: NSPasteboard;
    // compoundInstanceMethods
    addTypesOwner(_: string[], owner?: any): number;
    // compoundInstanceMethods
    availableTypeFromArray(from: string[]): string;
    // compoundInstanceMethods
    canReadItemWithDataConformingToTypes(withDataConformingToTypes: string[]): boolean;
    // compoundInstanceMethods
    canReadObjectForClassesOptions(forClasses: typeof NSObject[], options?: Map<string, any>): boolean;
    // compoundInstanceMethods
    clearContents(): number;
    // compoundInstanceMethods
    dataForType(forType: string): NSData;
    // compoundInstanceMethods
    declareTypesOwner(_: string[], owner?: any): number;
    // compoundInstanceMethods
    indexOfPasteboardItem(of: NSPasteboardItem): number;
    // compoundInstanceMethods
    prepareForNewContentsWithOptions(with_: NSPasteboard.ContentsOptions): number;
    // compoundInstanceMethods
    propertyListForType(forType: string): any;
    // compoundInstanceMethods
    readFileContentsTypeToFile(_?: string, toFile?: string): string;
    // compoundInstanceMethods
    readFileWrapper(): FileWrapper;
    // compoundInstanceMethods
    readObjectsForClassesOptions(forClasses: typeof NSObject[], options?: Map<string, any>): any[];
    // compoundInstanceMethods
    releaseGlobally(): void;
    // compoundInstanceMethods
    setDataForType(_?: NSData, forType?: string): boolean;
    // compoundInstanceMethods
    setPropertyListForType(_: any, forType: string): boolean;
    // compoundInstanceMethods
    setStringForType(_: string, forType: string): boolean;
    // compoundInstanceMethods
    stringForType(forType: string): string;
    // compoundInstanceMethods
    writeFileContents(_: string): boolean;
    // compoundInstanceMethods
    writeFileWrapper(_: FileWrapper): boolean;
    // compoundInstanceMethods
    writeObjects(_: NSPasteboardWriting[]): boolean;
  }

  // interface
  class NSPasteboardItem extends NSObject {
    // ownInstanceProperties
    types: string[];
    // compoundInstanceMethods
    availableTypeFromArray(from: string[]): string;
    // compoundInstanceMethods
    dataForType(forType: string): NSData;
    // compoundInstanceMethods
    propertyListForType(forType: string): any;
    // compoundInstanceMethods
    setDataForType(_: NSData, forType: string): boolean;
    // compoundInstanceMethods
    setDataProviderForTypes(_: NSPasteboardItemDataProvider, forTypes: string[]): boolean;
    // compoundInstanceMethods
    setPropertyListForType(_: any, forType: string): boolean;
    // compoundInstanceMethods
    setStringForType(_: string, forType: string): boolean;
    // compoundInstanceMethods
    stringForType(forType: string): string;
  }

  interface NSPasteboardItemDataProvider extends NSObject {
    // instance method
    pasteboardItemProvideDataForType(_?: NSPasteboard, item?: NSPasteboardItem, provideDataForType?: string): void;
    // instance method
    pasteboardFinishedWithDataProvider?(_: NSPasteboard): void;
  }

  interface NSPasteboardReading extends NSObject {
  }

  interface NSPasteboardTypeOwner extends NSObject {
    // instance method
    pasteboardProvideDataForType(_: NSPasteboard, provideDataForType: string): void;
    // instance method
    pasteboardChangedOwner?(_: NSPasteboard): void;
  }

  interface NSPasteboardWriting extends NSObject {
    // instance method
    pasteboardPropertyListForType(forType: string): any;
    // instance method
    writableTypesForPasteboard(for_: NSPasteboard): string[];
    // instance method
    writingOptionsForTypePasteboard?(forType: string, pasteboard: NSPasteboard): NSPasteboard.WritingOptions;
  }

  // interface
  class NSPathCell extends NSActionCell {
    // ownInstanceProperties
    URL: NSURL;
    setURL(_: NSURL)
    // ownInstanceProperties
    allowedTypes: string[];
    setAllowedTypes(_: string[])
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    clickedPathComponentCell: NSPathComponentCell;
    // ownInstanceProperties
    delegate: NSPathCellDelegate;
    setDelegate(_: NSPathCellDelegate)
    // ownInstanceProperties
    doubleAction: string;
    setDoubleAction(_: string)
    // ownInstanceProperties
    pathComponentCells: NSPathComponentCell[];
    setPathComponentCells(_: NSPathComponentCell[])
    // ownInstanceProperties
    pathStyle: NSPathControl.Style;
    setPathStyle(_: NSPathControl.Style)
    // ownInstanceProperties
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString)
    // ownInstanceProperties
    placeholderString: string;
    setPlaceholderString(_: string)
    // ownStaticProperties
    static pathComponentCellClass: typeof NSObject;
    // compoundInstanceMethods
    mouseEnteredWithFrameInView(with_: NSEvent, frame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    mouseExitedWithFrameInView(with_: NSEvent, frame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    pathComponentCellAtPointWithFrameInView(at: CGPoint, withFrame: CGRect, in_: NSView): NSPathComponentCell;
    // compoundInstanceMethods
    rectOfPathComponentCellWithFrameInView(of: NSPathComponentCell, withFrame: CGRect, in_: NSView): CGRect;
    // compoundInstanceMethods
    setObjectValue(_?: any): void;
  }

  interface NSPathCellDelegate extends NSObject {
    // instance method
    pathCellWillDisplayOpenPanel?(_: NSPathCell, willDisplay: NSOpenPanel): void;
    // instance method
    pathCellWillPopUpMenu?(_: NSPathCell, willPopUp: NSMenu): void;
  }

  // interface
  class NSPathComponentCell extends NSTextFieldCell {
    // ownInstanceProperties
    URL: NSURL;
    setURL(_: NSURL)
  }

  // interface
  class NSPathControl extends NSControl {
    // ownInstanceProperties
    URL: NSURL;
    setURL(_: NSURL)
    // ownInstanceProperties
    allowedTypes: string[];
    setAllowedTypes(_: string[])
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    clickedPathItem: NSPathControlItem;
    // ownInstanceProperties
    delegate: NSPathControlDelegate;
    setDelegate(_: NSPathControlDelegate)
    // ownInstanceProperties
    doubleAction: string;
    setDoubleAction(_: string)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    pathItems: NSPathControlItem[];
    setPathItems(_: NSPathControlItem[])
    // ownInstanceProperties
    pathStyle: NSPathControl.Style;
    setPathStyle(_: NSPathControl.Style)
    // ownInstanceProperties
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString)
    // ownInstanceProperties
    placeholderString: string;
    setPlaceholderString(_: string)
    // compoundInstanceMethods
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
  }

  interface NSPathControlDelegate extends NSObject {
    // instance method
    pathControlShouldDragItemWithPasteboard?(_: NSPathControl, shouldDrag: NSPathControlItem, with_: NSPasteboard): boolean;
    // instance method
    pathControlShouldDragPathComponentCellWithPasteboard?(_: NSPathControl, shouldDrag: NSPathComponentCell, with_: NSPasteboard): boolean;
    // instance method
    pathControlWillDisplayOpenPanel?(_: NSPathControl, willDisplay: NSOpenPanel): void;
    // instance method
    pathControlWillPopUpMenu?(_: NSPathControl, willPopUp: NSMenu): void;
    // instance method
    pathControlAcceptDrop?(_: NSPathControl, acceptDrop: NSDraggingInfo): boolean;
    // instance method
    pathControlValidateDrop?(_: NSPathControl, validateDrop: NSDraggingInfo): NSDragOperation;
  }

  // interface
  class NSPathControlItem extends NSObject {
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
  }

  // export function NSPerformService(itemName: string, pboard: NSPasteboard): boolean;

  // interface
  class NSPersistentDocument extends NSDocument {
    // ownInstanceProperties
    managedObjectContext: NSManagedObjectContext;
    setManagedObjectContext(_: NSManagedObjectContext)
    // ownInstanceProperties
    managedObjectModel: NSManagedObjectModel;
    // compoundInstanceMethods
    configurePersistentStoreCoordinatorForURLOfTypeModelConfigurationStoreOptionsError(ofType: NSURL, modelConfiguration: string, storeOptions?: string, error?: Map<string, any>): boolean;
    // compoundInstanceMethods
    persistentStoreTypeForFileType(forFileType: string): string;
  }

  // interface
  class NSPickerTouchBarItem extends NSTouchBarItem {
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    collapsedRepresentationImage: NSImage;
    setCollapsedRepresentationImage(_: NSImage)
    // ownInstanceProperties
    collapsedRepresentationLabel: string;
    setCollapsedRepresentationLabel(_: string)
    // ownInstanceProperties
    controlRepresentation: NSPickerTouchBarItem.ControlRepresentation;
    setControlRepresentation(_: NSPickerTouchBarItem.ControlRepresentation)
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    numberOfOptions: number;
    setNumberOfOptions(_: number)
    // ownInstanceProperties
    selectedIndex: number;
    setSelectedIndex(_: number)
    // ownInstanceProperties
    selectionColor: NSColor;
    setSelectionColor(_: NSColor)
    // ownInstanceProperties
    selectionMode: NSPickerTouchBarItem.SelectionMode;
    setSelectionMode(_: NSPickerTouchBarItem.SelectionMode)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // compoundInstanceMethods
    imageAtIndex(at: number): NSImage;
    // compoundInstanceMethods
    isEnabledAtIndex(at: number): boolean;
    // compoundInstanceMethods
    labelAtIndex(at: number): string;
    // compoundInstanceMethods
    setEnabledAtIndex(_: boolean, at: number): void;
    // compoundInstanceMethods
    setImageAtIndex(_?: NSImage, at?: number): void;
    // compoundInstanceMethods
    setLabelAtIndex(_: string, at: number): void;
  }

  // export function NSPlanarFromDepth(depth: NSWindow.Depth): boolean;

  // interface
  class NSPopUpButton extends NSButton {
    // compoundStaticMethods
    //  static checkboxWithTitleTargetAction(checkboxWithTitle: string, target?: any, action?: string): NSPopUpButton;
    // compoundStaticMethods
    //  static radioButtonWithTitleTargetAction(radioButtonWithTitle: string, target?: any, action?: string): NSPopUpButton;
    // ownInstanceProperties
    autoenablesItems: boolean;
    setAutoenablesItems(_: boolean)
    // ownInstanceProperties
    indexOfSelectedItem: number;
    // ownInstanceProperties
    itemArray: NSMenuItem[];
    // ownInstanceProperties
    itemTitles: string[];
    // ownInstanceProperties
    lastItem: NSMenuItem;
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    preferredEdge: NSRectEdge;
    setPreferredEdge(_: NSRectEdge)
    // ownInstanceProperties
    pullsDown: boolean;
    setPullsDown(_: boolean)
    // ownInstanceProperties
    selectedItem: NSMenuItem;
    // ownInstanceProperties
    //   selectedTag: number;
    // ownInstanceProperties
    titleOfSelectedItem: string;
    // compoundInstanceMethods
    addItemWithTitle(withTitle: string): void;
    // compoundInstanceMethods
    addItemsWithTitles(withTitles: string[]): void;
    // compoundInstanceMethods
    indexOfItem(of: NSMenuItem): number;
    // compoundInstanceMethods
    indexOfItemWithRepresentedObject(withRepresentedObject?: any): number;
    // compoundInstanceMethods
    indexOfItemWithTag(withTag: number): number;
    // compoundInstanceMethods
    indexOfItemWithTargetAndAction(withTarget?: any, andAction?: string): number;
    // compoundInstanceMethods
    indexOfItemWithTitle(withTitle: string): number;
    // compoundInstanceMethods
    static createWithFramePullsDown(frame: CGRect, pullsDown: boolean): NSPopUpButton;
    // compoundInstanceMethods
    insertItemWithTitleAtIndex(withTitle: string, at: number): void;
    // compoundInstanceMethods
    itemAtIndex(at: number): NSMenuItem;
    // compoundInstanceMethods
    itemTitleAtIndex(at: number): string;
    // compoundInstanceMethods
    itemWithTitle(withTitle: string): NSMenuItem;
    // compoundInstanceMethods
    removeAllItems(): void;
    // compoundInstanceMethods
    removeItemAtIndex(at: number): void;
    // compoundInstanceMethods
    removeItemWithTitle(withTitle: string): void;
    // compoundInstanceMethods
    selectItem(_?: NSMenuItem): void;
    // compoundInstanceMethods
    selectItemAtIndex(at: number): void;
    // compoundInstanceMethods
    selectItemWithTag(withTag: number): boolean;
    // compoundInstanceMethods
    selectItemWithTitle(withTitle: string): void;
    // compoundInstanceMethods
    setTitle(_: string): void;
    // compoundInstanceMethods
    synchronizeTitleAndSelectedItem(): void;
  }

  // interface
  class NSPopUpButtonCell extends NSMenuItemCell {
    // ownInstanceProperties
    altersStateOfSelectedItem: boolean;
    setAltersStateOfSelectedItem(_: boolean)
    // ownInstanceProperties
    arrowPosition: NSPopUpButton.ArrowPosition;
    setArrowPosition(_: NSPopUpButton.ArrowPosition)
    // ownInstanceProperties
    autoenablesItems: boolean;
    setAutoenablesItems(_: boolean)
    // ownInstanceProperties
    indexOfSelectedItem: number;
    // ownInstanceProperties
    itemArray: NSMenuItem[];
    // ownInstanceProperties
    itemTitles: string[];
    // ownInstanceProperties
    lastItem: NSMenuItem;
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    preferredEdge: NSRectEdge;
    setPreferredEdge(_: NSRectEdge)
    // ownInstanceProperties
    pullsDown: boolean;
    setPullsDown(_: boolean)
    // ownInstanceProperties
    selectedItem: NSMenuItem;
    // ownInstanceProperties
    titleOfSelectedItem: string;
    // ownInstanceProperties
    usesItemFromMenu: boolean;
    setUsesItemFromMenu(_: boolean)
    // compoundInstanceMethods
    addItemWithTitle(withTitle: string): void;
    // compoundInstanceMethods
    addItemsWithTitles(withTitles: string[]): void;
    // compoundInstanceMethods
    attachPopUpWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    dismissPopUp(): void;
    // compoundInstanceMethods
    indexOfItem(of: NSMenuItem): number;
    // compoundInstanceMethods
    indexOfItemWithRepresentedObject(withRepresentedObject?: any): number;
    // compoundInstanceMethods
    indexOfItemWithTag(withTag: number): number;
    // compoundInstanceMethods
    indexOfItemWithTargetAndAction(withTarget?: any, andAction?: string): number;
    // compoundInstanceMethods
    indexOfItemWithTitle(withTitle: string): number;
    // compoundInstanceMethods
    static createWithTextCellPullsDown(textCell: string, pullsDown: boolean): NSPopUpButtonCell;
    // compoundInstanceMethods
    insertItemWithTitleAtIndex(withTitle: string, at: number): void;
    // compoundInstanceMethods
    itemAtIndex(at: number): NSMenuItem;
    // compoundInstanceMethods
    itemTitleAtIndex(at: number): string;
    // compoundInstanceMethods
    itemWithTitle(withTitle: string): NSMenuItem;
    // compoundInstanceMethods
    performClickWithFrameInView(withFrame: CGRect, in_: NSView): void;
    // compoundInstanceMethods
    removeAllItems(): void;
    // compoundInstanceMethods
    removeItemAtIndex(at: number): void;
    // compoundInstanceMethods
    removeItemWithTitle(withTitle: string): void;
    // compoundInstanceMethods
    selectItem(_?: NSMenuItem): void;
    // compoundInstanceMethods
    selectItemAtIndex(at: number): void;
    // compoundInstanceMethods
    selectItemWithTag(withTag: number): boolean;
    // compoundInstanceMethods
    selectItemWithTitle(withTitle: string): void;
    // compoundInstanceMethods
    setTitle(_?: string): void;
    // compoundInstanceMethods
    synchronizeTitleAndSelectedItem(): void;
  }

  // interface
  class NSPopover extends NSResponder {
    // ownInstanceProperties
    animates: boolean;
    setAnimates(_: boolean)
    // ownInstanceProperties
    behavior: NSPopover.Behavior;
    setBehavior(_: NSPopover.Behavior)
    // ownInstanceProperties
    contentSize: CGSize;
    setContentSize(_: CGSize)
    // ownInstanceProperties
    contentViewController: NSViewController;
    setContentViewController(_: NSViewController)
    // ownInstanceProperties
    delegate: NSPopoverDelegate;
    setDelegate(_: NSPopoverDelegate)
    // ownInstanceProperties
    isDetached: boolean;
    // ownInstanceProperties
    positioningRect: CGRect;
    setPositioningRect(_: CGRect)
    // ownInstanceProperties
    isShown: boolean;
    // compoundInstanceMethods
    close(): void;
    // compoundInstanceMethods
    performClose(_?: any): void;
    // compoundInstanceMethods
    showRelativeToRectOfViewPreferredEdge(relativeTo: CGRect, of: NSView, preferredEdge: NSRectEdge): void;
  }

  interface NSPopoverDelegate extends NSObject {
    // instance method
    detachableWindowForPopover?(for_: NSPopover): NSWindow;
    // instance method
    popoverDidClose?(_: NSNotification): void;
    // instance method
    popoverDidDetach?(_: NSPopover): void;
    // instance method
    popoverDidShow?(_: NSNotification): void;
    // instance method
    popoverShouldClose?(_: NSPopover): boolean;
    // instance method
    popoverShouldDetach?(_: NSPopover): boolean;
    // instance method
    popoverWillClose?(_: NSNotification): void;
    // instance method
    popoverWillShow?(_: NSNotification): void;
  }

  // interface
  class NSPopoverTouchBarItem extends NSTouchBarItem {
    // ownInstanceProperties
    collapsedRepresentation: NSView;
    setCollapsedRepresentation(_: NSView)
    // ownInstanceProperties
    collapsedRepresentationImage: NSImage;
    setCollapsedRepresentationImage(_: NSImage)
    // ownInstanceProperties
    collapsedRepresentationLabel: string;
    setCollapsedRepresentationLabel(_: string)
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    popoverTouchBar: NSTouchBar;
    setPopoverTouchBar(_: NSTouchBar)
    // ownInstanceProperties
    pressAndHoldTouchBar: NSTouchBar;
    setPressAndHoldTouchBar(_: NSTouchBar)
    // ownInstanceProperties
    showsCloseButton: boolean;
    setShowsCloseButton(_: boolean)
    // compoundInstanceMethods
    dismissPopover(_?: any): void;
    // compoundInstanceMethods
    makeStandardActivatePopoverGestureRecognizer(): NSGestureRecognizer;
    // compoundInstanceMethods
    showPopover(_?: any): void;
  }

  // interface
  class NSPredicateEditor extends NSRuleEditor {
    // ownInstanceProperties
    rowTemplates: NSPredicateEditorRowTemplate[];
    setRowTemplates(_: NSPredicateEditorRowTemplate[])
  }

  // interface
  class NSPredicateEditorRowTemplate extends NSObject {
    // compoundStaticMethods
    static templatesWithAttributeKeyPathsInEntityDescription(withAttributeKeyPaths: string[], in_: NSEntityDescription): NSPredicateEditorRowTemplate[];
    // ownInstanceProperties
    compoundTypes: number[];
    // ownInstanceProperties
    leftExpressions: NSExpression[];
    // ownInstanceProperties
    modifier: NSComparisonPredicate.Modifier;
    // ownInstanceProperties
    operators: number[];
    // ownInstanceProperties
    options: number;
    // ownInstanceProperties
    rightExpressionAttributeType: NSAttributeType;
    // ownInstanceProperties
    rightExpressions: NSExpression[];
    // ownInstanceProperties
    templateViews: NSView[];
    // compoundInstanceMethods
    displayableSubpredicatesOfPredicate(of: NSPredicate): NSPredicate[];
    // compoundInstanceMethods
    static createWithCompoundTypes(compoundTypes: number[]): NSPredicateEditorRowTemplate;
    // compoundInstanceMethods
    static createWithLeftExpressionsRightExpressionAttributeTypeModifierOperatorsOptions(leftExpressions: NSExpression[], rightExpressionAttributeType: NSAttributeType, modifier: NSComparisonPredicate.Modifier, operators: number[], options: number): NSPredicateEditorRowTemplate;
    // compoundInstanceMethods
    static createWithLeftExpressionsRightExpressionsModifierOperatorsOptions(leftExpressions: NSExpression[], rightExpressions: NSExpression[], modifier: NSComparisonPredicate.Modifier, operators: number[], options: number): NSPredicateEditorRowTemplate;
    // compoundInstanceMethods
    matchForPredicate(for_: NSPredicate): number;
    // compoundInstanceMethods
    predicateWithSubpredicates(withSubpredicates?: NSPredicate[]): NSPredicate;
    // compoundInstanceMethods
    setPredicate(_: NSPredicate): void;
  }

  // interface
  class NSPressGestureRecognizer extends NSGestureRecognizer {
    // ownInstanceProperties
    allowableMovement: number;
    setAllowableMovement(_: number)
    // ownInstanceProperties
    buttonMask: number;
    setButtonMask(_: number)
    // ownInstanceProperties
    minimumPressDuration: number;
    setMinimumPressDuration(_: number)
    // ownInstanceProperties
    numberOfTouchesRequired: number;
    setNumberOfTouchesRequired(_: number)
  }

  // interface
  class NSPressureConfiguration extends NSObject {
    // ownInstanceProperties
    pressureBehavior: NSEvent.PressureBehavior;
    // compoundInstanceMethods
    static createWithPressureBehavior(pressureBehavior: NSEvent.PressureBehavior): NSPressureConfiguration;
    // compoundInstanceMethods
    set(): void;
  }

  // interface
  class NSPrintInfo extends NSObject {
    // ownInstanceProperties
    bottomMargin: number;
    setBottomMargin(_: number)
    // ownInstanceProperties
    horizontalPagination: NSPrintInfo.PaginationMode;
    setHorizontalPagination(_: NSPrintInfo.PaginationMode)
    // ownInstanceProperties
    isHorizontallyCentered: boolean;
    setHorizontallyCentered(_: boolean)
    // ownInstanceProperties
    imageablePageBounds: CGRect;
    // ownInstanceProperties
    jobDisposition: string;
    setJobDisposition(_: string)
    // ownInstanceProperties
    leftMargin: number;
    setLeftMargin(_: number)
    // ownInstanceProperties
    localizedPaperName: string;
    // ownInstanceProperties
    orientation: NSPrintInfo.PaperOrientation;
    setOrientation(_: NSPrintInfo.PaperOrientation)
    // ownInstanceProperties
    paperName: string;
    setPaperName(_: string)
    // ownInstanceProperties
    paperSize: CGSize;
    setPaperSize(_: CGSize)
    // ownInstanceProperties
    printSettings: NSMutableDictionary<string, any>;
    // ownInstanceProperties
    printer: NSPrinter;
    setPrinter(_: NSPrinter)
    // ownInstanceProperties
    rightMargin: number;
    setRightMargin(_: number)
    // ownInstanceProperties
    scalingFactor: number;
    setScalingFactor(_: number)
    // ownInstanceProperties
    isSelectionOnly: boolean;
    setSelectionOnly(_: boolean)
    // ownInstanceProperties
    topMargin: number;
    setTopMargin(_: number)
    // ownInstanceProperties
    verticalPagination: NSPrintInfo.PaginationMode;
    setVerticalPagination(_: NSPrintInfo.PaginationMode)
    // ownInstanceProperties
    isVerticallyCentered: boolean;
    setVerticallyCentered(_: boolean)
    // ownStaticProperties
    static defaultPrinter: NSPrinter;
    // ownStaticProperties
    static sharedPrintInfo: NSPrintInfo;
    setSharedPrintInfo(_: NSPrintInfo)
    // compoundInstanceMethods
    PMPageFormat(): any;
    // compoundInstanceMethods
    PMPrintSession(): any;
    // compoundInstanceMethods
    PMPrintSettings(): any;
    // compoundInstanceMethods
    dictionary(): NSMutableDictionary<string, any>;
    // compoundInstanceMethods
    static createWithDictionary(dictionary: Map<string, any>): NSPrintInfo;
    // compoundInstanceMethods
    setUpPrintOperationDefaultValues(): void;
    // compoundInstanceMethods
    takeSettingsFromPDFInfo(from: NSPDFInfo): void;
    // compoundInstanceMethods
    updateFromPMPageFormat(): void;
    // compoundInstanceMethods
    updateFromPMPrintSettings(): void;
  }

  // interface
  class NSPrintOperation extends NSObject {
    // compoundStaticMethods
    static EPSOperationWithViewInsideRectToData(with_: NSView, inside: CGRect, to?: NSMutableData): NSPrintOperation;
    // compoundStaticMethods
    static EPSOperationWithViewInsideRectToDataPrintInfo(with_: NSView, inside: CGRect, to: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
    // compoundStaticMethods
    static EPSOperationWithViewInsideRectToPathPrintInfo(with_: NSView, inside: CGRect, toPath: string, printInfo: NSPrintInfo): NSPrintOperation;
    // compoundStaticMethods
    static PDFOperationWithViewInsideRectToData(with_: NSView, inside: CGRect, to: NSMutableData): NSPrintOperation;
    // compoundStaticMethods
    static PDFOperationWithViewInsideRectToDataPrintInfo(with_: NSView, inside: CGRect, to: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
    // compoundStaticMethods
    static PDFOperationWithViewInsideRectToPathPrintInfo(with_: NSView, inside: CGRect, toPath: string, printInfo: NSPrintInfo): NSPrintOperation;
    // ownInstanceProperties
    PDFPanel: NSPDFPanel;
    setPDFPanel(_: NSPDFPanel)
    // ownInstanceProperties
    canSpawnSeparateThread: boolean;
    setCanSpawnSeparateThread(_: boolean)
    // ownInstanceProperties
    context: NSGraphicsContext;
    // ownInstanceProperties
    isCopyingOperation: boolean;
    // ownInstanceProperties
    currentPage: number;
    // ownInstanceProperties
    jobTitle: string;
    setJobTitle(_: string)
    // ownInstanceProperties
    pageOrder: NSPrintOperation.PageOrder;
    setPageOrder(_: NSPrintOperation.PageOrder)
    // ownInstanceProperties
    pageRange: NSRange;
    // ownInstanceProperties
    preferredRenderingQuality: NSPrintOperation.RenderingQuality;
    // ownInstanceProperties
    printInfo: NSPrintInfo;
    setPrintInfo(_: NSPrintInfo)
    // ownInstanceProperties
    printPanel: NSPrintPanel;
    setPrintPanel(_: NSPrintPanel)
    // ownInstanceProperties
    showsPrintPanel: boolean;
    setShowsPrintPanel(_: boolean)
    // ownInstanceProperties
    showsProgressPanel: boolean;
    setShowsProgressPanel(_: boolean)
    // ownInstanceProperties
    view: NSView;
    // ownStaticProperties
    static currentOperation: NSPrintOperation;
    setCurrentOperation(_: NSPrintOperation)
    // compoundInstanceMethods
    cleanUpOperation(): void;
    // compoundInstanceMethods
    createContext(): NSGraphicsContext;
    // compoundInstanceMethods
    deliverResult(): boolean;
    // compoundInstanceMethods
    destroyContext(): void;
    // compoundInstanceMethods
    runOperation(): boolean;
    // compoundInstanceMethods
    runOperationModalForWindowDelegateDidRunSelectorContextInfo(for_: NSWindow, delegate?: any, didRun?: string, contextInfo?: any): void;
  }

  // interface
  class NSPrintPanel extends NSObject {
    // ownInstanceProperties
    accessoryControllers: NSViewController[];
    // ownInstanceProperties
    helpAnchor: string;
    setHelpAnchor(_: string)
    // ownInstanceProperties
    jobStyleHint: string;
    setJobStyleHint(_: string)
    // ownInstanceProperties
    options: NSPrintPanel.Options;
    setOptions(_: NSPrintPanel.Options)
    // ownInstanceProperties
    printInfo: NSPrintInfo;
    // compoundInstanceMethods
    addAccessoryController(_: NSViewController): void;
    // compoundInstanceMethods
    beginSheetWithPrintInfoModalForWindowDelegateDidEndSelectorContextInfo(with_: NSPrintInfo, modalFor: NSWindow, delegate?: any, didEnd?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    defaultButtonTitle(): string;
    // compoundInstanceMethods
    removeAccessoryController(_: NSViewController): void;
    // compoundInstanceMethods
    runModal(): number;
    // compoundInstanceMethods
    runModalWithPrintInfo(with_: NSPrintInfo): number;
    // compoundInstanceMethods
    setDefaultButtonTitle(_?: string): void;
  }

  interface NSPrintPanelAccessorizing {
    // instance method
    keyPathsForValuesAffectingPreview?(): NSSet<string>;
    // instance method
    localizedSummaryItems(): Map<string, string>[];
  }

  // interface
  class NSPrinter extends NSObject {
    // ownInstanceProperties
    deviceDescription: Map<string, any>;
    // ownInstanceProperties
    languageLevel: number;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    type: string;
    // ownStaticProperties
    static printerNames: string[];
    // ownStaticProperties
    static printerTypes: string[];
    // compoundInstanceMethods
    pageSizeForPaper(forPaper: string): CGSize;
  }

  // interface
  class NSProgressIndicator extends NSView {
    // ownInstanceProperties
    isBezeled: boolean;
    setBezeled(_: boolean)
    // ownInstanceProperties
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize)
    // ownInstanceProperties
    controlTint: NSControlTint;
    setControlTint(_: NSControlTint)
    // ownInstanceProperties
    isDisplayedWhenStopped: boolean;
    setDisplayedWhenStopped(_: boolean)
    // ownInstanceProperties
    doubleValue: number;
    setDoubleValue(_: number)
    // ownInstanceProperties
    isIndeterminate: boolean;
    setIndeterminate(_: boolean)
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    style: NSProgressIndicator.Style;
    setStyle(_: NSProgressIndicator.Style)
    // ownInstanceProperties
    usesThreadedAnimation: boolean;
    setUsesThreadedAnimation(_: boolean)
    // compoundInstanceMethods
    incrementBy(by: number): void;
    // compoundInstanceMethods
    sizeToFit(): void;
    // compoundInstanceMethods
    startAnimation(_?: any): void;
    // compoundInstanceMethods
    stopAnimation(_?: any): void;
  }

  // export function NSRectClip(rect: CGRect): void;

  // export function NSRectClipList(rects: NSRect, count: number): void;

  // export function NSRectFill(rect: CGRect): void;

  // export function NSRectFillList(rects: NSRect, count: number): void;

  // export function NSRectFillListUsingOperation(rects: NSRect, count: number, op: NSCompositingOperation): void;

  // export function NSRectFillListWithColors(rects: NSRect, colors: NSColor, num: number): void;

  // export function NSRectFillListWithColorsUsingOperation(rects: NSRect, colors: NSColor, num: number, op: NSCompositingOperation): void;

  // export function NSRectFillListWithGrays(rects: NSRect, grays: number, num: number): void;

  // export function NSRectFillUsingOperation(rect: CGRect, op: NSCompositingOperation): void;

  // export function NSRegisterServicesProvider(provider: any, name: string): void;

  // interface
  class NSResponder extends NSObject {
    // ownInstanceProperties
    acceptsFirstResponder: boolean;
    // ownInstanceProperties
    menu: NSMenu;
    setMenu(_: NSMenu)
    // ownInstanceProperties
    nextResponder: NSResponder;
    setNextResponder(_: NSResponder)
    // ownInstanceProperties
    touchBar: NSTouchBar;
    setTouchBar(_: NSTouchBar)
    // ownInstanceProperties
    undoManager: UndoManager;
    // ownInstanceProperties
    userActivity: NSUserActivity;
    setUserActivity(_: NSUserActivity)
    // ownStaticProperties
    static restorableStateKeyPaths: string[];
    // compoundInstanceMethods
    becomeFirstResponder(): boolean;
    // compoundInstanceMethods
    beginGestureWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    changeModeWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    cursorUpdate(with_: NSEvent): void;
    // compoundInstanceMethods
    encodeRestorableStateWithCoder(with_: NSCoder): void;
    // compoundInstanceMethods
    encodeRestorableStateWithCoderBackgroundQueue(with_: NSCoder, backgroundQueue: OperationQueue): void;
    // compoundInstanceMethods
    endGestureWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    flagsChanged(with_: NSEvent): void;
    // compoundInstanceMethods
    flushBufferedKeyEvents(): void;
    // compoundInstanceMethods
    helpRequested(_: NSEvent): void;
    // compoundInstanceMethods
    interpretKeyEvents(_: NSEvent[]): void;
    // compoundInstanceMethods
    invalidateRestorableState(): void;
    // compoundInstanceMethods
    keyDown(with_: NSEvent): void;
    // compoundInstanceMethods
    keyUp(with_: NSEvent): void;
    // compoundInstanceMethods
    magnifyWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    makeTouchBar(): NSTouchBar;
    // compoundInstanceMethods
    mouseDown(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseDragged(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseEntered(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseExited(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseMoved(with_: NSEvent): void;
    // compoundInstanceMethods
    mouseUp(with_: NSEvent): void;
    // compoundInstanceMethods
    newWindowForTab(_?: any): void;
    // compoundInstanceMethods
    noResponderFor(for_: string): void;
    // compoundInstanceMethods
    otherMouseDown(with_: NSEvent): void;
    // compoundInstanceMethods
    otherMouseDragged(with_: NSEvent): void;
    // compoundInstanceMethods
    otherMouseUp(with_: NSEvent): void;
    // compoundInstanceMethods
    performKeyEquivalent(with_: NSEvent): boolean;
    // compoundInstanceMethods
    performTextFinderAction(_?: any): void;
    // compoundInstanceMethods
    presentError(_: NSError): boolean;
    // compoundInstanceMethods
    presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(_: NSError, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
    // compoundInstanceMethods
    pressureChangeWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    quickLookWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    resignFirstResponder(): boolean;
    // compoundInstanceMethods
    restoreStateWithCoder(with_: NSCoder): void;
    // compoundInstanceMethods
    rightMouseDown(with_: NSEvent): void;
    // compoundInstanceMethods
    rightMouseDragged(with_: NSEvent): void;
    // compoundInstanceMethods
    rightMouseUp(with_: NSEvent): void;
    // compoundInstanceMethods
    rotateWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    scrollWheel(with_: NSEvent): void;
    // compoundInstanceMethods
    shouldBeTreatedAsInkEvent(_: NSEvent): boolean;
    // compoundInstanceMethods
    showContextHelp(_?: any): void;
    // compoundInstanceMethods
    smartMagnifyWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    supplementalTargetForActionSender(forAction: string, sender?: any): any;
    // compoundInstanceMethods
    swipeWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    tabletPoint(with_: NSEvent): void;
    // compoundInstanceMethods
    tabletProximity(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesBeganWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesCancelledWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesEndedWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    touchesMovedWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    tryToPerformWith(_: string, with_?: any): boolean;
    // compoundInstanceMethods
    updateUserActivityState(_: NSUserActivity): void;
    // compoundInstanceMethods
    validRequestorForSendTypeReturnType(forSendType?: string, returnType?: string): any;
    // compoundInstanceMethods
    validateProposedFirstResponderForEvent(_: NSResponder, for_?: NSEvent): boolean;
    // compoundInstanceMethods
    wantsForwardedScrollEventsForAxis(for_: NSEvent.GestureAxis): boolean;
    // compoundInstanceMethods
    wantsScrollEventsForSwipeTrackingOnAxis(on: NSEvent.GestureAxis): boolean;
    // compoundInstanceMethods
    willPresentError(_: NSError): NSError;
  }

  // interface
  class NSRotationGestureRecognizer extends NSGestureRecognizer {
    // ownInstanceProperties
    rotation: number;
    setRotation(_: number)
    // ownInstanceProperties
    rotationInDegrees: number;
    setRotationInDegrees(_: number)
  }

  // interface
  class NSRuleEditor extends NSControl {
    // ownInstanceProperties
    canRemoveAllRows: boolean;
    setCanRemoveAllRows(_: boolean)
    // ownInstanceProperties
    criteriaKeyPath: string;
    setCriteriaKeyPath(_: string)
    // ownInstanceProperties
    delegate: NSRuleEditorDelegate;
    setDelegate(_: NSRuleEditorDelegate)
    // ownInstanceProperties
    displayValuesKeyPath: string;
    setDisplayValuesKeyPath(_: string)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    formattingDictionary: Map<string, string>;
    setFormattingDictionary(_: Map<string, string>)
    // ownInstanceProperties
    formattingStringsFilename: string;
    setFormattingStringsFilename(_: string)
    // ownInstanceProperties
    nestingMode: NSRuleEditor.NestingMode;
    setNestingMode(_: NSRuleEditor.NestingMode)
    // ownInstanceProperties
    numberOfRows: number;
    // ownInstanceProperties
    predicate: NSPredicate;
    // ownInstanceProperties
    rowClass: typeof NSObject;
    setRowClass(_: typeof NSObject)
    // ownInstanceProperties
    rowHeight: number;
    setRowHeight(_: number)
    // ownInstanceProperties
    rowTypeKeyPath: string;
    setRowTypeKeyPath(_: string)
    // ownInstanceProperties
    selectedRowIndexes: NSIndexSet;
    // ownInstanceProperties
    subrowsKeyPath: string;
    setSubrowsKeyPath(_: string)
    // compoundInstanceMethods
    addRow(_?: any): void;
    // compoundInstanceMethods
    criteriaForRow(forRow: number): any[];
    // compoundInstanceMethods
    displayValuesForRow(forRow: number): any[];
    // compoundInstanceMethods
    insertRowAtIndexWithTypeAsSubrowOfRowAnimate(at: number, with_: NSRuleEditor.RowType, asSubrowOfRow: number, animate: boolean): void;
    // compoundInstanceMethods
    parentRowForRow(forRow: number): number;
    // compoundInstanceMethods
    predicateForRow(forRow: number): NSPredicate;
    // compoundInstanceMethods
    reloadCriteria(): void;
    // compoundInstanceMethods
    reloadPredicate(): void;
    // compoundInstanceMethods
    removeRowAtIndex(at: number): void;
    // compoundInstanceMethods
    removeRowsAtIndexesIncludeSubrows(at: NSIndexSet, includeSubrows: boolean): void;
    // compoundInstanceMethods
    rowForDisplayValue(forDisplayValue: any): number;
    // compoundInstanceMethods
    rowTypeForRow(forRow: number): NSRuleEditor.RowType;
    // compoundInstanceMethods
    selectRowIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    // compoundInstanceMethods
    setCriteriaAndDisplayValuesForRowAtIndex(_: any[], andDisplayValues: any[], forRowAt: number): void;
    // compoundInstanceMethods
    subrowIndexesForRow(forRow: number): NSIndexSet;
  }

  interface NSRuleEditorDelegate extends NSObject {
    // instance method
    ruleEditorNumberOfChildrenForCriterionWithRowType(_: NSRuleEditor, numberOfChildrenForCriterion?: any, with_?: NSRuleEditor.RowType): number;
    // instance method
    ruleEditorChildForCriterionWithRowType(_: NSRuleEditor, child: number, forCriterion?: any, with_?: NSRuleEditor.RowType): any;
    // instance method
    ruleEditorDisplayValueForCriterionInRow(_: NSRuleEditor, displayValueForCriterion: any, inRow: number): any;
    // instance method
    ruleEditorPredicatePartsForCriterionWithDisplayValueInRow?(_: NSRuleEditor, predicatePartsForCriterion: any, withDisplayValue: any, inRow: number): Map<string, any>;
    // instance method
    ruleEditorRowsDidChange?(_: NSNotification): void;
  }

  // interface
  class NSRulerMarker extends NSObject {
    // ownInstanceProperties
    isDragging: boolean;
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    imageOrigin: CGPoint;
    setImageOrigin(_: CGPoint)
    // ownInstanceProperties
    imageRectInRuler: CGRect;
    // ownInstanceProperties
    markerLocation: number;
    setMarkerLocation(_: number)
    // ownInstanceProperties
    isMovable: boolean;
    setMovable(_: boolean)
    // ownInstanceProperties
    isRemovable: boolean;
    setRemovable(_: boolean)
    // ownInstanceProperties
    representedObject: any;
    setRepresentedObject(_: any)
    // ownInstanceProperties
    ruler: NSRulerView;
    // ownInstanceProperties
    thicknessRequiredInRuler: number;
    // compoundInstanceMethods
    drawRect(_: CGRect): void;
    // compoundInstanceMethods
    static createWithRulerViewMarkerLocationImageImageOrigin(rulerView: NSRulerView, markerLocation: number, image: NSImage, imageOrigin: CGPoint): NSRulerMarker;
    // compoundInstanceMethods
    trackMouseAdding(with_: NSEvent, adding: boolean): boolean;
  }

  // interface
  class NSRulerView extends NSView {
    // compoundStaticMethods
    static registerUnitWithNameAbbreviationUnitToPointsConversionFactorStepUpCycleStepDownCycle(withName: string, abbreviation: string, unitToPointsConversionFactor: number, stepUpCycle: number[], stepDownCycle: number[]): void;
    // ownInstanceProperties
    accessoryView: NSView;
    setAccessoryView(_: NSView)
    // ownInstanceProperties
    baselineLocation: number;
    // ownInstanceProperties
    clientView: NSView;
    setClientView(_: NSView)
    // ownInstanceProperties
    markers: NSRulerMarker[];
    setMarkers(_: NSRulerMarker[])
    // ownInstanceProperties
    measurementUnits: string;
    setMeasurementUnits(_: string)
    // ownInstanceProperties
    orientation: NSRulerView.Orientation;
    setOrientation(_: NSRulerView.Orientation)
    // ownInstanceProperties
    originOffset: number;
    setOriginOffset(_: number)
    // ownInstanceProperties
    requiredThickness: number;
    // ownInstanceProperties
    reservedThicknessForAccessoryView: number;
    setReservedThicknessForAccessoryView(_: number)
    // ownInstanceProperties
    reservedThicknessForMarkers: number;
    setReservedThicknessForMarkers(_: number)
    // ownInstanceProperties
    ruleThickness: number;
    setRuleThickness(_: number)
    // ownInstanceProperties
    scrollView: NSScrollView;
    setScrollView(_: NSScrollView)
    // compoundInstanceMethods
    addMarker(_: NSRulerMarker): void;
    // compoundInstanceMethods
    drawHashMarksAndLabelsInRect(in_: CGRect): void;
    // compoundInstanceMethods
    drawMarkersInRect(in_: CGRect): void;
    // compoundInstanceMethods
    static createWithScrollViewOrientation(scrollView?: NSScrollView, orientation?: NSRulerView.Orientation): NSRulerView;
    // compoundInstanceMethods
    invalidateHashMarks(): void;
    // compoundInstanceMethods
    moveRulerlineFromLocationToLocation(fromLocation: number, toLocation: number): void;
    // compoundInstanceMethods
    removeMarker(_: NSRulerMarker): void;
    // compoundInstanceMethods
    trackMarkerWithMouseEvent(_: NSRulerMarker, withMouseEvent: NSEvent): boolean;
  }

  // interface
  class NSRunningApplication extends NSObject {
    // compoundStaticMethods
    static runningApplicationsWithBundleIdentifier(withBundleIdentifier: string): NSRunningApplication[];
    // compoundStaticMethods
    static terminateAutomaticallyTerminableApplications(): void;
    // ownInstanceProperties
    activationPolicy: NSApplication.ActivationPolicy;
    // ownInstanceProperties
    isActive: boolean;
    // ownInstanceProperties
    bundleIdentifier: string;
    // ownInstanceProperties
    bundleURL: NSURL;
    // ownInstanceProperties
    executableArchitecture: number;
    // ownInstanceProperties
    executableURL: NSURL;
    // ownInstanceProperties
    isFinishedLaunching: boolean;
    // ownInstanceProperties
    isHidden: boolean;
    // ownInstanceProperties
    icon: NSImage;
    // ownInstanceProperties
    launchDate: Date;
    // ownInstanceProperties
    localizedName: string;
    // ownInstanceProperties
    ownsMenuBar: boolean;
    // ownInstanceProperties
    processIdentifier: number;
    // ownInstanceProperties
    isTerminated: boolean;
    // ownStaticProperties
    static currentApplication: NSRunningApplication;
    // compoundInstanceMethods
    activateWithOptions(options: NSApplication.ActivationOptions): boolean;
    // compoundInstanceMethods
    forceTerminate(): boolean;
    // compoundInstanceMethods
    hide(): boolean;
    // compoundInstanceMethods
    terminate(): boolean;
    // compoundInstanceMethods
    unhide(): boolean;
  }

  // interface
  class NSSavePanel extends NSPanel {
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    accessoryView: NSView;
    setAccessoryView(_: NSView)
    // ownInstanceProperties
    allowedFileTypes: string[];
    setAllowedFileTypes(_: string[])
    // ownInstanceProperties
    allowsOtherFileTypes: boolean;
    setAllowsOtherFileTypes(_: boolean)
    // ownInstanceProperties
    canCreateDirectories: boolean;
    setCanCreateDirectories(_: boolean)
    // ownInstanceProperties
    canSelectHiddenExtension: boolean;
    setCanSelectHiddenExtension(_: boolean)
    // ownInstanceProperties
    //   delegate: NSOpenSavePanelDelegate;
    // setDelegate(_: NSOpenSavePanelDelegate)
    // ownInstanceProperties
    directoryURL: NSURL;
    setDirectoryURL(_: NSURL)
    // ownInstanceProperties
    isExpanded: boolean;
    // ownInstanceProperties
    isExtensionHidden: boolean;
    setExtensionHidden(_: boolean)
    // ownInstanceProperties
    message: string;
    setMessage(_: string)
    // ownInstanceProperties
    nameFieldLabel: string;
    setNameFieldLabel(_: string)
    // ownInstanceProperties
    nameFieldStringValue: string;
    setNameFieldStringValue(_: string)
    // ownInstanceProperties
    prompt: string;
    setPrompt(_: string)
    // ownInstanceProperties
    showsHiddenFiles: boolean;
    setShowsHiddenFiles(_: boolean)
    // ownInstanceProperties
    showsTagField: boolean;
    setShowsTagField(_: boolean)
    // ownInstanceProperties
    tagNames: string[];
    setTagNames(_: string[])
    // ownInstanceProperties
    treatsFilePackagesAsDirectories: boolean;
    setTreatsFilePackagesAsDirectories(_: boolean)
    // compoundInstanceMethods
    beginSheetModalForCompletionHandler(for_: NSWindow, completionHandler: (p1: number) => void): void;
    // compoundInstanceMethods
    beginWithCompletionHandler(completionHandler: (p1: number) => void): void;
    // compoundInstanceMethods
    cancel(_?: any): void;
    // compoundInstanceMethods
    ok(_?: any): void;
    // compoundInstanceMethods
    runModal(): number;
    // compoundInstanceMethods
    validateVisibleColumns(): void;
  }

  // interface
  class NSScreen extends NSObject {
    // ownInstanceProperties
    backingScaleFactor: number;
    // ownInstanceProperties
    colorSpace: NSColorSpace;
    // ownInstanceProperties
    depth: NSWindow.Depth;
    // ownInstanceProperties
    deviceDescription: Map<string, any>;
    // ownInstanceProperties
    frame: CGRect;
    // ownInstanceProperties
    localizedName: string;
    // ownInstanceProperties
    maximumExtendedDynamicRangeColorComponentValue: number;
    // ownInstanceProperties
    maximumPotentialExtendedDynamicRangeColorComponentValue: number;
    // ownInstanceProperties
    maximumReferenceExtendedDynamicRangeColorComponentValue: number;
    // ownInstanceProperties
    supportedWindowDepths: NSWindow.Depth;
    // ownInstanceProperties
    visibleFrame: CGRect;
    // ownStaticProperties
    static deepestScreen: NSScreen;
    // ownStaticProperties
    static mainScreen: NSScreen;
    // ownStaticProperties
    static screens: NSScreen[];
    // ownStaticProperties
    static screensHaveSeparateSpaces: boolean;
    // compoundInstanceMethods
    backingAlignedRectOptions(_: CGRect, options: AlignmentOptions): CGRect;
    // compoundInstanceMethods
    canRepresentDisplayGamut(_: NSDisplayGamut): boolean;
    // compoundInstanceMethods
    convertRectFromBacking(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertRectToBacking(_: CGRect): CGRect;
  }

  // interface
  class NSScrollView extends NSView {
    // compoundStaticMethods
    static contentSizeForFrameSizeHorizontalScrollerClassVerticalScrollerClassBorderTypeControlSizeScrollerStyle(forFrameSize: CGSize, horizontalScrollerClass?: typeof NSObject, verticalScrollerClass?: typeof NSObject, borderType?: NSBorderType, controlSize?: NSControl.ControlSize, scrollerStyle?: NSScroller.Style): CGSize;
    // compoundStaticMethods
    static frameSizeForContentSizeHorizontalScrollerClassVerticalScrollerClassBorderTypeControlSizeScrollerStyle(forContentSize: CGSize, horizontalScrollerClass?: typeof NSObject, verticalScrollerClass?: typeof NSObject, borderType?: NSBorderType, controlSize?: NSControl.ControlSize, scrollerStyle?: NSScroller.Style): CGSize;
    // ownInstanceProperties
    allowsMagnification: boolean;
    setAllowsMagnification(_: boolean)
    // ownInstanceProperties
    autohidesScrollers: boolean;
    setAutohidesScrollers(_: boolean)
    // ownInstanceProperties
    automaticallyAdjustsContentInsets: boolean;
    setAutomaticallyAdjustsContentInsets(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    borderType: NSBorderType;
    setBorderType(_: NSBorderType)
    // ownInstanceProperties
    contentInsets: NSEdgeInsets;
    setContentInsets(_: NSEdgeInsets)
    // ownInstanceProperties
    contentSize: CGSize;
    // ownInstanceProperties
    contentView: NSClipView;
    setContentView(_: NSClipView)
    // ownInstanceProperties
    documentCursor: NSCursor;
    setDocumentCursor(_: NSCursor)
    // ownInstanceProperties
    documentView: NSView;
    setDocumentView(_: NSView)
    // ownInstanceProperties
    documentVisibleRect: CGRect;
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    findBarPosition: NSScrollView.FindBarPosition;
    setFindBarPosition(_: NSScrollView.FindBarPosition)
    // ownInstanceProperties
    hasHorizontalRuler: boolean;
    setHasHorizontalRuler(_: boolean)
    // ownInstanceProperties
    hasHorizontalScroller: boolean;
    setHasHorizontalScroller(_: boolean)
    // ownInstanceProperties
    hasVerticalRuler: boolean;
    setHasVerticalRuler(_: boolean)
    // ownInstanceProperties
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean)
    // ownInstanceProperties
    horizontalLineScroll: number;
    setHorizontalLineScroll(_: number)
    // ownInstanceProperties
    horizontalPageScroll: number;
    setHorizontalPageScroll(_: number)
    // ownInstanceProperties
    horizontalRulerView: NSRulerView;
    setHorizontalRulerView(_: NSRulerView)
    // ownInstanceProperties
    horizontalScrollElasticity: NSScrollView.Elasticity;
    setHorizontalScrollElasticity(_: NSScrollView.Elasticity)
    // ownInstanceProperties
    horizontalScroller: NSScroller;
    setHorizontalScroller(_: NSScroller)
    // ownInstanceProperties
    lineScroll: number;
    setLineScroll(_: number)
    // ownInstanceProperties
    magnification: number;
    setMagnification(_: number)
    // ownInstanceProperties
    maxMagnification: number;
    setMaxMagnification(_: number)
    // ownInstanceProperties
    minMagnification: number;
    setMinMagnification(_: number)
    // ownInstanceProperties
    pageScroll: number;
    setPageScroll(_: number)
    // ownInstanceProperties
    rulersVisible: boolean;
    setRulersVisible(_: boolean)
    // ownInstanceProperties
    scrollerInsets: NSEdgeInsets;
    setScrollerInsets(_: NSEdgeInsets)
    // ownInstanceProperties
    scrollerKnobStyle: NSScroller.KnobStyle;
    setScrollerKnobStyle(_: NSScroller.KnobStyle)
    // ownInstanceProperties
    scrollerStyle: NSScroller.Style;
    setScrollerStyle(_: NSScroller.Style)
    // ownInstanceProperties
    scrollsDynamically: boolean;
    setScrollsDynamically(_: boolean)
    // ownInstanceProperties
    usesPredominantAxisScrolling: boolean;
    setUsesPredominantAxisScrolling(_: boolean)
    // ownInstanceProperties
    verticalLineScroll: number;
    setVerticalLineScroll(_: number)
    // ownInstanceProperties
    verticalPageScroll: number;
    setVerticalPageScroll(_: number)
    // ownInstanceProperties
    verticalRulerView: NSRulerView;
    setVerticalRulerView(_: NSRulerView)
    // ownInstanceProperties
    verticalScrollElasticity: NSScrollView.Elasticity;
    setVerticalScrollElasticity(_: NSScrollView.Elasticity)
    // ownInstanceProperties
    verticalScroller: NSScroller;
    setVerticalScroller(_: NSScroller)
    // ownStaticProperties
    static rulerViewClass: typeof NSObject;
    setRulerViewClass(_: typeof NSObject)
    // compoundInstanceMethods
    addFloatingSubviewForAxis(_: NSView, for_: NSEvent.GestureAxis): void;
    // compoundInstanceMethods
    flashScrollers(): void;
    // compoundInstanceMethods
    magnifyToFitRect(toFit: CGRect): void;
    // compoundInstanceMethods
    setMagnificationCenteredAtPoint(_: number, centeredAt: CGPoint): void;
    // compoundInstanceMethods
    tile(): void;
  }

  // interface
  class NSScroller extends NSControl {
    // compoundStaticMethods
    static scrollerWidthForControlSizeScrollerStyle(for_: NSControl.ControlSize, scrollerStyle: NSScroller.Style): number;
    // ownInstanceProperties
    hitPart: NSScroller.Part;
    // ownInstanceProperties
    knobProportion: number;
    setKnobProportion(_: number)
    // ownInstanceProperties
    knobStyle: NSScroller.KnobStyle;
    setKnobStyle(_: NSScroller.KnobStyle)
    // ownInstanceProperties
    scrollerStyle: NSScroller.Style;
    setScrollerStyle(_: NSScroller.Style)
    // ownInstanceProperties
    usableParts: NSScroller.UsableParts;
    // ownStaticProperties
    static isCompatibleWithOverlayScrollers: boolean;
    // ownStaticProperties
    static preferredScrollerStyle: NSScroller.Style;
    // compoundInstanceMethods
    checkSpaceForParts(): void;
    // compoundInstanceMethods
    drawKnob(): void;
    // compoundInstanceMethods
    drawKnobSlotInRectHighlight(in_: CGRect, highlight: boolean): void;
    // compoundInstanceMethods
    rectForPart(for_: NSScroller.Part): CGRect;
    // compoundInstanceMethods
    setKnobProportion(_: number): void;
    // compoundInstanceMethods
    testPart(_: CGPoint): NSScroller.Part;
    // compoundInstanceMethods
    trackKnob(with_: NSEvent): void;
  }

  // interface
  class NSScrubber extends NSView {
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    backgroundView: NSView;
    setBackgroundView(_: NSView)
    // ownInstanceProperties
    isContinuous: boolean;
    setContinuous(_: boolean)
    // ownInstanceProperties
    dataSource: NSScrubberDataSource;
    setDataSource(_: NSScrubberDataSource)
    // ownInstanceProperties
    delegate: NSScrubberDelegate;
    setDelegate(_: NSScrubberDelegate)
    // ownInstanceProperties
    floatsSelectionViews: boolean;
    setFloatsSelectionViews(_: boolean)
    // ownInstanceProperties
    highlightedIndex: number;
    // ownInstanceProperties
    itemAlignment: NSScrubber.Alignment;
    setItemAlignment(_: NSScrubber.Alignment)
    // ownInstanceProperties
    mode: NSScrubber.Mode;
    setMode(_: NSScrubber.Mode)
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    scrubberLayout: NSScrubberLayout;
    setScrubberLayout(_: NSScrubberLayout)
    // ownInstanceProperties
    selectedIndex: number;
    setSelectedIndex(_: number)
    // ownInstanceProperties
    selectionBackgroundStyle: NSScrubberSelectionStyle;
    setSelectionBackgroundStyle(_: NSScrubberSelectionStyle)
    // ownInstanceProperties
    selectionOverlayStyle: NSScrubberSelectionStyle;
    setSelectionOverlayStyle(_: NSScrubberSelectionStyle)
    // ownInstanceProperties
    showsAdditionalContentIndicators: boolean;
    setShowsAdditionalContentIndicators(_: boolean)
    // ownInstanceProperties
    showsArrowButtons: boolean;
    setShowsArrowButtons(_: boolean)
    // compoundInstanceMethods
    insertItemsAtIndexes(at: NSIndexSet): void;
    // compoundInstanceMethods
    itemViewForItemAtIndex(at: number): NSScrubberItemView;
    // compoundInstanceMethods
    makeItemWithIdentifierOwner(withIdentifier: string, owner?: any): NSScrubberItemView;
    // compoundInstanceMethods
    moveItemAtIndexToIndex(at: number, to: number): void;
    // compoundInstanceMethods
    performSequentialBatchUpdates(_: () => void): void;
    // compoundInstanceMethods
    registerClassForItemIdentifier(_?: typeof NSObject, forItemIdentifier?: string): void;
    // compoundInstanceMethods
    registerNibForItemIdentifier(_?: NSNib, forItemIdentifier?: string): void;
    // compoundInstanceMethods
    reloadData(): void;
    // compoundInstanceMethods
    reloadItemsAtIndexes(at: NSIndexSet): void;
    // compoundInstanceMethods
    removeItemsAtIndexes(at: NSIndexSet): void;
    // compoundInstanceMethods
    scrollItemAtIndexToAlignment(at: number, to: NSScrubber.Alignment): void;
  }

  // interface
  class NSScrubberArrangedView extends NSView {
    // ownInstanceProperties
    isHighlighted: boolean;
    setHighlighted(_: boolean)
    // ownInstanceProperties
    isSelected: boolean;
    setSelected(_: boolean)
    // compoundInstanceMethods
    applyLayoutAttributes(_: NSScrubberLayoutAttributes): void;
  }

  interface NSScrubberDataSource extends NSObject {
    // instance method
    numberOfItemsForScrubber(for_: NSScrubber): number;
    // instance method
    scrubberViewForItemAtIndex(_: NSScrubber, viewForItemAt: number): NSScrubberItemView;
  }

  interface NSScrubberDelegate extends NSObject {
    // instance method
    didBeginInteractingWithScrubber?(with_: NSScrubber): void;
    // instance method
    didCancelInteractingWithScrubber?(with_: NSScrubber): void;
    // instance method
    didFinishInteractingWithScrubber?(with_: NSScrubber): void;
    // instance method
    scrubberDidSelectItemAtIndex?(_: NSScrubber, didSelectItemAt: number): void;
    // instance method
    scrubberDidHighlightItemAtIndex?(_: NSScrubber, didHighlightItemAt: number): void;
    // instance method
    scrubberDidChangeVisibleRange?(_: NSScrubber, didChangeVisibleRange: NSRange): void;
  }

  // interface
  class NSScrubberFlowLayout extends NSScrubberLayout {
    // ownInstanceProperties
    itemSize: CGSize;
    setItemSize(_: CGSize)
    // ownInstanceProperties
    itemSpacing: number;
    setItemSpacing(_: number)
    // compoundInstanceMethods
    invalidateLayoutForItemsAtIndexes(at: NSIndexSet): void;
  }

  interface NSScrubberFlowLayoutDelegate extends NSScrubberDelegate {
    // instance method
    scrubberLayoutSizeForItemAtIndex?(_: NSScrubber, layout: NSScrubberFlowLayout, sizeForItemAt: number): CGSize;
  }

  // interface
  class NSScrubberImageItemView extends NSScrubberItemView {
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    imageAlignment: NSImageAlignment;
    setImageAlignment(_: NSImageAlignment)
    // ownInstanceProperties
    imageView: NSImageView;
  }

  // interface
  class NSScrubberItemView extends NSScrubberArrangedView {
  }

  // interface
  class NSScrubberLayout extends NSObject {
    // ownInstanceProperties
    automaticallyMirrorsInRightToLeftLayout: boolean;
    // ownInstanceProperties
    scrubber: NSScrubber;
    // ownInstanceProperties
    scrubberContentSize: CGSize;
    // ownInstanceProperties
    shouldInvalidateLayoutForHighlightChange: boolean;
    // ownInstanceProperties
    shouldInvalidateLayoutForSelectionChange: boolean;
    // ownInstanceProperties
    visibleRect: CGRect;
    // ownStaticProperties
    static layoutAttributesClass: typeof NSObject;
    // compoundInstanceMethods
    invalidateLayout(): void;
    // compoundInstanceMethods
    layoutAttributesForItemAtIndex(at: number): NSScrubberLayoutAttributes;
    // compoundInstanceMethods
    layoutAttributesForItemsInRect(in_: CGRect): NSSet<NSScrubberLayoutAttributes>;
    // compoundInstanceMethods
    prepareLayout(): void;
    // compoundInstanceMethods
    shouldInvalidateLayoutForChangeFromVisibleRectToVisibleRect(fromVisibleRect: CGRect, toVisibleRect: CGRect): boolean;
  }

  // interface
  class NSScrubberLayoutAttributes extends NSObject {
    // compoundStaticMethods
    static layoutAttributesForItemAtIndex(forItemAt: number): NSScrubberLayoutAttributes;
    // ownInstanceProperties
    alpha: number;
    setAlpha(_: number)
    // ownInstanceProperties
    frame: CGRect;
    setFrame(_: CGRect)
    // ownInstanceProperties
    itemIndex: number;
    setItemIndex(_: number)
  }

  // interface
  class NSScrubberProportionalLayout extends NSScrubberLayout {
    // ownInstanceProperties
    numberOfVisibleItems: number;
    setNumberOfVisibleItems(_: number)
    // compoundInstanceMethods
    static createWithNumberOfVisibleItems(numberOfVisibleItems: number): NSScrubberProportionalLayout;
  }

  // interface
  class NSScrubberSelectionStyle extends NSObject {
    // ownStaticProperties
    static outlineOverlayStyle: NSScrubberSelectionStyle;
    // ownStaticProperties
    static roundedBackgroundStyle: NSScrubberSelectionStyle;
    // compoundInstanceMethods
    makeSelectionView(): NSScrubberSelectionView;
  }

  // interface
  class NSScrubberSelectionView extends NSScrubberArrangedView {
  }

  // interface
  class NSScrubberTextItemView extends NSScrubberItemView {
    // ownInstanceProperties
    textField: NSTextField;
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
  }

  // interface
  class NSSearchField extends NSTextField {
    // compoundStaticMethods
    //  static labelWithAttributedString(labelWithAttributedString: NSAttributedString): NSSearchField;
    // compoundStaticMethods
    //  static labelWithString(labelWithString: string): NSSearchField;
    // compoundStaticMethods
    //  static wrappingLabelWithString(wrappingLabelWithString: string): NSSearchField;
    // ownInstanceProperties
    centersPlaceholder: boolean;
    setCentersPlaceholder(_: boolean)
    // ownInstanceProperties
    //   delegate: NSSearchFieldDelegate;
    setDelegate(_: NSSearchFieldDelegate)
    // ownInstanceProperties
    maximumRecents: number;
    setMaximumRecents(_: number)
    // ownInstanceProperties
    recentSearches: string[];
    setRecentSearches(_: string[])
    // ownInstanceProperties
    recentsAutosaveName: string;
    setRecentsAutosaveName(_: string)
    // ownInstanceProperties
    searchMenuTemplate: NSMenu;
    setSearchMenuTemplate(_: NSMenu)
    // ownInstanceProperties
    sendsSearchStringImmediately: boolean;
    setSendsSearchStringImmediately(_: boolean)
    // ownInstanceProperties
    sendsWholeSearchString: boolean;
    setSendsWholeSearchString(_: boolean)
    // compoundInstanceMethods
    rectForCancelButtonWhenCentered(whenCentered: boolean): CGRect;
    // compoundInstanceMethods
    rectForSearchButtonWhenCentered(whenCentered: boolean): CGRect;
    // compoundInstanceMethods
    rectForSearchTextWhenCentered(whenCentered: boolean): CGRect;
  }

  // interface
  class NSSearchFieldCell extends NSTextFieldCell {
    // ownInstanceProperties
    cancelButtonCell: NSButtonCell;
    setCancelButtonCell(_: NSButtonCell)
    // ownInstanceProperties
    maximumRecents: number;
    setMaximumRecents(_: number)
    // ownInstanceProperties
    recentSearches: string[];
    setRecentSearches(_: string[])
    // ownInstanceProperties
    recentsAutosaveName: string;
    setRecentsAutosaveName(_: string)
    // ownInstanceProperties
    searchButtonCell: NSButtonCell;
    setSearchButtonCell(_: NSButtonCell)
    // ownInstanceProperties
    searchMenuTemplate: NSMenu;
    setSearchMenuTemplate(_: NSMenu)
    // ownInstanceProperties
    sendsSearchStringImmediately: boolean;
    setSendsSearchStringImmediately(_: boolean)
    // ownInstanceProperties
    sendsWholeSearchString: boolean;
    setSendsWholeSearchString(_: boolean)
    // compoundInstanceMethods
    cancelButtonRectForBounds(forBounds: CGRect): CGRect;
    // compoundInstanceMethods
    resetCancelButtonCell(): void;
    // compoundInstanceMethods
    resetSearchButtonCell(): void;
    // compoundInstanceMethods
    searchButtonRectForBounds(forBounds: CGRect): CGRect;
    // compoundInstanceMethods
    searchTextRectForBounds(forBounds: CGRect): CGRect;
  }

  interface NSSearchFieldDelegate extends NSTextFieldDelegate {
    // instance method
    searchFieldDidEndSearching?(_: NSSearchField): void;
    // instance method
    searchFieldDidStartSearching?(_: NSSearchField): void;
  }

  // interface
  class NSSecureTextField extends NSTextField {
    // compoundStaticMethods
    //  static labelWithAttributedString(labelWithAttributedString: NSAttributedString): NSSecureTextField;
    // compoundStaticMethods
    //  static labelWithString(labelWithString: string): NSSecureTextField;
    // compoundStaticMethods
    //  static wrappingLabelWithString(wrappingLabelWithString: string): NSSecureTextField;
  }

  // interface
  class NSSecureTextFieldCell extends NSTextFieldCell {
    // ownInstanceProperties
    echosBullets: boolean;
    setEchosBullets(_: boolean)
  }

  // interface
  class NSSegmentedCell extends NSActionCell {
    // ownInstanceProperties
    segmentCount: number;
    setSegmentCount(_: number)
    // ownInstanceProperties
    segmentStyle: NSSegmentedControl.Style;
    setSegmentStyle(_: NSSegmentedControl.Style)
    // ownInstanceProperties
    selectedSegment: number;
    setSelectedSegment(_: number)
    // ownInstanceProperties
    trackingMode: NSSegmentedControl.SwitchTracking;
    setTrackingMode(_: NSSegmentedControl.SwitchTracking)
    // compoundInstanceMethods
    drawSegmentInFrameWithView(_: number, inFrame: CGRect, with_: NSView): void;
    // compoundInstanceMethods
    imageForSegment(forSegment: number): NSImage;
    // compoundInstanceMethods
    imageScalingForSegment(forSegment: number): NSImageScaling;
    // compoundInstanceMethods
    interiorBackgroundStyleForSegment(forSegment: number): NSView.BackgroundStyle;
    // compoundInstanceMethods
    isEnabledForSegment(forSegment: number): boolean;
    // compoundInstanceMethods
    isSelectedForSegment(forSegment: number): boolean;
    // compoundInstanceMethods
    labelForSegment(forSegment: number): string;
    // compoundInstanceMethods
    makeNextSegmentKey(): void;
    // compoundInstanceMethods
    makePreviousSegmentKey(): void;
    // compoundInstanceMethods
    menuForSegment(forSegment: number): NSMenu;
    // compoundInstanceMethods
    selectSegmentWithTag(withTag: number): boolean;
    // compoundInstanceMethods
    setEnabledForSegment(_: boolean, forSegment: number): void;
    // compoundInstanceMethods
    setImageForSegment(_?: NSImage, forSegment?: number): void;
    // compoundInstanceMethods
    setImageScalingForSegment(_: NSImageScaling, forSegment: number): void;
    // compoundInstanceMethods
    setLabelForSegment(_: string, forSegment: number): void;
    // compoundInstanceMethods
    setMenuForSegment(_?: NSMenu, forSegment?: number): void;
    // compoundInstanceMethods
    setSelectedForSegment(_: boolean, forSegment: number): void;
    // compoundInstanceMethods
    setTagForSegment(_: number, forSegment: number): void;
    // compoundInstanceMethods
    setToolTipForSegment(_?: string, forSegment?: number): void;
    // compoundInstanceMethods
    setWidthForSegment(_: number, forSegment: number): void;
    // compoundInstanceMethods
    tagForSegment(forSegment: number): number;
    // compoundInstanceMethods
    toolTipForSegment(forSegment: number): string;
    // compoundInstanceMethods
    widthForSegment(forSegment: number): number;
  }

  // interface
  class NSSegmentedControl extends NSControl {
    // ownInstanceProperties
    doubleValueForSelectedSegment: number;
    // ownInstanceProperties
    indexOfSelectedItem: number;
    // ownInstanceProperties
    segmentCount: number;
    setSegmentCount(_: number)
    // ownInstanceProperties
    segmentDistribution: NSSegmentedControl.Distribution;
    setSegmentDistribution(_: NSSegmentedControl.Distribution)
    // ownInstanceProperties
    segmentStyle: NSSegmentedControl.Style;
    setSegmentStyle(_: NSSegmentedControl.Style)
    // ownInstanceProperties
    selectedSegment: number;
    setSelectedSegment(_: number)
    // ownInstanceProperties
    selectedSegmentBezelColor: NSColor;
    setSelectedSegmentBezelColor(_: NSColor)
    // ownInstanceProperties
    isSpringLoaded: boolean;
    setSpringLoaded(_: boolean)
    // ownInstanceProperties
    trackingMode: NSSegmentedControl.SwitchTracking;
    setTrackingMode(_: NSSegmentedControl.SwitchTracking)
    // compoundInstanceMethods
    alignmentForSegment(forSegment: number): NSTextAlignment;
    // compoundInstanceMethods
    imageForSegment(forSegment: number): NSImage;
    // compoundInstanceMethods
    imageScalingForSegment(forSegment: number): NSImageScaling;
    // compoundInstanceMethods
    isEnabledForSegment(forSegment: number): boolean;
    // compoundInstanceMethods
    isSelectedForSegment(forSegment: number): boolean;
    // compoundInstanceMethods
    labelForSegment(forSegment: number): string;
    // compoundInstanceMethods
    menuForSegment(forSegment: number): NSMenu;
    // compoundInstanceMethods
    selectSegmentWithTag(withTag: number): boolean;
    // compoundInstanceMethods
    setAlignmentForSegment(_: NSTextAlignment, forSegment: number): void;
    // compoundInstanceMethods
    setEnabledForSegment(_: boolean, forSegment: number): void;
    // compoundInstanceMethods
    setImageForSegment(_?: NSImage, forSegment?: number): void;
    // compoundInstanceMethods
    setImageScalingForSegment(_: NSImageScaling, forSegment: number): void;
    // compoundInstanceMethods
    setLabelForSegment(_: string, forSegment: number): void;
    // compoundInstanceMethods
    setMenuForSegment(_?: NSMenu, forSegment?: number): void;
    // compoundInstanceMethods
    setSelectedForSegment(_: boolean, forSegment: number): void;
    // compoundInstanceMethods
    setShowsMenuIndicatorForSegment(_: boolean, forSegment: number): void;
    // compoundInstanceMethods
    setTagForSegment(_: number, forSegment: number): void;
    // compoundInstanceMethods
    setToolTipForSegment(_?: string, forSegment?: number): void;
    // compoundInstanceMethods
    setWidthForSegment(_: number, forSegment: number): void;
    // compoundInstanceMethods
    showsMenuIndicatorForSegment(forSegment: number): boolean;
    // compoundInstanceMethods
    tagForSegment(forSegment: number): number;
    // compoundInstanceMethods
    toolTipForSegment(forSegment: number): string;
    // compoundInstanceMethods
    widthForSegment(forSegment: number): number;
  }

  interface NSSeguePerforming extends NSObject {
    // instance method
    performSegueWithIdentifierSender?(withIdentifier: string, sender?: any): void;
    // instance method
    prepareForSegueSender?(for_: NSStoryboardSegue, sender?: any): void;
    // instance method
    shouldPerformSegueWithIdentifierSender?(withIdentifier: string, sender?: any): boolean;
  }

  interface NSServicesMenuRequestor extends NSObject {
    // instance method
    readSelectionFromPasteboard?(from: NSPasteboard): boolean;
    // instance method
    writeSelectionToPasteboardTypes?(to: NSPasteboard, types: string[]): boolean;
  }

  // export function NSSetFocusRingStyle(placement: NSFocusRingPlacement): void;

  // export function NSSetShowsServicesMenuItem(itemName: string, enabled: boolean): number;

  // interface
  class NSShadow extends NSObject {
    // ownInstanceProperties
    shadowBlurRadius: number;
    setShadowBlurRadius(_: number)
    // ownInstanceProperties
    shadowColor: NSColor;
    setShadowColor(_: NSColor)
    // ownInstanceProperties
    shadowOffset: CGSize;
    setShadowOffset(_: CGSize)
    // compoundInstanceMethods
    set(): void;
  }

  // interface
  class NSSharingService extends NSObject {
    // compoundStaticMethods
    static sharingServicesForItems(forItems: any[]): NSSharingService[];
    // ownInstanceProperties
    accountName: string;
    // ownInstanceProperties
    alternateImage: NSImage;
    // ownInstanceProperties
    attachmentFileURLs: NSURL[];
    // ownInstanceProperties
    delegate: NSSharingServiceDelegate;
    setDelegate(_: NSSharingServiceDelegate)
    // ownInstanceProperties
    image: NSImage;
    // ownInstanceProperties
    menuItemTitle: string;
    setMenuItemTitle(_: string)
    // ownInstanceProperties
    messageBody: string;
    // ownInstanceProperties
    permanentLink: NSURL;
    // ownInstanceProperties
    recipients: string[];
    setRecipients(_: string[])
    // ownInstanceProperties
    subject: string;
    setSubject(_: string)
    // ownInstanceProperties
    title: string;
    // compoundInstanceMethods
    canPerformWithItems(withItems?: any[]): boolean;
    // compoundInstanceMethods
    static createWithTitleImageAlternateImageHandler(title: string, image: NSImage, alternateImage?: NSImage, handler?: () => void): NSSharingService;
    // compoundInstanceMethods
    performWithItems(withItems: any[]): void;
  }

  interface NSSharingServiceDelegate extends NSObject {
    // instance method
    anchoringViewForSharingServiceShowRelativeToRectPreferredEdge?(for_: NSSharingService, showRelativeTo: NSRect, preferredEdge: NSRectEdge): NSView;
    // instance method
    sharingServiceDidFailToShareItemsError?(_: NSSharingService, didFailToShareItems: any[], error: NSError): void;
    // instance method
    sharingServiceDidShareItems?(_: NSSharingService, didShareItems: any[]): void;
    // instance method
    sharingServiceSourceFrameOnScreenForShareItem?(_: NSSharingService, sourceFrameOnScreenForShareItem: any): CGRect;
    // instance method
    sharingServiceSourceWindowForShareItemsSharingContentScope?(_: NSSharingService, sourceWindowForShareItems: any[], sharingContentScope: NSSharingService.SharingContentScope): NSWindow;
    // instance method
    sharingServiceTransitionImageForShareItemContentRect?(_: NSSharingService, transitionImageForShareItem: any, contentRect: NSRect): NSImage;
    // instance method
    sharingServiceWillShareItems?(_: NSSharingService, willShareItems: any[]): void;
  }

  // interface
  class NSSharingServicePicker extends NSObject {
    // ownInstanceProperties
    delegate: NSSharingServicePickerDelegate;
    setDelegate(_: NSSharingServicePickerDelegate)
    // compoundInstanceMethods
    static createWithItems(items: any[]): NSSharingServicePicker;
    // compoundInstanceMethods
    showRelativeToRectOfViewPreferredEdge(relativeTo: CGRect, of: NSView, preferredEdge: NSRectEdge): void;
  }

  interface NSSharingServicePickerDelegate extends NSObject {
    // instance method
    sharingServicePickerDelegateForSharingService?(_: NSSharingServicePicker, delegateFor: NSSharingService): NSSharingServiceDelegate;
    // instance method
    sharingServicePickerDidChooseSharingService?(_: NSSharingServicePicker, didChoose?: NSSharingService): void;
    // instance method
    sharingServicePickerSharingServicesForItemsProposedSharingServices?(_: NSSharingServicePicker, sharingServicesForItems: any[], proposedSharingServices: NSSharingService[]): NSSharingService[];
  }

  // interface
  class NSSharingServicePickerToolbarItem extends NSToolbarItem {
    // ownInstanceProperties
    delegate: NSSharingServicePickerToolbarItemDelegate;
    setDelegate(_: NSSharingServicePickerToolbarItemDelegate)
  }

  interface NSSharingServicePickerToolbarItemDelegate extends NSSharingServicePickerDelegate {
    // instance method
    itemsForSharingServicePickerToolbarItem(for_: NSSharingServicePickerToolbarItem): any[];
  }

  // interface
  class NSSharingServicePickerTouchBarItem extends NSTouchBarItem {
    // ownInstanceProperties
    buttonImage: NSImage;
    setButtonImage(_: NSImage)
    // ownInstanceProperties
    buttonTitle: string;
    setButtonTitle(_: string)
    // ownInstanceProperties
    delegate: NSSharingServicePickerTouchBarItemDelegate;
    setDelegate(_: NSSharingServicePickerTouchBarItemDelegate)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
  }

  interface NSSharingServicePickerTouchBarItemDelegate extends NSSharingServicePickerDelegate {
    // instance method
    itemsForSharingServicePickerTouchBarItem(for_: NSSharingServicePickerTouchBarItem): any[];
  }

  // export function NSShowAnimationEffect(animationEffect: NSAnimationEffect, centerLocation: CGPoint, size: CGSize, animationDelegate: any, didEndSelector: string, contextInfo: any): void;

  // export function NSShowsServicesMenuItem(itemName: string): boolean;

  // interface
  class NSSlider extends NSControl {
    // ownInstanceProperties
    allowsTickMarkValuesOnly: boolean;
    setAllowsTickMarkValuesOnly(_: boolean)
    // ownInstanceProperties
    altIncrementValue: number;
    setAltIncrementValue(_: number)
    // ownInstanceProperties
    knobThickness: number;
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number)
    // ownInstanceProperties
    sliderType: NSSlider.SliderType;
    setSliderType(_: NSSlider.SliderType)
    // ownInstanceProperties
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition)
    // ownInstanceProperties
    trackFillColor: NSColor;
    setTrackFillColor(_: NSColor)
    // ownInstanceProperties
    isVertical: boolean;
    // compoundInstanceMethods
    closestTickMarkValueToValue(toValue: number): number;
    // compoundInstanceMethods
    indexOfTickMarkAtPoint(at: CGPoint): number;
    // compoundInstanceMethods
    rectOfTickMarkAtIndex(at: number): CGRect;
    // compoundInstanceMethods
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSSliderAccessory extends NSObject {
    // ownInstanceProperties
    behavior: NSSliderAccessoryBehavior;
    setBehavior(_: NSSliderAccessoryBehavior)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
  }

  // interface
  class NSSliderAccessoryBehavior extends NSObject {
    // compoundStaticMethods
    static initWithHandler(handler: (p1: NSSliderAccessory) => void): NSSliderAccessoryBehavior;
    // compoundStaticMethods
    static behaviorWithTargetAction(target?: any, action?: string): NSSliderAccessoryBehavior;
    // ownStaticProperties
    static automaticBehavior: NSSliderAccessoryBehavior;
    // ownStaticProperties
    static valueResetBehavior: NSSliderAccessoryBehavior;
    // ownStaticProperties
    static valueStepBehavior: NSSliderAccessoryBehavior;
    // compoundInstanceMethods
    handleAction(_: NSSliderAccessory): void;
  }

  // interface
  class NSSliderCell extends NSActionCell {
    // ownInstanceProperties
    allowsTickMarkValuesOnly: boolean;
    setAllowsTickMarkValuesOnly(_: boolean)
    // ownInstanceProperties
    altIncrementValue: number;
    setAltIncrementValue(_: number)
    // ownInstanceProperties
    knobThickness: number;
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number)
    // ownInstanceProperties
    sliderType: NSSlider.SliderType;
    setSliderType(_: NSSlider.SliderType)
    // ownInstanceProperties
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition)
    // ownInstanceProperties
    trackRect: CGRect;
    // ownInstanceProperties
    isVertical: boolean;
    // compoundInstanceMethods
    barRectFlipped(flipped: boolean): CGRect;
    // compoundInstanceMethods
    closestTickMarkValueToValue(toValue: number): number;
    // compoundInstanceMethods
    drawBarInsideFlipped(inside: CGRect, flipped: boolean): void;
    // compoundInstanceMethods
    drawKnob(): void;
    // compoundInstanceMethods
    drawKnob(_: CGRect): void;
    // compoundInstanceMethods
    drawTickMarks(): void;
    // compoundInstanceMethods
    indexOfTickMarkAtPoint(at: CGPoint): number;
    // compoundInstanceMethods
    knobRectFlipped(flipped: boolean): CGRect;
    // compoundInstanceMethods
    rectOfTickMarkAtIndex(at: number): CGRect;
    // compoundInstanceMethods
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSSliderTouchBarItem extends NSTouchBarItem {
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    doubleValue: number;
    setDoubleValue(_: number)
    // ownInstanceProperties
    label: string;
    setLabel(_: string)
    // ownInstanceProperties
    maximumSliderWidth: number;
    setMaximumSliderWidth(_: number)
    // ownInstanceProperties
    maximumValueAccessory: NSSliderAccessory;
    setMaximumValueAccessory(_: NSSliderAccessory)
    // ownInstanceProperties
    minimumSliderWidth: number;
    setMinimumSliderWidth(_: number)
    // ownInstanceProperties
    minimumValueAccessory: NSSliderAccessory;
    setMinimumValueAccessory(_: NSSliderAccessory)
    // ownInstanceProperties
    slider: NSSlider;
    setSlider(_: NSSlider)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    valueAccessoryWidth: number;
    setValueAccessoryWidth(_: number)
    // ownInstanceProperties
    //   view: NSView;
  }

  // interface
  class NSSound extends NSObject {
    // compoundStaticMethods
    static canInitWithPasteboard(with_: NSPasteboard): boolean;
    // ownInstanceProperties
    currentTime: number;
    setCurrentTime(_: number)
    // ownInstanceProperties
    delegate: NSSoundDelegate;
    setDelegate(_: NSSoundDelegate)
    // ownInstanceProperties
    duration: number;
    // ownInstanceProperties
    loops: boolean;
    setLoops(_: boolean)
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    playbackDeviceIdentifier: string;
    setPlaybackDeviceIdentifier(_: string)
    // ownInstanceProperties
    isPlaying: boolean;
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
    // ownStaticProperties
    static soundUnfilteredTypes: string[];
    // compoundInstanceMethods
    static createWithContentsOfFileByReference(contentsOfFile: string, byReference: boolean): NSSound;
    // compoundInstanceMethods
    static createWithContentsOfURLByReference(contentsOfURL: NSURL, byReference: boolean): NSSound;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSSound;
    // compoundInstanceMethods
    static createWithPasteboard(pasteboard: NSPasteboard): NSSound;
    // compoundInstanceMethods
    pause(): boolean;
    // compoundInstanceMethods
    play(): boolean;
    // compoundInstanceMethods
    resume(): boolean;
    // compoundInstanceMethods
    setName(_?: string): boolean;
    // compoundInstanceMethods
    stop(): boolean;
    // compoundInstanceMethods
    writeToPasteboard(to: NSPasteboard): void;
  }

  interface NSSoundDelegate extends NSObject {
    // instance method
    soundDidFinishPlaying?(_: NSSound, didFinishPlaying: boolean): void;
  }

  // interface
  class NSSpeechRecognizer extends NSObject {
    // ownInstanceProperties
    blocksOtherRecognizers: boolean;
    setBlocksOtherRecognizers(_: boolean)
    // ownInstanceProperties
    commands: string[];
    setCommands(_: string[])
    // ownInstanceProperties
    delegate: NSSpeechRecognizerDelegate;
    setDelegate(_: NSSpeechRecognizerDelegate)
    // ownInstanceProperties
    displayedCommandsTitle: string;
    setDisplayedCommandsTitle(_: string)
    // ownInstanceProperties
    listensInForegroundOnly: boolean;
    setListensInForegroundOnly(_: boolean)
    // compoundInstanceMethods
    startListening(): void;
    // compoundInstanceMethods
    stopListening(): void;
  }

  interface NSSpeechRecognizerDelegate extends NSObject {
    // instance method
    speechRecognizerDidRecognizeCommand?(_: NSSpeechRecognizer, didRecognizeCommand: string): void;
  }

  // interface
  class NSSpeechSynthesizer extends NSObject {
    // compoundStaticMethods
    static attributesForVoice(forVoice: string): Map<string, any>;
    // ownInstanceProperties
    delegate: NSSpeechSynthesizerDelegate;
    setDelegate(_: NSSpeechSynthesizerDelegate)
    // ownInstanceProperties
    rate: number;
    setRate(_: number)
    // ownInstanceProperties
    isSpeaking: boolean;
    // ownInstanceProperties
    usesFeedbackWindow: boolean;
    setUsesFeedbackWindow(_: boolean)
    // ownInstanceProperties
    volume: number;
    setVolume(_: number)
    // ownStaticProperties
    static isAnyApplicationSpeaking: boolean;
    // ownStaticProperties
    static availableVoices: string[];
    // ownStaticProperties
    static defaultVoice: string;
    // compoundInstanceMethods
    addSpeechDictionary(_: Map<string, any>): void;
    // compoundInstanceMethods
    continueSpeaking(): void;
    // compoundInstanceMethods
    static createWithVoice(voice?: string): NSSpeechSynthesizer;
    // compoundInstanceMethods
    objectForPropertyError(error: string): any;
    // compoundInstanceMethods
    pauseSpeakingAtBoundary(at: NSSpeechSynthesizer.Boundary): void;
    // compoundInstanceMethods
    phonemesFromText(from: string): string;
    // compoundInstanceMethods
    setObjectForPropertyError(forProperty?: any, error?: string): boolean;
    // compoundInstanceMethods
    setVoice(_?: string): boolean;
    // compoundInstanceMethods
    startSpeakingString(_: string): boolean;
    // compoundInstanceMethods
    startSpeakingStringToURL(_: string, to: NSURL): boolean;
    // compoundInstanceMethods
    stopSpeaking(): void;
    // compoundInstanceMethods
    stopSpeakingAtBoundary(at: NSSpeechSynthesizer.Boundary): void;
    // compoundInstanceMethods
    voice(): string;
  }

  interface NSSpeechSynthesizerDelegate extends NSObject {
    // instance method
    speechSynthesizerWillSpeakWordOfString?(_: NSSpeechSynthesizer, willSpeakWord: NSRange, of: string): void;
    // instance method
    speechSynthesizerDidEncounterErrorAtIndexOfStringMessage?(_: NSSpeechSynthesizer, didEncounterErrorAt: number, of: string, message: string): void;
    // instance method
    speechSynthesizerDidEncounterSyncMessage?(_: NSSpeechSynthesizer, didEncounterSyncMessage: string): void;
    // instance method
    speechSynthesizerDidFinishSpeaking?(_: NSSpeechSynthesizer, didFinishSpeaking: boolean): void;
    // instance method
    speechSynthesizerWillSpeakPhoneme?(_: NSSpeechSynthesizer, willSpeakPhoneme: number): void;
  }

  // interface
  class NSSpellChecker extends NSObject {
    // compoundStaticMethods
    static uniqueSpellDocumentTag(): number;
    // ownInstanceProperties
    accessoryView: NSView;
    setAccessoryView(_: NSView)
    // ownInstanceProperties
    automaticallyIdentifiesLanguages: boolean;
    setAutomaticallyIdentifiesLanguages(_: boolean)
    // ownInstanceProperties
    availableLanguages: string[];
    // ownInstanceProperties
    spellingPanel: NSPanel;
    // ownInstanceProperties
    substitutionsPanel: NSPanel;
    // ownInstanceProperties
    substitutionsPanelAccessoryViewController: NSViewController;
    setSubstitutionsPanelAccessoryViewController(_: NSViewController)
    // ownInstanceProperties
    userPreferredLanguages: string[];
    // ownInstanceProperties
    userReplacementsDictionary: Map<string, string>;
    // ownStaticProperties
    static isAutomaticCapitalizationEnabled: boolean;
    // ownStaticProperties
    static isAutomaticDashSubstitutionEnabled: boolean;
    // ownStaticProperties
    static isAutomaticPeriodSubstitutionEnabled: boolean;
    // ownStaticProperties
    static isAutomaticQuoteSubstitutionEnabled: boolean;
    // ownStaticProperties
    static isAutomaticSpellingCorrectionEnabled: boolean;
    // ownStaticProperties
    static isAutomaticTextCompletionEnabled: boolean;
    // ownStaticProperties
    static isAutomaticTextReplacementEnabled: boolean;
    // ownStaticProperties
    static sharedSpellChecker: NSSpellChecker;
    // ownStaticProperties
    static sharedSpellCheckerExists: boolean;
    // compoundInstanceMethods
    checkGrammarOfStringStartingAtLanguageWrapInSpellDocumentWithTagDetails(of: string, startingAt: number, language?: string, wrap?: boolean, inSpellDocumentWithTag?: number, details?: Map<string, any>[]): NSRange;
    // compoundInstanceMethods
    checkSpellingOfStringStartingAt(of: string, startingAt: number): NSRange;
    // compoundInstanceMethods
    checkSpellingOfStringStartingAtLanguageWrapInSpellDocumentWithTagWordCount(of: string, startingAt: number, language?: string, wrap?: boolean, inSpellDocumentWithTag?: number, wordCount?: number): NSRange;
    // compoundInstanceMethods
    checkStringRangeTypesOptionsInSpellDocumentWithTagOrthographyWordCount(_: string, range: NSRange, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, orthography?: NSOrthography, wordCount?: number): NSTextCheckingResult[];
    // compoundInstanceMethods
    closeSpellDocumentWithTag(withTag: number): void;
    // compoundInstanceMethods
    completionsForPartialWordRangeInStringLanguageInSpellDocumentWithTag(forPartialWordRange: NSRange, in_: string, language?: string, inSpellDocumentWithTag?: number): string[];
    // compoundInstanceMethods
    correctionForWordRangeInStringLanguageInSpellDocumentWithTag(forWordRange: NSRange, in_: string, language: string, inSpellDocumentWithTag: number): string;
    // compoundInstanceMethods
    countWordsInStringLanguage(in_: string, language?: string): number;
    // compoundInstanceMethods
    deletesAutospaceBetweenStringAndStringLanguage(_: string, andString: string, language?: string): boolean;
    // compoundInstanceMethods
    dismissCorrectionIndicatorForView(for_: NSView): void;
    // compoundInstanceMethods
    guessesForWordRangeInStringLanguageInSpellDocumentWithTag(forWordRange: NSRange, in_: string, language?: string, inSpellDocumentWithTag?: number): string[];
    // compoundInstanceMethods
    hasLearnedWord(_: string): boolean;
    // compoundInstanceMethods
    ignoreWordInSpellDocumentWithTag(_: string, inSpellDocumentWithTag: number): void;
    // compoundInstanceMethods
    ignoredWordsInSpellDocumentWithTag(inSpellDocumentWithTag: number): string[];
    // compoundInstanceMethods
    language(): string;
    // compoundInstanceMethods
    languageForWordRangeInStringOrthography(forWordRange: NSRange, in_: string, orthography?: NSOrthography): string;
    // compoundInstanceMethods
    learnWord(_: string): void;
    // compoundInstanceMethods
    menuForResultStringOptionsAtLocationInView(for_: NSTextCheckingResult, string: string, options?: Map<string, any>, atLocation?: CGPoint, in_?: NSView): NSMenu;
    // compoundInstanceMethods
    preventsAutocorrectionBeforeStringLanguage(before: string, language?: string): boolean;
    // compoundInstanceMethods
    recordResponseToCorrectionForWordLanguageInSpellDocumentWithTag(_: NSSpellChecker.CorrectionResponse, toCorrection: string, forWord: string, language?: string, inSpellDocumentWithTag?: number): void;
    // compoundInstanceMethods
    requestCandidatesWithForSelectedRangeInTypesOptionsInSpellDocumentWithTagCompletionHandler(forSelectedRange: NSRange, in_: string, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, completionHandler?: (p1: number, p2: NSTextCheckingResult[]) => void): number;
    // compoundInstanceMethods
    requestCheckingOfRangeTypesOptionsInSpellDocumentWithTagCompletionHandler(of: string, range: NSRange, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, completionHandler?: (p1: number, p2: NSTextCheckingResult[], p3: NSOrthography, p4: number) => void): number;
    // compoundInstanceMethods
    setIgnoredWordsInSpellDocumentWithTag(_: string[], inSpellDocumentWithTag: number): void;
    // compoundInstanceMethods
    setLanguage(_: string): boolean;
    // compoundInstanceMethods
    setWordFieldStringValue(_: string): void;
    // compoundInstanceMethods
    showCorrectionIndicatorOfPrimaryStringAlternativeStringsForStringInViewCompletionHandler(of: NSSpellChecker.CorrectionIndicatorType, primaryString: string, alternativeStrings: string[], forStringIn: CGRect, view: NSView, completionHandler?: (p1: string) => void): void;
    // compoundInstanceMethods
    unlearnWord(_: string): void;
    // compoundInstanceMethods
    updatePanels(): void;
    // compoundInstanceMethods
    updateSpellingPanelWithGrammarStringDetail(withGrammarString: string, detail: Map<string, any>): void;
    // compoundInstanceMethods
    updateSpellingPanelWithMisspelledWord(withMisspelledWord: string): void;
    // compoundInstanceMethods
    userQuotesArrayForLanguage(forLanguage: string): string[];
  }

  // interface
  class NSSplitView extends NSView {
    // ownInstanceProperties
    arrangedSubviews: NSView[];
    // ownInstanceProperties
    arrangesAllSubviews: boolean;
    setArrangesAllSubviews(_: boolean)
    // ownInstanceProperties
    autosaveName: string;
    setAutosaveName(_: string)
    // ownInstanceProperties
    delegate: NSSplitViewDelegate;
    setDelegate(_: NSSplitViewDelegate)
    // ownInstanceProperties
    dividerColor: NSColor;
    // ownInstanceProperties
    dividerStyle: NSSplitView.DividerStyle;
    setDividerStyle(_: NSSplitView.DividerStyle)
    // ownInstanceProperties
    dividerThickness: number;
    // ownInstanceProperties
    isVertical: boolean;
    setVertical(_: boolean)
    // compoundInstanceMethods
    addArrangedSubview(_: NSView): void;
    // compoundInstanceMethods
    adjustSubviews(): void;
    // compoundInstanceMethods
    drawDividerInRect(in_: CGRect): void;
    // compoundInstanceMethods
    holdingPriorityForSubviewAtIndex(at: number): number;
    // compoundInstanceMethods
    insertArrangedSubviewAtIndex(_: NSView, at: number): void;
    // compoundInstanceMethods
    isSubviewCollapsed(_: NSView): boolean;
    // compoundInstanceMethods
    maxPossiblePositionOfDividerAtIndex(at: number): number;
    // compoundInstanceMethods
    minPossiblePositionOfDividerAtIndex(at: number): number;
    // compoundInstanceMethods
    removeArrangedSubview(_: NSView): void;
    // compoundInstanceMethods
    setHoldingPriorityForSubviewAtIndex(_: number, forSubviewAt: number): void;
    // compoundInstanceMethods
    setPositionOfDividerAtIndex(_: number, ofDividerAt: number): void;
  }

  // interface
  class NSSplitViewController extends NSViewController {
    // ownInstanceProperties
    minimumThicknessForInlineSidebars: number;
    setMinimumThicknessForInlineSidebars(_: number)
    // ownInstanceProperties
    splitView: NSSplitView;
    setSplitView(_: NSSplitView)
    // ownInstanceProperties
    splitViewItems: NSSplitViewItem[];
    setSplitViewItems(_: NSSplitViewItem[])
    // compoundInstanceMethods
    addSplitViewItem(_: NSSplitViewItem): void;
    // compoundInstanceMethods
    insertSplitViewItemAtIndex(_: NSSplitViewItem, at: number): void;
    // compoundInstanceMethods
    removeSplitViewItem(_: NSSplitViewItem): void;
    // compoundInstanceMethods
    splitViewItemForViewController(for_: NSViewController): NSSplitViewItem;
    // compoundInstanceMethods
    toggleSidebar(_?: any): void;
  }

  interface NSSplitViewDelegate extends NSObject {
    // instance method
    splitViewShouldHideDividerAtIndex?(_: NSSplitView, shouldHideDividerAt: number): boolean;
    // instance method
    splitViewEffectiveRectForDrawnRectOfDividerAtIndex?(_: NSSplitView, effectiveRect: CGRect, forDrawnRect: CGRect, ofDividerAt: number): CGRect;
    // instance method
    splitViewAdditionalEffectiveRectOfDividerAtIndex?(_: NSSplitView, additionalEffectiveRectOfDividerAt: number): CGRect;
    // instance method
    splitViewCanCollapseSubview?(_: NSSplitView, canCollapseSubview: NSView): boolean;
    // instance method
    splitViewConstrainMaxCoordinateOfSubviewAt?(_: NSSplitView, constrainMaxCoordinate: number, ofSubviewAt: number): number;
    // instance method
    splitViewConstrainMinCoordinateOfSubviewAt?(_: NSSplitView, constrainMinCoordinate: number, ofSubviewAt: number): number;
    // instance method
    splitViewConstrainSplitPositionOfSubviewAt?(_: NSSplitView, constrainSplitPosition: number, ofSubviewAt: number): number;
    // instance method
    splitViewResizeSubviewsWithOldSize?(_: NSSplitView, resizeSubviewsWithOldSize: CGSize): void;
    // instance method
    splitViewShouldAdjustSizeOfSubview?(_: NSSplitView, shouldAdjustSizeOfSubview: NSView): boolean;
    // instance method
    splitViewDidResizeSubviews?(_: NSNotification): void;
    // instance method
    splitViewWillResizeSubviews?(_: NSNotification): void;
  }

  // interface
  class NSSplitViewItem extends NSObject {
    // compoundStaticMethods
    static contentListWithViewController(contentListWithViewController: NSViewController): NSSplitViewItem;
    // compoundStaticMethods
    static sidebarWithViewController(sidebarWithViewController: NSViewController): NSSplitViewItem;
    // ownInstanceProperties
    automaticMaximumThickness: number;
    setAutomaticMaximumThickness(_: number)
    // ownInstanceProperties
    behavior: NSSplitViewItem.Behavior;
    // ownInstanceProperties
    canCollapse: boolean;
    setCanCollapse(_: boolean)
    // ownInstanceProperties
    collapseBehavior: NSSplitViewItem.CollapseBehavior;
    setCollapseBehavior(_: NSSplitViewItem.CollapseBehavior)
    // ownInstanceProperties
    isCollapsed: boolean;
    setCollapsed(_: boolean)
    // ownInstanceProperties
    holdingPriority: number;
    setHoldingPriority(_: number)
    // ownInstanceProperties
    maximumThickness: number;
    setMaximumThickness(_: number)
    // ownInstanceProperties
    minimumThickness: number;
    setMinimumThickness(_: number)
    // ownInstanceProperties
    preferredThicknessFraction: number;
    setPreferredThicknessFraction(_: number)
    // ownInstanceProperties
    isSpringLoaded: boolean;
    setSpringLoaded(_: boolean)
    // ownInstanceProperties
    viewController: NSViewController;
    setViewController(_: NSViewController)
  }

  interface NSSpringLoadingDestination extends NSObject {
    // instance method
    draggingEnded?(_: NSDraggingInfo): void;
    // instance method
    springLoadingActivatedDraggingInfo(_: boolean, draggingInfo: NSDraggingInfo): void;
    // instance method
    springLoadingEntered?(_: NSDraggingInfo): NSSpringLoadingOptions;
    // instance method
    springLoadingExited?(_: NSDraggingInfo): void;
    // instance method
    springLoadingHighlightChanged(_: NSDraggingInfo): void;
    // instance method
    springLoadingUpdated?(_: NSDraggingInfo): NSSpringLoadingOptions;
  }

  // interface
  class NSStackView extends NSView {
    // ownInstanceProperties
    alignment: NSLayoutConstraint.Attribute;
    setAlignment(_: NSLayoutConstraint.Attribute)
    // ownInstanceProperties
    arrangedSubviews: NSView[];
    // ownInstanceProperties
    delegate: NSStackViewDelegate;
    setDelegate(_: NSStackViewDelegate)
    // ownInstanceProperties
    detachedViews: NSView[];
    // ownInstanceProperties
    detachesHiddenViews: boolean;
    setDetachesHiddenViews(_: boolean)
    // ownInstanceProperties
    distribution: NSStackView.Distribution;
    setDistribution(_: NSStackView.Distribution)
    // ownInstanceProperties
    edgeInsets: NSEdgeInsets;
    setEdgeInsets(_: NSEdgeInsets)
    // ownInstanceProperties
    orientation: NSUserInterfaceLayoutOrientation;
    setOrientation(_: NSUserInterfaceLayoutOrientation)
    // ownInstanceProperties
    spacing: number;
    setSpacing(_: number)
    // ownInstanceProperties
    views: NSView[];
    // compoundInstanceMethods
    addArrangedSubview(_: NSView): void;
    // compoundInstanceMethods
    addViewInGravity(_: NSView, in_: NSStackView.Gravity): void;
    // compoundInstanceMethods
    clippingResistancePriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    // compoundInstanceMethods
    customSpacingAfterView(after: NSView): number;
    // compoundInstanceMethods
    huggingPriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    // compoundInstanceMethods
    insertArrangedSubviewAtIndex(_: NSView, at: number): void;
    // compoundInstanceMethods
    insertViewAtIndexInGravity(_: NSView, at: number, in_: NSStackView.Gravity): void;
    // compoundInstanceMethods
    removeArrangedSubview(_: NSView): void;
    // compoundInstanceMethods
    removeView(_: NSView): void;
    // compoundInstanceMethods
    setClippingResistancePriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    // compoundInstanceMethods
    setCustomSpacingAfterView(_: number, after: NSView): void;
    // compoundInstanceMethods
    setHuggingPriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    // compoundInstanceMethods
    setViewsInGravity(_: NSView[], in_: NSStackView.Gravity): void;
    // compoundInstanceMethods
    setVisibilityPriorityForView(_: number, for_: NSView): void;
    // compoundInstanceMethods
    viewsInGravity(in_: NSStackView.Gravity): NSView[];
    // compoundInstanceMethods
    visibilityPriorityForView(for_: NSView): number;
  }

  interface NSStackViewDelegate extends NSObject {
    // instance method
    stackViewWillDetachViews?(_: NSStackView, willDetach: NSView[]): void;
    // instance method
    stackViewDidReattachViews?(_: NSStackView, didReattach: NSView[]): void;
  }

  interface NSStandardKeyBindingResponding extends NSObject {
    // instance method
    cancelOperation?(_?: any): void;
    // instance method
    capitalizeWord?(_?: any): void;
    // instance method
    centerSelectionInVisibleArea?(_?: any): void;
    // instance method
    changeCaseOfLetter?(_?: any): void;
    // instance method
    complete?(_?: any): void;
    // instance method
    deleteBackward?(_?: any): void;
    // instance method
    deleteBackwardByDecomposingPreviousCharacter?(_?: any): void;
    // instance method
    deleteForward?(_?: any): void;
    // instance method
    deleteToBeginningOfLine?(_?: any): void;
    // instance method
    deleteToBeginningOfParagraph?(_?: any): void;
    // instance method
    deleteToEndOfLine?(_?: any): void;
    // instance method
    deleteToEndOfParagraph?(_?: any): void;
    // instance method
    deleteToMark?(_?: any): void;
    // instance method
    deleteWordBackward?(_?: any): void;
    // instance method
    deleteWordForward?(_?: any): void;
    // instance method
    doCommandBySelector?(by: string): void;
    // instance method
    indent?(_?: any): void;
    // instance method
    insertBacktab?(_?: any): void;
    // instance method
    insertContainerBreak?(_?: any): void;
    // instance method
    insertDoubleQuoteIgnoringSubstitution?(_?: any): void;
    // instance method
    insertLineBreak?(_?: any): void;
    // instance method
    insertNewline?(_?: any): void;
    // instance method
    insertNewlineIgnoringFieldEditor?(_?: any): void;
    // instance method
    insertParagraphSeparator?(_?: any): void;
    // instance method
    insertSingleQuoteIgnoringSubstitution?(_?: any): void;
    // instance method
    insertTab?(_?: any): void;
    // instance method
    insertTabIgnoringFieldEditor?(_?: any): void;
    // instance method
    insertText?(_: any): void;
    // instance method
    lowercaseWord?(_?: any): void;
    // instance method
    makeBaseWritingDirectionLeftToRight?(_?: any): void;
    // instance method
    makeBaseWritingDirectionNatural?(_?: any): void;
    // instance method
    makeBaseWritingDirectionRightToLeft?(_?: any): void;
    // instance method
    makeTextWritingDirectionLeftToRight?(_?: any): void;
    // instance method
    makeTextWritingDirectionNatural?(_?: any): void;
    // instance method
    makeTextWritingDirectionRightToLeft?(_?: any): void;
    // instance method
    moveBackward?(_?: any): void;
    // instance method
    moveBackwardAndModifySelection?(_?: any): void;
    // instance method
    moveDown?(_?: any): void;
    // instance method
    moveDownAndModifySelection?(_?: any): void;
    // instance method
    moveForward?(_?: any): void;
    // instance method
    moveForwardAndModifySelection?(_?: any): void;
    // instance method
    moveLeft?(_?: any): void;
    // instance method
    moveLeftAndModifySelection?(_?: any): void;
    // instance method
    moveParagraphBackwardAndModifySelection?(_?: any): void;
    // instance method
    moveParagraphForwardAndModifySelection?(_?: any): void;
    // instance method
    moveRight?(_?: any): void;
    // instance method
    moveRightAndModifySelection?(_?: any): void;
    // instance method
    moveToBeginningOfDocument?(_?: any): void;
    // instance method
    moveToBeginningOfDocumentAndModifySelection?(_?: any): void;
    // instance method
    moveToBeginningOfLine?(_?: any): void;
    // instance method
    moveToBeginningOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveToBeginningOfParagraph?(_?: any): void;
    // instance method
    moveToBeginningOfParagraphAndModifySelection?(_?: any): void;
    // instance method
    moveToEndOfDocument?(_?: any): void;
    // instance method
    moveToEndOfDocumentAndModifySelection?(_?: any): void;
    // instance method
    moveToEndOfLine?(_?: any): void;
    // instance method
    moveToEndOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveToEndOfParagraph?(_?: any): void;
    // instance method
    moveToEndOfParagraphAndModifySelection?(_?: any): void;
    // instance method
    moveToLeftEndOfLine?(_?: any): void;
    // instance method
    moveToLeftEndOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveToRightEndOfLine?(_?: any): void;
    // instance method
    moveToRightEndOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveUp?(_?: any): void;
    // instance method
    moveUpAndModifySelection?(_?: any): void;
    // instance method
    moveWordBackward?(_?: any): void;
    // instance method
    moveWordBackwardAndModifySelection?(_?: any): void;
    // instance method
    moveWordForward?(_?: any): void;
    // instance method
    moveWordForwardAndModifySelection?(_?: any): void;
    // instance method
    moveWordLeft?(_?: any): void;
    // instance method
    moveWordLeftAndModifySelection?(_?: any): void;
    // instance method
    moveWordRight?(_?: any): void;
    // instance method
    moveWordRightAndModifySelection?(_?: any): void;
    // instance method
    pageDown?(_?: any): void;
    // instance method
    pageDownAndModifySelection?(_?: any): void;
    // instance method
    pageUp?(_?: any): void;
    // instance method
    pageUpAndModifySelection?(_?: any): void;
    // instance method
    quickLookPreviewItems?(_?: any): void;
    // instance method
    scrollLineDown?(_?: any): void;
    // instance method
    scrollLineUp?(_?: any): void;
    // instance method
    scrollPageDown?(_?: any): void;
    // instance method
    scrollPageUp?(_?: any): void;
    // instance method
    scrollToBeginningOfDocument?(_?: any): void;
    // instance method
    scrollToEndOfDocument?(_?: any): void;
    // instance method
    selectAll?(_?: any): void;
    // instance method
    selectLine?(_?: any): void;
    // instance method
    selectParagraph?(_?: any): void;
    // instance method
    selectToMark?(_?: any): void;
    // instance method
    selectWord?(_?: any): void;
    // instance method
    setMark?(_?: any): void;
    // instance method
    swapWithMark?(_?: any): void;
    // instance method
    transpose?(_?: any): void;
    // instance method
    transposeWords?(_?: any): void;
    // instance method
    uppercaseWord?(_?: any): void;
    // instance method
    yank?(_?: any): void;
  }

  // interface
  class NSStatusBar extends NSObject {
    // ownInstanceProperties
    thickness: number;
    // ownInstanceProperties
    isVertical: boolean;
    // ownStaticProperties
    static systemStatusBar: NSStatusBar;
    // compoundInstanceMethods
    removeStatusItem(_: NSStatusItem): void;
    // compoundInstanceMethods
    statusItemWithLength(withLength: number): NSStatusItem;
  }

  // interface
  class NSStatusBarButton extends NSButton {
    // compoundStaticMethods
    //  static checkboxWithTitleTargetAction(checkboxWithTitle: string, target?: any, action?: string): NSStatusBarButton;
    // compoundStaticMethods
    //  static radioButtonWithTitleTargetAction(radioButtonWithTitle: string, target?: any, action?: string): NSStatusBarButton;
    // ownInstanceProperties
    appearsDisabled: boolean;
    setAppearsDisabled(_: boolean)
  }

  // interface
  class NSStatusItem extends NSObject {
    // ownInstanceProperties
    autosaveName: string;
    setAutosaveName(_: string)
    // ownInstanceProperties
    behavior: NSStatusItem.Behavior;
    setBehavior(_: NSStatusItem.Behavior)
    // ownInstanceProperties
    button: NSStatusBarButton;
    // ownInstanceProperties
    length: number;
    setLength(_: number)
    // ownInstanceProperties
    menu: NSMenu;
    setMenu(_: NSMenu)
    // ownInstanceProperties
    statusBar: NSStatusBar;
    // ownInstanceProperties
    isVisible: boolean;
    setVisible(_: boolean)
  }

  // interface
  class NSStepper extends NSControl {
    // ownInstanceProperties
    autorepeat: boolean;
    setAutorepeat(_: boolean)
    // ownInstanceProperties
    increment: number;
    setIncrement(_: number)
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    valueWraps: boolean;
    setValueWraps(_: boolean)
  }

  // interface
  class NSStepperCell extends NSActionCell {
    // ownInstanceProperties
    autorepeat: boolean;
    setAutorepeat(_: boolean)
    // ownInstanceProperties
    increment: number;
    setIncrement(_: number)
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    valueWraps: boolean;
    setValueWraps(_: boolean)
  }

  // interface
  class NSStepperTouchBarItem extends NSTouchBarItem {
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    //   customizationLabel: string;
    setCustomizationLabel(_: string)
    // ownInstanceProperties
    increment: number;
    setIncrement(_: number)
    // ownInstanceProperties
    maxValue: number;
    setMaxValue(_: number)
    // ownInstanceProperties
    minValue: number;
    setMinValue(_: number)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    value: number;
    setValue(_: number)
  }

  // interface
  class NSStoryboard extends NSObject {
    // ownStaticProperties
    static mainStoryboard: NSStoryboard;
    // compoundInstanceMethods
    instantiateControllerWithIdentifier(withIdentifier: string): any;
    // compoundInstanceMethods
    instantiateControllerWithIdentifierWithCreator(_: string, creator?: (p1: NSCoder) => any): any;
    // compoundInstanceMethods
    instantiateInitialController(): any;
    // compoundInstanceMethods
    instantiateInitialControllerWithCreator(_?: (p1: NSCoder) => any): any;
  }

  // interface
  class NSStoryboardSegue extends NSObject {
    // ownInstanceProperties
    destinationController: any;
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    sourceController: any;
    // compoundInstanceMethods
    static createWithIdentifierSourceDestination(identifier: string, source: any, destination: any): NSStoryboardSegue;
    // compoundInstanceMethods
    perform(): void;
  }

  // interface
  class NSStringDrawingContext extends NSObject {
    // ownInstanceProperties
    actualScaleFactor: number;
    // ownInstanceProperties
    minimumScaleFactor: number;
    setMinimumScaleFactor(_: number)
    // ownInstanceProperties
    totalBounds: CGRect;
  }

  // interface
  class NSSwitch extends NSControl {
    // ownInstanceProperties
    state: number;
    setState(_: number)
  }

  // interface
  class NSTabView extends NSView {
    // ownInstanceProperties
    allowsTruncatedLabels: boolean;
    setAllowsTruncatedLabels(_: boolean)
    // ownInstanceProperties
    contentRect: CGRect;
    // ownInstanceProperties
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize)
    // ownInstanceProperties
    delegate: NSTabViewDelegate;
    setDelegate(_: NSTabViewDelegate)
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    font: NSFont;
    setFont(_: NSFont)
    // ownInstanceProperties
    minimumSize: CGSize;
    // ownInstanceProperties
    numberOfTabViewItems: number;
    // ownInstanceProperties
    selectedTabViewItem: NSTabViewItem;
    // ownInstanceProperties
    tabPosition: NSTabView.TabPosition;
    setTabPosition(_: NSTabView.TabPosition)
    // ownInstanceProperties
    tabViewBorderType: NSTabView.TabViewBorderType;
    setTabViewBorderType(_: NSTabView.TabViewBorderType)
    // ownInstanceProperties
    tabViewItems: NSTabViewItem[];
    setTabViewItems(_: NSTabViewItem[])
    // ownInstanceProperties
    tabViewType: NSTabView.TabType;
    setTabViewType(_: NSTabView.TabType)
    // compoundInstanceMethods
    addTabViewItem(_: NSTabViewItem): void;
    // compoundInstanceMethods
    indexOfTabViewItem(_: NSTabViewItem): number;
    // compoundInstanceMethods
    indexOfTabViewItemWithIdentifier(withIdentifier: any): number;
    // compoundInstanceMethods
    insertTabViewItemAtIndex(_: NSTabViewItem, at: number): void;
    // compoundInstanceMethods
    removeTabViewItem(_: NSTabViewItem): void;
    // compoundInstanceMethods
    selectFirstTabViewItem(_?: any): void;
    // compoundInstanceMethods
    selectLastTabViewItem(_?: any): void;
    // compoundInstanceMethods
    selectNextTabViewItem(_?: any): void;
    // compoundInstanceMethods
    selectPreviousTabViewItem(_?: any): void;
    // compoundInstanceMethods
    selectTabViewItem(_?: NSTabViewItem): void;
    // compoundInstanceMethods
    selectTabViewItemAtIndex(at: number): void;
    // compoundInstanceMethods
    selectTabViewItemWithIdentifier(withIdentifier: any): void;
    // compoundInstanceMethods
    tabViewItemAtIndex(at: number): NSTabViewItem;
    // compoundInstanceMethods
    tabViewItemAtPoint(at: CGPoint): NSTabViewItem;
    // compoundInstanceMethods
    takeSelectedTabViewItemFromSender(_?: any): void;
  }

  // interface
  class NSTabViewController extends NSViewController {
    // ownInstanceProperties
    canPropagateSelectedChildViewControllerTitle: boolean;
    setCanPropagateSelectedChildViewControllerTitle(_: boolean)
    // ownInstanceProperties
    selectedTabViewItemIndex: number;
    setSelectedTabViewItemIndex(_: number)
    // ownInstanceProperties
    tabStyle: NSTabViewController.TabStyle;
    setTabStyle(_: NSTabViewController.TabStyle)
    // ownInstanceProperties
    tabView: NSTabView;
    setTabView(_: NSTabView)
    // ownInstanceProperties
    tabViewItems: NSTabViewItem[];
    setTabViewItems(_: NSTabViewItem[])
    // ownInstanceProperties
    transitionOptions: NSViewController.TransitionOptions;
    setTransitionOptions(_: NSViewController.TransitionOptions)
    // compoundInstanceMethods
    addTabViewItem(_: NSTabViewItem): void;
    // compoundInstanceMethods
    insertTabViewItemAtIndex(_: NSTabViewItem, at: number): void;
    // compoundInstanceMethods
    removeTabViewItem(_: NSTabViewItem): void;
    // compoundInstanceMethods
    tabViewItemForViewController(for_: NSViewController): NSTabViewItem;
  }

  interface NSTabViewDelegate extends NSObject {
    // instance method
    tabViewShouldSelectTabViewItem?(_: NSTabView, shouldSelect?: NSTabViewItem): boolean;
    // instance method
    tabViewWillSelectTabViewItem?(_: NSTabView, willSelect?: NSTabViewItem): void;
    // instance method
    tabViewDidSelectTabViewItem?(_: NSTabView, didSelect?: NSTabViewItem): void;
    // instance method
    tabViewDidChangeNumberOfTabViewItems?(_: NSTabView): void;
  }

  // interface
  class NSTabViewItem extends NSObject {
    // ownInstanceProperties
    color: NSColor;
    setColor(_: NSColor)
    // ownInstanceProperties
    identifier: any;
    setIdentifier(_: any)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    initialFirstResponder: NSView;
    setInitialFirstResponder(_: NSView)
    // ownInstanceProperties
    label: string;
    setLabel(_: string)
    // ownInstanceProperties
    tabState: NSTabViewItem.State;
    // ownInstanceProperties
    tabView: NSTabView;
    // ownInstanceProperties
    toolTip: string;
    setToolTip(_: string)
    // ownInstanceProperties
    view: NSView;
    setView(_: NSView)
    // ownInstanceProperties
    viewController: NSViewController;
    setViewController(_: NSViewController)
    // compoundInstanceMethods
    drawLabelInRect(_: boolean, in_: CGRect): void;
    // compoundInstanceMethods
    static createWithIdentifier(identifier?: any): NSTabViewItem;
    // compoundInstanceMethods
    sizeOfLabel(_: boolean): CGSize;
  }

  // interface
  class NSTableCellView extends NSView {
    // ownInstanceProperties
    backgroundStyle: NSView.BackgroundStyle;
    setBackgroundStyle(_: NSView.BackgroundStyle)
    // ownInstanceProperties
    draggingImageComponents: NSDraggingImageComponent[];
    // ownInstanceProperties
    imageView: NSImageView;
    setImageView(_: NSImageView)
    // ownInstanceProperties
    objectValue: any;
    setObjectValue(_: any)
    // ownInstanceProperties
    rowSizeStyle: NSTableView.RowSizeStyle;
    setRowSizeStyle(_: NSTableView.RowSizeStyle)
    // ownInstanceProperties
    textField: NSTextField;
    setTextField(_: NSTextField)
  }

  // interface
  class NSTableColumn extends NSObject implements NSUserInterfaceItemIdentification {
    // ownInstanceProperties
    dataCell: any;
    setDataCell(_: any)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    headerCell: NSTableHeaderCell;
    setHeaderCell(_: NSTableHeaderCell)
    // ownInstanceProperties
    headerToolTip: string;
    setHeaderToolTip(_: string)
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    maxWidth: number;
    setMaxWidth(_: number)
    // ownInstanceProperties
    minWidth: number;
    setMinWidth(_: number)
    // ownInstanceProperties
    resizingMask: NSTableColumn.ResizingOptions;
    setResizingMask(_: NSTableColumn.ResizingOptions)
    // ownInstanceProperties
    sortDescriptorPrototype: NSSortDescriptor;
    setSortDescriptorPrototype(_: NSSortDescriptor)
    // ownInstanceProperties
    tableView: NSTableView;
    setTableView(_: NSTableView)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    width: number;
    setWidth(_: number)
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    dataCellForRow(forRow: number): any;
    // compoundInstanceMethods
    static createWithIdentifier(identifier: string): NSTableColumn;
    // compoundInstanceMethods
    sizeToFit(): void;
  }

  // interface
  class NSTableHeaderCell extends NSTextFieldCell {
    // compoundInstanceMethods
    drawSortIndicatorWithFrameInViewAscendingPriority(withFrame: CGRect, in_: NSView, ascending: boolean, priority: number): void;
    // compoundInstanceMethods
    sortIndicatorRectForBounds(forBounds: CGRect): CGRect;
  }

  // interface
  class NSTableHeaderView extends NSView {
    // ownInstanceProperties
    draggedColumn: number;
    // ownInstanceProperties
    draggedDistance: number;
    // ownInstanceProperties
    resizedColumn: number;
    // ownInstanceProperties
    tableView: NSTableView;
    setTableView(_: NSTableView)
    // compoundInstanceMethods
    columnAtPoint(at: CGPoint): number;
    // compoundInstanceMethods
    headerRectOfColumn(ofColumn: number): CGRect;
  }

  // interface
  class NSTableRowView extends NSView {
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    draggingDestinationFeedbackStyle: NSTableView.DraggingDestinationFeedbackStyle;
    setDraggingDestinationFeedbackStyle(_: NSTableView.DraggingDestinationFeedbackStyle)
    // ownInstanceProperties
    isEmphasized: boolean;
    setEmphasized(_: boolean)
    // ownInstanceProperties
    isFloating: boolean;
    setFloating(_: boolean)
    // ownInstanceProperties
    isGroupRowStyle: boolean;
    setGroupRowStyle(_: boolean)
    // ownInstanceProperties
    indentationForDropOperation: number;
    setIndentationForDropOperation(_: number)
    // ownInstanceProperties
    interiorBackgroundStyle: NSView.BackgroundStyle;
    // ownInstanceProperties
    isNextRowSelected: boolean;
    setNextRowSelected(_: boolean)
    // ownInstanceProperties
    numberOfColumns: number;
    // ownInstanceProperties
    isPreviousRowSelected: boolean;
    setPreviousRowSelected(_: boolean)
    // ownInstanceProperties
    isSelected: boolean;
    setSelected(_: boolean)
    // ownInstanceProperties
    selectionHighlightStyle: NSTableView.SelectionHighlightStyle;
    setSelectionHighlightStyle(_: NSTableView.SelectionHighlightStyle)
    // ownInstanceProperties
    isTargetForDropOperation: boolean;
    setTargetForDropOperation(_: boolean)
    // compoundInstanceMethods
    drawBackgroundInRect(in_: CGRect): void;
    // compoundInstanceMethods
    drawDraggingDestinationFeedbackInRect(in_: CGRect): void;
    // compoundInstanceMethods
    drawSelectionInRect(in_: CGRect): void;
    // compoundInstanceMethods
    drawSeparatorInRect(in_: CGRect): void;
    // compoundInstanceMethods
    viewAtColumn(atColumn: number): any;
  }

  // interface
  class NSTableView extends NSControl {
    // ownInstanceProperties
    allowsColumnReordering: boolean;
    setAllowsColumnReordering(_: boolean)
    // ownInstanceProperties
    allowsColumnResizing: boolean;
    setAllowsColumnResizing(_: boolean)
    // ownInstanceProperties
    allowsColumnSelection: boolean;
    setAllowsColumnSelection(_: boolean)
    // ownInstanceProperties
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean)
    // ownInstanceProperties
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean)
    // ownInstanceProperties
    allowsTypeSelect: boolean;
    setAllowsTypeSelect(_: boolean)
    // ownInstanceProperties
    autosaveName: string;
    setAutosaveName(_: string)
    // ownInstanceProperties
    autosaveTableColumns: boolean;
    setAutosaveTableColumns(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    clickedColumn: number;
    // ownInstanceProperties
    clickedRow: number;
    // ownInstanceProperties
    columnAutoresizingStyle: NSTableView.ColumnAutoresizingStyle;
    setColumnAutoresizingStyle(_: NSTableView.ColumnAutoresizingStyle)
    // ownInstanceProperties
    cornerView: NSView;
    setCornerView(_: NSView)
    // ownInstanceProperties
    dataSource: NSTableViewDataSource;
    setDataSource(_: NSTableViewDataSource)
    // ownInstanceProperties
    delegate: NSTableViewDelegate;
    setDelegate(_: NSTableViewDelegate)
    // ownInstanceProperties
    doubleAction: string;
    setDoubleAction(_: string)
    // ownInstanceProperties
    draggingDestinationFeedbackStyle: NSTableView.DraggingDestinationFeedbackStyle;
    setDraggingDestinationFeedbackStyle(_: NSTableView.DraggingDestinationFeedbackStyle)
    // ownInstanceProperties
    editedColumn: number;
    // ownInstanceProperties
    editedRow: number;
    // ownInstanceProperties
    effectiveRowSizeStyle: NSTableView.RowSizeStyle;
    // ownInstanceProperties
    floatsGroupRows: boolean;
    setFloatsGroupRows(_: boolean)
    // ownInstanceProperties
    gridColor: NSColor;
    setGridColor(_: NSColor)
    // ownInstanceProperties
    gridStyleMask: NSTableView.GridLineStyle;
    setGridStyleMask(_: NSTableView.GridLineStyle)
    // ownInstanceProperties
    headerView: NSTableHeaderView;
    setHeaderView(_: NSTableHeaderView)
    // ownInstanceProperties
    hiddenRowIndexes: NSIndexSet;
    // ownInstanceProperties
    highlightedTableColumn: NSTableColumn;
    setHighlightedTableColumn(_: NSTableColumn)
    // ownInstanceProperties
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize)
    // ownInstanceProperties
    numberOfColumns: number;
    // ownInstanceProperties
    numberOfRows: number;
    // ownInstanceProperties
    numberOfSelectedColumns: number;
    // ownInstanceProperties
    numberOfSelectedRows: number;
    // ownInstanceProperties
    registeredNibsByIdentifier: Map<string, NSNib>;
    // ownInstanceProperties
    rowActionsVisible: boolean;
    setRowActionsVisible(_: boolean)
    // ownInstanceProperties
    rowHeight: number;
    setRowHeight(_: number)
    // ownInstanceProperties
    rowSizeStyle: NSTableView.RowSizeStyle;
    setRowSizeStyle(_: NSTableView.RowSizeStyle)
    // ownInstanceProperties
    selectedColumn: number;
    // ownInstanceProperties
    selectedColumnIndexes: NSIndexSet;
    // ownInstanceProperties
    selectedRow: number;
    // ownInstanceProperties
    selectedRowIndexes: NSIndexSet;
    // ownInstanceProperties
    selectionHighlightStyle: NSTableView.SelectionHighlightStyle;
    setSelectionHighlightStyle(_: NSTableView.SelectionHighlightStyle)
    // ownInstanceProperties
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[])
    // ownInstanceProperties
    tableColumns: NSTableColumn[];
    // ownInstanceProperties
    usesAlternatingRowBackgroundColors: boolean;
    setUsesAlternatingRowBackgroundColors(_: boolean)
    // ownInstanceProperties
    usesAutomaticRowHeights: boolean;
    setUsesAutomaticRowHeights(_: boolean)
    // ownInstanceProperties
    usesStaticContents: boolean;
    setUsesStaticContents(_: boolean)
    // ownInstanceProperties
    verticalMotionCanBeginDrag: boolean;
    setVerticalMotionCanBeginDrag(_: boolean)
    // compoundInstanceMethods
    addTableColumn(_: NSTableColumn): void;
    // compoundInstanceMethods
    beginUpdates(): void;
    // compoundInstanceMethods
    canDragRowsWithIndexesAtPoint(with_: NSIndexSet, at: CGPoint): boolean;
    // compoundInstanceMethods
    columnAtPoint(at: CGPoint): number;
    // compoundInstanceMethods
    columnForView(for_: NSView): number;
    // compoundInstanceMethods
    columnIndexesInRect(in_: CGRect): NSIndexSet;
    // compoundInstanceMethods
    columnWithIdentifier(withIdentifier: string): number;
    // compoundInstanceMethods
    deselectAll(_?: any): void;
    // compoundInstanceMethods
    deselectColumn(_: number): void;
    // compoundInstanceMethods
    deselectRow(_: number): void;
    // compoundInstanceMethods
    didAddRowViewForRow(_: NSTableRowView, forRow: number): void;
    // compoundInstanceMethods
    didRemoveRowViewForRow(_: NSTableRowView, forRow: number): void;
    // compoundInstanceMethods
    dragImageForRowsWithIndexesTableColumnsEventOffset(with_: NSIndexSet, tableColumns: NSTableColumn[], event: NSEvent, offset: NSPoint): NSImage;
    // compoundInstanceMethods
    drawBackgroundInClipRect(inClipRect: CGRect): void;
    // compoundInstanceMethods
    drawGridInClipRect(inClipRect: CGRect): void;
    // compoundInstanceMethods
    drawRowClipRect(_: number, clipRect: CGRect): void;
    // compoundInstanceMethods
    editColumnRowWithEventSelect(_: number, row: number, with_?: NSEvent, select?: boolean): void;
    // compoundInstanceMethods
    endUpdates(): void;
    // compoundInstanceMethods
    enumerateAvailableRowViews(_: (p1: NSTableRowView, p2: number) => void): void;
    // compoundInstanceMethods
    frameOfCellAtColumnRow(atColumn: number, row: number): CGRect;
    // compoundInstanceMethods
    hideRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    // compoundInstanceMethods
    highlightSelectionInClipRect(inClipRect: CGRect): void;
    // compoundInstanceMethods
    indicatorImageInTableColumn(in_: NSTableColumn): NSImage;
    // compoundInstanceMethods
    insertRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    // compoundInstanceMethods
    isColumnSelected(_: number): boolean;
    // compoundInstanceMethods
    isRowSelected(_: number): boolean;
    // compoundInstanceMethods
    makeViewWithIdentifierOwner(withIdentifier: string, owner?: any): NSView;
    // compoundInstanceMethods
    moveColumnToColumn(_: number, toColumn: number): void;
    // compoundInstanceMethods
    moveRowAtIndexToIndex(at: number, to: number): void;
    // compoundInstanceMethods
    noteHeightOfRowsWithIndexesChanged(withIndexesChanged: NSIndexSet): void;
    // compoundInstanceMethods
    noteNumberOfRowsChanged(): void;
    // compoundInstanceMethods
    rectOfColumn(ofColumn: number): CGRect;
    // compoundInstanceMethods
    rectOfRow(ofRow: number): CGRect;
    // compoundInstanceMethods
    registerNibForIdentifier(_?: NSNib, forIdentifier?: string): void;
    // compoundInstanceMethods
    reloadData(): void;
    // compoundInstanceMethods
    reloadDataForRowIndexesColumnIndexes(forRowIndexes: NSIndexSet, columnIndexes: NSIndexSet): void;
    // compoundInstanceMethods
    removeRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    // compoundInstanceMethods
    removeTableColumn(_: NSTableColumn): void;
    // compoundInstanceMethods
    rowAtPoint(at: CGPoint): number;
    // compoundInstanceMethods
    rowForView(for_: NSView): number;
    // compoundInstanceMethods
    rowViewAtRowMakeIfNecessary(atRow: number, makeIfNecessary: boolean): NSTableRowView;
    // compoundInstanceMethods
    rowsInRect(in_: CGRect): NSRange;
    // compoundInstanceMethods
    scrollColumnToVisible(_: number): void;
    // compoundInstanceMethods
    scrollRowToVisible(_: number): void;
    // compoundInstanceMethods
    selectColumnIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    // compoundInstanceMethods
    selectRowIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    // compoundInstanceMethods
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
    // compoundInstanceMethods
    setDropRowDropOperation(_: number, dropOperation: NSTableView.DropOperation): void;
    // compoundInstanceMethods
    setIndicatorImageInTableColumn(_?: NSImage, in_?: NSTableColumn): void;
    // compoundInstanceMethods
    sizeLastColumnToFit(): void;
    // compoundInstanceMethods
    tableColumnWithIdentifier(withIdentifier: string): NSTableColumn;
    // compoundInstanceMethods
    tile(): void;
    // compoundInstanceMethods
    unhideRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    // compoundInstanceMethods
    viewAtColumnRowMakeIfNecessary(atColumn: number, row: number, makeIfNecessary: boolean): NSView;
  }

  interface NSTableViewDataSource extends NSObject {
    // instance method
    numberOfRowsInTableView?(in_: NSTableView): number;
    objectValueForTableColumnRow?(_: NSTableView, objectValueFor?: NSTableColumn, row?: number): any;
    setObjectValueForTableColumnRow?(_: NSTableView, setObjectValue?: any, for_?: NSTableColumn, row?: number): void;
    draggingSessionWillBeginAtPointForRowIndexes?(_: NSTableView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forRowIndexes: NSIndexSet): void;
    draggingSessionEndedAtPointOperation?(_: NSTableView, draggingSession: NSDraggingSession, endedAt: CGPoint, operation: NSDragOperation): void;
    writeRowsWithIndexesToPasteboard?(_: NSTableView, writeRowsWith: NSIndexSet, to: NSPasteboard): boolean;
    acceptDropRowDropOperation?(_: NSTableView, acceptDrop: NSDraggingInfo, row: number, dropOperation: NSTableView.DropOperation): boolean;
    pasteboardWriterForRow?(_: NSTableView, pasteboardWriterForRow: number): NSPasteboardWriting;
    sortDescriptorsDidChange?(_: NSTableView, sortDescriptorsDidChange: NSSortDescriptor[]): void;
    updateDraggingItemsForDrag?(_: NSTableView, updateDraggingItemsForDrag: NSDraggingInfo): void;
    validateDropProposedRowProposedDropOperation?(_: NSTableView, validateDrop: NSDraggingInfo, proposedRow: number, proposedDropOperation: NSTableView.DropOperation): NSDragOperation;
  }

  interface NSTableViewDelegate extends NSControlTextEditingDelegate {
    // instance method
    selectionShouldChangeInTableView?(in_: NSTableView): boolean;
    viewForTableColumnRow?(_: NSTableView, viewFor?: NSTableColumn, row?: number): NSView;
    didAddRowViewForRow?(_: NSTableView, didAdd: NSTableRowView, forRow: number): void;
    didRemoveRowViewForRow?(_: NSTableView, didRemove: NSTableRowView, forRow: number): void;
    willDisplayCellForTableColumnRow?(_: NSTableView, willDisplayCell: any, for_?: NSTableColumn, row?: number): void;
    shouldEditTableColumnRow?(_: NSTableView, shouldEdit?: NSTableColumn, row?: number): boolean;
    toolTipForCellRectTableColumnRowMouseLocation?(_: NSTableView, toolTipFor: NSCell, rect: NSRect, tableColumn?: NSTableColumn, row?: number, mouseLocation?: CGPoint): string;
    shouldShowCellExpansionForTableColumnRow?(_: NSTableView, shouldShowCellExpansionFor?: NSTableColumn, row?: number): boolean;
    shouldTrackCellForTableColumnRow?(_: NSTableView, shouldTrackCell: NSCell, for_?: NSTableColumn, row?: number): boolean;
    dataCellForTableColumnRow?(_: NSTableView, dataCellFor?: NSTableColumn, row?: number): NSCell;
    shouldSelectTableColumn?(_: NSTableView, shouldSelect?: NSTableColumn): boolean;
    mouseDownInHeaderOfTableColumn?(_: NSTableView, mouseDownInHeaderOf: NSTableColumn): void;
    didClickTableColumn?(_: NSTableView, didClick: NSTableColumn): void;
    didDragTableColumn?(_: NSTableView, didDrag: NSTableColumn): void;
    typeSelectStringForTableColumnRow?(_: NSTableView, typeSelectStringFor?: NSTableColumn, row?: number): string;
    nextTypeSelectMatchFromRowToRowForString?(_: NSTableView, nextTypeSelectMatchFromRow: number, toRow: number, for_: string): number;
    shouldTypeSelectForEventWithCurrentSearchString?(_: NSTableView, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
    heightOfRow?(_: NSTableView, heightOfRow: number): number;
    isGroupRow?(_: NSTableView, isGroupRow: number): boolean;
    rowActionsForRowEdge?(_: NSTableView, rowActionsForRow: number, edge: NSTableView.RowActionEdge): NSTableViewRowAction[];
    rowViewForRow?(_: NSTableView, rowViewForRow: number): NSTableRowView;
    selectionIndexesForProposedSelection?(_: NSTableView, selectionIndexesForProposedSelection: NSIndexSet): NSIndexSet;
    shouldReorderColumnToColumn?(_: NSTableView, shouldReorderColumn: number, toColumn: number): boolean;
    shouldSelectRow?(_: NSTableView, shouldSelectRow: number): boolean;
    sizeToFitWidthOfColumn?(_: NSTableView, sizeToFitWidthOfColumn: number): number;
    columnDidMove?(_: NSNotification): void;
    columnDidResize?(_: NSNotification): void;
    selectionDidChange?(_: NSNotification): void;
    selectionIsChanging?(_: NSNotification): void;
  }

  // interface
  class NSTableViewRowAction extends NSObject {
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    style: NSTableViewRowAction.Style;
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
  }

  // interface
  class NSText extends NSView {
    // ownInstanceProperties
    alignment: NSTextAlignment;
    setAlignment(_: NSTextAlignment)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    baseWritingDirection: NSWritingDirection;
    setBaseWritingDirection(_: NSWritingDirection)
    // ownInstanceProperties
    delegate: NSTextDelegate;
    setDelegate(_: NSTextDelegate)
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    isFieldEditor: boolean;
    setFieldEditor(_: boolean)
    // ownInstanceProperties
    font: NSFont;
    setFont(_: NSFont)
    // ownInstanceProperties
    isHorizontallyResizable: boolean;
    setHorizontallyResizable(_: boolean)
    // ownInstanceProperties
    importsGraphics: boolean;
    setImportsGraphics(_: boolean)
    // ownInstanceProperties
    maxSize: CGSize;
    setMaxSize(_: CGSize)
    // ownInstanceProperties
    minSize: CGSize;
    setMinSize(_: CGSize)
    // ownInstanceProperties
    isRichText: boolean;
    setRichText(_: boolean)
    // ownInstanceProperties
    isRulerVisible: boolean;
    // ownInstanceProperties
    isSelectable: boolean;
    setSelectable(_: boolean)
    // ownInstanceProperties
    selectedRange: NSRange;
    setSelectedRange(_: NSRange)
    // ownInstanceProperties
    string: string;
    setString(_: string)
    // ownInstanceProperties
    textColor: NSColor;
    setTextColor(_: NSColor)
    // ownInstanceProperties
    usesFontPanel: boolean;
    setUsesFontPanel(_: boolean)
    // ownInstanceProperties
    isVerticallyResizable: boolean;
    setVerticallyResizable(_: boolean)
    // compoundInstanceMethods
    RTFDFromRange(from: NSRange): NSData;
    // compoundInstanceMethods
    RTFFromRange(from: NSRange): NSData;
    // compoundInstanceMethods
    alignCenter(_?: any): void;
    // compoundInstanceMethods
    alignLeft(_?: any): void;
    // compoundInstanceMethods
    alignRight(_?: any): void;
    // compoundInstanceMethods
    checkSpelling(_?: any): void;
    // compoundInstanceMethods
    //  copy(_?: any): void;
    // compoundInstanceMethods
    copyFont(_?: any): void;
    // compoundInstanceMethods
    copyRuler(_?: any): void;
    // compoundInstanceMethods
    cut(_?: any): void;
    // compoundInstanceMethods
    delete(_?: any): void;
    // compoundInstanceMethods
    paste(_?: any): void;
    // compoundInstanceMethods
    pasteFont(_?: any): void;
    // compoundInstanceMethods
    pasteRuler(_?: any): void;
    // compoundInstanceMethods
    readRTFDFromFile(fromFile: string): boolean;
    // compoundInstanceMethods
    replaceCharactersInRangeWithRTF(in_: NSRange, withRTF: NSData): void;
    // compoundInstanceMethods
    replaceCharactersInRangeWithRTFD(in_: NSRange, withRTFD: NSData): void;
    // compoundInstanceMethods
    replaceCharactersInRangeWithString(in_: NSRange, with_: string): void;
    // compoundInstanceMethods
    scrollRangeToVisible(_: NSRange): void;
    // compoundInstanceMethods
    setFontRange(_: NSFont, range: NSRange): void;
    // compoundInstanceMethods
    setTextColorRange(_?: NSColor, range?: NSRange): void;
    // compoundInstanceMethods
    showGuessPanel(_?: any): void;
    // compoundInstanceMethods
    sizeToFit(): void;
    // compoundInstanceMethods
    subscript(_?: any): void;
    // compoundInstanceMethods
    superscript(_?: any): void;
    // compoundInstanceMethods
    toggleRuler(_?: any): void;
    // compoundInstanceMethods
    underline(_?: any): void;
    // compoundInstanceMethods
    unscript(_?: any): void;
    // compoundInstanceMethods
    writeRTFDToFileAtomically(toFile: string, atomically: boolean): boolean;
  }

  // interface
  class NSTextAlternatives extends NSObject {
    // ownInstanceProperties
    alternativeStrings: string[];
    // ownInstanceProperties
    primaryString: string;
    // compoundInstanceMethods
    static createWithPrimaryStringAlternativeStrings(primaryString: string, alternativeStrings: string[]): NSTextAlternatives;
    // compoundInstanceMethods
    noteSelectedAlternativeString(_: string): void;
  }

  // interface
  class NSTextAttachment extends NSObject {
    // ownInstanceProperties
    attachmentCell: NSTextAttachmentCell;
    setAttachmentCell(_: NSTextAttachmentCell)
    // ownInstanceProperties
    bounds: CGRect;
    setBounds(_: CGRect)
    // ownInstanceProperties
    contents: NSData;
    setContents(_: NSData)
    // ownInstanceProperties
    fileType: string;
    setFileType(_: string)
    // ownInstanceProperties
    fileWrapper: FileWrapper;
    setFileWrapper(_: FileWrapper)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // compoundInstanceMethods
    static createWithDataOfType(data?: NSData, ofType?: string): NSTextAttachment;
    // compoundInstanceMethods
    static createWithFileWrapper(fileWrapper?: FileWrapper): NSTextAttachment;
  }

  // interface
  class NSTextAttachmentCell extends NSCell {
  }

  interface NSTextAttachmentCell extends NSObject {
    attachment: NSTextAttachment;
    setAttachment(_: NSTextAttachment)
    // instance method
    cellBaselineOffset(): CGPoint;
    // instance method
    cellFrameForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
    // instance method
    cellSize_(): CGSize;
    // instance method
    drawWithFrameInView(_: CGRect, inView?: NSView): void;
    // instance method
    drawWithFrameInViewCharacterIndex(_: CGRect, inView?: NSView, characterIndex?: number): void;
    // instance method
    drawWithFrameInViewCharacterIndexLayoutManager(_: CGRect, inView?: NSView, characterIndex?: number, layoutManager?: NSLayoutManager): void;
    // instance method
    highlightWithFrameInView(_: boolean, withFrame: CGRect, inView?: NSView): void;
    // instance method
    trackMouseInRectOfViewAtCharacterIndexUntilMouseUp(_: NSEvent, inRect: CGRect, ofView?: NSView, atCharacterIndex?: number, untilMouseUp?: boolean): boolean;
    // instance method
    trackMouseInRectOfViewUntilMouseUp(_: NSEvent, inRect: CGRect, ofView?: NSView, untilMouseUp?: boolean): boolean;
    // instance method
    wantsToTrackMouse(): boolean;
    // instance method
    wantsToTrackMouseForEventInRectOfViewAtCharacterIndex(_: NSEvent, inRect: CGRect, ofView?: NSView, atCharacterIndex?: number): boolean;
  }

  interface NSTextAttachmentContainer extends NSObject {
    // instance method
    attachmentBoundsForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(for_?: NSTextContainer, proposedLineFragment?: CGRect, glyphPosition?: CGPoint, characterIndex?: number): CGRect;
    // instance method
    imageForBoundsTextContainerCharacterIndex(forBounds: CGRect, textContainer?: NSTextContainer, characterIndex?: number): NSImage;
  }

  // interface
  class NSTextBlock extends NSObject {
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    contentWidth: number;
    // ownInstanceProperties
    contentWidthValueType: NSTextBlock.ValueType;
    // ownInstanceProperties
    verticalAlignment: NSTextBlock.VerticalAlignment;
    setVerticalAlignment(_: NSTextBlock.VerticalAlignment)
    // compoundInstanceMethods
    borderColorForEdge(for_: NSRectEdge): NSColor;
    // compoundInstanceMethods
    boundsRectForContentRectInRectTextContainerCharacterRange(forContentRect: CGRect, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
    // compoundInstanceMethods
    drawBackgroundWithFrameInViewCharacterRangeLayoutManager(withFrame: CGRect, in_: NSView, characterRange: NSRange, layoutManager: NSLayoutManager): void;
    // compoundInstanceMethods
    rectForLayoutAtPointInRectTextContainerCharacterRange(at: CGPoint, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
    // compoundInstanceMethods
    setBorderColor(_?: NSColor): void;
    // compoundInstanceMethods
    setBorderColorForEdge(_?: NSColor, for_?: NSRectEdge): void;
    // compoundInstanceMethods
    setContentWidthType(_: number, type: NSTextBlock.ValueType): void;
    // compoundInstanceMethods
    setValueTypeForDimension(_: number, type: NSTextBlock.ValueType, for_: NSTextBlock.Dimension): void;
    // compoundInstanceMethods
    setWidthTypeForLayer(_: number, type: NSTextBlock.ValueType, for_: NSTextBlock.Layer): void;
    // compoundInstanceMethods
    setWidthTypeForLayerEdge(_: number, type: NSTextBlock.ValueType, for_: NSTextBlock.Layer, edge: NSRectEdge): void;
    // compoundInstanceMethods
    valueForDimension(for_: NSTextBlock.Dimension): number;
    // compoundInstanceMethods
    valueTypeForDimension(for_: NSTextBlock.Dimension): NSTextBlock.ValueType;
    // compoundInstanceMethods
    widthForLayerEdge(for_: NSTextBlock.Layer, edge: NSRectEdge): number;
    // compoundInstanceMethods
    widthValueTypeForLayerEdge(for_: NSTextBlock.Layer, edge: NSRectEdge): NSTextBlock.ValueType;
  }

  interface NSTextCheckingClient extends NSTextInputClient, NSTextInputTraits {
    // instance method
    addAnnotationsRange(_: Map<string, string>, range: NSRange): void;
    // instance method
    annotatedSubstringForProposedRangeActualRange(forProposedRange: NSRange, actualRange?: NSRange): NSAttributedString;
    // instance method
    candidateListTouchBarItem(): NSCandidateListTouchBarItem<any>;
    // instance method
    removeAnnotationRange(_: string, range: NSRange): void;
    // instance method
    replaceCharactersInRangeWithAnnotatedString(in_: NSRange, withAnnotatedString: NSAttributedString): void;
    // instance method
    selectAndShowRange(_: NSRange): void;
    // instance method
    setAnnotationsRange(_: Map<string, string>, range: NSRange): void;
    // instance method
    viewForRangeFirstRectActualRange(for_: NSRange, firstRect?: NSRect, actualRange?: NSRange): NSView;
  }

  // interface
  class NSTextCheckingController extends NSObject {
    // ownInstanceProperties
    client: NSTextCheckingClient;
    // ownInstanceProperties
    spellCheckerDocumentTag: number;
    setSpellCheckerDocumentTag(_: number)
    // compoundInstanceMethods
    changeSpelling(_?: any): void;
    // compoundInstanceMethods
    checkSpelling(_?: any): void;
    // compoundInstanceMethods
    checkTextInDocument(_?: any): void;
    // compoundInstanceMethods
    checkTextInRangeTypesOptions(in_: NSRange, types: number, options: Map<string, any>): void;
    // compoundInstanceMethods
    checkTextInSelection(_?: any): void;
    // compoundInstanceMethods
    considerTextCheckingForRange(for_: NSRange): void;
    // compoundInstanceMethods
    didChangeSelectedRange(): void;
    // compoundInstanceMethods
    didChangeTextInRange(in_: NSRange): void;
    // compoundInstanceMethods
    ignoreSpelling(_?: any): void;
    // compoundInstanceMethods
    static createWithClient(client: NSTextCheckingClient): NSTextCheckingController;
    // compoundInstanceMethods
    insertedTextInRange(in_: NSRange): void;
    // compoundInstanceMethods
    invalidate(): void;
    // compoundInstanceMethods
    menuAtIndexClickedOnSelectionEffectiveRange(at: number, clickedOnSelection: boolean, effectiveRange: NSRange): NSMenu;
    // compoundInstanceMethods
    orderFrontSubstitutionsPanel(_?: any): void;
    // compoundInstanceMethods
    showGuessPanel(_?: any): void;
    // compoundInstanceMethods
    updateCandidates(): void;
    // compoundInstanceMethods
    validAnnotations(): string[];
  }

  // interface
  class NSTextContainer extends NSObject {
    // ownInstanceProperties
    containerSize: CGSize;
    setContainerSize(_: CGSize)
    // ownInstanceProperties
    exclusionPaths: NSBezierPath[];
    setExclusionPaths(_: NSBezierPath[])
    // ownInstanceProperties
    heightTracksTextView: boolean;
    setHeightTracksTextView(_: boolean)
    // ownInstanceProperties
    layoutManager: NSLayoutManager;
    setLayoutManager(_: NSLayoutManager)
    // ownInstanceProperties
    lineBreakMode: NSLineBreakMode;
    setLineBreakMode(_: NSLineBreakMode)
    // ownInstanceProperties
    lineFragmentPadding: number;
    setLineFragmentPadding(_: number)
    // ownInstanceProperties
    maximumNumberOfLines: number;
    setMaximumNumberOfLines(_: number)
    // ownInstanceProperties
    isSimpleRectangularTextContainer: boolean;
    // ownInstanceProperties
    size: CGSize;
    setSize(_: CGSize)
    // ownInstanceProperties
    textView: NSTextView;
    setTextView(_: NSTextView)
    // ownInstanceProperties
    widthTracksTextView: boolean;
    setWidthTracksTextView(_: boolean)
    // compoundInstanceMethods
    static createWithContainerSize(containerSize: CGSize): NSTextContainer;
    // compoundInstanceMethods
    static createWithSize(size: CGSize): NSTextContainer;
    // compoundInstanceMethods
    lineFragmentRectForProposedRectAtIndexWritingDirectionRemainingRect(forProposedRect: CGRect, at: number, writingDirection: NSWritingDirection, remaining?: NSRect): CGRect;
    // compoundInstanceMethods
    lineFragmentRectForProposedRectSweepDirectionMovementDirectionRemainingRect(forProposedRect: CGRect, sweepDirection: NSLineSweepDirection, movementDirection: NSLineMovementDirection, remaining?: NSRect): CGRect;
    // compoundInstanceMethods
    replaceLayoutManager(_: NSLayoutManager): void;
  }

  interface NSTextDelegate extends NSObject {
    // instance method
    textDidBeginEditing?(_: NSNotification): void;
    // instance method
    textDidChange?(_: NSNotification): void;
    // instance method
    textDidEndEditing?(_: NSNotification): void;
    // instance method
    textShouldBeginEditing?(_: NSText): boolean;
    // instance method
    textShouldEndEditing?(_: NSText): boolean;
  }

  // interface
  class NSTextField extends NSControl {
    // compoundStaticMethods
    static labelWithAttributedString(labelWithAttributedString: NSAttributedString): NSTextField;
    // compoundStaticMethods
    static labelWithString(labelWithString: string): NSTextField;
    // compoundStaticMethods
    static wrappingLabelWithString(wrappingLabelWithString: string): NSTextField;
    // ownInstanceProperties
    allowsCharacterPickerTouchBarItem: boolean;
    setAllowsCharacterPickerTouchBarItem(_: boolean)
    // ownInstanceProperties
    allowsDefaultTighteningForTruncation: boolean;
    setAllowsDefaultTighteningForTruncation(_: boolean)
    // ownInstanceProperties
    allowsEditingTextAttributes: boolean;
    setAllowsEditingTextAttributes(_: boolean)
    // ownInstanceProperties
    isAutomaticTextCompletionEnabled: boolean;
    setAutomaticTextCompletionEnabled(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    bezelStyle: NSTextField.BezelStyle;
    setBezelStyle(_: NSTextField.BezelStyle)
    // ownInstanceProperties
    isBezeled: boolean;
    setBezeled(_: boolean)
    // ownInstanceProperties
    isBordered: boolean;
    setBordered(_: boolean)
    // ownInstanceProperties
    delegate: NSTextFieldDelegate;
    setDelegate(_: NSTextFieldDelegate)
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    isEditable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    importsGraphics: boolean;
    setImportsGraphics(_: boolean)
    // ownInstanceProperties
    maximumNumberOfLines: number;
    setMaximumNumberOfLines(_: number)
    // ownInstanceProperties
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString)
    // ownInstanceProperties
    placeholderString: string;
    setPlaceholderString(_: string)
    // ownInstanceProperties
    preferredMaxLayoutWidth: number;
    setPreferredMaxLayoutWidth(_: number)
    // ownInstanceProperties
    isSelectable: boolean;
    setSelectable(_: boolean)
    // ownInstanceProperties
    textColor: NSColor;
    setTextColor(_: NSColor)
    // compoundInstanceMethods
    selectText(_?: any): void;
    // compoundInstanceMethods
    textDidBeginEditing(_: NSNotification): void;
    // compoundInstanceMethods
    textDidChange(_: NSNotification): void;
    // compoundInstanceMethods
    textDidEndEditing(_: NSNotification): void;
    // compoundInstanceMethods
    textShouldBeginEditing(_: NSText): boolean;
    // compoundInstanceMethods
    textShouldEndEditing(_: NSText): boolean;
  }

  // interface
  class NSTextFieldCell extends NSActionCell {
    // ownInstanceProperties
    allowedInputSourceLocales: string[];
    setAllowedInputSourceLocales(_: string[])
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    bezelStyle: NSTextField.BezelStyle;
    setBezelStyle(_: NSTextField.BezelStyle)
    // ownInstanceProperties
    drawsBackground: boolean;
    setDrawsBackground(_: boolean)
    // ownInstanceProperties
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString)
    // ownInstanceProperties
    placeholderString: string;
    setPlaceholderString(_: string)
    // ownInstanceProperties
    textColor: NSColor;
    setTextColor(_: NSColor)
    // compoundInstanceMethods
    setWantsNotificationForMarkedText(_: boolean): void;
  }

  interface NSTextFieldDelegate extends NSControlTextEditingDelegate {
    // instance method
    textFieldTextViewShouldSelectCandidateAtIndex?(_: NSTextField, textView: NSTextView, shouldSelectCandidateAt: number): boolean;
    // instance method
    textFieldTextViewCandidatesForSelectedRange?(_: NSTextField, textView: NSTextView, candidates: NSTextCheckingResult[], forSelectedRange: NSRange): NSTextCheckingResult[];
    // instance method
    textFieldTextViewCandidatesForSelectedRange?(_: NSTextField, textView: NSTextView, candidatesForSelectedRange: NSRange): any[];
  }

  // interface
  class NSTextFinder extends NSObject {
    // compoundStaticMethods
    static drawIncrementalMatchHighlightInRect(in_: CGRect): void;
    // ownInstanceProperties
    client: NSTextFinderClient;
    setClient(_: NSTextFinderClient)
    // ownInstanceProperties
    findBarContainer: NSTextFinderBarContainer;
    setFindBarContainer(_: NSTextFinderBarContainer)
    // ownInstanceProperties
    findIndicatorNeedsUpdate: boolean;
    setFindIndicatorNeedsUpdate(_: boolean)
    // ownInstanceProperties
    incrementalMatchRanges: NSValue[];
    // ownInstanceProperties
    isIncrementalSearchingEnabled: boolean;
    setIncrementalSearchingEnabled(_: boolean)
    // ownInstanceProperties
    incrementalSearchingShouldDimContentView: boolean;
    setIncrementalSearchingShouldDimContentView(_: boolean)
    // compoundInstanceMethods
    cancelFindIndicator(): void;
    // compoundInstanceMethods
    noteClientStringWillChange(): void;
    // compoundInstanceMethods
    performAction(_: NSTextFinder.Action): void;
    // compoundInstanceMethods
    validateAction(_: NSTextFinder.Action): boolean;
  }

  interface NSTextFinderBarContainer extends NSObject {
    findBarView: NSView;
    setFindBarView(_: NSView)
    isFindBarVisible: boolean;
    setFindBarVisible(_: boolean)
    contentView: NSView;
    // instance method
    findBarViewDidChangeHeight(): void;
  }

  interface NSTextFinderClient extends NSObject {
    allowsMultipleSelection?: boolean;
    isEditable?: boolean;
    firstSelectedRange?: NSRange;
    isSelectable?: boolean;
    selectedRanges?: NSValue[];
    setSelectedRanges(_: NSValue[])
    string?: string;
    visibleCharacterRanges?: NSValue[];
    // instance method
    contentViewAtIndexEffectiveCharacterRange?(at: number, effectiveCharacterRange: NSRange): NSView;
    // instance method
    didReplaceCharacters?(): void;
    // instance method
    drawCharactersInRangeForContentView?(in_: NSRange, forContentView: NSView): void;
    // instance method
    rectsForCharacterRange?(forCharacterRange: NSRange): NSValue[];
    // instance method
    replaceCharactersInRangeWithString?(in_: NSRange, with_: string): void;
    // instance method
    scrollRangeToVisible?(_: NSRange): void;
    // instance method
    shouldReplaceCharactersInRangesWithStrings?(inRanges: NSValue[], with_: string[]): boolean;
    // instance method
    stringAtIndexEffectiveRangeEndsWithSearchBoundary?(at: number, effectiveRange: NSRange, endsWithSearchBoundary: boolean): string;
    // instance method
    stringLength?(): number;
  }

  interface NSTextInput {
  }

  interface NSTextInputClient {
    // instance method
    attributedString?(): NSAttributedString;
    // instance method
    attributedSubstringForProposedRangeActualRange(forProposedRange: NSRange, actualRange?: NSRange): NSAttributedString;
    // instance method
    baselineDeltaForCharacterAtIndex?(at: number): number;
    // instance method
    characterIndexForPoint(for_: CGPoint): number;
    // instance method
    doCommandBySelector(by: string): void;
    // instance method
    drawsVerticallyForCharacterAtIndex?(at: number): boolean;
    // instance method
    firstRectForCharacterRangeActualRange(forCharacterRange: NSRange, actualRange?: NSRange): CGRect;
    // instance method
    fractionOfDistanceThroughGlyphForPoint?(for_: CGPoint): number;
    // instance method
    hasMarkedText(): boolean;
    // instance method
    insertTextReplacementRange(_: any, replacementRange: NSRange): void;
    // instance method
    markedRange(): NSRange;
    // instance method
    selectedRange(): NSRange;
    // instance method
    setMarkedTextSelectedRangeReplacementRange(_: any, selectedRange: NSRange, replacementRange: NSRange): void;
    // instance method
    unmarkText(): void;
    // instance method
    validAttributesForMarkedText(): string[];
    // instance method
    windowLevel?(): number;
  }

  // interface
  class NSTextInputContext extends NSObject {
    // compoundStaticMethods
    static localizedNameForInputSource(forInputSource: string): string;
    // ownInstanceProperties
    acceptsGlyphInfo: boolean;
    setAcceptsGlyphInfo(_: boolean)
    // ownInstanceProperties
    allowedInputSourceLocales: string[];
    setAllowedInputSourceLocales(_: string[])
    // ownInstanceProperties
    client: NSTextInputClient;
    // ownInstanceProperties
    keyboardInputSources: string[];
    // ownInstanceProperties
    selectedKeyboardInputSource: string;
    setSelectedKeyboardInputSource(_: string)
    // ownStaticProperties
    static currentInputContext: NSTextInputContext;
    // compoundInstanceMethods
    activate(): void;
    // compoundInstanceMethods
    deactivate(): void;
    // compoundInstanceMethods
    discardMarkedText(): void;
    // compoundInstanceMethods
    handleEvent(_: NSEvent): boolean;
    // compoundInstanceMethods
    static createWithClient(client: NSTextInputClient): NSTextInputContext;
    // compoundInstanceMethods
    invalidateCharacterCoordinates(): void;
  }

  interface NSTextInputTraits {
    autocorrectionType?: NSTextInputTraitType;
    setAutocorrectionType(_: NSTextInputTraitType)
    dataDetectionType?: NSTextInputTraitType;
    setDataDetectionType(_: NSTextInputTraitType)
    grammarCheckingType?: NSTextInputTraitType;
    setGrammarCheckingType(_: NSTextInputTraitType)
    linkDetectionType?: NSTextInputTraitType;
    setLinkDetectionType(_: NSTextInputTraitType)
    smartDashesType?: NSTextInputTraitType;
    setSmartDashesType(_: NSTextInputTraitType)
    smartInsertDeleteType?: NSTextInputTraitType;
    setSmartInsertDeleteType(_: NSTextInputTraitType)
    smartQuotesType?: NSTextInputTraitType;
    setSmartQuotesType(_: NSTextInputTraitType)
    spellCheckingType?: NSTextInputTraitType;
    setSpellCheckingType(_: NSTextInputTraitType)
    textCompletionType?: NSTextInputTraitType;
    setTextCompletionType(_: NSTextInputTraitType)
    textReplacementType?: NSTextInputTraitType;
    setTextReplacementType(_: NSTextInputTraitType)
  }

  interface NSTextLayoutOrientationProvider {
    layoutOrientation: NSLayoutManager.TextLayoutOrientation;
  }

  // interface
  class NSTextList extends NSObject {
    // ownInstanceProperties
    listOptions: NSTextList.Options;
    // ownInstanceProperties
    markerFormat: string;
    // ownInstanceProperties
    startingItemNumber: number;
    setStartingItemNumber(_: number)
    // compoundInstanceMethods
    static createWithMarkerFormatOptions(markerFormat: string, options: number): NSTextList;
    // compoundInstanceMethods
    markerForItemNumber(forItemNumber: number): string;
  }

  // interface
  class NSTextStorage extends NSMutableAttributedString {
    // ownInstanceProperties
    attributeRuns: NSTextStorage[];
    setAttributeRuns(_: NSTextStorage[])
    // ownInstanceProperties
    changeInLength: number;
    // ownInstanceProperties
    characters: NSTextStorage[];
    setCharacters(_: NSTextStorage[])
    // ownInstanceProperties
    delegate: NSTextStorageDelegate;
    setDelegate(_: NSTextStorageDelegate)
    // ownInstanceProperties
    editedMask: NSTextStorageEditActions;
    // ownInstanceProperties
    editedRange: NSRange;
    // ownInstanceProperties
    fixesAttributesLazily: boolean;
    // ownInstanceProperties
    font: NSFont;
    setFont(_: NSFont)
    // ownInstanceProperties
    foregroundColor: NSColor;
    setForegroundColor(_: NSColor)
    // ownInstanceProperties
    layoutManagers: NSLayoutManager[];
    // ownInstanceProperties
    paragraphs: NSTextStorage[];
    setParagraphs(_: NSTextStorage[])
    // ownInstanceProperties
    words: NSTextStorage[];
    setWords(_: NSTextStorage[])
    // compoundInstanceMethods
    addLayoutManager(_: NSLayoutManager): void;
    // compoundInstanceMethods
    editedRangeChangeInLength(_: NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
    // compoundInstanceMethods
    ensureAttributesAreFixedInRange(in_: NSRange): void;
    // compoundInstanceMethods
    invalidateAttributesInRange(in_: NSRange): void;
    // compoundInstanceMethods
    processEditing(): void;
    // compoundInstanceMethods
    removeLayoutManager(_: NSLayoutManager): void;
  }

  interface NSTextStorageDelegate extends NSObject {
    // instance method
    textStorageDidProcessEditingRangeChangeInLength?(_: NSTextStorage, didProcessEditing: NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
    // instance method
    textStorageWillProcessEditingRangeChangeInLength?(_: NSTextStorage, willProcessEditing: NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
  }

  // interface
  class NSTextTab extends NSObject {
    // compoundStaticMethods
    static columnTerminatorsForLocale(for_?: NSLocale): NSCharacterSet;
    // ownInstanceProperties
    alignment: NSTextAlignment;
    // ownInstanceProperties
    location: number;
    // ownInstanceProperties
    options: Map<string, any>;
    // ownInstanceProperties
    tabStopType: NSParagraphStyle.TextTabType;
    // compoundInstanceMethods
    static createWithTextAlignmentLocationOptions(textAlignment: NSTextAlignment, location: number, options: Map<string, any>): NSTextTab;
    // compoundInstanceMethods
    static createWithTypeLocation(type: NSParagraphStyle.TextTabType, location: number): NSTextTab;
  }

  // interface
  class NSTextTable extends NSTextBlock {
    // ownInstanceProperties
    collapsesBorders: boolean;
    setCollapsesBorders(_: boolean)
    // ownInstanceProperties
    hidesEmptyCells: boolean;
    setHidesEmptyCells(_: boolean)
    // ownInstanceProperties
    layoutAlgorithm: NSTextTable.LayoutAlgorithm;
    setLayoutAlgorithm(_: NSTextTable.LayoutAlgorithm)
    // ownInstanceProperties
    numberOfColumns: number;
    setNumberOfColumns(_: number)
    // compoundInstanceMethods
    boundsRectForBlockContentRectInRectTextContainerCharacterRange(for_: NSTextTableBlock, contentRect: CGRect, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
    // compoundInstanceMethods
    drawBackgroundForBlockWithFrameInViewCharacterRangeLayoutManager(for_: NSTextTableBlock, withFrame: CGRect, in_: NSView, characterRange: NSRange, layoutManager: NSLayoutManager): void;
    // compoundInstanceMethods
    rectForBlockLayoutAtPointInRectTextContainerCharacterRange(for_: NSTextTableBlock, layoutAt: CGPoint, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
  }

  // interface
  class NSTextTableBlock extends NSTextBlock {
    // ownInstanceProperties
    columnSpan: number;
    // ownInstanceProperties
    rowSpan: number;
    // ownInstanceProperties
    startingColumn: number;
    // ownInstanceProperties
    startingRow: number;
    // ownInstanceProperties
    table: NSTextTable;
    // compoundInstanceMethods
    static createWithTableStartingRowRowSpanStartingColumnColumnSpan(table: NSTextTable, startingRow: number, rowSpan: number, startingColumn: number, columnSpan: number): NSTextTableBlock;
  }

  // interface
  class NSTextView extends NSText {
    // compoundStaticMethods
    static fieldEditor(): NSTextView;
    // compoundStaticMethods
    static registerForServices(): void;
    // compoundStaticMethods
    static scrollableDocumentContentTextView(): NSScrollView;
    // compoundStaticMethods
    static scrollablePlainDocumentContentTextView(): NSScrollView;
    // compoundStaticMethods
    static scrollableTextView(): NSScrollView;
    // ownInstanceProperties
    acceptableDragTypes: string[];
    // ownInstanceProperties
    acceptsGlyphInfo: boolean;
    setAcceptsGlyphInfo(_: boolean)
    // ownInstanceProperties
    allowedInputSourceLocales: string[];
    setAllowedInputSourceLocales(_: string[])
    // ownInstanceProperties
    allowsCharacterPickerTouchBarItem: boolean;
    setAllowsCharacterPickerTouchBarItem(_: boolean)
    // ownInstanceProperties
    allowsDocumentBackgroundColorChange: boolean;
    setAllowsDocumentBackgroundColorChange(_: boolean)
    // ownInstanceProperties
    allowsImageEditing: boolean;
    setAllowsImageEditing(_: boolean)
    // ownInstanceProperties
    allowsUndo: boolean;
    setAllowsUndo(_: boolean)
    // ownInstanceProperties
    isAutomaticDashSubstitutionEnabled: boolean;
    setAutomaticDashSubstitutionEnabled(_: boolean)
    // ownInstanceProperties
    isAutomaticDataDetectionEnabled: boolean;
    setAutomaticDataDetectionEnabled(_: boolean)
    // ownInstanceProperties
    isAutomaticLinkDetectionEnabled: boolean;
    setAutomaticLinkDetectionEnabled(_: boolean)
    // ownInstanceProperties
    isAutomaticQuoteSubstitutionEnabled: boolean;
    setAutomaticQuoteSubstitutionEnabled(_: boolean)
    // ownInstanceProperties
    isAutomaticSpellingCorrectionEnabled: boolean;
    setAutomaticSpellingCorrectionEnabled(_: boolean)
    // ownInstanceProperties
    isAutomaticTextCompletionEnabled: boolean;
    setAutomaticTextCompletionEnabled(_: boolean)
    // ownInstanceProperties
    isAutomaticTextReplacementEnabled: boolean;
    setAutomaticTextReplacementEnabled(_: boolean)
    // ownInstanceProperties
    isCoalescingUndo: boolean;
    // ownInstanceProperties
    isContinuousSpellCheckingEnabled: boolean;
    setContinuousSpellCheckingEnabled(_: boolean)
    // ownInstanceProperties
    defaultParagraphStyle: NSParagraphStyle;
    setDefaultParagraphStyle(_: NSParagraphStyle)
    // ownInstanceProperties
    //   delegate: NSTextViewDelegate;
    setDelegate(_: NSTextViewDelegate)
    // ownInstanceProperties
    displaysLinkToolTips: boolean;
    setDisplaysLinkToolTips(_: boolean)
    // ownInstanceProperties
    enabledTextCheckingTypes: number;
    setEnabledTextCheckingTypes(_: number)
    // ownInstanceProperties
    isGrammarCheckingEnabled: boolean;
    setGrammarCheckingEnabled(_: boolean)
    // ownInstanceProperties
    isIncrementalSearchingEnabled: boolean;
    setIncrementalSearchingEnabled(_: boolean)
    // ownInstanceProperties
    insertionPointColor: NSColor;
    setInsertionPointColor(_: NSColor)
    // ownInstanceProperties
    layoutManager: NSLayoutManager;
    // ownInstanceProperties
    linkTextAttributes: Map<string, any>;
    setLinkTextAttributes(_: Map<string, any>)
    // ownInstanceProperties
    markedTextAttributes: Map<string, any>;
    setMarkedTextAttributes(_: Map<string, any>)
    // ownInstanceProperties
    rangeForUserCharacterAttributeChange: NSRange;
    // ownInstanceProperties
    rangeForUserCompletion: NSRange;
    // ownInstanceProperties
    rangeForUserParagraphAttributeChange: NSRange;
    // ownInstanceProperties
    rangeForUserTextChange: NSRange;
    // ownInstanceProperties
    rangesForUserCharacterAttributeChange: NSValue[];
    // ownInstanceProperties
    rangesForUserParagraphAttributeChange: NSValue[];
    // ownInstanceProperties
    rangesForUserTextChange: NSValue[];
    // ownInstanceProperties
    readablePasteboardTypes: string[];
    // ownInstanceProperties
    //   isRulerVisible: boolean;
    setRulerVisible(_: boolean)
    // ownInstanceProperties
    selectedRanges: NSValue[];
    setSelectedRanges(_: NSValue[])
    // ownInstanceProperties
    selectedTextAttributes: Map<string, any>;
    setSelectedTextAttributes(_: Map<string, any>)
    // ownInstanceProperties
    selectionAffinity: NSSelectionAffinity;
    // ownInstanceProperties
    selectionGranularity: NSSelectionGranularity;
    setSelectionGranularity(_: NSSelectionGranularity)
    // ownInstanceProperties
    shouldDrawInsertionPoint: boolean;
    // ownInstanceProperties
    smartInsertDeleteEnabled: boolean;
    setSmartInsertDeleteEnabled(_: boolean)
    // ownInstanceProperties
    spellCheckerDocumentTag: number;
    // ownInstanceProperties
    textContainer: NSTextContainer;
    setTextContainer(_: NSTextContainer)
    // ownInstanceProperties
    textContainerInset: CGSize;
    setTextContainerInset(_: CGSize)
    // ownInstanceProperties
    textContainerOrigin: CGPoint;
    // ownInstanceProperties
    textStorage: NSTextStorage;
    // ownInstanceProperties
    typingAttributes: Map<string, any>;
    setTypingAttributes(_: Map<string, any>)
    // ownInstanceProperties
    usesAdaptiveColorMappingForDarkAppearance: boolean;
    setUsesAdaptiveColorMappingForDarkAppearance(_: boolean)
    // ownInstanceProperties
    usesFindBar: boolean;
    setUsesFindBar(_: boolean)
    // ownInstanceProperties
    usesFindPanel: boolean;
    setUsesFindPanel(_: boolean)
    // ownInstanceProperties
    usesInspectorBar: boolean;
    setUsesInspectorBar(_: boolean)
    // ownInstanceProperties
    usesRolloverButtonForSelection: boolean;
    setUsesRolloverButtonForSelection(_: boolean)
    // ownInstanceProperties
    usesRuler: boolean;
    setUsesRuler(_: boolean)
    // ownInstanceProperties
    writablePasteboardTypes: string[];
    // ownStaticProperties
    static stronglyReferencesTextStorage: boolean;
    // compoundInstanceMethods
    alignJustified(_?: any): void;
    // compoundInstanceMethods
    breakUndoCoalescing(): void;
    // compoundInstanceMethods
    changeAttributes(_?: any): void;
    // compoundInstanceMethods
    changeDocumentBackgroundColor(_?: any): void;
    // compoundInstanceMethods
    changeLayoutOrientation(_?: any): void;
    // compoundInstanceMethods
    characterIndexForInsertionAtPoint(at: CGPoint): number;
    // compoundInstanceMethods
    checkTextInDocument(_?: any): void;
    // compoundInstanceMethods
    checkTextInRangeTypesOptions(in_: NSRange, types: number, options: Map<string, any>): void;
    // compoundInstanceMethods
    checkTextInSelection(_?: any): void;
    // compoundInstanceMethods
    cleanUpAfterDragOperation(): void;
    // compoundInstanceMethods
    clickedOnLinkAtIndex(onLink: any, at: number): void;
    // compoundInstanceMethods
    completionsForPartialWordRangeIndexOfSelectedItem(forPartialWordRange: NSRange, indexOfSelectedItem: number): string[];
    // compoundInstanceMethods
    didChangeText(): void;
    // compoundInstanceMethods
    dragImageForSelectionWithEventOrigin(with_: NSEvent, origin?: NSPoint): NSImage;
    // compoundInstanceMethods
    dragOperationForDraggingInfoType(for_: NSDraggingInfo, type: string): NSDragOperation;
    // compoundInstanceMethods
    dragSelectionWithEventOffsetSlideBack(with_: NSEvent, offset: CGSize, slideBack: boolean): boolean;
    // compoundInstanceMethods
    drawInsertionPointInRectColorTurnedOn(in_: CGRect, color: NSColor, turnedOn: boolean): void;
    // compoundInstanceMethods
    drawViewBackgroundInRect(in_: CGRect): void;
    // compoundInstanceMethods
    handleTextCheckingResultsForRangeTypesOptionsOrthographyWordCount(_: NSTextCheckingResult[], forRange: NSRange, types: number, options: Map<string, any>, orthography: NSOrthography, wordCount: number): void;
    // compoundInstanceMethods
    static createWithFrameTextContainer(frame: CGRect, textContainer?: NSTextContainer): NSTextView;
    // compoundInstanceMethods
    insertCompletionForPartialWordRangeMovementIsFinal(_: string, forPartialWordRange: NSRange, movement: number, isFinal: boolean): void;
    // compoundInstanceMethods
    invalidateTextContainerOrigin(): void;
    // compoundInstanceMethods
    loosenKerning(_?: any): void;
    // compoundInstanceMethods
    lowerBaseline(_?: any): void;
    // compoundInstanceMethods
    orderFrontLinkPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontListPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontSharingServicePicker(_?: any): void;
    // compoundInstanceMethods
    orderFrontSpacingPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontSubstitutionsPanel(_?: any): void;
    // compoundInstanceMethods
    orderFrontTablePanel(_?: any): void;
    // compoundInstanceMethods
    outline(_?: any): void;
    // compoundInstanceMethods
    pasteAsPlainText(_?: any): void;
    // compoundInstanceMethods
    pasteAsRichText(_?: any): void;
    // compoundInstanceMethods
    performFindPanelAction(_?: any): void;
    // compoundInstanceMethods
    performValidatedReplacementInRangeWithAttributedString(in_: NSRange, with_: NSAttributedString): boolean;
    // compoundInstanceMethods
    preferredPasteboardTypeFromArrayRestrictedToTypesFromArray(from: string[], restrictedToTypesFrom?: string[]): string;
    // compoundInstanceMethods
    quickLookPreviewableItemsInRanges(_: NSValue[]): QLPreviewItem[];
    // compoundInstanceMethods
    raiseBaseline(_?: any): void;
    // compoundInstanceMethods
    readSelectionFromPasteboard(from: NSPasteboard): boolean;
    // compoundInstanceMethods
    readSelectionFromPasteboardType(from: NSPasteboard, type: string): boolean;
    // compoundInstanceMethods
    replaceTextContainer(_: NSTextContainer): void;
    // compoundInstanceMethods
    selectionRangeForProposedRangeGranularity(forProposedRange: NSRange, granularity: NSSelectionGranularity): NSRange;
    // compoundInstanceMethods
    setAlignmentRange(_: NSTextAlignment, range: NSRange): void;
    // compoundInstanceMethods
    setBaseWritingDirectionRange(_: NSWritingDirection, range: NSRange): void;
    // compoundInstanceMethods
    setConstrainedFrameSize(_: CGSize): void;
    // compoundInstanceMethods
    setLayoutOrientation(_: NSLayoutManager.TextLayoutOrientation): void;
    // compoundInstanceMethods
    setNeedsDisplayInRectAvoidAdditionalLayout(_: CGRect, avoidAdditionalLayout: boolean): void;
    // compoundInstanceMethods
    setSelectedRange(_: NSRange): void;
    // compoundInstanceMethods
    setSelectedRangeAffinityStillSelecting(_: NSRange, affinity: NSSelectionAffinity, stillSelecting: boolean): void;
    // compoundInstanceMethods
    setSelectedRangesAffinityStillSelecting(_: NSValue[], affinity: NSSelectionAffinity, stillSelecting: boolean): void;
    // compoundInstanceMethods
    setSpellingStateRange(_: number, range: NSRange): void;
    // compoundInstanceMethods
    shouldChangeTextInRangeReplacementString(in_: NSRange, replacementString?: string): boolean;
    // compoundInstanceMethods
    shouldChangeTextInRangesReplacementStrings(inRanges: NSValue[], replacementStrings?: string[]): boolean;
    // compoundInstanceMethods
    showFindIndicatorForRange(for_: NSRange): void;
    // compoundInstanceMethods
    smartDeleteRangeForProposedRange(forProposedRange: NSRange): NSRange;
    // compoundInstanceMethods
    smartInsertAfterStringForStringReplacingRange(afterStringFor: string, replacing: NSRange): string;
    // compoundInstanceMethods
    smartInsertBeforeStringForStringReplacingRange(beforeStringFor: string, replacing: NSRange): string;
    // compoundInstanceMethods
    smartInsertForStringReplacingRangeBeforeStringAfterString(for_: string, replacing: NSRange, before?: string, after?: string): void;
    // compoundInstanceMethods
    startSpeaking(_?: any): void;
    // compoundInstanceMethods
    stopSpeaking(_?: any): void;
    // compoundInstanceMethods
    tightenKerning(_?: any): void;
    // compoundInstanceMethods
    toggleAutomaticDashSubstitution(_?: any): void;
    // compoundInstanceMethods
    toggleAutomaticDataDetection(_?: any): void;
    // compoundInstanceMethods
    toggleAutomaticLinkDetection(_?: any): void;
    // compoundInstanceMethods
    toggleAutomaticQuoteSubstitution(_?: any): void;
    // compoundInstanceMethods
    toggleAutomaticSpellingCorrection(_?: any): void;
    // compoundInstanceMethods
    toggleAutomaticTextCompletion(_?: any): void;
    // compoundInstanceMethods
    toggleAutomaticTextReplacement(_?: any): void;
    // compoundInstanceMethods
    toggleContinuousSpellChecking(_?: any): void;
    // compoundInstanceMethods
    toggleGrammarChecking(_?: any): void;
    // compoundInstanceMethods
    toggleQuickLookPreviewPanel(_?: any): void;
    // compoundInstanceMethods
    toggleSmartInsertDelete(_?: any): void;
    // compoundInstanceMethods
    turnOffKerning(_?: any): void;
    // compoundInstanceMethods
    turnOffLigatures(_?: any): void;
    // compoundInstanceMethods
    updateCandidates(): void;
    // compoundInstanceMethods
    updateDragTypeRegistration(): void;
    // compoundInstanceMethods
    updateFontPanel(): void;
    // compoundInstanceMethods
    updateInsertionPointStateAndRestartTimer(_: boolean): void;
    // compoundInstanceMethods
    updateQuickLookPreviewPanel(): void;
    // compoundInstanceMethods
    updateRuler(): void;
    // compoundInstanceMethods
    updateTextTouchBarItems(): void;
    // compoundInstanceMethods
    updateTouchBarItemIdentifiers(): void;
    // compoundInstanceMethods
    useAllLigatures(_?: any): void;
    // compoundInstanceMethods
    useStandardKerning(_?: any): void;
    // compoundInstanceMethods
    useStandardLigatures(_?: any): void;
    // compoundInstanceMethods
    writeSelectionToPasteboardType(to: NSPasteboard, type: string): boolean;
    // compoundInstanceMethods
    writeSelectionToPasteboardTypes(to: NSPasteboard, types: string[]): boolean;
  }

  interface NSTextViewDelegate extends NSTextDelegate {
    // instance method
    textViewClickedOnLinkAtIndex?(_: NSTextView, clickedOnLink: any, at: number): boolean;
    // instance method
    textViewClickedOnCellInRectAtIndex?(_: NSTextView, clickedOn: NSTextAttachmentCell, in_: CGRect, at: number): void;
    // instance method
    textViewDoubleClickedOnCellInRectAtIndex?(_: NSTextView, doubleClickedOn: NSTextAttachmentCell, in_: CGRect, at: number): void;
    // instance method
    textViewDraggedCellInRectEventAtIndex?(_: NSTextView, draggedCell: NSTextAttachmentCell, in_: CGRect, event: NSEvent, at: number): void;
    // instance method
    textViewWritablePasteboardTypesForCellAtIndex?(_: NSTextView, writablePasteboardTypesFor: NSTextAttachmentCell, at: number): string[];
    // instance method
    textViewWriteCellAtIndexToPasteboardType?(_: NSTextView, write: NSTextAttachmentCell, at: number, to: NSPasteboard, type: string): boolean;
    // instance method
    textViewWillDisplayToolTipForCharacterAtIndex?(_: NSTextView, willDisplayToolTip: string, forCharacterAt: number): string;
    // instance method
    textViewShouldChangeTextInRangeReplacementString?(_: NSTextView, shouldChangeTextIn: NSRange, replacementString?: string): boolean;
    // instance method
    textViewDoCommandBySelector?(_: NSTextView, doCommandBy: string): boolean;
    // instance method
    textViewMenuForEventAtIndex?(_: NSTextView, menu: NSMenu, for_: NSEvent, at: number): NSMenu;
    // instance method
    textViewWillCheckTextInRangeOptionsTypes?(_: NSTextView, willCheckTextIn: NSRange, options: Map<string, any>, types: number): Map<string, any>;
    // instance method
    textViewDidCheckTextInRangeTypesOptionsResultsOrthographyWordCount?(_: NSTextView, didCheckTextIn: NSRange, types: number, options: Map<string, any>, results: NSTextCheckingResult[], orthography: NSOrthography, wordCount: number): NSTextCheckingResult[];
    // instance method
    textViewURLForContentsOfTextAttachmentAtIndex?(_: NSTextView, urlForContentsOf: NSTextAttachment, at: number): NSURL;
    // instance method
    textViewWillShowSharingServicePickerForItems?(_: NSTextView, willShow: NSSharingServicePicker, forItems: any[]): NSSharingServicePicker;
    // instance method
    textViewShouldSelectCandidateAtIndex?(_: NSTextView, shouldSelectCandidateAt: number): boolean;
    // instance method
    textViewCandidatesForSelectedRange?(_: NSTextView, candidates: NSTextCheckingResult[], forSelectedRange: NSRange): NSTextCheckingResult[];
    // instance method
    textViewCandidatesForSelectedRange?(_: NSTextView, candidatesForSelectedRange: NSRange): any[];
    // instance method
    textViewCompletionsForPartialWordRangeIndexOfSelectedItem?(_: NSTextView, completions: string[], forPartialWordRange: NSRange, indexOfSelectedItem?: number): string[];
    // instance method
    textViewShouldChangeTextInRangesReplacementStrings?(_: NSTextView, shouldChangeTextInRanges: NSValue[], replacementStrings?: string[]): boolean;
    // instance method
    textViewShouldChangeTypingAttributesToAttributes?(_: NSTextView, shouldChangeTypingAttributes: Map<string, any>, toAttributes: Map<string, any>): Map<string, any>;
    // instance method
    textViewShouldSetSpellingStateRange?(_: NSTextView, shouldSetSpellingState: number, range: NSRange): number;
    // instance method
    textViewShouldUpdateTouchBarItemIdentifiers?(_: NSTextView, shouldUpdateTouchBarItemIdentifiers: string[]): string[];
    // instance method
    textViewWillChangeSelectionFromCharacterRangeToCharacterRange?(_: NSTextView, willChangeSelectionFromCharacterRange: NSRange, toCharacterRange: NSRange): NSRange;
    // instance method
    textViewWillChangeSelectionFromCharacterRangesToCharacterRanges?(_: NSTextView, willChangeSelectionFromCharacterRanges: NSValue[], toCharacterRanges: NSValue[]): NSValue[];
    // instance method
    textViewDidChangeSelection?(_: NSNotification): void;
    // instance method
    textViewDidChangeTypingAttributes?(_: NSNotification): void;
    // instance method
    undoManagerForTextView?(for_: NSTextView): UndoManager;
  }

  // interface
  class NSTitlebarAccessoryViewController extends NSViewController {
    // ownInstanceProperties
    fullScreenMinHeight: number;
    setFullScreenMinHeight(_: number)
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    layoutAttribute: NSLayoutConstraint.Attribute;
    setLayoutAttribute(_: NSLayoutConstraint.Attribute)
  }

  // interface
  class NSTokenField extends NSTextField {
    // compoundStaticMethods
    //  static labelWithAttributedString(labelWithAttributedString: NSAttributedString): NSTokenField;
    // compoundStaticMethods
    //  static labelWithString(labelWithString: string): NSTokenField;
    // compoundStaticMethods
    //  static wrappingLabelWithString(wrappingLabelWithString: string): NSTokenField;
    // ownInstanceProperties
    completionDelay: number;
    setCompletionDelay(_: number)
    // ownInstanceProperties
    //   delegate: NSTokenFieldDelegate;
    setDelegate(_: NSTokenFieldDelegate)
    // ownInstanceProperties
    tokenStyle: NSTokenField.TokenStyle;
    setTokenStyle(_: NSTokenField.TokenStyle)
    // ownInstanceProperties
    tokenizingCharacterSet: NSCharacterSet;
    setTokenizingCharacterSet(_: NSCharacterSet)
    // ownStaticProperties
    static defaultCompletionDelay: number;
    // ownStaticProperties
    static defaultTokenizingCharacterSet: NSCharacterSet;
  }

  // interface
  class NSTokenFieldCell extends NSTextFieldCell {
    // ownInstanceProperties
    completionDelay: number;
    setCompletionDelay(_: number)
    // ownInstanceProperties
    delegate: NSTokenFieldCellDelegate;
    setDelegate(_: NSTokenFieldCellDelegate)
    // ownInstanceProperties
    tokenStyle: NSTokenField.TokenStyle;
    setTokenStyle(_: NSTokenField.TokenStyle)
    // ownInstanceProperties
    tokenizingCharacterSet: NSCharacterSet;
    setTokenizingCharacterSet(_: NSCharacterSet)
    // ownStaticProperties
    static defaultCompletionDelay: number;
    // ownStaticProperties
    static defaultTokenizingCharacterSet: NSCharacterSet;
  }

  interface NSTokenFieldCellDelegate extends NSObject {
    // instance method
    tokenFieldCellShouldAddObjectsAtIndex?(_: NSTokenFieldCell, shouldAdd: any[], at: number): any[];
    // instance method
    tokenFieldCellRepresentedObjectForEditingString?(_: NSTokenFieldCell, representedObjectForEditing: string): any;
    // instance method
    tokenFieldCellWriteRepresentedObjectsToPasteboard?(_: NSTokenFieldCell, writeRepresentedObjects: any[], to: NSPasteboard): boolean;
    // instance method
    tokenFieldCellReadFromPasteboard?(_: NSTokenFieldCell, readFrom: NSPasteboard): any[];
    // instance method
    tokenFieldCellCompletionsForSubstringIndexOfTokenIndexOfSelectedItem?(_: NSTokenFieldCell, completionsForSubstring: string, indexOfToken: number, indexOfSelectedItem: number): any[];
    // instance method
    tokenFieldCellDisplayStringForRepresentedObject?(_: NSTokenFieldCell, displayStringForRepresentedObject: any): string;
    // instance method
    tokenFieldCellEditingStringForRepresentedObject?(_: NSTokenFieldCell, editingStringForRepresentedObject: any): string;
    // instance method
    tokenFieldCellHasMenuForRepresentedObject?(_: NSTokenFieldCell, hasMenuForRepresentedObject: any): boolean;
    // instance method
    tokenFieldCellMenuForRepresentedObject?(_: NSTokenFieldCell, menuForRepresentedObject: any): NSMenu;
    // instance method
    tokenFieldCellStyleForRepresentedObject?(_: NSTokenFieldCell, styleForRepresentedObject: any): NSTokenField.TokenStyle;
  }

  interface NSTokenFieldDelegate extends NSTextFieldDelegate {
    // instance method
    tokenFieldShouldAddObjectsAtIndex?(_: NSTokenField, shouldAdd: any[], at: number): any[];
    // instance method
    tokenFieldRepresentedObjectForEditingString?(_: NSTokenField, representedObjectForEditing: string): any;
    // instance method
    tokenFieldWriteRepresentedObjectsToPasteboard?(_: NSTokenField, writeRepresentedObjects: any[], to: NSPasteboard): boolean;
    // instance method
    tokenFieldReadFromPasteboard?(_: NSTokenField, readFrom: NSPasteboard): any[];
    // instance method
    tokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem?(_: NSTokenField, completionsForSubstring: string, indexOfToken: number, indexOfSelectedItem?: number): any[];
    // instance method
    tokenFieldDisplayStringForRepresentedObject?(_: NSTokenField, displayStringForRepresentedObject: any): string;
    // instance method
    tokenFieldEditingStringForRepresentedObject?(_: NSTokenField, editingStringForRepresentedObject: any): string;
    // instance method
    tokenFieldHasMenuForRepresentedObject?(_: NSTokenField, hasMenuForRepresentedObject: any): boolean;
    // instance method
    tokenFieldMenuForRepresentedObject?(_: NSTokenField, menuForRepresentedObject: any): NSMenu;
    // instance method
    tokenFieldStyleForRepresentedObject?(_: NSTokenField, styleForRepresentedObject: any): NSTokenField.TokenStyle;
  }

  // interface
  class NSToolbar extends NSObject {
    // ownInstanceProperties
    allowsExtensionItems: boolean;
    setAllowsExtensionItems(_: boolean)
    // ownInstanceProperties
    allowsUserCustomization: boolean;
    setAllowsUserCustomization(_: boolean)
    // ownInstanceProperties
    autosavesConfiguration: boolean;
    setAutosavesConfiguration(_: boolean)
    // ownInstanceProperties
    centeredItemIdentifier: string;
    setCenteredItemIdentifier(_: string)
    // ownInstanceProperties
    configurationDictionary: Map<string, any>;
    // ownInstanceProperties
    customizationPaletteIsRunning: boolean;
    // ownInstanceProperties
    delegate: NSToolbarDelegate;
    setDelegate(_: NSToolbarDelegate)
    // ownInstanceProperties
    displayMode: NSToolbar.DisplayMode;
    setDisplayMode(_: NSToolbar.DisplayMode)
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    items: NSToolbarItem[];
    // ownInstanceProperties
    selectedItemIdentifier: string;
    setSelectedItemIdentifier(_: string)
    // ownInstanceProperties
    showsBaselineSeparator: boolean;
    setShowsBaselineSeparator(_: boolean)
    // ownInstanceProperties
    sizeMode: NSToolbar.SizeMode;
    setSizeMode(_: NSToolbar.SizeMode)
    // ownInstanceProperties
    isVisible: boolean;
    setVisible(_: boolean)
    // ownInstanceProperties
    visibleItems: NSToolbarItem[];
    // compoundInstanceMethods
    static createWithIdentifier(identifier: string): NSToolbar;
    // compoundInstanceMethods
    insertItemWithItemIdentifierAtIndex(withItemIdentifier: string, at: number): void;
    // compoundInstanceMethods
    removeItemAtIndex(at: number): void;
    // compoundInstanceMethods
    runCustomizationPalette(_?: any): void;
    // compoundInstanceMethods
    setConfigurationFromDictionary(_: Map<string, any>): void;
    // compoundInstanceMethods
    validateVisibleItems(): void;
  }

  interface NSToolbarDelegate extends NSObject {
    // instance method
    toolbarItemForItemIdentifierWillBeInsertedIntoToolbar?(_: NSToolbar, itemForItemIdentifier: string, willBeInsertedIntoToolbar: boolean): NSToolbarItem;
    // instance method
    toolbarAllowedItemIdentifiers?(_: NSToolbar): string[];
    // instance method
    toolbarDefaultItemIdentifiers?(_: NSToolbar): string[];
    // instance method
    toolbarDidRemoveItem?(_: NSNotification): void;
    // instance method
    toolbarSelectableItemIdentifiers?(_: NSToolbar): string[];
    // instance method
    toolbarWillAddItem?(_: NSNotification): void;
  }

  // interface
  class NSToolbarItem extends NSObject {
    // ownInstanceProperties
    action: string;
    setAction(_: string)
    // ownInstanceProperties
    allowsDuplicatesInToolbar: boolean;
    // ownInstanceProperties
    autovalidates: boolean;
    setAutovalidates(_: boolean)
    // ownInstanceProperties
    isBordered: boolean;
    setBordered(_: boolean)
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    image: NSImage;
    setImage(_: NSImage)
    // ownInstanceProperties
    itemIdentifier: string;
    // ownInstanceProperties
    label: string;
    setLabel(_: string)
    // ownInstanceProperties
    maxSize: CGSize;
    setMaxSize(_: CGSize)
    // ownInstanceProperties
    menuFormRepresentation: NSMenuItem;
    setMenuFormRepresentation(_: NSMenuItem)
    // ownInstanceProperties
    minSize: CGSize;
    setMinSize(_: CGSize)
    // ownInstanceProperties
    paletteLabel: string;
    setPaletteLabel(_: string)
    // ownInstanceProperties
    tag: number;
    setTag(_: number)
    // ownInstanceProperties
    target: any;
    setTarget(_: any)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    toolTip: string;
    setToolTip(_: string)
    // ownInstanceProperties
    toolbar: NSToolbar;
    // ownInstanceProperties
    view: NSView;
    setView(_: NSView)
    // ownInstanceProperties
    visibilityPriority: number;
    setVisibilityPriority(_: number)
    // compoundInstanceMethods
    static createWithItemIdentifier(itemIdentifier: string): NSToolbarItem;
    // compoundInstanceMethods
    validate(): void;
  }

  // interface
  class NSToolbarItemGroup extends NSToolbarItem {
    // ownInstanceProperties
    controlRepresentation: NSToolbarItemGroup.ControlRepresentation;
    setControlRepresentation(_: NSToolbarItemGroup.ControlRepresentation)
    // ownInstanceProperties
    selectedIndex: number;
    setSelectedIndex(_: number)
    // ownInstanceProperties
    selectionMode: NSToolbarItemGroup.SelectionMode;
    setSelectionMode(_: NSToolbarItemGroup.SelectionMode)
    // ownInstanceProperties
    subitems: NSToolbarItem[];
    setSubitems(_: NSToolbarItem[])
    // compoundInstanceMethods
    isSelectedAtIndex(at: number): boolean;
    // compoundInstanceMethods
    setSelectedAtIndex(_: boolean, at: number): void;
  }

  interface NSToolbarItemValidation extends NSObject {
    // instance method
    validateToolbarItem(_: NSToolbarItem): boolean;
  }

  // interface
  class NSTouch extends NSObject {
    // ownInstanceProperties
    device: any;
    // ownInstanceProperties
    deviceSize: CGSize;
    // ownInstanceProperties
    identity: any;
    // ownInstanceProperties
    normalizedPosition: CGPoint;
    // ownInstanceProperties
    phase: NSTouch.Phase;
    // ownInstanceProperties
    isResting: boolean;
    // ownInstanceProperties
    type: NSTouch.TouchType;
    // compoundInstanceMethods
    locationInView(in_?: NSView): CGPoint;
    // compoundInstanceMethods
    previousLocationInView(in_?: NSView): CGPoint;
  }

  // interface
  class NSTouchBar extends NSObject {
    // ownInstanceProperties
    customizationAllowedItemIdentifiers: string[];
    setCustomizationAllowedItemIdentifiers(_: string[])
    // ownInstanceProperties
    customizationIdentifier: string;
    setCustomizationIdentifier(_: string)
    // ownInstanceProperties
    customizationRequiredItemIdentifiers: string[];
    setCustomizationRequiredItemIdentifiers(_: string[])
    // ownInstanceProperties
    defaultItemIdentifiers: string[];
    setDefaultItemIdentifiers(_: string[])
    // ownInstanceProperties
    delegate: NSTouchBarDelegate;
    setDelegate(_: NSTouchBarDelegate)
    // ownInstanceProperties
    escapeKeyReplacementItemIdentifier: string;
    setEscapeKeyReplacementItemIdentifier(_: string)
    // ownInstanceProperties
    itemIdentifiers: string[];
    // ownInstanceProperties
    principalItemIdentifier: string;
    setPrincipalItemIdentifier(_: string)
    // ownInstanceProperties
    templateItems: NSSet<NSTouchBarItem>;
    setTemplateItems(_: NSSet<NSTouchBarItem>)
    // ownInstanceProperties
    isVisible: boolean;
    // ownStaticProperties
    static isAutomaticCustomizeTouchBarMenuItemEnabled: boolean;
    setAutomaticCustomizeTouchBarMenuItemEnabled(_: boolean)
    // compoundInstanceMethods
    itemForIdentifier(forIdentifier: string): NSTouchBarItem;
  }

  interface NSTouchBarDelegate extends NSObject {
    // instance method
    touchBarMakeItemForIdentifier?(_: NSTouchBar, makeItemForIdentifier: string): NSTouchBarItem;
  }

  // interface
  class NSTouchBarItem extends NSObject {
    // ownInstanceProperties
    customizationLabel: string;
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    view: NSView;
    // ownInstanceProperties
    viewController: NSViewController;
    // ownInstanceProperties
    visibilityPriority: number;
    setVisibilityPriority(_: number)
    // ownInstanceProperties
    isVisible: boolean;
    // compoundInstanceMethods
    static createWithIdentifier(identifier: string): NSTouchBarItem;
  }

  interface NSTouchBarProvider extends NSObject {
    touchBar: NSTouchBar;
  }

  // interface
  class NSTrackingArea extends NSObject {
    // ownInstanceProperties
    options: NSTrackingArea.Options;
    // ownInstanceProperties
    owner: any;
    // ownInstanceProperties
    rect: CGRect;
    // ownInstanceProperties
    userInfo: Map<any, any>;
    // compoundInstanceMethods
    static createWithRectOptionsOwnerUserInfo(rect: CGRect, options: NSTrackingArea.Options, owner?: any, userInfo?: Map<any, any>): NSTrackingArea;
  }

  // interface
  class NSTreeController extends NSObjectController {
    // ownInstanceProperties
    alwaysUsesMultipleValuesMarker: boolean;
    setAlwaysUsesMultipleValuesMarker(_: boolean)
    // ownInstanceProperties
    arrangedObjects: NSTreeNode;
    // ownInstanceProperties
    avoidsEmptySelection: boolean;
    setAvoidsEmptySelection(_: boolean)
    // ownInstanceProperties
    canAddChild: boolean;
    // ownInstanceProperties
    canInsert: boolean;
    // ownInstanceProperties
    canInsertChild: boolean;
    // ownInstanceProperties
    childrenKeyPath: string;
    setChildrenKeyPath(_: string)
    // ownInstanceProperties
    countKeyPath: string;
    setCountKeyPath(_: string)
    // ownInstanceProperties
    leafKeyPath: string;
    setLeafKeyPath(_: string)
    // ownInstanceProperties
    preservesSelection: boolean;
    setPreservesSelection(_: boolean)
    // ownInstanceProperties
    selectedNodes: NSTreeNode[];
    // ownInstanceProperties
    selectionIndexPath: NSIndexPath;
    // ownInstanceProperties
    selectionIndexPaths: NSIndexPath[];
    // ownInstanceProperties
    selectsInsertedObjects: boolean;
    setSelectsInsertedObjects(_: boolean)
    // ownInstanceProperties
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[])
    // compoundInstanceMethods
    addChild(_?: any): void;
    // compoundInstanceMethods
    addSelectionIndexPaths(_: NSIndexPath[]): boolean;
    // compoundInstanceMethods
    childrenKeyPathForNode(for_: NSTreeNode): string;
    // compoundInstanceMethods
    countKeyPathForNode(for_: NSTreeNode): string;
    // compoundInstanceMethods
    insert(_?: any): void;
    // compoundInstanceMethods
    insertChild(_?: any): void;
    // compoundInstanceMethods
    insertObjectAtArrangedObjectIndexPath(_?: any, atArrangedObjectIndexPath?: NSIndexPath): void;
    // compoundInstanceMethods
    insertObjectsAtArrangedObjectIndexPaths(_: any[], atArrangedObjectIndexPaths: NSIndexPath[]): void;
    // compoundInstanceMethods
    leafKeyPathForNode(for_: NSTreeNode): string;
    // compoundInstanceMethods
    moveNodeToIndexPath(_: NSTreeNode, to: NSIndexPath): void;
    // compoundInstanceMethods
    moveNodesToIndexPath(_: NSTreeNode[], to: NSIndexPath): void;
    // compoundInstanceMethods
    rearrangeObjects(): void;
    // compoundInstanceMethods
    removeObjectAtArrangedObjectIndexPath(atArrangedObjectIndexPath: NSIndexPath): void;
    // compoundInstanceMethods
    removeObjectsAtArrangedObjectIndexPaths(atArrangedObjectIndexPaths: NSIndexPath[]): void;
    // compoundInstanceMethods
    removeSelectionIndexPaths(_: NSIndexPath[]): boolean;
    // compoundInstanceMethods
    setSelectionIndexPath(_?: NSIndexPath): boolean;
    // compoundInstanceMethods
    setSelectionIndexPaths(_: NSIndexPath[]): boolean;
  }

  // interface
  class NSTreeNode extends NSObject {
    // ownInstanceProperties
    childNodes: NSTreeNode[];
    // ownInstanceProperties
    indexPath: NSIndexPath;
    // ownInstanceProperties
    isLeaf: boolean;
    // ownInstanceProperties
    mutableChildNodes: NSMutableArray<NSTreeNode>;
    // ownInstanceProperties
    parentNode: NSTreeNode;
    // ownInstanceProperties
    representedObject: any;
    // compoundInstanceMethods
    descendantNodeAtIndexPath(at: NSIndexPath): NSTreeNode;
    // compoundInstanceMethods
    static createWithRepresentedObject(representedObject?: any): NSTreeNode;
    // compoundInstanceMethods
    sortWithSortDescriptorsRecursively(with_: NSSortDescriptor[], recursively: boolean): void;
  }

  // interface
  class NSTypesetter extends NSObject {
    // compoundStaticMethods
    static printingAdjustmentInLayoutManagerForNominallySpacedGlyphRangePackedGlyphsCount(in_: NSLayoutManager, forNominallySpacedGlyphRange: NSRange, packedGlyphs: string, count: number): CGSize;
    // compoundStaticMethods
    static sharedSystemTypesetterForBehavior(for_: NSLayoutManager.TypesetterBehavior): any;
    // ownInstanceProperties
    attributedString: NSAttributedString;
    setAttributedString(_: NSAttributedString)
    // ownInstanceProperties
    attributesForExtraLineFragment: Map<string, any>;
    // ownInstanceProperties
    bidiProcessingEnabled: boolean;
    setBidiProcessingEnabled(_: boolean)
    // ownInstanceProperties
    currentParagraphStyle: NSParagraphStyle;
    // ownInstanceProperties
    currentTextContainer: NSTextContainer;
    // ownInstanceProperties
    hyphenationFactor: number;
    setHyphenationFactor(_: number)
    // ownInstanceProperties
    layoutManager: NSLayoutManager;
    // ownInstanceProperties
    lineFragmentPadding: number;
    setLineFragmentPadding(_: number)
    // ownInstanceProperties
    paragraphCharacterRange: NSRange;
    // ownInstanceProperties
    paragraphGlyphRange: NSRange;
    // ownInstanceProperties
    paragraphSeparatorCharacterRange: NSRange;
    // ownInstanceProperties
    paragraphSeparatorGlyphRange: NSRange;
    // ownInstanceProperties
    textContainers: NSTextContainer[];
    // ownInstanceProperties
    typesetterBehavior: NSLayoutManager.TypesetterBehavior;
    setTypesetterBehavior(_: NSLayoutManager.TypesetterBehavior)
    // ownInstanceProperties
    usesFontLeading: boolean;
    setUsesFontLeading(_: boolean)
    // ownStaticProperties
    static defaultTypesetterBehavior: NSLayoutManager.TypesetterBehavior;
    // ownStaticProperties
    static sharedSystemTypesetter: NSTypesetter;
    // compoundInstanceMethods
    actionForControlCharacterAtIndex(at: number): NSTypesetterControlCharacterAction;
    // compoundInstanceMethods
    baselineOffsetInLayoutManagerGlyphIndex(in_: NSLayoutManager, glyphIndex: number): number;
    // compoundInstanceMethods
    beginLineWithGlyphAtIndex(withGlyphAt: number): void;
    // compoundInstanceMethods
    beginParagraph(): void;
    // compoundInstanceMethods
    boundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(forControlGlyphAt: number, for_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
    // compoundInstanceMethods
    characterRangeForGlyphRangeActualGlyphRange(forGlyphRange: NSRange, actualGlyphRange?: NSRange): NSRange;
    // compoundInstanceMethods
    endLineWithGlyphRange(withGlyphRange: NSRange): void;
    // compoundInstanceMethods
    endParagraph(): void;
    // compoundInstanceMethods
    getLineFragmentRectUsedRectForParagraphSeparatorGlyphRangeAtProposedOrigin(_: NSRect, usedRect: NSRect, forParagraphSeparatorGlyphRange: NSRange, atProposedOrigin: CGPoint): void;
    // compoundInstanceMethods
    getLineFragmentRectUsedRectRemainingRectForStartingGlyphAtIndexProposedRectLineSpacingParagraphSpacingBeforeParagraphSpacingAfter(_: NSRect, usedRect: NSRect, remaining: NSRect, forStartingGlyphAt: number, proposedRect: CGRect, lineSpacing: number, paragraphSpacingBefore: number, paragraphSpacingAfter: number): void;
    // compoundInstanceMethods
    glyphRangeForCharacterRangeActualCharacterRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): NSRange;
    // compoundInstanceMethods
    hyphenCharacterForGlyphAtIndex(forGlyphAt: number): number;
    // compoundInstanceMethods
    hyphenationFactorForGlyphAtIndex(forGlyphAt: number): number;
    // compoundInstanceMethods
    layoutCharactersInRangeForLayoutManagerMaximumNumberOfLineFragments(in_: NSRange, for_: NSLayoutManager, maximumNumberOfLineFragments: number): NSRange;
    // compoundInstanceMethods
    layoutGlyphsInLayoutManagerStartingAtGlyphIndexMaxNumberOfLineFragmentsNextGlyphIndex(in_: NSLayoutManager, startingAtGlyphIndex: number, maxNumberOfLineFragments: number, nextGlyphIndex: number): void;
    // compoundInstanceMethods
    layoutParagraphAtPoint(at: NSPoint): number;
    // compoundInstanceMethods
    lineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(afterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // compoundInstanceMethods
    paragraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(afterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // compoundInstanceMethods
    paragraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(beforeGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // compoundInstanceMethods
    setAttachmentSizeForGlyphRange(_: CGSize, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setBidiLevelsForGlyphRange(_: string, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setDrawsOutsideLineFragmentForGlyphRange(_: boolean, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setHardInvalidationForGlyphRange(_: boolean, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setLineFragmentRectForGlyphRangeUsedRectBaselineOffset(_: CGRect, forGlyphRange: NSRange, usedRect: CGRect, baselineOffset: number): void;
    // compoundInstanceMethods
    setLocationWithAdvancementsForStartOfGlyphRange(_: CGPoint, withAdvancements: number, forStartOfGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setNotShownAttributeForGlyphRange(_: boolean, forGlyphRange: NSRange): void;
    // compoundInstanceMethods
    setParagraphGlyphRangeSeparatorGlyphRange(_: NSRange, separatorGlyphRange: NSRange): void;
    // compoundInstanceMethods
    shouldBreakLineByHyphenatingBeforeCharacterAtIndex(byHyphenatingBeforeCharacterAt: number): boolean;
    // compoundInstanceMethods
    shouldBreakLineByWordBeforeCharacterAtIndex(byWordBeforeCharacterAt: number): boolean;
    // compoundInstanceMethods
    substituteFontForFont(for_: NSFont): NSFont;
    // compoundInstanceMethods
    textTabForGlyphLocationWritingDirectionMaxLocation(forGlyphLocation: number, writingDirection: NSWritingDirection, maxLocation: number): NSTextTab;
    // compoundInstanceMethods
    willSetLineFragmentRectForGlyphRangeUsedRectBaselineOffset(_: NSRect, forGlyphRange: NSRange, usedRect: NSRect, baselineOffset: number): void;
  }

  // export function NSUnregisterServicesProvider(name: string): void;

  // export function NSUpdateDynamicServices(): void;

  interface NSUserActivityRestoring extends NSObject {
    // instance method
    restoreUserActivityState(_: NSUserActivity): void;
  }

  // interface
  class NSUserDefaultsController extends NSController {
    // ownInstanceProperties
    appliesImmediately: boolean;
    setAppliesImmediately(_: boolean)
    // ownInstanceProperties
    defaults: UserDefaults;
    // ownInstanceProperties
    hasUnappliedChanges: boolean;
    // ownInstanceProperties
    initialValues: Map<string, any>;
    setInitialValues(_: Map<string, any>)
    // ownInstanceProperties
    values: any;
    // ownStaticProperties
    static sharedUserDefaultsController: NSUserDefaultsController;
    // compoundInstanceMethods
    static createWithDefaultsInitialValues(defaults?: UserDefaults, initialValues?: Map<string, any>): NSUserDefaultsController;
    // compoundInstanceMethods
    revert(_?: any): void;
    // compoundInstanceMethods
    revertToInitialValues(_?: any): void;
    // compoundInstanceMethods
    save(_?: any): void;
  }

  interface NSUserInterfaceCompression {
    activeCompressionOptions: NSUserInterfaceCompressionOptions;
    // instance method
    compressWithPrioritizedCompressionOptions(withPrioritizedCompressionOptions: NSUserInterfaceCompressionOptions[]): void;
    // instance method
    minimumSizeWithPrioritizedCompressionOptions(withPrioritizedCompressionOptions: NSUserInterfaceCompressionOptions[]): CGSize;
  }

  // interface
  class NSUserInterfaceCompressionOptions extends NSObject {
    // ownInstanceProperties
    isEmpty: boolean;
    // ownStaticProperties
    static breakEqualWidthsOption: NSUserInterfaceCompressionOptions;
    // ownStaticProperties
    static hideImagesOption: NSUserInterfaceCompressionOptions;
    // ownStaticProperties
    static hideTextOption: NSUserInterfaceCompressionOptions;
    // ownStaticProperties
    static reduceMetricsOption: NSUserInterfaceCompressionOptions;
    // ownStaticProperties
    static standardOptions: NSUserInterfaceCompressionOptions;
    // compoundInstanceMethods
    containsOptions(_: NSUserInterfaceCompressionOptions): boolean;
    // compoundInstanceMethods
    static createWithCompressionOptions(compressionOptions: NSSet<NSUserInterfaceCompressionOptions>): NSUserInterfaceCompressionOptions;
    // compoundInstanceMethods
    static createWithIdentifier(identifier: string): NSUserInterfaceCompressionOptions;
    // compoundInstanceMethods
    intersectsOptions(_: NSUserInterfaceCompressionOptions): boolean;
    // compoundInstanceMethods
    optionsByAddingOptions(_: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
    // compoundInstanceMethods
    optionsByRemovingOptions(_: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
  }

  interface NSUserInterfaceItemIdentification {
    identifier: string;
    setIdentifier(_: string)
  }

  interface NSUserInterfaceItemSearching extends NSObject {
    // instance method
    localizedTitlesForItem(forItem: any): string[];
    // instance method
    performActionForItem?(forItem: any): void;
    // instance method
    searchForItemsWithWithSearchResultLimitMatchedItemHandler(withSearch: string, resultLimit: number, matchedItemHandler: (p1: any[]) => void): void;
    // instance method
    showAllHelpTopicsForSearchString?(forSearch: string): void;
  }

  interface NSUserInterfaceValidations {
    // instance method
    validateUserInterfaceItem(_: NSValidatedUserInterfaceItem): boolean;
  }

  interface NSValidatedUserInterfaceItem {
    action: string;
    tag: number;
  }

  // interface
  class NSView extends NSResponder implements NSUserInterfaceItemIdentification {
    // ownInstanceProperties
    alignmentRectInsets: NSEdgeInsets;
    // ownInstanceProperties
    allowedTouchTypes: NSTouch.TouchTypeMask;
    setAllowedTouchTypes(_: NSTouch.TouchTypeMask)
    // ownInstanceProperties
    allowsVibrancy: boolean;
    // ownInstanceProperties
    alphaValue: number;
    setAlphaValue(_: number)
    // ownInstanceProperties
    autoresizesSubviews: boolean;
    setAutoresizesSubviews(_: boolean)
    // ownInstanceProperties
    autoresizingMask: NSView.AutoresizingMask;
    setAutoresizingMask(_: NSView.AutoresizingMask)
    // ownInstanceProperties
    backgroundFilters: CIFilter[];
    setBackgroundFilters(_: CIFilter[])
    // ownInstanceProperties
    baselineOffsetFromBottom: number;
    // ownInstanceProperties
    bottomAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    bounds: CGRect;
    setBounds(_: CGRect)
    // ownInstanceProperties
    boundsRotation: number;
    setBoundsRotation(_: number)
    // ownInstanceProperties
    canBecomeKeyView: boolean;
    // ownInstanceProperties
    canDrawConcurrently: boolean;
    setCanDrawConcurrently(_: boolean)
    // ownInstanceProperties
    canDrawSubviewsIntoLayer: boolean;
    setCanDrawSubviewsIntoLayer(_: boolean)
    // ownInstanceProperties
    candidateListTouchBarItem: NSCandidateListTouchBarItem<any>;
    // ownInstanceProperties
    centerXAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    centerYAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    compositingFilter: CIFilter;
    setCompositingFilter(_: CIFilter)
    // ownInstanceProperties
    constraints: NSLayoutConstraint[];
    // ownInstanceProperties
    contentFilters: CIFilter[];
    setContentFilters(_: CIFilter[])
    // ownInstanceProperties
    isDrawingFindIndicator: boolean;
    // ownInstanceProperties
    enclosingMenuItem: NSMenuItem;
    // ownInstanceProperties
    enclosingScrollView: NSScrollView;
    // ownInstanceProperties
    firstBaselineAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    firstBaselineOffsetFromTop: number;
    // ownInstanceProperties
    fittingSize: CGSize;
    // ownInstanceProperties
    isFlipped: boolean;
    // ownInstanceProperties
    focusRingMaskBounds: CGRect;
    // ownInstanceProperties
    focusRingType: NSFocusRingType;
    setFocusRingType(_: NSFocusRingType)
    // ownInstanceProperties
    frame: CGRect;
    setFrame(_: CGRect)
    // ownInstanceProperties
    frameCenterRotation: number;
    setFrameCenterRotation(_: number)
    // ownInstanceProperties
    frameRotation: number;
    setFrameRotation(_: number)
    // ownInstanceProperties
    gestureRecognizers: NSGestureRecognizer[];
    setGestureRecognizers(_: NSGestureRecognizer[])
    // ownInstanceProperties
    hasAmbiguousLayout: boolean;
    // ownInstanceProperties
    heightAdjustLimit: number;
    // ownInstanceProperties
    heightAnchor: NSLayoutDimension;
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    isHiddenOrHasHiddenAncestor: boolean;
    // ownInstanceProperties
    isHorizontalContentSizeConstraintActive: boolean;
    setHorizontalContentSizeConstraintActive(_: boolean)
    // ownInstanceProperties
    isInFullScreenMode: boolean;
    // ownInstanceProperties
    inLiveResize: boolean;
    // ownInstanceProperties
    inputContext: NSTextInputContext;
    // ownInstanceProperties
    intrinsicContentSize: CGSize;
    // ownInstanceProperties
    lastBaselineAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    lastBaselineOffsetFromBottom: number;
    // ownInstanceProperties
    layer: CALayer;
    setLayer(_: CALayer)
    // ownInstanceProperties
    layerContentsPlacement: NSView.LayerContentsPlacement;
    setLayerContentsPlacement(_: NSView.LayerContentsPlacement)
    // ownInstanceProperties
    layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy;
    setLayerContentsRedrawPolicy(_: NSView.LayerContentsRedrawPolicy)
    // ownInstanceProperties
    layerUsesCoreImageFilters: boolean;
    setLayerUsesCoreImageFilters(_: boolean)
    // ownInstanceProperties
    layoutGuides: NSLayoutGuide[];
    // ownInstanceProperties
    leadingAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    leftAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    mouseDownCanMoveWindow: boolean;
    // ownInstanceProperties
    needsDisplay: boolean;
    setNeedsDisplay(_: boolean)
    // ownInstanceProperties
    needsLayout: boolean;
    setNeedsLayout(_: boolean)
    // ownInstanceProperties
    needsPanelToBecomeKey: boolean;
    // ownInstanceProperties
    needsUpdateConstraints: boolean;
    setNeedsUpdateConstraints(_: boolean)
    // ownInstanceProperties
    nextKeyView: NSView;
    setNextKeyView(_: NSView)
    // ownInstanceProperties
    nextValidKeyView: NSView;
    // ownInstanceProperties
    isOpaque: boolean;
    // ownInstanceProperties
    opaqueAncestor: NSView;
    // ownInstanceProperties
    pageFooter: NSAttributedString;
    // ownInstanceProperties
    pageHeader: NSAttributedString;
    // ownInstanceProperties
    postsBoundsChangedNotifications: boolean;
    setPostsBoundsChangedNotifications(_: boolean)
    // ownInstanceProperties
    postsFrameChangedNotifications: boolean;
    setPostsFrameChangedNotifications(_: boolean)
    // ownInstanceProperties
    preparedContentRect: CGRect;
    setPreparedContentRect(_: CGRect)
    // ownInstanceProperties
    preservesContentDuringLiveResize: boolean;
    // ownInstanceProperties
    pressureConfiguration: NSPressureConfiguration;
    setPressureConfiguration(_: NSPressureConfiguration)
    // ownInstanceProperties
    previousKeyView: NSView;
    // ownInstanceProperties
    previousValidKeyView: NSView;
    // ownInstanceProperties
    printJobTitle: string;
    // ownInstanceProperties
    rectPreservedDuringLiveResize: CGRect;
    // ownInstanceProperties
    registeredDraggedTypes: string[];
    // ownInstanceProperties
    rightAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    isRotatedFromBase: boolean;
    // ownInstanceProperties
    isRotatedOrScaledFromBase: boolean;
    // ownInstanceProperties
    shadow: NSShadow;
    setShadow(_: NSShadow)
    // ownInstanceProperties
    subviews: NSView[];
    setSubviews(_: NSView[])
    // ownInstanceProperties
    superview: NSView;
    // ownInstanceProperties
    tag: number;
    // ownInstanceProperties
    toolTip: string;
    setToolTip(_: string)
    // ownInstanceProperties
    topAnchor: NSLayoutYAxisAnchor;
    // ownInstanceProperties
    trackingAreas: NSTrackingArea[];
    // ownInstanceProperties
    trailingAnchor: NSLayoutXAxisAnchor;
    // ownInstanceProperties
    translatesAutoresizingMaskIntoConstraints: boolean;
    setTranslatesAutoresizingMaskIntoConstraints(_: boolean)
    // ownInstanceProperties
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection)
    // ownInstanceProperties
    isVerticalContentSizeConstraintActive: boolean;
    setVerticalContentSizeConstraintActive(_: boolean)
    // ownInstanceProperties
    visibleRect: CGRect;
    // ownInstanceProperties
    wantsDefaultClipping: boolean;
    // ownInstanceProperties
    wantsLayer: boolean;
    setWantsLayer(_: boolean)
    // ownInstanceProperties
    wantsRestingTouches: boolean;
    setWantsRestingTouches(_: boolean)
    // ownInstanceProperties
    wantsUpdateLayer: boolean;
    // ownInstanceProperties
    widthAdjustLimit: number;
    // ownInstanceProperties
    widthAnchor: NSLayoutDimension;
    // ownInstanceProperties
    window: NSWindow;
    // ownStaticProperties
    static isCompatibleWithResponsiveScrolling: boolean;
    // ownStaticProperties
    static defaultFocusRingType: NSFocusRingType;
    // ownStaticProperties
    static defaultMenu: NSMenu;
    // ownStaticProperties
    static focusView: NSView;
    // ownStaticProperties
    static requiresConstraintBasedLayout: boolean;
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    acceptsFirstMouse(for_?: NSEvent): boolean;
    // compoundInstanceMethods
    addConstraint(_: NSLayoutConstraint): void;
    // compoundInstanceMethods
    addConstraints(_: NSLayoutConstraint[]): void;
    // compoundInstanceMethods
    addCursorRectCursor(_: CGRect, cursor: NSCursor): void;
    // compoundInstanceMethods
    addGestureRecognizer(_: NSGestureRecognizer): void;
    // compoundInstanceMethods
    addLayoutGuide(_: NSLayoutGuide): void;
    // compoundInstanceMethods
    addSubview(_: NSView): void;
    // compoundInstanceMethods
    addSubviewPositionedRelativeTo(_: NSView, positioned: NSWindow.OrderingMode, relativeTo?: NSView): void;
    // compoundInstanceMethods
    addToolTipRectOwnerUserData(_: CGRect, owner: any, userData?: any): number;
    // compoundInstanceMethods
    addTrackingArea(_: NSTrackingArea): void;
    // compoundInstanceMethods
    addTrackingRectOwnerUserDataAssumeInside(_: CGRect, owner: any, userData?: any, assumeInside?: boolean): number;
    // compoundInstanceMethods
    adjustPageHeightNewTopBottomLimit(_: number, top: number, bottom: number, limit: number): void;
    // compoundInstanceMethods
    adjustPageWidthNewLeftRightLimit(_: number, left: number, right: number, limit: number): void;
    // compoundInstanceMethods
    adjustScroll(_: CGRect): CGRect;
    // compoundInstanceMethods
    alignmentRectForFrame(forFrame: CGRect): CGRect;
    // compoundInstanceMethods
    ancestorSharedWithView(with_: NSView): NSView;
    // compoundInstanceMethods
    autoscroll(with_: NSEvent): boolean;
    // compoundInstanceMethods
    backingAlignedRectOptions(_: CGRect, options: AlignmentOptions): CGRect;
    // compoundInstanceMethods
    beginDocument(): void;
    // compoundInstanceMethods
    beginDraggingSessionWithItemsEventSource(with_: NSDraggingItem[], event: NSEvent, source: NSDraggingSource): NSDraggingSession;
    // compoundInstanceMethods
    beginPageInRectAtPlacement(in_: CGRect, atPlacement: CGPoint): void;
    // compoundInstanceMethods
    bitmapImageRepForCachingDisplayInRect(in_: CGRect): NSBitmapImageRep;
    // compoundInstanceMethods
    cacheDisplayInRectToBitmapImageRep(in_: CGRect, to: NSBitmapImageRep): void;
    // compoundInstanceMethods
    centerScanRect(_: CGRect): CGRect;
    // compoundInstanceMethods
    constraintsAffectingLayoutForOrientation(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint[];
    // compoundInstanceMethods
    contentCompressionResistancePriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    // compoundInstanceMethods
    contentHuggingPriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    // compoundInstanceMethods
    convertPointFromView(_: CGPoint, from?: NSView): CGPoint;
    // compoundInstanceMethods
    convertPointToView(_: CGPoint, to?: NSView): CGPoint;
    // compoundInstanceMethods
    convertPointFromBacking(_: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertPointFromLayer(_: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertPointToBacking(_: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertPointToLayer(_: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertRectFromView(_: CGRect, from?: NSView): CGRect;
    // compoundInstanceMethods
    convertRectToView(_: CGRect, to?: NSView): CGRect;
    // compoundInstanceMethods
    convertRectFromBacking(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertRectFromLayer(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertRectToBacking(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertRectToLayer(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertSizeFromView(_: CGSize, from?: NSView): CGSize;
    // compoundInstanceMethods
    convertSizeToView(_: CGSize, to?: NSView): CGSize;
    // compoundInstanceMethods
    convertSizeFromBacking(_: CGSize): CGSize;
    // compoundInstanceMethods
    convertSizeFromLayer(_: CGSize): CGSize;
    // compoundInstanceMethods
    convertSizeToBacking(_: CGSize): CGSize;
    // compoundInstanceMethods
    convertSizeToLayer(_: CGSize): CGSize;
    // compoundInstanceMethods
    dataWithEPSInsideRect(inside: CGRect): NSData;
    // compoundInstanceMethods
    dataWithPDFInsideRect(inside: CGRect): NSData;
    // compoundInstanceMethods
    didAddSubview(_: NSView): void;
    // compoundInstanceMethods
    didCloseMenuWithEvent(_: NSMenu, with_?: NSEvent): void;
    // compoundInstanceMethods
    discardCursorRects(): void;
    // compoundInstanceMethods
    display(): void;
    // compoundInstanceMethods
    displayIfNeeded(): void;
    // compoundInstanceMethods
    displayIfNeededIgnoringOpacity(): void;
    // compoundInstanceMethods
    displayIfNeededInRect(_: CGRect): void;
    // compoundInstanceMethods
    displayIfNeededInRectIgnoringOpacity(_: CGRect): void;
    // compoundInstanceMethods
    displayRect(_: CGRect): void;
    // compoundInstanceMethods
    displayRectIgnoringOpacity(_: CGRect): void;
    // compoundInstanceMethods
    displayRectIgnoringOpacityInContext(_: CGRect, in_: NSGraphicsContext): void;
    // compoundInstanceMethods
    drawFocusRingMask(): void;
    // compoundInstanceMethods
    drawPageBorderWithSize(with_: CGSize): void;
    // compoundInstanceMethods
    drawRect(_: CGRect): void;
    // compoundInstanceMethods
    endDocument(): void;
    // compoundInstanceMethods
    endPage(): void;
    // compoundInstanceMethods
    enterFullScreenModeWithOptions(_: NSScreen, withOptions?: Map<string, any>): boolean;
    // compoundInstanceMethods
    exerciseAmbiguityInLayout(): void;
    // compoundInstanceMethods
    exitFullScreenModeWithOptions(options?: Map<string, any>): void;
    // compoundInstanceMethods
    frameForAlignmentRect(forAlignmentRect: CGRect): CGRect;
    // compoundInstanceMethods
    getRectsBeingDrawnCount(_?: NSRect, count?: number): void;
    // compoundInstanceMethods
    getRectsExposedDuringLiveResizeCount(_: NSRect, count: number): void;
    // compoundInstanceMethods
    hitTest(_: CGPoint): NSView;
    // compoundInstanceMethods
    static createWithFrame(frame: CGRect): NSView;
    // compoundInstanceMethods
    invalidateIntrinsicContentSize(): void;
    // compoundInstanceMethods
    isDescendantOf(of: NSView): boolean;
    // compoundInstanceMethods
    knowsPageRange(_: NSRange): boolean;
    // compoundInstanceMethods
    layout(): void;
    // compoundInstanceMethods
    layoutSubtreeIfNeeded(): void;
    // compoundInstanceMethods
    locationOfPrintRect(_: CGRect): CGPoint;
    // compoundInstanceMethods
    makeBackingLayer(): CALayer;
    // compoundInstanceMethods
    menuForEvent(for_: NSEvent): NSMenu;
    // compoundInstanceMethods
    mouseInRect(_: CGPoint, in_: CGRect): boolean;
    // compoundInstanceMethods
    needsToDrawRect(_: CGRect): boolean;
    // compoundInstanceMethods
    noteFocusRingMaskChanged(): void;
    // compoundInstanceMethods
    prepareContentInRect(in_: CGRect): void;
    // compoundInstanceMethods
    prepareForReuse(): void;
    // compoundInstanceMethods
    print(_?: any): void;
    // compoundInstanceMethods
    rectForPage(_: number): CGRect;
    // compoundInstanceMethods
    rectForSmartMagnificationAtPointInRect(at: CGPoint, in_: CGRect): CGRect;
    // compoundInstanceMethods
    reflectScrolledClipView(_: NSClipView): void;
    // compoundInstanceMethods
    registerForDraggedTypes(_: string[]): void;
    // compoundInstanceMethods
    removeAllToolTips(): void;
    // compoundInstanceMethods
    removeConstraint(_: NSLayoutConstraint): void;
    // compoundInstanceMethods
    removeConstraints(_: NSLayoutConstraint[]): void;
    // compoundInstanceMethods
    removeCursorRectCursor(_: CGRect, cursor: NSCursor): void;
    // compoundInstanceMethods
    removeFromSuperview(): void;
    // compoundInstanceMethods
    removeFromSuperviewWithoutNeedingDisplay(): void;
    // compoundInstanceMethods
    removeGestureRecognizer(_: NSGestureRecognizer): void;
    // compoundInstanceMethods
    removeLayoutGuide(_: NSLayoutGuide): void;
    // compoundInstanceMethods
    removeToolTip(_: number): void;
    // compoundInstanceMethods
    removeTrackingArea(_: NSTrackingArea): void;
    // compoundInstanceMethods
    removeTrackingRect(_: number): void;
    // compoundInstanceMethods
    replaceSubviewWith(_: NSView, with_: NSView): void;
    // compoundInstanceMethods
    resetCursorRects(): void;
    // compoundInstanceMethods
    resizeSubviewsWithOldSize(withOldSize: CGSize): void;
    // compoundInstanceMethods
    resizeWithOldSuperviewSize(withOldSuperviewSize: CGSize): void;
    // compoundInstanceMethods
    rotateByAngle(byDegrees: number): void;
    // compoundInstanceMethods
    rulerViewDidAddMarker(_: NSRulerView, didAdd: NSRulerMarker): void;
    // compoundInstanceMethods
    rulerViewDidMoveMarker(_: NSRulerView, didMove: NSRulerMarker): void;
    // compoundInstanceMethods
    rulerViewDidRemoveMarker(_: NSRulerView, didRemove: NSRulerMarker): void;
    // compoundInstanceMethods
    rulerViewHandleMouseDown(_: NSRulerView, handleMouseDownWith: NSEvent): void;
    // compoundInstanceMethods
    rulerViewLocationForPoint(_: NSRulerView, locationFor: CGPoint): number;
    // compoundInstanceMethods
    rulerViewPointForLocation(_: NSRulerView, pointForLocation: number): CGPoint;
    // compoundInstanceMethods
    rulerViewShouldAddMarker(_: NSRulerView, shouldAdd: NSRulerMarker): boolean;
    // compoundInstanceMethods
    rulerViewShouldMoveMarker(_: NSRulerView, shouldMove: NSRulerMarker): boolean;
    // compoundInstanceMethods
    rulerViewShouldRemoveMarker(_: NSRulerView, shouldRemove: NSRulerMarker): boolean;
    // compoundInstanceMethods
    rulerViewWillAddMarkerAtLocation(_: NSRulerView, willAdd: NSRulerMarker, atLocation: number): number;
    // compoundInstanceMethods
    rulerViewWillMoveMarkerToLocation(_: NSRulerView, willMove: NSRulerMarker, toLocation: number): number;
    // compoundInstanceMethods
    rulerViewWillSetClientView(_: NSRulerView, willSetClientView: NSView): void;
    // compoundInstanceMethods
    scaleUnitSquareToSize(to: CGSize): void;
    // compoundInstanceMethods
    scrollClipViewToPoint(_: NSClipView, to: CGPoint): void;
    // compoundInstanceMethods
    scrollPoint(_: CGPoint): void;
    // compoundInstanceMethods
    scrollRectToVisible(_: CGRect): boolean;
    // compoundInstanceMethods
    setBoundsOrigin(_: CGPoint): void;
    // compoundInstanceMethods
    setBoundsSize(_: CGSize): void;
    // compoundInstanceMethods
    setContentCompressionResistancePriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    // compoundInstanceMethods
    setContentHuggingPriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    // compoundInstanceMethods
    setFrameOrigin(_: CGPoint): void;
    // compoundInstanceMethods
    setFrameSize(_: CGSize): void;
    // compoundInstanceMethods
    setKeyboardFocusRingNeedsDisplayInRect(_: CGRect): void;
    // compoundInstanceMethods
    setNeedsDisplayInRect(_: CGRect): void;
    // compoundInstanceMethods
    shouldDelayWindowOrderingForEvent(for_: NSEvent): boolean;
    // compoundInstanceMethods
    showDefinitionForAttributedStringAtPoint(for_?: NSAttributedString, at?: CGPoint): void;
    // compoundInstanceMethods
    showDefinitionForRangeOptionsBaselineOriginProvider(for_?: NSAttributedString, range?: NSRange, options?: Map<string, any>, baselineOriginProvider?: (p1: NSRange) => CGPoint): void;
    // compoundInstanceMethods
    sortSubviewsContext(_?: (p1: NSView, p2: NSView, p3: any) => ComparisonResult, context?: any): void;
    // compoundInstanceMethods
    translateOriginToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    translateRectsNeedingDisplayInRectBy(in_: CGRect, by: CGSize): void;
    // compoundInstanceMethods
    unregisterDraggedTypes(): void;
    // compoundInstanceMethods
    updateConstraints(): void;
    // compoundInstanceMethods
    updateConstraintsForSubtreeIfNeeded(): void;
    // compoundInstanceMethods
    updateLayer(): void;
    // compoundInstanceMethods
    updateTrackingAreas(): void;
    // compoundInstanceMethods
    viewDidChangeBackingProperties(): void;
    // compoundInstanceMethods
    viewDidChangeEffectiveAppearance(): void;
    // compoundInstanceMethods
    viewDidEndLiveResize(): void;
    // compoundInstanceMethods
    viewDidHide(): void;
    // compoundInstanceMethods
    viewDidMoveToSuperview(): void;
    // compoundInstanceMethods
    viewDidMoveToWindow(): void;
    // compoundInstanceMethods
    viewDidUnhide(): void;
    // compoundInstanceMethods
    viewWillDraw(): void;
    // compoundInstanceMethods
    viewWillMoveToSuperview(toSuperview?: NSView): void;
    // compoundInstanceMethods
    viewWillMoveToWindow(toWindow?: NSWindow): void;
    // compoundInstanceMethods
    viewWillStartLiveResize(): void;
    // compoundInstanceMethods
    viewWithTag(_: number): NSView;
    // compoundInstanceMethods
    willOpenMenuWithEvent(_: NSMenu, with_: NSEvent): void;
    // compoundInstanceMethods
    willRemoveSubview(_: NSView): void;
    // compoundInstanceMethods
    writeEPSInsideRectToPasteboard(inside: CGRect, to: NSPasteboard): void;
    // compoundInstanceMethods
    writePDFInsideRectToPasteboard(inside: CGRect, to: NSPasteboard): void;
  }

  // interface
  class NSViewAnimation extends NSAnimation {
    // ownInstanceProperties
    viewAnimations: Map<string, any>[];
    setViewAnimations(_: Map<string, any>[])
    // compoundInstanceMethods
    static createWithViewAnimations(viewAnimations: Map<string, any>[]): NSViewAnimation;
  }

  // interface
  class NSViewController extends NSResponder implements NSUserInterfaceItemIdentification {
    // ownInstanceProperties
    childViewControllers: NSViewController[];
    setChildViewControllers(_: NSViewController[])
    // ownInstanceProperties
    extensionContext: NSExtensionContext;
    // ownInstanceProperties
    nibBundle: Bundle;
    // ownInstanceProperties
    nibName: string;
    // ownInstanceProperties
    parentViewController: NSViewController;
    // ownInstanceProperties
    preferredContentSize: CGSize;
    setPreferredContentSize(_: CGSize)
    // ownInstanceProperties
    preferredMaximumSize: CGSize;
    // ownInstanceProperties
    preferredMinimumSize: CGSize;
    // ownInstanceProperties
    preferredScreenOrigin: CGPoint;
    setPreferredScreenOrigin(_: CGPoint)
    // ownInstanceProperties
    presentedViewControllers: NSViewController[];
    // ownInstanceProperties
    presentingViewController: NSViewController;
    // ownInstanceProperties
    representedObject: any;
    setRepresentedObject(_: any)
    // ownInstanceProperties
    sourceItemView: NSView;
    setSourceItemView(_: NSView)
    // ownInstanceProperties
    storyboard: NSStoryboard;
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    view: NSView;
    setView(_: NSView)
    // ownInstanceProperties
    isViewLoaded: boolean;
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    addChildViewController(_: NSViewController): void;
    // compoundInstanceMethods
    dismissController(_?: any): void;
    // compoundInstanceMethods
    dismissViewController(_: NSViewController): void;
    // compoundInstanceMethods
    static createWithNibNameBundle(nibName?: string, bundle?: Bundle): NSViewController;
    // compoundInstanceMethods
    insertChildViewControllerAtIndex(_: NSViewController, at: number): void;
    // compoundInstanceMethods
    loadView(): void;
    // compoundInstanceMethods
    preferredContentSizeDidChangeForViewController(for_: NSViewController): void;
    // compoundInstanceMethods
    presentViewControllerAnimator(_: NSViewController, animator: NSViewControllerPresentationAnimator): void;
    // compoundInstanceMethods
    presentViewControllerAsPopoverRelativeToRectOfViewPreferredEdgeBehavior(_: NSViewController, asPopoverRelativeTo: CGRect, of: NSView, preferredEdge: NSRectEdge, behavior: NSPopover.Behavior): void;
    // compoundInstanceMethods
    presentViewControllerAsModalWindow(_: NSViewController): void;
    // compoundInstanceMethods
    presentViewControllerAsSheet(_: NSViewController): void;
    // compoundInstanceMethods
    removeChildViewControllerAtIndex(at: number): void;
    // compoundInstanceMethods
    removeFromParentViewController(): void;
    // compoundInstanceMethods
    transitionWithFromToOptionsCompletionHandler(from: NSViewController, to: NSViewController, options: NSViewController.TransitionOptions, completionHandler?: () => void): void;
    // compoundInstanceMethods
    updateViewConstraints(): void;
    // compoundInstanceMethods
    viewDidAppear(): void;
    // compoundInstanceMethods
    viewDidDisappear(): void;
    // compoundInstanceMethods
    viewDidLayout(): void;
    // compoundInstanceMethods
    viewDidLoad(): void;
    // compoundInstanceMethods
    viewWillAppear(): void;
    // compoundInstanceMethods
    viewWillDisappear(): void;
    // compoundInstanceMethods
    viewWillLayout(): void;
    // compoundInstanceMethods
    viewWillTransitionToSize(to: CGSize): void;
  }

  interface NSViewControllerPresentationAnimator extends NSObject {
    // instance method
    animateDismissalOfViewControllerFromViewController(of: NSViewController, from: NSViewController): void;
    // instance method
    animatePresentationOfViewControllerFromViewController(of: NSViewController, from: NSViewController): void;
  }

  interface NSViewLayerContentScaleDelegate extends NSObject {
    // instance method
    layerShouldInheritContentsScaleFromWindow?(_: CALayer, shouldInheritContentsScale: number, from: NSWindow): boolean;
  }

  interface NSViewToolTipOwner extends NSObject {
    // instance method
    viewStringForToolTipPointUserData(_: NSView, stringForToolTip: number, point: CGPoint, userData?: any): string;
  }

  // interface
  class NSVisualEffectView extends NSView {
    // ownInstanceProperties
    blendingMode: NSVisualEffectView.BlendingMode;
    setBlendingMode(_: NSVisualEffectView.BlendingMode)
    // ownInstanceProperties
    isEmphasized: boolean;
    setEmphasized(_: boolean)
    // ownInstanceProperties
    interiorBackgroundStyle: NSView.BackgroundStyle;
    // ownInstanceProperties
    maskImage: NSImage;
    setMaskImage(_: NSImage)
    // ownInstanceProperties
    material: NSVisualEffectView.Material;
    setMaterial(_: NSVisualEffectView.Material)
    // ownInstanceProperties
    state: NSVisualEffectView.State;
    setState(_: NSVisualEffectView.State)
  }

  // interface
  class NSWindow extends NSResponder implements NSUserInterfaceItemIdentification {
    // compoundStaticMethods
    static contentRectForFrameRectStyleMask(forFrameRect: CGRect, styleMask: NSWindow.StyleMask): CGRect;
    // compoundStaticMethods
    static frameRectForContentRectStyleMask(forContentRect: CGRect, styleMask: NSWindow.StyleMask): CGRect;
    // compoundStaticMethods
    static minFrameWidthWithTitleStyleMask(withTitle: string, styleMask: NSWindow.StyleMask): number;
    // compoundStaticMethods
    static removeFrameUsingName(usingName: string): void;
    // compoundStaticMethods
    static standardWindowButtonForStyleMask(_: NSWindow.ButtonType, for_: NSWindow.StyleMask): NSButton;
    // compoundStaticMethods
    static windowNumberAtPointBelowWindowWithWindowNumber(at: CGPoint, belowWindowWithWindowNumber: number): number;
    // compoundStaticMethods
    static windowNumbersWithOptions(options: NSWindow.NumberListOptions): number[];
    // ownInstanceProperties
    acceptsMouseMovedEvents: boolean;
    setAcceptsMouseMovedEvents(_: boolean)
    // ownInstanceProperties
    allowsConcurrentViewDrawing: boolean;
    setAllowsConcurrentViewDrawing(_: boolean)
    // ownInstanceProperties
    allowsToolTipsWhenApplicationIsInactive: boolean;
    setAllowsToolTipsWhenApplicationIsInactive(_: boolean)
    // ownInstanceProperties
    alphaValue: number;
    setAlphaValue(_: number)
    // ownInstanceProperties
    animationBehavior: NSWindow.AnimationBehavior;
    setAnimationBehavior(_: NSWindow.AnimationBehavior)
    // ownInstanceProperties
    appearanceSource: NSObject;
    setAppearanceSource(_: NSObject)
    // ownInstanceProperties
    areCursorRectsEnabled: boolean;
    // ownInstanceProperties
    aspectRatio: CGSize;
    setAspectRatio(_: CGSize)
    // ownInstanceProperties
    attachedSheet: NSWindow;
    // ownInstanceProperties
    autorecalculatesKeyViewLoop: boolean;
    setAutorecalculatesKeyViewLoop(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    backingScaleFactor: number;
    // ownInstanceProperties
    backingType: NSWindow.BackingStoreType;
    setBackingType(_: NSWindow.BackingStoreType)
    // ownInstanceProperties
    canBecomeKeyWindow: boolean;
    // ownInstanceProperties
    canBecomeMainWindow: boolean;
    // ownInstanceProperties
    canBecomeVisibleWithoutLogin: boolean;
    setCanBecomeVisibleWithoutLogin(_: boolean)
    // ownInstanceProperties
    canHide: boolean;
    setCanHide(_: boolean)
    // ownInstanceProperties
    childWindows: NSWindow[];
    // ownInstanceProperties
    collectionBehavior: NSWindow.CollectionBehavior;
    setCollectionBehavior(_: NSWindow.CollectionBehavior)
    // ownInstanceProperties
    colorSpace: NSColorSpace;
    setColorSpace(_: NSColorSpace)
    // ownInstanceProperties
    contentAspectRatio: CGSize;
    setContentAspectRatio(_: CGSize)
    // ownInstanceProperties
    contentLayoutGuide: any;
    // ownInstanceProperties
    contentLayoutRect: CGRect;
    // ownInstanceProperties
    contentMaxSize: CGSize;
    setContentMaxSize(_: CGSize)
    // ownInstanceProperties
    contentMinSize: CGSize;
    setContentMinSize(_: CGSize)
    // ownInstanceProperties
    contentResizeIncrements: CGSize;
    setContentResizeIncrements(_: CGSize)
    // ownInstanceProperties
    contentView: NSView;
    setContentView(_: NSView)
    // ownInstanceProperties
    contentViewController: NSViewController;
    setContentViewController(_: NSViewController)
    // ownInstanceProperties
    currentEvent: NSEvent;
    // ownInstanceProperties
    deepestScreen: NSScreen;
    // ownInstanceProperties
    defaultButtonCell: NSButtonCell;
    setDefaultButtonCell(_: NSButtonCell)
    // ownInstanceProperties
    delegate: NSWindowDelegate;
    setDelegate(_: NSWindowDelegate)
    // ownInstanceProperties
    depthLimit: NSWindow.Depth;
    setDepthLimit(_: NSWindow.Depth)
    // ownInstanceProperties
    deviceDescription: Map<string, any>;
    // ownInstanceProperties
    displaysWhenScreenProfileChanges: boolean;
    setDisplaysWhenScreenProfileChanges(_: boolean)
    // ownInstanceProperties
    dockTile: NSDockTile;
    // ownInstanceProperties
    isDocumentEdited: boolean;
    setDocumentEdited(_: boolean)
    // ownInstanceProperties
    isExcludedFromWindowsMenu: boolean;
    setExcludedFromWindowsMenu(_: boolean)
    // ownInstanceProperties
    firstResponder: NSResponder;
    // ownInstanceProperties
    isFloatingPanel: boolean;
    // ownInstanceProperties
    frame: CGRect;
    // ownInstanceProperties
    frameAutosaveName: string;
    // ownInstanceProperties
    hasCloseBox: boolean;
    // ownInstanceProperties
    hasDynamicDepthLimit: boolean;
    // ownInstanceProperties
    hasShadow: boolean;
    setHasShadow(_: boolean)
    // ownInstanceProperties
    hasTitleBar: boolean;
    // ownInstanceProperties
    hidesOnDeactivate: boolean;
    setHidesOnDeactivate(_: boolean)
    // ownInstanceProperties
    ignoresMouseEvents: boolean;
    setIgnoresMouseEvents(_: boolean)
    // ownInstanceProperties
    inLiveResize: boolean;
    // ownInstanceProperties
    initialFirstResponder: NSView;
    setInitialFirstResponder(_: NSView)
    // ownInstanceProperties
    keyViewSelectionDirection: NSWindow.SelectionDirection;
    // ownInstanceProperties
    isKeyWindow: boolean;
    // ownInstanceProperties
    level: number;
    setLevel(_: number)
    // ownInstanceProperties
    isMainWindow: boolean;
    // ownInstanceProperties
    maxFullScreenContentSize: CGSize;
    setMaxFullScreenContentSize(_: CGSize)
    // ownInstanceProperties
    maxSize: CGSize;
    setMaxSize(_: CGSize)
    // ownInstanceProperties
    minFullScreenContentSize: CGSize;
    setMinFullScreenContentSize(_: CGSize)
    // ownInstanceProperties
    minSize: CGSize;
    setMinSize(_: CGSize)
    // ownInstanceProperties
    isMiniaturizable: boolean;
    // ownInstanceProperties
    isMiniaturized: boolean;
    // ownInstanceProperties
    miniwindowImage: NSImage;
    setMiniwindowImage(_: NSImage)
    // ownInstanceProperties
    miniwindowTitle: string;
    setMiniwindowTitle(_: string)
    // ownInstanceProperties
    isModalPanel: boolean;
    // ownInstanceProperties
    mouseLocationOutsideOfEventStream: CGPoint;
    // ownInstanceProperties
    isMovable: boolean;
    setMovable(_: boolean)
    // ownInstanceProperties
    isMovableByWindowBackground: boolean;
    setMovableByWindowBackground(_: boolean)
    // ownInstanceProperties
    occlusionState: NSWindow.OcclusionState;
    // ownInstanceProperties
    isOnActiveSpace: boolean;
    // ownInstanceProperties
    isOpaque: boolean;
    setOpaque(_: boolean)
    // ownInstanceProperties
    orderedIndex: number;
    setOrderedIndex(_: number)
    // ownInstanceProperties
    parentWindow: NSWindow;
    setParentWindow(_: NSWindow)
    // ownInstanceProperties
    preservesContentDuringLiveResize: boolean;
    setPreservesContentDuringLiveResize(_: boolean)
    // ownInstanceProperties
    preventsApplicationTerminationWhenModal: boolean;
    setPreventsApplicationTerminationWhenModal(_: boolean)
    // ownInstanceProperties
    isReleasedWhenClosed: boolean;
    setReleasedWhenClosed(_: boolean)
    // ownInstanceProperties
    representedFilename: string;
    setRepresentedFilename(_: string)
    // ownInstanceProperties
    representedURL: NSURL;
    setRepresentedURL(_: NSURL)
    // ownInstanceProperties
    isResizable: boolean;
    // ownInstanceProperties
    resizeFlags: NSEvent.ModifierFlags;
    // ownInstanceProperties
    resizeIncrements: CGSize;
    setResizeIncrements(_: CGSize)
    // ownInstanceProperties
    isRestorable: boolean;
    setRestorable(_: boolean)
    // ownInstanceProperties
    restorationClass: typeof NSObject;
    setRestorationClass(_: typeof NSObject)
    // ownInstanceProperties
    screen: NSScreen;
    // ownInstanceProperties
    sharingType: NSWindow.SharingType;
    setSharingType(_: NSWindow.SharingType)
    // ownInstanceProperties
    isSheet: boolean;
    // ownInstanceProperties
    sheetParent: NSWindow;
    // ownInstanceProperties
    sheets: NSWindow[];
    // ownInstanceProperties
    showsResizeIndicator: boolean;
    setShowsResizeIndicator(_: boolean)
    // ownInstanceProperties
    showsToolbarButton: boolean;
    setShowsToolbarButton(_: boolean)
    // ownInstanceProperties
    stringWithSavedFrame: string;
    // ownInstanceProperties
    styleMask: NSWindow.StyleMask;
    setStyleMask(_: NSWindow.StyleMask)
    // ownInstanceProperties
    tab: NSWindowTab;
    // ownInstanceProperties
    tabGroup: NSWindowTabGroup;
    // ownInstanceProperties
    tabbedWindows: NSWindow[];
    // ownInstanceProperties
    tabbingIdentifier: string;
    setTabbingIdentifier(_: string)
    // ownInstanceProperties
    tabbingMode: NSWindow.TabbingMode;
    setTabbingMode(_: NSWindow.TabbingMode)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    titleVisibility: NSWindow.TitleVisibility;
    setTitleVisibility(_: NSWindow.TitleVisibility)
    // ownInstanceProperties
    titlebarAccessoryViewControllers: NSTitlebarAccessoryViewController[];
    setTitlebarAccessoryViewControllers(_: NSTitlebarAccessoryViewController[])
    // ownInstanceProperties
    titlebarAppearsTransparent: boolean;
    setTitlebarAppearsTransparent(_: boolean)
    // ownInstanceProperties
    toolbar: NSToolbar;
    setToolbar(_: NSToolbar)
    // ownInstanceProperties
    viewsNeedDisplay: boolean;
    setViewsNeedDisplay(_: boolean)
    // ownInstanceProperties
    isVisible: boolean;
    // ownInstanceProperties
    windowController: NSWindowController;
    setWindowController(_: NSWindowController)
    // ownInstanceProperties
    windowNumber: number;
    // ownInstanceProperties
    windowRef: any;
    // ownInstanceProperties
    windowTitlebarLayoutDirection: NSUserInterfaceLayoutDirection;
    // ownInstanceProperties
    worksWhenModal: boolean;
    // ownInstanceProperties
    isZoomable: boolean;
    // ownInstanceProperties
    isZoomed: boolean;
    // ownStaticProperties
    static allowsAutomaticWindowTabbing: boolean;
    setAllowsAutomaticWindowTabbing(_: boolean)
    // ownStaticProperties
    static defaultDepthLimit: NSWindow.Depth;
    // ownStaticProperties
    static userTabbingPreference: NSWindow.UserTabbingPreference;
    // protocolInheritedInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // compoundInstanceMethods
    addChildWindowOrdered(_: NSWindow, ordered: NSWindow.OrderingMode): void;
    // compoundInstanceMethods
    addTabbedWindowOrdered(_: NSWindow, ordered: NSWindow.OrderingMode): void;
    // compoundInstanceMethods
    addTitlebarAccessoryViewController(_: NSTitlebarAccessoryViewController): void;
    // compoundInstanceMethods
    anchorAttributeForOrientation(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint.Attribute;
    // compoundInstanceMethods
    animationResizeTime(_: CGRect): number;
    // compoundInstanceMethods
    autorecalculatesContentBorderThicknessForEdge(for_: NSRectEdge): boolean;
    // compoundInstanceMethods
    backingAlignedRectOptions(_: CGRect, options: AlignmentOptions): CGRect;
    // compoundInstanceMethods
    becomeKeyWindow(): void;
    // compoundInstanceMethods
    becomeMainWindow(): void;
    // compoundInstanceMethods
    beginCriticalSheetWithCompletionHandler(_: NSWindow, completionHandler?: (p1: number) => void): void;
    // compoundInstanceMethods
    beginSheetWithCompletionHandler(_: NSWindow, completionHandler?: (p1: number) => void): void;
    // compoundInstanceMethods
    canRepresentDisplayGamut(_: NSDisplayGamut): boolean;
    // compoundInstanceMethods
    cascadeTopLeftFromPoint(from: CGPoint): CGPoint;
    // compoundInstanceMethods
    center(): void;
    // compoundInstanceMethods
    close(): void;
    // compoundInstanceMethods
    constrainFrameRectToScreen(_: CGRect, to?: NSScreen): CGRect;
    // compoundInstanceMethods
    contentBorderThicknessForEdge(for_: NSRectEdge): number;
    // compoundInstanceMethods
    contentRectForFrameRect(forFrameRect: CGRect): CGRect;
    // compoundInstanceMethods
    convertPointFromBacking(_: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertPointFromScreen(fromScreen: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertPointToBacking(_: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertPointToScreen(toScreen: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertRectFromBacking(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertRectFromScreen(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertRectToBacking(_: CGRect): CGRect;
    // compoundInstanceMethods
    convertRectToScreen(_: CGRect): CGRect;
    // compoundInstanceMethods
    dataWithEPSInsideRect(inside: CGRect): NSData;
    // compoundInstanceMethods
    dataWithPDFInsideRect(inside: CGRect): NSData;
    // compoundInstanceMethods
    deminiaturize(_?: any): void;
    // compoundInstanceMethods
    disableCursorRects(): void;
    // compoundInstanceMethods
    disableKeyEquivalentForDefaultButtonCell(): void;
    // compoundInstanceMethods
    disableScreenUpdatesUntilFlush(): void;
    // compoundInstanceMethods
    disableSnapshotRestoration(): void;
    // compoundInstanceMethods
    discardCursorRects(): void;
    // compoundInstanceMethods
    discardEventsMatchingMaskBeforeEvent(matching: NSEvent.EventTypeMask, before?: NSEvent): void;
    // compoundInstanceMethods
    display(): void;
    // compoundInstanceMethods
    displayIfNeeded(): void;
    // compoundInstanceMethods
    dragImageAtOffsetEventPasteboardSourceSlideBack(_: NSImage, at: CGPoint, offset: CGSize, event: NSEvent, pasteboard: NSPasteboard, source: any, slideBack: boolean): void;
    // compoundInstanceMethods
    enableCursorRects(): void;
    // compoundInstanceMethods
    enableKeyEquivalentForDefaultButtonCell(): void;
    // compoundInstanceMethods
    enableSnapshotRestoration(): void;
    // compoundInstanceMethods
    endEditingFor(for_?: any): void;
    // compoundInstanceMethods
    endSheet(_: NSWindow): void;
    // compoundInstanceMethods
    endSheetReturnCode(_: NSWindow, returnCode: number): void;
    // compoundInstanceMethods
    fieldEditorForObject(_: boolean, for_?: any): NSText;
    // compoundInstanceMethods
    frameRectForContentRect(forContentRect: CGRect): CGRect;
    // compoundInstanceMethods
    handleCloseScriptCommand(_: NSCloseCommand): any;
    // compoundInstanceMethods
    handlePrintScriptCommand(_: NSScriptCommand): any;
    // compoundInstanceMethods
    handleSaveScriptCommand(_: NSScriptCommand): any;
    // compoundInstanceMethods
    static createWithContentRectStyleMaskBackingDefer(contentRect: CGRect, styleMask: NSWindow.StyleMask, backing: NSWindow.BackingStoreType, defer: boolean): NSWindow;
    // compoundInstanceMethods
    static createWithContentRectStyleMaskBackingDeferScreen(contentRect: CGRect, styleMask: NSWindow.StyleMask, backing: NSWindow.BackingStoreType, defer: boolean, screen?: NSScreen): NSWindow;
    // compoundInstanceMethods
    static createWithWindowRef(windowRef: any): NSWindow;
    // compoundInstanceMethods
    insertTitlebarAccessoryViewControllerAtIndex(_: NSTitlebarAccessoryViewController, at: number): void;
    // compoundInstanceMethods
    invalidateCursorRectsForView(for_: NSView): void;
    // compoundInstanceMethods
    invalidateShadow(): void;
    // compoundInstanceMethods
    layoutIfNeeded(): void;
    // compoundInstanceMethods
    makeFirstResponder(_?: NSResponder): boolean;
    // compoundInstanceMethods
    makeKeyAndOrderFront(_?: any): void;
    // compoundInstanceMethods
    makeKeyWindow(): void;
    // compoundInstanceMethods
    makeMainWindow(): void;
    // compoundInstanceMethods
    mergeAllWindows(_?: any): void;
    // compoundInstanceMethods
    miniaturize(_?: any): void;
    // compoundInstanceMethods
    moveTabToNewWindow(_?: any): void;
    // compoundInstanceMethods
    nextEventMatchingMask(matching: NSEvent.EventTypeMask): NSEvent;
    // compoundInstanceMethods
    nextEventMatchingMaskUntilDateInModeDequeue(matching: NSEvent.EventTypeMask, until?: Date, inMode?: string, dequeue?: boolean): NSEvent;
    // compoundInstanceMethods
    orderBack(_?: any): void;
    // compoundInstanceMethods
    orderFront(_?: any): void;
    // compoundInstanceMethods
    orderFrontRegardless(): void;
    // compoundInstanceMethods
    orderOut(_?: any): void;
    // compoundInstanceMethods
    orderWindowRelativeTo(_: NSWindow.OrderingMode, relativeTo: number): void;
    // compoundInstanceMethods
    performClose(_?: any): void;
    // compoundInstanceMethods
    performMiniaturize(_?: any): void;
    // compoundInstanceMethods
    performWindowDragWithEvent(with_: NSEvent): void;
    // compoundInstanceMethods
    performZoom(_?: any): void;
    // compoundInstanceMethods
    postEventAtStart(_: NSEvent, atStart: boolean): void;
    // compoundInstanceMethods
    print(_?: any): void;
    // compoundInstanceMethods
    recalculateKeyViewLoop(): void;
    // compoundInstanceMethods
    registerForDraggedTypes(_: string[]): void;
    // compoundInstanceMethods
    removeChildWindow(_: NSWindow): void;
    // compoundInstanceMethods
    removeTitlebarAccessoryViewControllerAtIndex(at: number): void;
    // compoundInstanceMethods
    resetCursorRects(): void;
    // compoundInstanceMethods
    resignKeyWindow(): void;
    // compoundInstanceMethods
    resignMainWindow(): void;
    // compoundInstanceMethods
    runToolbarCustomizationPalette(_?: any): void;
    // compoundInstanceMethods
    saveFrameUsingName(usingName: string): void;
    // compoundInstanceMethods
    selectKeyViewFollowingView(following: NSView): void;
    // compoundInstanceMethods
    selectKeyViewPrecedingView(preceding: NSView): void;
    // compoundInstanceMethods
    selectNextKeyView(_?: any): void;
    // compoundInstanceMethods
    selectNextTab(_?: any): void;
    // compoundInstanceMethods
    selectPreviousKeyView(_?: any): void;
    // compoundInstanceMethods
    selectPreviousTab(_?: any): void;
    // compoundInstanceMethods
    sendEvent(_: NSEvent): void;
    // compoundInstanceMethods
    setAnchorAttributeForOrientation(_: NSLayoutConstraint.Attribute, for_: NSLayoutConstraint.Orientation): void;
    // compoundInstanceMethods
    setAutorecalculatesContentBorderThicknessForEdge(_: boolean, for_: NSRectEdge): void;
    // compoundInstanceMethods
    setContentBorderThicknessForEdge(_: number, for_: NSRectEdge): void;
    // compoundInstanceMethods
    setContentSize(_: CGSize): void;
    // compoundInstanceMethods
    setDynamicDepthLimit(_: boolean): void;
    // compoundInstanceMethods
    setFrameDisplay(_: CGRect, display: boolean): void;
    // compoundInstanceMethods
    setFrameDisplayAnimate(_: CGRect, display: boolean, animate: boolean): void;
    // compoundInstanceMethods
    setFrameAutosaveName(_: string): boolean;
    // compoundInstanceMethods
    setFrameFromString(from: string): void;
    // compoundInstanceMethods
    setFrameOrigin(_: CGPoint): void;
    // compoundInstanceMethods
    setFrameTopLeftPoint(_: CGPoint): void;
    // compoundInstanceMethods
    setFrameUsingName(_: string): boolean;
    // compoundInstanceMethods
    setFrameUsingNameForce(_: string, force: boolean): boolean;
    // compoundInstanceMethods
    setIsMiniaturized(_: boolean): void;
    // compoundInstanceMethods
    setIsVisible(_: boolean): void;
    // compoundInstanceMethods
    setIsZoomed(_: boolean): void;
    // compoundInstanceMethods
    setTitleWithRepresentedFilename(_: string): void;
    // compoundInstanceMethods
    standardWindowButton(_: NSWindow.ButtonType): NSButton;
    // compoundInstanceMethods
    toggleFullScreen(_?: any): void;
    // compoundInstanceMethods
    toggleTabBar(_?: any): void;
    // compoundInstanceMethods
    toggleTabOverview(_?: any): void;
    // compoundInstanceMethods
    toggleToolbarShown(_?: any): void;
    // compoundInstanceMethods
    trackEventsWithMatchingTimeoutModeHandler(matching: NSEvent.EventTypeMask, timeout: number, mode: string, handler?: (p1: NSEvent, p2: boolean) => void): void;
    // compoundInstanceMethods
    unregisterDraggedTypes(): void;
    // compoundInstanceMethods
    update(): void;
    // compoundInstanceMethods
    updateConstraintsIfNeeded(): void;
    // compoundInstanceMethods
    visualizeConstraints(_?: NSLayoutConstraint[]): void;
    // compoundInstanceMethods
    zoom(_?: any): void;
  }

  // interface
  class NSWindowController extends NSResponder {
    // ownInstanceProperties
    contentViewController: NSViewController;
    setContentViewController(_: NSViewController)
    // ownInstanceProperties
    document: any;
    setDocument(_: any)
    // ownInstanceProperties
    owner: any;
    // ownInstanceProperties
    shouldCascadeWindows: boolean;
    setShouldCascadeWindows(_: boolean)
    // ownInstanceProperties
    shouldCloseDocument: boolean;
    setShouldCloseDocument(_: boolean)
    // ownInstanceProperties
    storyboard: NSStoryboard;
    // ownInstanceProperties
    window: NSWindow;
    setWindow(_: NSWindow)
    // ownInstanceProperties
    windowFrameAutosaveName: string;
    setWindowFrameAutosaveName(_: string)
    // ownInstanceProperties
    isWindowLoaded: boolean;
    // ownInstanceProperties
    windowNibName: string;
    // ownInstanceProperties
    windowNibPath: string;
    // compoundInstanceMethods
    close(): void;
    // compoundInstanceMethods
    dismissController(_?: any): void;
    // compoundInstanceMethods
    static createWithWindow(window?: NSWindow): NSWindowController;
    // compoundInstanceMethods
    static createWithWindowNibName(windowNibName: string): NSWindowController;
    // compoundInstanceMethods
    static createWithWindowNibNameOwner(windowNibName: string, owner: any): NSWindowController;
    // compoundInstanceMethods
    static createWithWindowNibPathOwner(windowNibPath: string, owner: any): NSWindowController;
    // compoundInstanceMethods
    loadWindow(): void;
    // compoundInstanceMethods
    setDocumentEdited(_: boolean): void;
    // compoundInstanceMethods
    showWindow(_?: any): void;
    // compoundInstanceMethods
    synchronizeWindowTitleWithDocumentName(): void;
    // compoundInstanceMethods
    windowDidLoad(): void;
    // compoundInstanceMethods
    windowTitleForDocumentDisplayName(forDocumentDisplayName: string): string;
    // compoundInstanceMethods
    windowWillLoad(): void;
  }

  interface NSWindowDelegate extends NSObject {
    // instance method
    customWindowsToEnterFullScreenForWindow?(for_: NSWindow): NSWindow[];
    // instance method
    customWindowsToEnterFullScreenForWindowOnScreen?(for_: NSWindow, on: NSScreen): NSWindow[];
    // instance method
    customWindowsToExitFullScreenForWindow?(for_: NSWindow): NSWindow[];
    willPositionSheetUsingRect?(_: NSWindow, willPositionSheet: NSWindow, using: CGRect): CGRect;
    shouldDragDocumentWithEventFromWithPasteboard?(_: NSWindow, shouldDragDocumentWith: NSEvent, from: CGPoint, with_: NSPasteboard): boolean;
    startCustomAnimationToEnterFullScreenOnScreenWithDuration?(_: NSWindow, startCustomAnimationToEnterFullScreenOn: NSScreen, withDuration: number): void;
    didDecodeRestorableState?(_: NSWindow, didDecodeRestorableState: NSCoder): void;
    shouldPopUpDocumentPathMenu?(_: NSWindow, shouldPopUpDocumentPathMenu: NSMenu): boolean;
    startCustomAnimationToEnterFullScreenWithDuration?(_: NSWindow, startCustomAnimationToEnterFullScreenWithDuration: number): void;
    startCustomAnimationToExitFullScreenWithDuration?(_: NSWindow, startCustomAnimationToExitFullScreenWithDuration: number): void;
    willEncodeRestorableState?(_: NSWindow, willEncodeRestorableState: NSCoder): void;
    willResizeForVersionBrowserWithMaxPreferredSizeMaxAllowedSize?(_: NSWindow, willResizeForVersionBrowserWithMaxPreferredSize: CGSize, maxAllowedSize: CGSize): CGSize;
    willUseFullScreenContentSize?(_: NSWindow, willUseFullScreenContentSize: CGSize): CGSize;
    willUseFullScreenPresentationOptions?(_: NSWindow, willUseFullScreenPresentationOptions: NSApplication.PresentationOptions): NSApplication.PresentationOptions;
    didBecomeKey?(_: NSNotification): void;
    didBecomeMain?(_: NSNotification): void;
    didChangeBackingProperties?(_: NSNotification): void;
    didChangeOcclusionState?(_: NSNotification): void;
    didChangeScreen?(_: NSNotification): void;
    didChangeScreenProfile?(_: NSNotification): void;
    didDeminiaturize?(_: NSNotification): void;
    didEndLiveResize?(_: NSNotification): void;
    didEndSheet?(_: NSNotification): void;
    didEnterFullScreen?(_: NSNotification): void;
    didEnterVersionBrowser?(_: NSNotification): void;
    didExitFullScreen?(_: NSNotification): void;
    didExitVersionBrowser?(_: NSNotification): void;
    didExpose?(_: NSNotification): void;
    didFailToEnterFullScreen?(_: NSWindow): void;
    didFailToExitFullScreen?(_: NSWindow): void;
    didMiniaturize?(_: NSNotification): void;
    didMove?(_: NSNotification): void;
    didResignKey?(_: NSNotification): void;
    didResignMain?(_: NSNotification): void;
    didResize?(_: NSNotification): void;
    didUpdate?(_: NSNotification): void;
    shouldClose?(_: NSWindow): boolean;
    shouldZoomToFrame?(_: NSWindow, toFrame: CGRect): boolean;
    willBeginSheet?(_: NSNotification): void;
    willClose?(_: NSNotification): void;
    willEnterFullScreen?(_: NSNotification): void;
    willEnterVersionBrowser?(_: NSNotification): void;
    willExitFullScreen?(_: NSNotification): void;
    willExitVersionBrowser?(_: NSNotification): void;
    willMiniaturize?(_: NSNotification): void;
    willMove?(_: NSNotification): void;
    willResizeToSize?(_: NSWindow, to: CGSize): CGSize;
    willReturnFieldEditorToObject?(_: NSWindow, to?: any): any;
    willReturnUndoManager?(_: NSWindow): UndoManager;
    willStartLiveResize?(_: NSNotification): void;
    willUseStandardFrameDefaultFrame?(_: NSWindow, defaultFrame: CGRect): CGRect;
  }

  interface NSWindowRestoration extends NSObject {
  }

  // interface
  class NSWindowTab extends NSObject {
    // ownInstanceProperties
    accessoryView: NSView;
    setAccessoryView(_: NSView)
    // ownInstanceProperties
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    toolTip: string;
    setToolTip(_: string)
  }

  // interface
  class NSWindowTabGroup extends NSObject {
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    isOverviewVisible: boolean;
    setOverviewVisible(_: boolean)
    // ownInstanceProperties
    selectedWindow: NSWindow;
    setSelectedWindow(_: NSWindow)
    // ownInstanceProperties
    isTabBarVisible: boolean;
    // ownInstanceProperties
    windows: NSWindow[];
    // compoundInstanceMethods
    addWindow(_: NSWindow): void;
    // compoundInstanceMethods
    insertWindowAtIndex(_: NSWindow, at: number): void;
    // compoundInstanceMethods
    removeWindow(_: NSWindow): void;
  }

  // interface
  class NSWorkspace extends NSObject {
    // ownInstanceProperties
    accessibilityDisplayShouldDifferentiateWithoutColor: boolean;
    // ownInstanceProperties
    accessibilityDisplayShouldIncreaseContrast: boolean;
    // ownInstanceProperties
    accessibilityDisplayShouldInvertColors: boolean;
    // ownInstanceProperties
    accessibilityDisplayShouldReduceMotion: boolean;
    // ownInstanceProperties
    accessibilityDisplayShouldReduceTransparency: boolean;
    // ownInstanceProperties
    fileLabelColors: NSColor[];
    // ownInstanceProperties
    fileLabels: string[];
    // ownInstanceProperties
    frontmostApplication: NSRunningApplication;
    // ownInstanceProperties
    menuBarOwningApplication: NSRunningApplication;
    // ownInstanceProperties
    notificationCenter: NotificationCenter;
    // ownInstanceProperties
    runningApplications: NSRunningApplication[];
    // ownInstanceProperties
    isSwitchControlEnabled: boolean;
    // ownInstanceProperties
    isVoiceOverEnabled: boolean;
    // ownStaticProperties
    static sharedWorkspace: NSWorkspace;
    // compoundInstanceMethods
    URLForApplicationToOpenURL(toOpen: NSURL): NSURL;
    // compoundInstanceMethods
    URLForApplicationWithBundleIdentifier(withBundleIdentifier: string): NSURL;
    // compoundInstanceMethods
    activateFileViewerSelectingURLs(_: NSURL[]): void;
    // compoundInstanceMethods
    desktopImageOptionsForScreen(for_: NSScreen): Map<string, any>;
    // compoundInstanceMethods
    desktopImageURLForScreen(for_: NSScreen): NSURL;
    // compoundInstanceMethods
    duplicateCompletionHandler(_: NSURL[], completionHandler?: (p1: Map<NSURL, NSURL>, p2: NSError) => void): void;
    // compoundInstanceMethods
    extendPowerOffBy(by: number): number;
    // compoundInstanceMethods
    filenameExtensionIsValidForType(_: string, isValidForType: string): boolean;
    // compoundInstanceMethods
    getFileSystemInfoForPathIsRemovableIsWritableIsUnmountableDescriptionType(forPath: string, isRemovable?: boolean, isWritable?: boolean, isUnmountable?: boolean, description?: string, type?: string): boolean;
    // compoundInstanceMethods
    getInfoForFileApplicationType(_: string, application?: string, type?: string): boolean;
    // compoundInstanceMethods
    hideOtherApplications(): void;
    // compoundInstanceMethods
    iconForFile(forFile: string): NSImage;
    // compoundInstanceMethods
    iconForFileType(forFileType: string): NSImage;
    // compoundInstanceMethods
    iconForFiles(forFiles: string[]): NSImage;
    // compoundInstanceMethods
    isFilePackageAtPath(atPath: string): boolean;
    // compoundInstanceMethods
    launchApplicationAtURLOptionsConfigurationError(options: NSURL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
    // compoundInstanceMethods
    localizedDescriptionForType(forType: string): string;
    // compoundInstanceMethods
    noteFileSystemChanged(_: string): void;
    // compoundInstanceMethods
    openApplicationWithAtConfigurationCompletionHandler(at: NSURL, configuration: OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: NSError) => void): void;
    // compoundInstanceMethods
    openURL(_: NSURL): boolean;
    // compoundInstanceMethods
    openConfigurationCompletionHandler(_: NSURL, configuration: OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: NSError) => void): void;
    // compoundInstanceMethods
    openURLOptionsConfigurationError(options: NSURL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
    // compoundInstanceMethods
    openWithApplicationAtConfigurationCompletionHandler(_: NSURL[], withApplicationAt: NSURL, configuration: OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: NSError) => void): void;
    // compoundInstanceMethods
    openURLsWithApplicationAtURLOptionsConfigurationError(withApplicationAtURL: NSURL[], options: NSURL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
    // compoundInstanceMethods
    preferredFilenameExtensionForType(forType: string): string;
    // compoundInstanceMethods
    recycleCompletionHandler(_: NSURL[], completionHandler?: (p1: Map<NSURL, NSURL>, p2: NSError) => void): void;
    // compoundInstanceMethods
    requestAuthorizationWithToCompletionHandler(to: NSWorkspace.AuthorizationType, completionHandler?: (p1: Authorization, p2: NSError) => void): void;
    // compoundInstanceMethods
    selectFileInFileViewerRootedAtPath(_?: string, inFileViewerRootedAtPath?: string): boolean;
    // compoundInstanceMethods
    setDesktopImageURLForScreenOptionsError(forScreen: NSURL, options: NSScreen, error: Map<string, any>): boolean;
    // compoundInstanceMethods
    setIconForFileOptions(_?: NSImage, forFile?: string, options?: NSWorkspace.IconCreationOptions): boolean;
    // compoundInstanceMethods
    showSearchResultsForQueryString(forQueryString: string): boolean;
    // compoundInstanceMethods
    typeConformsToType(_: string, conformsToType: string): boolean;
    // compoundInstanceMethods
    typeOfFileError(error: string): string;
    // compoundInstanceMethods
    unmountAndEjectDeviceAtPath(atPath: string): boolean;
    // compoundInstanceMethods
    unmountAndEjectDeviceAtURLError(error: NSURL): boolean;
  }

  // interface
  class Authorization extends NSObject {
  }

  // interface
  class OpenConfiguration extends NSObject {
    // compoundStaticMethods
    static configuration(): OpenConfiguration;
    // ownInstanceProperties
    activates: boolean;
    setActivates(_: boolean)
    // ownInstanceProperties
    addsToRecentItems: boolean;
    setAddsToRecentItems(_: boolean)
    // ownInstanceProperties
    allowsRunningApplicationSubstitution: boolean;
    setAllowsRunningApplicationSubstitution(_: boolean)
    // ownInstanceProperties
    appleEvent: NSAppleEventDescriptor;
    setAppleEvent(_: NSAppleEventDescriptor)
    // ownInstanceProperties
    architecture: number;
    setArchitecture(_: number)
    // ownInstanceProperties
    arguments: string[];
    setArguments(_: string[])
    // ownInstanceProperties
    createsNewApplicationInstance: boolean;
    setCreatesNewApplicationInstance(_: boolean)
    // ownInstanceProperties
    environment: Map<string, string>;
    setEnvironment(_: Map<string, string>)
    // ownInstanceProperties
    isForPrinting: boolean;
    setForPrinting(_: boolean)
    // ownInstanceProperties
    hides: boolean;
    setHides(_: boolean)
    // ownInstanceProperties
    hidesOthers: boolean;
    setHidesOthers(_: boolean)
    // ownInstanceProperties
    promptsUserIfNeeded: boolean;
    setPromptsUserIfNeeded(_: boolean)
    // ownInstanceProperties
    requiresUniversalLinks: boolean;
    setRequiresUniversalLinks(_: boolean)
  }

  // interface
  class NSAsynchronousFetchRequest<ResultType> extends NSPersistentStoreRequest {
    // ownInstanceProperties
    completionBlock: (p1: NSAsynchronousFetchResult<any>) => void;
    // ownInstanceProperties
    estimatedResultCount: number;
    setEstimatedResultCount(_: number)
    // ownInstanceProperties
    fetchRequest: NSFetchRequest<ResultType>;
  }

  // interface
  class NSAsynchronousFetchResult<ResultType> extends NSPersistentStoreAsynchronousResult {
    // ownInstanceProperties
    fetchRequest: NSAsynchronousFetchRequest<ResultType>;
    // ownInstanceProperties
    finalResult: ResultType[];
  }

  // interface
  class NSAtomicStore extends NSPersistentStore {
    // compoundInstanceMethods
    addCacheNodes(_: NSSet<NSAtomicStoreCacheNode>): void;
    // compoundInstanceMethods
    cacheNodeForObjectID(_: NSManagedObjectID): NSAtomicStoreCacheNode;
    // compoundInstanceMethods
    cacheNodes(): NSSet<NSAtomicStoreCacheNode>;
    // compoundInstanceMethods
    load(): boolean;
    // compoundInstanceMethods
    newCacheNodeForManagedObject(_: NSManagedObject): NSAtomicStoreCacheNode;
    // compoundInstanceMethods
    newReferenceObjectForManagedObject(_: NSManagedObject): any;
    // compoundInstanceMethods
    objectIDForEntityReferenceObject(for_: NSEntityDescription, withReferenceObject: any): NSManagedObjectID;
    // compoundInstanceMethods
    referenceObjectForObjectID(_: NSManagedObjectID): any;
    // compoundInstanceMethods
    save(): boolean;
    // compoundInstanceMethods
    updateCacheNodeFromManagedObject(_: NSAtomicStoreCacheNode, fromManagedObject: NSManagedObject): void;
    // compoundInstanceMethods
    willRemoveCacheNodes(_: NSSet<NSAtomicStoreCacheNode>): void;
  }

  // interface
  class NSAtomicStoreCacheNode extends NSObject {
    // ownInstanceProperties
    objectID: NSManagedObjectID;
    // ownInstanceProperties
    propertyCache: NSMutableDictionary<string, any>;
    setPropertyCache(_: NSMutableDictionary<string, any>)
    // compoundInstanceMethods
    static createWithObjectID(objectID: NSManagedObjectID): NSAtomicStoreCacheNode;
  }

  // interface
  class NSAttributeDescription extends NSPropertyDescription {
    // ownInstanceProperties
    allowsExternalBinaryDataStorage: boolean;
    setAllowsExternalBinaryDataStorage(_: boolean)
    // ownInstanceProperties
    attributeType: NSAttributeType;
    setAttributeType(_: NSAttributeType)
    // ownInstanceProperties
    attributeValueClassName: string;
    setAttributeValueClassName(_: string)
    // ownInstanceProperties
    defaultValue: any;
    setDefaultValue(_: any)
    // ownInstanceProperties
    preservesValueInHistoryOnDeletion: boolean;
    setPreservesValueInHistoryOnDeletion(_: boolean)
    // ownInstanceProperties
    valueTransformerName: string;
    setValueTransformerName(_: string)
  }

  // interface
  class NSBatchDeleteRequest extends NSPersistentStoreRequest {
    // ownInstanceProperties
    fetchRequest: NSFetchRequest<any>;
    // ownInstanceProperties
    resultType: NSBatchDeleteRequestResultType;
    setResultType(_: NSBatchDeleteRequestResultType)
    // compoundInstanceMethods
    static createWithFetchRequest(fetchRequest: NSFetchRequest<any>): NSBatchDeleteRequest;
    // compoundInstanceMethods
    static createWithObjectIDs(objectIDs: NSManagedObjectID[]): NSBatchDeleteRequest;
  }

  // interface
  class NSBatchDeleteResult extends NSPersistentStoreResult {
    // ownInstanceProperties
    result: any;
    // ownInstanceProperties
    resultType: NSBatchDeleteRequestResultType;
  }

  // interface
  class NSBatchInsertRequest extends NSPersistentStoreRequest {
    // compoundStaticMethods
    static batchInsertRequestWithEntityNameObjects(_: string, objects: Map<string, any>[]): NSBatchInsertRequest;
    // ownInstanceProperties
    entity: NSEntityDescription;
    // ownInstanceProperties
    entityName: string;
    // ownInstanceProperties
    objectsToInsert: Map<string, any>[];
    setObjectsToInsert(_: Map<string, any>[])
    // ownInstanceProperties
    resultType: NSBatchInsertRequestResultType;
    setResultType(_: NSBatchInsertRequestResultType)
    // compoundInstanceMethods
    static createWithEntityObjects(entity: NSEntityDescription, objects: Map<string, any>[]): NSBatchInsertRequest;
    // compoundInstanceMethods
    static createWithEntityNameObjects(entityName: string, objects: Map<string, any>[]): NSBatchInsertRequest;
  }

  // interface
  class NSBatchInsertResult extends NSPersistentStoreResult {
    // ownInstanceProperties
    result: any;
    // ownInstanceProperties
    resultType: NSBatchInsertRequestResultType;
  }

  // interface
  class NSBatchUpdateRequest extends NSPersistentStoreRequest {
    // compoundStaticMethods
    static batchUpdateRequestWithEntityName(_: string): NSBatchUpdateRequest;
    // ownInstanceProperties
    entity: NSEntityDescription;
    // ownInstanceProperties
    entityName: string;
    // ownInstanceProperties
    includesSubentities: boolean;
    setIncludesSubentities(_: boolean)
    // ownInstanceProperties
    predicate: NSPredicate;
    setPredicate(_: NSPredicate)
    // ownInstanceProperties
    propertiesToUpdate: Map<any, any>;
    setPropertiesToUpdate(_: Map<any, any>)
    // ownInstanceProperties
    resultType: NSBatchUpdateRequestResultType;
    setResultType(_: NSBatchUpdateRequestResultType)
    // compoundInstanceMethods
    static createWithEntity(entity: NSEntityDescription): NSBatchUpdateRequest;
    // compoundInstanceMethods
    static createWithEntityName(entityName: string): NSBatchUpdateRequest;
  }

  // interface
  class NSBatchUpdateResult extends NSPersistentStoreResult {
    // ownInstanceProperties
    result: any;
    // ownInstanceProperties
    resultType: NSBatchUpdateRequestResultType;
  }

  // interface
  class NSConstraintConflict extends NSObject {
    // ownInstanceProperties
    conflictingObjects: NSManagedObject[];
    // ownInstanceProperties
    conflictingSnapshots: Map<any, any>[];
    // ownInstanceProperties
    constraint: string[];
    // ownInstanceProperties
    constraintValues: Map<string, any>;
    // ownInstanceProperties
    databaseObject: NSManagedObject;
    // ownInstanceProperties
    databaseSnapshot: Map<string, any>;
    // compoundInstanceMethods
    static createWithConstraintDatabaseObjectDatabaseSnapshotConflictingObjectsConflictingSnapshots(constraint: string[], databaseObject?: NSManagedObject, databaseSnapshot?: Map<any, any>, conflictingObjects?: NSManagedObject[], conflictingSnapshots?: any[]): NSConstraintConflict;
  }

  // interface
  class NSCoreDataCoreSpotlightDelegate extends NSObject {
    // compoundInstanceMethods
    attributeSetForObject(_: NSManagedObject): CSSearchableItemAttributeSet;
    // compoundInstanceMethods
    domainIdentifier(): string;
    // compoundInstanceMethods
    indexName(): string;
    // compoundInstanceMethods
    static createWithForStoreWithDescriptionModel(forStoreWithDescription: NSPersistentStoreDescription, model: NSManagedObjectModel): NSCoreDataCoreSpotlightDelegate;
    // compoundInstanceMethods
    searchableIndexWithReindexAllSearchableItemsWithAcknowledgementHandler(_: CSSearchableIndex, reindexAllSearchableItemsWithAcknowledgementHandler: () => void): void;
    // compoundInstanceMethods
    searchableIndexWithReindexSearchableItemsWithIdentifiersAcknowledgementHandler(_: CSSearchableIndex, reindexSearchableItemsWithIdentifiers: string[], acknowledgementHandler: () => void): void;
  }

  // interface
  class NSDerivedAttributeDescription extends NSAttributeDescription {
    // ownInstanceProperties
    derivationExpression: NSExpression;
    setDerivationExpression(_: NSExpression)
  }

  // interface
  class NSEntityDescription extends NSObject {
    // compoundStaticMethods
    static entityForNameInManagedObjectContext(forEntityName: string, in_: NSManagedObjectContext): NSEntityDescription;
    // compoundStaticMethods
    static insertNewObjectForEntityForNameInManagedObjectContext(forEntityName: string, into: NSManagedObjectContext): NSManagedObject;
    // ownInstanceProperties
    isAbstract: boolean;
    setAbstract(_: boolean)
    // ownInstanceProperties
    attributesByName: Map<string, NSAttributeDescription>;
    // ownInstanceProperties
    coreSpotlightDisplayNameExpression: NSExpression;
    setCoreSpotlightDisplayNameExpression(_: NSExpression)
    // ownInstanceProperties
    indexes: NSFetchIndexDescription[];
    setIndexes(_: NSFetchIndexDescription[])
    // ownInstanceProperties
    managedObjectClassName: string;
    setManagedObjectClassName(_: string)
    // ownInstanceProperties
    managedObjectModel: NSManagedObjectModel;
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    properties: NSPropertyDescription[];
    setProperties(_: NSPropertyDescription[])
    // ownInstanceProperties
    propertiesByName: Map<string, NSPropertyDescription>;
    // ownInstanceProperties
    relationshipsByName: Map<string, NSRelationshipDescription>;
    // ownInstanceProperties
    renamingIdentifier: string;
    setRenamingIdentifier(_: string)
    // ownInstanceProperties
    subentities: NSEntityDescription[];
    setSubentities(_: NSEntityDescription[])
    // ownInstanceProperties
    subentitiesByName: Map<string, NSEntityDescription>;
    // ownInstanceProperties
    superentity: NSEntityDescription;
    // ownInstanceProperties
    uniquenessConstraints: any[][];
    setUniquenessConstraints(_: any[][])
    // ownInstanceProperties
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>)
    // ownInstanceProperties
    versionHash: NSData;
    // ownInstanceProperties
    versionHashModifier: string;
    setVersionHashModifier(_: string)
    // compoundInstanceMethods
    isKindOfEntity(entity: NSEntityDescription): boolean;
    // compoundInstanceMethods
    relationshipsWithDestinationEntity(forDestination: NSEntityDescription): NSRelationshipDescription[];
  }

  // interface
  class NSEntityMapping extends NSObject {
    // ownInstanceProperties
    attributeMappings: NSPropertyMapping[];
    setAttributeMappings(_: NSPropertyMapping[])
    // ownInstanceProperties
    destinationEntityName: string;
    setDestinationEntityName(_: string)
    // ownInstanceProperties
    destinationEntityVersionHash: NSData;
    setDestinationEntityVersionHash(_: NSData)
    // ownInstanceProperties
    entityMigrationPolicyClassName: string;
    setEntityMigrationPolicyClassName(_: string)
    // ownInstanceProperties
    mappingType: NSEntityMappingType;
    setMappingType(_: NSEntityMappingType)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    relationshipMappings: NSPropertyMapping[];
    setRelationshipMappings(_: NSPropertyMapping[])
    // ownInstanceProperties
    sourceEntityName: string;
    setSourceEntityName(_: string)
    // ownInstanceProperties
    sourceEntityVersionHash: NSData;
    setSourceEntityVersionHash(_: NSData)
    // ownInstanceProperties
    sourceExpression: NSExpression;
    setSourceExpression(_: NSExpression)
    // ownInstanceProperties
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>)
  }

  // interface
  class NSEntityMigrationPolicy extends NSObject {
    // compoundInstanceMethods
    beginEntityMappingManagerError(_: NSEntityMapping, with_: NSMigrationManager): boolean;
    // compoundInstanceMethods
    createDestinationInstancesForSourceInstanceEntityMappingManagerError(forSource: NSManagedObject, in_: NSEntityMapping, manager: NSMigrationManager): boolean;
    // compoundInstanceMethods
    createRelationshipsForDestinationInstanceEntityMappingManagerError(forDestination: NSManagedObject, in_: NSEntityMapping, manager: NSMigrationManager): boolean;
    // compoundInstanceMethods
    endEntityMappingManagerError(manager: NSEntityMapping, error: NSMigrationManager): boolean;
    // compoundInstanceMethods
    endInstanceCreationForEntityMappingManagerError(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
    // compoundInstanceMethods
    endRelationshipCreationForEntityMappingManagerError(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
    // compoundInstanceMethods
    performCustomValidationForEntityMappingManagerError(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
  }

  // interface
  class NSExpressionDescription extends NSPropertyDescription {
    // ownInstanceProperties
    expression: NSExpression;
    setExpression(_: NSExpression)
    // ownInstanceProperties
    expressionResultType: NSAttributeType;
    setExpressionResultType(_: NSAttributeType)
  }

  // interface
  class NSFetchIndexDescription extends NSObject {
    // ownInstanceProperties
    elements: NSFetchIndexElementDescription[];
    setElements(_: NSFetchIndexElementDescription[])
    // ownInstanceProperties
    entity: NSEntityDescription;
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    partialIndexPredicate: NSPredicate;
    setPartialIndexPredicate(_: NSPredicate)
    // compoundInstanceMethods
    static createWithNameElements(name: string, elements?: NSFetchIndexElementDescription[]): NSFetchIndexDescription;
  }

  // interface
  class NSFetchIndexElementDescription extends NSObject {
    // ownInstanceProperties
    isAscending: boolean;
    setAscending(_: boolean)
    // ownInstanceProperties
    collationType: NSFetchIndexElementType;
    setCollationType(_: NSFetchIndexElementType)
    // ownInstanceProperties
    indexDescription: NSFetchIndexDescription;
    // ownInstanceProperties
    property: NSPropertyDescription;
    // ownInstanceProperties
    propertyName: string;
    // compoundInstanceMethods
    static createWithPropertyCollationType(property: NSPropertyDescription, collationType: NSFetchIndexElementType): NSFetchIndexElementDescription;
  }

  // interface
  class NSFetchRequest<ResultType> extends NSPersistentStoreRequest {
    // compoundStaticMethods
    static fetchRequestWithEntityName<ResultType>(_: string): NSFetchRequest<ResultType>;
    // ownInstanceProperties
    entity: NSEntityDescription;
    setEntity(_: NSEntityDescription)
    // ownInstanceProperties
    entityName: string;
    // ownInstanceProperties
    fetchBatchSize: number;
    setFetchBatchSize(_: number)
    // ownInstanceProperties
    fetchLimit: number;
    setFetchLimit(_: number)
    // ownInstanceProperties
    fetchOffset: number;
    setFetchOffset(_: number)
    // ownInstanceProperties
    havingPredicate: NSPredicate;
    setHavingPredicate(_: NSPredicate)
    // ownInstanceProperties
    includesPendingChanges: boolean;
    setIncludesPendingChanges(_: boolean)
    // ownInstanceProperties
    includesPropertyValues: boolean;
    setIncludesPropertyValues(_: boolean)
    // ownInstanceProperties
    includesSubentities: boolean;
    setIncludesSubentities(_: boolean)
    // ownInstanceProperties
    predicate: NSPredicate;
    setPredicate(_: NSPredicate)
    // ownInstanceProperties
    propertiesToFetch: any[];
    setPropertiesToFetch(_: any[])
    // ownInstanceProperties
    propertiesToGroupBy: any[];
    setPropertiesToGroupBy(_: any[])
    // ownInstanceProperties
    relationshipKeyPathsForPrefetching: string[];
    setRelationshipKeyPathsForPrefetching(_: string[])
    // ownInstanceProperties
    resultType: NSFetchRequestResultType;
    setResultType(_: NSFetchRequestResultType)
    // ownInstanceProperties
    returnsDistinctResults: boolean;
    setReturnsDistinctResults(_: boolean)
    // ownInstanceProperties
    returnsObjectsAsFaults: boolean;
    setReturnsObjectsAsFaults(_: boolean)
    // ownInstanceProperties
    shouldRefreshRefetchedObjects: boolean;
    setShouldRefreshRefetchedObjects(_: boolean)
    // ownInstanceProperties
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[])
    // compoundInstanceMethods
    execute(): ResultType[];
  }

  // interface
  class NSFetchRequestExpression extends NSExpression {
    // compoundStaticMethods
    static expressionForFetchContextCountOnly(_: NSExpression, context: NSExpression, countOnly: boolean): NSExpression;
    // ownInstanceProperties
    contextExpression: NSExpression;
    // ownInstanceProperties
    isCountOnlyRequest: boolean;
    // ownInstanceProperties
    requestExpression: NSExpression;
  }

  interface NSFetchRequestResult extends NSObject {
  }

  // interface
  class NSFetchedPropertyDescription extends NSPropertyDescription {
    // ownInstanceProperties
    fetchRequest: NSFetchRequest<any>;
    setFetchRequest(_: NSFetchRequest<any>)
  }

  // interface
  class NSFetchedResultsController<ResultType> extends NSObject {
    // compoundStaticMethods
    static deleteCacheWithName(_?: string): void;
    // ownInstanceProperties
    cacheName: string;
    // ownInstanceProperties
    delegate: NSFetchedResultsControllerDelegate;
    setDelegate(_: NSFetchedResultsControllerDelegate)
    // ownInstanceProperties
    fetchRequest: NSFetchRequest<ResultType>;
    // ownInstanceProperties
    fetchedObjects: ResultType[];
    // ownInstanceProperties
    managedObjectContext: NSManagedObjectContext;
    // ownInstanceProperties
    sectionIndexTitles: string[];
    // ownInstanceProperties
    sectionNameKeyPath: string;
    // ownInstanceProperties
    sections: NSFetchedResultsSectionInfo[];
    // compoundInstanceMethods
    indexPathForObject(_: ResultType): NSIndexPath;
    // compoundInstanceMethods
    objectAtIndexPath(_: NSIndexPath): ResultType;
    // compoundInstanceMethods
    performFetch(): boolean;
    // compoundInstanceMethods
    sectionForSectionIndexTitleAtIndex(_: string, atIndex: number): number;
    // compoundInstanceMethods
    sectionIndexTitleForSectionName(_: string): string;
  }

  interface NSFetchedResultsControllerDelegate extends NSObject {
    // instance method
    controllerWithDidChangeContentWithDifference?(_: NSFetchedResultsController<any>, didChangeContentWithDifference: NSOrderedCollectionDifference<NSManagedObjectID>): void;
    // instance method
    controllerWithDidChangeContentWithSnapshot?(_: NSFetchedResultsController<any>, didChangeContentWithSnapshot: NSDiffableDataSourceSnapshotReference<string, NSManagedObjectID>): void;
    // instance method
    controllerDidChangeObjectAtIndexPathForChangeTypeNewIndexPath?(_: NSFetchedResultsController<any>, didChangeObject: any, atIndexPath?: NSIndexPath, forChangeType?: NSFetchedResultsChangeType, newIndexPath?: NSIndexPath): void;
    // instance method
    controllerDidChangeSectionAtIndexForChangeType?(_: NSFetchedResultsController<any>, didChangeSection: NSFetchedResultsSectionInfo, atIndex: number, forChangeType: NSFetchedResultsChangeType): void;
    // instance method
    controllerSectionIndexTitleForSectionName?(_: NSFetchedResultsController<any>, sectionIndexTitleForSectionName: string): string;
    // instance method
    controllerDidChangeContent?(_: NSFetchedResultsController<any>): void;
    // instance method
    controllerWillChangeContent?(_: NSFetchedResultsController<any>): void;
  }

  interface NSFetchedResultsSectionInfo {
    indexTitle: string;
    name: string;
    numberOfObjects: number;
    objects: any[];
  }

  // interface
  class NSIncrementalStore extends NSPersistentStore {
    // compoundStaticMethods
    static identifierForNewStoreAtURL(_: NSURL): any;
    // compoundInstanceMethods
    executeRequestWithContextError(withContext: NSPersistentStoreRequest, error?: NSManagedObjectContext): any;
    // compoundInstanceMethods
    managedObjectContextDidRegisterObjectsWithIDs(_: NSManagedObjectID[]): void;
    // compoundInstanceMethods
    managedObjectContextDidUnregisterObjectsWithIDs(_: NSManagedObjectID[]): void;
    // compoundInstanceMethods
    newObjectIDForEntityReferenceObject(for_: NSEntityDescription, referenceObject: any): NSManagedObjectID;
    // compoundInstanceMethods
    newValueForRelationshipForObjectWithIDWithContextError(forObjectWithID: NSRelationshipDescription, withContext: NSManagedObjectID, error?: NSManagedObjectContext): any;
    // compoundInstanceMethods
    newValuesForObjectWithIDWithContextError(withContext: NSManagedObjectID, error: NSManagedObjectContext): NSIncrementalStoreNode;
    // compoundInstanceMethods
    obtainPermanentIDsForObjectsError(error: NSManagedObject[]): NSManagedObjectID[];
    // compoundInstanceMethods
    referenceObjectForObjectID(_: NSManagedObjectID): any;
  }

  // interface
  class NSIncrementalStoreNode extends NSObject {
    // ownInstanceProperties
    objectID: NSManagedObjectID;
    // ownInstanceProperties
    //   version: number;
    // compoundInstanceMethods
    static createWithObjectIDWithValuesVersion(objectID: NSManagedObjectID, withValues: Map<string, any>, version: number): NSIncrementalStoreNode;
    // compoundInstanceMethods
    updateWithValuesVersion(_: Map<string, any>, version: number): void;
    // compoundInstanceMethods
    valueForPropertyDescription(_: NSPropertyDescription): any;
  }

  // interface
  class NSManagedObject extends NSObject {
    // compoundStaticMethods
    static entity(): NSEntityDescription;
    // compoundStaticMethods
    static fetchRequest(): NSFetchRequest<any>;
    // ownInstanceProperties
    isDeleted: boolean;
    // ownInstanceProperties
    entity: NSEntityDescription;
    // ownInstanceProperties
    isFault: boolean;
    // ownInstanceProperties
    faultingState: number;
    // ownInstanceProperties
    hasChanges: boolean;
    // ownInstanceProperties
    hasPersistentChangedValues: boolean;
    // ownInstanceProperties
    isInserted: boolean;
    // ownInstanceProperties
    managedObjectContext: NSManagedObjectContext;
    // ownInstanceProperties
    objectID: NSManagedObjectID;
    // ownInstanceProperties
    isUpdated: boolean;
    // ownStaticProperties
    static contextShouldIgnoreUnmodeledPropertyChanges: boolean;
    // compoundInstanceMethods
    awakeFromFetch(): void;
    // compoundInstanceMethods
    awakeFromInsert(): void;
    // compoundInstanceMethods
    awakeFromSnapshotEvents(_: NSSnapshotEventType): void;
    // compoundInstanceMethods
    changedValues(): Map<string, any>;
    // compoundInstanceMethods
    changedValuesForCurrentEvent(): Map<string, any>;
    // compoundInstanceMethods
    committedValuesForKeys(_?: string[]): Map<string, any>;
    // compoundInstanceMethods
    didAccessValueForKey(_?: string): void;
    // compoundInstanceMethods
    didSave(): void;
    // compoundInstanceMethods
    didTurnIntoFault(): void;
    // compoundInstanceMethods
    hasFaultForRelationshipNamed(_: string): boolean;
    // compoundInstanceMethods
    static createWithContext(context: NSManagedObjectContext): NSManagedObject;
    // compoundInstanceMethods
    static createWithEntityInsertIntoManagedObjectContext(entity: NSEntityDescription, insertIntoManagedObjectContext?: NSManagedObjectContext): NSManagedObject;
    // compoundInstanceMethods
    objectIDsForRelationshipNamed(_: string): NSManagedObjectID[];
    // compoundInstanceMethods
    //  observationInfo(): any;
    // compoundInstanceMethods
    prepareForDeletion(): void;
    // compoundInstanceMethods
    primitiveValueForKey(_: string): any;
    // compoundInstanceMethods
    setObservationInfo(_?: any): void;
    // compoundInstanceMethods
    setPrimitiveValueForKey(_?: any, forKey?: string): void;
    // compoundInstanceMethods
    validateForDelete(): boolean;
    // compoundInstanceMethods
    validateForInsert(): boolean;
    // compoundInstanceMethods
    validateForUpdate(): boolean;
    // compoundInstanceMethods
    willAccessValueForKey(_?: string): void;
    // compoundInstanceMethods
    willSave(): void;
    // compoundInstanceMethods
    willTurnIntoFault(): void;
  }

  // interface
  class NSManagedObjectContext extends NSObject {
    // compoundStaticMethods
    static mergeChangesFromRemoteContextSaveIntoContexts(_: Map<any, any>, intoContexts: NSManagedObjectContext[]): void;
    // ownInstanceProperties
    automaticallyMergesChangesFromParent: boolean;
    setAutomaticallyMergesChangesFromParent(_: boolean)
    // ownInstanceProperties
    concurrencyType: NSManagedObjectContextConcurrencyType;
    // ownInstanceProperties
    deletedObjects: NSSet<NSManagedObject>;
    // ownInstanceProperties
    hasChanges: boolean;
    // ownInstanceProperties
    insertedObjects: NSSet<NSManagedObject>;
    // ownInstanceProperties
    mergePolicy: any;
    setMergePolicy(_: any)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    parentContext: NSManagedObjectContext;
    setParentContext(_: NSManagedObjectContext)
    // ownInstanceProperties
    persistentStoreCoordinator: NSPersistentStoreCoordinator;
    setPersistentStoreCoordinator(_: NSPersistentStoreCoordinator)
    // ownInstanceProperties
    propagatesDeletesAtEndOfEvent: boolean;
    setPropagatesDeletesAtEndOfEvent(_: boolean)
    // ownInstanceProperties
    queryGenerationToken: NSQueryGenerationToken;
    // ownInstanceProperties
    registeredObjects: NSSet<NSManagedObject>;
    // ownInstanceProperties
    retainsRegisteredObjects: boolean;
    setRetainsRegisteredObjects(_: boolean)
    // ownInstanceProperties
    shouldDeleteInaccessibleFaults: boolean;
    setShouldDeleteInaccessibleFaults(_: boolean)
    // ownInstanceProperties
    stalenessInterval: number;
    setStalenessInterval(_: number)
    // ownInstanceProperties
    transactionAuthor: string;
    setTransactionAuthor(_: string)
    // ownInstanceProperties
    undoManager: UndoManager;
    setUndoManager(_: UndoManager)
    // ownInstanceProperties
    updatedObjects: NSSet<NSManagedObject>;
    // ownInstanceProperties
    userInfo: NSMutableDictionary<any, any>;
    // compoundInstanceMethods
    assignObjectToPersistentStore(_: any, toPersistentStore: NSPersistentStore): void;
    // compoundInstanceMethods
    countForFetchRequestError(error: NSFetchRequest<any>): number;
    // compoundInstanceMethods
    deleteObject(_: NSManagedObject): void;
    // compoundInstanceMethods
    detectConflictsForObject(_: NSManagedObject): void;
    // compoundInstanceMethods
    executeFetchRequestError(_: NSFetchRequest<any>): any[];
    // compoundInstanceMethods
    executeRequestError(error: NSPersistentStoreRequest): NSPersistentStoreResult;
    // compoundInstanceMethods
    existingObjectWithIDError(error: NSManagedObjectID): NSManagedObject;
    // compoundInstanceMethods
    static createWithConcurrencyType(concurrencyType: NSManagedObjectContextConcurrencyType): NSManagedObjectContext;
    // compoundInstanceMethods
    insertObject(_: NSManagedObject): void;
    // compoundInstanceMethods
    mergeChangesFromContextDidSaveNotification(_: NSNotification): void;
    // compoundInstanceMethods
    objectRegisteredForID(for_: NSManagedObjectID): NSManagedObject;
    // compoundInstanceMethods
    objectWithID(_: NSManagedObjectID): NSManagedObject;
    // compoundInstanceMethods
    obtainPermanentIDsForObjectsError(error: NSManagedObject[]): boolean;
    // compoundInstanceMethods
    performBlock(_: () => void): void;
    // compoundInstanceMethods
    performAndWait(_: () => void): void;
    // compoundInstanceMethods
    processPendingChanges(): void;
    // compoundInstanceMethods
    redo(): void;
    // compoundInstanceMethods
    refreshAllObjects(): void;
    // compoundInstanceMethods
    refreshObjectMergeChanges(_: NSManagedObject, mergeChanges: boolean): void;
    // compoundInstanceMethods
    reset(): void;
    // compoundInstanceMethods
    rollback(): void;
    // compoundInstanceMethods
    save(): boolean;
    // compoundInstanceMethods
    setQueryGenerationFromTokenError(error?: NSQueryGenerationToken): boolean;
    // compoundInstanceMethods
    shouldHandleInaccessibleFaultForObjectIDTriggeredByProperty(_: NSManagedObject, forObjectID: NSManagedObjectID, triggeredByProperty?: NSPropertyDescription): boolean;
    // compoundInstanceMethods
    undo(): void;
  }

  // interface
  class NSManagedObjectID extends NSObject {
    // ownInstanceProperties
    entity: NSEntityDescription;
    // ownInstanceProperties
    persistentStore: NSPersistentStore;
    // ownInstanceProperties
    isTemporaryID: boolean;
    // compoundInstanceMethods
    URIRepresentation(): NSURL;
  }

  // interface
  class NSManagedObjectModel extends NSObject {
    // compoundStaticMethods
    static mergedModelFromBundles(_?: Bundle[]): NSManagedObjectModel;
    // compoundStaticMethods
    static mergedModelFromBundlesForStoreMetadata(_?: Bundle[], forStoreMetadata?: Map<string, any>): NSManagedObjectModel;
    // compoundStaticMethods
    static modelByMergingModels(_?: NSManagedObjectModel[]): NSManagedObjectModel;
    // compoundStaticMethods
    static modelByMergingModelsForStoreMetadata(_: NSManagedObjectModel[], forStoreMetadata: Map<string, any>): NSManagedObjectModel;
    // ownInstanceProperties
    configurations: string[];
    // ownInstanceProperties
    entities: NSEntityDescription[];
    setEntities(_: NSEntityDescription[])
    // ownInstanceProperties
    entitiesByName: Map<string, NSEntityDescription>;
    // ownInstanceProperties
    entityVersionHashesByName: Map<string, Data>;
    // ownInstanceProperties
    fetchRequestTemplatesByName: Map<string, NSFetchRequest<any>>;
    // ownInstanceProperties
    localizationDictionary: Map<string, string>;
    setLocalizationDictionary(_: Map<string, string>)
    // ownInstanceProperties
    versionIdentifiers: NSSet<any>;
    setVersionIdentifiers(_: NSSet<any>)
    // compoundInstanceMethods
    entitiesForConfiguration(forConfigurationName?: string): NSEntityDescription[];
    // compoundInstanceMethods
    fetchRequestFromTemplateWithNameSubstitutionVariables(_: string, substitutionVariables: Map<string, any>): NSFetchRequest<any>;
    // compoundInstanceMethods
    fetchRequestTemplateForName(_: string): NSFetchRequest<any>;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): NSManagedObjectModel;
    // compoundInstanceMethods
    isConfigurationCompatibleWithStoreMetadata(withName?: string, compatibleWithStoreMetadata?: Map<string, any>): boolean;
    // compoundInstanceMethods
    setEntitiesForConfiguration(_: NSEntityDescription[], forConfigurationName: string): void;
    // compoundInstanceMethods
    setFetchRequestTemplateForName(_?: NSFetchRequest<any>, forName?: string): void;
  }

  // interface
  class NSMappingModel extends NSObject {
    // compoundStaticMethods
    static inferredMappingModelForSourceModelDestinationModelError(destinationModel: NSManagedObjectModel, error: NSManagedObjectModel): NSMappingModel;
    // compoundStaticMethods
    static mappingModelFromBundlesForSourceModelDestinationModel(_?: Bundle[], forSourceModel?: NSManagedObjectModel, destinationModel?: NSManagedObjectModel): NSMappingModel;
    // ownInstanceProperties
    entityMappings: NSEntityMapping[];
    setEntityMappings(_: NSEntityMapping[])
    // ownInstanceProperties
    entityMappingsByName: Map<string, NSEntityMapping>;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL?: NSURL): NSMappingModel;
  }

  // interface
  class NSMergeConflict extends NSObject {
    // ownInstanceProperties
    cachedSnapshot: Map<string, any>;
    // ownInstanceProperties
    newVersionNumber: number;
    // ownInstanceProperties
    objectSnapshot: Map<string, any>;
    // ownInstanceProperties
    oldVersionNumber: number;
    // ownInstanceProperties
    persistedSnapshot: Map<string, any>;
    // ownInstanceProperties
    sourceObject: NSManagedObject;
    // compoundInstanceMethods
    static createWithSourceNewVersionOldVersionCachedSnapshotPersistedSnapshot(source: NSManagedObject, newVersion: number, oldVersion: number, cachedSnapshot?: Map<string, any>, persistedSnapshot?: Map<string, any>): NSMergeConflict;
  }

  // interface
  class NSMergePolicy extends NSObject {
    // ownInstanceProperties
    mergeType: NSMergePolicyType;
    // ownStaticProperties
    static errorMergePolicy: NSMergePolicy;
    // ownStaticProperties
    static mergeByPropertyObjectTrumpMergePolicy: NSMergePolicy;
    // ownStaticProperties
    static mergeByPropertyStoreTrumpMergePolicy: NSMergePolicy;
    // ownStaticProperties
    static overwriteMergePolicy: NSMergePolicy;
    // ownStaticProperties
    static rollbackMergePolicy: NSMergePolicy;
    // compoundInstanceMethods
    static createWithMergeType(mergeType: NSMergePolicyType): NSMergePolicy;
    // compoundInstanceMethods
    resolveConflictsError(mergeConflicts: any[]): boolean;
    // compoundInstanceMethods
    resolveConstraintConflictsError(constraintConflicts: NSConstraintConflict[]): boolean;
    // compoundInstanceMethods
    resolveOptimisticLockingVersionConflictsError(optimisticLockingConflicts: NSMergeConflict[]): boolean;
  }

  // interface
  class NSMigrationManager extends NSObject {
    // ownInstanceProperties
    currentEntityMapping: NSEntityMapping;
    // ownInstanceProperties
    destinationContext: NSManagedObjectContext;
    // ownInstanceProperties
    destinationModel: NSManagedObjectModel;
    // ownInstanceProperties
    mappingModel: NSMappingModel;
    // ownInstanceProperties
    migrationProgress: number;
    // ownInstanceProperties
    sourceContext: NSManagedObjectContext;
    // ownInstanceProperties
    sourceModel: NSManagedObjectModel;
    // ownInstanceProperties
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>)
    // ownInstanceProperties
    usesStoreSpecificMigrationManager: boolean;
    setUsesStoreSpecificMigrationManager(_: boolean)
    // compoundInstanceMethods
    associateSourceInstanceWithDestinationInstanceForEntityMapping(sourceInstance: NSManagedObject, withDestinationInstance: NSManagedObject, for_: NSEntityMapping): void;
    // compoundInstanceMethods
    cancelMigrationWithError(_: NSError): void;
    // compoundInstanceMethods
    destinationEntityForEntityMapping(_: NSEntityMapping): NSEntityDescription;
    // compoundInstanceMethods
    destinationInstancesForEntityMappingNamedSourceInstances(forEntityMappingName: string, sourceInstances?: NSManagedObject[]): NSManagedObject[];
    // compoundInstanceMethods
    static createWithSourceModelDestinationModel(sourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel): NSMigrationManager;
    // compoundInstanceMethods
    migrateStoreFromURLTypeOptionsWithMappingModelToDestinationURLDestinationTypeDestinationOptionsError(from: NSURL, sourceType: string, options?: Map<any, any>, with_?: NSMappingModel, toDestinationURL?: NSURL, destinationType?: string, destinationOptions?: Map<any, any>): boolean;
    // compoundInstanceMethods
    reset(): void;
    // compoundInstanceMethods
    sourceEntityForEntityMapping(_: NSEntityMapping): NSEntityDescription;
    // compoundInstanceMethods
    sourceInstancesForEntityMappingNamedDestinationInstances(forEntityMappingName: string, destinationInstances?: NSManagedObject[]): NSManagedObject[];
  }

  // interface
  class NSPersistentCloudKitContainer extends NSPersistentContainer {
    // compoundStaticMethods
    //  static persistentContainerWithName(_: string): NSPersistentCloudKitContainer;
    // compoundStaticMethods
    //  static persistentContainerWithNameManagedObjectModel(_: string, managedObjectModel: NSManagedObjectModel): NSPersistentCloudKitContainer;
    // compoundInstanceMethods
    initializeCloudKitSchemaWithOptionsError(error: NSPersistentCloudKitContainerSchemaInitializationOptions): boolean;
    // compoundInstanceMethods
    recordForManagedObjectID(_: NSManagedObjectID): CKRecord;
    // compoundInstanceMethods
    recordIDForManagedObjectID(_: NSManagedObjectID): ID;
    // compoundInstanceMethods
    recordIDsForManagedObjectIDs(_: NSManagedObjectID[]): Map<NSManagedObjectID, ID>;
    // compoundInstanceMethods
    recordsForManagedObjectIDs(_: NSManagedObjectID[]): Map<NSManagedObjectID, CKRecord>;
  }

  // interface
  class NSPersistentCloudKitContainerOptions extends NSObject {
    // ownInstanceProperties
    containerIdentifier: string;
    // compoundInstanceMethods
    static createWithContainerIdentifier(containerIdentifier: string): NSPersistentCloudKitContainerOptions;
  }

  // interface
  class NSPersistentContainer extends NSObject {
    // compoundStaticMethods
    static defaultDirectoryURL(): NSURL;
    // compoundStaticMethods
    static persistentContainerWithName(_: string): NSPersistentContainer;
    // compoundStaticMethods
    static persistentContainerWithNameManagedObjectModel(_: string, managedObjectModel: NSManagedObjectModel): NSPersistentContainer;
    // ownInstanceProperties
    managedObjectModel: NSManagedObjectModel;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    persistentStoreCoordinator: NSPersistentStoreCoordinator;
    // ownInstanceProperties
    persistentStoreDescriptions: NSPersistentStoreDescription[];
    setPersistentStoreDescriptions(_: NSPersistentStoreDescription[])
    // ownInstanceProperties
    viewContext: NSManagedObjectContext;
    // compoundInstanceMethods
    static createWithName(name: string): NSPersistentContainer;
    // compoundInstanceMethods
    static createWithNameManagedObjectModel(name: string, managedObjectModel: NSManagedObjectModel): NSPersistentContainer;
    // compoundInstanceMethods
    loadPersistentStoresWithCompletionHandler(_?: (p1: NSPersistentStoreDescription, p2: NSError) => void): void;
    // compoundInstanceMethods
    newBackgroundContext(): NSManagedObjectContext;
    // compoundInstanceMethods
    performBackgroundTask(_: (p1: NSManagedObjectContext) => void): void;
  }

  // interface
  class NSPersistentHistoryChange extends NSObject {
    // compoundStaticMethods
    static entityDescriptionWithContext(_: NSManagedObjectContext): NSEntityDescription;
    // ownInstanceProperties
    changeID: number;
    // ownInstanceProperties
    changeType: NSPersistentHistoryChangeType;
    // ownInstanceProperties
    changedObjectID: NSManagedObjectID;
    // ownInstanceProperties
    tombstone: Map<any, any>;
    // ownInstanceProperties
    transaction: NSPersistentHistoryTransaction;
    // ownInstanceProperties
    updatedProperties: NSSet<NSPropertyDescription>;
    // ownStaticProperties
    static entityDescription: NSEntityDescription;
    // ownStaticProperties
    static fetchRequest: NSFetchRequest<any>;
  }

  // interface
  class NSPersistentHistoryChangeRequest extends NSPersistentStoreRequest {
    // compoundStaticMethods
    static deleteHistoryBeforeDate(_: Date): NSPersistentHistoryChangeRequest;
    // compoundStaticMethods
    static deleteHistoryBeforeToken(_?: NSPersistentHistoryToken): NSPersistentHistoryChangeRequest;
    // compoundStaticMethods
    static deleteHistoryBeforeTransaction(_?: NSPersistentHistoryTransaction): NSPersistentHistoryChangeRequest;
    // compoundStaticMethods
    static fetchHistoryAfterDate(_: Date): NSPersistentHistoryChangeRequest;
    // compoundStaticMethods
    static fetchHistoryAfterToken(_?: NSPersistentHistoryToken): NSPersistentHistoryChangeRequest;
    // compoundStaticMethods
    static fetchHistoryAfterTransaction(_?: NSPersistentHistoryTransaction): NSPersistentHistoryChangeRequest;
    // compoundStaticMethods
    static fetchHistoryWithFetchRequest(_: NSFetchRequest<any>): NSPersistentHistoryChangeRequest;
    // ownInstanceProperties
    fetchRequest: NSFetchRequest<any>;
    setFetchRequest(_: NSFetchRequest<any>)
    // ownInstanceProperties
    resultType: NSPersistentHistoryResultType;
    setResultType(_: NSPersistentHistoryResultType)
    // ownInstanceProperties
    token: NSPersistentHistoryToken;
  }

  // interface
  class NSPersistentHistoryResult extends NSPersistentStoreResult {
    // ownInstanceProperties
    result: any;
    // ownInstanceProperties
    resultType: NSPersistentHistoryResultType;
  }

  // interface
  class NSPersistentHistoryToken extends NSObject {
  }

  // interface
  class NSPersistentHistoryTransaction extends NSObject {
    // compoundStaticMethods
    static entityDescriptionWithContext(_: NSManagedObjectContext): NSEntityDescription;
    // ownInstanceProperties
    author: string;
    // ownInstanceProperties
    bundleID: string;
    // ownInstanceProperties
    changes: NSPersistentHistoryChange[];
    // ownInstanceProperties
    contextName: string;
    // ownInstanceProperties
    processID: string;
    // ownInstanceProperties
    storeID: string;
    // ownInstanceProperties
    timestamp: Date;
    // ownInstanceProperties
    token: NSPersistentHistoryToken;
    // ownInstanceProperties
    transactionNumber: number;
    // ownStaticProperties
    static entityDescription: NSEntityDescription;
    // ownStaticProperties
    static fetchRequest: NSFetchRequest<any>;
    // compoundInstanceMethods
    objectIDNotification(): NSNotification;
  }

  // interface
  class NSPersistentStore extends NSObject {
    // compoundStaticMethods
    static metadataForPersistentStoreWithURLError(error: NSURL): Map<string, any>;
    // compoundStaticMethods
    static migrationManagerClass(): typeof NSObject;
    // compoundStaticMethods
    static setMetadataForPersistentStoreWithURLError(_?: Map<string, any>, forPersistentStoreAt?: NSURL): boolean;
    // ownInstanceProperties
    URL: NSURL;
    setURL(_: NSURL)
    // ownInstanceProperties
    configurationName: string;
    // ownInstanceProperties
    coreSpotlightExporter: NSCoreDataCoreSpotlightDelegate;
    // ownInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // ownInstanceProperties
    metadata: Map<string, any>;
    setMetadata(_: Map<string, any>)
    // ownInstanceProperties
    options: Map<any, any>;
    // ownInstanceProperties
    persistentStoreCoordinator: NSPersistentStoreCoordinator;
    // ownInstanceProperties
    isReadOnly: boolean;
    setReadOnly(_: boolean)
    // ownInstanceProperties
    type: string;
    // compoundInstanceMethods
    didAddToPersistentStoreCoordinator(_: NSPersistentStoreCoordinator): void;
    // compoundInstanceMethods
    static createWithPersistentStoreCoordinatorConfigurationNameUrlOptions(persistentStoreCoordinator?: NSPersistentStoreCoordinator, configurationName?: string, URL?: NSURL, options?: Map<any, any>): NSPersistentStore;
    // compoundInstanceMethods
    loadMetadata(): boolean;
    // compoundInstanceMethods
    willRemoveFromPersistentStoreCoordinator(_?: NSPersistentStoreCoordinator): void;
  }

  // interface
  class NSPersistentStoreAsynchronousResult extends NSPersistentStoreResult {
    // ownInstanceProperties
    managedObjectContext: NSManagedObjectContext;
    // ownInstanceProperties
    operationError: NSError;
    // ownInstanceProperties
    progress: Progress;
    // compoundInstanceMethods
    cancel(): void;
  }

  // interface
  class NSPersistentStoreCoordinator extends NSObject {
    // compoundStaticMethods
    static elementsDerivedFromExternalRecordURL(fromExternalRecordAt: NSURL): Map<any, any>;
    // compoundStaticMethods
    static metadataForPersistentStoreOfTypeUrlOptionsError(ofType: string, at: NSURL, options?: Map<any, any>): Map<string, any>;
    // compoundStaticMethods
    static registerStoreClassForStoreType(_?: typeof NSObject, forStoreType?: string): void;
    // compoundStaticMethods
    static setMetadataForPersistentStoreOfTypeUrlOptionsError(_?: Map<string, any>, forPersistentStoreOfType?: string, at?: NSURL, options?: Map<any, any>): boolean;
    // ownInstanceProperties
    managedObjectModel: NSManagedObjectModel;
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    persistentStores: NSPersistentStore[];
    // ownStaticProperties
    static registeredStoreTypes: Map<string, NSValue>;
    // compoundInstanceMethods
    URLForPersistentStore(_: NSPersistentStore): NSURL;
    // compoundInstanceMethods
    addPersistentStoreWithDescriptionWithCompletionHandler(_: NSPersistentStoreDescription, completionHandler?: (p1: NSPersistentStoreDescription, p2: NSError) => void): void;
    // compoundInstanceMethods
    addPersistentStoreWithTypeConfigurationUrlOptionsError(ofType: string, configurationName?: string, at?: NSURL, options?: Map<any, any>): NSPersistentStore;
    // compoundInstanceMethods
    currentPersistentHistoryTokenFromStores(_?: any[]): NSPersistentHistoryToken;
    // compoundInstanceMethods
    destroyPersistentStoreAtURLWithTypeOptionsError(at: NSURL, ofType: string, options?: Map<any, any>): boolean;
    // compoundInstanceMethods
    executeRequestWithContextError(withContext: NSPersistentStoreRequest, error: NSManagedObjectContext): any;
    // compoundInstanceMethods
    importStoreWithIdentifierFromExternalRecordsDirectoryToURLOptionsWithTypeError(withIdentifier?: string, fromExternalRecordsDirectoryAt?: NSURL, to?: NSURL, options?: Map<any, any>, ofType?: string): NSPersistentStore;
    // compoundInstanceMethods
    static createWithManagedObjectModel(managedObjectModel: NSManagedObjectModel): NSPersistentStoreCoordinator;
    // compoundInstanceMethods
    managedObjectIDForURIRepresentation(_: NSURL): NSManagedObjectID;
    // compoundInstanceMethods
    metadataForPersistentStore(_: NSPersistentStore): Map<string, any>;
    // compoundInstanceMethods
    migratePersistentStoreToURLOptionsWithTypeError(toURL: NSPersistentStore, options: NSURL, withType?: Map<any, any>, error?: string): NSPersistentStore;
    // compoundInstanceMethods
    performBlock(_: () => void): void;
    // compoundInstanceMethods
    performAndWait(_: () => void): void;
    // compoundInstanceMethods
    persistentStoreForURL(_: NSURL): NSPersistentStore;
    // compoundInstanceMethods
    removePersistentStoreError(_: NSPersistentStore): boolean;
    // compoundInstanceMethods
    replacePersistentStoreAtURLDestinationOptionsWithPersistentStoreFromURLSourceOptionsStoreTypeError(at: NSURL, destinationOptions?: Map<any, any>, withPersistentStoreFrom?: NSURL, sourceOptions?: Map<any, any>, ofType?: string): boolean;
    // compoundInstanceMethods
    setMetadataForPersistentStore(_?: Map<string, any>, forPersistentStore?: NSPersistentStore): void;
    // compoundInstanceMethods
    setURLForPersistentStore(_: NSURL, forPersistentStore: NSPersistentStore): boolean;
  }

  // interface
  class NSPersistentStoreDescription extends NSObject {
    // compoundStaticMethods
    static persistentStoreDescriptionWithURL(_: NSURL): NSPersistentStoreDescription;
    // ownInstanceProperties
    URL: NSURL;
    setURL(_: NSURL)
    // ownInstanceProperties
    cloudKitContainerOptions: NSPersistentCloudKitContainerOptions;
    setCloudKitContainerOptions(_: NSPersistentCloudKitContainerOptions)
    // ownInstanceProperties
    configuration: string;
    setConfiguration(_: string)
    // ownInstanceProperties
    options: Map<string, NSObject>;
    // ownInstanceProperties
    isReadOnly: boolean;
    setReadOnly(_: boolean)
    // ownInstanceProperties
    shouldAddStoreAsynchronously: boolean;
    setShouldAddStoreAsynchronously(_: boolean)
    // ownInstanceProperties
    shouldInferMappingModelAutomatically: boolean;
    setShouldInferMappingModelAutomatically(_: boolean)
    // ownInstanceProperties
    shouldMigrateStoreAutomatically: boolean;
    setShouldMigrateStoreAutomatically(_: boolean)
    // ownInstanceProperties
    sqlitePragmas: Map<string, NSObject>;
    // ownInstanceProperties
    timeout: number;
    setTimeout(_: number)
    // ownInstanceProperties
    type: string;
    setType(_: string)
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): NSPersistentStoreDescription;
    // compoundInstanceMethods
    setOptionForKey(_?: NSObject, forKey?: string): void;
    // compoundInstanceMethods
    setValueForPragmaNamed(_?: NSObject, forPragmaNamed?: string): void;
  }

  // interface
  class NSPersistentStoreRequest extends NSObject {
    // ownInstanceProperties
    affectedStores: NSPersistentStore[];
    setAffectedStores(_: NSPersistentStore[])
    // ownInstanceProperties
    requestType: NSPersistentStoreRequestType;
  }

  // interface
  class NSPersistentStoreResult extends NSObject {
  }

  // interface
  class NSPropertyDescription extends NSObject {
    // ownInstanceProperties
    entity: NSEntityDescription;
    // ownInstanceProperties
    isIndexedBySpotlight: boolean;
    setIndexedBySpotlight(_: boolean)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    isOptional: boolean;
    setOptional(_: boolean)
    // ownInstanceProperties
    renamingIdentifier: string;
    setRenamingIdentifier(_: string)
    // ownInstanceProperties
    isTransient: boolean;
    setTransient(_: boolean)
    // ownInstanceProperties
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>)
    // ownInstanceProperties
    validationPredicates: NSPredicate[];
    // ownInstanceProperties
    validationWarnings: any[];
    // ownInstanceProperties
    versionHash: NSData;
    // ownInstanceProperties
    versionHashModifier: string;
    setVersionHashModifier(_: string)
    // compoundInstanceMethods
    setValidationPredicatesWithValidationWarnings(_?: NSPredicate[], withValidationWarnings?: string[]): void;
  }

  // interface
  class NSPropertyMapping extends NSObject {
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>)
    // ownInstanceProperties
    valueExpression: NSExpression;
    setValueExpression(_: NSExpression)
  }

  // interface
  class NSQueryGenerationToken extends NSObject {
    // ownStaticProperties
    static currentQueryGenerationToken: NSQueryGenerationToken;
  }

  // interface
  class NSRelationshipDescription extends NSPropertyDescription {
    // ownInstanceProperties
    deleteRule: NSDeleteRule;
    setDeleteRule(_: NSDeleteRule)
    // ownInstanceProperties
    destinationEntity: NSEntityDescription;
    setDestinationEntity(_: NSEntityDescription)
    // ownInstanceProperties
    inverseRelationship: NSRelationshipDescription;
    setInverseRelationship(_: NSRelationshipDescription)
    // ownInstanceProperties
    maxCount: number;
    setMaxCount(_: number)
    // ownInstanceProperties
    minCount: number;
    setMinCount(_: number)
    // ownInstanceProperties
    isOrdered: boolean;
    setOrdered(_: boolean)
    // ownInstanceProperties
    isToMany: boolean;
  }

  // interface
  class NSSaveChangesRequest extends NSPersistentStoreRequest {
    // ownInstanceProperties
    deletedObjects: NSSet<NSManagedObject>;
    // ownInstanceProperties
    insertedObjects: NSSet<NSManagedObject>;
    // ownInstanceProperties
    lockedObjects: NSSet<NSManagedObject>;
    // ownInstanceProperties
    updatedObjects: NSSet<NSManagedObject>;
    // compoundInstanceMethods
    static createWithInsertedObjectsUpdatedObjectsDeletedObjectsLockedObjects(insertedObjects?: NSSet<NSManagedObject>, updatedObjects?: NSSet<NSManagedObject>, deletedObjects?: NSSet<NSManagedObject>, lockedObjects?: NSSet<NSManagedObject>): NSSaveChangesRequest;
  }

  // export function CFAbsoluteTimeGetCurrent(): number;

  // export function CFAllocatorAllocate(allocator: any, size: number, hint: number): any;

  // export function CFAllocatorCreate(allocator: any, context: CFAllocatorContext): any;

  // export function CFAllocatorDeallocate(allocator: any, ptr: any): void;

  // export function CFAllocatorGetContext(allocator: any, context: CFAllocatorContext): void;

  // export function CFAllocatorGetDefault(): any;

  // export function CFAllocatorGetPreferredSizeForSize(allocator: any, size: number, hint: number): number;

  // export function CFAllocatorGetTypeID(): number;

  // export function CFAllocatorReallocate(allocator: any, ptr: any, newsize: number, hint: number): any;

  // export function CFAllocatorSetDefault(allocator: any): void;

  // export function CFArrayAppendArray(theArray: any[], otherArray: any[], otherRange: CFRange): void;

  // export function CFArrayAppendValue(theArray: any[], value: any): void;

  // export function CFArrayApplyFunction(theArray: any[], range: CFRange, applier: (p1: any, p2: any) => void, context: any): void;

  // export function CFArrayBSearchValues(theArray: any[], range: CFRange, value: any, comparator: (p1: any, p2: any, p3: any) => CFComparisonResult, context: any): number;

  // export function CFArrayContainsValue(theArray: any[], range: CFRange, value: any): boolean;

  // export function CFArrayCreate(allocator: any, values: any, numValues: number, callBacks: CFArrayCallBacks): any[];

  // export function CFArrayCreateCopy(allocator: any, theArray: any[]): any[];

  // export function CFArrayCreateMutable(allocator: any, capacity: number, callBacks: CFArrayCallBacks): any[];

  // export function CFArrayCreateMutableCopy(allocator: any, capacity: number, theArray: any[]): any[];

  // export function CFArrayExchangeValuesAtIndices(theArray: any[], idx1: number, idx2: number): void;

  // export function CFArrayGetCount(theArray: any[]): number;

  // export function CFArrayGetCountOfValue(theArray: any[], range: CFRange, value: any): number;

  // export function CFArrayGetFirstIndexOfValue(theArray: any[], range: CFRange, value: any): number;

  // export function CFArrayGetLastIndexOfValue(theArray: any[], range: CFRange, value: any): number;

  // export function CFArrayGetTypeID(): number;

  // export function CFArrayGetValueAtIndex(theArray: any[], idx: number): any;

  // export function CFArrayGetValues(theArray: any[], range: CFRange, values: any): void;

  // export function CFArrayInsertValueAtIndex(theArray: any[], idx: number, value: any): void;

  // export function CFArrayRemoveAllValues(theArray: any[]): void;

  // export function CFArrayRemoveValueAtIndex(theArray: any[], idx: number): void;

  // export function CFArrayReplaceValues(theArray: any[], range: CFRange, newValues: any, newCount: number): void;

  // export function CFArraySetValueAtIndex(theArray: any[], idx: number, value: any): void;

  // export function CFArraySortValues(theArray: any[], range: CFRange, comparator: (p1: any, p2: any, p3: any) => CFComparisonResult, context: any): void;

  // export function CFAttributedStringBeginEditing(aStr: NSAttributedString): void;

  // export function CFAttributedStringCreate(alloc: any, str: string, attributes: Map<any, any>): NSAttributedString;

  // export function CFAttributedStringCreateCopy(alloc: any, aStr: NSAttributedString): NSAttributedString;

  // export function CFAttributedStringCreateMutable(alloc: any, maxLength: number): NSAttributedString;

  // export function CFAttributedStringCreateMutableCopy(alloc: any, maxLength: number, aStr: NSAttributedString): NSAttributedString;

  // export function CFAttributedStringCreateWithSubstring(alloc: any, aStr: NSAttributedString, range: CFRange): NSAttributedString;

  // export function CFAttributedStringEndEditing(aStr: NSAttributedString): void;

  // export function CFAttributedStringGetAttribute(aStr: NSAttributedString, loc: number, attrName: string, effectiveRange: CFRange): any;

  // export function CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: NSAttributedString, loc: number, attrName: string, inRange: CFRange, longestEffectiveRange: CFRange): any;

  // export function CFAttributedStringGetAttributes(aStr: NSAttributedString, loc: number, effectiveRange: CFRange): Map<any, any>;

  // export function CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: NSAttributedString, loc: number, inRange: CFRange, longestEffectiveRange: CFRange): Map<any, any>;

  // export function CFAttributedStringGetLength(aStr: NSAttributedString): number;

  // export function CFAttributedStringGetMutableString(aStr: NSAttributedString): string;

  // export function CFAttributedStringGetString(aStr: NSAttributedString): string;

  // export function CFAttributedStringGetTypeID(): number;

  // export function CFAttributedStringRemoveAttribute(aStr: NSAttributedString, range: CFRange, attrName: string): void;

  // export function CFAttributedStringReplaceAttributedString(aStr: NSAttributedString, range: CFRange, replacement: NSAttributedString): void;

  // export function CFAttributedStringReplaceString(aStr: NSAttributedString, range: CFRange, replacement: string): void;

  // export function CFAttributedStringSetAttribute(aStr: NSAttributedString, range: CFRange, attrName: string, value: any): void;

  // export function CFAttributedStringSetAttributes(aStr: NSAttributedString, range: CFRange, replacement: Map<any, any>, clearOtherAttributes: boolean): void;

  // export function CFAutorelease(arg: any): any;

  // export function CFBagAddValue(theBag: any, value: any): void;

  // export function CFBagApplyFunction(theBag: any, applier: (p1: any, p2: any) => void, context: any): void;

  // export function CFBagContainsValue(theBag: any, value: any): boolean;

  // export function CFBagCreate(allocator: any, values: any, numValues: number, callBacks: CFBagCallBacks): any;

  // export function CFBagCreateCopy(allocator: any, theBag: any): any;

  // export function CFBagCreateMutable(allocator: any, capacity: number, callBacks: CFBagCallBacks): any;

  // export function CFBagCreateMutableCopy(allocator: any, capacity: number, theBag: any): any;

  // export function CFBagGetCount(theBag: any): number;

  // export function CFBagGetCountOfValue(theBag: any, value: any): number;

  // export function CFBagGetTypeID(): number;

  // export function CFBagGetValue(theBag: any, value: any): any;

  // export function CFBagGetValueIfPresent(theBag: any, candidate: any, value: any): boolean;

  // export function CFBagGetValues(theBag: any, values: any): void;

  // export function CFBagRemoveAllValues(theBag: any): void;

  // export function CFBagRemoveValue(theBag: any, value: any): void;

  // export function CFBagReplaceValue(theBag: any, value: any): void;

  // export function CFBagSetValue(theBag: any, value: any): void;

  // export function CFBinaryHeapAddValue(heap: any, value: any): void;

  // export function CFBinaryHeapApplyFunction(heap: any, applier: (p1: any, p2: any) => void, context: any): void;

  // export function CFBinaryHeapContainsValue(heap: any, value: any): boolean;

  // export function CFBinaryHeapCreate(allocator: any, capacity: number, callBacks: CFBinaryHeapCallBacks, compareContext: CFBinaryHeapCompareContext): any;

  // export function CFBinaryHeapCreateCopy(allocator: any, capacity: number, heap: any): any;

  // export function CFBinaryHeapGetCount(heap: any): number;

  // export function CFBinaryHeapGetCountOfValue(heap: any, value: any): number;

  // export function CFBinaryHeapGetMinimum(heap: any): any;

  // export function CFBinaryHeapGetMinimumIfPresent(heap: any, value: any): boolean;

  // export function CFBinaryHeapGetTypeID(): number;

  // export function CFBinaryHeapGetValues(heap: any, values: any): void;

  // export function CFBinaryHeapRemoveAllValues(heap: any): void;

  // export function CFBinaryHeapRemoveMinimumValue(heap: any): void;

  // export function CFBitVectorContainsBit(bv: any, range: CFRange, value: number): boolean;

  // export function CFBitVectorCreate(allocator: any, bytes: string | any, numBits: number): any;

  // export function CFBitVectorCreateCopy(allocator: any, bv: any): any;

  // export function CFBitVectorCreateMutable(allocator: any, capacity: number): any;

  // export function CFBitVectorCreateMutableCopy(allocator: any, capacity: number, bv: any): any;

  // export function CFBitVectorFlipBitAtIndex(bv: any, idx: number): void;

  // export function CFBitVectorFlipBits(bv: any, range: CFRange): void;

  // export function CFBitVectorGetBitAtIndex(bv: any, idx: number): number;

  // export function CFBitVectorGetBits(bv: any, range: CFRange, bytes: string | any): void;

  // export function CFBitVectorGetCount(bv: any): number;

  // export function CFBitVectorGetCountOfBit(bv: any, range: CFRange, value: number): number;

  // export function CFBitVectorGetFirstIndexOfBit(bv: any, range: CFRange, value: number): number;

  // export function CFBitVectorGetLastIndexOfBit(bv: any, range: CFRange, value: number): number;

  // export function CFBitVectorGetTypeID(): number;

  // export function CFBitVectorSetAllBits(bv: any, value: number): void;

  // export function CFBitVectorSetBitAtIndex(bv: any, idx: number, value: number): void;

  // export function CFBitVectorSetBits(bv: any, range: CFRange, value: number): void;

  // export function CFBitVectorSetCount(bv: any, count: number): void;

  // export function CFBooleanGetTypeID(): number;

  // export function CFBooleanGetValue(boolean: number): boolean;

  // export function CFBundleCopyAuxiliaryExecutableURL(bundle: any, executableName: string): NSURL;

  // export function CFBundleCopyBuiltInPlugInsURL(bundle: any): NSURL;

  // export function CFBundleCopyBundleLocalizations(bundle: any): any[];

  // export function CFBundleCopyBundleURL(bundle: any): NSURL;

  // export function CFBundleCopyExecutableArchitectures(bundle: any): any[];

  // export function CFBundleCopyExecutableArchitecturesForURL(url: NSURL): any[];

  // export function CFBundleCopyExecutableURL(bundle: any): NSURL;

  // export function CFBundleCopyInfoDictionaryForURL(url: NSURL): Map<any, any>;

  // export function CFBundleCopyInfoDictionaryInDirectory(bundleURL: NSURL): Map<any, any>;

  // export function CFBundleCopyLocalizationsForPreferences(locArray: any[], prefArray: any[]): any[];

  // export function CFBundleCopyLocalizationsForURL(url: NSURL): any[];

  // export function CFBundleCopyLocalizedString(bundle: any, key: string, value: string, tableName: string): string;

  // export function CFBundleCopyPreferredLocalizationsFromArray(locArray: any[]): any[];

  // export function CFBundleCopyPrivateFrameworksURL(bundle: any): NSURL;

  // export function CFBundleCopyResourceURL(bundle: any, resourceName: string, resourceType: string, subDirName: string): NSURL;

  // export function CFBundleCopyResourceURLForLocalization(bundle: any, resourceName: string, resourceType: string, subDirName: string, localizationName: string): NSURL;

  // export function CFBundleCopyResourceURLInDirectory(bundleURL: NSURL, resourceName: string, resourceType: string, subDirName: string): NSURL;

  // export function CFBundleCopyResourceURLsOfType(bundle: any, resourceType: string, subDirName: string): any[];

  // export function CFBundleCopyResourceURLsOfTypeForLocalization(bundle: any, resourceType: string, subDirName: string, localizationName: string): any[];

  // export function CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: NSURL, resourceType: string, subDirName: string): any[];

  // export function CFBundleCopyResourcesDirectoryURL(bundle: any): NSURL;

  // export function CFBundleCopySharedFrameworksURL(bundle: any): NSURL;

  // export function CFBundleCopySharedSupportURL(bundle: any): NSURL;

  // export function CFBundleCopySupportFilesDirectoryURL(bundle: any): NSURL;

  // export function CFBundleCreate(allocator: any, bundleURL: NSURL): any;

  // export function CFBundleCreateBundlesFromDirectory(allocator: any, directoryURL: NSURL, bundleType: string): any[];

  // export function CFBundleGetAllBundles(): any[];

  // export function CFBundleGetBundleWithIdentifier(bundleID: string): any;

  // export function CFBundleGetDataPointerForName(bundle: any, symbolName: string): any;

  // export function CFBundleGetDataPointersForNames(bundle: any, symbolNames: any[], stbl: any): void;

  // export function CFBundleGetDevelopmentRegion(bundle: any): string;

  // export function CFBundleGetFunctionPointerForName(bundle: any, functionName: string): any;

  // export function CFBundleGetFunctionPointersForNames(bundle: any, functionNames: any[], ftbl: any): void;

  // export function CFBundleGetIdentifier(bundle: any): string;

  // export function CFBundleGetInfoDictionary(bundle: any): Map<any, any>;

  // export function CFBundleGetLocalInfoDictionary(bundle: any): Map<any, any>;

  // export function CFBundleGetMainBundle(): any;

  // export function CFBundleGetPackageInfo(bundle: any, packageType: number, packageCreator: number): void;

  // export function CFBundleGetPackageInfoInDirectory(url: NSURL, packageType: number, packageCreator: number): boolean;

  // export function CFBundleGetPlugIn(bundle: any): any;

  // export function CFBundleGetTypeID(): number;

  // export function CFBundleGetValueForInfoDictionaryKey(bundle: any, key: string): any;

  // export function CFBundleGetVersionNumber(bundle: any): number;

  // export function CFBundleIsExecutableLoaded(bundle: any): boolean;

  // export function CFBundleLoadExecutable(bundle: any): boolean;

  // export function CFBundleLoadExecutableAndReturnError(bundle: any, error: Error): boolean;

  // export function CFBundlePreflightExecutable(bundle: any, error: Error): boolean;

  // export function CFBundleUnloadExecutable(bundle: any): void;

  // export function CFCalendarCopyCurrent(): NSCalendar;

  // export function CFCalendarCopyLocale(calendar: NSCalendar): NSLocale;

  // export function CFCalendarCopyTimeZone(calendar: NSCalendar): NSTimeZone;

  // export function CFCalendarCreateWithIdentifier(allocator: any, identifier: any): NSCalendar;

  // export function CFCalendarGetFirstWeekday(calendar: NSCalendar): number;

  // export function CFCalendarGetIdentifier(calendar: NSCalendar): any;

  // export function CFCalendarGetMaximumRangeOfUnit(calendar: NSCalendar, unit: CFCalendarUnit): CFRange;

  // export function CFCalendarGetMinimumDaysInFirstWeek(calendar: NSCalendar): number;

  // export function CFCalendarGetMinimumRangeOfUnit(calendar: NSCalendar, unit: CFCalendarUnit): CFRange;

  // export function CFCalendarGetOrdinalityOfUnit(calendar: NSCalendar, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: number): number;

  // export function CFCalendarGetRangeOfUnit(calendar: NSCalendar, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: number): CFRange;

  // export function CFCalendarGetTimeRangeOfUnit(calendar: NSCalendar, unit: CFCalendarUnit, at: number, startp: number, tip: number): boolean;

  // export function CFCalendarGetTypeID(): number;

  // export function CFCalendarSetFirstWeekday(calendar: NSCalendar, wkdy: number): void;

  // export function CFCalendarSetLocale(calendar: NSCalendar, locale: NSLocale): void;

  // export function CFCalendarSetMinimumDaysInFirstWeek(calendar: NSCalendar, mwd: number): void;

  // export function CFCalendarSetTimeZone(calendar: NSCalendar, tz: NSTimeZone): void;

  // export function CFCharacterSetAddCharactersInRange(theSet: NSCharacterSet, theRange: CFRange): void;

  // export function CFCharacterSetAddCharactersInString(theSet: NSCharacterSet, theString: string): void;

  // export function CFCharacterSetCreateBitmapRepresentation(alloc: any, theSet: NSCharacterSet): NSData;

  // export function CFCharacterSetCreateCopy(alloc: any, theSet: NSCharacterSet): NSCharacterSet;

  // export function CFCharacterSetCreateInvertedSet(alloc: any, theSet: NSCharacterSet): NSCharacterSet;

  // export function CFCharacterSetCreateMutable(alloc: any): NSCharacterSet;

  // export function CFCharacterSetCreateMutableCopy(alloc: any, theSet: NSCharacterSet): NSCharacterSet;

  // export function CFCharacterSetCreateWithBitmapRepresentation(alloc: any, theData: NSData): NSCharacterSet;

  // export function CFCharacterSetCreateWithCharactersInRange(alloc: any, theRange: CFRange): NSCharacterSet;

  // export function CFCharacterSetCreateWithCharactersInString(alloc: any, theString: string): NSCharacterSet;

  // export function CFCharacterSetGetPredefined(theSetIdentifier: CFCharacterSetPredefinedSet): NSCharacterSet;

  // export function CFCharacterSetGetTypeID(): number;

  // export function CFCharacterSetHasMemberInPlane(theSet: NSCharacterSet, thePlane: number): boolean;

  // export function CFCharacterSetIntersect(theSet: NSCharacterSet, theOtherSet: NSCharacterSet): void;

  // export function CFCharacterSetInvert(theSet: NSCharacterSet): void;

  // export function CFCharacterSetIsCharacterMember(theSet: NSCharacterSet, theChar: number): boolean;

  // export function CFCharacterSetIsLongCharacterMember(theSet: NSCharacterSet, theChar: number): boolean;

  // export function CFCharacterSetIsSupersetOfSet(theSet: NSCharacterSet, theOtherset: NSCharacterSet): boolean;

  // export function CFCharacterSetRemoveCharactersInRange(theSet: NSCharacterSet, theRange: CFRange): void;

  // export function CFCharacterSetRemoveCharactersInString(theSet: NSCharacterSet, theString: string): void;

  // export function CFCharacterSetUnion(theSet: NSCharacterSet, theOtherSet: NSCharacterSet): void;

  // export function CFCopyDescription(cf: any): string;

  // export function CFCopyTypeIDDescription(type_id: number): string;

  // export function CFDataAppendBytes(theData: NSData, bytes: string | any, length: number): void;

  // export function CFDataCreate(allocator: any, bytes: string | any, length: number): NSData;

  // export function CFDataCreateCopy(allocator: any, theData: NSData): NSData;

  // export function CFDataCreateMutable(allocator: any, capacity: number): NSData;

  // export function CFDataCreateMutableCopy(allocator: any, capacity: number, theData: NSData): NSData;

  // export function CFDataCreateWithBytesNoCopy(allocator: any, bytes: string | any, length: number, bytesDeallocator: any): NSData;

  // export function CFDataDeleteBytes(theData: NSData, range: CFRange): void;

  // export function CFDataFind(theData: NSData, dataToFind: NSData, searchRange: CFRange, compareOptions: CFDataSearchFlags): CFRange;

  // export function CFDataGetBytePtr(theData: NSData): string;

  // export function CFDataGetBytes(theData: NSData, range: CFRange, buffer: string | any): void;

  // export function CFDataGetLength(theData: NSData): number;

  // export function CFDataGetMutableBytePtr(theData: NSData): string;

  // export function CFDataGetTypeID(): number;

  // export function CFDataIncreaseLength(theData: NSData, extraLength: number): void;

  // export function CFDataReplaceBytes(theData: NSData, range: CFRange, newBytes: string | any, newLength: number): void;

  // export function CFDataSetLength(theData: NSData, length: number): void;

  // export function CFDateCompare(theDate: Date, otherDate: Date, context: any): CFComparisonResult;

  // export function CFDateCreate(allocator: any, at: number): Date;

  // export function CFDateFormatterCopyProperty(formatter: any, key: any): any;

  // export function CFDateFormatterCreate(allocator: any, locale: NSLocale, dateStyle: CFDateFormatterStyle, timeStyle: CFDateFormatterStyle): any;

  // export function CFDateFormatterCreateDateFormatFromTemplate(allocator: any, tmplate: string, options: number, locale: NSLocale): string;

  // export function CFDateFormatterCreateDateFromString(allocator: any, formatter: any, string: string, rangep: CFRange): Date;

  // export function CFDateFormatterCreateISO8601Formatter(allocator: any, formatOptions: CFISO8601DateFormatOptions): any;

  // export function CFDateFormatterCreateStringWithAbsoluteTime(allocator: any, formatter: any, at: number): string;

  // export function CFDateFormatterCreateStringWithDate(allocator: any, formatter: any, date: Date): string;

  // export function CFDateFormatterGetAbsoluteTimeFromString(formatter: any, string: string, rangep: CFRange, atp: number): boolean;

  // export function CFDateFormatterGetDateStyle(formatter: any): CFDateFormatterStyle;

  // export function CFDateFormatterGetFormat(formatter: any): string;

  // export function CFDateFormatterGetLocale(formatter: any): NSLocale;

  // export function CFDateFormatterGetTimeStyle(formatter: any): CFDateFormatterStyle;

  // export function CFDateFormatterGetTypeID(): number;

  // export function CFDateFormatterSetFormat(formatter: any, formatString: string): void;

  // export function CFDateFormatterSetProperty(formatter: any, key: string, value: any): void;

  // export function CFDateGetAbsoluteTime(theDate: Date): number;

  // export function CFDateGetTimeIntervalSinceDate(theDate: Date, otherDate: Date): number;

  // export function CFDateGetTypeID(): number;

  // export function CFDictionaryAddValue(theDict: Map<any, any>, key: any, value: any): void;

  // export function CFDictionaryApplyFunction(theDict: Map<any, any>, applier: (p1: any, p2: any, p3: any) => void, context: any): void;

  // export function CFDictionaryContainsKey(theDict: Map<any, any>, key: any): boolean;

  // export function CFDictionaryContainsValue(theDict: Map<any, any>, value: any): boolean;

  // export function CFDictionaryCreate(allocator: any, keys: any, values: any, numValues: number, keyCallBacks: CFDictionaryKeyCallBacks, valueCallBacks: CFDictionaryValueCallBacks): Map<any, any>;

  // export function CFDictionaryCreateCopy(allocator: any, theDict: Map<any, any>): Map<any, any>;

  // export function CFDictionaryCreateMutable(allocator: any, capacity: number, keyCallBacks: CFDictionaryKeyCallBacks, valueCallBacks: CFDictionaryValueCallBacks): Map<any, any>;

  // export function CFDictionaryCreateMutableCopy(allocator: any, capacity: number, theDict: Map<any, any>): Map<any, any>;

  // export function CFDictionaryGetCount(theDict: Map<any, any>): number;

  // export function CFDictionaryGetCountOfKey(theDict: Map<any, any>, key: any): number;

  // export function CFDictionaryGetCountOfValue(theDict: Map<any, any>, value: any): number;

  // export function CFDictionaryGetKeysAndValues(theDict: Map<any, any>, keys: any, values: any): void;

  // export function CFDictionaryGetTypeID(): number;

  // export function CFDictionaryGetValue(theDict: Map<any, any>, key: any): any;

  // export function CFDictionaryGetValueIfPresent(theDict: Map<any, any>, key: any, value: any): boolean;

  // export function CFDictionaryRemoveAllValues(theDict: Map<any, any>): void;

  // export function CFDictionaryRemoveValue(theDict: Map<any, any>, key: any): void;

  // export function CFDictionaryReplaceValue(theDict: Map<any, any>, key: any, value: any): void;

  // export function CFDictionarySetValue(theDict: Map<any, any>, key: any, value: any): void;

  // export function CFEqual(cf1: any, cf2: any): boolean;

  // export function CFErrorCopyDescription(err: NSError): string;

  // export function CFErrorCopyFailureReason(err: NSError): string;

  // export function CFErrorCopyRecoverySuggestion(err: NSError): string;

  // export function CFErrorCopyUserInfo(err: NSError): Map<any, any>;

  // export function CFErrorCreate(allocator: any, domain: any, code: number, userInfo: Map<any, any>): NSError;

  // export function CFErrorCreateWithUserInfoKeysAndValues(allocator: any, domain: any, code: number, userInfoKeys: any, userInfoValues: any, numUserInfoValues: number): NSError;

  // export function CFErrorGetCode(err: NSError): number;

  // export function CFErrorGetDomain(err: NSError): any;

  // export function CFErrorGetTypeID(): number;

  // export function CFFileDescriptorCreate(allocator: any, fd: number, closeOnInvalidate: boolean, callout: (p1: any, p2: number, p3: any) => void, context: CFFileDescriptorContext): any;

  // export function CFFileDescriptorCreateRunLoopSource(allocator: any, f: any, order: number): any;

  // export function CFFileDescriptorDisableCallBacks(f: any, callBackTypes: number): void;

  // export function CFFileDescriptorEnableCallBacks(f: any, callBackTypes: number): void;

  // export function CFFileDescriptorGetContext(f: any, context: CFFileDescriptorContext): void;

  // export function CFFileDescriptorGetNativeDescriptor(f: any): number;

  // export function CFFileDescriptorGetTypeID(): number;

  // export function CFFileDescriptorInvalidate(f: any): void;

  // export function CFFileDescriptorIsValid(f: any): boolean;

  // export function CFFileSecurityClearProperties(fileSec: NSFileSecurity, clearPropertyMask: CFFileSecurityClearOptions): boolean;

  // export function CFFileSecurityCopyAccessControlList(fileSec: NSFileSecurity, accessControlList: any): boolean;

  // export function CFFileSecurityCopyGroupUUID(fileSec: NSFileSecurity, groupUUID: any): boolean;

  // export function CFFileSecurityCopyOwnerUUID(fileSec: NSFileSecurity, ownerUUID: any): boolean;

  // export function CFFileSecurityCreate(allocator: any): NSFileSecurity;

  // export function CFFileSecurityCreateCopy(allocator: any, fileSec: NSFileSecurity): NSFileSecurity;

  // export function CFFileSecurityGetGroup(fileSec: NSFileSecurity, group: number): boolean;

  // export function CFFileSecurityGetMode(fileSec: NSFileSecurity, mode: number): boolean;

  // export function CFFileSecurityGetOwner(fileSec: NSFileSecurity, owner: number): boolean;

  // export function CFFileSecurityGetTypeID(): number;

  // export function CFFileSecuritySetAccessControlList(fileSec: NSFileSecurity, accessControlList: any): boolean;

  // export function CFFileSecuritySetGroup(fileSec: NSFileSecurity, group: number): boolean;

  // export function CFFileSecuritySetGroupUUID(fileSec: NSFileSecurity, groupUUID: any): boolean;

  // export function CFFileSecuritySetMode(fileSec: NSFileSecurity, mode: number): boolean;

  // export function CFFileSecuritySetOwner(fileSec: NSFileSecurity, owner: number): boolean;

  // export function CFFileSecuritySetOwnerUUID(fileSec: NSFileSecurity, ownerUUID: any): boolean;

  // export function CFGetAllocator(cf: any): any;

  // export function CFGetRetainCount(cf: any): number;

  // export function CFGetTypeID(cf: any): number;

  // export function CFHash(cf: any): number;

  // export function CFLocaleCopyAvailableLocaleIdentifiers(): any[];

  // export function CFLocaleCopyCommonISOCurrencyCodes(): any[];

  // export function CFLocaleCopyCurrent(): NSLocale;

  // export function CFLocaleCopyDisplayNameForPropertyValue(displayLocale: NSLocale, key: any, value: string): string;

  // export function CFLocaleCopyISOCountryCodes(): any[];

  // export function CFLocaleCopyISOCurrencyCodes(): any[];

  // export function CFLocaleCopyISOLanguageCodes(): any[];

  // export function CFLocaleCopyPreferredLanguages(): any[];

  // export function CFLocaleCreate(allocator: any, localeIdentifier: any): NSLocale;

  // export function CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: any, localeIdentifier: string): any;

  // export function CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: any, lcode: number, rcode: number): any;

  // export function CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: any, localeIdentifier: string): any;

  // export function CFLocaleCreateComponentsFromLocaleIdentifier(allocator: any, localeID: any): Map<any, any>;

  // export function CFLocaleCreateCopy(allocator: any, locale: NSLocale): NSLocale;

  // export function CFLocaleCreateLocaleIdentifierFromComponents(allocator: any, dictionary: Map<any, any>): any;

  // export function CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: any, lcid: number): any;

  // export function CFLocaleGetIdentifier(locale: NSLocale): any;

  // export function CFLocaleGetLanguageCharacterDirection(isoLangCode: string): CFLocaleLanguageDirection;

  // export function CFLocaleGetLanguageLineDirection(isoLangCode: string): CFLocaleLanguageDirection;

  // export function CFLocaleGetSystem(): NSLocale;

  // export function CFLocaleGetTypeID(): number;

  // export function CFLocaleGetValue(locale: NSLocale, key: any): any;

  // export function CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: any): number;

  // export function CFMachPortCreate(allocator: any, callout: (p1: NSMachPort, p2: any, p3: number, p4: any) => void, context: CFMachPortContext, shouldFreeInfo: string | any): NSMachPort;

  // export function CFMachPortCreateRunLoopSource(allocator: any, port: NSMachPort, order: number): any;

  // export function CFMachPortCreateWithPort(allocator: any, portNum: number, callout: (p1: NSMachPort, p2: any, p3: number, p4: any) => void, context: CFMachPortContext, shouldFreeInfo: string | any): NSMachPort;

  // export function CFMachPortGetContext(port: NSMachPort, context: CFMachPortContext): void;

  // export function CFMachPortGetInvalidationCallBack(port: NSMachPort): (p1: NSMachPort, p2: any) => void;

  // export function CFMachPortGetPort(port: NSMachPort): number;

  // export function CFMachPortGetTypeID(): number;

  // export function CFMachPortInvalidate(port: NSMachPort): void;

  // export function CFMachPortIsValid(port: NSMachPort): boolean;

  // export function CFMachPortSetInvalidationCallBack(port: NSMachPort, callout: (p1: NSMachPort, p2: any) => void): void;

  // export function CFMakeCollectable(cf: any): any;

  // export function CFMessagePortCreateLocal(allocator: any, name: string, callout: (p1: MessagePort, p2: number, p3: NSData, p4: any) => NSData, context: CFMessagePortContext, shouldFreeInfo: string | any): MessagePort;

  // export function CFMessagePortCreateRemote(allocator: any, name: string): MessagePort;

  // export function CFMessagePortCreateRunLoopSource(allocator: any, local: MessagePort, order: number): any;

  // export function CFMessagePortGetContext(ms: MessagePort, context: CFMessagePortContext): void;

  // export function CFMessagePortGetInvalidationCallBack(ms: MessagePort): (p1: MessagePort, p2: any) => void;

  // export function CFMessagePortGetName(ms: MessagePort): string;

  // export function CFMessagePortGetTypeID(): number;

  // export function CFMessagePortInvalidate(ms: MessagePort): void;

  // export function CFMessagePortIsRemote(ms: MessagePort): boolean;

  // export function CFMessagePortIsValid(ms: MessagePort): boolean;

  // export function CFMessagePortSendRequest(remote: MessagePort, msgid: number, data: NSData, sendTimeout: number, rcvTimeout: number, replyMode: string, returnData: Data): number;

  // export function CFMessagePortSetDispatchQueue(ms: MessagePort, queue: NSObject): void;

  // export function CFMessagePortSetInvalidationCallBack(ms: MessagePort, callout: (p1: MessagePort, p2: any) => void): void;

  // export function CFMessagePortSetName(ms: MessagePort, newName: string): boolean;

  // export function CFNotificationCenterAddObserver(center: any, observer: any, callBack: (p1: any, p2: any, p3: any, p4: any, p5: Map<any, any>) => void, name: string, object_: any, suspensionBehavior: CFNotificationSuspensionBehavior): void;

  // export function CFNotificationCenterGetDarwinNotifyCenter(): any;

  // export function CFNotificationCenterGetDistributedCenter(): any;

  // export function CFNotificationCenterGetLocalCenter(): any;

  // export function CFNotificationCenterGetTypeID(): number;

  // export function CFNotificationCenterPostNotification(center: any, name: any, object_: any, userInfo: Map<any, any>, deliverImmediately: boolean): void;

  // export function CFNotificationCenterPostNotificationWithOptions(center: any, name: any, object_: any, userInfo: Map<any, any>, options: number): void;

  // export function CFNotificationCenterRemoveEveryObserver(center: any, observer: any): void;

  // export function CFNotificationCenterRemoveObserver(center: any, observer: any, name: any, object_: any): void;

  // export function CFNullGetTypeID(): number;

  // export function CFNumberCompare(number: number, otherNumber: number, context: any): CFComparisonResult;

  // export function CFNumberCreate(allocator: any, theType: CFNumberType, valuePtr: any): number;

  // export function CFNumberFormatterCopyProperty(formatter: any, key: any): any;

  // export function CFNumberFormatterCreate(allocator: any, locale: NSLocale, style: CFNumberFormatterStyle): any;

  // export function CFNumberFormatterCreateNumberFromString(allocator: any, formatter: any, string: string, rangep: CFRange, options: number): number;

  // export function CFNumberFormatterCreateStringWithNumber(allocator: any, formatter: any, number: number): string;

  // export function CFNumberFormatterCreateStringWithValue(allocator: any, formatter: any, numberType: CFNumberType, valuePtr: any): string;

  // export function CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: string, defaultFractionDigits: number, roundingIncrement: number): boolean;

  // export function CFNumberFormatterGetFormat(formatter: any): string;

  // export function CFNumberFormatterGetLocale(formatter: any): NSLocale;

  // export function CFNumberFormatterGetStyle(formatter: any): CFNumberFormatterStyle;

  // export function CFNumberFormatterGetTypeID(): number;

  // export function CFNumberFormatterGetValueFromString(formatter: any, string: string, rangep: CFRange, numberType: CFNumberType, valuePtr: any): boolean;

  // export function CFNumberFormatterSetFormat(formatter: any, formatString: string): void;

  // export function CFNumberFormatterSetProperty(formatter: any, key: any, value: any): void;

  // export function CFNumberGetByteSize(number: number): number;

  // export function CFNumberGetType(number: number): CFNumberType;

  // export function CFNumberGetTypeID(): number;

  // export function CFNumberGetValue(number: number, theType: CFNumberType, valuePtr: any): boolean;

  // export function CFNumberIsFloatType(number: number): boolean;

  // export function CFPlugInAddInstanceForFactory(factoryID: any): void;

  // export function CFPlugInCreate(allocator: any, plugInURL: NSURL): any;

  // export function CFPlugInFindFactoriesForPlugInType(typeUUID: any): any[];

  // export function CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: any, plugIn: any): any[];

  // export function CFPlugInGetBundle(plugIn: any): any;

  // export function CFPlugInGetTypeID(): number;

  // export function CFPlugInInstanceCreate(allocator: any, factoryUUID: any, typeUUID: any): any;

  // export function CFPlugInInstanceCreateWithInstanceDataSize(allocator: any, instanceDataSize: number, deallocateInstanceFunction: (p1: any) => void, factoryName: string, getInterfaceFunction: (p1: any, p2: string, p3: any) => boolean): any;

  // export function CFPlugInInstanceGetFactoryName(instance: any): string;

  // export function CFPlugInInstanceGetInstanceData(instance: any): any;

  // export function CFPlugInInstanceGetInterfaceFunctionTable(instance: any, interfaceName: string, ftbl: any): boolean;

  // export function CFPlugInInstanceGetTypeID(): number;

  // export function CFPlugInIsLoadOnDemand(plugIn: any): boolean;

  // export function CFPlugInRegisterFactoryFunction(factoryUUID: any, func: (p1: any, p2: any) => any): boolean;

  // export function CFPlugInRegisterFactoryFunctionByName(factoryUUID: any, plugIn: any, functionName: string): boolean;

  // export function CFPlugInRegisterPlugInType(factoryUUID: any, typeUUID: any): boolean;

  // export function CFPlugInRemoveInstanceForFactory(factoryID: any): void;

  // export function CFPlugInSetLoadOnDemand(plugIn: any, flag: boolean): void;

  // export function CFPlugInUnregisterFactory(factoryUUID: any): boolean;

  // export function CFPlugInUnregisterPlugInType(factoryUUID: any, typeUUID: any): boolean;

  // export function CFPreferencesAddSuitePreferencesToApp(applicationID: string, suiteID: string): void;

  // export function CFPreferencesAppSynchronize(applicationID: string): boolean;

  // export function CFPreferencesAppValueIsForced(key: string, applicationID: string): boolean;

  // export function CFPreferencesCopyAppValue(key: string, applicationID: string): any;

  // export function CFPreferencesCopyKeyList(applicationID: string, userName: string, hostName: string): any[];

  // export function CFPreferencesCopyMultiple(keysToFetch: any[], applicationID: string, userName: string, hostName: string): Map<any, any>;

  // export function CFPreferencesCopyValue(key: string, applicationID: string, userName: string, hostName: string): any;

  // export function CFPreferencesGetAppBooleanValue(key: string, applicationID: string, keyExistsAndHasValidFormat: string | any): boolean;

  // export function CFPreferencesGetAppIntegerValue(key: string, applicationID: string, keyExistsAndHasValidFormat: string | any): number;

  // export function CFPreferencesRemoveSuitePreferencesFromApp(applicationID: string, suiteID: string): void;

  // export function CFPreferencesSetAppValue(key: string, value: any, applicationID: string): void;

  // export function CFPreferencesSetMultiple(keysToSet: Map<any, any>, keysToRemove: any[], applicationID: string, userName: string, hostName: string): void;

  // export function CFPreferencesSetValue(key: string, value: any, applicationID: string, userName: string, hostName: string): void;

  // export function CFPreferencesSynchronize(applicationID: string, userName: string, hostName: string): boolean;

  // export function CFPropertyListCreateData(allocator: any, propertyList: any, format: CFPropertyListFormat, options: number, error: Error): NSData;

  // export function CFPropertyListCreateDeepCopy(allocator: any, propertyList: any, mutabilityOption: number): any;

  // export function CFPropertyListCreateWithData(allocator: any, data: NSData, options: number, format: CFPropertyListFormat, error: Error): any;

  // export function CFPropertyListCreateWithStream(allocator: any, stream: InputStream, streamLength: number, options: number, format: CFPropertyListFormat, error: Error): any;

  // export function CFPropertyListIsValid(plist: any, format: CFPropertyListFormat): boolean;

  // export function CFPropertyListWrite(propertyList: any, stream: OutputStream, format: CFPropertyListFormat, options: number, error: Error): number;

  // export function CFReadStreamClose(stream: InputStream): void;

  // export function CFReadStreamCopyDispatchQueue(stream: InputStream): NSObject;

  // export function CFReadStreamCopyError(stream: InputStream): NSError;

  // export function CFReadStreamCopyProperty(stream: InputStream, propertyName: any): any;

  // export function CFReadStreamCreateWithBytesNoCopy(alloc: any, bytes: string | any, length: number, bytesDeallocator: any): InputStream;

  // export function CFReadStreamCreateWithFile(alloc: any, fileURL: NSURL): InputStream;

  // export function CFReadStreamGetBuffer(stream: InputStream, maxBytesToRead: number, numBytesRead: number): string;

  // export function CFReadStreamGetError(stream: InputStream): CFStreamError;

  // export function CFReadStreamGetStatus(stream: InputStream): CFStreamStatus;

  // export function CFReadStreamGetTypeID(): number;

  // export function CFReadStreamHasBytesAvailable(stream: InputStream): boolean;

  // export function CFReadStreamOpen(stream: InputStream): boolean;

  // export function CFReadStreamRead(stream: InputStream, buffer: string | any, bufferLength: number): number;

  // export function CFReadStreamScheduleWithRunLoop(stream: InputStream, runLoop: any, runLoopMode: any): void;

  // export function CFReadStreamSetClient(stream: InputStream, streamEvents: number, clientCB: (p1: InputStream, p2: CFStreamEventType, p3: any) => void, clientContext: CFStreamClientContext): boolean;

  // export function CFReadStreamSetDispatchQueue(stream: InputStream, q: NSObject): void;

  // export function CFReadStreamSetProperty(stream: InputStream, propertyName: any, propertyValue: any): boolean;

  // export function CFReadStreamUnscheduleFromRunLoop(stream: InputStream, runLoop: any, runLoopMode: any): void;

  // export function CFRelease(cf: any): void;

  // export function CFRetain(cf: any): any;

  // export function CFRunLoopAddCommonMode(rl: any, mode: any): void;

  // export function CFRunLoopAddObserver(rl: any, observer: any, mode: any): void;

  // export function CFRunLoopAddSource(rl: any, source: any, mode: any): void;

  // export function CFRunLoopAddTimer(rl: any, timer: Timer, mode: any): void;

  // export function CFRunLoopContainsObserver(rl: any, observer: any, mode: any): boolean;

  // export function CFRunLoopContainsSource(rl: any, source: any, mode: any): boolean;

  // export function CFRunLoopContainsTimer(rl: any, timer: Timer, mode: any): boolean;

  // export function CFRunLoopCopyAllModes(rl: any): any[];

  // export function CFRunLoopCopyCurrentMode(rl: any): any;

  // export function CFRunLoopGetCurrent(): any;

  // export function CFRunLoopGetMain(): any;

  // export function CFRunLoopGetNextTimerFireDate(rl: any, mode: any): number;

  // export function CFRunLoopGetTypeID(): number;

  // export function CFRunLoopIsWaiting(rl: any): boolean;

  // export function CFRunLoopObserverCreate(allocator: any, activities: number, repeats: boolean, order: number, callout: (p1: any, p2: CFRunLoopActivity, p3: any) => void, context: CFRunLoopObserverContext): any;

  // export function CFRunLoopObserverCreateWithHandler(allocator: any, activities: number, repeats: boolean, order: number, block: (p1: any, p2: CFRunLoopActivity) => void): any;

  // export function CFRunLoopObserverDoesRepeat(observer: any): boolean;

  // export function CFRunLoopObserverGetActivities(observer: any): number;

  // export function CFRunLoopObserverGetContext(observer: any, context: CFRunLoopObserverContext): void;

  // export function CFRunLoopObserverGetOrder(observer: any): number;

  // export function CFRunLoopObserverGetTypeID(): number;

  // export function CFRunLoopObserverInvalidate(observer: any): void;

  // export function CFRunLoopObserverIsValid(observer: any): boolean;

  // export function CFRunLoopPerformBlock(rl: any, mode: any, block: () => void): void;

  // export function CFRunLoopRemoveObserver(rl: any, observer: any, mode: any): void;

  // export function CFRunLoopRemoveSource(rl: any, source: any, mode: any): void;

  // export function CFRunLoopRemoveTimer(rl: any, timer: Timer, mode: any): void;

  // export function CFRunLoopRun(): void;

  // export function CFRunLoopRunInMode(mode: any, seconds: number, returnAfterSourceHandled: boolean): CFRunLoopRunResult;

  // export function CFRunLoopSourceCreate(allocator: any, order: number, context: CFRunLoopSourceContext): any;

  // export function CFRunLoopSourceGetContext(source: any, context: CFRunLoopSourceContext): void;

  // export function CFRunLoopSourceGetOrder(source: any): number;

  // export function CFRunLoopSourceGetTypeID(): number;

  // export function CFRunLoopSourceInvalidate(source: any): void;

  // export function CFRunLoopSourceIsValid(source: any): boolean;

  // export function CFRunLoopSourceSignal(source: any): void;

  // export function CFRunLoopStop(rl: any): void;

  // export function CFRunLoopTimerCreate(allocator: any, fireDate: number, interval: number, flags: number, order: number, callout: (p1: Timer, p2: any) => void, context: CFRunLoopTimerContext): Timer;

  // export function CFRunLoopTimerCreateWithHandler(allocator: any, fireDate: number, interval: number, flags: number, order: number, block: (p1: Timer) => void): Timer;

  // export function CFRunLoopTimerDoesRepeat(timer: Timer): boolean;

  // export function CFRunLoopTimerGetContext(timer: Timer, context: CFRunLoopTimerContext): void;

  // export function CFRunLoopTimerGetInterval(timer: Timer): number;

  // export function CFRunLoopTimerGetNextFireDate(timer: Timer): number;

  // export function CFRunLoopTimerGetOrder(timer: Timer): number;

  // export function CFRunLoopTimerGetTolerance(timer: Timer): number;

  // export function CFRunLoopTimerGetTypeID(): number;

  // export function CFRunLoopTimerInvalidate(timer: Timer): void;

  // export function CFRunLoopTimerIsValid(timer: Timer): boolean;

  // export function CFRunLoopTimerSetNextFireDate(timer: Timer, fireDate: number): void;

  // export function CFRunLoopTimerSetTolerance(timer: Timer, tolerance: number): void;

  // export function CFRunLoopWakeUp(rl: any): void;

  // export function CFSetAddValue(theSet: NSSet<any>, value: any): void;

  // export function CFSetApplyFunction(theSet: NSSet<any>, applier: (p1: any, p2: any) => void, context: any): void;

  // export function CFSetContainsValue(theSet: NSSet<any>, value: any): boolean;

  // export function CFSetCreate(allocator: any, values: any, numValues: number, callBacks: CFSetCallBacks): NSSet<any>;

  // export function CFSetCreateCopy(allocator: any, theSet: NSSet<any>): NSSet<any>;

  // export function CFSetCreateMutable(allocator: any, capacity: number, callBacks: CFSetCallBacks): NSSet<any>;

  // export function CFSetCreateMutableCopy(allocator: any, capacity: number, theSet: NSSet<any>): NSSet<any>;

  // export function CFSetGetCount(theSet: NSSet<any>): number;

  // export function CFSetGetCountOfValue(theSet: NSSet<any>, value: any): number;

  // export function CFSetGetTypeID(): number;

  // export function CFSetGetValue(theSet: NSSet<any>, value: any): any;

  // export function CFSetGetValueIfPresent(theSet: NSSet<any>, candidate: any, value: any): boolean;

  // export function CFSetGetValues(theSet: NSSet<any>, values: any): void;

  // export function CFSetRemoveAllValues(theSet: NSSet<any>): void;

  // export function CFSetRemoveValue(theSet: NSSet<any>, value: any): void;

  // export function CFSetReplaceValue(theSet: NSSet<any>, value: any): void;

  // export function CFSetSetValue(theSet: NSSet<any>, value: any): void;

  // export function CFShow(obj: any): void;

  // export function CFShowStr(str: string): void;

  // export function CFSocketConnectToAddress(s: any, address: NSData, timeout: number): CFSocketError;

  // export function CFSocketCopyAddress(s: any): NSData;

  // export function CFSocketCopyPeerAddress(s: any): NSData;

  // export function CFSocketCopyRegisteredSocketSignature(nameServerSignature: CFSocketSignature, timeout: number, name: string, signature: CFSocketSignature, nameServerAddress: Data): CFSocketError;

  // export function CFSocketCopyRegisteredValue(nameServerSignature: CFSocketSignature, timeout: number, name: string, value: any, nameServerAddress: Data): CFSocketError;

  // export function CFSocketCreate(allocator: any, protocolFamily: number, socketType: number, protocol: number, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext): any;

  // export function CFSocketCreateConnectedToSocketSignature(allocator: any, signature: CFSocketSignature, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext, timeout: number): any;

  // export function CFSocketCreateRunLoopSource(allocator: any, s: any, order: number): any;

  // export function CFSocketCreateWithNative(allocator: any, sock: number, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext): any;

  // export function CFSocketCreateWithSocketSignature(allocator: any, signature: CFSocketSignature, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext): any;

  // export function CFSocketDisableCallBacks(s: any, callBackTypes: number): void;

  // export function CFSocketEnableCallBacks(s: any, callBackTypes: number): void;

  // export function CFSocketGetContext(s: any, context: CFSocketContext): void;

  // export function CFSocketGetDefaultNameRegistryPortNumber(): number;

  // export function CFSocketGetNative(s: any): number;

  // export function CFSocketGetSocketFlags(s: any): number;

  // export function CFSocketGetTypeID(): number;

  // export function CFSocketInvalidate(s: any): void;

  // export function CFSocketIsValid(s: any): boolean;

  // export function CFSocketRegisterSocketSignature(nameServerSignature: CFSocketSignature, timeout: number, name: string, signature: CFSocketSignature): CFSocketError;

  // export function CFSocketRegisterValue(nameServerSignature: CFSocketSignature, timeout: number, name: string, value: any): CFSocketError;

  // export function CFSocketSendData(s: any, address: NSData, data: NSData, timeout: number): CFSocketError;

  // export function CFSocketSetAddress(s: any, address: NSData): CFSocketError;

  // export function CFSocketSetDefaultNameRegistryPortNumber(port: number): void;

  // export function CFSocketSetSocketFlags(s: any, flags: number): void;

  // export function CFSocketUnregister(nameServerSignature: CFSocketSignature, timeout: number, name: string): CFSocketError;

  // export function CFStreamCreateBoundPair(alloc: any, readStream: InputStream, writeStream: OutputStream, transferBufferSize: number): void;

  // export function CFStreamCreatePairWithPeerSocketSignature(alloc: any, signature: CFSocketSignature, readStream: InputStream, writeStream: OutputStream): void;

  // export function CFStreamCreatePairWithSocket(alloc: any, sock: number, readStream: InputStream, writeStream: OutputStream): void;

  // export function CFStreamCreatePairWithSocketToHost(alloc: any, host: string, port: number, readStream: InputStream, writeStream: OutputStream): void;

  // export function CFStringAppend(theString: string, appendedString: string): void;

  // export function CFStringAppendCString(theString: string, cStr: string | any, encoding: number): void;

  // export function CFStringAppendCharacters(theString: string, chars: number, numChars: number): void;

  // export function CFStringAppendPascalString(theString: string, pStr: string | any, encoding: number): void;

  // export function CFStringCapitalize(theString: string, locale: NSLocale): void;

  // export function CFStringCompare(theString1: string, theString2: string, compareOptions: CFStringCompareFlags): CFComparisonResult;

  // export function CFStringCompareWithOptions(theString1: string, theString2: string, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags): CFComparisonResult;

  // export function CFStringCompareWithOptionsAndLocale(theString1: string, theString2: string, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags, locale: NSLocale): CFComparisonResult;

  // export function CFStringConvertEncodingToIANACharSetName(encoding: number): string;

  // export function CFStringConvertEncodingToNSStringEncoding(encoding: number): number;

  // export function CFStringConvertEncodingToWindowsCodepage(encoding: number): number;

  // export function CFStringConvertIANACharSetNameToEncoding(theString: string): number;

  // export function CFStringConvertNSStringEncodingToEncoding(encoding: number): number;

  // export function CFStringConvertWindowsCodepageToEncoding(codepage: number): number;

  // export function CFStringCreateArrayBySeparatingStrings(alloc: any, theString: string, separatorString: string): any[];

  // export function CFStringCreateArrayWithFindResults(alloc: any, theString: string, stringToFind: string, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags): any[];

  // export function CFStringCreateByCombiningStrings(alloc: any, theArray: any[], separatorString: string): string;

  // export function CFStringCreateCopy(alloc: any, theString: string): string;

  // export function CFStringCreateExternalRepresentation(alloc: any, theString: string, encoding: number, lossByte: number): NSData;

  // export function CFStringCreateFromExternalRepresentation(alloc: any, data: NSData, encoding: number): string;

  // export function CFStringCreateMutable(alloc: any, maxLength: number): string;

  // export function CFStringCreateMutableCopy(alloc: any, maxLength: number, theString: string): string;

  // export function CFStringCreateMutableWithExternalCharactersNoCopy(alloc: any, chars: number, numChars: number, capacity: number, externalCharactersAllocator: any): string;

  // export function CFStringCreateWithBytes(alloc: any, bytes: string | any, numBytes: number, encoding: number, isExternalRepresentation: boolean): string;

  // export function CFStringCreateWithBytesNoCopy(alloc: any, bytes: string | any, numBytes: number, encoding: number, isExternalRepresentation: boolean, contentsDeallocator: any): string;

  // export function CFStringCreateWithCString(alloc: any, cStr: string | any, encoding: number): string;

  // export function CFStringCreateWithCStringNoCopy(alloc: any, cStr: string | any, encoding: number, contentsDeallocator: any): string;

  // export function CFStringCreateWithCharacters(alloc: any, chars: number, numChars: number): string;

  // export function CFStringCreateWithCharactersNoCopy(alloc: any, chars: number, numChars: number, contentsDeallocator: any): string;

  // export function CFStringCreateWithFileSystemRepresentation(alloc: any, buffer: string | any): string;

  // export function CFStringCreateWithPascalString(alloc: any, pStr: string | any, encoding: number): string;

  // export function CFStringCreateWithPascalStringNoCopy(alloc: any, pStr: string | any, encoding: number, contentsDeallocator: any): string;

  // export function CFStringCreateWithSubstring(alloc: any, str: string, range: CFRange): string;

  // export function CFStringDelete(theString: string, range: CFRange): void;

  // export function CFStringFind(theString: string, stringToFind: string, compareOptions: CFStringCompareFlags): CFRange;

  // export function CFStringFindAndReplace(theString: string, stringToFind: string, replacementString: string, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags): number;

  // export function CFStringFindCharacterFromSet(theString: string, theSet: NSCharacterSet, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: CFRange): boolean;

  // export function CFStringFindWithOptions(theString: string, stringToFind: string, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: CFRange): boolean;

  // export function CFStringFindWithOptionsAndLocale(theString: string, stringToFind: string, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, locale: NSLocale, result: CFRange): boolean;

  // export function CFStringFold(theString: string, theFlags: CFStringCompareFlags, theLocale: NSLocale): void;

  // export function CFStringGetBytes(theString: string, range: CFRange, encoding: number, lossByte: number, isExternalRepresentation: boolean, buffer: string | any, maxBufLen: number, usedBufLen: number): number;

  // export function CFStringGetCString(theString: string, buffer: string | any, bufferSize: number, encoding: number): boolean;

  // export function CFStringGetCStringPtr(theString: string, encoding: number): string;

  // export function CFStringGetCharacterAtIndex(theString: string, idx: number): number;

  // export function CFStringGetCharacters(theString: string, range: CFRange, buffer: number): void;

  // export function CFStringGetCharactersPtr(theString: string): number;

  // export function CFStringGetDoubleValue(str: string): number;

  // export function CFStringGetFastestEncoding(theString: string): number;

  // export function CFStringGetFileSystemRepresentation(string: string, buffer: string | any, maxBufLen: number): boolean;

  // export function CFStringGetHyphenationLocationBeforeIndex(string: string, location: number, limitRange: CFRange, options: number, locale: NSLocale, character: number): number;

  // export function CFStringGetIntValue(str: string): number;

  // export function CFStringGetLength(theString: string): number;

  // export function CFStringGetLineBounds(theString: string, range: CFRange, lineBeginIndex: number, lineEndIndex: number, contentsEndIndex: number): void;

  // export function CFStringGetListOfAvailableEncodings(): number;

  // export function CFStringGetMaximumSizeForEncoding(length: number, encoding: number): number;

  // export function CFStringGetMaximumSizeOfFileSystemRepresentation(string: string): number;

  // export function CFStringGetMostCompatibleMacStringEncoding(encoding: number): number;

  // export function CFStringGetNameOfEncoding(encoding: number): string;

  // export function CFStringGetParagraphBounds(string: string, range: CFRange, parBeginIndex: number, parEndIndex: number, contentsEndIndex: number): void;

  // export function CFStringGetPascalString(theString: string, buffer: string | any, bufferSize: number, encoding: number): boolean;

  // export function CFStringGetPascalStringPtr(theString: string, encoding: number): string;

  // export function CFStringGetRangeOfComposedCharactersAtIndex(theString: string, theIndex: number): CFRange;

  // export function CFStringGetSmallestEncoding(theString: string): number;

  // export function CFStringGetSystemEncoding(): number;

  // export function CFStringGetTypeID(): number;

  // export function CFStringHasPrefix(theString: string, prefix: string): boolean;

  // export function CFStringHasSuffix(theString: string, suffix: string): boolean;

  // export function CFStringInsert(str: string, idx: number, insertedStr: string): void;

  // export function CFStringIsEncodingAvailable(encoding: number): boolean;

  // export function CFStringIsHyphenationAvailableForLocale(locale: NSLocale): boolean;

  // export function CFStringLowercase(theString: string, locale: NSLocale): void;

  // export function CFStringNormalize(theString: string, theForm: CFStringNormalizationForm): void;

  // export function CFStringPad(theString: string, padString: string, length: number, indexIntoPad: number): void;

  // export function CFStringReplace(theString: string, range: CFRange, replacement: string): void;

  // export function CFStringReplaceAll(theString: string, replacement: string): void;

  // export function CFStringSetExternalCharactersNoCopy(theString: string, chars: number, length: number, capacity: number): void;

  // export function CFStringTokenizerAdvanceToNextToken(tokenizer: any): CFStringTokenizerTokenType;

  // export function CFStringTokenizerCopyBestStringLanguage(string: string, range: CFRange): string;

  // export function CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: any, attribute: number): any;

  // export function CFStringTokenizerCreate(alloc: any, string: string, range: CFRange, options: number, locale: NSLocale): any;

  // export function CFStringTokenizerGetCurrentSubTokens(tokenizer: any, ranges: CFRange, maxRangeLength: number, derivedSubTokens: any[]): number;

  // export function CFStringTokenizerGetCurrentTokenRange(tokenizer: any): CFRange;

  // export function CFStringTokenizerGetTypeID(): number;

  // export function CFStringTokenizerGoToTokenAtIndex(tokenizer: any, index: number): CFStringTokenizerTokenType;

  // export function CFStringTokenizerSetString(tokenizer: any, string: string, range: CFRange): void;

  // export function CFStringTransform(string: string, range: CFRange, transform: string, reverse: boolean): boolean;

  // export function CFStringTrim(theString: string, trimString: string): void;

  // export function CFStringTrimWhitespace(theString: string): void;

  // export function CFStringUppercase(theString: string, locale: NSLocale): void;

  // export function CFTimeZoneCopyAbbreviation(tz: NSTimeZone, at: number): string;

  // export function CFTimeZoneCopyAbbreviationDictionary(): Map<any, any>;

  // export function CFTimeZoneCopyDefault(): NSTimeZone;

  // export function CFTimeZoneCopyKnownNames(): any[];

  // export function CFTimeZoneCopyLocalizedName(tz: NSTimeZone, style: CFTimeZoneNameStyle, locale: NSLocale): string;

  // export function CFTimeZoneCopySystem(): NSTimeZone;

  // export function CFTimeZoneCreate(allocator: any, name: string, data: NSData): NSTimeZone;

  // export function CFTimeZoneCreateWithName(allocator: any, name: string, tryAbbrev: boolean): NSTimeZone;

  // export function CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: any, ti: number): NSTimeZone;

  // export function CFTimeZoneGetData(tz: NSTimeZone): NSData;

  // export function CFTimeZoneGetDaylightSavingTimeOffset(tz: NSTimeZone, at: number): number;

  // export function CFTimeZoneGetName(tz: NSTimeZone): string;

  // export function CFTimeZoneGetNextDaylightSavingTimeTransition(tz: NSTimeZone, at: number): number;

  // export function CFTimeZoneGetSecondsFromGMT(tz: NSTimeZone, at: number): number;

  // export function CFTimeZoneGetTypeID(): number;

  // export function CFTimeZoneIsDaylightSavingTime(tz: NSTimeZone, at: number): boolean;

  // export function CFTimeZoneResetSystem(): void;

  // export function CFTimeZoneSetAbbreviationDictionary(dict: Map<any, any>): void;

  // export function CFTimeZoneSetDefault(tz: NSTimeZone): void;

  // export function CFTreeAppendChild(tree: any, newChild: any): void;

  // export function CFTreeApplyFunctionToChildren(tree: any, applier: (p1: any, p2: any) => void, context: any): void;

  // export function CFTreeCreate(allocator: any, context: CFTreeContext): any;

  // export function CFTreeFindRoot(tree: any): any;

  // export function CFTreeGetChildAtIndex(tree: any, idx: number): any;

  // export function CFTreeGetChildCount(tree: any): number;

  // export function CFTreeGetChildren(tree: any, children: any): void;

  // export function CFTreeGetContext(tree: any, context: CFTreeContext): void;

  // export function CFTreeGetFirstChild(tree: any): any;

  // export function CFTreeGetNextSibling(tree: any): any;

  // export function CFTreeGetParent(tree: any): any;

  // export function CFTreeGetTypeID(): number;

  // export function CFTreeInsertSibling(tree: any, newSibling: any): void;

  // export function CFTreePrependChild(tree: any, newChild: any): void;

  // export function CFTreeRemove(tree: any): void;

  // export function CFTreeRemoveAllChildren(tree: any): void;

  // export function CFTreeSetContext(tree: any, context: CFTreeContext): void;

  // export function CFTreeSortChildren(tree: any, comparator: (p1: any, p2: any, p3: any) => CFComparisonResult, context: any): void;

  // export function CFURLCanBeDecomposed(anURL: NSURL): boolean;

  // export function CFURLClearResourcePropertyCache(url: NSURL): void;

  // export function CFURLClearResourcePropertyCacheForKey(url: NSURL, key: string): void;

  // export function CFURLCopyAbsoluteURL(relativeURL: NSURL): NSURL;

  // export function CFURLCopyFileSystemPath(anURL: NSURL, pathStyle: CFURLPathStyle): string;

  // export function CFURLCopyFragment(anURL: NSURL, charactersToLeaveEscaped: string): string;

  // export function CFURLCopyHostName(anURL: NSURL): string;

  // export function CFURLCopyLastPathComponent(url: NSURL): string;

  // export function CFURLCopyNetLocation(anURL: NSURL): string;

  // export function CFURLCopyPassword(anURL: NSURL): string;

  // export function CFURLCopyPath(anURL: NSURL): string;

  // export function CFURLCopyPathExtension(url: NSURL): string;

  // export function CFURLCopyQueryString(anURL: NSURL, charactersToLeaveEscaped: string): string;

  // export function CFURLCopyResourcePropertiesForKeys(url: NSURL, keys: any[], error: Error): Map<any, any>;

  // export function CFURLCopyResourcePropertyForKey(url: NSURL, key: string, propertyValueTypeRefPtr: any, error: Error): boolean;

  // export function CFURLCopyResourceSpecifier(anURL: NSURL): string;

  // export function CFURLCopyScheme(anURL: NSURL): string;

  // export function CFURLCopyStrictPath(anURL: NSURL, isAbsolute: string | any): string;

  // export function CFURLCopyUserName(anURL: NSURL): string;

  // export function CFURLCreateAbsoluteURLWithBytes(alloc: any, relativeURLBytes: string | any, length: number, encoding: number, baseURL: NSURL, useCompatibilityMode: boolean): NSURL;

  // export function CFURLCreateBookmarkData(allocator: any, url: NSURL, options: CFURLBookmarkCreationOptions, resourcePropertiesToInclude: any[], relativeToURL: NSURL, error: Error): NSData;

  // export function CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: any, aliasRecordDataRef: NSData): NSData;

  // export function CFURLCreateBookmarkDataFromFile(allocator: any, fileURL: NSURL, errorRef: Error): NSData;

  // export function CFURLCreateByResolvingBookmarkData(allocator: any, bookmark: NSData, options: CFURLBookmarkResolutionOptions, relativeToURL: NSURL, resourcePropertiesToInclude: any[], isStale: string | any, error: Error): NSURL;

  // export function CFURLCreateCopyAppendingPathComponent(allocator: any, url: NSURL, pathComponent: string, isDirectory: boolean): NSURL;

  // export function CFURLCreateCopyAppendingPathExtension(allocator: any, url: NSURL, extension: string): NSURL;

  // export function CFURLCreateCopyDeletingLastPathComponent(allocator: any, url: NSURL): NSURL;

  // export function CFURLCreateCopyDeletingPathExtension(allocator: any, url: NSURL): NSURL;

  // export function CFURLCreateData(allocator: any, url: NSURL, encoding: number, escapeWhitespace: boolean): NSData;

  // export function CFURLCreateFilePathURL(allocator: any, url: NSURL, error: Error): NSURL;

  // export function CFURLCreateFileReferenceURL(allocator: any, url: NSURL, error: Error): NSURL;

  // export function CFURLCreateFromFileSystemRepresentation(allocator: any, buffer: string | any, bufLen: number, isDirectory: boolean): NSURL;

  // export function CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: any, buffer: string | any, bufLen: number, isDirectory: boolean, baseURL: NSURL): NSURL;

  // export function CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: any, resourcePropertiesToReturn: any[], bookmark: NSData): Map<any, any>;

  // export function CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: any, resourcePropertyKey: string, bookmark: NSData): any;

  // export function CFURLCreateStringByReplacingPercentEscapes(allocator: any, originalString: string, charactersToLeaveEscaped: string): string;

  // export function CFURLCreateWithBytes(allocator: any, URLBytes: string | any, length: number, encoding: number, baseURL: NSURL): NSURL;

  // export function CFURLCreateWithFileSystemPath(allocator: any, filePath: string, pathStyle: CFURLPathStyle, isDirectory: boolean): NSURL;

  // export function CFURLCreateWithFileSystemPathRelativeToBase(allocator: any, filePath: string, pathStyle: CFURLPathStyle, isDirectory: boolean, baseURL: NSURL): NSURL;

  // export function CFURLCreateWithString(allocator: any, URLString: string, baseURL: NSURL): NSURL;

  // export function CFURLEnumeratorCreateForDirectoryURL(alloc: any, directoryURL: NSURL, option: CFURLEnumeratorOptions, propertyKeys: any[]): any;

  // export function CFURLEnumeratorCreateForMountedVolumes(alloc: any, option: CFURLEnumeratorOptions, propertyKeys: any[]): any;

  // export function CFURLEnumeratorGetDescendentLevel(enumerator: any): number;

  // export function CFURLEnumeratorGetNextURL(enumerator: any, url: NSURL, error: Error): CFURLEnumeratorResult;

  // export function CFURLEnumeratorGetTypeID(): number;

  // export function CFURLEnumeratorSkipDescendents(enumerator: any): void;

  // export function CFURLGetBaseURL(anURL: NSURL): NSURL;

  // export function CFURLGetByteRangeForComponent(url: NSURL, component: CFURLComponentType, rangeIncludingSeparators: CFRange): CFRange;

  // export function CFURLGetBytes(url: NSURL, buffer: string | any, bufferLength: number): number;

  // export function CFURLGetFileSystemRepresentation(url: NSURL, resolveAgainstBase: boolean, buffer: string | any, maxBufLen: number): boolean;

  // export function CFURLGetPortNumber(anURL: NSURL): number;

  // export function CFURLGetString(anURL: NSURL): string;

  // export function CFURLGetTypeID(): number;

  // export function CFURLHasDirectoryPath(anURL: NSURL): boolean;

  // export function CFURLIsFileReferenceURL(url: NSURL): boolean;

  // export function CFURLResourceIsReachable(url: NSURL, error: Error): boolean;

  // export function CFURLSetResourcePropertiesForKeys(url: NSURL, keyedPropertyValues: Map<any, any>, error: Error): boolean;

  // export function CFURLSetResourcePropertyForKey(url: NSURL, key: string, propertyValue: any, error: Error): boolean;

  // export function CFURLSetTemporaryResourcePropertyForKey(url: NSURL, key: string, propertyValue: any): void;

  // export function CFURLStartAccessingSecurityScopedResource(url: NSURL): boolean;

  // export function CFURLStopAccessingSecurityScopedResource(url: NSURL): void;

  // export function CFURLWriteBookmarkDataToFile(bookmarkRef: NSData, fileURL: NSURL, options: number, errorRef: Error): boolean;

  // export function CFUUIDCreate(alloc: any): any;

  // export function CFUUIDCreateFromString(alloc: any, uuidStr: string): any;

  // export function CFUUIDCreateFromUUIDBytes(alloc: any, bytes: CFUUIDBytes): any;

  // export function CFUUIDCreateString(alloc: any, uuid: any): string;

  // export function CFUUIDCreateWithBytes(alloc: any, byte0: number, byte1: number, byte2: number, byte3: number, byte4: number, byte5: number, byte6: number, byte7: number, byte8: number, byte9: number, byte10: number, byte11: number, byte12: number, byte13: number, byte14: number, byte15: number): any;

  // export function CFUUIDGetConstantUUIDWithBytes(alloc: any, byte0: number, byte1: number, byte2: number, byte3: number, byte4: number, byte5: number, byte6: number, byte7: number, byte8: number, byte9: number, byte10: number, byte11: number, byte12: number, byte13: number, byte14: number, byte15: number): any;

  // export function CFUUIDGetTypeID(): number;

  // export function CFUUIDGetUUIDBytes(uuid: any): CFUUIDBytes;

  // export function CFUserNotificationCancel(userNotification: any): number;

  // export function CFUserNotificationCreate(allocator: any, timeout: number, flags: number, error: number, dictionary: Map<any, any>): any;

  // export function CFUserNotificationCreateRunLoopSource(allocator: any, userNotification: any, callout: (p1: any, p2: number) => void, order: number): any;

  // export function CFUserNotificationDisplayAlert(timeout: number, flags: number, iconURL: NSURL, soundURL: NSURL, localizationURL: NSURL, alertHeader: string, alertMessage: string, defaultButtonTitle: string, alternateButtonTitle: string, otherButtonTitle: string, responseFlags: number): number;

  // export function CFUserNotificationDisplayNotice(timeout: number, flags: number, iconURL: NSURL, soundURL: NSURL, localizationURL: NSURL, alertHeader: string, alertMessage: string, defaultButtonTitle: string): number;

  // export function CFUserNotificationGetResponseDictionary(userNotification: any): Map<any, any>;

  // export function CFUserNotificationGetResponseValue(userNotification: any, key: string, idx: number): string;

  // export function CFUserNotificationGetTypeID(): number;

  // export function CFUserNotificationReceiveResponse(userNotification: any, timeout: number, responseFlags: number): number;

  // export function CFUserNotificationUpdate(userNotification: any, timeout: number, flags: number, dictionary: Map<any, any>): number;

  // export function CFWriteStreamCanAcceptBytes(stream: OutputStream): boolean;

  // export function CFWriteStreamClose(stream: OutputStream): void;

  // export function CFWriteStreamCopyDispatchQueue(stream: OutputStream): NSObject;

  // export function CFWriteStreamCopyError(stream: OutputStream): NSError;

  // export function CFWriteStreamCopyProperty(stream: OutputStream, propertyName: any): any;

  // export function CFWriteStreamCreateWithAllocatedBuffers(alloc: any, bufferAllocator: any): OutputStream;

  // export function CFWriteStreamCreateWithBuffer(alloc: any, buffer: string | any, bufferCapacity: number): OutputStream;

  // export function CFWriteStreamCreateWithFile(alloc: any, fileURL: NSURL): OutputStream;

  // export function CFWriteStreamGetError(stream: OutputStream): CFStreamError;

  // export function CFWriteStreamGetStatus(stream: OutputStream): CFStreamStatus;

  // export function CFWriteStreamGetTypeID(): number;

  // export function CFWriteStreamOpen(stream: OutputStream): boolean;

  // export function CFWriteStreamScheduleWithRunLoop(stream: OutputStream, runLoop: any, runLoopMode: any): void;

  // export function CFWriteStreamSetClient(stream: OutputStream, streamEvents: number, clientCB: (p1: OutputStream, p2: CFStreamEventType, p3: any) => void, clientContext: CFStreamClientContext): boolean;

  // export function CFWriteStreamSetDispatchQueue(stream: OutputStream, q: NSObject): void;

  // export function CFWriteStreamSetProperty(stream: OutputStream, propertyName: any, propertyValue: any): boolean;

  // export function CFWriteStreamUnscheduleFromRunLoop(stream: OutputStream, runLoop: any, runLoopMode: any): void;

  // export function CFWriteStreamWrite(stream: OutputStream, buffer: string | any, bufferLength: number): number;

  // export function CFXMLCreateStringByEscapingEntities(allocator: any, string: string, entitiesDictionary: Map<any, any>): string;

  // export function CFXMLCreateStringByUnescapingEntities(allocator: any, string: string, entitiesDictionary: Map<any, any>): string;

  // export function __CFRangeMake(loc: number, len: number): CFRange;

  // export function __CFStringMakeConstantString(cStr: string | any): string;

  // export function CGAcquireDisplayFadeReservation(seconds: number, token: number): CGError;

  // export function CGAffineTransformConcat(t1: CGAffineTransform, t2: CGAffineTransform): CGAffineTransform;

  // export function CGAffineTransformEqualToTransform(t1: CGAffineTransform, t2: CGAffineTransform): boolean;

  // export function CGAffineTransformInvert(t: CGAffineTransform): CGAffineTransform;

  // export function CGAffineTransformIsIdentity(t: CGAffineTransform): boolean;

  // export function CGAffineTransformMake(a: number, b: number, c: number, d: number, tx: number, ty: number): CGAffineTransform;

  // export function CGAffineTransformMakeRotation(angle: number): CGAffineTransform;

  // export function CGAffineTransformMakeScale(sx: number, sy: number): CGAffineTransform;

  // export function CGAffineTransformMakeTranslation(tx: number, ty: number): CGAffineTransform;

  // export function CGAffineTransformRotate(t: CGAffineTransform, angle: number): CGAffineTransform;

  // export function CGAffineTransformScale(t: CGAffineTransform, sx: number, sy: number): CGAffineTransform;

  // export function CGAffineTransformTranslate(t: CGAffineTransform, tx: number, ty: number): CGAffineTransform;

  // export function CGAssociateMouseAndMouseCursorPosition(connected: number): CGError;

  // export function CGBeginDisplayConfiguration(config: any): CGError;

  // export function CGBitmapContextCreate(data: any, width: number, height: number, bitsPerComponent: number, bytesPerRow: number, space: any, bitmapInfo: number): any;

  // export function CGBitmapContextCreateImage(context: any): any;

  // export function CGBitmapContextCreateWithData(data: any, width: number, height: number, bitsPerComponent: number, bytesPerRow: number, space: any, bitmapInfo: number, releaseCallback: (p1: any, p2: any) => void, releaseInfo: any): any;

  // export function CGBitmapContextGetAlphaInfo(context: any): CGImageAlphaInfo;

  // export function CGBitmapContextGetBitmapInfo(context: any): CGBitmapInfo;

  // export function CGBitmapContextGetBitsPerComponent(context: any): number;

  // export function CGBitmapContextGetBitsPerPixel(context: any): number;

  // export function CGBitmapContextGetBytesPerRow(context: any): number;

  // export function CGBitmapContextGetColorSpace(context: any): any;

  // export function CGBitmapContextGetData(context: any): any;

  // export function CGBitmapContextGetHeight(context: any): number;

  // export function CGBitmapContextGetWidth(context: any): number;

  // export function CGCancelDisplayConfiguration(config: any): CGError;

  // export function CGCaptureAllDisplays(): CGError;

  // export function CGCaptureAllDisplaysWithOptions(options: CGCaptureOptions): CGError;

  // export function CGColorConversionInfoCreate(src: any, dst: any): any;

  // export function CGColorConversionInfoCreateWithOptions(src: any, dst: any, options: Map<any, any>): any;

  // export function typeID(): number;

  // export function CGColorCreate(space: any, components: number): any;

  // export function CGColorCreateCopy(color: any): any;

  // export function CGColorCreateCopyByMatchingToColorSpace(p1: any, intent: CGColorRenderingIntent, color: any, options: Map<any, any>): any;

  // export function CGColorCreateCopyWithAlpha(color: any, alpha: number): any;

  // export function CGColorCreateGenericCMYK(cyan: number, magenta: number, yellow: number, black: number, alpha: number): any;

  // export function CGColorCreateGenericGray(gray: number, alpha: number): any;

  // export function CGColorCreateGenericGrayGamma2_2(gray: number, alpha: number): any;

  // export function CGColorCreateGenericRGB(red: number, green: number, blue: number, alpha: number): any;

  // export function CGColorCreateSRGB(red: number, green: number, blue: number, alpha: number): any;

  // export function CGColorCreateWithPattern(space: any, pattern: any, components: number): any;

  // export function CGColorEqualToColor(color1: any, color2: any): boolean;

  // export function CGColorGetAlpha(color: any): number;

  // export function CGColorGetColorSpace(color: any): any;

  // export function CGColorGetComponents(color: any): number;

  // export function CGColorGetConstantColor(colorName: string): any;

  // export function CGColorGetNumberOfComponents(color: any): number;

  // export function CGColorGetPattern(color: any): any;

  // export function typeID(): number;

  // export function CGColorRelease(color: any): void;

  // export function CGColorRetain(color: any): any;

  // export function CGColorSpaceCopyICCData(space: any): NSData;

  // export function CGColorSpaceCopyName(space: any): string;

  // export function CGColorSpaceCopyPropertyList(space: any): any;

  // export function CGColorSpaceCreateCalibratedGray(whitePoint: number, blackPoint: number, gamma: number): any;

  // export function CGColorSpaceCreateCalibratedRGB(whitePoint: number, blackPoint: number, gamma: number, matrix: number): any;

  // export function CGColorSpaceCreateDeviceCMYK(): any;

  // export function CGColorSpaceCreateDeviceGray(): any;

  // export function CGColorSpaceCreateDeviceRGB(): any;

  // export function CGColorSpaceCreateICCBased(nComponents: number, range: number, profile: any, alternate: any): any;

  // export function CGColorSpaceCreateIndexed(baseSpace: any, lastIndex: number, colorTable: string | any): any;

  // export function CGColorSpaceCreateLab(whitePoint: number, blackPoint: number, range: number): any;

  // export function CGColorSpaceCreatePattern(baseSpace: any): any;

  // export function CGColorSpaceCreateWithICCData(data: any): any;

  // export function CGColorSpaceCreateWithName(name: string): any;

  // export function CGColorSpaceCreateWithPlatformColorSpace(ref: any): any;

  // export function CGColorSpaceCreateWithPropertyList(plist: any): any;

  // export function CGColorSpaceGetBaseColorSpace(space: any): any;

  // export function CGColorSpaceGetColorTable(space: any, table: string | any): void;

  // export function CGColorSpaceGetColorTableCount(space: any): number;

  // export function CGColorSpaceGetModel(space: any): CGColorSpaceModel;

  // export function CGColorSpaceGetName(space: any): string;

  // export function CGColorSpaceGetNumberOfComponents(space: any): number;

  // export function typeID(): number;

  // export function CGColorSpaceIsWideGamutRGB(p1: any): boolean;

  // export function CGColorSpaceRelease(space: any): void;

  // export function CGColorSpaceRetain(space: any): any;

  // export function CGColorSpaceSupportsOutput(space: any): boolean;

  // export function CGCompleteDisplayConfiguration(config: any, option: CGConfigureOption): CGError;

  // export function CGConfigureDisplayFadeEffect(config: any, fadeOutSeconds: number, fadeInSeconds: number, fadeRed: number, fadeGreen: number, fadeBlue: number): CGError;

  // export function CGConfigureDisplayMirrorOfDisplay(config: any, display: number, master: number): CGError;

  // export function CGConfigureDisplayOrigin(config: any, display: number, x: number, y: number): CGError;

  // export function CGConfigureDisplayStereoOperation(config: any, display: number, stereo: number, forceBlueLine: number): CGError;

  // export function CGConfigureDisplayWithDisplayMode(config: any, display: number, mode: any, options: Map<any, any>): CGError;

  // export function CGContextAddArc(c: any, x: number, y: number, radius: number, startAngle: number, endAngle: number, clockwise: number): void;

  // export function CGContextAddArcToPoint(c: any, x1: number, y1: number, x2: number, y2: number, radius: number): void;

  // export function CGContextAddCurveToPoint(c: any, cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

  // export function CGContextAddEllipseInRect(c: any, rect: CGRect): void;

  // export function CGContextAddLineToPoint(c: any, x: number, y: number): void;

  // export function CGContextAddLines(c: any, points: NSPoint, count: number): void;

  // export function CGContextAddPath(c: any, path: any): void;

  // export function CGContextAddQuadCurveToPoint(c: any, cpx: number, cpy: number, x: number, y: number): void;

  // export function CGContextAddRect(c: any, rect: CGRect): void;

  // export function CGContextAddRects(c: any, rects: NSRect, count: number): void;

  // export function CGContextBeginPage(c: any, mediaBox: NSRect): void;

  // export function CGContextBeginPath(c: any): void;

  // export function CGContextBeginTransparencyLayer(c: any, auxiliaryInfo: Map<any, any>): void;

  // export function CGContextBeginTransparencyLayerWithRect(c: any, rect: CGRect, auxInfo: Map<any, any>): void;

  // export function CGContextClearRect(c: any, rect: CGRect): void;

  // export function CGContextClip(c: any): void;

  // export function CGContextClipToMask(c: any, rect: CGRect, mask: any): void;

  // export function CGContextClipToRect(c: any, rect: CGRect): void;

  // export function CGContextClipToRects(c: any, rects: NSRect, count: number): void;

  // export function CGContextClosePath(c: any): void;

  // export function CGContextConcatCTM(c: any, transform: CGAffineTransform): void;

  // export function CGContextConvertPointToDeviceSpace(c: any, point: CGPoint): CGPoint;

  // export function CGContextConvertPointToUserSpace(c: any, point: CGPoint): CGPoint;

  // export function CGContextConvertRectToDeviceSpace(c: any, rect: CGRect): CGRect;

  // export function CGContextConvertRectToUserSpace(c: any, rect: CGRect): CGRect;

  // export function CGContextConvertSizeToDeviceSpace(c: any, size: CGSize): CGSize;

  // export function CGContextConvertSizeToUserSpace(c: any, size: CGSize): CGSize;

  // export function CGContextCopyPath(c: any): any;

  // export function CGContextDrawImage(c: any, rect: CGRect, image: any): void;

  // export function CGContextDrawLayerAtPoint(context: any, point: CGPoint, layer: any): void;

  // export function CGContextDrawLayerInRect(context: any, rect: CGRect, layer: any): void;

  // export function CGContextDrawLinearGradient(c: any, gradient: any, startPoint: CGPoint, endPoint: CGPoint, options: CGGradientDrawingOptions): void;

  // export function CGContextDrawPDFPage(c: any, page: any): void;

  // export function CGContextDrawPath(c: any, mode: CGPathDrawingMode): void;

  // export function CGContextDrawRadialGradient(c: any, gradient: any, startCenter: CGPoint, startRadius: number, endCenter: CGPoint, endRadius: number, options: CGGradientDrawingOptions): void;

  // export function CGContextDrawShading(c: any, shading: any): void;

  // export function CGContextDrawTiledImage(c: any, rect: CGRect, image: any): void;

  // export function CGContextEOClip(c: any): void;

  // export function CGContextEOFillPath(c: any): void;

  // export function CGContextEndPage(c: any): void;

  // export function CGContextEndTransparencyLayer(c: any): void;

  // export function CGContextFillEllipseInRect(c: any, rect: CGRect): void;

  // export function CGContextFillPath(c: any): void;

  // export function CGContextFillRect(c: any, rect: CGRect): void;

  // export function CGContextFillRects(c: any, rects: NSRect, count: number): void;

  // export function CGContextFlush(c: any): void;

  // export function CGContextGetCTM(c: any): CGAffineTransform;

  // export function CGContextGetClipBoundingBox(c: any): CGRect;

  // export function CGContextGetInterpolationQuality(c: any): CGInterpolationQuality;

  // export function CGContextGetPathBoundingBox(c: any): CGRect;

  // export function CGContextGetPathCurrentPoint(c: any): CGPoint;

  // export function CGContextGetTextMatrix(c: any): CGAffineTransform;

  // export function CGContextGetTextPosition(c: any): CGPoint;

  // export function typeID(): number;

  // export function CGContextGetUserSpaceToDeviceSpaceTransform(c: any): CGAffineTransform;

  // export function CGContextIsPathEmpty(c: any): boolean;

  // export function CGContextMoveToPoint(c: any, x: number, y: number): void;

  // export function CGContextPathContainsPoint(c: any, point: CGPoint, mode: CGPathDrawingMode): boolean;

  // export function CGContextRelease(c: any): void;

  // export function CGContextReplacePathWithStrokedPath(c: any): void;

  // export function CGContextResetClip(c: any): void;

  // export function CGContextRestoreGState(c: any): void;

  // export function CGContextRetain(c: any): any;

  // export function CGContextRotateCTM(c: any, angle: number): void;

  // export function CGContextSaveGState(c: any): void;

  // export function CGContextScaleCTM(c: any, sx: number, sy: number): void;

  // export function CGContextSetAllowsAntialiasing(c: any, allowsAntialiasing: boolean): void;

  // export function CGContextSetAllowsFontSmoothing(c: any, allowsFontSmoothing: boolean): void;

  // export function CGContextSetAllowsFontSubpixelPositioning(c: any, allowsFontSubpixelPositioning: boolean): void;

  // export function CGContextSetAllowsFontSubpixelQuantization(c: any, allowsFontSubpixelQuantization: boolean): void;

  // export function CGContextSetAlpha(c: any, alpha: number): void;

  // export function CGContextSetBlendMode(c: any, mode: CGBlendMode): void;

  // export function CGContextSetCMYKFillColor(c: any, cyan: number, magenta: number, yellow: number, black: number, alpha: number): void;

  // export function CGContextSetCMYKStrokeColor(c: any, cyan: number, magenta: number, yellow: number, black: number, alpha: number): void;

  // export function CGContextSetCharacterSpacing(c: any, spacing: number): void;

  // export function CGContextSetFillColor(c: any, components: number): void;

  // export function CGContextSetFillColorSpace(c: any, space: any): void;

  // export function CGContextSetFillColorWithColor(c: any, color: any): void;

  // export function CGContextSetFillPattern(c: any, pattern: any, components: number): void;

  // export function CGContextSetFlatness(c: any, flatness: number): void;

  // export function CGContextSetFont(c: any, font: any): void;

  // export function CGContextSetFontSize(c: any, size: number): void;

  // export function CGContextSetGrayFillColor(c: any, gray: number, alpha: number): void;

  // export function CGContextSetGrayStrokeColor(c: any, gray: number, alpha: number): void;

  // export function CGContextSetInterpolationQuality(c: any, quality: CGInterpolationQuality): void;

  // export function CGContextSetLineCap(c: any, cap: CGLineCap): void;

  // export function CGContextSetLineDash(c: any, phase: number, lengths: number, count: number): void;

  // export function CGContextSetLineJoin(c: any, join: CGLineJoin): void;

  // export function CGContextSetLineWidth(c: any, width: number): void;

  // export function CGContextSetMiterLimit(c: any, limit: number): void;

  // export function CGContextSetPatternPhase(c: any, phase: CGSize): void;

  // export function CGContextSetRGBFillColor(c: any, red: number, green: number, blue: number, alpha: number): void;

  // export function CGContextSetRGBStrokeColor(c: any, red: number, green: number, blue: number, alpha: number): void;

  // export function CGContextSetRenderingIntent(c: any, intent: CGColorRenderingIntent): void;

  // export function CGContextSetShadow(c: any, offset: CGSize, blur: number): void;

  // export function CGContextSetShadowWithColor(c: any, offset: CGSize, blur: number, color: any): void;

  // export function CGContextSetShouldAntialias(c: any, shouldAntialias: boolean): void;

  // export function CGContextSetShouldSmoothFonts(c: any, shouldSmoothFonts: boolean): void;

  // export function CGContextSetShouldSubpixelPositionFonts(c: any, shouldSubpixelPositionFonts: boolean): void;

  // export function CGContextSetShouldSubpixelQuantizeFonts(c: any, shouldSubpixelQuantizeFonts: boolean): void;

  // export function CGContextSetStrokeColor(c: any, components: number): void;

  // export function CGContextSetStrokeColorSpace(c: any, space: any): void;

  // export function CGContextSetStrokeColorWithColor(c: any, color: any): void;

  // export function CGContextSetStrokePattern(c: any, pattern: any, components: number): void;

  // export function CGContextSetTextDrawingMode(c: any, mode: CGTextDrawingMode): void;

  // export function CGContextSetTextMatrix(c: any, t: CGAffineTransform): void;

  // export function CGContextSetTextPosition(c: any, x: number, y: number): void;

  // export function CGContextShowGlyphsAtPositions(c: any, glyphs: number, Lpositions: NSPoint, count: number): void;

  // export function CGContextStrokeEllipseInRect(c: any, rect: CGRect): void;

  // export function CGContextStrokeLineSegments(c: any, points: NSPoint, count: number): void;

  // export function CGContextStrokePath(c: any): void;

  // export function CGContextStrokeRect(c: any, rect: CGRect): void;

  // export function CGContextStrokeRectWithWidth(c: any, rect: CGRect, width: number): void;

  // export function CGContextSynchronize(c: any): void;

  // export function CGContextTranslateCTM(c: any, tx: number, ty: number): void;

  // export function CGDataConsumerCreate(info: any, cbks: CGDataConsumerCallbacks): any;

  // export function CGDataConsumerCreateWithCFData(data: NSData): any;

  // export function CGDataConsumerCreateWithURL(url: NSURL): any;

  // export function typeID(): number;

  // export function CGDataConsumerRelease(consumer: any): void;

  // export function CGDataConsumerRetain(consumer: any): any;

  // export function CGDataProviderCopyData(provider: any): NSData;

  // export function CGDataProviderCreateDirect(info: any, size: number, callbacks: CGDataProviderDirectCallbacks): any;

  // export function CGDataProviderCreateSequential(info: any, callbacks: CGDataProviderSequentialCallbacks): any;

  // export function CGDataProviderCreateWithCFData(data: NSData): any;

  // export function CGDataProviderCreateWithData(info: any, data: any, size: number, releaseData: (p1: any, p2: any, p3: number) => void): any;

  // export function CGDataProviderCreateWithFilename(filename: string | any): any;

  // export function CGDataProviderCreateWithURL(url: NSURL): any;

  // export function CGDataProviderGetInfo(provider: any): any;

  // export function typeID(): number;

  // export function CGDataProviderRelease(provider: any): void;

  // export function CGDataProviderRetain(provider: any): any;

  // export function CGDirectDisplayCopyCurrentMetalDevice(display: number): MTLDevice;

  // export function CGDisplayBounds(display: number): CGRect;

  // export function CGDisplayCapture(display: number): CGError;

  // export function CGDisplayCaptureWithOptions(display: number, options: CGCaptureOptions): CGError;

  // export function CGDisplayCopyAllDisplayModes(display: number, options: Map<any, any>): any[];

  // export function CGDisplayCopyColorSpace(display: number): any;

  // export function CGDisplayCopyDisplayMode(display: number): any;

  // export function CGDisplayCreateImage(displayID: number): any;

  // export function CGDisplayCreateImageForRect(display: number, rect: CGRect): any;

  // export function CGDisplayFade(token: number, duration: number, startBlend: number, endBlend: number, redBlend: number, greenBlend: number, blueBlend: number, synchronous: number): CGError;

  // export function CGDisplayGammaTableCapacity(display: number): number;

  // export function CGDisplayGetDrawingContext(display: number): any;

  // export function CGDisplayHideCursor(display: number): CGError;

  // export function CGDisplayIDToOpenGLDisplayMask(display: number): number;

  // export function CGDisplayIsActive(display: number): number;

  // export function CGDisplayIsAlwaysInMirrorSet(display: number): number;

  // export function CGDisplayIsAsleep(display: number): number;

  // export function CGDisplayIsBuiltin(display: number): number;

  // export function CGDisplayIsInHWMirrorSet(display: number): number;

  // export function CGDisplayIsInMirrorSet(display: number): number;

  // export function CGDisplayIsMain(display: number): number;

  // export function CGDisplayIsOnline(display: number): number;

  // export function CGDisplayIsStereo(display: number): number;

  // export function CGDisplayMirrorsDisplay(display: number): number;

  // export function CGDisplayModeGetHeight(mode: any): number;

  // export function CGDisplayModeGetIODisplayModeID(mode: any): number;

  // export function CGDisplayModeGetIOFlags(mode: any): number;

  // export function CGDisplayModeGetPixelHeight(mode: any): number;

  // export function CGDisplayModeGetPixelWidth(mode: any): number;

  // export function CGDisplayModeGetRefreshRate(mode: any): number;

  // export function typeID(): number;

  // export function CGDisplayModeGetWidth(mode: any): number;

  // export function CGDisplayModeIsUsableForDesktopGUI(mode: any): boolean;

  // export function CGDisplayModeRelease(mode: any): void;

  // export function CGDisplayModeRetain(mode: any): any;

  // export function CGDisplayModelNumber(display: number): number;

  // export function CGDisplayMoveCursorToPoint(display: number, point: CGPoint): CGError;

  // export function CGDisplayPixelsHigh(display: number): number;

  // export function CGDisplayPixelsWide(display: number): number;

  // export function CGDisplayPrimaryDisplay(display: number): number;

  // export function CGDisplayRegisterReconfigurationCallback(callback: (p1: number, p2: CGDisplayChangeSummaryFlags, p3: any) => void, userInfo: any): CGError;

  // export function CGDisplayRelease(display: number): CGError;

  // export function CGDisplayRemoveReconfigurationCallback(callback: (p1: number, p2: CGDisplayChangeSummaryFlags, p3: any) => void, userInfo: any): CGError;

  // export function CGDisplayRestoreColorSyncSettings(): void;

  // export function CGDisplayRotation(display: number): number;

  // export function CGDisplayScreenSize(display: number): CGSize;

  // export function CGDisplaySerialNumber(display: number): number;

  // export function CGDisplaySetDisplayMode(display: number, mode: any, options: Map<any, any>): CGError;

  // export function CGDisplaySetStereoOperation(display: number, stereo: number, forceBlueLine: number, option: CGConfigureOption): CGError;

  // export function CGDisplayShowCursor(display: number): CGError;

  // export function CGDisplayStreamCreate(display: number, outputWidth: number, outputHeight: number, pixelFormat: number, properties: Map<any, any>, handler: (p1: CGDisplayStreamFrameStatus, p2: number, p3: any, p4: any) => void): any;

  // export function CGDisplayStreamCreateWithDispatchQueue(display: number, outputWidth: number, outputHeight: number, pixelFormat: number, properties: Map<any, any>, queue: NSObject, handler: (p1: CGDisplayStreamFrameStatus, p2: number, p3: any, p4: any) => void): any;

  // export function CGDisplayStreamGetRunLoopSource(displayStream: any): any;

  // export function typeID(): number;

  // export function CGDisplayStreamStart(displayStream: any): CGError;

  // export function CGDisplayStreamStop(displayStream: any): CGError;

  // export function CGDisplayStreamUpdateCreateMergedUpdate(firstUpdate: any, secondUpdate: any): any;

  // export function CGDisplayStreamUpdateGetDropCount(updateRef: any): number;

  // export function CGDisplayStreamUpdateGetMovedRectsDelta(updateRef: any, dx: number, dy: number): void;

  // export function CGDisplayStreamUpdateGetRects(updateRef: any, rectType: CGDisplayStreamUpdateRectType, rectCount: number): NSRect;

  // export function typeID(): number;

  // export function CGDisplayUnitNumber(display: number): number;

  // export function CGDisplayUsesOpenGLAcceleration(display: number): number;

  // export function CGDisplayVendorNumber(display: number): number;

  // export function CGEventCreate(source: any): any;

  // export function CGEventCreateCopy(event: any): any;

  // export function CGEventCreateData(allocator: any, event: any): NSData;

  // export function CGEventCreateFromData(allocator: any, data: NSData): any;

  // export function CGEventCreateKeyboardEvent(source: any, virtualKey: number, keyDown: boolean): any;

  // export function CGEventCreateMouseEvent(source: any, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton): any;

  // export function CGEventCreateScrollWheelEvent2(source: any, units: CGScrollEventUnit, wheelCount: number, wheel1: number, wheel2: number, wheel3: number): any;

  // export function CGEventCreateSourceFromEvent(event: any): any;

  // export function CGEventGetDoubleValueField(event: any, field: CGEventField): number;

  // export function CGEventGetFlags(event: any): CGEventFlags;

  // export function CGEventGetIntegerValueField(event: any, field: CGEventField): number;

  // export function CGEventGetLocation(event: any): CGPoint;

  // export function CGEventGetTimestamp(event: any): number;

  // export function CGEventGetType(event: any): CGEventType;

  // export function typeID(): number;

  // export function CGEventGetUnflippedLocation(event: any): CGPoint;

  // export function CGEventKeyboardGetUnicodeString(event: any, maxStringLength: number, actualStringLength: number, unicodeString: number): void;

  // export function CGEventKeyboardSetUnicodeString(event: any, stringLength: number, unicodeString: number): void;

  // export function CGEventPost(tap: CGEventTapLocation, event: any): void;

  // export function CGEventPostToPSN(processSerialNumber: any, event: any): void;

  // export function CGEventPostToPid(pid: number, event: any): void;

  // export function CGEventSetDoubleValueField(event: any, field: CGEventField, value: number): void;

  // export function CGEventSetFlags(event: any, flags: CGEventFlags): void;

  // export function CGEventSetIntegerValueField(event: any, field: CGEventField, value: number): void;

  // export function CGEventSetLocation(event: any, location: CGPoint): void;

  // export function CGEventSetSource(event: any, source: any): void;

  // export function CGEventSetTimestamp(event: any, timestamp: number): void;

  // export function CGEventSetType(event: any, type: CGEventType): void;

  // export function CGEventSourceButtonState(stateID: CGEventSourceStateID, button: CGMouseButton): boolean;

  // export function CGEventSourceCounterForEventType(stateID: CGEventSourceStateID, eventType: CGEventType): number;

  // export function CGEventSourceCreate(stateID: CGEventSourceStateID): any;

  // export function CGEventSourceFlagsState(stateID: CGEventSourceStateID): CGEventFlags;

  // export function CGEventSourceGetKeyboardType(source: any): number;

  // export function CGEventSourceGetLocalEventsFilterDuringSuppressionState(source: any, state: CGEventSuppressionState): CGEventFilterMask;

  // export function CGEventSourceGetLocalEventsSuppressionInterval(source: any): number;

  // export function CGEventSourceGetPixelsPerLine(source: any): number;

  // export function CGEventSourceGetSourceStateID(source: any): CGEventSourceStateID;

  // export function typeID(): number;

  // export function CGEventSourceGetUserData(source: any): number;

  // export function CGEventSourceKeyState(stateID: CGEventSourceStateID, key: number): boolean;

  // export function CGEventSourceSecondsSinceLastEventType(stateID: CGEventSourceStateID, eventType: CGEventType): number;

  // export function CGEventSourceSetKeyboardType(source: any, keyboardType: number): void;

  // export function CGEventSourceSetLocalEventsFilterDuringSuppressionState(source: any, filter: CGEventFilterMask, state: CGEventSuppressionState): void;

  // export function CGEventSourceSetLocalEventsSuppressionInterval(source: any, seconds: number): void;

  // export function CGEventSourceSetPixelsPerLine(source: any, pixelsPerLine: number): void;

  // export function CGEventSourceSetUserData(source: any, userData: number): void;

  // export function CGEventTapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

  // export function CGEventTapCreateForPSN(processSerialNumber: any, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

  // export function CGEventTapCreateForPid(pid: number, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

  // export function CGEventTapEnable(tap: NSMachPort, enable: boolean): void;

  // export function CGEventTapIsEnabled(tap: NSMachPort): boolean;

  // export function CGEventTapPostEvent(proxy: any, event: any): void;

  // export function CGFontCanCreatePostScriptSubset(font: any, format: CGFontPostScriptFormat): boolean;

  // export function CGFontCopyFullName(font: any): string;

  // export function CGFontCopyGlyphNameForGlyph(font: any, glyph: number): string;

  // export function CGFontCopyPostScriptName(font: any): string;

  // export function CGFontCopyTableForTag(font: any, tag: number): NSData;

  // export function CGFontCopyTableTags(font: any): any[];

  // export function CGFontCopyVariationAxes(font: any): any[];

  // export function CGFontCopyVariations(font: any): Map<any, any>;

  // export function CGFontCreateCopyWithVariations(font: any, variations: Map<any, any>): any;

  // export function CGFontCreatePostScriptEncoding(font: any, encoding: number): NSData;

  // export function CGFontCreatePostScriptSubset(font: any, subsetName: string, format: CGFontPostScriptFormat, glyphs: number, count: number, encoding: number): NSData;

  // export function CGFontCreateWithDataProvider(provider: any): any;

  // export function CGFontCreateWithFontName(name: string): any;

  // export function CGFontGetAscent(font: any): number;

  // export function CGFontGetCapHeight(font: any): number;

  // export function CGFontGetDescent(font: any): number;

  // export function CGFontGetFontBBox(font: any): CGRect;

  // export function CGFontGetGlyphAdvances(font: any, glyphs: number, count: number, advances: number): boolean;

  // export function CGFontGetGlyphBBoxes(font: any, glyphs: number, count: number, bboxes: NSRect): boolean;

  // export function CGFontGetGlyphWithGlyphName(font: any, name: string): number;

  // export function CGFontGetItalicAngle(font: any): number;

  // export function CGFontGetLeading(font: any): number;

  // export function CGFontGetNumberOfGlyphs(font: any): number;

  // export function CGFontGetStemV(font: any): number;

  // export function typeID(): number;

  // export function CGFontGetUnitsPerEm(font: any): number;

  // export function CGFontGetXHeight(font: any): number;

  // export function CGFontRelease(font: any): void;

  // export function CGFontRetain(font: any): any;

  // export function CGFunctionCreate(info: any, domainDimension: number, domain: number, rangeDimension: number, range: number, callbacks: CGFunctionCallbacks): any;

  // export function typeID(): number;

  // export function CGFunctionRelease(function_: any): void;

  // export function CGFunctionRetain(function_: any): any;

  // export function CGGetActiveDisplayList(maxDisplays: number, activeDisplays: number, displayCount: number): CGError;

  // export function CGGetDisplayTransferByFormula(display: number, redMin: number, redMax: number, redGamma: number, greenMin: number, greenMax: number, greenGamma: number, blueMin: number, blueMax: number, blueGamma: number): CGError;

  // export function CGGetDisplayTransferByTable(display: number, capacity: number, redTable: number, greenTable: number, blueTable: number, sampleCount: number): CGError;

  // export function CGGetDisplaysWithOpenGLDisplayMask(mask: number, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError;

  // export function CGGetDisplaysWithPoint(point: CGPoint, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError;

  // export function CGGetDisplaysWithRect(rect: CGRect, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError;

  // export function CGGetEventTapList(maxNumberOfTaps: number, tapList: __CGEventTapInformation, eventTapCount: number): CGError;

  // export function CGGetLastMouseDelta(deltaX: number, deltaY: number): void;

  // export function CGGetOnlineDisplayList(maxDisplays: number, onlineDisplays: number, displayCount: number): CGError;

  // export function CGGradientCreateWithColorComponents(space: any, components: number, locations: number, count: number): any;

  // export function CGGradientCreateWithColors(space: any, colors: any[], locations: number): any;

  // export function typeID(): number;

  // export function CGGradientRelease(gradient: any): void;

  // export function CGGradientRetain(gradient: any): any;

  // export function CGImageCreate(width: number, height: number, bitsPerComponent: number, bitsPerPixel: number, bytesPerRow: number, space: any, bitmapInfo: CGBitmapInfo, provider: any, decode: number, shouldInterpolate: boolean, intent: CGColorRenderingIntent): any;

  // export function CGImageCreateCopy(image: any): any;

  // export function CGImageCreateCopyWithColorSpace(image: any, space: any): any;

  // export function CGImageCreateWithImageInRect(image: any, rect: CGRect): any;

  // export function CGImageCreateWithJPEGDataProvider(source: any, decode: number, shouldInterpolate: boolean, intent: CGColorRenderingIntent): any;

  // export function CGImageCreateWithMask(image: any, mask: any): any;

  // export function CGImageCreateWithMaskingColors(image: any, components: number): any;

  // export function CGImageCreateWithPNGDataProvider(source: any, decode: number, shouldInterpolate: boolean, intent: CGColorRenderingIntent): any;

  // export function CGImageGetAlphaInfo(image: any): CGImageAlphaInfo;

  // export function CGImageGetBitmapInfo(image: any): CGBitmapInfo;

  // export function CGImageGetBitsPerComponent(image: any): number;

  // export function CGImageGetBitsPerPixel(image: any): number;

  // export function CGImageGetByteOrderInfo(image: any): CGImageByteOrderInfo;

  // export function CGImageGetBytesPerRow(image: any): number;

  // export function CGImageGetColorSpace(image: any): any;

  // export function CGImageGetDataProvider(image: any): any;

  // export function CGImageGetDecode(image: any): number;

  // export function CGImageGetHeight(image: any): number;

  // export function CGImageGetPixelFormatInfo(image: any): CGImagePixelFormatInfo;

  // export function CGImageGetRenderingIntent(image: any): CGColorRenderingIntent;

  // export function CGImageGetShouldInterpolate(image: any): boolean;

  // export function typeID(): number;

  // export function CGImageGetUTType(image: any): string;

  // export function CGImageGetWidth(image: any): number;

  // export function CGImageIsMask(image: any): boolean;

  // export function CGImageMaskCreate(width: number, height: number, bitsPerComponent: number, bitsPerPixel: number, bytesPerRow: number, provider: any, decode: number, shouldInterpolate: boolean): any;

  // export function CGImageRelease(image: any): void;

  // export function CGImageRetain(image: any): any;

  // export function CGLayerCreateWithContext(context: any, size: CGSize, auxiliaryInfo: Map<any, any>): any;

  // export function CGLayerGetContext(layer: any): any;

  // export function CGLayerGetSize(layer: any): CGSize;

  // export function typeID(): number;

  // export function CGLayerRelease(layer: any): void;

  // export function CGLayerRetain(layer: any): any;

  // export function CGMainDisplayID(): number;

  // export function CGOpenGLDisplayMaskToDisplayID(mask: number): number;

  // export function CGPDFArrayApplyBlock(array: any, block: (p1: number, p2: any, p3: any) => boolean, info: any): void;

  // export function CGPDFArrayGetArray(array: any, index: number, value: any): boolean;

  // export function CGPDFArrayGetBoolean(array: any, index: number, value: string | any): boolean;

  // export function CGPDFArrayGetCount(array: any): number;

  // export function CGPDFArrayGetDictionary(array: any, index: number, value: any): boolean;

  // export function CGPDFArrayGetInteger(array: any, index: number, value: number): boolean;

  // export function CGPDFArrayGetName(array: any, index: number, value: string): boolean;

  // export function CGPDFArrayGetNull(array: any, index: number): boolean;

  // export function CGPDFArrayGetNumber(array: any, index: number, value: number): boolean;

  // export function CGPDFArrayGetObject(array: any, index: number, value: any): boolean;

  // export function CGPDFArrayGetStream(array: any, index: number, value: any): boolean;

  // export function CGPDFArrayGetString(array: any, index: number, value: any): boolean;

  // export function CGPDFContentStreamCreateWithPage(page: any): any;

  // export function CGPDFContentStreamCreateWithStream(stream: any, streamResources: any, parent: any): any;

  // export function CGPDFContentStreamGetResource(cs: any, category: string | any, name: string | any): any;

  // export function CGPDFContentStreamGetStreams(cs: any): any[];

  // export function CGPDFContentStreamRelease(cs: any): void;

  // export function CGPDFContentStreamRetain(cs: any): any;

  // export function CGPDFContextAddDestinationAtPoint(context: any, name: string, point: CGPoint): void;

  // export function CGPDFContextAddDocumentMetadata(context: any, metadata: NSData): void;

  // export function CGPDFContextBeginPage(context: any, pageInfo: Map<any, any>): void;

  // export function CGPDFContextBeginTag(context: any, tagType: CGPDFTagType, tagProperties: Map<any, any>): void;

  // export function CGPDFContextClose(context: any): void;

  // export function CGPDFContextCreate(consumer: any, mediaBox: NSRect, auxiliaryInfo: Map<any, any>): any;

  // export function CGPDFContextCreateWithURL(url: NSURL, mediaBox: NSRect, auxiliaryInfo: Map<any, any>): any;

  // export function CGPDFContextEndPage(context: any): void;

  // export function CGPDFContextEndTag(context: any): void;

  // export function CGPDFContextSetDestinationForRect(context: any, name: string, rect: CGRect): void;

  // export function CGPDFContextSetOutline(context: any, outline: Map<any, any>): void;

  // export function CGPDFContextSetURLForRect(context: any, url: NSURL, rect: CGRect): void;

  // export function CGPDFDictionaryApplyBlock(dict: any, block: (p1: string, p2: any, p3: any) => boolean, info: any): void;

  // export function CGPDFDictionaryApplyFunction(dict: any, function_: (p1: string, p2: any, p3: any) => void, info: any): void;

  // export function CGPDFDictionaryGetArray(dict: any, key: string | any, value: any): boolean;

  // export function CGPDFDictionaryGetBoolean(dict: any, key: string | any, value: string | any): boolean;

  // export function CGPDFDictionaryGetCount(dict: any): number;

  // export function CGPDFDictionaryGetDictionary(dict: any, key: string | any, value: any): boolean;

  // export function CGPDFDictionaryGetInteger(dict: any, key: string | any, value: number): boolean;

  // export function CGPDFDictionaryGetName(dict: any, key: string | any, value: string): boolean;

  // export function CGPDFDictionaryGetNumber(dict: any, key: string | any, value: number): boolean;

  // export function CGPDFDictionaryGetObject(dict: any, key: string | any, value: any): boolean;

  // export function CGPDFDictionaryGetStream(dict: any, key: string | any, value: any): boolean;

  // export function CGPDFDictionaryGetString(dict: any, key: string | any, value: any): boolean;

  // export function CGPDFDocumentAllowsCopying(document: any): boolean;

  // export function CGPDFDocumentAllowsPrinting(document: any): boolean;

  // export function CGPDFDocumentCreateWithProvider(provider: any): any;

  // export function CGPDFDocumentCreateWithURL(url: NSURL): any;

  // export function CGPDFDocumentGetAccessPermissions(document: any): CGPDFAccessPermissions;

  // export function CGPDFDocumentGetCatalog(document: any): any;

  // export function CGPDFDocumentGetID(document: any): any;

  // export function CGPDFDocumentGetInfo(document: any): any;

  // export function CGPDFDocumentGetNumberOfPages(document: any): number;

  // export function CGPDFDocumentGetOutline(document: any): Map<any, any>;

  // export function CGPDFDocumentGetPage(document: any, pageNumber: number): any;

  // export function typeID(): number;

  // export function CGPDFDocumentGetVersion(document: any, majorVersion: number, minorVersion: number): void;

  // export function CGPDFDocumentIsEncrypted(document: any): boolean;

  // export function CGPDFDocumentIsUnlocked(document: any): boolean;

  // export function CGPDFDocumentRelease(document: any): void;

  // export function CGPDFDocumentRetain(document: any): any;

  // export function CGPDFDocumentUnlockWithPassword(document: any, password: string | any): boolean;

  // export function CGPDFObjectGetType(object_: any): CGPDFObjectType;

  // export function CGPDFObjectGetValue(object_: any, type: CGPDFObjectType, value: any): boolean;

  // export function CGPDFOperatorTableCreate(): any;

  // export function CGPDFOperatorTableRelease(table: any): void;

  // export function CGPDFOperatorTableRetain(table: any): any;

  // export function CGPDFOperatorTableSetCallback(table: any, name: string | any, callback: (p1: any, p2: any) => void): void;

  // export function CGPDFPageGetBoxRect(page: any, box: CGPDFBox): CGRect;

  // export function CGPDFPageGetDictionary(page: any): any;

  // export function CGPDFPageGetDocument(page: any): any;

  // export function CGPDFPageGetDrawingTransform(page: any, box: CGPDFBox, rect: CGRect, rotate: number, preserveAspectRatio: boolean): CGAffineTransform;

  // export function CGPDFPageGetPageNumber(page: any): number;

  // export function CGPDFPageGetRotationAngle(page: any): number;

  // export function typeID(): number;

  // export function CGPDFPageRelease(page: any): void;

  // export function CGPDFPageRetain(page: any): any;

  // export function CGPDFScannerCreate(cs: any, table: any, info: any): any;

  // export function CGPDFScannerGetContentStream(scanner: any): any;

  // export function CGPDFScannerPopArray(scanner: any, value: any): boolean;

  // export function CGPDFScannerPopBoolean(scanner: any, value: string | any): boolean;

  // export function CGPDFScannerPopDictionary(scanner: any, value: any): boolean;

  // export function CGPDFScannerPopInteger(scanner: any, value: number): boolean;

  // export function CGPDFScannerPopName(scanner: any, value: string): boolean;

  // export function CGPDFScannerPopNumber(scanner: any, value: number): boolean;

  // export function CGPDFScannerPopObject(scanner: any, value: any): boolean;

  // export function CGPDFScannerPopStream(scanner: any, value: any): boolean;

  // export function CGPDFScannerPopString(scanner: any, value: any): boolean;

  // export function CGPDFScannerRelease(scanner: any): void;

  // export function CGPDFScannerRetain(scanner: any): any;

  // export function CGPDFScannerScan(scanner: any): boolean;

  // export function CGPDFStreamCopyData(stream: any, format: CGPDFDataFormat): NSData;

  // export function CGPDFStreamGetDictionary(stream: any): any;

  // export function CGPDFStringCopyDate(string: any): Date;

  // export function CGPDFStringCopyTextString(string: any): string;

  // export function CGPDFStringGetBytePtr(string: any): string;

  // export function CGPDFStringGetLength(string: any): number;

  // export function CGPDFTagTypeGetName(tagType: CGPDFTagType): string;

  // export function CGPSConverterAbort(converter: any): boolean;

  // export function CGPSConverterConvert(converter: any, provider: any, consumer: any, options: Map<any, any>): boolean;

  // export function CGPSConverterCreate(info: any, callbacks: CGPSConverterCallbacks, options: Map<any, any>): any;

  // export function typeID(): number;

  // export function CGPSConverterIsConverting(converter: any): boolean;

  // export function CGPathAddArc(path: any, m: CGAffineTransform, x: number, y: number, radius: number, startAngle: number, endAngle: number, clockwise: boolean): void;

  // export function CGPathAddArcToPoint(path: any, m: CGAffineTransform, x1: number, y1: number, x2: number, y2: number, radius: number): void;

  // export function CGPathAddCurveToPoint(path: any, m: CGAffineTransform, cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

  // export function CGPathAddEllipseInRect(path: any, m: CGAffineTransform, rect: CGRect): void;

  // export function CGPathAddLineToPoint(path: any, m: CGAffineTransform, x: number, y: number): void;

  // export function CGPathAddLines(path: any, m: CGAffineTransform, points: NSPoint, count: number): void;

  // export function CGPathAddPath(path1: any, m: CGAffineTransform, path2: any): void;

  // export function CGPathAddQuadCurveToPoint(path: any, m: CGAffineTransform, cpx: number, cpy: number, x: number, y: number): void;

  // export function CGPathAddRect(path: any, m: CGAffineTransform, rect: CGRect): void;

  // export function CGPathAddRects(path: any, m: CGAffineTransform, rects: NSRect, count: number): void;

  // export function CGPathAddRelativeArc(path: any, matrix: CGAffineTransform, x: number, y: number, radius: number, startAngle: number, delta: number): void;

  // export function CGPathAddRoundedRect(path: any, transform: CGAffineTransform, rect: CGRect, cornerWidth: number, cornerHeight: number): void;

  // export function apply(path: any, info: any, function_: (p1: any, p2: CGPathElement) => void): void;

  // export function CGPathApplyWithBlock(path: any, block: (p1: CGPathElement) => void): void;

  // export function CGPathCloseSubpath(path: any): void;

  // export function CGPathContainsPoint(path: any, m: CGAffineTransform, point: CGPoint, eoFill: boolean): boolean;

  // export function CGPathCreateCopy(path: any): any;

  // export function CGPathCreateCopyByDashingPath(path: any, transform: CGAffineTransform, phase: number, lengths: number, count: number): any;

  // export function CGPathCreateCopyByStrokingPath(path: any, transform: CGAffineTransform, lineWidth: number, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: number): any;

  // export function CGPathCreateCopyByTransformingPath(path: any, transform: CGAffineTransform): any;

  // export function create(): any;

  // export function CGPathCreateMutableCopy(path: any): any;

  // export function CGPathCreateMutableCopyByTransformingPath(path: any, transform: CGAffineTransform): any;

  // export function CGPathCreateWithEllipseInRect(rect: CGRect, transform: CGAffineTransform): any;

  // export function CGPathCreateWithRect(rect: CGRect, transform: CGAffineTransform): any;

  // export function CGPathCreateWithRoundedRect(rect: CGRect, cornerWidth: number, cornerHeight: number, transform: CGAffineTransform): any;

  // export function CGPathEqualToPath(path1: any, path2: any): boolean;

  // export function CGPathGetBoundingBox(path: any): CGRect;

  // export function CGPathGetCurrentPoint(path: any): CGPoint;

  // export function CGPathGetPathBoundingBox(path: any): CGRect;

  // export function typeID(): number;

  // export function CGPathIsEmpty(path: any): boolean;

  // export function CGPathIsRect(path: any, rect: NSRect): boolean;

  // export function CGPathMoveToPoint(path: any, m: CGAffineTransform, x: number, y: number): void;

  // export function CGPathRelease(path: any): void;

  // export function CGPathRetain(path: any): any;

  // export function CGPatternCreate(info: any, bounds: CGRect, matrix: CGAffineTransform, xStep: number, yStep: number, tiling: CGPatternTiling, isColored: boolean, callbacks: CGPatternCallbacks): any;

  // export function typeID(): number;

  // export function CGPatternRelease(pattern: any): void;

  // export function CGPatternRetain(pattern: any): any;

  // export function CGPointApplyAffineTransform(point: CGPoint, t: CGAffineTransform): CGPoint;

  // export function CGPointCreateDictionaryRepresentation(point: CGPoint): Map<any, any>;

  // export function CGPointEqualToPoint(point1: CGPoint, point2: CGPoint): boolean;

  // export function CGPointMake(x: number, y: number): CGPoint;

  // export function CGPointMakeWithDictionaryRepresentation(dict: Map<any, any>, point: NSPoint): boolean;

  // export function CGRectApplyAffineTransform(rect: CGRect, t: CGAffineTransform): CGRect;

  // export function CGRectContainsPoint(rect: CGRect, point: CGPoint): boolean;

  // export function CGRectContainsRect(rect1: CGRect, rect2: CGRect): boolean;

  // export function CGRectCreateDictionaryRepresentation(p1: CGRect): Map<any, any>;

  // export function CGRectDivide(rect: CGRect, slice: NSRect, remainder: NSRect, amount: number, edge: CGRectEdge): void;

  // export function CGRectEqualToRect(rect1: CGRect, rect2: CGRect): boolean;

  // export function CGRectGetHeight(rect: CGRect): number;

  // export function CGRectGetMaxX(rect: CGRect): number;

  // export function CGRectGetMaxY(rect: CGRect): number;

  // export function CGRectGetMidX(rect: CGRect): number;

  // export function CGRectGetMidY(rect: CGRect): number;

  // export function CGRectGetMinX(rect: CGRect): number;

  // export function CGRectGetMinY(rect: CGRect): number;

  // export function CGRectGetWidth(rect: CGRect): number;

  // export function CGRectInset(rect: CGRect, dx: number, dy: number): CGRect;

  // export function CGRectIntegral(rect: CGRect): CGRect;

  // export function CGRectIntersection(r1: CGRect, r2: CGRect): CGRect;

  // export function CGRectIntersectsRect(rect1: CGRect, rect2: CGRect): boolean;

  // export function CGRectIsEmpty(rect: CGRect): boolean;

  // export function CGRectIsInfinite(rect: CGRect): boolean;

  // export function CGRectIsNull(rect: CGRect): boolean;

  // export function CGRectMake(x: number, y: number, width: number, height: number): CGRect;

  // export function CGRectMakeWithDictionaryRepresentation(dict: Map<any, any>, rect: NSRect): boolean;

  // export function CGRectOffset(rect: CGRect, dx: number, dy: number): CGRect;

  // export function CGRectStandardize(rect: CGRect): CGRect;

  // export function CGRectUnion(r1: CGRect, r2: CGRect): CGRect;

  // export function CGReleaseAllDisplays(): CGError;

  // export function CGReleaseDisplayFadeReservation(token: number): CGError;

  // export function CGRestorePermanentDisplayConfiguration(): void;

  // export function CGSessionCopyCurrentDictionary(): Map<any, any>;

  // export function CGSetDisplayTransferByByteTable(display: number, tableSize: number, redTable: string | any, greenTable: string | any, blueTable: string | any): CGError;

  // export function CGSetDisplayTransferByFormula(display: number, redMin: number, redMax: number, redGamma: number, greenMin: number, greenMax: number, greenGamma: number, blueMin: number, blueMax: number, blueGamma: number): CGError;

  // export function CGSetDisplayTransferByTable(display: number, tableSize: number, redTable: number, greenTable: number, blueTable: number): CGError;

  // export function CGShadingCreateAxial(space: any, start: CGPoint, end: CGPoint, function_: any, extendStart: boolean, extendEnd: boolean): any;

  // export function CGShadingCreateRadial(space: any, start: CGPoint, startRadius: number, end: CGPoint, endRadius: number, function_: any, extendStart: boolean, extendEnd: boolean): any;

  // export function typeID(): number;

  // export function CGShadingRelease(shading: any): void;

  // export function CGShadingRetain(shading: any): any;

  // export function CGShieldingWindowID(display: number): number;

  // export function CGShieldingWindowLevel(): number;

  // export function CGSizeApplyAffineTransform(size: CGSize, t: CGAffineTransform): CGSize;

  // export function CGSizeCreateDictionaryRepresentation(size: CGSize): Map<any, any>;

  // export function CGSizeEqualToSize(size1: CGSize, size2: CGSize): boolean;

  // export function CGSizeMake(width: number, height: number): CGSize;

  // export function CGSizeMakeWithDictionaryRepresentation(dict: Map<any, any>, size: NSSize): boolean;

  // export function CGVectorMake(dx: number, dy: number): CGVector;

  // export function CGWarpMouseCursorPosition(newCursorPosition: CGPoint): CGError;

  // export function CGWindowLevelForKey(key: CGWindowLevelKey): number;

  // export function CGWindowListCopyWindowInfo(option: CGWindowListOption, relativeToWindow: number): any[];

  // export function CGWindowListCreateDescriptionFromArray(windowArray: any[]): any[];

  // export function CGWindowListCreateImage(screenBounds: CGRect, listOption: CGWindowListOption, windowID: number, imageOption: CGWindowImageOption): any;

  // export function CGWindowListCreateImageFromArray(screenBounds: CGRect, windowArray: any[], imageOption: CGWindowImageOption): any;

  // export function CGWindowServerCreateServerPort(): NSMachPort;

  interface CIAccordionFoldTransition extends CITransitionFilter {
    bottomHeight: number;
    setBottomHeight(_: number)
    foldShadowAmount: number;
    setFoldShadowAmount(_: number)
    numberOfFolds: number;
    setNumberOfFolds(_: number)
  }

  interface CIAffineClamp extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    transform: CGAffineTransform;
    setTransform(_: CGAffineTransform)
  }

  interface CIAffineTile extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    transform: CGAffineTransform;
    setTransform(_: CGAffineTransform)
  }

  interface CIAttributedTextImageGenerator extends CIFilter {
    scaleFactor: number;
    setScaleFactor(_: number)
    text: NSAttributedString;
    setText(_: NSAttributedString)
  }

  // interface
  class CIAztecCodeDescriptor extends CIBarcodeDescriptor {
    // compoundStaticMethods
    static descriptorWithPayloadIsCompactLayerCountDataCodewordCount(payload: NSData, isCompact: boolean, layerCount: number, dataCodewordCount: number): CIAztecCodeDescriptor;
    // ownInstanceProperties
    dataCodewordCount: number;
    // ownInstanceProperties
    errorCorrectedPayload: NSData;
    // ownInstanceProperties
    isCompact: boolean;
    // ownInstanceProperties
    layerCount: number;
    // compoundInstanceMethods
    static createWithPayloadIsCompactLayerCountDataCodewordCount(payload: NSData, isCompact: boolean, layerCount: number, dataCodewordCount: number): CIAztecCodeDescriptor;
  }

  interface CIAztecCodeGenerator extends CIFilter {
    compactStyle: number;
    setCompactStyle(_: number)
    correctionLevel: number;
    setCorrectionLevel(_: number)
    layers: number;
    setLayers(_: number)
    message: NSData;
    setMessage(_: NSData)
  }

  // interface
  class CIBarcodeDescriptor extends NSObject {
  }

  interface CIBarcodeGenerator extends CIFilter {
    barcodeDescriptor: CIBarcodeDescriptor;
    setBarcodeDescriptor(_: CIBarcodeDescriptor)
  }

  interface CIBarsSwipeTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number)
    barOffset: number;
    setBarOffset(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CIBicubicScaleTransform extends CIFilter {
    aspectRatio: number;
    setAspectRatio(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    parameterB: number;
    setParameterB(_: number)
    parameterC: number;
    setParameterC(_: number)
    scale: number;
    setScale(_: number)
  }

  // interface
  class CIBlendKernel extends CIColorKernel {
    // compoundStaticMethods
    //  static kernelWithFunctionNameFromMetalLibraryDataError(fromMetalLibraryData: string, error: NSData): CIBlendKernel;
    // compoundStaticMethods
    //  static kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError(fromMetalLibraryData: string, outputPixelFormat: NSData, error: number): CIBlendKernel;
    // ownStaticProperties
    static clear: CIBlendKernel;
    // ownStaticProperties
    static color: CIBlendKernel;
    // ownStaticProperties
    static colorBurn: CIBlendKernel;
    // ownStaticProperties
    static colorDodge: CIBlendKernel;
    // ownStaticProperties
    static componentAdd: CIBlendKernel;
    // ownStaticProperties
    static componentMax: CIBlendKernel;
    // ownStaticProperties
    static componentMin: CIBlendKernel;
    // ownStaticProperties
    static componentMultiply: CIBlendKernel;
    // ownStaticProperties
    static darken: CIBlendKernel;
    // ownStaticProperties
    static darkerColor: CIBlendKernel;
    // ownStaticProperties
    static destination: CIBlendKernel;
    // ownStaticProperties
    static destinationAtop: CIBlendKernel;
    // ownStaticProperties
    static destinationIn: CIBlendKernel;
    // ownStaticProperties
    static destinationOut: CIBlendKernel;
    // ownStaticProperties
    static destinationOver: CIBlendKernel;
    // ownStaticProperties
    static difference: CIBlendKernel;
    // ownStaticProperties
    static divide: CIBlendKernel;
    // ownStaticProperties
    static exclusion: CIBlendKernel;
    // ownStaticProperties
    static exclusiveOr: CIBlendKernel;
    // ownStaticProperties
    static hardLight: CIBlendKernel;
    // ownStaticProperties
    static hardMix: CIBlendKernel;
    // ownStaticProperties
    static hue: CIBlendKernel;
    // ownStaticProperties
    static lighten: CIBlendKernel;
    // ownStaticProperties
    static lighterColor: CIBlendKernel;
    // ownStaticProperties
    static linearBurn: CIBlendKernel;
    // ownStaticProperties
    static linearDodge: CIBlendKernel;
    // ownStaticProperties
    static linearLight: CIBlendKernel;
    // ownStaticProperties
    static luminosity: CIBlendKernel;
    // ownStaticProperties
    static multiply: CIBlendKernel;
    // ownStaticProperties
    static overlay: CIBlendKernel;
    // ownStaticProperties
    static pinLight: CIBlendKernel;
    // ownStaticProperties
    static saturation: CIBlendKernel;
    // ownStaticProperties
    static screen: CIBlendKernel;
    // ownStaticProperties
    static softLight: CIBlendKernel;
    // ownStaticProperties
    static source: CIBlendKernel;
    // ownStaticProperties
    static sourceAtop: CIBlendKernel;
    // ownStaticProperties
    static sourceIn: CIBlendKernel;
    // ownStaticProperties
    static sourceOut: CIBlendKernel;
    // ownStaticProperties
    static sourceOver: CIBlendKernel;
    // ownStaticProperties
    static subtract: CIBlendKernel;
    // ownStaticProperties
    static vividLight: CIBlendKernel;
    // compoundInstanceMethods
    applyWithForegroundBackground(foreground: CIImage, background: CIImage): CIImage;
    // compoundInstanceMethods
    applyWithForegroundBackgroundColorSpace(foreground: CIImage, background: CIImage, colorSpace: any): CIImage;
  }

  interface CIBlendWithMask extends CIFilter {
    backgroundImage: CIImage;
    setBackgroundImage(_: CIImage)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    maskImage: CIImage;
    setMaskImage(_: CIImage)
  }

  interface CIBloom extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
    radius: number;
    setRadius(_: number)
  }

  interface CIBokehBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
    ringAmount: number;
    setRingAmount(_: number)
    ringSize: number;
    setRingSize(_: number)
    softness: number;
    setSoftness(_: number)
  }

  interface CIBoxBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CICMYKHalftone extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    grayComponentReplacement: number;
    setGrayComponentReplacement(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    sharpness: number;
    setSharpness(_: number)
    underColorRemoval: number;
    setUnderColorRemoval(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CICheckerboardGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color0: CIColor;
    setColor0(_: CIColor)
    color1: CIColor;
    setColor1(_: CIColor)
    sharpness: number;
    setSharpness(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CICircularScreen extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    sharpness: number;
    setSharpness(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CICode128BarcodeGenerator extends CIFilter {
    barcodeHeight: number;
    setBarcodeHeight(_: number)
    message: NSData;
    setMessage(_: NSData)
    quietSpace: number;
    setQuietSpace(_: number)
  }

  // interface
  class CIColor extends NSObject {
    // ownInstanceProperties
    alpha: number;
    // ownInstanceProperties
    blue: number;
    // ownInstanceProperties
    colorSpace: any;
    // ownInstanceProperties
    components: number;
    // ownInstanceProperties
    green: number;
    // ownInstanceProperties
    numberOfComponents: number;
    // ownInstanceProperties
    red: number;
    // ownInstanceProperties
    stringRepresentation: string;
    // ownStaticProperties
    static blackColor: CIColor;
    // ownStaticProperties
    static blueColor: CIColor;
    // ownStaticProperties
    static clearColor: CIColor;
    // ownStaticProperties
    static cyanColor: CIColor;
    // ownStaticProperties
    static grayColor: CIColor;
    // ownStaticProperties
    static greenColor: CIColor;
    // ownStaticProperties
    static magentaColor: CIColor;
    // ownStaticProperties
    static redColor: CIColor;
    // ownStaticProperties
    static whiteColor: CIColor;
    // ownStaticProperties
    static yellowColor: CIColor;
    // compoundInstanceMethods
    static createWithCGColor(CGColor: any): CIColor;
    // compoundInstanceMethods
    static createWithColor(color: NSColor): CIColor;
    // compoundInstanceMethods
    static createWithRedGreenBlue(red: number, green: number, blue: number): CIColor;
    // compoundInstanceMethods
    static createWithRedGreenBlueAlpha(red: number, green: number, blue: number, alpha: number): CIColor;
    // compoundInstanceMethods
    static createWithRedGreenBlueAlphaColorSpace(red: number, green: number, blue: number, alpha: number, colorSpace: any): CIColor;
    // compoundInstanceMethods
    static createWithRedGreenBlueColorSpace(red: number, green: number, blue: number, colorSpace: any): CIColor;
  }

  interface CIColorClamp extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    maxComponents: CIVector;
    setMaxComponents(_: CIVector)
    minComponents: CIVector;
    setMinComponents(_: CIVector)
  }

  interface CIColorControls extends CIFilter {
    brightness: number;
    setBrightness(_: number)
    contrast: number;
    setContrast(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    saturation: number;
    setSaturation(_: number)
  }

  interface CIColorCrossPolynomial extends CIFilter {
    blueCoefficients: CIVector;
    setBlueCoefficients(_: CIVector)
    greenCoefficients: CIVector;
    setGreenCoefficients(_: CIVector)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    redCoefficients: CIVector;
    setRedCoefficients(_: CIVector)
  }

  interface CIColorCube extends CIFilter {
    cubeData: NSData;
    setCubeData(_: NSData)
    cubeDimension: number;
    setCubeDimension(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIColorCubeWithColorSpace extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any)
    cubeData: NSData;
    setCubeData(_: NSData)
    cubeDimension: number;
    setCubeDimension(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIColorCubesMixedWithMask extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any)
    cube0Data: NSData;
    setCube0Data(_: NSData)
    cube1Data: NSData;
    setCube1Data(_: NSData)
    cubeDimension: number;
    setCubeDimension(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    maskImage: CIImage;
    setMaskImage(_: CIImage)
  }

  interface CIColorCurves extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any)
    curvesData: NSData;
    setCurvesData(_: NSData)
    curvesDomain: CIVector;
    setCurvesDomain(_: CIVector)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIColorInvert extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // interface
  class CIColorKernel extends CIKernel {
    // compoundStaticMethods
    //  static kernelWithFunctionNameFromMetalLibraryDataError(fromMetalLibraryData: string, error: NSData): CIColorKernel;
    // compoundStaticMethods
    //  static kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError(fromMetalLibraryData: string, outputPixelFormat: NSData, error: number): CIColorKernel;
    // compoundInstanceMethods
    applyWithExtentArguments(extent: CGRect, arguments_?: any[]): CIImage;
  }

  interface CIColorMap extends CIFilter {
    gradientImage: CIImage;
    setGradientImage(_: CIImage)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIColorMatrix extends CIFilter {
    AVector: CIVector;
    setAVector(_: CIVector)
    biasVector: CIVector;
    setBiasVector(_: CIVector)
    BVector: CIVector;
    setBVector(_: CIVector)
    GVector: CIVector;
    setGVector(_: CIVector)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    RVector: CIVector;
    setRVector(_: CIVector)
  }

  interface CIColorMonochrome extends CIFilter {
    color: CIColor;
    setColor(_: CIColor)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
  }

  interface CIColorPolynomial extends CIFilter {
    alphaCoefficients: CIVector;
    setAlphaCoefficients(_: CIVector)
    blueCoefficients: CIVector;
    setBlueCoefficients(_: CIVector)
    greenCoefficients: CIVector;
    setGreenCoefficients(_: CIVector)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    redCoefficients: CIVector;
    setRedCoefficients(_: CIVector)
  }

  interface CIColorPosterize extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    levels: number;
    setLevels(_: number)
  }

  interface CIComicEffect extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CICompositeOperation extends CIFilter {
    backgroundImage: CIImage;
    setBackgroundImage(_: CIImage)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // interface
  class CIContext extends NSObject {
    // compoundStaticMethods
    static offlineGPUCount(): number;
    // ownInstanceProperties
    workingColorSpace: any;
    // ownInstanceProperties
    workingFormat: number;
    // compoundInstanceMethods
    HEIFRepresentationOfImageFormatColorSpaceOptions(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): NSData;
    // compoundInstanceMethods
    JPEGRepresentationOfImageColorSpaceOptions(of: CIImage, colorSpace: any, options: Map<string, any>): NSData;
    // compoundInstanceMethods
    PNGRepresentationOfImageFormatColorSpaceOptions(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): NSData;
    // compoundInstanceMethods
    TIFFRepresentationOfImageFormatColorSpaceOptions(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): NSData;
    // compoundInstanceMethods
    clearCaches(): void;
    // compoundInstanceMethods
    createCGImageFromRect(_: CIImage, from: CGRect): any;
    // compoundInstanceMethods
    createCGImageFromRectFormatColorSpace(_: CIImage, from: CGRect, format: number, colorSpace?: any): any;
    // compoundInstanceMethods
    createCGImageFromRectFormatColorSpaceDeferred(_: CIImage, from: CGRect, format: number, colorSpace?: any, deferred?: boolean): any;
    // compoundInstanceMethods
    depthBlurEffectFilterForImageDisparityImagePortraitEffectsMatteHairSemanticSegmentationOrientationOptions(for_: CIImage, disparityImage: CIImage, portraitEffectsMatte?: CIImage, hairSemanticSegmentation?: CIImage, orientation?: CGImagePropertyOrientation, options?: Map<any, any>): CIFilter;
    // compoundInstanceMethods
    depthBlurEffectFilterForImageDisparityImagePortraitEffectsMatteOrientationOptions(for_: CIImage, disparityImage: CIImage, portraitEffectsMatte?: CIImage, orientation?: CGImagePropertyOrientation, options?: Map<any, any>): CIFilter;
    // compoundInstanceMethods
    depthBlurEffectFilterForImageDataOptions(forImageData: NSData, options?: Map<any, any>): CIFilter;
    // compoundInstanceMethods
    depthBlurEffectFilterForImageURLOptions(forImageURL: NSURL, options?: Map<any, any>): CIFilter;
    // compoundInstanceMethods
    drawImageInRectFromRect(_: CIImage, in_: CGRect, from: CGRect): void;
    // compoundInstanceMethods
    static createWithOptions(options?: Map<string, any>): CIContext;
    // compoundInstanceMethods
    prepareRenderFromRectToDestinationAtPointError(fromRect: CIImage, toDestination: CGRect, atPoint: CIRenderDestination, error: CGPoint): boolean;
    // compoundInstanceMethods
    reclaimResources(): void;
    // compoundInstanceMethods
    renderToBitmapRowBytesBoundsFormatColorSpace(_: CIImage, toBitmap: any, rowBytes: number, bounds: CGRect, format: number, colorSpace?: any): void;
    // compoundInstanceMethods
    renderToCVPixelBuffer(_: CIImage, to: any): void;
    // compoundInstanceMethods
    renderToCVPixelBufferBoundsColorSpace(_: CIImage, to: any, bounds: CGRect, colorSpace?: any): void;
    // compoundInstanceMethods
    renderToIOSurfaceBoundsColorSpace(_: CIImage, to: any, bounds: CGRect, colorSpace?: any): void;
    // compoundInstanceMethods
    renderToMTLTextureCommandBufferBoundsColorSpace(_: CIImage, to: MTLTexture, commandBuffer?: MTLCommandBuffer, bounds?: CGRect, colorSpace?: any): void;
    // compoundInstanceMethods
    startTaskToClearError(error: CIRenderDestination): CIRenderTask;
    // compoundInstanceMethods
    startTaskToRenderFromRectToDestinationAtPointError(fromRect: CIImage, toDestination: CGRect, atPoint: CIRenderDestination, error: CGPoint): CIRenderTask;
    // compoundInstanceMethods
    startTaskToRenderToDestinationError(toDestination: CIImage, error: CIRenderDestination): CIRenderTask;
    // compoundInstanceMethods
    writeHEIFRepresentationOfImageToURLFormatColorSpaceOptionsError(toURL: CIImage, format: NSURL, colorSpace: number, options: any, error: Map<string, any>): boolean;
    // compoundInstanceMethods
    writeJPEGRepresentationOfImageToURLColorSpaceOptionsError(toURL: CIImage, colorSpace: NSURL, options: any, error: Map<string, any>): boolean;
    // compoundInstanceMethods
    writePNGRepresentationOfImageToURLFormatColorSpaceOptionsError(toURL: CIImage, format: NSURL, colorSpace: number, options: any, error: Map<string, any>): boolean;
    // compoundInstanceMethods
    writeTIFFRepresentationOfImageToURLFormatColorSpaceOptionsError(toURL: CIImage, format: NSURL, colorSpace: number, options: any, error: Map<string, any>): boolean;
  }

  interface CIConvolution extends CIFilter {
    bias: number;
    setBias(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    weights: CIVector;
    setWeights(_: CIVector)
  }

  interface CICopyMachineTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number)
    color: CIColor;
    setColor(_: CIColor)
    extent: CGRect;
    setExtent(_: CGRect)
    opacity: number;
    setOpacity(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CICoreMLModel extends CIFilter {
    headIndex: number;
    setHeadIndex(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    model: MLModel;
    setModel(_: MLModel)
    softmaxNormalization: boolean;
    setSoftmaxNormalization(_: boolean)
  }

  interface CICrystallize extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  // interface
  class CIDataMatrixCodeDescriptor extends CIBarcodeDescriptor {
    // compoundStaticMethods
    static descriptorWithPayloadRowCountColumnCountEccVersion(payload: NSData, rowCount: number, columnCount: number, eccVersion: CIDataMatrixCodeECCVersion): CIDataMatrixCodeDescriptor;
    // ownInstanceProperties
    columnCount: number;
    // ownInstanceProperties
    eccVersion: CIDataMatrixCodeECCVersion;
    // ownInstanceProperties
    errorCorrectedPayload: NSData;
    // ownInstanceProperties
    rowCount: number;
    // compoundInstanceMethods
    static createWithPayloadRowCountColumnCountEccVersion(payload: NSData, rowCount: number, columnCount: number, eccVersion: CIDataMatrixCodeECCVersion): CIDataMatrixCodeDescriptor;
  }

  interface CIDepthOfField extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    point0: CGPoint;
    setPoint0(_: CGPoint)
    point1: CGPoint;
    setPoint1(_: CGPoint)
    radius: number;
    setRadius(_: number)
    saturation: number;
    setSaturation(_: number)
    unsharpMaskIntensity: number;
    setUnsharpMaskIntensity(_: number)
    unsharpMaskRadius: number;
    setUnsharpMaskRadius(_: number)
  }

  interface CIDepthToDisparity extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // interface
  class CIDetector extends NSObject {
    // compoundInstanceMethods
    featuresInImage(in_: CIImage): CIFeature[];
    // compoundInstanceMethods
    featuresInImageOptions(in_: CIImage, options?: Map<string, any>): CIFeature[];
  }

  interface CIDiscBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIDisintegrateWithMaskTransition extends CITransitionFilter {
    maskImage: CIImage;
    setMaskImage(_: CIImage)
    shadowDensity: number;
    setShadowDensity(_: number)
    shadowOffset: CGPoint;
    setShadowOffset(_: CGPoint)
    shadowRadius: number;
    setShadowRadius(_: number)
  }

  interface CIDisparityToDepth extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIDissolveTransition extends CITransitionFilter {
  }

  interface CIDither extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
  }

  interface CIDocumentEnhancer extends CIFilter {
    amount: number;
    setAmount(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIDotScreen extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    sharpness: number;
    setSharpness(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CIEdgePreserveUpsample extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    lumaSigma: number;
    setLumaSigma(_: number)
    smallImage: CIImage;
    setSmallImage(_: CIImage)
    spatialSigma: number;
    setSpatialSigma(_: number)
  }

  interface CIEdgeWork extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIEdges extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
  }

  interface CIEightfoldReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIExposureAdjust extends CIFilter {
    EV: number;
    setEV(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // interface
  class CIFaceFeature extends CIFeature {
    // ownInstanceProperties
    faceAngle: number;
    // ownInstanceProperties
    hasFaceAngle: boolean;
    // ownInstanceProperties
    hasLeftEyePosition: boolean;
    // ownInstanceProperties
    hasMouthPosition: boolean;
    // ownInstanceProperties
    hasRightEyePosition: boolean;
    // ownInstanceProperties
    hasSmile: boolean;
    // ownInstanceProperties
    hasTrackingFrameCount: boolean;
    // ownInstanceProperties
    hasTrackingID: boolean;
    // ownInstanceProperties
    leftEyeClosed: boolean;
    // ownInstanceProperties
    leftEyePosition: CGPoint;
    // ownInstanceProperties
    mouthPosition: CGPoint;
    // ownInstanceProperties
    rightEyeClosed: boolean;
    // ownInstanceProperties
    rightEyePosition: CGPoint;
    // ownInstanceProperties
    trackingFrameCount: number;
    // ownInstanceProperties
    trackingID: number;
  }

  interface CIFalseColor extends CIFilter {
    color0: CIColor;
    setColor0(_: CIColor)
    color1: CIColor;
    setColor1(_: CIColor)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // interface
  class CIFeature extends NSObject {
    // ownInstanceProperties
    bounds: CGRect;
    // ownInstanceProperties
    type: string;
  }

  // interface
  class CIFilter extends NSObject {
    // compoundStaticMethods
    static CMYKHalftone(): CIFilter;
    // compoundStaticMethods
    static LabDeltaE(): CIFilter;
    // compoundStaticMethods
    static PDF417BarcodeGenerator(): CIFilter;
    // compoundStaticMethods
    static QRCodeGenerator(): CIFilter;
    // compoundStaticMethods
    static accordionFoldTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static additionCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static affineClampFilter(): CIFilter;
    // compoundStaticMethods
    static affineTileFilter(): CIFilter;
    // compoundStaticMethods
    static attributedTextImageGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static aztecCodeGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static barcodeGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static barsSwipeTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static bicubicScaleTransformFilter(): CIFilter;
    // compoundStaticMethods
    static blendWithAlphaMaskFilter(): CIFilter;
    // compoundStaticMethods
    static blendWithBlueMaskFilter(): CIFilter;
    // compoundStaticMethods
    static blendWithMaskFilter(): CIFilter;
    // compoundStaticMethods
    static blendWithRedMaskFilter(): CIFilter;
    // compoundStaticMethods
    static bloomFilter(): CIFilter;
    // compoundStaticMethods
    static bokehBlurFilter(): CIFilter;
    // compoundStaticMethods
    static boxBlurFilter(): CIFilter;
    // compoundStaticMethods
    static checkerboardGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static circularScreenFilter(): CIFilter;
    // compoundStaticMethods
    static code128BarcodeGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static colorBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static colorBurnBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static colorClampFilter(): CIFilter;
    // compoundStaticMethods
    static colorControlsFilter(): CIFilter;
    // compoundStaticMethods
    static colorCrossPolynomialFilter(): CIFilter;
    // compoundStaticMethods
    static colorCubeFilter(): CIFilter;
    // compoundStaticMethods
    static colorCubeWithColorSpaceFilter(): CIFilter;
    // compoundStaticMethods
    static colorCubesMixedWithMaskFilter(): CIFilter;
    // compoundStaticMethods
    static colorCurvesFilter(): CIFilter;
    // compoundStaticMethods
    static colorDodgeBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static colorInvertFilter(): CIFilter;
    // compoundStaticMethods
    static colorMapFilter(): CIFilter;
    // compoundStaticMethods
    static colorMatrixFilter(): CIFilter;
    // compoundStaticMethods
    static colorMonochromeFilter(): CIFilter;
    // compoundStaticMethods
    static colorPolynomialFilter(): CIFilter;
    // compoundStaticMethods
    static colorPosterizeFilter(): CIFilter;
    // compoundStaticMethods
    static comicEffectFilter(): CIFilter;
    // compoundStaticMethods
    static convolution3X3Filter(): CIFilter;
    // compoundStaticMethods
    static convolution5X5Filter(): CIFilter;
    // compoundStaticMethods
    static convolution7X7Filter(): CIFilter;
    // compoundStaticMethods
    static convolution9HorizontalFilter(): CIFilter;
    // compoundStaticMethods
    static convolution9VerticalFilter(): CIFilter;
    // compoundStaticMethods
    static copyMachineTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static coreMLModelFilter(): CIFilter;
    // compoundStaticMethods
    static crystallizeFilter(): CIFilter;
    // compoundStaticMethods
    static darkenBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static depthOfFieldFilter(): CIFilter;
    // compoundStaticMethods
    static depthToDisparityFilter(): CIFilter;
    // compoundStaticMethods
    static differenceBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static discBlurFilter(): CIFilter;
    // compoundStaticMethods
    static disintegrateWithMaskTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static disparityToDepthFilter(): CIFilter;
    // compoundStaticMethods
    static dissolveTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static ditherFilter(): CIFilter;
    // compoundStaticMethods
    static divideBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static documentEnhancerFilter(): CIFilter;
    // compoundStaticMethods
    static dotScreenFilter(): CIFilter;
    // compoundStaticMethods
    static edgePreserveUpsampleFilter(): CIFilter;
    // compoundStaticMethods
    static edgeWorkFilter(): CIFilter;
    // compoundStaticMethods
    static edgesFilter(): CIFilter;
    // compoundStaticMethods
    static eightfoldReflectedTileFilter(): CIFilter;
    // compoundStaticMethods
    static exclusionBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static exposureAdjustFilter(): CIFilter;
    // compoundStaticMethods
    static falseColorFilter(): CIFilter;
    // compoundStaticMethods
    static filterArrayFromSerializedXMPInputImageExtentError(fromSerializedXMP: NSData, inputImageExtent: CGRect): CIFilter[];
    // compoundStaticMethods
    static filterNamesInCategories(inCategories?: string[]): string[];
    // compoundStaticMethods
    static filterNamesInCategory(inCategory?: string): string[];
    // compoundStaticMethods
    static flashTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static fourfoldReflectedTileFilter(): CIFilter;
    // compoundStaticMethods
    static fourfoldRotatedTileFilter(): CIFilter;
    // compoundStaticMethods
    static fourfoldTranslatedTileFilter(): CIFilter;
    // compoundStaticMethods
    static gaborGradientsFilter(): CIFilter;
    // compoundStaticMethods
    static gammaAdjustFilter(): CIFilter;
    // compoundStaticMethods
    static gaussianBlurFilter(): CIFilter;
    // compoundStaticMethods
    static gaussianGradientFilter(): CIFilter;
    // compoundStaticMethods
    static glideReflectedTileFilter(): CIFilter;
    // compoundStaticMethods
    static gloomFilter(): CIFilter;
    // compoundStaticMethods
    static hardLightBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static hatchedScreenFilter(): CIFilter;
    // compoundStaticMethods
    static heightFieldFromMaskFilter(): CIFilter;
    // compoundStaticMethods
    static hexagonalPixellateFilter(): CIFilter;
    // compoundStaticMethods
    static highlightShadowAdjustFilter(): CIFilter;
    // compoundStaticMethods
    static hueAdjustFilter(): CIFilter;
    // compoundStaticMethods
    static hueBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static hueSaturationValueGradientFilter(): CIFilter;
    // compoundStaticMethods
    static kaleidoscopeFilter(): CIFilter;
    // compoundStaticMethods
    static keystoneCorrectionCombinedFilter(): CIFilter;
    // compoundStaticMethods
    static keystoneCorrectionHorizontalFilter(): CIFilter;
    // compoundStaticMethods
    static keystoneCorrectionVerticalFilter(): CIFilter;
    // compoundStaticMethods
    static lanczosScaleTransformFilter(): CIFilter;
    // compoundStaticMethods
    static lenticularHaloGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static lightenBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static lineOverlayFilter(): CIFilter;
    // compoundStaticMethods
    static lineScreenFilter(): CIFilter;
    // compoundStaticMethods
    static linearBurnBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static linearDodgeBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static linearGradientFilter(): CIFilter;
    // compoundStaticMethods
    static linearToSRGBToneCurveFilter(): CIFilter;
    // compoundStaticMethods
    static localizedDescriptionForFilterName(forFilterName: string): string;
    // compoundStaticMethods
    static localizedNameForCategory(forCategory: string): string;
    // compoundStaticMethods
    static localizedNameForFilterName(forFilterName: string): string;
    // compoundStaticMethods
    static localizedReferenceDocumentationForFilterName(forFilterName: string): NSURL;
    // compoundStaticMethods
    static luminosityBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static maskToAlphaFilter(): CIFilter;
    // compoundStaticMethods
    static maskedVariableBlurFilter(): CIFilter;
    // compoundStaticMethods
    static maximumComponentFilter(): CIFilter;
    // compoundStaticMethods
    static maximumCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static medianFilter(): CIFilter;
    // compoundStaticMethods
    static meshGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static minimumComponentFilter(): CIFilter;
    // compoundStaticMethods
    static minimumCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static mixFilter(): CIFilter;
    // compoundStaticMethods
    static modTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static morphologyGradientFilter(): CIFilter;
    // compoundStaticMethods
    static morphologyMaximumFilter(): CIFilter;
    // compoundStaticMethods
    static morphologyMinimumFilter(): CIFilter;
    // compoundStaticMethods
    static morphologyRectangleMaximumFilter(): CIFilter;
    // compoundStaticMethods
    static morphologyRectangleMinimumFilter(): CIFilter;
    // compoundStaticMethods
    static motionBlurFilter(): CIFilter;
    // compoundStaticMethods
    static multiplyBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static multiplyCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static noiseReductionFilter(): CIFilter;
    // compoundStaticMethods
    static opTileFilter(): CIFilter;
    // compoundStaticMethods
    static overlayBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static pageCurlTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static pageCurlWithShadowTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static paletteCentroidFilter(): CIFilter;
    // compoundStaticMethods
    static palettizeFilter(): CIFilter;
    // compoundStaticMethods
    static parallelogramTileFilter(): CIFilter;
    // compoundStaticMethods
    static perspectiveCorrectionFilter(): CIFilter;
    // compoundStaticMethods
    static perspectiveRotateFilter(): CIFilter;
    // compoundStaticMethods
    static perspectiveTileFilter(): CIFilter;
    // compoundStaticMethods
    static perspectiveTransformFilter(): CIFilter;
    // compoundStaticMethods
    static perspectiveTransformWithExtentFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectChromeFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectFadeFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectInstantFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectMonoFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectNoirFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectProcessFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectTonalFilter(): CIFilter;
    // compoundStaticMethods
    static photoEffectTransferFilter(): CIFilter;
    // compoundStaticMethods
    static pinLightBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static pixellateFilter(): CIFilter;
    // compoundStaticMethods
    static pointillizeFilter(): CIFilter;
    // compoundStaticMethods
    static radialGradientFilter(): CIFilter;
    // compoundStaticMethods
    static randomGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static registerFilterNameConstructorClassAttributes(_: string, constructor: CIFilterConstructor, classAttributes: Map<string, any>): void;
    // compoundStaticMethods
    static rippleTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static roundedRectangleGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static sRGBToneCurveToLinearFilter(): CIFilter;
    // compoundStaticMethods
    static saliencyMapFilter(): CIFilter;
    // compoundStaticMethods
    static saturationBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static screenBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static sepiaToneFilter(): CIFilter;
    // compoundStaticMethods
    static serializedXMPFromFiltersInputImageExtent(from: CIFilter[], inputImageExtent: CGRect): NSData;
    // compoundStaticMethods
    static shadedMaterialFilter(): CIFilter;
    // compoundStaticMethods
    static sharpenLuminanceFilter(): CIFilter;
    // compoundStaticMethods
    static sixfoldReflectedTileFilter(): CIFilter;
    // compoundStaticMethods
    static sixfoldRotatedTileFilter(): CIFilter;
    // compoundStaticMethods
    static smoothLinearGradientFilter(): CIFilter;
    // compoundStaticMethods
    static softLightBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static sourceAtopCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static sourceInCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static sourceOutCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static sourceOverCompositingFilter(): CIFilter;
    // compoundStaticMethods
    static spotColorFilter(): CIFilter;
    // compoundStaticMethods
    static spotLightFilter(): CIFilter;
    // compoundStaticMethods
    static starShineGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static straightenFilter(): CIFilter;
    // compoundStaticMethods
    static stripesGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static subtractBlendModeFilter(): CIFilter;
    // compoundStaticMethods
    static sunbeamsGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static supportedRawCameraModels(): string[];
    // compoundStaticMethods
    static swipeTransitionFilter(): CIFilter;
    // compoundStaticMethods
    static temperatureAndTintFilter(): CIFilter;
    // compoundStaticMethods
    static textImageGeneratorFilter(): CIFilter;
    // compoundStaticMethods
    static thermalFilter(): CIFilter;
    // compoundStaticMethods
    static toneCurveFilter(): CIFilter;
    // compoundStaticMethods
    static triangleKaleidoscopeFilter(): CIFilter;
    // compoundStaticMethods
    static triangleTileFilter(): CIFilter;
    // compoundStaticMethods
    static twelvefoldReflectedTileFilter(): CIFilter;
    // compoundStaticMethods
    static unsharpMaskFilter(): CIFilter;
    // compoundStaticMethods
    static vibranceFilter(): CIFilter;
    // compoundStaticMethods
    static vignetteEffectFilter(): CIFilter;
    // compoundStaticMethods
    static vignetteFilter(): CIFilter;
    // compoundStaticMethods
    static whitePointAdjustFilter(): CIFilter;
    // compoundStaticMethods
    static xRayFilter(): CIFilter;
    // compoundStaticMethods
    static zoomBlurFilter(): CIFilter;
    // ownInstanceProperties
    attributes: Map<string, any>;
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    inputKeys: string[];
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    outputImage: CIImage;
    // ownInstanceProperties
    outputKeys: string[];
    // compoundInstanceMethods
    applyArgumentsOptions(_: CIKernel, arguments_?: any[], options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    //  name(): string;
    // compoundInstanceMethods
    setDefaults(): void;
    // compoundInstanceMethods
    setName(_: string): void;
    // compoundInstanceMethods
    viewForUIConfigurationExcludedKeys(_: Map<any, any>, excludedKeys: any[]): IKFilterUIView;
  }

  interface CIFilterConstructor {
    // instance method
    filterWithName(withName: string): CIFilter;
  }

  // interface
  class CIFilterGenerator extends NSObject {
    // ownInstanceProperties
    classAttributes: Map<any, any>;
    setClassAttributes(_: Map<any, any>)
    // ownInstanceProperties
    exportedKeys: Map<any, any>;
    // compoundInstanceMethods
    connectObjectWithKeyToObjectWithKey(_: any, withKey?: string, to?: any, withKey2?: string): void;
    // compoundInstanceMethods
    disconnectObjectWithKeyToObjectWithKey(_: any, withKey: string, to: any, withKey2: string): void;
    // compoundInstanceMethods
    exportKeyFromObjectWithName(_: string, from: any, withName?: string): void;
    // compoundInstanceMethods
    filter(): CIFilter;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): CIFilterGenerator;
    // compoundInstanceMethods
    registerFilterName(_: string): void;
    // compoundInstanceMethods
    removeExportedKey(_: string): void;
    // compoundInstanceMethods
    setAttributesForExportedKey(_: Map<any, any>, forExportedKey: string): void;
    // compoundInstanceMethods
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
  }

  interface CIFilter {
    outputImage: CIImage;
  }

  // interface
  class CIFilterShape extends NSObject {
    // ownInstanceProperties
    extent: CGRect;
    // compoundInstanceMethods
    static createWithRect(rect: CGRect): CIFilterShape;
    // compoundInstanceMethods
    insetByXY(x: number, y: number): CIFilterShape;
    // compoundInstanceMethods
    intersectWith(with_: CIFilterShape): CIFilterShape;
    // compoundInstanceMethods
    intersectWithRect(with_: CGRect): CIFilterShape;
    // compoundInstanceMethods
    transformByInterior(by: CGAffineTransform, interior: boolean): CIFilterShape;
    // compoundInstanceMethods
    unionWith(with_: CIFilterShape): CIFilterShape;
    // compoundInstanceMethods
    unionWithRect(with_: CGRect): CIFilterShape;
  }

  interface CIFlashTransition extends CITransitionFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color: CIColor;
    setColor(_: CIColor)
    extent: CGRect;
    setExtent(_: CGRect)
    fadeThreshold: number;
    setFadeThreshold(_: number)
    maxStriationRadius: number;
    setMaxStriationRadius(_: number)
    striationContrast: number;
    setStriationContrast(_: number)
    striationStrength: number;
    setStriationStrength(_: number)
  }

  interface CIFourCoordinateGeometryFilter extends CIFilter {
    bottomLeft: CGPoint;
    setBottomLeft(_: CGPoint)
    bottomRight: CGPoint;
    setBottomRight(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    topLeft: CGPoint;
    setTopLeft(_: CGPoint)
    topRight: CGPoint;
    setTopRight(_: CGPoint)
  }

  interface CIFourfoldReflectedTile extends CIFilter {
    acuteAngle: number;
    setAcuteAngle(_: number)
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIFourfoldRotatedTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIFourfoldTranslatedTile extends CIFilter {
    acuteAngle: number;
    setAcuteAngle(_: number)
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIGaborGradients extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIGammaAdjust extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIGaussianBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIGaussianGradient extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color0: CIColor;
    setColor0(_: CIColor)
    color1: CIColor;
    setColor1(_: CIColor)
    radius: number;
    setRadius(_: number)
  }

  interface CIGlideReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIGloom extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
    radius: number;
    setRadius(_: number)
  }

  interface CIHatchedScreen extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    sharpness: number;
    setSharpness(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CIHeightFieldFromMask extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIHexagonalPixellate extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    scale: number;
    setScale(_: number)
  }

  interface CIHighlightShadowAdjust extends CIFilter {
    highlightAmount: number;
    setHighlightAmount(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
    shadowAmount: number;
    setShadowAmount(_: number)
  }

  interface CIHueAdjust extends CIFilter {
    angle: number;
    setAngle(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIHueSaturationValueGradient extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any)
    dither: number;
    setDither(_: number)
    radius: number;
    setRadius(_: number)
    softness: number;
    setSoftness(_: number)
    value: number;
    setValue(_: number)
  }

  // interface
  class CIImage extends NSObject {
    // compoundStaticMethods
    static emptyImage(): CIImage;
    // compoundStaticMethods
    static imageWithDepthData(_: AVDepthData): CIImage;
    // compoundStaticMethods
    static imageWithDepthDataOptions(_: AVDepthData, options?: Map<string, any>): CIImage;
    // compoundStaticMethods
    static imageWithImageProviderSizeFormatColorSpaceOptions(_: any, _2: number, size: number, format: number, colorSpace?: any, options?: Map<string, any>): CIImage;
    // compoundStaticMethods
    static imageWithPortaitEffectsMatte(_: AVPortraitEffectsMatte): CIImage;
    // compoundStaticMethods
    static imageWithPortaitEffectsMatteOptions(_: AVPortraitEffectsMatte, options?: Map<string, any>): CIImage;
    // compoundStaticMethods
    static imageWithSemanticSegmentationMatte(_: AVSemanticSegmentationMatte): CIImage;
    // compoundStaticMethods
    static imageWithSemanticSegmentationMatteOptions(_: AVSemanticSegmentationMatte, options?: Map<string, any>): CIImage;
    // ownInstanceProperties
    CGImage: any;
    // ownInstanceProperties
    colorSpace: any;
    // ownInstanceProperties
    definition: CIFilterShape;
    // ownInstanceProperties
    depthData: AVDepthData;
    // ownInstanceProperties
    extent: CGRect;
    // ownInstanceProperties
    pixelBuffer: any;
    // ownInstanceProperties
    portraitEffectsMatte: AVPortraitEffectsMatte;
    // ownInstanceProperties
    properties: Map<string, any>;
    // ownInstanceProperties
    semanticSegmentationMatte: AVSemanticSegmentationMatte;
    // ownInstanceProperties
    url: NSURL;
    // ownStaticProperties
    static blackImage: CIImage;
    // ownStaticProperties
    static blueImage: CIImage;
    // ownStaticProperties
    static clearImage: CIImage;
    // ownStaticProperties
    static cyanImage: CIImage;
    // ownStaticProperties
    static grayImage: CIImage;
    // ownStaticProperties
    static greenImage: CIImage;
    // ownStaticProperties
    static magentaImage: CIImage;
    // ownStaticProperties
    static redImage: CIImage;
    // ownStaticProperties
    static whiteImage: CIImage;
    // ownStaticProperties
    static yellowImage: CIImage;
    // compoundInstanceMethods
    autoAdjustmentFilters(): CIFilter[];
    // compoundInstanceMethods
    autoAdjustmentFiltersWithOptions(options?: Map<string, any>): CIFilter[];
    // compoundInstanceMethods
    drawAtPointFromRectOperationFraction(at: CGPoint, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    // compoundInstanceMethods
    drawInRectFromRectOperationFraction(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    // compoundInstanceMethods
    imageByApplyingCGOrientation(_: CGImagePropertyOrientation): CIImage;
    // compoundInstanceMethods
    imageByApplyingFilter(_: string): CIImage;
    // compoundInstanceMethods
    imageByApplyingFilterWithInputParameters(_: string, parameters?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    imageByApplyingGaussianBlurWithSigma(sigma: number): CIImage;
    // compoundInstanceMethods
    imageByApplyingOrientation(forExifOrientation: number): CIImage;
    // compoundInstanceMethods
    imageByApplyingTransform(by: CGAffineTransform): CIImage;
    // compoundInstanceMethods
    imageByApplyingTransformHighQualityDownsample(by: CGAffineTransform, highQualityDownsample: boolean): CIImage;
    // compoundInstanceMethods
    imageByClampingToExtent(): CIImage;
    // compoundInstanceMethods
    imageByClampingToRect(to: CGRect): CIImage;
    // compoundInstanceMethods
    imageByColorMatchingColorSpaceToWorkingSpace(from: any): CIImage;
    // compoundInstanceMethods
    imageByColorMatchingWorkingSpaceToColorSpace(to: any): CIImage;
    // compoundInstanceMethods
    imageByCompositingOverImage(over: CIImage): CIImage;
    // compoundInstanceMethods
    imageByCroppingToRect(to: CGRect): CIImage;
    // compoundInstanceMethods
    imageByInsertingIntermediate(): CIImage;
    // compoundInstanceMethods
    imageByInsertingIntermediate(cache: boolean): CIImage;
    // compoundInstanceMethods
    imageByPremultiplyingAlpha(): CIImage;
    // compoundInstanceMethods
    imageBySamplingLinear(): CIImage;
    // compoundInstanceMethods
    imageBySamplingNearest(): CIImage;
    // compoundInstanceMethods
    imageBySettingAlphaOneInExtent(in_: CGRect): CIImage;
    // compoundInstanceMethods
    imageBySettingProperties(_: Map<any, any>): CIImage;
    // compoundInstanceMethods
    imageByUnpremultiplyingAlpha(): CIImage;
    // compoundInstanceMethods
    imageTransformForCGOrientation(for_: CGImagePropertyOrientation): CGAffineTransform;
    // compoundInstanceMethods
    imageTransformForOrientation(forExifOrientation: number): CGAffineTransform;
    // compoundInstanceMethods
    static createWithBitmapDataBytesPerRowSizeFormatColorSpace(bitmapData: NSData, bytesPerRow: number, size: CGSize, format: number, colorSpace?: any): CIImage;
    // compoundInstanceMethods
    static createWithBitmapImageRep(bitmapImageRep: NSBitmapImageRep): CIImage;
    // compoundInstanceMethods
    static createWithCGImage(CGImage: any): CIImage;
    // compoundInstanceMethods
    static createWithCGImageOptions(CGImage: any, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithCGImageSourceIndexOptions(CGImageSource: any, index: number, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithCVImageBuffer(CVImageBuffer: any): CIImage;
    // compoundInstanceMethods
    static createWithCVImageBufferOptions(CVImageBuffer: any, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithCVPixelBuffer(CVPixelBuffer: any): CIImage;
    // compoundInstanceMethods
    static createWithCVPixelBufferOptions(CVPixelBuffer: any, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithColor(color: CIColor): CIImage;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): CIImage;
    // compoundInstanceMethods
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithData(data: NSData): CIImage;
    // compoundInstanceMethods
    static createWithDataOptions(data: NSData, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithDepthData(depthData: AVDepthData): CIImage;
    // compoundInstanceMethods
    static createWithDepthDataOptions(depthData: AVDepthData, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithIOSurface(IOSurface: any): CIImage;
    // compoundInstanceMethods
    static createWithIOSurfaceOptions(IOSurface: any, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithImageProviderSizeFormatColorSpaceOptions(_: any, imageProvider: number, size: number, format: number, colorSpace?: any, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithMTLTextureOptions(MTLTexture: MTLTexture, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithPortaitEffectsMatte(portaitEffectsMatte: AVPortraitEffectsMatte): CIImage;
    // compoundInstanceMethods
    static createWithPortaitEffectsMatteOptions(portaitEffectsMatte: AVPortraitEffectsMatte, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    static createWithSemanticSegmentationMatte(semanticSegmentationMatte: AVSemanticSegmentationMatte): CIImage;
    // compoundInstanceMethods
    static createWithSemanticSegmentationMatteOptions(semanticSegmentationMatte: AVSemanticSegmentationMatte, options?: Map<string, any>): CIImage;
    // compoundInstanceMethods
    regionOfInterestForImageInRect(for_: CIImage, in_: CGRect): CGRect;
  }

  // interface
  class CIImageAccumulator extends NSObject {
    // ownInstanceProperties
    extent: CGRect;
    // ownInstanceProperties
    format: number;
    // compoundInstanceMethods
    clear(): void;
    // compoundInstanceMethods
    image(): CIImage;
    // compoundInstanceMethods
    static createWithExtentFormat(extent: CGRect, format: number): CIImageAccumulator;
    // compoundInstanceMethods
    static createWithExtentFormatColorSpace(extent: CGRect, format: number, colorSpace: any): CIImageAccumulator;
    // compoundInstanceMethods
    setImage(_: CIImage): void;
    // compoundInstanceMethods
    setImageDirtyRect(_: CIImage, dirtyRect: CGRect): void;
  }

  interface CIImageProcessorInput {
    baseAddress: any;
    bytesPerRow: number;
    format: number;
    metalTexture: MTLTexture;
    pixelBuffer: any;
    region: CGRect;
    surface: any;
  }

  // interface
  class CIImageProcessorKernel extends NSObject {
    // compoundStaticMethods
    static applyWithExtentInputsArgumentsError(inputs: CGRect, arguments_?: CIImage[], error?: Map<string, any>): CIImage;
    // compoundStaticMethods
    static formatForInputAtIndex(at: number): number;
    // compoundStaticMethods
    static processWithInputsWithArgumentsOutputError(arguments_?: CIImageProcessorInput[], output?: Map<string, any>, error?: CIImageProcessorOutput): boolean;
    // compoundStaticMethods
    static roiForInputArgumentsOutputRect(forInput: number, arguments_?: Map<string, any>, outputRect?: CGRect): CGRect;
    // ownStaticProperties
    static outputFormat: number;
    // ownStaticProperties
    static outputIsOpaque: boolean;
    // ownStaticProperties
    static synchronizeInputs: boolean;
  }

  interface CIImageProcessorOutput {
    baseAddress: any;
    bytesPerRow: number;
    format: number;
    metalCommandBuffer: MTLCommandBuffer;
    metalTexture: MTLTexture;
    pixelBuffer: any;
    region: CGRect;
    surface: any;
  }

  interface CIKaleidoscope extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    count: number;
    setCount(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // interface
  class CIKernel extends NSObject {
    // compoundStaticMethods
    static kernelWithFunctionNameFromMetalLibraryDataError(fromMetalLibraryData: string, error: NSData): CIKernel;
    // compoundStaticMethods
    static kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError(fromMetalLibraryData: string, outputPixelFormat: NSData, error: number): CIKernel;
    // ownInstanceProperties
    name: string;
    // compoundInstanceMethods
    applyWithExtentRoiCallbackArguments(extent: CGRect, roiCallback: (p1: number, p2: CGRect) => CGRect, arguments_?: any[]): CIImage;
    // compoundInstanceMethods
    setROISelector(_: string): void;
  }

  interface CIKeystoneCorrectionCombined extends CIFourCoordinateGeometryFilter {
    focalLength: number;
    setFocalLength(_: number)
  }

  interface CIKeystoneCorrectionHorizontal extends CIFourCoordinateGeometryFilter {
    focalLength: number;
    setFocalLength(_: number)
  }

  interface CIKeystoneCorrectionVertical extends CIFourCoordinateGeometryFilter {
    focalLength: number;
    setFocalLength(_: number)
  }

  interface CILabDeltaE extends CIFilter {
    image2: CIImage;
    setImage2(_: CIImage)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CILanczosScaleTransform extends CIFilter {
    aspectRatio: number;
    setAspectRatio(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    scale: number;
    setScale(_: number)
  }

  interface CILenticularHaloGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color: CIColor;
    setColor(_: CIColor)
    haloOverlap: number;
    setHaloOverlap(_: number)
    haloRadius: number;
    setHaloRadius(_: number)
    haloWidth: number;
    setHaloWidth(_: number)
    striationContrast: number;
    setStriationContrast(_: number)
    striationStrength: number;
    setStriationStrength(_: number)
    time: number;
    setTime(_: number)
  }

  interface CILineOverlay extends CIFilter {
    contrast: number;
    setContrast(_: number)
    edgeIntensity: number;
    setEdgeIntensity(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    NRNoiseLevel: number;
    setNRNoiseLevel(_: number)
    NRSharpness: number;
    setNRSharpness(_: number)
    threshold: number;
    setThreshold(_: number)
  }

  interface CILineScreen extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    sharpness: number;
    setSharpness(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CILinearGradient extends CIFilter {
    color0: CIColor;
    setColor0(_: CIColor)
    color1: CIColor;
    setColor1(_: CIColor)
    point0: CGPoint;
    setPoint0(_: CGPoint)
    point1: CGPoint;
    setPoint1(_: CGPoint)
  }

  interface CILinearToSRGBToneCurve extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIMaskToAlpha extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIMaskedVariableBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    mask: CIImage;
    setMask(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIMaximumComponent extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIMedian extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIMeshGenerator extends CIFilter {
    color: CIColor;
    setColor(_: CIColor)
    mesh: any[];
    setMesh(_: any[])
    width: number;
    setWidth(_: number)
  }

  interface CIMinimumComponent extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIMix extends CIFilter {
    amount: number;
    setAmount(_: number)
    backgroundImage: CIImage;
    setBackgroundImage(_: CIImage)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIModTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    compression: number;
    setCompression(_: number)
    radius: number;
    setRadius(_: number)
  }

  interface CIMorphologyGradient extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIMorphologyMaximum extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIMorphologyMinimum extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CIMorphologyRectangleMaximum extends CIFilter {
    height: number;
    setHeight(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIMorphologyRectangleMinimum extends CIFilter {
    height: number;
    setHeight(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIMotionBlur extends CIFilter {
    angle: number;
    setAngle(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  interface CINoiseReduction extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    noiseLevel: number;
    setNoiseLevel(_: number)
    sharpness: number;
    setSharpness(_: number)
  }

  interface CIOpTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    scale: number;
    setScale(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CIPDF417BarcodeGenerator extends CIFilter {
    alwaysSpecifyCompaction: number;
    setAlwaysSpecifyCompaction(_: number)
    compactionMode: number;
    setCompactionMode(_: number)
    compactStyle: number;
    setCompactStyle(_: number)
    correctionLevel: number;
    setCorrectionLevel(_: number)
    dataColumns: number;
    setDataColumns(_: number)
    maxHeight: number;
    setMaxHeight(_: number)
    maxWidth: number;
    setMaxWidth(_: number)
    message: NSData;
    setMessage(_: NSData)
    minHeight: number;
    setMinHeight(_: number)
    minWidth: number;
    setMinWidth(_: number)
    preferredAspectRatio: number;
    setPreferredAspectRatio(_: number)
    rows: number;
    setRows(_: number)
  }

  // interface
  class CIPDF417CodeDescriptor extends CIBarcodeDescriptor {
    // compoundStaticMethods
    static descriptorWithPayloadIsCompactRowCountColumnCount(payload: NSData, isCompact: boolean, rowCount: number, columnCount: number): CIPDF417CodeDescriptor;
    // ownInstanceProperties
    columnCount: number;
    // ownInstanceProperties
    errorCorrectedPayload: NSData;
    // ownInstanceProperties
    isCompact: boolean;
    // ownInstanceProperties
    rowCount: number;
    // compoundInstanceMethods
    static createWithPayloadIsCompactRowCountColumnCount(payload: NSData, isCompact: boolean, rowCount: number, columnCount: number): CIPDF417CodeDescriptor;
  }

  interface CIPageCurlTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number)
    backsideImage: CIImage;
    setBacksideImage(_: CIImage)
    extent: CGRect;
    setExtent(_: CGRect)
    radius: number;
    setRadius(_: number)
    shadingImage: CIImage;
    setShadingImage(_: CIImage)
  }

  interface CIPageCurlWithShadowTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number)
    backsideImage: CIImage;
    setBacksideImage(_: CIImage)
    extent: CGRect;
    setExtent(_: CGRect)
    radius: number;
    setRadius(_: number)
    shadowAmount: number;
    setShadowAmount(_: number)
    shadowExtent: CGRect;
    setShadowExtent(_: CGRect)
    shadowSize: number;
    setShadowSize(_: number)
  }

  interface CIPaletteCentroid extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    paletteImage: CIImage;
    setPaletteImage(_: CIImage)
    perceptual: boolean;
    setPerceptual(_: boolean)
  }

  interface CIPalettize extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    paletteImage: CIImage;
    setPaletteImage(_: CIImage)
    perceptual: boolean;
    setPerceptual(_: boolean)
  }

  interface CIParallelogramTile extends CIFilter {
    acuteAngle: number;
    setAcuteAngle(_: number)
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIPerspectiveCorrection extends CIFourCoordinateGeometryFilter {
    crop: boolean;
    setCrop(_: boolean)
  }

  interface CIPerspectiveRotate extends CIFilter {
    focalLength: number;
    setFocalLength(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    pitch: number;
    setPitch(_: number)
    roll: number;
    setRoll(_: number)
    yaw: number;
    setYaw(_: number)
  }

  interface CIPerspectiveTile extends CIFilter {
    bottomLeft: CGPoint;
    setBottomLeft(_: CGPoint)
    bottomRight: CGPoint;
    setBottomRight(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    topLeft: CGPoint;
    setTopLeft(_: CGPoint)
    topRight: CGPoint;
    setTopRight(_: CGPoint)
  }

  interface CIPerspectiveTransform extends CIFourCoordinateGeometryFilter {
  }

  interface CIPerspectiveTransformWithExtent extends CIFourCoordinateGeometryFilter {
    extent: CGRect;
    setExtent(_: CGRect)
  }

  interface CIPhotoEffect extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIPixellate extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    scale: number;
    setScale(_: number)
  }

  // interface
  class CIPlugIn extends NSObject {
    // compoundStaticMethods
    static loadNonExecutablePlugIn(_: NSURL): void;
    // compoundStaticMethods
    static loadNonExecutablePlugIns(): void;
  }

  interface CIPlugInRegistration {
    // instance method
    load(_: any): boolean;
  }

  interface CIPointillize extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
  }

  // interface
  class CIQRCodeDescriptor extends CIBarcodeDescriptor {
    // compoundStaticMethods
    static descriptorWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(payload: NSData, symbolVersion: number, maskPattern: number, errorCorrectionLevel: CIQRCodeErrorCorrectionLevel): CIQRCodeDescriptor;
    // ownInstanceProperties
    errorCorrectedPayload: NSData;
    // ownInstanceProperties
    errorCorrectionLevel: CIQRCodeErrorCorrectionLevel;
    // ownInstanceProperties
    maskPattern: number;
    // ownInstanceProperties
    symbolVersion: number;
    // compoundInstanceMethods
    static createWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(payload: NSData, symbolVersion: number, maskPattern: number, errorCorrectionLevel: CIQRCodeErrorCorrectionLevel): CIQRCodeDescriptor;
  }

  // interface
  class CIQRCodeFeature extends CIFeature {
    // ownInstanceProperties
    bottomLeft: CGPoint;
    // ownInstanceProperties
    bottomRight: CGPoint;
    // ownInstanceProperties
    messageString: string;
    // ownInstanceProperties
    symbolDescriptor: CIQRCodeDescriptor;
    // ownInstanceProperties
    topLeft: CGPoint;
    // ownInstanceProperties
    topRight: CGPoint;
  }

  interface CIQRCodeGenerator extends CIFilter {
    correctionLevel: string;
    setCorrectionLevel(_: string)
    message: NSData;
    setMessage(_: NSData)
  }

  interface CIRadialGradient extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color0: CIColor;
    setColor0(_: CIColor)
    color1: CIColor;
    setColor1(_: CIColor)
    radius0: number;
    setRadius0(_: number)
    radius1: number;
    setRadius1(_: number)
  }

  interface CIRandomGenerator extends CIFilter {
  }

  // interface
  class CIRectangleFeature extends CIFeature {
    // ownInstanceProperties
    bottomLeft: CGPoint;
    // ownInstanceProperties
    bottomRight: CGPoint;
    // ownInstanceProperties
    topLeft: CGPoint;
    // ownInstanceProperties
    topRight: CGPoint;
  }

  // interface
  class CIRenderDestination extends NSObject {
    // ownInstanceProperties
    alphaMode: CIRenderDestinationAlphaMode;
    setAlphaMode(_: CIRenderDestinationAlphaMode)
    // ownInstanceProperties
    blendKernel: CIBlendKernel;
    setBlendKernel(_: CIBlendKernel)
    // ownInstanceProperties
    blendsInDestinationColorSpace: boolean;
    setBlendsInDestinationColorSpace(_: boolean)
    // ownInstanceProperties
    isClamped: boolean;
    setClamped(_: boolean)
    // ownInstanceProperties
    colorSpace: any;
    setColorSpace(_: any)
    // ownInstanceProperties
    isDithered: boolean;
    setDithered(_: boolean)
    // ownInstanceProperties
    isFlipped: boolean;
    setFlipped(_: boolean)
    // ownInstanceProperties
    height: number;
    // ownInstanceProperties
    width: number;
    // compoundInstanceMethods
    static createWithBitmapDataWidthHeightBytesPerRowFormat(bitmapData: any, width: number, height: number, bytesPerRow: number, format: number): CIRenderDestination;
    // compoundInstanceMethods
    static createWithGLTextureTargetWidthHeight(GLTexture: number, target: number, width: number, height: number): CIRenderDestination;
    // compoundInstanceMethods
    static createWithIOSurface(IOSurface: IOSurface): CIRenderDestination;
    // compoundInstanceMethods
    static createWithMTLTextureCommandBuffer(MTLTexture: MTLTexture, commandBuffer?: MTLCommandBuffer): CIRenderDestination;
    // compoundInstanceMethods
    static createWithPixelBuffer(pixelBuffer: any): CIRenderDestination;
    // compoundInstanceMethods
    static createWithWidthHeightPixelFormatCommandBufferMtlTextureProvider(width: number, height: number, pixelFormat: MTLPixelFormat, commandBuffer?: MTLCommandBuffer, mtlTextureProvider?: () => MTLTexture): CIRenderDestination;
  }

  // interface
  class CIRenderInfo extends NSObject {
    // ownInstanceProperties
    kernelExecutionTime: number;
    // ownInstanceProperties
    passCount: number;
    // ownInstanceProperties
    pixelsProcessed: number;
  }

  // interface
  class CIRenderTask extends NSObject {
    // compoundInstanceMethods
    waitUntilCompletedAndReturnError(): CIRenderInfo;
  }

  interface CIRippleTransition extends CITransitionFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    extent: CGRect;
    setExtent(_: CGRect)
    scale: number;
    setScale(_: number)
    shadingImage: CIImage;
    setShadingImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIRoundedRectangleGenerator extends CIFilter {
    color: CIColor;
    setColor(_: CIColor)
    extent: CGRect;
    setExtent(_: CGRect)
    radius: number;
    setRadius(_: number)
  }

  interface CISRGBToneCurveToLinear extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CISaliencyMap extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // interface
  class CISampler extends NSObject {
    // compoundStaticMethods
    static samplerWithImageKeysAndValues(_: CIImage, keysAndValues: any): CISampler;
    // ownInstanceProperties
    definition: CIFilterShape;
    // ownInstanceProperties
    extent: CGRect;
    // compoundInstanceMethods
    static createWithImage(image: CIImage): CISampler;
    // compoundInstanceMethods
    static createWithImageOptions(image: CIImage, options?: Map<any, any>): CISampler;
  }

  interface CISepiaTone extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
  }

  interface CIShadedMaterial extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    scale: number;
    setScale(_: number)
    shadingImage: CIImage;
    setShadingImage(_: CIImage)
  }

  interface CISharpenLuminance extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    radius: number;
    setRadius(_: number)
    sharpness: number;
    setSharpness(_: number)
  }

  interface CISixfoldReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CISixfoldRotatedTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CISmoothLinearGradient extends CIFilter {
    color0: CIColor;
    setColor0(_: CIColor)
    color1: CIColor;
    setColor1(_: CIColor)
    point0: CGPoint;
    setPoint0(_: CGPoint)
    point1: CGPoint;
    setPoint1(_: CGPoint)
  }

  interface CISpotColor extends CIFilter {
    centerColor1: CIColor;
    setCenterColor1(_: CIColor)
    centerColor2: CIColor;
    setCenterColor2(_: CIColor)
    centerColor3: CIColor;
    setCenterColor3(_: CIColor)
    closeness1: number;
    setCloseness1(_: number)
    closeness2: number;
    setCloseness2(_: number)
    closeness3: number;
    setCloseness3(_: number)
    contrast1: number;
    setContrast1(_: number)
    contrast2: number;
    setContrast2(_: number)
    contrast3: number;
    setContrast3(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    replacementColor1: CIColor;
    setReplacementColor1(_: CIColor)
    replacementColor2: CIColor;
    setReplacementColor2(_: CIColor)
    replacementColor3: CIColor;
    setReplacementColor3(_: CIColor)
  }

  interface CISpotLight extends CIFilter {
    brightness: number;
    setBrightness(_: number)
    color: CIColor;
    setColor(_: CIColor)
    concentration: number;
    setConcentration(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    lightPointsAt: CIVector;
    setLightPointsAt(_: CIVector)
    lightPosition: CIVector;
    setLightPosition(_: CIVector)
  }

  interface CIStarShineGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color: CIColor;
    setColor(_: CIColor)
    crossAngle: number;
    setCrossAngle(_: number)
    crossOpacity: number;
    setCrossOpacity(_: number)
    crossScale: number;
    setCrossScale(_: number)
    crossWidth: number;
    setCrossWidth(_: number)
    epsilon: number;
    setEpsilon(_: number)
    radius: number;
    setRadius(_: number)
  }

  interface CIStraighten extends CIFilter {
    angle: number;
    setAngle(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIStripesGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color0: CIColor;
    setColor0(_: CIColor)
    color1: CIColor;
    setColor1(_: CIColor)
    sharpness: number;
    setSharpness(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CISunbeamsGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    color: CIColor;
    setColor(_: CIColor)
    maxStriationRadius: number;
    setMaxStriationRadius(_: number)
    striationContrast: number;
    setStriationContrast(_: number)
    striationStrength: number;
    setStriationStrength(_: number)
    sunRadius: number;
    setSunRadius(_: number)
    time: number;
    setTime(_: number)
  }

  interface CISwipeTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number)
    color: CIColor;
    setColor(_: CIColor)
    extent: CGRect;
    setExtent(_: CGRect)
    opacity: number;
    setOpacity(_: number)
    width: number;
    setWidth(_: number)
  }

  interface CITemperatureAndTint extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    neutral: CIVector;
    setNeutral(_: CIVector)
    targetNeutral: CIVector;
    setTargetNeutral(_: CIVector)
  }

  // interface
  class CITextFeature extends CIFeature {
    // ownInstanceProperties
    bottomLeft: CGPoint;
    // ownInstanceProperties
    bottomRight: CGPoint;
    // ownInstanceProperties
    subFeatures: any[];
    // ownInstanceProperties
    topLeft: CGPoint;
    // ownInstanceProperties
    topRight: CGPoint;
  }

  interface CITextImageGenerator extends CIFilter {
    fontName: string;
    setFontName(_: string)
    fontSize: number;
    setFontSize(_: number)
    scaleFactor: number;
    setScaleFactor(_: number)
    text: string;
    setText(_: string)
  }

  interface CIThermal extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIToneCurve extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    point0: CGPoint;
    setPoint0(_: CGPoint)
    point1: CGPoint;
    setPoint1(_: CGPoint)
    point2: CGPoint;
    setPoint2(_: CGPoint)
    point3: CGPoint;
    setPoint3(_: CGPoint)
    point4: CGPoint;
    setPoint4(_: CGPoint)
  }

  interface CITransitionFilter extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    targetImage: CIImage;
    setTargetImage(_: CIImage)
    time: number;
    setTime(_: number)
  }

  interface CITriangleKaleidoscope extends CIFilter {
    decay: number;
    setDecay(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    point: CGPoint;
    setPoint(_: CGPoint)
    rotation: number;
    setRotation(_: number)
    size: number;
    setSize(_: number)
  }

  interface CITriangleTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CITwelvefoldReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    width: number;
    setWidth(_: number)
  }

  interface CIUnsharpMask extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
    radius: number;
    setRadius(_: number)
  }

  // interface
  class CIVector extends NSObject {
    // ownInstanceProperties
    CGAffineTransformValue: CGAffineTransform;
    // ownInstanceProperties
    CGPointValue: CGPoint;
    // ownInstanceProperties
    CGRectValue: CGRect;
    // ownInstanceProperties
    W: number;
    // ownInstanceProperties
    X: number;
    // ownInstanceProperties
    Y: number;
    // ownInstanceProperties
    Z: number;
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    stringRepresentation: string;
    // compoundInstanceMethods
    static createWithCGAffineTransform(CGAffineTransform: CGAffineTransform): CIVector;
    // compoundInstanceMethods
    static createWithCGPoint(CGPoint: CGPoint): CIVector;
    // compoundInstanceMethods
    static createWithCGRect(CGRect: CGRect): CIVector;
    // compoundInstanceMethods
    static createWithString(string: string): CIVector;
    // compoundInstanceMethods
    static createWithValuesCount(values: number, count: number): CIVector;
    // compoundInstanceMethods
    static createWithX(x: number): CIVector;
    // compoundInstanceMethods
    static createWithXY(x: number, y: number): CIVector;
    // compoundInstanceMethods
    static createWithXYZ(x: number, y: number, z: number): CIVector;
    // compoundInstanceMethods
    static createWithXYZW(x: number, y: number, z: number, w: number): CIVector;
    // compoundInstanceMethods
    valueAtIndex(at: number): number;
  }

  interface CIVibrance extends CIFilter {
    amount: number;
    setAmount(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIVignette extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
    radius: number;
    setRadius(_: number)
  }

  interface CIVignetteEffect extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint)
    falloff: number;
    setFalloff(_: number)
    inputImage: CIImage;
    setInputImage(_: CIImage)
    intensity: number;
    setIntensity(_: number)
    radius: number;
    setRadius(_: number)
  }

  // interface
  class CIWarpKernel extends CIKernel {
    // compoundStaticMethods
    //  static kernelWithFunctionNameFromMetalLibraryDataError(fromMetalLibraryData: string, error: NSData): CIWarpKernel;
    // compoundStaticMethods
    //  static kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError(fromMetalLibraryData: string, outputPixelFormat: NSData, error: number): CIWarpKernel;
    // compoundInstanceMethods
    applyWithExtentRoiCallbackImageArguments(extent: CGRect, roiCallback: (p1: number, p2: CGRect) => CGRect, image: CIImage, arguments_?: any[]): CIImage;
  }

  interface CIWhitePointAdjust extends CIFilter {
    color: CIColor;
    setColor(_: CIColor)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIXRay extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  interface CIZoomBlur extends CIFilter {
    amount: number;
    setAmount(_: number)
    center: CGPoint;
    setCenter(_: CGPoint)
    inputImage: CIImage;
    setInputImage(_: CIImage)
  }

  // export function CMAudioDeviceClockCreate(allocator: any, deviceUID: string, clockOut: any): number;

  // export function CMAudioDeviceClockCreateFromAudioDeviceID(allocator: any, deviceID: number, clockOut: any): number;

  // export function CMAudioDeviceClockGetAudioDevice(clock: any, deviceUIDOut: string, deviceIDOut: number, trackingDefaultDeviceOut: string | any): number;

  // export function CMAudioDeviceClockSetAudioDeviceID(clock: any, deviceID: number): number;

  // export function CMAudioDeviceClockSetAudioDeviceUID(clock: any, deviceUID: string): number;

  // export function CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(allocator: any, audioFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export function CMAudioFormatDescriptionCreate(allocator: any, asbd: AudioStreamBasicDescription, layoutSize: number, layout: AudioChannelLayout, magicCookieSize: number, magicCookie: any, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export function CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer(allocator: any, soundDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export function CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData(allocator: any, soundDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export function CMAudioFormatDescriptionCreateSummary(allocator: any, formatDescriptionArray: any[], flags: number, formatDescriptionOut: any): number;

  // export function CMAudioFormatDescriptionEqual(formatDescription: any, otherFormatDescription: any, equalityMask: number, equalityMaskOut: number): boolean;

  // export function CMAudioFormatDescriptionGetChannelLayout(desc: any, sizeOut: number): AudioChannelLayout;

  // export function CMAudioFormatDescriptionGetFormatList(desc: any, sizeOut: number): AudioFormatListItem;

  // export function CMAudioFormatDescriptionGetMagicCookie(desc: any, sizeOut: number): any;

  // export function CMAudioFormatDescriptionGetMostCompatibleFormat(desc: any): AudioFormatListItem;

  // export function CMAudioFormatDescriptionGetRichestDecodableFormat(desc: any): AudioFormatListItem;

  // export function CMAudioFormatDescriptionGetStreamBasicDescription(desc: any): AudioStreamBasicDescription;

  // export function CMAudioSampleBufferCreateReadyWithPacketDescriptions(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any): number;

  // export function CMAudioSampleBufferCreateWithPacketDescriptions(allocator: any, dataBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any): number;

  // export function CMAudioSampleBufferCreateWithPacketDescriptionsAndMakeDataReadyHandler(allocator: any, dataBuffer: any, dataReady: boolean, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

  // export function CMBlockBufferAccessDataBytes(theBuffer: any, offset: number, length: number, temporaryBlock: any, returnedPointerOut: string): number;

  // export function CMBlockBufferAppendBufferReference(theBuffer: any, targetBBuf: any, offsetToData: number, dataLength: number, flags: number): number;

  // export function CMBlockBufferAppendMemoryBlock(theBuffer: any, memoryBlock: any, blockLength: number, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number): number;

  // export function CMBlockBufferAssureBlockMemory(theBuffer: any): number;

  // export function CMBlockBufferCopyDataBytes(theSourceBuffer: any, offsetToData: number, dataLength: number, destination: any): number;

  // export function CMBlockBufferCreateContiguous(structureAllocator: any, sourceBuffer: any, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

  // export function CMBlockBufferCreateEmpty(structureAllocator: any, subBlockCapacity: number, flags: number, blockBufferOut: any): number;

  // export function CMBlockBufferCreateWithBufferReference(structureAllocator: any, bufferReference: any, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

  // export function CMBlockBufferCreateWithMemoryBlock(structureAllocator: any, memoryBlock: any, blockLength: number, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

  // export function CMBlockBufferFillDataBytes(fillByte: number, destinationBuffer: any, offsetIntoDestination: number, dataLength: number): number;

  // export function CMBlockBufferGetDataLength(theBuffer: any): number;

  // export function CMBlockBufferGetDataPointer(theBuffer: any, offset: number, lengthAtOffsetOut: number, totalLengthOut: number, dataPointerOut: string): number;

  // export function CMBlockBufferGetTypeID(): number;

  // export function CMBlockBufferIsEmpty(theBuffer: any): boolean;

  // export function CMBlockBufferIsRangeContiguous(theBuffer: any, offset: number, length: number): boolean;

  // export function CMBlockBufferReplaceDataBytes(sourceBytes: any, destinationBuffer: any, offsetIntoDestination: number, dataLength: number): number;

  // export function CMBufferQueueCallForEachBuffer(queue: any, callback: (p1: any, p2: any) => number, refcon: any): number;

  // export function CMBufferQueueContainsEndOfData(queue: any): boolean;

  // export function CMBufferQueueCreate(allocator: any, capacity: number, callbacks: CMBufferCallbacks, queueOut: any): number;

  // export function CMBufferQueueCreateWithHandlers(allocator: any, capacity: number, handlers: CMBufferHandlers, queueOut: any): number;

  // export function CMBufferQueueDequeueAndRetain(queue: any): any;

  // export function CMBufferQueueDequeueIfDataReadyAndRetain(queue: any): any;

  // export function CMBufferQueueEnqueue(queue: any, buf: any): number;

  // export function CMBufferQueueGetBufferCount(queue: any): number;

  // export function CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS(): CMBufferCallbacks;

  // export function CMBufferQueueGetCallbacksForUnsortedSampleBuffers(): CMBufferCallbacks;

  // export function CMBufferQueueGetDuration(queue: any): CMTime;

  // export function CMBufferQueueGetEndPresentationTimeStamp(queue: any): CMTime;

  // export function CMBufferQueueGetFirstDecodeTimeStamp(queue: any): CMTime;

  // export function CMBufferQueueGetFirstPresentationTimeStamp(queue: any): CMTime;

  // export function CMBufferQueueGetHead(queue: any): any;

  // export function CMBufferQueueGetMaxPresentationTimeStamp(queue: any): CMTime;

  // export function CMBufferQueueGetMinDecodeTimeStamp(queue: any): CMTime;

  // export function CMBufferQueueGetMinPresentationTimeStamp(queue: any): CMTime;

  // export function CMBufferQueueGetTotalSize(queue: any): number;

  // export function CMBufferQueueGetTypeID(): number;

  // export function CMBufferQueueInstallTrigger(queue: any, callback: (p1: any, p2: any) => void, refcon: any, condition: number, time: CMTime, triggerTokenOut: any): number;

  // export function CMBufferQueueInstallTriggerHandler(queue: any, condition: number, time: CMTime, triggerTokenOut: any, handler: (p1: any) => void): number;

  // export function CMBufferQueueInstallTriggerHandlerWithIntegerThreshold(queue: any, condition: number, threshold: number, triggerTokenOut: any, handler: (p1: any) => void): number;

  // export function CMBufferQueueInstallTriggerWithIntegerThreshold(queue: any, callback: (p1: any, p2: any) => void, refcon: any, condition: number, threshold: number, triggerTokenOut: any): number;

  // export function CMBufferQueueIsAtEndOfData(queue: any): boolean;

  // export function CMBufferQueueIsEmpty(queue: any): boolean;

  // export function CMBufferQueueMarkEndOfData(queue: any): number;

  // export function CMBufferQueueRemoveTrigger(queue: any, triggerToken: any): number;

  // export function CMBufferQueueReset(queue: any): number;

  // export function CMBufferQueueResetWithCallback(queue: any, callback: (p1: any, p2: any) => void, refcon: any): number;

  // export function CMBufferQueueSetValidationCallback(queue: any, callback: (p1: any, p2: any, p3: any) => number, refcon: any): number;

  // export function CMBufferQueueSetValidationHandler(queue: any, handler: (p1: any, p2: any) => number): number;

  // export function CMBufferQueueTestTrigger(queue: any, triggerToken: any): boolean;

  // export function CMClockConvertHostTimeToSystemUnits(hostTime: CMTime): number;

  // export function CMClockGetAnchorTime(clock: any, clockTimeOut: CMTime, referenceClockTimeOut: CMTime): number;

  // export function CMClockGetHostTimeClock(): any;

  // export function CMClockGetTime(clock: any): CMTime;

  // export function CMClockGetTypeID(): number;

  // export function CMClockInvalidate(clock: any): void;

  // export function CMClockMakeHostTimeFromSystemUnits(hostTime: number): CMTime;

  // export function CMClockMightDrift(clock: any, otherClock: any): boolean;

  // export function CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(allocator: any, closedCaptionFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export function CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(allocator: any, closedCaptionDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export function CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData(allocator: any, closedCaptionDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export function CMCopyDictionaryOfAttachments(allocator: any, target: any, attachmentMode: number): Map<any, any>;

  // export function CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(soundDescriptionBlockBuffer: any, flavor: any): boolean;

  // export function CMFormatDescriptionCreate(allocator: any, mediaType: number, mediaSubType: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export function CMFormatDescriptionEqual(formatDescription: any, otherFormatDescription: any): boolean;

  // export function CMFormatDescriptionEqualIgnoringExtensionKeys(formatDescription: any, otherFormatDescription: any, formatDescriptionExtensionKeysToIgnore: any, sampleDescriptionExtensionAtomKeysToIgnore: any): boolean;

  // export function CMFormatDescriptionGetExtension(desc: any, extensionKey: string): any;

  // export function CMFormatDescriptionGetExtensions(desc: any): Map<any, any>;

  // export function CMFormatDescriptionGetMediaSubType(desc: any): number;

  // export function CMFormatDescriptionGetMediaType(desc: any): number;

  // export function CMFormatDescriptionGetTypeID(): number;

  // export function CMGetAttachment(target: any, key: string, attachmentModeOut: number): any;

  // export function CMMemoryPoolCreate(options: Map<any, any>): any;

  // export function CMMemoryPoolFlush(pool: any): void;

  // export function CMMemoryPoolGetAllocator(pool: any): any;

  // export function CMMemoryPoolGetTypeID(): number;

  // export function CMMemoryPoolInvalidate(pool: any): void;

  // export function CMMetadataCreateIdentifierForKeyAndKeySpace(allocator: any, key: any, keySpace: string, identifierOut: string): number;

  // export function CMMetadataCreateKeyFromIdentifier(allocator: any, identifier: string, keyOut: any): number;

  // export function CMMetadataCreateKeyFromIdentifierAsCFData(allocator: any, identifier: string, keyOut: Data): number;

  // export function CMMetadataCreateKeySpaceFromIdentifier(allocator: any, identifier: string, keySpaceOut: string): number;

  // export function CMMetadataDataTypeRegistryDataTypeConformsToDataType(dataType: string, conformsToDataType: string): boolean;

  // export function CMMetadataDataTypeRegistryDataTypeIsBaseDataType(dataType: string): boolean;

  // export function CMMetadataDataTypeRegistryDataTypeIsRegistered(dataType: string): boolean;

  // export function CMMetadataDataTypeRegistryGetBaseDataTypeForConformingDataType(dataType: string): string;

  // export function CMMetadataDataTypeRegistryGetBaseDataTypes(): any[];

  // export function CMMetadataDataTypeRegistryGetConformingDataTypes(dataType: string): any[];

  // export function CMMetadataDataTypeRegistryGetDataTypeDescription(dataType: string): string;

  // export function CMMetadataDataTypeRegistryRegisterDataType(dataType: string, description: string, conformingDataTypes: any[]): number;

  // export function CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(allocator: any, metadataFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export function CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions(allocator: any, sourceDescription: any, otherSourceDescription: any, formatDescriptionOut: any): number;

  // export function CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(allocator: any, metadataDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export function CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData(allocator: any, metadataDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export function CMMetadataFormatDescriptionCreateWithKeys(allocator: any, metadataType: number, keys: any[], formatDescriptionOut: any): number;

  // export function CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications(allocator: any, sourceDescription: any, metadataSpecifications: any[], formatDescriptionOut: any): number;

  // export function CMMetadataFormatDescriptionCreateWithMetadataSpecifications(allocator: any, metadataType: number, metadataSpecifications: any[], formatDescriptionOut: any): number;

  // export function CMMetadataFormatDescriptionGetIdentifiers(desc: any): any[];

  // export function CMMetadataFormatDescriptionGetKeyWithLocalID(desc: any, localKeyID: number): Map<any, any>;

  // export function CMMuxedFormatDescriptionCreate(allocator: any, muxType: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export function CMPropagateAttachments(source: any, destination: any): void;

  // export function CMRemoveAllAttachments(target: any): void;

  // export function CMRemoveAttachment(target: any, key: string): void;

  // export function CMSampleBufferCallBlockForEachSample(sbuf: any, handler: (p1: any, p2: number) => number): number;

  // export function CMSampleBufferCallForEachSample(sbuf: any, callback: (p1: any, p2: number, p3: any) => number, refcon: any): number;

  // export function CMSampleBufferCopyPCMDataIntoAudioBufferList(sbuf: any, frameOffset: number, numFrames: number, bufferList: AudioBufferList): number;

  // export function CMSampleBufferCopySampleBufferForRange(allocator: any, sbuf: any, sampleRange: CFRange, sampleBufferOut: any): number;

  // export function CMSampleBufferCreate(allocator: any, dataBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any): number;

  // export function CMSampleBufferCreateCopy(allocator: any, sbuf: any, sampleBufferOut: any): number;

  // export function CMSampleBufferCreateCopyWithNewTiming(allocator: any, originalSBuf: any, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, sampleBufferOut: any): number;

  // export function CMSampleBufferCreateForImageBuffer(allocator: any, imageBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any): number;

  // export function CMSampleBufferCreateForImageBufferWithMakeDataReadyHandler(allocator: any, imageBuffer: any, dataReady: boolean, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

  // export function CMSampleBufferCreateReady(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any): number;

  // export function CMSampleBufferCreateReadyWithImageBuffer(allocator: any, imageBuffer: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any): number;

  // export function CMSampleBufferCreateWithMakeDataReadyHandler(allocator: any, dataBuffer: any, dataReady: boolean, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

  // export function CMSampleBufferDataIsReady(sbuf: any): boolean;

  // export function CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(sbuf: any, bufferListSizeNeededOut: number, bufferListOut: AudioBufferList, bufferListSize: number, blockBufferStructureAllocator: any, blockBufferBlockAllocator: any, flags: number, blockBufferOut: any): number;

  // export function CMSampleBufferGetAudioStreamPacketDescriptions(sbuf: any, packetDescriptionsSize: number, packetDescriptionsOut: AudioStreamPacketDescription, packetDescriptionsSizeNeededOut: number): number;

  // export function CMSampleBufferGetAudioStreamPacketDescriptionsPtr(sbuf: any, packetDescriptionsPointerOut: AudioStreamPacketDescription, packetDescriptionsSizeOut: number): number;

  // export function CMSampleBufferGetDataBuffer(sbuf: any): any;

  // export function CMSampleBufferGetDecodeTimeStamp(sbuf: any): CMTime;

  // export function CMSampleBufferGetDuration(sbuf: any): CMTime;

  // export function CMSampleBufferGetFormatDescription(sbuf: any): any;

  // export function CMSampleBufferGetImageBuffer(sbuf: any): any;

  // export function CMSampleBufferGetNumSamples(sbuf: any): number;

  // export function CMSampleBufferGetOutputDecodeTimeStamp(sbuf: any): CMTime;

  // export function CMSampleBufferGetOutputDuration(sbuf: any): CMTime;

  // export function CMSampleBufferGetOutputPresentationTimeStamp(sbuf: any): CMTime;

  // export function CMSampleBufferGetOutputSampleTimingInfoArray(sbuf: any, timingArrayEntries: number, timingArrayOut: CMSampleTimingInfo, timingArrayEntriesNeededOut: number): number;

  // export function CMSampleBufferGetPresentationTimeStamp(sbuf: any): CMTime;

  // export function CMSampleBufferGetSampleAttachmentsArray(sbuf: any, createIfNecessary: boolean): any[];

  // export function CMSampleBufferGetSampleSize(sbuf: any, sampleIndex: number): number;

  // export function CMSampleBufferGetSampleSizeArray(sbuf: any, sizeArrayEntries: number, sizeArrayOut: number, sizeArrayEntriesNeededOut: number): number;

  // export function CMSampleBufferGetSampleTimingInfo(sbuf: any, sampleIndex: number, timingInfoOut: CMSampleTimingInfo): number;

  // export function CMSampleBufferGetSampleTimingInfoArray(sbuf: any, numSampleTimingEntries: number, timingArrayOut: CMSampleTimingInfo, timingArrayEntriesNeededOut: number): number;

  // export function CMSampleBufferGetTotalSampleSize(sbuf: any): number;

  // export function CMSampleBufferGetTypeID(): number;

  // export function CMSampleBufferHasDataFailed(sbuf: any, statusOut: number): boolean;

  // export function CMSampleBufferInvalidate(sbuf: any): number;

  // export function CMSampleBufferIsValid(sbuf: any): boolean;

  // export function CMSampleBufferMakeDataReady(sbuf: any): number;

  // export function CMSampleBufferSetDataBuffer(sbuf: any, dataBuffer: any): number;

  // export function CMSampleBufferSetDataBufferFromAudioBufferList(sbuf: any, blockBufferStructureAllocator: any, blockBufferBlockAllocator: any, flags: number, bufferList: AudioBufferList): number;

  // export function CMSampleBufferSetDataFailed(sbuf: any, status: number): number;

  // export function CMSampleBufferSetDataReady(sbuf: any): number;

  // export function CMSampleBufferSetInvalidateCallback(sbuf: any, invalidateCallback: (p1: any, p2: number) => void, invalidateRefCon: number): number;

  // export function CMSampleBufferSetInvalidateHandler(sbuf: any, invalidateHandler: (p1: any) => void): number;

  // export function CMSampleBufferSetOutputPresentationTimeStamp(sbuf: any, outputPresentationTimeStamp: CMTime): number;

  // export function CMSampleBufferTrackDataReadiness(sbuf: any, sampleBufferToTrack: any): number;

  // export function CMSetAttachment(target: any, key: string, value: any, attachmentMode: number): void;

  // export function CMSetAttachments(target: any, theAttachments: Map<any, any>, attachmentMode: number): void;

  // export function CMSimpleQueueCreate(allocator: any, capacity: number, queueOut: any): number;

  // export function CMSimpleQueueDequeue(queue: any): any;

  // export function CMSimpleQueueEnqueue(queue: any, element: any): number;

  // export function CMSimpleQueueGetCapacity(queue: any): number;

  // export function CMSimpleQueueGetCount(queue: any): number;

  // export function CMSimpleQueueGetHead(queue: any): any;

  // export function CMSimpleQueueGetTypeID(): number;

  // export function CMSimpleQueueReset(queue: any): number;

  // export function CMSwapBigEndianClosedCaptionDescriptionToHost(closedCaptionDescriptionData: string | any, closedCaptionDescriptionSize: number): number;

  // export function CMSwapBigEndianImageDescriptionToHost(imageDescriptionData: string | any, imageDescriptionSize: number): number;

  // export function CMSwapBigEndianMetadataDescriptionToHost(metadataDescriptionData: string | any, metadataDescriptionSize: number): number;

  // export function CMSwapBigEndianSoundDescriptionToHost(soundDescriptionData: string | any, soundDescriptionSize: number): number;

  // export function CMSwapBigEndianTextDescriptionToHost(textDescriptionData: string | any, textDescriptionSize: number): number;

  // export function CMSwapBigEndianTimeCodeDescriptionToHost(timeCodeDescriptionData: string | any, timeCodeDescriptionSize: number): number;

  // export function CMSwapHostEndianClosedCaptionDescriptionToBig(closedCaptionDescriptionData: string | any, closedCaptionDescriptionSize: number): number;

  // export function CMSwapHostEndianImageDescriptionToBig(imageDescriptionData: string | any, imageDescriptionSize: number): number;

  // export function CMSwapHostEndianMetadataDescriptionToBig(metadataDescriptionData: string | any, metadataDescriptionSize: number): number;

  // export function CMSwapHostEndianSoundDescriptionToBig(soundDescriptionData: string | any, soundDescriptionSize: number): number;

  // export function CMSwapHostEndianTextDescriptionToBig(textDescriptionData: string | any, textDescriptionSize: number): number;

  // export function CMSwapHostEndianTimeCodeDescriptionToBig(timeCodeDescriptionData: string | any, timeCodeDescriptionSize: number): number;

  // export function CMSyncConvertTime(time: CMTime, fromClockOrTimebase: any, toClockOrTimebase: any): CMTime;

  // export function CMSyncGetRelativeRate(ofClockOrTimebase: any, relativeToClockOrTimebase: any): number;

  // export function CMSyncGetRelativeRateAndAnchorTime(ofClockOrTimebase: any, relativeToClockOrTimebase: any, outRelativeRate: number, outOfClockOrTimebaseAnchorTime: CMTime, outRelativeToClockOrTimebaseAnchorTime: CMTime): number;

  // export function CMSyncGetTime(clockOrTimebase: any): CMTime;

  // export function CMSyncMightDrift(clockOrTimebase1: any, clockOrTimebase2: any): boolean;

  // export function CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(allocator: any, textFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export function CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(allocator: any, textDescriptionBlockBuffer: any, flavor: any, mediaType: number, formatDescriptionOut: any): number;

  // export function CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData(allocator: any, textDescriptionData: string | any, size: number, flavor: any, mediaType: number, formatDescriptionOut: any): number;

  // export function CMTextFormatDescriptionGetDefaultStyle(desc: any, localFontIDOut: number, boldOut: string | any, italicOut: string | any, underlineOut: string | any, fontSizeOut: number, colorComponentsOut: number): number;

  // export function CMTextFormatDescriptionGetDefaultTextBox(desc: any, originIsAtTopLeft: boolean, heightOfTextTrack: number, defaultTextBoxOut: NSRect): number;

  // export function CMTextFormatDescriptionGetDisplayFlags(desc: any, displayFlagsOut: number): number;

  // export function CMTextFormatDescriptionGetFontName(desc: any, localFontID: number, fontNameOut: string): number;

  // export function CMTextFormatDescriptionGetJustification(desc: any, horizontaJustificationlOut: number, verticalJustificationOut: number): number;

  // export function CMTimeAbsoluteValue(time: CMTime): CMTime;

  // export function CMTimeAdd(lhs: CMTime, rhs: CMTime): CMTime;

  // export function CMTimeClampToRange(time: CMTime, range: CMTimeRange): CMTime;

  // export function CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(allocator: any, timeCodeFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export function CMTimeCodeFormatDescriptionCreate(allocator: any, timeCodeFormatType: number, frameDuration: CMTime, frameQuanta: number, flags: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export function CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(allocator: any, timeCodeDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export function CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData(allocator: any, timeCodeDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export function CMTimeCodeFormatDescriptionGetFrameDuration(timeCodeFormatDescription: any): CMTime;

  // export function CMTimeCodeFormatDescriptionGetFrameQuanta(timeCodeFormatDescription: any): number;

  // export function CMTimeCodeFormatDescriptionGetTimeCodeFlags(desc: any): number;

  // export function CMTimeCompare(time1: CMTime, time2: CMTime): number;

  // export function CMTimeConvertScale(time: CMTime, newTimescale: number, method: CMTimeRoundingMethod): CMTime;

  // export function CMTimeCopyAsDictionary(time: CMTime, allocator: any): Map<any, any>;

  // export function CMTimeCopyDescription(allocator: any, time: CMTime): string;

  // export function CMTimeFoldIntoRange(time: CMTime, foldRange: CMTimeRange): CMTime;

  // export function CMTimeGetSeconds(time: CMTime): number;

  // export function CMTimeMake(value: number, timescale: number): CMTime;

  // export function CMTimeMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTime;

  // export function CMTimeMakeWithEpoch(value: number, timescale: number, epoch: number): CMTime;

  // export function CMTimeMakeWithSeconds(seconds: number, preferredTimescale: number): CMTime;

  // export function CMTimeMapDurationFromRangeToRange(dur: CMTime, fromRange: CMTimeRange, toRange: CMTimeRange): CMTime;

  // export function CMTimeMapTimeFromRangeToRange(t: CMTime, fromRange: CMTimeRange, toRange: CMTimeRange): CMTime;

  // export function CMTimeMappingCopyAsDictionary(mapping: CMTimeMapping, allocator: any): Map<any, any>;

  // export function CMTimeMappingCopyDescription(allocator: any, mapping: CMTimeMapping): string;

  // export function CMTimeMappingMake(source: CMTimeRange, target: CMTimeRange): CMTimeMapping;

  // export function CMTimeMappingMakeEmpty(target: CMTimeRange): CMTimeMapping;

  // export function CMTimeMappingMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTimeMapping;

  // export function CMTimeMappingShow(mapping: CMTimeMapping): void;

  // export function CMTimeMaximum(time1: CMTime, time2: CMTime): CMTime;

  // export function CMTimeMinimum(time1: CMTime, time2: CMTime): CMTime;

  // export function CMTimeMultiply(time: CMTime, multiplier: number): CMTime;

  // export function CMTimeMultiplyByFloat64(time: CMTime, multiplier: number): CMTime;

  // export function CMTimeMultiplyByRatio(time: CMTime, multiplier: number, divisor: number): CMTime;

  // export function CMTimeRangeContainsTime(range: CMTimeRange, time: CMTime): boolean;

  // export function CMTimeRangeContainsTimeRange(range: CMTimeRange, otherRange: CMTimeRange): boolean;

  // export function CMTimeRangeCopyAsDictionary(range: CMTimeRange, allocator: any): Map<any, any>;

  // export function CMTimeRangeCopyDescription(allocator: any, range: CMTimeRange): string;

  // export function CMTimeRangeEqual(range1: CMTimeRange, range2: CMTimeRange): boolean;

  // export function CMTimeRangeFromTimeToTime(start: CMTime, end: CMTime): CMTimeRange;

  // export function CMTimeRangeGetEnd(range: CMTimeRange): CMTime;

  // export function CMTimeRangeGetIntersection(range: CMTimeRange, otherRange: CMTimeRange): CMTimeRange;

  // export function CMTimeRangeGetUnion(range: CMTimeRange, otherRange: CMTimeRange): CMTimeRange;

  // export function CMTimeRangeMake(start: CMTime, duration: CMTime): CMTimeRange;

  // export function CMTimeRangeMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTimeRange;

  // export function CMTimeRangeShow(range: CMTimeRange): void;

  // export function CMTimeShow(time: CMTime): void;

  // export function CMTimeSubtract(lhs: CMTime, rhs: CMTime): CMTime;

  // export function CMTimebaseAddTimer(timebase: any, timer: Timer, runloop: any): number;

  // export function CMTimebaseAddTimerDispatchSource(timebase: any, timerSource: NSObject): number;

  // export function CMTimebaseCopyMaster(timebase: any): any;

  // export function CMTimebaseCopyMasterClock(timebase: any): any;

  // export function CMTimebaseCopyMasterTimebase(timebase: any): any;

  // export function CMTimebaseCopyUltimateMasterClock(timebase: any): any;

  // export function CMTimebaseCreateWithMasterClock(allocator: any, masterClock: any, timebaseOut: any): number;

  // export function CMTimebaseCreateWithMasterTimebase(allocator: any, masterTimebase: any, timebaseOut: any): number;

  // export function CMTimebaseGetEffectiveRate(timebase: any): number;

  // export function CMTimebaseGetRate(timebase: any): number;

  // export function CMTimebaseGetTime(timebase: any): CMTime;

  // export function CMTimebaseGetTimeAndRate(timebase: any, timeOut: CMTime, rateOut: number): number;

  // export function CMTimebaseGetTimeWithTimeScale(timebase: any, timescale: number, method: CMTimeRoundingMethod): CMTime;

  // export function CMTimebaseGetTypeID(): number;

  // export function CMTimebaseNotificationBarrier(timebase: any): number;

  // export function CMTimebaseRemoveTimer(timebase: any, timer: Timer): number;

  // export function CMTimebaseRemoveTimerDispatchSource(timebase: any, timerSource: NSObject): number;

  // export function CMTimebaseSetAnchorTime(timebase: any, timebaseTime: CMTime, immediateMasterTime: CMTime): number;

  // export function CMTimebaseSetMasterClock(timebase: any, newMasterClock: any): number;

  // export function CMTimebaseSetMasterTimebase(timebase: any, newMasterTimebase: any): number;

  // export function CMTimebaseSetRate(timebase: any, rate: number): number;

  // export function CMTimebaseSetRateAndAnchorTime(timebase: any, rate: number, timebaseTime: CMTime, immediateMasterTime: CMTime): number;

  // export function CMTimebaseSetTime(timebase: any, time: CMTime): number;

  // export function CMTimebaseSetTimerDispatchSourceNextFireTime(timebase: any, timerSource: NSObject, fireTime: CMTime, flags: number): number;

  // export function CMTimebaseSetTimerDispatchSourceToFireImmediately(timebase: any, timerSource: NSObject): number;

  // export function CMTimebaseSetTimerNextFireTime(timebase: any, timer: Timer, fireTime: CMTime, flags: number): number;

  // export function CMTimebaseSetTimerToFireImmediately(timebase: any, timer: Timer): number;

  // export function CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(allocator: any, videoFormatDescription: any, stringEncoding: number, flavor: any, blockBufferOut: any): number;

  // export function CMVideoFormatDescriptionCreate(allocator: any, codecType: number, width: number, height: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export function CMVideoFormatDescriptionCreateForImageBuffer(allocator: any, imageBuffer: any, formatDescriptionOut: any): number;

  // export function CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(allocator: any, imageDescriptionBlockBuffer: any, stringEncoding: number, flavor: any, formatDescriptionOut: any): number;

  // export function CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(allocator: any, imageDescriptionData: string | any, size: number, stringEncoding: number, flavor: any, formatDescriptionOut: any): number;

  // export function CMVideoFormatDescriptionCreateFromH264ParameterSets(allocator: any, parameterSetCount: number, parameterSetPointers: string, parameterSetSizes: number, NALUnitHeaderLength: number, formatDescriptionOut: any): number;

  // export function CMVideoFormatDescriptionCreateFromHEVCParameterSets(allocator: any, parameterSetCount: number, parameterSetPointers: string, parameterSetSizes: number, NALUnitHeaderLength: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export function CMVideoFormatDescriptionGetCleanAperture(videoDesc: any, originIsAtTopLeft: boolean): CGRect;

  // export function CMVideoFormatDescriptionGetDimensions(videoDesc: any): CMVideoDimensions;

  // export function CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers(): any[];

  // export function CMVideoFormatDescriptionGetH264ParameterSetAtIndex(videoDesc: any, parameterSetIndex: number, parameterSetPointerOut: string, parameterSetSizeOut: number, parameterSetCountOut: number, NALUnitHeaderLengthOut: number): number;

  // export function CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(videoDesc: any, parameterSetIndex: number, parameterSetPointerOut: string, parameterSetSizeOut: number, parameterSetCountOut: number, NALUnitHeaderLengthOut: number): number;

  // export function CMVideoFormatDescriptionGetPresentationDimensions(videoDesc: any, usePixelAspectRatio: boolean, useCleanAperture: boolean): CGSize;

  // export function CMVideoFormatDescriptionMatchesImageBuffer(desc: any, imageBuffer: any): boolean;

  // export function CMIODeviceProcessAVCCommand(deviceID: number, ioAVCCommand: CMIODeviceAVCCommand): number;

  // export function CMIODeviceProcessRS422Command(deviceID: number, ioRS422Command: CMIODeviceRS422Command): number;

  // export function CMIODeviceStartStream(deviceID: number, streamID: number): number;

  // export function CMIODeviceStopStream(deviceID: number, streamID: number): number;

  // export function CMIOObjectAddPropertyListener(objectID: number, address: CMIOObjectPropertyAddress, listener: (p1: number, p2: number, p3: CMIOObjectPropertyAddress, p4: any) => number, clientData: any): number;

  // export function CMIOObjectAddPropertyListenerBlock(objectID: number, address: CMIOObjectPropertyAddress, dispatchQueue: NSObject, listener: (p1: number, p2: CMIOObjectPropertyAddress) => void): number;

  // export function CMIOObjectCreate(owningPlugIn: CMIOHardwarePlugInInterface, owningObjectID: number, classID: number, objectID: number): number;

  // export function CMIOObjectGetPropertyData(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number, dataUsed: number, data: any): number;

  // export function CMIOObjectGetPropertyDataSize(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number): number;

  // export function CMIOObjectHasProperty(objectID: number, address: CMIOObjectPropertyAddress): boolean;

  // export function CMIOObjectIsPropertySettable(objectID: number, address: CMIOObjectPropertyAddress, isSettable: string | any): number;

  // export function CMIOObjectPropertiesChanged(owningPlugIn: CMIOHardwarePlugInInterface, objectID: number, numberAddresses: number, addresses: CMIOObjectPropertyAddress): number;

  // export function CMIOObjectRemovePropertyListener(objectID: number, address: CMIOObjectPropertyAddress, listener: (p1: number, p2: number, p3: CMIOObjectPropertyAddress, p4: any) => number, clientData: any): number;

  // export function CMIOObjectRemovePropertyListenerBlock(objectID: number, address: CMIOObjectPropertyAddress, dispatchQueue: NSObject, listener: (p1: number, p2: CMIOObjectPropertyAddress) => void): number;

  // export function CMIOObjectSetPropertyData(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number, data: any): number;

  // export function CMIOObjectShow(objectID: number): void;

  // export function CMIOObjectsPublishedAndDied(owningPlugIn: CMIOHardwarePlugInInterface, owningObjectID: number, numberPublishedCMIOObjects: number, publishedCMIOObjects: number, numberDeadCMIOObjects: number, deadCMIOObjects: number): number;

  // export function CMIOSampleBufferCopyNonRequiredAttachments(sourceSBuf: any, destSBuf: any, attachmentMode: number): number;

  // export function CMIOSampleBufferCopySampleAttachments(sourceSBuf: any, destSBuf: any): number;

  // export function CMIOSampleBufferCreate(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

  // export function CMIOSampleBufferCreateForImageBuffer(allocator: any, imageBuffer: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

  // export function CMIOSampleBufferCreateNoDataMarker(allocator: any, noDataEvent: number, formatDescription: any, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

  // export function CMIOSampleBufferGetDiscontinuityFlags(sbuf: any): number;

  // export function CMIOSampleBufferGetSequenceNumber(sbuf: any): number;

  // export function CMIOSampleBufferSetDiscontinuityFlags(allocator: any, sbuf: any, discontinuityFlags: number): void;

  // export function CMIOSampleBufferSetSequenceNumber(allocator: any, sbuf: any, sequenceNumber: number): void;

  // export function CMIOStreamClockConvertHostTimeToDeviceTime(hostTime: number, clock: any): CMTime;

  // export function CMIOStreamClockCreate(allocator: any, clockName: string, sourceIdentifier: any, getTimeCallMinimumInterval: CMTime, numberOfEventsForRateSmoothing: number, numberOfAveragesForRateSmoothing: number, clock: any): number;

  // export function CMIOStreamClockInvalidate(clock: any): number;

  // export function CMIOStreamClockPostTimingEvent(eventTime: CMTime, hostTime: number, resynchronize: boolean, clock: any): number;

  // export function CMIOStreamCopyBufferQueue(streamID: number, queueAlteredProc: (p1: number, p2: any, p3: any) => void, queueAlteredRefCon: any, queue: any): number;

  // export function CMIOStreamDeckCueTo(streamID: number, frameNumber: number, playOnCue: boolean): number;

  // export function CMIOStreamDeckJog(streamID: number, speed: number): number;

  // export function CMIOStreamDeckPlay(streamID: number): number;

  // export function CMIOStreamDeckStop(streamID: number): number;

  // interface
  class NSAffineTransform extends NSObject {
    // ownInstanceProperties
    transformStruct: NSAffineTransformStruct;
    setTransformStruct(_: NSAffineTransformStruct)
    // compoundInstanceMethods
    appendTransform(_: NSAffineTransform): void;
    // compoundInstanceMethods
    concat(): void;
    // compoundInstanceMethods
    static createWithTransform(transform: NSAffineTransform): NSAffineTransform;
    // compoundInstanceMethods
    invert(): void;
    // compoundInstanceMethods
    prependTransform(_: NSAffineTransform): void;
    // compoundInstanceMethods
    rotateByDegrees(byDegrees: number): void;
    // compoundInstanceMethods
    rotateByRadians(byRadians: number): void;
    // compoundInstanceMethods
    scaleBy(by: number): void;
    // compoundInstanceMethods
    scaleXByYBy(by: number, yBy: number): void;
    // compoundInstanceMethods
    set(): void;
    // compoundInstanceMethods
    transformBezierPath(_: NSBezierPath): NSBezierPath;
    // compoundInstanceMethods
    transformPoint(_: CGPoint): CGPoint;
    // compoundInstanceMethods
    transformSize(_: CGSize): CGSize;
    // compoundInstanceMethods
    translateXByYBy(by: number, yBy: number): void;
  }

  // export function NSAllHashTableObjects(table: NSHashTable<any>): any[];

  // export function NSAllMapTableKeys(table: NSMapTable<any, any>): any[];

  // export function NSAllMapTableValues(table: NSMapTable<any, any>): any[];

  // export function NSAllocateMemoryPages(bytes: number): any;

  // export function NSAllocateObject(aClass: typeof NSObject, extraBytes: number, zone: any): any;

  // interface
  class NSAppleEventDescriptor extends NSObject {
    // compoundStaticMethods
    static appleEventWithEventClassEventIDTargetDescriptorReturnIDTransactionID(withEventClass: number, eventID: number, targetDescriptor?: NSAppleEventDescriptor, returnID?: number, transactionID?: number): NSAppleEventDescriptor;
    // compoundStaticMethods
    static currentProcessDescriptor(): NSAppleEventDescriptor;
    // compoundStaticMethods
    static listDescriptor(): NSAppleEventDescriptor;
    // compoundStaticMethods
    static nullDescriptor(): NSAppleEventDescriptor;
    // compoundStaticMethods
    static recordDescriptor(): NSAppleEventDescriptor;
    // ownInstanceProperties
    aeDesc: AE.AEDataModel;
    // ownInstanceProperties
    booleanValue: boolean;
    // ownInstanceProperties
    data: NSData;
    // ownInstanceProperties
    dateValue: Date;
    // ownInstanceProperties
    descriptorType: number;
    // ownInstanceProperties
    doubleValue: number;
    // ownInstanceProperties
    enumCodeValue: number;
    // ownInstanceProperties
    eventClass: number;
    // ownInstanceProperties
    eventID: number;
    // ownInstanceProperties
    fileURLValue: NSURL;
    // ownInstanceProperties
    int32Value: number;
    // ownInstanceProperties
    isRecordDescriptor: boolean;
    // ownInstanceProperties
    numberOfItems: number;
    // ownInstanceProperties
    returnID: number;
    // ownInstanceProperties
    stringValue: string;
    // ownInstanceProperties
    transactionID: number;
    // ownInstanceProperties
    typeCodeValue: number;
    // compoundInstanceMethods
    attributeDescriptorForKeyword(forKeyword: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    coerceToDescriptorType(toDescriptorType: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    descriptorAtIndex(_: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    descriptorForKeyword(_: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    static createWithListDescriptor(): NSAppleEventDescriptor;
    // compoundInstanceMethods
    static createWithRecordDescriptor(): NSAppleEventDescriptor;
    // compoundInstanceMethods
    static createWithAEDescNoCopy(AEDescNoCopy: AE.AEDataModel): NSAppleEventDescriptor;
    // compoundInstanceMethods
    static createWithDescriptorTypeBytesLength(descriptorType: number, bytes?: any, length?: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    static createWithDescriptorTypeData(descriptorType: number, data?: NSData): NSAppleEventDescriptor;
    // compoundInstanceMethods
    static createWithEventClassEventIDTargetDescriptorReturnIDTransactionID(eventClass: number, eventID: number, targetDescriptor?: NSAppleEventDescriptor, returnID?: number, transactionID?: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    insertDescriptorAtIndex(_: NSAppleEventDescriptor, at: number): void;
    // compoundInstanceMethods
    keywordForDescriptorAtIndex(at: number): number;
    // compoundInstanceMethods
    paramDescriptorForKeyword(forKeyword: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    removeDescriptorAtIndex(at: number): void;
    // compoundInstanceMethods
    removeDescriptorWithKeyword(withKeyword: number): void;
    // compoundInstanceMethods
    removeParamDescriptorWithKeyword(withKeyword: number): void;
    // compoundInstanceMethods
    sendEventWithOptionsTimeoutError(timeout: NSAppleEventDescriptor.SendOptions, error: number): NSAppleEventDescriptor;
    // compoundInstanceMethods
    setAttributeDescriptorForKeyword(_: NSAppleEventDescriptor, forKeyword: number): void;
    // compoundInstanceMethods
    setDescriptorForKeyword(_: NSAppleEventDescriptor, forKeyword: number): void;
    // compoundInstanceMethods
    setParamDescriptorForKeyword(_: NSAppleEventDescriptor, forKeyword: number): void;
  }

  // interface
  class NSAppleEventManager extends NSObject {
    // compoundStaticMethods
    static sharedAppleEventManager(): NSAppleEventManager;
    // ownInstanceProperties
    currentAppleEvent: NSAppleEventDescriptor;
    // ownInstanceProperties
    currentReplyAppleEvent: NSAppleEventDescriptor;
    // compoundInstanceMethods
    appleEventForSuspensionID(forSuspensionID: any): NSAppleEventDescriptor;
    // compoundInstanceMethods
    dispatchRawAppleEventWithRawReplyHandlerRefCon(_: AE.AEDataModel, withRawReply: AE.AEDataModel, handlerRefCon: any): number;
    // compoundInstanceMethods
    removeEventHandlerForEventClassAndEventID(forEventClass: number, andEventID: number): void;
    // compoundInstanceMethods
    replyAppleEventForSuspensionID(forSuspensionID: any): NSAppleEventDescriptor;
    // compoundInstanceMethods
    resumeWithSuspensionID(withSuspensionID: any): void;
    // compoundInstanceMethods
    setCurrentAppleEventAndReplyEventWithSuspensionID(_: any): void;
    // compoundInstanceMethods
    setEventHandlerAndSelectorForEventClassAndEventID(_: any, andSelector: string, forEventClass: number, andEventID: number): void;
    // compoundInstanceMethods
    suspendCurrentAppleEvent(): any;
  }

  // interface
  class NSAppleScript extends NSObject {
    // ownInstanceProperties
    isCompiled: boolean;
    // ownInstanceProperties
    richTextSource: NSAttributedString;
    // ownInstanceProperties
    source: string;
    // compoundInstanceMethods
    compileAndReturnError(_?: Map<string, any>): boolean;
    // compoundInstanceMethods
    executeAndReturnError(_?: Map<string, any>): NSAppleEventDescriptor;
    // compoundInstanceMethods
    executeAppleEventError(_: NSAppleEventDescriptor, error?: Map<string, any>): NSAppleEventDescriptor;
    // compoundInstanceMethods
    static createWithContentsOfURLError(contentsOfURL: NSURL, error?: Map<string, any>): NSAppleScript;
    // compoundInstanceMethods
    static createWithSource(source: string): NSAppleScript;
  }

  // interface
  class NSArray<ObjectType> extends NSObject {
    // compoundStaticMethods
    static arrayWithObjects<ObjectType>(_: ObjectType): NSArray<ObjectType>;
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    firstObject: ObjectType;
    // ownInstanceProperties
    lastObject: ObjectType;
    // ownInstanceProperties
    sortedArrayHint: NSData;
    // compoundInstanceMethods
    addObserverToObjectsAtIndexesForKeyPathOptionsContext(_: NSObject, toObjectsAt: NSIndexSet, forKeyPath: string, options: NSKeyValueObservingOptions, context?: any): void;
    // compoundInstanceMethods
    arrayByAddingObject(_: ObjectType): ObjectType[];
    // compoundInstanceMethods
    arrayByAddingObjectsFromArray(from: ObjectType[]): ObjectType[];
    // compoundInstanceMethods
    componentsJoinedByString(by: string): string;
    // compoundInstanceMethods
    containsObject(_: ObjectType): boolean;
    // compoundInstanceMethods
    descriptionWithLocale(withLocale?: any): string;
    // compoundInstanceMethods
    descriptionWithLocaleIndent(withLocale?: any, indent?: number): string;
    // compoundInstanceMethods
    enumerateObjectsWithAtOptionsUsing(at: NSIndexSet, options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    enumerateObjects(_: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    enumerateObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    filteredArrayUsingPredicate(using: NSPredicate): ObjectType[];
    // compoundInstanceMethods
    firstObjectCommonWithArray(with_: ObjectType[]): ObjectType;
    // compoundInstanceMethods
    indexOfObject(of: ObjectType): number;
    // compoundInstanceMethods
    indexOfObjectInRange(of: ObjectType, in_: NSRange): number;
    // compoundInstanceMethods
    indexOfInSortedRangeOptionsUsingComparator(of: ObjectType, inSortedRange: NSRange, options: NSBinarySearchingOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): number;
    // compoundInstanceMethods
    indexOfObjectWithAtOptionsPassingTest(at: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    // compoundInstanceMethods
    indexOfObjectIdenticalTo(to: ObjectType): number;
    // compoundInstanceMethods
    indexOfObjectIdenticalToInRange(to: ObjectType, in_: NSRange): number;
    // compoundInstanceMethods
    indexOfObjectWithPassingTest(passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    // compoundInstanceMethods
    indexOfObjectWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    // compoundInstanceMethods
    indexesOfObjectsWithAtOptionsPassingTest(at: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    indexesOfObjectsWithPassingTest(passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    indexesOfObjectsWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    isEqualToArray(to: ObjectType[]): boolean;
    // compoundInstanceMethods
    objectAtIndex(at: number): ObjectType;
    // compoundInstanceMethods
    objectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    objectsAtIndexes(at: NSIndexSet): ObjectType[];
    // compoundInstanceMethods
    pathsMatchingExtensions(_: string[]): string[];
    // compoundInstanceMethods
    removeObserverFromObjectsAtIndexesForKeyPath(_: NSObject, fromObjectsAt: NSIndexSet, forKeyPath: string): void;
    // compoundInstanceMethods
    removeObserverFromObjectsAtIndexesForKeyPathContext(_: NSObject, fromObjectsAt: NSIndexSet, forKeyPath: string, context?: any): void;
    // compoundInstanceMethods
    reverseObjectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    sortedArrayWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
    // compoundInstanceMethods
    sortedArrayUsingDescriptors(using: NSSortDescriptor[]): ObjectType[];
    // compoundInstanceMethods
    sortedArrayContext(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any): ObjectType[];
    // compoundInstanceMethods
    sortedArrayContextHint(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any, hint?: NSData): ObjectType[];
    // compoundInstanceMethods
    sortedArrayUsingSelector(using: string): ObjectType[];
    // compoundInstanceMethods
    sortedArrayWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
    // compoundInstanceMethods
    subarrayWithRange(with_: NSRange): ObjectType[];
    // compoundInstanceMethods
    writeToFileAtomically(toFile: string, atomically: boolean): boolean;
    // compoundInstanceMethods
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
    // compoundInstanceMethods
    writeToURLError(error: NSURL): boolean;
  }

  // interface
  class NSAssertionHandler extends NSObject {
    // ownStaticProperties
    static currentHandler: NSAssertionHandler;
  }

  // interface
  class NSAttributedString extends NSObject {
    // ownInstanceProperties
    containsAttachments: boolean;
    // ownInstanceProperties
    length: number;
    // ownInstanceProperties
    string: string;
    // ownStaticProperties
    static textTypes: string[];
    // ownStaticProperties
    static textUnfilteredTypes: string[];
    // compoundInstanceMethods
    RTFDFileWrapperFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): FileWrapper;
    // compoundInstanceMethods
    RTFDFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): NSData;
    // compoundInstanceMethods
    RTFFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): NSData;
    // compoundInstanceMethods
    attributeAtIndexEffectiveRange(_: string, at: number, effectiveRange?: NSRange): any;
    // compoundInstanceMethods
    attributeAtIndexLongestEffectiveRangeInRange(_: string, at: number, longestEffectiveRange?: NSRange, in_?: NSRange): any;
    // compoundInstanceMethods
    attributedSubstringFromRange(from: NSRange): NSAttributedString;
    // compoundInstanceMethods
    attributesAtIndexEffectiveRange(at: number, effectiveRange?: NSRange): Map<string, any>;
    // compoundInstanceMethods
    attributesAtIndexLongestEffectiveRangeInRange(at: number, longestEffectiveRange?: NSRange, in_?: NSRange): Map<string, any>;
    // compoundInstanceMethods
    boundingRectWithSizeOptions(with_: CGSize, options: NSString.DrawingOptions): CGRect;
    // compoundInstanceMethods
    boundingRectWithSizeOptionsContext(with_: CGSize, options: NSString.DrawingOptions, context?: NSStringDrawingContext): CGRect;
    // compoundInstanceMethods
    containsAttachmentsInRange(in_: NSRange): boolean;
    // compoundInstanceMethods
    dataFromRangeDocumentAttributesError(documentAttributes: NSRange, error: Map<string, any>): NSData;
    // compoundInstanceMethods
    docFormatFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): NSData;
    // compoundInstanceMethods
    doubleClickAtIndex(at: number): NSRange;
    // compoundInstanceMethods
    drawAtPoint(at: CGPoint): void;
    // compoundInstanceMethods
    drawInRect(in_: CGRect): void;
    // compoundInstanceMethods
    drawWithRectOptions(with_: CGRect, options: NSString.DrawingOptions): void;
    // compoundInstanceMethods
    drawWithRectOptionsContext(with_: CGRect, options: NSString.DrawingOptions, context?: NSStringDrawingContext): void;
    // compoundInstanceMethods
    enumerateAttributeInOptionsUsing(_: string, in_: NSRange, options: NSAttributedString.EnumerationOptions, using?: (p1: any, p2: NSRange, p3: boolean) => void): void;
    // compoundInstanceMethods
    enumerateAttributesWithInOptionsUsing(in_: NSRange, options: NSAttributedString.EnumerationOptions, using: (p1: Map<string, any>, p2: NSRange, p3: boolean) => void): void;
    // compoundInstanceMethods
    fileWrapperFromRangeDocumentAttributesError(documentAttributes: NSRange, error: Map<string, any>): FileWrapper;
    // compoundInstanceMethods
    fontAttributesInRange(in_: NSRange): Map<string, any>;
    // compoundInstanceMethods
    static createWithAttributedString(attributedString: NSAttributedString): NSAttributedString;
    // compoundInstanceMethods
    static createWithDataOptionsDocumentAttributes(data: NSData, options: Map<string, any>, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithDocFormatDocumentAttributes(docFormat: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithHtmlBaseURLDocumentAttributes(HTML: NSData, baseURL: NSURL, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithHtmlDocumentAttributes(HTML: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithHtmlOptionsDocumentAttributes(HTML: NSData, options: Map<string, any>, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithRtfDocumentAttributes(RTF: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithRtfdDocumentAttributes(RTFD: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithRTFDFileWrapperDocumentAttributes(RTFDFileWrapper: FileWrapper, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithString(string: string): NSAttributedString;
    // compoundInstanceMethods
    static createWithStringAttributes(string: string, attributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    static createWithUrlOptionsDocumentAttributes(URL: NSURL, options: Map<string, any>, documentAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    isEqualToAttributedString(to: NSAttributedString): boolean;
    // compoundInstanceMethods
    itemNumberInTextListAtIndex(in_: NSTextList, at: number): number;
    // compoundInstanceMethods
    lineBreakBeforeIndexWithinRange(before: number, within: NSRange): number;
    // compoundInstanceMethods
    lineBreakByHyphenatingBeforeIndexWithinRange(before: number, within: NSRange): number;
    // compoundInstanceMethods
    nextWordFromIndexForward(from: number, forward: boolean): number;
    // compoundInstanceMethods
    rangeOfTextBlockAtIndex(of: NSTextBlock, at: number): NSRange;
    // compoundInstanceMethods
    rangeOfTextListAtIndex(of: NSTextList, at: number): NSRange;
    // compoundInstanceMethods
    rangeOfTextTableAtIndex(of: NSTextTable, at: number): NSRange;
    // compoundInstanceMethods
    rulerAttributesInRange(in_: NSRange): Map<string, any>;
    // compoundInstanceMethods
    size(): CGSize;
  }

  // interface
  class NSAutoreleasePool extends NSObject {
    // compoundStaticMethods
    static addObject(_: any): void;
    // compoundStaticMethods
    static showPools(): void;
    // compoundInstanceMethods
    addObject(_: any): void;
    // compoundInstanceMethods
    drain(): void;
  }

  // interface
  class NSBackgroundActivityScheduler extends NSObject {
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    interval: number;
    setInterval(_: number)
    // ownInstanceProperties
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService)
    // ownInstanceProperties
    repeats: boolean;
    setRepeats(_: boolean)
    // ownInstanceProperties
    shouldDefer: boolean;
    // ownInstanceProperties
    tolerance: number;
    setTolerance(_: number)
    // compoundInstanceMethods
    static createWithIdentifier(identifier: string): NSBackgroundActivityScheduler;
    // compoundInstanceMethods
    invalidate(): void;
    // compoundInstanceMethods
    schedule(_: (p1: (p1: NSBackgroundActivityScheduler.Result) => void) => void): void;
  }

  // interface
  class BlockOperation extends Operation {
    // compoundStaticMethods
    static blockOperationWithBlock(_: () => void): BlockOperation;
    // ownInstanceProperties
    executionBlocks: () => void[];
    // compoundInstanceMethods
    addExecutionBlock(_: () => void): void;
  }

  // interface
  class Bundle extends NSObject {
    // compoundStaticMethods
    static URLForResourceWithExtensionSubdirectoryInBundleWithURL(forResource?: string, withExtension?: string, subdirectory?: string, in_?: NSURL): NSURL;
    // compoundStaticMethods
    static URLsForResourcesWithExtensionSubdirectoryInBundleWithURL(forResourcesWithExtension?: string, subdirectory?: string, in_?: NSURL): NSURL[];
    // compoundStaticMethods
    static pathForResourceOfTypeInDirectory(forResource?: string, ofType?: string, inDirectory?: string): string;
    // compoundStaticMethods
    static pathsForResourcesOfTypeInDirectory(forResourcesOfType?: string, inDirectory?: string): string[];
    // compoundStaticMethods
    static preferredLocalizationsFromArray(_: string[]): string[];
    // compoundStaticMethods
    static preferredLocalizationsFromArrayForPreferences(_: string[], forPreferences?: string[]): string[];
    // ownInstanceProperties
    appStoreReceiptURL: NSURL;
    // ownInstanceProperties
    builtInPlugInsPath: string;
    // ownInstanceProperties
    builtInPlugInsURL: NSURL;
    // ownInstanceProperties
    bundleIdentifier: string;
    // ownInstanceProperties
    bundlePath: string;
    // ownInstanceProperties
    bundleURL: NSURL;
    // ownInstanceProperties
    developmentLocalization: string;
    // ownInstanceProperties
    executableArchitectures: number[];
    // ownInstanceProperties
    executablePath: string;
    // ownInstanceProperties
    executableURL: NSURL;
    // ownInstanceProperties
    infoDictionary: Map<string, any>;
    // ownInstanceProperties
    isLoaded: boolean;
    // ownInstanceProperties
    localizations: string[];
    // ownInstanceProperties
    localizedInfoDictionary: Map<string, any>;
    // ownInstanceProperties
    preferredLocalizations: string[];
    // ownInstanceProperties
    principalClass: typeof NSObject;
    // ownInstanceProperties
    privateFrameworksPath: string;
    // ownInstanceProperties
    privateFrameworksURL: NSURL;
    // ownInstanceProperties
    resourcePath: string;
    // ownInstanceProperties
    resourceURL: NSURL;
    // ownInstanceProperties
    sharedFrameworksPath: string;
    // ownInstanceProperties
    sharedFrameworksURL: NSURL;
    // ownInstanceProperties
    sharedSupportPath: string;
    // ownInstanceProperties
    sharedSupportURL: NSURL;
    // ownStaticProperties
    static allBundles: Bundle[];
    // ownStaticProperties
    static allFrameworks: Bundle[];
    // ownStaticProperties
    static mainBundle: Bundle;
    // compoundInstanceMethods
    URLForAuxiliaryExecutable(forAuxiliaryExecutable: string): NSURL;
    // compoundInstanceMethods
    URLForImageResource(_: string): NSURL;
    // compoundInstanceMethods
    URLForResourceWithExtension(forResource?: string, withExtension?: string): NSURL;
    // compoundInstanceMethods
    URLForResourceWithExtensionSubdirectory(forResource?: string, withExtension?: string, subdirectory?: string): NSURL;
    // compoundInstanceMethods
    URLForResourceWithExtensionSubdirectoryLocalization(_?: string, withExtension?: string, subdirectory?: string, localization?: string): NSURL;
    // compoundInstanceMethods
    URLsForResourcesWithExtensionSubdirectory(forResourcesWithExtension?: string, subdirectory?: string): NSURL[];
    // compoundInstanceMethods
    URLsForResourcesWithExtensionSubdirectoryLocalization(forResourcesWithExtension?: string, subdirectory?: string, localization?: string): NSURL[];
    // compoundInstanceMethods
    classNamed(_: string): typeof NSObject;
    // compoundInstanceMethods
    contextHelpForKey(_: string): NSAttributedString;
    // compoundInstanceMethods
    imageForResource(_: string): NSImage;
    // compoundInstanceMethods
    static createWithPath(path: string): Bundle;
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): Bundle;
    // compoundInstanceMethods
    //  load(): boolean;
    // compoundInstanceMethods
    loadAndReturnError(): boolean;
    // compoundInstanceMethods
    loadNibNamedOwnerTopLevelObjects(_: string, owner?: any, topLevelObjects?: any[]): boolean;
    // compoundInstanceMethods
    localizedStringForKeyValueTable(_: string, value?: string, table?: string): string;
    // compoundInstanceMethods
    objectForInfoDictionaryKey(forInfoDictionaryKey: string): any;
    // compoundInstanceMethods
    pathForAuxiliaryExecutable(forAuxiliaryExecutable: string): string;
    // compoundInstanceMethods
    pathForImageResource(_: string): string;
    // compoundInstanceMethods
    pathForResourceOfType(forResource?: string, ofType?: string): string;
    // compoundInstanceMethods
    pathForResourceOfTypeInDirectory(forResource?: string, ofType?: string, inDirectory?: string): string;
    // compoundInstanceMethods
    pathForResourceOfTypeInDirectoryForLocalization(forResource?: string, ofType?: string, inDirectory?: string, forLocalization?: string): string;
    // compoundInstanceMethods
    pathForSoundResource(_: string): string;
    // compoundInstanceMethods
    pathsForResourcesOfTypeInDirectory(forResourcesOfType?: string, inDirectory?: string): string[];
    // compoundInstanceMethods
    pathsForResourcesOfTypeInDirectoryForLocalization(forResourcesOfType?: string, inDirectory?: string, forLocalization?: string): string[];
    // compoundInstanceMethods
    preflightAndReturnError(): boolean;
    // compoundInstanceMethods
    unload(): boolean;
  }

  // interface
  class ByteCountFormatter extends Formatter {
    // compoundStaticMethods
    static stringFromByteCountCountStyle(_: number, countStyle: ByteCountFormatter.CountStyle): string;
    // compoundStaticMethods
    static stringFromMeasurementWithCountStyle(_: NSMeasurement<NSUnitInformationStorage>, countStyle: ByteCountFormatter.CountStyle): string;
    // ownInstanceProperties
    isAdaptive: boolean;
    setAdaptive(_: boolean)
    // ownInstanceProperties
    allowedUnits: ByteCountFormatter.Units;
    setAllowedUnits(_: ByteCountFormatter.Units)
    // ownInstanceProperties
    allowsNonnumericFormatting: boolean;
    setAllowsNonnumericFormatting(_: boolean)
    // ownInstanceProperties
    countStyle: ByteCountFormatter.CountStyle;
    setCountStyle(_: ByteCountFormatter.CountStyle)
    // ownInstanceProperties
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context)
    // ownInstanceProperties
    includesActualByteCount: boolean;
    setIncludesActualByteCount(_: boolean)
    // ownInstanceProperties
    includesCount: boolean;
    setIncludesCount(_: boolean)
    // ownInstanceProperties
    includesUnit: boolean;
    setIncludesUnit(_: boolean)
    // ownInstanceProperties
    zeroPadsFractionDigits: boolean;
    setZeroPadsFractionDigits(_: boolean)
    // compoundInstanceMethods
    stringFromByteCount(fromByteCount: number): string;
    // compoundInstanceMethods
    stringFromMeasurement(_: NSMeasurement<NSUnitInformationStorage>): string;
  }

  // interface
  class NSCache<KeyType, ObjectType> extends NSObject {
    // ownInstanceProperties
    countLimit: number;
    setCountLimit(_: number)
    // ownInstanceProperties
    delegate: NSCacheDelegate;
    setDelegate(_: NSCacheDelegate)
    // ownInstanceProperties
    evictsObjectsWithDiscardedContent: boolean;
    setEvictsObjectsWithDiscardedContent(_: boolean)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    totalCostLimit: number;
    setTotalCostLimit(_: number)
    // compoundInstanceMethods
    objectForKey(forKey: KeyType): ObjectType;
    // compoundInstanceMethods
    removeAllObjects(): void;
    // compoundInstanceMethods
    removeObjectForKey(forKey: KeyType): void;
    // compoundInstanceMethods
    setObjectForKey(_: ObjectType, forKey: KeyType): void;
    // compoundInstanceMethods
    setObjectForKeyCost(_: ObjectType, forKey: KeyType, cost: number): void;
  }

  interface NSCacheDelegate extends NSObject {
    // instance method
    cacheWillEvictObject?(_: NSCache<any, any>, willEvictObject: any): void;
  }

  // interface
  class CachedURLResponse extends NSObject {
    // ownInstanceProperties
    data: NSData;
    // ownInstanceProperties
    response: URLResponse;
    // ownInstanceProperties
    storagePolicy: URLCache.StoragePolicy;
    // ownInstanceProperties
    userInfo: Map<any, any>;
    // compoundInstanceMethods
    static createWithResponseData(response: URLResponse, data: NSData): CachedURLResponse;
    // compoundInstanceMethods
    static createWithResponseDataUserInfoStoragePolicy(response: URLResponse, data: NSData, userInfo?: Map<any, any>, storagePolicy?: URLCache.StoragePolicy): CachedURLResponse;
  }

  // interface
  class NSCalendar extends NSObject {
    // ownInstanceProperties
    AMSymbol: string;
    // ownInstanceProperties
    PMSymbol: string;
    // ownInstanceProperties
    calendarIdentifier: string;
    // ownInstanceProperties
    eraSymbols: string[];
    // ownInstanceProperties
    firstWeekday: number;
    setFirstWeekday(_: number)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    longEraSymbols: string[];
    // ownInstanceProperties
    minimumDaysInFirstWeek: number;
    setMinimumDaysInFirstWeek(_: number)
    // ownInstanceProperties
    monthSymbols: string[];
    // ownInstanceProperties
    quarterSymbols: string[];
    // ownInstanceProperties
    shortMonthSymbols: string[];
    // ownInstanceProperties
    shortQuarterSymbols: string[];
    // ownInstanceProperties
    shortStandaloneMonthSymbols: string[];
    // ownInstanceProperties
    shortStandaloneQuarterSymbols: string[];
    // ownInstanceProperties
    shortStandaloneWeekdaySymbols: string[];
    // ownInstanceProperties
    shortWeekdaySymbols: string[];
    // ownInstanceProperties
    standaloneMonthSymbols: string[];
    // ownInstanceProperties
    standaloneQuarterSymbols: string[];
    // ownInstanceProperties
    standaloneWeekdaySymbols: string[];
    // ownInstanceProperties
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone)
    // ownInstanceProperties
    veryShortMonthSymbols: string[];
    // ownInstanceProperties
    veryShortStandaloneMonthSymbols: string[];
    // ownInstanceProperties
    veryShortStandaloneWeekdaySymbols: string[];
    // ownInstanceProperties
    veryShortWeekdaySymbols: string[];
    // ownInstanceProperties
    weekdaySymbols: string[];
    // ownStaticProperties
    static autoupdatingCurrentCalendar: NSCalendar;
    // ownStaticProperties
    static currentCalendar: NSCalendar;
    // compoundInstanceMethods
    compareDateToDateToUnitGranularity(_: Date, to: Date, toUnitGranularity: NSCalendar.Unit): ComparisonResult;
    // compoundInstanceMethods
    componentFromDate(_: NSCalendar.Unit, from: Date): number;
    // compoundInstanceMethods
    componentsFromDate(_: NSCalendar.Unit, from: Date): NSDateComponents;
    // compoundInstanceMethods
    componentsFromDateToDateOptions(_: NSCalendar.Unit, from: Date, to: Date, options: NSCalendar.Options): NSDateComponents;
    // compoundInstanceMethods
    componentsFromDateComponentsToDateComponentsOptions(_: NSCalendar.Unit, from: NSDateComponents, to: NSDateComponents, options: NSCalendar.Options): NSDateComponents;
    // compoundInstanceMethods
    componentsInTimeZoneFromDate(in_: NSTimeZone, from: Date): NSDateComponents;
    // compoundInstanceMethods
    dateMatchesComponents(_: Date, matchesComponents: NSDateComponents): boolean;
    // compoundInstanceMethods
    dateByAddingComponentsToDateOptions(byAdding: NSDateComponents, to: Date, options: NSCalendar.Options): Date;
    // compoundInstanceMethods
    dateByAddingUnitValueToDateOptions(byAdding: NSCalendar.Unit, value: number, to: Date, options: NSCalendar.Options): Date;
    // compoundInstanceMethods
    dateBySettingHourMinuteSecondOfDateOptions(bySettingHour: number, minute: number, second: number, of: Date, options: NSCalendar.Options): Date;
    // compoundInstanceMethods
    dateBySettingUnitValueOfDateOptions(bySettingUnit: NSCalendar.Unit, value: number, of: Date, options: NSCalendar.Options): Date;
    // compoundInstanceMethods
    dateFromComponents(from: NSDateComponents): Date;
    // compoundInstanceMethods
    dateWithEraYearMonthDayHourMinuteSecondNanosecond(era: number, year: number, month: number, day: number, hour: number, minute: number, second: number, nanosecond: number): Date;
    // compoundInstanceMethods
    dateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond(era: number, yearForWeekOfYear: number, weekOfYear: number, weekday: number, hour: number, minute: number, second: number, nanosecond: number): Date;
    // compoundInstanceMethods
    enumerateDatesWithStartingAfterMatchingOptionsUsing(startingAfter: Date, matching: NSDateComponents, options: NSCalendar.Options, using?: (p1: Date, p2: boolean, p3: boolean) => void): void;
    // compoundInstanceMethods
    getEraYearMonthDayFromDate(_?: number, year?: number, month?: number, day?: number, from?: Date): void;
    // compoundInstanceMethods
    getEraYearForWeekOfYearWeekOfYearWeekdayFromDate(_?: number, yearForWeekOfYear?: number, weekOfYear?: number, weekday?: number, from?: Date): void;
    // compoundInstanceMethods
    getHourMinuteSecondNanosecondFromDate(_?: number, minute?: number, second?: number, nanosecond?: number, from?: Date): void;
    // compoundInstanceMethods
    static createWithCalendarIdentifier(calendarIdentifier: string): NSCalendar;
    // compoundInstanceMethods
    isDateEqualToDateToUnitGranularity(_: Date, equalTo: Date, toUnitGranularity: NSCalendar.Unit): boolean;
    // compoundInstanceMethods
    isDateInSameDayAsDate(_: Date, inSameDayAs: Date): boolean;
    // compoundInstanceMethods
    isDateInToday(_: Date): boolean;
    // compoundInstanceMethods
    isDateInTomorrow(_: Date): boolean;
    // compoundInstanceMethods
    isDateInWeekend(_: Date): boolean;
    // compoundInstanceMethods
    isDateInYesterday(_: Date): boolean;
    // compoundInstanceMethods
    maximumRangeOfUnit(of: NSCalendar.Unit): NSRange;
    // compoundInstanceMethods
    minimumRangeOfUnit(of: NSCalendar.Unit): NSRange;
    // compoundInstanceMethods
    nextDateAfterDateMatchingComponentsOptions(after: Date, matching: NSDateComponents, options: NSCalendar.Options): Date;
    // compoundInstanceMethods
    nextDateAfterDateMatchingHourMinuteSecondOptions(after: Date, matchingHour: number, minute: number, second: number, options: NSCalendar.Options): Date;
    // compoundInstanceMethods
    nextDateAfterDateMatchingUnitValueOptions(after: Date, matching: NSCalendar.Unit, value: number, options: NSCalendar.Options): Date;
    // compoundInstanceMethods
    nextWeekendStartDateIntervalOptionsAfterDate(_?: Date, interval?: number, options?: NSCalendar.Options, after?: Date): boolean;
    // compoundInstanceMethods
    ordinalityOfUnitInUnitForDate(of: NSCalendar.Unit, in_: NSCalendar.Unit, for_: Date): number;
    // compoundInstanceMethods
    rangeOfUnitInUnitForDate(of: NSCalendar.Unit, in_: NSCalendar.Unit, for_: Date): NSRange;
    // compoundInstanceMethods
    rangeOfUnitStartDateIntervalForDate(of: NSCalendar.Unit, start?: Date, interval?: number, for_?: Date): boolean;
    // compoundInstanceMethods
    rangeOfWeekendStartDateIntervalContainingDate(ofWeekendStart?: Date, interval?: number, containing?: Date): boolean;
    // compoundInstanceMethods
    startOfDayForDate(for_: Date): Date;
  }

  // interface
  class NSCharacterSet extends NSObject {
    // ownInstanceProperties
    bitmapRepresentation: NSData;
    // ownInstanceProperties
    invertedSet: NSCharacterSet;
    // ownStaticProperties
    static URLFragmentAllowedCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static URLHostAllowedCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static URLPasswordAllowedCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static URLPathAllowedCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static URLQueryAllowedCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static URLUserAllowedCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static alphanumericCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static capitalizedLetterCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static controlCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static decimalDigitCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static decomposableCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static illegalCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static letterCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static lowercaseLetterCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static newlineCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static nonBaseCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static punctuationCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static symbolCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static uppercaseLetterCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static whitespaceAndNewlineCharacterSet: NSCharacterSet;
    // ownStaticProperties
    static whitespaceCharacterSet: NSCharacterSet;
    // compoundInstanceMethods
    characterIsMember(_: string): boolean;
    // compoundInstanceMethods
    hasMemberInPlane(_: number): boolean;
    // compoundInstanceMethods
    isSupersetOfSet(of: NSCharacterSet): boolean;
    // compoundInstanceMethods
    longCharacterIsMember(_: number): boolean;
  }

  // interface
  class NSClassDescription extends NSObject {
    // compoundStaticMethods
    static invalidateClassDescriptionCache(): void;
    // compoundStaticMethods
    static registerClassDescriptionForClass(_: NSClassDescription, for_: typeof NSObject): void;
  }

  // export function NSClassFromString(aClassName: string): typeof NSObject;

  // interface
  class NSCloneCommand extends NSScriptCommand {
    // ownInstanceProperties
    keySpecifier: NSScriptObjectSpecifier;
    // compoundInstanceMethods
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // interface
  class NSCloseCommand extends NSScriptCommand {
    // ownInstanceProperties
    saveOptions: NSSaveOptions;
  }

  // interface
  class NSCoder extends NSObject {
    // ownInstanceProperties
    allowedClasses: NSSet<typeof NSObject>;
    // ownInstanceProperties
    allowsKeyedCoding: boolean;
    // ownInstanceProperties
    decodingFailurePolicy: NSCoder.DecodingFailurePolicy;
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    requiresSecureCoding: boolean;
    // ownInstanceProperties
    systemVersion: number;
    // compoundInstanceMethods
    containsValueForKey(forKey: string): boolean;
    // compoundInstanceMethods
    decodeArrayOfObjCTypeCountAt(ofObjCType: string, count: number, at: any): void;
    // compoundInstanceMethods
    decodeBoolForKey(forKey: string): boolean;
    // compoundInstanceMethods
    decodeBytesForKeyReturnedLength(forKey: string, returnedLength?: number): string;
    // compoundInstanceMethods
    decodeBytesWithReturnedLength(withReturnedLength: number): any;
    // compoundInstanceMethods
    decodeCMTimeForKey(forKey: string): CMTime;
    // compoundInstanceMethods
    decodeCMTimeMappingForKey(forKey: string): CMTimeMapping;
    // compoundInstanceMethods
    decodeCMTimeRangeForKey(forKey: string): CMTimeRange;
    // compoundInstanceMethods
    decodeDataObject(): NSData;
    // compoundInstanceMethods
    decodeDoubleForKey(forKey: string): number;
    // compoundInstanceMethods
    decodeFloatForKey(forKey: string): number;
    // compoundInstanceMethods
    decodeInt32ForKey(forKey: string): number;
    // compoundInstanceMethods
    decodeInt64ForKey(forKey: string): number;
    // compoundInstanceMethods
    decodeIntForKey(forKey: string): number;
    // compoundInstanceMethods
    decodeIntegerForKey(forKey: string): number;
    // compoundInstanceMethods
    decodeObject(): any;
    // compoundInstanceMethods
    decodeObjectForKey(forKey: string): any;
    // compoundInstanceMethods
    decodePoint(): CGPoint;
    // compoundInstanceMethods
    decodePointForKey(forKey: string): CGPoint;
    // compoundInstanceMethods
    decodePropertyList(): any;
    // compoundInstanceMethods
    decodePropertyListForKey(forKey: string): any;
    // compoundInstanceMethods
    decodeRect(): CGRect;
    // compoundInstanceMethods
    decodeRectForKey(forKey: string): CGRect;
    // compoundInstanceMethods
    decodeSize(): CGSize;
    // compoundInstanceMethods
    decodeSizeForKey(forKey: string): CGSize;
    // compoundInstanceMethods
    decodeValueOfObjCTypeAt(ofObjCType: string, at: any): void;
    // compoundInstanceMethods
    decodeValueOfObjCTypeAtSize(ofObjCType: string, at: any, size: number): void;
    // compoundInstanceMethods
    encodeArrayOfObjCTypeCountAt(ofObjCType: string, count: number, at: any): void;
    // compoundInstanceMethods
    encodeBoolForKey(_: boolean, forKey: string): void;
    // compoundInstanceMethods
    encodeBycopyObject(_?: any): void;
    // compoundInstanceMethods
    encodeByrefObject(_?: any): void;
    // compoundInstanceMethods
    encodeBytesLength(_?: any, length?: number): void;
    // compoundInstanceMethods
    encodeBytesLengthForKey(_?: string, length?: number, forKey?: string): void;
    // compoundInstanceMethods
    encodeCMTimeForKey(_: CMTime, forKey: string): void;
    // compoundInstanceMethods
    encodeCMTimeMappingForKey(_: CMTimeMapping, forKey: string): void;
    // compoundInstanceMethods
    encodeCMTimeRangeForKey(_: CMTimeRange, forKey: string): void;
    // compoundInstanceMethods
    encodeConditionalObject(_?: any): void;
    // compoundInstanceMethods
    encodeConditionalObjectForKey(_?: any, forKey?: string): void;
    // compoundInstanceMethods
    encodeDataObject(_: NSData): void;
    // compoundInstanceMethods
    encodeDoubleForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    encodeFloatForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    encodeInt32ForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    encodeInt64ForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    encodeIntForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    encodeIntegerForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    encodeObject(_?: any): void;
    // compoundInstanceMethods
    encodeObjectForKey(_?: any, forKey?: string): void;
    // compoundInstanceMethods
    encodePoint(_: CGPoint): void;
    // compoundInstanceMethods
    encodePointForKey(_: CGPoint, forKey: string): void;
    // compoundInstanceMethods
    encodePropertyList(_: any): void;
    // compoundInstanceMethods
    encodeRect(_: CGRect): void;
    // compoundInstanceMethods
    encodeRectForKey(_: CGRect, forKey: string): void;
    // compoundInstanceMethods
    encodeRootObject(_: any): void;
    // compoundInstanceMethods
    encodeSize(_: CGSize): void;
    // compoundInstanceMethods
    encodeSizeForKey(_: CGSize, forKey: string): void;
    // compoundInstanceMethods
    encodeValueOfObjCTypeAt(ofObjCType: string, at: any): void;
    // compoundInstanceMethods
    failWithError(_: NSError): void;
    // compoundInstanceMethods
    versionForClassName(forClassName: string): number;
  }

  interface NSCoding {
    // instance method
    encodeWithCoder(with_: NSCoder): void;
  }

  // export function NSCompareHashTables(table1: NSHashTable<any>, table2: NSHashTable<any>): boolean;

  // export function NSCompareMapTables(table1: NSMapTable<any, any>, table2: NSMapTable<any, any>): boolean;

  // interface
  class NSComparisonPredicate extends NSPredicate {
    // ownInstanceProperties
    comparisonPredicateModifier: NSComparisonPredicate.Modifier;
    // ownInstanceProperties
    customSelector: string;
    // ownInstanceProperties
    leftExpression: NSExpression;
    // ownInstanceProperties
    options: NSComparisonPredicate.Options;
    // ownInstanceProperties
    predicateOperatorType: NSComparisonPredicate.Operator;
    // ownInstanceProperties
    rightExpression: NSExpression;
    // compoundInstanceMethods
    static createWithLeftExpressionRightExpressionCustomSelector(leftExpression: NSExpression, rightExpression: NSExpression, customSelector: string): NSComparisonPredicate;
    // compoundInstanceMethods
    static createWithLeftExpressionRightExpressionModifierTypeOptions(leftExpression: NSExpression, rightExpression: NSExpression, modifier: NSComparisonPredicate.Modifier, type: NSComparisonPredicate.Operator, options: NSComparisonPredicate.Options): NSComparisonPredicate;
  }

  // interface
  class NSCompoundPredicate extends NSPredicate {
    // ownInstanceProperties
    compoundPredicateType: NSCompoundPredicate.LogicalType;
    // ownInstanceProperties
    subpredicates: any[];
    // compoundInstanceMethods
    static createWithTypeSubpredicates(type: NSCompoundPredicate.LogicalType, subpredicates: NSPredicate[]): NSCompoundPredicate;
  }

  // interface
  class NSCondition extends NSObject {
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // compoundInstanceMethods
    broadcast(): void;
    // compoundInstanceMethods
    signal(): void;
    // compoundInstanceMethods
    wait(): void;
    // compoundInstanceMethods
    waitUntilDate(until: Date): boolean;
  }

  // interface
  class NSConditionLock extends NSObject {
    // ownInstanceProperties
    condition: number;
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // compoundInstanceMethods
    static createWithCondition(condition: number): NSConditionLock;
    // compoundInstanceMethods
    lockBeforeDate(before: Date): boolean;
    // compoundInstanceMethods
    lockWhenCondition(whenCondition: number): void;
    // compoundInstanceMethods
    lockWhenConditionBeforeDate(whenCondition: number, before: Date): boolean;
    // compoundInstanceMethods
    tryLock(): boolean;
    // compoundInstanceMethods
    tryLockWhenCondition(whenCondition: number): boolean;
    // compoundInstanceMethods
    unlockWithCondition(withCondition: number): void;
  }

  // export function NSContainsRect(aRect: CGRect, bRect: CGRect): boolean;

  // export function NSCopyHashTableWithZone(table: NSHashTable<any>, zone: any): NSHashTable<any>;

  // export function NSCopyMapTableWithZone(table: NSMapTable<any, any>, zone: any): NSMapTable<any, any>;

  // export function NSCopyMemoryPages(source: any, dest: any, bytes: number): void;

  interface NSCopying {
  }

  // interface
  class NSCountCommand extends NSScriptCommand {
  }

  // export function NSCountFrames(): number;

  // export function NSCountHashTable(table: NSHashTable<any>): number;

  // export function NSCountMapTable(table: NSMapTable<any, any>): number;

  // interface
  class NSCountedSet<ObjectType> extends NSMutableSet<ObjectType> {
    // compoundStaticMethods
    //  static setWithCapacity<ObjectType>(capacity: number): NSCountedSet<ObjectType>;
    // compoundStaticMethods
    //  static setWithObjects<ObjectType>(_: ObjectType): NSCountedSet<ObjectType>;
    // compoundInstanceMethods
    countForObject(for_: ObjectType): number;
  }

  // interface
  class NSCreateCommand extends NSScriptCommand {
    // ownInstanceProperties
    createClassDescription: NSScriptClassDescription;
    // ownInstanceProperties
    resolvedKeyDictionary: Map<string, any>;
  }

  // export function NSCreateHashTable(callBacks: NSHashTableCallBacks, capacity: number): NSHashTable<any>;

  // export function NSCreateHashTableWithZone(callBacks: NSHashTableCallBacks, capacity: number, zone: any): NSHashTable<any>;

  // export function NSCreateMapTable(keyCallBacks: NSMapTableKeyCallBacks, valueCallBacks: NSMapTableValueCallBacks, capacity: number): NSMapTable<any, any>;

  // export function NSCreateMapTableWithZone(keyCallBacks: NSMapTableKeyCallBacks, valueCallBacks: NSMapTableValueCallBacks, capacity: number, zone: any): NSMapTable<any, any>;

  // interface
  class NSData extends NSObject {
    // compoundStaticMethods
    static dataWithContentsOfFileOptionsError(options: string, error: NSData.ReadingOptions): NSData;
    // compoundStaticMethods
    static dataWithContentsOfURLOptionsError(options: NSURL, error: NSData.ReadingOptions): NSData;
    // ownInstanceProperties
    bytes: any;
    // ownInstanceProperties
    length: number;
    // compoundInstanceMethods
    base64EncodedDataWithOptions(options: NSData.Base64EncodingOptions): NSData;
    // compoundInstanceMethods
    base64EncodedStringWithOptions(options: NSData.Base64EncodingOptions): string;
    // compoundInstanceMethods
    compressedDataUsingAlgorithmError(using: NSData.CompressionAlgorithm): NSData;
    // compoundInstanceMethods
    decompressedDataUsingAlgorithmError(using: NSData.CompressionAlgorithm): NSData;
    // compoundInstanceMethods
    enumerateBytes(_: (p1: any, p2: NSRange, p3: boolean) => void): void;
    // compoundInstanceMethods
    getBytesLength(_: any, length: number): void;
    // compoundInstanceMethods
    getBytesRange(_: any, range: NSRange): void;
    // compoundInstanceMethods
    static createWithBase64EncodedDataOptions(base64EncodedData: NSData, options: NSData.Base64DecodingOptions): NSData;
    // compoundInstanceMethods
    static createWithBase64EncodedStringOptions(base64EncodedString: string, options: NSData.Base64DecodingOptions): NSData;
    // compoundInstanceMethods
    static createWithBytesLength(bytes?: any, length?: number): NSData;
    // compoundInstanceMethods
    static createWithBytesNoCopyLength(bytesNoCopy: any, length: number): NSData;
    // compoundInstanceMethods
    static createWithBytesNoCopyLengthDeallocator(bytesNoCopy: any, length: number, deallocator?: (p1: any, p2: number) => void): NSData;
    // compoundInstanceMethods
    static createWithBytesNoCopyLengthFreeWhenDone(bytesNoCopy: any, length: number, freeWhenDone: boolean): NSData;
    // compoundInstanceMethods
    static createWithContentsOfFile(contentsOfFile: string): NSData;
    // compoundInstanceMethods
    static createWithContentsOfFileOptions(contentsOfFile: string, options: NSData.ReadingOptions): NSData;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): NSData;
    // compoundInstanceMethods
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options: NSData.ReadingOptions): NSData;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSData;
    // compoundInstanceMethods
    isEqualToData(to: NSData): boolean;
    // compoundInstanceMethods
    rangeOfDataOptionsRange(of: NSData, options: NSData.SearchOptions, in_: NSRange): NSRange;
    // compoundInstanceMethods
    subdataWithRange(with_: NSRange): NSData;
    // compoundInstanceMethods
    writeToFileAtomically(toFile: string, atomically: boolean): boolean;
    // compoundInstanceMethods
    writeToFileOptionsError(options: string, error: NSData.WritingOptions): boolean;
    // compoundInstanceMethods
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
    // compoundInstanceMethods
    writeToURLOptionsError(options: NSURL, error: NSData.WritingOptions): boolean;
  }

  // interface
  class NSDataDetector extends NSRegularExpression {
    // compoundStaticMethods
    static dataDetectorWithTypesError(error: number): NSDataDetector;
    // ownInstanceProperties
    checkingTypes: number;
    // compoundInstanceMethods
    static createWithTypes(types: number): NSDataDetector;
  }

  // interface
  class NSDate extends NSObject {
    // ownInstanceProperties
    timeIntervalSince1970: number;
    // ownInstanceProperties
    timeIntervalSinceNow: number;
    // ownInstanceProperties
    //   timeIntervalSinceReferenceDate: number;
    // ownStaticProperties
    static distantFuture: Date;
    // ownStaticProperties
    static distantPast: Date;
    // ownStaticProperties
    static now: Date;
    // ownStaticProperties
    static timeIntervalSinceReferenceDate: number;
    // compoundInstanceMethods
    compare(_: Date): ComparisonResult;
    // compoundInstanceMethods
    dateByAddingTimeInterval(_: number): NSDate;
    // compoundInstanceMethods
    descriptionWithLocale(with_?: any): string;
    // compoundInstanceMethods
    earlierDate(_: Date): Date;
    // compoundInstanceMethods
    static createWithTimeIntervalSinceDate(timeInterval: number, sinceDate: Date): NSDate;
    // compoundInstanceMethods
    static createWithTimeIntervalSince1970(timeIntervalSince1970: number): NSDate;
    // compoundInstanceMethods
    static createWithTimeIntervalSinceNow(timeIntervalSinceNow: number): NSDate;
    // compoundInstanceMethods
    static createWithTimeIntervalSinceReferenceDate(timeIntervalSinceReferenceDate: number): NSDate;
    // compoundInstanceMethods
    isEqualToDate(to: Date): boolean;
    // compoundInstanceMethods
    laterDate(_: Date): Date;
    // compoundInstanceMethods
    timeIntervalSinceDate(_: Date): number;
  }

  // interface
  class NSDateComponents extends NSObject {
    // ownInstanceProperties
    calendar: NSCalendar;
    setCalendar(_: NSCalendar)
    // ownInstanceProperties
    date: Date;
    // ownInstanceProperties
    day: number;
    setDay(_: number)
    // ownInstanceProperties
    era: number;
    setEra(_: number)
    // ownInstanceProperties
    hour: number;
    setHour(_: number)
    // ownInstanceProperties
    isLeapMonth: boolean;
    setLeapMonth(_: boolean)
    // ownInstanceProperties
    minute: number;
    setMinute(_: number)
    // ownInstanceProperties
    month: number;
    setMonth(_: number)
    // ownInstanceProperties
    nanosecond: number;
    setNanosecond(_: number)
    // ownInstanceProperties
    quarter: number;
    setQuarter(_: number)
    // ownInstanceProperties
    second: number;
    setSecond(_: number)
    // ownInstanceProperties
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone)
    // ownInstanceProperties
    isValidDate: boolean;
    // ownInstanceProperties
    weekOfMonth: number;
    setWeekOfMonth(_: number)
    // ownInstanceProperties
    weekOfYear: number;
    setWeekOfYear(_: number)
    // ownInstanceProperties
    weekday: number;
    setWeekday(_: number)
    // ownInstanceProperties
    weekdayOrdinal: number;
    setWeekdayOrdinal(_: number)
    // ownInstanceProperties
    year: number;
    setYear(_: number)
    // ownInstanceProperties
    yearForWeekOfYear: number;
    setYearForWeekOfYear(_: number)
    // compoundInstanceMethods
    isValidDateInCalendar(in_: NSCalendar): boolean;
    // compoundInstanceMethods
    setValueForComponent(_: number, forComponent: NSCalendar.Unit): void;
    // compoundInstanceMethods
    valueForComponent(forComponent: NSCalendar.Unit): number;
  }

  // interface
  class DateComponentsFormatter extends Formatter {
    // compoundStaticMethods
    static localizedStringFromDateComponentsUnitsStyle(_: NSDateComponents, unitsStyle: DateComponentsFormatter.UnitsStyle): string;
    // ownInstanceProperties
    allowedUnits: NSCalendar.Unit;
    setAllowedUnits(_: NSCalendar.Unit)
    // ownInstanceProperties
    allowsFractionalUnits: boolean;
    setAllowsFractionalUnits(_: boolean)
    // ownInstanceProperties
    calendar: NSCalendar;
    setCalendar(_: NSCalendar)
    // ownInstanceProperties
    collapsesLargestUnit: boolean;
    setCollapsesLargestUnit(_: boolean)
    // ownInstanceProperties
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context)
    // ownInstanceProperties
    includesApproximationPhrase: boolean;
    setIncludesApproximationPhrase(_: boolean)
    // ownInstanceProperties
    includesTimeRemainingPhrase: boolean;
    setIncludesTimeRemainingPhrase(_: boolean)
    // ownInstanceProperties
    maximumUnitCount: number;
    setMaximumUnitCount(_: number)
    // ownInstanceProperties
    referenceDate: Date;
    setReferenceDate(_: Date)
    // ownInstanceProperties
    unitsStyle: DateComponentsFormatter.UnitsStyle;
    setUnitsStyle(_: DateComponentsFormatter.UnitsStyle)
    // ownInstanceProperties
    zeroFormattingBehavior: DateComponentsFormatter.ZeroFormattingBehavior;
    setZeroFormattingBehavior(_: DateComponentsFormatter.ZeroFormattingBehavior)
    // compoundInstanceMethods
    stringFromDateToDate(_: Date, toDate: Date): string;
    // compoundInstanceMethods
    stringFromDateComponents(_: NSDateComponents): string;
    // compoundInstanceMethods
    stringFromTimeInterval(from: number): string;
  }

  // interface
  class DateFormatter extends Formatter {
    // compoundStaticMethods
    static dateFormatFromTemplateOptionsLocale(_: string, options: number, locale?: NSLocale): string;
    // compoundStaticMethods
    static localizedStringFromDateDateStyleTimeStyle(from: Date, dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style): string;
    // ownInstanceProperties
    AMSymbol: string;
    setAMSymbol(_: string)
    // ownInstanceProperties
    PMSymbol: string;
    setPMSymbol(_: string)
    // ownInstanceProperties
    calendar: NSCalendar;
    setCalendar(_: NSCalendar)
    // ownInstanceProperties
    dateFormat: string;
    setDateFormat(_: string)
    // ownInstanceProperties
    dateStyle: DateFormatter.Style;
    setDateStyle(_: DateFormatter.Style)
    // ownInstanceProperties
    defaultDate: Date;
    setDefaultDate(_: Date)
    // ownInstanceProperties
    doesRelativeDateFormatting: boolean;
    setDoesRelativeDateFormatting(_: boolean)
    // ownInstanceProperties
    eraSymbols: string[];
    setEraSymbols(_: string[])
    // ownInstanceProperties
    formatterBehavior: DateFormatter.Behavior;
    setFormatterBehavior(_: DateFormatter.Behavior)
    // ownInstanceProperties
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context)
    // ownInstanceProperties
    generatesCalendarDates: boolean;
    setGeneratesCalendarDates(_: boolean)
    // ownInstanceProperties
    gregorianStartDate: Date;
    setGregorianStartDate(_: Date)
    // ownInstanceProperties
    isLenient: boolean;
    setLenient(_: boolean)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    longEraSymbols: string[];
    setLongEraSymbols(_: string[])
    // ownInstanceProperties
    monthSymbols: string[];
    setMonthSymbols(_: string[])
    // ownInstanceProperties
    quarterSymbols: string[];
    setQuarterSymbols(_: string[])
    // ownInstanceProperties
    shortMonthSymbols: string[];
    setShortMonthSymbols(_: string[])
    // ownInstanceProperties
    shortQuarterSymbols: string[];
    setShortQuarterSymbols(_: string[])
    // ownInstanceProperties
    shortStandaloneMonthSymbols: string[];
    setShortStandaloneMonthSymbols(_: string[])
    // ownInstanceProperties
    shortStandaloneQuarterSymbols: string[];
    setShortStandaloneQuarterSymbols(_: string[])
    // ownInstanceProperties
    shortStandaloneWeekdaySymbols: string[];
    setShortStandaloneWeekdaySymbols(_: string[])
    // ownInstanceProperties
    shortWeekdaySymbols: string[];
    setShortWeekdaySymbols(_: string[])
    // ownInstanceProperties
    standaloneMonthSymbols: string[];
    setStandaloneMonthSymbols(_: string[])
    // ownInstanceProperties
    standaloneQuarterSymbols: string[];
    setStandaloneQuarterSymbols(_: string[])
    // ownInstanceProperties
    standaloneWeekdaySymbols: string[];
    setStandaloneWeekdaySymbols(_: string[])
    // ownInstanceProperties
    timeStyle: DateFormatter.Style;
    setTimeStyle(_: DateFormatter.Style)
    // ownInstanceProperties
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone)
    // ownInstanceProperties
    twoDigitStartDate: Date;
    setTwoDigitStartDate(_: Date)
    // ownInstanceProperties
    veryShortMonthSymbols: string[];
    setVeryShortMonthSymbols(_: string[])
    // ownInstanceProperties
    veryShortStandaloneMonthSymbols: string[];
    setVeryShortStandaloneMonthSymbols(_: string[])
    // ownInstanceProperties
    veryShortStandaloneWeekdaySymbols: string[];
    setVeryShortStandaloneWeekdaySymbols(_: string[])
    // ownInstanceProperties
    veryShortWeekdaySymbols: string[];
    setVeryShortWeekdaySymbols(_: string[])
    // ownInstanceProperties
    weekdaySymbols: string[];
    setWeekdaySymbols(_: string[])
    // ownStaticProperties
    static defaultFormatterBehavior: DateFormatter.Behavior;
    setDefaultFormatterBehavior(_: DateFormatter.Behavior)
    // compoundInstanceMethods
    dateFromString(_: string): Date;
    // compoundInstanceMethods
    getObjectValueForStringRangeError(forString?: any, range?: string, error?: NSRange): boolean;
    // compoundInstanceMethods
    setLocalizedDateFormatFromTemplate(_: string): void;
    // compoundInstanceMethods
    stringFromDate(_: Date): string;
  }

  // interface
  class NSDateInterval extends NSObject {
    // ownInstanceProperties
    duration: number;
    // ownInstanceProperties
    endDate: Date;
    // ownInstanceProperties
    startDate: Date;
    // compoundInstanceMethods
    compare(_: NSDateInterval): ComparisonResult;
    // compoundInstanceMethods
    containsDate(_: Date): boolean;
    // compoundInstanceMethods
    static createWithStartDateDuration(startDate: Date, duration: number): NSDateInterval;
    // compoundInstanceMethods
    static createWithStartDateEndDate(startDate: Date, endDate: Date): NSDateInterval;
    // compoundInstanceMethods
    intersectionWithDateInterval(with_: NSDateInterval): NSDateInterval;
    // compoundInstanceMethods
    intersectsDateInterval(_: NSDateInterval): boolean;
    // compoundInstanceMethods
    isEqualToDateInterval(to: NSDateInterval): boolean;
  }

  // interface
  class DateIntervalFormatter extends Formatter {
    // ownInstanceProperties
    calendar: NSCalendar;
    setCalendar(_: NSCalendar)
    // ownInstanceProperties
    dateStyle: DateIntervalFormatter.Style;
    setDateStyle(_: DateIntervalFormatter.Style)
    // ownInstanceProperties
    dateTemplate: string;
    setDateTemplate(_: string)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    timeStyle: DateIntervalFormatter.Style;
    setTimeStyle(_: DateIntervalFormatter.Style)
    // ownInstanceProperties
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone)
    // compoundInstanceMethods
    stringFromDateToDate(_: Date, toDate: Date): string;
    // compoundInstanceMethods
    stringFromDateInterval(_: NSDateInterval): string;
  }

  // export function NSDeallocateMemoryPages(ptr: any, bytes: number): void;

  // export function NSDeallocateObject(object_: any): void;

  // export function NSDecimalAdd(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export function NSDecimalCompact(number: number): void;

  // export function NSDecimalCompare(leftOperand: number, rightOperand: number): ComparisonResult;

  // export function NSDecimalCopy(destination: number, source: number): void;

  // export function NSDecimalDivide(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export function NSDecimalMultiply(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export function NSDecimalMultiplyByPowerOf10(result: number, number: number, power: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export function NSDecimalNormalize(number1: number, number2: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // interface
  class NSDecimalNumber extends NSNumber {
    // ownStaticProperties
    static defaultBehavior: NSDecimalNumberBehaviors;
    setDefaultBehavior(_: NSDecimalNumberBehaviors)
    // ownStaticProperties
    static maximumDecimalNumber: NSDecimalNumber;
    // ownStaticProperties
    static minimumDecimalNumber: NSDecimalNumber;
    // ownStaticProperties
    static notANumber: NSDecimalNumber;
    // ownStaticProperties
    static one: NSDecimalNumber;
    // ownStaticProperties
    static zero: NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByAdding(_: NSDecimalNumber): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByAddingWithBehavior(_: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByDividingBy(by: NSDecimalNumber): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByDividingByWithBehavior(by: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByMultiplyingBy(by: NSDecimalNumber): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByMultiplyingByWithBehavior(by: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByMultiplyingByPowerOf10(byPowerOf10: number): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByMultiplyingByPowerOf10WithBehavior(byPowerOf10: number, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByRaisingToPower(toPower: number): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByRaisingToPowerWithBehavior(toPower: number, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberByRoundingAccordingToBehavior(accordingToBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberBySubtracting(_: NSDecimalNumber): NSDecimalNumber;
    // compoundInstanceMethods
    decimalNumberBySubtractingWithBehavior(_: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    // compoundInstanceMethods
    static createWithDecimal(decimal: number): NSDecimalNumber;
    // compoundInstanceMethods
    static createWithMantissaExponentIsNegative(mantissa: number, exponent: number, isNegative: boolean): NSDecimalNumber;
    // compoundInstanceMethods
    static createWithString(string?: string): NSDecimalNumber;
    // compoundInstanceMethods
    static createWithStringLocale(string?: string, locale?: any): NSDecimalNumber;
  }

  interface NSDecimalNumberBehaviors {
    // instance method
    exceptionDuringOperationErrorLeftOperandRightOperand(_: string, error: NSDecimalNumber.CalculationError, leftOperand: NSDecimalNumber, rightOperand?: NSDecimalNumber): NSDecimalNumber;
    // instance method
    roundingMode(): NSDecimalNumber.RoundingMode;
    // instance method
    scale(): number;
  }

  // interface
  class NSDecimalNumberHandler extends NSObject {
    // compoundStaticMethods
    static decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode: NSDecimalNumber.RoundingMode, scale: number, raiseOnExactness: boolean, raiseOnOverflow: boolean, raiseOnUnderflow: boolean, raiseOnDivideByZero: boolean): NSDecimalNumberHandler;
    // ownStaticProperties
    static defaultDecimalNumberHandler: NSDecimalNumberHandler;
    // compoundInstanceMethods
    static createWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode: NSDecimalNumber.RoundingMode, scale: number, raiseOnExactness: boolean, raiseOnOverflow: boolean, raiseOnUnderflow: boolean, raiseOnDivideByZero: boolean): NSDecimalNumberHandler;
  }

  // export function NSDecimalPower(result: number, number: number, power: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export function NSDecimalRound(result: number, number: number, scale: number, roundingMode: NSDecimalNumber.RoundingMode): void;

  // export function NSDecimalString(dcm: number, locale: any): string;

  // export function NSDecimalSubtract(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export function NSDecrementExtraRefCountWasZero(object_: any): boolean;

  // interface
  class NSDeleteCommand extends NSScriptCommand {
    // ownInstanceProperties
    keySpecifier: NSScriptObjectSpecifier;
    // compoundInstanceMethods
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // interface
  class NSDictionary<KeyType, ObjectType> extends NSObject {
    // compoundStaticMethods
    static sharedKeySetWithForKeys<KeyType>(forKeys: KeyType[]): any;
    // ownInstanceProperties
    allKeys: KeyType[];
    // ownInstanceProperties
    allValues: ObjectType[];
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    descriptionInStringsFileFormat: string;
    // compoundInstanceMethods
    allKeysForObject(for_: ObjectType): KeyType[];
    // compoundInstanceMethods
    countByEnumeratingWithStateObjectsCount(with_: NSFastEnumerationState, objects?: K, count?: number): number;
    // compoundInstanceMethods
    descriptionWithLocale(withLocale?: any): string;
    // compoundInstanceMethods
    descriptionWithLocaleIndent(withLocale?: any, indent?: number): string;
    // compoundInstanceMethods
    enumerateKeysAndObjects(_: (p1: KeyType, p2: ObjectType, p3: boolean) => void): void;
    // compoundInstanceMethods
    enumerateKeysAndObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: KeyType, p2: ObjectType, p3: boolean) => void): void;
    // compoundInstanceMethods
    fileCreationDate(): Date;
    // compoundInstanceMethods
    fileExtensionHidden(): boolean;
    // compoundInstanceMethods
    fileGroupOwnerAccountID(): number;
    // compoundInstanceMethods
    fileGroupOwnerAccountName(): string;
    // compoundInstanceMethods
    fileHFSCreatorCode(): number;
    // compoundInstanceMethods
    fileHFSTypeCode(): number;
    // compoundInstanceMethods
    fileIsAppendOnly(): boolean;
    // compoundInstanceMethods
    fileIsImmutable(): boolean;
    // compoundInstanceMethods
    fileModificationDate(): Date;
    // compoundInstanceMethods
    fileOwnerAccountID(): number;
    // compoundInstanceMethods
    fileOwnerAccountName(): string;
    // compoundInstanceMethods
    filePosixPermissions(): number;
    // compoundInstanceMethods
    fileSize(): number;
    // compoundInstanceMethods
    fileSystemFileNumber(): number;
    // compoundInstanceMethods
    fileSystemNumber(): number;
    // compoundInstanceMethods
    fileType(): string;
    // compoundInstanceMethods
    isEqualToDictionary(to: Map<KeyType, ObjectType>): boolean;
    // compoundInstanceMethods
    keyEnumerator(): NSEnumerator<KeyType>;
    // compoundInstanceMethods
    keysOfEntriesWithPassingTest(passingTest: (p1: KeyType, p2: ObjectType, p3: boolean) => boolean): NSSet<KeyType>;
    // compoundInstanceMethods
    keysOfEntriesWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: KeyType, p2: ObjectType, p3: boolean) => boolean): NSSet<KeyType>;
    // compoundInstanceMethods
    keysSortedByValueWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): KeyType[];
    // compoundInstanceMethods
    keysSortedByValueUsingSelector(using: string): KeyType[];
    // compoundInstanceMethods
    keysSortedByValueWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): KeyType[];
    // compoundInstanceMethods
    objectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    objectForKey(forKey: KeyType): ObjectType;
    // compoundInstanceMethods
    objectsForKeysNotFoundMarker(forKeys: KeyType[], notFoundMarker: ObjectType): ObjectType[];
    // compoundInstanceMethods
    //  valueForKey(forKey: string): ObjectType;
    // compoundInstanceMethods
    writeToFileAtomically(toFile: string, atomically: boolean): boolean;
    // compoundInstanceMethods
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
    // compoundInstanceMethods
    writeToURLError(error: NSURL): boolean;
  }

  // interface
  class Dimension extends Unit {
    // compoundStaticMethods
    static baseUnit(): Dimension;
    // ownInstanceProperties
    converter: UnitConverter;
    // compoundInstanceMethods
    static createWithSymbolConverter(symbol: string, converter: UnitConverter): Dimension;
  }

  // interface
  class DirectoryEnumerator<ObjectType> extends NSEnumerator<ObjectType> {
    // ownInstanceProperties
    directoryAttributes: Map<string, any>;
    // ownInstanceProperties
    fileAttributes: Map<string, any>;
    // ownInstanceProperties
    isEnumeratingDirectoryPostOrder: boolean;
    // ownInstanceProperties
    level: number;
    // compoundInstanceMethods
    skipDescendants(): void;
    // compoundInstanceMethods
    skipDescendents(): void;
  }

  interface NSDiscardableContent {
    // instance method
    beginContentAccess(): boolean;
    // instance method
    discardContentIfPossible(): void;
    // instance method
    endContentAccess(): void;
    // instance method
    isContentDiscarded(): boolean;
  }

  // interface
  class NSDistributedLock extends NSObject {
    // ownInstanceProperties
    lockDate: Date;
    // compoundInstanceMethods
    breakLock(): void;
    // compoundInstanceMethods
    static createWithPath(path: string): NSDistributedLock;
    // compoundInstanceMethods
    tryLock(): boolean;
    // compoundInstanceMethods
    unlock(): void;
  }

  // interface
  class DistributedNotificationCenter extends NotificationCenter {
    // ownInstanceProperties
    suspended: boolean;
    setSuspended(_: boolean)
    // compoundInstanceMethods
    //  addObserverSelectorNameObject(_: any, selector: string, name?: string, object_?: string): void;
    // compoundInstanceMethods
    addObserverSelectorNameObjectSuspensionBehavior(_: any, selector: string, name?: string, object_?: string, suspensionBehavior?: DistributedNotificationCenter.SuspensionBehavior): void;
    // compoundInstanceMethods
    //  postNotificationNameObject(_: string, object_?: string): void;
    // compoundInstanceMethods
    //  postNotificationNameObjectUserInfo(_: string, object_?: string, userInfo?: Map<any, any>): void;
    // compoundInstanceMethods
    postNotificationNameObjectUserInfoDeliverImmediately(_: string, object_?: string, userInfo?: Map<any, any>, deliverImmediately?: boolean): void;
    // compoundInstanceMethods
    postNotificationNameObjectUserInfoOptions(_: string, object_?: string, userInfo?: Map<any, any>, options?: DistributedNotificationCenter.Options): void;
    // compoundInstanceMethods
    //  removeObserverNameObject(_: any, name?: string, object_?: string): void;
  }

  // export function NSDivideRect(inRect: CGRect, slice: NSRect, rem: NSRect, amount: number, edge: NSRectEdge): void;

  // export function NSEdgeInsetsEqual(aInsets: NSEdgeInsets, bInsets: NSEdgeInsets): boolean;

  // export function NSEndHashTableEnumeration(enumerator: NSHashEnumerator): void;

  // export function NSEndMapTableEnumeration(enumerator: NSMapEnumerator): void;

  // interface
  class EnergyFormatter extends Formatter {
    // ownInstanceProperties
    isForFoodEnergyUse: boolean;
    setForFoodEnergyUse(_: boolean)
    // ownInstanceProperties
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter)
    // ownInstanceProperties
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle)
    // compoundInstanceMethods
    stringFromJoules(_: number): string;
    // compoundInstanceMethods
    stringFromValueUnit(_: number, unit: EnergyFormatter.Unit): string;
    // compoundInstanceMethods
    unitStringFromJoulesUsedUnit(_: number, usedUnit?: EnergyFormatter.Unit): string;
    // compoundInstanceMethods
    unitStringFromValueUnit(_: number, unit: EnergyFormatter.Unit): string;
  }

  // export function NSEnumerateHashTable(table: NSHashTable<any>): NSHashEnumerator;

  // export function NSEnumerateMapTable(table: NSMapTable<any, any>): NSMapEnumerator;

  // interface
  class NSEnumerator<ObjectType> extends NSObject {
    // ownInstanceProperties
    allObjects: ObjectType[];
    // compoundInstanceMethods
    nextObject(): ObjectType;
  }

  // export function NSEqualPoints(aPoint: CGPoint, bPoint: CGPoint): boolean;

  // export function NSEqualRects(aRect: CGRect, bRect: CGRect): boolean;

  // export function NSEqualSizes(aSize: CGSize, bSize: CGSize): boolean;

  // interface
  class NSError extends NSObject {
    // compoundStaticMethods
    static setUserInfoValueProviderWithForDomainProvider(forDomain: string, provider?: (p1: NSError, p2: string) => any): void;
    // compoundStaticMethods
    static userInfoValueProviderForDomain(forDomain: string): (p1: NSError, p2: string) => any;
    // ownInstanceProperties
    code: number;
    // ownInstanceProperties
    domain: string;
    // ownInstanceProperties
    helpAnchor: string;
    // ownInstanceProperties
    localizedDescription: string;
    // ownInstanceProperties
    localizedFailureReason: string;
    // ownInstanceProperties
    localizedRecoveryOptions: string[];
    // ownInstanceProperties
    localizedRecoverySuggestion: string;
    // ownInstanceProperties
    recoveryAttempter: any;
    // ownInstanceProperties
    userInfo: Map<string, any>;
    // compoundInstanceMethods
    static createWithDomainCodeUserInfo(domain: string, code: number, userInfo?: Map<string, any>): NSError;
  }

  // interface
  class NSException extends NSObject {
    // ownInstanceProperties
    callStackReturnAddresses: number[];
    // ownInstanceProperties
    callStackSymbols: string[];
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    reason: string;
    // ownInstanceProperties
    userInfo: Map<any, any>;
    // compoundInstanceMethods
    static createWithNameReasonUserInfo(name: string, reason?: string, userInfo?: Map<any, any>): NSException;
    // compoundInstanceMethods
    raise(): void;
  }

  // interface
  class NSExistsCommand extends NSScriptCommand {
  }

  // interface
  class NSExpression extends NSObject {
    // compoundStaticMethods
    static expressionForAnyKey(): NSExpression;
    // compoundStaticMethods
    static expressionForEvaluatedObject(): NSExpression;
    // ownInstanceProperties
    arguments: NSExpression[];
    // ownInstanceProperties
    collection: any;
    // ownInstanceProperties
    constantValue: any;
    // ownInstanceProperties
    expressionBlock: (p1: any, p2: NSExpression[], p3: NSMutableDictionary<any, any>) => any;
    // ownInstanceProperties
    expressionType: NSExpression.ExpressionType;
    // ownInstanceProperties
    falseExpression: NSExpression;
    // ownInstanceProperties
    function: string;
    // ownInstanceProperties
    keyPath: string;
    // ownInstanceProperties
    leftExpression: NSExpression;
    // ownInstanceProperties
    operand: NSExpression;
    // ownInstanceProperties
    predicate: NSPredicate;
    // ownInstanceProperties
    rightExpression: NSExpression;
    // ownInstanceProperties
    trueExpression: NSExpression;
    // ownInstanceProperties
    variable: string;
    // compoundInstanceMethods
    allowEvaluation(): void;
    // compoundInstanceMethods
    expressionValueWithObjectContext(with_?: any, context?: NSMutableDictionary<any, any>): any;
    // compoundInstanceMethods
    static createWithExpressionType(expressionType: NSExpression.ExpressionType): NSExpression;
  }

  // interface
  class NSExtensionContext extends NSObject {
    // ownInstanceProperties
    inputItems: any[];
    // compoundInstanceMethods
    cancelRequestWithError(withError: NSError): void;
    // compoundInstanceMethods
    completeRequestWithReturningItemsCompletionHandler(returningItems?: any[], completionHandler?: (p1: boolean) => void): void;
    // compoundInstanceMethods
    openCompletionHandler(_: NSURL, completionHandler?: (p1: boolean) => void): void;
  }

  // interface
  class NSExtensionItem extends NSObject {
    // ownInstanceProperties
    attachments: NSItemProvider[];
    setAttachments(_: NSItemProvider[])
    // ownInstanceProperties
    attributedContentText: NSAttributedString;
    setAttributedContentText(_: NSAttributedString)
    // ownInstanceProperties
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString)
    // ownInstanceProperties
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>)
  }

  interface NSExtensionRequestHandling extends NSObject {
    // instance method
    beginRequestWithExtensionContext(with_: NSExtensionContext): void;
  }

  // export function NSExtraRefCount(object_: any): number;

  interface NSFastEnumeration {
    // instance method
    countByEnumeratingWithStateObjectsCount(with_: NSFastEnumerationState, objects?: any, count?: number): number;
  }

  // interface
  class NSFileAccessIntent extends NSObject {
    // compoundStaticMethods
    static readingIntentWithURLOptions(with_: NSURL, options: NSFileCoordinator.ReadingOptions): NSFileAccessIntent;
    // compoundStaticMethods
    static writingIntentWithURLOptions(with_: NSURL, options: NSFileCoordinator.WritingOptions): NSFileAccessIntent;
    // ownInstanceProperties
    URL: NSURL;
  }

  // interface
  class NSFileCoordinator extends NSObject {
    // compoundStaticMethods
    static addFilePresenter(_: NSFilePresenter): void;
    // compoundStaticMethods
    static removeFilePresenter(_: NSFilePresenter): void;
    // ownInstanceProperties
    purposeIdentifier: string;
    setPurposeIdentifier(_: string)
    // ownStaticProperties
    static filePresenters: NSFilePresenter[];
    // compoundInstanceMethods
    cancel(): void;
    // compoundInstanceMethods
    coordinateWithWithQueueByAccessor(with_: NSFileAccessIntent[], queue: OperationQueue, byAccessor?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    coordinateWithReadingItemAtOptionsErrorByAccessor(readingItemAt: NSURL, options: NSFileCoordinator.ReadingOptions, error?: Error, byAccessor?: (p1: NSURL) => void): void;
    // compoundInstanceMethods
    coordinateWithReadingItemAtOptionsWritingItemAtOptionsErrorByAccessor(readingItemAt: NSURL, options: NSFileCoordinator.ReadingOptions, writingItemAt: NSURL, options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: NSURL, p2: NSURL) => void): void;
    // compoundInstanceMethods
    coordinateWithWritingItemAtOptionsErrorByAccessor(writingItemAt: NSURL, options: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: NSURL) => void): void;
    // compoundInstanceMethods
    coordinateWithWritingItemAtOptionsWritingItemAtOptionsErrorByAccessor(writingItemAt: NSURL, options: NSFileCoordinator.WritingOptions, writingItemAt2: NSURL, options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: NSURL, p2: NSURL) => void): void;
    // compoundInstanceMethods
    static createWithFilePresenter(filePresenter?: NSFilePresenter): NSFileCoordinator;
    // compoundInstanceMethods
    itemWithAtDidChangeUbiquityAttributes(at: NSURL, didChangeUbiquityAttributes: NSSet<string>): void;
    // compoundInstanceMethods
    itemAtURLDidMoveToURL(at: NSURL, didMoveTo: NSURL): void;
    // compoundInstanceMethods
    itemAtURLWillMoveToURL(at: NSURL, willMoveTo: NSURL): void;
    // compoundInstanceMethods
    prepareWithForReadingItemsAtOptionsWritingItemsAtOptionsErrorByAccessor(forReadingItemsAt: NSURL[], options: NSFileCoordinator.ReadingOptions, writingItemsAt: NSURL[], options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: () => void) => void): void;
  }

  // interface
  class FileHandle extends NSObject {
    // compoundStaticMethods
    static fileHandleForReadingFromURLError(error: NSURL): FileHandle;
    // compoundStaticMethods
    static fileHandleForUpdatingURLError(error: NSURL): FileHandle;
    // compoundStaticMethods
    static fileHandleForWritingToURLError(error: NSURL): FileHandle;
    // ownInstanceProperties
    availableData: NSData;
    // ownInstanceProperties
    fileDescriptor: number;
    // ownInstanceProperties
    offsetInFile: number;
    // ownInstanceProperties
    readabilityHandler: (p1: FileHandle) => void;
    setReadabilityHandler(_: (p1: FileHandle) => void)
    // ownInstanceProperties
    writeabilityHandler: (p1: FileHandle) => void;
    setWriteabilityHandler(_: (p1: FileHandle) => void)
    // ownStaticProperties
    static fileHandleWithNullDevice: FileHandle;
    // ownStaticProperties
    static fileHandleWithStandardError: FileHandle;
    // ownStaticProperties
    static fileHandleWithStandardInput: FileHandle;
    // ownStaticProperties
    static fileHandleWithStandardOutput: FileHandle;
    // compoundInstanceMethods
    acceptConnectionInBackgroundAndNotify(): void;
    // compoundInstanceMethods
    acceptConnectionInBackgroundAndNotifyForModes(_?: string[]): void;
    // compoundInstanceMethods
    closeAndReturnError(): boolean;
    // compoundInstanceMethods
    closeFile(): void;
    // compoundInstanceMethods
    getOffsetError(error: number): boolean;
    // compoundInstanceMethods
    static createWithFileDescriptor(fileDescriptor: number): FileHandle;
    // compoundInstanceMethods
    static createWithFileDescriptorCloseOnDealloc(fileDescriptor: number, closeOnDealloc: boolean): FileHandle;
    // compoundInstanceMethods
    readDataOfLength(_: number): NSData;
    // compoundInstanceMethods
    readDataToEndOfFile(): NSData;
    // compoundInstanceMethods
    readDataToEndOfFileAndReturnError(): NSData;
    // compoundInstanceMethods
    readDataUpToLengthError(error: number): NSData;
    // compoundInstanceMethods
    readInBackgroundAndNotify(): void;
    // compoundInstanceMethods
    readInBackgroundAndNotifyForModes(_?: string[]): void;
    // compoundInstanceMethods
    readToEndOfFileInBackgroundAndNotify(): void;
    // compoundInstanceMethods
    readToEndOfFileInBackgroundAndNotifyForModes(_?: string[]): void;
    // compoundInstanceMethods
    seekToEndOfFile(): number;
    // compoundInstanceMethods
    seekToEndReturningOffsetError(error?: number): boolean;
    // compoundInstanceMethods
    seekToFileOffset(_: number): void;
    // compoundInstanceMethods
    seekToOffsetError(error: number): boolean;
    // compoundInstanceMethods
    synchronizeAndReturnError(): boolean;
    // compoundInstanceMethods
    synchronizeFile(): void;
    // compoundInstanceMethods
    truncateAtOffsetError(error: number): boolean;
    // compoundInstanceMethods
    truncateFileAtOffset(_: number): void;
    // compoundInstanceMethods
    waitForDataInBackgroundAndNotify(): void;
    // compoundInstanceMethods
    waitForDataInBackgroundAndNotifyForModes(_?: string[]): void;
    // compoundInstanceMethods
    writeData(_: NSData): void;
    // compoundInstanceMethods
    writeDataError(error: NSData): boolean;
  }

  // interface
  class FileManager extends NSObject {
    // ownInstanceProperties
    currentDirectoryPath: string;
    // ownInstanceProperties
    delegate: FileManagerDelegate;
    setDelegate(_: FileManagerDelegate)
    // ownInstanceProperties
    homeDirectoryForCurrentUser: NSURL;
    // ownInstanceProperties
    temporaryDirectory: NSURL;
    // ownInstanceProperties
    ubiquityIdentityToken: any;
    // ownStaticProperties
    static defaultManager: FileManager;
    // compoundInstanceMethods
    URLForDirectoryInDomainAppropriateForURLCreateError(for_: FileManager.SearchPathDirectory, in_: FileManager.SearchPathDomainMask, appropriateFor?: NSURL, create?: boolean): NSURL;
    // compoundInstanceMethods
    URLForPublishingUbiquitousItemAtURLExpirationDateError(forPublishingUbiquitousItemAt: NSURL, expiration?: Date): NSURL;
    // compoundInstanceMethods
    URLForUbiquityContainerIdentifier(forUbiquityContainerIdentifier?: string): NSURL;
    // compoundInstanceMethods
    URLsForDirectoryInDomains(for_: FileManager.SearchPathDirectory, in_: FileManager.SearchPathDomainMask): NSURL[];
    // compoundInstanceMethods
    attributesOfFileSystemForPathError(error: string): Map<string, any>;
    // compoundInstanceMethods
    attributesOfItemAtPathError(error: string): Map<string, any>;
    // compoundInstanceMethods
    changeCurrentDirectoryPath(_: string): boolean;
    // compoundInstanceMethods
    componentsToDisplayForPath(_: string): string[];
    // compoundInstanceMethods
    containerURLForSecurityApplicationGroupIdentifier(forSecurityApplicationGroupIdentifier: string): NSURL;
    // compoundInstanceMethods
    contentsAtPath(_: string): NSData;
    // compoundInstanceMethods
    contentsEqualAtPathAndPath(_: string, andPath: string): boolean;
    // compoundInstanceMethods
    contentsOfDirectoryAtPathError(error: string): string[];
    // compoundInstanceMethods
    contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(includingPropertiesForKeys: NSURL, options?: string[], error?: FileManager.DirectoryEnumerationOptions): NSURL[];
    // compoundInstanceMethods
    copyItemAtPathToPathError(toPath: string, error: string): boolean;
    // compoundInstanceMethods
    copyItemAtURLToURLError(toURL: NSURL, error: NSURL): boolean;
    // compoundInstanceMethods
    createDirectoryAtPathWithIntermediateDirectoriesAttributesError(withIntermediateDirectories: string, attributes: boolean, error?: Map<string, any>): boolean;
    // compoundInstanceMethods
    createDirectoryAtURLWithIntermediateDirectoriesAttributesError(withIntermediateDirectories: NSURL, attributes: boolean, error?: Map<string, any>): boolean;
    // compoundInstanceMethods
    createFileAtPathContentsAttributes(_: string, contents?: NSData, attributes?: Map<string, any>): boolean;
    // compoundInstanceMethods
    createSymbolicLinkAtPathWithDestinationPathError(withDestinationPath: string, error: string): boolean;
    // compoundInstanceMethods
    createSymbolicLinkAtURLWithDestinationURLError(withDestinationURL: NSURL, error: NSURL): boolean;
    // compoundInstanceMethods
    destinationOfSymbolicLinkAtPathError(error: string): string;
    // compoundInstanceMethods
    displayNameAtPath(_: string): string;
    // compoundInstanceMethods
    enumeratorAtPath(_: string): DirectoryEnumerator<string>;
    // compoundInstanceMethods
    enumeratorAtURLWithIncludingPropertiesForKeysOptionsErrorHandler(_: NSURL, includingPropertiesForKeys?: string[], options?: FileManager.DirectoryEnumerationOptions, errorHandler?: (p1: NSURL, p2: NSError) => boolean): DirectoryEnumerator<NSURL>;
    // compoundInstanceMethods
    evictUbiquitousItemAtURLError(error: NSURL): boolean;
    // compoundInstanceMethods
    fileExistsAtPath(_: string): boolean;
    // compoundInstanceMethods
    fileExistsAtPathIsDirectory(_: string, isDirectory?: boolean): boolean;
    // compoundInstanceMethods
    fileSystemRepresentationWithPath(_: string): string;
    // compoundInstanceMethods
    getFileProviderServicesForItemAtURLWithCompletionHandler(_: NSURL, completionHandler?: (p1: Map<string, NSFileProviderService>, p2: NSError) => void): void;
    // compoundInstanceMethods
    getRelationshipOfDirectoryInDomainToItemAtURLError(ofDirectory: FileManager.URLRelationship, inDomain: FileManager.SearchPathDirectory, toItemAtURL: FileManager.SearchPathDomainMask, error: NSURL): boolean;
    // compoundInstanceMethods
    getRelationshipOfDirectoryAtURLToItemAtURLError(ofDirectoryAtURL: FileManager.URLRelationship, toItemAtURL: NSURL, error: NSURL): boolean;
    // compoundInstanceMethods
    homeDirectoryForUser(_: string): NSURL;
    // compoundInstanceMethods
    isDeletableFileAtPath(_: string): boolean;
    // compoundInstanceMethods
    isExecutableFileAtPath(_: string): boolean;
    // compoundInstanceMethods
    isReadableFileAtPath(_: string): boolean;
    // compoundInstanceMethods
    isUbiquitousItemAtURL(_: NSURL): boolean;
    // compoundInstanceMethods
    isWritableFileAtPath(_: string): boolean;
    // compoundInstanceMethods
    linkItemAtPathToPathError(toPath: string, error: string): boolean;
    // compoundInstanceMethods
    linkItemAtURLToURLError(toURL: NSURL, error: NSURL): boolean;
    // compoundInstanceMethods
    mountedVolumeURLsIncludingResourceValuesForKeysOptions(includingResourceValuesForKeys?: string[], options?: FileManager.VolumeEnumerationOptions): NSURL[];
    // compoundInstanceMethods
    moveItemAtPathToPathError(toPath: string, error: string): boolean;
    // compoundInstanceMethods
    moveItemAtURLToURLError(toURL: NSURL, error: NSURL): boolean;
    // compoundInstanceMethods
    removeItemAtPathError(error: string): boolean;
    // compoundInstanceMethods
    removeItemAtURLError(error: NSURL): boolean;
    // compoundInstanceMethods
    replaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError(withItemAtURL: NSURL, backupItemName: NSURL, options?: string, resultingItemURL?: FileManager.ItemReplacementOptions, error?: NSURL): boolean;
    // compoundInstanceMethods
    setAttributesOfItemAtPathError(ofItemAtPath: Map<string, any>, error: string): boolean;
    // compoundInstanceMethods
    setUbiquitousItemAtURLDestinationURLError(itemAtURL: boolean, destinationURL: NSURL, error: NSURL): boolean;
    // compoundInstanceMethods
    startDownloadingUbiquitousItemAtURLError(error: NSURL): boolean;
    // compoundInstanceMethods
    stringWithFileSystemRepresentationLength(_: string, length: number): string;
    // compoundInstanceMethods
    subpathsAtPath(_: string): string[];
    // compoundInstanceMethods
    subpathsOfDirectoryAtPathError(error: string): string[];
    // compoundInstanceMethods
    trashItemAtURLResultingItemURLError(resultingItemURL: NSURL, error?: NSURL): boolean;
    // compoundInstanceMethods
    unmountVolumeAtURLWithOptionsCompletionHandler(_: NSURL, options: FileManager.UnmountOptions, completionHandler?: (p1: NSError) => void): void;
  }

  interface FileManagerDelegate extends NSObject {
    // instance method
    fileManagerShouldCopyItemAtPathToPath?(_: FileManager, shouldCopyItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldCopyItemAtURLToURL?(_: FileManager, shouldCopyItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldLinkItemAtPathToPath?(_: FileManager, shouldLinkItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldLinkItemAtURLToURL?(_: FileManager, shouldLinkItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldMoveItemAtPathToPath?(_: FileManager, shouldMoveItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldMoveItemAtURLToURL?(_: FileManager, shouldMoveItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorCopyingItemAtPathToPath?(_: FileManager, shouldProceedAfterError: NSError, copyingItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorCopyingItemAtURLToURL?(_: FileManager, shouldProceedAfterError: NSError, copyingItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorLinkingItemAtPathToPath?(_: FileManager, shouldProceedAfterError: NSError, linkingItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorLinkingItemAtURLToURL?(_: FileManager, shouldProceedAfterError: NSError, linkingItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorMovingItemAtPathToPath?(_: FileManager, shouldProceedAfterError: NSError, movingItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorMovingItemAtURLToURL?(_: FileManager, shouldProceedAfterError: NSError, movingItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorRemovingItemAtPath?(_: FileManager, shouldProceedAfterError: NSError, removingItemAtPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorRemovingItemAtURL?(_: FileManager, shouldProceedAfterError: NSError, removingItemAtURL: NSURL): boolean;
    // instance method
    fileManagerShouldRemoveItemAtPath?(_: FileManager, shouldRemoveItemAtPath: string): boolean;
    // instance method
    fileManagerShouldRemoveItemAtURL?(_: FileManager, shouldRemoveItemAtURL: NSURL): boolean;
  }

  interface NSFilePresenter extends NSObject {
    observedPresentedItemUbiquityAttributes?: NSSet<string>;
    presentedItemOperationQueue: OperationQueue;
    presentedItemURL: NSURL;
    primaryPresentedItemURL?: NSURL;
    // instance method
    accommodatePresentedItemDeletionWithCompletionHandler?(completionHandler?: (p1: NSError) => void): void;
    // instance method
    accommodatePresentedSubitemDeletionWithAtCompletionHandler?(at: NSURL, completionHandler?: (p1: NSError) => void): void;
    // instance method
    presentedItemDidChange?(): void;
    // instance method
    presentedItemDidChangeUbiquityAttributes?(_: NSSet<string>): void;
    // instance method
    presentedItemDidGainVersion?(_: NSFileVersion): void;
    // instance method
    presentedItemDidLoseVersion?(_: NSFileVersion): void;
    // instance method
    presentedItemDidMoveToURL?(to: NSURL): void;
    // instance method
    presentedItemDidResolveConflictVersion?(_: NSFileVersion): void;
    // instance method
    presentedSubitemAtURLDidMoveToURL?(at: NSURL, didMoveTo: NSURL): void;
    // instance method
    presentedSubitemAtURLDidGainVersion?(at: NSURL, didGain: NSFileVersion): void;
    // instance method
    presentedSubitemAtURLDidLoseVersion?(at: NSURL, didLose: NSFileVersion): void;
    // instance method
    presentedSubitemAtURLDidResolveConflictVersion?(at: NSURL, didResolve: NSFileVersion): void;
    // instance method
    presentedSubitemDidAppearAtURL?(at: NSURL): void;
    // instance method
    presentedSubitemDidChangeAtURL?(at: NSURL): void;
    // instance method
    relinquishPresentedItemWithToReader?(toReader?: (p1: () => void) => void): void;
    // instance method
    relinquishPresentedItemWithToWriter?(toWriter?: (p1: () => void) => void): void;
    // instance method
    savePresentedItemChangesWithCompletionHandler?(completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class NSFileProviderService extends NSObject {
    // ownInstanceProperties
    name: string;
    // compoundInstanceMethods
    getFileProviderConnectionWithCompletionHandler(completionHandler?: (p1: NSXPCConnection, p2: NSError) => void): void;
  }

  // interface
  class NSFileSecurity extends NSObject {
  }

  // export function NSFileTypeForHFSTypeCode(hfsFileTypeCode: number): string;

  // interface
  class NSFileVersion extends NSObject {
    // compoundStaticMethods
    static addVersionOfItemAtURLWithContentsOfURLOptionsError(withContentsOfURL: NSURL, options: NSURL, error: NSFileVersion.AddingOptions): NSFileVersion;
    // compoundStaticMethods
    static currentVersionOfItemAtURL(at: NSURL): NSFileVersion;
    // compoundStaticMethods
    static getNonlocalVersionsOfItemWithAtCompletionHandler(at: NSURL, completionHandler?: (p1: NSFileVersion[], p2: NSError) => void): void;
    // compoundStaticMethods
    static otherVersionsOfItemAtURL(at: NSURL): NSFileVersion[];
    // compoundStaticMethods
    static removeOtherVersionsOfItemAtURLError(error: NSURL): boolean;
    // compoundStaticMethods
    static temporaryDirectoryURLForNewVersionOfItemAtURL(at: NSURL): NSURL;
    // compoundStaticMethods
    static unresolvedConflictVersionsOfItemAtURL(at: NSURL): NSFileVersion[];
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    isConflict: boolean;
    // ownInstanceProperties
    isDiscardable: boolean;
    setDiscardable(_: boolean)
    // ownInstanceProperties
    hasLocalContents: boolean;
    // ownInstanceProperties
    hasThumbnail: boolean;
    // ownInstanceProperties
    localizedName: string;
    // ownInstanceProperties
    localizedNameOfSavingComputer: string;
    // ownInstanceProperties
    modificationDate: Date;
    // ownInstanceProperties
    originatorNameComponents: NSPersonNameComponents;
    // ownInstanceProperties
    persistentIdentifier: NSCoding;
    // ownInstanceProperties
    isResolved: boolean;
    setResolved(_: boolean)
    // compoundInstanceMethods
    removeAndReturnError(): boolean;
    // compoundInstanceMethods
    replaceItemAtURLOptionsError(options: NSURL, error: NSFileVersion.ReplacingOptions): NSURL;
  }

  // interface
  class FileWrapper extends NSObject {
    // ownInstanceProperties
    isDirectory: boolean;
    // ownInstanceProperties
    fileAttributes: Map<string, any>;
    setFileAttributes(_: Map<string, any>)
    // ownInstanceProperties
    fileWrappers: Map<string, FileWrapper>;
    // ownInstanceProperties
    filename: string;
    setFilename(_: string)
    // ownInstanceProperties
    icon: NSImage;
    setIcon(_: NSImage)
    // ownInstanceProperties
    preferredFilename: string;
    setPreferredFilename(_: string)
    // ownInstanceProperties
    isRegularFile: boolean;
    // ownInstanceProperties
    regularFileContents: NSData;
    // ownInstanceProperties
    serializedRepresentation: NSData;
    // ownInstanceProperties
    isSymbolicLink: boolean;
    // ownInstanceProperties
    symbolicLinkDestinationURL: NSURL;
    // compoundInstanceMethods
    addFileWrapper(_: FileWrapper): string;
    // compoundInstanceMethods
    addRegularFileWithContentsPreferredFilename(_: NSData, preferredFilename: string): string;
    // compoundInstanceMethods
    static createWithDirectoryWithFileWrappers(directoryWithFileWrappers: Map<string, FileWrapper>): FileWrapper;
    // compoundInstanceMethods
    static createWithRegularFileWithContents(regularFileWithContents: NSData): FileWrapper;
    // compoundInstanceMethods
    static createWithSymbolicLinkWithDestinationURL(symbolicLinkWithDestinationURL: NSURL): FileWrapper;
    // compoundInstanceMethods
    static createWithSerializedRepresentation(serializedRepresentation: NSData): FileWrapper;
    // compoundInstanceMethods
    static createWithUrlOptions(URL: NSURL, options: FileWrapper.ReadingOptions): FileWrapper;
    // compoundInstanceMethods
    keyForFileWrapper(_: FileWrapper): string;
    // compoundInstanceMethods
    matchesContentsOfURL(_: NSURL): boolean;
    // compoundInstanceMethods
    readFromURLOptionsError(options: NSURL, error: FileWrapper.ReadingOptions): boolean;
    // compoundInstanceMethods
    removeFileWrapper(_: FileWrapper): void;
    // compoundInstanceMethods
    writeToURLOptionsOriginalContentsURLError(options: NSURL, originalContentsURL: FileWrapper.WritingOptions, error?: NSURL): boolean;
  }

  // interface
  class Formatter extends NSObject {
    // compoundInstanceMethods
    attributedStringForObjectValueWithDefaultAttributes(_: any, withDefaultAttributes?: Map<string, any>): NSAttributedString;
    // compoundInstanceMethods
    editingStringForObjectValue(_: any): string;
    // compoundInstanceMethods
    getObjectValueForStringErrorDescription(_?: any, forString?: string, errorDescription?: string): boolean;
    // compoundInstanceMethods
    isPartialStringValidNewEditingStringErrorDescription(_: string, newEditingString?: string, errorDescription?: string): boolean;
    // compoundInstanceMethods
    isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(_: string, proposedSelectedRange?: NSRange, originalString?: string, originalSelectedRange?: NSRange, errorDescription?: string): boolean;
    // compoundInstanceMethods
    stringForObjectValue(_?: any): string;
  }

  // export function NSFrameAddress(frame: number): any;

  // export function NSFreeHashTable(table: NSHashTable<any>): void;

  // export function NSFreeMapTable(table: NSMapTable<any, any>): void;

  // export function NSFullUserName(): string;

  // interface
  class NSGetCommand extends NSScriptCommand {
  }

  // export function NSGetSizeAndAlignment(typePtr: string | any, sizep: number, alignp: number): string;

  // export function NSGetUncaughtExceptionHandler(): (p1: NSException) => void;

  // export function NSHFSTypeCodeFromFileType(fileTypeString: string): number;

  // export function NSHFSTypeOfFile(fullFilePath: string): string;

  // interface
  class HTTPCookie extends NSObject {
    // compoundStaticMethods
    static cookiesWithResponseHeaderFieldsForURL(_: Map<string, string>, forURL: NSURL): HTTPCookie[];
    // compoundStaticMethods
    static requestHeaderFieldsWithCookies(_: HTTPCookie[]): Map<string, string>;
    // ownInstanceProperties
    isHTTPOnly: boolean;
    // ownInstanceProperties
    comment: string;
    // ownInstanceProperties
    commentURL: NSURL;
    // ownInstanceProperties
    domain: string;
    // ownInstanceProperties
    expiresDate: Date;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    path: string;
    // ownInstanceProperties
    portList: number[];
    // ownInstanceProperties
    properties: Map<string, any>;
    // ownInstanceProperties
    sameSitePolicy: string;
    // ownInstanceProperties
    isSecure: boolean;
    // ownInstanceProperties
    isSessionOnly: boolean;
    // ownInstanceProperties
    value: string;
    // ownInstanceProperties
    //   version: number;
    // compoundInstanceMethods
    static createWithProperties(properties: Map<string, any>): HTTPCookie;
  }

  // interface
  class HTTPCookieStorage extends NSObject {
    // compoundStaticMethods
    static sharedCookieStorageForGroupContainerIdentifier(_: string): HTTPCookieStorage;
    // ownInstanceProperties
    cookieAcceptPolicy: HTTPCookie.AcceptPolicy;
    setCookieAcceptPolicy(_: HTTPCookie.AcceptPolicy)
    // ownInstanceProperties
    cookies: HTTPCookie[];
    // ownStaticProperties
    static sharedHTTPCookieStorage: HTTPCookieStorage;
    // compoundInstanceMethods
    cookiesForURL(_: NSURL): HTTPCookie[];
    // compoundInstanceMethods
    deleteCookie(_: HTTPCookie): void;
    // compoundInstanceMethods
    getCookiesForTaskWithCompletionHandler(_: URLSessionTask, completionHandler?: (p1: HTTPCookie[]) => void): void;
    // compoundInstanceMethods
    removeCookiesSinceDate(_: Date): void;
    // compoundInstanceMethods
    setCookie(_: HTTPCookie): void;
    // compoundInstanceMethods
    setCookiesForURLMainDocumentURL(_: HTTPCookie[], forURL?: NSURL, mainDocumentURL?: NSURL): void;
    // compoundInstanceMethods
    sortedCookiesUsingDescriptors(_: NSSortDescriptor[]): HTTPCookie[];
    // compoundInstanceMethods
    storeCookiesForTask(_: HTTPCookie[], forTask: URLSessionTask): void;
  }

  // interface
  class HTTPURLResponse extends URLResponse {
    // compoundStaticMethods
    static localizedStringForStatusCode(_: number): string;
    // ownInstanceProperties
    allHeaderFields: Map<any, any>;
    // ownInstanceProperties
    statusCode: number;
    // compoundInstanceMethods
    static createWithUrlStatusCodeHTTPVersionHeaderFields(URL: NSURL, statusCode: number, HTTPVersion?: string, headerFields?: Map<string, string>): HTTPURLResponse;
    // compoundInstanceMethods
    valueForHTTPHeaderField(_: string): string;
  }

  // export function NSHashGet(table: NSHashTable<any>, pointer: any): any;

  // export function NSHashInsert(table: NSHashTable<any>, pointer: any): void;

  // export function NSHashInsertIfAbsent(table: NSHashTable<any>, pointer: any): any;

  // export function NSHashInsertKnownAbsent(table: NSHashTable<any>, pointer: any): void;

  // export function NSHashRemove(table: NSHashTable<any>, pointer: any): void;

  // interface
  class NSHashTable<ObjectType> extends NSObject {
    // compoundStaticMethods
    static weakObjectsHashTable<ObjectType>(): NSHashTable<ObjectType>;
    // ownInstanceProperties
    allObjects: ObjectType[];
    // ownInstanceProperties
    anyObject: ObjectType;
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    pointerFunctions: NSPointerFunctions;
    // ownInstanceProperties
    setRepresentation: NSSet<ObjectType>;
    // compoundInstanceMethods
    addObject(_?: ObjectType): void;
    // compoundInstanceMethods
    containsObject(_?: ObjectType): boolean;
    // compoundInstanceMethods
    intersect(_: NSHashTable<ObjectType>): void;
    // compoundInstanceMethods
    intersects(_: NSHashTable<ObjectType>): boolean;
    // compoundInstanceMethods
    isEqualWithTo(to: NSHashTable<ObjectType>): boolean;
    // compoundInstanceMethods
    isSubsetOf(of: NSHashTable<ObjectType>): boolean;
    // compoundInstanceMethods
    member(_?: ObjectType): ObjectType;
    // compoundInstanceMethods
    minus(_: NSHashTable<ObjectType>): void;
    // compoundInstanceMethods
    objectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    removeAllObjects(): void;
    // compoundInstanceMethods
    removeObject(_?: ObjectType): void;
    // compoundInstanceMethods
    union(_: NSHashTable<ObjectType>): void;
  }

  // export function NSHomeDirectory(): string;

  // export function NSHomeDirectoryForUser(userName: string): string;

  // interface
  class Host extends NSObject {
    // compoundStaticMethods
    static currentHost(): Host;
    // ownInstanceProperties
    address: string;
    // ownInstanceProperties
    addresses: string[];
    // ownInstanceProperties
    localizedName: string;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    names: string[];
    // compoundInstanceMethods
    isEqualToHost(_: Host): boolean;
  }

  // interface
  class ISO8601DateFormatter extends Formatter {
    // compoundStaticMethods
    static stringFromDateTimeZoneFormatOptions(_: Date, timeZone: NSTimeZone, formatOptions: ISO8601DateFormatter.Options): string;
    // ownInstanceProperties
    formatOptions: ISO8601DateFormatter.Options;
    setFormatOptions(_: ISO8601DateFormatter.Options)
    // ownInstanceProperties
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone)
    // compoundInstanceMethods
    dateFromString(_: string): Date;
    // compoundInstanceMethods
    stringFromDate(_: Date): string;
  }

  // export function NSIncrementExtraRefCount(object_: any): void;

  // interface
  class NSIndexPath extends NSObject {
    // ownInstanceProperties
    item: number;
    // ownInstanceProperties
    length: number;
    // ownInstanceProperties
    section: number;
    // compoundInstanceMethods
    compare(_: NSIndexPath): ComparisonResult;
    // compoundInstanceMethods
    getIndexes(_: number): void;
    // compoundInstanceMethods
    getIndexesRange(_: number, range: NSRange): void;
    // compoundInstanceMethods
    indexAtPosition(atPosition: number): number;
    // compoundInstanceMethods
    indexPathByAddingIndex(_: number): NSIndexPath;
    // compoundInstanceMethods
    indexPathByRemovingLastIndex(): NSIndexPath;
    // compoundInstanceMethods
    static createWithIndex(index: number): NSIndexPath;
    // compoundInstanceMethods
    static createWithIndexesLength(indexes?: number, length?: number): NSIndexPath;
  }

  // interface
  class NSIndexSet extends NSObject {
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    firstIndex: number;
    // ownInstanceProperties
    lastIndex: number;
    // compoundInstanceMethods
    containsIndex(_: number): boolean;
    // compoundInstanceMethods
    containsIndexes(_: NSIndexSet): boolean;
    // compoundInstanceMethods
    containsIndexesInRange(in_: NSRange): boolean;
    // compoundInstanceMethods
    countOfIndexesInRange(in_: NSRange): number;
    // compoundInstanceMethods
    enumerateWithInOptionsUsing(in_: NSRange, options: NSEnumerationOptions, using: (p1: number, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerate(_: (p1: number, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateWithOptionsUsing(options: NSEnumerationOptions, using: (p1: number, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateRangesWithInOptionsUsing(in_: NSRange, options: NSEnumerationOptions, using: (p1: NSRange, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateRanges(_: (p1: NSRange, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateRangesWithOptionsUsing(options: NSEnumerationOptions, using: (p1: NSRange, p2: boolean) => void): void;
    // compoundInstanceMethods
    getIndexesMaxCountInIndexRange(_: number, maxCount: number, inIndexRange?: NSRange): number;
    // compoundInstanceMethods
    indexGreaterThanIndex(_: number): number;
    // compoundInstanceMethods
    indexGreaterThanOrEqualToIndex(to: number): number;
    // compoundInstanceMethods
    indexWithInOptionsPassingTest(in_: NSRange, options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): number;
    // compoundInstanceMethods
    indexLessThanIndex(_: number): number;
    // compoundInstanceMethods
    indexLessThanOrEqualToIndex(to: number): number;
    // compoundInstanceMethods
    indexWithPassingTest(passingTest: (p1: number, p2: boolean) => boolean): number;
    // compoundInstanceMethods
    indexWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): number;
    // compoundInstanceMethods
    indexesWithInOptionsPassingTest(in_: NSRange, options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    indexesWithPassingTest(passingTest: (p1: number, p2: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    indexesWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    static createWithIndex(index: number): NSIndexSet;
    // compoundInstanceMethods
    static createWithIndexSet(indexSet: NSIndexSet): NSIndexSet;
    // compoundInstanceMethods
    static createWithIndexesInRange(indexesInRange: NSRange): NSIndexSet;
    // compoundInstanceMethods
    intersectsIndexesInRange(in_: NSRange): boolean;
    // compoundInstanceMethods
    isEqualToIndexSet(to: NSIndexSet): boolean;
  }

  // interface
  class NSIndexSpecifier extends NSScriptObjectSpecifier {
    // ownInstanceProperties
    index: number;
    setIndex(_: number)
    // compoundInstanceMethods
    static createWithContainerClassDescriptionContainerSpecifierKeyIndex(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, index?: number): NSIndexSpecifier;
  }

  // interface
  class InputStream extends Stream {
    // compoundStaticMethods
    static inputStreamWithData(_: NSData): InputStream;
    // compoundStaticMethods
    static inputStreamWithFileAtPath(_: string): InputStream;
    // compoundStaticMethods
    static inputStreamWithURL(_: NSURL): InputStream;
    // ownInstanceProperties
    hasBytesAvailable: boolean;
    // compoundInstanceMethods
    getBufferLength(_?: string, length?: number): boolean;
    // compoundInstanceMethods
    static createWithData(data: NSData): InputStream;
    // compoundInstanceMethods
    static createWithFileAtPath(fileAtPath: string): InputStream;
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): InputStream;
    // compoundInstanceMethods
    readMaxLength(_: string, maxLength: number): number;
  }

  // export function NSInsetRect(aRect: CGRect, dX: number, dY: number): CGRect;

  // export function NSIntegralRect(aRect: CGRect): CGRect;

  // export function NSIntegralRectWithOptions(aRect: CGRect, opts: AlignmentOptions): CGRect;

  // export function NSIntersectionRange(range1: NSRange, range2: NSRange): NSRange;

  // export function NSIntersectionRect(aRect: CGRect, bRect: CGRect): CGRect;

  // export function NSIntersectsRect(aRect: CGRect, bRect: CGRect): boolean;

  // export function NSIsEmptyRect(aRect: CGRect): boolean;

  // export function NSIsFreedObject(anObject: any): boolean;

  // interface
  class NSItemProvider extends NSObject {
    // ownInstanceProperties
    containerFrame: CGRect;
    // ownInstanceProperties
    preferredPresentationSize: CGSize;
    // ownInstanceProperties
    previewImageHandler: (p1: (p1: NSSecureCoding, p2: NSError) => void, p2: typeof NSObject, p3: Map<any, any>) => void;
    setPreviewImageHandler(_: (p1: (p1: NSSecureCoding, p2: NSError) => void, p2: typeof NSObject, p3: Map<any, any>) => void)
    // ownInstanceProperties
    registeredTypeIdentifiers: string[];
    // ownInstanceProperties
    sourceFrame: CGRect;
    // ownInstanceProperties
    suggestedName: string;
    setSuggestedName(_: string)
    // compoundInstanceMethods
    canLoadObjectOfClass(ofClass: typeof NSObject): boolean;
    // compoundInstanceMethods
    hasItemConformingToTypeIdentifier(_: string): boolean;
    // compoundInstanceMethods
    hasRepresentationConformingToTypeIdentifierFileOptions(toTypeIdentifier: string, fileOptions: NSItemProviderFileOptions): boolean;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): NSItemProvider;
    // compoundInstanceMethods
    static createWithItemTypeIdentifier(item?: NSSecureCoding, typeIdentifier?: string): NSItemProvider;
    // compoundInstanceMethods
    static createWithObject(object_: NSItemProviderWriting): NSItemProvider;
    // compoundInstanceMethods
    loadDataRepresentationWithForTypeIdentifierCompletionHandler(forTypeIdentifier: string, completionHandler?: (p1: NSData, p2: NSError) => void): Progress;
    // compoundInstanceMethods
    loadFileRepresentationWithForTypeIdentifierCompletionHandler(forTypeIdentifier: string, completionHandler?: (p1: NSURL, p2: NSError) => void): Progress;
    // compoundInstanceMethods
    loadInPlaceFileRepresentationWithForTypeIdentifierCompletionHandler(forTypeIdentifier: string, completionHandler?: (p1: NSURL, p2: boolean, p3: NSError) => void): Progress;
    // compoundInstanceMethods
    loadItemWithForTypeIdentifierOptionsCompletionHandler(forTypeIdentifier: string, options?: Map<any, any>, completionHandler?: (p1: NSSecureCoding, p2: NSError) => void): void;
    // compoundInstanceMethods
    loadObjectWithOfClassCompletionHandler(ofClass: typeof NSObject, completionHandler?: (p1: NSItemProviderReading, p2: NSError) => void): Progress;
    // compoundInstanceMethods
    loadPreviewImageWithOptionsCompletionHandler(options: Map<any, any>, completionHandler: (p1: NSSecureCoding, p2: NSError) => void): void;
    // compoundInstanceMethods
    registerCloudKitShareContainer(_: CKShare, container: CKContainer): void;
    // compoundInstanceMethods
    registerCloudKitShareWithPreparationHandler(preparationHandler?: (p1: (p1: CKShare, p2: CKContainer, p3: NSError) => void) => void): void;
    // compoundInstanceMethods
    registerDataRepresentationWithForTypeIdentifierVisibilityLoadHandler(forTypeIdentifier: string, visibility: NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: NSData, p2: NSError) => void) => Progress): void;
    // compoundInstanceMethods
    registerFileRepresentationWithForTypeIdentifierFileOptionsVisibilityLoadHandler(forTypeIdentifier: string, fileOptions: NSItemProviderFileOptions, visibility: NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: NSURL, p2: boolean, p3: NSError) => void) => Progress): void;
    // compoundInstanceMethods
    registerItemWithForTypeIdentifierLoadHandler(forTypeIdentifier: string, loadHandler: (p1: (p1: NSSecureCoding, p2: NSError) => void, p2: typeof NSObject, p3: Map<any, any>) => void): void;
    // compoundInstanceMethods
    registerObjectVisibility(_: NSItemProviderWriting, visibility: NSItemProviderRepresentationVisibility): void;
    // compoundInstanceMethods
    registerObjectWithOfClassVisibilityLoadHandler(ofClass: typeof NSObject, visibility: NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: NSItemProviderWriting, p2: NSError) => void) => Progress): void;
    // compoundInstanceMethods
    registeredTypeIdentifiersWithFileOptions(fileOptions: NSItemProviderFileOptions): string[];
  }

  interface NSItemProviderReading extends NSObject {
  }

  interface NSItemProviderWriting extends NSObject {
    writableTypeIdentifiersForItemProvider?: string[];
    // instance method
    itemProviderVisibilityForRepresentationWithTypeIdentifier?(withTypeIdentifier: string): NSItemProviderRepresentationVisibility;
    // instance method
    loadDataWithWithTypeIdentifierForItemProviderCompletionHandler(withTypeIdentifier: string, forItemProviderCompletionHandler?: (p1: NSData, p2: NSError) => void): Progress;
  }

  // interface
  class JSONSerialization extends NSObject {
    // compoundStaticMethods
    static JSONObjectWithDataOptionsError(options: NSData, error: JSONSerialization.ReadingOptions): any;
    // compoundStaticMethods
    static JSONObjectWithStreamOptionsError(options: InputStream, error: JSONSerialization.ReadingOptions): any;
    // compoundStaticMethods
    static dataWithJSONObjectOptionsError(options: any, error: JSONSerialization.WritingOptions): NSData;
    // compoundStaticMethods
    static isValidJSONObject(_: any): boolean;
    // compoundStaticMethods
    static writeJSONObjectToStreamOptionsError(toStream: any, options: OutputStream, error: JSONSerialization.WritingOptions): number;
  }

  // interface
  class NSKeyedArchiver extends NSCoder {
    // compoundStaticMethods
    static archivedDataWithRootObjectRequiringSecureCodingError(requiringSecureCoding: any, error: boolean): NSData;
    // compoundStaticMethods
    static classNameForClass(for_: typeof NSObject): string;
    // compoundStaticMethods
    static setClassNameForClass(_?: string, for_?: typeof NSObject): void;
    // ownInstanceProperties
    delegate: NSKeyedArchiverDelegate;
    setDelegate(_: NSKeyedArchiverDelegate)
    // ownInstanceProperties
    encodedData: NSData;
    // ownInstanceProperties
    outputFormat: PropertyListSerialization.PropertyListFormat;
    setOutputFormat(_: PropertyListSerialization.PropertyListFormat)
    // ownInstanceProperties
    //   requiresSecureCoding: boolean;
    setRequiresSecureCoding(_: boolean)
    // compoundInstanceMethods
    classNameForClass(for_: typeof NSObject): string;
    // compoundInstanceMethods
    finishEncoding(): void;
    // compoundInstanceMethods
    static createWithRequiringSecureCoding(requiringSecureCoding: boolean): NSKeyedArchiver;
    // compoundInstanceMethods
    setClassNameForClass(_?: string, for_?: typeof NSObject): void;
  }

  interface NSKeyedArchiverDelegate extends NSObject {
    // instance method
    archiverWillEncodeObject?(_: NSKeyedArchiver, willEncode: any): any;
    // instance method
    archiverDidEncodeObject?(_: NSKeyedArchiver, didEncode?: any): void;
    // instance method
    archiverWillReplaceObjectWithObject?(_: NSKeyedArchiver, willReplace?: any, with_?: any): void;
    // instance method
    archiverDidFinish?(_: NSKeyedArchiver): void;
    // instance method
    archiverWillFinish?(_: NSKeyedArchiver): void;
  }

  // interface
  class NSKeyedUnarchiver extends NSCoder {
    // compoundStaticMethods
    static classForClassName(forClassName: string): typeof NSObject;
    // compoundStaticMethods
    static setClassForClassName(_?: typeof NSObject, forClassName?: string): void;
    // compoundStaticMethods
    static unarchivedObjectOfClassFromDataError(fromData: typeof NSObject, error: NSData): any;
    // compoundStaticMethods
    static unarchivedObjectOfClassesWithFromDataError(fromData: NSSet<typeof NSObject>, error: NSData): any;
    // ownInstanceProperties
    //   decodingFailurePolicy: NSCoder.DecodingFailurePolicy;
    setDecodingFailurePolicy(_: NSCoder.DecodingFailurePolicy)
    // ownInstanceProperties
    delegate: NSKeyedUnarchiverDelegate;
    setDelegate(_: NSKeyedUnarchiverDelegate)
    // ownInstanceProperties
    //   requiresSecureCoding: boolean;
    setRequiresSecureCoding(_: boolean)
    // compoundInstanceMethods
    classForClassName(forClassName: string): typeof NSObject;
    // compoundInstanceMethods
    finishDecoding(): void;
    // compoundInstanceMethods
    static createWithForReadingFromData(forReadingFromData: NSData): NSKeyedUnarchiver;
    // compoundInstanceMethods
    setClassForClassName(_?: typeof NSObject, forClassName?: string): void;
  }

  interface NSKeyedUnarchiverDelegate extends NSObject {
    // instance method
    unarchiverDidDecodeObject?(_: NSKeyedUnarchiver, didDecode?: any): any;
    // instance method
    unarchiverWillReplaceObjectWithObject?(_: NSKeyedUnarchiver, willReplace: any, with_: any): void;
    // instance method
    unarchiverCannotDecodeObjectOfClassNameOriginalClasses?(_: NSKeyedUnarchiver, cannotDecodeObjectOfClassName: string, originalClasses: string[]): typeof NSObject;
    // instance method
    unarchiverDidFinish?(_: NSKeyedUnarchiver): void;
    // instance method
    unarchiverWillFinish?(_: NSKeyedUnarchiver): void;
  }

  // interface
  class LengthFormatter extends Formatter {
    // ownInstanceProperties
    isForPersonHeightUse: boolean;
    setForPersonHeightUse(_: boolean)
    // ownInstanceProperties
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter)
    // ownInstanceProperties
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle)
    // compoundInstanceMethods
    stringFromMeters(_: number): string;
    // compoundInstanceMethods
    stringFromValueUnit(_: number, unit: LengthFormatter.Unit): string;
    // compoundInstanceMethods
    unitStringFromMetersUsedUnit(_: number, usedUnit?: LengthFormatter.Unit): string;
    // compoundInstanceMethods
    unitStringFromValueUnit(_: number, unit: LengthFormatter.Unit): string;
  }

  // interface
  class NSLinguisticTagger extends NSObject {
    // compoundStaticMethods
    static availableTagSchemesForLanguage(forLanguage: string): string[];
    // compoundStaticMethods
    static availableTagSchemesForUnitLanguage(for_: NSLinguisticTaggerUnit, language: string): string[];
    // compoundStaticMethods
    static dominantLanguageForString(for_: string): string;
    // compoundStaticMethods
    static enumerateTagsForRangeUnitSchemeOptionsOrthographyUsing(for_: string, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, using?: (p1: string, p2: NSRange, p3: boolean) => void): void;
    // compoundStaticMethods
    static tagForStringAtIndexUnitSchemeOrthographyTokenRange(for_: string, at: number, unit: NSLinguisticTaggerUnit, scheme: string, orthography?: NSOrthography, tokenRange?: NSRange): string;
    // compoundStaticMethods
    static tagsForStringRangeUnitSchemeOptionsOrthographyTokenRanges(for_: string, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, tokenRanges?: NSValue[]): string[];
    // ownInstanceProperties
    dominantLanguage: string;
    // ownInstanceProperties
    string: string;
    setString(_: string)
    // ownInstanceProperties
    tagSchemes: string[];
    // compoundInstanceMethods
    enumerateTagsWithInSchemeOptionsUsing(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, using?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
    // compoundInstanceMethods
    enumerateTagsWithInUnitSchemeOptionsUsing(in_: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, using?: (p1: string, p2: NSRange, p3: boolean) => void): void;
    // compoundInstanceMethods
    static createWithTagSchemesOptions(tagSchemes: string[], options: number): NSLinguisticTagger;
    // compoundInstanceMethods
    orthographyAtIndexEffectiveRange(at: number, effectiveRange?: NSRange): NSOrthography;
    // compoundInstanceMethods
    possibleTagsAtIndexSchemeTokenRangeSentenceRangeScores(at: number, scheme: string, tokenRange?: NSRange, sentenceRange?: NSRange, scores?: NSValue[]): string[];
    // compoundInstanceMethods
    sentenceRangeForRange(for_: NSRange): NSRange;
    // compoundInstanceMethods
    setOrthographyRange(_?: NSOrthography, range?: NSRange): void;
    // compoundInstanceMethods
    stringEditedInRangeChangeInLength(in_: NSRange, changeInLength: number): void;
    // compoundInstanceMethods
    tagAtIndexSchemeTokenRangeSentenceRange(at: number, scheme: string, tokenRange?: NSRange, sentenceRange?: NSRange): string;
    // compoundInstanceMethods
    tagAtIndexUnitSchemeTokenRange(at: number, unit: NSLinguisticTaggerUnit, scheme: string, tokenRange?: NSRange): string;
    // compoundInstanceMethods
    tagsInRangeSchemeOptionsTokenRanges(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, tokenRanges?: NSValue[]): string[];
    // compoundInstanceMethods
    tagsInRangeUnitSchemeOptionsTokenRanges(in_: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, tokenRanges?: NSValue[]): string[];
    // compoundInstanceMethods
    tokenRangeAtIndexUnit(at: number, unit: NSLinguisticTaggerUnit): NSRange;
  }

  // interface
  class ListFormatter extends Formatter {
    // compoundStaticMethods
    static localizedStringByJoiningStrings(_: string[]): string;
    // ownInstanceProperties
    itemFormatter: Formatter;
    setItemFormatter(_: Formatter)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // compoundInstanceMethods
    stringFromItems(from: any[]): string;
  }

  // interface
  class NSLocale extends NSObject {
    // compoundStaticMethods
    static canonicalLanguageIdentifierFromString(from: string): string;
    // compoundStaticMethods
    static canonicalLocaleIdentifierFromString(from: string): string;
    // compoundStaticMethods
    static characterDirectionForLanguage(forLanguage: string): NSLocale.LanguageDirection;
    // compoundStaticMethods
    static componentsFromLocaleIdentifier(fromLocaleIdentifier: string): Map<string, string>;
    // compoundStaticMethods
    static lineDirectionForLanguage(forLanguage: string): NSLocale.LanguageDirection;
    // compoundStaticMethods
    static localeIdentifierFromComponents(fromComponents: Map<string, string>): string;
    // compoundStaticMethods
    static localeIdentifierFromWindowsLocaleCode(fromWindowsLocaleCode: number): string;
    // compoundStaticMethods
    static windowsLocaleCodeFromLocaleIdentifier(fromLocaleIdentifier: string): number;
    // ownInstanceProperties
    alternateQuotationBeginDelimiter: string;
    // ownInstanceProperties
    alternateQuotationEndDelimiter: string;
    // ownInstanceProperties
    calendarIdentifier: string;
    // ownInstanceProperties
    collationIdentifier: string;
    // ownInstanceProperties
    collatorIdentifier: string;
    // ownInstanceProperties
    countryCode: string;
    // ownInstanceProperties
    currencyCode: string;
    // ownInstanceProperties
    currencySymbol: string;
    // ownInstanceProperties
    decimalSeparator: string;
    // ownInstanceProperties
    exemplarCharacterSet: NSCharacterSet;
    // ownInstanceProperties
    groupingSeparator: string;
    // ownInstanceProperties
    languageCode: string;
    // ownInstanceProperties
    localeIdentifier: string;
    // ownInstanceProperties
    quotationBeginDelimiter: string;
    // ownInstanceProperties
    quotationEndDelimiter: string;
    // ownInstanceProperties
    scriptCode: string;
    // ownInstanceProperties
    usesMetricSystem: boolean;
    // ownInstanceProperties
    variantCode: string;
    // ownStaticProperties
    static ISOCountryCodes: string[];
    // ownStaticProperties
    static ISOCurrencyCodes: string[];
    // ownStaticProperties
    static ISOLanguageCodes: string[];
    // ownStaticProperties
    static autoupdatingCurrentLocale: NSLocale;
    // ownStaticProperties
    static availableLocaleIdentifiers: string[];
    // ownStaticProperties
    static commonISOCurrencyCodes: string[];
    // ownStaticProperties
    static currentLocale: NSLocale;
    // ownStaticProperties
    static preferredLanguages: string[];
    // ownStaticProperties
    static systemLocale: NSLocale;
    // compoundInstanceMethods
    displayNameForKeyValue(forKey: string, value: any): string;
    // compoundInstanceMethods
    static createWithLocaleIdentifier(localeIdentifier: string): NSLocale;
    // compoundInstanceMethods
    localizedStringForCalendarIdentifier(forCalendarIdentifier: string): string;
    // compoundInstanceMethods
    localizedStringForCollationIdentifier(forCollationIdentifier: string): string;
    // compoundInstanceMethods
    localizedStringForCollatorIdentifier(forCollatorIdentifier: string): string;
    // compoundInstanceMethods
    localizedStringForCountryCode(forCountryCode: string): string;
    // compoundInstanceMethods
    localizedStringForCurrencyCode(forCurrencyCode: string): string;
    // compoundInstanceMethods
    localizedStringForLanguageCode(forLanguageCode: string): string;
    // compoundInstanceMethods
    localizedStringForLocaleIdentifier(forLocaleIdentifier: string): string;
    // compoundInstanceMethods
    localizedStringForScriptCode(forScriptCode: string): string;
    // compoundInstanceMethods
    localizedStringForVariantCode(forVariantCode: string): string;
    // compoundInstanceMethods
    objectForKey(forKey: string): any;
  }

  // interface
  class NSLock extends NSObject {
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // compoundInstanceMethods
    lockBeforeDate(before: Date): boolean;
    // compoundInstanceMethods
    tryLock(): boolean;
  }

  interface NSLocking {
    // instance method
    lock(): void;
    // instance method
    unlock(): void;
  }

  // export function NSLogPageSize(): number;

  // interface
  class NSLogicalTest extends NSScriptWhoseTest {
    // compoundInstanceMethods
    static createWithAndTestWithTests(andTestWithTests: NSSpecifierTest[]): NSLogicalTest;
    // compoundInstanceMethods
    static createWithNotTestWithTest(notTestWithTest: NSScriptWhoseTest): NSLogicalTest;
    // compoundInstanceMethods
    static createWithOrTestWithTests(orTestWithTests: NSSpecifierTest[]): NSLogicalTest;
  }

  // interface
  class NSMachPort extends Port {
    // compoundStaticMethods
    static portWithMachPort(withMachPort: number): Port;
    // compoundStaticMethods
    static portWithMachPortOptions(withMachPort: number, options: NSMachPort.Options): Port;
    // ownInstanceProperties
    machPort: number;
    // compoundInstanceMethods
    //  delegate(): NSMachPortDelegate;
    // compoundInstanceMethods
    static createWithMachPort(machPort: number): NSMachPort;
    // compoundInstanceMethods
    static createWithMachPortOptions(machPort: number, options: NSMachPort.Options): NSMachPort;
    // compoundInstanceMethods
    //  setDelegate(_?: NSMachPortDelegate): void;
  }

  interface NSMachPortDelegate extends PortDelegate {
    // instance method
    handleMachMessage?(_: any): void;
  }

  // export function NSMapGet(table: NSMapTable<any, any>, key: any): any;

  // export function NSMapInsert(table: NSMapTable<any, any>, key: any, value: any): void;

  // export function NSMapInsertIfAbsent(table: NSMapTable<any, any>, key: any, value: any): any;

  // export function NSMapInsertKnownAbsent(table: NSMapTable<any, any>, key: any, value: any): void;

  // export function NSMapMember(table: NSMapTable<any, any>, key: any, originalKey: any, value: any): boolean;

  // export function NSMapRemove(table: NSMapTable<any, any>, key: any): void;

  // interface
  class NSMapTable<KeyType, ObjectType> extends NSObject {
    // compoundStaticMethods
    static strongToStrongObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    // compoundStaticMethods
    static strongToWeakObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    // compoundStaticMethods
    static weakToStrongObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    // compoundStaticMethods
    static weakToWeakObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    keyPointerFunctions: NSPointerFunctions;
    // ownInstanceProperties
    valuePointerFunctions: NSPointerFunctions;
    // compoundInstanceMethods
    dictionaryRepresentation(): Map<KeyType, ObjectType>;
    // compoundInstanceMethods
    keyEnumerator(): NSEnumerator<KeyType>;
    // compoundInstanceMethods
    objectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    objectForKey(forKey?: KeyType): ObjectType;
    // compoundInstanceMethods
    removeAllObjects(): void;
    // compoundInstanceMethods
    removeObjectForKey(forKey?: KeyType): void;
    // compoundInstanceMethods
    setObjectForKey(_?: ObjectType, forKey?: KeyType): void;
  }

  // interface
  class MassFormatter extends Formatter {
    // ownInstanceProperties
    isForPersonMassUse: boolean;
    setForPersonMassUse(_: boolean)
    // ownInstanceProperties
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter)
    // ownInstanceProperties
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle)
    // compoundInstanceMethods
    stringFromKilograms(_: number): string;
    // compoundInstanceMethods
    stringFromValueUnit(_: number, unit: MassFormatter.Unit): string;
    // compoundInstanceMethods
    unitStringFromKilogramsUsedUnit(_: number, usedUnit?: MassFormatter.Unit): string;
    // compoundInstanceMethods
    unitStringFromValueUnit(_: number, unit: MassFormatter.Unit): string;
  }

  // interface
  class NSMeasurement<UnitType> extends NSObject {
    // ownInstanceProperties
    doubleValue: number;
    // ownInstanceProperties
    unit: UnitType;
    // compoundInstanceMethods
    canBeConvertedToUnit(to: Unit): boolean;
    // compoundInstanceMethods
    adding(_: NSMeasurement<UnitType>): NSMeasurement<UnitType>;
    // compoundInstanceMethods
    measurementByConvertingToUnit(to: Unit): NSMeasurement<any>;
    // compoundInstanceMethods
    subtracting(_: NSMeasurement<UnitType>): NSMeasurement<UnitType>;
  }

  // interface
  class MeasurementFormatter extends Formatter {
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter)
    // ownInstanceProperties
    unitOptions: MeasurementFormatter.UnitOptions;
    setUnitOptions(_: MeasurementFormatter.UnitOptions)
    // ownInstanceProperties
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle)
    // compoundInstanceMethods
    stringFromMeasurement(_: NSMeasurement<any>): string;
    // compoundInstanceMethods
    stringFromUnit(_: Unit): string;
  }

  // interface
  class MessagePort extends Port {
  }

  // interface
  class NSMetadataItem extends NSObject {
    // ownInstanceProperties
    attributes: string[];
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): NSMetadataItem;
    // compoundInstanceMethods
    valueForAttribute(forAttribute: string): any;
    // compoundInstanceMethods
    valuesForAttributes(forAttributes: string[]): Map<string, any>;
  }

  // interface
  class NSMetadataQuery extends NSObject {
    // ownInstanceProperties
    delegate: NSMetadataQueryDelegate;
    setDelegate(_: NSMetadataQueryDelegate)
    // ownInstanceProperties
    isGathering: boolean;
    // ownInstanceProperties
    groupedResults: NSMetadataQueryResultGroup[];
    // ownInstanceProperties
    groupingAttributes: string[];
    setGroupingAttributes(_: string[])
    // ownInstanceProperties
    notificationBatchingInterval: number;
    setNotificationBatchingInterval(_: number)
    // ownInstanceProperties
    operationQueue: OperationQueue;
    setOperationQueue(_: OperationQueue)
    // ownInstanceProperties
    predicate: NSPredicate;
    setPredicate(_: NSPredicate)
    // ownInstanceProperties
    resultCount: number;
    // ownInstanceProperties
    results: any[];
    // ownInstanceProperties
    searchItems: any[];
    setSearchItems(_: any[])
    // ownInstanceProperties
    searchScopes: any[];
    setSearchScopes(_: any[])
    // ownInstanceProperties
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[])
    // ownInstanceProperties
    isStarted: boolean;
    // ownInstanceProperties
    isStopped: boolean;
    // ownInstanceProperties
    valueListAttributes: string[];
    setValueListAttributes(_: string[])
    // ownInstanceProperties
    valueLists: Map<string, NSMetadataQueryAttributeValueTuple[]>;
    // compoundInstanceMethods
    disableUpdates(): void;
    // compoundInstanceMethods
    enableUpdates(): void;
    // compoundInstanceMethods
    enumerateResults(_: (p1: any, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    enumerateResultsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: any, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    indexOfResult(ofResult: any): number;
    // compoundInstanceMethods
    resultAtIndex(at: number): any;
    // compoundInstanceMethods
    startQuery(): boolean;
    // compoundInstanceMethods
    stopQuery(): void;
    // compoundInstanceMethods
    valueOfAttributeForResultAtIndex(ofAttribute: string, forResultAt: number): any;
  }

  // interface
  class NSMetadataQueryAttributeValueTuple extends NSObject {
    // ownInstanceProperties
    attribute: string;
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    value: any;
  }

  interface NSMetadataQueryDelegate extends NSObject {
    // instance method
    metadataQueryReplacementObjectForResultObject?(_: NSMetadataQuery, replacementObjectForResultObject: NSMetadataItem): any;
    // instance method
    metadataQueryReplacementValueForAttributeValue?(_: NSMetadataQuery, replacementValueForAttribute: string, value: any): any;
  }

  // interface
  class NSMetadataQueryResultGroup extends NSObject {
    // ownInstanceProperties
    attribute: string;
    // ownInstanceProperties
    resultCount: number;
    // ownInstanceProperties
    results: any[];
    // ownInstanceProperties
    subgroups: NSMetadataQueryResultGroup[];
    // ownInstanceProperties
    value: any;
    // compoundInstanceMethods
    resultAtIndex(at: number): any;
  }

  // interface
  class NSMiddleSpecifier extends NSScriptObjectSpecifier {
  }

  // export function NSMouseInRect(aPoint: CGPoint, aRect: CGRect, flipped: boolean): boolean;

  // interface
  class NSMoveCommand extends NSScriptCommand {
    // ownInstanceProperties
    keySpecifier: NSScriptObjectSpecifier;
    // compoundInstanceMethods
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // interface
  class NSMutableArray<ObjectType> extends NSArray<ObjectType> {
    // compoundStaticMethods
    static arrayWithCapacity<ObjectType>(capacity: number): NSMutableArray<ObjectType>;
    // compoundStaticMethods
    //  static arrayWithObjects<ObjectType>(_: ObjectType): NSMutableArray<ObjectType>;
    // compoundInstanceMethods
    addObject(_: ObjectType): void;
    // compoundInstanceMethods
    addObjectsFromArray(from: ObjectType[]): void;
    // compoundInstanceMethods
    exchangeObjectAtIndexWithObjectAtIndex(at: number, withObjectAt: number): void;
    // compoundInstanceMethods
    filterUsingPredicate(using: NSPredicate): void;
    // compoundInstanceMethods
    insertObjectAtIndex(_: ObjectType, at: number): void;
    // compoundInstanceMethods
    insertObjectsAtIndexes(_: ObjectType[], at: NSIndexSet): void;
    // compoundInstanceMethods
    removeAllObjects(): void;
    // compoundInstanceMethods
    removeLastObject(): void;
    // compoundInstanceMethods
    removeObject(_: ObjectType): void;
    // compoundInstanceMethods
    removeObjectInRange(_: ObjectType, in_: NSRange): void;
    // compoundInstanceMethods
    removeObjectAtIndex(at: number): void;
    // compoundInstanceMethods
    removeObjectIdenticalTo(identicalTo: ObjectType): void;
    // compoundInstanceMethods
    removeObjectIdenticalToInRange(identicalTo: ObjectType, in_: NSRange): void;
    // compoundInstanceMethods
    removeObjectsAtIndexes(at: NSIndexSet): void;
    // compoundInstanceMethods
    removeObjectsInArray(in_: ObjectType[]): void;
    // compoundInstanceMethods
    removeObjectsInRange(in_: NSRange): void;
    // compoundInstanceMethods
    replaceObjectAtIndexWithObject(at: number, with_: ObjectType): void;
    // compoundInstanceMethods
    replaceObjectsAtIndexesWithObjects(at: NSIndexSet, with_: ObjectType[]): void;
    // compoundInstanceMethods
    replaceObjectsInRangeWithObjectsFromArray(in_: NSRange, withObjectsFrom: ObjectType[]): void;
    // compoundInstanceMethods
    replaceObjectsInRangeWithObjectsFromArrayRange(in_: NSRange, withObjectsFrom: ObjectType[], range: NSRange): void;
    // compoundInstanceMethods
    setArray(_: ObjectType[]): void;
    // compoundInstanceMethods
    setObjectAtIndexedSubscript(_: ObjectType, atIndexedSubscript: number): void;
    // compoundInstanceMethods
    sortWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): void;
    // compoundInstanceMethods
    sortUsingDescriptors(using: NSSortDescriptor[]): void;
    // compoundInstanceMethods
    sortContext(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any): void;
    // compoundInstanceMethods
    sortUsingSelector(using: string): void;
    // compoundInstanceMethods
    sortWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): void;
  }

  // interface
  class NSMutableAttributedString extends NSAttributedString {
    // ownInstanceProperties
    mutableString: NSMutableString;
    // compoundInstanceMethods
    addAttributeValueRange(_: string, value: any, range: NSRange): void;
    // compoundInstanceMethods
    addAttributesRange(_: Map<string, any>, range: NSRange): void;
    // compoundInstanceMethods
    appendAttributedString(_: NSAttributedString): void;
    // compoundInstanceMethods
    applyFontTraitsRange(_: NSFontTraitMask, range: NSRange): void;
    // compoundInstanceMethods
    beginEditing(): void;
    // compoundInstanceMethods
    deleteCharactersInRange(in_: NSRange): void;
    // compoundInstanceMethods
    endEditing(): void;
    // compoundInstanceMethods
    fixAttachmentAttributeInRange(in_: NSRange): void;
    // compoundInstanceMethods
    fixAttributesInRange(in_: NSRange): void;
    // compoundInstanceMethods
    fixFontAttributeInRange(in_: NSRange): void;
    // compoundInstanceMethods
    fixParagraphStyleAttributeInRange(in_: NSRange): void;
    // compoundInstanceMethods
    insertAttributedStringAtIndex(_: NSAttributedString, at: number): void;
    // compoundInstanceMethods
    readFromDataOptionsDocumentAttributesError(from: NSData, options: Map<string, any>, documentAttributes?: Map<string, any>): boolean;
    // compoundInstanceMethods
    readFromURLOptionsDocumentAttributesError(from: NSURL, options: Map<string, any>, documentAttributes?: Map<string, any>): boolean;
    // compoundInstanceMethods
    removeAttributeRange(_: string, range: NSRange): void;
    // compoundInstanceMethods
    replaceCharactersInRangeWithAttributedString(in_: NSRange, with_: NSAttributedString): void;
    // compoundInstanceMethods
    replaceCharactersInRangeWithString(in_: NSRange, with_: string): void;
    // compoundInstanceMethods
    setAlignmentRange(_: NSTextAlignment, range: NSRange): void;
    // compoundInstanceMethods
    setAttributedString(_: NSAttributedString): void;
    // compoundInstanceMethods
    setAttributesRange(_?: Map<string, any>, range?: NSRange): void;
    // compoundInstanceMethods
    setBaseWritingDirectionRange(_: NSWritingDirection, range: NSRange): void;
    // compoundInstanceMethods
    subscriptRange(_: NSRange): void;
    // compoundInstanceMethods
    superscriptRange(_: NSRange): void;
    // compoundInstanceMethods
    unscriptRange(_: NSRange): void;
    // compoundInstanceMethods
    updateAttachmentsFromPath(fromPath: string): void;
  }

  // interface
  class NSMutableCharacterSet extends NSCharacterSet {
    // compoundInstanceMethods
    addCharactersInRange(in_: NSRange): void;
    // compoundInstanceMethods
    addCharactersInString(in_: string): void;
    // compoundInstanceMethods
    formIntersectionWithCharacterSet(with_: NSCharacterSet): void;
    // compoundInstanceMethods
    formUnionWithCharacterSet(with_: NSCharacterSet): void;
    // compoundInstanceMethods
    invert(): void;
    // compoundInstanceMethods
    removeCharactersInRange(in_: NSRange): void;
    // compoundInstanceMethods
    removeCharactersInString(in_: string): void;
  }

  interface NSMutableCopying {
  }

  // interface
  class NSMutableData extends NSData {
    // compoundStaticMethods
    static dataWithCapacity(capacity: number): NSMutableData;
    // compoundStaticMethods
    //  static dataWithContentsOfFileOptionsError(options: string, error: NSData.ReadingOptions): NSMutableData;
    // compoundStaticMethods
    //  static dataWithContentsOfURLOptionsError(options: NSURL, error: NSData.ReadingOptions): NSMutableData;
    // compoundStaticMethods
    static dataWithLength(length: number): NSMutableData;
    // ownInstanceProperties
    //   length: number;
    setLength(_: number)
    // ownInstanceProperties
    mutableBytes: any;
    // compoundInstanceMethods
    appendBytesLength(_: any, length: number): void;
    // compoundInstanceMethods
    appendData(_: NSData): void;
    // compoundInstanceMethods
    compressUsingAlgorithmError(error: NSData.CompressionAlgorithm): boolean;
    // compoundInstanceMethods
    decompressUsingAlgorithmError(error: NSData.CompressionAlgorithm): boolean;
    // compoundInstanceMethods
    increaseLengthBy(by: number): void;
    // compoundInstanceMethods
    static createWithCapacity(capacity: number): NSMutableData;
    // compoundInstanceMethods
    static createWithLength(length: number): NSMutableData;
    // compoundInstanceMethods
    replaceBytesInRangeWithBytes(in_: NSRange, withBytes: any): void;
    // compoundInstanceMethods
    replaceBytesInRangeWithBytesLength(in_: NSRange, withBytes?: any, length?: number): void;
    // compoundInstanceMethods
    resetBytesInRange(in_: NSRange): void;
    // compoundInstanceMethods
    setData(_: NSData): void;
  }

  // interface
  class NSMutableDictionary<KeyType, ObjectType> extends NSDictionary<KeyType, ObjectType> {
    // compoundStaticMethods
    static dictionaryWithCapacity<KeyType, ObjectType>(capacity: number): NSMutableDictionary<KeyType, ObjectType>;
    // compoundStaticMethods
    static dictionaryWithSharedKeySet<KeyType, ObjectType>(sharedKeySet: any): NSMutableDictionary<KeyType, ObjectType>;
    // compoundInstanceMethods
    addEntriesFromDictionary(from: Map<KeyType, ObjectType>): void;
    // compoundInstanceMethods
    removeAllObjects(): void;
    // compoundInstanceMethods
    removeObjectForKey(forKey: KeyType): void;
    // compoundInstanceMethods
    removeObjectsForKeys(forKeys: KeyType[]): void;
    // compoundInstanceMethods
    setDictionary(_: Map<KeyType, ObjectType>): void;
    // compoundInstanceMethods
    setObjectForKey(_: ObjectType, forKey: KeyType): void;
    // compoundInstanceMethods
    setObjectForKeyedSubscript(_?: ObjectType, forKeyedSubscript?: KeyType): void;
    // compoundInstanceMethods
    //  setValueForKey(_?: ObjectType, forKey?: string): void;
  }

  // interface
  class NSMutableIndexSet extends NSIndexSet {
    // compoundInstanceMethods
    addIndex(_: number): void;
    // compoundInstanceMethods
    addIndexes(_: NSIndexSet): void;
    // compoundInstanceMethods
    addIndexesInRange(in_: NSRange): void;
    // compoundInstanceMethods
    removeAllIndexes(): void;
    // compoundInstanceMethods
    removeIndex(_: number): void;
    // compoundInstanceMethods
    removeIndexes(_: NSIndexSet): void;
    // compoundInstanceMethods
    removeIndexesInRange(in_: NSRange): void;
    // compoundInstanceMethods
    shiftIndexesStartingAtIndexBy(at: number, by: number): void;
  }

  // interface
  class NSMutableOrderedSet<ObjectType> extends NSOrderedSet<ObjectType> {
    // compoundStaticMethods
    static orderedSetWithCapacity<ObjectType>(capacity: number): NSMutableOrderedSet<ObjectType>;
    // compoundStaticMethods
    //  static orderedSetWithObjects<ObjectType>(_: ObjectType): NSMutableOrderedSet<ObjectType>;
    // compoundInstanceMethods
    addObject(_: ObjectType): void;
    // compoundInstanceMethods
    addObjectsCount(_?: ObjectType, count?: number): void;
    // compoundInstanceMethods
    addObjectsFromArray(from: ObjectType[]): void;
    // compoundInstanceMethods
    exchangeObjectAtIndexWithObjectAtIndex(at: number, withObjectAt: number): void;
    // compoundInstanceMethods
    filterUsingPredicate(using: NSPredicate): void;
    // compoundInstanceMethods
    insertObjectAtIndex(_: ObjectType, at: number): void;
    // compoundInstanceMethods
    insertObjectsAtIndexes(_: ObjectType[], at: NSIndexSet): void;
    // compoundInstanceMethods
    intersect(_: NSOrderedSet<ObjectType>): void;
    // compoundInstanceMethods
    intersectSet(_: NSSet<ObjectType>): void;
    // compoundInstanceMethods
    minus(_: NSOrderedSet<ObjectType>): void;
    // compoundInstanceMethods
    minusSet(_: NSSet<ObjectType>): void;
    // compoundInstanceMethods
    moveObjectsAtIndexesToIndex(at: NSIndexSet, to: number): void;
    // compoundInstanceMethods
    removeAllObjects(): void;
    // compoundInstanceMethods
    removeObject(_: ObjectType): void;
    // compoundInstanceMethods
    removeObjectAtIndex(at: number): void;
    // compoundInstanceMethods
    removeObjectsAtIndexes(at: NSIndexSet): void;
    // compoundInstanceMethods
    removeObjectsInArray(in_: ObjectType[]): void;
    // compoundInstanceMethods
    removeObjectsInRange(in_: NSRange): void;
    // compoundInstanceMethods
    replaceObjectAtIndexWithObject(at: number, with_: ObjectType): void;
    // compoundInstanceMethods
    replaceObjectsAtIndexesWithObjects(at: NSIndexSet, with_: ObjectType[]): void;
    // compoundInstanceMethods
    replaceObjectsInRangeWithObjectsCount(in_: NSRange, with_?: ObjectType, count?: number): void;
    // compoundInstanceMethods
    setObjectAtIndex(_: ObjectType, at: number): void;
    // compoundInstanceMethods
    setObjectAtIndexedSubscript(_: ObjectType, atIndexedSubscript: number): void;
    // compoundInstanceMethods
    sortRangeWithOptionsUsingComparator(_: NSRange, options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): void;
    // compoundInstanceMethods
    sortWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): void;
    // compoundInstanceMethods
    sortUsingDescriptors(using: NSSortDescriptor[]): void;
    // compoundInstanceMethods
    sortWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): void;
    // compoundInstanceMethods
    union(_: NSOrderedSet<ObjectType>): void;
    // compoundInstanceMethods
    unionSet(_: NSSet<ObjectType>): void;
  }

  // interface
  class NSMutableSet<ObjectType> extends NSSet<ObjectType> {
    // compoundStaticMethods
    static setWithCapacity<ObjectType>(capacity: number): NSMutableSet<ObjectType>;
    // compoundStaticMethods
    //  static setWithObjects<ObjectType>(_: ObjectType): NSMutableSet<ObjectType>;
    // compoundInstanceMethods
    addObject(_: ObjectType): void;
    // compoundInstanceMethods
    addObjectsFromArray(from: ObjectType[]): void;
    // compoundInstanceMethods
    filterUsingPredicate(using: NSPredicate): void;
    // compoundInstanceMethods
    intersect(_: NSSet<ObjectType>): void;
    // compoundInstanceMethods
    minus(_: NSSet<ObjectType>): void;
    // compoundInstanceMethods
    removeAllObjects(): void;
    // compoundInstanceMethods
    removeObject(_: ObjectType): void;
    // compoundInstanceMethods
    setSet(_: NSSet<ObjectType>): void;
    // compoundInstanceMethods
    union(_: NSSet<ObjectType>): void;
  }

  // interface
  class NSMutableString extends NSString {
    // compoundStaticMethods
    //  static objectWithItemProviderDataTypeIdentifierError(typeIdentifier: NSData, error: string): NSMutableString;
    // compoundStaticMethods
    static stringWithCapacity(capacity: number): NSMutableString;
    // compoundStaticMethods
    //  static stringWithContentsOfFileEncodingError(encoding: string, error: number): NSMutableString;
    // compoundStaticMethods
    //  static stringWithContentsOfFileUsedEncodingError(usedEncoding: string, error?: number): NSMutableString;
    // compoundStaticMethods
    //  static stringWithContentsOfURLEncodingError(encoding: NSURL, error: number): NSMutableString;
    // compoundStaticMethods
    //  static stringWithContentsOfURLUsedEncodingError(usedEncoding: NSURL, error?: number): NSMutableString;
    // compoundInstanceMethods
    appendString(_: string): void;
    // compoundInstanceMethods
    applyTransformReverseRangeUpdatedRange(_: string, reverse: boolean, range: NSRange, updatedRange?: NSRange): boolean;
    // compoundInstanceMethods
    deleteCharactersInRange(in_: NSRange): void;
    // compoundInstanceMethods
    static createWithCapacity(capacity: number): NSMutableString;
    // compoundInstanceMethods
    insertStringAtIndex(_: string, at: number): void;
    // compoundInstanceMethods
    replaceCharactersInRangeWithString(in_: NSRange, with_: string): void;
    // compoundInstanceMethods
    replaceOccurrencesOfStringWithStringOptionsRange(of: string, with_: string, options: NSString.CompareOptions, range: NSRange): number;
    // compoundInstanceMethods
    setString(_: string): void;
  }

  // interface
  class NSMutableURLRequest extends NSURLRequest {
    // ownInstanceProperties
    //   HTTPBody: NSData;
    setHTTPBody(_: NSData)
    // ownInstanceProperties
    //   HTTPBodyStream: InputStream;
    setHTTPBodyStream(_: InputStream)
    // ownInstanceProperties
    //   HTTPMethod: string;
    setHTTPMethod(_: string)
    // ownInstanceProperties
    //   HTTPShouldHandleCookies: boolean;
    setHTTPShouldHandleCookies(_: boolean)
    // ownInstanceProperties
    //   HTTPShouldUsePipelining: boolean;
    setHTTPShouldUsePipelining(_: boolean)
    // ownInstanceProperties
    //   URL: NSURL;
    setURL(_: NSURL)
    // ownInstanceProperties
    //   allHTTPHeaderFields: Map<string, string>;
    setAllHTTPHeaderFields(_: Map<string, string>)
    // ownInstanceProperties
    //   allowsCellularAccess: boolean;
    setAllowsCellularAccess(_: boolean)
    // ownInstanceProperties
    //   allowsConstrainedNetworkAccess: boolean;
    setAllowsConstrainedNetworkAccess(_: boolean)
    // ownInstanceProperties
    //   allowsExpensiveNetworkAccess: boolean;
    setAllowsExpensiveNetworkAccess(_: boolean)
    // ownInstanceProperties
    //   cachePolicy: NSURLRequest.CachePolicy;
    setCachePolicy(_: NSURLRequest.CachePolicy)
    // ownInstanceProperties
    //   mainDocumentURL: NSURL;
    setMainDocumentURL(_: NSURL)
    // ownInstanceProperties
    //   networkServiceType: NSURLRequest.NetworkServiceType;
    setNetworkServiceType(_: NSURLRequest.NetworkServiceType)
    // ownInstanceProperties
    //   timeoutInterval: number;
    setTimeoutInterval(_: number)
    // compoundInstanceMethods
    addValueForHTTPHeaderField(_: string, forHTTPHeaderField: string): void;
    // compoundInstanceMethods
    setValueForHTTPHeaderField(_?: string, forHTTPHeaderField?: string): void;
  }

  // interface
  class NSNameSpecifier extends NSScriptObjectSpecifier {
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // compoundInstanceMethods
    static createWithContainerClassDescriptionContainerSpecifierKeyName(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, name?: string): NSNameSpecifier;
  }

  // interface
  class NetService extends NSObject {
    // compoundStaticMethods
    static dataFromTXTRecordDictionary(_: Map<string, Data>): NSData;
    // compoundStaticMethods
    static dictionaryFromTXTRecordData(_: NSData): Map<string, Data>;
    // ownInstanceProperties
    addresses: NSData[];
    // ownInstanceProperties
    delegate: NetServiceDelegate;
    setDelegate(_: NetServiceDelegate)
    // ownInstanceProperties
    domain: string;
    // ownInstanceProperties
    hostName: string;
    // ownInstanceProperties
    includesPeerToPeer: boolean;
    setIncludesPeerToPeer(_: boolean)
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    port: number;
    // ownInstanceProperties
    type: string;
    // compoundInstanceMethods
    TXTRecordData(): NSData;
    // compoundInstanceMethods
    getInputStreamOutputStream(_?: InputStream, outputStream?: OutputStream): boolean;
    // compoundInstanceMethods
    static createWithDomainTypeName(domain: string, type: string, name: string): NetService;
    // compoundInstanceMethods
    static createWithDomainTypeNamePort(domain: string, type: string, name: string, port: number): NetService;
    // compoundInstanceMethods
    publish(): void;
    // compoundInstanceMethods
    publishWithOptions(_: NSNetService.Options): void;
    // compoundInstanceMethods
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    resolveWithTimeout(_: number): void;
    // compoundInstanceMethods
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    setTXTRecordData(_?: NSData): boolean;
    // compoundInstanceMethods
    startMonitoring(): void;
    // compoundInstanceMethods
    stop(): void;
    // compoundInstanceMethods
    stopMonitoring(): void;
  }

  // interface
  class NetServiceBrowser extends NSObject {
    // ownInstanceProperties
    delegate: NetServiceBrowserDelegate;
    setDelegate(_: NetServiceBrowserDelegate)
    // ownInstanceProperties
    includesPeerToPeer: boolean;
    setIncludesPeerToPeer(_: boolean)
    // compoundInstanceMethods
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    searchForBrowsableDomains(): void;
    // compoundInstanceMethods
    searchForRegistrationDomains(): void;
    // compoundInstanceMethods
    searchForServicesOfTypeInDomain(_: string, inDomain: string): void;
    // compoundInstanceMethods
    stop(): void;
  }

  interface NetServiceBrowserDelegate extends NSObject {
    // instance method
    netServiceBrowserDidFindDomainMoreComing?(_: NetServiceBrowser, didFindDomain: string, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidFindServiceMoreComing?(_: NetServiceBrowser, didFindService: NetService, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidNotSearch?(_: NetServiceBrowser, didNotSearch: Map<string, number>): void;
    // instance method
    netServiceBrowserDidRemoveDomainMoreComing?(_: NetServiceBrowser, didRemoveDomain: string, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidRemoveServiceMoreComing?(_: NetServiceBrowser, didRemoveService: NetService, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidStopSearch?(_: NetServiceBrowser): void;
    // instance method
    netServiceBrowserWillSearch?(_: NetServiceBrowser): void;
  }

  interface NetServiceDelegate extends NSObject {
    // instance method
    netServiceDidAcceptConnectionWithInputStreamOutputStream?(_: NetService, didAcceptConnectionWithInputStream: InputStream, outputStream: OutputStream): void;
    // instance method
    netServiceDidNotPublish?(_: NetService, didNotPublish: Map<string, number>): void;
    // instance method
    netServiceDidNotResolve?(_: NetService, didNotResolve: Map<string, number>): void;
    // instance method
    netServiceDidUpdateTXTRecordData?(_: NetService, didUpdateTXTRecordData: NSData): void;
    // instance method
    netServiceDidPublish?(_: NetService): void;
    // instance method
    netServiceDidResolveAddress?(_: NetService): void;
    // instance method
    netServiceDidStop?(_: NetService): void;
    // instance method
    netServiceWillPublish?(_: NetService): void;
    // instance method
    netServiceWillResolve?(_: NetService): void;
  }

  // export function NSNextHashEnumeratorItem(enumerator: NSHashEnumerator): any;

  // export function NSNextMapEnumeratorPair(enumerator: NSMapEnumerator, key: any, value: any): boolean;

  // interface
  class NSNotification extends NSObject {
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    object: any;
    // ownInstanceProperties
    userInfo: Map<any, any>;
    // compoundInstanceMethods
    static createWithNameObjectUserInfo(name: string, object_?: any, userInfo?: Map<any, any>): NSNotification;
  }

  // interface
  class NotificationCenter extends NSObject {
    // ownStaticProperties
    static defaultCenter: NotificationCenter;
    // compoundInstanceMethods
    addObserverSelectorNameObject(_: any, selector: string, name?: string, object_?: any): void;
    // compoundInstanceMethods
    addObserverForNameWithObjectQueueUsingBlock(_?: string, object_?: any, queue?: OperationQueue, usingBlock?: (p1: NSNotification) => void): NSObject;
    // compoundInstanceMethods
    postNotification(_: NSNotification): void;
    // compoundInstanceMethods
    postNotificationNameObject(name: string, object_?: any): void;
    // compoundInstanceMethods
    postNotificationNameObjectUserInfo(name: string, object_?: any, userInfo?: Map<any, any>): void;
    // compoundInstanceMethods
    removeObserver(_: any): void;
    // compoundInstanceMethods
    removeObserverNameObject(_: any, name?: string, object_?: any): void;
  }

  // interface
  class NotificationQueue extends NSObject {
    // ownStaticProperties
    static defaultQueue: NotificationQueue;
    // compoundInstanceMethods
    dequeueNotificationsMatchingCoalesceMask(_: NSNotification, coalesceMask: number): void;
    // compoundInstanceMethods
    enqueueNotificationPostingStyle(_: NSNotification, postingStyle: NotificationQueue.PostingStyle): void;
    // compoundInstanceMethods
    enqueueNotificationPostingStyleCoalesceMaskForModes(_: NSNotification, postingStyle: NotificationQueue.PostingStyle, coalesceMask: NotificationQueue.NotificationCoalescing, forModes?: string[]): void;
    // compoundInstanceMethods
    static createWithNotificationCenter(notificationCenter: NotificationCenter): NotificationQueue;
  }

  // interface
  class NSNull extends NSObject {
  }

  // interface
  class NSNumber extends NSValue {
    // compoundStaticMethods
    static numberWithBool(bool: boolean): number;
    // compoundStaticMethods
    static numberWithChar(char: number): number;
    // compoundStaticMethods
    static numberWithDouble(double: number): number;
    // compoundStaticMethods
    static numberWithFloat(float: number): number;
    // compoundStaticMethods
    static numberWithInt(int: number): number;
    // compoundStaticMethods
    static numberWithInteger(integer: number): number;
    // compoundStaticMethods
    static numberWithLong(long: number): number;
    // compoundStaticMethods
    static numberWithLongLong(longLong: number): number;
    // compoundStaticMethods
    static numberWithShort(short: number): number;
    // compoundStaticMethods
    static numberWithUnsignedChar(unsignedChar: number): number;
    // compoundStaticMethods
    static numberWithUnsignedInt(unsignedInt: number): number;
    // compoundStaticMethods
    static numberWithUnsignedInteger(unsignedInteger: number): number;
    // compoundStaticMethods
    static numberWithUnsignedLong(unsignedLong: number): number;
    // compoundStaticMethods
    static numberWithUnsignedLongLong(unsignedLongLong: number): number;
    // compoundStaticMethods
    static numberWithUnsignedShort(unsignedShort: number): number;
    // ownInstanceProperties
    boolValue: boolean;
    // ownInstanceProperties
    charValue: number;
    // ownInstanceProperties
    decimalValue: number;
    // ownInstanceProperties
    doubleValue: number;
    // ownInstanceProperties
    floatValue: number;
    // ownInstanceProperties
    intValue: number;
    // ownInstanceProperties
    integerValue: number;
    // ownInstanceProperties
    longLongValue: number;
    // ownInstanceProperties
    longValue: number;
    // ownInstanceProperties
    shortValue: number;
    // ownInstanceProperties
    stringValue: string;
    // ownInstanceProperties
    unsignedCharValue: number;
    // ownInstanceProperties
    unsignedIntValue: number;
    // ownInstanceProperties
    unsignedIntegerValue: number;
    // ownInstanceProperties
    unsignedLongLongValue: number;
    // ownInstanceProperties
    unsignedLongValue: number;
    // ownInstanceProperties
    unsignedShortValue: number;
    // compoundInstanceMethods
    compare(_: number): ComparisonResult;
    // compoundInstanceMethods
    descriptionWithLocale(withLocale?: any): string;
    // compoundInstanceMethods
    static createWithBool(bool: boolean): NSNumber;
    // compoundInstanceMethods
    static createWithChar(char: number): NSNumber;
    // compoundInstanceMethods
    static createWithDouble(double: number): NSNumber;
    // compoundInstanceMethods
    static createWithFloat(float: number): NSNumber;
    // compoundInstanceMethods
    static createWithInt(int: number): NSNumber;
    // compoundInstanceMethods
    static createWithInteger(integer: number): NSNumber;
    // compoundInstanceMethods
    static createWithLong(long: number): NSNumber;
    // compoundInstanceMethods
    static createWithLongLong(longLong: number): NSNumber;
    // compoundInstanceMethods
    static createWithShort(short: number): NSNumber;
    // compoundInstanceMethods
    static createWithUnsignedChar(unsignedChar: number): NSNumber;
    // compoundInstanceMethods
    static createWithUnsignedInt(unsignedInt: number): NSNumber;
    // compoundInstanceMethods
    static createWithUnsignedInteger(unsignedInteger: number): NSNumber;
    // compoundInstanceMethods
    static createWithUnsignedLong(unsignedLong: number): NSNumber;
    // compoundInstanceMethods
    static createWithUnsignedLongLong(unsignedLongLong: number): NSNumber;
    // compoundInstanceMethods
    static createWithUnsignedShort(unsignedShort: number): NSNumber;
    // compoundInstanceMethods
    isEqualToNumber(to: number): boolean;
  }

  // interface
  class NumberFormatter extends Formatter {
    // compoundStaticMethods
    static defaultFormatterBehavior(): NumberFormatter.Behavior;
    // compoundStaticMethods
    static localizedStringFromNumberNumberStyle(_: number, numberStyle: NumberFormatter.Style): string;
    // compoundStaticMethods
    static setDefaultFormatterBehavior(_: NumberFormatter.Behavior): void;
    // ownInstanceProperties
    allowsFloats: boolean;
    setAllowsFloats(_: boolean)
    // ownInstanceProperties
    alwaysShowsDecimalSeparator: boolean;
    setAlwaysShowsDecimalSeparator(_: boolean)
    // ownInstanceProperties
    attributedStringForNil: NSAttributedString;
    setAttributedStringForNil(_: NSAttributedString)
    // ownInstanceProperties
    attributedStringForNotANumber: NSAttributedString;
    setAttributedStringForNotANumber(_: NSAttributedString)
    // ownInstanceProperties
    attributedStringForZero: NSAttributedString;
    setAttributedStringForZero(_: NSAttributedString)
    // ownInstanceProperties
    currencyCode: string;
    setCurrencyCode(_: string)
    // ownInstanceProperties
    currencyDecimalSeparator: string;
    setCurrencyDecimalSeparator(_: string)
    // ownInstanceProperties
    currencyGroupingSeparator: string;
    setCurrencyGroupingSeparator(_: string)
    // ownInstanceProperties
    currencySymbol: string;
    setCurrencySymbol(_: string)
    // ownInstanceProperties
    decimalSeparator: string;
    setDecimalSeparator(_: string)
    // ownInstanceProperties
    exponentSymbol: string;
    setExponentSymbol(_: string)
    // ownInstanceProperties
    format: string;
    setFormat(_: string)
    // ownInstanceProperties
    formatWidth: number;
    setFormatWidth(_: number)
    // ownInstanceProperties
    formatterBehavior: NumberFormatter.Behavior;
    setFormatterBehavior(_: NumberFormatter.Behavior)
    // ownInstanceProperties
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context)
    // ownInstanceProperties
    generatesDecimalNumbers: boolean;
    setGeneratesDecimalNumbers(_: boolean)
    // ownInstanceProperties
    groupingSeparator: string;
    setGroupingSeparator(_: string)
    // ownInstanceProperties
    groupingSize: number;
    setGroupingSize(_: number)
    // ownInstanceProperties
    hasThousandSeparators: boolean;
    setHasThousandSeparators(_: boolean)
    // ownInstanceProperties
    internationalCurrencySymbol: string;
    setInternationalCurrencySymbol(_: string)
    // ownInstanceProperties
    isLenient: boolean;
    setLenient(_: boolean)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    localizesFormat: boolean;
    setLocalizesFormat(_: boolean)
    // ownInstanceProperties
    maximum: number;
    setMaximum(_: number)
    // ownInstanceProperties
    maximumFractionDigits: number;
    setMaximumFractionDigits(_: number)
    // ownInstanceProperties
    maximumIntegerDigits: number;
    setMaximumIntegerDigits(_: number)
    // ownInstanceProperties
    maximumSignificantDigits: number;
    setMaximumSignificantDigits(_: number)
    // ownInstanceProperties
    minimum: number;
    setMinimum(_: number)
    // ownInstanceProperties
    minimumFractionDigits: number;
    setMinimumFractionDigits(_: number)
    // ownInstanceProperties
    minimumIntegerDigits: number;
    setMinimumIntegerDigits(_: number)
    // ownInstanceProperties
    minimumSignificantDigits: number;
    setMinimumSignificantDigits(_: number)
    // ownInstanceProperties
    minusSign: string;
    setMinusSign(_: string)
    // ownInstanceProperties
    multiplier: number;
    setMultiplier(_: number)
    // ownInstanceProperties
    negativeFormat: string;
    setNegativeFormat(_: string)
    // ownInstanceProperties
    negativeInfinitySymbol: string;
    setNegativeInfinitySymbol(_: string)
    // ownInstanceProperties
    negativePrefix: string;
    setNegativePrefix(_: string)
    // ownInstanceProperties
    negativeSuffix: string;
    setNegativeSuffix(_: string)
    // ownInstanceProperties
    nilSymbol: string;
    setNilSymbol(_: string)
    // ownInstanceProperties
    notANumberSymbol: string;
    setNotANumberSymbol(_: string)
    // ownInstanceProperties
    numberStyle: NumberFormatter.Style;
    setNumberStyle(_: NumberFormatter.Style)
    // ownInstanceProperties
    paddingCharacter: string;
    setPaddingCharacter(_: string)
    // ownInstanceProperties
    paddingPosition: NumberFormatter.PadPosition;
    setPaddingPosition(_: NumberFormatter.PadPosition)
    // ownInstanceProperties
    isPartialStringValidationEnabled: boolean;
    setPartialStringValidationEnabled(_: boolean)
    // ownInstanceProperties
    perMillSymbol: string;
    setPerMillSymbol(_: string)
    // ownInstanceProperties
    percentSymbol: string;
    setPercentSymbol(_: string)
    // ownInstanceProperties
    plusSign: string;
    setPlusSign(_: string)
    // ownInstanceProperties
    positiveFormat: string;
    setPositiveFormat(_: string)
    // ownInstanceProperties
    positiveInfinitySymbol: string;
    setPositiveInfinitySymbol(_: string)
    // ownInstanceProperties
    positivePrefix: string;
    setPositivePrefix(_: string)
    // ownInstanceProperties
    positiveSuffix: string;
    setPositiveSuffix(_: string)
    // ownInstanceProperties
    roundingBehavior: NSDecimalNumberHandler;
    setRoundingBehavior(_: NSDecimalNumberHandler)
    // ownInstanceProperties
    roundingIncrement: number;
    setRoundingIncrement(_: number)
    // ownInstanceProperties
    roundingMode: NumberFormatter.RoundingMode;
    setRoundingMode(_: NumberFormatter.RoundingMode)
    // ownInstanceProperties
    secondaryGroupingSize: number;
    setSecondaryGroupingSize(_: number)
    // ownInstanceProperties
    textAttributesForNegativeInfinity: Map<string, any>;
    setTextAttributesForNegativeInfinity(_: Map<string, any>)
    // ownInstanceProperties
    textAttributesForNegativeValues: Map<string, any>;
    setTextAttributesForNegativeValues(_: Map<string, any>)
    // ownInstanceProperties
    textAttributesForNil: Map<string, any>;
    setTextAttributesForNil(_: Map<string, any>)
    // ownInstanceProperties
    textAttributesForNotANumber: Map<string, any>;
    setTextAttributesForNotANumber(_: Map<string, any>)
    // ownInstanceProperties
    textAttributesForPositiveInfinity: Map<string, any>;
    setTextAttributesForPositiveInfinity(_: Map<string, any>)
    // ownInstanceProperties
    textAttributesForPositiveValues: Map<string, any>;
    setTextAttributesForPositiveValues(_: Map<string, any>)
    // ownInstanceProperties
    textAttributesForZero: Map<string, any>;
    setTextAttributesForZero(_: Map<string, any>)
    // ownInstanceProperties
    thousandSeparator: string;
    setThousandSeparator(_: string)
    // ownInstanceProperties
    usesGroupingSeparator: boolean;
    setUsesGroupingSeparator(_: boolean)
    // ownInstanceProperties
    usesSignificantDigits: boolean;
    setUsesSignificantDigits(_: boolean)
    // ownInstanceProperties
    zeroSymbol: string;
    setZeroSymbol(_: string)
    // compoundInstanceMethods
    getObjectValueForStringRangeError(forString?: any, range?: string, error?: NSRange): boolean;
    // compoundInstanceMethods
    numberFromString(_: string): number;
    // compoundInstanceMethods
    stringFromNumber(_: number): string;
  }

  // export function NSOffsetRect(aRect: CGRect, dX: number, dY: number): CGRect;

  // export function NSOpenStepRootDirectory(): string;

  // interface
  class Operation extends NSObject {
    // ownInstanceProperties
    isAsynchronous: boolean;
    // ownInstanceProperties
    isCancelled: boolean;
    // ownInstanceProperties
    completionBlock: () => void;
    setCompletionBlock(_: () => void)
    // ownInstanceProperties
    isConcurrent: boolean;
    // ownInstanceProperties
    dependencies: Operation[];
    // ownInstanceProperties
    isExecuting: boolean;
    // ownInstanceProperties
    isFinished: boolean;
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService)
    // ownInstanceProperties
    queuePriority: Operation.QueuePriority;
    setQueuePriority(_: Operation.QueuePriority)
    // ownInstanceProperties
    isReady: boolean;
    // compoundInstanceMethods
    addDependency(_: Operation): void;
    // compoundInstanceMethods
    cancel(): void;
    // compoundInstanceMethods
    main(): void;
    // compoundInstanceMethods
    removeDependency(_: Operation): void;
    // compoundInstanceMethods
    start(): void;
    // compoundInstanceMethods
    waitUntilFinished(): void;
  }

  // interface
  class OperationQueue extends NSObject {
    // ownInstanceProperties
    maxConcurrentOperationCount: number;
    setMaxConcurrentOperationCount(_: number)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    operationCount: number;
    // ownInstanceProperties
    operations: Operation[];
    // ownInstanceProperties
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService)
    // ownInstanceProperties
    isSuspended: boolean;
    setSuspended(_: boolean)
    // ownInstanceProperties
    underlyingQueue: NSObject;
    setUnderlyingQueue(_: NSObject)
    // ownStaticProperties
    static currentQueue: OperationQueue;
    // ownStaticProperties
    static mainQueue: OperationQueue;
    // compoundInstanceMethods
    addBarrierBlock(_: () => void): void;
    // compoundInstanceMethods
    addOperation(_: Operation): void;
    // compoundInstanceMethods
    addOperationWithBlock(_: () => void): void;
    // compoundInstanceMethods
    addOperationsWaitUntilFinished(_: Operation[], waitUntilFinished: boolean): void;
    // compoundInstanceMethods
    cancelAllOperations(): void;
    // compoundInstanceMethods
    waitUntilAllOperationsAreFinished(): void;
  }

  // interface
  class NSOrderedCollectionChange<ObjectType> extends NSObject {
    // ownInstanceProperties
    associatedIndex: number;
    // ownInstanceProperties
    changeType: NSCollectionChangeType;
    // ownInstanceProperties
    index: number;
    // ownInstanceProperties
    object: ObjectType;
  }

  // interface
  class NSOrderedCollectionDifference<ObjectType> extends NSObject {
    // ownInstanceProperties
    hasChanges: boolean;
    // ownInstanceProperties
    insertions: NSOrderedCollectionChange<ObjectType>[];
    // ownInstanceProperties
    removals: NSOrderedCollectionChange<ObjectType>[];
    // compoundInstanceMethods
    transformingChanges(_: (p1: NSOrderedCollectionChange<ObjectType>) => NSOrderedCollectionChange<any>): NSOrderedCollectionDifference<any>;
    // compoundInstanceMethods
    inverseDifference(): NSOrderedCollectionDifference<ObjectType>;
  }

  // interface
  class NSOrderedSet<ObjectType> extends NSObject {
    // compoundStaticMethods
    static orderedSetWithObjects<ObjectType>(_: ObjectType): NSOrderedSet<ObjectType>;
    // ownInstanceProperties
    array: ObjectType[];
    // ownInstanceProperties
    count: number;
    // ownInstanceProperties
    firstObject: ObjectType;
    // ownInstanceProperties
    lastObject: ObjectType;
    // ownInstanceProperties
    reversedOrderedSet: NSOrderedSet<ObjectType>;
    // ownInstanceProperties
    set: NSSet<ObjectType>;
    // compoundInstanceMethods
    containsObject(_: ObjectType): boolean;
    // compoundInstanceMethods
    descriptionWithLocale(withLocale?: any): string;
    // compoundInstanceMethods
    descriptionWithLocaleIndent(withLocale?: any, indent?: number): string;
    // compoundInstanceMethods
    enumerateObjectsWithAtOptionsUsing(at: NSIndexSet, options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    enumerateObjects(_: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    enumerateObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    // compoundInstanceMethods
    filteredOrderedSetUsingPredicate(using: NSPredicate): NSOrderedSet<ObjectType>;
    // compoundInstanceMethods
    indexOfObject(of: ObjectType): number;
    // compoundInstanceMethods
    indexOfInSortedRangeOptionsUsingComparator(of: ObjectType, inSortedRange: NSRange, options: NSBinarySearchingOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): number;
    // compoundInstanceMethods
    indexWithOfObjectAtOptionsPassingTest(ofObjectAt: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    // compoundInstanceMethods
    indexWithOfObjectPassingTest(ofObjectPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    // compoundInstanceMethods
    indexOfObjectPassingTest(_: NSEnumerationOptions, ofObjectPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    // compoundInstanceMethods
    indexesWithOfObjectsAtOptionsPassingTest(ofObjectsAt: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    indexesWithOfObjectsPassingTest(ofObjectsPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    indexesWithOptionsOfObjectsPassingTest(options: NSEnumerationOptions, ofObjectsPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    // compoundInstanceMethods
    intersects(_: NSOrderedSet<ObjectType>): boolean;
    // compoundInstanceMethods
    intersectsSet(_: NSSet<ObjectType>): boolean;
    // compoundInstanceMethods
    isEqualWithTo(to: NSOrderedSet<ObjectType>): boolean;
    // compoundInstanceMethods
    isSubsetOf(of: NSOrderedSet<ObjectType>): boolean;
    // compoundInstanceMethods
    isSubsetOf(of: NSSet<ObjectType>): boolean;
    // compoundInstanceMethods
    objectAtIndex(at: number): ObjectType;
    // compoundInstanceMethods
    objectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    objectsAtIndexes(at: NSIndexSet): ObjectType[];
    // compoundInstanceMethods
    reverseObjectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    sortedArrayWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
    // compoundInstanceMethods
    sortedArrayUsingDescriptors(using: NSSortDescriptor[]): ObjectType[];
    // compoundInstanceMethods
    sortedArrayWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
  }

  // interface
  class NSOrthography extends NSObject {
    // compoundStaticMethods
    static defaultOrthographyForLanguage(forLanguage: string): NSOrthography;
    // ownInstanceProperties
    allLanguages: string[];
    // ownInstanceProperties
    allScripts: string[];
    // ownInstanceProperties
    dominantLanguage: string;
    // ownInstanceProperties
    dominantScript: string;
    // ownInstanceProperties
    languageMap: Map<string, string[]>;
    // compoundInstanceMethods
    dominantLanguageForScript(forScript: string): string;
    // compoundInstanceMethods
    static createWithDominantScriptLanguageMap(dominantScript: string, languageMap: Map<string, string[]>): NSOrthography;
    // compoundInstanceMethods
    languagesForScript(forScript: string): string[];
  }

  // interface
  class OutputStream extends Stream {
    // compoundStaticMethods
    static outputStreamToBufferCapacity(_: string, capacity: number): OutputStream;
    // compoundStaticMethods
    static outputStreamToFileAtPathAppend(_: string, append: boolean): OutputStream;
    // compoundStaticMethods
    static outputStreamToMemory(): OutputStream;
    // compoundStaticMethods
    static outputStreamWithURLAppend(_: NSURL, append: boolean): OutputStream;
    // ownInstanceProperties
    hasSpaceAvailable: boolean;
    // compoundInstanceMethods
    static createWithToBufferCapacity(toBuffer: string, capacity: number): OutputStream;
    // compoundInstanceMethods
    static createWithToFileAtPathAppend(toFileAtPath: string, append: boolean): OutputStream;
    // compoundInstanceMethods
    static createWithToMemory(): OutputStream;
    // compoundInstanceMethods
    static createWithUrlAppend(URL: NSURL, append: boolean): OutputStream;
    // compoundInstanceMethods
    writeMaxLength(_: string, maxLength: number): number;
  }

  // export function NSPageSize(): number;

  // interface
  class NSPersonNameComponents extends NSObject {
    // ownInstanceProperties
    familyName: string;
    setFamilyName(_: string)
    // ownInstanceProperties
    givenName: string;
    setGivenName(_: string)
    // ownInstanceProperties
    middleName: string;
    setMiddleName(_: string)
    // ownInstanceProperties
    namePrefix: string;
    setNamePrefix(_: string)
    // ownInstanceProperties
    nameSuffix: string;
    setNameSuffix(_: string)
    // ownInstanceProperties
    nickname: string;
    setNickname(_: string)
    // ownInstanceProperties
    phoneticRepresentation: NSPersonNameComponents;
    setPhoneticRepresentation(_: NSPersonNameComponents)
  }

  // interface
  class PersonNameComponentsFormatter extends Formatter {
    // compoundStaticMethods
    static localizedStringFromPersonNameComponentsStyleOptions(_: NSPersonNameComponents, style: PersonNameComponentsFormatter.Style, options: PersonNameComponentsFormatter.Options): string;
    // ownInstanceProperties
    isPhonetic: boolean;
    setPhonetic(_: boolean)
    // ownInstanceProperties
    style: PersonNameComponentsFormatter.Style;
    setStyle(_: PersonNameComponentsFormatter.Style)
    // compoundInstanceMethods
    annotatedStringFromPersonNameComponents(_: NSPersonNameComponents): NSAttributedString;
    // compoundInstanceMethods
    personNameComponentsFromString(_: string): NSPersonNameComponents;
    // compoundInstanceMethods
    stringFromPersonNameComponents(_: NSPersonNameComponents): string;
  }

  // interface
  class Pipe extends NSObject {
    // compoundStaticMethods
    static pipe(): Pipe;
    // ownInstanceProperties
    fileHandleForReading: FileHandle;
    // ownInstanceProperties
    fileHandleForWriting: FileHandle;
  }

  // export function NSPointFromString(aString: string): CGPoint;

  // export function NSPointInRect(aPoint: CGPoint, aRect: CGRect): boolean;

  // interface
  class NSPointerArray extends NSObject {
    // compoundStaticMethods
    static strongObjectsPointerArray(): NSPointerArray;
    // compoundStaticMethods
    static weakObjectsPointerArray(): NSPointerArray;
    // ownInstanceProperties
    allObjects: any[];
    // ownInstanceProperties
    count: number;
    setCount(_: number)
    // ownInstanceProperties
    pointerFunctions: NSPointerFunctions;
    // compoundInstanceMethods
    addPointer(_?: any): void;
    // compoundInstanceMethods
    compact(): void;
    // compoundInstanceMethods
    static createWithOptions(options: NSPointerFunctions.Options): NSPointerArray;
    // compoundInstanceMethods
    static createWithPointerFunctions(pointerFunctions: NSPointerFunctions): NSPointerArray;
    // compoundInstanceMethods
    insertPointerAtIndex(_?: any, at?: number): void;
    // compoundInstanceMethods
    pointerAtIndex(at: number): any;
    // compoundInstanceMethods
    removePointerAtIndex(at: number): void;
    // compoundInstanceMethods
    replacePointerAtIndexWithPointer(at: number, withPointer?: any): void;
  }

  // interface
  class NSPointerFunctions extends NSObject {
    // ownInstanceProperties
    acquireFunction: (p1: any, p2: (p1: any) => number, p3: boolean) => any;
    setAcquireFunction(_: (p1: any, p2: (p1: any) => number, p3: boolean) => any)
    // ownInstanceProperties
    descriptionFunction: (p1: any) => string;
    setDescriptionFunction(_: (p1: any) => string)
    // ownInstanceProperties
    hashFunction: (p1: any, p2: (p1: any) => number) => number;
    setHashFunction(_: (p1: any, p2: (p1: any) => number) => number)
    // ownInstanceProperties
    isEqualFunction: (p1: any, p2: any, p3: (p1: any) => number) => boolean;
    setIsEqualFunction(_: (p1: any, p2: any, p3: (p1: any) => number) => boolean)
    // ownInstanceProperties
    relinquishFunction: (p1: any, p2: (p1: any) => number) => void;
    setRelinquishFunction(_: (p1: any, p2: (p1: any) => number) => void)
    // ownInstanceProperties
    sizeFunction: (p1: any) => number;
    setSizeFunction(_: (p1: any) => number)
    // compoundInstanceMethods
    static createWithOptions(options: NSPointerFunctions.Options): NSPointerFunctions;
  }

  // interface
  class Port extends NSObject {
    // ownInstanceProperties
    reservedSpaceLength: number;
    // ownInstanceProperties
    isValid: boolean;
    // compoundInstanceMethods
    delegate(): PortDelegate;
    // compoundInstanceMethods
    invalidate(): void;
    // compoundInstanceMethods
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    sendBeforeDateComponentsFromReserved(_: Date, components?: NSMutableArray<any>, from?: Port, reserved?: number): boolean;
    // compoundInstanceMethods
    sendBeforeDateMsgidComponentsFromReserved(_: Date, msgid: number, components?: NSMutableArray<any>, from?: Port, reserved?: number): boolean;
    // compoundInstanceMethods
    setDelegate(_?: PortDelegate): void;
  }

  interface PortDelegate extends NSObject {
    // instance method
    handlePortMessage?(_: PortMessage): void;
  }

  // interface
  class PortMessage extends NSObject {
    // ownInstanceProperties
    components: any[];
    // ownInstanceProperties
    msgid: number;
    setMsgid(_: number)
    // ownInstanceProperties
    receivePort: Port;
    // ownInstanceProperties
    sendPort: Port;
    // compoundInstanceMethods
    static createWithSendPortReceivePortComponents(sendPort?: Port, receivePort?: Port, components?: any[]): PortMessage;
    // compoundInstanceMethods
    sendBeforeDate(_: Date): boolean;
  }

  // interface
  class NSPositionalSpecifier extends NSObject {
    // ownInstanceProperties
    insertionContainer: any;
    // ownInstanceProperties
    insertionIndex: number;
    // ownInstanceProperties
    insertionKey: string;
    // ownInstanceProperties
    insertionReplaces: boolean;
    // ownInstanceProperties
    position: NSPositionalSpecifier.InsertionPosition;
    // compoundInstanceMethods
    evaluate(): void;
    // compoundInstanceMethods
    static createWithPositionObjectSpecifier(position: NSPositionalSpecifier.InsertionPosition, objectSpecifier: NSScriptObjectSpecifier): NSPositionalSpecifier;
    // compoundInstanceMethods
    setInsertionClassDescription(_: NSScriptClassDescription): void;
  }

  // interface
  class NSPredicate extends NSObject {
    // ownInstanceProperties
    predicateFormat: string;
    // compoundInstanceMethods
    allowEvaluation(): void;
    // compoundInstanceMethods
    evaluateWithObject(with_?: any): boolean;
    // compoundInstanceMethods
    evaluateWithObjectSubstitutionVariables(with_?: any, substitutionVariables?: Map<string, any>): boolean;
    // compoundInstanceMethods
    predicateWithSubstitutionVariables(_: Map<string, any>): NSPredicate;
  }

  // interface
  class ProcessInfo extends NSObject {
    // ownInstanceProperties
    activeProcessorCount: number;
    // ownInstanceProperties
    arguments: string[];
    // ownInstanceProperties
    automaticTerminationSupportEnabled: boolean;
    setAutomaticTerminationSupportEnabled(_: boolean)
    // ownInstanceProperties
    environment: Map<string, string>;
    // ownInstanceProperties
    fullUserName: string;
    // ownInstanceProperties
    globallyUniqueString: string;
    // ownInstanceProperties
    hostName: string;
    // ownInstanceProperties
    isMacCatalystApp: boolean;
    // ownInstanceProperties
    operatingSystemVersion: OperatingSystemVersion;
    // ownInstanceProperties
    operatingSystemVersionString: string;
    // ownInstanceProperties
    physicalMemory: number;
    // ownInstanceProperties
    processIdentifier: number;
    // ownInstanceProperties
    processName: string;
    setProcessName(_: string)
    // ownInstanceProperties
    processorCount: number;
    // ownInstanceProperties
    systemUptime: number;
    // ownInstanceProperties
    thermalState: ProcessInfo.ThermalState;
    // ownInstanceProperties
    userName: string;
    // ownStaticProperties
    static processInfo: ProcessInfo;
    // compoundInstanceMethods
    beginActivityWithOptionsReason(_: ProcessInfo.ActivityOptions, reason: string): NSObject;
    // compoundInstanceMethods
    disableAutomaticTermination(_: string): void;
    // compoundInstanceMethods
    disableSuddenTermination(): void;
    // compoundInstanceMethods
    enableAutomaticTermination(_: string): void;
    // compoundInstanceMethods
    enableSuddenTermination(): void;
    // compoundInstanceMethods
    endActivity(_: NSObject): void;
    // compoundInstanceMethods
    isOperatingSystemAtLeastVersion(_: OperatingSystemVersion): boolean;
    // compoundInstanceMethods
    performActivityWithOptionsWithReasonUsingBlock(_: ProcessInfo.ActivityOptions, reason: string, usingBlock: () => void): void;
  }

  // interface
  class Progress extends NSObject {
    // compoundStaticMethods
    static addSubscriberForFileURLWithWithPublishingHandler(_: NSURL, withPublishingHandler: (p1: Progress) => () => void): any;
    // compoundStaticMethods
    static currentProgress(): Progress;
    // compoundStaticMethods
    static discreteProgressWithTotalUnitCount(totalUnitCount: number): Progress;
    // compoundStaticMethods
    static removeSubscriber(_: any): void;
    // ownInstanceProperties
    isCancellable: boolean;
    setCancellable(_: boolean)
    // ownInstanceProperties
    cancellationHandler: () => void;
    setCancellationHandler(_: () => void)
    // ownInstanceProperties
    isCancelled: boolean;
    // ownInstanceProperties
    completedUnitCount: number;
    setCompletedUnitCount(_: number)
    // ownInstanceProperties
    estimatedTimeRemaining: number;
    setEstimatedTimeRemaining(_: number)
    // ownInstanceProperties
    fileCompletedCount: number;
    setFileCompletedCount(_: number)
    // ownInstanceProperties
    fileOperationKind: string;
    setFileOperationKind(_: string)
    // ownInstanceProperties
    fileTotalCount: number;
    setFileTotalCount(_: number)
    // ownInstanceProperties
    fileURL: NSURL;
    setFileURL(_: NSURL)
    // ownInstanceProperties
    isFinished: boolean;
    // ownInstanceProperties
    fractionCompleted: number;
    // ownInstanceProperties
    isIndeterminate: boolean;
    // ownInstanceProperties
    kind: string;
    setKind(_: string)
    // ownInstanceProperties
    localizedAdditionalDescription: string;
    setLocalizedAdditionalDescription(_: string)
    // ownInstanceProperties
    localizedDescription: string;
    setLocalizedDescription(_: string)
    // ownInstanceProperties
    isOld: boolean;
    // ownInstanceProperties
    isPausable: boolean;
    setPausable(_: boolean)
    // ownInstanceProperties
    isPaused: boolean;
    // ownInstanceProperties
    pausingHandler: () => void;
    setPausingHandler(_: () => void)
    // ownInstanceProperties
    resumingHandler: () => void;
    setResumingHandler(_: () => void)
    // ownInstanceProperties
    throughput: number;
    setThroughput(_: number)
    // ownInstanceProperties
    totalUnitCount: number;
    setTotalUnitCount(_: number)
    // ownInstanceProperties
    userInfo: Map<string, any>;
    // compoundInstanceMethods
    addChildWithPendingUnitCount(_: Progress, withPendingUnitCount: number): void;
    // compoundInstanceMethods
    becomeCurrentWithPendingUnitCount(_: number): void;
    // compoundInstanceMethods
    cancel(): void;
    // compoundInstanceMethods
    static createWithParentUserInfo(parent?: Progress, userInfo?: Map<string, any>): Progress;
    // compoundInstanceMethods
    pause(): void;
    // compoundInstanceMethods
    performAsCurrentWithPendingUnitCountWithUsingBlock(_: number, usingBlock: () => void): void;
    // compoundInstanceMethods
    publish(): void;
    // compoundInstanceMethods
    resignCurrent(): void;
    // compoundInstanceMethods
    resume(): void;
    // compoundInstanceMethods
    setUserInfoObjectForKey(_?: any, forKey?: string): void;
    // compoundInstanceMethods
    unpublish(): void;
  }

  interface ProgressReporting extends NSObject {
    progress: Progress;
  }

  // interface
  class PropertyListSerialization extends NSObject {
    // compoundStaticMethods
    static dataWithPropertyListFormatOptionsError(fromPropertyList: any, format: PropertyListSerialization.PropertyListFormat, options: number): NSData;
    // compoundStaticMethods
    static propertyListIsValidForFormat(_: any, isValidForFormat: PropertyListSerialization.PropertyListFormat): boolean;
    // compoundStaticMethods
    static propertyListWithDataOptionsFormatError(from: NSData, options: PropertyListSerialization.MutabilityOptions, format?: PropertyListSerialization.PropertyListFormat): any;
    // compoundStaticMethods
    static propertyListWithStreamOptionsFormatError(options: InputStream, format: PropertyListSerialization.MutabilityOptions, error?: PropertyListSerialization.PropertyListFormat): any;
    // compoundStaticMethods
    static writePropertyListToStreamFormatOptionsError(toStream: any, format: OutputStream, options: PropertyListSerialization.PropertyListFormat, error: number): number;
  }

  // interface
  class NSPropertySpecifier extends NSScriptObjectSpecifier {
  }

  // interface
  class NSProtocolChecker extends NSProxy {
    // compoundStaticMethods
    //  static alloc(): NSProtocolChecker;
    // ownInstanceProperties
    protocol: any /* Protocol */;
    // ownInstanceProperties
    target: NSObject;
    // compoundInstanceMethods
    static createWithTargetProtocol(target: NSObject, protocol: any /* Protocol */): NSProtocolChecker;
  }

  // export function NSProtocolFromString(namestr: string): any /* Protocol */;

  // interface
  class NSProxy {
    // compoundStaticMethods
    static alloc(): NSProxy;
    // compoundStaticMethods
    static class(): typeof NSObject;
    // compoundStaticMethods
    static respondsToSelector(to: string): boolean;
    // compoundInstanceMethods
    dealloc(): void;
    // compoundInstanceMethods
    finalize(): void;
  }

  // interface
  class NSPurgeableData extends NSMutableData {
    // compoundStaticMethods
    //  static dataWithCapacity(capacity: number): NSPurgeableData;
    // compoundStaticMethods
    //  static dataWithContentsOfFileOptionsError(options: string, error: NSData.ReadingOptions): NSPurgeableData;
    // compoundStaticMethods
    //  static dataWithContentsOfURLOptionsError(options: NSURL, error: NSData.ReadingOptions): NSPurgeableData;
    // compoundStaticMethods
    //  static dataWithLength(length: number): NSPurgeableData;
  }

  // interface
  class NSQuitCommand extends NSScriptCommand {
    // ownInstanceProperties
    saveOptions: NSSaveOptions;
  }

  // interface
  class NSRandomSpecifier extends NSScriptObjectSpecifier {
  }

  // export function NSRangeFromString(aString: string): NSRange;

  // interface
  class NSRangeSpecifier extends NSScriptObjectSpecifier {
    // ownInstanceProperties
    endSpecifier: NSScriptObjectSpecifier;
    setEndSpecifier(_: NSScriptObjectSpecifier)
    // ownInstanceProperties
    startSpecifier: NSScriptObjectSpecifier;
    setStartSpecifier(_: NSScriptObjectSpecifier)
    // compoundInstanceMethods
    static createWithContainerClassDescriptionContainerSpecifierKeyStartSpecifierEndSpecifier(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, startSpecifier?: NSScriptObjectSpecifier, endSpecifier?: NSScriptObjectSpecifier): NSRangeSpecifier;
  }

  // export function NSRecordAllocationEvent(eventType: number, object_: any): void;

  // export function NSRectFromString(aString: string): CGRect;

  // interface
  class NSRecursiveLock extends NSObject {
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // compoundInstanceMethods
    lockBeforeDate(before: Date): boolean;
    // compoundInstanceMethods
    tryLock(): boolean;
  }

  // interface
  class NSRegularExpression extends NSObject {
    // compoundStaticMethods
    static escapedPatternForString(for_: string): string;
    // compoundStaticMethods
    static escapedTemplateForString(for_: string): string;
    // compoundStaticMethods
    static regularExpressionWithPatternOptionsError(options: string, error: NSRegularExpression.Options): NSRegularExpression;
    // ownInstanceProperties
    numberOfCaptureGroups: number;
    // ownInstanceProperties
    options: NSRegularExpression.Options;
    // ownInstanceProperties
    pattern: string;
    // compoundInstanceMethods
    enumerateMatchesWithInOptionsRangeUsing(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange, using?: (p1: NSTextCheckingResult, p2: NSRegularExpression.MatchingFlags, p3: boolean) => void): void;
    // compoundInstanceMethods
    firstMatchInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSTextCheckingResult;
    // compoundInstanceMethods
    static createWithPatternOptions(pattern: string, options: NSRegularExpression.Options): NSRegularExpression;
    // compoundInstanceMethods
    matchesInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSTextCheckingResult[];
    // compoundInstanceMethods
    numberOfMatchesInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): number;
    // compoundInstanceMethods
    rangeOfFirstMatchInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSRange;
    // compoundInstanceMethods
    replaceMatchesInStringOptionsRangeWithTemplate(in_: NSMutableString, options: NSRegularExpression.MatchingOptions, range: NSRange, withTemplate: string): number;
    // compoundInstanceMethods
    replacementStringForResultInStringOffsetTemplate(for_: NSTextCheckingResult, in_: string, offset: number, template: string): string;
    // compoundInstanceMethods
    stringByReplacingMatchesInStringOptionsRangeWithTemplate(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange, withTemplate: string): string;
  }

  // interface
  class RelativeDateTimeFormatter extends Formatter {
    // ownInstanceProperties
    calendar: NSCalendar;
    setCalendar(_: NSCalendar)
    // ownInstanceProperties
    dateTimeStyle: RelativeDateTimeFormatter.DateTimeStyle;
    setDateTimeStyle(_: RelativeDateTimeFormatter.DateTimeStyle)
    // ownInstanceProperties
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context)
    // ownInstanceProperties
    locale: NSLocale;
    setLocale(_: NSLocale)
    // ownInstanceProperties
    unitsStyle: RelativeDateTimeFormatter.UnitsStyle;
    setUnitsStyle(_: RelativeDateTimeFormatter.UnitsStyle)
    // compoundInstanceMethods
    localizedStringForDateRelativeToDate(_: Date, relativeToDate: Date): string;
    // compoundInstanceMethods
    localizedStringFromDateComponents(_: NSDateComponents): string;
    // compoundInstanceMethods
    localizedStringFromTimeInterval(_: number): string;
  }

  // interface
  class NSRelativeSpecifier extends NSScriptObjectSpecifier {
    // ownInstanceProperties
    baseSpecifier: NSScriptObjectSpecifier;
    setBaseSpecifier(_: NSScriptObjectSpecifier)
    // ownInstanceProperties
    relativePosition: NSRelativeSpecifier.RelativePosition;
    setRelativePosition(_: NSRelativeSpecifier.RelativePosition)
    // compoundInstanceMethods
    static createWithContainerClassDescriptionContainerSpecifierKeyRelativePositionBaseSpecifier(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, relativePosition?: NSRelativeSpecifier.RelativePosition, baseSpecifier?: NSScriptObjectSpecifier): NSRelativeSpecifier;
  }

  // export function NSResetHashTable(table: NSHashTable<any>): void;

  // export function NSResetMapTable(table: NSMapTable<any, any>): void;

  // export function NSReturnAddress(frame: number): any;

  // export function NSRoundDownToMultipleOfPageSize(bytes: number): number;

  // export function NSRoundUpToMultipleOfPageSize(bytes: number): number;

  // interface
  class RunLoop extends NSObject {
    // ownInstanceProperties
    currentMode: string;
    // ownStaticProperties
    static currentRunLoop: RunLoop;
    // ownStaticProperties
    static mainRunLoop: RunLoop;
    // compoundInstanceMethods
    acceptInputForModeBeforeDate(_: string, beforeDate: Date): void;
    // compoundInstanceMethods
    addPortForMode(_: Port, forMode: string): void;
    // compoundInstanceMethods
    addTimerForMode(_: Timer, forMode: string): void;
    // compoundInstanceMethods
    cancelPerformSelectorTargetArgument(_: string, target: any, argument?: any): void;
    // compoundInstanceMethods
    cancelPerformSelectorsWithTarget(_: any): void;
    // compoundInstanceMethods
    getCFRunLoop(): any;
    // compoundInstanceMethods
    limitDateForMode(_: string): Date;
    // compoundInstanceMethods
    performBlock(_: () => void): void;
    // compoundInstanceMethods
    performInModesWithBlock(_: string[], block: () => void): void;
    // compoundInstanceMethods
    performSelectorTargetArgumentOrderModes(_: string, target: any, argument?: any, order?: number, modes?: string[]): void;
    // compoundInstanceMethods
    removePortForMode(_: Port, forMode: string): void;
    // compoundInstanceMethods
    run(): void;
    // compoundInstanceMethods
    runModeBeforeDate(mode: string, before: Date): boolean;
    // compoundInstanceMethods
    runUntilDate(_: Date): void;
  }

  // interface
  class Scanner extends NSObject {
    // compoundStaticMethods
    static localizedScannerWithString(_: string): any;
    // ownInstanceProperties
    isAtEnd: boolean;
    // ownInstanceProperties
    caseSensitive: boolean;
    setCaseSensitive(_: boolean)
    // ownInstanceProperties
    charactersToBeSkipped: NSCharacterSet;
    setCharactersToBeSkipped(_: NSCharacterSet)
    // ownInstanceProperties
    locale: any;
    setLocale(_: any)
    // ownInstanceProperties
    string: string;
    // compoundInstanceMethods
    static createWithString(string: string): Scanner;
    // compoundInstanceMethods
    scanHexDouble(_?: number): boolean;
    // compoundInstanceMethods
    scanHexFloat(_?: number): boolean;
    // compoundInstanceMethods
    scanHexLongLong(_?: number): boolean;
    // compoundInstanceMethods
    scanInt(_?: number): boolean;
    // compoundInstanceMethods
    scanInteger(_?: number): boolean;
    // compoundInstanceMethods
    scanLongLong(_?: number): boolean;
    // compoundInstanceMethods
    scanUnsignedLongLong(_?: number): boolean;
  }

  // interface
  class NSScriptClassDescription extends NSClassDescription {
    // ownInstanceProperties
    appleEventCode: number;
    // ownInstanceProperties
    defaultSubcontainerAttributeKey: string;
    // ownInstanceProperties
    implementationClassName: string;
    // ownInstanceProperties
    suiteName: string;
    // ownInstanceProperties
    superclassDescription: NSScriptClassDescription;
    // compoundInstanceMethods
    appleEventCodeForKey(forKey: string): number;
    // compoundInstanceMethods
    classDescriptionForKey(_: string): NSScriptClassDescription;
    // compoundInstanceMethods
    hasOrderedToManyRelationshipForKey(forKey: string): boolean;
    // compoundInstanceMethods
    hasPropertyForKey(forKey: string): boolean;
    // compoundInstanceMethods
    hasReadablePropertyForKey(forKey: string): boolean;
    // compoundInstanceMethods
    hasWritablePropertyForKey(forKey: string): boolean;
    // compoundInstanceMethods
    static createWithSuiteNameClassNameDictionary(suiteName: string, className: string, dictionary?: Map<any, any>): NSScriptClassDescription;
    // compoundInstanceMethods
    isLocationRequiredToCreateForKey(forKey: string): boolean;
    // compoundInstanceMethods
    keyWithAppleEventCode(withAppleEventCode: number): string;
    // compoundInstanceMethods
    matchesAppleEventCode(_: number): boolean;
    // compoundInstanceMethods
    selectorForCommand(forCommand: NSScriptCommandDescription): string;
    // compoundInstanceMethods
    supportsCommand(_: NSScriptCommandDescription): boolean;
    // compoundInstanceMethods
    typeForKey(forKey: string): string;
  }

  // interface
  class NSScriptCoercionHandler extends NSObject {
    // compoundStaticMethods
    static sharedCoercionHandler(): NSScriptCoercionHandler;
    // compoundInstanceMethods
    coerceValueToClass(_: any, to: typeof NSObject): any;
    // compoundInstanceMethods
    registerCoercerSelectorToConvertFromClassToClass(_: any, selector: string, toConvertFrom: typeof NSObject, to: typeof NSObject): void;
  }

  // interface
  class NSScriptCommand extends NSObject {
    // compoundStaticMethods
    static currentCommand(): NSScriptCommand;
    // ownInstanceProperties
    appleEvent: NSAppleEventDescriptor;
    // ownInstanceProperties
    arguments: Map<string, any>;
    setArguments(_: Map<string, any>)
    // ownInstanceProperties
    commandDescription: NSScriptCommandDescription;
    // ownInstanceProperties
    directParameter: any;
    setDirectParameter(_: any)
    // ownInstanceProperties
    evaluatedArguments: Map<string, any>;
    // ownInstanceProperties
    evaluatedReceivers: any;
    // ownInstanceProperties
    receiversSpecifier: NSScriptObjectSpecifier;
    setReceiversSpecifier(_: NSScriptObjectSpecifier)
    // ownInstanceProperties
    scriptErrorExpectedTypeDescriptor: NSAppleEventDescriptor;
    setScriptErrorExpectedTypeDescriptor(_: NSAppleEventDescriptor)
    // ownInstanceProperties
    scriptErrorNumber: number;
    setScriptErrorNumber(_: number)
    // ownInstanceProperties
    scriptErrorOffendingObjectDescriptor: NSAppleEventDescriptor;
    setScriptErrorOffendingObjectDescriptor(_: NSAppleEventDescriptor)
    // ownInstanceProperties
    scriptErrorString: string;
    setScriptErrorString(_: string)
    // ownInstanceProperties
    isWellFormed: boolean;
    // compoundInstanceMethods
    executeCommand(): any;
    // compoundInstanceMethods
    static createWithCommandDescription(commandDescription: NSScriptCommandDescription): NSScriptCommand;
    // compoundInstanceMethods
    performDefaultImplementation(): any;
    // compoundInstanceMethods
    resumeExecutionWithResult(withResult?: any): void;
    // compoundInstanceMethods
    suspendExecution(): void;
  }

  // interface
  class NSScriptCommandDescription extends NSObject {
    // ownInstanceProperties
    appleEventClassCode: number;
    // ownInstanceProperties
    appleEventCode: number;
    // ownInstanceProperties
    appleEventCodeForReturnType: number;
    // ownInstanceProperties
    argumentNames: string[];
    // ownInstanceProperties
    commandClassName: string;
    // ownInstanceProperties
    commandName: string;
    // ownInstanceProperties
    returnType: string;
    // ownInstanceProperties
    suiteName: string;
    // compoundInstanceMethods
    appleEventCodeForArgumentWithName(withName: string): number;
    // compoundInstanceMethods
    createCommandInstance(): NSScriptCommand;
    // compoundInstanceMethods
    createCommandInstanceWithZone(with_?: any): NSScriptCommand;
    // compoundInstanceMethods
    static createWithSuiteNameCommandNameDictionary(suiteName: string, commandName: string, dictionary?: Map<any, any>): NSScriptCommandDescription;
    // compoundInstanceMethods
    isOptionalArgumentWithName(withName: string): boolean;
    // compoundInstanceMethods
    typeForArgumentWithName(withName: string): string;
  }

  // interface
  class NSScriptExecutionContext extends NSObject {
    // compoundStaticMethods
    static sharedScriptExecutionContext(): NSScriptExecutionContext;
    // ownInstanceProperties
    objectBeingTested: any;
    setObjectBeingTested(_: any)
    // ownInstanceProperties
    rangeContainerObject: any;
    setRangeContainerObject(_: any)
    // ownInstanceProperties
    topLevelObject: any;
    setTopLevelObject(_: any)
  }

  // interface
  class NSScriptObjectSpecifier extends NSObject {
    // compoundStaticMethods
    static objectSpecifierWithDescriptor(descriptor: NSAppleEventDescriptor): NSScriptObjectSpecifier;
    // ownInstanceProperties
    childSpecifier: NSScriptObjectSpecifier;
    setChildSpecifier(_: NSScriptObjectSpecifier)
    // ownInstanceProperties
    containerClassDescription: NSScriptClassDescription;
    setContainerClassDescription(_: NSScriptClassDescription)
    // ownInstanceProperties
    containerIsObjectBeingTested: boolean;
    setContainerIsObjectBeingTested(_: boolean)
    // ownInstanceProperties
    containerIsRangeContainerObject: boolean;
    setContainerIsRangeContainerObject(_: boolean)
    // ownInstanceProperties
    containerSpecifier: NSScriptObjectSpecifier;
    setContainerSpecifier(_: NSScriptObjectSpecifier)
    // ownInstanceProperties
    descriptor: NSAppleEventDescriptor;
    // ownInstanceProperties
    evaluationErrorNumber: number;
    setEvaluationErrorNumber(_: number)
    // ownInstanceProperties
    evaluationErrorSpecifier: NSScriptObjectSpecifier;
    // ownInstanceProperties
    key: string;
    setKey(_: string)
    // ownInstanceProperties
    keyClassDescription: NSScriptClassDescription;
    // ownInstanceProperties
    objectsByEvaluatingSpecifier: any;
    // compoundInstanceMethods
    indicesOfObjectsByEvaluatingWithContainerCount(withContainer: any, count: number): number;
    // compoundInstanceMethods
    static createWithContainerClassDescriptionContainerSpecifierKey(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string): NSScriptObjectSpecifier;
    // compoundInstanceMethods
    static createWithContainerSpecifierKey(containerSpecifier: NSScriptObjectSpecifier, key: string): NSScriptObjectSpecifier;
    // compoundInstanceMethods
    objectsByEvaluatingWithContainers(withContainers: any): any;
  }

  // interface
  class NSScriptSuiteRegistry extends NSObject {
    // compoundStaticMethods
    static setSharedScriptSuiteRegistry(_: NSScriptSuiteRegistry): void;
    // compoundStaticMethods
    static sharedScriptSuiteRegistry(): NSScriptSuiteRegistry;
    // ownInstanceProperties
    suiteNames: string[];
    // compoundInstanceMethods
    aeteResource(_: string): NSData;
    // compoundInstanceMethods
    appleEventCodeForSuite(forSuite: string): number;
    // compoundInstanceMethods
    bundleForSuite(forSuite: string): Bundle;
    // compoundInstanceMethods
    classDescriptionWithAppleEventCode(withAppleEventCode: number): NSScriptClassDescription;
    // compoundInstanceMethods
    classDescriptionsInSuite(inSuite: string): Map<string, NSScriptClassDescription>;
    // compoundInstanceMethods
    commandDescriptionWithAppleEventClassAndAppleEventCode(withAppleEventClass: number, andAppleEventCode: number): NSScriptCommandDescription;
    // compoundInstanceMethods
    commandDescriptionsInSuite(inSuite: string): Map<string, NSScriptCommandDescription>;
    // compoundInstanceMethods
    loadSuiteWithDictionaryFromBundle(with_: Map<any, any>, from: Bundle): void;
    // compoundInstanceMethods
    loadSuitesFromBundle(from: Bundle): void;
    // compoundInstanceMethods
    registerClassDescription(_: NSScriptClassDescription): void;
    // compoundInstanceMethods
    registerCommandDescription(_: NSScriptCommandDescription): void;
    // compoundInstanceMethods
    suiteForAppleEventCode(forAppleEventCode: number): string;
  }

  // interface
  class NSScriptWhoseTest extends NSObject {
    // compoundInstanceMethods
    isTrue(): boolean;
  }

  // export function NSSearchPathForDirectoriesInDomains(directory: FileManager.SearchPathDirectory, domainMask: FileManager.SearchPathDomainMask, expandTilde: boolean): string[];

  interface NSSecureCoding extends NSCoding {
  }

  // interface
  class NSSecureUnarchiveFromDataTransformer extends ValueTransformer {
    // ownStaticProperties
    static allowedTopLevelClasses: typeof NSObject[];
  }

  // export function NSSelectorFromString(aSelectorName: string): string;

  // interface
  class NSSet<ObjectType> extends NSObject {
    // compoundStaticMethods
    static setWithObjects<ObjectType>(_: ObjectType): NSSet<ObjectType>;
    // ownInstanceProperties
    allObjects: ObjectType[];
    // ownInstanceProperties
    count: number;
    // compoundInstanceMethods
    anyObject(): ObjectType;
    // compoundInstanceMethods
    containsObject(_: ObjectType): boolean;
    // compoundInstanceMethods
    descriptionWithLocale(withLocale?: any): string;
    // compoundInstanceMethods
    enumerateIndexPathsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: NSIndexPath, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateObjects(_: (p1: ObjectType, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: ObjectType, p2: boolean) => void): void;
    // compoundInstanceMethods
    filteredSetUsingPredicate(using: NSPredicate): NSSet<ObjectType>;
    // compoundInstanceMethods
    intersects(_: NSSet<ObjectType>): boolean;
    // compoundInstanceMethods
    isEqualWithTo(to: NSSet<ObjectType>): boolean;
    // compoundInstanceMethods
    isSubsetOf(of: NSSet<ObjectType>): boolean;
    // compoundInstanceMethods
    member(_: ObjectType): ObjectType;
    // compoundInstanceMethods
    objectEnumerator(): NSEnumerator<ObjectType>;
    // compoundInstanceMethods
    objectsWithPassingTest(passingTest: (p1: ObjectType, p2: boolean) => boolean): NSSet<ObjectType>;
    // compoundInstanceMethods
    objectsWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: boolean) => boolean): NSSet<ObjectType>;
    // compoundInstanceMethods
    setByAddingObject(_: ObjectType): NSSet<ObjectType>;
    // compoundInstanceMethods
    setByAddingObjectsFromArray(from: ObjectType[]): NSSet<ObjectType>;
    // compoundInstanceMethods
    addingObjectsWithFrom(from: NSSet<ObjectType>): NSSet<ObjectType>;
    // compoundInstanceMethods
    sortedArrayUsingDescriptors(using: NSSortDescriptor[]): ObjectType[];
  }

  // interface
  class NSSetCommand extends NSScriptCommand {
    // ownInstanceProperties
    keySpecifier: NSScriptObjectSpecifier;
    // compoundInstanceMethods
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // export function NSSetUncaughtExceptionHandler(p1: (p1: NSException) => void): void;

  // export function NSShouldRetainWithZone(anObject: any, requestedZone: any): boolean;

  // export function NSSizeFromString(aString: string): CGSize;

  // interface
  class SocketPort extends Port {
    // ownInstanceProperties
    address: NSData;
    // ownInstanceProperties
    protocol: number;
    // ownInstanceProperties
    protocolFamily: number;
    // ownInstanceProperties
    socket: number;
    // ownInstanceProperties
    socketType: number;
    // compoundInstanceMethods
    static createWithRemoteWithProtocolFamilySocketTypeProtocolAddress(remoteWithProtocolFamily: number, socketType: number, protocol: number, address: NSData): SocketPort;
    // compoundInstanceMethods
    static createWithRemoteWithTCPPortHost(remoteWithTCPPort: number, host?: string): SocketPort;
    // compoundInstanceMethods
    static createWithProtocolFamilySocketTypeProtocolAddress(protocolFamily: number, socketType: number, protocol: number, address: NSData): SocketPort;
    // compoundInstanceMethods
    static createWithProtocolFamilySocketTypeProtocolSocket(protocolFamily: number, socketType: number, protocol: number, socket: number): SocketPort;
    // compoundInstanceMethods
    static createWithTCPPort(TCPPort: number): SocketPort;
  }

  // interface
  class NSSortDescriptor extends NSObject {
    // ownInstanceProperties
    ascending: boolean;
    // ownInstanceProperties
    comparator: (p1: any, p2: any) => ComparisonResult;
    // ownInstanceProperties
    key: string;
    // ownInstanceProperties
    reversedSortDescriptor: any;
    // ownInstanceProperties
    selector: string;
    // compoundInstanceMethods
    allowEvaluation(): void;
    // compoundInstanceMethods
    compareObjectToObject(_: any, to: any): ComparisonResult;
    // compoundInstanceMethods
    static createWithKeyAscending(key?: string, ascending?: boolean): NSSortDescriptor;
    // compoundInstanceMethods
    static createWithKeyAscendingComparator(key?: string, ascending?: boolean, comparator?: (p1: any, p2: any) => ComparisonResult): NSSortDescriptor;
    // compoundInstanceMethods
    static createWithKeyAscendingSelector(key?: string, ascending?: boolean, selector?: string): NSSortDescriptor;
  }

  // interface
  class NSSpecifierTest extends NSScriptWhoseTest {
    // compoundInstanceMethods
    static createWithObjectSpecifierComparisonOperatorTestObject(objectSpecifier?: NSScriptObjectSpecifier, comparisonOperator?: NSSpecifierTest.TestComparisonOperation, testObject?: any): NSSpecifierTest;
  }

  // interface
  class NSSpellServer extends NSObject {
    // ownInstanceProperties
    delegate: NSSpellServerDelegate;
    setDelegate(_: NSSpellServerDelegate)
    // compoundInstanceMethods
    isWordInUserDictionariesCaseSensitive(inUserDictionaries: string, caseSensitive: boolean): boolean;
    // compoundInstanceMethods
    registerLanguageByVendor(_?: string, byVendor?: string): boolean;
    // compoundInstanceMethods
    run(): void;
  }

  interface NSSpellServerDelegate extends NSObject {
    // instance method
    spellServerFindMisspelledWordInStringLanguageWordCountCountOnly?(_: NSSpellServer, findMisspelledWordIn: string, language: string, wordCount: number, countOnly: boolean): NSRange;
    // instance method
    spellServerSuggestCompletionsForPartialWordRangeInStringLanguage?(_: NSSpellServer, suggestCompletionsForPartialWordRange: NSRange, in_: string, language: string): string[];
    // instance method
    spellServerCheckGrammarInStringLanguageDetails?(_: NSSpellServer, checkGrammarIn: string, language?: string, details?: Map<string, any>[]): NSRange;
    // instance method
    spellServerCheckStringOffsetTypesOptionsOrthographyWordCount?(_: NSSpellServer, check: string, offset: number, types: number, options?: Map<string, any>, orthography?: NSOrthography, wordCount?: number): NSTextCheckingResult[];
    // instance method
    spellServerDidForgetWordInLanguage?(_: NSSpellServer, didForgetWord: string, inLanguage: string): void;
    // instance method
    spellServerDidLearnWordInLanguage?(_: NSSpellServer, didLearnWord: string, inLanguage: string): void;
    // instance method
    spellServerRecordResponseToCorrectionForWordLanguage?(_: NSSpellServer, recordResponse: number, toCorrection: string, forWord: string, language: string): void;
    // instance method
    spellServerSuggestGuessesForWordInLanguage?(_: NSSpellServer, suggestGuessesForWord: string, inLanguage: string): string[];
  }

  // interface
  class Stream extends NSObject {
    // compoundStaticMethods
    static getBoundStreamsWithBufferSizeInputStreamOutputStream(_: number, inputStream?: InputStream, outputStream?: OutputStream): void;
    // compoundStaticMethods
    static getStreamsToHostWithNamePortInputStreamOutputStream(_: string, port: number, inputStream?: InputStream, outputStream?: OutputStream): void;
    // ownInstanceProperties
    delegate: StreamDelegate;
    setDelegate(_: StreamDelegate)
    // ownInstanceProperties
    streamError: NSError;
    // ownInstanceProperties
    streamStatus: Stream.Status;
    // compoundInstanceMethods
    close(): void;
    // compoundInstanceMethods
    open(): void;
    // compoundInstanceMethods
    propertyForKey(_: string): any;
    // compoundInstanceMethods
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    setPropertyForKey(_?: any, forKey?: string): boolean;
  }

  interface StreamDelegate extends NSObject {
    // instance method
    streamHandleEvent?(_: Stream, handleEvent: Stream.Event): void;
  }

  // interface
  class NSString extends NSObject {
    // compoundStaticMethods
    static localizedNameOfStringEncoding(of: number): string;
    // compoundStaticMethods
    static pathWithComponents(withComponents: string[]): string;
    // compoundStaticMethods
    static stringEncodingForDataEncodingOptionsConvertedStringUsedLossyConversion(for_: NSData, encodingOptions?: Map<string, any>, convertedString?: string, usedLossyConversion?: boolean): number;
    // compoundStaticMethods
    static stringWithContentsOfFileEncodingError(encoding: string, error: number): NSString;
    // compoundStaticMethods
    static stringWithContentsOfFileUsedEncodingError(usedEncoding: string, error?: number): NSString;
    // compoundStaticMethods
    static stringWithContentsOfURLEncodingError(encoding: NSURL, error: number): NSString;
    // compoundStaticMethods
    static stringWithContentsOfURLUsedEncodingError(usedEncoding: NSURL, error?: number): NSString;
    // ownInstanceProperties
    UTF8String: string;
    // ownInstanceProperties
    isAbsolutePath: boolean;
    // ownInstanceProperties
    boolValue: boolean;
    // ownInstanceProperties
    capitalizedString: string;
    // ownInstanceProperties
    decomposedStringWithCanonicalMapping: string;
    // ownInstanceProperties
    decomposedStringWithCompatibilityMapping: string;
    // ownInstanceProperties
    doubleValue: number;
    // ownInstanceProperties
    fastestEncoding: number;
    // ownInstanceProperties
    fileSystemRepresentation: string;
    // ownInstanceProperties
    floatValue: number;
    // ownInstanceProperties
    intValue: number;
    // ownInstanceProperties
    integerValue: number;
    // ownInstanceProperties
    lastPathComponent: string;
    // ownInstanceProperties
    length: number;
    // ownInstanceProperties
    localizedCapitalizedString: string;
    // ownInstanceProperties
    localizedLowercaseString: string;
    // ownInstanceProperties
    localizedUppercaseString: string;
    // ownInstanceProperties
    longLongValue: number;
    // ownInstanceProperties
    lowercaseString: string;
    // ownInstanceProperties
    pathComponents: string[];
    // ownInstanceProperties
    pathExtension: string;
    // ownInstanceProperties
    precomposedStringWithCanonicalMapping: string;
    // ownInstanceProperties
    precomposedStringWithCompatibilityMapping: string;
    // ownInstanceProperties
    smallestEncoding: number;
    // ownInstanceProperties
    stringByAbbreviatingWithTildeInPath: string;
    // ownInstanceProperties
    stringByDeletingLastPathComponent: string;
    // ownInstanceProperties
    stringByDeletingPathExtension: string;
    // ownInstanceProperties
    stringByExpandingTildeInPath: string;
    // ownInstanceProperties
    stringByRemovingPercentEncoding: string;
    // ownInstanceProperties
    stringByResolvingSymlinksInPath: string;
    // ownInstanceProperties
    stringByStandardizingPath: string;
    // ownInstanceProperties
    uppercaseString: string;
    // ownStaticProperties
    static availableStringEncodings: number;
    // ownStaticProperties
    static defaultCStringEncoding: number;
    // compoundInstanceMethods
    boundingRectWithSizeOptionsAttributes(with_: CGSize, options: NSString.DrawingOptions, attributes?: Map<string, any>): CGRect;
    // compoundInstanceMethods
    boundingRectWithSizeOptionsAttributesContext(with_: CGSize, options: NSString.DrawingOptions, attributes?: Map<string, any>, context?: NSStringDrawingContext): CGRect;
    // compoundInstanceMethods
    cStringUsingEncoding(using: number): string;
    // compoundInstanceMethods
    canBeConvertedToEncoding(to: number): boolean;
    // compoundInstanceMethods
    capitalizedStringWithLocale(with_?: NSLocale): string;
    // compoundInstanceMethods
    caseInsensitiveCompare(_: string): ComparisonResult;
    // compoundInstanceMethods
    characterAtIndex(at: number): string;
    // compoundInstanceMethods
    commonPrefixWithStringOptions(with_: string, options: NSString.CompareOptions): string;
    // compoundInstanceMethods
    compare(_: string): ComparisonResult;
    // compoundInstanceMethods
    compareOptions(_: string, options: NSString.CompareOptions): ComparisonResult;
    // compoundInstanceMethods
    compareOptionsRange(_: string, options: NSString.CompareOptions, range: NSRange): ComparisonResult;
    // compoundInstanceMethods
    compareOptionsRangeLocale(_: string, options: NSString.CompareOptions, range: NSRange, locale?: any): ComparisonResult;
    // compoundInstanceMethods
    completePathIntoStringCaseSensitiveMatchesIntoArrayFilterTypes(into?: string, caseSensitive?: boolean, matchesInto?: string[], filterTypes?: string[]): number;
    // compoundInstanceMethods
    componentsSeparatedByCharactersInSet(separatedBy: NSCharacterSet): string[];
    // compoundInstanceMethods
    componentsSeparatedByString(separatedBy: string): string[];
    // compoundInstanceMethods
    containsString(_: string): boolean;
    // compoundInstanceMethods
    dataUsingEncoding(using: number): NSData;
    // compoundInstanceMethods
    dataUsingEncodingAllowLossyConversion(using: number, allowLossyConversion: boolean): NSData;
    // compoundInstanceMethods
    drawAtPointWithAttributes(at: CGPoint, withAttributes?: Map<string, any>): void;
    // compoundInstanceMethods
    drawInRectWithAttributes(in_: CGRect, withAttributes?: Map<string, any>): void;
    // compoundInstanceMethods
    drawWithRectOptionsAttributes(with_: CGRect, options: NSString.DrawingOptions, attributes?: Map<string, any>): void;
    // compoundInstanceMethods
    drawWithRectOptionsAttributesContext(with_: CGRect, options: NSString.DrawingOptions, attributes?: Map<string, any>, context?: NSStringDrawingContext): void;
    // compoundInstanceMethods
    enumerateLines(_: (p1: string, p2: boolean) => void): void;
    // compoundInstanceMethods
    enumerateLinguisticTagsWithInSchemeOptionsOrthographyUsing(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, using?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
    // compoundInstanceMethods
    enumerateSubstringsWithInOptionsUsing(in_: NSRange, options: NSString.EnumerationOptions, using?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
    // compoundInstanceMethods
    getBytesMaxLengthUsedLengthEncodingOptionsRangeRemainingRange(_?: any, maxLength?: number, usedLength?: number, encoding?: number, options?: NSString.EncodingConversionOptions, range?: NSRange, remaining?: NSRange): boolean;
    // compoundInstanceMethods
    getCStringMaxLengthEncoding(_: string, maxLength: number, encoding: number): boolean;
    // compoundInstanceMethods
    getCharacters(_: string): void;
    // compoundInstanceMethods
    getCharactersRange(_: string, range: NSRange): void;
    // compoundInstanceMethods
    getFileSystemRepresentationMaxLength(_: string, maxLength: number): boolean;
    // compoundInstanceMethods
    getLineStartEndContentsEndForRange(_?: number, end?: number, contentsEnd?: number, for_?: NSRange): void;
    // compoundInstanceMethods
    getParagraphStartEndContentsEndForRange(_?: number, end?: number, contentsEnd?: number, for_?: NSRange): void;
    // compoundInstanceMethods
    hasPrefix(_: string): boolean;
    // compoundInstanceMethods
    hasSuffix(_: string): boolean;
    // compoundInstanceMethods
    static createWithBytesLengthEncoding(bytes: any, length: number, encoding: number): NSString;
    // compoundInstanceMethods
    static createWithBytesNoCopyLengthEncodingFreeWhenDone(bytesNoCopy: any, length: number, encoding: number, freeWhenDone: boolean): NSString;
    // compoundInstanceMethods
    static createWithCStringEncoding(CString: string, encoding: number): NSString;
    // compoundInstanceMethods
    static createWithCharactersLength(characters: string, length: number): NSString;
    // compoundInstanceMethods
    static createWithCharactersNoCopyLengthFreeWhenDone(charactersNoCopy: string, length: number, freeWhenDone: boolean): NSString;
    // compoundInstanceMethods
    static createWithContentsOfFileEncoding(contentsOfFile: string, encoding: number): NSString;
    // compoundInstanceMethods
    static createWithContentsOfFileUsedEncoding(contentsOfFile: string, usedEncoding?: number): NSString;
    // compoundInstanceMethods
    static createWithContentsOfURLEncoding(contentsOfURL: NSURL, encoding: number): NSString;
    // compoundInstanceMethods
    static createWithContentsOfURLUsedEncoding(contentsOfURL: NSURL, usedEncoding?: number): NSString;
    // compoundInstanceMethods
    static createWithDataEncoding(data: NSData, encoding: number): NSString;
    // compoundInstanceMethods
    static createWithString(string: string): NSString;
    // compoundInstanceMethods
    static createWithUTF8String(UTF8String: string): NSString;
    // compoundInstanceMethods
    isEqualToString(to: string): boolean;
    // compoundInstanceMethods
    lengthOfBytesUsingEncoding(using: number): number;
    // compoundInstanceMethods
    lineRangeForRange(for_: NSRange): NSRange;
    // compoundInstanceMethods
    linguisticTagsInRangeSchemeOptionsOrthographyTokenRanges(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, tokenRanges?: NSValue[]): string[];
    // compoundInstanceMethods
    localizedCaseInsensitiveCompare(_: string): ComparisonResult;
    // compoundInstanceMethods
    localizedCaseInsensitiveContainsString(_: string): boolean;
    // compoundInstanceMethods
    localizedCompare(_: string): ComparisonResult;
    // compoundInstanceMethods
    localizedStandardCompare(_: string): ComparisonResult;
    // compoundInstanceMethods
    localizedStandardContainsString(_: string): boolean;
    // compoundInstanceMethods
    localizedStandardRangeOfString(of: string): NSRange;
    // compoundInstanceMethods
    lowercaseStringWithLocale(with_?: NSLocale): string;
    // compoundInstanceMethods
    maximumLengthOfBytesUsingEncoding(using: number): number;
    // compoundInstanceMethods
    paragraphRangeForRange(for_: NSRange): NSRange;
    // compoundInstanceMethods
    propertyList(): any;
    // compoundInstanceMethods
    propertyListFromStringsFileFormat(): Map<any, any>;
    // compoundInstanceMethods
    rangeOfCharacterFromSet(from: NSCharacterSet): NSRange;
    // compoundInstanceMethods
    rangeOfCharacterFromSetOptions(from: NSCharacterSet, options: NSString.CompareOptions): NSRange;
    // compoundInstanceMethods
    rangeOfCharacterFromSetOptionsRange(from: NSCharacterSet, options: NSString.CompareOptions, range: NSRange): NSRange;
    // compoundInstanceMethods
    rangeOfComposedCharacterSequenceAtIndex(at: number): NSRange;
    // compoundInstanceMethods
    rangeOfComposedCharacterSequencesForRange(for_: NSRange): NSRange;
    // compoundInstanceMethods
    rangeOfString(of: string): NSRange;
    // compoundInstanceMethods
    rangeOfStringOptions(of: string, options: NSString.CompareOptions): NSRange;
    // compoundInstanceMethods
    rangeOfStringOptionsRange(of: string, options: NSString.CompareOptions, range: NSRange): NSRange;
    // compoundInstanceMethods
    rangeOfStringOptionsRangeLocale(of: string, options: NSString.CompareOptions, range: NSRange, locale?: NSLocale): NSRange;
    // compoundInstanceMethods
    sizeWithAttributes(withAttributes?: Map<string, any>): CGSize;
    // compoundInstanceMethods
    stringByAddingPercentEncodingWithAllowedCharacters(withAllowedCharacters: NSCharacterSet): string;
    // compoundInstanceMethods
    stringByAppendingPathComponent(_: string): string;
    // compoundInstanceMethods
    stringByAppendingPathExtension(_: string): string;
    // compoundInstanceMethods
    stringByAppendingString(_: string): string;
    // compoundInstanceMethods
    stringByApplyingTransformReverse(_: string, reverse: boolean): string;
    // compoundInstanceMethods
    stringByFoldingWithOptionsLocale(options: NSString.CompareOptions, locale?: NSLocale): string;
    // compoundInstanceMethods
    stringByPaddingToLengthWithStringStartingAtIndex(toLength: number, withPad: string, startingAt: number): string;
    // compoundInstanceMethods
    stringByReplacingCharactersInRangeWithString(in_: NSRange, with_: string): string;
    // compoundInstanceMethods
    stringByReplacingOccurrencesOfStringWithString(of: string, with_: string): string;
    // compoundInstanceMethods
    stringByReplacingOccurrencesOfStringWithStringOptionsRange(of: string, with_: string, options: NSString.CompareOptions, range: NSRange): string;
    // compoundInstanceMethods
    stringByTrimmingCharactersInSet(in_: NSCharacterSet): string;
    // compoundInstanceMethods
    stringsByAppendingPaths(byAppendingPaths: string[]): string[];
    // compoundInstanceMethods
    substringFromIndex(from: number): string;
    // compoundInstanceMethods
    substringToIndex(to: number): string;
    // compoundInstanceMethods
    substringWithRange(with_: NSRange): string;
    // compoundInstanceMethods
    uppercaseStringWithLocale(with_?: NSLocale): string;
    // compoundInstanceMethods
    variantFittingPresentationWidth(_: number): string;
    // compoundInstanceMethods
    writeToFileAtomicallyEncodingError(atomically: string, encoding: boolean, error: number): boolean;
    // compoundInstanceMethods
    writeToURLAtomicallyEncodingError(atomically: NSURL, encoding: boolean, error: number): boolean;
  }

  // export function NSStringFromClass(aClass: typeof NSObject): string;

  // export function NSStringFromHashTable(table: NSHashTable<any>): string;

  // export function NSStringFromMapTable(table: NSMapTable<any, any>): string;

  // export function NSStringFromPoint(aPoint: CGPoint): string;

  // export function NSStringFromProtocol(proto: any /* Protocol */): string;

  // export function NSStringFromRange(range: NSRange): string;

  // export function NSStringFromRect(aRect: CGRect): string;

  // export function NSStringFromSelector(aSelector: string): string;

  // export function NSStringFromSize(aSize: CGSize): string;

  // interface
  class Process extends NSObject {
    // compoundStaticMethods
    static runArgumentsTerminationHandler(_: NSURL, _2: string[], arguments_?: Error, terminationHandler?: (p1: Process) => void): Process;
    // compoundStaticMethods
    static launchedTaskWithLaunchPathArguments(launchPath: string, arguments_: string[]): Process;
    // ownInstanceProperties
    arguments: string[];
    setArguments(_: string[])
    // ownInstanceProperties
    currentDirectoryPath: string;
    setCurrentDirectoryPath(_: string)
    // ownInstanceProperties
    currentDirectoryURL: NSURL;
    setCurrentDirectoryURL(_: NSURL)
    // ownInstanceProperties
    environment: Map<string, string>;
    setEnvironment(_: Map<string, string>)
    // ownInstanceProperties
    executableURL: NSURL;
    setExecutableURL(_: NSURL)
    // ownInstanceProperties
    launchPath: string;
    setLaunchPath(_: string)
    // ownInstanceProperties
    processIdentifier: number;
    // ownInstanceProperties
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService)
    // ownInstanceProperties
    isRunning: boolean;
    // ownInstanceProperties
    standardError: any;
    setStandardError(_: any)
    // ownInstanceProperties
    standardInput: any;
    setStandardInput(_: any)
    // ownInstanceProperties
    standardOutput: any;
    setStandardOutput(_: any)
    // ownInstanceProperties
    terminationHandler: (p1: Process) => void;
    setTerminationHandler(_: (p1: Process) => void)
    // ownInstanceProperties
    terminationReason: Process.TerminationReason;
    // ownInstanceProperties
    terminationStatus: number;
    // compoundInstanceMethods
    interrupt(): void;
    // compoundInstanceMethods
    launch(): void;
    // compoundInstanceMethods
    launchAndReturnError(): boolean;
    // compoundInstanceMethods
    resume(): boolean;
    // compoundInstanceMethods
    suspend(): boolean;
    // compoundInstanceMethods
    terminate(): void;
    // compoundInstanceMethods
    waitUntilExit(): void;
  }

  // export function NSTemporaryDirectory(): string;

  // interface
  class NSTextCheckingResult extends NSObject {
    // compoundStaticMethods
    static addressCheckingResultWithRangeComponents(range: NSRange, components: Map<string, string>): NSTextCheckingResult;
    // compoundStaticMethods
    static correctionCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    // compoundStaticMethods
    static correctionCheckingResultWithRangeReplacementStringAlternativeStrings(range: NSRange, replacementString: string, alternativeStrings: string[]): NSTextCheckingResult;
    // compoundStaticMethods
    static dashCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    // compoundStaticMethods
    static dateCheckingResultWithRangeDate(range: NSRange, date: Date): NSTextCheckingResult;
    // compoundStaticMethods
    static dateCheckingResultWithRangeDateTimeZoneDuration(range: NSRange, date: Date, timeZone: NSTimeZone, duration: number): NSTextCheckingResult;
    // compoundStaticMethods
    static grammarCheckingResultWithRangeDetails(range: NSRange, details: Map<string, any>[]): NSTextCheckingResult;
    // compoundStaticMethods
    static linkCheckingResultWithRangeUrl(range: NSRange, url: NSURL): NSTextCheckingResult;
    // compoundStaticMethods
    static orthographyCheckingResultWithRangeOrthography(range: NSRange, orthography: NSOrthography): NSTextCheckingResult;
    // compoundStaticMethods
    static phoneNumberCheckingResultWithRangePhoneNumber(range: NSRange, phoneNumber: string): NSTextCheckingResult;
    // compoundStaticMethods
    static quoteCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    // compoundStaticMethods
    static regularExpressionCheckingResultWithRangesCountRegularExpression(ranges: NSRange, count: number, regularExpression: NSRegularExpression): NSTextCheckingResult;
    // compoundStaticMethods
    static replacementCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    // compoundStaticMethods
    static spellCheckingResultWithRange(range: NSRange): NSTextCheckingResult;
    // compoundStaticMethods
    static transitInformationCheckingResultWithRangeComponents(range: NSRange, components: Map<string, string>): NSTextCheckingResult;
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    addressComponents: Map<string, string>;
    // ownInstanceProperties
    alternativeStrings: string[];
    // ownInstanceProperties
    components: Map<string, string>;
    // ownInstanceProperties
    date: Date;
    // ownInstanceProperties
    duration: number;
    // ownInstanceProperties
    grammarDetails: Map<string, any>[];
    // ownInstanceProperties
    numberOfRanges: number;
    // ownInstanceProperties
    orthography: NSOrthography;
    // ownInstanceProperties
    phoneNumber: string;
    // ownInstanceProperties
    range: NSRange;
    // ownInstanceProperties
    regularExpression: NSRegularExpression;
    // ownInstanceProperties
    replacementString: string;
    // ownInstanceProperties
    resultType: NSTextCheckingResult.CheckingType;
    // ownInstanceProperties
    timeZone: NSTimeZone;
    // compoundInstanceMethods
    rangeAtIndex(at: number): NSRange;
    // compoundInstanceMethods
    rangeWithName(withName: string): NSRange;
    // compoundInstanceMethods
    resultByAdjustingRangesWithOffset(offset: number): NSTextCheckingResult;
  }

  // interface
  class Thread extends NSObject {
    // compoundStaticMethods
    static detachNewThreadSelectorToTargetWithObject(_: string, toTarget: any, withObject?: any): void;
    // compoundStaticMethods
    static detachNewThreadWithBlock(_: () => void): void;
    // compoundStaticMethods
    static exit(): void;
    // compoundStaticMethods
    static isMultiThreaded(): boolean;
    // compoundStaticMethods
    static setThreadPriority(_: number): boolean;
    // compoundStaticMethods
    static sleepForTimeInterval(_: number): void;
    // compoundStaticMethods
    static sleepUntilDate(_: Date): void;
    // compoundStaticMethods
    static threadPriority(): number;
    // ownInstanceProperties
    isCancelled: boolean;
    // ownInstanceProperties
    isExecuting: boolean;
    // ownInstanceProperties
    isFinished: boolean;
    // ownInstanceProperties
    //   isMainThread: boolean;
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService)
    // ownInstanceProperties
    stackSize: number;
    setStackSize(_: number)
    // ownInstanceProperties
    threadDictionary: NSMutableDictionary<any, any>;
    // ownInstanceProperties
    threadPriority: number;
    setThreadPriority(_: number)
    // ownStaticProperties
    static callStackReturnAddresses: number[];
    // ownStaticProperties
    static callStackSymbols: string[];
    // ownStaticProperties
    static currentThread: Thread;
    // ownStaticProperties
    static isMainThread: boolean;
    // ownStaticProperties
    static mainThread: Thread;
    // compoundInstanceMethods
    cancel(): void;
    // compoundInstanceMethods
    static createWithBlock(block: () => void): Thread;
    // compoundInstanceMethods
    static createWithTargetSelectorObject(target: any, selector: string, object_?: any): Thread;
    // compoundInstanceMethods
    main(): void;
    // compoundInstanceMethods
    start(): void;
  }

  // interface
  class NSTimeZone extends NSObject {
    // compoundStaticMethods
    //  static abbreviationDictionary(): Map<string, string>;
    // compoundStaticMethods
    static resetSystemTimeZone(): void;
    // ownInstanceProperties
    abbreviation: string;
    // ownInstanceProperties
    data: NSData;
    // ownInstanceProperties
    isDaylightSavingTime: boolean;
    // ownInstanceProperties
    daylightSavingTimeOffset: number;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    nextDaylightSavingTimeTransition: Date;
    // ownInstanceProperties
    secondsFromGMT: number;
    // ownStaticProperties
    static abbreviationDictionary: Map<string, string>;
    setAbbreviationDictionary(_: Map<string, string>)
    // ownStaticProperties
    static defaultTimeZone: NSTimeZone;
    setDefaultTimeZone(_: NSTimeZone)
    // ownStaticProperties
    static knownTimeZoneNames: string[];
    // ownStaticProperties
    static localTimeZone: NSTimeZone;
    // ownStaticProperties
    static systemTimeZone: NSTimeZone;
    // ownStaticProperties
    static timeZoneDataVersion: string;
    // compoundInstanceMethods
    abbreviationForDate(for_: Date): string;
    // compoundInstanceMethods
    daylightSavingTimeOffsetForDate(for_: Date): number;
    // compoundInstanceMethods
    static createWithName(name: string): NSTimeZone;
    // compoundInstanceMethods
    static createWithNameData(name: string, data?: NSData): NSTimeZone;
    // compoundInstanceMethods
    isDaylightSavingTimeForDate(for_: Date): boolean;
    // compoundInstanceMethods
    isEqualToTimeZone(to: NSTimeZone): boolean;
    // compoundInstanceMethods
    localizedNameLocale(_: NSTimeZone.NameStyle, locale?: NSLocale): string;
    // compoundInstanceMethods
    nextDaylightSavingTimeTransitionAfterDate(after: Date): Date;
    // compoundInstanceMethods
    secondsFromGMTForDate(for_: Date): number;
  }

  // interface
  class Timer extends NSObject {
    // compoundStaticMethods
    static scheduledTimerWithTimeIntervalWithRepeatsBlock(_: number, repeats: boolean, block: (p1: Timer) => void): Timer;
    // compoundStaticMethods
    static scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(timeInterval: number, target: any, selector: string, userInfo?: any, repeats?: boolean): Timer;
    // ownInstanceProperties
    fireDate: Date;
    setFireDate(_: Date)
    // ownInstanceProperties
    timeInterval: number;
    // ownInstanceProperties
    tolerance: number;
    setTolerance(_: number)
    // ownInstanceProperties
    userInfo: any;
    // ownInstanceProperties
    isValid: boolean;
    // compoundInstanceMethods
    fire(): void;
    // compoundInstanceMethods
    static createWithFireDateIntervalRepeatsBlock(fireDate: Date, interval: number, repeats: boolean, block: (p1: Timer) => void): Timer;
    // compoundInstanceMethods
    static createWithFireDateIntervalTargetSelectorUserInfoRepeats(fireDate: Date, interval: number, target: any, selector: string, userInfo?: any, repeats?: boolean): Timer;
    // compoundInstanceMethods
    invalidate(): void;
  }

  // interface
  class NSURL extends NSObject {
    // compoundStaticMethods
    static URLByResolvingAliasFileAtURLOptionsError(resolvingAliasFileAt: NSURL, options: NSURL.BookmarkResolutionOptions): NSURL;
    // compoundStaticMethods
    static URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(options: NSData, relativeToURL: NSURL.BookmarkResolutionOptions, bookmarkDataIsStale?: NSURL, error?: boolean): NSURL;
    // compoundStaticMethods
    static absoluteURLWithDataRepresentationRelativeToURL(withDataRepresentation: NSData, relativeTo?: NSURL): NSURL;
    // compoundStaticMethods
    static bookmarkDataWithContentsOfURLError(error: NSURL): NSData;
    // compoundStaticMethods
    static fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(withFileSystemRepresentation: string, isDirectory: boolean, relativeTo?: NSURL): NSURL;
    // compoundStaticMethods
    static fileURLWithPath(withPath: string): NSURL;
    // compoundStaticMethods
    static fileURLWithPathIsDirectory(withPath: string, isDirectory: boolean): NSURL;
    // compoundStaticMethods
    static fileURLWithPathIsDirectoryRelativeToURL(withPath: string, isDirectory: boolean, relativeTo?: NSURL): NSURL;
    // compoundStaticMethods
    static fileURLWithPathRelativeToURL(withPath: string, relativeTo?: NSURL): NSURL;
    // compoundStaticMethods
    static fileURLWithPathComponents(withPathComponents: string[]): NSURL;
    // compoundStaticMethods
    static resourceValuesForKeysFromBookmarkData(forKeys: string[], fromBookmarkData: NSData): Map<string, any>;
    // compoundStaticMethods
    static writeBookmarkDataToURLOptionsError(toURL: NSData, options: NSURL, error: number): boolean;
    // ownInstanceProperties
    URLByDeletingLastPathComponent: NSURL;
    // ownInstanceProperties
    URLByDeletingPathExtension: NSURL;
    // ownInstanceProperties
    URLByResolvingSymlinksInPath: NSURL;
    // ownInstanceProperties
    URLByStandardizingPath: NSURL;
    // ownInstanceProperties
    absoluteString: string;
    // ownInstanceProperties
    absoluteURL: NSURL;
    // ownInstanceProperties
    baseURL: NSURL;
    // ownInstanceProperties
    dataRepresentation: NSData;
    // ownInstanceProperties
    filePathURL: NSURL;
    // ownInstanceProperties
    fileSystemRepresentation: string;
    // ownInstanceProperties
    isFileURL: boolean;
    // ownInstanceProperties
    fragment: string;
    // ownInstanceProperties
    hasDirectoryPath: boolean;
    // ownInstanceProperties
    host: string;
    // ownInstanceProperties
    lastPathComponent: string;
    // ownInstanceProperties
    password: string;
    // ownInstanceProperties
    path: string;
    // ownInstanceProperties
    pathComponents: string[];
    // ownInstanceProperties
    pathExtension: string;
    // ownInstanceProperties
    port: number;
    // ownInstanceProperties
    query: string;
    // ownInstanceProperties
    relativePath: string;
    // ownInstanceProperties
    relativeString: string;
    // ownInstanceProperties
    resourceSpecifier: string;
    // ownInstanceProperties
    scheme: string;
    // ownInstanceProperties
    standardizedURL: NSURL;
    // ownInstanceProperties
    user: string;
    // compoundInstanceMethods
    URLByAppendingPathComponent(_: string): NSURL;
    // compoundInstanceMethods
    URLByAppendingPathComponentIsDirectory(_: string, isDirectory: boolean): NSURL;
    // compoundInstanceMethods
    URLByAppendingPathExtension(_: string): NSURL;
    // compoundInstanceMethods
    bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(includingResourceValuesForKeys: NSURL.BookmarkCreationOptions, relativeToURL?: string[], error?: NSURL): NSData;
    // compoundInstanceMethods
    checkPromisedItemIsReachableAndReturnError(): boolean;
    // compoundInstanceMethods
    checkResourceIsReachableAndReturnError(): boolean;
    // compoundInstanceMethods
    fileReferenceURL(): NSURL;
    // compoundInstanceMethods
    getFileSystemRepresentationMaxLength(_: string, maxLength: number): boolean;
    // compoundInstanceMethods
    getPromisedItemResourceValueForKeyError(forKey?: any, error?: string): boolean;
    // compoundInstanceMethods
    getResourceValueForKeyError(forKey?: any, error?: string): boolean;
    // compoundInstanceMethods
    static createWithAbsoluteURLWithDataRepresentationRelativeToURL(absoluteURLWithDataRepresentation: NSData, relativeToURL?: NSURL): NSURL;
    // compoundInstanceMethods
    static createWithByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStale(byResolvingBookmarkData: NSData, options: NSURL.BookmarkResolutionOptions, relativeToURL?: NSURL, bookmarkDataIsStale?: boolean): NSURL;
    // compoundInstanceMethods
    static createWithFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(fileURLWithFileSystemRepresentation: string, isDirectory: boolean, relativeToURL?: NSURL): NSURL;
    // compoundInstanceMethods
    static createWithFileURLWithPath(fileURLWithPath: string): NSURL;
    // compoundInstanceMethods
    static createWithFileURLWithPathIsDirectory(fileURLWithPath: string, isDirectory: boolean): NSURL;
    // compoundInstanceMethods
    static createWithFileURLWithPathIsDirectoryRelativeToURL(fileURLWithPath: string, isDirectory: boolean, relativeToURL?: NSURL): NSURL;
    // compoundInstanceMethods
    static createWithFileURLWithPathRelativeToURL(fileURLWithPath: string, relativeToURL?: NSURL): NSURL;
    // compoundInstanceMethods
    static createWithDataRepresentationRelativeToURL(dataRepresentation: NSData, relativeToURL?: NSURL): NSURL;
    // compoundInstanceMethods
    static createWithString(string: string): NSURL;
    // compoundInstanceMethods
    static createWithStringRelativeToURL(string: string, relativeToURL?: NSURL): NSURL;
    // compoundInstanceMethods
    isFileReferenceURL(): boolean;
    // compoundInstanceMethods
    promisedItemResourceValuesForKeysError(error: string[]): Map<string, any>;
    // compoundInstanceMethods
    removeAllCachedResourceValues(): void;
    // compoundInstanceMethods
    removeCachedResourceValueForKey(forKey: string): void;
    // compoundInstanceMethods
    resourceValuesForKeysError(error: string[]): Map<string, any>;
    // compoundInstanceMethods
    setResourceValueForKeyError(forKey?: any, error?: string): boolean;
    // compoundInstanceMethods
    setResourceValuesError(error: Map<string, any>): boolean;
    // compoundInstanceMethods
    setTemporaryResourceValueForKey(_?: any, forKey?: string): void;
    // compoundInstanceMethods
    startAccessingSecurityScopedResource(): boolean;
    // compoundInstanceMethods
    stopAccessingSecurityScopedResource(): void;
    // compoundInstanceMethods
    writeToPasteboard(to: NSPasteboard): void;
  }

  // interface
  class URLAuthenticationChallenge extends NSObject {
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    failureResponse: URLResponse;
    // ownInstanceProperties
    previousFailureCount: number;
    // ownInstanceProperties
    proposedCredential: URLCredential;
    // ownInstanceProperties
    protectionSpace: URLProtectionSpace;
    // ownInstanceProperties
    sender: URLAuthenticationChallengeSender;
    // compoundInstanceMethods
    static createWithAuthenticationChallengeSender(authenticationChallenge: URLAuthenticationChallenge, sender: URLAuthenticationChallengeSender): URLAuthenticationChallenge;
    // compoundInstanceMethods
    static createWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender(protectionSpace: URLProtectionSpace, proposedCredential?: URLCredential, previousFailureCount?: number, failureResponse?: URLResponse, error?: NSError, sender?: URLAuthenticationChallengeSender): URLAuthenticationChallenge;
  }

  interface URLAuthenticationChallengeSender extends NSObject {
    // instance method
    cancelAuthenticationChallenge(_: URLAuthenticationChallenge): void;
    // instance method
    continueWithoutCredentialForAuthenticationChallenge(_: URLAuthenticationChallenge): void;
    // instance method
    performDefaultHandlingForAuthenticationChallenge?(_: URLAuthenticationChallenge): void;
    // instance method
    rejectProtectionSpaceAndContinueWithChallenge?(_: URLAuthenticationChallenge): void;
    // instance method
    useCredentialForAuthenticationChallenge(_: URLCredential, forAuthenticationChallenge: URLAuthenticationChallenge): void;
  }

  // interface
  class URLCache extends NSObject {
    // ownInstanceProperties
    currentDiskUsage: number;
    // ownInstanceProperties
    currentMemoryUsage: number;
    // ownInstanceProperties
    diskCapacity: number;
    setDiskCapacity(_: number)
    // ownInstanceProperties
    memoryCapacity: number;
    setMemoryCapacity(_: number)
    // ownStaticProperties
    static sharedURLCache: URLCache;
    setSharedURLCache(_: URLCache)
    // compoundInstanceMethods
    cachedResponseForRequest(_: NSURLRequest): CachedURLResponse;
    // compoundInstanceMethods
    getCachedResponseForDataTaskWithCompletionHandler(_: URLSessionDataTask, completionHandler?: (p1: CachedURLResponse) => void): void;
    // compoundInstanceMethods
    static createWithMemoryCapacityDiskCapacityDirectoryURL(memoryCapacity: number, diskCapacity: number, directoryURL?: NSURL): URLCache;
    // compoundInstanceMethods
    static createWithMemoryCapacityDiskCapacityDiskPath(memoryCapacity: number, diskCapacity: number, diskPath?: string): URLCache;
    // compoundInstanceMethods
    removeAllCachedResponses(): void;
    // compoundInstanceMethods
    removeCachedResponseForDataTask(_: URLSessionDataTask): void;
    // compoundInstanceMethods
    removeCachedResponseForRequest(_: NSURLRequest): void;
    // compoundInstanceMethods
    removeCachedResponsesSinceDate(_: Date): void;
    // compoundInstanceMethods
    storeCachedResponseForDataTask(_: CachedURLResponse, forDataTask: URLSessionDataTask): void;
    // compoundInstanceMethods
    storeCachedResponseForRequest(_: CachedURLResponse, forRequest: NSURLRequest): void;
  }

  // interface
  class NSURLComponents extends NSObject {
    // compoundStaticMethods
    static componentsWithString(string: string): NSURLComponents;
    // compoundStaticMethods
    static componentsWithURLResolvingAgainstBaseURL(url: NSURL, resolvingAgainstBaseURL: boolean): NSURLComponents;
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    fragment: string;
    setFragment(_: string)
    // ownInstanceProperties
    host: string;
    setHost(_: string)
    // ownInstanceProperties
    password: string;
    setPassword(_: string)
    // ownInstanceProperties
    path: string;
    setPath(_: string)
    // ownInstanceProperties
    percentEncodedFragment: string;
    setPercentEncodedFragment(_: string)
    // ownInstanceProperties
    percentEncodedHost: string;
    setPercentEncodedHost(_: string)
    // ownInstanceProperties
    percentEncodedPassword: string;
    setPercentEncodedPassword(_: string)
    // ownInstanceProperties
    percentEncodedPath: string;
    setPercentEncodedPath(_: string)
    // ownInstanceProperties
    percentEncodedQuery: string;
    setPercentEncodedQuery(_: string)
    // ownInstanceProperties
    percentEncodedQueryItems: NSURLQueryItem[];
    setPercentEncodedQueryItems(_: NSURLQueryItem[])
    // ownInstanceProperties
    percentEncodedUser: string;
    setPercentEncodedUser(_: string)
    // ownInstanceProperties
    port: number;
    setPort(_: number)
    // ownInstanceProperties
    query: string;
    setQuery(_: string)
    // ownInstanceProperties
    queryItems: NSURLQueryItem[];
    setQueryItems(_: NSURLQueryItem[])
    // ownInstanceProperties
    rangeOfFragment: NSRange;
    // ownInstanceProperties
    rangeOfHost: NSRange;
    // ownInstanceProperties
    rangeOfPassword: NSRange;
    // ownInstanceProperties
    rangeOfPath: NSRange;
    // ownInstanceProperties
    rangeOfPort: NSRange;
    // ownInstanceProperties
    rangeOfQuery: NSRange;
    // ownInstanceProperties
    rangeOfScheme: NSRange;
    // ownInstanceProperties
    rangeOfUser: NSRange;
    // ownInstanceProperties
    scheme: string;
    setScheme(_: string)
    // ownInstanceProperties
    string: string;
    // ownInstanceProperties
    user: string;
    setUser(_: string)
    // compoundInstanceMethods
    URLRelativeToURL(relativeTo?: NSURL): NSURL;
    // compoundInstanceMethods
    static createWithString(string: string): NSURLComponents;
    // compoundInstanceMethods
    static createWithUrlResolvingAgainstBaseURL(URL: NSURL, resolvingAgainstBaseURL: boolean): NSURLComponents;
  }

  // interface
  class NSURLConnection extends NSObject {
    // compoundStaticMethods
    static canHandleRequest(_: NSURLRequest): boolean;
    // ownInstanceProperties
    currentRequest: NSURLRequest;
    // ownInstanceProperties
    originalRequest: NSURLRequest;
    // compoundInstanceMethods
    cancel(): void;
    // compoundInstanceMethods
    scheduleInRunLoopForMode(in_: RunLoop, forMode: string): void;
    // compoundInstanceMethods
    setDelegateQueue(_?: OperationQueue): void;
    // compoundInstanceMethods
    start(): void;
    // compoundInstanceMethods
    unscheduleFromRunLoopForMode(from: RunLoop, forMode: string): void;
  }

  interface NSURLConnectionDataDelegate extends NSURLConnectionDelegate {
    // instance method
    connectionWillSendRequestRedirectResponse?(_: NSURLConnection, willSend: NSURLRequest, redirectResponse?: URLResponse): NSURLRequest;
    // instance method
    connectionDidReceiveResponse?(_: NSURLConnection, didReceive: URLResponse): void;
    // instance method
    connectionDidReceiveData?(_: NSURLConnection, didReceive: NSData): void;
    // instance method
    connectionDidSendBodyDataTotalBytesWrittenTotalBytesExpectedToWrite?(_: NSURLConnection, didSendBodyData: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
    // instance method
    connectionNeedNewBodyStream?(_: NSURLConnection, needNewBodyStream: NSURLRequest): InputStream;
    // instance method
    connectionWillCacheResponse?(_: NSURLConnection, willCacheResponse: CachedURLResponse): CachedURLResponse;
    // instance method
    connectionDidFinishLoading?(_: NSURLConnection): void;
  }

  interface NSURLConnectionDelegate extends NSObject {
    // instance method
    connectionWillSendRequestForAuthenticationChallenge?(_: NSURLConnection, willSendRequestFor: URLAuthenticationChallenge): void;
    // instance method
    connectionDidFailWithError?(_: NSURLConnection, didFailWithError: NSError): void;
    // instance method
    connectionShouldUseCredentialStorage?(_: NSURLConnection): boolean;
  }

  interface NSURLConnectionDownloadDelegate extends NSURLConnectionDelegate {
    // instance method
    connectionDidWriteDataTotalBytesWrittenExpectedTotalBytes?(_: NSURLConnection, didWriteData: number, totalBytesWritten: number, expectedTotalBytes: number): void;
    // instance method
    connectionDidFinishDownloadingDestinationURL(_: NSURLConnection, destinationURL: NSURL): void;
    // instance method
    connectionDidResumeDownloadingTotalBytesWrittenExpectedTotalBytes?(_: NSURLConnection, totalBytesWritten: number, expectedTotalBytes: number): void;
  }

  // interface
  class URLCredential extends NSObject {
    // ownInstanceProperties
    certificates: any[];
    // ownInstanceProperties
    hasPassword: boolean;
    // ownInstanceProperties
    identity: any;
    // ownInstanceProperties
    password: string;
    // ownInstanceProperties
    persistence: URLCredential.Persistence;
    // ownInstanceProperties
    user: string;
    // compoundInstanceMethods
    static createWithIdentityCertificatesPersistence(identity: any, certificates?: any[], persistence?: URLCredential.Persistence): URLCredential;
    // compoundInstanceMethods
    static createWithTrust(trust: any): URLCredential;
    // compoundInstanceMethods
    static createWithUserPasswordPersistence(user: string, password: string, persistence: URLCredential.Persistence): URLCredential;
  }

  // interface
  class URLCredentialStorage extends NSObject {
    // ownInstanceProperties
    allCredentials: Map<URLProtectionSpace, Map<string, URLCredential>>;
    // ownStaticProperties
    static sharedCredentialStorage: URLCredentialStorage;
    // compoundInstanceMethods
    credentialsForProtectionSpace(_: URLProtectionSpace): Map<string, URLCredential>;
    // compoundInstanceMethods
    defaultCredentialForProtectionSpace(_: URLProtectionSpace): URLCredential;
    // compoundInstanceMethods
    getCredentialsForTaskCompletionHandler(for_: URLProtectionSpace, task: URLSessionTask, completionHandler?: (p1: Map<string, URLCredential>) => void): void;
    // compoundInstanceMethods
    getDefaultCredentialForProtectionSpaceWithTaskCompletionHandler(_: URLProtectionSpace, task: URLSessionTask, completionHandler?: (p1: URLCredential) => void): void;
    // compoundInstanceMethods
    removeCredentialForProtectionSpace(_: URLCredential, forProtectionSpace: URLProtectionSpace): void;
    // compoundInstanceMethods
    removeCredentialForProtectionSpaceOptions(_: URLCredential, forProtectionSpace: URLProtectionSpace, options?: Map<string, any>): void;
    // compoundInstanceMethods
    removeCredentialForProtectionSpaceOptionsTask(_: URLCredential, forProtectionSpace: URLProtectionSpace, options?: Map<string, any>, task?: URLSessionTask): void;
    // compoundInstanceMethods
    setCredentialForProtectionSpace(_: URLCredential, for_: URLProtectionSpace): void;
    // compoundInstanceMethods
    setCredentialForProtectionSpaceTask(_: URLCredential, for_: URLProtectionSpace, task: URLSessionTask): void;
    // compoundInstanceMethods
    setDefaultCredentialForProtectionSpace(_: URLCredential, forProtectionSpace: URLProtectionSpace): void;
    // compoundInstanceMethods
    setDefaultCredentialForProtectionSpaceTask(_: URLCredential, forProtectionSpace: URLProtectionSpace, task: URLSessionTask): void;
  }

  // interface
  class NSURLDownload extends NSObject {
    // compoundStaticMethods
    static canResumeDownloadDecodedWithEncodingMIMEType(withEncodingMIMEType: string): boolean;
    // ownInstanceProperties
    deletesFileUponFailure: boolean;
    setDeletesFileUponFailure(_: boolean)
    // ownInstanceProperties
    request: NSURLRequest;
    // ownInstanceProperties
    resumeData: NSData;
    // compoundInstanceMethods
    cancel(): void;
    // compoundInstanceMethods
    setDestinationAllowOverwrite(_: string, allowOverwrite: boolean): void;
  }

  interface NSURLDownloadDelegate extends NSObject {
    // instance method
    downloadWillSendRequestRedirectResponse?(_: NSURLDownload, willSend: NSURLRequest, redirectResponse?: URLResponse): NSURLRequest;
    // instance method
    downloadDidReceiveAuthenticationChallenge?(_: NSURLDownload, didReceive: URLAuthenticationChallenge): void;
    // instance method
    downloadDidCancelAuthenticationChallenge?(_: NSURLDownload, didCancel: URLAuthenticationChallenge): void;
    // instance method
    downloadDidReceiveResponse?(_: NSURLDownload, didReceive: URLResponse): void;
    // instance method
    downloadWillResumeWithResponseFromByte?(_: NSURLDownload, willResumeWith: URLResponse, fromByte: number): void;
    // instance method
    downloadCanAuthenticateAgainstProtectionSpace?(_: NSURLDownload, canAuthenticateAgainstProtectionSpace: URLProtectionSpace): boolean;
    // instance method
    downloadDecideDestinationWithSuggestedFilename?(_: NSURLDownload, decideDestinationWithSuggestedFilename: string): void;
    // instance method
    downloadDidCreateDestination?(_: NSURLDownload, didCreateDestination: string): void;
    // instance method
    downloadDidFailWithError?(_: NSURLDownload, didFailWithError: NSError): void;
    // instance method
    downloadDidReceiveDataOfLength?(_: NSURLDownload, didReceiveDataOfLength: number): void;
    // instance method
    downloadShouldDecodeSourceDataOfMIMEType?(_: NSURLDownload, shouldDecodeSourceDataOfMIMEType: string): boolean;
    // instance method
    downloadDidBegin?(_: NSURLDownload): void;
    // instance method
    downloadDidFinish?(_: NSURLDownload): void;
    // instance method
    downloadShouldUseCredentialStorage?(_: NSURLDownload): boolean;
  }

  // interface
  class NSURLHandle extends NSObject {
  }

  // interface
  class URLProtectionSpace extends NSObject {
    // ownInstanceProperties
    authenticationMethod: string;
    // ownInstanceProperties
    distinguishedNames: NSData[];
    // ownInstanceProperties
    host: string;
    // ownInstanceProperties
    isProxy: boolean;
    // ownInstanceProperties
    port: number;
    // ownInstanceProperties
    protocol: string;
    // ownInstanceProperties
    proxyType: string;
    // ownInstanceProperties
    realm: string;
    // ownInstanceProperties
    receivesCredentialSecurely: boolean;
    // ownInstanceProperties
    serverTrust: any;
    // compoundInstanceMethods
    static createWithHostPortProtocolRealmAuthenticationMethod(host: string, port: number, protocol?: string, realm?: string, authenticationMethod?: string): URLProtectionSpace;
    // compoundInstanceMethods
    static createWithProxyHostPortTypeRealmAuthenticationMethod(proxyHost: string, port: number, type?: string, realm?: string, authenticationMethod?: string): URLProtectionSpace;
  }

  // interface
  class URLProtocol extends NSObject {
    // compoundStaticMethods
    static canInitWithRequest(_: NSURLRequest): boolean;
    // compoundStaticMethods
    static canInitWithTask(_: URLSessionTask): boolean;
    // compoundStaticMethods
    static canonicalRequestForRequest(_: NSURLRequest): NSURLRequest;
    // compoundStaticMethods
    static propertyForKeyInRequest(_: string, inRequest: NSURLRequest): any;
    // compoundStaticMethods
    static registerClass(_: typeof NSObject): boolean;
    // compoundStaticMethods
    static removePropertyForKeyInRequest(_: string, inRequest: NSMutableURLRequest): void;
    // compoundStaticMethods
    static requestIsCacheEquivalentToRequest(_: NSURLRequest, toRequest: NSURLRequest): boolean;
    // compoundStaticMethods
    static setPropertyForKeyInRequest(_: any, forKey: string, inRequest: NSMutableURLRequest): void;
    // compoundStaticMethods
    static unregisterClass(_: typeof NSObject): void;
    // ownInstanceProperties
    cachedResponse: CachedURLResponse;
    // ownInstanceProperties
    client: URLProtocolClient;
    // ownInstanceProperties
    request: NSURLRequest;
    // ownInstanceProperties
    task: URLSessionTask;
    // compoundInstanceMethods
    static createWithRequestCachedResponseClient(request: NSURLRequest, cachedResponse?: CachedURLResponse, client?: URLProtocolClient): URLProtocol;
    // compoundInstanceMethods
    static createWithTaskCachedResponseClient(task: URLSessionTask, cachedResponse?: CachedURLResponse, client?: URLProtocolClient): URLProtocol;
    // compoundInstanceMethods
    startLoading(): void;
    // compoundInstanceMethods
    stopLoading(): void;
  }

  interface URLProtocolClient extends NSObject {
    // instance method
    URLProtocolCachedResponseIsValid(_: URLProtocol, cachedResponseIsValid: CachedURLResponse): void;
    // instance method
    URLProtocolDidCancelAuthenticationChallenge(_: URLProtocol, didCancelAuthenticationChallenge: URLAuthenticationChallenge): void;
    // instance method
    URLProtocolDidFailWithError(_: URLProtocol, didFailWithError: NSError): void;
    // instance method
    URLProtocolDidLoadData(_: URLProtocol, didLoadData: NSData): void;
    // instance method
    URLProtocolDidReceiveAuthenticationChallenge(_: URLProtocol, didReceiveAuthenticationChallenge: URLAuthenticationChallenge): void;
    // instance method
    URLProtocolDidReceiveResponseCacheStoragePolicy(_: URLProtocol, didReceiveResponse: URLResponse, cacheStoragePolicy: URLCache.StoragePolicy): void;
    // instance method
    URLProtocolWasRedirectedToRequestRedirectResponse(_: URLProtocol, wasRedirectedToRequest: NSURLRequest, redirectResponse: URLResponse): void;
    // instance method
    URLProtocolDidFinishLoading(_: URLProtocol): void;
  }

  // interface
  class NSURLQueryItem extends NSObject {
    // compoundStaticMethods
    static queryItemWithNameValue(name: string, value?: string): NSURLQueryItem;
    // ownInstanceProperties
    name: string;
    // ownInstanceProperties
    value: string;
    // compoundInstanceMethods
    static createWithNameValue(name: string, value?: string): NSURLQueryItem;
  }

  // interface
  class NSURLRequest extends NSObject {
    // ownInstanceProperties
    HTTPBody: NSData;
    // ownInstanceProperties
    HTTPBodyStream: InputStream;
    // ownInstanceProperties
    HTTPMethod: string;
    // ownInstanceProperties
    HTTPShouldHandleCookies: boolean;
    // ownInstanceProperties
    HTTPShouldUsePipelining: boolean;
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    allHTTPHeaderFields: Map<string, string>;
    // ownInstanceProperties
    allowsCellularAccess: boolean;
    // ownInstanceProperties
    allowsConstrainedNetworkAccess: boolean;
    // ownInstanceProperties
    allowsExpensiveNetworkAccess: boolean;
    // ownInstanceProperties
    cachePolicy: NSURLRequest.CachePolicy;
    // ownInstanceProperties
    mainDocumentURL: NSURL;
    // ownInstanceProperties
    networkServiceType: NSURLRequest.NetworkServiceType;
    // ownInstanceProperties
    timeoutInterval: number;
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): NSURLRequest;
    // compoundInstanceMethods
    static createWithUrlCachePolicyTimeoutInterval(URL: NSURL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: number): NSURLRequest;
    // compoundInstanceMethods
    valueForHTTPHeaderField(forHTTPHeaderField: string): string;
  }

  // interface
  class URLResponse extends NSObject {
    // ownInstanceProperties
    MIMEType: string;
    // ownInstanceProperties
    URL: NSURL;
    // ownInstanceProperties
    expectedContentLength: number;
    // ownInstanceProperties
    suggestedFilename: string;
    // ownInstanceProperties
    textEncodingName: string;
    // compoundInstanceMethods
    static createWithUrlMIMETypeExpectedContentLengthTextEncodingName(URL: NSURL, MIMEType?: string, expectedContentLength?: number, textEncodingName?: string): URLResponse;
  }

  // interface
  class URLSession extends NSObject {
    // ownInstanceProperties
    configuration: URLSessionConfiguration;
    // ownInstanceProperties
    delegate: URLSessionDelegate;
    // ownInstanceProperties
    delegateQueue: OperationQueue;
    // ownInstanceProperties
    sessionDescription: string;
    setSessionDescription(_: string)
    // ownStaticProperties
    static sharedSession: URLSession;
    // compoundInstanceMethods
    dataTaskWithRequest(_: NSURLRequest): URLSessionDataTask;
    // compoundInstanceMethods
    dataTaskWithRequestWithCompletionHandler(_: NSURLRequest, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionDataTask;
    // compoundInstanceMethods
    dataTaskWithURL(_: NSURL): URLSessionDataTask;
    // compoundInstanceMethods
    dataTaskWithURLWithCompletionHandler(_: NSURL, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionDataTask;
    // compoundInstanceMethods
    downloadTaskWithRequest(_: NSURLRequest): URLSessionDownloadTask;
    // compoundInstanceMethods
    downloadTaskWithRequestWithCompletionHandler(_: NSURLRequest, completionHandler?: (p1: NSURL, p2: URLResponse, p3: NSError) => void): URLSessionDownloadTask;
    // compoundInstanceMethods
    downloadTaskWithResumeData(_: NSData): URLSessionDownloadTask;
    // compoundInstanceMethods
    downloadTaskWithResumeDataWithCompletionHandler(_: NSData, completionHandler?: (p1: NSURL, p2: URLResponse, p3: NSError) => void): URLSessionDownloadTask;
    // compoundInstanceMethods
    downloadTaskWithURL(_: NSURL): URLSessionDownloadTask;
    // compoundInstanceMethods
    downloadTaskWithURLWithCompletionHandler(_: NSURL, completionHandler?: (p1: NSURL, p2: URLResponse, p3: NSError) => void): URLSessionDownloadTask;
    // compoundInstanceMethods
    finishTasksAndInvalidate(): void;
    // compoundInstanceMethods
    flushWithCompletionHandler(_: () => void): void;
    // compoundInstanceMethods
    getAllTasksWithCompletionHandler(_: (p1: URLSessionTask[]) => void): void;
    // compoundInstanceMethods
    getTasksWithCompletionHandler(_: (p1: URLSessionDataTask[], p2: URLSessionUploadTask[], p3: URLSessionDownloadTask[]) => void): void;
    // compoundInstanceMethods
    invalidateAndCancel(): void;
    // compoundInstanceMethods
    resetWithCompletionHandler(_: () => void): void;
    // compoundInstanceMethods
    streamTaskWithHostNamePort(_: string, port: number): URLSessionStreamTask;
    // compoundInstanceMethods
    streamTaskWithNetService(_: NetService): URLSessionStreamTask;
    // compoundInstanceMethods
    uploadTaskWithRequestFromData(_: NSURLRequest, fromData: NSData): URLSessionUploadTask;
    // compoundInstanceMethods
    uploadTaskWithRequestWithFromDataCompletionHandler(_: NSURLRequest, fromData?: NSData, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionUploadTask;
    // compoundInstanceMethods
    uploadTaskWithRequestFromFile(_: NSURLRequest, fromFile: NSURL): URLSessionUploadTask;
    // compoundInstanceMethods
    uploadTaskWithRequestWithFromFileCompletionHandler(_: NSURLRequest, fromFile: NSURL, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionUploadTask;
    // compoundInstanceMethods
    uploadTaskWithStreamedRequest(_: NSURLRequest): URLSessionUploadTask;
    // compoundInstanceMethods
    webSocketTaskWithRequest(_: NSURLRequest): URLSessionWebSocketTask;
    // compoundInstanceMethods
    webSocketTaskWithURL(_: NSURL): URLSessionWebSocketTask;
    // compoundInstanceMethods
    webSocketTaskWithURLProtocols(_: NSURL, protocols: string[]): URLSessionWebSocketTask;
  }

  // interface
  class URLSessionConfiguration extends NSObject {
    // compoundStaticMethods
    static backgroundSessionConfigurationWithIdentifier(withIdentifier: string): URLSessionConfiguration;
    // ownInstanceProperties
    HTTPAdditionalHeaders: Map<any, any>;
    setHTTPAdditionalHeaders(_: Map<any, any>)
    // ownInstanceProperties
    HTTPCookieAcceptPolicy: HTTPCookie.AcceptPolicy;
    setHTTPCookieAcceptPolicy(_: HTTPCookie.AcceptPolicy)
    // ownInstanceProperties
    HTTPCookieStorage: HTTPCookieStorage;
    setHTTPCookieStorage(_: HTTPCookieStorage)
    // ownInstanceProperties
    HTTPMaximumConnectionsPerHost: number;
    setHTTPMaximumConnectionsPerHost(_: number)
    // ownInstanceProperties
    HTTPShouldSetCookies: boolean;
    setHTTPShouldSetCookies(_: boolean)
    // ownInstanceProperties
    HTTPShouldUsePipelining: boolean;
    setHTTPShouldUsePipelining(_: boolean)
    // ownInstanceProperties
    TLSMaximumSupportedProtocol: SSLProtocol;
    setTLSMaximumSupportedProtocol(_: SSLProtocol)
    // ownInstanceProperties
    TLSMaximumSupportedProtocolVersion: tls_protocol_version_t;
    setTLSMaximumSupportedProtocolVersion(_: tls_protocol_version_t)
    // ownInstanceProperties
    TLSMinimumSupportedProtocol: SSLProtocol;
    setTLSMinimumSupportedProtocol(_: SSLProtocol)
    // ownInstanceProperties
    TLSMinimumSupportedProtocolVersion: tls_protocol_version_t;
    setTLSMinimumSupportedProtocolVersion(_: tls_protocol_version_t)
    // ownInstanceProperties
    URLCache: URLCache;
    setURLCache(_: URLCache)
    // ownInstanceProperties
    URLCredentialStorage: URLCredentialStorage;
    setURLCredentialStorage(_: URLCredentialStorage)
    // ownInstanceProperties
    allowsCellularAccess: boolean;
    setAllowsCellularAccess(_: boolean)
    // ownInstanceProperties
    allowsConstrainedNetworkAccess: boolean;
    setAllowsConstrainedNetworkAccess(_: boolean)
    // ownInstanceProperties
    allowsExpensiveNetworkAccess: boolean;
    setAllowsExpensiveNetworkAccess(_: boolean)
    // ownInstanceProperties
    connectionProxyDictionary: Map<any, any>;
    setConnectionProxyDictionary(_: Map<any, any>)
    // ownInstanceProperties
    isDiscretionary: boolean;
    setDiscretionary(_: boolean)
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    networkServiceType: NSURLRequest.NetworkServiceType;
    setNetworkServiceType(_: NSURLRequest.NetworkServiceType)
    // ownInstanceProperties
    protocolClasses: typeof NSObject[];
    setProtocolClasses(_: typeof NSObject[])
    // ownInstanceProperties
    requestCachePolicy: NSURLRequest.CachePolicy;
    setRequestCachePolicy(_: NSURLRequest.CachePolicy)
    // ownInstanceProperties
    sharedContainerIdentifier: string;
    setSharedContainerIdentifier(_: string)
    // ownInstanceProperties
    shouldUseExtendedBackgroundIdleMode: boolean;
    setShouldUseExtendedBackgroundIdleMode(_: boolean)
    // ownInstanceProperties
    timeoutIntervalForRequest: number;
    setTimeoutIntervalForRequest(_: number)
    // ownInstanceProperties
    timeoutIntervalForResource: number;
    setTimeoutIntervalForResource(_: number)
    // ownInstanceProperties
    waitsForConnectivity: boolean;
    setWaitsForConnectivity(_: boolean)
    // ownStaticProperties
    static defaultSessionConfiguration: URLSessionConfiguration;
    // ownStaticProperties
    static ephemeralSessionConfiguration: URLSessionConfiguration;
  }

  interface URLSessionDataDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionDataTaskDidBecomeDownloadTask?(_: URLSession, dataTask: URLSessionDataTask, didBecomeDownloadTask: URLSessionDownloadTask): void;
    // instance method
    URLSessionDataTaskDidBecomeStreamTask?(_: URLSession, dataTask: URLSessionDataTask, didBecomeStreamTask: URLSessionStreamTask): void;
    // instance method
    URLSessionDataTaskDidReceiveData?(_: URLSession, dataTask: URLSessionDataTask, didReceiveData: NSData): void;
    // instance method
    URLSessionWithDataTaskDidReceiveResponseCompletionHandler?(_: URLSession, dataTask: URLSessionDataTask, didReceiveResponse: URLResponse, completionHandler: (p1: URLSession.ResponseDisposition) => void): void;
    // instance method
    URLSessionWithDataTaskWillCacheResponseCompletionHandler?(_: URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse, completionHandler?: (p1: CachedURLResponse) => void): void;
  }

  // interface
  class URLSessionDataTask extends URLSessionTask {
  }

  interface URLSessionDelegate extends NSObject {
    // instance method
    URLSessionDidBecomeInvalidWithError?(_: URLSession, didBecomeInvalidWithError?: NSError): void;
    // instance method
    URLSessionWithDidReceiveChallengeCompletionHandler?(_: URLSession, didReceiveChallenge: URLAuthenticationChallenge, completionHandler?: (p1: URLSession.AuthChallengeDisposition, p2: URLCredential) => void): void;
  }

  interface URLSessionDownloadDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionDownloadTaskDidFinishDownloadingToURL(_: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingToURL: NSURL): void;
    // instance method
    URLSessionDownloadTaskDidResumeAtOffsetExpectedTotalBytes?(_: URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: number, expectedTotalBytes: number): void;
    // instance method
    URLSessionDownloadTaskDidWriteDataTotalBytesWrittenTotalBytesExpectedToWrite?(_: URLSession, downloadTask: URLSessionDownloadTask, didWriteData: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  }

  // interface
  class URLSessionDownloadTask extends URLSessionTask {
    // compoundInstanceMethods
    cancelByProducingResumeData(_?: (p1: NSData) => void): void;
  }

  interface URLSessionStreamDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionBetterRouteDiscoveredForStreamTask?(_: URLSession, betterRouteDiscoveredForStreamTask: URLSessionStreamTask): void;
    // instance method
    URLSessionReadClosedForStreamTask?(_: URLSession, readClosedForStreamTask: URLSessionStreamTask): void;
    // instance method
    URLSessionStreamTaskDidBecomeInputStreamOutputStream?(_: URLSession, streamTask: URLSessionStreamTask, didBecomeInputStream: InputStream, outputStream: OutputStream): void;
    // instance method
    URLSessionWriteClosedForStreamTask?(_: URLSession, writeClosedForStreamTask: URLSessionStreamTask): void;
  }

  // interface
  class URLSessionStreamTask extends URLSessionTask {
    // compoundInstanceMethods
    captureStreams(): void;
    // compoundInstanceMethods
    closeRead(): void;
    // compoundInstanceMethods
    closeWrite(): void;
    // compoundInstanceMethods
    readDataOfMinLengthWithMaxLengthTimeoutCompletionHandler(_: number, maxLength: number, timeout: number, completionHandler?: (p1: NSData, p2: boolean, p3: NSError) => void): void;
    // compoundInstanceMethods
    startSecureConnection(): void;
    // compoundInstanceMethods
    writeDataWithTimeoutCompletionHandler(_: NSData, timeout: number, completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class URLSessionTask extends NSObject {
    // ownInstanceProperties
    countOfBytesClientExpectsToReceive: number;
    setCountOfBytesClientExpectsToReceive(_: number)
    // ownInstanceProperties
    countOfBytesClientExpectsToSend: number;
    setCountOfBytesClientExpectsToSend(_: number)
    // ownInstanceProperties
    countOfBytesExpectedToReceive: number;
    // ownInstanceProperties
    countOfBytesExpectedToSend: number;
    // ownInstanceProperties
    countOfBytesReceived: number;
    // ownInstanceProperties
    countOfBytesSent: number;
    // ownInstanceProperties
    currentRequest: NSURLRequest;
    // ownInstanceProperties
    earliestBeginDate: Date;
    setEarliestBeginDate(_: Date)
    // ownInstanceProperties
    error: NSError;
    // ownInstanceProperties
    originalRequest: NSURLRequest;
    // ownInstanceProperties
    priority: number;
    setPriority(_: number)
    // ownInstanceProperties
    response: URLResponse;
    // ownInstanceProperties
    state: URLSessionTask.State;
    // ownInstanceProperties
    taskDescription: string;
    setTaskDescription(_: string)
    // ownInstanceProperties
    taskIdentifier: number;
    // compoundInstanceMethods
    cancel(): void;
    // compoundInstanceMethods
    resume(): void;
    // compoundInstanceMethods
    suspend(): void;
  }

  interface URLSessionTaskDelegate extends URLSessionDelegate {
    // instance method
    URLSessionTaskDidCompleteWithError?(_: URLSession, task: URLSessionTask, didCompleteWithError?: NSError): void;
    // instance method
    URLSessionTaskDidFinishCollectingMetrics?(_: URLSession, task: URLSessionTask, didFinishCollectingMetrics: URLSessionTaskMetrics): void;
    // instance method
    URLSessionWithTaskDidReceiveChallengeCompletionHandler?(_: URLSession, task: URLSessionTask, didReceiveChallenge: URLAuthenticationChallenge, completionHandler?: (p1: URLSession.AuthChallengeDisposition, p2: URLCredential) => void): void;
    // instance method
    URLSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend?(_: URLSession, task: URLSessionTask, didSendBodyData: number, totalBytesSent: number, totalBytesExpectedToSend: number): void;
    // instance method
    URLSessionWithTaskNeedNewBodyStream?(_: URLSession, task: URLSessionTask, needNewBodyStream?: (p1: InputStream) => void): void;
    // instance method
    URLSessionWithTaskWillBeginDelayedRequestCompletionHandler?(_: URLSession, task: URLSessionTask, willBeginDelayedRequest: NSURLRequest, completionHandler?: (p1: NSURLSessionDelayedRequestDisposition, p2: NSURLRequest) => void): void;
    // instance method
    URLSessionWithTaskWillPerformHTTPRedirectionNewRequestCompletionHandler?(_: URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: NSURLRequest, completionHandler?: (p1: NSURLRequest) => void): void;
    // instance method
    URLSessionTaskIsWaitingForConnectivity?(_: URLSession, taskIsWaitingForConnectivity: URLSessionTask): void;
  }

  // interface
  class URLSessionTaskMetrics extends NSObject {
    // ownInstanceProperties
    redirectCount: number;
    // ownInstanceProperties
    taskInterval: NSDateInterval;
    // ownInstanceProperties
    transactionMetrics: URLSessionTaskTransactionMetrics[];
  }

  // interface
  class URLSessionTaskTransactionMetrics extends NSObject {
    // ownInstanceProperties
    isCellular: boolean;
    // ownInstanceProperties
    connectEndDate: Date;
    // ownInstanceProperties
    connectStartDate: Date;
    // ownInstanceProperties
    isConstrained: boolean;
    // ownInstanceProperties
    countOfRequestBodyBytesBeforeEncoding: number;
    // ownInstanceProperties
    countOfRequestBodyBytesSent: number;
    // ownInstanceProperties
    countOfRequestHeaderBytesSent: number;
    // ownInstanceProperties
    countOfResponseBodyBytesAfterDecoding: number;
    // ownInstanceProperties
    countOfResponseBodyBytesReceived: number;
    // ownInstanceProperties
    countOfResponseHeaderBytesReceived: number;
    // ownInstanceProperties
    domainLookupEndDate: Date;
    // ownInstanceProperties
    domainLookupStartDate: Date;
    // ownInstanceProperties
    isExpensive: boolean;
    // ownInstanceProperties
    fetchStartDate: Date;
    // ownInstanceProperties
    localAddress: string;
    // ownInstanceProperties
    localPort: number;
    // ownInstanceProperties
    isMultipath: boolean;
    // ownInstanceProperties
    negotiatedTLSCipherSuite: number;
    // ownInstanceProperties
    negotiatedTLSProtocolVersion: number;
    // ownInstanceProperties
    networkProtocolName: string;
    // ownInstanceProperties
    isProxyConnection: boolean;
    // ownInstanceProperties
    remoteAddress: string;
    // ownInstanceProperties
    remotePort: number;
    // ownInstanceProperties
    request: NSURLRequest;
    // ownInstanceProperties
    requestEndDate: Date;
    // ownInstanceProperties
    requestStartDate: Date;
    // ownInstanceProperties
    resourceFetchType: URLSessionTaskMetrics.ResourceFetchType;
    // ownInstanceProperties
    response: URLResponse;
    // ownInstanceProperties
    responseEndDate: Date;
    // ownInstanceProperties
    responseStartDate: Date;
    // ownInstanceProperties
    isReusedConnection: boolean;
    // ownInstanceProperties
    secureConnectionEndDate: Date;
    // ownInstanceProperties
    secureConnectionStartDate: Date;
  }

  // interface
  class URLSessionUploadTask extends URLSessionDataTask {
  }

  interface URLSessionWebSocketDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionWebSocketTaskDidCloseWithCodeReason?(_: URLSession, webSocketTask: URLSessionWebSocketTask, didCloseWithCode: URLSessionWebSocketTask.CloseCode, reason?: NSData): void;
    // instance method
    URLSessionWebSocketTaskDidOpenWithProtocol?(_: URLSession, webSocketTask: URLSessionWebSocketTask, didOpenWithProtocol?: string): void;
  }

  // interface
  class NSURLSessionWebSocketMessage extends NSObject {
    // ownInstanceProperties
    data: NSData;
    // ownInstanceProperties
    string: string;
    // ownInstanceProperties
    type: NSURLSessionWebSocketMessageType;
    // compoundInstanceMethods
    static createWithData(data: NSData): NSURLSessionWebSocketMessage;
    // compoundInstanceMethods
    static createWithString(string: string): NSURLSessionWebSocketMessage;
  }

  // interface
  class URLSessionWebSocketTask extends URLSessionTask {
    // ownInstanceProperties
    closeCode: URLSessionWebSocketTask.CloseCode;
    // ownInstanceProperties
    closeReason: NSData;
    // ownInstanceProperties
    maximumMessageSize: number;
    setMaximumMessageSize(_: number)
    // compoundInstanceMethods
    cancelWithCloseCodeReason(_: URLSessionWebSocketTask.CloseCode, reason?: NSData): void;
    // compoundInstanceMethods
    receiveMessageWithCompletionHandler(_?: (p1: NSURLSessionWebSocketMessage, p2: NSError) => void): void;
    // compoundInstanceMethods
    sendMessageWithCompletionHandler(_: NSURLSessionWebSocketMessage, completionHandler?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    sendPingWithPongReceiveHandler(_?: (p1: NSError) => void): void;
  }

  // interface
  class NSUUID extends NSObject {
    // ownInstanceProperties
    UUIDString: string;
    // compoundInstanceMethods
    getUUIDBytes(_: number): void;
    // compoundInstanceMethods
    static createWithUUIDBytes(UUIDBytes?: number): NSUUID;
    // compoundInstanceMethods
    static createWithUUIDString(UUIDString: string): NSUUID;
  }

  // interface
  class NSUbiquitousKeyValueStore extends NSObject {
    // ownInstanceProperties
    dictionaryRepresentation: Map<string, any>;
    // ownStaticProperties
    static defaultStore: NSUbiquitousKeyValueStore;
    // compoundInstanceMethods
    arrayForKey(forKey: string): any[];
    // compoundInstanceMethods
    boolForKey(forKey: string): boolean;
    // compoundInstanceMethods
    dataForKey(forKey: string): NSData;
    // compoundInstanceMethods
    dictionaryForKey(forKey: string): Map<string, any>;
    // compoundInstanceMethods
    doubleForKey(forKey: string): number;
    // compoundInstanceMethods
    longLongForKey(forKey: string): number;
    // compoundInstanceMethods
    objectForKey(forKey: string): any;
    // compoundInstanceMethods
    removeObjectForKey(forKey: string): void;
    // compoundInstanceMethods
    setArrayForKey(_?: any[], forKey?: string): void;
    // compoundInstanceMethods
    setBoolForKey(_: boolean, forKey: string): void;
    // compoundInstanceMethods
    setDataForKey(_?: NSData, forKey?: string): void;
    // compoundInstanceMethods
    setDictionaryForKey(_?: Map<string, any>, forKey?: string): void;
    // compoundInstanceMethods
    setDoubleForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    setLongLongForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    setObjectForKey(_?: any, forKey?: string): void;
    // compoundInstanceMethods
    setStringForKey(_?: string, forKey?: string): void;
    // compoundInstanceMethods
    stringForKey(forKey: string): string;
    // compoundInstanceMethods
    synchronize(): boolean;
  }

  // interface
  class UndoManager extends NSObject {
    // ownInstanceProperties
    canRedo: boolean;
    // ownInstanceProperties
    canUndo: boolean;
    // ownInstanceProperties
    groupingLevel: number;
    // ownInstanceProperties
    groupsByEvent: boolean;
    setGroupsByEvent(_: boolean)
    // ownInstanceProperties
    levelsOfUndo: number;
    setLevelsOfUndo(_: number)
    // ownInstanceProperties
    redoActionIsDiscardable: boolean;
    // ownInstanceProperties
    redoActionName: string;
    // ownInstanceProperties
    redoMenuItemTitle: string;
    // ownInstanceProperties
    isRedoing: boolean;
    // ownInstanceProperties
    runLoopModes: string[];
    setRunLoopModes(_: string[])
    // ownInstanceProperties
    undoActionIsDiscardable: boolean;
    // ownInstanceProperties
    undoActionName: string;
    // ownInstanceProperties
    undoMenuItemTitle: string;
    // ownInstanceProperties
    isUndoRegistrationEnabled: boolean;
    // ownInstanceProperties
    isUndoing: boolean;
    // compoundInstanceMethods
    beginUndoGrouping(): void;
    // compoundInstanceMethods
    disableUndoRegistration(): void;
    // compoundInstanceMethods
    enableUndoRegistration(): void;
    // compoundInstanceMethods
    endUndoGrouping(): void;
    // compoundInstanceMethods
    prepareWithInvocationTarget(_: any): any;
    // compoundInstanceMethods
    redo(): void;
    // compoundInstanceMethods
    redoMenuTitleForUndoActionName(_: string): string;
    // compoundInstanceMethods
    registerUndoWithTargetSelectorObject(_: any, selector: string, object_?: any): void;
    // compoundInstanceMethods
    removeAllActions(): void;
    // compoundInstanceMethods
    removeAllActionsWithTarget(_: any): void;
    // compoundInstanceMethods
    setActionIsDiscardable(_: boolean): void;
    // compoundInstanceMethods
    setActionName(_: string): void;
    // compoundInstanceMethods
    undo(): void;
    // compoundInstanceMethods
    undoMenuTitleForUndoActionName(_: string): string;
    // compoundInstanceMethods
    undoNestedGroup(): void;
  }

  // export function NSUnionRange(range1: NSRange, range2: NSRange): NSRange;

  // export function NSUnionRect(aRect: CGRect, bRect: CGRect): CGRect;

  // interface
  class NSUniqueIDSpecifier extends NSScriptObjectSpecifier {
    // ownInstanceProperties
    uniqueID: any;
    setUniqueID(_: any)
    // compoundInstanceMethods
    static createWithContainerClassDescriptionContainerSpecifierKeyUniqueID(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, uniqueID?: any): NSUniqueIDSpecifier;
  }

  // interface
  class Unit extends NSObject {
    // ownInstanceProperties
    symbol: string;
    // compoundInstanceMethods
    static createWithSymbol(symbol: string): Unit;
  }

  // interface
  class UnitAcceleration extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitAcceleration;
    // ownStaticProperties
    static gravity: UnitAcceleration;
    // ownStaticProperties
    static metersPerSecondSquared: UnitAcceleration;
  }

  // interface
  class UnitAngle extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitAngle;
    // ownStaticProperties
    static arcMinutes: UnitAngle;
    // ownStaticProperties
    static arcSeconds: UnitAngle;
    // ownStaticProperties
    static degrees: UnitAngle;
    // ownStaticProperties
    static gradians: UnitAngle;
    // ownStaticProperties
    static radians: UnitAngle;
    // ownStaticProperties
    static revolutions: UnitAngle;
  }

  // interface
  class UnitArea extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitArea;
    // ownStaticProperties
    static acres: UnitArea;
    // ownStaticProperties
    static ares: UnitArea;
    // ownStaticProperties
    static hectares: UnitArea;
    // ownStaticProperties
    static squareCentimeters: UnitArea;
    // ownStaticProperties
    static squareFeet: UnitArea;
    // ownStaticProperties
    static squareInches: UnitArea;
    // ownStaticProperties
    static squareKilometers: UnitArea;
    // ownStaticProperties
    static squareMegameters: UnitArea;
    // ownStaticProperties
    static squareMeters: UnitArea;
    // ownStaticProperties
    static squareMicrometers: UnitArea;
    // ownStaticProperties
    static squareMiles: UnitArea;
    // ownStaticProperties
    static squareMillimeters: UnitArea;
    // ownStaticProperties
    static squareNanometers: UnitArea;
    // ownStaticProperties
    static squareYards: UnitArea;
  }

  // interface
  class UnitConcentrationMass extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitConcentrationMass;
    // compoundStaticMethods
    static millimolesPerLiterWithGramsPerMole(_: number): UnitConcentrationMass;
    // ownStaticProperties
    static gramsPerLiter: UnitConcentrationMass;
    // ownStaticProperties
    static milligramsPerDeciliter: UnitConcentrationMass;
  }

  // interface
  class UnitConverter extends NSObject {
    // compoundInstanceMethods
    baseUnitValueFromValue(_: number): number;
    // compoundInstanceMethods
    valueFromBaseUnitValue(_: number): number;
  }

  // interface
  class UnitConverterLinear extends UnitConverter {
    // ownInstanceProperties
    coefficient: number;
    // ownInstanceProperties
    constant: number;
    // compoundInstanceMethods
    static createWithCoefficient(coefficient: number): UnitConverterLinear;
    // compoundInstanceMethods
    static createWithCoefficientConstant(coefficient: number, constant: number): UnitConverterLinear;
  }

  // interface
  class UnitDispersion extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitDispersion;
    // ownStaticProperties
    static partsPerMillion: UnitDispersion;
  }

  // interface
  class UnitDuration extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitDuration;
    // ownStaticProperties
    static hours: UnitDuration;
    // ownStaticProperties
    static microseconds: UnitDuration;
    // ownStaticProperties
    static milliseconds: UnitDuration;
    // ownStaticProperties
    static minutes: UnitDuration;
    // ownStaticProperties
    static nanoseconds: UnitDuration;
    // ownStaticProperties
    static picoseconds: UnitDuration;
    // ownStaticProperties
    static seconds: UnitDuration;
  }

  // interface
  class UnitElectricCharge extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitElectricCharge;
    // ownStaticProperties
    static ampereHours: UnitElectricCharge;
    // ownStaticProperties
    static coulombs: UnitElectricCharge;
    // ownStaticProperties
    static kiloampereHours: UnitElectricCharge;
    // ownStaticProperties
    static megaampereHours: UnitElectricCharge;
    // ownStaticProperties
    static microampereHours: UnitElectricCharge;
    // ownStaticProperties
    static milliampereHours: UnitElectricCharge;
  }

  // interface
  class UnitElectricCurrent extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitElectricCurrent;
    // ownStaticProperties
    static amperes: UnitElectricCurrent;
    // ownStaticProperties
    static kiloamperes: UnitElectricCurrent;
    // ownStaticProperties
    static megaamperes: UnitElectricCurrent;
    // ownStaticProperties
    static microamperes: UnitElectricCurrent;
    // ownStaticProperties
    static milliamperes: UnitElectricCurrent;
  }

  // interface
  class UnitElectricPotentialDifference extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitElectricPotentialDifference;
    // ownStaticProperties
    static kilovolts: UnitElectricPotentialDifference;
    // ownStaticProperties
    static megavolts: UnitElectricPotentialDifference;
    // ownStaticProperties
    static microvolts: UnitElectricPotentialDifference;
    // ownStaticProperties
    static millivolts: UnitElectricPotentialDifference;
    // ownStaticProperties
    static volts: UnitElectricPotentialDifference;
  }

  // interface
  class UnitElectricResistance extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitElectricResistance;
    // ownStaticProperties
    static kiloohms: UnitElectricResistance;
    // ownStaticProperties
    static megaohms: UnitElectricResistance;
    // ownStaticProperties
    static microohms: UnitElectricResistance;
    // ownStaticProperties
    static milliohms: UnitElectricResistance;
    // ownStaticProperties
    static ohms: UnitElectricResistance;
  }

  // interface
  class UnitEnergy extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitEnergy;
    // ownStaticProperties
    static calories: UnitEnergy;
    // ownStaticProperties
    static joules: UnitEnergy;
    // ownStaticProperties
    static kilocalories: UnitEnergy;
    // ownStaticProperties
    static kilojoules: UnitEnergy;
    // ownStaticProperties
    static kilowattHours: UnitEnergy;
  }

  // interface
  class UnitFrequency extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitFrequency;
    // ownStaticProperties
    static framesPerSecond: UnitFrequency;
    // ownStaticProperties
    static gigahertz: UnitFrequency;
    // ownStaticProperties
    static hertz: UnitFrequency;
    // ownStaticProperties
    static kilohertz: UnitFrequency;
    // ownStaticProperties
    static megahertz: UnitFrequency;
    // ownStaticProperties
    static microhertz: UnitFrequency;
    // ownStaticProperties
    static millihertz: UnitFrequency;
    // ownStaticProperties
    static nanohertz: UnitFrequency;
    // ownStaticProperties
    static terahertz: UnitFrequency;
  }

  // interface
  class UnitFuelEfficiency extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitFuelEfficiency;
    // ownStaticProperties
    static litersPer100Kilometers: UnitFuelEfficiency;
    // ownStaticProperties
    static milesPerGallon: UnitFuelEfficiency;
    // ownStaticProperties
    static milesPerImperialGallon: UnitFuelEfficiency;
  }

  // interface
  class UnitIlluminance extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitIlluminance;
    // ownStaticProperties
    static lux: UnitIlluminance;
  }

  // interface
  class NSUnitInformationStorage extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): NSUnitInformationStorage;
    // ownStaticProperties
    static bits: NSUnitInformationStorage;
    // ownStaticProperties
    static bytes: NSUnitInformationStorage;
    // ownStaticProperties
    static exabits: NSUnitInformationStorage;
    // ownStaticProperties
    static exabytes: NSUnitInformationStorage;
    // ownStaticProperties
    static exbibits: NSUnitInformationStorage;
    // ownStaticProperties
    static exbibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static gibibits: NSUnitInformationStorage;
    // ownStaticProperties
    static gibibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static gigabits: NSUnitInformationStorage;
    // ownStaticProperties
    static gigabytes: NSUnitInformationStorage;
    // ownStaticProperties
    static kibibits: NSUnitInformationStorage;
    // ownStaticProperties
    static kibibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static kilobits: NSUnitInformationStorage;
    // ownStaticProperties
    static kilobytes: NSUnitInformationStorage;
    // ownStaticProperties
    static mebibits: NSUnitInformationStorage;
    // ownStaticProperties
    static mebibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static megabits: NSUnitInformationStorage;
    // ownStaticProperties
    static megabytes: NSUnitInformationStorage;
    // ownStaticProperties
    static nibbles: NSUnitInformationStorage;
    // ownStaticProperties
    static pebibits: NSUnitInformationStorage;
    // ownStaticProperties
    static pebibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static petabits: NSUnitInformationStorage;
    // ownStaticProperties
    static petabytes: NSUnitInformationStorage;
    // ownStaticProperties
    static tebibits: NSUnitInformationStorage;
    // ownStaticProperties
    static tebibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static terabits: NSUnitInformationStorage;
    // ownStaticProperties
    static terabytes: NSUnitInformationStorage;
    // ownStaticProperties
    static yobibits: NSUnitInformationStorage;
    // ownStaticProperties
    static yobibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static yottabits: NSUnitInformationStorage;
    // ownStaticProperties
    static yottabytes: NSUnitInformationStorage;
    // ownStaticProperties
    static zebibits: NSUnitInformationStorage;
    // ownStaticProperties
    static zebibytes: NSUnitInformationStorage;
    // ownStaticProperties
    static zettabits: NSUnitInformationStorage;
    // ownStaticProperties
    static zettabytes: NSUnitInformationStorage;
  }

  // interface
  class UnitLength extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitLength;
    // ownStaticProperties
    static astronomicalUnits: UnitLength;
    // ownStaticProperties
    static centimeters: UnitLength;
    // ownStaticProperties
    static decameters: UnitLength;
    // ownStaticProperties
    static decimeters: UnitLength;
    // ownStaticProperties
    static fathoms: UnitLength;
    // ownStaticProperties
    static feet: UnitLength;
    // ownStaticProperties
    static furlongs: UnitLength;
    // ownStaticProperties
    static hectometers: UnitLength;
    // ownStaticProperties
    static inches: UnitLength;
    // ownStaticProperties
    static kilometers: UnitLength;
    // ownStaticProperties
    static lightyears: UnitLength;
    // ownStaticProperties
    static megameters: UnitLength;
    // ownStaticProperties
    static meters: UnitLength;
    // ownStaticProperties
    static micrometers: UnitLength;
    // ownStaticProperties
    static miles: UnitLength;
    // ownStaticProperties
    static millimeters: UnitLength;
    // ownStaticProperties
    static nanometers: UnitLength;
    // ownStaticProperties
    static nauticalMiles: UnitLength;
    // ownStaticProperties
    static parsecs: UnitLength;
    // ownStaticProperties
    static picometers: UnitLength;
    // ownStaticProperties
    static scandinavianMiles: UnitLength;
    // ownStaticProperties
    static yards: UnitLength;
  }

  // interface
  class UnitMass extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitMass;
    // ownStaticProperties
    static carats: UnitMass;
    // ownStaticProperties
    static centigrams: UnitMass;
    // ownStaticProperties
    static decigrams: UnitMass;
    // ownStaticProperties
    static grams: UnitMass;
    // ownStaticProperties
    static kilograms: UnitMass;
    // ownStaticProperties
    static metricTons: UnitMass;
    // ownStaticProperties
    static micrograms: UnitMass;
    // ownStaticProperties
    static milligrams: UnitMass;
    // ownStaticProperties
    static nanograms: UnitMass;
    // ownStaticProperties
    static ounces: UnitMass;
    // ownStaticProperties
    static ouncesTroy: UnitMass;
    // ownStaticProperties
    static picograms: UnitMass;
    // ownStaticProperties
    static poundsMass: UnitMass;
    // ownStaticProperties
    static shortTons: UnitMass;
    // ownStaticProperties
    static slugs: UnitMass;
    // ownStaticProperties
    static stones: UnitMass;
  }

  // interface
  class UnitPower extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitPower;
    // ownStaticProperties
    static femtowatts: UnitPower;
    // ownStaticProperties
    static gigawatts: UnitPower;
    // ownStaticProperties
    static horsepower: UnitPower;
    // ownStaticProperties
    static kilowatts: UnitPower;
    // ownStaticProperties
    static megawatts: UnitPower;
    // ownStaticProperties
    static microwatts: UnitPower;
    // ownStaticProperties
    static milliwatts: UnitPower;
    // ownStaticProperties
    static nanowatts: UnitPower;
    // ownStaticProperties
    static picowatts: UnitPower;
    // ownStaticProperties
    static terawatts: UnitPower;
    // ownStaticProperties
    static watts: UnitPower;
  }

  // interface
  class UnitPressure extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitPressure;
    // ownStaticProperties
    static bars: UnitPressure;
    // ownStaticProperties
    static gigapascals: UnitPressure;
    // ownStaticProperties
    static hectopascals: UnitPressure;
    // ownStaticProperties
    static inchesOfMercury: UnitPressure;
    // ownStaticProperties
    static kilopascals: UnitPressure;
    // ownStaticProperties
    static megapascals: UnitPressure;
    // ownStaticProperties
    static millibars: UnitPressure;
    // ownStaticProperties
    static millimetersOfMercury: UnitPressure;
    // ownStaticProperties
    static newtonsPerMetersSquared: UnitPressure;
    // ownStaticProperties
    static poundsForcePerSquareInch: UnitPressure;
  }

  // interface
  class UnitSpeed extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitSpeed;
    // ownStaticProperties
    static kilometersPerHour: UnitSpeed;
    // ownStaticProperties
    static knots: UnitSpeed;
    // ownStaticProperties
    static metersPerSecond: UnitSpeed;
    // ownStaticProperties
    static milesPerHour: UnitSpeed;
  }

  // interface
  class UnitTemperature extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitTemperature;
    // ownStaticProperties
    static celsius: UnitTemperature;
    // ownStaticProperties
    static fahrenheit: UnitTemperature;
    // ownStaticProperties
    static kelvin: UnitTemperature;
  }

  // interface
  class UnitVolume extends Dimension {
    // compoundStaticMethods
    //  static baseUnit(): UnitVolume;
    // ownStaticProperties
    static acreFeet: UnitVolume;
    // ownStaticProperties
    static bushels: UnitVolume;
    // ownStaticProperties
    static centiliters: UnitVolume;
    // ownStaticProperties
    static cubicCentimeters: UnitVolume;
    // ownStaticProperties
    static cubicDecimeters: UnitVolume;
    // ownStaticProperties
    static cubicFeet: UnitVolume;
    // ownStaticProperties
    static cubicInches: UnitVolume;
    // ownStaticProperties
    static cubicKilometers: UnitVolume;
    // ownStaticProperties
    static cubicMeters: UnitVolume;
    // ownStaticProperties
    static cubicMiles: UnitVolume;
    // ownStaticProperties
    static cubicMillimeters: UnitVolume;
    // ownStaticProperties
    static cubicYards: UnitVolume;
    // ownStaticProperties
    static cups: UnitVolume;
    // ownStaticProperties
    static deciliters: UnitVolume;
    // ownStaticProperties
    static fluidOunces: UnitVolume;
    // ownStaticProperties
    static gallons: UnitVolume;
    // ownStaticProperties
    static imperialFluidOunces: UnitVolume;
    // ownStaticProperties
    static imperialGallons: UnitVolume;
    // ownStaticProperties
    static imperialPints: UnitVolume;
    // ownStaticProperties
    static imperialQuarts: UnitVolume;
    // ownStaticProperties
    static imperialTablespoons: UnitVolume;
    // ownStaticProperties
    static imperialTeaspoons: UnitVolume;
    // ownStaticProperties
    static kiloliters: UnitVolume;
    // ownStaticProperties
    static liters: UnitVolume;
    // ownStaticProperties
    static megaliters: UnitVolume;
    // ownStaticProperties
    static metricCups: UnitVolume;
    // ownStaticProperties
    static milliliters: UnitVolume;
    // ownStaticProperties
    static pints: UnitVolume;
    // ownStaticProperties
    static quarts: UnitVolume;
    // ownStaticProperties
    static tablespoons: UnitVolume;
    // ownStaticProperties
    static teaspoons: UnitVolume;
  }

  // interface
  class NSUserActivity extends NSObject {
    // ownInstanceProperties
    activityType: string;
    // ownInstanceProperties
    delegate: NSUserActivityDelegate;
    setDelegate(_: NSUserActivityDelegate)
    // ownInstanceProperties
    detectedBarcodeDescriptor: CIBarcodeDescriptor;
    // ownInstanceProperties
    isEligibleForHandoff: boolean;
    setEligibleForHandoff(_: boolean)
    // ownInstanceProperties
    isEligibleForPublicIndexing: boolean;
    setEligibleForPublicIndexing(_: boolean)
    // ownInstanceProperties
    isEligibleForSearch: boolean;
    setEligibleForSearch(_: boolean)
    // ownInstanceProperties
    expirationDate: Date;
    setExpirationDate(_: Date)
    // ownInstanceProperties
    keywords: NSSet<string>;
    setKeywords(_: NSSet<string>)
    // ownInstanceProperties
    needsSave: boolean;
    setNeedsSave(_: boolean)
    // ownInstanceProperties
    referrerURL: NSURL;
    setReferrerURL(_: NSURL)
    // ownInstanceProperties
    requiredUserInfoKeys: NSSet<string>;
    setRequiredUserInfoKeys(_: NSSet<string>)
    // ownInstanceProperties
    supportsContinuationStreams: boolean;
    setSupportsContinuationStreams(_: boolean)
    // ownInstanceProperties
    targetContentIdentifier: string;
    setTargetContentIdentifier(_: string)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>)
    // ownInstanceProperties
    webpageURL: NSURL;
    setWebpageURL(_: NSURL)
    // compoundInstanceMethods
    addUserInfoEntriesFromDictionary(from: Map<any, any>): void;
    // compoundInstanceMethods
    becomeCurrent(): void;
    // compoundInstanceMethods
    getContinuationStreamsWithCompletionHandler(completionHandler?: (p1: InputStream, p2: OutputStream, p3: NSError) => void): void;
    // compoundInstanceMethods
    static createWithActivityType(activityType: string): NSUserActivity;
    // compoundInstanceMethods
    invalidate(): void;
    // compoundInstanceMethods
    resignCurrent(): void;
  }

  interface NSUserActivityDelegate extends NSObject {
    // instance method
    userActivityDidReceiveInputStreamOutputStream?(_: NSUserActivity, didReceive: InputStream, outputStream: OutputStream): void;
    // instance method
    userActivityWasContinued?(_: NSUserActivity): void;
    // instance method
    userActivityWillSave?(_: NSUserActivity): void;
  }

  // interface
  class NSUserAppleScriptTask extends NSUserScriptTask {
    // compoundInstanceMethods
    executeWithWithAppleEventCompletionHandler(withAppleEvent?: NSAppleEventDescriptor, completionHandler?: (p1: NSAppleEventDescriptor, p2: NSError) => void): void;
  }

  // interface
  class NSUserAutomatorTask extends NSUserScriptTask {
    // ownInstanceProperties
    variables: Map<string, any>;
    setVariables(_: Map<string, any>)
    // compoundInstanceMethods
    executeWithWithInputCompletionHandler(withInput?: NSSecureCoding, completionHandler?: (p1: any, p2: NSError) => void): void;
  }

  // interface
  class UserDefaults extends NSObject {
    // compoundStaticMethods
    static resetStandardUserDefaults(): void;
    // ownInstanceProperties
    volatileDomainNames: string[];
    // ownStaticProperties
    static standardUserDefaults: UserDefaults;
    // compoundInstanceMethods
    URLForKey(_: string): NSURL;
    // compoundInstanceMethods
    addSuiteNamed(named: string): void;
    // compoundInstanceMethods
    arrayForKey(_: string): any[];
    // compoundInstanceMethods
    boolForKey(_: string): boolean;
    // compoundInstanceMethods
    dataForKey(_: string): NSData;
    // compoundInstanceMethods
    dictionaryForKey(_: string): Map<string, any>;
    // compoundInstanceMethods
    dictionaryRepresentation(): Map<string, any>;
    // compoundInstanceMethods
    doubleForKey(_: string): number;
    // compoundInstanceMethods
    floatForKey(_: string): number;
    // compoundInstanceMethods
    static createWithSuiteName(suiteName?: string): UserDefaults;
    // compoundInstanceMethods
    integerForKey(_: string): number;
    // compoundInstanceMethods
    objectForKey(_: string): any;
    // compoundInstanceMethods
    objectIsForcedForKey(_: string): boolean;
    // compoundInstanceMethods
    objectIsForcedForKeyInDomain(_: string, inDomain: string): boolean;
    // compoundInstanceMethods
    persistentDomainForName(_: string): Map<string, any>;
    // compoundInstanceMethods
    registerDefaults(defaults: Map<string, any>): void;
    // compoundInstanceMethods
    removeObjectForKey(_: string): void;
    // compoundInstanceMethods
    removePersistentDomainForName(_: string): void;
    // compoundInstanceMethods
    removeSuiteNamed(named: string): void;
    // compoundInstanceMethods
    removeVolatileDomainForName(_: string): void;
    // compoundInstanceMethods
    setBoolForKey(_: boolean, forKey: string): void;
    // compoundInstanceMethods
    setDoubleForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    setFloatForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    setIntegerForKey(_: number, forKey: string): void;
    // compoundInstanceMethods
    setObjectForKey(_?: any, forKey?: string): void;
    // compoundInstanceMethods
    setPersistentDomainForName(_: Map<string, any>, forName: string): void;
    // compoundInstanceMethods
    setURLForKey(_?: NSURL, forKey?: string): void;
    // compoundInstanceMethods
    setVolatileDomainForName(_: Map<string, any>, forName: string): void;
    // compoundInstanceMethods
    stringArrayForKey(_: string): string[];
    // compoundInstanceMethods
    stringForKey(_: string): string;
    // compoundInstanceMethods
    synchronize(): boolean;
    // compoundInstanceMethods
    volatileDomainForName(_: string): Map<string, any>;
  }

  // export function NSUserName(): string;

  // interface
  class NSUserNotification extends NSObject {
    // ownInstanceProperties
    actionButtonTitle: string;
    setActionButtonTitle(_: string)
    // ownInstanceProperties
    activationType: NSUserNotification.ActivationType;
    // ownInstanceProperties
    actualDeliveryDate: Date;
    // ownInstanceProperties
    additionalActions: NSUserNotificationAction[];
    setAdditionalActions(_: NSUserNotificationAction[])
    // ownInstanceProperties
    additionalActivationAction: NSUserNotificationAction;
    // ownInstanceProperties
    contentImage: NSImage;
    setContentImage(_: NSImage)
    // ownInstanceProperties
    deliveryDate: Date;
    setDeliveryDate(_: Date)
    // ownInstanceProperties
    deliveryRepeatInterval: NSDateComponents;
    setDeliveryRepeatInterval(_: NSDateComponents)
    // ownInstanceProperties
    deliveryTimeZone: NSTimeZone;
    setDeliveryTimeZone(_: NSTimeZone)
    // ownInstanceProperties
    hasActionButton: boolean;
    setHasActionButton(_: boolean)
    // ownInstanceProperties
    hasReplyButton: boolean;
    setHasReplyButton(_: boolean)
    // ownInstanceProperties
    identifier: string;
    setIdentifier(_: string)
    // ownInstanceProperties
    informativeText: string;
    setInformativeText(_: string)
    // ownInstanceProperties
    otherButtonTitle: string;
    setOtherButtonTitle(_: string)
    // ownInstanceProperties
    isPresented: boolean;
    // ownInstanceProperties
    isRemote: boolean;
    // ownInstanceProperties
    response: NSAttributedString;
    // ownInstanceProperties
    responsePlaceholder: string;
    setResponsePlaceholder(_: string)
    // ownInstanceProperties
    soundName: string;
    setSoundName(_: string)
    // ownInstanceProperties
    subtitle: string;
    setSubtitle(_: string)
    // ownInstanceProperties
    title: string;
    setTitle(_: string)
    // ownInstanceProperties
    userInfo: Map<string, any>;
    setUserInfo(_: Map<string, any>)
  }

  // interface
  class NSUserNotificationAction extends NSObject {
    // compoundStaticMethods
    static actionWithIdentifierTitle(identifier?: string, title?: string): NSUserNotificationAction;
    // ownInstanceProperties
    identifier: string;
    // ownInstanceProperties
    title: string;
  }

  // interface
  class NSUserNotificationCenter extends NSObject {
    // ownInstanceProperties
    delegate: NSUserNotificationCenterDelegate;
    setDelegate(_: NSUserNotificationCenterDelegate)
    // ownInstanceProperties
    deliveredNotifications: NSUserNotification[];
    // ownInstanceProperties
    scheduledNotifications: NSUserNotification[];
    setScheduledNotifications(_: NSUserNotification[])
    // ownStaticProperties
    static defaultUserNotificationCenter: NSUserNotificationCenter;
    // compoundInstanceMethods
    deliverNotification(_: NSUserNotification): void;
    // compoundInstanceMethods
    removeAllDeliveredNotifications(): void;
    // compoundInstanceMethods
    removeDeliveredNotification(_: NSUserNotification): void;
    // compoundInstanceMethods
    removeScheduledNotification(_: NSUserNotification): void;
    // compoundInstanceMethods
    scheduleNotification(_: NSUserNotification): void;
  }

  interface NSUserNotificationCenterDelegate extends NSObject {
    // instance method
    userNotificationCenterDidDeliverNotification?(_: NSUserNotificationCenter, didDeliver: NSUserNotification): void;
    // instance method
    userNotificationCenterDidActivateNotification?(_: NSUserNotificationCenter, didActivate: NSUserNotification): void;
    // instance method
    userNotificationCenterShouldPresentNotification?(_: NSUserNotificationCenter, shouldPresent: NSUserNotification): boolean;
  }

  // interface
  class NSUserScriptTask extends NSObject {
    // ownInstanceProperties
    scriptURL: NSURL;
    // compoundInstanceMethods
    executeWithCompletionHandler(completionHandler?: (p1: NSError) => void): void;
    // compoundInstanceMethods
    static createWithUrl(URL: NSURL): NSUserScriptTask;
  }

  // interface
  class NSUserUnixTask extends NSUserScriptTask {
    // ownInstanceProperties
    standardError: FileHandle;
    setStandardError(_: FileHandle)
    // ownInstanceProperties
    standardInput: FileHandle;
    setStandardInput(_: FileHandle)
    // ownInstanceProperties
    standardOutput: FileHandle;
    setStandardOutput(_: FileHandle)
    // compoundInstanceMethods
    executeWithWithArgumentsCompletionHandler(withArguments?: string[], completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class NSValue extends NSObject {
    // compoundStaticMethods
    static valueWithCMTime(time: CMTime): NSValue;
    // compoundStaticMethods
    static valueWithCMTimeMapping(timeMapping: CMTimeMapping): NSValue;
    // compoundStaticMethods
    static valueWithCMTimeRange(timeRange: CMTimeRange): NSValue;
    // ownInstanceProperties
    CATransform3DValue: CATransform3D;
    // ownInstanceProperties
    CMTimeMappingValue: CMTimeMapping;
    // ownInstanceProperties
    CMTimeRangeValue: CMTimeRange;
    // ownInstanceProperties
    CMTimeValue: CMTime;
    // ownInstanceProperties
    edgeInsetsValue: NSEdgeInsets;
    // ownInstanceProperties
    nonretainedObjectValue: any;
    // ownInstanceProperties
    objCType: string;
    // ownInstanceProperties
    pointValue: CGPoint;
    // ownInstanceProperties
    pointerValue: any;
    // ownInstanceProperties
    rangeValue: NSRange;
    // ownInstanceProperties
    rectValue: CGRect;
    // ownInstanceProperties
    sizeValue: CGSize;
    // compoundInstanceMethods
    getValue(_: any): void;
    // compoundInstanceMethods
    getValueSize(_: any, size: number): void;
    // compoundInstanceMethods
    static createWithBytesObjCType(bytes: any, objCType: string): NSValue;
    // compoundInstanceMethods
    isEqualToValue(to: NSValue): boolean;
  }

  // interface
  class ValueTransformer extends NSObject {
    // compoundStaticMethods
    static allowsReverseTransformation(): boolean;
    // compoundStaticMethods
    static setValueTransformerForName(_?: ValueTransformer, forName?: string): void;
    // compoundStaticMethods
    static transformedValueClass(): typeof NSObject;
    // compoundStaticMethods
    static valueTransformerNames(): string[];
    // compoundInstanceMethods
    reverseTransformedValue(_?: any): any;
    // compoundInstanceMethods
    transformedValue(_?: any): any;
  }

  // interface
  class NSWhoseSpecifier extends NSScriptObjectSpecifier {
    // ownInstanceProperties
    endSubelementIdentifier: NSWhoseSpecifier.SubelementIdentifier;
    setEndSubelementIdentifier(_: NSWhoseSpecifier.SubelementIdentifier)
    // ownInstanceProperties
    endSubelementIndex: number;
    setEndSubelementIndex(_: number)
    // ownInstanceProperties
    startSubelementIdentifier: NSWhoseSpecifier.SubelementIdentifier;
    setStartSubelementIdentifier(_: NSWhoseSpecifier.SubelementIdentifier)
    // ownInstanceProperties
    startSubelementIndex: number;
    setStartSubelementIndex(_: number)
    // ownInstanceProperties
    test: NSScriptWhoseTest;
    setTest(_: NSScriptWhoseTest)
    // compoundInstanceMethods
    static createWithContainerClassDescriptionContainerSpecifierKeyTest(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, test?: NSScriptWhoseTest): NSWhoseSpecifier;
  }

  // interface
  class XMLDTD extends XMLNode {
    // compoundStaticMethods
    static predefinedEntityDeclarationForName(_: string): XMLDTDNode;
    // ownInstanceProperties
    publicID: string;
    setPublicID(_: string)
    // ownInstanceProperties
    systemID: string;
    setSystemID(_: string)
    // compoundInstanceMethods
    addChild(_: XMLNode): void;
    // compoundInstanceMethods
    attributeDeclarationForNameElementName(_: string, elementName: string): XMLDTDNode;
    // compoundInstanceMethods
    elementDeclarationForName(_: string): XMLDTDNode;
    // compoundInstanceMethods
    entityDeclarationForName(_: string): XMLDTDNode;
    // compoundInstanceMethods
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options: XMLNode.Options): XMLDTD;
    // compoundInstanceMethods
    static createWithDataOptions(data: NSData, options: XMLNode.Options): XMLDTD;
    // compoundInstanceMethods
    insertChildAtIndex(_: XMLNode, atIndex: number): void;
    // compoundInstanceMethods
    insertChildrenAtIndex(_: XMLNode[], atIndex: number): void;
    // compoundInstanceMethods
    notationDeclarationForName(_: string): XMLDTDNode;
    // compoundInstanceMethods
    removeChildAtIndex(_: number): void;
    // compoundInstanceMethods
    replaceChildAtIndexWithNode(_: number, withNode: XMLNode): void;
    // compoundInstanceMethods
    setChildren(_?: XMLNode[]): void;
  }

  // interface
  class XMLDTDNode extends XMLNode {
    // ownInstanceProperties
    DTDKind: XMLDTDNode.DTDKind;
    setDTDKind(_: XMLDTDNode.DTDKind)
    // ownInstanceProperties
    isExternal: boolean;
    // ownInstanceProperties
    notationName: string;
    setNotationName(_: string)
    // ownInstanceProperties
    publicID: string;
    setPublicID(_: string)
    // ownInstanceProperties
    systemID: string;
    setSystemID(_: string)
    // compoundInstanceMethods
    static createWithXMLString(XMLString: string): XMLDTDNode;
  }

  // interface
  class XMLDocument extends XMLNode {
    // compoundStaticMethods
    static replacementClassForClass(_: typeof NSObject): typeof NSObject;
    // ownInstanceProperties
    DTD: XMLDTD;
    setDTD(_: XMLDTD)
    // ownInstanceProperties
    MIMEType: string;
    setMIMEType(_: string)
    // ownInstanceProperties
    XMLData: NSData;
    // ownInstanceProperties
    characterEncoding: string;
    setCharacterEncoding(_: string)
    // ownInstanceProperties
    documentContentKind: XMLDocument.ContentKind;
    setDocumentContentKind(_: XMLDocument.ContentKind)
    // ownInstanceProperties
    isStandalone: boolean;
    setStandalone(_: boolean)
    // ownInstanceProperties
    //   version: string;
    setVersion(_: string)
    // compoundInstanceMethods
    XMLDataWithOptions(_: XMLNode.Options): NSData;
    // compoundInstanceMethods
    addChild(_: XMLNode): void;
    // compoundInstanceMethods
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options: XMLNode.Options): XMLDocument;
    // compoundInstanceMethods
    static createWithDataOptions(data: NSData, options: XMLNode.Options): XMLDocument;
    // compoundInstanceMethods
    static createWithRootElement(rootElement?: XMLElement): XMLDocument;
    // compoundInstanceMethods
    static createWithXMLStringOptions(XMLString: string, options: XMLNode.Options): XMLDocument;
    // compoundInstanceMethods
    insertChildAtIndex(_: XMLNode, atIndex: number): void;
    // compoundInstanceMethods
    insertChildrenAtIndex(_: XMLNode[], atIndex: number): void;
    // compoundInstanceMethods
    objectByApplyingXSLTArgumentsError(arguments_: NSData, error?: Map<string, string>): any;
    // compoundInstanceMethods
    objectByApplyingXSLTAtURLArgumentsError(arguments_: NSURL, error?: Map<string, string>): any;
    // compoundInstanceMethods
    objectByApplyingXSLTStringArgumentsError(arguments_: string, error?: Map<string, string>): any;
    // compoundInstanceMethods
    removeChildAtIndex(_: number): void;
    // compoundInstanceMethods
    replaceChildAtIndexWithNode(_: number, withNode: XMLNode): void;
    // compoundInstanceMethods
    rootElement(): XMLElement;
    // compoundInstanceMethods
    setChildren(_?: XMLNode[]): void;
    // compoundInstanceMethods
    setRootElement(_: XMLElement): void;
    // compoundInstanceMethods
    validateAndReturnError(): boolean;
  }

  // interface
  class XMLElement extends XMLNode {
    // ownInstanceProperties
    attributes: XMLNode[];
    setAttributes(_: XMLNode[])
    // ownInstanceProperties
    namespaces: XMLNode[];
    setNamespaces(_: XMLNode[])
    // compoundInstanceMethods
    addAttribute(_: XMLNode): void;
    // compoundInstanceMethods
    addChild(_: XMLNode): void;
    // compoundInstanceMethods
    addNamespace(_: XMLNode): void;
    // compoundInstanceMethods
    attributeForLocalNameUri(_: string, URI?: string): XMLNode;
    // compoundInstanceMethods
    attributeForName(_: string): XMLNode;
    // compoundInstanceMethods
    elementsForLocalNameUri(_: string, URI?: string): XMLElement[];
    // compoundInstanceMethods
    elementsForName(_: string): XMLElement[];
    // compoundInstanceMethods
    static createWithName(name: string): XMLElement;
    // compoundInstanceMethods
    static createWithNameUri(name: string, URI?: string): XMLElement;
    // compoundInstanceMethods
    static createWithNameStringValue(name: string, stringValue?: string): XMLElement;
    // compoundInstanceMethods
    static createWithXMLString(XMLString: string): XMLElement;
    // compoundInstanceMethods
    insertChildAtIndex(_: XMLNode, atIndex: number): void;
    // compoundInstanceMethods
    insertChildrenAtIndex(_: XMLNode[], atIndex: number): void;
    // compoundInstanceMethods
    namespaceForPrefix(_: string): XMLNode;
    // compoundInstanceMethods
    normalizeAdjacentTextNodesPreservingCDATA(_: boolean): void;
    // compoundInstanceMethods
    removeAttributeForName(_: string): void;
    // compoundInstanceMethods
    removeChildAtIndex(_: number): void;
    // compoundInstanceMethods
    removeNamespaceForPrefix(_: string): void;
    // compoundInstanceMethods
    replaceChildAtIndexWithNode(_: number, withNode: XMLNode): void;
    // compoundInstanceMethods
    resolveNamespaceForName(_: string): XMLNode;
    // compoundInstanceMethods
    resolvePrefixForNamespaceURI(_: string): string;
    // compoundInstanceMethods
    setAttributesAsDictionary(_: Map<any, any>): void;
    // compoundInstanceMethods
    setAttributesWithDictionary(_: Map<string, string>): void;
    // compoundInstanceMethods
    setChildren(_?: XMLNode[]): void;
  }

  // interface
  class XMLNode extends NSObject {
    // compoundStaticMethods
    static DTDNodeWithXMLString(_: string): any;
    // compoundStaticMethods
    static attributeWithNameUriStringValue(_: string, URI: string, stringValue: string): any;
    // compoundStaticMethods
    static attributeWithNameStringValue(_: string, stringValue: string): any;
    // compoundStaticMethods
    static commentWithStringValue(_: string): any;
    // compoundStaticMethods
    static document(): any;
    // compoundStaticMethods
    static documentWithRootElement(_: XMLElement): any;
    // compoundStaticMethods
    static elementWithName(_: string): any;
    // compoundStaticMethods
    static elementWithNameUri(_: string, URI: string): any;
    // compoundStaticMethods
    static elementWithNameChildrenAttributes(_: string, children?: XMLNode[], attributes?: XMLNode[]): any;
    // compoundStaticMethods
    static elementWithNameStringValue(_: string, stringValue: string): any;
    // compoundStaticMethods
    static localNameForName(_: string): string;
    // compoundStaticMethods
    static namespaceWithNameStringValue(_: string, stringValue: string): any;
    // compoundStaticMethods
    static predefinedNamespaceForPrefix(_: string): XMLNode;
    // compoundStaticMethods
    static prefixForName(_: string): string;
    // compoundStaticMethods
    static processingInstructionWithNameStringValue(_: string, stringValue: string): any;
    // compoundStaticMethods
    static textWithStringValue(_: string): any;
    // ownInstanceProperties
    URI: string;
    setURI(_: string)
    // ownInstanceProperties
    XMLString: string;
    // ownInstanceProperties
    XPath: string;
    // ownInstanceProperties
    childCount: number;
    // ownInstanceProperties
    children: XMLNode[];
    // ownInstanceProperties
    index: number;
    // ownInstanceProperties
    kind: XMLNode.Kind;
    // ownInstanceProperties
    level: number;
    // ownInstanceProperties
    localName: string;
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    nextNode: XMLNode;
    // ownInstanceProperties
    nextSibling: XMLNode;
    // ownInstanceProperties
    objectValue: any;
    setObjectValue(_: any)
    // ownInstanceProperties
    parent: XMLNode;
    // ownInstanceProperties
    prefix: string;
    // ownInstanceProperties
    previousNode: XMLNode;
    // ownInstanceProperties
    previousSibling: XMLNode;
    // ownInstanceProperties
    rootDocument: XMLDocument;
    // ownInstanceProperties
    stringValue: string;
    setStringValue(_: string)
    // compoundInstanceMethods
    XMLStringWithOptions(_: XMLNode.Options): string;
    // compoundInstanceMethods
    canonicalXMLStringPreservingComments(_: boolean): string;
    // compoundInstanceMethods
    childAtIndex(_: number): XMLNode;
    // compoundInstanceMethods
    detach(): void;
    // compoundInstanceMethods
    static createWithKind(kind: XMLNode.Kind): XMLNode;
    // compoundInstanceMethods
    static createWithKindOptions(kind: XMLNode.Kind, options: XMLNode.Options): XMLNode;
    // compoundInstanceMethods
    nodesForXPathError(error: string): XMLNode[];
    // compoundInstanceMethods
    objectsForXQueryConstantsError(constants: string, error?: Map<string, any>): any[];
    // compoundInstanceMethods
    objectsForXQueryError(error: string): any[];
    // compoundInstanceMethods
    setStringValueResolvingEntities(_: string, resolvingEntities: boolean): void;
  }

  // interface
  class XMLParser extends NSObject {
    // ownInstanceProperties
    allowedExternalEntityURLs: NSSet<NSURL>;
    setAllowedExternalEntityURLs(_: NSSet<NSURL>)
    // ownInstanceProperties
    columnNumber: number;
    // ownInstanceProperties
    delegate: XMLParserDelegate;
    setDelegate(_: XMLParserDelegate)
    // ownInstanceProperties
    externalEntityResolvingPolicy: XMLParser.ExternalEntityResolvingPolicy;
    setExternalEntityResolvingPolicy(_: XMLParser.ExternalEntityResolvingPolicy)
    // ownInstanceProperties
    lineNumber: number;
    // ownInstanceProperties
    parserError: NSError;
    // ownInstanceProperties
    publicID: string;
    // ownInstanceProperties
    shouldProcessNamespaces: boolean;
    setShouldProcessNamespaces(_: boolean)
    // ownInstanceProperties
    shouldReportNamespacePrefixes: boolean;
    setShouldReportNamespacePrefixes(_: boolean)
    // ownInstanceProperties
    shouldResolveExternalEntities: boolean;
    setShouldResolveExternalEntities(_: boolean)
    // ownInstanceProperties
    systemID: string;
    // compoundInstanceMethods
    abortParsing(): void;
    // compoundInstanceMethods
    static createWithContentsOfURL(contentsOfURL: NSURL): XMLParser;
    // compoundInstanceMethods
    static createWithData(data: NSData): XMLParser;
    // compoundInstanceMethods
    static createWithStream(stream: InputStream): XMLParser;
    // compoundInstanceMethods
    parse(): boolean;
  }

  interface XMLParserDelegate extends NSObject {
    // instance method
    parserDidEndElementNamespaceURIQualifiedName?(_: XMLParser, didEndElement: string, namespaceURI?: string, qualifiedName?: string): void;
    // instance method
    parserDidEndMappingPrefix?(_: XMLParser, didEndMappingPrefix: string): void;
    // instance method
    parserDidStartElementNamespaceURIQualifiedNameAttributes?(_: XMLParser, didStartElement: string, namespaceURI?: string, qualifiedName?: string, attributes?: Map<string, string>): void;
    // instance method
    parserDidStartMappingPrefixToURI?(_: XMLParser, didStartMappingPrefix: string, toURI: string): void;
    // instance method
    parserFoundAttributeDeclarationWithNameForElementTypeDefaultValue?(_: XMLParser, foundAttributeDeclarationWithName: string, forElement: string, type?: string, defaultValue?: string): void;
    // instance method
    parserFoundCDATA?(_: XMLParser, foundCDATA: NSData): void;
    // instance method
    parserFoundCharacters?(_: XMLParser, foundCharacters: string): void;
    // instance method
    parserFoundComment?(_: XMLParser, foundComment: string): void;
    // instance method
    parserFoundElementDeclarationWithNameModel?(_: XMLParser, foundElementDeclarationWithName: string, model: string): void;
    // instance method
    parserFoundExternalEntityDeclarationWithNamePublicIDSystemID?(_: XMLParser, foundExternalEntityDeclarationWithName: string, publicID?: string, systemID?: string): void;
    // instance method
    parserFoundIgnorableWhitespace?(_: XMLParser, foundIgnorableWhitespace: string): void;
    // instance method
    parserFoundInternalEntityDeclarationWithNameValue?(_: XMLParser, foundInternalEntityDeclarationWithName: string, value?: string): void;
    // instance method
    parserFoundNotationDeclarationWithNamePublicIDSystemID?(_: XMLParser, foundNotationDeclarationWithName: string, publicID?: string, systemID?: string): void;
    // instance method
    parserFoundProcessingInstructionWithTargetData?(_: XMLParser, foundProcessingInstructionWithTarget: string, data?: string): void;
    // instance method
    parserFoundUnparsedEntityDeclarationWithNamePublicIDSystemIDNotationName?(_: XMLParser, foundUnparsedEntityDeclarationWithName: string, publicID?: string, systemID?: string, notationName?: string): void;
    // instance method
    parserParseErrorOccurred?(_: XMLParser, parseErrorOccurred: NSError): void;
    // instance method
    parserResolveExternalEntityNameSystemID?(_: XMLParser, resolveExternalEntityName: string, systemID?: string): NSData;
    // instance method
    parserValidationErrorOccurred?(_: XMLParser, validationErrorOccurred: NSError): void;
    // instance method
    parserDidEndDocument?(_: XMLParser): void;
    // instance method
    parserDidStartDocument?(_: XMLParser): void;
  }

  // interface
  class NSXPCCoder extends NSCoder {
    // ownInstanceProperties
    connection: NSXPCConnection;
    // ownInstanceProperties
    userInfo: NSObject;
    setUserInfo(_: NSObject)
    // compoundInstanceMethods
    decodeXPCObjectOfTypeForKey(ofType: any, forKey: string): NSObject;
    // compoundInstanceMethods
    encodeXPCObjectForKey(_: NSObject, forKey: string): void;
  }

  // interface
  class NSXPCConnection extends NSObject {
    // compoundStaticMethods
    static currentConnection(): NSXPCConnection;
    // ownInstanceProperties
    auditSessionIdentifier: number;
    // ownInstanceProperties
    effectiveGroupIdentifier: number;
    // ownInstanceProperties
    effectiveUserIdentifier: number;
    // ownInstanceProperties
    endpoint: NSXPCListenerEndpoint;
    // ownInstanceProperties
    exportedInterface: NSXPCInterface;
    setExportedInterface(_: NSXPCInterface)
    // ownInstanceProperties
    exportedObject: any;
    setExportedObject(_: any)
    // ownInstanceProperties
    interruptionHandler: () => void;
    setInterruptionHandler(_: () => void)
    // ownInstanceProperties
    invalidationHandler: () => void;
    setInvalidationHandler(_: () => void)
    // ownInstanceProperties
    processIdentifier: number;
    // ownInstanceProperties
    remoteObjectInterface: NSXPCInterface;
    setRemoteObjectInterface(_: NSXPCInterface)
    // ownInstanceProperties
    remoteObjectProxy: any;
    // ownInstanceProperties
    serviceName: string;
    // compoundInstanceMethods
    static createWithListenerEndpoint(listenerEndpoint: NSXPCListenerEndpoint): NSXPCConnection;
    // compoundInstanceMethods
    static createWithMachServiceNameOptions(machServiceName: string, options: NSXPCConnection.Options): NSXPCConnection;
    // compoundInstanceMethods
    static createWithServiceName(serviceName: string): NSXPCConnection;
    // compoundInstanceMethods
    invalidate(): void;
    // compoundInstanceMethods
    resume(): void;
    // compoundInstanceMethods
    scheduleSendBarrierBlock(_: () => void): void;
    // compoundInstanceMethods
    suspend(): void;
  }

  // interface
  class NSXPCInterface extends NSObject {
    // compoundStaticMethods
    static interfaceWithProtocol(with_: any /* Protocol */): NSXPCInterface;
    // ownInstanceProperties
    protocol: any /* Protocol */;
    setProtocol(_: any /* Protocol */)
    // compoundInstanceMethods
    XPCTypeForSelectorArgumentIndexOfReply(for_: string, argumentIndex: number, ofReply: boolean): any;
    // compoundInstanceMethods
    classesForSelectorArgumentIndexOfReply(for_: string, argumentIndex: number, ofReply: boolean): NSSet<typeof NSObject>;
    // compoundInstanceMethods
    interfaceForSelectorArgumentIndexOfReply(_: string, argumentIndex: number, ofReply: boolean): NSXPCInterface;
    // compoundInstanceMethods
    setClassesForArgumentIndexOfReply(_: NSSet<typeof NSObject>, for_: string, argumentIndex: number, ofReply: boolean): void;
    // compoundInstanceMethods
    setInterfaceForSelectorArgumentIndexOfReply(_: NSXPCInterface, for_: string, argumentIndex: number, ofReply: boolean): void;
    // compoundInstanceMethods
    setXPCTypeForSelectorArgumentIndexOfReply(_: any, for_: string, argumentIndex: number, ofReply: boolean): void;
  }

  // interface
  class NSXPCListener extends NSObject {
    // compoundStaticMethods
    static anonymousListener(): NSXPCListener;
    // compoundStaticMethods
    static serviceListener(): NSXPCListener;
    // ownInstanceProperties
    delegate: NSXPCListenerDelegate;
    setDelegate(_: NSXPCListenerDelegate)
    // ownInstanceProperties
    endpoint: NSXPCListenerEndpoint;
    // compoundInstanceMethods
    static createWithMachServiceName(machServiceName: string): NSXPCListener;
    // compoundInstanceMethods
    invalidate(): void;
    // compoundInstanceMethods
    resume(): void;
    // compoundInstanceMethods
    suspend(): void;
  }

  interface NSXPCListenerDelegate extends NSObject {
    // instance method
    listenerShouldAcceptNewConnection?(_: NSXPCListener, shouldAcceptNewConnection: NSXPCConnection): boolean;
  }

  // interface
  class NSXPCListenerEndpoint extends NSObject {
  }

  interface NSXPCProxyCreating {
    remoteObjectProxy: any;
    // instance method
    remoteObjectProxyWithErrorHandler(_: (p1: NSError) => void): any;
    // instance method
    synchronousRemoteObjectProxyWithErrorHandler?(_: (p1: NSError) => void): any;
  }

  // interface
  class IKCameraDeviceView extends NSView {
    // ownInstanceProperties
    cameraDevice: ICCameraDevice;
    setCameraDevice(_: ICCameraDevice)
    // ownInstanceProperties
    canDeleteSelectedItems: boolean;
    // ownInstanceProperties
    canDownloadSelectedItems: boolean;
    // ownInstanceProperties
    canRotateSelectedItemsLeft: boolean;
    // ownInstanceProperties
    canRotateSelectedItemsRight: boolean;
    // ownInstanceProperties
    delegate: IKCameraDeviceViewDelegate;
    setDelegate(_: IKCameraDeviceViewDelegate)
    // ownInstanceProperties
    displaysDownloadsDirectoryControl: boolean;
    setDisplaysDownloadsDirectoryControl(_: boolean)
    // ownInstanceProperties
    displaysPostProcessApplicationControl: boolean;
    setDisplaysPostProcessApplicationControl(_: boolean)
    // ownInstanceProperties
    downloadAllControlLabel: string;
    setDownloadAllControlLabel(_: string)
    // ownInstanceProperties
    downloadSelectedControlLabel: string;
    setDownloadSelectedControlLabel(_: string)
    // ownInstanceProperties
    downloadsDirectory: NSURL;
    setDownloadsDirectory(_: NSURL)
    // ownInstanceProperties
    hasDisplayModeIcon: boolean;
    setHasDisplayModeIcon(_: boolean)
    // ownInstanceProperties
    hasDisplayModeTable: boolean;
    setHasDisplayModeTable(_: boolean)
    // ownInstanceProperties
    iconSize: number;
    setIconSize(_: number)
    // ownInstanceProperties
    mode: IKCameraDeviceViewDisplayMode;
    setMode(_: IKCameraDeviceViewDisplayMode)
    // ownInstanceProperties
    postProcessApplication: NSURL;
    setPostProcessApplication(_: NSURL)
    // ownInstanceProperties
    transferMode: IKCameraDeviceViewTransferMode;
    setTransferMode(_: IKCameraDeviceViewTransferMode)
    // compoundInstanceMethods
    deleteSelectedItems(_: any): void;
    // compoundInstanceMethods
    downloadAllItems(_: any): void;
    // compoundInstanceMethods
    downloadSelectedItems(_: any): void;
    // compoundInstanceMethods
    rotateLeft(_: any): void;
    // compoundInstanceMethods
    rotateRight(_: any): void;
    // compoundInstanceMethods
    selectIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    // compoundInstanceMethods
    selectedIndexes(): NSIndexSet;
  }

  interface IKCameraDeviceViewDelegate {
    // instance method
    cameraDeviceViewDidDownloadFileLocationFileDataError?(_: IKCameraDeviceView, didDownloadFile: ICCameraFile, location: NSURL, fileData: NSData, error: NSError): void;
    // instance method
    cameraDeviceViewDidEncounterError?(_: IKCameraDeviceView, didEncounterError: NSError): void;
    // instance method
    cameraDeviceViewSelectionDidChange?(_: IKCameraDeviceView): void;
  }

  // interface
  class IKDeviceBrowserView extends NSView {
    // ownInstanceProperties
    delegate: IKDeviceBrowserViewDelegate;
    setDelegate(_: IKDeviceBrowserViewDelegate)
    // ownInstanceProperties
    displaysLocalCameras: boolean;
    setDisplaysLocalCameras(_: boolean)
    // ownInstanceProperties
    displaysLocalScanners: boolean;
    setDisplaysLocalScanners(_: boolean)
    // ownInstanceProperties
    displaysNetworkCameras: boolean;
    setDisplaysNetworkCameras(_: boolean)
    // ownInstanceProperties
    displaysNetworkScanners: boolean;
    setDisplaysNetworkScanners(_: boolean)
    // ownInstanceProperties
    mode: IKDeviceBrowserViewDisplayMode;
    setMode(_: IKDeviceBrowserViewDisplayMode)
    // ownInstanceProperties
    selectedDevice: ICDevice;
  }

  interface IKDeviceBrowserViewDelegate {
    // instance method
    deviceBrowserViewDidEncounterError?(_: IKDeviceBrowserView, didEncounterError: NSError): void;
    // instance method
    deviceBrowserViewSelectionDidChange(_: IKDeviceBrowserView, selectionDidChange: ICDevice): void;
  }

  // interface
  class IKFilterBrowserPanel extends NSPanel {
    // compoundStaticMethods
    static filterBrowserPanelWithStyleMask(withStyleMask: number): any;
    // compoundInstanceMethods
    beginSheetWithOptionsModalForWindowModalDelegateDidEndSelectorContextInfo(options: Map<any, any>, modalFor: NSWindow, modalDelegate: any, didEnd: string, contextInfo: any): void;
    // compoundInstanceMethods
    beginWithOptionsModelessDelegateDidEndSelectorContextInfo(options: Map<any, any>, modelessDelegate: any, didEnd: string, contextInfo: any): void;
    // compoundInstanceMethods
    filterBrowserViewWithOptions(options: Map<any, any>): IKFilterBrowserView;
    // compoundInstanceMethods
    filterName(): string;
    // compoundInstanceMethods
    finish(_: any): void;
    // compoundInstanceMethods
    runModalWithOptions(options: Map<any, any>): number;
  }

  // interface
  class IKFilterBrowserView extends NSView {
    // compoundInstanceMethods
    filterName(): string;
    // compoundInstanceMethods
    setPreviewState(_: boolean): void;
  }

  interface IKFilterCustomUIProvider {
    // instance method
    provideViewForUIConfigurationExcludedKeys(forUIConfiguration: Map<any, any>, excludedKeys: any[]): IKFilterUIView;
  }

  // interface
  class IKFilterUIView extends NSView {
    // compoundStaticMethods
    static viewWithFrameFilter(withFrame: CGRect, filter: CIFilter): any;
    // compoundInstanceMethods
    filter(): CIFilter;
    // compoundInstanceMethods
    static createWithFrameFilter(frame: CGRect, filter: CIFilter): IKFilterUIView;
    // compoundInstanceMethods
    objectController(): NSObjectController;
  }

  // interface
  class IKImageBrowserCell extends NSObject {
    // compoundInstanceMethods
    cellState(): IKImageBrowserCellState;
    // compoundInstanceMethods
    frame(): CGRect;
    // compoundInstanceMethods
    imageAlignment(): NSImageAlignment;
    // compoundInstanceMethods
    imageContainerFrame(): CGRect;
    // compoundInstanceMethods
    imageFrame(): CGRect;
    // compoundInstanceMethods
    indexOfRepresentedItem(): number;
    // compoundInstanceMethods
    isSelected(): boolean;
    // compoundInstanceMethods
    layerForType(forType: string): CALayer;
    // compoundInstanceMethods
    opacity(): number;
    // compoundInstanceMethods
    representedItem(): any;
    // compoundInstanceMethods
    selectionFrame(): CGRect;
    // compoundInstanceMethods
    subtitleFrame(): CGRect;
    // compoundInstanceMethods
    titleFrame(): CGRect;
  }

  // interface
  class IKImageEditPanel extends NSPanel {
    // compoundStaticMethods
    static sharedImageEditPanel(): IKImageEditPanel;
    // ownInstanceProperties
    dataSource: IKImageEditPanelDataSource;
    setDataSource(_: IKImageEditPanelDataSource)
    // ownInstanceProperties
    filterArray: any[];
    // compoundInstanceMethods
    reloadData(): void;
  }

  interface IKImageEditPanelDataSource {
    // instance method
    hasAdjustMode?(): boolean;
    // instance method
    hasDetailsMode?(): boolean;
    // instance method
    hasEffectsMode?(): boolean;
    // instance method
    image(): any;
    // instance method
    imageProperties?(): Map<any, any>;
    // instance method
    setImageImageProperties(_: any, imageProperties: Map<any, any>): void;
    // instance method
    thumbnailWithMaximumSize?(withMaximumSize: CGSize): any;
  }

  // interface
  class IKImageView extends NSView {
    // ownInstanceProperties
    autohidesScrollers: boolean;
    setAutohidesScrollers(_: boolean)
    // ownInstanceProperties
    autoresizes: boolean;
    setAutoresizes(_: boolean)
    // ownInstanceProperties
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor)
    // ownInstanceProperties
    currentToolMode: string;
    setCurrentToolMode(_: string)
    // ownInstanceProperties
    delegate: any;
    setDelegate(_: any)
    // ownInstanceProperties
    doubleClickOpensImageEditPanel: boolean;
    setDoubleClickOpensImageEditPanel(_: boolean)
    // ownInstanceProperties
    editable: boolean;
    setEditable(_: boolean)
    // ownInstanceProperties
    hasHorizontalScroller: boolean;
    setHasHorizontalScroller(_: boolean)
    // ownInstanceProperties
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean)
    // ownInstanceProperties
    imageCorrection: CIFilter;
    setImageCorrection(_: CIFilter)
    // ownInstanceProperties
    rotationAngle: number;
    setRotationAngle(_: number)
    // ownInstanceProperties
    supportsDragAndDrop: boolean;
    setSupportsDragAndDrop(_: boolean)
    // ownInstanceProperties
    zoomFactor: number;
    setZoomFactor(_: number)
    // compoundInstanceMethods
    convertImagePointToViewPoint(toViewPoint: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertImageRectToViewRect(toViewRect: CGRect): CGRect;
    // compoundInstanceMethods
    convertViewPointToImagePoint(toImagePoint: CGPoint): CGPoint;
    // compoundInstanceMethods
    convertViewRectToImageRect(toImageRect: CGRect): CGRect;
    // compoundInstanceMethods
    crop(_: any): void;
    // compoundInstanceMethods
    flipImageHorizontal(_: any): void;
    // compoundInstanceMethods
    flipImageVertical(_: any): void;
    // compoundInstanceMethods
    image(): any;
    // compoundInstanceMethods
    imageProperties(): Map<any, any>;
    // compoundInstanceMethods
    imageSize(): CGSize;
    // compoundInstanceMethods
    overlayForType(forType: string): CALayer;
    // compoundInstanceMethods
    rotateImageLeft(_: any): void;
    // compoundInstanceMethods
    rotateImageRight(_: any): void;
    // compoundInstanceMethods
    scrollToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    scrollToRect(to: CGRect): void;
    // compoundInstanceMethods
    setImageImageProperties(_: any, imageProperties: Map<any, any>): void;
    // compoundInstanceMethods
    setImageWithURL(_: NSURL): void;
    // compoundInstanceMethods
    setImageZoomFactorCenterPoint(_: number, center: CGPoint): void;
    // compoundInstanceMethods
    setOverlayForType(_: CALayer, forType: string): void;
    // compoundInstanceMethods
    setRotationAngleCenterPoint(_: number, center: CGPoint): void;
    // compoundInstanceMethods
    zoomImageToActualSize(_: any): void;
    // compoundInstanceMethods
    zoomImageToFit(_: any): void;
    // compoundInstanceMethods
    zoomImageToRect(to: CGRect): void;
    // compoundInstanceMethods
    zoomIn(_: any): void;
    // compoundInstanceMethods
    zoomOut(_: any): void;
  }

  // interface
  class IKPictureTaker extends NSPanel {
    // compoundStaticMethods
    static pictureTaker(): IKPictureTaker;
    // compoundInstanceMethods
    beginPictureTakerSheetForWindowWithDelegateDidEndSelectorContextInfo(for_: NSWindow, withDelegate: any, didEnd: string, contextInfo: any): void;
    // compoundInstanceMethods
    beginPictureTakerWithDelegateDidEndSelectorContextInfo(withDelegate: any, didEnd: string, contextInfo: any): void;
    // compoundInstanceMethods
    inputImage(): NSImage;
    // compoundInstanceMethods
    mirroring(): boolean;
    // compoundInstanceMethods
    outputImage(): NSImage;
    // compoundInstanceMethods
    popUpRecentsMenuForViewWithDelegateDidEndSelectorContextInfo(for_: NSView, withDelegate: any, didEnd: string, contextInfo: any): void;
    // compoundInstanceMethods
    runModal(): number;
    // compoundInstanceMethods
    setInputImage(_: NSImage): void;
    // compoundInstanceMethods
    setMirroring(_: boolean): void;
  }

  // interface
  class IKSaveOptions extends NSObject {
    // ownInstanceProperties
    delegate: any;
    setDelegate(_: any)
    // ownInstanceProperties
    imageProperties: Map<any, any>;
    // ownInstanceProperties
    imageUTType: string;
    // ownInstanceProperties
    userSelection: Map<any, any>;
    // compoundInstanceMethods
    addSaveOptionsAccessoryViewToSavePanel(to: NSSavePanel): void;
    // compoundInstanceMethods
    addSaveOptionsToView(to: NSView): void;
    // compoundInstanceMethods
    static createWithImagePropertiesImageUTType(imageProperties: Map<any, any>, imageUTType: string): IKSaveOptions;
  }

  // interface
  class IKScannerDeviceView extends NSView {
    // ownInstanceProperties
    delegate: IKScannerDeviceViewDelegate;
    setDelegate(_: IKScannerDeviceViewDelegate)
    // ownInstanceProperties
    displaysDownloadsDirectoryControl: boolean;
    setDisplaysDownloadsDirectoryControl(_: boolean)
    // ownInstanceProperties
    displaysPostProcessApplicationControl: boolean;
    setDisplaysPostProcessApplicationControl(_: boolean)
    // ownInstanceProperties
    documentName: string;
    setDocumentName(_: string)
    // ownInstanceProperties
    downloadsDirectory: NSURL;
    setDownloadsDirectory(_: NSURL)
    // ownInstanceProperties
    hasDisplayModeAdvanced: boolean;
    setHasDisplayModeAdvanced(_: boolean)
    // ownInstanceProperties
    hasDisplayModeSimple: boolean;
    setHasDisplayModeSimple(_: boolean)
    // ownInstanceProperties
    mode: IKScannerDeviceViewDisplayMode;
    setMode(_: IKScannerDeviceViewDisplayMode)
    // ownInstanceProperties
    overviewControlLabel: string;
    setOverviewControlLabel(_: string)
    // ownInstanceProperties
    postProcessApplication: NSURL;
    setPostProcessApplication(_: NSURL)
    // ownInstanceProperties
    scanControlLabel: string;
    setScanControlLabel(_: string)
    // ownInstanceProperties
    scannerDevice: ICScannerDevice;
    setScannerDevice(_: ICScannerDevice)
    // ownInstanceProperties
    transferMode: IKScannerDeviceViewTransferMode;
    setTransferMode(_: IKScannerDeviceViewTransferMode)
  }

  interface IKScannerDeviceViewDelegate {
    // instance method
    scannerDeviceViewDidScanToURLFileDataError?(_: IKScannerDeviceView, didScanTo: NSURL, fileData: NSData, error: NSError): void;
    // instance method
    scannerDeviceViewDidScanToURLError?(_: IKScannerDeviceView, didScanTo: NSURL, error: NSError): void;
    // instance method
    scannerDeviceViewDidScanToBandDataScanInfoError?(_: IKScannerDeviceView, didScanTo: ICScannerBandData, scanInfo: Map<any, any>, error: NSError): void;
    // instance method
    scannerDeviceViewDidEncounterError?(_: IKScannerDeviceView, didEncounterError: NSError): void;
  }

  // interface
  class IKSlideshow extends NSObject {
    // compoundStaticMethods
    static canExportToApplication(toApplication: string): boolean;
    // compoundStaticMethods
    static exportSlideshowItemToApplication(_: any, toApplication: string): void;
    // compoundStaticMethods
    static sharedSlideshow(): IKSlideshow;
    // ownInstanceProperties
    autoPlayDelay: number;
    setAutoPlayDelay(_: number)
    // compoundInstanceMethods
    indexOfCurrentSlideshowItem(): number;
    // compoundInstanceMethods
    reloadData(): void;
    // compoundInstanceMethods
    reloadSlideshowItemAtIndex(at: number): void;
    // compoundInstanceMethods
    runSlideshowWithDataSourceInModeOptions(with_: IKSlideshowDataSource, inMode: string, options: Map<any, any>): void;
    // compoundInstanceMethods
    stopSlideshow(_: any): void;
  }

  interface IKSlideshowDataSource {
    // instance method
    canExportSlideshowItemAtIndexToApplication?(at: number, toApplication: string): boolean;
    // instance method
    nameOfSlideshowItemAtIndex?(at: number): string;
    // instance method
    numberOfSlideshowItems(): number;
    // instance method
    slideshowDidChangeCurrentIndex?(_: number): void;
    // instance method
    slideshowDidStop?(): void;
    // instance method
    slideshowItemAtIndex(at: number): any;
    // instance method
    slideshowWillStart?(): void;
  }

  interface QLPreviewItem extends NSObject {
    previewItemDisplayState?: any;
    previewItemTitle?: string;
    previewItemURL: NSURL;
  }

  // interface
  class QLPreviewPanel extends NSPanel {
    // compoundStaticMethods
    static sharedPreviewPanel(): QLPreviewPanel;
    // compoundStaticMethods
    static sharedPreviewPanelExists(): boolean;
    // ownInstanceProperties
    currentController: any;
    // ownInstanceProperties
    currentPreviewItem: QLPreviewItem;
    // ownInstanceProperties
    currentPreviewItemIndex: number;
    setCurrentPreviewItemIndex(_: number)
    // ownInstanceProperties
    dataSource: QLPreviewPanelDataSource;
    setDataSource(_: QLPreviewPanelDataSource)
    // ownInstanceProperties
    //   delegate: any;
    setDelegate(_: any)
    // ownInstanceProperties
    displayState: any;
    setDisplayState(_: any)
    // ownInstanceProperties
    isInFullScreenMode: boolean;
    // compoundInstanceMethods
    enterFullScreenModeWithOptions(_: NSScreen, withOptions: Map<any, any>): boolean;
    // compoundInstanceMethods
    exitFullScreenModeWithOptions(options: Map<any, any>): void;
    // compoundInstanceMethods
    refreshCurrentPreviewItem(): void;
    // compoundInstanceMethods
    reloadData(): void;
    // compoundInstanceMethods
    updateController(): void;
  }

  interface QLPreviewPanelDataSource {
    // instance method
    numberOfPreviewItemsInPreviewPanel(in_: QLPreviewPanel): number;
    // instance method
    previewPanelPreviewItemAtIndex(_: QLPreviewPanel, previewItemAt: number): QLPreviewItem;
  }

  interface QLPreviewPanelDelegate extends NSWindowDelegate {
    // instance method
    previewPanelHandleEvent?(_: QLPreviewPanel, handle: NSEvent): boolean;
    // instance method
    previewPanelSourceFrameOnScreenForPreviewItem?(_: QLPreviewPanel, sourceFrameOnScreenFor: QLPreviewItem): CGRect;
    // instance method
    previewPanelTransitionImageForPreviewItemContentRect?(_: QLPreviewPanel, transitionImageFor: QLPreviewItem, contentRect: NSRect): any;
  }

  // interface
  class QLPreviewView extends NSView {
    // ownInstanceProperties
    autostarts: boolean;
    setAutostarts(_: boolean)
    // ownInstanceProperties
    displayState: any;
    setDisplayState(_: any)
    // ownInstanceProperties
    previewItem: QLPreviewItem;
    setPreviewItem(_: QLPreviewItem)
    // ownInstanceProperties
    shouldCloseWithWindow: boolean;
    setShouldCloseWithWindow(_: boolean)
    // compoundInstanceMethods
    close(): void;
    // compoundInstanceMethods
    static createWithFrameStyle(frame: CGRect, style: QLPreviewViewStyle): QLPreviewView;
    // compoundInstanceMethods
    refreshPreviewItem(): void;
  }

  interface QLPreviewingController extends NSObject {
    // instance method
    preparePreviewOfFileWithAtCompletionHandler?(at: NSURL, completionHandler?: (p1: NSError) => void): void;
    // instance method
    preparePreviewOfSearchableItemWithIdentifierQueryStringCompletionHandler?(identifier: string, queryString?: string, completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class QuartzFilter extends NSObject {
    // compoundInstanceMethods
    applyToContext(to: any): boolean;
    // compoundInstanceMethods
    localizedName(): string;
    // compoundInstanceMethods
    properties(): Map<any, any>;
    // compoundInstanceMethods
    removeFromContext(from: any): void;
    // compoundInstanceMethods
    url(): NSURL;
  }

  // interface
  class QuartzFilterManager extends NSObject {
    // compoundStaticMethods
    static filtersInDomains(inDomains: any[]): any[];
    // compoundInstanceMethods
    delegate(): any;
    // compoundInstanceMethods
    filterPanel(): NSPanel;
    // compoundInstanceMethods
    filterView(): QuartzFilterView;
    // compoundInstanceMethods
    importFilter(_: Map<any, any>): QuartzFilter;
    // compoundInstanceMethods
    selectFilter(_: QuartzFilter): boolean;
    // compoundInstanceMethods
    selectedFilter(): QuartzFilter;
    // compoundInstanceMethods
    setDelegate(_: any): void;
  }

  // interface
  class QuartzFilterView extends NSView {
    // compoundInstanceMethods
    sizeToFit(): void;
  }

  interface CAAction {
    // instance method
    runActionForKeyObjectArguments(forKey: string, object_: any, arguments_?: Map<any, any>): void;
  }

  // interface
  class CAAnimation extends NSObject {
    // compoundStaticMethods
    static defaultValueForKey(forKey: string): any;
    // ownInstanceProperties
    delegate: CAAnimationDelegate;
    setDelegate(_: CAAnimationDelegate)
    // ownInstanceProperties
    isRemovedOnCompletion: boolean;
    setRemovedOnCompletion(_: boolean)
    // ownInstanceProperties
    timingFunction: CAMediaTimingFunction;
    setTimingFunction(_: CAMediaTimingFunction)
    // compoundInstanceMethods
    shouldArchiveValueForKey(forKey: string): boolean;
  }

  interface CAAnimationDelegate extends NSObject {
    // instance method
    animationDidStart?(_: CAAnimation): void;
    // instance method
    animationDidStopFinished?(_: CAAnimation, finished: boolean): void;
  }

  // interface
  class CAAnimationGroup extends CAAnimation {
    // ownInstanceProperties
    animations: CAAnimation[];
    setAnimations(_: CAAnimation[])
  }

  // interface
  class CABasicAnimation extends CAPropertyAnimation {
    // compoundStaticMethods
    //  static animationWithKeyPath(keyPath?: string): CABasicAnimation;
    // ownInstanceProperties
    byValue: any;
    setByValue(_: any)
    // ownInstanceProperties
    fromValue: any;
    setFromValue(_: any)
    // ownInstanceProperties
    toValue: any;
    setToValue(_: any)
  }

  // interface
  class CAConstraint extends NSObject {
    // compoundStaticMethods
    static constraintWithAttributeRelativeToAttribute(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute): CAConstraint;
    // compoundStaticMethods
    static constraintWithAttributeRelativeToAttributeOffset(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute, offset: number): CAConstraint;
    // compoundStaticMethods
    static constraintWithAttributeRelativeToAttributeScaleOffset(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute, scale: number, offset: number): CAConstraint;
    // ownInstanceProperties
    attribute: CAConstraintAttribute;
    // ownInstanceProperties
    offset: number;
    // ownInstanceProperties
    scale: number;
    // ownInstanceProperties
    sourceAttribute: CAConstraintAttribute;
    // ownInstanceProperties
    sourceName: string;
    // compoundInstanceMethods
    static createWithAttributeRelativeToAttribute2ScaleOffset(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute, scale: number, offset: number): CAConstraint;
  }

  // interface
  class CAConstraintLayoutManager extends NSObject {
  }

  // export function CACurrentMediaTime(): number;

  // interface
  class CAEDRMetadata extends NSObject {
    // compoundStaticMethods
    static HDR10MetadataWithDisplayInfoContentInfoOpticalOutputScale(displayInfo?: NSData, contentInfo?: NSData, opticalOutputScale?: number): CAEDRMetadata;
    // compoundStaticMethods
    static HDR10MetadataWithMinLuminanceMaxLuminanceOpticalOutputScale(minLuminance: number, maxLuminance: number, opticalOutputScale: number): CAEDRMetadata;
    // ownStaticProperties
    static HLGMetadata: CAEDRMetadata;
  }

  // interface
  class CAEmitterCell extends NSObject {
    // compoundStaticMethods
    static defaultValueForKey(forKey: string): any;
    // ownInstanceProperties
    alphaRange: number;
    setAlphaRange(_: number)
    // ownInstanceProperties
    alphaSpeed: number;
    setAlphaSpeed(_: number)
    // ownInstanceProperties
    birthRate: number;
    setBirthRate(_: number)
    // ownInstanceProperties
    blueRange: number;
    setBlueRange(_: number)
    // ownInstanceProperties
    blueSpeed: number;
    setBlueSpeed(_: number)
    // ownInstanceProperties
    color: any;
    setColor(_: any)
    // ownInstanceProperties
    contents: any;
    setContents(_: any)
    // ownInstanceProperties
    contentsRect: CGRect;
    setContentsRect(_: CGRect)
    // ownInstanceProperties
    contentsScale: number;
    setContentsScale(_: number)
    // ownInstanceProperties
    emissionLatitude: number;
    setEmissionLatitude(_: number)
    // ownInstanceProperties
    emissionLongitude: number;
    setEmissionLongitude(_: number)
    // ownInstanceProperties
    emissionRange: number;
    setEmissionRange(_: number)
    // ownInstanceProperties
    emitterCells: CAEmitterCell[];
    setEmitterCells(_: CAEmitterCell[])
    // ownInstanceProperties
    isEnabled: boolean;
    setEnabled(_: boolean)
    // ownInstanceProperties
    greenRange: number;
    setGreenRange(_: number)
    // ownInstanceProperties
    greenSpeed: number;
    setGreenSpeed(_: number)
    // ownInstanceProperties
    lifetime: number;
    setLifetime(_: number)
    // ownInstanceProperties
    lifetimeRange: number;
    setLifetimeRange(_: number)
    // ownInstanceProperties
    magnificationFilter: string;
    setMagnificationFilter(_: string)
    // ownInstanceProperties
    minificationFilter: string;
    setMinificationFilter(_: string)
    // ownInstanceProperties
    minificationFilterBias: number;
    setMinificationFilterBias(_: number)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    redRange: number;
    setRedRange(_: number)
    // ownInstanceProperties
    redSpeed: number;
    setRedSpeed(_: number)
    // ownInstanceProperties
    scale: number;
    setScale(_: number)
    // ownInstanceProperties
    scaleRange: number;
    setScaleRange(_: number)
    // ownInstanceProperties
    scaleSpeed: number;
    setScaleSpeed(_: number)
    // ownInstanceProperties
    spin: number;
    setSpin(_: number)
    // ownInstanceProperties
    spinRange: number;
    setSpinRange(_: number)
    // ownInstanceProperties
    style: Map<any, any>;
    setStyle(_: Map<any, any>)
    // ownInstanceProperties
    velocity: number;
    setVelocity(_: number)
    // ownInstanceProperties
    velocityRange: number;
    setVelocityRange(_: number)
    // ownInstanceProperties
    xAcceleration: number;
    setXAcceleration(_: number)
    // ownInstanceProperties
    yAcceleration: number;
    setYAcceleration(_: number)
    // ownInstanceProperties
    zAcceleration: number;
    setZAcceleration(_: number)
    // compoundInstanceMethods
    shouldArchiveValueForKey(forKey: string): boolean;
  }

  // interface
  class CAEmitterLayer extends CALayer {
    // ownInstanceProperties
    birthRate: number;
    setBirthRate(_: number)
    // ownInstanceProperties
    emitterCells: CAEmitterCell[];
    setEmitterCells(_: CAEmitterCell[])
    // ownInstanceProperties
    emitterDepth: number;
    setEmitterDepth(_: number)
    // ownInstanceProperties
    emitterMode: string;
    setEmitterMode(_: string)
    // ownInstanceProperties
    emitterPosition: CGPoint;
    setEmitterPosition(_: CGPoint)
    // ownInstanceProperties
    emitterShape: string;
    setEmitterShape(_: string)
    // ownInstanceProperties
    emitterSize: CGSize;
    setEmitterSize(_: CGSize)
    // ownInstanceProperties
    emitterZPosition: number;
    setEmitterZPosition(_: number)
    // ownInstanceProperties
    lifetime: number;
    setLifetime(_: number)
    // ownInstanceProperties
    preservesDepth: boolean;
    setPreservesDepth(_: boolean)
    // ownInstanceProperties
    renderMode: string;
    setRenderMode(_: string)
    // ownInstanceProperties
    scale: number;
    setScale(_: number)
    // ownInstanceProperties
    seed: number;
    setSeed(_: number)
    // ownInstanceProperties
    spin: number;
    setSpin(_: number)
    // ownInstanceProperties
    velocity: number;
    setVelocity(_: number)
  }

  // interface
  class CAGradientLayer extends CALayer {
    // ownInstanceProperties
    colors: any[];
    setColors(_: any[])
    // ownInstanceProperties
    endPoint: CGPoint;
    setEndPoint(_: CGPoint)
    // ownInstanceProperties
    locations: number[];
    setLocations(_: number[])
    // ownInstanceProperties
    startPoint: CGPoint;
    setStartPoint(_: CGPoint)
    // ownInstanceProperties
    type: string;
    setType(_: string)
  }

  // interface
  class CAKeyframeAnimation extends CAPropertyAnimation {
    // compoundStaticMethods
    //  static animationWithKeyPath(keyPath?: string): CAKeyframeAnimation;
    // ownInstanceProperties
    biasValues: number[];
    setBiasValues(_: number[])
    // ownInstanceProperties
    calculationMode: string;
    setCalculationMode(_: string)
    // ownInstanceProperties
    continuityValues: number[];
    setContinuityValues(_: number[])
    // ownInstanceProperties
    keyTimes: number[];
    setKeyTimes(_: number[])
    // ownInstanceProperties
    path: any;
    setPath(_: any)
    // ownInstanceProperties
    rotationMode: string;
    setRotationMode(_: string)
    // ownInstanceProperties
    tensionValues: number[];
    setTensionValues(_: number[])
    // ownInstanceProperties
    timingFunctions: CAMediaTimingFunction[];
    setTimingFunctions(_: CAMediaTimingFunction[])
    // ownInstanceProperties
    values: any[];
    setValues(_: any[])
  }

  // interface
  class CALayer extends NSObject {
    // compoundStaticMethods
    static cornerCurveExpansionFactor(_: string): number;
    // compoundStaticMethods
    static defaultActionForKey(forKey: string): CAAction;
    // compoundStaticMethods
    static defaultValueForKey(forKey: string): any;
    // compoundStaticMethods
    static needsDisplayForKey(forKey: string): boolean;
    // ownInstanceProperties
    actions: Map<string, CAAction>;
    setActions(_: Map<string, CAAction>)
    // ownInstanceProperties
    allowsEdgeAntialiasing: boolean;
    setAllowsEdgeAntialiasing(_: boolean)
    // ownInstanceProperties
    allowsGroupOpacity: boolean;
    setAllowsGroupOpacity(_: boolean)
    // ownInstanceProperties
    anchorPoint: CGPoint;
    setAnchorPoint(_: CGPoint)
    // ownInstanceProperties
    anchorPointZ: number;
    setAnchorPointZ(_: number)
    // ownInstanceProperties
    autoresizingMask: CAAutoresizingMask;
    setAutoresizingMask(_: CAAutoresizingMask)
    // ownInstanceProperties
    backgroundColor: any;
    setBackgroundColor(_: any)
    // ownInstanceProperties
    backgroundFilters: any[];
    setBackgroundFilters(_: any[])
    // ownInstanceProperties
    borderColor: any;
    setBorderColor(_: any)
    // ownInstanceProperties
    borderWidth: number;
    setBorderWidth(_: number)
    // ownInstanceProperties
    bounds: CGRect;
    setBounds(_: CGRect)
    // ownInstanceProperties
    compositingFilter: any;
    setCompositingFilter(_: any)
    // ownInstanceProperties
    constraints: CAConstraint[];
    setConstraints(_: CAConstraint[])
    // ownInstanceProperties
    contents: any;
    setContents(_: any)
    // ownInstanceProperties
    contentsCenter: CGRect;
    setContentsCenter(_: CGRect)
    // ownInstanceProperties
    contentsFormat: string;
    setContentsFormat(_: string)
    // ownInstanceProperties
    contentsGravity: string;
    setContentsGravity(_: string)
    // ownInstanceProperties
    contentsRect: CGRect;
    setContentsRect(_: CGRect)
    // ownInstanceProperties
    contentsScale: number;
    setContentsScale(_: number)
    // ownInstanceProperties
    cornerCurve: string;
    setCornerCurve(_: string)
    // ownInstanceProperties
    cornerRadius: number;
    setCornerRadius(_: number)
    // ownInstanceProperties
    delegate: CALayerDelegate;
    setDelegate(_: CALayerDelegate)
    // ownInstanceProperties
    isDoubleSided: boolean;
    setDoubleSided(_: boolean)
    // ownInstanceProperties
    drawsAsynchronously: boolean;
    setDrawsAsynchronously(_: boolean)
    // ownInstanceProperties
    edgeAntialiasingMask: CAEdgeAntialiasingMask;
    setEdgeAntialiasingMask(_: CAEdgeAntialiasingMask)
    // ownInstanceProperties
    filters: any[];
    setFilters(_: any[])
    // ownInstanceProperties
    frame: CGRect;
    setFrame(_: CGRect)
    // ownInstanceProperties
    isGeometryFlipped: boolean;
    setGeometryFlipped(_: boolean)
    // ownInstanceProperties
    isHidden: boolean;
    setHidden(_: boolean)
    // ownInstanceProperties
    layoutManager: CALayoutManager;
    setLayoutManager(_: CALayoutManager)
    // ownInstanceProperties
    magnificationFilter: string;
    setMagnificationFilter(_: string)
    // ownInstanceProperties
    mask: CALayer;
    setMask(_: CALayer)
    // ownInstanceProperties
    maskedCorners: CACornerMask;
    setMaskedCorners(_: CACornerMask)
    // ownInstanceProperties
    masksToBounds: boolean;
    setMasksToBounds(_: boolean)
    // ownInstanceProperties
    minificationFilter: string;
    setMinificationFilter(_: string)
    // ownInstanceProperties
    minificationFilterBias: number;
    setMinificationFilterBias(_: number)
    // ownInstanceProperties
    name: string;
    setName(_: string)
    // ownInstanceProperties
    needsDisplayOnBoundsChange: boolean;
    setNeedsDisplayOnBoundsChange(_: boolean)
    // ownInstanceProperties
    opacity: number;
    setOpacity(_: number)
    // ownInstanceProperties
    isOpaque: boolean;
    setOpaque(_: boolean)
    // ownInstanceProperties
    position: CGPoint;
    setPosition(_: CGPoint)
    // ownInstanceProperties
    rasterizationScale: number;
    setRasterizationScale(_: number)
    // ownInstanceProperties
    shadowColor: any;
    setShadowColor(_: any)
    // ownInstanceProperties
    shadowOffset: CGSize;
    setShadowOffset(_: CGSize)
    // ownInstanceProperties
    shadowOpacity: number;
    setShadowOpacity(_: number)
    // ownInstanceProperties
    shadowPath: any;
    setShadowPath(_: any)
    // ownInstanceProperties
    shadowRadius: number;
    setShadowRadius(_: number)
    // ownInstanceProperties
    shouldRasterize: boolean;
    setShouldRasterize(_: boolean)
    // ownInstanceProperties
    style: Map<any, any>;
    setStyle(_: Map<any, any>)
    // ownInstanceProperties
    sublayerTransform: CATransform3D;
    setSublayerTransform(_: CATransform3D)
    // ownInstanceProperties
    sublayers: CALayer[];
    setSublayers(_: CALayer[])
    // ownInstanceProperties
    superlayer: CALayer;
    // ownInstanceProperties
    transform: CATransform3D;
    setTransform(_: CATransform3D)
    // ownInstanceProperties
    visibleRect: CGRect;
    // ownInstanceProperties
    zPosition: number;
    setZPosition(_: number)
    // compoundInstanceMethods
    actionForKey(forKey: string): CAAction;
    // compoundInstanceMethods
    addAnimationForKey(_: CAAnimation, forKey?: string): void;
    // compoundInstanceMethods
    addConstraint(_: CAConstraint): void;
    // compoundInstanceMethods
    addSublayer(_: CALayer): void;
    // compoundInstanceMethods
    affineTransform(): CGAffineTransform;
    // compoundInstanceMethods
    animationForKey(forKey: string): CAAnimation;
    // compoundInstanceMethods
    animationKeys(): string[];
    // compoundInstanceMethods
    containsPoint(_: CGPoint): boolean;
    // compoundInstanceMethods
    contentsAreFlipped(): boolean;
    // compoundInstanceMethods
    convertPointFromLayer(_: CGPoint, from?: CALayer): CGPoint;
    // compoundInstanceMethods
    convertPointToLayer(_: CGPoint, to?: CALayer): CGPoint;
    // compoundInstanceMethods
    convertRectFromLayer(_: CGRect, from?: CALayer): CGRect;
    // compoundInstanceMethods
    convertRectToLayer(_: CGRect, to?: CALayer): CGRect;
    // compoundInstanceMethods
    convertTimeFromLayer(_: number, from?: CALayer): number;
    // compoundInstanceMethods
    convertTimeToLayer(_: number, to?: CALayer): number;
    // compoundInstanceMethods
    display(): void;
    // compoundInstanceMethods
    displayIfNeeded(): void;
    // compoundInstanceMethods
    drawInContext(in_: any): void;
    // compoundInstanceMethods
    hitTest(_: CGPoint): CALayer;
    // compoundInstanceMethods
    static createWithLayer(layer: any): CALayer;
    // compoundInstanceMethods
    insertSublayerAbove(_: CALayer, above?: CALayer): void;
    // compoundInstanceMethods
    insertSublayerAtIndex(_: CALayer, at: number): void;
    // compoundInstanceMethods
    insertSublayerBelow(_: CALayer, below?: CALayer): void;
    // compoundInstanceMethods
    layoutIfNeeded(): void;
    // compoundInstanceMethods
    layoutSublayers(): void;
    // compoundInstanceMethods
    modelLayer(): CALayer;
    // compoundInstanceMethods
    needsDisplay(): boolean;
    // compoundInstanceMethods
    needsLayout(): boolean;
    // compoundInstanceMethods
    preferredFrameSize(): CGSize;
    // compoundInstanceMethods
    presentationLayer(): CALayer;
    // compoundInstanceMethods
    removeAllAnimations(): void;
    // compoundInstanceMethods
    removeAnimationForKey(forKey: string): void;
    // compoundInstanceMethods
    removeFromSuperlayer(): void;
    // compoundInstanceMethods
    renderInContext(in_: any): void;
    // compoundInstanceMethods
    replaceSublayerWith(_: CALayer, with_: CALayer): void;
    // compoundInstanceMethods
    resizeSublayersWithOldSize(withOldSize: CGSize): void;
    // compoundInstanceMethods
    resizeWithOldSuperlayerSize(withOldSuperlayerSize: CGSize): void;
    // compoundInstanceMethods
    scrollPoint(_: CGPoint): void;
    // compoundInstanceMethods
    scrollRectToVisible(_: CGRect): void;
    // compoundInstanceMethods
    setAffineTransform(_: CGAffineTransform): void;
    // compoundInstanceMethods
    setNeedsDisplay(): void;
    // compoundInstanceMethods
    setNeedsDisplayInRect(_: CGRect): void;
    // compoundInstanceMethods
    setNeedsLayout(): void;
    // compoundInstanceMethods
    shouldArchiveValueForKey(forKey: string): boolean;
  }

  interface CALayerDelegate extends NSObject {
    // instance method
    actionForLayerForKey?(for_: CALayer, forKey: string): CAAction;
    // instance method
    displayLayer?(_: CALayer): void;
    // instance method
    drawLayerInContext?(_: CALayer, in_: any): void;
    // instance method
    layerWillDraw?(_: CALayer): void;
    // instance method
    layoutSublayersOfLayer?(of: CALayer): void;
  }

  interface CALayoutManager extends NSObject {
    // instance method
    invalidateLayoutOfLayer?(of: CALayer): void;
    // instance method
    layoutSublayersOfLayer?(of: CALayer): void;
    // instance method
    preferredSizeOfLayer?(of: CALayer): CGSize;
  }

  interface CAMediaTiming {
    autoreverses: boolean;
    setAutoreverses(_: boolean)
    beginTime: number;
    setBeginTime(_: number)
    duration: number;
    setDuration(_: number)
    fillMode: string;
    setFillMode(_: string)
    repeatCount: number;
    setRepeatCount(_: number)
    repeatDuration: number;
    setRepeatDuration(_: number)
    speed: number;
    setSpeed(_: number)
    timeOffset: number;
    setTimeOffset(_: number)
  }

  // interface
  class CAMediaTimingFunction extends NSObject {
    // compoundStaticMethods
    static functionWithControlPoints(_: number, _2: number, _3: number, _4: number): CAMediaTimingFunction;
    // compoundInstanceMethods
    getControlPointAtIndexValues(at: number, values: number): void;
    // compoundInstanceMethods
    static createWithControlPoints(_: number, _2: number, _3: number, controlPoints: number): CAMediaTimingFunction;
  }

  interface CAMetalDrawable extends MTLDrawable {
    layer: CAMetalLayer;
    texture: MTLTexture;
  }

  // interface
  class CAMetalLayer extends CALayer {
    // ownInstanceProperties
    EDRMetadata: CAEDRMetadata;
    setEDRMetadata(_: CAEDRMetadata)
    // ownInstanceProperties
    allowsNextDrawableTimeout: boolean;
    setAllowsNextDrawableTimeout(_: boolean)
    // ownInstanceProperties
    colorspace: any;
    setColorspace(_: any)
    // ownInstanceProperties
    device: MTLDevice;
    setDevice(_: MTLDevice)
    // ownInstanceProperties
    displaySyncEnabled: boolean;
    setDisplaySyncEnabled(_: boolean)
    // ownInstanceProperties
    drawableSize: CGSize;
    setDrawableSize(_: CGSize)
    // ownInstanceProperties
    framebufferOnly: boolean;
    setFramebufferOnly(_: boolean)
    // ownInstanceProperties
    maximumDrawableCount: number;
    setMaximumDrawableCount(_: number)
    // ownInstanceProperties
    pixelFormat: MTLPixelFormat;
    setPixelFormat(_: MTLPixelFormat)
    // ownInstanceProperties
    preferredDevice: MTLDevice;
    // ownInstanceProperties
    presentsWithTransaction: boolean;
    setPresentsWithTransaction(_: boolean)
    // ownInstanceProperties
    wantsExtendedDynamicRangeContent: boolean;
    setWantsExtendedDynamicRangeContent(_: boolean)
    // compoundInstanceMethods
    nextDrawable(): CAMetalDrawable;
  }

  // interface
  class CAPropertyAnimation extends CAAnimation {
    // compoundStaticMethods
    static animationWithKeyPath(keyPath?: string): CAPropertyAnimation;
    // ownInstanceProperties
    isAdditive: boolean;
    setAdditive(_: boolean)
    // ownInstanceProperties
    isCumulative: boolean;
    setCumulative(_: boolean)
    // ownInstanceProperties
    keyPath: string;
    setKeyPath(_: string)
    // ownInstanceProperties
    valueFunction: CAValueFunction;
    setValueFunction(_: CAValueFunction)
  }

  // interface
  class CARemoteLayerClient extends NSObject {
    // ownInstanceProperties
    clientId: number;
    // ownInstanceProperties
    layer: CALayer;
    setLayer(_: CALayer)
    // compoundInstanceMethods
    static createWithServerPort(serverPort: number): CARemoteLayerClient;
    // compoundInstanceMethods
    invalidate(): void;
  }

  // interface
  class CARemoteLayerServer extends NSObject {
    // compoundStaticMethods
    static sharedServer(): CARemoteLayerServer;
    // ownInstanceProperties
    serverPort: number;
  }

  // interface
  class CARenderer extends NSObject {
    // ownInstanceProperties
    bounds: CGRect;
    setBounds(_: CGRect)
    // ownInstanceProperties
    layer: CALayer;
    setLayer(_: CALayer)
    // compoundInstanceMethods
    addUpdateRect(_: CGRect): void;
    // compoundInstanceMethods
    beginFrameAtTimeTimeStamp(atTime: number, timeStamp?: CVTimeStamp): void;
    // compoundInstanceMethods
    endFrame(): void;
    // compoundInstanceMethods
    nextFrameTime(): number;
    // compoundInstanceMethods
    render(): void;
    // compoundInstanceMethods
    setDestination(_: MTLTexture): void;
    // compoundInstanceMethods
    updateBounds(): CGRect;
  }

  // interface
  class CAReplicatorLayer extends CALayer {
    // ownInstanceProperties
    instanceAlphaOffset: number;
    setInstanceAlphaOffset(_: number)
    // ownInstanceProperties
    instanceBlueOffset: number;
    setInstanceBlueOffset(_: number)
    // ownInstanceProperties
    instanceColor: any;
    setInstanceColor(_: any)
    // ownInstanceProperties
    instanceCount: number;
    setInstanceCount(_: number)
    // ownInstanceProperties
    instanceDelay: number;
    setInstanceDelay(_: number)
    // ownInstanceProperties
    instanceGreenOffset: number;
    setInstanceGreenOffset(_: number)
    // ownInstanceProperties
    instanceRedOffset: number;
    setInstanceRedOffset(_: number)
    // ownInstanceProperties
    instanceTransform: CATransform3D;
    setInstanceTransform(_: CATransform3D)
    // ownInstanceProperties
    preservesDepth: boolean;
    setPreservesDepth(_: boolean)
  }

  // interface
  class CAScrollLayer extends CALayer {
    // ownInstanceProperties
    scrollMode: string;
    setScrollMode(_: string)
    // compoundInstanceMethods
    scrollToPoint(to: CGPoint): void;
    // compoundInstanceMethods
    scrollToRect(to: CGRect): void;
  }

  // interface
  class CAShapeLayer extends CALayer {
    // ownInstanceProperties
    fillColor: any;
    setFillColor(_: any)
    // ownInstanceProperties
    fillRule: string;
    setFillRule(_: string)
    // ownInstanceProperties
    lineCap: string;
    setLineCap(_: string)
    // ownInstanceProperties
    lineDashPattern: number[];
    setLineDashPattern(_: number[])
    // ownInstanceProperties
    lineDashPhase: number;
    setLineDashPhase(_: number)
    // ownInstanceProperties
    lineJoin: string;
    setLineJoin(_: string)
    // ownInstanceProperties
    lineWidth: number;
    setLineWidth(_: number)
    // ownInstanceProperties
    miterLimit: number;
    setMiterLimit(_: number)
    // ownInstanceProperties
    path: any;
    setPath(_: any)
    // ownInstanceProperties
    strokeColor: any;
    setStrokeColor(_: any)
    // ownInstanceProperties
    strokeEnd: number;
    setStrokeEnd(_: number)
    // ownInstanceProperties
    strokeStart: number;
    setStrokeStart(_: number)
  }

  // interface
  class CASpringAnimation extends CABasicAnimation {
    // compoundStaticMethods
    //  static animationWithKeyPath(keyPath?: string): CASpringAnimation;
    // ownInstanceProperties
    damping: number;
    setDamping(_: number)
    // ownInstanceProperties
    initialVelocity: number;
    setInitialVelocity(_: number)
    // ownInstanceProperties
    mass: number;
    setMass(_: number)
    // ownInstanceProperties
    settlingDuration: number;
    // ownInstanceProperties
    stiffness: number;
    setStiffness(_: number)
  }

  // interface
  class CATextLayer extends CALayer {
    // ownInstanceProperties
    alignmentMode: string;
    setAlignmentMode(_: string)
    // ownInstanceProperties
    allowsFontSubpixelQuantization: boolean;
    setAllowsFontSubpixelQuantization(_: boolean)
    // ownInstanceProperties
    font: any;
    setFont(_: any)
    // ownInstanceProperties
    fontSize: number;
    setFontSize(_: number)
    // ownInstanceProperties
    foregroundColor: any;
    setForegroundColor(_: any)
    // ownInstanceProperties
    string: any;
    setString(_: any)
    // ownInstanceProperties
    truncationMode: string;
    setTruncationMode(_: string)
    // ownInstanceProperties
    isWrapped: boolean;
    setWrapped(_: boolean)
  }

  // interface
  class CATiledLayer extends CALayer {
    // compoundStaticMethods
    static fadeDuration(): number;
    // ownInstanceProperties
    levelsOfDetail: number;
    setLevelsOfDetail(_: number)
    // ownInstanceProperties
    levelsOfDetailBias: number;
    setLevelsOfDetailBias(_: number)
    // ownInstanceProperties
    tileSize: CGSize;
    setTileSize(_: CGSize)
  }

  // interface
  class CATransaction extends NSObject {
    // compoundStaticMethods
    static animationDuration(): number;
    // compoundStaticMethods
    static animationTimingFunction(): CAMediaTimingFunction;
    // compoundStaticMethods
    static begin(): void;
    // compoundStaticMethods
    static commit(): void;
    // compoundStaticMethods
    static completionBlock(): () => void;
    // compoundStaticMethods
    static disableActions(): boolean;
    // compoundStaticMethods
    static flush(): void;
    // compoundStaticMethods
    static lock(): void;
    // compoundStaticMethods
    static setAnimationDuration(_: number): void;
    // compoundStaticMethods
    static setAnimationTimingFunction(_?: CAMediaTimingFunction): void;
    // compoundStaticMethods
    static setCompletionBlock(_?: () => void): void;
    // compoundStaticMethods
    static setDisableActions(_: boolean): void;
    // compoundStaticMethods
    static setValueForKey(_?: any, forKey?: string): void;
    // compoundStaticMethods
    static unlock(): void;
    // compoundStaticMethods
    static valueForKey(forKey: string): any;
  }

  // export function CATransform3DConcat(a: CATransform3D, b: CATransform3D): CATransform3D;

  // export function CATransform3DEqualToTransform(a: CATransform3D, b: CATransform3D): boolean;

  // export function CATransform3DGetAffineTransform(t: CATransform3D): CGAffineTransform;

  // export function CATransform3DInvert(t: CATransform3D): CATransform3D;

  // export function CATransform3DIsAffine(t: CATransform3D): boolean;

  // export function CATransform3DIsIdentity(t: CATransform3D): boolean;

  // export function CATransform3DMakeAffineTransform(m: CGAffineTransform): CATransform3D;

  // export function CATransform3DMakeRotation(angle: number, x: number, y: number, z: number): CATransform3D;

  // export function CATransform3DMakeScale(sx: number, sy: number, sz: number): CATransform3D;

  // export function CATransform3DMakeTranslation(tx: number, ty: number, tz: number): CATransform3D;

  // export function CATransform3DRotate(t: CATransform3D, angle: number, x: number, y: number, z: number): CATransform3D;

  // export function CATransform3DScale(t: CATransform3D, sx: number, sy: number, sz: number): CATransform3D;

  // export function CATransform3DTranslate(t: CATransform3D, tx: number, ty: number, tz: number): CATransform3D;

  // interface
  class CATransformLayer extends CALayer {
  }

  // interface
  class CATransition extends CAAnimation {
    // ownInstanceProperties
    endProgress: number;
    setEndProgress(_: number)
    // ownInstanceProperties
    filter: any;
    setFilter(_: any)
    // ownInstanceProperties
    startProgress: number;
    setStartProgress(_: number)
    // ownInstanceProperties
    subtype: string;
    setSubtype(_: string)
    // ownInstanceProperties
    type: string;
    setType(_: string)
  }

  // interface
  class CAValueFunction extends NSObject {
    // ownInstanceProperties
    name: string;
  }

  namespace AE {
    export enum AEDataModel { }
  }
  namespace AVAssetExportSession {
    export enum Status {
      Unknown = 0,
      Waiting = 1,
      Exporting = 2,
      Completed = 3,
      Failed = 4,
      Cancelled = 5
    }

  }

  namespace AVAssetImageGenerator {
    export enum Result {
      Succeeded = 0,
      Failed = 1,
      Cancelled = 2
    }

    export let cleanAperture: string;
    export let encodedPixels: string;
    export let productionAperture: string;
  }

  namespace AVAssetReader {
    export enum Status {
      Unknown = 0,
      Reading = 1,
      Completed = 2,
      Failed = 3,
      Cancelled = 4
    }

  }

  namespace AVAssetTrack {
    export let audioFallback: string;
    export let chapterList: string;
    export let forcedSubtitlesOnly: string;
    export let metadataReferent: string;
    export let selectionFollower: string;
    export let timecode: string;
  }

  namespace AVAssetWriter {
    export enum Status {
      Unknown = 0,
      Writing = 1,
      Completed = 2,
      Failed = 3,
      Cancelled = 4
    }

  }

  namespace AVAssetWriterInput {
    export let beforeMainMediaDataNotInterleaved: string;
    export let interleavedWithMainMediaData: string;
  }

  namespace AVAudioSession {
    export enum CategoryOptions {
      MixWithOthers = 1,
      DuckOthers = 2,
      AllowBluetooth = 4,
      DefaultToSpeaker = 8,
      InterruptSpokenAudioAndMixWithOthers = 17,
      AllowBluetoothA2DP = 32,
      AllowAirPlay = 64
    }

    export enum IOType {
      NotSpecified = 0,
      Aggregated = 1
    }

    export enum InterruptionOptions {
      ShouldResume = 1
    }

    export enum InterruptionType {
      Began = 1,
      Ended = 0
    }

    export enum PortOverride {
      None = 0,
      Speaker = 1936747378
    }

    export enum PromptStyle {
      None = 1852796517,
      Short = 1936224884,
      Normal = 1852992876
    }

    export enum RecordPermission {
      Undetermined = 1970168948,
      Denied = 1684369017,
      Granted = 1735552628
    }

    export enum RouteChangeReason {
      Unknown = 0,
      NewDeviceAvailable = 1,
      OldDeviceUnavailable = 2,
      CategoryChange = 3,
      Override = 4,
      WakeFromSleep = 6,
      NoSuitableRouteForCategory = 7,
      RouteConfigurationChange = 8
    }

    export enum RouteSharingPolicy {
      Default = 0,
      LongFormAudio = 1,
      LongForm = 1,
      Independent = 2,
      LongFormVideo = 3
    }

    export enum SetActiveOptions {
      NotifyOthersOnDeactivation = 1
    }

    export enum SilenceSecondaryAudioHintType {
      Begin = 1,
      End = 0
    }

    export let ambient: string;
    export let audioProcessing: string;
    export let multiRoute: string;
    export let playAndRecord: string;
    export let playback: string;
    export let record: string;
    export let soloAmbient: string;
    export let interruptionNotification: string;
    export let lower: string;
    export let upper: string;
    export let mediaServicesWereLostNotification: string;
    export let mediaServicesWereResetNotification: string;
    export let default_: string;
    export let gameChat: string;
    export let measurement: string;
    export let moviePlayback: string;
    export let spokenAudio: string;
    export let videoChat: string;
    export let videoRecording: string;
    export let voiceChat: string;
    export let voicePrompt: string;
    export let back: string;
    export let bottom: string;
    export let front: string;
    export let left: string;
    export let right: string;
    export let top: string;
    export let cardioid: string;
    export let omnidirectional: string;
    export let subcardioid: string;
    export let airPlay: string;
    export let bluetoothA2DP: string;
    export let bluetoothHFP: string;
    export let bluetoothLE: string;
    export let builtInMic: string;
    export let builtInReceiver: string;
    export let builtInSpeaker: string;
    export let carAudio: string;
    export let HDMI: string;
    export let headphones: string;
    export let headsetMic: string;
    export let lineIn: string;
    export let lineOut: string;
    export let usbAudio: string;
    export let routeChangeNotification: string;
    export let silenceSecondaryAudioHintNotification: string;
  }

  namespace AVAudioTimePitchAlgorithm {
    export let lowQualityZeroLatency: string;
    export let spectral: string;
    export let timeDomain: string;
    export let varispeed: string;
  }

  namespace AVAudioUnitComponentManager {
    export let registrationsChangedNotification: string;
  }

  namespace AVCaptureDevice {
    export enum AutoFocusRangeRestriction {
      None = 0,
      Near = 1,
      Far = 2
    }

    export enum Position {
      Unspecified = 0,
      Back = 1,
      Front = 2
    }

    export enum TransportControlsPlaybackMode {
      NotPlayingMode = 0,
      PlayingMode = 1
    }

    export enum ExposureMode {
      Locked = 0,
      AutoExpose = 1,
      ContinuousAutoExposure = 2,
      Custom = 3
    }

    export enum FlashMode {
      Off = 0,
      On = 1,
      Auto = 2
    }

    export enum FocusMode {
      Locked = 0,
      AutoFocus = 1,
      ContinuousAutoFocus = 2
    }

    export enum LensStabilizationStatus {
      Unsupported = 0,
      Off = 1,
      Active = 2,
      OutOfRange = 3,
      Unavailable = 4
    }

    export enum TorchMode {
      Off = 0,
      On = 1,
      Auto = 2
    }

    export enum WhiteBalanceMode {
      Locked = 0,
      AutoWhiteBalance = 1,
      ContinuousAutoWhiteBalance = 2
    }

    export let builtInDualCamera: string;
    export let builtInDualWideCamera: string;
    export let builtInDuoCamera: string;
    export let builtInMicrophone: string;
    export let builtInTelephotoCamera: string;
    export let builtInTripleCamera: string;
    export let builtInTrueDepthCamera: string;
    export let builtInUltraWideCamera: string;
    export let builtInWideAngleCamera: string;
    export let externalUnknown: string;
    export let currentExposureDuration: CMTime;
    export let currentExposureTargetBias: number;
    export let currentISO: number;
    export let currentLensPosition: number;
    export let maxAvailableTorchLevel: number;
    export let currentWhiteBalanceGains: AVCaptureDevice.WhiteBalanceGains;
  }

  namespace AVCaptureOutput {
    export enum DataDroppedReason {
      None = 0,
      LateData = 1,
      OutOfBuffers = 2,
      Discontinuity = 3
    }

  }

  namespace AVCapturePhotoOutput {
    export enum QualityPrioritization {
      Speed = 1,
      Balanced = 2,
      Quality = 3
    }

  }

  namespace AVCaptureSession {
    export enum InterruptionReason {
      VideoDeviceNotAvailableInBackground = 1,
      AudioDeviceInUseByAnotherClient = 2,
      VideoDeviceInUseByAnotherClient = 3,
      VideoDeviceNotAvailableWithMultipleForegroundApps = 4,
      VideoDeviceNotAvailableDueToSystemPressure = 5
    }

    export let hd1280x720: string;
    export let hd1920x1080: string;
    export let qvga320x240: string;
    export let cif352x288: string;
    export let hd4K3840x2160: string;
    export let vga640x480: string;
    export let qHD960x540: string;
    export let high: string;
    export let inputPriority: string;
    export let low: string;
    export let medium: string;
    export let photo: string;
    export let iFrame1280x720: string;
    export let iFrame960x540: string;
  }

  namespace AVContentKeyRequest {
    export enum Status {
      RequestingResponse = 0,
      ReceivedResponse = 1,
      Renewed = 2,
      Retried = 3,
      Cancelled = 4,
      Failed = 5
    }

    export let receivedObsoleteContentKey: string;
    export let receivedResponseWithExpiredLease: string;
    export let timedOut: string;
  }

  namespace AVContentKeySessionServerPlaybackContextOption {
    export let protocolVersions: string;
    export let serverChallenge: string;
  }

  namespace AVContentKeySystem {
    export let authorizationToken: string;
    export let clearKey: string;
    export let fairPlayStreaming: string;
  }

  namespace AVDepthData {
    export enum Accuracy {
      Relative = 0,
      Absolute = 1
    }

    export enum Quality {
      Low = 0,
      High = 1
    }

  }

  namespace AVFileType {
    export let mobile3GPP: string;
    export let mobile3GPP2: string;
    export let ac3: string;
    export let aifc: string;
    export let aiff: string;
    export let amr: string;
    export let avci: string;
    export let m4a: string;
    export let m4v: string;
    export let caf: string;
    export let dng: string;
    export let eac3: string;
    export let heic: string;
    export let heif: string;
    export let jpg: string;
    export let mp4: string;
    export let mp3: string;
    export let mov: string;
    export let au: string;
    export let tif: string;
    export let wav: string;
  }

  namespace AVLayerVideoGravity {
    export let resize: string;
    export let resizeAspect: string;
    export let resizeAspectFill: string;
  }

  namespace AVMediaCharacteristic {
    export let audible: string;
    export let containsAlphaChannel: string;
    export let containsOnlyForcedSubtitles: string;
    export let describesMusicAndSoundForAccessibility: string;
    export let describesVideoForAccessibility: string;
    export let dubbedTranslation: string;
    export let easyToRead: string;
    export let frameBased: string;
    export let isAuxiliaryContent: string;
    export let isMainProgramContent: string;
    export let isOriginalContent: string;
    export let languageTranslation: string;
    export let legible: string;
    export let transcribesSpokenDialogForAccessibility: string;
    export let usesWideGamutColorSpace: string;
    export let visual: string;
    export let voiceOverTranslation: string;
  }

  namespace AVMediaType {
    export let audio: string;
    export let closedCaption: string;
    export let depthData: string;
    export let metadata: string;
    export let metadataObject: string;
    export let muxed: string;
    export let subtitle: string;
    export let text: string;
    export let timecode: string;
    export let video: string;
  }

  namespace AVMetadataExtraAttributeKey {
    export let baseURI: string;
    export let info: string;
    export let valueURI: string;
  }

  namespace AVMetadataFormat {
    export let hlsMetadata: string;
    export let id3Metadata: string;
    export let isoUserData: string;
    export let quickTimeMetadata: string;
    export let quickTimeUserData: string;
    export let unknown: string;
    export let iTunesMetadata: string;
  }

  namespace AVMetadataIdentifier {
    export let commonIdentifierAlbumName: string;
    export let commonIdentifierArtist: string;
    export let commonIdentifierArtwork: string;
    export let commonIdentifierAssetIdentifier: string;
    export let commonIdentifierAuthor: string;
    export let commonIdentifierContributor: string;
    export let commonIdentifierCopyrights: string;
    export let commonIdentifierCreationDate: string;
    export let commonIdentifierCreator: string;
    export let commonIdentifierDescription: string;
    export let commonIdentifierFormat: string;
    export let commonIdentifierLanguage: string;
    export let commonIdentifierLastModifiedDate: string;
    export let commonIdentifierLocation: string;
    export let commonIdentifierMake: string;
    export let commonIdentifierModel: string;
    export let commonIdentifierPublisher: string;
    export let commonIdentifierRelation: string;
    export let commonIdentifierSoftware: string;
    export let commonIdentifierSource: string;
    export let commonIdentifierSubject: string;
    export let commonIdentifierTitle: string;
    export let commonIdentifierType: string;
    export let identifier3GPUserDataAlbumAndTrack: string;
    export let identifier3GPUserDataAuthor: string;
    export let identifier3GPUserDataCollection: string;
    export let identifier3GPUserDataCopyright: string;
    export let identifier3GPUserDataDescription: string;
    export let identifier3GPUserDataGenre: string;
    export let identifier3GPUserDataKeywordList: string;
    export let identifier3GPUserDataLocation: string;
    export let identifier3GPUserDataMediaClassification: string;
    export let identifier3GPUserDataMediaRating: string;
    export let identifier3GPUserDataPerformer: string;
    export let identifier3GPUserDataRecordingYear: string;
    export let identifier3GPUserDataThumbnail: string;
    export let identifier3GPUserDataTitle: string;
    export let identifier3GPUserDataUserRating: string;
    export let id3MetadataAlbumSortOrder: string;
    export let id3MetadataAlbumTitle: string;
    export let id3MetadataAttachedPicture: string;
    export let id3MetadataAudioEncryption: string;
    export let id3MetadataAudioSeekPointIndex: string;
    export let id3MetadataBand: string;
    export let id3MetadataBeatsPerMinute: string;
    export let id3MetadataComments: string;
    export let id3MetadataCommercial: string;
    export let id3MetadataCommercialInformation: string;
    export let id3MetadataComposer: string;
    export let id3MetadataConductor: string;
    export let id3MetadataContentGroupDescription: string;
    export let id3MetadataContentType: string;
    export let id3MetadataCopyright: string;
    export let id3MetadataCopyrightInformation: string;
    export let id3MetadataDate: string;
    export let id3MetadataEncodedBy: string;
    export let id3MetadataEncodedWith: string;
    export let id3MetadataEncodingTime: string;
    export let id3MetadataEncryption: string;
    export let id3MetadataEqualization: string;
    export let id3MetadataEqualization2: string;
    export let id3MetadataEventTimingCodes: string;
    export let id3MetadataFileOwner: string;
    export let id3MetadataFileType: string;
    export let id3MetadataGeneralEncapsulatedObject: string;
    export let id3MetadataGroupIdentifier: string;
    export let id3MetadataInitialKey: string;
    export let id3MetadataInternationalStandardRecordingCode: string;
    export let id3MetadataInternetRadioStationName: string;
    export let id3MetadataInternetRadioStationOwner: string;
    export let id3MetadataInvolvedPeopleList_v23: string;
    export let id3MetadataInvolvedPeopleList_v24: string;
    export let id3MetadataLanguage: string;
    export let id3MetadataLeadPerformer: string;
    export let id3MetadataLength: string;
    export let id3MetadataLink: string;
    export let id3MetadataLyricist: string;
    export let id3MetadataMPEGLocationLookupTable: string;
    export let id3MetadataMediaType: string;
    export let id3MetadataModifiedBy: string;
    export let id3MetadataMood: string;
    export let id3MetadataMusicCDIdentifier: string;
    export let id3MetadataMusicianCreditsList: string;
    export let id3MetadataOfficialArtistWebpage: string;
    export let id3MetadataOfficialAudioFileWebpage: string;
    export let id3MetadataOfficialAudioSourceWebpage: string;
    export let id3MetadataOfficialInternetRadioStationHomepage: string;
    export let id3MetadataOfficialPublisherWebpage: string;
    export let id3MetadataOriginalAlbumTitle: string;
    export let id3MetadataOriginalArtist: string;
    export let id3MetadataOriginalFilename: string;
    export let id3MetadataOriginalLyricist: string;
    export let id3MetadataOriginalReleaseTime: string;
    export let id3MetadataOriginalReleaseYear: string;
    export let id3MetadataOwnership: string;
    export let id3MetadataPartOfASet: string;
    export let id3MetadataPayment: string;
    export let id3MetadataPerformerSortOrder: string;
    export let id3MetadataPlayCounter: string;
    export let id3MetadataPlaylistDelay: string;
    export let id3MetadataPopularimeter: string;
    export let id3MetadataPositionSynchronization: string;
    export let id3MetadataPrivate: string;
    export let id3MetadataProducedNotice: string;
    export let id3MetadataPublisher: string;
    export let id3MetadataRecommendedBufferSize: string;
    export let id3MetadataRecordingDates: string;
    export let id3MetadataRecordingTime: string;
    export let id3MetadataRelativeVolumeAdjustment: string;
    export let id3MetadataRelativeVolumeAdjustment2: string;
    export let id3MetadataReleaseTime: string;
    export let id3MetadataReverb: string;
    export let id3MetadataSeek: string;
    export let id3MetadataSetSubtitle: string;
    export let id3MetadataSignature: string;
    export let id3MetadataSize: string;
    export let id3MetadataSubTitle: string;
    export let id3MetadataSynchronizedLyric: string;
    export let id3MetadataSynchronizedTempoCodes: string;
    export let id3MetadataTaggingTime: string;
    export let id3MetadataTermsOfUse: string;
    export let id3MetadataTime: string;
    export let id3MetadataTitleDescription: string;
    export let id3MetadataTitleSortOrder: string;
    export let id3MetadataTrackNumber: string;
    export let id3MetadataUniqueFileIdentifier: string;
    export let id3MetadataUnsynchronizedLyric: string;
    export let id3MetadataUserText: string;
    export let id3MetadataUserURL: string;
    export let id3MetadataYear: string;
    export let isoUserDataCopyright: string;
    export let isoUserDataDate: string;
    export let isoUserDataTaggedCharacteristic: string;
    export let icyMetadataStreamTitle: string;
    export let icyMetadataStreamURL: string;
    export let quickTimeMetadataAlbum: string;
    export let quickTimeMetadataArranger: string;
    export let quickTimeMetadataArtist: string;
    export let quickTimeMetadataArtwork: string;
    export let quickTimeMetadataAuthor: string;
    export let quickTimeMetadataAutoLivePhoto: string;
    export let quickTimeMetadataCameraFrameReadoutTime: string;
    export let quickTimeMetadataCameraIdentifier: string;
    export let quickTimeMetadataCollectionUser: string;
    export let quickTimeMetadataComment: string;
    export let quickTimeMetadataComposer: string;
    export let quickTimeMetadataContentIdentifier: string;
    export let quickTimeMetadataCopyright: string;
    export let quickTimeMetadataCreationDate: string;
    export let quickTimeMetadataCredits: string;
    export let quickTimeMetadataDescription: string;
    export let quickTimeMetadataDetectedCatBody: string;
    export let quickTimeMetadataDetectedDogBody: string;
    export let quickTimeMetadataDetectedFace: string;
    export let quickTimeMetadataDetectedHumanBody: string;
    export let quickTimeMetadataDetectedSalientObject: string;
    export let quickTimeMetadataDirectionFacing: string;
    export let quickTimeMetadataDirectionMotion: string;
    export let quickTimeMetadataDirector: string;
    export let quickTimeMetadataDisplayName: string;
    export let quickTimeMetadataEncodedBy: string;
    export let quickTimeMetadataGenre: string;
    export let quickTimeMetadataInformation: string;
    export let quickTimeMetadataKeywords: string;
    export let quickTimeMetadataLivePhotoVitalityScore: string;
    export let quickTimeMetadataLivePhotoVitalityScoringVersion: string;
    export let quickTimeMetadataLocationBody: string;
    export let quickTimeMetadataLocationDate: string;
    export let quickTimeMetadataLocationISO6709: string;
    export let quickTimeMetadataLocationName: string;
    export let quickTimeMetadataLocationNote: string;
    export let quickTimeMetadataLocationRole: string;
    export let quickTimeMetadataMake: string;
    export let quickTimeMetadataModel: string;
    export let quickTimeMetadataOriginalArtist: string;
    export let quickTimeMetadataPerformer: string;
    export let quickTimeMetadataPhonogramRights: string;
    export let quickTimeMetadataPreferredAffineTransform: string;
    export let quickTimeMetadataProducer: string;
    export let quickTimeMetadataPublisher: string;
    export let quickTimeMetadataRatingUser: string;
    export let quickTimeMetadataSoftware: string;
    export let quickTimeMetadataSpatialOverCaptureQualityScore: string;
    export let quickTimeMetadataSpatialOverCaptureQualityScoringVersion: string;
    export let quickTimeMetadataTitle: string;
    export let quickTimeMetadataVideoOrientation: string;
    export let quickTimeMetadataYear: string;
    export let quickTimeMetadataiXML: string;
    export let quickTimeUserDataAlbum: string;
    export let quickTimeUserDataArranger: string;
    export let quickTimeUserDataArtist: string;
    export let quickTimeUserDataAuthor: string;
    export let quickTimeUserDataChapter: string;
    export let quickTimeUserDataComment: string;
    export let quickTimeUserDataComposer: string;
    export let quickTimeUserDataCopyright: string;
    export let quickTimeUserDataCreationDate: string;
    export let quickTimeUserDataCredits: string;
    export let quickTimeUserDataDescription: string;
    export let quickTimeUserDataDirector: string;
    export let quickTimeUserDataDisclaimer: string;
    export let quickTimeUserDataEncodedBy: string;
    export let quickTimeUserDataFullName: string;
    export let quickTimeUserDataGenre: string;
    export let quickTimeUserDataHostComputer: string;
    export let quickTimeUserDataInformation: string;
    export let quickTimeUserDataKeywords: string;
    export let quickTimeUserDataLocationISO6709: string;
    export let quickTimeUserDataMake: string;
    export let quickTimeUserDataModel: string;
    export let quickTimeUserDataOriginalArtist: string;
    export let quickTimeUserDataOriginalFormat: string;
    export let quickTimeUserDataOriginalSource: string;
    export let quickTimeUserDataPerformers: string;
    export let quickTimeUserDataPhonogramRights: string;
    export let quickTimeUserDataProducer: string;
    export let quickTimeUserDataProduct: string;
    export let quickTimeUserDataPublisher: string;
    export let quickTimeUserDataSoftware: string;
    export let quickTimeUserDataSpecialPlaybackRequirements: string;
    export let quickTimeUserDataTaggedCharacteristic: string;
    export let quickTimeUserDataTrack: string;
    export let quickTimeUserDataTrackName: string;
    export let quickTimeUserDataURLLink: string;
    export let quickTimeUserDataWarning: string;
    export let quickTimeUserDataWriter: string;
    export let iTunesMetadataAccountKind: string;
    export let iTunesMetadataAcknowledgement: string;
    export let iTunesMetadataAlbum: string;
    export let iTunesMetadataAlbumArtist: string;
    export let iTunesMetadataAppleID: string;
    export let iTunesMetadataArranger: string;
    export let iTunesMetadataArtDirector: string;
    export let iTunesMetadataArtist: string;
    export let iTunesMetadataArtistID: string;
    export let iTunesMetadataAuthor: string;
    export let iTunesMetadataBeatsPerMin: string;
    export let iTunesMetadataComposer: string;
    export let iTunesMetadataConductor: string;
    export let iTunesMetadataContentRating: string;
    export let iTunesMetadataCopyright: string;
    export let iTunesMetadataCoverArt: string;
    export let iTunesMetadataCredits: string;
    export let iTunesMetadataDescription: string;
    export let iTunesMetadataDirector: string;
    export let iTunesMetadataDiscCompilation: string;
    export let iTunesMetadataDiscNumber: string;
    export let iTunesMetadataEQ: string;
    export let iTunesMetadataEncodedBy: string;
    export let iTunesMetadataEncodingTool: string;
    export let iTunesMetadataExecProducer: string;
    export let iTunesMetadataGenreID: string;
    export let iTunesMetadataGrouping: string;
    export let iTunesMetadataLinerNotes: string;
    export let iTunesMetadataLyrics: string;
    export let iTunesMetadataOnlineExtras: string;
    export let iTunesMetadataOriginalArtist: string;
    export let iTunesMetadataPerformer: string;
    export let iTunesMetadataPhonogramRights: string;
    export let iTunesMetadataPlaylistID: string;
    export let iTunesMetadataPredefinedGenre: string;
    export let iTunesMetadataProducer: string;
    export let iTunesMetadataPublisher: string;
    export let iTunesMetadataRecordCompany: string;
    export let iTunesMetadataReleaseDate: string;
    export let iTunesMetadataSoloist: string;
    export let iTunesMetadataSongID: string;
    export let iTunesMetadataSongName: string;
    export let iTunesMetadataSoundEngineer: string;
    export let iTunesMetadataThanks: string;
    export let iTunesMetadataTrackNumber: string;
    export let iTunesMetadataTrackSubTitle: string;
    export let iTunesMetadataUserComment: string;
    export let iTunesMetadataUserGenre: string;
  }

  namespace AVMetadataKey {
    export let metadata3GPUserDataKeyAlbumAndTrack: string;
    export let metadata3GPUserDataKeyAuthor: string;
    export let metadata3GPUserDataKeyCollection: string;
    export let metadata3GPUserDataKeyCopyright: string;
    export let metadata3GPUserDataKeyDescription: string;
    export let metadata3GPUserDataKeyGenre: string;
    export let metadata3GPUserDataKeyKeywordList: string;
    export let metadata3GPUserDataKeyLocation: string;
    export let metadata3GPUserDataKeyMediaClassification: string;
    export let metadata3GPUserDataKeyMediaRating: string;
    export let metadata3GPUserDataKeyPerformer: string;
    export let metadata3GPUserDataKeyRecordingYear: string;
    export let metadata3GPUserDataKeyThumbnail: string;
    export let metadata3GPUserDataKeyTitle: string;
    export let metadata3GPUserDataKeyUserRating: string;
    export let commonKeyAlbumName: string;
    export let commonKeyArtist: string;
    export let commonKeyArtwork: string;
    export let commonKeyAuthor: string;
    export let commonKeyContributor: string;
    export let commonKeyCopyrights: string;
    export let commonKeyCreationDate: string;
    export let commonKeyCreator: string;
    export let commonKeyDescription: string;
    export let commonKeyFormat: string;
    export let commonKeyIdentifier: string;
    export let commonKeyLanguage: string;
    export let commonKeyLastModifiedDate: string;
    export let commonKeyLocation: string;
    export let commonKeyMake: string;
    export let commonKeyModel: string;
    export let commonKeyPublisher: string;
    export let commonKeyRelation: string;
    export let commonKeySoftware: string;
    export let commonKeySource: string;
    export let commonKeySubject: string;
    export let commonKeyTitle: string;
    export let commonKeyType: string;
    export let id3MetadataKeyAlbumSortOrder: string;
    export let id3MetadataKeyAlbumTitle: string;
    export let id3MetadataKeyAttachedPicture: string;
    export let id3MetadataKeyAudioEncryption: string;
    export let id3MetadataKeyAudioSeekPointIndex: string;
    export let id3MetadataKeyBand: string;
    export let id3MetadataKeyBeatsPerMinute: string;
    export let id3MetadataKeyComments: string;
    export let id3MetadataKeyCommercial: string;
    export let id3MetadataKeyCommercialInformation: string;
    export let id3MetadataKeyComposer: string;
    export let id3MetadataKeyConductor: string;
    export let id3MetadataKeyContentGroupDescription: string;
    export let id3MetadataKeyContentType: string;
    export let id3MetadataKeyCopyright: string;
    export let id3MetadataKeyCopyrightInformation: string;
    export let id3MetadataKeyDate: string;
    export let id3MetadataKeyEncodedBy: string;
    export let id3MetadataKeyEncodedWith: string;
    export let id3MetadataKeyEncodingTime: string;
    export let id3MetadataKeyEncryption: string;
    export let id3MetadataKeyEqualization: string;
    export let id3MetadataKeyEqualization2: string;
    export let id3MetadataKeyEventTimingCodes: string;
    export let id3MetadataKeyFileOwner: string;
    export let id3MetadataKeyFileType: string;
    export let id3MetadataKeyGeneralEncapsulatedObject: string;
    export let id3MetadataKeyGroupIdentifier: string;
    export let id3MetadataKeyInitialKey: string;
    export let id3MetadataKeyInternationalStandardRecordingCode: string;
    export let id3MetadataKeyInternetRadioStationName: string;
    export let id3MetadataKeyInternetRadioStationOwner: string;
    export let id3MetadataKeyInvolvedPeopleList_v23: string;
    export let id3MetadataKeyInvolvedPeopleList_v24: string;
    export let id3MetadataKeyLanguage: string;
    export let id3MetadataKeyLeadPerformer: string;
    export let id3MetadataKeyLength: string;
    export let id3MetadataKeyLink: string;
    export let id3MetadataKeyLyricist: string;
    export let id3MetadataKeyMPEGLocationLookupTable: string;
    export let id3MetadataKeyMediaType: string;
    export let id3MetadataKeyModifiedBy: string;
    export let id3MetadataKeyMood: string;
    export let id3MetadataKeyMusicCDIdentifier: string;
    export let id3MetadataKeyMusicianCreditsList: string;
    export let id3MetadataKeyOfficialArtistWebpage: string;
    export let id3MetadataKeyOfficialAudioFileWebpage: string;
    export let id3MetadataKeyOfficialAudioSourceWebpage: string;
    export let id3MetadataKeyOfficialInternetRadioStationHomepage: string;
    export let id3MetadataKeyOfficialPublisherWebpage: string;
    export let id3MetadataKeyOriginalAlbumTitle: string;
    export let id3MetadataKeyOriginalArtist: string;
    export let id3MetadataKeyOriginalFilename: string;
    export let id3MetadataKeyOriginalLyricist: string;
    export let id3MetadataKeyOriginalReleaseTime: string;
    export let id3MetadataKeyOriginalReleaseYear: string;
    export let id3MetadataKeyOwnership: string;
    export let id3MetadataKeyPartOfASet: string;
    export let id3MetadataKeyPayment: string;
    export let id3MetadataKeyPerformerSortOrder: string;
    export let id3MetadataKeyPlayCounter: string;
    export let id3MetadataKeyPlaylistDelay: string;
    export let id3MetadataKeyPopularimeter: string;
    export let id3MetadataKeyPositionSynchronization: string;
    export let id3MetadataKeyPrivate: string;
    export let id3MetadataKeyProducedNotice: string;
    export let id3MetadataKeyPublisher: string;
    export let id3MetadataKeyRecommendedBufferSize: string;
    export let id3MetadataKeyRecordingDates: string;
    export let id3MetadataKeyRecordingTime: string;
    export let id3MetadataKeyRelativeVolumeAdjustment: string;
    export let id3MetadataKeyRelativeVolumeAdjustment2: string;
    export let id3MetadataKeyReleaseTime: string;
    export let id3MetadataKeyReverb: string;
    export let id3MetadataKeySeek: string;
    export let id3MetadataKeySetSubtitle: string;
    export let id3MetadataKeySignature: string;
    export let id3MetadataKeySize: string;
    export let id3MetadataKeySubTitle: string;
    export let id3MetadataKeySynchronizedLyric: string;
    export let id3MetadataKeySynchronizedTempoCodes: string;
    export let id3MetadataKeyTaggingTime: string;
    export let id3MetadataKeyTermsOfUse: string;
    export let id3MetadataKeyTime: string;
    export let id3MetadataKeyTitleDescription: string;
    export let id3MetadataKeyTitleSortOrder: string;
    export let id3MetadataKeyTrackNumber: string;
    export let id3MetadataKeyUniqueFileIdentifier: string;
    export let id3MetadataKeyUnsynchronizedLyric: string;
    export let id3MetadataKeyUserText: string;
    export let id3MetadataKeyUserURL: string;
    export let id3MetadataKeyYear: string;
    export let isoUserDataKeyCopyright: string;
    export let isoUserDataKeyDate: string;
    export let isoUserDataKeyTaggedCharacteristic: string;
    export let icyMetadataKeyStreamTitle: string;
    export let icyMetadataKeyStreamURL: string;
    export let quickTimeMetadataKeyAlbum: string;
    export let quickTimeMetadataKeyArranger: string;
    export let quickTimeMetadataKeyArtist: string;
    export let quickTimeMetadataKeyArtwork: string;
    export let quickTimeMetadataKeyAuthor: string;
    export let quickTimeMetadataKeyCameraFrameReadoutTime: string;
    export let quickTimeMetadataKeyCameraIdentifier: string;
    export let quickTimeMetadataKeyCollectionUser: string;
    export let quickTimeMetadataKeyComment: string;
    export let quickTimeMetadataKeyComposer: string;
    export let quickTimeMetadataKeyContentIdentifier: string;
    export let quickTimeMetadataKeyCopyright: string;
    export let quickTimeMetadataKeyCreationDate: string;
    export let quickTimeMetadataKeyCredits: string;
    export let quickTimeMetadataKeyDescription: string;
    export let quickTimeMetadataKeyDirectionFacing: string;
    export let quickTimeMetadataKeyDirectionMotion: string;
    export let quickTimeMetadataKeyDirector: string;
    export let quickTimeMetadataKeyDisplayName: string;
    export let quickTimeMetadataKeyEncodedBy: string;
    export let quickTimeMetadataKeyGenre: string;
    export let quickTimeMetadataKeyInformation: string;
    export let quickTimeMetadataKeyKeywords: string;
    export let quickTimeMetadataKeyLocationBody: string;
    export let quickTimeMetadataKeyLocationDate: string;
    export let quickTimeMetadataKeyLocationISO6709: string;
    export let quickTimeMetadataKeyLocationName: string;
    export let quickTimeMetadataKeyLocationNote: string;
    export let quickTimeMetadataKeyLocationRole: string;
    export let quickTimeMetadataKeyMake: string;
    export let quickTimeMetadataKeyModel: string;
    export let quickTimeMetadataKeyOriginalArtist: string;
    export let quickTimeMetadataKeyPerformer: string;
    export let quickTimeMetadataKeyPhonogramRights: string;
    export let quickTimeMetadataKeyProducer: string;
    export let quickTimeMetadataKeyPublisher: string;
    export let quickTimeMetadataKeyRatingUser: string;
    export let quickTimeMetadataKeySoftware: string;
    export let quickTimeMetadataKeyTitle: string;
    export let quickTimeMetadataKeyYear: string;
    export let quickTimeMetadataKeyiXML: string;
    export let quickTimeUserDataKeyAlbum: string;
    export let quickTimeUserDataKeyArranger: string;
    export let quickTimeUserDataKeyArtist: string;
    export let quickTimeUserDataKeyAuthor: string;
    export let quickTimeUserDataKeyChapter: string;
    export let quickTimeUserDataKeyComment: string;
    export let quickTimeUserDataKeyComposer: string;
    export let quickTimeUserDataKeyCopyright: string;
    export let quickTimeUserDataKeyCreationDate: string;
    export let quickTimeUserDataKeyCredits: string;
    export let quickTimeUserDataKeyDescription: string;
    export let quickTimeUserDataKeyDirector: string;
    export let quickTimeUserDataKeyDisclaimer: string;
    export let quickTimeUserDataKeyEncodedBy: string;
    export let quickTimeUserDataKeyFullName: string;
    export let quickTimeUserDataKeyGenre: string;
    export let quickTimeUserDataKeyHostComputer: string;
    export let quickTimeUserDataKeyInformation: string;
    export let quickTimeUserDataKeyKeywords: string;
    export let quickTimeUserDataKeyLocationISO6709: string;
    export let quickTimeUserDataKeyMake: string;
    export let quickTimeUserDataKeyModel: string;
    export let quickTimeUserDataKeyOriginalArtist: string;
    export let quickTimeUserDataKeyOriginalFormat: string;
    export let quickTimeUserDataKeyOriginalSource: string;
    export let quickTimeUserDataKeyPerformers: string;
    export let quickTimeUserDataKeyPhonogramRights: string;
    export let quickTimeUserDataKeyProducer: string;
    export let quickTimeUserDataKeyProduct: string;
    export let quickTimeUserDataKeyPublisher: string;
    export let quickTimeUserDataKeySoftware: string;
    export let quickTimeUserDataKeySpecialPlaybackRequirements: string;
    export let quickTimeUserDataKeyTaggedCharacteristic: string;
    export let quickTimeUserDataKeyTrack: string;
    export let quickTimeUserDataKeyTrackName: string;
    export let quickTimeUserDataKeyURLLink: string;
    export let quickTimeUserDataKeyWarning: string;
    export let quickTimeUserDataKeyWriter: string;
    export let iTunesMetadataKeyAccountKind: string;
    export let iTunesMetadataKeyAcknowledgement: string;
    export let iTunesMetadataKeyAlbum: string;
    export let iTunesMetadataKeyAlbumArtist: string;
    export let iTunesMetadataKeyAppleID: string;
    export let iTunesMetadataKeyArranger: string;
    export let iTunesMetadataKeyArtDirector: string;
    export let iTunesMetadataKeyArtist: string;
    export let iTunesMetadataKeyArtistID: string;
    export let iTunesMetadataKeyAuthor: string;
    export let iTunesMetadataKeyBeatsPerMin: string;
    export let iTunesMetadataKeyComposer: string;
    export let iTunesMetadataKeyConductor: string;
    export let iTunesMetadataKeyContentRating: string;
    export let iTunesMetadataKeyCopyright: string;
    export let iTunesMetadataKeyCoverArt: string;
    export let iTunesMetadataKeyCredits: string;
    export let iTunesMetadataKeyDescription: string;
    export let iTunesMetadataKeyDirector: string;
    export let iTunesMetadataKeyDiscCompilation: string;
    export let iTunesMetadataKeyDiscNumber: string;
    export let iTunesMetadataKeyEQ: string;
    export let iTunesMetadataKeyEncodedBy: string;
    export let iTunesMetadataKeyEncodingTool: string;
    export let iTunesMetadataKeyExecProducer: string;
    export let iTunesMetadataKeyGenreID: string;
    export let iTunesMetadataKeyGrouping: string;
    export let iTunesMetadataKeyLinerNotes: string;
    export let iTunesMetadataKeyLyrics: string;
    export let iTunesMetadataKeyOnlineExtras: string;
    export let iTunesMetadataKeyOriginalArtist: string;
    export let iTunesMetadataKeyPerformer: string;
    export let iTunesMetadataKeyPhonogramRights: string;
    export let iTunesMetadataKeyPlaylistID: string;
    export let iTunesMetadataKeyPredefinedGenre: string;
    export let iTunesMetadataKeyProducer: string;
    export let iTunesMetadataKeyPublisher: string;
    export let iTunesMetadataKeyRecordCompany: string;
    export let iTunesMetadataKeyReleaseDate: string;
    export let iTunesMetadataKeySoloist: string;
    export let iTunesMetadataKeySongID: string;
    export let iTunesMetadataKeySongName: string;
    export let iTunesMetadataKeySoundEngineer: string;
    export let iTunesMetadataKeyThanks: string;
    export let iTunesMetadataKeyTrackNumber: string;
    export let iTunesMetadataKeyTrackSubTitle: string;
    export let iTunesMetadataKeyUserComment: string;
    export let iTunesMetadataKeyUserGenre: string;
  }

  namespace AVMetadataKeySpace {
    export let audioFile: string;
    export let common: string;
    export let hlsDateRange: string;
    export let id3: string;
    export let isoUserData: string;
    export let icy: string;
    export let quickTimeMetadata: string;
    export let quickTimeUserData: string;
    export let iTunes: string;
  }

  namespace AVMetadataObject {
    export let aztec: string;
    export let catBody: string;
    export let code128: string;
    export let code39: string;
    export let code39Mod43: string;
    export let code93: string;
    export let dataMatrix: string;
    export let dogBody: string;
    export let ean13: string;
    export let ean8: string;
    export let face: string;
    export let humanBody: string;
    export let itf14: string;
    export let interleaved2of5: string;
    export let pdf417: string;
    export let qr: string;
    export let salientObject: string;
    export let upce: string;
  }

  namespace AVOutputSettingsPreset {
    export let preset1280x720: string;
    export let preset1920x1080: string;
    export let preset3840x2160: string;
    export let preset640x480: string;
    export let preset960x540: string;
    export let hevc1920x1080: string;
    export let hevc1920x1080WithAlpha: string;
    export let hevc3840x2160: string;
    export let hevc3840x2160WithAlpha: string;
  }

  namespace AVPlayer {
    export enum ActionAtItemEnd {
      Advance = 0,
      Pause = 1,
      None = 2
    }

    export enum HDRMode {
      HLG = 1,
      HDR10 = 2,
      DolbyVision = 4
    }

    export enum Status {
      Unknown = 0,
      ReadyToPlay = 1,
      Failed = 2
    }

    export enum TimeControlStatus {
      Paused = 0,
      WaitingToPlayAtSpecifiedRate = 1,
      Playing = 2
    }

    export let eligibleForHDRPlaybackDidChangeNotification: string;
    export let toMinimizeStalls: string;
    export let evaluatingBufferingRate: string;
    export let noItemToPlay: string;
  }

  namespace AVPlayerItem {
    export enum Status {
      Unknown = 0,
      ReadyToPlay = 1,
      Failed = 2
    }

    export let mediaSelectionDidChangeNotification: string;
    export let recommendedTimeOffsetFromLiveDidChangeNotification: string;
  }

  namespace AVPlayerItemLegibleOutput {
    export let default_: string;
    export let sourceAndRulesOnly: string;
  }

  namespace AVPlayerLooper {
    export enum Status {
      Unknown = 0,
      Ready = 1,
      Failed = 2,
      Cancelled = 3
    }

  }

  namespace AVSampleBufferRenderSynchronizer {
    export let rateDidChangeNotification: string;
  }

  namespace AVSampleBufferRequest {
    export enum Direction {
      Forward = 1,
      None = 0,
      Reverse = -1
    }

    export enum Mode {
      Immediate = 0,
      Scheduled = 1,
      Opportunistic = 2
    }

  }

  namespace AVSemanticSegmentationMatte {
    export let hair: string;
    export let skin: string;
    export let teeth: string;
  }

  namespace AVVideoApertureMode {
    export let cleanAperture: string;
    export let encodedPixels: string;
    export let productionAperture: string;
  }

  namespace AVVideoCodecType {
    export let proRes422: string;
    export let proRes422HQ: string;
    export let proRes422LT: string;
    export let proRes422Proxy: string;
    export let proRes4444: string;
    export let h264: string;
    export let hevc: string;
    export let hevcWithAlpha: string;
    export let jpeg: string;
  }

  namespace Bundle {
    export let didLoadNotification: string;
  }

  namespace ByteCountFormatter {
    export enum CountStyle {
      File = 0,
      Memory = 1,
      Decimal = 2,
      Binary = 3
    }

    export enum Units {
      UseDefault = 0,
      UseBytes = 1,
      UseKB = 2,
      UseMB = 4,
      UseGB = 8,
      UseTB = 16,
      UsePB = 32,
      UseEB = 64,
      UseZB = 128,
      UseYBOrHigher = 65280,
      UseAll = 65535
    }

  }

  namespace CAAnimationCalculationMode {
    export let cubic: string;
    export let cubicPaced: string;
    export let discrete: string;
    export let linear: string;
    export let paced: string;
  }

  namespace CAAnimationRotationMode {
    export let rotateAuto: string;
    export let rotateAutoReverse: string;
  }

  namespace CAEmitterLayerEmitterMode {
    export let outline: string;
    export let points: string;
    export let surface: string;
    export let volume: string;
  }

  namespace CAEmitterLayerEmitterShape {
    export let circle: string;
    export let cuboid: string;
    export let line: string;
    export let point: string;
    export let rectangle: string;
    export let sphere: string;
  }

  namespace CAEmitterLayerRenderMode {
    export let additive: string;
    export let backToFront: string;
    export let oldestFirst: string;
    export let oldestLast: string;
    export let unordered: string;
  }

  namespace CAGradientLayerType {
    export let axial: string;
    export let conic: string;
    export let radial: string;
  }

  namespace CALayerContentsFilter {
    export let linear: string;
    export let nearest: string;
    export let trilinear: string;
  }

  namespace CALayerContentsFormat {
    export let gray8Uint: string;
    export let RGBA16Float: string;
    export let RGBA8Uint: string;
  }

  namespace CALayerContentsGravity {
    export let bottom: string;
    export let bottomLeft: string;
    export let bottomRight: string;
    export let center: string;
    export let left: string;
    export let resize: string;
    export let resizeAspect: string;
    export let resizeAspectFill: string;
    export let right: string;
    export let top: string;
    export let topLeft: string;
    export let topRight: string;
  }

  namespace CALayerCornerCurve {
    export let circular: string;
    export let continuous: string;
  }

  namespace CAMediaTimingFillMode {
    export let backwards: string;
    export let both: string;
    export let forwards: string;
    export let removed: string;
  }

  namespace CAMediaTimingFunctionName {
    export let default_: string;
    export let easeIn: string;
    export let easeInEaseOut: string;
    export let easeOut: string;
    export let linear: string;
  }

  namespace CAScrollLayerScrollMode {
    export let both: string;
    export let horizontally: string;
    export let none: string;
    export let vertically: string;
  }

  namespace CAShapeLayerFillRule {
    export let evenOdd: string;
    export let nonZero: string;
  }

  namespace CAShapeLayerLineCap {
    export let butt: string;
    export let round: string;
    export let square: string;
  }

  namespace CAShapeLayerLineJoin {
    export let bevel: string;
    export let miter: string;
    export let round: string;
  }

  namespace CATextLayerAlignmentMode {
    export let center: string;
    export let justified: string;
    export let left: string;
    export let natural: string;
    export let right: string;
  }

  namespace CATextLayerTruncationMode {
    export let end: string;
    export let middle: string;
    export let none: string;
    export let start: string;
  }

  namespace CATransitionSubtype {
    export let fromBottom: string;
    export let fromLeft: string;
    export let fromRight: string;
    export let fromTop: string;
  }

  namespace CATransitionType {
    export let fade: string;
    export let moveIn: string;
    export let push: string;
    export let reveal: string;
  }

  namespace CAValueFunctionName {
    export let rotateX: string;
    export let rotateY: string;
    export let rotateZ: string;
    export let scale: string;
    export let scaleX: string;
    export let scaleY: string;
    export let scaleZ: string;
    export let translate: string;
    export let translateX: string;
    export let translateY: string;
    export let translateZ: string;
  }

  namespace CFCalendarIdentifier {
    export let buddhistCalendar: any;
    export let chineseCalendar: any;
    export let gregorianCalendar: any;
    export let hebrewCalendar: any;
    export let cfiso8601Calendar: any;
    export let indianCalendar: any;
    export let islamicCalendar: any;
    export let islamicCivilCalendar: any;
    export let islamicTabularCalendar: any;
    export let islamicUmmAlQuraCalendar: any;
    export let japaneseCalendar: any;
    export let persianCalendar: any;
    export let republicOfChinaCalendar: any;
  }

  namespace CFDateFormatterKey {
    export let amSymbol: any;
    export let calendar: any;
    export let calendarName: any;
    export let defaultDate: any;
    export let defaultFormat: any;
    export let doesRelativeDateFormattingKey: any;
    export let eraSymbols: any;
    export let gregorianStartDate: any;
    export let isLenient: any;
    export let longEraSymbols: any;
    export let monthSymbols: any;
    export let pmSymbol: any;
    export let quarterSymbols: any;
    export let shortMonthSymbols: any;
    export let shortQuarterSymbols: any;
    export let shortStandaloneMonthSymbols: any;
    export let shortStandaloneQuarterSymbols: any;
    export let shortStandaloneWeekdaySymbols: any;
    export let shortWeekdaySymbols: any;
    export let standaloneMonthSymbols: any;
    export let standaloneQuarterSymbols: any;
    export let standaloneWeekdaySymbols: any;
    export let timeZone: any;
    export let twoDigitStartDate: any;
    export let veryShortMonthSymbols: any;
    export let veryShortStandaloneMonthSymbols: any;
    export let veryShortStandaloneWeekdaySymbols: any;
    export let veryShortWeekdaySymbols: any;
    export let weekdaySymbols: any;
  }

  namespace CFLocaleKey {
    export let alternateQuotationBeginDelimiterKey: any;
    export let alternateQuotationEndDelimiterKey: any;
    export let calendar: any;
    export let calendarIdentifier: any;
    export let collationIdentifier: any;
    export let collatorIdentifier: any;
    export let countryCode: any;
    export let currencyCode: any;
    export let currencySymbol: any;
    export let decimalSeparator: any;
    export let exemplarCharacterSet: any;
    export let groupingSeparator: any;
    export let identifier: any;
    export let languageCode: any;
    export let measurementSystem: any;
    export let quotationBeginDelimiterKey: any;
    export let quotationEndDelimiterKey: any;
    export let scriptCode: any;
    export let usesMetricSystem: any;
    export let variantCode: any;
  }

  namespace CFNotificationName {
    export let cfLocaleCurrentLocaleDidChange: any;
    export let cfTimeZoneSystemTimeZoneDidChange: any;
  }

  namespace CFNumberFormatterKey {
    export let alwaysShowDecimalSeparator: any;
    export let currencyCode: any;
    export let currencyDecimalSeparator: any;
    export let currencyGroupingSeparator: any;
    export let currencySymbol: any;
    export let decimalSeparator: any;
    export let defaultFormat: any;
    export let exponentSymbol: any;
    export let formatWidth: any;
    export let groupingSeparator: any;
    export let groupingSize: any;
    export let infinitySymbol: any;
    export let internationalCurrencySymbol: any;
    export let isLenient: any;
    export let maxFractionDigits: any;
    export let maxIntegerDigits: any;
    export let maxSignificantDigits: any;
    export let minFractionDigits: any;
    export let minIntegerDigits: any;
    export let minSignificantDigits: any;
    export let minusSign: any;
    export let multiplier: any;
    export let naNSymbol: any;
    export let negativePrefix: any;
    export let negativeSuffix: any;
    export let paddingCharacter: any;
    export let paddingPosition: any;
    export let perMillSymbol: any;
    export let percentSymbol: any;
    export let plusSign: any;
    export let positivePrefix: any;
    export let positiveSuffix: any;
    export let roundingIncrement: any;
    export let roundingMode: any;
    export let secondaryGroupingSize: any;
    export let useGroupingSeparator: any;
    export let useSignificantDigits: any;
    export let zeroSymbol: any;
  }

  namespace CFRunLoopMode {
    export let commonModes: any;
    export let defaultMode: any;
  }

  namespace CFStreamPropertyKey {
    export let appendToFile: any;
    export let dataWritten: any;
    export let fileCurrentOffset: any;
    export let socketNativeHandle: any;
    export let socketRemoteHostName: any;
    export let socketRemotePortNumber: any;
  }

  namespace CGAffineTransform {
    export let identity: CGAffineTransform;
  }

  namespace CGColor {
    export let __blackColorName: string;
    export let __clearColorName: string;
    export let conversionBlackPointCompensation: string;
    export let conversionTRCSize: string;
    export let __whiteColorName: string;
  }

  namespace CGColorSpace {
    export let acescgLinear: string;
    export let adobeRGB1998: string;
    export let dcip3: string;
    export let displayP3: string;
    export let displayP3_HLG: string;
    export let displayP3_PQ_EOTF: string;
    export let extendedGray: string;
    export let extendedLinearDisplayP3: string;
    export let extendedLinearGray: string;
    export let extendedLinearITUR_2020: string;
    export let extendedLinearSRGB: string;
    export let extendedSRGB: string;
    export let genericCMYK: string;
    export let genericGray: string;
    export let genericGrayGamma2_2: string;
    export let genericLab: string;
    export let genericRGB: string;
    export let genericRGBLinear: string;
    export let genericXYZ: string;
    export let itur_2020: string;
    export let itur_2020_HLG: string;
    export let itur_2020_PQ_EOTF: string;
    export let itur_709: string;
    export let linearGray: string;
    export let linearSRGB: string;
    export let rommrgb: string;
    export let sRGB: string;
  }

  namespace CGDisplayStream {
    export let colorSpace: string;
    export let destinationRect: string;
    export let minimumFrameTime: string;
    export let preserveAspectRatio: string;
    export let queueDepth: string;
    export let showCursor: string;
    export let sourceRect: string;
    export let yCbCrMatrix: string;
    export let yCbCrMatrix_ITU_R_601_4: string;
    export let yCbCrMatrix_ITU_R_709_2: string;
    export let yCbCrMatrix_SMPTE_240M_1995: string;
  }

  namespace CGFont {
    export let variationAxisDefaultValue: string;
    export let variationAxisMaxValue: string;
    export let variationAxisMinValue: string;
    export let variationAxisName: string;
  }

  namespace CGPDFTagProperty {
    export let actualText: any;
    export let alternativeText: any;
    export let languageText: any;
    export let titleText: any;
  }

  namespace CGPoint {
    export let zero: CGPoint;
  }

  namespace CGRect {
    export let infinite: CGRect;
    export let null_: CGRect;
    export let zero: CGRect;
  }

  namespace CGSize {
    export let zero: CGSize;
  }

  namespace CIContextOption {
    export let allowLowPower: string;
    export let cacheIntermediates: string;
    export let highQualityDownsample: string;
    export let outputColorSpace: string;
    export let outputPremultiplied: string;
    export let priorityRequestLow: string;
    export let useSoftwareRenderer: string;
    export let workingColorSpace: string;
    export let workingFormat: string;
  }

  namespace CIFormat {
    export let A16: number;
    export let A8: number;
    export let ABGR8: number;
    export let ARGB8: number;
    export let Af: number;
    export let Ah: number;
    export let BGRA8: number;
    export let L16: number;
    export let L8: number;
    export let LA16: number;
    export let LA8: number;
    export let LAf: number;
    export let LAh: number;
    export let Lf: number;
    export let Lh: number;
    export let R16: number;
    export let R8: number;
    export let RG16: number;
    export let RG8: number;
    export let RGBA16: number;
    export let RGBA8: number;
    export let RGBAf: number;
    export let RGBAh: number;
    export let RGf: number;
    export let RGh: number;
    export let Rf: number;
    export let Rh: number;
  }

  namespace CIImageAutoAdjustmentOption {
    export let crop: string;
    export let enhance: string;
    export let features: string;
    export let level: string;
    export let redEye: string;
  }

  namespace CIImageOption {
    export let applyOrientationProperty: string;
    export let auxiliaryDepth: string;
    export let auxiliaryDisparity: string;
    export let auxiliaryPortraitEffectsMatte: string;
    export let auxiliarySemanticSegmentationHairMatte: string;
    export let auxiliarySemanticSegmentationSkinMatte: string;
    export let auxiliarySemanticSegmentationTeethMatte: string;
    export let colorSpace: string;
    export let nearestSampling: string;
    export let properties: string;
    export let providerTileSize: string;
    export let providerUserInfo: string;
  }

  namespace CIImageRepresentationOption {
    export let avDepthData: string;
    export let avPortraitEffectsMatte: string;
    export let avSemanticSegmentationMattes: string;
    export let depthImage: string;
    export let disparityImage: string;
    export let portraitEffectsMatteImage: string;
    export let semanticSegmentationHairMatteImage: string;
    export let semanticSegmentationSkinMatteImage: string;
    export let semanticSegmentationTeethMatteImage: string;
  }

  namespace CIRAWFilterOption {
    export let activeKeys: string;
    export let allowDraftMode: string;
    export let baselineExposure: string;
    export let boostAmount: string;
    export let boostShadowAmount: string;
    export let colorNoiseReductionAmount: string;
    export let decoderVersion: string;
    export let disableGamutMap: string;
    export let enableChromaticNoiseTracking: string;
    export let enableSharpening: string;
    export let enableVendorLensCorrection: string;
    export let ignoreImageOrientation: string;
    export let imageOrientation: string;
    export let linearSpaceFilter: string;
    export let luminanceNoiseReductionAmount: string;
    export let moireAmount: string;
    export let neutralChromaticityX: string;
    export let neutralChromaticityY: string;
    export let neutralLocation: string;
    export let neutralTemperature: string;
    export let neutralTint: string;
    export let noiseReductionAmount: string;
    export let noiseReductionContrastAmount: string;
    export let noiseReductionDetailAmount: string;
    export let noiseReductionSharpnessAmount: string;
    export let scaleFactor: string;
    export let outputNativeSize: string;
    export let supportedDecoderVersions: string;
  }

  namespace CMImageDescriptionFlavor {
    export let mobile3GPFamily: any;
    export let isoFamily: any;
    export let quickTimeMovie: any;
  }

  namespace CMSampleTimingInfo {
    export let invalid: CMSampleTimingInfo;
  }

  namespace CMSoundDescriptionFlavor {
    export let mobile3GPFamily: any;
    export let isoFamily: any;
    export let quickTimeMovie: any;
    export let quickTimeMovieV2: any;
  }

  namespace CMTime {
    export let indefinite: CMTime;
    export let invalid: CMTime;
    export let negativeInfinity: CMTime;
    export let positiveInfinity: CMTime;
    export let zero: CMTime;
  }

  namespace CMTimeMapping {
    export let invalid: CMTimeMapping;
  }

  namespace CMTimeRange {
    export let invalid: CMTimeRange;
    export let zero: CMTimeRange;
  }

  namespace DateComponentsFormatter {
    export enum UnitsStyle {
      Positional = 0,
      Abbreviated = 1,
      Short = 2,
      Full = 3,
      SpellOut = 4,
      Brief = 5
    }

    export enum ZeroFormattingBehavior {
      None = 0,
      Default = 1,
      DropLeading = 2,
      DropMiddle = 4,
      DropTrailing = 8,
      DropAll = 14,
      Pad = 65536
    }

  }

  namespace DateFormatter {
    export enum Behavior {
      BehaviorDefault = 0,
      Behavior10_0 = 1000,
      Behavior10_4 = 1040
    }

    export enum Style {
      NoStyle = 0,
      ShortStyle = 1,
      MediumStyle = 2,
      LongStyle = 3,
      FullStyle = 4
    }

  }

  namespace DateIntervalFormatter {
    export enum Style {
      NoStyle = 0,
      ShortStyle = 1,
      MediumStyle = 2,
      LongStyle = 3,
      FullStyle = 4
    }

  }

  namespace Decimal {
    export type CalculationError = NSDecimalNumber;
    export type FloatLiteralType = number;
    export type IntegerLiteralType = number;
    export type Magnitude = number;
    export type RoundingMode = NSDecimalNumber;
    export type Stride = number;
  }

  namespace DistributedNotificationCenter {
    export enum Options {
      DeliverImmediately = 1,
      PostToAllSessions = 2
    }

    export enum SuspensionBehavior {
      Drop = 1,
      Coalesce = 2,
      Hold = 3,
      DeliverImmediately = 4
    }

    export let localNotificationCenterType: string;
  }

  namespace EnergyFormatter {
    export enum Unit {
      Joule = 11,
      Kilojoule = 14,
      Calorie = 1793,
      Kilocalorie = 1794
    }

  }

  namespace FileAttributeKey {
    export let appendOnly: string;
    export let busy: string;
    export let creationDate: string;
    export let deviceIdentifier: string;
    export let extensionHidden: string;
    export let groupOwnerAccountID: string;
    export let groupOwnerAccountName: string;
    export let hfsCreatorCode: string;
    export let hfsTypeCode: string;
    export let immutable: string;
    export let modificationDate: string;
    export let ownerAccountID: string;
    export let ownerAccountName: string;
    export let posixPermissions: string;
    export let protectionKey: string;
    export let referenceCount: string;
    export let size: string;
    export let systemFileNumber: string;
    export let systemFreeNodes: string;
    export let systemFreeSize: string;
    export let systemNodes: string;
    export let systemNumber: string;
    export let systemSize: string;
    export let type: string;
  }

  namespace FileAttributeType {
    export let typeBlockSpecial: string;
    export let typeCharacterSpecial: string;
    export let typeDirectory: string;
    export let typeRegular: string;
    export let typeSocket: string;
    export let typeSymbolicLink: string;
    export let typeUnknown: string;
  }

  namespace FileHandle {
    export let readCompletionNotification: string;
  }

  namespace FileManager {
    export enum DirectoryEnumerationOptions {
      SkipsSubdirectoryDescendants = 1,
      SkipsPackageDescendants = 2,
      SkipsHiddenFiles = 4,
      IncludesDirectoriesPostOrder = 8,
      ProducesRelativePathURLs = 16
    }

    export enum ItemReplacementOptions {
      UsingNewMetadataOnly = 1,
      WithoutDeletingBackupItem = 2
    }

    export enum UnmountOptions {
      AllPartitionsAndEjectDisk = 1,
      WithoutUI = 2
    }

    export enum SearchPathDirectory {
      ApplicationDirectory = 1,
      DemoApplicationDirectory = 2,
      DeveloperApplicationDirectory = 3,
      AdminApplicationDirectory = 4,
      LibraryDirectory = 5,
      DeveloperDirectory = 6,
      UserDirectory = 7,
      DocumentationDirectory = 8,
      DocumentDirectory = 9,
      CoreServiceDirectory = 10,
      AutosavedInformationDirectory = 11,
      DesktopDirectory = 12,
      CachesDirectory = 13,
      ApplicationSupportDirectory = 14,
      DownloadsDirectory = 15,
      InputMethodsDirectory = 16,
      MoviesDirectory = 17,
      MusicDirectory = 18,
      PicturesDirectory = 19,
      PrinterDescriptionDirectory = 20,
      SharedPublicDirectory = 21,
      PreferencePanesDirectory = 22,
      ApplicationScriptsDirectory = 23,
      ItemReplacementDirectory = 99,
      AllApplicationsDirectory = 100,
      AllLibrariesDirectory = 101,
      TrashDirectory = 102
    }

    export enum SearchPathDomainMask {
      UserDomainMask = 1,
      LocalDomainMask = 2,
      NetworkDomainMask = 4,
      SystemDomainMask = 8,
      AllDomainsMask = 65535
    }

    export enum URLRelationship {
      Contains = 0,
      Same = 1,
      Other = 2
    }

    export enum VolumeEnumerationOptions {
      SkipHiddenVolumes = 2,
      ProduceFileReferenceURLs = 4
    }

  }

  namespace FileProtectionType {
    export let complete: string;
    export let completeUnlessOpen: string;
    export let completeUntilFirstUserAuthentication: string;
    export let none: string;
  }

  namespace FileWrapper {
    export enum ReadingOptions {
      Immediate = 1,
      WithoutMapping = 2
    }

    export enum WritingOptions {
      Atomic = 1,
      WithNameUpdating = 2
    }

  }

  namespace Formatter {
    export enum Context {
      Unknown = 0,
      Dynamic = 1,
      Standalone = 2,
      ListItem = 3,
      BeginningOfSentence = 4,
      MiddleOfSentence = 5
    }

    export enum UnitStyle {
      Short = 1,
      Medium = 2,
      Long = 3
    }

  }

  namespace HTTPCookie {
    export enum AcceptPolicy {
      Always = 0,
      Never = 1,
      OnlyFromMainDocumentDomain = 2
    }

  }

  namespace HTTPCookiePropertyKey {
    export let comment: string;
    export let commentURL: string;
    export let discard: string;
    export let domain: string;
    export let expires: string;
    export let maximumAge: string;
    export let name: string;
    export let originURL: string;
    export let path: string;
    export let port: string;
    export let sameSitePolicy: string;
    export let secure: string;
    export let value: string;
    export let version: string;
  }

  namespace HTTPCookieStringPolicy {
    export let sameSiteLax: string;
    export let sameSiteStrict: string;
  }

  namespace ISO8601DateFormatter {
    export enum Options {
      WithYear = 1,
      WithMonth = 2,
      WithWeekOfYear = 4,
      WithDay = 16,
      WithTime = 32,
      WithTimeZone = 64,
      WithSpaceBetweenDateAndTime = 128,
      WithDashSeparatorInDate = 256,
      WithColonSeparatorInTime = 512,
      WithColonSeparatorInTimeZone = 1024,
      WithFractionalSeconds = 2048,
      WithFullDate = 275,
      WithFullTime = 1632,
      WithInternetDateTime = 1907
    }

  }

  namespace JSONSerialization {
    export enum ReadingOptions {
      MutableContainers = 1,
      MutableLeaves = 2,
      FragmentsAllowed = 4,
      AllowFragments = 4
    }

    export enum WritingOptions {
      PrettyPrinted = 1,
      SortedKeys = 2,
      FragmentsAllowed = 4,
      WithoutEscapingSlashes = 8
    }

  }

  namespace LengthFormatter {
    export enum Unit {
      Millimeter = 8,
      Centimeter = 9,
      Meter = 11,
      Kilometer = 14,
      Inch = 1281,
      Foot = 1282,
      Yard = 1283,
      Mile = 1284
    }

  }

  namespace MassFormatter {
    export enum Unit {
      Gram = 11,
      Kilogram = 14,
      Ounce = 1537,
      Pound = 1538,
      Stone = 1539
    }

  }

  namespace MeasurementFormatter {
    export enum UnitOptions {
      ProvidedUnit = 1,
      NaturalScale = 2,
      TemperatureWithoutUnit = 4
    }

  }

  namespace NSAccessibility {
    export enum AnnotationPosition {
      FullRange = 0,
      Start = 1,
      End = 2
    }

    export enum Orientation {
      Unknown = 0,
      Vertical = 1,
      Horizontal = 2
    }

    export enum RulerMarkerType {
      Unknown = 0,
      TabStopLeft = 1,
      TabStopRight = 2,
      TabStopCenter = 3,
      TabStopDecimal = 4,
      IndentHead = 5,
      IndentTail = 6,
      IndentFirstLine = 7
    }

    export enum SortDirection {
      Unknown = 0,
      Ascending = 1,
      Descending = 2
    }

    export enum Units {
      Unknown = 0,
      Inches = 1,
      Centimeters = 2,
      Points = 3,
      Picas = 4
    }

    export let activationPoint: string;
    export let allowedValues: string;
    export let alternateUIVisible: string;
    export let element: string;
    export let label: string;
    export let location: string;
    export let announcement: string;
    export let announcementRequested: string;
    export let applicationActivated: string;
    export let applicationDeactivated: string;
    export let applicationHidden: string;
    export let application: string;
    export let applicationShown: string;
    export let ascending: string;
    export let attributedStringForRange: string;
    export let boundsForRange: string;
    export let browser: string;
    export let busyIndicator: string;
    export let button: string;
    export let cancel: string;
    export let cancelButton: string;
    export let cellForColumnAndRow: string;
    export let cell: string;
    export let centerTabStop: string;
    export let centimeters: string;
    export let checkBox: string;
    export let children: string;
    export let clearButton: string;
    export let closeButton: string;
    export let collectionListSubrole: string;
    export let colorWell: string;
    export let columnCount: string;
    export let columnHeaderUIElements: string;
    export let columnIndexRange: string;
    export let column: string;
    export let columnTitles: string;
    export let columns: string;
    export let comboBox: string;
    export let confirm: string;
    export let containsProtectedContent: string;
    export let contentList: string;
    export let contents: string;
    export let created: string;
    export let criticalValue: string;
    export let decimalTabStop: string;
    export let decrement: string;
    export let decrementArrow: string;
    export let decrementButton: string;
    export let decrementPage: string;
    export let defaultButton: string;
    export let definitionList: string;
    export let delete_: string;
    export let descending: string;
    export let description: string;
    export let descriptionList: string;
    export let dialog: string;
    export let disclosedByRow: string;
    export let disclosedRows: string;
    export let disclosing: string;
    export let disclosureLevel: string;
    export let disclosureTriangle: string;
    export let document: string;
    export let drawerCreated: string;
    export let drawer: string;
    export let edited: string;
    export let enabled: string;
    export let ErrorCodeExceptionInfo: string;
    export let expanded: string;
    export let extrasMenuBar: string;
    export let filename: string;
    export let firstLineIndent: string;
    export let floatingWindow: string;
    export let focused: string;
    export let focusedUIElement: string;
    export let focusedUIElementChanged: string;
    export let focusedWindow: string;
    export let focusedWindowChanged: string;
    export let fontFamily: string;
    export let fontName: string;
    export let fontSize: string;
    export let frontmost: string;
    export let fullScreenButton: string;
    export let grid: string;
    export let group: string;
    export let growArea: string;
    export let handle: string;
    export let handles: string;
    export let headIndent: string;
    export let header: string;
    export let help: string;
    export let helpTagCreated: string;
    export let helpTag: string;
    export let hidden: string;
    export let horizontal: string;
    export let horizontalScrollBar: string;
    export let horizontalUnitDescription: string;
    export let horizontalUnits: string;
    export let identifier: string;
    export let image: string;
    export let inches: string;
    export let increment: string;
    export let incrementArrow: string;
    export let incrementButton: string;
    export let incrementPage: string;
    export let incrementor: string;
    export let index: string;
    export let insertionPointLineNumber: string;
    export let labelUIElements: string;
    export let labelValue: string;
    export let layoutArea: string;
    export let layoutChanged: string;
    export let layoutItem: string;
    export let layoutPointForScreenPoint: string;
    export let layoutSizeForScreenSize: string;
    export let leftTabStop: string;
    export let levelIndicator: string;
    export let lineForIndex: string;
    export let link: string;
    export let linkedUIElements: string;
    export let list: string;
    export let main: string;
    export let mainWindow: string;
    export let mainWindowChanged: string;
    export let markerGroupUIElement: string;
    export let markerType: string;
    export let markerTypeDescription: string;
    export let markerUIElements: string;
    export let markerValues: string;
    export let matte: string;
    export let maxValue: string;
    export let menuBar: string;
    export let menuBarItem: string;
    export let menuButton: string;
    export let menuItem: string;
    export let menu: string;
    export let minValue: string;
    export let minimizeButton: string;
    export let minimized: string;
    export let modal: string;
    export let moved: string;
    export let nextContents: string;
    export let numberOfCharacters: string;
    export let orderedByRow: string;
    export let orientation: string;
    export let outline: string;
    export let outlineRow: string;
    export let overflowButton: string;
    export let pageRole: string;
    export let parent: string;
    export let picas: string;
    export let pick: string;
    export let placeholderValue: string;
    export let points: string;
    export let popUpButton: string;
    export let popover: string;
    export let position: string;
    export let press: string;
    export let previousContents: string;
    export let priority: string;
    export let progressIndicator: string;
    export let proxy: string;
    export let rtfForRange: string;
    export let radioButton: string;
    export let radioGroup: string;
    export let raise: string;
    export let rangeForIndex: string;
    export let rangeForLine: string;
    export let rangeForPosition: string;
    export let ratingIndicator: string;
    export let relevanceIndicator: string;
    export let required: string;
    export let resized: string;
    export let rightTabStop: string;
    export let role: string;
    export let roleDescription: string;
    export let rowCollapsed: string;
    export let rowCount: string;
    export let rowCountChanged: string;
    export let rowExpanded: string;
    export let rowHeaderUIElements: string;
    export let rowIndexRange: string;
    export let row: string;
    export let rows: string;
    export let rulerMarker: string;
    export let ruler: string;
    export let screenPointForLayoutPoint: string;
    export let screenSizeForLayoutSize: string;
    export let scrollArea: string;
    export let scrollBar: string;
    export let searchButton: string;
    export let searchField: string;
    export let searchMenu: string;
    export let sectionListSubrole: string;
    export let secureTextField: string;
    export let selected: string;
    export let selectedCells: string;
    export let selectedCellsChanged: string;
    export let selectedChildren: string;
    export let selectedChildrenChanged: string;
    export let selectedChildrenMoved: string;
    export let selectedColumns: string;
    export let selectedColumnsChanged: string;
    export let selectedRows: string;
    export let selectedRowsChanged: string;
    export let selectedText: string;
    export let selectedTextChanged: string;
    export let selectedTextRange: string;
    export let selectedTextRanges: string;
    export let servesAsTitleForUIElements: string;
    export let sharedCharacterRange: string;
    export let sharedFocusElements: string;
    export let sharedTextUIElements: string;
    export let sheetCreated: string;
    export let sheet: string;
    export let showAlternateUI: string;
    export let showDefaultUI: string;
    export let showMenu: string;
    export let shownMenu: string;
    export let size: string;
    export let slider: string;
    export let sortButton: string;
    export let sortDirection: string;
    export let splitGroup: string;
    export let splitter: string;
    export let splitters: string;
    export let standardWindow: string;
    export let staticText: string;
    export let stringForRange: string;
    export let styleRangeForIndex: string;
    export let subrole: string;
    export let switch_: string;
    export let systemDialog: string;
    export let systemFloatingWindow: string;
    export let systemWide: string;
    export let tabButtonSubrole: string;
    export let tabGroup: string;
    export let table: string;
    export let tableRow: string;
    export let tabs: string;
    export let tailIndent: string;
    export let textArea: string;
    export let textAttachment: string;
    export let textField: string;
    export let textLink: string;
    export let timeline: string;
    export let title: string;
    export let titleChanged: string;
    export let titleUIElement: string;
    export let toggle: string;
    export let toolbarButton: string;
    export let toolbar: string;
    export let topLevelUIElement: string;
    export let uiElementDestroyed: string;
    export let uiElements: string;
    export let url: string;
    export let unitDescription: string;
    export let units: string;
    export let unitsChanged: string;
    export let unknown: string;
    export let value: string;
    export let valueChanged: string;
    export let valueDescription: string;
    export let valueIndicator: string;
    export let vertical: string;
    export let verticalScrollBar: string;
    export let verticalUnitDescription: string;
    export let verticalUnits: string;
    export let visibleCells: string;
    export let visibleCharacterRange: string;
    export let visibleChildren: string;
    export let visibleColumns: string;
    export let visibleName: string;
    export let visibleRows: string;
    export let warningValue: string;
    export let window: string;
    export let windowCreated: string;
    export let windowDeminiaturized: string;
    export let windowMiniaturized: string;
    export let windowMoved: string;
    export let windowResized: string;
    export let windows: string;
    export let zoomButton: string;
  }

  namespace NSAccessibilityCustomRotor {
    export enum SearchDirection {
      Previous = 0,
      Next = 1
    }

    export enum RotorType {
      Custom = 0,
      Any = 1,
      Annotation = 2,
      BoldText = 3,
      Heading = 4,
      HeadingLevel1 = 5,
      HeadingLevel2 = 6,
      HeadingLevel3 = 7,
      HeadingLevel4 = 8,
      HeadingLevel5 = 9,
      HeadingLevel6 = 10,
      Image = 11,
      ItalicText = 12,
      Landmark = 13,
      Link = 14,
      List = 15,
      MisspelledWord = 16,
      Table = 17,
      TextField = 18,
      UnderlinedText = 19,
      VisitedLink = 20
    }

  }

  namespace NSAlert {
    export enum Style {
      Warning = 0,
      Informational = 1,
      Critical = 2
    }

  }

  namespace NSAnimation {
    export enum BlockingMode {
      Blocking = 0,
      Nonblocking = 1,
      NonblockingThreaded = 2
    }

    export enum Curve {
      EaseInOut = 0,
      EaseIn = 1,
      EaseOut = 2,
      Linear = 3
    }

    export let progressMarkUserInfoKey: string;
    export let progressMarkNotification: string;
    export type Progress = number;
  }

  namespace NSAppKitVersion {
    export let current: number;
    export let macOS10_0: number;
    export let macOS10_1: number;
    export let macOS10_10: number;
    export let macOS10_10_2: number;
    export let macOS10_10_3: number;
    export let macOS10_10_4: number;
    export let macOS10_10_5: number;
    export let macOS10_10_Max: number;
    export let macOS10_11: number;
    export let macOS10_11_1: number;
    export let macOS10_11_2: number;
    export let macOS10_11_3: number;
    export let macOS10_12: number;
    export let macOS10_12_1: number;
    export let macOS10_12_2: number;
    export let macOS10_13: number;
    export let macOS10_13_1: number;
    export let macOS10_13_2: number;
    export let macOS10_13_4: number;
    export let number10_14: number;
    export let number10_14_1: number;
    export let number10_14_2: number;
    export let number10_14_3: number;
    export let number10_14_4: number;
    export let number10_14_5: number;
    export let macOS10_2: number;
    export let macOS10_2_3: number;
    export let macOS10_3: number;
    export let macOS10_3_2: number;
    export let macOS10_3_3: number;
    export let macOS10_3_5: number;
    export let macOS10_3_7: number;
    export let macOS10_3_9: number;
    export let macOS10_4: number;
    export let macOS10_4_1: number;
    export let macOS10_4_3: number;
    export let macOS10_4_4: number;
    export let macOS10_4_7: number;
    export let macOS10_5: number;
    export let macOS10_5_2: number;
    export let macOS10_5_3: number;
    export let macOS10_6: number;
    export let macOS10_7: number;
    export let macOS10_7_2: number;
    export let macOS10_7_3: number;
    export let macOS10_7_4: number;
    export let macOS10_8: number;
    export let macOS10_9: number;
    export let numberWithColumnResizingBrowser: number;
    export let numberWithContinuousScrollingBrowser: number;
    export let numberWithCursorSizeSupport: number;
    export let numberWithCustomSheetPosition: number;
    export let numberWithDeferredWindowDisplaySupport: number;
    export let numberWithDirectionalTabs: number;
    export let numberWithDockTilePlugInSupport: number;
    export let numberWithPatternColorLeakFix: number;
  }

  namespace NSAppearance {
    export let accessibilityHighContrastAqua: string;
    export let accessibilityHighContrastDarkAqua: string;
    export let accessibilityHighContrastVibrantDark: string;
    export let accessibilityHighContrastVibrantLight: string;
    export let aqua: string;
    export let darkAqua: string;
    export let vibrantDark: string;
    export let vibrantLight: string;
  }

  namespace NSAppleEventDescriptor {
    export enum SendOptions {
      NoReply = 1,
      QueueReply = 2,
      WaitForReply = 3,
      NeverInteract = 16,
      CanInteract = 32,
      AlwaysInteract = 48,
      CanSwitchLayer = 64,
      DontRecord = 4096,
      DontExecute = 8192,
      DontAnnotate = 65536,
      DefaultOptions = 35
    }

  }

  namespace NSAppleEventManager {
    export type SuspensionID = OpaquePointer;
  }

  namespace NSAppleScript {
    export let errorAppName: string;
    export let errorBriefMessage: string;
    export let errorMessage: string;
    export let errorNumber: string;
    export let errorRange: string;
  }

  namespace NSApplication {
    export enum ActivationOptions {
      ActivateAllWindows = 1,
      ActivateIgnoringOtherApps = 2
    }

    export enum ActivationPolicy {
      Regular = 0,
      Accessory = 1,
      Prohibited = 2
    }

    export enum DelegateReply {
      Success = 0,
      Cancel = 1,
      Failure = 2
    }

    export enum OcclusionState {
      Visible = 2
    }

    export enum PresentationOptions {
      Default = 0,
      AutoHideDock = 1,
      HideDock = 2,
      AutoHideMenuBar = 4,
      HideMenuBar = 8,
      DisableAppleMenu = 16,
      DisableProcessSwitching = 32,
      DisableForceQuit = 64,
      DisableSessionTermination = 128,
      DisableHideApplication = 256,
      DisableMenuBarTransparency = 512,
      FullScreen = 1024,
      AutoHideToolbar = 2048,
      DisableCursorLocationAssistance = 4096
    }

    export enum PrintReply {
      PrintingCancelled = 0,
      PrintingSuccess = 1,
      PrintingFailure = 3,
      PrintingReplyLater = 2
    }

    export enum TerminateReply {
      TerminateCancel = 0,
      TerminateNow = 1,
      TerminateLater = 2
    }

    export enum RemoteNotificationType {
      None = 0,
      Badge = 1,
      Sound = 2,
      Alert = 4
    }

    export enum RequestUserAttentionType {
      CriticalRequest = 0,
      InformationalRequest = 10
    }

    export enum WindowListOptions {
      OrderedFrontToBack = 1
    }

    export let applicationIcon: string;
    export let applicationName: string;
    export let applicationVersion: string;
    export let credits: string;
    export let version: string;
    export let alertFirstButtonReturn: number;
    export let alertSecondButtonReturn: number;
    export let alertThirdButtonReturn: number;
    export let didBecomeActiveNotification: string;
    export let didChangeOcclusionStateNotification: string;
    export let didChangeScreenParametersNotification: string;
    export let didFinishLaunchingNotification: string;
    export let didFinishRestoringWindowsNotification: string;
    export let didHideNotification: string;
    export let didResignActiveNotification: string;
    export let didUnhideNotification: string;
    export let didUpdateNotification: string;
    export let launchIsDefaultUserInfoKey: string;
    export let launchUserNotificationUserInfoKey: string;
    export let willBecomeActiveNotification: string;
    export let willFinishLaunchingNotification: string;
    export let willHideNotification: string;
    export let willResignActiveNotification: string;
    export let willTerminateNotification: string;
    export let willUnhideNotification: string;
    export let willUpdateNotification: string;
    export let abort: number;
    export let cancel: number;
    export let continue_: number;
    export let OK: number;
    export let stop: number;
    export type ModalSession = OpaquePointer;
  }

  namespace NSArray {
    export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSAttributedString {
    export enum SpellingState {
      SpellingFlag = 1,
      GrammarFlag = 2
    }

    export enum EnumerationOptions {
      Reverse = 2,
      LongestEffectiveRangeNotRequired = 1048576
    }

    export let accessibilityAnnotationTextAttribute: string;
    export let accessibilityAttachment: string;
    export let accessibilityAutocorrected: string;
    export let accessibilityBackgroundColor: string;
    export let accessibilityCustomText: string;
    export let accessibilityFont: string;
    export let accessibilityForegroundColor: string;
    export let accessibilityLanguage: string;
    export let accessibilityLink: string;
    export let accessibilityListItemIndex: string;
    export let accessibilityListItemLevel: string;
    export let accessibilityListItemPrefix: string;
    export let accessibilityMarkedMisspelled: string;
    export let accessibilityMisspelled: string;
    export let accessibilityShadow: string;
    export let accessibilityStrikethroughColor: string;
    export let accessibilityStrikethrough: string;
    export let accessibilitySuperscript: string;
    export let accessibilityAlignment: string;
    export let accessibilityUnderlineColor: string;
    export let accessibilityUnderline: string;
    export let appearance: string;
    export let attachment: string;
    export let author: string;
    export let backgroundColor: string;
    export let baseURL: string;
    export let baselineOffset: string;
    export let bottomMargin: string;
    export let category: string;
    export let characterEncoding: string;
    export let cocoaVersion: string;
    export let comment: string;
    export let company: string;
    export let converted: string;
    export let copyright: string;
    export let creationTime: string;
    export let cursor: string;
    export let defaultAttributes: string;
    export let defaultTabInterval: string;
    export let docFormat: string;
    export let documentType: string;
    export let editor: string;
    export let excludedElements: string;
    export let expansion: string;
    export let fileType: string;
    export let font: string;
    export let foregroundColor: string;
    export let glyphInfo: string;
    export let html: string;
    export let hyphenationFactor: string;
    export let kern: string;
    export let keywords: string;
    export let leftMargin: string;
    export let ligature: string;
    export let link: string;
    export let macSimpleText: string;
    export let manager: string;
    export let markedClauseSegment: string;
    export let modificationTime: string;
    export let obliqueness: string;
    export let officeOpenXML: string;
    export let openDocument: string;
    export let paperSize: string;
    export let paragraphStyle: string;
    export let plain: string;
    export let prefixSpaces: string;
    export let rtfd: string;
    export let rtf: string;
    export let readOnly: string;
    export let rightMargin: string;
    export let shadow: string;
    export let sourceTextScaling: string;
    export let spellingState: string;
    export let strikethroughColor: string;
    export let strikethroughStyle: string;
    export let strokeColor: string;
    export let strokeWidth: string;
    export let subject: string;
    export let superscript: string;
    export let targetTextScaling: string;
    export let textAlternatives: string;
    export let textEffect: string;
    export let letterpressStyle: string;
    export let textEncodingName: string;
    export let orientation: string;
    export let range: string;
    export let textLayoutSections: string;
    export let textScaling: string;
    export let textSizeMultiplier: string;
    export let timeout: string;
    export let title: string;
    export let toolTip: string;
    export let topMargin: string;
    export let underlineColor: string;
    export let underlineStyle: string;
    export let verticalGlyphForm: string;
    export let viewMode: string;
    export let viewSize: string;
    export let viewZoom: string;
    export let webArchive: string;
    export let webPreferences: string;
    export let webResourceLoadDelegate: string;
    export let wordML: string;
    export let writingDirection: string;
  }

  namespace NSBackgroundActivityScheduler {
    export enum Result {
      Finished = 1,
      Deferred = 2
    }

  }

  namespace NSBezierPath {
    export enum ElementType {
      MoveTo = 0,
      LineTo = 1,
      CurveTo = 2,
      ClosePath = 3
    }

    export enum LineCapStyle {
      Butt = 0,
      Round = 1,
      Square = 2
    }

    export enum LineJoinStyle {
      Miter = 0,
      Round = 1,
      Bevel = 2
    }

    export enum WindingRule {
      NonZero = 0,
      EvenOdd = 1
    }

    export let bevel: NSBezierPath.LineJoinStyle;
    export let butt: NSBezierPath.LineCapStyle;
    export let closePath: NSBezierPath.ElementType;
    export let curveTo: NSBezierPath.ElementType;
    export let evenOdd: NSBezierPath.WindingRule;
    export let lineTo: NSBezierPath.ElementType;
    export let miter: NSBezierPath.LineJoinStyle;
    export let moveTo: NSBezierPath.ElementType;
    export let nonZero: NSBezierPath.WindingRule;
    export let round: NSBezierPath.LineCapStyle;
    export let square: NSBezierPath.LineCapStyle;
  }

  namespace NSBindingInfoKey {
    export let observedKeyPath: string;
    export let observedObject: string;
    export let options: string;
  }

  namespace NSBindingName {
    export let alignment: string;
    export let alternateImage: string;
    export let alternateTitle: string;
    export let animate: string;
    export let animationDelay: string;
    export let argument: string;
    export let attributedString: string;
    export let contentArray: string;
    export let contentArrayForMultipleSelection: string;
    export let content: string;
    export let contentDictionary: string;
    export let contentHeight: string;
    export let contentObject: string;
    export let contentObjects: string;
    export let contentSet: string;
    export let contentValues: string;
    export let contentWidth: string;
    export let criticalValue: string;
    export let data: string;
    export let displayPatternTitle: string;
    export let displayPatternValue: string;
    export let documentEdited: string;
    export let doubleClickArgument: string;
    export let doubleClickTarget: string;
    export let editable: string;
    export let enabled: string;
    export let excludedKeys: string;
    export let filterPredicate: string;
    export let font: string;
    export let fontBold: string;
    export let fontFamilyName: string;
    export let fontItalic: string;
    export let fontName: string;
    export let fontSize: string;
    export let headerTitle: string;
    export let hidden: string;
    export let image: string;
    export let includedKeys: string;
    export let initialKey: string;
    export let initialValue: string;
    export let isIndeterminate: string;
    export let label: string;
    export let localizedKeyDictionary: string;
    export let managedObjectContext: string;
    export let maxValue: string;
    export let maxWidth: string;
    export let maximumRecents: string;
    export let minValue: string;
    export let minWidth: string;
    export let mixedStateImage: string;
    export let offStateImage: string;
    export let onStateImage: string;
    export let positioningRect: string;
    export let predicate: string;
    export let recentSearches: string;
    export let representedFilename: string;
    export let rowHeight: string;
    export let selectedIdentifier: string;
    export let selectedIndex: string;
    export let selectedLabel: string;
    export let selectedObject: string;
    export let selectedObjects: string;
    export let selectedTag: string;
    export let selectedValue: string;
    export let selectedValues: string;
    export let selectionIndexPaths: string;
    export let selectionIndexes: string;
    export let sortDescriptors: string;
    export let target: string;
    export let textColor: string;
    export let title: string;
    export let toolTip: string;
    export let transparent: string;
    export let value: string;
    export let valuePath: string;
    export let valueURL: string;
    export let visible: string;
    export let warningValue: string;
    export let width: string;
  }

  namespace NSBindingOption {
    export let allowsEditingMultipleValuesSelection: string;
    export let allowsNullArgument: string;
    export let alwaysPresentsApplicationModalAlerts: string;
    export let conditionallySetsEditable: string;
    export let conditionallySetsEnabled: string;
    export let conditionallySetsHidden: string;
    export let contentPlacementTag: string;
    export let continuouslyUpdatesValue: string;
    export let createsSortDescriptor: string;
    export let deletesObjectsOnRemove: string;
    export let displayName: string;
    export let displayPattern: string;
    export let handlesContentAsCompoundValue: string;
    export let insertsNullPlaceholder: string;
    export let invokesSeparatelyWithArrayObjects: string;
    export let multipleValuesPlaceholder: string;
    export let noSelectionPlaceholder: string;
    export let notApplicablePlaceholder: string;
    export let nullPlaceholder: string;
    export let predicateFormat: string;
    export let raisesForNotApplicableKeys: string;
    export let selectorName: string;
    export let selectsAllWhenSettingContent: string;
    export let validatesImmediately: string;
    export let valueTransformer: string;
    export let valueTransformerName: string;
  }

  namespace NSBitmapImageRep {
    export enum Format {
      AlphaFirst = 1,
      AlphaNonpremultiplied = 2,
      FloatingPointSamples = 4,
      SixteenBitLittleEndian = 256,
      ThirtyTwoBitLittleEndian = 512,
      SixteenBitBigEndian = 1024,
      ThirtyTwoBitBigEndian = 2048
    }

    export enum FileType {
      TIFF = 0,
      BMP = 1,
      GIF = 2,
      JPEG = 3,
      PNG = 4,
      JPEG2000 = 5
    }

    export enum LoadStatus {
      UnknownType = -1,
      ReadingHeader = -2,
      WillNeedAllData = -3,
      InvalidData = -4,
      UnexpectedEOF = -5,
      Completed = -6
    }

    export enum TIFFCompression {
      None = 1,
      CCITTFAX3 = 3,
      CCITTFAX4 = 4,
      LZW = 5,
      JPEG = 6,
      NEXT = 32766,
      PackBits = 32773,
      OldJPEG = 32865
    }

    export let colorSyncProfileData: string;
    export let compressionFactor: string;
    export let compressionMethod: string;
    export let currentFrame: string;
    export let currentFrameDuration: string;
    export let ditherTransparency: string;
    export let exifData: string;
    export let fallbackBackgroundColor: string;
    export let frameCount: string;
    export let gamma: string;
    export let interlaced: string;
    export let loopCount: string;
    export let progressive: string;
    export let rgbColorTable: string;
  }

  namespace NSBox {
    export enum BoxType {
      Primary = 0,
      Separator = 2,
      Custom = 4
    }

    export enum TitlePosition {
      NoTitle = 0,
      AboveTop = 1,
      AtTop = 2,
      BelowTop = 3,
      AboveBottom = 4,
      AtBottom = 5,
      BelowBottom = 6
    }

    export let primary: NSBox.BoxType;
  }

  namespace NSBrowser {
    export enum ColumnResizingType {
      NoColumnResizing = 0,
      AutoColumnResizing = 1,
      UserColumnResizing = 2
    }

    export enum DropOperation {
      On = 0,
      Above = 1
    }

    export let columnConfigurationDidChangeNotification: string;
    export type ColumnsAutosaveName = String;
  }

  namespace NSButton {
    export enum BezelStyle {
      Rounded = 1,
      RegularSquare = 2,
      Disclosure = 5,
      ShadowlessSquare = 6,
      Circular = 7,
      TexturedSquare = 8,
      HelpButton = 9,
      SmallSquare = 10,
      TexturedRounded = 11,
      RoundRect = 12,
      Recessed = 13,
      RoundedDisclosure = 14,
      Inline = 15
    }

    export enum ButtonType {
      MomentaryLight = 0,
      PushOnPushOff = 1,
      Toggle = 2,
      Switch = 3,
      Radio = 4,
      MomentaryChange = 5,
      OnOff = 6,
      MomentaryPushIn = 7,
      Accelerator = 8,
      MultiLevelAccelerator = 9
    }

  }

  namespace NSCalendar {
    export enum Options {
      WrapComponents = 1,
      MatchStrictly = 2,
      SearchBackwards = 4,
      MatchPreviousTimePreservingSmallerUnits = 256,
      MatchNextTimePreservingSmallerUnits = 512,
      MatchNextTime = 1024,
      MatchFirst = 4096,
      MatchLast = 8192
    }

    export enum Unit {
      CalendarUnitEra = 2,
      CalendarUnitYear = 4,
      CalendarUnitMonth = 8,
      CalendarUnitDay = 16,
      CalendarUnitHour = 32,
      CalendarUnitMinute = 64,
      CalendarUnitSecond = 128,
      CalendarUnitWeekday = 512,
      CalendarUnitWeekdayOrdinal = 1024,
      CalendarUnitQuarter = 2048,
      CalendarUnitWeekOfMonth = 4096,
      CalendarUnitWeekOfYear = 8192,
      CalendarUnitYearForWeekOfYear = 16384,
      CalendarUnitNanosecond = 32768,
      CalendarUnitCalendar = 1048576,
      CalendarUnitTimeZone = 2097152,
      EraCalendarUnit = 2,
      YearCalendarUnit = 4,
      MonthCalendarUnit = 8,
      DayCalendarUnit = 16,
      HourCalendarUnit = 32,
      MinuteCalendarUnit = 64,
      SecondCalendarUnit = 128,
      WeekCalendarUnit = 256,
      WeekdayCalendarUnit = 512,
      WeekdayOrdinalCalendarUnit = 1024,
      QuarterCalendarUnit = 2048,
      WeekOfMonthCalendarUnit = 4096,
      WeekOfYearCalendarUnit = 8192,
      YearForWeekOfYearCalendarUnit = 16384,
      CalendarCalendarUnit = 1048576,
      TimeZoneCalendarUnit = 2097152
    }

    export let buddhist: string;
    export let chinese: string;
    export let coptic: string;
    export let ethiopicAmeteAlem: string;
    export let ethiopicAmeteMihret: string;
    export let gregorian: string;
    export let hebrew: string;
    export let ISO8601: string;
    export let indian: string;
    export let islamic: string;
    export let islamicCivil: string;
    export let islamicTabular: string;
    export let islamicUmmAlQura: string;
    export let japanese: string;
    export let persian: string;
    export let republicOfChina: string;
  }

  namespace NSCell {
    export enum Attribute {
      CellDisabled = 0,
      CellState = 1,
      PushInCell = 2,
      CellEditable = 3,
      ChangeGrayCell = 4,
      CellHighlighted = 5,
      CellLightsByContents = 6,
      CellLightsByGray = 7,
      ChangeBackgroundCell = 8,
      CellLightsByBackground = 9,
      CellIsBordered = 10,
      CellHasOverlappingImage = 11,
      CellHasImageHorizontal = 12,
      CellHasImageOnLeftOrBottom = 13,
      CellChangesContents = 14,
      CellIsInsetButton = 15,
      CellAllowsMixedState = 16
    }

    export enum HitResult {
      None = 0,
      ContentArea = 1,
      EditableTextArea = 2,
      TrackableArea = 4
    }

    export enum StyleMask {
      NoCellMask = 0,
      ContentsCellMask = 1,
      PushInCellMask = 2,
      ChangeGrayCellMask = 4,
      ChangeBackgroundCellMask = 8
    }

    export enum CellType {
      NullCellType = 0,
      TextCellType = 1,
      ImageCellType = 2
    }

  }

  namespace NSCoder {
    export enum DecodingFailurePolicy {
      RaiseException = 0,
      SetErrorAndReturn = 1
    }

  }

  namespace NSCollectionView {
    export enum UpdateAction {
      Insert = 0,
      Delete = 1,
      Reload = 2,
      Move = 3,
      None = 4
    }

    export enum DropOperation {
      On = 0,
      Before = 1
    }

    export enum ScrollDirection {
      Vertical = 0,
      Horizontal = 1
    }

    export enum ScrollPosition {
      None = 0,
      Top = 1,
      CenteredVertically = 2,
      Bottom = 4,
      NearestHorizontalEdge = 512,
      Left = 8,
      CenteredHorizontally = 16,
      Right = 32,
      LeadingEdge = 64,
      TrailingEdge = 128,
      NearestVerticalEdge = 256
    }

    export let elementKindInterItemGapIndicator: string;
    export let elementKindSectionFooter: string;
    export let elementKindSectionHeader: string;
    export type DecorationElementKind = String;
    export type SupplementaryElementKind = String;
  }

  namespace NSCollectionViewItem {
    export enum HighlightState {
      None = 0,
      ForSelection = 1,
      ForDeselection = 2,
      AsDropTarget = 3
    }

  }

  namespace NSCollectionViewTransitionLayout {
    export type AnimatedKey = String;
  }

  namespace NSColor {
    export enum SystemEffect {
      None = 0,
      Pressed = 1,
      DeepPressed = 2,
      Disabled = 3,
      Rollover = 4
    }

    export enum ColorType {
      ComponentBased = 0,
      Pattern = 1,
      Catalog = 2
    }

    export let currentControlTintDidChangeNotification: string;
    export let systemColorsDidChangeNotification: string;
    export type Name = String;
  }

  namespace NSColorList {
    export let didChangeNotification: string;
    export type Name = String;
  }

  namespace NSColorPanel {
    export enum Mode {
      None = -1,
      Gray = 0,
      RGB = 1,
      CMYK = 2,
      HSB = 3,
      CustomPalette = 4,
      ColorList = 5,
      Wheel = 6,
      Crayon = 7
    }

    export enum Options {
      GrayModeMask = 1,
      RGBModeMask = 2,
      CMYKModeMask = 4,
      HSBModeMask = 8,
      CustomPaletteModeMask = 16,
      ColorListModeMask = 32,
      WheelModeMask = 64,
      CrayonModeMask = 128,
      AllModesMask = 65535
    }

    export let colorDidChangeNotification: string;
  }

  namespace NSColorSpace {
    export enum Model {
      Unknown = -1,
      Gray = 0,
      RGB = 1,
      CMYK = 2,
      LAB = 3,
      DeviceN = 4,
      Indexed = 5,
      Patterned = 6
    }

  }

  namespace NSColorSpaceName {
    export let calibratedRGB: string;
    export let calibratedWhite: string;
    export let custom: string;
    export let deviceCMYK: string;
    export let deviceRGB: string;
    export let deviceWhite: string;
    export let named: string;
    export let pattern: string;
  }

  namespace NSComboBox {
    export let selectionDidChangeNotification: string;
    export let selectionIsChangingNotification: string;
    export let willDismissNotification: string;
    export let willPopUpNotification: string;
  }

  namespace NSComparisonPredicate {
    export enum Modifier {
      DirectPredicateModifier = 0,
      AllPredicateModifier = 1,
      AnyPredicateModifier = 2
    }

    export enum Options {
      CaseInsensitivePredicateOption = 1,
      DiacriticInsensitivePredicateOption = 2,
      NormalizedPredicateOption = 4
    }

    export enum Operator {
      LessThanPredicateOperatorType = 0,
      LessThanOrEqualToPredicateOperatorType = 1,
      GreaterThanPredicateOperatorType = 2,
      GreaterThanOrEqualToPredicateOperatorType = 3,
      EqualToPredicateOperatorType = 4,
      NotEqualToPredicateOperatorType = 5,
      MatchesPredicateOperatorType = 6,
      LikePredicateOperatorType = 7,
      BeginsWithPredicateOperatorType = 8,
      EndsWithPredicateOperatorType = 9,
      InPredicateOperatorType = 10,
      CustomSelectorPredicateOperatorType = 11,
      ContainsPredicateOperatorType = 99,
      BetweenPredicateOperatorType = 100
    }

  }

  namespace NSCompoundPredicate {
    export enum LogicalType {
      NotPredicateType = 0,
      AndPredicateType = 1,
      OrPredicateType = 2
    }

  }

  namespace NSControl {
    export enum ImagePosition {
      NoImage = 0,
      ImageOnly = 1,
      ImageLeft = 2,
      ImageRight = 3,
      ImageBelow = 4,
      ImageAbove = 5,
      ImageOverlaps = 6,
      ImageLeading = 7,
      ImageTrailing = 8
    }

    export enum ControlSize {
      Regular = 0,
      Small = 1,
      Mini = 2
    }

    export let mixed: number;
    export let off: number;
    export let on: number;
    export let textDidBeginEditingNotification: string;
    export let textDidChangeNotification: string;
    export let textDidEndEditingNotification: string;
  }

  namespace NSData {
    export enum Base64DecodingOptions {
      IgnoreUnknownCharacters = 1
    }

    export enum Base64EncodingOptions {
      Encoding64CharacterLineLength = 1,
      Encoding76CharacterLineLength = 2,
      EncodingEndLineWithCarriageReturn = 16,
      EncodingEndLineWithLineFeed = 32
    }

    export enum CompressionAlgorithm {
      LZFSE = 0,
      LZ4 = 1,
      LZMA = 2,
      Zlib = 3
    }

    export enum ReadingOptions {
      DataReadingMappedIfSafe = 1,
      DataReadingUncached = 2,
      DataReadingMappedAlways = 8,
      DataReadingMapped = 1,
      MappedRead = 1,
      UncachedRead = 2
    }

    export enum SearchOptions {
      Backwards = 1,
      Anchored = 2
    }

    export enum WritingOptions {
      DataWritingAtomic = 1,
      DataWritingWithoutOverwriting = 2,
      DataWritingFileProtectionNone = 268435456,
      DataWritingFileProtectionComplete = 536870912,
      DataWritingFileProtectionCompleteUnlessOpen = 805306368,
      DataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824,
      DataWritingFileProtectionMask = 4026531840,
      AtomicWrite = 1
    }

    export type Element = number;
    export type Index = number;
    export type Indices = Range;
    export type Iterator = IndexingIterator;
    export type SubSequence = Slice;
  }

  namespace NSDatePicker {
    export enum ElementFlags {
      HourMinute = 12,
      HourMinuteSecond = 14,
      TimeZone = 16,
      YearMonth = 192,
      YearMonthDay = 224,
      Era = 256
    }

    export enum Mode {
      Single = 0,
      Range = 1
    }

    export enum Style {
      TextFieldAndStepper = 0,
      ClockAndCalendar = 1,
      TextField = 2
    }

    export let clockAndCalendar: NSDatePicker.Style;
    export let era: NSDatePicker.ElementFlags;
    export let hourMinute: NSDatePicker.ElementFlags;
    export let hourMinuteSecond: NSDatePicker.ElementFlags;
    export let range: NSDatePicker.Mode;
    export let single: NSDatePicker.Mode;
    export let textFieldAndStepper: NSDatePicker.Style;
    export let textField: NSDatePicker.Style;
    export let timeZone: NSDatePicker.ElementFlags;
    export let yearMonth: NSDatePicker.ElementFlags;
    export let yearMonthDay: NSDatePicker.ElementFlags;
  }

  namespace NSDecimalNumber {
    export enum CalculationError {
      NoError = 0,
      LossOfPrecision = 1,
      Underflow = 2,
      Overflow = 3,
      DivideByZero = 4
    }

    export enum RoundingMode {
      Plain = 0,
      Down = 1,
      Up = 2,
      Bankers = 3
    }

  }

  namespace NSDeviceDescriptionKey {
    export let bitsPerSample: string;
    export let colorSpaceName: string;
    export let isPrinter: string;
    export let isScreen: string;
    export let resolution: string;
    export let size: string;
  }

  namespace NSDocument {
    export enum ChangeType {
      ChangeDone = 0,
      ChangeUndone = 1,
      ChangeRedone = 5,
      ChangeCleared = 2,
      ChangeReadOtherContents = 3,
      ChangeAutosaved = 4,
      ChangeDiscardable = 256
    }

    export enum SaveOperationType {
      SaveOperation = 0,
      SaveAsOperation = 1,
      SaveToOperation = 2,
      AutosaveInPlaceOperation = 4,
      AutosaveElsewhereOperation = 3,
      AutosaveAsOperation = 5,
      AutosaveOperation = 3
    }

  }

  namespace NSDraggingItem {
    export let icon: string;
    export let label: string;
  }

  namespace NSDrawer {
    export enum State {
      ClosedState = 0,
      OpeningState = 1,
      OpenState = 2,
      ClosingState = 3
    }

  }

  namespace NSEnumerator {
    export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSError {
    export type UserInfoKey = string;
  }

  namespace NSEvent {
    export enum ButtonMask {
      PenTip = 1,
      PenLowerSide = 2,
      PenUpperSide = 4
    }

    export enum GestureAxis {
      None = 0,
      Horizontal = 1,
      Vertical = 2
    }

    export enum EventTypeMask {
      LeftMouseDown = 2,
      LeftMouseUp = 4,
      RightMouseDown = 8,
      RightMouseUp = 16,
      MouseMoved = 32,
      LeftMouseDragged = 64,
      RightMouseDragged = 128,
      MouseEntered = 256,
      MouseExited = 512,
      KeyDown = 1024,
      KeyUp = 2048,
      FlagsChanged = 4096,
      AppKitDefined = 8192,
      SystemDefined = 16384,
      ApplicationDefined = 32768,
      Periodic = 65536,
      CursorUpdate = 131072,
      ScrollWheel = 4194304,
      TabletPoint = 8388608,
      TabletProximity = 16777216,
      OtherMouseDown = 33554432,
      OtherMouseUp = 67108864,
      OtherMouseDragged = 134217728,
      Gesture = 536870912,
      Magnify = 1073741824,
      Swipe = 2147483648,
      Rotate = 262144,
      BeginGesture = 524288,
      EndGesture = 1048576,
      SmartMagnify = 4294967296,
      Pressure = 17179869184,
      DirectTouch = 137438953472,
      ChangeMode = 274877906944,
      Any = -1
    }

    export enum ModifierFlags {
      CapsLock = 65536,
      Shift = 131072,
      Control = 262144,
      Option = 524288,
      Command = 1048576,
      NumericPad = 2097152,
      Help = 4194304,
      Function = 8388608,
      DeviceIndependentFlagsMask = 4294901760
    }

    export enum Phase {
      None = 0,
      Began = 1,
      Stationary = 2,
      Changed = 4,
      Ended = 8,
      Cancelled = 16,
      MayBegin = 32
    }

    export enum EventSubtype {
      WindowExposed = 0,
      ApplicationActivated = 1,
      ApplicationDeactivated = 2,
      WindowMoved = 4,
      ScreenChanged = 8,
      PowerOff = 1,
      MouseEvent = 0,
      TabletPoint = 1,
      TabletProximity = 2,
      Touch = 3
    }

    export enum SwipeTrackingOptions {
      LockDirection = 1,
      ClampGestureAmount = 2
    }

    export enum EventType {
      LeftMouseDown = 1,
      LeftMouseUp = 2,
      RightMouseDown = 3,
      RightMouseUp = 4,
      MouseMoved = 5,
      LeftMouseDragged = 6,
      RightMouseDragged = 7,
      MouseEntered = 8,
      MouseExited = 9,
      KeyDown = 10,
      KeyUp = 11,
      FlagsChanged = 12,
      AppKitDefined = 13,
      SystemDefined = 14,
      ApplicationDefined = 15,
      Periodic = 16,
      CursorUpdate = 17,
      ScrollWheel = 22,
      TabletPoint = 23,
      TabletProximity = 24,
      OtherMouseDown = 25,
      OtherMouseUp = 26,
      OtherMouseDragged = 27,
      Gesture = 29,
      Magnify = 30,
      Swipe = 31,
      Rotate = 18,
      BeginGesture = 19,
      EndGesture = 20,
      SmartMagnify = 32,
      QuickLook = 33,
      Pressure = 34,
      DirectTouch = 37,
      ChangeMode = 38
    }

    export enum PointingDeviceType {
      Unknown = 0,
      Pen = 1,
      Cursor = 2,
      Eraser = 3
    }

    export enum PressureBehavior {
      Unknown = -1,
      PrimaryDefault = 0,
      PrimaryClick = 1,
      PrimaryGeneric = 2,
      PrimaryAccelerator = 3,
      PrimaryDeepClick = 5,
      PrimaryDeepDrag = 6
    }

    export let foreverDuration: number;
  }

  namespace NSExceptionName {
    export let abortModalException: string;
    export let abortPrintingException: string;
    export let appKitIgnoredException: string;
    export let appKitVirtualMemoryException: string;
    export let badBitmapParametersException: string;
    export let badComparisonException: string;
    export let badRTFColorTableException: string;
    export let badRTFDirectiveException: string;
    export let badRTFFontTableException: string;
    export let badRTFStyleSheetException: string;
    export let browserIllegalDelegateException: string;
    export let colorListIOException: string;
    export let colorListNotEditableException: string;
    export let draggingException: string;
    export let fontUnavailableException: string;
    export let illegalSelectorException: string;
    export let imageCacheException: string;
    export let nibLoadingException: string;
    export let NSPPDIncludeNotFoundException: string;
    export let NSPPDIncludeStackOverflowException: string;
    export let NSPPDIncludeStackUnderflowException: string;
    export let NSPPDParseException: string;
    export let pasteboardCommunicationException: string;
    export let printOperationExistsException: string;
    export let printPackageException: string;
    export let printingCommunicationException: string;
    export let NSRTFPropertyStackOverflowException: string;
    export let NSTIFFException: string;
    export let textLineTooLongException: string;
    export let textNoSelectionException: string;
    export let textReadException: string;
    export let textWriteException: string;
    export let typedStreamVersionException: string;
    export let windowServerCommunicationException: string;
    export let wordTablesReadException: string;
    export let wordTablesWriteException: string;
    export let characterConversionException: string;
    export let decimalNumberDivideByZeroException: string;
    export let decimalNumberExactnessException: string;
    export let decimalNumberOverflowException: string;
    export let decimalNumberUnderflowException: string;
    export let destinationInvalidException: string;
    export let fileHandleOperationException: string;
    export let genericException: string;
    export let inconsistentArchiveException: string;
    export let internalInconsistencyException: string;
    export let invalidArchiveOperationException: string;
    export let invalidArgumentException: string;
    export let invalidReceivePortException: string;
    export let invalidSendPortException: string;
    export let invalidUnarchiveOperationException: string;
    export let invocationOperationCancelledException: string;
    export let invocationOperationVoidResultException: string;
    export let mallocException: string;
    export let objectInaccessibleException: string;
    export let objectNotAvailableException: string;
    export let oldStyleException: string;
    export let parseErrorException: string;
    export let portReceiveException: string;
    export let portSendException: string;
    export let portTimeoutException: string;
    export let rangeException: string;
    export let undefinedKeyException: string;
  }

  namespace NSExpression {
    export enum ExpressionType {
      ConstantValueExpressionType = 0,
      EvaluatedObjectExpressionType = 1,
      VariableExpressionType = 2,
      KeyPathExpressionType = 3,
      FunctionExpressionType = 4,
      UnionSetExpressionType = 5,
      IntersectSetExpressionType = 6,
      MinusSetExpressionType = 7,
      SubqueryExpressionType = 13,
      AggregateExpressionType = 14,
      AnyKeyExpressionType = 15,
      BlockExpressionType = 19,
      ConditionalExpressionType = 20
    }

  }

  namespace NSFileCoordinator {
    export enum ReadingOptions {
      WithoutChanges = 1,
      ResolvesSymbolicLink = 2,
      ImmediatelyAvailableMetadataOnly = 4,
      ForUploading = 8
    }

    export enum WritingOptions {
      ForDeleting = 1,
      ForMoving = 2,
      ForMerging = 4,
      ForReplacing = 8,
      ContentIndependentMetadataOnly = 16
    }

  }

  namespace NSFileVersion {
    export enum AddingOptions {
      ByMoving = 1
    }

    export enum ReplacingOptions {
      ByMoving = 1
    }

  }

  namespace NSFont {
    export let antialiasThresholdChangedNotification: string;
    export let identityMatrix: number;
    export let fontSetChangedNotification: string;
    export let black: number;
    export let bold: number;
    export let heavy: number;
    export let light: number;
    export let medium: number;
    export let regular: number;
    export let semibold: number;
    export let thin: number;
    export let ultraLight: number;
  }

  namespace NSFontAssetRequest {
    export enum Options {
      UsesStandardUI = 1
    }

  }

  namespace NSFontCollection {
    export enum Visibility {
      Process = 1,
      User = 2,
      Computer = 4
    }

    export let actionUserInfoKey: string;
    export let allFonts: string;
    export let didChangeNotification: string;
    export let favorites: string;
    export let nameUserInfoKey: string;
    export let oldNameUserInfoKey: string;
    export let recentlyUsed: string;
    export let user: string;
    export let visibilityUserInfoKey: string;
    export let hidden: string;
    export let renamed: string;
    export let shown: string;
  }

  namespace NSFontDescriptor {
    export enum SymbolicTraits {
      TraitItalic = 1,
      TraitBold = 2,
      TraitExpanded = 32,
      TraitCondensed = 64,
      TraitMonoSpace = 1024,
      TraitVertical = 2048,
      TraitUIOptimized = 4096,
      TraitTightLeading = 32768,
      TraitLooseLeading = 65536,
      ClassMask = 4026531840,
      ClassUnknown = 0,
      ClassOldStyleSerifs = 268435456,
      ClassTransitionalSerifs = 536870912,
      ClassModernSerifs = 805306368,
      ClassClarendonSerifs = 1073741824,
      ClassSlabSerifs = 1342177280,
      ClassFreeformSerifs = 1879048192,
      ClassSansSerif = 2147483648,
      ClassOrnamentals = 2415919104,
      ClassScripts = 2684354560,
      ClassSymbolic = 3221225472
    }

    export let cascadeList: string;
    export let characterSet: string;
    export let default_: string;
    export let monospaced: string;
    export let rounded: string;
    export let serif: string;
    export let face: string;
    export let family: string;
    export let selectorIdentifier: string;
    export let featureSettings: string;
    export let typeIdentifier: string;
    export let fixedAdvance: string;
    export let matrix: string;
    export let name: string;
    export let size: string;
    export let slant: string;
    export let symbolic: string;
    export let traits: string;
    export let variation: string;
    export let defaultValue: string;
    export let identifier: string;
    export let maximumValue: string;
    export let minimumValue: string;
    export let visibleName: string;
    export let weight: string;
    export let width: string;
  }

  namespace NSFontPanel {
    export enum ModeMask {
      ModeMaskFace = 1,
      ModeMaskSize = 2,
      ModeMaskCollection = 4,
      ModeMaskUnderlineEffect = 256,
      ModeMaskStrikethroughEffect = 512,
      ModeMaskTextColorEffect = 1024,
      ModeMaskDocumentColorEffect = 2048,
      ModeMaskShadowEffect = 4096,
      ModeMaskAllEffects = 1048320,
      ModesMaskStandardModes = 65535,
      ModesMaskAllModes = 4294967295
    }

  }

  namespace NSGestureRecognizer {
    export enum State {
      Possible = 0,
      Began = 1,
      Changed = 2,
      Ended = 3,
      Cancelled = 4,
      Failed = 5,
      Recognized = 3
    }

  }

  namespace NSGradient {
    export enum DrawingOptions {
      DrawsBeforeStartingLocation = 1,
      DrawsAfterEndingLocation = 2
    }

  }

  namespace NSGraphicsContext {
    export let destination: string;
    export let pdf: string;
    export let postScript: string;
    export let representationFormat: string;
  }

  namespace NSGridCell {
    export enum Placement {
      Inherited = 0,
      None = 1,
      Leading = 2,
      Top = 2,
      Trailing = 3,
      Bottom = 3,
      Center = 4,
      Fill = 5
    }

  }

  namespace NSGridRow {
    export enum Alignment {
      Inherited = 0,
      None = 1,
      FirstBaseline = 2,
      LastBaseline = 3
    }

  }

  namespace NSGridView {
    export let sizedForContent: number;
  }

  namespace NSHapticFeedbackManager {
    export enum FeedbackPattern {
      Generic = 0,
      Alignment = 1,
      LevelChange = 2
    }

    export enum PerformanceTime {
      Default = 0,
      Now = 1,
      DrawCompleted = 2
    }

  }

  namespace NSHelpManager {
    export let contextHelpModeDidActivateNotification: string;
    export let contextHelpModeDidDeactivateNotification: string;
    export type AnchorName = String;
    export type BookName = String;
    export type ContextHelpKey = String;
  }

  namespace NSImage {
    export enum CacheMode {
      Default = 0,
      Always = 1,
      BySize = 2,
      Never = 3
    }

    export enum LayoutDirection {
      Unspecified = -1,
      LeftToRight = 2,
      RightToLeft = 3
    }

    export enum LoadStatus {
      Completed = 0,
      Cancelled = 1,
      InvalidData = 2,
      UnexpectedEOF = 3,
      ReadError = 4
    }

    export enum ResizingMode {
      Stretch = 0,
      Tile = 1
    }

    export let actionTemplateName: string;
    export let addTemplateName: string;
    export let advancedName: string;
    export let applicationIconName: string;
    export let bluetoothTemplateName: string;
    export let bonjourName: string;
    export let bookmarksTemplateName: string;
    export let cautionName: string;
    export let colorPanelName: string;
    export let columnViewTemplateName: string;
    export let computerName: string;
    export let enterFullScreenTemplateName: string;
    export let everyoneName: string;
    export let exitFullScreenTemplateName: string;
    export let flowViewTemplateName: string;
    export let folderName: string;
    export let folderBurnableName: string;
    export let folderSmartName: string;
    export let followLinkFreestandingTemplateName: string;
    export let fontPanelName: string;
    export let goBackTemplateName: string;
    export let goForwardTemplateName: string;
    export let goLeftTemplateName: string;
    export let goRightTemplateName: string;
    export let homeTemplateName: string;
    export let iChatTheaterTemplateName: string;
    export let iconViewTemplateName: string;
    export let infoName: string;
    export let invalidDataFreestandingTemplateName: string;
    export let leftFacingTriangleTemplateName: string;
    export let listViewTemplateName: string;
    export let lockLockedTemplateName: string;
    export let lockUnlockedTemplateName: string;
    export let menuMixedStateTemplateName: string;
    export let menuOnStateTemplateName: string;
    export let mobileMeName: string;
    export let multipleDocumentsName: string;
    export let networkName: string;
    export let pathTemplateName: string;
    export let preferencesGeneralName: string;
    export let quickLookTemplateName: string;
    export let refreshFreestandingTemplateName: string;
    export let refreshTemplateName: string;
    export let removeTemplateName: string;
    export let revealFreestandingTemplateName: string;
    export let rightFacingTriangleTemplateName: string;
    export let shareTemplateName: string;
    export let slideshowTemplateName: string;
    export let smartBadgeTemplateName: string;
    export let statusAvailableName: string;
    export let statusNoneName: string;
    export let statusPartiallyAvailableName: string;
    export let statusUnavailableName: string;
    export let stopProgressFreestandingTemplateName: string;
    export let stopProgressTemplateName: string;
    export let touchBarAddDetailTemplateName: string;
    export let touchBarAddTemplateName: string;
    export let touchBarAlarmTemplateName: string;
    export let touchBarAudioInputMuteTemplateName: string;
    export let touchBarAudioInputTemplateName: string;
    export let touchBarAudioOutputMuteTemplateName: string;
    export let touchBarAudioOutputVolumeHighTemplateName: string;
    export let touchBarAudioOutputVolumeLowTemplateName: string;
    export let touchBarAudioOutputVolumeMediumTemplateName: string;
    export let touchBarAudioOutputVolumeOffTemplateName: string;
    export let touchBarBookmarksTemplateName: string;
    export let touchBarColorPickerFillName: string;
    export let touchBarColorPickerFontName: string;
    export let touchBarColorPickerStrokeName: string;
    export let touchBarCommunicationAudioTemplateName: string;
    export let touchBarCommunicationVideoTemplateName: string;
    export let touchBarComposeTemplateName: string;
    export let touchBarDeleteTemplateName: string;
    export let touchBarDownloadTemplateName: string;
    export let touchBarEnterFullScreenTemplateName: string;
    export let touchBarExitFullScreenTemplateName: string;
    export let touchBarFastForwardTemplateName: string;
    export let touchBarFolderCopyToTemplateName: string;
    export let touchBarFolderMoveToTemplateName: string;
    export let touchBarFolderTemplateName: string;
    export let touchBarGetInfoTemplateName: string;
    export let touchBarGoBackTemplateName: string;
    export let touchBarGoDownTemplateName: string;
    export let touchBarGoForwardTemplateName: string;
    export let touchBarGoUpTemplateName: string;
    export let touchBarHistoryTemplateName: string;
    export let touchBarIconViewTemplateName: string;
    export let touchBarListViewTemplateName: string;
    export let touchBarMailTemplateName: string;
    export let touchBarNewFolderTemplateName: string;
    export let touchBarNewMessageTemplateName: string;
    export let touchBarOpenInBrowserTemplateName: string;
    export let touchBarPauseTemplateName: string;
    export let touchBarPlayPauseTemplateName: string;
    export let touchBarPlayTemplateName: string;
    export let touchBarPlayheadTemplateName: string;
    export let touchBarQuickLookTemplateName: string;
    export let touchBarRecordStartTemplateName: string;
    export let touchBarRecordStopTemplateName: string;
    export let touchBarRefreshTemplateName: string;
    export let touchBarRemoveTemplateName: string;
    export let touchBarRewindTemplateName: string;
    export let touchBarRotateLeftTemplateName: string;
    export let touchBarRotateRightTemplateName: string;
    export let touchBarSearchTemplateName: string;
    export let touchBarShareTemplateName: string;
    export let touchBarSidebarTemplateName: string;
    export let touchBarSkipAhead15SecondsTemplateName: string;
    export let touchBarSkipAhead30SecondsTemplateName: string;
    export let touchBarSkipAheadTemplateName: string;
    export let touchBarSkipBack15SecondsTemplateName: string;
    export let touchBarSkipBack30SecondsTemplateName: string;
    export let touchBarSkipBackTemplateName: string;
    export let touchBarSkipToEndTemplateName: string;
    export let touchBarSkipToStartTemplateName: string;
    export let touchBarSlideshowTemplateName: string;
    export let touchBarTagIconTemplateName: string;
    export let touchBarTextBoldTemplateName: string;
    export let touchBarTextBoxTemplateName: string;
    export let touchBarTextCenterAlignTemplateName: string;
    export let touchBarTextItalicTemplateName: string;
    export let touchBarTextJustifiedAlignTemplateName: string;
    export let touchBarTextLeftAlignTemplateName: string;
    export let touchBarTextListTemplateName: string;
    export let touchBarTextRightAlignTemplateName: string;
    export let touchBarTextStrikethroughTemplateName: string;
    export let touchBarTextUnderlineTemplateName: string;
    export let touchBarUserAddTemplateName: string;
    export let touchBarUserGroupTemplateName: string;
    export let touchBarUserTemplateName: string;
    export let touchBarVolumeDownTemplateName: string;
    export let touchBarVolumeUpTemplateName: string;
    export let trashEmptyName: string;
    export let trashFullName: string;
    export let userName: string;
    export let userAccountsName: string;
    export let userGroupName: string;
    export let userGuestName: string;
    export type Name = String;
  }

  namespace NSImageRep {
    export let ctm: string;
    export let interpolation: string;
    export let userInterfaceLayoutDirection: string;
    export let registryDidChangeNotification: string;
  }

  namespace NSImageView {
    export enum FrameStyle {
      None = 0,
      Photo = 1,
      GrayBezel = 2,
      Groove = 3,
      Button = 4
    }

  }

  namespace NSIndexSet {
    export type Element = NSIndexSetIterator;
    export type Iterator = NSIndexSetIterator;
  }

  namespace NSItemProvider {
    export enum ErrorCode {
      UnknownError = -1,
      ItemUnavailableError = -1000,
      UnexpectedValueClassError = -1100,
      UnavailableCoercionError = -1200
    }

    export let errorDomain: string;
  }

  namespace NSKeyValueChangeKey {
    export let indexesKey: string;
    export let kindKey: string;
    export let newKey: string;
    export let notificationIsPriorKey: string;
    export let oldKey: string;
  }

  namespace NSKeyValueOperator {
    export let averageKeyValueOperator: string;
    export let countKeyValueOperator: string;
    export let distinctUnionOfArraysKeyValueOperator: string;
    export let distinctUnionOfObjectsKeyValueOperator: string;
    export let distinctUnionOfSetsKeyValueOperator: string;
    export let maximumKeyValueOperator: string;
    export let minimumKeyValueOperator: string;
    export let sumKeyValueOperator: string;
    export let unionOfArraysKeyValueOperator: string;
    export let unionOfObjectsKeyValueOperator: string;
    export let unionOfSetsKeyValueOperator: string;
  }

  namespace NSLayoutConstraint {
    export enum Attribute {
      Left = 1,
      Right = 2,
      Top = 3,
      Bottom = 4,
      Leading = 5,
      Trailing = 6,
      Width = 7,
      Height = 8,
      CenterX = 9,
      CenterY = 10,
      LastBaseline = 11,
      Baseline = 11,
      FirstBaseline = 12,
      NotAnAttribute = 0
    }

    export enum Orientation {
      Horizontal = 0,
      Vertical = 1
    }

    export enum FormatOptions {
      AlignAllLeft = 2,
      AlignAllRight = 4,
      AlignAllTop = 8,
      AlignAllBottom = 16,
      AlignAllLeading = 32,
      AlignAllTrailing = 64,
      AlignAllCenterX = 512,
      AlignAllCenterY = 1024,
      AlignAllLastBaseline = 2048,
      AlignAllFirstBaseline = 4096,
      AlignAllBaseline = 2048,
      AlignmentMask = 65535,
      DirectionLeadingToTrailing = 0,
      DirectionLeftToRight = 65536,
      DirectionRightToLeft = 131072,
      DirectionMask = 196608
    }

    export enum Relation {
      LessThanOrEqual = -1,
      Equal = 0,
      GreaterThanOrEqual = 1
    }

    export let defaultHigh: number;
    export let defaultLow: number;
    export let dragThatCanResizeWindow: number;
    export let dragThatCannotResizeWindow: number;
    export let fittingSizeCompression: number;
    export let required: number;
    export let windowSizeStayPut: number;
  }

  namespace NSLayoutManager {
    export enum ControlCharacterAction {
      ZeroAdvancement = 1,
      Whitespace = 2,
      HorizontalTab = 4,
      LineBreak = 8,
      ParagraphBreak = 16,
      ContainerBreak = 32
    }

    export enum GlyphProperty {
      Null = 1,
      ControlCharacter = 2,
      Elastic = 4,
      NonBaseCharacter = 8
    }

    export enum TextLayoutOrientation {
      Horizontal = 0,
      Vertical = 1
    }

    export enum TypesetterBehavior {
      LatestBehavior = -1,
      OriginalBehavior = 0,
      Behavior_10_2_WithCompatibility = 1,
      Behavior_10_2 = 2,
      Behavior_10_3 = 3,
      Behavior_10_4 = 4
    }

  }

  namespace NSLevelIndicator {
    export enum PlaceholderVisibility {
      Automatic = 0,
      Always = 1,
      WhileEditing = 2
    }

    export enum Style {
      Relevancy = 0,
      ContinuousCapacity = 1,
      DiscreteCapacity = 2,
      Rating = 3
    }

  }

  namespace NSLinguisticTag {
    export let adjective: string;
    export let adverb: string;
    export let classifier: string;
    export let closeParenthesis: string;
    export let closeQuote: string;
    export let conjunction: string;
    export let dash: string;
    export let determiner: string;
    export let idiom: string;
    export let interjection: string;
    export let noun: string;
    export let number: string;
    export let openParenthesis: string;
    export let openQuote: string;
    export let organizationName: string;
    export let other: string;
    export let otherPunctuation: string;
    export let otherWhitespace: string;
    export let otherWord: string;
    export let paragraphBreak: string;
    export let particle: string;
    export let personalName: string;
    export let placeName: string;
    export let preposition: string;
    export let pronoun: string;
    export let punctuation: string;
    export let sentenceTerminator: string;
    export let verb: string;
    export let whitespace: string;
    export let word: string;
    export let wordJoiner: string;
  }

  namespace NSLinguisticTagScheme {
    export let language: string;
    export let lemma: string;
    export let lexicalClass: string;
    export let nameType: string;
    export let nameTypeOrLexicalClass: string;
    export let script: string;
    export let tokenType: string;
  }

  namespace NSLinguisticTagger {
    export enum Options {
      OmitWords = 1,
      OmitPunctuation = 2,
      OmitWhitespace = 4,
      OmitOther = 8,
      JoinNames = 16
    }

  }

  namespace NSLocale {
    export enum LanguageDirection {
      Unknown = 0,
      LeftToRight = 1,
      RightToLeft = 2,
      TopToBottom = 3,
      BottomToTop = 4
    }

    export let currentLocaleDidChangeNotification: string;
    export let alternateQuotationBeginDelimiterKey: string;
    export let alternateQuotationEndDelimiterKey: string;
    export let calendar: string;
    export let collationIdentifier: string;
    export let collatorIdentifier: string;
    export let countryCode: string;
    export let currencyCode: string;
    export let currencySymbol: string;
    export let decimalSeparator: string;
    export let exemplarCharacterSet: string;
    export let groupingSeparator: string;
    export let identifier: string;
    export let languageCode: string;
    export let measurementSystem: string;
    export let quotationBeginDelimiterKey: string;
    export let quotationEndDelimiterKey: string;
    export let scriptCode: string;
    export let usesMetricSystem: string;
    export let variantCode: string;
  }

  namespace NSMachPort {
    export enum Options {
      DeallocateNone = 0,
      DeallocateSendRight = 1,
      DeallocateReceiveRight = 2
    }

  }

  namespace NSManagedObject {
    export type ObjectWillChangePublisher = ObservableObjectPublisher;
  }

  namespace NSMatrix {
    export enum Mode {
      RadioModeMatrix = 0,
      HighlightModeMatrix = 1,
      ListModeMatrix = 2,
      TrackModeMatrix = 3
    }

  }

  namespace NSMediaLibraryBrowserController {
    export enum Library {
      Audio = 1,
      Image = 2,
      Movie = 4
    }

  }

  namespace NSMenu {
    export enum Properties {
      PropertyItemTitle = 1,
      PropertyItemAttributedTitle = 2,
      PropertyItemKeyEquivalent = 4,
      PropertyItemImage = 8,
      PropertyItemEnabled = 16,
      PropertyItemAccessibilityDescription = 32
    }

    export let didAddItemNotification: string;
    export let didBeginTrackingNotification: string;
    export let didChangeItemNotification: string;
    export let didEndTrackingNotification: string;
    export let didRemoveItemNotification: string;
    export let didSendActionNotification: string;
    export let willSendActionNotification: string;
  }

  namespace NSMenuItem {
    export let importFromDeviceIdentifier: string;
  }

  namespace NSNib {
    export type Name = String;
  }

  namespace NSNotification {
    export let AVAssetChapterMetadataGroupsDidChange: string;
    export let AVAssetContainsFragmentsDidChange: string;
    export let AVAssetDurationDidChange: string;
    export let AVAssetMediaSelectionGroupsDidChange: string;
    export let AVAssetTrackSegmentsDidChange: string;
    export let AVAssetTrackTimeRangeDidChange: string;
    export let AVAssetTrackTrackAssociationsDidChange: string;
    export let AVAssetWasDefragmented: string;
    export let AVAudioEngineConfigurationChange: string;
    export let AVAudioUnitComponentTagsDidChange: string;
    export let AVCaptureDeviceSubjectAreaDidChange: string;
    export let AVCaptureDeviceWasConnected: string;
    export let AVCaptureDeviceWasDisconnected: string;
    export let AVCaptureInputPortFormatDescriptionDidChange: string;
    export let AVCaptureSessionDidStartRunning: string;
    export let AVCaptureSessionDidStopRunning: string;
    export let AVCaptureSessionInterruptionEnded: string;
    export let AVCaptureSessionRuntimeError: string;
    export let AVCaptureSessionWasInterrupted: string;
    export let AVFragmentedMovieContainsMovieFragmentsDidChange: string;
    export let AVFragmentedMovieDurationDidChange: string;
    export let AVFragmentedMovieTrackSegmentsDidChange: string;
    export let AVFragmentedMovieTrackTimeRangeDidChange: string;
    export let AVFragmentedMovieWasDefragmented: string;
    export let AVPlayerAvailableHDRModesDidChange: string;
    export let AVPlayerItemDidPlayToEndTime: string;
    export let AVPlayerItemFailedToPlayToEndTime: string;
    export let AVPlayerItemNewAccessLogEntry: string;
    export let AVPlayerItemNewErrorLogEntry: string;
    export let AVPlayerItemPlaybackStalled: string;
    export let AVPlayerItemTimeJumped: string;
    export let AVRouteDetectorMultipleRoutesDetectedDidChange: string;
    export let AVSampleBufferAudioRendererWasFlushedAutomatically: string;
    export let AVSampleBufferDisplayLayerFailedToDecode: string;
    export let NSAppleEventManagerWillProcessFirstEvent: string;
    export let NSBundleResourceRequestLowDiskSpace: string;
    export let NSCalendarDayChanged: string;
    export let NSClassDescriptionNeededForClass: string;
    export let NSDidBecomeSingleThreaded: string;
    export let NSExtensionHostDidBecomeActive: string;
    export let NSExtensionHostDidEnterBackground: string;
    export let NSExtensionHostWillEnterForeground: string;
    export let NSExtensionHostWillResignActive: string;
    export let NSFileHandleConnectionAccepted: string;
    export let NSFileHandleDataAvailable: string;
    export let NSFileHandleReadToEndOfFileCompletion: string;
    export let NSHTTPCookieManagerAcceptPolicyChanged: string;
    export let NSHTTPCookieManagerCookiesChanged: string;
    export let NSMetadataQueryDidFinishGathering: string;
    export let NSMetadataQueryDidStartGathering: string;
    export let NSMetadataQueryDidUpdate: string;
    export let NSMetadataQueryGatheringProgress: string;
    export let NSProcessInfoPowerStateDidChange: string;
    export let NSSystemClockDidChange: string;
    export let NSSystemTimeZoneDidChange: string;
    export let NSThreadWillExit: string;
    export let NSURLCredentialStorageChanged: string;
    export let NSUbiquityIdentityDidChange: string;
    export let NSUndoManagerCheckpoint: string;
    export let NSUndoManagerDidCloseUndoGroup: string;
    export let NSUndoManagerDidOpenUndoGroup: string;
    export let NSUndoManagerDidRedoChange: string;
    export let NSUndoManagerDidUndoChange: string;
    export let NSUndoManagerWillCloseUndoGroup: string;
    export let NSUndoManagerWillRedoChange: string;
    export let NSUndoManagerWillUndoChange: string;
    export let NSWillBecomeMultiThreaded: string;
    export let IKFilterBrowserFilterDoubleClick: string;
    export let IKFilterBrowserFilterSelected: string;
    export let IKFilterBrowserWillPreviewFilter: string;
    export let quartzFilterManagerDidAddFilter: string;
    export let quartzFilterManagerDidModifyFilter: string;
    export let quartzFilterManagerDidRemoveFilter: string;
    export let quartzFilterManagerDidSelectFilter: string;
  }

  namespace NSNumber {
    export type BooleanLiteralType = boolean;
    export type FloatLiteralType = number;
    export type IntegerLiteralType = number;
  }

  namespace NSOrderedSet {
    export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSOutlineView {
    export let columnDidMoveNotification: string;
    export let columnDidResizeNotification: string;
    export let disclosureButtonIdentifier: string;
    export let itemDidCollapseNotification: string;
    export let itemDidExpandNotification: string;
    export let itemWillCollapseNotification: string;
    export let itemWillExpandNotification: string;
    export let selectionDidChangeNotification: string;
    export let selectionIsChangingNotification: string;
    export let showHideButtonIdentifier: string;
  }

  namespace NSPDFPanel {
    export enum Options {
      ShowsPaperSize = 4,
      ShowsOrientation = 8,
      RequestsParentDirectory = 16777216
    }

  }

  namespace NSPageController {
    export enum TransitionStyle {
      StackHistory = 0,
      StackBook = 1,
      HorizontalStrip = 2
    }

    export type ObjectIdentifier = String;
  }

  namespace NSParagraphStyle {
    export enum TextTabType {
      LeftTabStopType = 0,
      RightTabStopType = 1,
      CenterTabStopType = 2,
      DecimalTabStopType = 3
    }

    // struct
    export enum LineBreakStrategy {
      pushOut,
      hangulWordPriority,
      standard
    }

  }

  namespace NSPasteboard {
    export enum ContentsOptions {
      CurrentHostOnly = 1
    }

    export enum ReadingOptions {
      AsData = 0,
      AsString = 1,
      AsPropertyList = 2,
      AsKeyedArchive = 4
    }

    export enum WritingOptions {
      Promised = 512
    }

    export let fileContents: string;
    export let findPanelSearchOptions: string;
    export let drag: string;
    export let find: string;
    export let font: string;
    export let general: string;
    export let ruler: string;
    export let color: string;
    export let fileURL: string;
    export let html: string;
    export let multipleTextSelection: string;
    export let pdf: string;
    export let png: string;
    export let rtf: string;
    export let rtfd: string;
    export let sound: string;
    export let string: string;
    export let tiff: string;
    export let tabularText: string;
    export let textFinderOptions: string;
    export let URL: string;
    export let urlReadingContentsConformToTypes: string;
    export let urlReadingFileURLsOnly: string;
    export let soundPboardType: string;
  }

  namespace NSPathControl {
    export enum Style {
      Standard = 0,
      PopUp = 2,
      NavigationBar = 1
    }

  }

  namespace NSPickerTouchBarItem {
    export enum ControlRepresentation {
      Automatic = 0,
      Expanded = 1,
      Collapsed = 2
    }

    export enum SelectionMode {
      SelectOne = 0,
      SelectAny = 1,
      Momentary = 2
    }

  }

  namespace NSPointerFunctions {
    export enum Options {
      StrongMemory = 0,
      ZeroingWeakMemory = 1,
      OpaqueMemory = 2,
      MallocMemory = 3,
      MachVirtualMemory = 4,
      WeakMemory = 5,
      ObjectPersonality = 0,
      OpaquePersonality = 256,
      ObjectPointerPersonality = 512,
      CStringPersonality = 768,
      StructPersonality = 1024,
      IntegerPersonality = 1280,
      CopyIn = 65536
    }

  }

  namespace NSPopUpButton {
    export enum ArrowPosition {
      NoArrow = 0,
      ArrowAtCenter = 1,
      ArrowAtBottom = 2
    }

    export let willPopUpNotification: string;
  }

  namespace NSPopUpButtonCell {
    export let willPopUpNotification: string;
  }

  namespace NSPopover {
    export enum Behavior {
      ApplicationDefined = 0,
      Transient = 1,
      Semitransient = 2
    }

    export let detachToWindow: string;
    export let closeReasonUserInfoKey: string;
    export let standard: string;
    export let didCloseNotification: string;
    export let didShowNotification: string;
    export let willCloseNotification: string;
    export let willShowNotification: string;
  }

  namespace NSPositionalSpecifier {
    export enum InsertionPosition {
      PositionAfter = 0,
      PositionBefore = 1,
      PositionBeginning = 2,
      PositionEnd = 3,
      PositionReplace = 4
    }

  }

  namespace NSPrintInfo {
    export enum PaperOrientation {
      Portrait = 0,
      Landscape = 1
    }

    export enum PaginationMode {
      Automatic = 0,
      Fit = 1,
      Clip = 2
    }

    export let automatic: NSPrintInfo.PaginationMode;
    export let clip: NSPrintInfo.PaginationMode;
    export let fit: NSPrintInfo.PaginationMode;
    export let allPages: string;
    export let bottomMargin: string;
    export let cancel: string;
    export let copies: string;
    export let detailedErrorReporting: string;
    export let faxNumber: string;
    export let firstPage: string;
    export let headerAndFooter: string;
    export let horizontalPagination: string;
    export let horizontallyCentered: string;
    export let jobDisposition: string;
    export let jobSavingFileNameExtensionHidden: string;
    export let jobSavingURL: string;
    export let lastPage: string;
    export let leftMargin: string;
    export let mustCollate: string;
    export let orientation: string;
    export let pagesAcross: string;
    export let pagesDown: string;
    export let paperName: string;
    export let paperSize: string;
    export let preview: string;
    export let printer: string;
    export let printerName: string;
    export let reversePageOrder: string;
    export let rightMargin: string;
    export let save: string;
    export let scalingFactor: string;
    export let selectionOnly: string;
    export let spool: string;
    export let time: string;
    export let topMargin: string;
    export let verticalPagination: string;
    export let verticallyCentered: string;
    export type SettingKey = String;
  }

  namespace NSPrintOperation {
    export enum RenderingQuality {
      Best = 0,
      Responsive = 1
    }

    export enum PageOrder {
      DescendingPageOrder = -1,
      SpecialPageOrder = 0,
      AscendingPageOrder = 1,
      UnknownPageOrder = 2
    }

  }

  namespace NSPrintPanel {
    export enum Options {
      ShowsCopies = 1,
      ShowsPageRange = 2,
      ShowsPaperSize = 4,
      ShowsOrientation = 8,
      ShowsScaling = 16,
      ShowsPrintSelection = 32,
      ShowsPageSetupAccessory = 256,
      ShowsPreview = 131072
    }

    export let allPresets: string;
    export let noPresets: string;
    export let itemDescription: string;
    export let itemName: string;
    export let photo: string;
  }

  namespace NSPrinter {
    export enum TableStatus {
      OK = 0,
      NotFound = 1,
      Error = 2
    }

  }

  namespace NSProgressIndicator {
    export enum Style {
      Bar = 0,
      Spinning = 1
    }

  }

  namespace NSRegularExpression {
    export enum MatchingFlags {
      Progress = 1,
      Completed = 2,
      HitEnd = 4,
      RequiredEnd = 8,
      InternalError = 16
    }

    export enum MatchingOptions {
      ReportProgress = 1,
      ReportCompletion = 2,
      Anchored = 4,
      WithTransparentBounds = 8,
      WithoutAnchoringBounds = 16
    }

    export enum Options {
      CaseInsensitive = 1,
      AllowCommentsAndWhitespace = 2,
      IgnoreMetacharacters = 4,
      DotMatchesLineSeparators = 8,
      AnchorsMatchLines = 16,
      UseUnixLineSeparators = 32,
      UseUnicodeWordBoundaries = 64
    }

  }

  namespace NSRelativeSpecifier {
    export enum RelativePosition {
      After = 0,
      Before = 1
    }

  }

  namespace NSRuleEditor {
    export enum NestingMode {
      Single = 0,
      List = 1,
      Compound = 2,
      Simple = 3
    }

    export enum RowType {
      Simple = 0,
      Compound = 1
    }

    export let comparisonModifier: string;
    export let compoundType: string;
    export let customSelector: string;
    export let leftExpression: string;
    export let operatorType: string;
    export let options: string;
    export let rightExpression: string;
    export let rowsDidChangeNotification: string;
  }

  namespace NSRulerView {
    export enum Orientation {
      HorizontalRuler = 0,
      VerticalRuler = 1
    }

    export let centimeters: string;
    export let inches: string;
    export let picas: string;
    export let points: string;
  }

  namespace NSScreen {
    export let colorSpaceDidChangeNotification: string;
  }

  namespace NSScrollView {
    export enum Elasticity {
      Automatic = 0,
      None = 1,
      Allowed = 2
    }

    export enum FindBarPosition {
      AboveHorizontalRuler = 0,
      AboveContent = 1,
      BelowContent = 2
    }

    export let didEndLiveMagnifyNotification: string;
    export let didEndLiveScrollNotification: string;
    export let didLiveScrollNotification: string;
    export let willStartLiveMagnifyNotification: string;
    export let willStartLiveScrollNotification: string;
  }

  namespace NSScroller {
    export enum KnobStyle {
      Default = 0,
      Dark = 1,
      Light = 2
    }

    export enum Part {
      NoPart = 0,
      DecrementPage = 1,
      Knob = 2,
      IncrementPage = 3,
      DecrementLine = 4,
      IncrementLine = 5,
      KnobSlot = 6
    }

    export enum Style {
      Legacy = 0,
      Overlay = 1
    }

    export enum UsableParts {
      NoScrollerParts = 0,
      OnlyScrollerArrows = 1,
      AllScrollerParts = 2
    }

    export let preferredScrollerStyleDidChangeNotification: string;
  }

  namespace NSScrubber {
    export enum Alignment {
      None = 0,
      Leading = 1,
      Trailing = 2,
      Center = 3
    }

    export enum Mode {
      Fixed = 0,
      Free = 1
    }

  }

  namespace NSSearchField {
    export let clearRecentsMenuItemTag: number;
    export let noRecentsMenuItemTag: number;
    export let recentsMenuItemTag: number;
    export let recentsTitleMenuItemTag: number;
    export type RecentsAutosaveName = String;
  }

  namespace NSSegmentedControl {
    export enum Distribution {
      Fit = 0,
      Fill = 1,
      FillEqually = 2,
      FillProportionally = 3
    }

    export enum Style {
      Automatic = 0,
      Rounded = 1,
      RoundRect = 3,
      TexturedSquare = 4,
      SmallSquare = 6,
      Separated = 8,
      TexturedRounded = 2,
      Capsule = 5
    }

    export enum SwitchTracking {
      SelectOne = 0,
      SelectAny = 1,
      Momentary = 2,
      MomentaryAccelerator = 3
    }

  }

  namespace NSSet {
    export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSSharingService {
    export enum CloudKitOptions {
      Standard = 0,
      AllowPublic = 1,
      AllowPrivate = 2,
      AllowReadOnly = 16,
      AllowReadWrite = 32
    }

    export enum SharingContentScope {
      Item = 0,
      Partial = 1,
      Full = 2
    }

    export let addToAperture: string;
    export let addToIPhoto: string;
    export let addToSafariReadingList: string;
    export let cloudSharing: string;
    export let composeEmail: string;
    export let composeMessage: string;
    export let sendViaAirDrop: string;
    export let useAsDesktopPicture: string;
  }

  namespace NSSlider {
    export enum SliderType {
      Linear = 0,
      Circular = 1
    }

    export enum TickMarkPosition {
      Below = 0,
      Above = 1,
      Leading = 1,
      Trailing = 0
    }

  }

  namespace NSSliderAccessory {
    export let default_: number;
    export let wide: number;
  }

  namespace NSSound {
    export type Name = String;
    export type PlaybackDeviceIdentifier = String;
  }

  namespace NSSpecifierTest {
    export enum TestComparisonOperation {
      EqualToComparison = 0,
      LessThanOrEqualToComparison = 1,
      LessThanComparison = 2,
      GreaterThanOrEqualToComparison = 3,
      GreaterThanComparison = 4,
      BeginsWithComparison = 5,
      EndsWithComparison = 6,
      ContainsComparison = 7
    }

  }

  namespace NSSpeechSynthesizer {
    export enum Boundary {
      ImmediateBoundary = 0,
      WordBoundary = 1,
      SentenceBoundary = 2
    }

    export let characterMode: string;
    export let commandDelimiter: string;
    export let currentVoice: string;
    export let abbreviations: string;
    export let entryPhonemes: string;
    export let entrySpelling: string;
    export let localeIdentifier: string;
    export let modificationDate: string;
    export let pronunciations: string;
    export let errors: string;
    export let inputMode: string;
    export let numberMode: string;
    export let outputToFileURL: string;
    export let phonemeSymbols: string;
    export let pitchBase: string;
    export let pitchMod: string;
    export let rate: string;
    export let recentSync: string;
    export let reset: string;
    export let status: string;
    export let synthesizerInfo: string;
    export let volume: string;
    export let age: string;
    export let demoText: string;
    export let gender: string;
    export let female: string;
    export let male: string;
    export let neuter: string;
    export let identifier: string;
    export let individuallySpokenCharacters: string;
    export let name: string;
    export let supportedCharacters: string;
  }

  namespace NSSpellChecker {
    export enum CorrectionIndicatorType {
      Default = 0,
      Reversion = 1,
      Guesses = 2
    }

    export enum CorrectionResponse {
      None = 0,
      Accepted = 1,
      Rejected = 2,
      Ignored = 3,
      Edited = 4,
      Reverted = 5
    }

    export let didChangeAutomaticCapitalizationNotification: string;
    export let didChangeAutomaticDashSubstitutionNotification: string;
    export let didChangeAutomaticPeriodSubstitutionNotification: string;
    export let didChangeAutomaticQuoteSubstitutionNotification: string;
    export let didChangeAutomaticSpellingCorrectionNotification: string;
    export let didChangeAutomaticTextCompletionNotification: string;
    export let didChangeAutomaticTextReplacementNotification: string;
    export let documentAuthor: string;
    export let documentTitle: string;
    export let documentURL: string;
    export let orthography: string;
    export let quotes: string;
    export let referenceDate: string;
    export let referenceTimeZone: string;
    export let regularExpressions: string;
    export let replacements: string;
    export let selectedRange: string;
  }

  namespace NSSplitView {
    export enum DividerStyle {
      Thick = 1,
      Thin = 2,
      PaneSplitter = 3
    }

    export let didResizeSubviewsNotification: string;
    export let willResizeSubviewsNotification: string;
    export type AutosaveName = String;
  }

  namespace NSSplitViewController {
    export let automaticDimension: number;
  }

  namespace NSSplitViewItem {
    export enum Behavior {
      Default = 0,
      Sidebar = 1,
      ContentList = 2
    }

    export enum CollapseBehavior {
      Default = 0,
      PreferResizingSplitViewWithFixedSiblings = 1,
      PreferResizingSiblingsWithFixedSplitView = 2,
      UseConstraints = 3
    }

    export let unspecifiedDimension: number;
  }

  namespace NSStackView {
    export enum Distribution {
      GravityAreas = -1,
      Fill = 0,
      FillEqually = 1,
      FillProportionally = 2,
      EqualSpacing = 3,
      EqualCentering = 4
    }

    export enum Gravity {
      Top = 1,
      Leading = 1,
      Center = 2,
      Bottom = 3,
      Trailing = 3
    }

    export let useDefaultSpacing: number;
    export let detachOnlyIfNecessary: number;
    export let mustHold: number;
    export let notVisible: number;
  }

  namespace NSStatusItem {
    export enum Behavior {
      RemovalAllowed = 2,
      TerminationOnRemoval = 4
    }

    export let squareLength: number;
    export let variableLength: number;
    export type AutosaveName = String;
  }

  namespace NSStoryboard {
    export type Name = String;
    export type SceneIdentifier = String;
  }

  namespace NSStoryboardSegue {
    export type Identifier = String;
  }

  namespace NSString {
    export enum DrawingOptions {
      UsesLineFragmentOrigin = 1,
      UsesFontLeading = 2,
      UsesDeviceMetrics = 8,
      TruncatesLastVisibleLine = 32,
      DisableScreenFontSubstitution = 4,
      OneShot = 16
    }

    export enum CompareOptions {
      CaseInsensitiveSearch = 1,
      LiteralSearch = 2,
      BackwardsSearch = 4,
      AnchoredSearch = 8,
      NumericSearch = 64,
      DiacriticInsensitiveSearch = 128,
      WidthInsensitiveSearch = 256,
      ForcedOrderingSearch = 512,
      RegularExpressionSearch = 1024
    }

    export enum EncodingConversionOptions {
      AllowLossy = 1,
      ExternalRepresentation = 2
    }

    export enum EnumerationOptions {
      ByLines = 0,
      ByParagraphs = 1,
      ByComposedCharacterSequences = 2,
      ByWords = 3,
      BySentences = 4,
      Reverse = 256,
      SubstringNotRequired = 512,
      Localized = 1024
    }

    export type ExtendedGraphemeClusterLiteralType = string;
    export type StringLiteralType = string;
    export type UnicodeScalarLiteralType = string;
  }

  namespace NSTabView {
    export enum TabPosition {
      None = 0,
      Top = 1,
      Left = 2,
      Bottom = 3,
      Right = 4
    }

    export enum TabViewBorderType {
      None = 0,
      Line = 1,
      Bezel = 2
    }

    export enum TabType {
      TopTabsBezelBorder = 0,
      LeftTabsBezelBorder = 1,
      BottomTabsBezelBorder = 2,
      RightTabsBezelBorder = 3,
      NoTabsBezelBorder = 4,
      NoTabsLineBorder = 5,
      NoTabsNoBorder = 6
    }

  }

  namespace NSTabViewController {
    export enum TabStyle {
      SegmentedControlOnTop = 0,
      SegmentedControlOnBottom = 1,
      Toolbar = 2,
      Unspecified = -1
    }

  }

  namespace NSTabViewItem {
    export enum State {
      SelectedTab = 0,
      BackgroundTab = 1,
      PressedTab = 2
    }

  }

  namespace NSTableColumn {
    export enum ResizingOptions {
      NoResizing = 0,
      AutoresizingMask = 1,
      UserResizingMask = 2
    }

  }

  namespace NSTableView {
    export enum RowActionEdge {
      Leading = 0,
      Trailing = 1
    }

    export enum AnimationOptions {
      EffectNone = 0,
      EffectFade = 1,
      EffectGap = 2,
      SlideUp = 16,
      SlideDown = 32,
      SlideLeft = 48,
      SlideRight = 64
    }

    export enum ColumnAutoresizingStyle {
      NoColumnAutoresizing = 0,
      UniformColumnAutoresizingStyle = 1,
      SequentialColumnAutoresizingStyle = 2,
      ReverseSequentialColumnAutoresizingStyle = 3,
      LastColumnOnlyAutoresizingStyle = 4,
      FirstColumnOnlyAutoresizingStyle = 5
    }

    export enum DraggingDestinationFeedbackStyle {
      None = -1,
      Regular = 0,
      SourceList = 1,
      Gap = 2
    }

    export enum DropOperation {
      On = 0,
      Above = 1
    }

    export enum GridLineStyle {
      GridNone = 0,
      SolidVerticalGridLineMask = 1,
      SolidHorizontalGridLineMask = 2,
      DashedHorizontalGridLineMask = 8
    }

    export enum RowSizeStyle {
      Default = -1,
      Custom = 0,
      Small = 1,
      Medium = 2,
      Large = 3
    }

    export enum SelectionHighlightStyle {
      None = -1,
      Regular = 0,
      SourceList = 1
    }

    export let columnDidMoveNotification: string;
    export let columnDidResizeNotification: string;
    export let rowViewIdentifier: string;
    export let selectionDidChangeNotification: string;
    export let selectionIsChangingNotification: string;
    export type AutosaveName = String;
  }

  namespace NSTableViewRowAction {
    export enum Style {
      Regular = 0,
      Destructive = 1
    }

  }

  namespace NSText {
    export let didBeginEditingNotification: string;
    export let didChangeNotification: string;
    export let didEndEditingNotification: string;
    export let movementUserInfoKey: string;
  }

  namespace NSTextAlternatives {
    export let selectedAlternativeStringNotification: string;
  }

  namespace NSTextBlock {
    export enum Dimension {
      Width = 0,
      MinimumWidth = 1,
      MaximumWidth = 2,
      Height = 4,
      MinimumHeight = 5,
      MaximumHeight = 6
    }

    export enum Layer {
      Padding = -1,
      Border = 0,
      Margin = 1
    }

    export enum ValueType {
      AbsoluteValueType = 0,
      PercentageValueType = 1
    }

    export enum VerticalAlignment {
      TopAlignment = 0,
      MiddleAlignment = 1,
      BottomAlignment = 2,
      BaselineAlignment = 3
    }

  }

  namespace NSTextCheckingKey {
    export let airline: string;
    export let city: string;
    export let country: string;
    export let flight: string;
    export let jobTitle: string;
    export let name: string;
    export let organization: string;
    export let phone: string;
    export let state: string;
    export let street: string;
    export let zip: string;
  }

  namespace NSTextCheckingResult {
    export enum CheckingType {
      Orthography = 1,
      Spelling = 2,
      Grammar = 4,
      Date = 8,
      Address = 16,
      Link = 32,
      Quote = 64,
      Dash = 128,
      Replacement = 256,
      Correction = 512,
      RegularExpression = 1024,
      PhoneNumber = 2048,
      TransitInformation = 4096
    }

  }

  namespace NSTextField {
    export enum BezelStyle {
      SquareBezel = 0,
      RoundedBezel = 1
    }

  }

  namespace NSTextFinder {
    export enum Action {
      ShowFindInterface = 1,
      NextMatch = 2,
      PreviousMatch = 3,
      ReplaceAll = 4,
      Replace = 5,
      ReplaceAndFind = 6,
      SetSearchString = 7,
      ReplaceAllInSelection = 8,
      SelectAll = 9,
      SelectAllInSelection = 10,
      HideFindInterface = 11,
      ShowReplaceInterface = 12,
      HideReplaceInterface = 13
    }

    export enum MatchingType {
      Contains = 0,
      StartsWith = 1,
      FullWord = 2,
      EndsWith = 3
    }

  }

  namespace NSTextInputContext {
    export let keyboardSelectionDidChangeNotification: string;
  }

  namespace NSTextList {
    export enum Options {
      PrependEnclosingMarker = 1
    }

    export let box: string;
    export let check: string;
    export let circle: string;
    export let decimal: string;
    export let diamond: string;
    export let disc: string;
    export let hyphen: string;
    export let lowercaseAlpha: string;
    export let lowercaseHexadecimal: string;
    export let lowercaseLatin: string;
    export let lowercaseRoman: string;
    export let octal: string;
    export let square: string;
    export let uppercaseAlpha: string;
    export let uppercaseHexadecimal: string;
    export let uppercaseLatin: string;
    export let uppercaseRoman: string;
  }

  namespace NSTextStorage {
    export let didProcessEditingNotification: string;
    export let willProcessEditingNotification: string;
  }

  namespace NSTextTab {
    export let columnTerminators: string;
  }

  namespace NSTextTable {
    export enum LayoutAlgorithm {
      AutomaticLayoutAlgorithm = 0,
      FixedLayoutAlgorithm = 1
    }

  }

  namespace NSTextView {
    export let didChangeSelectionNotification: string;
    export let didChangeTypingAttributesNotification: string;
    export let willChangeNotifyingTextViewNotification: string;
  }

  namespace NSTimeZone {
    export enum NameStyle {
      Standard = 0,
      ShortStandard = 1,
      DaylightSaving = 2,
      ShortDaylightSaving = 3,
      Generic = 4,
      ShortGeneric = 5
    }

  }

  namespace NSTokenField {
    export enum TokenStyle {
      Default = 0,
      None = 1,
      Rounded = 2,
      Squared = 3,
      PlainSquared = 4
    }

  }

  namespace NSToolbar {
    export enum DisplayMode {
      Default = 0,
      IconAndLabel = 1,
      IconOnly = 2,
      LabelOnly = 3
    }

    export enum SizeMode {
      Default = 0,
      Regular = 1,
      Small = 2
    }

    export let didRemoveItemNotification: string;
    export let willAddItemNotification: string;
    export type Identifier = String;
  }

  namespace NSToolbarItem {
    export let cloudSharing: string;
    export let customizeToolbar: string;
    export let flexibleSpace: string;
    export let high: number;
    export let low: number;
    export let standard: number;
    export let user: number;
    export let print: string;
    export let separator: string;
    export let showColors: string;
    export let showFonts: string;
    export let space: string;
    export let toggleSidebar: string;
  }

  namespace NSToolbarItemGroup {
    export enum ControlRepresentation {
      Automatic = 0,
      Expanded = 1,
      Collapsed = 2
    }

    export enum SelectionMode {
      SelectOne = 0,
      SelectAny = 1,
      Momentary = 2
    }

  }

  namespace NSTouch {
    export enum Phase {
      Began = 1,
      Moved = 2,
      Stationary = 4,
      Ended = 8,
      Cancelled = 16,
      Touching = 7,
      Any = -1
    }

    export enum TouchType {
      Direct = 0,
      Indirect = 1
    }

    export enum TouchTypeMask {
      Direct = 1,
      Indirect = 2
    }

  }

  namespace NSTouchBar {
    export type CustomizationIdentifier = String;
  }

  namespace NSTouchBarItem {
    export let candidateList: string;
    export let characterPicker: string;
    export let fixedSpaceLarge: string;
    export let fixedSpaceSmall: string;
    export let flexibleSpace: string;
    export let otherItemsProxy: string;
    export let textAlignment: string;
    export let textColorPicker: string;
    export let textFormat: string;
    export let textList: string;
    export let textStyle: string;
    export let high: number;
    export let low: number;
    export let normal: number;
  }

  namespace NSTrackingArea {
    export enum Options {
      MouseEnteredAndExited = 1,
      MouseMoved = 2,
      CursorUpdate = 4,
      ActiveWhenFirstResponder = 16,
      ActiveInKeyWindow = 32,
      ActiveInActiveApp = 64,
      ActiveAlways = 128,
      AssumeInside = 256,
      InVisibleRect = 512,
      EnabledDuringMouseDrag = 1024
    }

  }

  namespace NSURL {
    export enum BookmarkCreationOptions {
      PreferFileIDResolution = 256,
      MinimalBookmark = 512,
      SuitableForBookmarkFile = 1024,
      WithSecurityScope = 2048,
      SecurityScopeAllowOnlyReadAccess = 4096
    }

    export enum BookmarkResolutionOptions {
      WithoutUI = 256,
      WithoutMounting = 512,
      WithSecurityScope = 1024
    }

    export type BookmarkFileCreationOptions = number;
  }

  namespace NSURLHandle {
    export enum Status {
      NotLoaded = 0,
      LoadSucceeded = 1,
      LoadInProgress = 2,
      LoadFailed = 3
    }

  }

  namespace NSURLRequest {
    export enum CachePolicy {
      UseProtocolCachePolicy = 0,
      ReloadIgnoringLocalCacheData = 1,
      ReloadIgnoringLocalAndRemoteCacheData = 4,
      ReloadIgnoringCacheData = 1,
      ReturnCacheDataElseLoad = 2,
      ReturnCacheDataDontLoad = 3,
      ReloadRevalidatingCacheData = 5
    }

    export enum NetworkServiceType {
      NetworkServiceTypeDefault = 0,
      NetworkServiceTypeVoIP = 1,
      NetworkServiceTypeVideo = 2,
      NetworkServiceTypeBackground = 3,
      NetworkServiceTypeVoice = 4,
      NetworkServiceTypeResponsiveData = 6,
      NetworkServiceTypeAVStreaming = 8,
      NetworkServiceTypeResponsiveAV = 9,
      NetworkServiceTypeCallSignaling = 11
    }

  }

  namespace NSUbiquitousKeyValueStore {
    export let didChangeExternallyNotification: string;
  }

  namespace NSUserNotification {
    export enum ActivationType {
      None = 0,
      ContentsClicked = 1,
      ActionButtonClicked = 2,
      Replied = 3,
      AdditionalActionClicked = 4
    }

  }

  namespace NSValueTransformerName {
    export let isNilTransformerName: string;
    export let isNotNilTransformerName: string;
    export let negateBooleanTransformerName: string;
    export let secureUnarchiveFromDataTransformerName: string;
  }

  namespace NSView {
    export enum AutoresizingMask {
      ViewNotSizable = 0,
      ViewMinXMargin = 1,
      ViewWidthSizable = 2,
      ViewMaxXMargin = 4,
      ViewMinYMargin = 8,
      ViewHeightSizable = 16,
      ViewMaxYMargin = 32
    }

    export enum BackgroundStyle {
      Normal = 0,
      Emphasized = 1,
      Raised = 2,
      Lowered = 3
    }

    export enum LayerContentsPlacement {
      ScaleAxesIndependently = 0,
      ScaleProportionallyToFit = 1,
      ScaleProportionallyToFill = 2,
      Center = 3,
      Top = 4,
      TopRight = 5,
      Right = 6,
      BottomRight = 7,
      Bottom = 8,
      BottomLeft = 9,
      Left = 10,
      TopLeft = 11
    }

    export enum LayerContentsRedrawPolicy {
      Never = 0,
      OnSetNeedsDisplay = 1,
      DuringViewResize = 2,
      BeforeViewResize = 3,
      Crossfade = 4
    }

    export let emphasized: NSView.BackgroundStyle;
    export let normal: NSView.BackgroundStyle;
    export let dictionaryApplication: string;
    export let presentationType: string;
    export let overlay: string;
    export let fullScreenModeAllScreens: string;
    export let fullScreenModeApplicationPresentationOptions: string;
    export let fullScreenModeSetting: string;
    export let fullScreenModeWindowLevel: string;
    export let boundsDidChangeNotification: string;
    export let didUpdateTrackingAreasNotification: string;
    export let frameDidChangeNotification: string;
    export let noIntrinsicMetric: number;
    export type ToolTipTag = number;
    export type TrackingRectTag = number;
  }

  namespace NSViewAnimation {
    export let effect: string;
    export let endFrame: string;
    export let fadeIn: string;
    export let fadeOut: string;
    export let startFrame: string;
    export let target: string;
  }

  namespace NSViewController {
    export enum TransitionOptions {
      None = 0,
      Crossfade = 1,
      SlideUp = 16,
      SlideDown = 32,
      SlideLeft = 64,
      SlideRight = 128,
      SlideForward = 320,
      SlideBackward = 384,
      AllowUserInteraction = 4096
    }

  }

  namespace NSVisualEffectView {
    export enum BlendingMode {
      BehindWindow = 0,
      WithinWindow = 1
    }

    export enum Material {
      Titlebar = 3,
      Selection = 4,
      Menu = 5,
      Popover = 6,
      Sidebar = 7,
      HeaderView = 10,
      Sheet = 11,
      WindowBackground = 12,
      HUDWindow = 13,
      FullScreenUI = 15,
      ToolTip = 17,
      ContentBackground = 18,
      UnderWindowBackground = 21,
      UnderPageBackground = 22,
      AppearanceBased = 0,
      Light = 1,
      Dark = 2,
      MediumLight = 8,
      UltraDark = 9
    }

    export enum State {
      FollowsWindowActiveState = 0,
      Active = 1,
      Inactive = 2
    }

  }

  namespace NSWhoseSpecifier {
    export enum SubelementIdentifier {
      IndexSubelement = 0,
      EverySubelement = 1,
      MiddleSubelement = 2,
      RandomSubelement = 3,
      NoSubelement = 4
    }

  }

  namespace NSWindow {
    export enum BackingStoreType {
      Retained = 0,
      Nonretained = 1,
      Buffered = 2
    }

    export enum SelectionDirection {
      DirectSelection = 0,
      SelectingNext = 1,
      SelectingPrevious = 2
    }

    export enum AnimationBehavior {
      Default = 0,
      None = 2,
      DocumentWindow = 3,
      UtilityWindow = 4,
      AlertPanel = 5
    }

    export enum ButtonType {
      CloseButton = 0,
      MiniaturizeButton = 1,
      ZoomButton = 2,
      ToolbarButton = 3,
      DocumentIconButton = 4,
      DocumentVersionsButton = 6
    }

    export enum CollectionBehavior {
      Default = 0,
      CanJoinAllSpaces = 1,
      MoveToActiveSpace = 2,
      Managed = 4,
      Transient = 8,
      Stationary = 16,
      ParticipatesInCycle = 32,
      IgnoresCycle = 64,
      FullScreenPrimary = 128,
      FullScreenAuxiliary = 256,
      FullScreenNone = 512,
      FullScreenAllowsTiling = 2048,
      FullScreenDisallowsTiling = 4096
    }

    export enum Depth {
      TwentyfourBitRGB = 520,
      SixtyfourBitRGB = 528,
      OnehundredtwentyeightBitRGB = 544
    }

    export enum NumberListOptions {
      AllApplications = 1,
      AllSpaces = 16
    }

    export enum OcclusionState {
      Visible = 2
    }

    export enum OrderingMode {
      Above = 1,
      Below = -1,
      Out = 0
    }

    export enum SharingType {
      None = 0,
      ReadOnly = 1,
      ReadWrite = 2
    }

    export enum StyleMask {
      Borderless = 0,
      Titled = 1,
      Closable = 2,
      Miniaturizable = 4,
      Resizable = 8,
      TexturedBackground = 256,
      UnifiedTitleAndToolbar = 4096,
      FullScreen = 16384,
      FullSizeContentView = 32768,
      UtilityWindow = 16,
      DocModalWindow = 64,
      NonactivatingPanel = 128,
      HUDWindow = 8192
    }

    export enum TabbingMode {
      Automatic = 0,
      Preferred = 1,
      Disallowed = 2
    }

    export enum TitleVisibility {
      Visible = 0,
      Hidden = 1
    }

    export enum UserTabbingPreference {
      Manual = 0,
      Always = 1,
      InFullScreen = 2
    }

    export let oldColorSpaceUserInfoKey: string;
    export let oldScaleFactorUserInfoKey: string;
    export let floating: number;
    export let mainMenu: number;
    export let modalPanel: number;
    export let normal: number;
    export let popUpMenu: number;
    export let screenSaver: number;
    export let statusBar: number;
    export let submenu: number;
    export let tornOffMenu: number;
    export let didBecomeKeyNotification: string;
    export let didBecomeMainNotification: string;
    export let didChangeBackingPropertiesNotification: string;
    export let didChangeOcclusionStateNotification: string;
    export let didChangeScreenNotification: string;
    export let didChangeScreenProfileNotification: string;
    export let didDeminiaturizeNotification: string;
    export let didEndLiveResizeNotification: string;
    export let didEndSheetNotification: string;
    export let didEnterFullScreenNotification: string;
    export let didEnterVersionBrowserNotification: string;
    export let didExitFullScreenNotification: string;
    export let didExitVersionBrowserNotification: string;
    export let didExposeNotification: string;
    export let didMiniaturizeNotification: string;
    export let didMoveNotification: string;
    export let didResignKeyNotification: string;
    export let didResignMainNotification: string;
    export let didResizeNotification: string;
    export let didUpdateNotification: string;
    export let willBeginSheetNotification: string;
    export let willCloseNotification: string;
    export let willEnterFullScreenNotification: string;
    export let willEnterVersionBrowserNotification: string;
    export let willExitFullScreenNotification: string;
    export let willExitVersionBrowserNotification: string;
    export let willMiniaturizeNotification: string;
    export let willMoveNotification: string;
    export let willStartLiveResizeNotification: string;
    export type FrameAutosaveName = String;
    export type PersistableFrameDescriptor = String;
    export type TabbingIdentifier = String;
  }

  namespace NSWorkspace {
    export enum AuthorizationType {
      CreateSymbolicLink = 0,
      SetAttributes = 1,
      ReplaceFile = 2
    }

    export enum IconCreationOptions {
      ExcludeQuickDrawElementsIconCreationOption = 2,
      Exclude10_4ElementsIconCreationOption = 4
    }

    export enum LaunchOptions {
      AndPrint = 2,
      WithErrorPresentation = 64,
      InhibitingBackgroundOnly = 128,
      WithoutAddingToRecents = 256,
      WithoutActivation = 512,
      Async = 65536,
      NewInstance = 524288,
      AndHide = 1048576,
      AndHideOthers = 2097152,
      Default = 65536,
      AllowingClassicStartup = 131072,
      PreferringClassic = 262144
    }

    export let accessibilityDisplayOptionsDidChangeNotification: string;
    export let activeSpaceDidChangeNotification: string;
    export let applicationUserInfoKey: string;
    export let allowClipping: string;
    export let fillColor: string;
    export let imageScaling: string;
    export let didActivateApplicationNotification: string;
    export let didChangeFileLabelsNotification: string;
    export let didDeactivateApplicationNotification: string;
    export let didHideApplicationNotification: string;
    export let didLaunchApplicationNotification: string;
    export let didMountNotification: string;
    export let didRenameVolumeNotification: string;
    export let didTerminateApplicationNotification: string;
    export let didUnhideApplicationNotification: string;
    export let didUnmountNotification: string;
    export let didWakeNotification: string;
    export let appleEvent: string;
    export let architecture: string;
    export let arguments_: string;
    export let environment: string;
    export let screensDidSleepNotification: string;
    export let screensDidWakeNotification: string;
    export let sessionDidBecomeActiveNotification: string;
    export let sessionDidResignActiveNotification: string;
    export let localizedVolumeNameUserInfoKey: string;
    export let oldLocalizedVolumeNameUserInfoKey: string;
    export let oldVolumeURLUserInfoKey: string;
    export let volumeURLUserInfoKey: string;
    export let willLaunchApplicationNotification: string;
    export let willPowerOffNotification: string;
    export let willSleepNotification: string;
    export let willUnmountNotification: string;
  }

  namespace NSXPCConnection {
    export enum Options {
      Privileged = 4096
    }

  }

  namespace NetService {
    // struct
    export enum Options {
      noAutoRename,
      listenForConnections,
      center,
      name,
      object
    }

  }

  namespace NotificationQueue {
    export enum NotificationCoalescing {
      NoCoalescing = 0,
      CoalescingOnName = 1,
      CoalescingOnSender = 2
    }

    export enum PostingStyle {
      WhenIdle = 1,
      ASAP = 2,
      Now = 3
    }

  }

  namespace NumberFormatter {
    export enum Behavior {
      BehaviorDefault = 0,
      Behavior10_0 = 1000,
      Behavior10_4 = 1040
    }

    export enum PadPosition {
      BeforePrefix = 0,
      AfterPrefix = 1,
      BeforeSuffix = 2,
      AfterSuffix = 3
    }

    export enum RoundingMode {
      Ceiling = 0,
      Floor = 1,
      Down = 2,
      Up = 3,
      HalfEven = 4,
      HalfDown = 5,
      HalfUp = 6
    }

    export enum Style {
      NoStyle = 0,
      DecimalStyle = 1,
      CurrencyStyle = 2,
      PercentStyle = 3,
      ScientificStyle = 4,
      SpellOutStyle = 5,
      OrdinalStyle = 6,
      CurrencyISOCodeStyle = 8,
      CurrencyPluralStyle = 9,
      CurrencyAccountingStyle = 10
    }

  }

  namespace Operation {
    export enum QueuePriority {
      VeryLow = -8,
      Low = -4,
      Normal = 0,
      High = 4,
      VeryHigh = 8
    }

  }

  namespace OperationQueue {
    export let defaultMaxConcurrentOperationCount: number;
  }

  namespace PersonNameComponentsFormatter {
    export enum Options {
      Phonetic = 2
    }

    export enum Style {
      Default = 0,
      Short = 1,
      Medium = 2,
      Long = 3,
      Abbreviated = 4
    }

  }

  namespace Port {
    export let didBecomeInvalidNotification: string;
  }

  namespace Process {
    export enum TerminationReason {
      Exit = 1,
      UncaughtSignal = 2
    }

    export let didTerminateNotification: string;
  }

  namespace ProcessInfo {
    export enum ActivityOptions {
      IdleDisplaySleepDisabled = 1099511627776,
      IdleSystemSleepDisabled = 1048576,
      SuddenTerminationDisabled = 16384,
      AutomaticTerminationDisabled = 32768,
      UserInitiated = 16777215,
      UserInitiatedAllowingIdleSystemSleep = 15728639,
      Background = 255,
      LatencyCritical = 1095216660480
    }

    export enum ThermalState {
      Nominal = 0,
      Fair = 1,
      Serious = 2,
      Critical = 3
    }

    export let thermalStateDidChangeNotification: string;
  }

  namespace Progress {
    export let copying: string;
    export let decompressingAfterDownloading: string;
    export let downloading: string;
    export let receiving: string;
  }

  namespace ProgressKind {
    export let file: string;
  }

  namespace ProgressUserInfoKey {
    export let estimatedTimeRemainingKey: string;
    export let fileAnimationImageKey: string;
    export let fileAnimationImageOriginalRectKey: string;
    export let fileCompletedCountKey: string;
    export let fileIconKey: string;
    export let fileOperationKindKey: string;
    export let fileTotalCountKey: string;
    export let fileURLKey: string;
    export let throughputKey: string;
  }

  namespace PropertyListSerialization {
    export enum PropertyListFormat {
      OpenStepFormat = 1,
      XMLFormat_v1_0 = 100,
      BinaryFormat_v1_0 = 200
    }

    export enum MutabilityOptions {
      Immutable = 0,
      MutableContainers = 1,
      MutableContainersAndLeaves = 2
    }

    export type ReadOptions = PropertyListSerialization;
    export type WriteOptions = number;
  }

  namespace RelativeDateTimeFormatter {
    export enum DateTimeStyle {
      Numeric = 0,
      Named = 1
    }

    export enum UnitsStyle {
      Full = 0,
      SpellOut = 1,
      Short = 2,
      Abbreviated = 3
    }

  }

  namespace RunLoop {
    export let eventTracking: string;
    export let modalPanel: string;
    export let default_: string;
    export let common: string;
  }

  namespace Stream {
    export enum Event {
      None = 0,
      OpenCompleted = 1,
      HasBytesAvailable = 2,
      HasSpaceAvailable = 4,
      ErrorOccurred = 8,
      EndEncountered = 16
    }

    export enum Status {
      NotOpen = 0,
      Opening = 1,
      Open = 2,
      Reading = 3,
      Writing = 4,
      AtEnd = 5,
      Closed = 6,
      Error = 7
    }

    export let dataWrittenToMemoryStreamKey: string;
    export let fileCurrentOffsetKey: string;
    export let networkServiceType: string;
    export let socksProxyConfigurationKey: string;
    export let socketSecurityLevelKey: string;
  }

  namespace StreamNetworkServiceTypeValue {
    export let background: string;
    export let callSignaling: string;
    export let video: string;
    export let voIP: string;
    export let voice: string;
  }

  namespace StreamSOCKSProxyConfiguration {
    export let hostKey: string;
    export let passwordKey: string;
    export let portKey: string;
    export let userKey: string;
    export let versionKey: string;
  }

  namespace StreamSOCKSProxyVersion {
    export let version4: string;
    export let version5: string;
  }

  namespace StreamSocketSecurityLevel {
    export let negotiatedSSL: string;
    export let none: string;
    export let ssLv2: string;
    export let ssLv3: string;
    export let tlSv1: string;
  }

  namespace StringEncodingDetectionOptionsKey {
    export let allowLossyKey: string;
    export let disallowedEncodingsKey: string;
    export let fromWindowsKey: string;
    export let likelyLanguageKey: string;
    export let lossySubstitutionKey: string;
    export let suggestedEncodingsKey: string;
    export let useOnlySuggestedEncodingsKey: string;
  }

  namespace StringTransform {
    export let fullwidthToHalfwidth: string;
    export let hiraganaToKatakana: string;
    export let latinToArabic: string;
    export let latinToCyrillic: string;
    export let latinToGreek: string;
    export let latinToHangul: string;
    export let latinToHebrew: string;
    export let latinToHiragana: string;
    export let latinToKatakana: string;
    export let latinToThai: string;
    export let mandarinToLatin: string;
    export let stripCombiningMarks: string;
    export let stripDiacritics: string;
    export let toLatin: string;
    export let toUnicodeName: string;
    export let toXMLHex: string;
  }

  namespace SystemPressureState {
    // struct
    export enum Factors {
      systemTemperature,
      peakPower,
      depthModuleTemperature
    }

  }

  namespace URLCache {
    export enum StoragePolicy {
      Allowed = 0,
      AllowedInMemoryOnly = 1,
      NotAllowed = 2
    }

  }

  namespace URLCredential {
    export enum Persistence {
      None = 0,
      ForSession = 1,
      Permanent = 2,
      Synchronizable = 3
    }

  }

  namespace URLFileProtection {
    export let complete: string;
    export let completeUnlessOpen: string;
    export let completeUntilFirstUserAuthentication: string;
    export let none: string;
  }

  namespace URLFileResourceType {
    export let blockSpecial: string;
    export let characterSpecial: string;
    export let directory: string;
    export let namedPipe: string;
    export let regular: string;
    export let socket: string;
    export let symbolicLink: string;
    export let unknown: string;
  }

  namespace URLResourceKey {
    export let addedToDirectoryDateKey: string;
    export let applicationIsScriptableKey: string;
    export let attributeModificationDateKey: string;
    export let canonicalPathKey: string;
    export let contentAccessDateKey: string;
    export let contentModificationDateKey: string;
    export let creationDateKey: string;
    export let customIconKey: string;
    export let documentIdentifierKey: string;
    export let effectiveIconKey: string;
    export let fileAllocatedSizeKey: string;
    export let fileProtectionKey: string;
    export let fileResourceIdentifierKey: string;
    export let fileResourceTypeKey: string;
    export let fileSecurityKey: string;
    export let fileSizeKey: string;
    export let generationIdentifierKey: string;
    export let hasHiddenExtensionKey: string;
    export let isAliasFileKey: string;
    export let isApplicationKey: string;
    export let isDirectoryKey: string;
    export let isExcludedFromBackupKey: string;
    export let isExecutableKey: string;
    export let isHiddenKey: string;
    export let isMountTriggerKey: string;
    export let isPackageKey: string;
    export let isReadableKey: string;
    export let isRegularFileKey: string;
    export let isSymbolicLinkKey: string;
    export let isSystemImmutableKey: string;
    export let isUbiquitousItemKey: string;
    export let isUserImmutableKey: string;
    export let isVolumeKey: string;
    export let isWritableKey: string;
    export let keysOfUnsetValuesKey: string;
    export let labelColorKey: string;
    export let labelNumberKey: string;
    export let linkCountKey: string;
    export let localizedLabelKey: string;
    export let localizedNameKey: string;
    export let localizedTypeDescriptionKey: string;
    export let nameKey: string;
    export let parentDirectoryURLKey: string;
    export let pathKey: string;
    export let preferredIOBlockSizeKey: string;
    export let quarantinePropertiesKey: string;
    export let tagNamesKey: string;
    export let thumbnailDictionaryKey: string;
    export let thumbnailKey: string;
    export let totalFileAllocatedSizeKey: string;
    export let totalFileSizeKey: string;
    export let typeIdentifierKey: string;
    export let ubiquitousItemContainerDisplayNameKey: string;
    export let ubiquitousItemDownloadRequestedKey: string;
    export let ubiquitousItemDownloadingErrorKey: string;
    export let ubiquitousItemDownloadingStatusKey: string;
    export let ubiquitousItemHasUnresolvedConflictsKey: string;
    export let ubiquitousItemIsDownloadingKey: string;
    export let ubiquitousItemIsSharedKey: string;
    export let ubiquitousItemIsUploadedKey: string;
    export let ubiquitousItemIsUploadingKey: string;
    export let ubiquitousItemUploadingErrorKey: string;
    export let ubiquitousSharedItemCurrentUserPermissionsKey: string;
    export let ubiquitousSharedItemCurrentUserRoleKey: string;
    export let ubiquitousSharedItemMostRecentEditorNameComponentsKey: string;
    export let ubiquitousSharedItemOwnerNameComponentsKey: string;
    export let volumeAvailableCapacityForImportantUsageKey: string;
    export let volumeAvailableCapacityForOpportunisticUsageKey: string;
    export let volumeAvailableCapacityKey: string;
    export let volumeCreationDateKey: string;
    export let volumeIdentifierKey: string;
    export let volumeIsAutomountedKey: string;
    export let volumeIsBrowsableKey: string;
    export let volumeIsEjectableKey: string;
    export let volumeIsEncryptedKey: string;
    export let volumeIsInternalKey: string;
    export let volumeIsJournalingKey: string;
    export let volumeIsLocalKey: string;
    export let volumeIsReadOnlyKey: string;
    export let volumeIsRemovableKey: string;
    export let volumeIsRootFileSystemKey: string;
    export let volumeLocalizedFormatDescriptionKey: string;
    export let volumeLocalizedNameKey: string;
    export let volumeMaximumFileSizeKey: string;
    export let volumeNameKey: string;
    export let volumeResourceCountKey: string;
    export let volumeSupportsAccessPermissionsKey: string;
    export let volumeSupportsAdvisoryFileLockingKey: string;
    export let volumeSupportsCasePreservedNamesKey: string;
    export let volumeSupportsCaseSensitiveNamesKey: string;
    export let volumeSupportsCompressionKey: string;
    export let volumeSupportsExclusiveRenamingKey: string;
    export let volumeSupportsExtendedSecurityKey: string;
    export let volumeSupportsFileCloningKey: string;
    export let volumeSupportsHardLinksKey: string;
    export let volumeSupportsImmutableFilesKey: string;
    export let volumeSupportsJournalingKey: string;
    export let volumeSupportsPersistentIDsKey: string;
    export let volumeSupportsRenamingKey: string;
    export let volumeSupportsRootDirectoryDatesKey: string;
    export let volumeSupportsSparseFilesKey: string;
    export let volumeSupportsSwapRenamingKey: string;
    export let volumeSupportsSymbolicLinksKey: string;
    export let volumeSupportsVolumeSizesKey: string;
    export let volumeSupportsZeroRunsKey: string;
    export let volumeTotalCapacityKey: string;
    export let volumeURLForRemountingKey: string;
    export let volumeURLKey: string;
    export let volumeUUIDStringKey: string;
  }

  namespace URLSession {
    export enum AuthChallengeDisposition {
      UseCredential = 0,
      PerformDefaultHandling = 1,
      CancelAuthenticationChallenge = 2,
      RejectProtectionSpace = 3
    }

    export enum ResponseDisposition {
      Cancel = 0,
      Allow = 1,
      BecomeDownload = 2,
      BecomeStream = 3
    }

  }

  namespace URLSessionTask {
    export enum State {
      Running = 0,
      Suspended = 1,
      Canceling = 2,
      Completed = 3
    }

    export let defaultPriority: number;
    export let highPriority: number;
    export let lowPriority: number;
  }

  namespace URLSessionTaskMetrics {
    export enum ResourceFetchType {
      Unknown = 0,
      NetworkLoad = 1,
      ServerPush = 2,
      LocalCache = 3
    }

  }

  namespace URLSessionWebSocketTask {
    export enum CloseCode {
      Invalid = 0,
      NormalClosure = 1000,
      GoingAway = 1001,
      ProtocolError = 1002,
      UnsupportedData = 1003,
      NoStatusReceived = 1005,
      AbnormalClosure = 1006,
      InvalidFramePayloadData = 1007,
      PolicyViolation = 1008,
      MessageTooBig = 1009,
      MandatoryExtensionMissing = 1010,
      InternalServerError = 1011,
      TLSHandshakeFailure = 1015
    }

  }

  namespace URLThumbnailDictionaryItem {
    export let NSThumbnail1024x1024SizeKey: string;
  }

  namespace URLUbiquitousItemDownloadingStatus {
    export let current: string;
    export let downloaded: string;
    export let notDownloaded: string;
  }

  namespace URLUbiquitousSharedItemPermissions {
    export let readOnly: string;
    export let readWrite: string;
  }

  namespace URLUbiquitousSharedItemRole {
    export let owner: string;
    export let participant: string;
  }

  namespace UserDefaults {
    export let argumentDomain: string;
    export let globalDomain: string;
    export let registrationDomain: string;
    export let completedInitialCloudSyncNotification: string;
    export let didChangeCloudAccountsNotification: string;
    export let noCloudAccountNotification: string;
    export let didChangeNotification: string;
    export let sizeLimitExceededNotification: string;
  }

  namespace XMLDTDNode {
    export enum DTDKind {
      EntityGeneralKind = 1,
      EntityParsedKind = 2,
      EntityUnparsedKind = 3,
      EntityParameterKind = 4,
      EntityPredefined = 5,
      AttributeCDATAKind = 6,
      AttributeIDKind = 7,
      AttributeIDRefKind = 8,
      AttributeIDRefsKind = 9,
      AttributeEntityKind = 10,
      AttributeEntitiesKind = 11,
      AttributeNMTokenKind = 12,
      AttributeNMTokensKind = 13,
      AttributeEnumerationKind = 14,
      AttributeNotationKind = 15,
      ElementDeclarationUndefinedKind = 16,
      ElementDeclarationEmptyKind = 17,
      ElementDeclarationAnyKind = 18,
      ElementDeclarationMixedKind = 19,
      ElementDeclarationElementKind = 20
    }

  }

  namespace XMLDocument {
    export enum ContentKind {
      XMLKind = 0,
      XHTMLKind = 1,
      HTMLKind = 2,
      TextKind = 3
    }

  }

  namespace XMLNode {
    export enum Kind {
      InvalidKind = 0,
      DocumentKind = 1,
      ElementKind = 2,
      AttributeKind = 3,
      NamespaceKind = 4,
      ProcessingInstructionKind = 5,
      CommentKind = 6,
      TextKind = 7,
      DTDKind = 8,
      EntityDeclarationKind = 9,
      AttributeDeclarationKind = 10,
      ElementDeclarationKind = 11,
      NotationDeclarationKind = 12
    }

    export enum Options {
      NodeOptionsNone = 0,
      NodeIsCDATA = 1,
      NodeExpandEmptyElement = 2,
      NodeCompactEmptyElement = 4,
      NodeUseSingleQuotes = 8,
      NodeUseDoubleQuotes = 16,
      NodeNeverEscapeContents = 32,
      DocumentTidyHTML = 512,
      DocumentTidyXML = 1024,
      DocumentValidate = 8192,
      NodeLoadExternalEntitiesAlways = 16384,
      NodeLoadExternalEntitiesSameOriginOnly = 32768,
      NodeLoadExternalEntitiesNever = 524288,
      DocumentXInclude = 65536,
      NodePrettyPrint = 131072,
      DocumentIncludeContentTypeDeclaration = 262144,
      NodePreserveNamespaceOrder = 1048576,
      NodePreserveAttributeOrder = 2097152,
      NodePreserveEntities = 4194304,
      NodePreservePrefixes = 8388608,
      NodePreserveCDATA = 16777216,
      NodePreserveWhitespace = 33554432,
      NodePreserveDTD = 67108864,
      NodePreserveCharacterReferences = 134217728,
      NodePromoteSignificantWhitespace = 268435456,
      NodePreserveEmptyElements = 6,
      NodePreserveQuotes = 24,
      NodePreserveAll = 4293918750
    }

  }

  namespace XMLParser {
    export enum ErrorCode {
      InternalError = 1,
      OutOfMemoryError = 2,
      DocumentStartError = 3,
      EmptyDocumentError = 4,
      PrematureDocumentEndError = 5,
      InvalidHexCharacterRefError = 6,
      InvalidDecimalCharacterRefError = 7,
      InvalidCharacterRefError = 8,
      InvalidCharacterError = 9,
      CharacterRefAtEOFError = 10,
      CharacterRefInPrologError = 11,
      CharacterRefInEpilogError = 12,
      CharacterRefInDTDError = 13,
      EntityRefAtEOFError = 14,
      EntityRefInPrologError = 15,
      EntityRefInEpilogError = 16,
      EntityRefInDTDError = 17,
      ParsedEntityRefAtEOFError = 18,
      ParsedEntityRefInPrologError = 19,
      ParsedEntityRefInEpilogError = 20,
      ParsedEntityRefInInternalSubsetError = 21,
      EntityReferenceWithoutNameError = 22,
      EntityReferenceMissingSemiError = 23,
      ParsedEntityRefNoNameError = 24,
      ParsedEntityRefMissingSemiError = 25,
      UndeclaredEntityError = 26,
      UnparsedEntityError = 28,
      EntityIsExternalError = 29,
      EntityIsParameterError = 30,
      UnknownEncodingError = 31,
      EncodingNotSupportedError = 32,
      StringNotStartedError = 33,
      StringNotClosedError = 34,
      NamespaceDeclarationError = 35,
      EntityNotStartedError = 36,
      EntityNotFinishedError = 37,
      LessThanSymbolInAttributeError = 38,
      AttributeNotStartedError = 39,
      AttributeNotFinishedError = 40,
      AttributeHasNoValueError = 41,
      AttributeRedefinedError = 42,
      LiteralNotStartedError = 43,
      LiteralNotFinishedError = 44,
      CommentNotFinishedError = 45,
      ProcessingInstructionNotStartedError = 46,
      ProcessingInstructionNotFinishedError = 47,
      NotationNotStartedError = 48,
      NotationNotFinishedError = 49,
      AttributeListNotStartedError = 50,
      AttributeListNotFinishedError = 51,
      MixedContentDeclNotStartedError = 52,
      MixedContentDeclNotFinishedError = 53,
      ElementContentDeclNotStartedError = 54,
      ElementContentDeclNotFinishedError = 55,
      XMLDeclNotStartedError = 56,
      XMLDeclNotFinishedError = 57,
      ConditionalSectionNotStartedError = 58,
      ConditionalSectionNotFinishedError = 59,
      ExternalSubsetNotFinishedError = 60,
      DOCTYPEDeclNotFinishedError = 61,
      MisplacedCDATAEndStringError = 62,
      CDATANotFinishedError = 63,
      MisplacedXMLDeclarationError = 64,
      SpaceRequiredError = 65,
      SeparatorRequiredError = 66,
      NMTOKENRequiredError = 67,
      NAMERequiredError = 68,
      PCDATARequiredError = 69,
      URIRequiredError = 70,
      PublicIdentifierRequiredError = 71,
      LTRequiredError = 72,
      GTRequiredError = 73,
      LTSlashRequiredError = 74,
      EqualExpectedError = 75,
      TagNameMismatchError = 76,
      UnfinishedTagError = 77,
      StandaloneValueError = 78,
      InvalidEncodingNameError = 79,
      CommentContainsDoubleHyphenError = 80,
      InvalidEncodingError = 81,
      ExternalStandaloneEntityError = 82,
      InvalidConditionalSectionError = 83,
      EntityValueRequiredError = 84,
      NotWellBalancedError = 85,
      ExtraContentError = 86,
      InvalidCharacterInEntityError = 87,
      ParsedEntityRefInInternalError = 88,
      EntityRefLoopError = 89,
      EntityBoundaryError = 90,
      InvalidURIError = 91,
      URIFragmentError = 92,
      NoDTDError = 94,
      DelegateAbortedParseError = 512
    }

    export enum ExternalEntityResolvingPolicy {
      ResolveExternalEntitiesNever = 0,
      ResolveExternalEntitiesNoNetwork = 1,
      ResolveExternalEntitiesSameOriginOnly = 2,
      ResolveExternalEntitiesAlways = 3
    }

    export let errorDomain: string;
  }

  export enum AVAssetReferenceRestrictions {
    forbidRemoteReferenceToLocal,
    forbidLocalReferenceToRemote,
    forbidCrossSiteReference,
    forbidLocalReferenceToLocal,
    forbidAll,
    defaultPolicy,
  }

  export enum AVAudioPlayerNodeBufferOptions {
    byteSwapped,
    scalarCount,
    loops,
    interrupts,
    interruptsAtLoop,
  }

  export enum AVAudioSpatializationFormats {
    monoAndStereo,
    multichannel,
    monoStereoAndMultichannel,
  }

  export enum AVMovieWritingOptions {
    errorDomain,
    unknown,
    outOfMemory,
    sessionNotRunning,
    deviceAlreadyUsedByAnotherSession,
    noDataCaptured,
    sessionConfigurationChanged,
    diskFull,
    deviceWasDisconnected,
    mediaChanged,
    maximumDurationReached,
    maximumFileSizeReached,
    mediaDiscontinuity,
    maximumNumberOfSamplesForFileFormatReached,
    deviceNotConnected,
    deviceInUseByAnotherApplication,
    deviceLockedForConfigurationByAnotherProcess,
    exportFailed,
    decodeFailed,
    invalidSourceMedia,
    fileAlreadyExists,
    compositionTrackSegmentsNotContiguous,
    invalidCompositionTrackSegmentDuration,
    invalidCompositionTrackSegmentSourceStartTime,
    invalidCompositionTrackSegmentSourceDuration,
    fileFormatNotRecognized,
    fileFailedToParse,
    maximumStillImageCaptureRequestsExceeded,
    contentIsProtected,
    noImageAtTime,
    decoderNotFound,
    encoderNotFound,
    contentIsNotAuthorized,
    applicationIsNotAuthorized,
    operationNotSupportedForAsset,
    decoderTemporarilyUnavailable,
    encoderTemporarilyUnavailable,
    invalidVideoComposition,
    referenceForbiddenByReferencePolicy,
    invalidOutputURLPathExtension,
    screenCaptureFailed,
    displayWasDisabled,
    torchLevelUnavailable,
    incompatibleAsset,
    failedToLoadMediaData,
    serverIncorrectlyConfigured,
    applicationIsNotAuthorizedToUseDevice,
    failedToParse,
    fileTypeDoesNotSupportSampleReferences,
    undecodableMediaData,
    airPlayControllerRequiresInternet,
    airPlayReceiverRequiresInternet,
    videoCompositorFailed,
    createContentKeyRequestFailed,
    unsupportedOutputSettings,
    operationNotAllowed,
    contentIsUnavailable,
    formatUnsupported,
    malformedDepth,
    contentNotUpdated,
    noLongerPlayable,
    noCompatibleAlternatesForExternalDisplay,
    noSourceTrack,
    externalPlaybackNotSupportedForAsset,
    operationNotSupportedForPreset,
    incorrectlyConfigured,
    segmentStartedWithNonSyncSample,
    rosettaNotInstalled,
    addMovieHeaderToDestination,
    truncateDestinationToMovieHeaderOnly,
  }

  export enum AVMusicSequenceLoadOptions {
    smfChannelsToTracks,
    scalarCount,
  }

  export enum AlignmentOptions {
    alignMinXInward,
    alignMinYInward,
    alignMaxXInward,
    alignMaxYInward,
    alignWidthInward,
    alignHeightInward,
    alignMinXOutward,
    alignMinYOutward,
    alignMaxXOutward,
    alignMaxYOutward,
    alignWidthOutward,
    alignHeightOutward,
    alignMinXNearest,
    alignMinYNearest,
    alignMaxXNearest,
    alignMaxYNearest,
    alignWidthNearest,
    alignHeightNearest,
    alignRectFlipped,
    alignAllEdgesInward,
    alignAllEdgesOutward,
    alignAllEdgesNearest,
  }

  export enum AnyObject {
    byteSwapped,
    scalarCount,
    assureMemoryNow,
    alwaysCopyData,
    dontOptimizeDepth,
    permitEmptyReference,
  }

  export enum CAAutoresizingMask {
    layerMinXMargin,
    layerWidthSizable,
    layerMaxXMargin,
    layerMinYMargin,
    layerHeightSizable,
    layerMaxYMargin,
  }

  export enum CACornerMask {
    layerMinXMinYCorner,
    layerMaxXMinYCorner,
    layerMinXMaxYCorner,
    layerMaxXMaxYCorner,
  }

  export enum CAEdgeAntialiasingMask {
    layerLeftEdge,
    layerRightEdge,
    layerBottomEdge,
    layerTopEdge,
  }

  export enum CFCalendarUnit {
    magnitude,
    byteSwapped,
    scalarCount,
    era,
    year,
    month,
    day,
    hour,
    minute,
    second,
    week,
    weekday,
    weekdayOrdinal,
    quarter,
    weekOfMonth,
    weekOfYear,
    yearForWeekOfYear,
  }

  export enum CFDataSearchFlags {
    backwards,
    anchored,
  }

  export enum CFFileSecurityClearOptions {
    magnitude,
    byteSwapped,
    scalarCount,
    owner,
    group,
    mode,
    ownerUUID,
    groupUUID,
    accessControlList,
  }

  export enum CFGregorianUnitFlags {
    unitsYears,
    unitsMonths,
    unitsDays,
    unitsHours,
    unitsMinutes,
    unitsSeconds,
    allUnits,
  }

  export enum CFISO8601DateFormatOptions {
    byteSwapped,
    scalarCount,
    withYear,
    withMonth,
    withWeekOfYear,
    withDay,
    withTime,
    withTimeZone,
    withSpaceBetweenDateAndTime,
    withDashSeparatorInDate,
    withColonSeparatorInTime,
    withColonSeparatorInTimeZone,
    withFractionalSeconds,
    withFullDate,
    withFullTime,
    withInternetDateTime,
  }

  export enum CFNumberFormatterOptionFlags {
    magnitude,
    byteSwapped,
    scalarCount,
    parseIntegersOnly,
  }

  export enum CFPropertyListMutabilityOptions {
    byteSwapped,
    scalarCount,
    mutableContainers,
    mutableContainersAndLeaves,
  }

  export enum CFRunLoopActivity {
    entry,
    beforeTimers,
    beforeSources,
    beforeWaiting,
    afterWaiting,
    exit,
    allActivities,
  }

  export enum CFSocketCallBackType {
    readCallBack,
    acceptCallBack,
    dataCallBack,
    connectCallBack,
    writeCallBack,
  }

  export enum CFStreamEventType {
    magnitude,
    byteSwapped,
    scalarCount,
    openCompleted,
    hasBytesAvailable,
    canAcceptBytes,
    errorOccurred,
    endEncountered,
  }

  export enum CFStringCompareFlags {
    compareCaseInsensitive,
    compareBackwards,
    compareAnchored,
    compareNonliteral,
    compareLocalized,
    compareNumerically,
    compareDiacriticInsensitive,
    compareWidthInsensitive,
    compareForcedOrdering,
  }

  export enum CFStringTokenizerTokenType {
    byteSwapped,
    scalarCount,
    normal,
    hasSubTokensMask,
    hasDerivedSubTokensMask,
    hasHasNumbersMask,
    hasNonLettersMask,
    isCJWordMask,
  }

  export enum CFURLBookmarkCreationOptions {
    byteSwapped,
    scalarCount,
    minimalBookmarkMask,
    suitableForBookmarkFile,
    withSecurityScope,
    securityScopeAllowOnlyReadAccess,
  }

  export enum CFURLBookmarkResolutionOptions {
    byteSwapped,
    scalarCount,
    cfurlBookmarkResolutionWithoutUIMask,
    cfurlBookmarkResolutionWithoutMountingMask,
    cfurlBookmarkResolutionWithSecurityScope,
    cfBookmarkResolutionWithoutUIMask,
    cfBookmarkResolutionWithoutMountingMask,
  }

  export enum CFURLEnumeratorOptions {
    descendRecursively,
    skipInvisibles,
    generateFileReferenceURLs,
    skipPackageContents,
    includeDirectoriesPreOrder,
    includeDirectoriesPostOrder,
    generateRelativePathURLs,
  }

  export enum CFXMLParserOptions {
    validateDocument,
    skipMetaData,
    replacePhysicalEntities,
    skipWhitespace,
    resolveExternalEntities,
    addImpliedAttributes,
    allOptions,
  }

  export enum CFXMLParserStatusCode {
    statusParseNotBegun,
    statusParseInProgress,
    errorUnexpectedEOF,
    errorUnknownEncoding,
    errorEncodingConversionFailure,
    errorMalformedProcessingInstruction,
    errorMalformedDTD,
    errorMalformedName,
    errorMalformedCDSect,
    errorMalformedCloseTag,
    errorMalformedStartTag,
    errorMalformedDocument,
    errorElementlessDocument,
    errorMalformedComment,
    errorMalformedCharacterReference,
    errorMalformedParsedCharacterData,
    errorNoData,
  }

  export enum CGBitmapInfo {
    alphaInfoMask,
    floatInfoMask,
    floatComponents,
    byteOrderMask,
    byteOrder16Little,
    byteOrder32Little,
    byteOrder16Big,
    byteOrder32Big,
  }

  export enum CGCaptureOptions {
    byteSwapped,
    scalarCount,
    noFill,
  }

  export enum CGConfigureOption {
    byteSwapped,
    scalarCount,
    forAppOnly,
    forSession,
    permanently,
  }

  export enum CGDisplayChangeSummaryFlags {
    byteSwapped,
    scalarCount,
    beginConfigurationFlag,
    movedFlag,
    setMainFlag,
    setModeFlag,
    addFlag,
    removeFlag,
    enabledFlag,
    disabledFlag,
    mirrorFlag,
    unMirrorFlag,
    desktopShapeChangedFlag,
  }

  export enum CGEventFilterMask {
    byteSwapped,
    scalarCount,
    permitLocalMouseEvents,
    permitLocalKeyboardEvents,
    permitSystemDefinedEvents,
  }

  export enum CGEventFlags {
    maskAlphaShift,
    maskShift,
    maskControl,
    maskAlternate,
    maskCommand,
    maskHelp,
    maskSecondaryFn,
    maskNumericPad,
    maskNonCoalesced,
  }

  export enum CGGradientDrawingOptions {
    byteSwapped,
    scalarCount,
    drawsBeforeStartLocation,
    drawsAfterEndLocation,
  }

  export enum CGPDFAccessPermissions {
    byteSwapped,
    scalarCount,
    allowsLowQualityPrinting,
    allowsHighQualityPrinting,
    allowsDocumentChanges,
    allowsDocumentAssembly,
    allowsContentCopying,
    allowsContentAccessibility,
    allowsCommenting,
    allowsFormFieldEntry,
  }

  export enum CGScreenUpdateOperation {
    byteSwapped,
    scalarCount,
    refresh,
    move,
    reducedDirtyRectangleCount,
  }

  export enum CGWindowImageOption {
    byteSwapped,
    scalarCount,
    boundsIgnoreFraming,
    shouldBeOpaque,
    onlyShadows,
    bestResolution,
    nominalResolution,
  }

  export enum CGWindowListOption {
    magnitude,
    byteSwapped,
    scalarCount,
    optionAll,
    optionOnScreenOnly,
    optionOnScreenAboveWindow,
    optionOnScreenBelowWindow,
    optionIncludingWindow,
    excludeDesktopElements,
  }

  export enum CKContainer_Application_Permissions {
    userDiscoverability,
  }

  export enum CMSampleBuffer {
    audioBufferListAssure16ByteAlignment,
  }

  export enum CMTimeFlags {
    magnitude,
    byteSwapped,
    scalarCount,
    valid,
    hasBeenRounded,
    positiveInfinity,
    negativeInfinity,
    indefinite,
    impliedValueFlagsMask,
  }

  export enum Character {
    request,
    session,
    ascii,
    nextstep,
    japaneseEUC,
    utf8,
    isoLatin1,
    symbol,
    nonLossyASCII,
    shiftJIS,
    isoLatin2,
    unicode,
    windowsCP1251,
    windowsCP1252,
    windowsCP1253,
    windowsCP1254,
    windowsCP1250,
    iso2022JP,
    macOSRoman,
    utf16,
    utf16BigEndian,
    utf16LittleEndian,
    utf32,
    utf32BigEndian,
    utf32LittleEndian,
  }

  export enum Data {
    video,
    audio,
    muxed,
    text,
    closedCaption,
    subtitle,
    timeCode,
    metadata,
    linearPCM,
    ac3,
    iec60958AC3,
    appleIMA4,
    mpeg4AAC,
    mpeg4CELP,
    mpeg4HVXC,
    mpeg4TwinVQ,
    mace3,
    mace6,
    uLaw,
    aLaw,
    qDesign,
    qDesign2,
    qualcomm,
    mpegLayer1,
    mpegLayer2,
    mpegLayer3,
    midiStream,
    parameterValueStream,
    appleLossless,
    mpeg4AAC_HE,
    mpeg4AAC_LD,
    mpeg4AAC_ELD,
    mpeg4AAC_ELD_SBR,
    mpeg4AAC_ELD_V2,
    mpeg4AAC_HE_V2,
    mpeg4AAC_Spatial,
    mpegD_USAC,
    amr,
    amr_WB,
    audible,
    iLBC,
    dviIntelIMA,
    microsoftGSM,
    aes3,
    enhancedAC3,
    flac,
    opus,
    aacLCProtected,
    aacAudibleProtected,
    pixelFormat_32ARGB,
    pixelFormat_32BGRA,
    pixelFormat_24RGB,
    pixelFormat_16BE555,
    pixelFormat_16BE565,
    pixelFormat_16LE555,
    pixelFormat_16LE565,
    pixelFormat_16LE5551,
    pixelFormat_422YpCbCr8,
    pixelFormat_422YpCbCr8_yuvs,
    pixelFormat_444YpCbCr8,
    pixelFormat_4444YpCbCrA8,
    pixelFormat_422YpCbCr16,
    pixelFormat_422YpCbCr10,
    pixelFormat_444YpCbCr10,
    pixelFormat_8IndexedGray_WhiteIsZero,
    animation,
    cinepak,
    jpeg,
    jpeg_OpenDML,
    sorensonVideo,
    sorensonVideo3,
    h263,
    h264,
    hevc,
    hevcWithAlpha,
    mpeg4Video,
    mpeg2Video,
    mpeg1Video,
    dvcNTSC,
    dvcPAL,
    dvcProPAL,
    dvcPro50NTSC,
    dvcPro50PAL,
    dvcPROHD720p60,
    dvcPROHD720p50,
    dvcPROHD1080i60,
    dvcPROHD1080i50,
    dvcPROHD1080p30,
    dvcPROHD1080p25,
    proRes4444XQ,
    proRes4444,
    proRes422HQ,
    proRes422,
    proRes422LT,
    proRes422Proxy,
    proResRAW,
    proResRAWHQ,
    mpeg1System,
    mpeg2Transport,
    mpeg2Program,
    dv,
    cea608,
    cea708,
    atsc,
    qt,
    mobile3GPP,
    webVTT,
    timeCode32,
    timeCode64,
    counter32,
    counter64,
    icy,
    id3,
    boxed,
    emsg,
    streamBasicDescription,
    magicCookie,
    channelLayout,
    extensions,
    all,
    startIndex,
    endIndex,
  }

  export enum Int {
    byteSwapped,
    scalarCount,
  }

  export enum NSBinarySearchingOptions {
    firstEqual,
    lastEqual,
    insertionIndex,
  }

  export enum NSDirectionalRectEdge {
    top,
    leading,
    bottom,
    trailing,
    all,
  }

  export enum NSDragOperation {
    copy,
    link,
    generic,
    private,
    move,
    delete,
    every,
    all_Obsolete,
    all,
  }

  export enum NSDraggingItemEnumerationOptions {
    concurrent,
    clearNonenumeratedImages,
  }

  export enum NSEnumerationOptions {
    concurrent,
    reverse,
  }

  export enum NSFetchRequestResultType {
    managedObjectResultType,
    managedObjectIDResultType,
    dictionaryResultType,
    countResultType,
  }

  export enum NSFontCollectionOptions {
    applicationOnlyMask,
  }

  export enum NSFontTraitMask {
    byteSwapped,
    scalarCount,
    italicFontMask,
    boldFontMask,
    unboldFontMask,
    nonStandardCharacterSetFontMask,
    narrowFontMask,
    expandedFontMask,
    condensedFontMask,
    smallCapsFontMask,
    posterFontMask,
    compressedFontMask,
    fixedPitchFontMask,
    unitalicFontMask,
  }

  export enum NSItemProviderFileOptions {
    openInPlace,
  }

  export enum NSKeyValueObservingOptions {
    new,
    old,
    initial,
    prior,
  }

  export enum NSOrderedCollectionDifferenceCalculationOptions {
    magnitude,
    timeInterval,
    hashValue,
    omitInsertedObjects,
    omitRemovedObjects,
    inferMoves,
  }

  export enum NSPersistentCloudKitContainerSchemaInitializationOptions {
    dryRun,
    printSchema,
  }

  export enum NSSnapshotEventType {
    undoInsertion,
    undoDeletion,
    undoUpdate,
    rollback,
    refresh,
    mergePolicy,
  }

  export enum NSSortOptions {
    magnitude,
    byteSwapped,
    scalarCount,
    concurrent,
    stable,
  }

  export enum NSSpringLoadingOptions {
    disabled,
    enabled,
    continuousActivation,
    noHover,
  }

  export enum NSTextStorageEditActions {
    editedAttributes,
    editedCharacters,
  }

  export enum NSTypesetterControlCharacterAction {
    magnitude,
    byteSwapped,
    scalarCount,
    zeroAdvancementAction,
    whitespaceAction,
    horizontalTabAction,
    lineBreakAction,
    paragraphBreakAction,
    containerBreakAction,
  }

  export enum NSUnderlineStyle {
    single,
    thick,
    double,
    patternDot,
    patternDash,
    patternDashDot,
    patternDashDotDot,
    byWord,
  }

  export enum UInt {
    magnitude,
    byteSwapped,
    scalarCount,
    hashValue,
    boolValue,
    ptr,
    bitWidth,
    leadingZeroBitCount,
    trailingZeroBitCount,
    nonzeroBitCount,
    count,
    startIndex,
    endIndex,
    indices,
    words,
  }

  export enum UInt8 {
    regions,
    startIndex,
    endIndex,
    indices,
    hashValue,
    autoupdatingCurrent,
    current,
  }

  export enum AVAssetReferenceRestrictions {
    ForbidNone = 0,
    ForbidRemoteReferenceToLocal = 1,
    ForbidLocalReferenceToRemote = 2,
    ForbidCrossSiteReference = 4,
    ForbidLocalReferenceToLocal = 8,
    ForbidAll = 65535,
    DefaultPolicy = 2
  }

  export enum AVAudio3DMixingPointSourceInHeadMode {
    Mono = 0,
    Bypass = 1
  }

  export enum AVAudio3DMixingRenderingAlgorithm {
    EqualPowerPanning = 0,
    SphericalHead = 1,
    HRTF = 2,
    SoundField = 3,
    StereoPassThrough = 5,
    HRTFHQ = 6,
    Auto = 7
  }

  export enum AVAudio3DMixingSourceMode {
    SpatializeIfMono = 0,
    Bypass = 1,
    PointSource = 2,
    AmbienceBed = 3
  }

  export enum AVAudioCommonFormat {
    OtherFormat = 0,
    PCMFormatFloat32 = 1,
    PCMFormatFloat64 = 2,
    PCMFormatInt16 = 3,
    PCMFormatInt32 = 4
  }

  export enum AVAudioConverterInputStatus {
    HaveData = 0,
    NoDataNow = 1,
    EndOfStream = 2
  }

  export enum AVAudioConverterOutputStatus {
    HaveData = 0,
    InputRanDry = 1,
    EndOfStream = 2,
    Error = 3
  }

  export enum AVAudioConverterPrimeMethod {
    Pre = 0,
    Normal = 1,
    None = 2
  }

  export enum AVAudioEngineManualRenderingError {
    InvalidMode = -80800,
    Initialized = -80801,
    NotRunning = -80802
  }

  export enum AVAudioEngineManualRenderingMode {
    Offline = 0,
    Realtime = 1
  }

  export enum AVAudioEngineManualRenderingStatus {
    Error = -1,
    Success = 0,
    InsufficientDataFromInputNode = 1,
    CannotDoInCurrentContext = 2
  }

  export enum AVAudioEnvironmentDistanceAttenuationModel {
    Exponential = 1,
    Inverse = 2,
    Linear = 3
  }

  export enum AVAudioEnvironmentOutputType {
    Auto = 0,
    Headphones = 1,
    BuiltInSpeakers = 2,
    ExternalSpeakers = 3
  }

  export enum AVAudioPlayerNodeBufferOptions {
    Loops = 1,
    Interrupts = 2,
    InterruptsAtLoop = 4
  }

  export enum AVAudioPlayerNodeCompletionCallbackType {
    DataConsumed = 0,
    DataRendered = 1,
    DataPlayedBack = 2
  }

  export enum AVAudioQuality {
    Min = 0,
    Low = 32,
    Medium = 64,
    High = 96,
    Max = 127
  }

  export enum AVAudioSessionActivationOptions {
    None = 0
  }

  export enum AVAudioUnitDistortionPreset {
    DrumsBitBrush = 0,
    DrumsBufferBeats = 1,
    DrumsLoFi = 2,
    MultiBrokenSpeaker = 3,
    MultiCellphoneConcert = 4,
    MultiDecimated1 = 5,
    MultiDecimated2 = 6,
    MultiDecimated3 = 7,
    MultiDecimated4 = 8,
    MultiDistortedFunk = 9,
    MultiDistortedCubed = 10,
    MultiDistortedSquared = 11,
    MultiEcho1 = 12,
    MultiEcho2 = 13,
    MultiEchoTight1 = 14,
    MultiEchoTight2 = 15,
    MultiEverythingIsBroken = 16,
    SpeechAlienChatter = 17,
    SpeechCosmicInterference = 18,
    SpeechGoldenPi = 19,
    SpeechRadioTower = 20,
    SpeechWaves = 21
  }

  export enum AVAudioUnitEQFilterType {
    Parametric = 0,
    LowPass = 1,
    HighPass = 2,
    ResonantLowPass = 3,
    ResonantHighPass = 4,
    BandPass = 5,
    BandStop = 6,
    LowShelf = 7,
    HighShelf = 8,
    ResonantLowShelf = 9,
    ResonantHighShelf = 10
  }

  export enum AVAudioUnitReverbPreset {
    SmallRoom = 0,
    MediumRoom = 1,
    LargeRoom = 2,
    MediumHall = 3,
    LargeHall = 4,
    Plate = 5,
    MediumChamber = 6,
    LargeChamber = 7,
    Cathedral = 8,
    LargeRoom2 = 9,
    MediumHall2 = 10,
    MediumHall3 = 11,
    LargeHall2 = 12
  }

  export enum AVAuthorizationStatus {
    NotDetermined = 0,
    Restricted = 1,
    Denied = 2,
    Authorized = 3
  }

  export enum AVCaptureColorSpace {
    sRGB = 0,
    P3_D65 = 1
  }

  export enum AVCaptureVideoOrientation {
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeRight = 3,
    LandscapeLeft = 4
  }

  export enum AVContentAuthorizationStatus {
    Unknown = 0,
    Completed = 1,
    Cancelled = 2,
    TimedOut = 3,
    Busy = 4,
    NotAvailable = 5,
    NotPossible = 6
  }

  export enum AVError {
    Unknown = -11800,
    OutOfMemory = -11801,
    SessionNotRunning = -11803,
    DeviceAlreadyUsedByAnotherSession = -11804,
    NoDataCaptured = -11805,
    SessionConfigurationChanged = -11806,
    DiskFull = -11807,
    DeviceWasDisconnected = -11808,
    MediaChanged = -11809,
    MaximumDurationReached = -11810,
    MaximumFileSizeReached = -11811,
    MediaDiscontinuity = -11812,
    MaximumNumberOfSamplesForFileFormatReached = -11813,
    DeviceNotConnected = -11814,
    DeviceInUseByAnotherApplication = -11815,
    DeviceLockedForConfigurationByAnotherProcess = -11817,
    ExportFailed = -11820,
    DecodeFailed = -11821,
    InvalidSourceMedia = -11822,
    FileAlreadyExists = -11823,
    CompositionTrackSegmentsNotContiguous = -11824,
    InvalidCompositionTrackSegmentDuration = -11825,
    InvalidCompositionTrackSegmentSourceStartTime = -11826,
    InvalidCompositionTrackSegmentSourceDuration = -11827,
    FileFormatNotRecognized = -11828,
    FileFailedToParse = -11829,
    MaximumStillImageCaptureRequestsExceeded = -11830,
    ContentIsProtected = -11831,
    NoImageAtTime = -11832,
    DecoderNotFound = -11833,
    EncoderNotFound = -11834,
    ContentIsNotAuthorized = -11835,
    ApplicationIsNotAuthorized = -11836,
    OperationNotSupportedForAsset = -11838,
    DecoderTemporarilyUnavailable = -11839,
    EncoderTemporarilyUnavailable = -11840,
    InvalidVideoComposition = -11841,
    ReferenceForbiddenByReferencePolicy = -11842,
    InvalidOutputURLPathExtension = -11843,
    ScreenCaptureFailed = -11844,
    DisplayWasDisabled = -11845,
    TorchLevelUnavailable = -11846,
    IncompatibleAsset = -11848,
    FailedToLoadMediaData = -11849,
    ServerIncorrectlyConfigured = -11850,
    ApplicationIsNotAuthorizedToUseDevice = -11852,
    FailedToParse = -11853,
    FileTypeDoesNotSupportSampleReferences = -11854,
    UndecodableMediaData = -11855,
    AirPlayControllerRequiresInternet = -11856,
    AirPlayReceiverRequiresInternet = -11857,
    VideoCompositorFailed = -11858,
    CreateContentKeyRequestFailed = -11860,
    UnsupportedOutputSettings = -11861,
    OperationNotAllowed = -11862,
    ContentIsUnavailable = -11863,
    FormatUnsupported = -11864,
    MalformedDepth = -11865,
    ContentNotUpdated = -11866,
    NoLongerPlayable = -11867,
    NoCompatibleAlternatesForExternalDisplay = -11868,
    NoSourceTrack = -11869,
    ExternalPlaybackNotSupportedForAsset = -11870,
    OperationNotSupportedForPreset = -11871,
    SessionHardwareCostOverage = -11872,
    UnsupportedDeviceActiveFormat = -11873
  }

  export enum AVKeyValueStatus {
    Unknown = 0,
    Loading = 1,
    Loaded = 2,
    Failed = 3,
    Cancelled = 4
  }

  export enum AVMovieWritingOptions {
    AddMovieHeaderToDestination = 0,
    TruncateDestinationToMovieHeaderOnly = 1
  }

  export enum AVMusicSequenceLoadOptions {
    SMF_PreserveTracks = 0,
    SMF_ChannelsToTracks = 1
  }

  export enum AVMusicTrackLoopCount {
    Forever = -1
  }

  export enum AVQueuedSampleBufferRenderingStatus {
    Unknown = 0,
    Rendering = 1,
    Failed = 2
  }

  export enum AVSpeechBoundary {
    Immediate = 0,
    Word = 1
  }

  export enum AVSpeechSynthesisVoiceGender {
    Unspecified = 0,
    Male = 1,
    Female = 2
  }

  export enum AVSpeechSynthesisVoiceQuality {
    Default = 1,
    Enhanced = 2
  }

  export enum AVVideoFieldMode {
    Both = 0,
    TopOnly = 1,
    BottomOnly = 2,
    Deinterlace = 3
  }

  export enum AVCaptureViewControlsStyle {
    Inline = 0,
    Floating = 1,
    InlineDeviceSelection = 2,
    Default = 0
  }

  export enum AVPlayerViewControlsStyle {
    None = 0,
    Inline = 1,
    Floating = 2,
    Minimal = 3,
    Default = 1
  }

  export enum AVPlayerViewTrimResult {
    OKButton = 0,
    CancelButton = 1
  }

  export enum AVRoutePickerViewButtonState {
    Normal = 0,
    NormalHighlighted = 1,
    Active = 2,
    ActiveHighlighted = 3
  }

  export enum NSAccessibilityPriorityLevel {
    Low = 10,
    Medium = 50,
    High = 90
  }

  export enum NSAnimationEffect {
    DisappearingItemDefault = 0,
    Poof = 10
  }

  export enum NSBorderType {
    NoBorder = 0,
    LineBorder = 1,
    BezelBorder = 2,
    GrooveBorder = 3
  }

  export enum NSCharacterCollection {
    IdentityMappingCharacterCollection = 0,
    AdobeCNS1CharacterCollection = 1,
    AdobeGB1CharacterCollection = 2,
    AdobeJapan1CharacterCollection = 3,
    AdobeJapan2CharacterCollection = 4,
    AdobeKorea1CharacterCollection = 5
  }

  export enum NSCollectionElementCategory {
    Item = 0,
    SupplementaryView = 1,
    DecorationView = 2,
    InterItemGap = 3
  }

  export enum NSCollectionLayoutSectionOrthogonalScrollingBehavior {
    None = 0,
    Continuous = 1,
    ContinuousGroupLeadingBoundary = 2,
    Paging = 3,
    GroupPaging = 4,
    GroupPagingCentered = 5
  }

  export enum NSColorRenderingIntent {
    Default = 0,
    AbsoluteColorimetric = 1,
    RelativeColorimetric = 2,
    Perceptual = 3,
    Saturation = 4
  }

  export enum NSCompositingOperation {
    Clear = 0,
    Copy = 1,
    SourceOver = 2,
    SourceIn = 3,
    SourceOut = 4,
    SourceAtop = 5,
    DestinationOver = 6,
    DestinationIn = 7,
    DestinationOut = 8,
    DestinationAtop = 9,
    XOR = 10,
    PlusDarker = 11,
    Highlight = 12,
    PlusLighter = 13,
    Multiply = 14,
    Screen = 15,
    Overlay = 16,
    Darken = 17,
    Lighten = 18,
    ColorDodge = 19,
    ColorBurn = 20,
    SoftLight = 21,
    HardLight = 22,
    Difference = 23,
    Exclusion = 24,
    Hue = 25,
    Saturation = 26,
    Color = 27,
    Luminosity = 28
  }

  export enum NSControlTint {
    DefaultControlTint = 0,
    BlueControlTint = 1,
    GraphiteControlTint = 6,
    ClearControlTint = 7
  }

  export enum NSDirectionalRectEdge {
    None = 0,
    Top = 1,
    Leading = 2,
    Bottom = 4,
    Trailing = 8,
    All = 15
  }

  export enum NSDisplayGamut {
    SRGB = 1,
    P3 = 2
  }

  export enum NSDragOperation {
    None = 0,
    Copy = 1,
    Link = 2,
    Generic = 4,
    Private = 8,
    Move = 16,
    Delete = 32,
    Every = -1,
    All_Obsolete = 15,
    All = 15
  }

  export enum NSDraggingContext {
    OutsideApplication = 0,
    WithinApplication = 1
  }

  export enum NSDraggingFormation {
    Default = 0,
    None = 1,
    Pile = 2,
    List = 3,
    Stack = 4
  }

  export enum NSDraggingItemEnumerationOptions {
    Concurrent = 1,
    ClearNonenumeratedImages = 65536
  }

  export enum NSFindPanelAction {
    ShowFindPanel = 1,
    Next = 2,
    Previous = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetFindString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10
  }

  export enum NSFindPanelSubstringMatchType {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3
  }

  export enum NSFocusRingPlacement {
    Only = 0,
    Below = 1,
    Above = 2
  }

  export enum NSFocusRingType {
    Default = 0,
    None = 1,
    Exterior = 2
  }

  export enum NSFontAction {
    NoFontChangeAction = 0,
    ViaPanelFontAction = 1,
    AddTraitFontAction = 2,
    SizeUpFontAction = 3,
    SizeDownFontAction = 4,
    HeavierFontAction = 5,
    LighterFontAction = 6,
    RemoveTraitFontAction = 7
  }

  export enum NSFontCollectionOptions {
    ApplicationOnlyMask = 1
  }

  export enum NSFontRenderingMode {
    DefaultRenderingMode = 0,
    AntialiasedRenderingMode = 1,
    IntegerAdvancementsRenderingMode = 2,
    AntialiasedIntegerAdvancementsRenderingMode = 3
  }

  export enum NSFontTraitMask {
    ItalicFontMask = 1,
    BoldFontMask = 2,
    UnboldFontMask = 4,
    NonStandardCharacterSetFontMask = 8,
    NarrowFontMask = 16,
    ExpandedFontMask = 32,
    CondensedFontMask = 64,
    SmallCapsFontMask = 128,
    PosterFontMask = 256,
    CompressedFontMask = 512,
    FixedPitchFontMask = 1024,
    UnitalicFontMask = 16777216
  }

  export enum NSImageAlignment {
    Center = 0,
    Top = 1,
    TopLeft = 2,
    TopRight = 3,
    Left = 4,
    Bottom = 5,
    BottomLeft = 6,
    BottomRight = 7,
    Right = 8
  }

  export enum NSImageInterpolation {
    Default = 0,
    None = 1,
    Low = 2,
    Medium = 4,
    High = 3
  }

  export enum NSImageScaling {
    ImageScaleProportionallyDown = 0,
    ImageScaleAxesIndependently = 1,
    ImageScaleNone = 2,
    ImageScaleProportionallyUpOrDown = 3,
    ScaleProportionally = 0,
    ScaleToFit = 1,
    ScaleNone = 2
  }

  export enum NSLineBreakMode {
    ByWordWrapping = 0,
    ByCharWrapping = 1,
    ByClipping = 2,
    ByTruncatingHead = 3,
    ByTruncatingTail = 4,
    ByTruncatingMiddle = 5
  }

  export enum NSLineMovementDirection {
    DoesntMove = 0,
    MovesLeft = 1,
    MovesRight = 2,
    MovesDown = 3,
    MovesUp = 4
  }

  export enum NSLineSweepDirection {
    Left = 0,
    Right = 1,
    Down = 2,
    Up = 3
  }

  export enum NSRectAlignment {
    None = 0,
    Top = 1,
    TopLeading = 2,
    Leading = 3,
    BottomLeading = 4,
    Bottom = 5,
    BottomTrailing = 6,
    Trailing = 7,
    TopTrailing = 8
  }

  export enum NSSelectionAffinity {
    Upstream = 0,
    Downstream = 1
  }

  export enum NSSelectionGranularity {
    ByCharacter = 0,
    ByWord = 1,
    ByParagraph = 2
  }

  export enum NSSpringLoadingHighlight {
    None = 0,
    Standard = 1,
    Emphasized = 2
  }

  export enum NSSpringLoadingOptions {
    Disabled = 0,
    Enabled = 1,
    ContinuousActivation = 2,
    NoHover = 8
  }

  export enum NSTextAlignment {
    Left = 0,
    Right = 1,
    Center = 2,
    Justified = 3,
    Natural = 4
  }

  export enum NSTextInputTraitType {
    Default = 0,
    No = 1,
    Yes = 2
  }

  export enum NSTextMovement {
    Return = 16,
    Tab = 17,
    Backtab = 18,
    Left = 19,
    Right = 20,
    Up = 21,
    Down = 22,
    Cancel = 23,
    Other = 0
  }

  export enum NSTextScalingType {
    Standard = 0,
    iOS = 1
  }

  export enum NSTextStorageEditActions {
    EditedAttributes = 1,
    EditedCharacters = 2
  }

  export enum NSTypesetterControlCharacterAction {
    ZeroAdvancementAction = 1,
    WhitespaceAction = 2,
    HorizontalTabAction = 4,
    LineBreakAction = 8,
    ParagraphBreakAction = 16,
    ContainerBreakAction = 32
  }

  export enum NSUnderlineStyle {
    None = 0,
    Single = 1,
    Thick = 2,
    Double = 9,
    PatternSolid = 0,
    PatternDot = 256,
    PatternDash = 512,
    PatternDashDot = 768,
    PatternDashDotDot = 1024,
    ByWord = 32768
  }

  export enum NSUserInterfaceLayoutDirection {
    LeftToRight = 0,
    RightToLeft = 1
  }

  export enum NSUserInterfaceLayoutOrientation {
    Horizontal = 0,
    Vertical = 1
  }

  export enum NSWritingDirection {
    Natural = -1,
    LeftToRight = 0,
    RightToLeft = 1
  }

  export enum NSWritingDirectionFormatType {
    Embedding = 0,
    Override = 2
  }

  export enum NSAttributeType {
    UndefinedAttributeType = 0,
    Integer16AttributeType = 100,
    Integer32AttributeType = 200,
    Integer64AttributeType = 300,
    DecimalAttributeType = 400,
    DoubleAttributeType = 500,
    FloatAttributeType = 600,
    StringAttributeType = 700,
    BooleanAttributeType = 800,
    DateAttributeType = 900,
    BinaryDataAttributeType = 1000,
    UUIDAttributeType = 1100,
    URIAttributeType = 1200,
    TransformableAttributeType = 1800,
    ObjectIDAttributeType = 2000
  }

  export enum NSBatchDeleteRequestResultType {
    ResultTypeStatusOnly = 0,
    ResultTypeObjectIDs = 1,
    ResultTypeCount = 2
  }

  export enum NSBatchInsertRequestResultType {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2
  }

  export enum NSBatchUpdateRequestResultType {
    StatusOnlyResultType = 0,
    UpdatedObjectIDsResultType = 1,
    UpdatedObjectsCountResultType = 2
  }

  export enum NSDeleteRule {
    NoActionDeleteRule = 0,
    NullifyDeleteRule = 1,
    CascadeDeleteRule = 2,
    DenyDeleteRule = 3
  }

  export enum NSEntityMappingType {
    UndefinedEntityMappingType = 0,
    CustomEntityMappingType = 1,
    AddEntityMappingType = 2,
    RemoveEntityMappingType = 3,
    CopyEntityMappingType = 4,
    TransformEntityMappingType = 5
  }

  export enum NSFetchIndexElementType {
    Binary = 0,
    RTree = 1
  }

  export enum NSFetchRequestResultType {
    ManagedObjectResultType = 0,
    ManagedObjectIDResultType = 1,
    DictionaryResultType = 2,
    CountResultType = 4
  }

  export enum NSFetchedResultsChangeType {
    Insert = 1,
    Delete = 2,
    Move = 3,
    Update = 4
  }

  export enum NSManagedObjectContextConcurrencyType {
    ConfinementConcurrencyType = 0,
    PrivateQueueConcurrencyType = 1,
    MainQueueConcurrencyType = 2
  }

  export enum NSMergePolicyType {
    ErrorMergePolicyType = 0,
    MergeByPropertyStoreTrumpMergePolicyType = 1,
    MergeByPropertyObjectTrumpMergePolicyType = 2,
    OverwriteMergePolicyType = 3,
    RollbackMergePolicyType = 4
  }

  export enum NSPersistentCloudKitContainerSchemaInitializationOptions {
    None = 0,
    DryRun = 2,
    PrintSchema = 4
  }

  export enum NSPersistentHistoryChangeType {
    Insert = 0,
    Update = 1,
    Delete = 2
  }

  export enum NSPersistentHistoryResultType {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2,
    TransactionsOnly = 3,
    ChangesOnly = 4,
    TransactionsAndChanges = 5
  }

  export enum NSPersistentStoreRequestType {
    FetchRequestType = 1,
    SaveRequestType = 2,
    BatchInsertRequestType = 5,
    BatchUpdateRequestType = 6,
    BatchDeleteRequestType = 7
  }

  export enum NSSnapshotEventType {
    UndoInsertion = 2,
    UndoDeletion = 4,
    UndoUpdate = 8,
    Rollback = 16,
    Refresh = 32,
    MergePolicy = 64
  }

  export enum CFCalendarUnit {
    kCFCalendarUnitEra = 2,
    kCFCalendarUnitYear = 4,
    kCFCalendarUnitMonth = 8,
    kCFCalendarUnitDay = 16,
    kCFCalendarUnitHour = 32,
    kCFCalendarUnitMinute = 64,
    kCFCalendarUnitSecond = 128,
    kCFCalendarUnitWeek = 256,
    kCFCalendarUnitWeekday = 512,
    kCFCalendarUnitWeekdayOrdinal = 1024,
    kCFCalendarUnitQuarter = 2048,
    kCFCalendarUnitWeekOfMonth = 4096,
    kCFCalendarUnitWeekOfYear = 8192,
    kCFCalendarUnitYearForWeekOfYear = 16384
  }

  export enum CFCharacterSetPredefinedSet {
    kCFCharacterSetControl = 1,
    kCFCharacterSetWhitespace = 2,
    kCFCharacterSetWhitespaceAndNewline = 3,
    kCFCharacterSetDecimalDigit = 4,
    kCFCharacterSetLetter = 5,
    kCFCharacterSetLowercaseLetter = 6,
    kCFCharacterSetUppercaseLetter = 7,
    kCFCharacterSetNonBase = 8,
    kCFCharacterSetDecomposable = 9,
    kCFCharacterSetAlphaNumeric = 10,
    kCFCharacterSetPunctuation = 11,
    kCFCharacterSetCapitalizedLetter = 13,
    kCFCharacterSetSymbol = 14,
    kCFCharacterSetNewline = 15,
    kCFCharacterSetIllegal = 12
  }

  export enum CFComparisonResult {
    kCFCompareLessThan = -1,
    kCFCompareEqualTo = 0,
    kCFCompareGreaterThan = 1
  }

  export enum CFDataSearchFlags {
    kCFDataSearchBackwards = 1,
    kCFDataSearchAnchored = 2
  }

  export enum CFDateFormatterStyle {
    kCFDateFormatterNoStyle = 0,
    kCFDateFormatterShortStyle = 1,
    kCFDateFormatterMediumStyle = 2,
    kCFDateFormatterLongStyle = 3,
    kCFDateFormatterFullStyle = 4
  }

  export enum CFFileSecurityClearOptions {
    kCFFileSecurityClearOwner = 1,
    kCFFileSecurityClearGroup = 2,
    kCFFileSecurityClearMode = 4,
    kCFFileSecurityClearOwnerUUID = 8,
    kCFFileSecurityClearGroupUUID = 16,
    kCFFileSecurityClearAccessControlList = 32
  }

  export enum CFGregorianUnitFlags {
    kCFGregorianUnitsYears = 1,
    kCFGregorianUnitsMonths = 2,
    kCFGregorianUnitsDays = 4,
    kCFGregorianUnitsHours = 8,
    kCFGregorianUnitsMinutes = 16,
    kCFGregorianUnitsSeconds = 32,
    kCFGregorianAllUnits = 16777215
  }

  export enum CFISO8601DateFormatOptions {
    kCFISO8601DateFormatWithYear = 1,
    kCFISO8601DateFormatWithMonth = 2,
    kCFISO8601DateFormatWithWeekOfYear = 4,
    kCFISO8601DateFormatWithDay = 16,
    kCFISO8601DateFormatWithTime = 32,
    kCFISO8601DateFormatWithTimeZone = 64,
    kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128,
    kCFISO8601DateFormatWithDashSeparatorInDate = 256,
    kCFISO8601DateFormatWithColonSeparatorInTime = 512,
    kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024,
    kCFISO8601DateFormatWithFractionalSeconds = 2048,
    kCFISO8601DateFormatWithFullDate = 275,
    kCFISO8601DateFormatWithFullTime = 1632,
    kCFISO8601DateFormatWithInternetDateTime = 1907
  }

  export enum CFLocaleLanguageDirection {
    kCFLocaleLanguageDirectionUnknown = 0,
    kCFLocaleLanguageDirectionLeftToRight = 1,
    kCFLocaleLanguageDirectionRightToLeft = 2,
    kCFLocaleLanguageDirectionTopToBottom = 3,
    kCFLocaleLanguageDirectionBottomToTop = 4
  }

  export enum CFNotificationSuspensionBehavior {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4
  }

  export enum CFNumberFormatterOptionFlags {
    kCFNumberFormatterParseIntegersOnly = 1
  }

  export enum CFNumberFormatterPadPosition {
    kCFNumberFormatterPadBeforePrefix = 0,
    kCFNumberFormatterPadAfterPrefix = 1,
    kCFNumberFormatterPadBeforeSuffix = 2,
    kCFNumberFormatterPadAfterSuffix = 3
  }

  export enum CFNumberFormatterRoundingMode {
    kCFNumberFormatterRoundCeiling = 0,
    kCFNumberFormatterRoundFloor = 1,
    kCFNumberFormatterRoundDown = 2,
    kCFNumberFormatterRoundUp = 3,
    kCFNumberFormatterRoundHalfEven = 4,
    kCFNumberFormatterRoundHalfDown = 5,
    kCFNumberFormatterRoundHalfUp = 6
  }

  export enum CFNumberFormatterStyle {
    kCFNumberFormatterNoStyle = 0,
    kCFNumberFormatterDecimalStyle = 1,
    kCFNumberFormatterCurrencyStyle = 2,
    kCFNumberFormatterPercentStyle = 3,
    kCFNumberFormatterScientificStyle = 4,
    kCFNumberFormatterSpellOutStyle = 5,
    kCFNumberFormatterOrdinalStyle = 6,
    kCFNumberFormatterCurrencyISOCodeStyle = 8,
    kCFNumberFormatterCurrencyPluralStyle = 9,
    kCFNumberFormatterCurrencyAccountingStyle = 10
  }

  export enum CFNumberType {
    kCFNumberSInt8Type = 1,
    kCFNumberSInt16Type = 2,
    kCFNumberSInt32Type = 3,
    kCFNumberSInt64Type = 4,
    kCFNumberFloat32Type = 5,
    kCFNumberFloat64Type = 6,
    kCFNumberCharType = 7,
    kCFNumberShortType = 8,
    kCFNumberIntType = 9,
    kCFNumberLongType = 10,
    kCFNumberLongLongType = 11,
    kCFNumberFloatType = 12,
    kCFNumberDoubleType = 13,
    kCFNumberCFIndexType = 14,
    kCFNumberNSIntegerType = 15,
    kCFNumberCGFloatType = 16,
    kCFNumberMaxType = 16
  }

  export enum CFPropertyListFormat {
    kCFPropertyListOpenStepFormat = 1,
    kCFPropertyListXMLFormat_v1_0 = 100,
    kCFPropertyListBinaryFormat_v1_0 = 200
  }

  export enum CFPropertyListMutabilityOptions {
    kCFPropertyListImmutable = 0,
    kCFPropertyListMutableContainers = 1,
    kCFPropertyListMutableContainersAndLeaves = 2
  }

  export enum CFRunLoopActivity {
    kCFRunLoopEntry = 1,
    kCFRunLoopBeforeTimers = 2,
    kCFRunLoopBeforeSources = 4,
    kCFRunLoopBeforeWaiting = 32,
    kCFRunLoopAfterWaiting = 64,
    kCFRunLoopExit = 128,
    kCFRunLoopAllActivities = 268435455
  }

  export enum CFRunLoopRunResult {
    kCFRunLoopRunFinished = 1,
    kCFRunLoopRunStopped = 2,
    kCFRunLoopRunTimedOut = 3,
    kCFRunLoopRunHandledSource = 4
  }

  export enum CFSocketCallBackType {
    kCFSocketNoCallBack = 0,
    kCFSocketReadCallBack = 1,
    kCFSocketAcceptCallBack = 2,
    kCFSocketDataCallBack = 3,
    kCFSocketConnectCallBack = 4,
    kCFSocketWriteCallBack = 8
  }

  export enum CFSocketError {
    kCFSocketSuccess = 0,
    kCFSocketError = -1,
    kCFSocketTimeout = -2
  }

  export enum CFStreamErrorDomain {
    kCFStreamErrorDomainCustom = -1,
    kCFStreamErrorDomainPOSIX = 1,
    kCFStreamErrorDomainMacOSStatus = 2
  }

  export enum CFStreamEventType {
    kCFStreamEventNone = 0,
    kCFStreamEventOpenCompleted = 1,
    kCFStreamEventHasBytesAvailable = 2,
    kCFStreamEventCanAcceptBytes = 4,
    kCFStreamEventErrorOccurred = 8,
    kCFStreamEventEndEncountered = 16
  }

  export enum CFStreamStatus {
    kCFStreamStatusNotOpen = 0,
    kCFStreamStatusOpening = 1,
    kCFStreamStatusOpen = 2,
    kCFStreamStatusReading = 3,
    kCFStreamStatusWriting = 4,
    kCFStreamStatusAtEnd = 5,
    kCFStreamStatusClosed = 6,
    kCFStreamStatusError = 7
  }

  export enum CFStringBuiltInEncodings {
    kCFStringEncodingMacRoman = 0,
    kCFStringEncodingWindowsLatin1 = 1280,
    kCFStringEncodingISOLatin1 = 513,
    kCFStringEncodingNextStepLatin = 2817,
    kCFStringEncodingASCII = 1536,
    kCFStringEncodingUnicode = 256,
    kCFStringEncodingUTF8 = 134217984,
    kCFStringEncodingNonLossyASCII = 3071,
    kCFStringEncodingUTF16 = 256,
    kCFStringEncodingUTF16BE = 268435712,
    kCFStringEncodingUTF16LE = 335544576,
    kCFStringEncodingUTF32 = 201326848,
    kCFStringEncodingUTF32BE = 402653440,
    kCFStringEncodingUTF32LE = 469762304
  }

  export enum CFStringCompareFlags {
    kCFCompareCaseInsensitive = 1,
    kCFCompareBackwards = 4,
    kCFCompareAnchored = 8,
    kCFCompareNonliteral = 16,
    kCFCompareLocalized = 32,
    kCFCompareNumerically = 64,
    kCFCompareDiacriticInsensitive = 128,
    kCFCompareWidthInsensitive = 256,
    kCFCompareForcedOrdering = 512
  }

  export enum CFStringEncodings {
    kCFStringEncodingMacJapanese = 1,
    kCFStringEncodingMacChineseTrad = 2,
    kCFStringEncodingMacKorean = 3,
    kCFStringEncodingMacArabic = 4,
    kCFStringEncodingMacHebrew = 5,
    kCFStringEncodingMacGreek = 6,
    kCFStringEncodingMacCyrillic = 7,
    kCFStringEncodingMacDevanagari = 9,
    kCFStringEncodingMacGurmukhi = 10,
    kCFStringEncodingMacGujarati = 11,
    kCFStringEncodingMacOriya = 12,
    kCFStringEncodingMacBengali = 13,
    kCFStringEncodingMacTamil = 14,
    kCFStringEncodingMacTelugu = 15,
    kCFStringEncodingMacKannada = 16,
    kCFStringEncodingMacMalayalam = 17,
    kCFStringEncodingMacSinhalese = 18,
    kCFStringEncodingMacBurmese = 19,
    kCFStringEncodingMacKhmer = 20,
    kCFStringEncodingMacThai = 21,
    kCFStringEncodingMacLaotian = 22,
    kCFStringEncodingMacGeorgian = 23,
    kCFStringEncodingMacArmenian = 24,
    kCFStringEncodingMacChineseSimp = 25,
    kCFStringEncodingMacTibetan = 26,
    kCFStringEncodingMacMongolian = 27,
    kCFStringEncodingMacEthiopic = 28,
    kCFStringEncodingMacCentralEurRoman = 29,
    kCFStringEncodingMacVietnamese = 30,
    kCFStringEncodingMacExtArabic = 31,
    kCFStringEncodingMacSymbol = 33,
    kCFStringEncodingMacDingbats = 34,
    kCFStringEncodingMacTurkish = 35,
    kCFStringEncodingMacCroatian = 36,
    kCFStringEncodingMacIcelandic = 37,
    kCFStringEncodingMacRomanian = 38,
    kCFStringEncodingMacCeltic = 39,
    kCFStringEncodingMacGaelic = 40,
    kCFStringEncodingMacFarsi = 140,
    kCFStringEncodingMacUkrainian = 152,
    kCFStringEncodingMacInuit = 236,
    kCFStringEncodingMacVT100 = 252,
    kCFStringEncodingMacHFS = 255,
    kCFStringEncodingISOLatin2 = 514,
    kCFStringEncodingISOLatin3 = 515,
    kCFStringEncodingISOLatin4 = 516,
    kCFStringEncodingISOLatinCyrillic = 517,
    kCFStringEncodingISOLatinArabic = 518,
    kCFStringEncodingISOLatinGreek = 519,
    kCFStringEncodingISOLatinHebrew = 520,
    kCFStringEncodingISOLatin5 = 521,
    kCFStringEncodingISOLatin6 = 522,
    kCFStringEncodingISOLatinThai = 523,
    kCFStringEncodingISOLatin7 = 525,
    kCFStringEncodingISOLatin8 = 526,
    kCFStringEncodingISOLatin9 = 527,
    kCFStringEncodingISOLatin10 = 528,
    kCFStringEncodingDOSLatinUS = 1024,
    kCFStringEncodingDOSGreek = 1029,
    kCFStringEncodingDOSBalticRim = 1030,
    kCFStringEncodingDOSLatin1 = 1040,
    kCFStringEncodingDOSGreek1 = 1041,
    kCFStringEncodingDOSLatin2 = 1042,
    kCFStringEncodingDOSCyrillic = 1043,
    kCFStringEncodingDOSTurkish = 1044,
    kCFStringEncodingDOSPortuguese = 1045,
    kCFStringEncodingDOSIcelandic = 1046,
    kCFStringEncodingDOSHebrew = 1047,
    kCFStringEncodingDOSCanadianFrench = 1048,
    kCFStringEncodingDOSArabic = 1049,
    kCFStringEncodingDOSNordic = 1050,
    kCFStringEncodingDOSRussian = 1051,
    kCFStringEncodingDOSGreek2 = 1052,
    kCFStringEncodingDOSThai = 1053,
    kCFStringEncodingDOSJapanese = 1056,
    kCFStringEncodingDOSChineseSimplif = 1057,
    kCFStringEncodingDOSKorean = 1058,
    kCFStringEncodingDOSChineseTrad = 1059,
    kCFStringEncodingWindowsLatin2 = 1281,
    kCFStringEncodingWindowsCyrillic = 1282,
    kCFStringEncodingWindowsGreek = 1283,
    kCFStringEncodingWindowsLatin5 = 1284,
    kCFStringEncodingWindowsHebrew = 1285,
    kCFStringEncodingWindowsArabic = 1286,
    kCFStringEncodingWindowsBalticRim = 1287,
    kCFStringEncodingWindowsVietnamese = 1288,
    kCFStringEncodingWindowsKoreanJohab = 1296,
    kCFStringEncodingANSEL = 1537,
    kCFStringEncodingJIS_X0201_76 = 1568,
    kCFStringEncodingJIS_X0208_83 = 1569,
    kCFStringEncodingJIS_X0208_90 = 1570,
    kCFStringEncodingJIS_X0212_90 = 1571,
    kCFStringEncodingJIS_C6226_78 = 1572,
    kCFStringEncodingShiftJIS_X0213 = 1576,
    kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577,
    kCFStringEncodingGB_2312_80 = 1584,
    kCFStringEncodingGBK_95 = 1585,
    kCFStringEncodingGB_18030_2000 = 1586,
    kCFStringEncodingKSC_5601_87 = 1600,
    kCFStringEncodingKSC_5601_92_Johab = 1601,
    kCFStringEncodingCNS_11643_92_P1 = 1617,
    kCFStringEncodingCNS_11643_92_P2 = 1618,
    kCFStringEncodingCNS_11643_92_P3 = 1619,
    kCFStringEncodingISO_2022_JP = 2080,
    kCFStringEncodingISO_2022_JP_2 = 2081,
    kCFStringEncodingISO_2022_JP_1 = 2082,
    kCFStringEncodingISO_2022_JP_3 = 2083,
    kCFStringEncodingISO_2022_CN = 2096,
    kCFStringEncodingISO_2022_CN_EXT = 2097,
    kCFStringEncodingISO_2022_KR = 2112,
    kCFStringEncodingEUC_JP = 2336,
    kCFStringEncodingEUC_CN = 2352,
    kCFStringEncodingEUC_TW = 2353,
    kCFStringEncodingEUC_KR = 2368,
    kCFStringEncodingShiftJIS = 2561,
    kCFStringEncodingKOI8_R = 2562,
    kCFStringEncodingBig5 = 2563,
    kCFStringEncodingMacRomanLatin1 = 2564,
    kCFStringEncodingHZ_GB_2312 = 2565,
    kCFStringEncodingBig5_HKSCS_1999 = 2566,
    kCFStringEncodingVISCII = 2567,
    kCFStringEncodingKOI8_U = 2568,
    kCFStringEncodingBig5_E = 2569,
    kCFStringEncodingNextStepJapanese = 2818,
    kCFStringEncodingEBCDIC_US = 3073,
    kCFStringEncodingEBCDIC_CP037 = 3074,
    kCFStringEncodingUTF7 = 67109120,
    kCFStringEncodingUTF7_IMAP = 2576,
    kCFStringEncodingShiftJIS_X0213_00 = 1576
  }

  export enum CFStringNormalizationForm {
    kCFStringNormalizationFormD = 0,
    kCFStringNormalizationFormKD = 1,
    kCFStringNormalizationFormC = 2,
    kCFStringNormalizationFormKC = 3
  }

  export enum CFStringTokenizerTokenType {
    kCFStringTokenizerTokenNone = 0,
    kCFStringTokenizerTokenNormal = 1,
    kCFStringTokenizerTokenHasSubTokensMask = 2,
    kCFStringTokenizerTokenHasDerivedSubTokensMask = 4,
    kCFStringTokenizerTokenHasHasNumbersMask = 8,
    kCFStringTokenizerTokenHasNonLettersMask = 16,
    kCFStringTokenizerTokenIsCJWordMask = 32
  }

  export enum CFTimeZoneNameStyle {
    kCFTimeZoneNameStyleStandard = 0,
    kCFTimeZoneNameStyleShortStandard = 1,
    kCFTimeZoneNameStyleDaylightSaving = 2,
    kCFTimeZoneNameStyleShortDaylightSaving = 3,
    kCFTimeZoneNameStyleGeneric = 4,
    kCFTimeZoneNameStyleShortGeneric = 5
  }

  export enum CFURLBookmarkCreationOptions {
    kCFURLBookmarkCreationMinimalBookmarkMask = 512,
    kCFURLBookmarkCreationSuitableForBookmarkFile = 1024,
    kCFURLBookmarkCreationWithSecurityScope = 2048,
    kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096,
    kCFURLBookmarkCreationPreferFileIDResolutionMask = 256
  }

  export enum CFURLBookmarkResolutionOptions {
    kCFURLBookmarkResolutionWithoutUIMask = 256,
    kCFURLBookmarkResolutionWithoutMountingMask = 512,
    kCFURLBookmarkResolutionWithSecurityScope = 1024,
    kCFBookmarkResolutionWithoutUIMask = 256,
    kCFBookmarkResolutionWithoutMountingMask = 512
  }

  export enum CFURLComponentType {
    kCFURLComponentScheme = 1,
    kCFURLComponentNetLocation = 2,
    kCFURLComponentPath = 3,
    kCFURLComponentResourceSpecifier = 4,
    kCFURLComponentUser = 5,
    kCFURLComponentPassword = 6,
    kCFURLComponentUserInfo = 7,
    kCFURLComponentHost = 8,
    kCFURLComponentPort = 9,
    kCFURLComponentParameterString = 10,
    kCFURLComponentQuery = 11,
    kCFURLComponentFragment = 12
  }

  export enum CFURLEnumeratorOptions {
    kCFURLEnumeratorDefaultBehavior = 0,
    kCFURLEnumeratorDescendRecursively = 1,
    kCFURLEnumeratorSkipInvisibles = 2,
    kCFURLEnumeratorGenerateFileReferenceURLs = 4,
    kCFURLEnumeratorSkipPackageContents = 8,
    kCFURLEnumeratorIncludeDirectoriesPreOrder = 16,
    kCFURLEnumeratorIncludeDirectoriesPostOrder = 32,
    kCFURLEnumeratorGenerateRelativePathURLs = 64
  }

  export enum CFURLEnumeratorResult {
    kCFURLEnumeratorSuccess = 1,
    kCFURLEnumeratorEnd = 2,
    kCFURLEnumeratorError = 3,
    kCFURLEnumeratorDirectoryPostOrderSuccess = 4
  }

  export enum CFURLPathStyle {
    kCFURLPOSIXPathStyle = 0,
    kCFURLHFSPathStyle = 1,
    kCFURLWindowsPathStyle = 2
  }

  export enum CFXMLEntityTypeCode {
    kCFXMLEntityTypeParameter = 0,
    kCFXMLEntityTypeParsedInternal = 1,
    kCFXMLEntityTypeParsedExternal = 2,
    kCFXMLEntityTypeUnparsed = 3,
    kCFXMLEntityTypeCharacter = 4
  }

  export enum CFXMLNodeTypeCode {
    kCFXMLNodeTypeDocument = 1,
    kCFXMLNodeTypeElement = 2,
    kCFXMLNodeTypeAttribute = 3,
    kCFXMLNodeTypeProcessingInstruction = 4,
    kCFXMLNodeTypeComment = 5,
    kCFXMLNodeTypeText = 6,
    kCFXMLNodeTypeCDATASection = 7,
    kCFXMLNodeTypeDocumentFragment = 8,
    kCFXMLNodeTypeEntity = 9,
    kCFXMLNodeTypeEntityReference = 10,
    kCFXMLNodeTypeDocumentType = 11,
    kCFXMLNodeTypeWhitespace = 12,
    kCFXMLNodeTypeNotation = 13,
    kCFXMLNodeTypeElementTypeDeclaration = 14,
    kCFXMLNodeTypeAttributeListDeclaration = 15
  }

  export enum CFXMLParserOptions {
    kCFXMLParserValidateDocument = 1,
    kCFXMLParserSkipMetaData = 2,
    kCFXMLParserReplacePhysicalEntities = 4,
    kCFXMLParserSkipWhitespace = 8,
    kCFXMLParserResolveExternalEntities = 16,
    kCFXMLParserAddImpliedAttributes = 32,
    kCFXMLParserAllOptions = 16777215,
    kCFXMLParserNoOptions = 0
  }

  export enum CFXMLParserStatusCode {
    kCFXMLStatusParseNotBegun = -2,
    kCFXMLStatusParseInProgress = -1,
    kCFXMLStatusParseSuccessful = 0,
    kCFXMLErrorUnexpectedEOF = 1,
    kCFXMLErrorUnknownEncoding = 2,
    kCFXMLErrorEncodingConversionFailure = 3,
    kCFXMLErrorMalformedProcessingInstruction = 4,
    kCFXMLErrorMalformedDTD = 5,
    kCFXMLErrorMalformedName = 6,
    kCFXMLErrorMalformedCDSect = 7,
    kCFXMLErrorMalformedCloseTag = 8,
    kCFXMLErrorMalformedStartTag = 9,
    kCFXMLErrorMalformedDocument = 10,
    kCFXMLErrorElementlessDocument = 11,
    kCFXMLErrorMalformedComment = 12,
    kCFXMLErrorMalformedCharacterReference = 13,
    kCFXMLErrorMalformedParsedCharacterData = 14,
    kCFXMLErrorNoData = 15
  }

  export enum __CFByteOrder {
    CFByteOrderUnknown = 0,
    CFByteOrderLittleEndian = 1,
    CFByteOrderBigEndian = 2
  }

  export enum CGBitmapInfo {
    kCGBitmapAlphaInfoMask = 31,
    kCGBitmapFloatInfoMask = 3840,
    kCGBitmapFloatComponents = 256,
    kCGBitmapByteOrderMask = 28672,
    kCGBitmapByteOrderDefault = 0,
    kCGBitmapByteOrder16Little = 4096,
    kCGBitmapByteOrder32Little = 8192,
    kCGBitmapByteOrder16Big = 12288,
    kCGBitmapByteOrder32Big = 16384
  }

  export enum CGBlendMode {
    kCGBlendModeNormal = 0,
    kCGBlendModeMultiply = 1,
    kCGBlendModeScreen = 2,
    kCGBlendModeOverlay = 3,
    kCGBlendModeDarken = 4,
    kCGBlendModeLighten = 5,
    kCGBlendModeColorDodge = 6,
    kCGBlendModeColorBurn = 7,
    kCGBlendModeSoftLight = 8,
    kCGBlendModeHardLight = 9,
    kCGBlendModeDifference = 10,
    kCGBlendModeExclusion = 11,
    kCGBlendModeHue = 12,
    kCGBlendModeSaturation = 13,
    kCGBlendModeColor = 14,
    kCGBlendModeLuminosity = 15,
    kCGBlendModeClear = 16,
    kCGBlendModeCopy = 17,
    kCGBlendModeSourceIn = 18,
    kCGBlendModeSourceOut = 19,
    kCGBlendModeSourceAtop = 20,
    kCGBlendModeDestinationOver = 21,
    kCGBlendModeDestinationIn = 22,
    kCGBlendModeDestinationOut = 23,
    kCGBlendModeDestinationAtop = 24,
    kCGBlendModeXOR = 25,
    kCGBlendModePlusDarker = 26,
    kCGBlendModePlusLighter = 27
  }

  export enum CGCaptureOptions {
    kCGCaptureNoOptions = 0,
    kCGCaptureNoFill = 1
  }

  export enum CGColorConversionInfoTransformType {
    kCGColorConversionTransformFromSpace = 0,
    kCGColorConversionTransformToSpace = 1,
    kCGColorConversionTransformApplySpace = 2
  }

  export enum CGColorRenderingIntent {
    kCGRenderingIntentDefault = 0,
    kCGRenderingIntentAbsoluteColorimetric = 1,
    kCGRenderingIntentRelativeColorimetric = 2,
    kCGRenderingIntentPerceptual = 3,
    kCGRenderingIntentSaturation = 4
  }

  export enum CGColorSpaceModel {
    kCGColorSpaceModelUnknown = -1,
    kCGColorSpaceModelMonochrome = 0,
    kCGColorSpaceModelRGB = 1,
    kCGColorSpaceModelCMYK = 2,
    kCGColorSpaceModelLab = 3,
    kCGColorSpaceModelDeviceN = 4,
    kCGColorSpaceModelIndexed = 5,
    kCGColorSpaceModelPattern = 6,
    kCGColorSpaceModelXYZ = 7
  }

  export enum CGConfigureOption {
    kCGConfigureForAppOnly = 0,
    kCGConfigureForSession = 1,
    kCGConfigurePermanently = 2
  }

  export enum CGDisplayChangeSummaryFlags {
    kCGDisplayBeginConfigurationFlag = 1,
    kCGDisplayMovedFlag = 2,
    kCGDisplaySetMainFlag = 4,
    kCGDisplaySetModeFlag = 8,
    kCGDisplayAddFlag = 16,
    kCGDisplayRemoveFlag = 32,
    kCGDisplayEnabledFlag = 256,
    kCGDisplayDisabledFlag = 512,
    kCGDisplayMirrorFlag = 1024,
    kCGDisplayUnMirrorFlag = 2048,
    kCGDisplayDesktopShapeChangedFlag = 4096
  }

  export enum CGDisplayStreamFrameStatus {
    kCGDisplayStreamFrameStatusFrameComplete = 0,
    kCGDisplayStreamFrameStatusFrameIdle = 1,
    kCGDisplayStreamFrameStatusFrameBlank = 2,
    kCGDisplayStreamFrameStatusStopped = 3
  }

  export enum CGDisplayStreamUpdateRectType {
    kCGDisplayStreamUpdateRefreshedRects = 0,
    kCGDisplayStreamUpdateMovedRects = 1,
    kCGDisplayStreamUpdateDirtyRects = 2,
    kCGDisplayStreamUpdateReducedDirtyRects = 3
  }

  export enum CGError {
    kCGErrorSuccess = 0,
    kCGErrorFailure = 1000,
    kCGErrorIllegalArgument = 1001,
    kCGErrorInvalidConnection = 1002,
    kCGErrorInvalidContext = 1003,
    kCGErrorCannotComplete = 1004,
    kCGErrorNotImplemented = 1006,
    kCGErrorRangeCheck = 1007,
    kCGErrorTypeCheck = 1008,
    kCGErrorInvalidOperation = 1010,
    kCGErrorNoneAvailable = 1011
  }

  export enum CGEventField {
    kCGMouseEventNumber = 0,
    kCGMouseEventClickState = 1,
    kCGMouseEventPressure = 2,
    kCGMouseEventButtonNumber = 3,
    kCGMouseEventDeltaX = 4,
    kCGMouseEventDeltaY = 5,
    kCGMouseEventInstantMouser = 6,
    kCGMouseEventSubtype = 7,
    kCGKeyboardEventAutorepeat = 8,
    kCGKeyboardEventKeycode = 9,
    kCGKeyboardEventKeyboardType = 10,
    kCGScrollWheelEventDeltaAxis1 = 11,
    kCGScrollWheelEventDeltaAxis2 = 12,
    kCGScrollWheelEventDeltaAxis3 = 13,
    kCGScrollWheelEventFixedPtDeltaAxis1 = 93,
    kCGScrollWheelEventFixedPtDeltaAxis2 = 94,
    kCGScrollWheelEventFixedPtDeltaAxis3 = 95,
    kCGScrollWheelEventPointDeltaAxis1 = 96,
    kCGScrollWheelEventPointDeltaAxis2 = 97,
    kCGScrollWheelEventPointDeltaAxis3 = 98,
    kCGScrollWheelEventScrollPhase = 99,
    kCGScrollWheelEventScrollCount = 100,
    kCGScrollWheelEventMomentumPhase = 123,
    kCGScrollWheelEventInstantMouser = 14,
    kCGTabletEventPointX = 15,
    kCGTabletEventPointY = 16,
    kCGTabletEventPointZ = 17,
    kCGTabletEventPointButtons = 18,
    kCGTabletEventPointPressure = 19,
    kCGTabletEventTiltX = 20,
    kCGTabletEventTiltY = 21,
    kCGTabletEventRotation = 22,
    kCGTabletEventTangentialPressure = 23,
    kCGTabletEventDeviceID = 24,
    kCGTabletEventVendor1 = 25,
    kCGTabletEventVendor2 = 26,
    kCGTabletEventVendor3 = 27,
    kCGTabletProximityEventVendorID = 28,
    kCGTabletProximityEventTabletID = 29,
    kCGTabletProximityEventPointerID = 30,
    kCGTabletProximityEventDeviceID = 31,
    kCGTabletProximityEventSystemTabletID = 32,
    kCGTabletProximityEventVendorPointerType = 33,
    kCGTabletProximityEventVendorPointerSerialNumber = 34,
    kCGTabletProximityEventVendorUniqueID = 35,
    kCGTabletProximityEventCapabilityMask = 36,
    kCGTabletProximityEventPointerType = 37,
    kCGTabletProximityEventEnterProximity = 38,
    kCGEventTargetProcessSerialNumber = 39,
    kCGEventTargetUnixProcessID = 40,
    kCGEventSourceUnixProcessID = 41,
    kCGEventSourceUserData = 42,
    kCGEventSourceUserID = 43,
    kCGEventSourceGroupID = 44,
    kCGEventSourceStateID = 45,
    kCGScrollWheelEventIsContinuous = 88,
    kCGMouseEventWindowUnderMousePointer = 91,
    kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92,
    kCGEventUnacceleratedPointerMovementX = 170,
    kCGEventUnacceleratedPointerMovementY = 171
  }

  export enum CGEventFilterMask {
    kCGEventFilterMaskPermitLocalMouseEvents = 1,
    kCGEventFilterMaskPermitLocalKeyboardEvents = 2,
    kCGEventFilterMaskPermitSystemDefinedEvents = 4
  }

  export enum CGEventFlags {
    kCGEventFlagMaskAlphaShift = 65536,
    kCGEventFlagMaskShift = 131072,
    kCGEventFlagMaskControl = 262144,
    kCGEventFlagMaskAlternate = 524288,
    kCGEventFlagMaskCommand = 1048576,
    kCGEventFlagMaskHelp = 4194304,
    kCGEventFlagMaskSecondaryFn = 8388608,
    kCGEventFlagMaskNumericPad = 2097152,
    kCGEventFlagMaskNonCoalesced = 256
  }

  export enum CGEventMouseSubtype {
    kCGEventMouseSubtypeDefault = 0,
    kCGEventMouseSubtypeTabletPoint = 1,
    kCGEventMouseSubtypeTabletProximity = 2
  }

  export enum CGEventSourceStateID {
    kCGEventSourceStatePrivate = -1,
    kCGEventSourceStateCombinedSessionState = 0,
    kCGEventSourceStateHIDSystemState = 1
  }

  export enum CGEventSuppressionState {
    kCGEventSuppressionStateSuppressionInterval = 0,
    kCGEventSuppressionStateRemoteMouseDrag = 1,
    kCGNumberOfEventSuppressionStates = 2
  }

  export enum CGEventTapLocation {
    kCGHIDEventTap = 0,
    kCGSessionEventTap = 1,
    kCGAnnotatedSessionEventTap = 2
  }

  export enum CGEventTapOptions {
    kCGEventTapOptionDefault = 0,
    kCGEventTapOptionListenOnly = 1
  }

  export enum CGEventTapPlacement {
    kCGHeadInsertEventTap = 0,
    kCGTailAppendEventTap = 1
  }

  export enum CGEventType {
    kCGEventNull = 0,
    kCGEventLeftMouseDown = 1,
    kCGEventLeftMouseUp = 2,
    kCGEventRightMouseDown = 3,
    kCGEventRightMouseUp = 4,
    kCGEventMouseMoved = 5,
    kCGEventLeftMouseDragged = 6,
    kCGEventRightMouseDragged = 7,
    kCGEventKeyDown = 10,
    kCGEventKeyUp = 11,
    kCGEventFlagsChanged = 12,
    kCGEventScrollWheel = 22,
    kCGEventTabletPointer = 23,
    kCGEventTabletProximity = 24,
    kCGEventOtherMouseDown = 25,
    kCGEventOtherMouseUp = 26,
    kCGEventOtherMouseDragged = 27,
    kCGEventTapDisabledByTimeout = 4294967294,
    kCGEventTapDisabledByUserInput = 4294967295
  }

  export enum CGFontPostScriptFormat {
    kCGFontPostScriptFormatType1 = 1,
    kCGFontPostScriptFormatType3 = 3,
    kCGFontPostScriptFormatType42 = 42
  }

  export enum CGGesturePhase {
    kCGGesturePhaseNone = 0,
    kCGGesturePhaseBegan = 1,
    kCGGesturePhaseChanged = 2,
    kCGGesturePhaseEnded = 4,
    kCGGesturePhaseCancelled = 8,
    kCGGesturePhaseMayBegin = 128
  }

  export enum CGGlyphDeprecatedEnum {
    Min = 0,
    Max = 1
  }

  export enum CGGradientDrawingOptions {
    kCGGradientDrawsBeforeStartLocation = 1,
    kCGGradientDrawsAfterEndLocation = 2
  }

  export enum CGImageAlphaInfo {
    kCGImageAlphaNone = 0,
    kCGImageAlphaPremultipliedLast = 1,
    kCGImageAlphaPremultipliedFirst = 2,
    kCGImageAlphaLast = 3,
    kCGImageAlphaFirst = 4,
    kCGImageAlphaNoneSkipLast = 5,
    kCGImageAlphaNoneSkipFirst = 6,
    kCGImageAlphaOnly = 7
  }

  export enum CGImageByteOrderInfo {
    kCGImageByteOrderMask = 28672,
    kCGImageByteOrderDefault = 0,
    kCGImageByteOrder16Little = 4096,
    kCGImageByteOrder32Little = 8192,
    kCGImageByteOrder16Big = 12288,
    kCGImageByteOrder32Big = 16384
  }

  export enum CGImagePixelFormatInfo {
    kCGImagePixelFormatMask = 983040,
    kCGImagePixelFormatPacked = 0,
    kCGImagePixelFormatRGB555 = 65536,
    kCGImagePixelFormatRGB565 = 131072,
    kCGImagePixelFormatRGB101010 = 196608,
    kCGImagePixelFormatRGBCIF10 = 262144
  }

  export enum CGInterpolationQuality {
    kCGInterpolationDefault = 0,
    kCGInterpolationNone = 1,
    kCGInterpolationLow = 2,
    kCGInterpolationMedium = 4,
    kCGInterpolationHigh = 3
  }

  export enum CGLineCap {
    kCGLineCapButt = 0,
    kCGLineCapRound = 1,
    kCGLineCapSquare = 2
  }

  export enum CGLineJoin {
    kCGLineJoinMiter = 0,
    kCGLineJoinRound = 1,
    kCGLineJoinBevel = 2
  }

  export enum CGMomentumScrollPhase {
    kCGMomentumScrollPhaseNone = 0,
    kCGMomentumScrollPhaseBegin = 1,
    kCGMomentumScrollPhaseContinue = 2,
    kCGMomentumScrollPhaseEnd = 3
  }

  export enum CGMouseButton {
    kCGMouseButtonLeft = 0,
    kCGMouseButtonRight = 1,
    kCGMouseButtonCenter = 2
  }

  export enum CGPDFAccessPermissions {
    kCGPDFAllowsLowQualityPrinting = 1,
    kCGPDFAllowsHighQualityPrinting = 2,
    kCGPDFAllowsDocumentChanges = 4,
    kCGPDFAllowsDocumentAssembly = 8,
    kCGPDFAllowsContentCopying = 16,
    kCGPDFAllowsContentAccessibility = 32,
    kCGPDFAllowsCommenting = 64,
    kCGPDFAllowsFormFieldEntry = 128
  }

  export enum CGPDFBox {
    kCGPDFMediaBox = 0,
    kCGPDFCropBox = 1,
    kCGPDFBleedBox = 2,
    kCGPDFTrimBox = 3,
    kCGPDFArtBox = 4
  }

  export enum CGPDFDataFormat {
    Raw = 0,
    JPEGEncoded = 1,
    JPEG2000 = 2
  }

  export enum CGPDFObjectType {
    kCGPDFObjectTypeNull = 1,
    kCGPDFObjectTypeBoolean = 2,
    kCGPDFObjectTypeInteger = 3,
    kCGPDFObjectTypeReal = 4,
    kCGPDFObjectTypeName = 5,
    kCGPDFObjectTypeString = 6,
    kCGPDFObjectTypeArray = 7,
    kCGPDFObjectTypeDictionary = 8,
    kCGPDFObjectTypeStream = 9
  }

  export enum CGPDFTagType {
    Document = 100,
    Part = 101,
    Art = 102,
    Section = 103,
    Div = 104,
    BlockQuote = 105,
    Caption = 106,
    TOC = 107,
    TOCI = 108,
    Index = 109,
    NonStructure = 110,
    Private = 111,
    Paragraph = 200,
    Header = 201,
    Header1 = 202,
    Header2 = 203,
    Header3 = 204,
    Header4 = 205,
    Header5 = 206,
    Header6 = 207,
    List = 300,
    ListItem = 301,
    Label = 302,
    ListBody = 303,
    Table = 400,
    TableRow = 401,
    TableHeaderCell = 402,
    TableDataCell = 403,
    TableHeader = 404,
    TableBody = 405,
    TableFooter = 406,
    Span = 500,
    Quote = 501,
    Note = 502,
    Reference = 503,
    Bibliography = 504,
    Code = 505,
    Link = 506,
    Annotation = 507,
    Ruby = 600,
    RubyBaseText = 601,
    RubyAnnotationText = 602,
    RubyPunctuation = 603,
    Warichu = 604,
    WarichuText = 605,
    WarichuPunctiation = 606,
    Figure = 700,
    Formula = 701,
    Form = 702
  }

  export enum CGPathDrawingMode {
    kCGPathFill = 0,
    kCGPathEOFill = 1,
    kCGPathStroke = 2,
    kCGPathFillStroke = 3,
    kCGPathEOFillStroke = 4
  }

  export enum CGPathElementType {
    kCGPathElementMoveToPoint = 0,
    kCGPathElementAddLineToPoint = 1,
    kCGPathElementAddQuadCurveToPoint = 2,
    kCGPathElementAddCurveToPoint = 3,
    kCGPathElementCloseSubpath = 4
  }

  export enum CGPatternTiling {
    kCGPatternTilingNoDistortion = 0,
    kCGPatternTilingConstantSpacingMinimalDistortion = 1,
    kCGPatternTilingConstantSpacing = 2
  }

  export enum CGRectEdge {
    MinXEdge = 0,
    MinYEdge = 1,
    MaxXEdge = 2,
    MaxYEdge = 3
  }

  export enum CGScreenUpdateOperation {
    kCGScreenUpdateOperationRefresh = 0,
    kCGScreenUpdateOperationMove = 1,
    kCGScreenUpdateOperationReducedDirtyRectangleCount = 2147483648
  }

  export enum CGScrollEventUnit {
    kCGScrollEventUnitPixel = 0,
    kCGScrollEventUnitLine = 1
  }

  export enum CGScrollPhase {
    kCGScrollPhaseBegan = 1,
    kCGScrollPhaseChanged = 2,
    kCGScrollPhaseEnded = 4,
    kCGScrollPhaseCancelled = 8,
    kCGScrollPhaseMayBegin = 128
  }

  export enum CGTextDrawingMode {
    kCGTextFill = 0,
    kCGTextStroke = 1,
    kCGTextFillStroke = 2,
    kCGTextInvisible = 3,
    kCGTextFillClip = 4,
    kCGTextStrokeClip = 5,
    kCGTextFillStrokeClip = 6,
    kCGTextClip = 7
  }

  export enum CGWindowBackingType {
    kCGBackingStoreRetained = 0,
    kCGBackingStoreNonretained = 1,
    kCGBackingStoreBuffered = 2
  }

  export enum CGWindowImageOption {
    kCGWindowImageDefault = 0,
    kCGWindowImageBoundsIgnoreFraming = 1,
    kCGWindowImageShouldBeOpaque = 2,
    kCGWindowImageOnlyShadows = 4,
    kCGWindowImageBestResolution = 8,
    kCGWindowImageNominalResolution = 16
  }

  export enum CGWindowLevelKey {
    kCGBaseWindowLevelKey = 0,
    kCGMinimumWindowLevelKey = 1,
    kCGDesktopWindowLevelKey = 2,
    kCGBackstopMenuLevelKey = 3,
    kCGNormalWindowLevelKey = 4,
    kCGFloatingWindowLevelKey = 5,
    kCGTornOffMenuWindowLevelKey = 6,
    kCGDockWindowLevelKey = 7,
    kCGMainMenuWindowLevelKey = 8,
    kCGStatusWindowLevelKey = 9,
    kCGModalPanelWindowLevelKey = 10,
    kCGPopUpMenuWindowLevelKey = 11,
    kCGDraggingWindowLevelKey = 12,
    kCGScreenSaverWindowLevelKey = 13,
    kCGMaximumWindowLevelKey = 14,
    kCGOverlayWindowLevelKey = 15,
    kCGHelpWindowLevelKey = 16,
    kCGUtilityWindowLevelKey = 17,
    kCGDesktopIconWindowLevelKey = 18,
    kCGCursorWindowLevelKey = 19,
    kCGAssistiveTechHighWindowLevelKey = 20,
    kCGNumberOfWindowLevelKeys = 21
  }

  export enum CGWindowListOption {
    kCGWindowListOptionAll = 0,
    kCGWindowListOptionOnScreenOnly = 1,
    kCGWindowListOptionOnScreenAboveWindow = 2,
    kCGWindowListOptionOnScreenBelowWindow = 4,
    kCGWindowListOptionIncludingWindow = 8,
    kCGWindowListExcludeDesktopElements = 16
  }

  export enum CGWindowSharingType {
    kCGWindowSharingNone = 0,
    kCGWindowSharingReadOnly = 1,
    kCGWindowSharingReadWrite = 2
  }

  export enum CIDataMatrixCodeECCVersion {
    Version000 = 0,
    Version050 = 50,
    Version080 = 80,
    Version100 = 100,
    Version140 = 140,
    Version200 = 200
  }

  export enum CIQRCodeErrorCorrectionLevel {
    L = 76,
    M = 77,
    Q = 81,
    H = 72
  }

  export enum CIRenderDestinationAlphaMode {
    None = 0,
    Premultiplied = 1,
    Unpremultiplied = 2
  }

  export enum CMTimeFlags {
    kCMTimeFlags_Valid = 1,
    kCMTimeFlags_HasBeenRounded = 2,
    kCMTimeFlags_PositiveInfinity = 4,
    kCMTimeFlags_NegativeInfinity = 8,
    kCMTimeFlags_Indefinite = 16,
    kCMTimeFlags_ImpliedValueFlagsMask = 28
  }

  export enum CMTimeRoundingMethod {
    kCMTimeRoundingMethod_RoundHalfAwayFromZero = 1,
    kCMTimeRoundingMethod_RoundTowardZero = 2,
    kCMTimeRoundingMethod_RoundAwayFromZero = 3,
    kCMTimeRoundingMethod_QuickTime = 4,
    kCMTimeRoundingMethod_RoundTowardPositiveInfinity = 5,
    kCMTimeRoundingMethod_RoundTowardNegativeInfinity = 6,
    kCMTimeRoundingMethod_Default = 1
  }

  export enum AlignmentOptions {
    MinXInward = 1,
    MinYInward = 2,
    MaxXInward = 4,
    MaxYInward = 8,
    WidthInward = 16,
    HeightInward = 32,
    MinXOutward = 256,
    MinYOutward = 512,
    MaxXOutward = 1024,
    MaxYOutward = 2048,
    WidthOutward = 4096,
    HeightOutward = 8192,
    MinXNearest = 65536,
    MinYNearest = 131072,
    MaxXNearest = 262144,
    MaxYNearest = 524288,
    WidthNearest = 1048576,
    HeightNearest = 2097152,
    RectFlipped = -9223372036854775808,
    AllEdgesInward = 15,
    AllEdgesOutward = 3840,
    AllEdgesNearest = 983040
  }

  export enum NSBinarySearchingOptions {
    FirstEqual = 256,
    LastEqual = 512,
    InsertionIndex = 1024
  }

  export enum NSCollectionChangeType {
    Insert = 0,
    Remove = 1
  }

  export enum ComparisonResult {
    OrderedAscending = -1,
    OrderedSame = 0,
    OrderedDescending = 1
  }

  export enum NSEnumerationOptions {
    Concurrent = 1,
    Reverse = 2
  }

  export enum NSItemProviderFileOptions {
    OpenInPlace = 1
  }

  export enum NSItemProviderRepresentationVisibility {
    All = 0,
    Team = 1,
    Group = 2,
    OwnProcess = 3
  }

  export enum NSKeyValueChange {
    Setting = 1,
    Insertion = 2,
    Removal = 3,
    Replacement = 4
  }

  export enum NSKeyValueObservingOptions {
    New = 1,
    Old = 2,
    Initial = 4,
    Prior = 8
  }

  export enum NSKeyValueSetMutationKind {
    UnionSetMutation = 1,
    MinusSetMutation = 2,
    IntersectSetMutation = 3,
    SetSetMutation = 4
  }

  export enum NSLinguisticTaggerUnit {
    Word = 0,
    Sentence = 1,
    Paragraph = 2,
    Document = 3
  }

  export enum NSOrderedCollectionDifferenceCalculationOptions {
    OmitInsertedObjects = 1,
    OmitRemovedObjects = 2,
    InferMoves = 4
  }

  export enum QualityOfService {
    UserInteractive = 33,
    UserInitiated = 25,
    Utility = 17,
    Background = 9,
    Default = -1
  }

  export enum NSRectEdge {
    RectEdgeMinX = 0,
    RectEdgeMinY = 1,
    RectEdgeMaxX = 2,
    RectEdgeMaxY = 3,
    MinXEdge = 0,
    MinYEdge = 1,
    MaxXEdge = 2,
    MaxYEdge = 3
  }

  export enum NSSaveOptions {
    Yes = 0,
    No = 1,
    Ask = 2
  }

  export enum NSSortOptions {
    Concurrent = 1,
    Stable = 16
  }

  export enum NSURLErrorNetworkUnavailableReason {
    Cellular = 0,
    Expensive = 1,
    Constrained = 2
  }

  export enum NSURLSessionDelayedRequestDisposition {
    ContinueLoading = 0,
    UseNewRequest = 1,
    Cancel = 2
  }

  export enum NSURLSessionWebSocketMessageType {
    Data = 0,
    String = 1
  }

  export enum IKCameraDeviceViewDisplayMode {
    None = -1,
    Table = 0,
    Icon = 1
  }

  export enum IKCameraDeviceViewTransferMode {
    FileBased = 0,
    MemoryBased = 1
  }

  export enum IKDeviceBrowserViewDisplayMode {
    Table = 0,
    Outline = 1,
    Icon = 2
  }

  export enum IKImageBrowserCellState {
    StateNoImage = 0,
    StateInvalid = 1,
    StateReady = 2
  }

  export enum IKImageBrowserDropOperation {
    On = 0,
    Before = 1
  }

  export enum IKScannerDeviceViewDisplayMode {
    None = -1,
    Simple = 0,
    Advanced = 1
  }

  export enum IKScannerDeviceViewTransferMode {
    FileBased = 0,
    MemoryBased = 1
  }

  export enum QCPlugInExecutionMode {
    kQCPlugInExecutionModeProvider = 1,
    kQCPlugInExecutionModeProcessor = 2,
    kQCPlugInExecutionModeConsumer = 3
  }

  export enum QCPlugInTimeMode {
    kQCPlugInTimeModeNone = 0,
    kQCPlugInTimeModeIdle = 1,
    kQCPlugInTimeModeTimeBase = 2
  }

  export enum QLPreviewViewStyle {
    Normal = 0,
    Compact = 1
  }

  export enum CAAutoresizingMask {
    kCALayerNotSizable = 0,
    kCALayerMinXMargin = 1,
    kCALayerWidthSizable = 2,
    kCALayerMaxXMargin = 4,
    kCALayerMinYMargin = 8,
    kCALayerHeightSizable = 16,
    kCALayerMaxYMargin = 32
  }

  export enum CAConstraintAttribute {
    kCAConstraintMinX = 0,
    kCAConstraintMidX = 1,
    kCAConstraintMaxX = 2,
    kCAConstraintWidth = 3,
    kCAConstraintMinY = 4,
    kCAConstraintMidY = 5,
    kCAConstraintMaxY = 6,
    kCAConstraintHeight = 7
  }

  export enum CACornerMask {
    kCALayerMinXMinYCorner = 1,
    kCALayerMaxXMinYCorner = 2,
    kCALayerMinXMaxYCorner = 4,
    kCALayerMaxXMaxYCorner = 8
  }

  export enum CAEdgeAntialiasingMask {
    kCALayerLeftEdge = 1,
    kCALayerRightEdge = 2,
    kCALayerBottomEdge = 4,
    kCALayerTopEdge = 8
  }

  // export let AVAssetExportPreset1280x720: string;
  // export let AVAssetExportPreset1920x1080: string;
  // export let AVAssetExportPreset3840x2160: string;
  // export let AVAssetExportPreset640x480: string;
  // export let AVAssetExportPreset960x540: string;
  // export let AVAssetExportPresetAppleM4A: string;
  // export let AVAssetExportPresetAppleM4V1080pHD: string;
  // export let AVAssetExportPresetAppleM4V480pSD: string;
  // export let AVAssetExportPresetAppleM4V720pHD: string;
  // export let AVAssetExportPresetAppleM4VAppleTV: string;
  // export let AVAssetExportPresetAppleM4VCellular: string;
  // export let AVAssetExportPresetAppleM4VWiFi: string;
  // export let AVAssetExportPresetAppleM4ViPod: string;
  // export let AVAssetExportPresetAppleProRes422LPCM: string;
  // export let AVAssetExportPresetAppleProRes4444LPCM: string;
  // export let AVAssetExportPresetHEVC1920x1080: string;
  // export let AVAssetExportPresetHEVC1920x1080WithAlpha: string;
  // export let AVAssetExportPresetHEVC3840x2160: string;
  // export let AVAssetExportPresetHEVC3840x2160WithAlpha: string;
  // export let AVAssetExportPresetHEVCHighestQuality: string;
  // export let AVAssetExportPresetHEVCHighestQualityWithAlpha: string;
  // export let AVAssetExportPresetHighestQuality: string;
  // export let AVAssetExportPresetLowQuality: string;
  // export let AVAssetExportPresetMediumQuality: string;
  // export let AVAssetExportPresetPassthrough: string;
  // export let AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey: string;
  // export let AVAudioBitRateStrategy_Constant: string;
  // export let AVAudioBitRateStrategy_LongTermAverage: string;
  // export let AVAudioBitRateStrategy_Variable: string;
  // export let AVAudioBitRateStrategy_VariableConstrained: string;
  // export let AVAudioFileTypeKey: string;
  // export let AVAudioUnitManufacturerNameApple: string;
  // export let AVAudioUnitTypeEffect: string;
  // export let AVAudioUnitTypeFormatConverter: string;
  // export let AVAudioUnitTypeGenerator: string;
  // export let AVAudioUnitTypeMIDIProcessor: string;
  // export let AVAudioUnitTypeMixer: string;
  // export let AVAudioUnitTypeMusicDevice: string;
  // export let AVAudioUnitTypeMusicEffect: string;
  // export let AVAudioUnitTypeOfflineEffect: string;
  // export let AVAudioUnitTypeOutput: string;
  // export let AVAudioUnitTypePanner: string;
  // export let AVCaptureSessionErrorKey: string;
  // export let AVChannelLayoutKey: string;
  // export let AVContentKeyRequestProtocolVersionsKey: string;
  // export let AVContentKeyRequestRequiresValidationDataInSecureTokenKey: string;
  // export let AVCoreAnimationBeginTimeAtZero: number;
  // export let AVEncoderAudioQualityForVBRKey: string;
  // export let AVEncoderAudioQualityKey: string;
  // export let AVEncoderBitDepthHintKey: string;
  // export let AVEncoderBitRateKey: string;
  // export let AVEncoderBitRatePerChannelKey: string;
  // export let AVEncoderBitRateStrategyKey: string;
  // export let AVErrorDeviceKey: string;
  // export let AVErrorDiscontinuityFlagsKey: string;
  // export let AVErrorFileSizeKey: string;
  // export let AVErrorFileTypeKey: string;
  // export let AVErrorMediaSubTypeKey: string;
  // export let AVErrorMediaTypeKey: string;
  // export let AVErrorPIDKey: string;
  // export let AVErrorPersistentTrackIDKey: string;
  // export let AVErrorPresentationTimeStampKey: string;
  // export let AVErrorRecordingSuccessfullyFinishedKey: string;
  // export let AVErrorTimeKey: string;
  // export let AVFormatIDKey: string;
  // export let AVFoundationErrorDomain: string;
  // export let AVLinearPCMBitDepthKey: string;
  // export let AVLinearPCMIsBigEndianKey: string;
  // export let AVLinearPCMIsFloatKey: string;
  // export let AVLinearPCMIsNonInterleaved: string;
  // export let AVMovieReferenceRestrictionsKey: string;
  // export let AVNumberOfChannelsKey: string;
  // export let AVPlayerItemFailedToPlayToEndTimeErrorKey: string;
  // export let AVPlayerItemTrackVideoFieldModeDeinterlaceFields: string;
  // export let AVSampleBufferAudioRendererFlushTimeKey: string;
  // export let AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey: string;
  // export let AVSampleRateConverterAlgorithmKey: string;
  // export let AVSampleRateConverterAlgorithm_Mastering: string;
  // export let AVSampleRateConverterAlgorithm_MinimumPhase: string;
  // export let AVSampleRateConverterAlgorithm_Normal: string;
  // export let AVSampleRateConverterAudioQualityKey: string;
  // export let AVSampleRateKey: string;
  // export let AVSpeechSynthesisIPANotationAttribute: string;
  // export let AVSpeechSynthesisVoiceIdentifierAlex: string;
  // export let AVSpeechUtteranceDefaultSpeechRate: number;
  // export let AVSpeechUtteranceMaximumSpeechRate: number;
  // export let AVSpeechUtteranceMinimumSpeechRate: number;
  // export let AVStreamingKeyDeliveryContentKeyType: string;
  // export let AVStreamingKeyDeliveryPersistentContentKeyType: string;
  // export let AVURLAssetAllowsCellularAccessKey: string;
  // export let AVURLAssetAllowsConstrainedNetworkAccessKey: string;
  // export let AVURLAssetAllowsExpensiveNetworkAccessKey: string;
  // export let AVURLAssetHTTPCookiesKey: string;
  // export let AVURLAssetPreferPreciseDurationAndTimingKey: string;
  // export let AVURLAssetReferenceRestrictionsKey: string;
  // export let AVVideoAllowFrameReorderingKey: string;
  // export let AVVideoAllowWideColorKey: string;
  // export let AVVideoAverageBitRateKey: string;
  // export let AVVideoAverageNonDroppableFrameRateKey: string;
  // export let AVVideoCleanApertureHeightKey: string;
  // export let AVVideoCleanApertureHorizontalOffsetKey: string;
  // export let AVVideoCleanApertureKey: string;
  // export let AVVideoCleanApertureVerticalOffsetKey: string;
  // export let AVVideoCleanApertureWidthKey: string;
  // export let AVVideoCodecKey: string;
  // export let AVVideoColorPrimariesKey: string;
  // export let AVVideoColorPrimaries_EBU_3213: string;
  // export let AVVideoColorPrimaries_ITU_R_2020: string;
  // export let AVVideoColorPrimaries_ITU_R_709_2: string;
  // export let AVVideoColorPrimaries_P3_D65: string;
  // export let AVVideoColorPrimaries_SMPTE_C: string;
  // export let AVVideoColorPropertiesKey: string;
  // export let AVVideoCompressionPropertiesKey: string;
  // export let AVVideoDecompressionPropertiesKey: string;
  // export let AVVideoEncoderSpecificationKey: string;
  // export let AVVideoExpectedSourceFrameRateKey: string;
  // export let AVVideoH264EntropyModeCABAC: string;
  // export let AVVideoH264EntropyModeCAVLC: string;
  // export let AVVideoH264EntropyModeKey: string;
  // export let AVVideoHeightKey: string;
  // export let AVVideoMaxKeyFrameIntervalDurationKey: string;
  // export let AVVideoMaxKeyFrameIntervalKey: string;
  // export let AVVideoPixelAspectRatioHorizontalSpacingKey: string;
  // export let AVVideoPixelAspectRatioKey: string;
  // export let AVVideoPixelAspectRatioVerticalSpacingKey: string;
  // export let AVVideoProfileLevelH264Baseline30: string;
  // export let AVVideoProfileLevelH264Baseline31: string;
  // export let AVVideoProfileLevelH264Baseline41: string;
  // export let AVVideoProfileLevelH264BaselineAutoLevel: string;
  // export let AVVideoProfileLevelH264High40: string;
  // export let AVVideoProfileLevelH264High41: string;
  // export let AVVideoProfileLevelH264HighAutoLevel: string;
  // export let AVVideoProfileLevelH264Main30: string;
  // export let AVVideoProfileLevelH264Main31: string;
  // export let AVVideoProfileLevelH264Main32: string;
  // export let AVVideoProfileLevelH264Main41: string;
  // export let AVVideoProfileLevelH264MainAutoLevel: string;
  // export let AVVideoProfileLevelKey: string;
  // export let AVVideoQualityKey: string;
  // export let AVVideoScalingModeFit: string;
  // export let AVVideoScalingModeKey: string;
  // export let AVVideoScalingModeResize: string;
  // export let AVVideoScalingModeResizeAspect: string;
  // export let AVVideoScalingModeResizeAspectFill: string;
  // export let AVVideoTransferFunctionKey: string;
  // export let AVVideoTransferFunction_ITU_R_2100_HLG: string;
  // export let AVVideoTransferFunction_ITU_R_709_2: string;
  // export let AVVideoTransferFunction_SMPTE_240M_1995: string;
  // export let AVVideoTransferFunction_SMPTE_ST_2084_PQ: string;
  // export let AVVideoWidthKey: string;
  // export let AVVideoYCbCrMatrixKey: string;
  // export let AVVideoYCbCrMatrix_ITU_R_2020: string;
  // export let AVVideoYCbCrMatrix_ITU_R_601_4: string;
  // export let AVVideoYCbCrMatrix_ITU_R_709_2: string;
  // export let AVVideoYCbCrMatrix_SMPTE_240M_1995: string;
  // export let NSAllRomanInputSourcesLocaleIdentifier: string;
  // export let NSAnimationTriggerOrderIn: string;
  // export let NSAnimationTriggerOrderOut: string;
  // export let NSApp: NSApplication;
  // export let NSBlack: number;
  // export let NSDarkGray: number;
  // export let NSDirectionalEdgeInsetsZero: NSDirectionalEdgeInsets;
  // export let NSLightGray: number;
  // export let NSMultipleValuesMarker: any;
  // export let NSNoSelectionMarker: any;
  // export let NSNotApplicableMarker: any;
  // export let NSTypeIdentifierAddressText: string;
  // export let NSTypeIdentifierDateText: string;
  // export let NSTypeIdentifierPhoneNumberText: string;
  // export let NSTypeIdentifierTransitInformationText: string;
  // export let NSUnderlineByWord: NSUnderlineStyle;
  // export let NSUnderlinePatternDash: NSUnderlineStyle;
  // export let NSUnderlinePatternDashDot: NSUnderlineStyle;
  // export let NSUnderlinePatternDashDotDot: NSUnderlineStyle;
  // export let NSUnderlinePatternDot: NSUnderlineStyle;
  // export let NSUnderlinePatternSolid: NSUnderlineStyle;
  // export let NSUserActivityDocumentURLKey: string;
  // export let NSWhite: number;
  // export let NSAddedPersistentStoresKey: string;
  // export let NSAffectedObjectsErrorKey: string;
  // export let NSAffectedStoresErrorKey: string;
  // export let NSBinaryStoreInsecureDecodingCompatibilityOption: string;
  // export let NSBinaryStoreSecureDecodingClasses: string;
  // export let NSBinaryStoreType: string;
  // export let NSCoreDataCoreSpotlightExporter: string;
  // export let NSCoreDataVersionNumber: number;
  // export let NSDeletedObjectsKey: string;
  // export let NSDetailedErrorsKey: string;
  // export let NSErrorMergePolicy: any;
  // export let NSErrorMergePolicy: any;
  // export let NSFetchRequestExpressionType: NSExpression.ExpressionType;
  // export let NSIgnorePersistentStoreVersioningOption: string;
  // export let NSInMemoryStoreType: string;
  // export let NSInferMappingModelAutomaticallyOption: string;
  // export let NSInsertedObjectsKey: string;
  // export let NSInvalidatedAllObjectsKey: string;
  // export let NSInvalidatedObjectsKey: string;
  // export let NSManagedObjectContextDidSaveNotification: string;
  // export let NSManagedObjectContextObjectsDidChangeNotification: string;
  // export let NSManagedObjectContextQueryGenerationKey: string;
  // export let NSManagedObjectContextWillSaveNotification: string;
  // export let NSMergeByPropertyObjectTrumpMergePolicy: any;
  // export let NSMergeByPropertyObjectTrumpMergePolicy: any;
  // export let NSMergeByPropertyStoreTrumpMergePolicy: any;
  // export let NSMergeByPropertyStoreTrumpMergePolicy: any;
  // export let NSMigratePersistentStoresAutomaticallyOption: string;
  // export let NSMigrationDestinationObjectKey: string;
  // export let NSMigrationEntityMappingKey: string;
  // export let NSMigrationEntityPolicyKey: string;
  // export let NSMigrationManagerKey: string;
  // export let NSMigrationPropertyMappingKey: string;
  // export let NSMigrationSourceObjectKey: string;
  // export let NSOverwriteMergePolicy: any;
  // export let NSOverwriteMergePolicy: any;
  // export let NSPersistentHistoryTokenKey: string;
  // export let NSPersistentHistoryTrackingKey: string;
  // export let NSPersistentStoreConnectionPoolMaxSizeKey: string;
  // export let NSPersistentStoreCoordinatorStoresDidChangeNotification: string;
  // export let NSPersistentStoreCoordinatorStoresWillChangeNotification: string;
  // export let NSPersistentStoreCoordinatorWillRemoveStoreNotification: string;
  // export let NSPersistentStoreForceDestroyOption: string;
  // export let NSPersistentStoreOSCompatibility: string;
  // export let NSPersistentStoreRemoteChangeNotification: string;
  // export let NSPersistentStoreRemoteChangeNotificationPostOptionKey: string;
  // export let NSPersistentStoreSaveConflictsErrorKey: string;
  // export let NSPersistentStoreTimeoutOption: string;
  // export let NSPersistentStoreURLKey: string;
  // export let NSReadOnlyPersistentStoreOption: string;
  // export let NSRefreshedObjectsKey: string;
  // export let NSRemovedPersistentStoresKey: string;
  // export let NSRollbackMergePolicy: any;
  // export let NSRollbackMergePolicy: any;
  // export let NSSQLiteAnalyzeOption: string;
  // export let NSSQLiteErrorDomain: string;
  // export let NSSQLiteManualVacuumOption: string;
  // export let NSSQLitePragmasOption: string;
  // export let NSSQLiteStoreType: string;
  // export let NSStoreModelVersionHashesKey: string;
  // export let NSStoreModelVersionIdentifiersKey: string;
  // export let NSStoreTypeKey: string;
  // export let NSStoreUUIDKey: string;
  // export let NSUUIDChangedPersistentStoresKey: string;
  // export let NSUpdatedObjectsKey: string;
  // export let NSValidateXMLStoreOption: string;
  // export let NSValidationKeyErrorKey: string;
  // export let NSValidationObjectErrorKey: string;
  // export let NSValidationPredicateErrorKey: string;
  // export let NSValidationValueErrorKey: string;
  // export let NSXMLStoreType: string;
  // export let kCFAbsoluteTimeIntervalSince1904: number;
  // export let kCFAbsoluteTimeIntervalSince1970: number;
  // export let kCFAllocatorDefault: any;
  // export let kCFAllocatorMalloc: any;
  // export let kCFAllocatorMallocZone: any;
  // export let kCFAllocatorNull: any;
  // export let kCFAllocatorSystemDefault: any;
  // export let kCFAllocatorUseContext: any;
  // export let kCFBooleanFalse: number;
  // export let kCFBooleanTrue: number;
  // export let kCFBundleDevelopmentRegionKey: string;
  // export let kCFBundleExecutableKey: string;
  // export let kCFBundleIdentifierKey: string;
  // export let kCFBundleInfoDictionaryVersionKey: string;
  // export let kCFBundleLocalizationsKey: string;
  // export let kCFBundleNameKey: string;
  // export let kCFBundleVersionKey: string;
  // export let kCFCopyStringBagCallBacks: CFBagCallBacks;
  // export let kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
  // export let kCFCopyStringSetCallBacks: CFSetCallBacks;
  // export let kCFCoreFoundationVersionNumber: number;
  // export let kCFErrorDescriptionKey: string;
  // export let kCFErrorDomainCocoa: any;
  // export let kCFErrorDomainMach: any;
  // export let kCFErrorDomainOSStatus: any;
  // export let kCFErrorDomainPOSIX: any;
  // export let kCFErrorFilePathKey: string;
  // export let kCFErrorLocalizedDescriptionKey: string;
  // export let kCFErrorLocalizedFailureKey: string;
  // export let kCFErrorLocalizedFailureReasonKey: string;
  // export let kCFErrorLocalizedRecoverySuggestionKey: string;
  // export let kCFErrorURLKey: string;
  // export let kCFErrorUnderlyingErrorKey: string;
  // export let kCFNotFound: number;
  // export let kCFNull: NSNull;
  // export let kCFNumberNaN: number;
  // export let kCFNumberNegativeInfinity: number;
  // export let kCFNumberPositiveInfinity: number;
  // export let kCFPlugInDynamicRegisterFunctionKey: string;
  // export let kCFPlugInDynamicRegistrationKey: string;
  // export let kCFPlugInFactoriesKey: string;
  // export let kCFPlugInTypesKey: string;
  // export let kCFPlugInUnloadFunctionKey: string;
  // export let kCFPreferencesAnyApplication: string;
  // export let kCFPreferencesAnyHost: string;
  // export let kCFPreferencesAnyUser: string;
  // export let kCFPreferencesCurrentApplication: string;
  // export let kCFPreferencesCurrentHost: string;
  // export let kCFPreferencesCurrentUser: string;
  // export let kCFSocketCommandKey: string;
  // export let kCFSocketErrorKey: string;
  // export let kCFSocketNameKey: string;
  // export let kCFSocketRegisterCommand: string;
  // export let kCFSocketResultKey: string;
  // export let kCFSocketRetrieveCommand: string;
  // export let kCFSocketValueKey: string;
  // export let kCFStreamErrorDomainSOCKS: number;
  // export let kCFStreamErrorDomainSSL: number;
  // export let kCFStreamPropertySOCKSPassword: string;
  // export let kCFStreamPropertySOCKSProxy: string;
  // export let kCFStreamPropertySOCKSProxyHost: string;
  // export let kCFStreamPropertySOCKSProxyPort: string;
  // export let kCFStreamPropertySOCKSUser: string;
  // export let kCFStreamPropertySOCKSVersion: string;
  // export let kCFStreamPropertyShouldCloseNativeSocket: string;
  // export let kCFStreamPropertySocketSecurityLevel: string;
  // export let kCFStreamSocketSOCKSVersion4: string;
  // export let kCFStreamSocketSOCKSVersion5: string;
  // export let kCFStreamSocketSecurityLevelNegotiatedSSL: string;
  // export let kCFStreamSocketSecurityLevelNone: string;
  // export let kCFStreamSocketSecurityLevelTLSv1: string;
  // export let kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
  // export let kCFStringTransformFullwidthHalfwidth: string;
  // export let kCFStringTransformHiraganaKatakana: string;
  // export let kCFStringTransformLatinArabic: string;
  // export let kCFStringTransformLatinCyrillic: string;
  // export let kCFStringTransformLatinGreek: string;
  // export let kCFStringTransformLatinHangul: string;
  // export let kCFStringTransformLatinHebrew: string;
  // export let kCFStringTransformLatinHiragana: string;
  // export let kCFStringTransformLatinKatakana: string;
  // export let kCFStringTransformLatinThai: string;
  // export let kCFStringTransformMandarinLatin: string;
  // export let kCFStringTransformStripCombiningMarks: string;
  // export let kCFStringTransformStripDiacritics: string;
  // export let kCFStringTransformToLatin: string;
  // export let kCFStringTransformToUnicodeName: string;
  // export let kCFStringTransformToXMLHex: string;
  // export let kCFTypeArrayCallBacks: CFArrayCallBacks;
  // export let kCFTypeBagCallBacks: CFBagCallBacks;
  // export let kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
  // export let kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
  // export let kCFTypeSetCallBacks: CFSetCallBacks;
  // export let kCFURLAddedToDirectoryDateKey: string;
  // export let kCFURLApplicationIsScriptableKey: string;
  // export let kCFURLAttributeModificationDateKey: string;
  // export let kCFURLCanonicalPathKey: string;
  // export let kCFURLContentAccessDateKey: string;
  // export let kCFURLContentModificationDateKey: string;
  // export let kCFURLCreationDateKey: string;
  // export let kCFURLDocumentIdentifierKey: string;
  // export let kCFURLFileAllocatedSizeKey: string;
  // export let kCFURLFileResourceIdentifierKey: string;
  // export let kCFURLFileResourceTypeBlockSpecial: string;
  // export let kCFURLFileResourceTypeCharacterSpecial: string;
  // export let kCFURLFileResourceTypeDirectory: string;
  // export let kCFURLFileResourceTypeKey: string;
  // export let kCFURLFileResourceTypeNamedPipe: string;
  // export let kCFURLFileResourceTypeRegular: string;
  // export let kCFURLFileResourceTypeSocket: string;
  // export let kCFURLFileResourceTypeSymbolicLink: string;
  // export let kCFURLFileResourceTypeUnknown: string;
  // export let kCFURLFileSecurityKey: string;
  // export let kCFURLFileSizeKey: string;
  // export let kCFURLGenerationIdentifierKey: string;
  // export let kCFURLHasHiddenExtensionKey: string;
  // export let kCFURLIsAliasFileKey: string;
  // export let kCFURLIsApplicationKey: string;
  // export let kCFURLIsDirectoryKey: string;
  // export let kCFURLIsExcludedFromBackupKey: string;
  // export let kCFURLIsExecutableKey: string;
  // export let kCFURLIsHiddenKey: string;
  // export let kCFURLIsMountTriggerKey: string;
  // export let kCFURLIsPackageKey: string;
  // export let kCFURLIsReadableKey: string;
  // export let kCFURLIsRegularFileKey: string;
  // export let kCFURLIsSymbolicLinkKey: string;
  // export let kCFURLIsSystemImmutableKey: string;
  // export let kCFURLIsUbiquitousItemKey: string;
  // export let kCFURLIsUserImmutableKey: string;
  // export let kCFURLIsVolumeKey: string;
  // export let kCFURLIsWritableKey: string;
  // export let kCFURLKeysOfUnsetValuesKey: string;
  // export let kCFURLLabelNumberKey: string;
  // export let kCFURLLinkCountKey: string;
  // export let kCFURLLocalizedLabelKey: string;
  // export let kCFURLLocalizedNameKey: string;
  // export let kCFURLLocalizedTypeDescriptionKey: string;
  // export let kCFURLNameKey: string;
  // export let kCFURLParentDirectoryURLKey: string;
  // export let kCFURLPathKey: string;
  // export let kCFURLPreferredIOBlockSizeKey: string;
  // export let kCFURLQuarantinePropertiesKey: string;
  // export let kCFURLTagNamesKey: string;
  // export let kCFURLTotalFileAllocatedSizeKey: string;
  // export let kCFURLTotalFileSizeKey: string;
  // export let kCFURLTypeIdentifierKey: string;
  // export let kCFURLUbiquitousItemDownloadingErrorKey: string;
  // export let kCFURLUbiquitousItemDownloadingStatusCurrent: string;
  // export let kCFURLUbiquitousItemDownloadingStatusDownloaded: string;
  // export let kCFURLUbiquitousItemDownloadingStatusKey: string;
  // export let kCFURLUbiquitousItemDownloadingStatusNotDownloaded: string;
  // export let kCFURLUbiquitousItemHasUnresolvedConflictsKey: string;
  // export let kCFURLUbiquitousItemIsDownloadingKey: string;
  // export let kCFURLUbiquitousItemIsUploadedKey: string;
  // export let kCFURLUbiquitousItemIsUploadingKey: string;
  // export let kCFURLUbiquitousItemUploadingErrorKey: string;
  // export let kCFURLVolumeAvailableCapacityForImportantUsageKey: string;
  // export let kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: string;
  // export let kCFURLVolumeAvailableCapacityKey: string;
  // export let kCFURLVolumeCreationDateKey: string;
  // export let kCFURLVolumeIdentifierKey: string;
  // export let kCFURLVolumeIsAutomountedKey: string;
  // export let kCFURLVolumeIsBrowsableKey: string;
  // export let kCFURLVolumeIsEjectableKey: string;
  // export let kCFURLVolumeIsEncryptedKey: string;
  // export let kCFURLVolumeIsInternalKey: string;
  // export let kCFURLVolumeIsJournalingKey: string;
  // export let kCFURLVolumeIsLocalKey: string;
  // export let kCFURLVolumeIsReadOnlyKey: string;
  // export let kCFURLVolumeIsRemovableKey: string;
  // export let kCFURLVolumeIsRootFileSystemKey: string;
  // export let kCFURLVolumeLocalizedFormatDescriptionKey: string;
  // export let kCFURLVolumeLocalizedNameKey: string;
  // export let kCFURLVolumeMaximumFileSizeKey: string;
  // export let kCFURLVolumeNameKey: string;
  // export let kCFURLVolumeResourceCountKey: string;
  // export let kCFURLVolumeSupportsAccessPermissionsKey: string;
  // export let kCFURLVolumeSupportsAdvisoryFileLockingKey: string;
  // export let kCFURLVolumeSupportsCasePreservedNamesKey: string;
  // export let kCFURLVolumeSupportsCaseSensitiveNamesKey: string;
  // export let kCFURLVolumeSupportsCompressionKey: string;
  // export let kCFURLVolumeSupportsExclusiveRenamingKey: string;
  // export let kCFURLVolumeSupportsExtendedSecurityKey: string;
  // export let kCFURLVolumeSupportsFileCloningKey: string;
  // export let kCFURLVolumeSupportsHardLinksKey: string;
  // export let kCFURLVolumeSupportsImmutableFilesKey: string;
  // export let kCFURLVolumeSupportsJournalingKey: string;
  // export let kCFURLVolumeSupportsPersistentIDsKey: string;
  // export let kCFURLVolumeSupportsRenamingKey: string;
  // export let kCFURLVolumeSupportsRootDirectoryDatesKey: string;
  // export let kCFURLVolumeSupportsSparseFilesKey: string;
  // export let kCFURLVolumeSupportsSwapRenamingKey: string;
  // export let kCFURLVolumeSupportsSymbolicLinksKey: string;
  // export let kCFURLVolumeSupportsVolumeSizesKey: string;
  // export let kCFURLVolumeSupportsZeroRunsKey: string;
  // export let kCFURLVolumeTotalCapacityKey: string;
  // export let kCFURLVolumeURLForRemountingKey: string;
  // export let kCFURLVolumeURLKey: string;
  // export let kCFURLVolumeUUIDStringKey: string;
  // export let kCFUserNotificationAlertHeaderKey: string;
  // export let kCFUserNotificationAlertMessageKey: string;
  // export let kCFUserNotificationAlertTopMostKey: string;
  // export let kCFUserNotificationAlternateButtonTitleKey: string;
  // export let kCFUserNotificationCheckBoxTitlesKey: string;
  // export let kCFUserNotificationDefaultButtonTitleKey: string;
  // export let kCFUserNotificationIconURLKey: string;
  // export let kCFUserNotificationKeyboardTypesKey: string;
  // export let kCFUserNotificationLocalizationURLKey: string;
  // export let kCFUserNotificationOtherButtonTitleKey: string;
  // export let kCFUserNotificationPopUpSelectionKey: string;
  // export let kCFUserNotificationPopUpTitlesKey: string;
  // export let kCFUserNotificationProgressIndicatorValueKey: string;
  // export let kCFUserNotificationSoundURLKey: string;
  // export let kCFUserNotificationTextFieldTitlesKey: string;
  // export let kCFUserNotificationTextFieldValuesKey: string;
  // export let kCFXMLTreeErrorDescription: string;
  // export let kCFXMLTreeErrorLineNumber: string;
  // export let kCFXMLTreeErrorLocation: string;
  // export let kCFXMLTreeErrorStatusCode: string;
  // export let kCGDisplayShowDuplicateLowResolutionModes: string;
  // export let kCGFontIndexInvalid: number;
  // export let kCGFontIndexMax: number;
  // export let kCGGlyphMax: number;
  // export let kCGPDFContextAccessPermissions: string;
  // export let kCGPDFContextAllowsCopying: string;
  // export let kCGPDFContextAllowsPrinting: string;
  // export let kCGPDFContextArtBox: string;
  // export let kCGPDFContextAuthor: string;
  // export let kCGPDFContextBleedBox: string;
  // export let kCGPDFContextCreator: string;
  // export let kCGPDFContextCropBox: string;
  // export let kCGPDFContextEncryptionKeyLength: string;
  // export let kCGPDFContextKeywords: string;
  // export let kCGPDFContextMediaBox: string;
  // export let kCGPDFContextOutputIntent: string;
  // export let kCGPDFContextOutputIntents: string;
  // export let kCGPDFContextOwnerPassword: string;
  // export let kCGPDFContextSubject: string;
  // export let kCGPDFContextTitle: string;
  // export let kCGPDFContextTrimBox: string;
  // export let kCGPDFContextUserPassword: string;
  // export let kCGPDFOutlineChildren: string;
  // export let kCGPDFOutlineDestination: string;
  // export let kCGPDFOutlineDestinationRect: string;
  // export let kCGPDFOutlineTitle: string;
  // export let kCGPDFXDestinationOutputProfile: string;
  // export let kCGPDFXInfo: string;
  // export let kCGPDFXOutputCondition: string;
  // export let kCGPDFXOutputConditionIdentifier: string;
  // export let kCGPDFXOutputIntentSubtype: string;
  // export let kCGPDFXRegistryName: string;
  // export let kCGWindowAlpha: string;
  // export let kCGWindowBackingLocationVideoMemory: string;
  // export let kCGWindowBounds: string;
  // export let kCGWindowIsOnscreen: string;
  // export let kCGWindowLayer: string;
  // export let kCGWindowMemoryUsage: string;
  // export let kCGWindowName: string;
  // export let kCGWindowNumber: string;
  // export let kCGWindowOwnerName: string;
  // export let kCGWindowOwnerPID: string;
  // export let kCGWindowSharingState: string;
  // export let kCGWindowStoreType: string;
  // export let CIDetectorAccuracy: string;
  // export let CIDetectorAccuracyHigh: string;
  // export let CIDetectorAccuracyLow: string;
  // export let CIDetectorAspectRatio: string;
  // export let CIDetectorEyeBlink: string;
  // export let CIDetectorFocalLength: string;
  // export let CIDetectorImageOrientation: string;
  // export let CIDetectorMaxFeatureCount: string;
  // export let CIDetectorMinFeatureSize: string;
  // export let CIDetectorNumberOfAngles: string;
  // export let CIDetectorReturnSubFeatures: string;
  // export let CIDetectorSmile: string;
  // export let CIDetectorTracking: string;
  // export let CIDetectorTypeFace: string;
  // export let CIDetectorTypeQRCode: string;
  // export let CIDetectorTypeRectangle: string;
  // export let CIDetectorTypeText: string;
  // export let CIFeatureTypeFace: string;
  // export let CIFeatureTypeQRCode: string;
  // export let CIFeatureTypeRectangle: string;
  // export let CIFeatureTypeText: string;
  // export let kCIApplyOptionColorSpace: string;
  // export let kCIApplyOptionDefinition: string;
  // export let kCIApplyOptionExtent: string;
  // export let kCIApplyOptionUserInfo: string;
  // export let kCIAttributeClass: string;
  // export let kCIAttributeDefault: string;
  // export let kCIAttributeDescription: string;
  // export let kCIAttributeDisplayName: string;
  // export let kCIAttributeFilterAvailable_Mac: string;
  // export let kCIAttributeFilterAvailable_iOS: string;
  // export let kCIAttributeFilterCategories: string;
  // export let kCIAttributeFilterDisplayName: string;
  // export let kCIAttributeFilterName: string;
  // export let kCIAttributeIdentity: string;
  // export let kCIAttributeMax: string;
  // export let kCIAttributeMin: string;
  // export let kCIAttributeName: string;
  // export let kCIAttributeReferenceDocumentation: string;
  // export let kCIAttributeSliderMax: string;
  // export let kCIAttributeSliderMin: string;
  // export let kCIAttributeType: string;
  // export let kCIAttributeTypeAngle: string;
  // export let kCIAttributeTypeBoolean: string;
  // export let kCIAttributeTypeColor: string;
  // export let kCIAttributeTypeCount: string;
  // export let kCIAttributeTypeDistance: string;
  // export let kCIAttributeTypeGradient: string;
  // export let kCIAttributeTypeImage: string;
  // export let kCIAttributeTypeInteger: string;
  // export let kCIAttributeTypeOffset: string;
  // export let kCIAttributeTypeOpaqueColor: string;
  // export let kCIAttributeTypePosition: string;
  // export let kCIAttributeTypePosition3: string;
  // export let kCIAttributeTypeRectangle: string;
  // export let kCIAttributeTypeScalar: string;
  // export let kCIAttributeTypeTime: string;
  // export let kCIAttributeTypeTransform: string;
  // export let kCICategoryBlur: string;
  // export let kCICategoryBuiltIn: string;
  // export let kCICategoryColorAdjustment: string;
  // export let kCICategoryColorEffect: string;
  // export let kCICategoryCompositeOperation: string;
  // export let kCICategoryDistortionEffect: string;
  // export let kCICategoryFilterGenerator: string;
  // export let kCICategoryGenerator: string;
  // export let kCICategoryGeometryAdjustment: string;
  // export let kCICategoryGradient: string;
  // export let kCICategoryHalftoneEffect: string;
  // export let kCICategoryHighDynamicRange: string;
  // export let kCICategoryInterlaced: string;
  // export let kCICategoryNonSquarePixels: string;
  // export let kCICategoryReduction: string;
  // export let kCICategorySharpen: string;
  // export let kCICategoryStillImage: string;
  // export let kCICategoryStylize: string;
  // export let kCICategoryTileEffect: string;
  // export let kCICategoryTransition: string;
  // export let kCICategoryVideo: string;
  // export let kCIFilterGeneratorExportedKey: string;
  // export let kCIFilterGeneratorExportedKeyName: string;
  // export let kCIFilterGeneratorExportedKeyTargetObject: string;
  // export let kCIInputAmountKey: string;
  // export let kCIInputAngleKey: string;
  // export let kCIInputAspectRatioKey: string;
  // export let kCIInputBackgroundImageKey: string;
  // export let kCIInputBiasKey: string;
  // export let kCIInputBrightnessKey: string;
  // export let kCIInputCenterKey: string;
  // export let kCIInputColorKey: string;
  // export let kCIInputContrastKey: string;
  // export let kCIInputDepthImageKey: string;
  // export let kCIInputDisparityImageKey: string;
  // export let kCIInputEVKey: string;
  // export let kCIInputEnableEDRModeKey: string;
  // export let kCIInputExtentKey: string;
  // export let kCIInputGradientImageKey: string;
  // export let kCIInputImageKey: string;
  // export let kCIInputIntensityKey: string;
  // export let kCIInputMaskImageKey: string;
  // export let kCIInputMatteImageKey: string;
  // export let kCIInputRadiusKey: string;
  // export let kCIInputRefractionKey: string;
  // export let kCIInputSaturationKey: string;
  // export let kCIInputScaleKey: string;
  // export let kCIInputShadingImageKey: string;
  // export let kCIInputSharpnessKey: string;
  // export let kCIInputTargetImageKey: string;
  // export let kCIInputTimeKey: string;
  // export let kCIInputTransformKey: string;
  // export let kCIInputVersionKey: string;
  // export let kCIInputWeightsKey: string;
  // export let kCIInputWidthKey: string;
  // export let kCIOutputImageKey: string;
  // export let kCISamplerAffineMatrix: string;
  // export let kCISamplerColorSpace: string;
  // export let kCISamplerFilterLinear: string;
  // export let kCISamplerFilterMode: string;
  // export let kCISamplerFilterNearest: string;
  // export let kCISamplerWrapBlack: string;
  // export let kCISamplerWrapClamp: string;
  // export let kCISamplerWrapMode: string;
  // export let kCIUIParameterSet: string;
  // export let kCIUISetAdvanced: string;
  // export let kCIUISetBasic: string;
  // export let kCIUISetDevelopment: string;
  // export let kCIUISetIntermediate: string;
  // export let kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha: string;
  // export let kCMFormatDescriptionAlphaChannelMode_StraightAlpha: string;
  // export let kCMFormatDescriptionChromaLocation_Bottom: string;
  // export let kCMFormatDescriptionChromaLocation_BottomLeft: string;
  // export let kCMFormatDescriptionChromaLocation_Center: string;
  // export let kCMFormatDescriptionChromaLocation_DV420: string;
  // export let kCMFormatDescriptionChromaLocation_Left: string;
  // export let kCMFormatDescriptionChromaLocation_Top: string;
  // export let kCMFormatDescriptionChromaLocation_TopLeft: string;
  // export let kCMFormatDescriptionColorPrimaries_DCI_P3: string;
  // export let kCMFormatDescriptionColorPrimaries_EBU_3213: string;
  // export let kCMFormatDescriptionColorPrimaries_ITU_R_2020: string;
  // export let kCMFormatDescriptionColorPrimaries_ITU_R_709_2: string;
  // export let kCMFormatDescriptionColorPrimaries_P22: string;
  // export let kCMFormatDescriptionColorPrimaries_P3_D65: string;
  // export let kCMFormatDescriptionColorPrimaries_SMPTE_C: string;
  // export let kCMFormatDescriptionConformsToMPEG2VideoProfile: string;
  // export let kCMFormatDescriptionExtensionKey_MetadataKeyTable: string;
  // export let kCMFormatDescriptionExtension_AlphaChannelMode: string;
  // export let kCMFormatDescriptionExtension_AlternativeTransferCharacteristics: string;
  // export let kCMFormatDescriptionExtension_AuxiliaryTypeInfo: string;
  // export let kCMFormatDescriptionExtension_BytesPerRow: string;
  // export let kCMFormatDescriptionExtension_ChromaLocationBottomField: string;
  // export let kCMFormatDescriptionExtension_ChromaLocationTopField: string;
  // export let kCMFormatDescriptionExtension_CleanAperture: string;
  // export let kCMFormatDescriptionExtension_ColorPrimaries: string;
  // export let kCMFormatDescriptionExtension_ContainsAlphaChannel: string;
  // export let kCMFormatDescriptionExtension_ContentLightLevelInfo: string;
  // export let kCMFormatDescriptionExtension_Depth: string;
  // export let kCMFormatDescriptionExtension_FieldCount: string;
  // export let kCMFormatDescriptionExtension_FieldDetail: string;
  // export let kCMFormatDescriptionExtension_FormatName: string;
  // export let kCMFormatDescriptionExtension_FullRangeVideo: string;
  // export let kCMFormatDescriptionExtension_GammaLevel: string;
  // export let kCMFormatDescriptionExtension_ICCProfile: string;
  // export let kCMFormatDescriptionExtension_MasteringDisplayColorVolume: string;
  // export let kCMFormatDescriptionExtension_OriginalCompressionSettings: string;
  // export let kCMFormatDescriptionExtension_PixelAspectRatio: string;
  // export let kCMFormatDescriptionExtension_RevisionLevel: string;
  // export let kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms: string;
  // export let kCMFormatDescriptionExtension_SpatialQuality: string;
  // export let kCMFormatDescriptionExtension_TemporalQuality: string;
  // export let kCMFormatDescriptionExtension_TransferFunction: string;
  // export let kCMFormatDescriptionExtension_Vendor: string;
  // export let kCMFormatDescriptionExtension_VerbatimISOSampleEntry: string;
  // export let kCMFormatDescriptionExtension_VerbatimImageDescription: string;
  // export let kCMFormatDescriptionExtension_VerbatimSampleDescription: string;
  // export let kCMFormatDescriptionExtension_Version: string;
  // export let kCMFormatDescriptionExtension_YCbCrMatrix: string;
  // export let kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly: string;
  // export let kCMFormatDescriptionFieldDetail_SpatialFirstLineLate: string;
  // export let kCMFormatDescriptionFieldDetail_TemporalBottomFirst: string;
  // export let kCMFormatDescriptionFieldDetail_TemporalTopFirst: string;
  // export let kCMFormatDescriptionKey_CleanApertureHeight: string;
  // export let kCMFormatDescriptionKey_CleanApertureHeightRational: string;
  // export let kCMFormatDescriptionKey_CleanApertureHorizontalOffset: string;
  // export let kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational: string;
  // export let kCMFormatDescriptionKey_CleanApertureVerticalOffset: string;
  // export let kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational: string;
  // export let kCMFormatDescriptionKey_CleanApertureWidth: string;
  // export let kCMFormatDescriptionKey_CleanApertureWidthRational: string;
  // export let kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing: string;
  // export let kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing: string;
  // export let kCMFormatDescriptionTransferFunction_ITU_R_2020: string;
  // export let kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG: string;
  // export let kCMFormatDescriptionTransferFunction_ITU_R_709_2: string;
  // export let kCMFormatDescriptionTransferFunction_Linear: string;
  // export let kCMFormatDescriptionTransferFunction_SMPTE_240M_1995: string;
  // export let kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ: string;
  // export let kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1: string;
  // export let kCMFormatDescriptionTransferFunction_UseGamma: string;
  // export let kCMFormatDescriptionTransferFunction_sRGB: string;
  // export let kCMFormatDescriptionVendor_Apple: string;
  // export let kCMFormatDescriptionYCbCrMatrix_ITU_R_2020: string;
  // export let kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4: string;
  // export let kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2: string;
  // export let kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995: string;
  // export let kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags: string;
  // export let kCMHEVCTemporalLevelInfoKey_LevelIndex: string;
  // export let kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags: string;
  // export let kCMHEVCTemporalLevelInfoKey_ProfileIndex: string;
  // export let kCMHEVCTemporalLevelInfoKey_ProfileSpace: string;
  // export let kCMHEVCTemporalLevelInfoKey_TemporalLevel: string;
  // export let kCMHEVCTemporalLevelInfoKey_TierFlag: string;
  // export let kCMMemoryPoolOption_AgeOutPeriod: string;
  // export let kCMMetadataBaseDataType_AffineTransformF64: string;
  // export let kCMMetadataBaseDataType_BMP: string;
  // export let kCMMetadataBaseDataType_DimensionsF32: string;
  // export let kCMMetadataBaseDataType_Float32: string;
  // export let kCMMetadataBaseDataType_Float64: string;
  // export let kCMMetadataBaseDataType_GIF: string;
  // export let kCMMetadataBaseDataType_JPEG: string;
  // export let kCMMetadataBaseDataType_JSON: string;
  // export let kCMMetadataBaseDataType_PNG: string;
  // export let kCMMetadataBaseDataType_PerspectiveTransformF64: string;
  // export let kCMMetadataBaseDataType_PointF32: string;
  // export let kCMMetadataBaseDataType_PolygonF32: string;
  // export let kCMMetadataBaseDataType_PolylineF32: string;
  // export let kCMMetadataBaseDataType_RawData: string;
  // export let kCMMetadataBaseDataType_RectF32: string;
  // export let kCMMetadataBaseDataType_SInt16: string;
  // export let kCMMetadataBaseDataType_SInt32: string;
  // export let kCMMetadataBaseDataType_SInt64: string;
  // export let kCMMetadataBaseDataType_SInt8: string;
  // export let kCMMetadataBaseDataType_UInt16: string;
  // export let kCMMetadataBaseDataType_UInt32: string;
  // export let kCMMetadataBaseDataType_UInt64: string;
  // export let kCMMetadataBaseDataType_UInt8: string;
  // export let kCMMetadataBaseDataType_UTF16: string;
  // export let kCMMetadataBaseDataType_UTF8: string;
  // export let kCMMetadataDataType_QuickTimeMetadataDirection: string;
  // export let kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709: string;
  // export let kCMMetadataFormatDescriptionKey_ConformingDataTypes: string;
  // export let kCMMetadataFormatDescriptionKey_DataType: string;
  // export let kCMMetadataFormatDescriptionKey_DataTypeNamespace: string;
  // export let kCMMetadataFormatDescriptionKey_LanguageTag: string;
  // export let kCMMetadataFormatDescriptionKey_LocalID: string;
  // export let kCMMetadataFormatDescriptionKey_Namespace: string;
  // export let kCMMetadataFormatDescriptionKey_SetupData: string;
  // export let kCMMetadataFormatDescriptionKey_StructuralDependency: string;
  // export let kCMMetadataFormatDescriptionKey_Value: string;
  // export let kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType: string;
  // export let kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag: string;
  // export let kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier: string;
  // export let kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData: string;
  // export let kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency: string;
  // export let kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag: string;
  // export let kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing: string;
  // export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform: string;
  // export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions: string;
  // export let kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709: string;
  // export let kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform: string;
  // export let kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation: string;
  // export let kCMMetadataKeySpace_HLSDateRange: string;
  // export let kCMMetadataKeySpace_ID3: string;
  // export let kCMMetadataKeySpace_ISOUserData: string;
  // export let kCMMetadataKeySpace_Icy: string;
  // export let kCMMetadataKeySpace_QuickTimeMetadata: string;
  // export let kCMMetadataKeySpace_QuickTimeUserData: string;
  // export let kCMMetadataKeySpace_iTunes: string;
  // export let kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount: string;
  // export let kCMSampleAttachmentKey_DependsOnOthers: string;
  // export let kCMSampleAttachmentKey_DisplayImmediately: string;
  // export let kCMSampleAttachmentKey_DoNotDisplay: string;
  // export let kCMSampleAttachmentKey_EarlierDisplayTimesAllowed: string;
  // export let kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess: string;
  // export let kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType: string;
  // export let kCMSampleAttachmentKey_HEVCTemporalLevelInfo: string;
  // export let kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess: string;
  // export let kCMSampleAttachmentKey_HasRedundantCoding: string;
  // export let kCMSampleAttachmentKey_IsDependedOnByOthers: string;
  // export let kCMSampleAttachmentKey_NotSync: string;
  // export let kCMSampleAttachmentKey_PartialSync: string;
  // export let kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix: string;
  // export let kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately: string;
  // export let kCMSampleBufferAttachmentKey_DrainAfterDecoding: string;
  // export let kCMSampleBufferAttachmentKey_DroppedFrameReason: string;
  // export let kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo: string;
  // export let kCMSampleBufferAttachmentKey_EmptyMedia: string;
  // export let kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration: string;
  // export let kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence: string;
  // export let kCMSampleBufferAttachmentKey_ForceKeyFrame: string;
  // export let kCMSampleBufferAttachmentKey_GradualDecoderRefresh: string;
  // export let kCMSampleBufferAttachmentKey_PermanentEmptyMedia: string;
  // export let kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed: string;
  // export let kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding: string;
  // export let kCMSampleBufferAttachmentKey_ResumeOutput: string;
  // export let kCMSampleBufferAttachmentKey_Reverse: string;
  // export let kCMSampleBufferAttachmentKey_SampleReferenceByteOffset: string;
  // export let kCMSampleBufferAttachmentKey_SampleReferenceURL: string;
  // export let kCMSampleBufferAttachmentKey_SpeedMultiplier: string;
  // export let kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo: string;
  // export let kCMSampleBufferAttachmentKey_TransitionID: string;
  // export let kCMSampleBufferAttachmentKey_TrimDurationAtEnd: string;
  // export let kCMSampleBufferAttachmentKey_TrimDurationAtStart: string;
  // export let kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS: string;
  // export let kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS: string;
  // export let kCMSampleBufferConduitNotificationParameter_ResumeTag: string;
  // export let kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange: string;
  // export let kCMSampleBufferConduitNotification_InhibitOutputUntil: string;
  // export let kCMSampleBufferConduitNotification_ResetOutput: string;
  // export let kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged: string;
  // export let kCMSampleBufferConsumerNotification_BufferConsumed: string;
  // export let kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch: string;
  // export let kCMSampleBufferDroppedFrameReason_Discontinuity: string;
  // export let kCMSampleBufferDroppedFrameReason_FrameWasLate: string;
  // export let kCMSampleBufferDroppedFrameReason_OutOfBuffers: string;
  // export let kCMSampleBufferLensStabilizationInfo_Active: string;
  // export let kCMSampleBufferLensStabilizationInfo_Off: string;
  // export let kCMSampleBufferLensStabilizationInfo_OutOfRange: string;
  // export let kCMSampleBufferLensStabilizationInfo_Unavailable: string;
  // export let kCMSampleBufferNotificationParameter_OSStatus: string;
  // export let kCMSampleBufferNotification_DataBecameReady: string;
  // export let kCMSampleBufferNotification_DataFailed: string;
  // export let kCMTextFormatDescriptionColor_Alpha: string;
  // export let kCMTextFormatDescriptionColor_Blue: string;
  // export let kCMTextFormatDescriptionColor_Green: string;
  // export let kCMTextFormatDescriptionColor_Red: string;
  // export let kCMTextFormatDescriptionExtension_BackgroundColor: string;
  // export let kCMTextFormatDescriptionExtension_DefaultFontName: string;
  // export let kCMTextFormatDescriptionExtension_DefaultStyle: string;
  // export let kCMTextFormatDescriptionExtension_DefaultTextBox: string;
  // export let kCMTextFormatDescriptionExtension_DisplayFlags: string;
  // export let kCMTextFormatDescriptionExtension_FontTable: string;
  // export let kCMTextFormatDescriptionExtension_HorizontalJustification: string;
  // export let kCMTextFormatDescriptionExtension_TextJustification: string;
  // export let kCMTextFormatDescriptionExtension_VerticalJustification: string;
  // export let kCMTextFormatDescriptionRect_Bottom: string;
  // export let kCMTextFormatDescriptionRect_Left: string;
  // export let kCMTextFormatDescriptionRect_Right: string;
  // export let kCMTextFormatDescriptionRect_Top: string;
  // export let kCMTextFormatDescriptionStyle_Ascent: string;
  // export let kCMTextFormatDescriptionStyle_EndChar: string;
  // export let kCMTextFormatDescriptionStyle_Font: string;
  // export let kCMTextFormatDescriptionStyle_FontFace: string;
  // export let kCMTextFormatDescriptionStyle_FontSize: string;
  // export let kCMTextFormatDescriptionStyle_ForegroundColor: string;
  // export let kCMTextFormatDescriptionStyle_Height: string;
  // export let kCMTextFormatDescriptionStyle_StartChar: string;
  // export let kCMTextMarkupAlignmentType_End: string;
  // export let kCMTextMarkupAlignmentType_Left: string;
  // export let kCMTextMarkupAlignmentType_Middle: string;
  // export let kCMTextMarkupAlignmentType_Right: string;
  // export let kCMTextMarkupAlignmentType_Start: string;
  // export let kCMTextMarkupAttribute_Alignment: string;
  // export let kCMTextMarkupAttribute_BackgroundColorARGB: string;
  // export let kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight: string;
  // export let kCMTextMarkupAttribute_BoldStyle: string;
  // export let kCMTextMarkupAttribute_CharacterBackgroundColorARGB: string;
  // export let kCMTextMarkupAttribute_CharacterEdgeStyle: string;
  // export let kCMTextMarkupAttribute_FontFamilyName: string;
  // export let kCMTextMarkupAttribute_ForegroundColorARGB: string;
  // export let kCMTextMarkupAttribute_GenericFontFamilyName: string;
  // export let kCMTextMarkupAttribute_ItalicStyle: string;
  // export let kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection: string;
  // export let kCMTextMarkupAttribute_RelativeFontSize: string;
  // export let kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection: string;
  // export let kCMTextMarkupAttribute_UnderlineStyle: string;
  // export let kCMTextMarkupAttribute_VerticalLayout: string;
  // export let kCMTextMarkupAttribute_WritingDirectionSizePercentage: string;
  // export let kCMTextMarkupCharacterEdgeStyle_Depressed: string;
  // export let kCMTextMarkupCharacterEdgeStyle_DropShadow: string;
  // export let kCMTextMarkupCharacterEdgeStyle_None: string;
  // export let kCMTextMarkupCharacterEdgeStyle_Raised: string;
  // export let kCMTextMarkupCharacterEdgeStyle_Uniform: string;
  // export let kCMTextMarkupGenericFontName_Casual: string;
  // export let kCMTextMarkupGenericFontName_Cursive: string;
  // export let kCMTextMarkupGenericFontName_Default: string;
  // export let kCMTextMarkupGenericFontName_Fantasy: string;
  // export let kCMTextMarkupGenericFontName_Monospace: string;
  // export let kCMTextMarkupGenericFontName_MonospaceSansSerif: string;
  // export let kCMTextMarkupGenericFontName_MonospaceSerif: string;
  // export let kCMTextMarkupGenericFontName_ProportionalSansSerif: string;
  // export let kCMTextMarkupGenericFontName_ProportionalSerif: string;
  // export let kCMTextMarkupGenericFontName_SansSerif: string;
  // export let kCMTextMarkupGenericFontName_Serif: string;
  // export let kCMTextMarkupGenericFontName_SmallCapital: string;
  // export let kCMTextVerticalLayout_LeftToRight: string;
  // export let kCMTextVerticalLayout_RightToLeft: string;
  // export let kCMTimeCodeFormatDescriptionExtension_SourceReferenceName: string;
  // export let kCMTimeCodeFormatDescriptionKey_LangCode: string;
  // export let kCMTimeCodeFormatDescriptionKey_Value: string;
  // export let kCMTimeEpochKey: string;
  // export let kCMTimeFlagsKey: string;
  // export let kCMTimeMappingSourceKey: string;
  // export let kCMTimeMappingTargetKey: string;
  // export let kCMTimeRangeDurationKey: string;
  // export let kCMTimeRangeStartKey: string;
  // export let kCMTimeScaleKey: string;
  // export let kCMTimeValueKey: string;
  // export let kCMTimebaseNotificationKey_EventTime: string;
  // export let kCMTimebaseNotification_EffectiveRateChanged: string;
  // export let kCMTimebaseNotification_TimeJumped: string;
  // export let kCMIOBlockBufferAttachmentKey_CVPixelBufferReference: string;
  // export let kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp: string;
  // export let kCMIOSampleBufferAttachmentKey_ClientSequenceID: string;
  // export let kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer: string;
  // export let kCMIOSampleBufferAttachmentKey_DiscontinuityFlags: string;
  // export let kCMIOSampleBufferAttachmentKey_HDV1_PackData: string;
  // export let kCMIOSampleBufferAttachmentKey_HDV2_VAUX: string;
  // export let kCMIOSampleBufferAttachmentKey_HostTime: string;
  // export let kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers: string;
  // export let kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp: string;
  // export let kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount: string;
  // export let kCMIOSampleBufferAttachmentKey_NoDataMarker: string;
  // export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer: string;
  // export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP: string;
  // export let kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo: string;
  // export let kCMIOSampleBufferAttachmentKey_RepeatedBufferContents: string;
  // export let kCMIOSampleBufferAttachmentKey_SMPTETime: string;
  // export let kCMIOSampleBufferAttachmentKey_SequenceNumber: string;
  // export let kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent: string;
  // export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState: string;
  // export let NSAppleEventTimeOutDefault: number;
  // export let NSAppleEventTimeOutNone: number;
  // export let NSAssertionHandlerKey: string;
  // export let NSCocoaErrorDomain: string;
  // export let NSDeallocateZombies: boolean;
  // export let NSDebugDescriptionErrorKey: string;
  // export let NSDebugEnabled: boolean;
  // export let NSEdgeInsetsZero: NSEdgeInsets;
  // export let NSExtensionItemAttachmentsKey: string;
  // export let NSExtensionItemAttributedContentTextKey: string;
  // export let NSExtensionItemAttributedTitleKey: string;
  // export let NSExtensionItemsAndErrorsKey: string;
  // export let NSExtensionJavaScriptPreprocessingResultsKey: string;
  // export let NSFileHandleNotificationDataItem: string;
  // export let NSFileHandleNotificationFileHandleItem: string;
  // export let NSFileManagerUnmountDissentingProcessIdentifierErrorKey: string;
  // export let NSFilePathErrorKey: string;
  // export let NSFoundationVersionNumber: number;
  // export let NSGrammarCorrections: string;
  // export let NSGrammarRange: string;
  // export let NSGrammarUserDescription: string;
  // export let NSHashTableCopyIn: NSPointerFunctions.Options;
  // export let NSHashTableObjectPointerPersonality: NSPointerFunctions.Options;
  // export let NSHashTableStrongMemory: NSPointerFunctions.Options;
  // export let NSHashTableWeakMemory: NSPointerFunctions.Options;
  // export let NSHelpAnchorErrorKey: string;
  // export let NSIntegerHashCallBacks: NSHashTableCallBacks;
  // export let NSIntegerMapKeyCallBacks: NSMapTableKeyCallBacks;
  // export let NSIntegerMapValueCallBacks: NSMapTableValueCallBacks;
  // export let NSItemProviderPreferredImageSizeKey: string;
  // export let NSKeepAllocationStatistics: boolean;
  // export let NSKeyedArchiveRootObjectKey: string;
  // export let NSLoadedClasses: string;
  // export let NSLocalizedDescriptionKey: string;
  // export let NSLocalizedFailureErrorKey: string;
  // export let NSLocalizedFailureReasonErrorKey: string;
  // export let NSLocalizedRecoveryOptionsErrorKey: string;
  // export let NSLocalizedRecoverySuggestionErrorKey: string;
  // export let NSMachErrorDomain: string;
  // export let NSMapTableCopyIn: NSPointerFunctions.Options;
  // export let NSMapTableObjectPointerPersonality: NSPointerFunctions.Options;
  // export let NSMapTableStrongMemory: NSPointerFunctions.Options;
  // export let NSMapTableWeakMemory: NSPointerFunctions.Options;
  // export let NSMetadataItemAcquisitionMakeKey: string;
  // export let NSMetadataItemAcquisitionModelKey: string;
  // export let NSMetadataItemAlbumKey: string;
  // export let NSMetadataItemAltitudeKey: string;
  // export let NSMetadataItemApertureKey: string;
  // export let NSMetadataItemAppleLoopDescriptorsKey: string;
  // export let NSMetadataItemAppleLoopsKeyFilterTypeKey: string;
  // export let NSMetadataItemAppleLoopsLoopModeKey: string;
  // export let NSMetadataItemAppleLoopsRootKeyKey: string;
  // export let NSMetadataItemApplicationCategoriesKey: string;
  // export let NSMetadataItemAttributeChangeDateKey: string;
  // export let NSMetadataItemAudiencesKey: string;
  // export let NSMetadataItemAudioBitRateKey: string;
  // export let NSMetadataItemAudioChannelCountKey: string;
  // export let NSMetadataItemAudioEncodingApplicationKey: string;
  // export let NSMetadataItemAudioSampleRateKey: string;
  // export let NSMetadataItemAudioTrackNumberKey: string;
  // export let NSMetadataItemAuthorAddressesKey: string;
  // export let NSMetadataItemAuthorEmailAddressesKey: string;
  // export let NSMetadataItemAuthorsKey: string;
  // export let NSMetadataItemBitsPerSampleKey: string;
  // export let NSMetadataItemCFBundleIdentifierKey: string;
  // export let NSMetadataItemCameraOwnerKey: string;
  // export let NSMetadataItemCityKey: string;
  // export let NSMetadataItemCodecsKey: string;
  // export let NSMetadataItemColorSpaceKey: string;
  // export let NSMetadataItemCommentKey: string;
  // export let NSMetadataItemComposerKey: string;
  // export let NSMetadataItemContactKeywordsKey: string;
  // export let NSMetadataItemContentCreationDateKey: string;
  // export let NSMetadataItemContentModificationDateKey: string;
  // export let NSMetadataItemContentTypeKey: string;
  // export let NSMetadataItemContentTypeTreeKey: string;
  // export let NSMetadataItemContributorsKey: string;
  // export let NSMetadataItemCopyrightKey: string;
  // export let NSMetadataItemCountryKey: string;
  // export let NSMetadataItemCoverageKey: string;
  // export let NSMetadataItemCreatorKey: string;
  // export let NSMetadataItemDateAddedKey: string;
  // export let NSMetadataItemDeliveryTypeKey: string;
  // export let NSMetadataItemDescriptionKey: string;
  // export let NSMetadataItemDirectorKey: string;
  // export let NSMetadataItemDisplayNameKey: string;
  // export let NSMetadataItemDownloadedDateKey: string;
  // export let NSMetadataItemDueDateKey: string;
  // export let NSMetadataItemDurationSecondsKey: string;
  // export let NSMetadataItemEXIFGPSVersionKey: string;
  // export let NSMetadataItemEXIFVersionKey: string;
  // export let NSMetadataItemEditorsKey: string;
  // export let NSMetadataItemEmailAddressesKey: string;
  // export let NSMetadataItemEncodingApplicationsKey: string;
  // export let NSMetadataItemExecutableArchitecturesKey: string;
  // export let NSMetadataItemExecutablePlatformKey: string;
  // export let NSMetadataItemExposureModeKey: string;
  // export let NSMetadataItemExposureProgramKey: string;
  // export let NSMetadataItemExposureTimeSecondsKey: string;
  // export let NSMetadataItemExposureTimeStringKey: string;
  // export let NSMetadataItemFNumberKey: string;
  // export let NSMetadataItemFSContentChangeDateKey: string;
  // export let NSMetadataItemFSCreationDateKey: string;
  // export let NSMetadataItemFSNameKey: string;
  // export let NSMetadataItemFSSizeKey: string;
  // export let NSMetadataItemFinderCommentKey: string;
  // export let NSMetadataItemFlashOnOffKey: string;
  // export let NSMetadataItemFocalLength35mmKey: string;
  // export let NSMetadataItemFocalLengthKey: string;
  // export let NSMetadataItemFontsKey: string;
  // export let NSMetadataItemGPSAreaInformationKey: string;
  // export let NSMetadataItemGPSDOPKey: string;
  // export let NSMetadataItemGPSDateStampKey: string;
  // export let NSMetadataItemGPSDestBearingKey: string;
  // export let NSMetadataItemGPSDestDistanceKey: string;
  // export let NSMetadataItemGPSDestLatitudeKey: string;
  // export let NSMetadataItemGPSDestLongitudeKey: string;
  // export let NSMetadataItemGPSDifferentalKey: string;
  // export let NSMetadataItemGPSMapDatumKey: string;
  // export let NSMetadataItemGPSMeasureModeKey: string;
  // export let NSMetadataItemGPSProcessingMethodKey: string;
  // export let NSMetadataItemGPSStatusKey: string;
  // export let NSMetadataItemGPSTrackKey: string;
  // export let NSMetadataItemGenreKey: string;
  // export let NSMetadataItemHasAlphaChannelKey: string;
  // export let NSMetadataItemHeadlineKey: string;
  // export let NSMetadataItemISOSpeedKey: string;
  // export let NSMetadataItemIdentifierKey: string;
  // export let NSMetadataItemImageDirectionKey: string;
  // export let NSMetadataItemInformationKey: string;
  // export let NSMetadataItemInstantMessageAddressesKey: string;
  // export let NSMetadataItemInstructionsKey: string;
  // export let NSMetadataItemIsApplicationManagedKey: string;
  // export let NSMetadataItemIsGeneralMIDISequenceKey: string;
  // export let NSMetadataItemIsLikelyJunkKey: string;
  // export let NSMetadataItemIsUbiquitousKey: string;
  // export let NSMetadataItemKeySignatureKey: string;
  // export let NSMetadataItemKeywordsKey: string;
  // export let NSMetadataItemKindKey: string;
  // export let NSMetadataItemLanguagesKey: string;
  // export let NSMetadataItemLastUsedDateKey: string;
  // export let NSMetadataItemLatitudeKey: string;
  // export let NSMetadataItemLayerNamesKey: string;
  // export let NSMetadataItemLensModelKey: string;
  // export let NSMetadataItemLongitudeKey: string;
  // export let NSMetadataItemLyricistKey: string;
  // export let NSMetadataItemMaxApertureKey: string;
  // export let NSMetadataItemMediaTypesKey: string;
  // export let NSMetadataItemMeteringModeKey: string;
  // export let NSMetadataItemMusicalGenreKey: string;
  // export let NSMetadataItemMusicalInstrumentCategoryKey: string;
  // export let NSMetadataItemMusicalInstrumentNameKey: string;
  // export let NSMetadataItemNamedLocationKey: string;
  // export let NSMetadataItemNumberOfPagesKey: string;
  // export let NSMetadataItemOrganizationsKey: string;
  // export let NSMetadataItemOrientationKey: string;
  // export let NSMetadataItemOriginalFormatKey: string;
  // export let NSMetadataItemOriginalSourceKey: string;
  // export let NSMetadataItemPageHeightKey: string;
  // export let NSMetadataItemPageWidthKey: string;
  // export let NSMetadataItemParticipantsKey: string;
  // export let NSMetadataItemPathKey: string;
  // export let NSMetadataItemPerformersKey: string;
  // export let NSMetadataItemPhoneNumbersKey: string;
  // export let NSMetadataItemPixelCountKey: string;
  // export let NSMetadataItemPixelHeightKey: string;
  // export let NSMetadataItemPixelWidthKey: string;
  // export let NSMetadataItemProducerKey: string;
  // export let NSMetadataItemProfileNameKey: string;
  // export let NSMetadataItemProjectsKey: string;
  // export let NSMetadataItemPublishersKey: string;
  // export let NSMetadataItemRecipientAddressesKey: string;
  // export let NSMetadataItemRecipientEmailAddressesKey: string;
  // export let NSMetadataItemRecipientsKey: string;
  // export let NSMetadataItemRecordingDateKey: string;
  // export let NSMetadataItemRecordingYearKey: string;
  // export let NSMetadataItemRedEyeOnOffKey: string;
  // export let NSMetadataItemResolutionHeightDPIKey: string;
  // export let NSMetadataItemResolutionWidthDPIKey: string;
  // export let NSMetadataItemRightsKey: string;
  // export let NSMetadataItemSecurityMethodKey: string;
  // export let NSMetadataItemSpeedKey: string;
  // export let NSMetadataItemStarRatingKey: string;
  // export let NSMetadataItemStateOrProvinceKey: string;
  // export let NSMetadataItemStreamableKey: string;
  // export let NSMetadataItemSubjectKey: string;
  // export let NSMetadataItemTempoKey: string;
  // export let NSMetadataItemTextContentKey: string;
  // export let NSMetadataItemThemeKey: string;
  // export let NSMetadataItemTimeSignatureKey: string;
  // export let NSMetadataItemTimestampKey: string;
  // export let NSMetadataItemTitleKey: string;
  // export let NSMetadataItemTotalBitRateKey: string;
  // export let NSMetadataItemURLKey: string;
  // export let NSMetadataItemVersionKey: string;
  // export let NSMetadataItemVideoBitRateKey: string;
  // export let NSMetadataItemWhereFromsKey: string;
  // export let NSMetadataItemWhiteBalanceKey: string;
  // export let NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope: string;
  // export let NSMetadataQueryIndexedLocalComputerScope: string;
  // export let NSMetadataQueryIndexedNetworkScope: string;
  // export let NSMetadataQueryLocalComputerScope: string;
  // export let NSMetadataQueryNetworkScope: string;
  // export let NSMetadataQueryResultContentRelevanceAttribute: string;
  // export let NSMetadataQueryUbiquitousDataScope: string;
  // export let NSMetadataQueryUbiquitousDocumentsScope: string;
  // export let NSMetadataQueryUpdateAddedItemsKey: string;
  // export let NSMetadataQueryUpdateChangedItemsKey: string;
  // export let NSMetadataQueryUpdateRemovedItemsKey: string;
  // export let NSMetadataQueryUserHomeScope: string;
  // export let NSMetadataUbiquitousItemContainerDisplayNameKey: string;
  // export let NSMetadataUbiquitousItemDownloadRequestedKey: string;
  // export let NSMetadataUbiquitousItemDownloadingErrorKey: string;
  // export let NSMetadataUbiquitousItemDownloadingStatusCurrent: string;
  // export let NSMetadataUbiquitousItemDownloadingStatusDownloaded: string;
  // export let NSMetadataUbiquitousItemDownloadingStatusKey: string;
  // export let NSMetadataUbiquitousItemDownloadingStatusNotDownloaded: string;
  // export let NSMetadataUbiquitousItemHasUnresolvedConflictsKey: string;
  // export let NSMetadataUbiquitousItemIsDownloadingKey: string;
  // export let NSMetadataUbiquitousItemIsExternalDocumentKey: string;
  // export let NSMetadataUbiquitousItemIsSharedKey: string;
  // export let NSMetadataUbiquitousItemIsUploadedKey: string;
  // export let NSMetadataUbiquitousItemIsUploadingKey: string;
  // export let NSMetadataUbiquitousItemPercentDownloadedKey: string;
  // export let NSMetadataUbiquitousItemPercentUploadedKey: string;
  // export let NSMetadataUbiquitousItemURLInLocalContainerKey: string;
  // export let NSMetadataUbiquitousItemUploadingErrorKey: string;
  // export let NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey: string;
  // export let NSMetadataUbiquitousSharedItemCurrentUserRoleKey: string;
  // export let NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey: string;
  // export let NSMetadataUbiquitousSharedItemOwnerNameComponentsKey: string;
  // export let NSMetadataUbiquitousSharedItemPermissionsReadOnly: string;
  // export let NSMetadataUbiquitousSharedItemPermissionsReadWrite: string;
  // export let NSMetadataUbiquitousSharedItemRoleOwner: string;
  // export let NSMetadataUbiquitousSharedItemRoleParticipant: string;
  // export let NSNonOwnedPointerHashCallBacks: NSHashTableCallBacks;
  // export let NSNonOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
  // export let NSNonOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
  // export let NSNonOwnedPointerOrNullMapKeyCallBacks: NSMapTableKeyCallBacks;
  // export let NSNonRetainedObjectHashCallBacks: NSHashTableCallBacks;
  // export let NSNonRetainedObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
  // export let NSNonRetainedObjectMapValueCallBacks: NSMapTableValueCallBacks;
  // export let NSNotFound: number;
  // export let NSNotificationDeliverImmediately: DistributedNotificationCenter.Options;
  // export let NSNotificationPostToAllSessions: DistributedNotificationCenter.Options;
  // export let NSOSStatusErrorDomain: string;
  // export let NSObjectHashCallBacks: NSHashTableCallBacks;
  // export let NSObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
  // export let NSObjectMapValueCallBacks: NSMapTableValueCallBacks;
  // export let NSOperationNotSupportedForKeyException: string;
  // export let NSOwnedObjectIdentityHashCallBacks: NSHashTableCallBacks;
  // export let NSOwnedPointerHashCallBacks: NSHashTableCallBacks;
  // export let NSOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
  // export let NSOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
  // export let NSPOSIXErrorDomain: string;
  // export let NSPersonNameComponentDelimiter: string;
  // export let NSPersonNameComponentFamilyName: string;
  // export let NSPersonNameComponentGivenName: string;
  // export let NSPersonNameComponentKey: string;
  // export let NSPersonNameComponentMiddleName: string;
  // export let NSPersonNameComponentNickname: string;
  // export let NSPersonNameComponentPrefix: string;
  // export let NSPersonNameComponentSuffix: string;
  // export let NSPointerToStructHashCallBacks: NSHashTableCallBacks;
  // export let NSRecoveryAttempterErrorKey: string;
  // export let NSStreamSOCKSErrorDomain: string;
  // export let NSStreamSocketSSLErrorDomain: string;
  // export let NSStringEncodingErrorKey: string;
  // export let NSURLAuthenticationMethodClientCertificate: string;
  // export let NSURLAuthenticationMethodDefault: string;
  // export let NSURLAuthenticationMethodHTMLForm: string;
  // export let NSURLAuthenticationMethodHTTPBasic: string;
  // export let NSURLAuthenticationMethodHTTPDigest: string;
  // export let NSURLAuthenticationMethodNTLM: string;
  // export let NSURLAuthenticationMethodNegotiate: string;
  // export let NSURLAuthenticationMethodServerTrust: string;
  // export let NSURLCredentialStorageRemoveSynchronizableCredentials: string;
  // export let NSURLErrorBackgroundTaskCancelledReasonKey: string;
  // export let NSURLErrorDomain: string;
  // export let NSURLErrorFailingURLErrorKey: string;
  // export let NSURLErrorFailingURLPeerTrustErrorKey: string;
  // export let NSURLErrorFailingURLStringErrorKey: string;
  // export let NSURLErrorKey: string;
  // export let NSURLErrorNetworkUnavailableReasonKey: string;
  // export let NSURLFileScheme: string;
  // export let NSURLProtectionSpaceFTP: string;
  // export let NSURLProtectionSpaceFTPProxy: string;
  // export let NSURLProtectionSpaceHTTP: string;
  // export let NSURLProtectionSpaceHTTPProxy: string;
  // export let NSURLProtectionSpaceHTTPS: string;
  // export let NSURLProtectionSpaceHTTPSProxy: string;
  // export let NSURLProtectionSpaceSOCKSProxy: string;
  // export let NSURLSessionDownloadTaskResumeData: string;
  // export let NSURLSessionTransferSizeUnknown: number;
  // export let NSUbiquitousKeyValueStoreChangeReasonKey: string;
  // export let NSUbiquitousKeyValueStoreChangedKeysKey: string;
  // export let NSUnderlyingErrorKey: string;
  // export let NSUndoCloseGroupingRunLoopOrdering: number;
  // export let NSUndoManagerGroupIsDiscardableKey: string;
  // export let NSUserActivityTypeBrowsingWeb: string;
  // export let NSUserNotificationDefaultSoundName: string;
  // export let NSZeroPoint: CGPoint;
  // export let NSZeroRect: CGRect;
  // export let NSZeroSize: CGSize;
  // export let NSZombieEnabled: boolean;
  // export let IKFilterBrowserDefaultInputImage: string;
  // export let IKFilterBrowserExcludeCategories: string;
  // export let IKFilterBrowserExcludeFilters: string;
  // export let IKFilterBrowserShowCategories: string;
  // export let IKFilterBrowserShowPreview: string;
  // export let IKImageBrowserBackgroundColorKey: string;
  // export let IKImageBrowserCGImageRepresentationType: string;
  // export let IKImageBrowserCGImageSourceRepresentationType: string;
  // export let IKImageBrowserCellBackgroundLayer: string;
  // export let IKImageBrowserCellForegroundLayer: string;
  // export let IKImageBrowserCellPlaceHolderLayer: string;
  // export let IKImageBrowserCellSelectionLayer: string;
  // export let IKImageBrowserCellsHighlightedTitleAttributesKey: string;
  // export let IKImageBrowserCellsOutlineColorKey: string;
  // export let IKImageBrowserCellsSubtitleAttributesKey: string;
  // export let IKImageBrowserCellsTitleAttributesKey: string;
  // export let IKImageBrowserGroupBackgroundColorKey: string;
  // export let IKImageBrowserGroupFooterLayer: string;
  // export let IKImageBrowserGroupHeaderLayer: string;
  // export let IKImageBrowserGroupRangeKey: string;
  // export let IKImageBrowserGroupStyleKey: string;
  // export let IKImageBrowserGroupTitleKey: string;
  // export let IKImageBrowserIconRefPathRepresentationType: string;
  // export let IKImageBrowserIconRefRepresentationType: string;
  // export let IKImageBrowserNSBitmapImageRepresentationType: string;
  // export let IKImageBrowserNSDataRepresentationType: string;
  // export let IKImageBrowserNSImageRepresentationType: string;
  // export let IKImageBrowserNSURLRepresentationType: string;
  // export let IKImageBrowserPDFPageRepresentationType: string;
  // export let IKImageBrowserPathRepresentationType: string;
  // export let IKImageBrowserQCCompositionPathRepresentationType: string;
  // export let IKImageBrowserQCCompositionRepresentationType: string;
  // export let IKImageBrowserQTMoviePathRepresentationType: string;
  // export let IKImageBrowserQTMovieRepresentationType: string;
  // export let IKImageBrowserQuickLookPathRepresentationType: string;
  // export let IKImageBrowserSelectionColorKey: string;
  // export let IKOverlayTypeBackground: string;
  // export let IKOverlayTypeImage: string;
  // export let IKPictureTakerAllowsEditingKey: string;
  // export let IKPictureTakerAllowsFileChoosingKey: string;
  // export let IKPictureTakerAllowsVideoCaptureKey: string;
  // export let IKPictureTakerCropAreaSizeKey: string;
  // export let IKPictureTakerImageTransformsKey: string;
  // export let IKPictureTakerInformationalTextKey: string;
  // export let IKPictureTakerOutputImageMaxSizeKey: string;
  // export let IKPictureTakerRemainOpenAfterValidateKey: string;
  // export let IKPictureTakerShowAddressBookPicture: string;
  // export let IKPictureTakerShowAddressBookPictureKey: string;
  // export let IKPictureTakerShowEffectsKey: string;
  // export let IKPictureTakerShowEmptyPicture: string;
  // export let IKPictureTakerShowEmptyPictureKey: string;
  // export let IKPictureTakerShowRecentPictureKey: string;
  // export let IKPictureTakerUpdateRecentPictureKey: string;
  // export let IKSlideshowAudioFile: string;
  // export let IKSlideshowModeImages: string;
  // export let IKSlideshowModeOther: string;
  // export let IKSlideshowModePDF: string;
  // export let IKSlideshowPDFDisplayBox: string;
  // export let IKSlideshowPDFDisplayMode: string;
  // export let IKSlideshowPDFDisplaysAsBook: string;
  // export let IKSlideshowScreen: string;
  // export let IKSlideshowStartIndex: string;
  // export let IKSlideshowStartPaused: string;
  // export let IKSlideshowWrapAround: string;
  // export let IKToolModeAnnotate: string;
  // export let IKToolModeCrop: string;
  // export let IKToolModeMove: string;
  // export let IKToolModeNone: string;
  // export let IKToolModeRotate: string;
  // export let IKToolModeSelect: string;
  // export let IKToolModeSelectEllipse: string;
  // export let IKToolModeSelectLasso: string;
  // export let IKToolModeSelectRect: string;
  // export let IKUIFlavorAllowFallback: string;
  // export let IKUISizeFlavor: string;
  // export let IKUISizeMini: string;
  // export let IKUISizeRegular: string;
  // export let IKUISizeSmall: string;
  // export let IKUImaxSize: string;
  // export let IK_ApertureBundleIdentifier: string;
  // export let IK_MailBundleIdentifier: string;
  // export let IK_PhotosBundleIdentifier: string;
  // export let IK_iPhotoBundleIdentifier: string;
  // export let QCCompositionInputPaceKey: string;
  // export let globalUpdateOK: boolean;
  // export let kQuartzFilterApplicationDomain: string;
  // export let kQuartzFilterPDFWorkflowDomain: string;
  // export let kQuartzFilterPrintingDomain: string;
  // export let CATransform3DIdentity: CATransform3D;
  // export let kCAOnOrderIn: string;
  // export let kCAOnOrderOut: string;
  // export let kCARendererColorSpace: string;
  // export let kCARendererMetalCommandQueue: string;
  // export let kCATransactionAnimationDuration: string;
  // export let kCATransactionAnimationTimingFunction: string;
  // export let kCATransactionCompletionBlock: string;
  // export let kCATransactionDisableActions: string;
  // export let kCATransition: string;
}

// Add enums to the already-existing bridged classes
//
// If we didn't do this, these would be duplicated
// (i.e. both NSButton and NSButton$1 would exist
// in global scope)

let global = globalThis as any;

namespace AVAssetExportSession {
  export enum Status {
    Unknown = 0,
    Waiting = 1,
    Exporting = 2,
    Completed = 3,
    Failed = 4,
    Cancelled = 5
  }

  global['AVAssetExportSession']['Status'] = Status;

}

namespace AVAssetImageGenerator {
  export enum Result {
    Succeeded = 0,
    Failed = 1,
    Cancelled = 2
  }

  global['AVAssetImageGenerator']['Result'] = Result;

  export let cleanAperture: string;
  export let encodedPixels: string;
  export let productionAperture: string;
}

namespace AVAssetReader {
  export enum Status {
    Unknown = 0,
    Reading = 1,
    Completed = 2,
    Failed = 3,
    Cancelled = 4
  }

  global['AVAssetReader']['Status'] = Status;

}

namespace AVAssetTrack {
  export let audioFallback: string;
  export let chapterList: string;
  export let forcedSubtitlesOnly: string;
  export let metadataReferent: string;
  export let selectionFollower: string;
  export let timecode: string;
}

namespace AVAssetWriter {
  export enum Status {
    Unknown = 0,
    Writing = 1,
    Completed = 2,
    Failed = 3,
    Cancelled = 4
  }

  global['AVAssetWriter']['Status'] = Status;

}

namespace AVAssetWriterInput {
  export let beforeMainMediaDataNotInterleaved: string;
  export let interleavedWithMainMediaData: string;
}

namespace AVAudioSession {
  export enum CategoryOptions {
    MixWithOthers = 1,
    DuckOthers = 2,
    AllowBluetooth = 4,
    DefaultToSpeaker = 8,
    InterruptSpokenAudioAndMixWithOthers = 17,
    AllowBluetoothA2DP = 32,
    AllowAirPlay = 64
  }

  global['AVAudioSession']['CategoryOptions'] = CategoryOptions;

  export enum IOType {
    NotSpecified = 0,
    Aggregated = 1
  }

  global['AVAudioSession']['IOType'] = IOType;

  export enum InterruptionOptions {
    ShouldResume = 1
  }

  global['AVAudioSession']['InterruptionOptions'] = InterruptionOptions;

  export enum InterruptionType {
    Began = 1,
    Ended = 0
  }

  global['AVAudioSession']['InterruptionType'] = InterruptionType;

  export enum PortOverride {
    None = 0,
    Speaker = 1936747378
  }

  global['AVAudioSession']['PortOverride'] = PortOverride;

  export enum PromptStyle {
    None = 1852796517,
    Short = 1936224884,
    Normal = 1852992876
  }

  global['AVAudioSession']['PromptStyle'] = PromptStyle;

  export enum RecordPermission {
    Undetermined = 1970168948,
    Denied = 1684369017,
    Granted = 1735552628
  }

  global['AVAudioSession']['RecordPermission'] = RecordPermission;

  export enum RouteChangeReason {
    Unknown = 0,
    NewDeviceAvailable = 1,
    OldDeviceUnavailable = 2,
    CategoryChange = 3,
    Override = 4,
    WakeFromSleep = 6,
    NoSuitableRouteForCategory = 7,
    RouteConfigurationChange = 8
  }

  global['AVAudioSession']['RouteChangeReason'] = RouteChangeReason;

  export enum RouteSharingPolicy {
    Default = 0,
    LongFormAudio = 1,
    LongForm = 1,
    Independent = 2,
    LongFormVideo = 3
  }

  global['AVAudioSession']['RouteSharingPolicy'] = RouteSharingPolicy;

  export enum SetActiveOptions {
    NotifyOthersOnDeactivation = 1
  }

  global['AVAudioSession']['SetActiveOptions'] = SetActiveOptions;

  export enum SilenceSecondaryAudioHintType {
    Begin = 1,
    End = 0
  }

  global['AVAudioSession']['SilenceSecondaryAudioHintType'] = SilenceSecondaryAudioHintType;

  export let ambient: string;
  export let audioProcessing: string;
  export let multiRoute: string;
  export let playAndRecord: string;
  export let playback: string;
  export let record: string;
  export let soloAmbient: string;
  export let interruptionNotification: string;
  export let lower: string;
  export let upper: string;
  export let mediaServicesWereLostNotification: string;
  export let mediaServicesWereResetNotification: string;
  export let default_: string;
  export let gameChat: string;
  export let measurement: string;
  export let moviePlayback: string;
  export let spokenAudio: string;
  export let videoChat: string;
  export let videoRecording: string;
  export let voiceChat: string;
  export let voicePrompt: string;
  export let back: string;
  export let bottom: string;
  export let front: string;
  export let left: string;
  export let right: string;
  export let top: string;
  export let cardioid: string;
  export let omnidirectional: string;
  export let subcardioid: string;
  export let airPlay: string;
  export let bluetoothA2DP: string;
  export let bluetoothHFP: string;
  export let bluetoothLE: string;
  export let builtInMic: string;
  export let builtInReceiver: string;
  export let builtInSpeaker: string;
  export let carAudio: string;
  export let HDMI: string;
  export let headphones: string;
  export let headsetMic: string;
  export let lineIn: string;
  export let lineOut: string;
  export let usbAudio: string;
  export let routeChangeNotification: string;
  export let silenceSecondaryAudioHintNotification: string;
}

namespace AVAudioTimePitchAlgorithm {
  export let lowQualityZeroLatency: string;
  export let spectral: string;
  export let timeDomain: string;
  export let varispeed: string;
}

namespace AVAudioUnitComponentManager {
  export let registrationsChangedNotification: string;
}

namespace AVCaptureOutput {
  export enum DataDroppedReason {
    None = 0,
    LateData = 1,
    OutOfBuffers = 2,
    Discontinuity = 3
  }

  global['AVCaptureOutput']['DataDroppedReason'] = DataDroppedReason;

}

namespace AVCapturePhotoOutput {
  export enum QualityPrioritization {
    Speed = 1,
    Balanced = 2,
    Quality = 3
  }

  global['AVCapturePhotoOutput']['QualityPrioritization'] = QualityPrioritization;

}

namespace AVCaptureSession {
  export enum InterruptionReason {
    VideoDeviceNotAvailableInBackground = 1,
    AudioDeviceInUseByAnotherClient = 2,
    VideoDeviceInUseByAnotherClient = 3,
    VideoDeviceNotAvailableWithMultipleForegroundApps = 4,
    VideoDeviceNotAvailableDueToSystemPressure = 5
  }

  global['AVCaptureSession']['InterruptionReason'] = InterruptionReason;

  export let hd1280x720: string;
  export let hd1920x1080: string;
  export let qvga320x240: string;
  export let cif352x288: string;
  export let hd4K3840x2160: string;
  export let vga640x480: string;
  export let qHD960x540: string;
  export let high: string;
  export let inputPriority: string;
  export let low: string;
  export let medium: string;
  export let photo: string;
  export let iFrame1280x720: string;
  export let iFrame960x540: string;
}

namespace AVContentKeyRequest {
  export enum Status {
    RequestingResponse = 0,
    ReceivedResponse = 1,
    Renewed = 2,
    Retried = 3,
    Cancelled = 4,
    Failed = 5
  }

  global['AVContentKeyRequest']['Status'] = Status;

  export let receivedObsoleteContentKey: string;
  export let receivedResponseWithExpiredLease: string;
  export let timedOut: string;
}

namespace AVContentKeySessionServerPlaybackContextOption {
  export let protocolVersions: string;
  export let serverChallenge: string;
}

namespace AVContentKeySystem {
  export let authorizationToken: string;
  export let clearKey: string;
  export let fairPlayStreaming: string;
}

namespace AVDepthData {
  export enum Accuracy {
    Relative = 0,
    Absolute = 1
  }

  global['AVDepthData']['Accuracy'] = Accuracy;

  export enum Quality {
    Low = 0,
    High = 1
  }

  global['AVDepthData']['Quality'] = Quality;

}

namespace AVFileType {
  export let mobile3GPP: string;
  export let mobile3GPP2: string;
  export let ac3: string;
  export let aifc: string;
  export let aiff: string;
  export let amr: string;
  export let avci: string;
  export let m4a: string;
  export let m4v: string;
  export let caf: string;
  export let dng: string;
  export let eac3: string;
  export let heic: string;
  export let heif: string;
  export let jpg: string;
  export let mp4: string;
  export let mp3: string;
  export let mov: string;
  export let au: string;
  export let tif: string;
  export let wav: string;
}

namespace AVLayerVideoGravity {
  export let resize: string;
  export let resizeAspect: string;
  export let resizeAspectFill: string;
}

namespace AVMediaCharacteristic {
  export let audible: string;
  export let containsAlphaChannel: string;
  export let containsOnlyForcedSubtitles: string;
  export let describesMusicAndSoundForAccessibility: string;
  export let describesVideoForAccessibility: string;
  export let dubbedTranslation: string;
  export let easyToRead: string;
  export let frameBased: string;
  export let isAuxiliaryContent: string;
  export let isMainProgramContent: string;
  export let isOriginalContent: string;
  export let languageTranslation: string;
  export let legible: string;
  export let transcribesSpokenDialogForAccessibility: string;
  export let usesWideGamutColorSpace: string;
  export let visual: string;
  export let voiceOverTranslation: string;
}

namespace AVMediaType {
  export let audio: string;
  export let closedCaption: string;
  export let depthData: string;
  export let metadata: string;
  export let metadataObject: string;
  export let muxed: string;
  export let subtitle: string;
  export let text: string;
  export let timecode: string;
  export let video: string;
}

namespace AVMetadataExtraAttributeKey {
  export let baseURI: string;
  export let info: string;
  export let valueURI: string;
}

namespace AVMetadataFormat {
  export let hlsMetadata: string;
  export let id3Metadata: string;
  export let isoUserData: string;
  export let quickTimeMetadata: string;
  export let quickTimeUserData: string;
  export let unknown: string;
  export let iTunesMetadata: string;
}

namespace AVMetadataIdentifier {
  export let commonIdentifierAlbumName: string;
  export let commonIdentifierArtist: string;
  export let commonIdentifierArtwork: string;
  export let commonIdentifierAssetIdentifier: string;
  export let commonIdentifierAuthor: string;
  export let commonIdentifierContributor: string;
  export let commonIdentifierCopyrights: string;
  export let commonIdentifierCreationDate: string;
  export let commonIdentifierCreator: string;
  export let commonIdentifierDescription: string;
  export let commonIdentifierFormat: string;
  export let commonIdentifierLanguage: string;
  export let commonIdentifierLastModifiedDate: string;
  export let commonIdentifierLocation: string;
  export let commonIdentifierMake: string;
  export let commonIdentifierModel: string;
  export let commonIdentifierPublisher: string;
  export let commonIdentifierRelation: string;
  export let commonIdentifierSoftware: string;
  export let commonIdentifierSource: string;
  export let commonIdentifierSubject: string;
  export let commonIdentifierTitle: string;
  export let commonIdentifierType: string;
  export let identifier3GPUserDataAlbumAndTrack: string;
  export let identifier3GPUserDataAuthor: string;
  export let identifier3GPUserDataCollection: string;
  export let identifier3GPUserDataCopyright: string;
  export let identifier3GPUserDataDescription: string;
  export let identifier3GPUserDataGenre: string;
  export let identifier3GPUserDataKeywordList: string;
  export let identifier3GPUserDataLocation: string;
  export let identifier3GPUserDataMediaClassification: string;
  export let identifier3GPUserDataMediaRating: string;
  export let identifier3GPUserDataPerformer: string;
  export let identifier3GPUserDataRecordingYear: string;
  export let identifier3GPUserDataThumbnail: string;
  export let identifier3GPUserDataTitle: string;
  export let identifier3GPUserDataUserRating: string;
  export let id3MetadataAlbumSortOrder: string;
  export let id3MetadataAlbumTitle: string;
  export let id3MetadataAttachedPicture: string;
  export let id3MetadataAudioEncryption: string;
  export let id3MetadataAudioSeekPointIndex: string;
  export let id3MetadataBand: string;
  export let id3MetadataBeatsPerMinute: string;
  export let id3MetadataComments: string;
  export let id3MetadataCommercial: string;
  export let id3MetadataCommercialInformation: string;
  export let id3MetadataComposer: string;
  export let id3MetadataConductor: string;
  export let id3MetadataContentGroupDescription: string;
  export let id3MetadataContentType: string;
  export let id3MetadataCopyright: string;
  export let id3MetadataCopyrightInformation: string;
  export let id3MetadataDate: string;
  export let id3MetadataEncodedBy: string;
  export let id3MetadataEncodedWith: string;
  export let id3MetadataEncodingTime: string;
  export let id3MetadataEncryption: string;
  export let id3MetadataEqualization: string;
  export let id3MetadataEqualization2: string;
  export let id3MetadataEventTimingCodes: string;
  export let id3MetadataFileOwner: string;
  export let id3MetadataFileType: string;
  export let id3MetadataGeneralEncapsulatedObject: string;
  export let id3MetadataGroupIdentifier: string;
  export let id3MetadataInitialKey: string;
  export let id3MetadataInternationalStandardRecordingCode: string;
  export let id3MetadataInternetRadioStationName: string;
  export let id3MetadataInternetRadioStationOwner: string;
  export let id3MetadataInvolvedPeopleList_v23: string;
  export let id3MetadataInvolvedPeopleList_v24: string;
  export let id3MetadataLanguage: string;
  export let id3MetadataLeadPerformer: string;
  export let id3MetadataLength: string;
  export let id3MetadataLink: string;
  export let id3MetadataLyricist: string;
  export let id3MetadataMPEGLocationLookupTable: string;
  export let id3MetadataMediaType: string;
  export let id3MetadataModifiedBy: string;
  export let id3MetadataMood: string;
  export let id3MetadataMusicCDIdentifier: string;
  export let id3MetadataMusicianCreditsList: string;
  export let id3MetadataOfficialArtistWebpage: string;
  export let id3MetadataOfficialAudioFileWebpage: string;
  export let id3MetadataOfficialAudioSourceWebpage: string;
  export let id3MetadataOfficialInternetRadioStationHomepage: string;
  export let id3MetadataOfficialPublisherWebpage: string;
  export let id3MetadataOriginalAlbumTitle: string;
  export let id3MetadataOriginalArtist: string;
  export let id3MetadataOriginalFilename: string;
  export let id3MetadataOriginalLyricist: string;
  export let id3MetadataOriginalReleaseTime: string;
  export let id3MetadataOriginalReleaseYear: string;
  export let id3MetadataOwnership: string;
  export let id3MetadataPartOfASet: string;
  export let id3MetadataPayment: string;
  export let id3MetadataPerformerSortOrder: string;
  export let id3MetadataPlayCounter: string;
  export let id3MetadataPlaylistDelay: string;
  export let id3MetadataPopularimeter: string;
  export let id3MetadataPositionSynchronization: string;
  export let id3MetadataPrivate: string;
  export let id3MetadataProducedNotice: string;
  export let id3MetadataPublisher: string;
  export let id3MetadataRecommendedBufferSize: string;
  export let id3MetadataRecordingDates: string;
  export let id3MetadataRecordingTime: string;
  export let id3MetadataRelativeVolumeAdjustment: string;
  export let id3MetadataRelativeVolumeAdjustment2: string;
  export let id3MetadataReleaseTime: string;
  export let id3MetadataReverb: string;
  export let id3MetadataSeek: string;
  export let id3MetadataSetSubtitle: string;
  export let id3MetadataSignature: string;
  export let id3MetadataSize: string;
  export let id3MetadataSubTitle: string;
  export let id3MetadataSynchronizedLyric: string;
  export let id3MetadataSynchronizedTempoCodes: string;
  export let id3MetadataTaggingTime: string;
  export let id3MetadataTermsOfUse: string;
  export let id3MetadataTime: string;
  export let id3MetadataTitleDescription: string;
  export let id3MetadataTitleSortOrder: string;
  export let id3MetadataTrackNumber: string;
  export let id3MetadataUniqueFileIdentifier: string;
  export let id3MetadataUnsynchronizedLyric: string;
  export let id3MetadataUserText: string;
  export let id3MetadataUserURL: string;
  export let id3MetadataYear: string;
  export let isoUserDataCopyright: string;
  export let isoUserDataDate: string;
  export let isoUserDataTaggedCharacteristic: string;
  export let icyMetadataStreamTitle: string;
  export let icyMetadataStreamURL: string;
  export let quickTimeMetadataAlbum: string;
  export let quickTimeMetadataArranger: string;
  export let quickTimeMetadataArtist: string;
  export let quickTimeMetadataArtwork: string;
  export let quickTimeMetadataAuthor: string;
  export let quickTimeMetadataAutoLivePhoto: string;
  export let quickTimeMetadataCameraFrameReadoutTime: string;
  export let quickTimeMetadataCameraIdentifier: string;
  export let quickTimeMetadataCollectionUser: string;
  export let quickTimeMetadataComment: string;
  export let quickTimeMetadataComposer: string;
  export let quickTimeMetadataContentIdentifier: string;
  export let quickTimeMetadataCopyright: string;
  export let quickTimeMetadataCreationDate: string;
  export let quickTimeMetadataCredits: string;
  export let quickTimeMetadataDescription: string;
  export let quickTimeMetadataDetectedCatBody: string;
  export let quickTimeMetadataDetectedDogBody: string;
  export let quickTimeMetadataDetectedFace: string;
  export let quickTimeMetadataDetectedHumanBody: string;
  export let quickTimeMetadataDetectedSalientObject: string;
  export let quickTimeMetadataDirectionFacing: string;
  export let quickTimeMetadataDirectionMotion: string;
  export let quickTimeMetadataDirector: string;
  export let quickTimeMetadataDisplayName: string;
  export let quickTimeMetadataEncodedBy: string;
  export let quickTimeMetadataGenre: string;
  export let quickTimeMetadataInformation: string;
  export let quickTimeMetadataKeywords: string;
  export let quickTimeMetadataLivePhotoVitalityScore: string;
  export let quickTimeMetadataLivePhotoVitalityScoringVersion: string;
  export let quickTimeMetadataLocationBody: string;
  export let quickTimeMetadataLocationDate: string;
  export let quickTimeMetadataLocationISO6709: string;
  export let quickTimeMetadataLocationName: string;
  export let quickTimeMetadataLocationNote: string;
  export let quickTimeMetadataLocationRole: string;
  export let quickTimeMetadataMake: string;
  export let quickTimeMetadataModel: string;
  export let quickTimeMetadataOriginalArtist: string;
  export let quickTimeMetadataPerformer: string;
  export let quickTimeMetadataPhonogramRights: string;
  export let quickTimeMetadataPreferredAffineTransform: string;
  export let quickTimeMetadataProducer: string;
  export let quickTimeMetadataPublisher: string;
  export let quickTimeMetadataRatingUser: string;
  export let quickTimeMetadataSoftware: string;
  export let quickTimeMetadataSpatialOverCaptureQualityScore: string;
  export let quickTimeMetadataSpatialOverCaptureQualityScoringVersion: string;
  export let quickTimeMetadataTitle: string;
  export let quickTimeMetadataVideoOrientation: string;
  export let quickTimeMetadataYear: string;
  export let quickTimeMetadataiXML: string;
  export let quickTimeUserDataAlbum: string;
  export let quickTimeUserDataArranger: string;
  export let quickTimeUserDataArtist: string;
  export let quickTimeUserDataAuthor: string;
  export let quickTimeUserDataChapter: string;
  export let quickTimeUserDataComment: string;
  export let quickTimeUserDataComposer: string;
  export let quickTimeUserDataCopyright: string;
  export let quickTimeUserDataCreationDate: string;
  export let quickTimeUserDataCredits: string;
  export let quickTimeUserDataDescription: string;
  export let quickTimeUserDataDirector: string;
  export let quickTimeUserDataDisclaimer: string;
  export let quickTimeUserDataEncodedBy: string;
  export let quickTimeUserDataFullName: string;
  export let quickTimeUserDataGenre: string;
  export let quickTimeUserDataHostComputer: string;
  export let quickTimeUserDataInformation: string;
  export let quickTimeUserDataKeywords: string;
  export let quickTimeUserDataLocationISO6709: string;
  export let quickTimeUserDataMake: string;
  export let quickTimeUserDataModel: string;
  export let quickTimeUserDataOriginalArtist: string;
  export let quickTimeUserDataOriginalFormat: string;
  export let quickTimeUserDataOriginalSource: string;
  export let quickTimeUserDataPerformers: string;
  export let quickTimeUserDataPhonogramRights: string;
  export let quickTimeUserDataProducer: string;
  export let quickTimeUserDataProduct: string;
  export let quickTimeUserDataPublisher: string;
  export let quickTimeUserDataSoftware: string;
  export let quickTimeUserDataSpecialPlaybackRequirements: string;
  export let quickTimeUserDataTaggedCharacteristic: string;
  export let quickTimeUserDataTrack: string;
  export let quickTimeUserDataTrackName: string;
  export let quickTimeUserDataURLLink: string;
  export let quickTimeUserDataWarning: string;
  export let quickTimeUserDataWriter: string;
  export let iTunesMetadataAccountKind: string;
  export let iTunesMetadataAcknowledgement: string;
  export let iTunesMetadataAlbum: string;
  export let iTunesMetadataAlbumArtist: string;
  export let iTunesMetadataAppleID: string;
  export let iTunesMetadataArranger: string;
  export let iTunesMetadataArtDirector: string;
  export let iTunesMetadataArtist: string;
  export let iTunesMetadataArtistID: string;
  export let iTunesMetadataAuthor: string;
  export let iTunesMetadataBeatsPerMin: string;
  export let iTunesMetadataComposer: string;
  export let iTunesMetadataConductor: string;
  export let iTunesMetadataContentRating: string;
  export let iTunesMetadataCopyright: string;
  export let iTunesMetadataCoverArt: string;
  export let iTunesMetadataCredits: string;
  export let iTunesMetadataDescription: string;
  export let iTunesMetadataDirector: string;
  export let iTunesMetadataDiscCompilation: string;
  export let iTunesMetadataDiscNumber: string;
  export let iTunesMetadataEQ: string;
  export let iTunesMetadataEncodedBy: string;
  export let iTunesMetadataEncodingTool: string;
  export let iTunesMetadataExecProducer: string;
  export let iTunesMetadataGenreID: string;
  export let iTunesMetadataGrouping: string;
  export let iTunesMetadataLinerNotes: string;
  export let iTunesMetadataLyrics: string;
  export let iTunesMetadataOnlineExtras: string;
  export let iTunesMetadataOriginalArtist: string;
  export let iTunesMetadataPerformer: string;
  export let iTunesMetadataPhonogramRights: string;
  export let iTunesMetadataPlaylistID: string;
  export let iTunesMetadataPredefinedGenre: string;
  export let iTunesMetadataProducer: string;
  export let iTunesMetadataPublisher: string;
  export let iTunesMetadataRecordCompany: string;
  export let iTunesMetadataReleaseDate: string;
  export let iTunesMetadataSoloist: string;
  export let iTunesMetadataSongID: string;
  export let iTunesMetadataSongName: string;
  export let iTunesMetadataSoundEngineer: string;
  export let iTunesMetadataThanks: string;
  export let iTunesMetadataTrackNumber: string;
  export let iTunesMetadataTrackSubTitle: string;
  export let iTunesMetadataUserComment: string;
  export let iTunesMetadataUserGenre: string;
}

namespace AVMetadataKey {
  export let metadata3GPUserDataKeyAlbumAndTrack: string;
  export let metadata3GPUserDataKeyAuthor: string;
  export let metadata3GPUserDataKeyCollection: string;
  export let metadata3GPUserDataKeyCopyright: string;
  export let metadata3GPUserDataKeyDescription: string;
  export let metadata3GPUserDataKeyGenre: string;
  export let metadata3GPUserDataKeyKeywordList: string;
  export let metadata3GPUserDataKeyLocation: string;
  export let metadata3GPUserDataKeyMediaClassification: string;
  export let metadata3GPUserDataKeyMediaRating: string;
  export let metadata3GPUserDataKeyPerformer: string;
  export let metadata3GPUserDataKeyRecordingYear: string;
  export let metadata3GPUserDataKeyThumbnail: string;
  export let metadata3GPUserDataKeyTitle: string;
  export let metadata3GPUserDataKeyUserRating: string;
  export let commonKeyAlbumName: string;
  export let commonKeyArtist: string;
  export let commonKeyArtwork: string;
  export let commonKeyAuthor: string;
  export let commonKeyContributor: string;
  export let commonKeyCopyrights: string;
  export let commonKeyCreationDate: string;
  export let commonKeyCreator: string;
  export let commonKeyDescription: string;
  export let commonKeyFormat: string;
  export let commonKeyIdentifier: string;
  export let commonKeyLanguage: string;
  export let commonKeyLastModifiedDate: string;
  export let commonKeyLocation: string;
  export let commonKeyMake: string;
  export let commonKeyModel: string;
  export let commonKeyPublisher: string;
  export let commonKeyRelation: string;
  export let commonKeySoftware: string;
  export let commonKeySource: string;
  export let commonKeySubject: string;
  export let commonKeyTitle: string;
  export let commonKeyType: string;
  export let id3MetadataKeyAlbumSortOrder: string;
  export let id3MetadataKeyAlbumTitle: string;
  export let id3MetadataKeyAttachedPicture: string;
  export let id3MetadataKeyAudioEncryption: string;
  export let id3MetadataKeyAudioSeekPointIndex: string;
  export let id3MetadataKeyBand: string;
  export let id3MetadataKeyBeatsPerMinute: string;
  export let id3MetadataKeyComments: string;
  export let id3MetadataKeyCommercial: string;
  export let id3MetadataKeyCommercialInformation: string;
  export let id3MetadataKeyComposer: string;
  export let id3MetadataKeyConductor: string;
  export let id3MetadataKeyContentGroupDescription: string;
  export let id3MetadataKeyContentType: string;
  export let id3MetadataKeyCopyright: string;
  export let id3MetadataKeyCopyrightInformation: string;
  export let id3MetadataKeyDate: string;
  export let id3MetadataKeyEncodedBy: string;
  export let id3MetadataKeyEncodedWith: string;
  export let id3MetadataKeyEncodingTime: string;
  export let id3MetadataKeyEncryption: string;
  export let id3MetadataKeyEqualization: string;
  export let id3MetadataKeyEqualization2: string;
  export let id3MetadataKeyEventTimingCodes: string;
  export let id3MetadataKeyFileOwner: string;
  export let id3MetadataKeyFileType: string;
  export let id3MetadataKeyGeneralEncapsulatedObject: string;
  export let id3MetadataKeyGroupIdentifier: string;
  export let id3MetadataKeyInitialKey: string;
  export let id3MetadataKeyInternationalStandardRecordingCode: string;
  export let id3MetadataKeyInternetRadioStationName: string;
  export let id3MetadataKeyInternetRadioStationOwner: string;
  export let id3MetadataKeyInvolvedPeopleList_v23: string;
  export let id3MetadataKeyInvolvedPeopleList_v24: string;
  export let id3MetadataKeyLanguage: string;
  export let id3MetadataKeyLeadPerformer: string;
  export let id3MetadataKeyLength: string;
  export let id3MetadataKeyLink: string;
  export let id3MetadataKeyLyricist: string;
  export let id3MetadataKeyMPEGLocationLookupTable: string;
  export let id3MetadataKeyMediaType: string;
  export let id3MetadataKeyModifiedBy: string;
  export let id3MetadataKeyMood: string;
  export let id3MetadataKeyMusicCDIdentifier: string;
  export let id3MetadataKeyMusicianCreditsList: string;
  export let id3MetadataKeyOfficialArtistWebpage: string;
  export let id3MetadataKeyOfficialAudioFileWebpage: string;
  export let id3MetadataKeyOfficialAudioSourceWebpage: string;
  export let id3MetadataKeyOfficialInternetRadioStationHomepage: string;
  export let id3MetadataKeyOfficialPublisherWebpage: string;
  export let id3MetadataKeyOriginalAlbumTitle: string;
  export let id3MetadataKeyOriginalArtist: string;
  export let id3MetadataKeyOriginalFilename: string;
  export let id3MetadataKeyOriginalLyricist: string;
  export let id3MetadataKeyOriginalReleaseTime: string;
  export let id3MetadataKeyOriginalReleaseYear: string;
  export let id3MetadataKeyOwnership: string;
  export let id3MetadataKeyPartOfASet: string;
  export let id3MetadataKeyPayment: string;
  export let id3MetadataKeyPerformerSortOrder: string;
  export let id3MetadataKeyPlayCounter: string;
  export let id3MetadataKeyPlaylistDelay: string;
  export let id3MetadataKeyPopularimeter: string;
  export let id3MetadataKeyPositionSynchronization: string;
  export let id3MetadataKeyPrivate: string;
  export let id3MetadataKeyProducedNotice: string;
  export let id3MetadataKeyPublisher: string;
  export let id3MetadataKeyRecommendedBufferSize: string;
  export let id3MetadataKeyRecordingDates: string;
  export let id3MetadataKeyRecordingTime: string;
  export let id3MetadataKeyRelativeVolumeAdjustment: string;
  export let id3MetadataKeyRelativeVolumeAdjustment2: string;
  export let id3MetadataKeyReleaseTime: string;
  export let id3MetadataKeyReverb: string;
  export let id3MetadataKeySeek: string;
  export let id3MetadataKeySetSubtitle: string;
  export let id3MetadataKeySignature: string;
  export let id3MetadataKeySize: string;
  export let id3MetadataKeySubTitle: string;
  export let id3MetadataKeySynchronizedLyric: string;
  export let id3MetadataKeySynchronizedTempoCodes: string;
  export let id3MetadataKeyTaggingTime: string;
  export let id3MetadataKeyTermsOfUse: string;
  export let id3MetadataKeyTime: string;
  export let id3MetadataKeyTitleDescription: string;
  export let id3MetadataKeyTitleSortOrder: string;
  export let id3MetadataKeyTrackNumber: string;
  export let id3MetadataKeyUniqueFileIdentifier: string;
  export let id3MetadataKeyUnsynchronizedLyric: string;
  export let id3MetadataKeyUserText: string;
  export let id3MetadataKeyUserURL: string;
  export let id3MetadataKeyYear: string;
  export let isoUserDataKeyCopyright: string;
  export let isoUserDataKeyDate: string;
  export let isoUserDataKeyTaggedCharacteristic: string;
  export let icyMetadataKeyStreamTitle: string;
  export let icyMetadataKeyStreamURL: string;
  export let quickTimeMetadataKeyAlbum: string;
  export let quickTimeMetadataKeyArranger: string;
  export let quickTimeMetadataKeyArtist: string;
  export let quickTimeMetadataKeyArtwork: string;
  export let quickTimeMetadataKeyAuthor: string;
  export let quickTimeMetadataKeyCameraFrameReadoutTime: string;
  export let quickTimeMetadataKeyCameraIdentifier: string;
  export let quickTimeMetadataKeyCollectionUser: string;
  export let quickTimeMetadataKeyComment: string;
  export let quickTimeMetadataKeyComposer: string;
  export let quickTimeMetadataKeyContentIdentifier: string;
  export let quickTimeMetadataKeyCopyright: string;
  export let quickTimeMetadataKeyCreationDate: string;
  export let quickTimeMetadataKeyCredits: string;
  export let quickTimeMetadataKeyDescription: string;
  export let quickTimeMetadataKeyDirectionFacing: string;
  export let quickTimeMetadataKeyDirectionMotion: string;
  export let quickTimeMetadataKeyDirector: string;
  export let quickTimeMetadataKeyDisplayName: string;
  export let quickTimeMetadataKeyEncodedBy: string;
  export let quickTimeMetadataKeyGenre: string;
  export let quickTimeMetadataKeyInformation: string;
  export let quickTimeMetadataKeyKeywords: string;
  export let quickTimeMetadataKeyLocationBody: string;
  export let quickTimeMetadataKeyLocationDate: string;
  export let quickTimeMetadataKeyLocationISO6709: string;
  export let quickTimeMetadataKeyLocationName: string;
  export let quickTimeMetadataKeyLocationNote: string;
  export let quickTimeMetadataKeyLocationRole: string;
  export let quickTimeMetadataKeyMake: string;
  export let quickTimeMetadataKeyModel: string;
  export let quickTimeMetadataKeyOriginalArtist: string;
  export let quickTimeMetadataKeyPerformer: string;
  export let quickTimeMetadataKeyPhonogramRights: string;
  export let quickTimeMetadataKeyProducer: string;
  export let quickTimeMetadataKeyPublisher: string;
  export let quickTimeMetadataKeyRatingUser: string;
  export let quickTimeMetadataKeySoftware: string;
  export let quickTimeMetadataKeyTitle: string;
  export let quickTimeMetadataKeyYear: string;
  export let quickTimeMetadataKeyiXML: string;
  export let quickTimeUserDataKeyAlbum: string;
  export let quickTimeUserDataKeyArranger: string;
  export let quickTimeUserDataKeyArtist: string;
  export let quickTimeUserDataKeyAuthor: string;
  export let quickTimeUserDataKeyChapter: string;
  export let quickTimeUserDataKeyComment: string;
  export let quickTimeUserDataKeyComposer: string;
  export let quickTimeUserDataKeyCopyright: string;
  export let quickTimeUserDataKeyCreationDate: string;
  export let quickTimeUserDataKeyCredits: string;
  export let quickTimeUserDataKeyDescription: string;
  export let quickTimeUserDataKeyDirector: string;
  export let quickTimeUserDataKeyDisclaimer: string;
  export let quickTimeUserDataKeyEncodedBy: string;
  export let quickTimeUserDataKeyFullName: string;
  export let quickTimeUserDataKeyGenre: string;
  export let quickTimeUserDataKeyHostComputer: string;
  export let quickTimeUserDataKeyInformation: string;
  export let quickTimeUserDataKeyKeywords: string;
  export let quickTimeUserDataKeyLocationISO6709: string;
  export let quickTimeUserDataKeyMake: string;
  export let quickTimeUserDataKeyModel: string;
  export let quickTimeUserDataKeyOriginalArtist: string;
  export let quickTimeUserDataKeyOriginalFormat: string;
  export let quickTimeUserDataKeyOriginalSource: string;
  export let quickTimeUserDataKeyPerformers: string;
  export let quickTimeUserDataKeyPhonogramRights: string;
  export let quickTimeUserDataKeyProducer: string;
  export let quickTimeUserDataKeyProduct: string;
  export let quickTimeUserDataKeyPublisher: string;
  export let quickTimeUserDataKeySoftware: string;
  export let quickTimeUserDataKeySpecialPlaybackRequirements: string;
  export let quickTimeUserDataKeyTaggedCharacteristic: string;
  export let quickTimeUserDataKeyTrack: string;
  export let quickTimeUserDataKeyTrackName: string;
  export let quickTimeUserDataKeyURLLink: string;
  export let quickTimeUserDataKeyWarning: string;
  export let quickTimeUserDataKeyWriter: string;
  export let iTunesMetadataKeyAccountKind: string;
  export let iTunesMetadataKeyAcknowledgement: string;
  export let iTunesMetadataKeyAlbum: string;
  export let iTunesMetadataKeyAlbumArtist: string;
  export let iTunesMetadataKeyAppleID: string;
  export let iTunesMetadataKeyArranger: string;
  export let iTunesMetadataKeyArtDirector: string;
  export let iTunesMetadataKeyArtist: string;
  export let iTunesMetadataKeyArtistID: string;
  export let iTunesMetadataKeyAuthor: string;
  export let iTunesMetadataKeyBeatsPerMin: string;
  export let iTunesMetadataKeyComposer: string;
  export let iTunesMetadataKeyConductor: string;
  export let iTunesMetadataKeyContentRating: string;
  export let iTunesMetadataKeyCopyright: string;
  export let iTunesMetadataKeyCoverArt: string;
  export let iTunesMetadataKeyCredits: string;
  export let iTunesMetadataKeyDescription: string;
  export let iTunesMetadataKeyDirector: string;
  export let iTunesMetadataKeyDiscCompilation: string;
  export let iTunesMetadataKeyDiscNumber: string;
  export let iTunesMetadataKeyEQ: string;
  export let iTunesMetadataKeyEncodedBy: string;
  export let iTunesMetadataKeyEncodingTool: string;
  export let iTunesMetadataKeyExecProducer: string;
  export let iTunesMetadataKeyGenreID: string;
  export let iTunesMetadataKeyGrouping: string;
  export let iTunesMetadataKeyLinerNotes: string;
  export let iTunesMetadataKeyLyrics: string;
  export let iTunesMetadataKeyOnlineExtras: string;
  export let iTunesMetadataKeyOriginalArtist: string;
  export let iTunesMetadataKeyPerformer: string;
  export let iTunesMetadataKeyPhonogramRights: string;
  export let iTunesMetadataKeyPlaylistID: string;
  export let iTunesMetadataKeyPredefinedGenre: string;
  export let iTunesMetadataKeyProducer: string;
  export let iTunesMetadataKeyPublisher: string;
  export let iTunesMetadataKeyRecordCompany: string;
  export let iTunesMetadataKeyReleaseDate: string;
  export let iTunesMetadataKeySoloist: string;
  export let iTunesMetadataKeySongID: string;
  export let iTunesMetadataKeySongName: string;
  export let iTunesMetadataKeySoundEngineer: string;
  export let iTunesMetadataKeyThanks: string;
  export let iTunesMetadataKeyTrackNumber: string;
  export let iTunesMetadataKeyTrackSubTitle: string;
  export let iTunesMetadataKeyUserComment: string;
  export let iTunesMetadataKeyUserGenre: string;
}

namespace AVMetadataKeySpace {
  export let audioFile: string;
  export let common: string;
  export let hlsDateRange: string;
  export let id3: string;
  export let isoUserData: string;
  export let icy: string;
  export let quickTimeMetadata: string;
  export let quickTimeUserData: string;
  export let iTunes: string;
}

namespace AVMetadataObject {
  export let aztec: string;
  export let catBody: string;
  export let code128: string;
  export let code39: string;
  export let code39Mod43: string;
  export let code93: string;
  export let dataMatrix: string;
  export let dogBody: string;
  export let ean13: string;
  export let ean8: string;
  export let face: string;
  export let humanBody: string;
  export let itf14: string;
  export let interleaved2of5: string;
  export let pdf417: string;
  export let qr: string;
  export let salientObject: string;
  export let upce: string;
}

namespace AVOutputSettingsPreset {
  export let preset1280x720: string;
  export let preset1920x1080: string;
  export let preset3840x2160: string;
  export let preset640x480: string;
  export let preset960x540: string;
  export let hevc1920x1080: string;
  export let hevc1920x1080WithAlpha: string;
  export let hevc3840x2160: string;
  export let hevc3840x2160WithAlpha: string;
}

namespace AVPlayer {
  export enum ActionAtItemEnd {
    Advance = 0,
    Pause = 1,
    None = 2
  }

  global['AVPlayer']['ActionAtItemEnd'] = ActionAtItemEnd;

  export enum HDRMode {
    HLG = 1,
    HDR10 = 2,
    DolbyVision = 4
  }

  global['AVPlayer']['HDRMode'] = HDRMode;

  export enum Status {
    Unknown = 0,
    ReadyToPlay = 1,
    Failed = 2
  }

  global['AVPlayer']['Status'] = Status;

  export enum TimeControlStatus {
    Paused = 0,
    WaitingToPlayAtSpecifiedRate = 1,
    Playing = 2
  }

  global['AVPlayer']['TimeControlStatus'] = TimeControlStatus;

  export let eligibleForHDRPlaybackDidChangeNotification: string;
  export let toMinimizeStalls: string;
  export let evaluatingBufferingRate: string;
  export let noItemToPlay: string;
}

namespace AVPlayerItem {
  export enum Status {
    Unknown = 0,
    ReadyToPlay = 1,
    Failed = 2
  }

  global['AVPlayerItem']['Status'] = Status;

  export let mediaSelectionDidChangeNotification: string;
  export let recommendedTimeOffsetFromLiveDidChangeNotification: string;
}

namespace AVPlayerItemLegibleOutput {
  export let default_: string;
  export let sourceAndRulesOnly: string;
}

namespace AVPlayerLooper {
  export enum Status {
    Unknown = 0,
    Ready = 1,
    Failed = 2,
    Cancelled = 3
  }

  global['AVPlayerLooper']['Status'] = Status;

}

namespace AVSampleBufferRenderSynchronizer {
  export let rateDidChangeNotification: string;
}

namespace AVSampleBufferRequest {
  export enum Direction {
    Forward = 1,
    None = 0,
    Reverse = -1
  }

  global['AVSampleBufferRequest']['Direction'] = Direction;

  export enum Mode {
    Immediate = 0,
    Scheduled = 1,
    Opportunistic = 2
  }

  global['AVSampleBufferRequest']['Mode'] = Mode;

}

namespace AVSemanticSegmentationMatte {
  export let hair: string;
  export let skin: string;
  export let teeth: string;
}

namespace AVVideoApertureMode {
  export let cleanAperture: string;
  export let encodedPixels: string;
  export let productionAperture: string;
}

namespace AVVideoCodecType {
  export let proRes422: string;
  export let proRes422HQ: string;
  export let proRes422LT: string;
  export let proRes422Proxy: string;
  export let proRes4444: string;
  export let h264: string;
  export let hevc: string;
  export let hevcWithAlpha: string;
  export let jpeg: string;
}

namespace Bundle {
  export let didLoadNotification: string;
}

namespace ByteCountFormatter {
  export enum CountStyle {
    File = 0,
    Memory = 1,
    Decimal = 2,
    Binary = 3
  }

  global['ByteCountFormatter']['CountStyle'] = CountStyle;

  export enum Units {
    UseDefault = 0,
    UseBytes = 1,
    UseKB = 2,
    UseMB = 4,
    UseGB = 8,
    UseTB = 16,
    UsePB = 32,
    UseEB = 64,
    UseZB = 128,
    UseYBOrHigher = 65280,
    UseAll = 65535
  }

  global['ByteCountFormatter']['Units'] = Units;

}

namespace CAAnimationCalculationMode {
  export let cubic: string;
  export let cubicPaced: string;
  export let discrete: string;
  export let linear: string;
  export let paced: string;
}

namespace CAAnimationRotationMode {
  export let rotateAuto: string;
  export let rotateAutoReverse: string;
}

namespace CAEmitterLayerEmitterMode {
  export let outline: string;
  export let points: string;
  export let surface: string;
  export let volume: string;
}

namespace CAEmitterLayerEmitterShape {
  export let circle: string;
  export let cuboid: string;
  export let line: string;
  export let point: string;
  export let rectangle: string;
  export let sphere: string;
}

namespace CAEmitterLayerRenderMode {
  export let additive: string;
  export let backToFront: string;
  export let oldestFirst: string;
  export let oldestLast: string;
  export let unordered: string;
}

namespace CAGradientLayerType {
  export let axial: string;
  export let conic: string;
  export let radial: string;
}

namespace CALayerContentsFilter {
  export let linear: string;
  export let nearest: string;
  export let trilinear: string;
}

namespace CALayerContentsFormat {
  export let gray8Uint: string;
  export let RGBA16Float: string;
  export let RGBA8Uint: string;
}

namespace CALayerContentsGravity {
  export let bottom: string;
  export let bottomLeft: string;
  export let bottomRight: string;
  export let center: string;
  export let left: string;
  export let resize: string;
  export let resizeAspect: string;
  export let resizeAspectFill: string;
  export let right: string;
  export let top: string;
  export let topLeft: string;
  export let topRight: string;
}

namespace CALayerCornerCurve {
  export let circular: string;
  export let continuous: string;
}

namespace CAMediaTimingFillMode {
  export let backwards: string;
  export let both: string;
  export let forwards: string;
  export let removed: string;
}

namespace CAMediaTimingFunctionName {
  export let default_: string;
  export let easeIn: string;
  export let easeInEaseOut: string;
  export let easeOut: string;
  export let linear: string;
}

namespace CAScrollLayerScrollMode {
  export let both: string;
  export let horizontally: string;
  export let none: string;
  export let vertically: string;
}

namespace CAShapeLayerFillRule {
  export let evenOdd: string;
  export let nonZero: string;
}

namespace CAShapeLayerLineCap {
  export let butt: string;
  export let round: string;
  export let square: string;
}

namespace CAShapeLayerLineJoin {
  export let bevel: string;
  export let miter: string;
  export let round: string;
}

namespace CATextLayerAlignmentMode {
  export let center: string;
  export let justified: string;
  export let left: string;
  export let natural: string;
  export let right: string;
}

namespace CATextLayerTruncationMode {
  export let end: string;
  export let middle: string;
  export let none: string;
  export let start: string;
}

namespace CATransitionSubtype {
  export let fromBottom: string;
  export let fromLeft: string;
  export let fromRight: string;
  export let fromTop: string;
}

namespace CATransitionType {
  export let fade: string;
  export let moveIn: string;
  export let push: string;
  export let reveal: string;
}

namespace CAValueFunctionName {
  export let rotateX: string;
  export let rotateY: string;
  export let rotateZ: string;
  export let scale: string;
  export let scaleX: string;
  export let scaleY: string;
  export let scaleZ: string;
  export let translate: string;
  export let translateX: string;
  export let translateY: string;
  export let translateZ: string;
}

namespace CFCalendarIdentifier {
  export let buddhistCalendar: any;
  export let chineseCalendar: any;
  export let gregorianCalendar: any;
  export let hebrewCalendar: any;
  export let cfiso8601Calendar: any;
  export let indianCalendar: any;
  export let islamicCalendar: any;
  export let islamicCivilCalendar: any;
  export let islamicTabularCalendar: any;
  export let islamicUmmAlQuraCalendar: any;
  export let japaneseCalendar: any;
  export let persianCalendar: any;
  export let republicOfChinaCalendar: any;
}

namespace CFDateFormatterKey {
  export let amSymbol: any;
  export let calendar: any;
  export let calendarName: any;
  export let defaultDate: any;
  export let defaultFormat: any;
  export let doesRelativeDateFormattingKey: any;
  export let eraSymbols: any;
  export let gregorianStartDate: any;
  export let isLenient: any;
  export let longEraSymbols: any;
  export let monthSymbols: any;
  export let pmSymbol: any;
  export let quarterSymbols: any;
  export let shortMonthSymbols: any;
  export let shortQuarterSymbols: any;
  export let shortStandaloneMonthSymbols: any;
  export let shortStandaloneQuarterSymbols: any;
  export let shortStandaloneWeekdaySymbols: any;
  export let shortWeekdaySymbols: any;
  export let standaloneMonthSymbols: any;
  export let standaloneQuarterSymbols: any;
  export let standaloneWeekdaySymbols: any;
  export let timeZone: any;
  export let twoDigitStartDate: any;
  export let veryShortMonthSymbols: any;
  export let veryShortStandaloneMonthSymbols: any;
  export let veryShortStandaloneWeekdaySymbols: any;
  export let veryShortWeekdaySymbols: any;
  export let weekdaySymbols: any;
}

namespace CFLocaleKey {
  export let alternateQuotationBeginDelimiterKey: any;
  export let alternateQuotationEndDelimiterKey: any;
  export let calendar: any;
  export let calendarIdentifier: any;
  export let collationIdentifier: any;
  export let collatorIdentifier: any;
  export let countryCode: any;
  export let currencyCode: any;
  export let currencySymbol: any;
  export let decimalSeparator: any;
  export let exemplarCharacterSet: any;
  export let groupingSeparator: any;
  export let identifier: any;
  export let languageCode: any;
  export let measurementSystem: any;
  export let quotationBeginDelimiterKey: any;
  export let quotationEndDelimiterKey: any;
  export let scriptCode: any;
  export let usesMetricSystem: any;
  export let variantCode: any;
}

namespace CFNotificationName {
  export let cfLocaleCurrentLocaleDidChange: any;
  export let cfTimeZoneSystemTimeZoneDidChange: any;
}

namespace CFNumberFormatterKey {
  export let alwaysShowDecimalSeparator: any;
  export let currencyCode: any;
  export let currencyDecimalSeparator: any;
  export let currencyGroupingSeparator: any;
  export let currencySymbol: any;
  export let decimalSeparator: any;
  export let defaultFormat: any;
  export let exponentSymbol: any;
  export let formatWidth: any;
  export let groupingSeparator: any;
  export let groupingSize: any;
  export let infinitySymbol: any;
  export let internationalCurrencySymbol: any;
  export let isLenient: any;
  export let maxFractionDigits: any;
  export let maxIntegerDigits: any;
  export let maxSignificantDigits: any;
  export let minFractionDigits: any;
  export let minIntegerDigits: any;
  export let minSignificantDigits: any;
  export let minusSign: any;
  export let multiplier: any;
  export let naNSymbol: any;
  export let negativePrefix: any;
  export let negativeSuffix: any;
  export let paddingCharacter: any;
  export let paddingPosition: any;
  export let perMillSymbol: any;
  export let percentSymbol: any;
  export let plusSign: any;
  export let positivePrefix: any;
  export let positiveSuffix: any;
  export let roundingIncrement: any;
  export let roundingMode: any;
  export let secondaryGroupingSize: any;
  export let useGroupingSeparator: any;
  export let useSignificantDigits: any;
  export let zeroSymbol: any;
}

namespace CFRunLoopMode {
  export let commonModes: any;
  export let defaultMode: any;
}

namespace CFStreamPropertyKey {
  export let appendToFile: any;
  export let dataWritten: any;
  export let fileCurrentOffset: any;
  export let socketNativeHandle: any;
  export let socketRemoteHostName: any;
  export let socketRemotePortNumber: any;
}

namespace CGAffineTransform {
  export let identity: CGAffineTransform;
}

namespace CGColor {
  export let __blackColorName: string;
  export let __clearColorName: string;
  export let conversionBlackPointCompensation: string;
  export let conversionTRCSize: string;
  export let __whiteColorName: string;
}

namespace CGColorSpace {
  export let acescgLinear: string;
  export let adobeRGB1998: string;
  export let dcip3: string;
  export let displayP3: string;
  export let displayP3_HLG: string;
  export let displayP3_PQ_EOTF: string;
  export let extendedGray: string;
  export let extendedLinearDisplayP3: string;
  export let extendedLinearGray: string;
  export let extendedLinearITUR_2020: string;
  export let extendedLinearSRGB: string;
  export let extendedSRGB: string;
  export let genericCMYK: string;
  export let genericGray: string;
  export let genericGrayGamma2_2: string;
  export let genericLab: string;
  export let genericRGB: string;
  export let genericRGBLinear: string;
  export let genericXYZ: string;
  export let itur_2020: string;
  export let itur_2020_HLG: string;
  export let itur_2020_PQ_EOTF: string;
  export let itur_709: string;
  export let linearGray: string;
  export let linearSRGB: string;
  export let rommrgb: string;
  export let sRGB: string;
}

namespace CGDisplayStream {
  export let colorSpace: string;
  export let destinationRect: string;
  export let minimumFrameTime: string;
  export let preserveAspectRatio: string;
  export let queueDepth: string;
  export let showCursor: string;
  export let sourceRect: string;
  export let yCbCrMatrix: string;
  export let yCbCrMatrix_ITU_R_601_4: string;
  export let yCbCrMatrix_ITU_R_709_2: string;
  export let yCbCrMatrix_SMPTE_240M_1995: string;
}

namespace CGFont {
  export let variationAxisDefaultValue: string;
  export let variationAxisMaxValue: string;
  export let variationAxisMinValue: string;
  export let variationAxisName: string;
}

namespace CGPDFTagProperty {
  export let actualText: any;
  export let alternativeText: any;
  export let languageText: any;
  export let titleText: any;
}

namespace CGPoint {
  export let zero: CGPoint;
}

namespace CGRect {
  export let infinite: CGRect;
  export let null_: CGRect;
  export let zero: CGRect;
}

namespace CGSize {
  export let zero: CGSize;
}

namespace CIContextOption {
  export let allowLowPower: string;
  export let cacheIntermediates: string;
  export let highQualityDownsample: string;
  export let outputColorSpace: string;
  export let outputPremultiplied: string;
  export let priorityRequestLow: string;
  export let useSoftwareRenderer: string;
  export let workingColorSpace: string;
  export let workingFormat: string;
}

namespace CIFormat {
  export let A16: number;
  export let A8: number;
  export let ABGR8: number;
  export let ARGB8: number;
  export let Af: number;
  export let Ah: number;
  export let BGRA8: number;
  export let L16: number;
  export let L8: number;
  export let LA16: number;
  export let LA8: number;
  export let LAf: number;
  export let LAh: number;
  export let Lf: number;
  export let Lh: number;
  export let R16: number;
  export let R8: number;
  export let RG16: number;
  export let RG8: number;
  export let RGBA16: number;
  export let RGBA8: number;
  export let RGBAf: number;
  export let RGBAh: number;
  export let RGf: number;
  export let RGh: number;
  export let Rf: number;
  export let Rh: number;
}

namespace CIImageAutoAdjustmentOption {
  export let crop: string;
  export let enhance: string;
  export let features: string;
  export let level: string;
  export let redEye: string;
}

namespace CIImageOption {
  export let applyOrientationProperty: string;
  export let auxiliaryDepth: string;
  export let auxiliaryDisparity: string;
  export let auxiliaryPortraitEffectsMatte: string;
  export let auxiliarySemanticSegmentationHairMatte: string;
  export let auxiliarySemanticSegmentationSkinMatte: string;
  export let auxiliarySemanticSegmentationTeethMatte: string;
  export let colorSpace: string;
  export let nearestSampling: string;
  export let properties: string;
  export let providerTileSize: string;
  export let providerUserInfo: string;
}

namespace CIImageRepresentationOption {
  export let avDepthData: string;
  export let avPortraitEffectsMatte: string;
  export let avSemanticSegmentationMattes: string;
  export let depthImage: string;
  export let disparityImage: string;
  export let portraitEffectsMatteImage: string;
  export let semanticSegmentationHairMatteImage: string;
  export let semanticSegmentationSkinMatteImage: string;
  export let semanticSegmentationTeethMatteImage: string;
}

namespace CIRAWFilterOption {
  export let activeKeys: string;
  export let allowDraftMode: string;
  export let baselineExposure: string;
  export let boostAmount: string;
  export let boostShadowAmount: string;
  export let colorNoiseReductionAmount: string;
  export let decoderVersion: string;
  export let disableGamutMap: string;
  export let enableChromaticNoiseTracking: string;
  export let enableSharpening: string;
  export let enableVendorLensCorrection: string;
  export let ignoreImageOrientation: string;
  export let imageOrientation: string;
  export let linearSpaceFilter: string;
  export let luminanceNoiseReductionAmount: string;
  export let moireAmount: string;
  export let neutralChromaticityX: string;
  export let neutralChromaticityY: string;
  export let neutralLocation: string;
  export let neutralTemperature: string;
  export let neutralTint: string;
  export let noiseReductionAmount: string;
  export let noiseReductionContrastAmount: string;
  export let noiseReductionDetailAmount: string;
  export let noiseReductionSharpnessAmount: string;
  export let scaleFactor: string;
  export let outputNativeSize: string;
  export let supportedDecoderVersions: string;
}

namespace CMImageDescriptionFlavor {
  export let mobile3GPFamily: any;
  export let isoFamily: any;
  export let quickTimeMovie: any;
}

namespace CMSampleTimingInfo {
  export let invalid: CMSampleTimingInfo;
}

namespace CMSoundDescriptionFlavor {
  export let mobile3GPFamily: any;
  export let isoFamily: any;
  export let quickTimeMovie: any;
  export let quickTimeMovieV2: any;
}

namespace CMTime {
  export let indefinite: CMTime;
  export let invalid: CMTime;
  export let negativeInfinity: CMTime;
  export let positiveInfinity: CMTime;
  export let zero: CMTime;
}

namespace CMTimeMapping {
  export let invalid: CMTimeMapping;
}

namespace CMTimeRange {
  export let invalid: CMTimeRange;
  export let zero: CMTimeRange;
}

namespace DateComponentsFormatter {
  export enum UnitsStyle {
    Positional = 0,
    Abbreviated = 1,
    Short = 2,
    Full = 3,
    SpellOut = 4,
    Brief = 5
  }

  global['DateComponentsFormatter']['UnitsStyle'] = UnitsStyle;

  export enum ZeroFormattingBehavior {
    None = 0,
    Default = 1,
    DropLeading = 2,
    DropMiddle = 4,
    DropTrailing = 8,
    DropAll = 14,
    Pad = 65536
  }

  global['DateComponentsFormatter']['ZeroFormattingBehavior'] = ZeroFormattingBehavior;

}

namespace DateFormatter {
  export enum Behavior {
    BehaviorDefault = 0,
    Behavior10_0 = 1000,
    Behavior10_4 = 1040
  }

  global['DateFormatter']['Behavior'] = Behavior;

  export enum Style {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4
  }

  global['DateFormatter']['Style'] = Style;

}

namespace DateIntervalFormatter {
  export enum Style {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4
  }

  global['DateIntervalFormatter']['Style'] = Style;

}

namespace Decimal {
  export type CalculationError = NSDecimalNumber;
  export type FloatLiteralType = number;
  export type IntegerLiteralType = number;
  export type Magnitude = number;
  export type RoundingMode = NSDecimalNumber;
  export type Stride = number;
}

namespace DistributedNotificationCenter {
  export enum Options {
    DeliverImmediately = 1,
    PostToAllSessions = 2
  }

  global['DistributedNotificationCenter']['Options'] = Options;

  export enum SuspensionBehavior {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4
  }

  global['DistributedNotificationCenter']['SuspensionBehavior'] = SuspensionBehavior;

  export let localNotificationCenterType: string;
}

namespace EnergyFormatter {
  export enum Unit {
    Joule = 11,
    Kilojoule = 14,
    Calorie = 1793,
    Kilocalorie = 1794
  }

  global['EnergyFormatter']['Unit'] = Unit;

}

namespace FileAttributeKey {
  export let appendOnly: string;
  export let busy: string;
  export let creationDate: string;
  export let deviceIdentifier: string;
  export let extensionHidden: string;
  export let groupOwnerAccountID: string;
  export let groupOwnerAccountName: string;
  export let hfsCreatorCode: string;
  export let hfsTypeCode: string;
  export let immutable: string;
  export let modificationDate: string;
  export let ownerAccountID: string;
  export let ownerAccountName: string;
  export let posixPermissions: string;
  export let protectionKey: string;
  export let referenceCount: string;
  export let size: string;
  export let systemFileNumber: string;
  export let systemFreeNodes: string;
  export let systemFreeSize: string;
  export let systemNodes: string;
  export let systemNumber: string;
  export let systemSize: string;
  export let type: string;
}

namespace FileAttributeType {
  export let typeBlockSpecial: string;
  export let typeCharacterSpecial: string;
  export let typeDirectory: string;
  export let typeRegular: string;
  export let typeSocket: string;
  export let typeSymbolicLink: string;
  export let typeUnknown: string;
}

namespace FileHandle {
  export let readCompletionNotification: string;
}

namespace FileManager {
  export enum DirectoryEnumerationOptions {
    SkipsSubdirectoryDescendants = 1,
    SkipsPackageDescendants = 2,
    SkipsHiddenFiles = 4,
    IncludesDirectoriesPostOrder = 8,
    ProducesRelativePathURLs = 16
  }

  global['FileManager']['DirectoryEnumerationOptions'] = DirectoryEnumerationOptions;

  export enum ItemReplacementOptions {
    UsingNewMetadataOnly = 1,
    WithoutDeletingBackupItem = 2
  }

  global['FileManager']['ItemReplacementOptions'] = ItemReplacementOptions;

  export enum UnmountOptions {
    AllPartitionsAndEjectDisk = 1,
    WithoutUI = 2
  }

  global['FileManager']['UnmountOptions'] = UnmountOptions;

  export enum SearchPathDirectory {
    ApplicationDirectory = 1,
    DemoApplicationDirectory = 2,
    DeveloperApplicationDirectory = 3,
    AdminApplicationDirectory = 4,
    LibraryDirectory = 5,
    DeveloperDirectory = 6,
    UserDirectory = 7,
    DocumentationDirectory = 8,
    DocumentDirectory = 9,
    CoreServiceDirectory = 10,
    AutosavedInformationDirectory = 11,
    DesktopDirectory = 12,
    CachesDirectory = 13,
    ApplicationSupportDirectory = 14,
    DownloadsDirectory = 15,
    InputMethodsDirectory = 16,
    MoviesDirectory = 17,
    MusicDirectory = 18,
    PicturesDirectory = 19,
    PrinterDescriptionDirectory = 20,
    SharedPublicDirectory = 21,
    PreferencePanesDirectory = 22,
    ApplicationScriptsDirectory = 23,
    ItemReplacementDirectory = 99,
    AllApplicationsDirectory = 100,
    AllLibrariesDirectory = 101,
    TrashDirectory = 102
  }

  global['FileManager']['SearchPathDirectory'] = SearchPathDirectory;

  export enum SearchPathDomainMask {
    UserDomainMask = 1,
    LocalDomainMask = 2,
    NetworkDomainMask = 4,
    SystemDomainMask = 8,
    AllDomainsMask = 65535
  }

  global['FileManager']['SearchPathDomainMask'] = SearchPathDomainMask;

  export enum URLRelationship {
    Contains = 0,
    Same = 1,
    Other = 2
  }

  global['FileManager']['URLRelationship'] = URLRelationship;

  export enum VolumeEnumerationOptions {
    SkipHiddenVolumes = 2,
    ProduceFileReferenceURLs = 4
  }

  global['FileManager']['VolumeEnumerationOptions'] = VolumeEnumerationOptions;

}

namespace FileProtectionType {
  export let complete: string;
  export let completeUnlessOpen: string;
  export let completeUntilFirstUserAuthentication: string;
  export let none: string;
}

namespace FileWrapper {
  export enum ReadingOptions {
    Immediate = 1,
    WithoutMapping = 2
  }

  global['FileWrapper']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    Atomic = 1,
    WithNameUpdating = 2
  }

  global['FileWrapper']['WritingOptions'] = WritingOptions;

}

namespace Formatter {
  export enum Context {
    Unknown = 0,
    Dynamic = 1,
    Standalone = 2,
    ListItem = 3,
    BeginningOfSentence = 4,
    MiddleOfSentence = 5
  }

  global['Formatter']['Context'] = Context;

  export enum UnitStyle {
    Short = 1,
    Medium = 2,
    Long = 3
  }

  global['Formatter']['UnitStyle'] = UnitStyle;

}

namespace HTTPCookie {
  export enum AcceptPolicy {
    Always = 0,
    Never = 1,
    OnlyFromMainDocumentDomain = 2
  }

  global['HTTPCookie']['AcceptPolicy'] = AcceptPolicy;

}

namespace HTTPCookiePropertyKey {
  export let comment: string;
  export let commentURL: string;
  export let discard: string;
  export let domain: string;
  export let expires: string;
  export let maximumAge: string;
  export let name: string;
  export let originURL: string;
  export let path: string;
  export let port: string;
  export let sameSitePolicy: string;
  export let secure: string;
  export let value: string;
  export let version: string;
}

namespace HTTPCookieStringPolicy {
  export let sameSiteLax: string;
  export let sameSiteStrict: string;
}

namespace ISO8601DateFormatter {
  export enum Options {
    WithYear = 1,
    WithMonth = 2,
    WithWeekOfYear = 4,
    WithDay = 16,
    WithTime = 32,
    WithTimeZone = 64,
    WithSpaceBetweenDateAndTime = 128,
    WithDashSeparatorInDate = 256,
    WithColonSeparatorInTime = 512,
    WithColonSeparatorInTimeZone = 1024,
    WithFractionalSeconds = 2048,
    WithFullDate = 275,
    WithFullTime = 1632,
    WithInternetDateTime = 1907
  }

  global['ISO8601DateFormatter']['Options'] = Options;

}

namespace JSONSerialization {
  export enum ReadingOptions {
    MutableContainers = 1,
    MutableLeaves = 2,
    FragmentsAllowed = 4,
    AllowFragments = 4
  }

  global['JSONSerialization']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    PrettyPrinted = 1,
    SortedKeys = 2,
    FragmentsAllowed = 4,
    WithoutEscapingSlashes = 8
  }

  global['JSONSerialization']['WritingOptions'] = WritingOptions;

}

namespace LengthFormatter {
  export enum Unit {
    Millimeter = 8,
    Centimeter = 9,
    Meter = 11,
    Kilometer = 14,
    Inch = 1281,
    Foot = 1282,
    Yard = 1283,
    Mile = 1284
  }

  global['LengthFormatter']['Unit'] = Unit;

}

namespace MassFormatter {
  export enum Unit {
    Gram = 11,
    Kilogram = 14,
    Ounce = 1537,
    Pound = 1538,
    Stone = 1539
  }

  global['MassFormatter']['Unit'] = Unit;

}

namespace MeasurementFormatter {
  export enum UnitOptions {
    ProvidedUnit = 1,
    NaturalScale = 2,
    TemperatureWithoutUnit = 4
  }

  global['MeasurementFormatter']['UnitOptions'] = UnitOptions;

}

namespace NSAccessibility {
  export enum AnnotationPosition {
    FullRange = 0,
    Start = 1,
    End = 2
  }

  global['NSAccessibility']['AnnotationPosition'] = AnnotationPosition;

  export enum Orientation {
    Unknown = 0,
    Vertical = 1,
    Horizontal = 2
  }

  global['NSAccessibility']['Orientation'] = Orientation;

  export enum RulerMarkerType {
    Unknown = 0,
    TabStopLeft = 1,
    TabStopRight = 2,
    TabStopCenter = 3,
    TabStopDecimal = 4,
    IndentHead = 5,
    IndentTail = 6,
    IndentFirstLine = 7
  }

  global['NSAccessibility']['RulerMarkerType'] = RulerMarkerType;

  export enum SortDirection {
    Unknown = 0,
    Ascending = 1,
    Descending = 2
  }

  global['NSAccessibility']['SortDirection'] = SortDirection;

  export enum Units {
    Unknown = 0,
    Inches = 1,
    Centimeters = 2,
    Points = 3,
    Picas = 4
  }

  global['NSAccessibility']['Units'] = Units;

  export let activationPoint: string;
  export let allowedValues: string;
  export let alternateUIVisible: string;
  export let element: string;
  export let label: string;
  export let location: string;
  export let announcement: string;
  export let announcementRequested: string;
  export let applicationActivated: string;
  export let applicationDeactivated: string;
  export let applicationHidden: string;
  export let application: string;
  export let applicationShown: string;
  export let ascending: string;
  export let attributedStringForRange: string;
  export let boundsForRange: string;
  export let browser: string;
  export let busyIndicator: string;
  export let button: string;
  export let cancel: string;
  export let cancelButton: string;
  export let cellForColumnAndRow: string;
  export let cell: string;
  export let centerTabStop: string;
  export let centimeters: string;
  export let checkBox: string;
  export let children: string;
  export let clearButton: string;
  export let closeButton: string;
  export let collectionListSubrole: string;
  export let colorWell: string;
  export let columnCount: string;
  export let columnHeaderUIElements: string;
  export let columnIndexRange: string;
  export let column: string;
  export let columnTitles: string;
  export let columns: string;
  export let comboBox: string;
  export let confirm: string;
  export let containsProtectedContent: string;
  export let contentList: string;
  export let contents: string;
  export let created: string;
  export let criticalValue: string;
  export let decimalTabStop: string;
  export let decrement: string;
  export let decrementArrow: string;
  export let decrementButton: string;
  export let decrementPage: string;
  export let defaultButton: string;
  export let definitionList: string;
  export let delete_: string;
  export let descending: string;
  export let description: string;
  export let descriptionList: string;
  export let dialog: string;
  export let disclosedByRow: string;
  export let disclosedRows: string;
  export let disclosing: string;
  export let disclosureLevel: string;
  export let disclosureTriangle: string;
  export let document: string;
  export let drawerCreated: string;
  export let drawer: string;
  export let edited: string;
  export let enabled: string;
  export let ErrorCodeExceptionInfo: string;
  export let expanded: string;
  export let extrasMenuBar: string;
  export let filename: string;
  export let firstLineIndent: string;
  export let floatingWindow: string;
  export let focused: string;
  export let focusedUIElement: string;
  export let focusedUIElementChanged: string;
  export let focusedWindow: string;
  export let focusedWindowChanged: string;
  export let fontFamily: string;
  export let fontName: string;
  export let fontSize: string;
  export let frontmost: string;
  export let fullScreenButton: string;
  export let grid: string;
  export let group: string;
  export let growArea: string;
  export let handle: string;
  export let handles: string;
  export let headIndent: string;
  export let header: string;
  export let help: string;
  export let helpTagCreated: string;
  export let helpTag: string;
  export let hidden: string;
  export let horizontal: string;
  export let horizontalScrollBar: string;
  export let horizontalUnitDescription: string;
  export let horizontalUnits: string;
  export let identifier: string;
  export let image: string;
  export let inches: string;
  export let increment: string;
  export let incrementArrow: string;
  export let incrementButton: string;
  export let incrementPage: string;
  export let incrementor: string;
  export let index: string;
  export let insertionPointLineNumber: string;
  export let labelUIElements: string;
  export let labelValue: string;
  export let layoutArea: string;
  export let layoutChanged: string;
  export let layoutItem: string;
  export let layoutPointForScreenPoint: string;
  export let layoutSizeForScreenSize: string;
  export let leftTabStop: string;
  export let levelIndicator: string;
  export let lineForIndex: string;
  export let link: string;
  export let linkedUIElements: string;
  export let list: string;
  export let main: string;
  export let mainWindow: string;
  export let mainWindowChanged: string;
  export let markerGroupUIElement: string;
  export let markerType: string;
  export let markerTypeDescription: string;
  export let markerUIElements: string;
  export let markerValues: string;
  export let matte: string;
  export let maxValue: string;
  export let menuBar: string;
  export let menuBarItem: string;
  export let menuButton: string;
  export let menuItem: string;
  export let menu: string;
  export let minValue: string;
  export let minimizeButton: string;
  export let minimized: string;
  export let modal: string;
  export let moved: string;
  export let nextContents: string;
  export let numberOfCharacters: string;
  export let orderedByRow: string;
  export let orientation: string;
  export let outline: string;
  export let outlineRow: string;
  export let overflowButton: string;
  export let pageRole: string;
  export let parent: string;
  export let picas: string;
  export let pick: string;
  export let placeholderValue: string;
  export let points: string;
  export let popUpButton: string;
  export let popover: string;
  export let position: string;
  export let press: string;
  export let previousContents: string;
  export let priority: string;
  export let progressIndicator: string;
  export let proxy: string;
  export let rtfForRange: string;
  export let radioButton: string;
  export let radioGroup: string;
  export let raise: string;
  export let rangeForIndex: string;
  export let rangeForLine: string;
  export let rangeForPosition: string;
  export let ratingIndicator: string;
  export let relevanceIndicator: string;
  export let required: string;
  export let resized: string;
  export let rightTabStop: string;
  export let role: string;
  export let roleDescription: string;
  export let rowCollapsed: string;
  export let rowCount: string;
  export let rowCountChanged: string;
  export let rowExpanded: string;
  export let rowHeaderUIElements: string;
  export let rowIndexRange: string;
  export let row: string;
  export let rows: string;
  export let rulerMarker: string;
  export let ruler: string;
  export let screenPointForLayoutPoint: string;
  export let screenSizeForLayoutSize: string;
  export let scrollArea: string;
  export let scrollBar: string;
  export let searchButton: string;
  export let searchField: string;
  export let searchMenu: string;
  export let sectionListSubrole: string;
  export let secureTextField: string;
  export let selected: string;
  export let selectedCells: string;
  export let selectedCellsChanged: string;
  export let selectedChildren: string;
  export let selectedChildrenChanged: string;
  export let selectedChildrenMoved: string;
  export let selectedColumns: string;
  export let selectedColumnsChanged: string;
  export let selectedRows: string;
  export let selectedRowsChanged: string;
  export let selectedText: string;
  export let selectedTextChanged: string;
  export let selectedTextRange: string;
  export let selectedTextRanges: string;
  export let servesAsTitleForUIElements: string;
  export let sharedCharacterRange: string;
  export let sharedFocusElements: string;
  export let sharedTextUIElements: string;
  export let sheetCreated: string;
  export let sheet: string;
  export let showAlternateUI: string;
  export let showDefaultUI: string;
  export let showMenu: string;
  export let shownMenu: string;
  export let size: string;
  export let slider: string;
  export let sortButton: string;
  export let sortDirection: string;
  export let splitGroup: string;
  export let splitter: string;
  export let splitters: string;
  export let standardWindow: string;
  export let staticText: string;
  export let stringForRange: string;
  export let styleRangeForIndex: string;
  export let subrole: string;
  export let switch_: string;
  export let systemDialog: string;
  export let systemFloatingWindow: string;
  export let systemWide: string;
  export let tabButtonSubrole: string;
  export let tabGroup: string;
  export let table: string;
  export let tableRow: string;
  export let tabs: string;
  export let tailIndent: string;
  export let textArea: string;
  export let textAttachment: string;
  export let textField: string;
  export let textLink: string;
  export let timeline: string;
  export let title: string;
  export let titleChanged: string;
  export let titleUIElement: string;
  export let toggle: string;
  export let toolbarButton: string;
  export let toolbar: string;
  export let topLevelUIElement: string;
  export let uiElementDestroyed: string;
  export let uiElements: string;
  export let url: string;
  export let unitDescription: string;
  export let units: string;
  export let unitsChanged: string;
  export let unknown: string;
  export let value: string;
  export let valueChanged: string;
  export let valueDescription: string;
  export let valueIndicator: string;
  export let vertical: string;
  export let verticalScrollBar: string;
  export let verticalUnitDescription: string;
  export let verticalUnits: string;
  export let visibleCells: string;
  export let visibleCharacterRange: string;
  export let visibleChildren: string;
  export let visibleColumns: string;
  export let visibleName: string;
  export let visibleRows: string;
  export let warningValue: string;
  export let window: string;
  export let windowCreated: string;
  export let windowDeminiaturized: string;
  export let windowMiniaturized: string;
  export let windowMoved: string;
  export let windowResized: string;
  export let windows: string;
  export let zoomButton: string;
}

namespace NSAccessibilityCustomRotor {
  export enum SearchDirection {
    Previous = 0,
    Next = 1
  }

  global['NSAccessibilityCustomRotor']['SearchDirection'] = SearchDirection;

  export enum RotorType {
    Custom = 0,
    Any = 1,
    Annotation = 2,
    BoldText = 3,
    Heading = 4,
    HeadingLevel1 = 5,
    HeadingLevel2 = 6,
    HeadingLevel3 = 7,
    HeadingLevel4 = 8,
    HeadingLevel5 = 9,
    HeadingLevel6 = 10,
    Image = 11,
    ItalicText = 12,
    Landmark = 13,
    Link = 14,
    List = 15,
    MisspelledWord = 16,
    Table = 17,
    TextField = 18,
    UnderlinedText = 19,
    VisitedLink = 20
  }

  global['NSAccessibilityCustomRotor']['RotorType'] = RotorType;

}

namespace NSAlert {
  export enum Style {
    Warning = 0,
    Informational = 1,
    Critical = 2
  }

  global['NSAlert']['Style'] = Style;

}

namespace NSAnimation {
  export enum BlockingMode {
    Blocking = 0,
    Nonblocking = 1,
    NonblockingThreaded = 2
  }

  global['NSAnimation']['BlockingMode'] = BlockingMode;

  export enum Curve {
    EaseInOut = 0,
    EaseIn = 1,
    EaseOut = 2,
    Linear = 3
  }

  global['NSAnimation']['Curve'] = Curve;

  export let progressMarkUserInfoKey: string;
  export let progressMarkNotification: string;
  export type Progress = number;
}

namespace NSAppKitVersion {
  export let current: number;
  export let macOS10_0: number;
  export let macOS10_1: number;
  export let macOS10_10: number;
  export let macOS10_10_2: number;
  export let macOS10_10_3: number;
  export let macOS10_10_4: number;
  export let macOS10_10_5: number;
  export let macOS10_10_Max: number;
  export let macOS10_11: number;
  export let macOS10_11_1: number;
  export let macOS10_11_2: number;
  export let macOS10_11_3: number;
  export let macOS10_12: number;
  export let macOS10_12_1: number;
  export let macOS10_12_2: number;
  export let macOS10_13: number;
  export let macOS10_13_1: number;
  export let macOS10_13_2: number;
  export let macOS10_13_4: number;
  export let number10_14: number;
  export let number10_14_1: number;
  export let number10_14_2: number;
  export let number10_14_3: number;
  export let number10_14_4: number;
  export let number10_14_5: number;
  export let macOS10_2: number;
  export let macOS10_2_3: number;
  export let macOS10_3: number;
  export let macOS10_3_2: number;
  export let macOS10_3_3: number;
  export let macOS10_3_5: number;
  export let macOS10_3_7: number;
  export let macOS10_3_9: number;
  export let macOS10_4: number;
  export let macOS10_4_1: number;
  export let macOS10_4_3: number;
  export let macOS10_4_4: number;
  export let macOS10_4_7: number;
  export let macOS10_5: number;
  export let macOS10_5_2: number;
  export let macOS10_5_3: number;
  export let macOS10_6: number;
  export let macOS10_7: number;
  export let macOS10_7_2: number;
  export let macOS10_7_3: number;
  export let macOS10_7_4: number;
  export let macOS10_8: number;
  export let macOS10_9: number;
  export let numberWithColumnResizingBrowser: number;
  export let numberWithContinuousScrollingBrowser: number;
  export let numberWithCursorSizeSupport: number;
  export let numberWithCustomSheetPosition: number;
  export let numberWithDeferredWindowDisplaySupport: number;
  export let numberWithDirectionalTabs: number;
  export let numberWithDockTilePlugInSupport: number;
  export let numberWithPatternColorLeakFix: number;
}

namespace NSAppearance {
  export let accessibilityHighContrastAqua: string;
  export let accessibilityHighContrastDarkAqua: string;
  export let accessibilityHighContrastVibrantDark: string;
  export let accessibilityHighContrastVibrantLight: string;
  export let aqua: string;
  export let darkAqua: string;
  export let vibrantDark: string;
  export let vibrantLight: string;
}

namespace NSAppleEventDescriptor {
  export enum SendOptions {
    NoReply = 1,
    QueueReply = 2,
    WaitForReply = 3,
    NeverInteract = 16,
    CanInteract = 32,
    AlwaysInteract = 48,
    CanSwitchLayer = 64,
    DontRecord = 4096,
    DontExecute = 8192,
    DontAnnotate = 65536,
    DefaultOptions = 35
  }

  global['NSAppleEventDescriptor']['SendOptions'] = SendOptions;

}

namespace NSAppleEventManager {
  export type SuspensionID = OpaquePointer;
}

namespace NSAppleScript {
  export let errorAppName: string;
  export let errorBriefMessage: string;
  export let errorMessage: string;
  export let errorNumber: string;
  export let errorRange: string;
}

namespace NSApplication {
  export enum ActivationOptions {
    ActivateAllWindows = 1,
    ActivateIgnoringOtherApps = 2
  }

  global['NSApplication']['ActivationOptions'] = ActivationOptions;

  export enum ActivationPolicy {
    Regular = 0,
    Accessory = 1,
    Prohibited = 2
  }

  global['NSApplication']['ActivationPolicy'] = ActivationPolicy;

  export enum DelegateReply {
    Success = 0,
    Cancel = 1,
    Failure = 2
  }

  global['NSApplication']['DelegateReply'] = DelegateReply;

  export enum OcclusionState {
    Visible = 2
  }

  global['NSApplication']['OcclusionState'] = OcclusionState;

  export enum PresentationOptions {
    Default = 0,
    AutoHideDock = 1,
    HideDock = 2,
    AutoHideMenuBar = 4,
    HideMenuBar = 8,
    DisableAppleMenu = 16,
    DisableProcessSwitching = 32,
    DisableForceQuit = 64,
    DisableSessionTermination = 128,
    DisableHideApplication = 256,
    DisableMenuBarTransparency = 512,
    FullScreen = 1024,
    AutoHideToolbar = 2048,
    DisableCursorLocationAssistance = 4096
  }

  global['NSApplication']['PresentationOptions'] = PresentationOptions;

  export enum PrintReply {
    PrintingCancelled = 0,
    PrintingSuccess = 1,
    PrintingFailure = 3,
    PrintingReplyLater = 2
  }

  global['NSApplication']['PrintReply'] = PrintReply;

  export enum TerminateReply {
    TerminateCancel = 0,
    TerminateNow = 1,
    TerminateLater = 2
  }

  global['NSApplication']['TerminateReply'] = TerminateReply;

  export enum RemoteNotificationType {
    None = 0,
    Badge = 1,
    Sound = 2,
    Alert = 4
  }

  global['NSApplication']['RemoteNotificationType'] = RemoteNotificationType;

  export enum RequestUserAttentionType {
    CriticalRequest = 0,
    InformationalRequest = 10
  }

  global['NSApplication']['RequestUserAttentionType'] = RequestUserAttentionType;

  export enum WindowListOptions {
    OrderedFrontToBack = 1
  }

  global['NSApplication']['WindowListOptions'] = WindowListOptions;

  export let applicationIcon: string;
  export let applicationName: string;
  export let applicationVersion: string;
  export let credits: string;
  export let version: string;
  export let alertFirstButtonReturn: number;
  export let alertSecondButtonReturn: number;
  export let alertThirdButtonReturn: number;
  export let didBecomeActiveNotification: string;
  export let didChangeOcclusionStateNotification: string;
  export let didChangeScreenParametersNotification: string;
  export let didFinishLaunchingNotification: string;
  export let didFinishRestoringWindowsNotification: string;
  export let didHideNotification: string;
  export let didResignActiveNotification: string;
  export let didUnhideNotification: string;
  export let didUpdateNotification: string;
  export let launchIsDefaultUserInfoKey: string;
  export let launchUserNotificationUserInfoKey: string;
  export let willBecomeActiveNotification: string;
  export let willFinishLaunchingNotification: string;
  export let willHideNotification: string;
  export let willResignActiveNotification: string;
  export let willTerminateNotification: string;
  export let willUnhideNotification: string;
  export let willUpdateNotification: string;
  export let abort: number;
  export let cancel: number;
  export let continue_: number;
  export let OK: number;
  export let stop: number;
  export type ModalSession = OpaquePointer;
}

namespace NSArray {
  export type Iterator = NSFastEnumerationIterator;
}

namespace NSAttributedString {
  export enum SpellingState {
    SpellingFlag = 1,
    GrammarFlag = 2
  }

  global['NSAttributedString']['SpellingState'] = SpellingState;

  export enum EnumerationOptions {
    Reverse = 2,
    LongestEffectiveRangeNotRequired = 1048576
  }

  global['NSAttributedString']['EnumerationOptions'] = EnumerationOptions;

  export let accessibilityAnnotationTextAttribute: string;
  export let accessibilityAttachment: string;
  export let accessibilityAutocorrected: string;
  export let accessibilityBackgroundColor: string;
  export let accessibilityCustomText: string;
  export let accessibilityFont: string;
  export let accessibilityForegroundColor: string;
  export let accessibilityLanguage: string;
  export let accessibilityLink: string;
  export let accessibilityListItemIndex: string;
  export let accessibilityListItemLevel: string;
  export let accessibilityListItemPrefix: string;
  export let accessibilityMarkedMisspelled: string;
  export let accessibilityMisspelled: string;
  export let accessibilityShadow: string;
  export let accessibilityStrikethroughColor: string;
  export let accessibilityStrikethrough: string;
  export let accessibilitySuperscript: string;
  export let accessibilityAlignment: string;
  export let accessibilityUnderlineColor: string;
  export let accessibilityUnderline: string;
  export let appearance: string;
  export let attachment: string;
  export let author: string;
  export let backgroundColor: string;
  export let baseURL: string;
  export let baselineOffset: string;
  export let bottomMargin: string;
  export let category: string;
  export let characterEncoding: string;
  export let cocoaVersion: string;
  export let comment: string;
  export let company: string;
  export let converted: string;
  export let copyright: string;
  export let creationTime: string;
  export let cursor: string;
  export let defaultAttributes: string;
  export let defaultTabInterval: string;
  export let docFormat: string;
  export let documentType: string;
  export let editor: string;
  export let excludedElements: string;
  export let expansion: string;
  export let fileType: string;
  export let font: string;
  export let foregroundColor: string;
  export let glyphInfo: string;
  export let html: string;
  export let hyphenationFactor: string;
  export let kern: string;
  export let keywords: string;
  export let leftMargin: string;
  export let ligature: string;
  export let link: string;
  export let macSimpleText: string;
  export let manager: string;
  export let markedClauseSegment: string;
  export let modificationTime: string;
  export let obliqueness: string;
  export let officeOpenXML: string;
  export let openDocument: string;
  export let paperSize: string;
  export let paragraphStyle: string;
  export let plain: string;
  export let prefixSpaces: string;
  export let rtfd: string;
  export let rtf: string;
  export let readOnly: string;
  export let rightMargin: string;
  export let shadow: string;
  export let sourceTextScaling: string;
  export let spellingState: string;
  export let strikethroughColor: string;
  export let strikethroughStyle: string;
  export let strokeColor: string;
  export let strokeWidth: string;
  export let subject: string;
  export let superscript: string;
  export let targetTextScaling: string;
  export let textAlternatives: string;
  export let textEffect: string;
  export let letterpressStyle: string;
  export let textEncodingName: string;
  export let orientation: string;
  export let range: string;
  export let textLayoutSections: string;
  export let textScaling: string;
  export let textSizeMultiplier: string;
  export let timeout: string;
  export let title: string;
  export let toolTip: string;
  export let topMargin: string;
  export let underlineColor: string;
  export let underlineStyle: string;
  export let verticalGlyphForm: string;
  export let viewMode: string;
  export let viewSize: string;
  export let viewZoom: string;
  export let webArchive: string;
  export let webPreferences: string;
  export let webResourceLoadDelegate: string;
  export let wordML: string;
  export let writingDirection: string;
}

namespace NSBackgroundActivityScheduler {
  export enum Result {
    Finished = 1,
    Deferred = 2
  }

  global['NSBackgroundActivityScheduler']['Result'] = Result;

}

namespace NSBezierPath {
  export enum ElementType {
    MoveTo = 0,
    LineTo = 1,
    CurveTo = 2,
    ClosePath = 3
  }

  global['NSBezierPath']['ElementType'] = ElementType;

  export enum LineCapStyle {
    Butt = 0,
    Round = 1,
    Square = 2
  }

  global['NSBezierPath']['LineCapStyle'] = LineCapStyle;

  export enum LineJoinStyle {
    Miter = 0,
    Round = 1,
    Bevel = 2
  }

  global['NSBezierPath']['LineJoinStyle'] = LineJoinStyle;

  export enum WindingRule {
    NonZero = 0,
    EvenOdd = 1
  }

  global['NSBezierPath']['WindingRule'] = WindingRule;

  export let bevel: NSBezierPath.LineJoinStyle;
  export let butt: NSBezierPath.LineCapStyle;
  export let closePath: NSBezierPath.ElementType;
  export let curveTo: NSBezierPath.ElementType;
  export let evenOdd: NSBezierPath.WindingRule;
  export let lineTo: NSBezierPath.ElementType;
  export let miter: NSBezierPath.LineJoinStyle;
  export let moveTo: NSBezierPath.ElementType;
  export let nonZero: NSBezierPath.WindingRule;
  export let round: NSBezierPath.LineCapStyle;
  export let square: NSBezierPath.LineCapStyle;
}

namespace NSBindingInfoKey {
  export let observedKeyPath: string;
  export let observedObject: string;
  export let options: string;
}

namespace NSBindingName {
  export let alignment: string;
  export let alternateImage: string;
  export let alternateTitle: string;
  export let animate: string;
  export let animationDelay: string;
  export let argument: string;
  export let attributedString: string;
  export let contentArray: string;
  export let contentArrayForMultipleSelection: string;
  export let content: string;
  export let contentDictionary: string;
  export let contentHeight: string;
  export let contentObject: string;
  export let contentObjects: string;
  export let contentSet: string;
  export let contentValues: string;
  export let contentWidth: string;
  export let criticalValue: string;
  export let data: string;
  export let displayPatternTitle: string;
  export let displayPatternValue: string;
  export let documentEdited: string;
  export let doubleClickArgument: string;
  export let doubleClickTarget: string;
  export let editable: string;
  export let enabled: string;
  export let excludedKeys: string;
  export let filterPredicate: string;
  export let font: string;
  export let fontBold: string;
  export let fontFamilyName: string;
  export let fontItalic: string;
  export let fontName: string;
  export let fontSize: string;
  export let headerTitle: string;
  export let hidden: string;
  export let image: string;
  export let includedKeys: string;
  export let initialKey: string;
  export let initialValue: string;
  export let isIndeterminate: string;
  export let label: string;
  export let localizedKeyDictionary: string;
  export let managedObjectContext: string;
  export let maxValue: string;
  export let maxWidth: string;
  export let maximumRecents: string;
  export let minValue: string;
  export let minWidth: string;
  export let mixedStateImage: string;
  export let offStateImage: string;
  export let onStateImage: string;
  export let positioningRect: string;
  export let predicate: string;
  export let recentSearches: string;
  export let representedFilename: string;
  export let rowHeight: string;
  export let selectedIdentifier: string;
  export let selectedIndex: string;
  export let selectedLabel: string;
  export let selectedObject: string;
  export let selectedObjects: string;
  export let selectedTag: string;
  export let selectedValue: string;
  export let selectedValues: string;
  export let selectionIndexPaths: string;
  export let selectionIndexes: string;
  export let sortDescriptors: string;
  export let target: string;
  export let textColor: string;
  export let title: string;
  export let toolTip: string;
  export let transparent: string;
  export let value: string;
  export let valuePath: string;
  export let valueURL: string;
  export let visible: string;
  export let warningValue: string;
  export let width: string;
}

namespace NSBindingOption {
  export let allowsEditingMultipleValuesSelection: string;
  export let allowsNullArgument: string;
  export let alwaysPresentsApplicationModalAlerts: string;
  export let conditionallySetsEditable: string;
  export let conditionallySetsEnabled: string;
  export let conditionallySetsHidden: string;
  export let contentPlacementTag: string;
  export let continuouslyUpdatesValue: string;
  export let createsSortDescriptor: string;
  export let deletesObjectsOnRemove: string;
  export let displayName: string;
  export let displayPattern: string;
  export let handlesContentAsCompoundValue: string;
  export let insertsNullPlaceholder: string;
  export let invokesSeparatelyWithArrayObjects: string;
  export let multipleValuesPlaceholder: string;
  export let noSelectionPlaceholder: string;
  export let notApplicablePlaceholder: string;
  export let nullPlaceholder: string;
  export let predicateFormat: string;
  export let raisesForNotApplicableKeys: string;
  export let selectorName: string;
  export let selectsAllWhenSettingContent: string;
  export let validatesImmediately: string;
  export let valueTransformer: string;
  export let valueTransformerName: string;
}

namespace NSBitmapImageRep {
  export enum Format {
    AlphaFirst = 1,
    AlphaNonpremultiplied = 2,
    FloatingPointSamples = 4,
    SixteenBitLittleEndian = 256,
    ThirtyTwoBitLittleEndian = 512,
    SixteenBitBigEndian = 1024,
    ThirtyTwoBitBigEndian = 2048
  }

  global['NSBitmapImageRep']['Format'] = Format;

  export enum FileType {
    TIFF = 0,
    BMP = 1,
    GIF = 2,
    JPEG = 3,
    PNG = 4,
    JPEG2000 = 5
  }

  global['NSBitmapImageRep']['FileType'] = FileType;

  export enum LoadStatus {
    UnknownType = -1,
    ReadingHeader = -2,
    WillNeedAllData = -3,
    InvalidData = -4,
    UnexpectedEOF = -5,
    Completed = -6
  }

  global['NSBitmapImageRep']['LoadStatus'] = LoadStatus;

  export enum TIFFCompression {
    None = 1,
    CCITTFAX3 = 3,
    CCITTFAX4 = 4,
    LZW = 5,
    JPEG = 6,
    NEXT = 32766,
    PackBits = 32773,
    OldJPEG = 32865
  }

  global['NSBitmapImageRep']['TIFFCompression'] = TIFFCompression;

  export let colorSyncProfileData: string;
  export let compressionFactor: string;
  export let compressionMethod: string;
  export let currentFrame: string;
  export let currentFrameDuration: string;
  export let ditherTransparency: string;
  export let exifData: string;
  export let fallbackBackgroundColor: string;
  export let frameCount: string;
  export let gamma: string;
  export let interlaced: string;
  export let loopCount: string;
  export let progressive: string;
  export let rgbColorTable: string;
}

namespace NSBox {
  export enum BoxType {
    Primary = 0,
    Separator = 2,
    Custom = 4
  }

  global['NSBox']['BoxType'] = BoxType;

  export enum TitlePosition {
    NoTitle = 0,
    AboveTop = 1,
    AtTop = 2,
    BelowTop = 3,
    AboveBottom = 4,
    AtBottom = 5,
    BelowBottom = 6
  }

  global['NSBox']['TitlePosition'] = TitlePosition;

  export let primary: NSBox.BoxType;
}

namespace NSBrowser {
  export enum ColumnResizingType {
    NoColumnResizing = 0,
    AutoColumnResizing = 1,
    UserColumnResizing = 2
  }

  global['NSBrowser']['ColumnResizingType'] = ColumnResizingType;

  export enum DropOperation {
    On = 0,
    Above = 1
  }

  global['NSBrowser']['DropOperation'] = DropOperation;

  export let columnConfigurationDidChangeNotification: string;
  export type ColumnsAutosaveName = String;
}

namespace NSButton {
  export enum BezelStyle {
    Rounded = 1,
    RegularSquare = 2,
    Disclosure = 5,
    ShadowlessSquare = 6,
    Circular = 7,
    TexturedSquare = 8,
    HelpButton = 9,
    SmallSquare = 10,
    TexturedRounded = 11,
    RoundRect = 12,
    Recessed = 13,
    RoundedDisclosure = 14,
    Inline = 15
  }

  global['NSButton']['BezelStyle'] = BezelStyle;

  export enum ButtonType {
    MomentaryLight = 0,
    PushOnPushOff = 1,
    Toggle = 2,
    Switch = 3,
    Radio = 4,
    MomentaryChange = 5,
    OnOff = 6,
    MomentaryPushIn = 7,
    Accelerator = 8,
    MultiLevelAccelerator = 9
  }

  global['NSButton']['ButtonType'] = ButtonType;

}

namespace NSCalendar {
  export enum Options {
    WrapComponents = 1,
    MatchStrictly = 2,
    SearchBackwards = 4,
    MatchPreviousTimePreservingSmallerUnits = 256,
    MatchNextTimePreservingSmallerUnits = 512,
    MatchNextTime = 1024,
    MatchFirst = 4096,
    MatchLast = 8192
  }

  global['NSCalendar']['Options'] = Options;

  export enum Unit {
    CalendarUnitEra = 2,
    CalendarUnitYear = 4,
    CalendarUnitMonth = 8,
    CalendarUnitDay = 16,
    CalendarUnitHour = 32,
    CalendarUnitMinute = 64,
    CalendarUnitSecond = 128,
    CalendarUnitWeekday = 512,
    CalendarUnitWeekdayOrdinal = 1024,
    CalendarUnitQuarter = 2048,
    CalendarUnitWeekOfMonth = 4096,
    CalendarUnitWeekOfYear = 8192,
    CalendarUnitYearForWeekOfYear = 16384,
    CalendarUnitNanosecond = 32768,
    CalendarUnitCalendar = 1048576,
    CalendarUnitTimeZone = 2097152,
    EraCalendarUnit = 2,
    YearCalendarUnit = 4,
    MonthCalendarUnit = 8,
    DayCalendarUnit = 16,
    HourCalendarUnit = 32,
    MinuteCalendarUnit = 64,
    SecondCalendarUnit = 128,
    WeekCalendarUnit = 256,
    WeekdayCalendarUnit = 512,
    WeekdayOrdinalCalendarUnit = 1024,
    QuarterCalendarUnit = 2048,
    WeekOfMonthCalendarUnit = 4096,
    WeekOfYearCalendarUnit = 8192,
    YearForWeekOfYearCalendarUnit = 16384,
    CalendarCalendarUnit = 1048576,
    TimeZoneCalendarUnit = 2097152
  }

  global['NSCalendar']['Unit'] = Unit;

  export let buddhist: string;
  export let chinese: string;
  export let coptic: string;
  export let ethiopicAmeteAlem: string;
  export let ethiopicAmeteMihret: string;
  export let gregorian: string;
  export let hebrew: string;
  export let ISO8601: string;
  export let indian: string;
  export let islamic: string;
  export let islamicCivil: string;
  export let islamicTabular: string;
  export let islamicUmmAlQura: string;
  export let japanese: string;
  export let persian: string;
  export let republicOfChina: string;
}

namespace NSCell {
  export enum Attribute {
    CellDisabled = 0,
    CellState = 1,
    PushInCell = 2,
    CellEditable = 3,
    ChangeGrayCell = 4,
    CellHighlighted = 5,
    CellLightsByContents = 6,
    CellLightsByGray = 7,
    ChangeBackgroundCell = 8,
    CellLightsByBackground = 9,
    CellIsBordered = 10,
    CellHasOverlappingImage = 11,
    CellHasImageHorizontal = 12,
    CellHasImageOnLeftOrBottom = 13,
    CellChangesContents = 14,
    CellIsInsetButton = 15,
    CellAllowsMixedState = 16
  }

  global['NSCell']['Attribute'] = Attribute;

  export enum HitResult {
    None = 0,
    ContentArea = 1,
    EditableTextArea = 2,
    TrackableArea = 4
  }

  global['NSCell']['HitResult'] = HitResult;

  export enum StyleMask {
    NoCellMask = 0,
    ContentsCellMask = 1,
    PushInCellMask = 2,
    ChangeGrayCellMask = 4,
    ChangeBackgroundCellMask = 8
  }

  global['NSCell']['StyleMask'] = StyleMask;

  export enum CellType {
    NullCellType = 0,
    TextCellType = 1,
    ImageCellType = 2
  }

  global['NSCell']['CellType'] = CellType;

}

namespace NSCoder {
  export enum DecodingFailurePolicy {
    RaiseException = 0,
    SetErrorAndReturn = 1
  }

  global['NSCoder']['DecodingFailurePolicy'] = DecodingFailurePolicy;

}

namespace NSCollectionView {
  export enum UpdateAction {
    Insert = 0,
    Delete = 1,
    Reload = 2,
    Move = 3,
    None = 4
  }

  global['NSCollectionView']['UpdateAction'] = UpdateAction;

  export enum DropOperation {
    On = 0,
    Before = 1
  }

  global['NSCollectionView']['DropOperation'] = DropOperation;

  export enum ScrollDirection {
    Vertical = 0,
    Horizontal = 1
  }

  global['NSCollectionView']['ScrollDirection'] = ScrollDirection;

  export enum ScrollPosition {
    None = 0,
    Top = 1,
    CenteredVertically = 2,
    Bottom = 4,
    NearestHorizontalEdge = 512,
    Left = 8,
    CenteredHorizontally = 16,
    Right = 32,
    LeadingEdge = 64,
    TrailingEdge = 128,
    NearestVerticalEdge = 256
  }

  global['NSCollectionView']['ScrollPosition'] = ScrollPosition;

  export let elementKindInterItemGapIndicator: string;
  export let elementKindSectionFooter: string;
  export let elementKindSectionHeader: string;
  export type DecorationElementKind = String;
  export type SupplementaryElementKind = String;
}

namespace NSCollectionViewItem {
  export enum HighlightState {
    None = 0,
    ForSelection = 1,
    ForDeselection = 2,
    AsDropTarget = 3
  }

  global['NSCollectionViewItem']['HighlightState'] = HighlightState;

}

namespace NSCollectionViewTransitionLayout {
  export type AnimatedKey = String;
}

namespace NSColor {
  export enum SystemEffect {
    None = 0,
    Pressed = 1,
    DeepPressed = 2,
    Disabled = 3,
    Rollover = 4
  }

  global['NSColor']['SystemEffect'] = SystemEffect;

  export enum ColorType {
    ComponentBased = 0,
    Pattern = 1,
    Catalog = 2
  }

  global['NSColor']['ColorType'] = ColorType;

  export let currentControlTintDidChangeNotification: string;
  export let systemColorsDidChangeNotification: string;
  export type Name = String;
}

namespace NSColorList {
  export let didChangeNotification: string;
  export type Name = String;
}

namespace NSColorPanel {
  export enum Mode {
    None = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    HSB = 3,
    CustomPalette = 4,
    ColorList = 5,
    Wheel = 6,
    Crayon = 7
  }

  global['NSColorPanel']['Mode'] = Mode;

  export enum Options {
    GrayModeMask = 1,
    RGBModeMask = 2,
    CMYKModeMask = 4,
    HSBModeMask = 8,
    CustomPaletteModeMask = 16,
    ColorListModeMask = 32,
    WheelModeMask = 64,
    CrayonModeMask = 128,
    AllModesMask = 65535
  }

  global['NSColorPanel']['Options'] = Options;

  export let colorDidChangeNotification: string;
}

namespace NSColorSpace {
  export enum Model {
    Unknown = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    LAB = 3,
    DeviceN = 4,
    Indexed = 5,
    Patterned = 6
  }

  global['NSColorSpace']['Model'] = Model;

}

namespace NSColorSpaceName {
  export let calibratedRGB: string;
  export let calibratedWhite: string;
  export let custom: string;
  export let deviceCMYK: string;
  export let deviceRGB: string;
  export let deviceWhite: string;
  export let named: string;
  export let pattern: string;
}

namespace NSComboBox {
  export let selectionDidChangeNotification: string;
  export let selectionIsChangingNotification: string;
  export let willDismissNotification: string;
  export let willPopUpNotification: string;
}

namespace NSComparisonPredicate {
  export enum Modifier {
    DirectPredicateModifier = 0,
    AllPredicateModifier = 1,
    AnyPredicateModifier = 2
  }

  global['NSComparisonPredicate']['Modifier'] = Modifier;

  export enum Options {
    CaseInsensitivePredicateOption = 1,
    DiacriticInsensitivePredicateOption = 2,
    NormalizedPredicateOption = 4
  }

  global['NSComparisonPredicate']['Options'] = Options;

  export enum Operator {
    LessThanPredicateOperatorType = 0,
    LessThanOrEqualToPredicateOperatorType = 1,
    GreaterThanPredicateOperatorType = 2,
    GreaterThanOrEqualToPredicateOperatorType = 3,
    EqualToPredicateOperatorType = 4,
    NotEqualToPredicateOperatorType = 5,
    MatchesPredicateOperatorType = 6,
    LikePredicateOperatorType = 7,
    BeginsWithPredicateOperatorType = 8,
    EndsWithPredicateOperatorType = 9,
    InPredicateOperatorType = 10,
    CustomSelectorPredicateOperatorType = 11,
    ContainsPredicateOperatorType = 99,
    BetweenPredicateOperatorType = 100
  }

  global['NSComparisonPredicate']['Operator'] = Operator;

}

namespace NSCompoundPredicate {
  export enum LogicalType {
    NotPredicateType = 0,
    AndPredicateType = 1,
    OrPredicateType = 2
  }

  global['NSCompoundPredicate']['LogicalType'] = LogicalType;

}

namespace NSControl {
  export enum ImagePosition {
    NoImage = 0,
    ImageOnly = 1,
    ImageLeft = 2,
    ImageRight = 3,
    ImageBelow = 4,
    ImageAbove = 5,
    ImageOverlaps = 6,
    ImageLeading = 7,
    ImageTrailing = 8
  }

  global['NSControl']['ImagePosition'] = ImagePosition;

  export enum ControlSize {
    Regular = 0,
    Small = 1,
    Mini = 2
  }

  global['NSControl']['ControlSize'] = ControlSize;

  export let mixed: number;
  export let off: number;
  export let on: number;
  export let textDidBeginEditingNotification: string;
  export let textDidChangeNotification: string;
  export let textDidEndEditingNotification: string;
}

namespace NSData {
  export enum Base64DecodingOptions {
    IgnoreUnknownCharacters = 1
  }

  global['NSData']['Base64DecodingOptions'] = Base64DecodingOptions;

  export enum Base64EncodingOptions {
    Encoding64CharacterLineLength = 1,
    Encoding76CharacterLineLength = 2,
    EncodingEndLineWithCarriageReturn = 16,
    EncodingEndLineWithLineFeed = 32
  }

  global['NSData']['Base64EncodingOptions'] = Base64EncodingOptions;

  export enum CompressionAlgorithm {
    LZFSE = 0,
    LZ4 = 1,
    LZMA = 2,
    Zlib = 3
  }

  global['NSData']['CompressionAlgorithm'] = CompressionAlgorithm;

  export enum ReadingOptions {
    DataReadingMappedIfSafe = 1,
    DataReadingUncached = 2,
    DataReadingMappedAlways = 8,
    DataReadingMapped = 1,
    MappedRead = 1,
    UncachedRead = 2
  }

  global['NSData']['ReadingOptions'] = ReadingOptions;

  export enum SearchOptions {
    Backwards = 1,
    Anchored = 2
  }

  global['NSData']['SearchOptions'] = SearchOptions;

  export enum WritingOptions {
    DataWritingAtomic = 1,
    DataWritingWithoutOverwriting = 2,
    DataWritingFileProtectionNone = 268435456,
    DataWritingFileProtectionComplete = 536870912,
    DataWritingFileProtectionCompleteUnlessOpen = 805306368,
    DataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824,
    DataWritingFileProtectionMask = 4026531840,
    AtomicWrite = 1
  }

  global['NSData']['WritingOptions'] = WritingOptions;

  export type Element = number;
  export type Index = number;
  export type Indices = Range;
  export type Iterator = IndexingIterator;
  export type SubSequence = Slice;
}

namespace NSDatePicker {
  export enum ElementFlags {
    HourMinute = 12,
    HourMinuteSecond = 14,
    TimeZone = 16,
    YearMonth = 192,
    YearMonthDay = 224,
    Era = 256
  }

  global['NSDatePicker']['ElementFlags'] = ElementFlags;

  export enum Mode {
    Single = 0,
    Range = 1
  }

  global['NSDatePicker']['Mode'] = Mode;

  export enum Style {
    TextFieldAndStepper = 0,
    ClockAndCalendar = 1,
    TextField = 2
  }

  global['NSDatePicker']['Style'] = Style;

  export let clockAndCalendar: NSDatePicker.Style;
  export let era: NSDatePicker.ElementFlags;
  export let hourMinute: NSDatePicker.ElementFlags;
  export let hourMinuteSecond: NSDatePicker.ElementFlags;
  export let range: NSDatePicker.Mode;
  export let single: NSDatePicker.Mode;
  export let textFieldAndStepper: NSDatePicker.Style;
  export let textField: NSDatePicker.Style;
  export let timeZone: NSDatePicker.ElementFlags;
  export let yearMonth: NSDatePicker.ElementFlags;
  export let yearMonthDay: NSDatePicker.ElementFlags;
}

namespace NSDecimalNumber {
  export enum CalculationError {
    NoError = 0,
    LossOfPrecision = 1,
    Underflow = 2,
    Overflow = 3,
    DivideByZero = 4
  }

  global['NSDecimalNumber']['CalculationError'] = CalculationError;

  export enum RoundingMode {
    Plain = 0,
    Down = 1,
    Up = 2,
    Bankers = 3
  }

  global['NSDecimalNumber']['RoundingMode'] = RoundingMode;

}

namespace NSDeviceDescriptionKey {
  export let bitsPerSample: string;
  export let colorSpaceName: string;
  export let isPrinter: string;
  export let isScreen: string;
  export let resolution: string;
  export let size: string;
}

namespace NSDocument {
  export enum ChangeType {
    ChangeDone = 0,
    ChangeUndone = 1,
    ChangeRedone = 5,
    ChangeCleared = 2,
    ChangeReadOtherContents = 3,
    ChangeAutosaved = 4,
    ChangeDiscardable = 256
  }

  global['NSDocument']['ChangeType'] = ChangeType;

  export enum SaveOperationType {
    SaveOperation = 0,
    SaveAsOperation = 1,
    SaveToOperation = 2,
    AutosaveInPlaceOperation = 4,
    AutosaveElsewhereOperation = 3,
    AutosaveAsOperation = 5,
    AutosaveOperation = 3
  }

  global['NSDocument']['SaveOperationType'] = SaveOperationType;

}

namespace NSDraggingItem {
  export let icon: string;
  export let label: string;
}

namespace NSDrawer {
  export enum State {
    ClosedState = 0,
    OpeningState = 1,
    OpenState = 2,
    ClosingState = 3
  }

  global['NSDrawer']['State'] = State;

}

namespace NSEnumerator {
  export type Iterator = NSFastEnumerationIterator;
}

namespace NSError {
  export type UserInfoKey = string;
}

namespace NSEvent {
  export enum ButtonMask {
    PenTip = 1,
    PenLowerSide = 2,
    PenUpperSide = 4
  }

  global['NSEvent']['ButtonMask'] = ButtonMask;

  export enum GestureAxis {
    None = 0,
    Horizontal = 1,
    Vertical = 2
  }

  global['NSEvent']['GestureAxis'] = GestureAxis;

  export enum EventTypeMask {
    LeftMouseDown = 2,
    LeftMouseUp = 4,
    RightMouseDown = 8,
    RightMouseUp = 16,
    MouseMoved = 32,
    LeftMouseDragged = 64,
    RightMouseDragged = 128,
    MouseEntered = 256,
    MouseExited = 512,
    KeyDown = 1024,
    KeyUp = 2048,
    FlagsChanged = 4096,
    AppKitDefined = 8192,
    SystemDefined = 16384,
    ApplicationDefined = 32768,
    Periodic = 65536,
    CursorUpdate = 131072,
    ScrollWheel = 4194304,
    TabletPoint = 8388608,
    TabletProximity = 16777216,
    OtherMouseDown = 33554432,
    OtherMouseUp = 67108864,
    OtherMouseDragged = 134217728,
    Gesture = 536870912,
    Magnify = 1073741824,
    Swipe = 2147483648,
    Rotate = 262144,
    BeginGesture = 524288,
    EndGesture = 1048576,
    SmartMagnify = 4294967296,
    Pressure = 17179869184,
    DirectTouch = 137438953472,
    ChangeMode = 274877906944,
    Any = -1
  }

  global['NSEvent']['EventTypeMask'] = EventTypeMask;

  export enum ModifierFlags {
    CapsLock = 65536,
    Shift = 131072,
    Control = 262144,
    Option = 524288,
    Command = 1048576,
    NumericPad = 2097152,
    Help = 4194304,
    Function = 8388608,
    DeviceIndependentFlagsMask = 4294901760
  }

  global['NSEvent']['ModifierFlags'] = ModifierFlags;

  export enum Phase {
    None = 0,
    Began = 1,
    Stationary = 2,
    Changed = 4,
    Ended = 8,
    Cancelled = 16,
    MayBegin = 32
  }

  global['NSEvent']['Phase'] = Phase;

  export enum EventSubtype {
    WindowExposed = 0,
    ApplicationActivated = 1,
    ApplicationDeactivated = 2,
    WindowMoved = 4,
    ScreenChanged = 8,
    PowerOff = 1,
    MouseEvent = 0,
    TabletPoint = 1,
    TabletProximity = 2,
    Touch = 3
  }

  global['NSEvent']['EventSubtype'] = EventSubtype;

  export enum SwipeTrackingOptions {
    LockDirection = 1,
    ClampGestureAmount = 2
  }

  global['NSEvent']['SwipeTrackingOptions'] = SwipeTrackingOptions;

  export enum EventType {
    LeftMouseDown = 1,
    LeftMouseUp = 2,
    RightMouseDown = 3,
    RightMouseUp = 4,
    MouseMoved = 5,
    LeftMouseDragged = 6,
    RightMouseDragged = 7,
    MouseEntered = 8,
    MouseExited = 9,
    KeyDown = 10,
    KeyUp = 11,
    FlagsChanged = 12,
    AppKitDefined = 13,
    SystemDefined = 14,
    ApplicationDefined = 15,
    Periodic = 16,
    CursorUpdate = 17,
    ScrollWheel = 22,
    TabletPoint = 23,
    TabletProximity = 24,
    OtherMouseDown = 25,
    OtherMouseUp = 26,
    OtherMouseDragged = 27,
    Gesture = 29,
    Magnify = 30,
    Swipe = 31,
    Rotate = 18,
    BeginGesture = 19,
    EndGesture = 20,
    SmartMagnify = 32,
    QuickLook = 33,
    Pressure = 34,
    DirectTouch = 37,
    ChangeMode = 38
  }

  global['NSEvent']['EventType'] = EventType;

  export enum PointingDeviceType {
    Unknown = 0,
    Pen = 1,
    Cursor = 2,
    Eraser = 3
  }

  global['NSEvent']['PointingDeviceType'] = PointingDeviceType;

  export enum PressureBehavior {
    Unknown = -1,
    PrimaryDefault = 0,
    PrimaryClick = 1,
    PrimaryGeneric = 2,
    PrimaryAccelerator = 3,
    PrimaryDeepClick = 5,
    PrimaryDeepDrag = 6
  }

  global['NSEvent']['PressureBehavior'] = PressureBehavior;

  export let foreverDuration: number;
}

namespace NSExceptionName {
  export let abortModalException: string;
  export let abortPrintingException: string;
  export let appKitIgnoredException: string;
  export let appKitVirtualMemoryException: string;
  export let badBitmapParametersException: string;
  export let badComparisonException: string;
  export let badRTFColorTableException: string;
  export let badRTFDirectiveException: string;
  export let badRTFFontTableException: string;
  export let badRTFStyleSheetException: string;
  export let browserIllegalDelegateException: string;
  export let colorListIOException: string;
  export let colorListNotEditableException: string;
  export let draggingException: string;
  export let fontUnavailableException: string;
  export let illegalSelectorException: string;
  export let imageCacheException: string;
  export let nibLoadingException: string;
  export let NSPPDIncludeNotFoundException: string;
  export let NSPPDIncludeStackOverflowException: string;
  export let NSPPDIncludeStackUnderflowException: string;
  export let NSPPDParseException: string;
  export let pasteboardCommunicationException: string;
  export let printOperationExistsException: string;
  export let printPackageException: string;
  export let printingCommunicationException: string;
  export let NSRTFPropertyStackOverflowException: string;
  export let NSTIFFException: string;
  export let textLineTooLongException: string;
  export let textNoSelectionException: string;
  export let textReadException: string;
  export let textWriteException: string;
  export let typedStreamVersionException: string;
  export let windowServerCommunicationException: string;
  export let wordTablesReadException: string;
  export let wordTablesWriteException: string;
  export let characterConversionException: string;
  export let decimalNumberDivideByZeroException: string;
  export let decimalNumberExactnessException: string;
  export let decimalNumberOverflowException: string;
  export let decimalNumberUnderflowException: string;
  export let destinationInvalidException: string;
  export let fileHandleOperationException: string;
  export let genericException: string;
  export let inconsistentArchiveException: string;
  export let internalInconsistencyException: string;
  export let invalidArchiveOperationException: string;
  export let invalidArgumentException: string;
  export let invalidReceivePortException: string;
  export let invalidSendPortException: string;
  export let invalidUnarchiveOperationException: string;
  export let invocationOperationCancelledException: string;
  export let invocationOperationVoidResultException: string;
  export let mallocException: string;
  export let objectInaccessibleException: string;
  export let objectNotAvailableException: string;
  export let oldStyleException: string;
  export let parseErrorException: string;
  export let portReceiveException: string;
  export let portSendException: string;
  export let portTimeoutException: string;
  export let rangeException: string;
  export let undefinedKeyException: string;
}

namespace NSExpression {
  export enum ExpressionType {
    ConstantValueExpressionType = 0,
    EvaluatedObjectExpressionType = 1,
    VariableExpressionType = 2,
    KeyPathExpressionType = 3,
    FunctionExpressionType = 4,
    UnionSetExpressionType = 5,
    IntersectSetExpressionType = 6,
    MinusSetExpressionType = 7,
    SubqueryExpressionType = 13,
    AggregateExpressionType = 14,
    AnyKeyExpressionType = 15,
    BlockExpressionType = 19,
    ConditionalExpressionType = 20
  }

  global['NSExpression']['ExpressionType'] = ExpressionType;

}

namespace NSFileCoordinator {
  export enum ReadingOptions {
    WithoutChanges = 1,
    ResolvesSymbolicLink = 2,
    ImmediatelyAvailableMetadataOnly = 4,
    ForUploading = 8
  }

  global['NSFileCoordinator']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    ForDeleting = 1,
    ForMoving = 2,
    ForMerging = 4,
    ForReplacing = 8,
    ContentIndependentMetadataOnly = 16
  }

  global['NSFileCoordinator']['WritingOptions'] = WritingOptions;

}

namespace NSFileVersion {
  export enum AddingOptions {
    ByMoving = 1
  }

  global['NSFileVersion']['AddingOptions'] = AddingOptions;

  export enum ReplacingOptions {
    ByMoving = 1
  }

  global['NSFileVersion']['ReplacingOptions'] = ReplacingOptions;

}

namespace NSFont {
  export let antialiasThresholdChangedNotification: string;
  export let identityMatrix: number;
  export let fontSetChangedNotification: string;
  export let black: number;
  export let bold: number;
  export let heavy: number;
  export let light: number;
  export let medium: number;
  export let regular: number;
  export let semibold: number;
  export let thin: number;
  export let ultraLight: number;
}

namespace NSFontAssetRequest {
  export enum Options {
    UsesStandardUI = 1
  }

  global['NSFontAssetRequest']['Options'] = Options;

}

namespace NSFontCollection {
  export enum Visibility {
    Process = 1,
    User = 2,
    Computer = 4
  }

  global['NSFontCollection']['Visibility'] = Visibility;

  export let actionUserInfoKey: string;
  export let allFonts: string;
  export let didChangeNotification: string;
  export let favorites: string;
  export let nameUserInfoKey: string;
  export let oldNameUserInfoKey: string;
  export let recentlyUsed: string;
  export let user: string;
  export let visibilityUserInfoKey: string;
  export let hidden: string;
  export let renamed: string;
  export let shown: string;
}

namespace NSFontDescriptor {
  export enum SymbolicTraits {
    TraitItalic = 1,
    TraitBold = 2,
    TraitExpanded = 32,
    TraitCondensed = 64,
    TraitMonoSpace = 1024,
    TraitVertical = 2048,
    TraitUIOptimized = 4096,
    TraitTightLeading = 32768,
    TraitLooseLeading = 65536,
    ClassMask = 4026531840,
    ClassUnknown = 0,
    ClassOldStyleSerifs = 268435456,
    ClassTransitionalSerifs = 536870912,
    ClassModernSerifs = 805306368,
    ClassClarendonSerifs = 1073741824,
    ClassSlabSerifs = 1342177280,
    ClassFreeformSerifs = 1879048192,
    ClassSansSerif = 2147483648,
    ClassOrnamentals = 2415919104,
    ClassScripts = 2684354560,
    ClassSymbolic = 3221225472
  }

  global['NSFontDescriptor']['SymbolicTraits'] = SymbolicTraits;

  export let cascadeList: string;
  export let characterSet: string;
  export let default_: string;
  export let monospaced: string;
  export let rounded: string;
  export let serif: string;
  export let face: string;
  export let family: string;
  export let selectorIdentifier: string;
  export let featureSettings: string;
  export let typeIdentifier: string;
  export let fixedAdvance: string;
  export let matrix: string;
  export let name: string;
  export let size: string;
  export let slant: string;
  export let symbolic: string;
  export let traits: string;
  export let variation: string;
  export let defaultValue: string;
  export let identifier: string;
  export let maximumValue: string;
  export let minimumValue: string;
  export let visibleName: string;
  export let weight: string;
  export let width: string;
}

namespace NSFontPanel {
  export enum ModeMask {
    ModeMaskFace = 1,
    ModeMaskSize = 2,
    ModeMaskCollection = 4,
    ModeMaskUnderlineEffect = 256,
    ModeMaskStrikethroughEffect = 512,
    ModeMaskTextColorEffect = 1024,
    ModeMaskDocumentColorEffect = 2048,
    ModeMaskShadowEffect = 4096,
    ModeMaskAllEffects = 1048320,
    ModesMaskStandardModes = 65535,
    ModesMaskAllModes = 4294967295
  }

  global['NSFontPanel']['ModeMask'] = ModeMask;

}

namespace NSGestureRecognizer {
  export enum State {
    Possible = 0,
    Began = 1,
    Changed = 2,
    Ended = 3,
    Cancelled = 4,
    Failed = 5,
    Recognized = 3
  }

  global['NSGestureRecognizer']['State'] = State;

}

namespace NSGradient {
  export enum DrawingOptions {
    DrawsBeforeStartingLocation = 1,
    DrawsAfterEndingLocation = 2
  }

  global['NSGradient']['DrawingOptions'] = DrawingOptions;

}

namespace NSGraphicsContext {
  export let destination: string;
  export let pdf: string;
  export let postScript: string;
  export let representationFormat: string;
}

namespace NSGridCell {
  export enum Placement {
    Inherited = 0,
    None = 1,
    Leading = 2,
    Top = 2,
    Trailing = 3,
    Bottom = 3,
    Center = 4,
    Fill = 5
  }

  global['NSGridCell']['Placement'] = Placement;

}

namespace NSGridRow {
  export enum Alignment {
    Inherited = 0,
    None = 1,
    FirstBaseline = 2,
    LastBaseline = 3
  }

  global['NSGridRow']['Alignment'] = Alignment;

}

namespace NSGridView {
  export let sizedForContent: number;
}

namespace NSHapticFeedbackManager {
  export enum FeedbackPattern {
    Generic = 0,
    Alignment = 1,
    LevelChange = 2
  }

  global['NSHapticFeedbackManager']['FeedbackPattern'] = FeedbackPattern;

  export enum PerformanceTime {
    Default = 0,
    Now = 1,
    DrawCompleted = 2
  }

  global['NSHapticFeedbackManager']['PerformanceTime'] = PerformanceTime;

}

namespace NSHelpManager {
  export let contextHelpModeDidActivateNotification: string;
  export let contextHelpModeDidDeactivateNotification: string;
  export type AnchorName = String;
  export type BookName = String;
  export type ContextHelpKey = String;
}

namespace NSImage {
  export enum CacheMode {
    Default = 0,
    Always = 1,
    BySize = 2,
    Never = 3
  }

  global['NSImage']['CacheMode'] = CacheMode;

  export enum LayoutDirection {
    Unspecified = -1,
    LeftToRight = 2,
    RightToLeft = 3
  }

  global['NSImage']['LayoutDirection'] = LayoutDirection;

  export enum LoadStatus {
    Completed = 0,
    Cancelled = 1,
    InvalidData = 2,
    UnexpectedEOF = 3,
    ReadError = 4
  }

  global['NSImage']['LoadStatus'] = LoadStatus;

  export enum ResizingMode {
    Stretch = 0,
    Tile = 1
  }

  global['NSImage']['ResizingMode'] = ResizingMode;

  export let actionTemplateName: string;
  export let addTemplateName: string;
  export let advancedName: string;
  export let applicationIconName: string;
  export let bluetoothTemplateName: string;
  export let bonjourName: string;
  export let bookmarksTemplateName: string;
  export let cautionName: string;
  export let colorPanelName: string;
  export let columnViewTemplateName: string;
  export let computerName: string;
  export let enterFullScreenTemplateName: string;
  export let everyoneName: string;
  export let exitFullScreenTemplateName: string;
  export let flowViewTemplateName: string;
  export let folderName: string;
  export let folderBurnableName: string;
  export let folderSmartName: string;
  export let followLinkFreestandingTemplateName: string;
  export let fontPanelName: string;
  export let goBackTemplateName: string;
  export let goForwardTemplateName: string;
  export let goLeftTemplateName: string;
  export let goRightTemplateName: string;
  export let homeTemplateName: string;
  export let iChatTheaterTemplateName: string;
  export let iconViewTemplateName: string;
  export let infoName: string;
  export let invalidDataFreestandingTemplateName: string;
  export let leftFacingTriangleTemplateName: string;
  export let listViewTemplateName: string;
  export let lockLockedTemplateName: string;
  export let lockUnlockedTemplateName: string;
  export let menuMixedStateTemplateName: string;
  export let menuOnStateTemplateName: string;
  export let mobileMeName: string;
  export let multipleDocumentsName: string;
  export let networkName: string;
  export let pathTemplateName: string;
  export let preferencesGeneralName: string;
  export let quickLookTemplateName: string;
  export let refreshFreestandingTemplateName: string;
  export let refreshTemplateName: string;
  export let removeTemplateName: string;
  export let revealFreestandingTemplateName: string;
  export let rightFacingTriangleTemplateName: string;
  export let shareTemplateName: string;
  export let slideshowTemplateName: string;
  export let smartBadgeTemplateName: string;
  export let statusAvailableName: string;
  export let statusNoneName: string;
  export let statusPartiallyAvailableName: string;
  export let statusUnavailableName: string;
  export let stopProgressFreestandingTemplateName: string;
  export let stopProgressTemplateName: string;
  export let touchBarAddDetailTemplateName: string;
  export let touchBarAddTemplateName: string;
  export let touchBarAlarmTemplateName: string;
  export let touchBarAudioInputMuteTemplateName: string;
  export let touchBarAudioInputTemplateName: string;
  export let touchBarAudioOutputMuteTemplateName: string;
  export let touchBarAudioOutputVolumeHighTemplateName: string;
  export let touchBarAudioOutputVolumeLowTemplateName: string;
  export let touchBarAudioOutputVolumeMediumTemplateName: string;
  export let touchBarAudioOutputVolumeOffTemplateName: string;
  export let touchBarBookmarksTemplateName: string;
  export let touchBarColorPickerFillName: string;
  export let touchBarColorPickerFontName: string;
  export let touchBarColorPickerStrokeName: string;
  export let touchBarCommunicationAudioTemplateName: string;
  export let touchBarCommunicationVideoTemplateName: string;
  export let touchBarComposeTemplateName: string;
  export let touchBarDeleteTemplateName: string;
  export let touchBarDownloadTemplateName: string;
  export let touchBarEnterFullScreenTemplateName: string;
  export let touchBarExitFullScreenTemplateName: string;
  export let touchBarFastForwardTemplateName: string;
  export let touchBarFolderCopyToTemplateName: string;
  export let touchBarFolderMoveToTemplateName: string;
  export let touchBarFolderTemplateName: string;
  export let touchBarGetInfoTemplateName: string;
  export let touchBarGoBackTemplateName: string;
  export let touchBarGoDownTemplateName: string;
  export let touchBarGoForwardTemplateName: string;
  export let touchBarGoUpTemplateName: string;
  export let touchBarHistoryTemplateName: string;
  export let touchBarIconViewTemplateName: string;
  export let touchBarListViewTemplateName: string;
  export let touchBarMailTemplateName: string;
  export let touchBarNewFolderTemplateName: string;
  export let touchBarNewMessageTemplateName: string;
  export let touchBarOpenInBrowserTemplateName: string;
  export let touchBarPauseTemplateName: string;
  export let touchBarPlayPauseTemplateName: string;
  export let touchBarPlayTemplateName: string;
  export let touchBarPlayheadTemplateName: string;
  export let touchBarQuickLookTemplateName: string;
  export let touchBarRecordStartTemplateName: string;
  export let touchBarRecordStopTemplateName: string;
  export let touchBarRefreshTemplateName: string;
  export let touchBarRemoveTemplateName: string;
  export let touchBarRewindTemplateName: string;
  export let touchBarRotateLeftTemplateName: string;
  export let touchBarRotateRightTemplateName: string;
  export let touchBarSearchTemplateName: string;
  export let touchBarShareTemplateName: string;
  export let touchBarSidebarTemplateName: string;
  export let touchBarSkipAhead15SecondsTemplateName: string;
  export let touchBarSkipAhead30SecondsTemplateName: string;
  export let touchBarSkipAheadTemplateName: string;
  export let touchBarSkipBack15SecondsTemplateName: string;
  export let touchBarSkipBack30SecondsTemplateName: string;
  export let touchBarSkipBackTemplateName: string;
  export let touchBarSkipToEndTemplateName: string;
  export let touchBarSkipToStartTemplateName: string;
  export let touchBarSlideshowTemplateName: string;
  export let touchBarTagIconTemplateName: string;
  export let touchBarTextBoldTemplateName: string;
  export let touchBarTextBoxTemplateName: string;
  export let touchBarTextCenterAlignTemplateName: string;
  export let touchBarTextItalicTemplateName: string;
  export let touchBarTextJustifiedAlignTemplateName: string;
  export let touchBarTextLeftAlignTemplateName: string;
  export let touchBarTextListTemplateName: string;
  export let touchBarTextRightAlignTemplateName: string;
  export let touchBarTextStrikethroughTemplateName: string;
  export let touchBarTextUnderlineTemplateName: string;
  export let touchBarUserAddTemplateName: string;
  export let touchBarUserGroupTemplateName: string;
  export let touchBarUserTemplateName: string;
  export let touchBarVolumeDownTemplateName: string;
  export let touchBarVolumeUpTemplateName: string;
  export let trashEmptyName: string;
  export let trashFullName: string;
  export let userName: string;
  export let userAccountsName: string;
  export let userGroupName: string;
  export let userGuestName: string;
  export type Name = String;
}

namespace NSImageRep {
  export let ctm: string;
  export let interpolation: string;
  export let userInterfaceLayoutDirection: string;
  export let registryDidChangeNotification: string;
}

namespace NSImageView {
  export enum FrameStyle {
    None = 0,
    Photo = 1,
    GrayBezel = 2,
    Groove = 3,
    Button = 4
  }

  global['NSImageView']['FrameStyle'] = FrameStyle;

}

namespace NSIndexSet {
  export type Element = NSIndexSetIterator;
  export type Iterator = NSIndexSetIterator;
}

namespace NSItemProvider {
  export enum ErrorCode {
    UnknownError = -1,
    ItemUnavailableError = -1000,
    UnexpectedValueClassError = -1100,
    UnavailableCoercionError = -1200
  }

  global['NSItemProvider']['ErrorCode'] = ErrorCode;

  export let errorDomain: string;
}

namespace NSKeyValueChangeKey {
  export let indexesKey: string;
  export let kindKey: string;
  export let newKey: string;
  export let notificationIsPriorKey: string;
  export let oldKey: string;
}

namespace NSKeyValueOperator {
  export let averageKeyValueOperator: string;
  export let countKeyValueOperator: string;
  export let distinctUnionOfArraysKeyValueOperator: string;
  export let distinctUnionOfObjectsKeyValueOperator: string;
  export let distinctUnionOfSetsKeyValueOperator: string;
  export let maximumKeyValueOperator: string;
  export let minimumKeyValueOperator: string;
  export let sumKeyValueOperator: string;
  export let unionOfArraysKeyValueOperator: string;
  export let unionOfObjectsKeyValueOperator: string;
  export let unionOfSetsKeyValueOperator: string;
}

namespace NSLayoutConstraint {
  export enum Attribute {
    Left = 1,
    Right = 2,
    Top = 3,
    Bottom = 4,
    Leading = 5,
    Trailing = 6,
    Width = 7,
    Height = 8,
    CenterX = 9,
    CenterY = 10,
    LastBaseline = 11,
    Baseline = 11,
    FirstBaseline = 12,
    NotAnAttribute = 0
  }

  global['NSLayoutConstraint']['Attribute'] = Attribute;

  export enum Orientation {
    Horizontal = 0,
    Vertical = 1
  }

  global['NSLayoutConstraint']['Orientation'] = Orientation;

  export enum FormatOptions {
    AlignAllLeft = 2,
    AlignAllRight = 4,
    AlignAllTop = 8,
    AlignAllBottom = 16,
    AlignAllLeading = 32,
    AlignAllTrailing = 64,
    AlignAllCenterX = 512,
    AlignAllCenterY = 1024,
    AlignAllLastBaseline = 2048,
    AlignAllFirstBaseline = 4096,
    AlignAllBaseline = 2048,
    AlignmentMask = 65535,
    DirectionLeadingToTrailing = 0,
    DirectionLeftToRight = 65536,
    DirectionRightToLeft = 131072,
    DirectionMask = 196608
  }

  global['NSLayoutConstraint']['FormatOptions'] = FormatOptions;

  export enum Relation {
    LessThanOrEqual = -1,
    Equal = 0,
    GreaterThanOrEqual = 1
  }

  global['NSLayoutConstraint']['Relation'] = Relation;

  export let defaultHigh: number;
  export let defaultLow: number;
  export let dragThatCanResizeWindow: number;
  export let dragThatCannotResizeWindow: number;
  export let fittingSizeCompression: number;
  export let required: number;
  export let windowSizeStayPut: number;
}

namespace NSLayoutManager {
  export enum ControlCharacterAction {
    ZeroAdvancement = 1,
    Whitespace = 2,
    HorizontalTab = 4,
    LineBreak = 8,
    ParagraphBreak = 16,
    ContainerBreak = 32
  }

  global['NSLayoutManager']['ControlCharacterAction'] = ControlCharacterAction;

  export enum GlyphProperty {
    Null = 1,
    ControlCharacter = 2,
    Elastic = 4,
    NonBaseCharacter = 8
  }

  global['NSLayoutManager']['GlyphProperty'] = GlyphProperty;

  export enum TextLayoutOrientation {
    Horizontal = 0,
    Vertical = 1
  }

  global['NSLayoutManager']['TextLayoutOrientation'] = TextLayoutOrientation;

  export enum TypesetterBehavior {
    LatestBehavior = -1,
    OriginalBehavior = 0,
    Behavior_10_2_WithCompatibility = 1,
    Behavior_10_2 = 2,
    Behavior_10_3 = 3,
    Behavior_10_4 = 4
  }

  global['NSLayoutManager']['TypesetterBehavior'] = TypesetterBehavior;

}

namespace NSLevelIndicator {
  export enum PlaceholderVisibility {
    Automatic = 0,
    Always = 1,
    WhileEditing = 2
  }

  global['NSLevelIndicator']['PlaceholderVisibility'] = PlaceholderVisibility;

  export enum Style {
    Relevancy = 0,
    ContinuousCapacity = 1,
    DiscreteCapacity = 2,
    Rating = 3
  }

  global['NSLevelIndicator']['Style'] = Style;

}

namespace NSLinguisticTag {
  export let adjective: string;
  export let adverb: string;
  export let classifier: string;
  export let closeParenthesis: string;
  export let closeQuote: string;
  export let conjunction: string;
  export let dash: string;
  export let determiner: string;
  export let idiom: string;
  export let interjection: string;
  export let noun: string;
  export let number: string;
  export let openParenthesis: string;
  export let openQuote: string;
  export let organizationName: string;
  export let other: string;
  export let otherPunctuation: string;
  export let otherWhitespace: string;
  export let otherWord: string;
  export let paragraphBreak: string;
  export let particle: string;
  export let personalName: string;
  export let placeName: string;
  export let preposition: string;
  export let pronoun: string;
  export let punctuation: string;
  export let sentenceTerminator: string;
  export let verb: string;
  export let whitespace: string;
  export let word: string;
  export let wordJoiner: string;
}

namespace NSLinguisticTagScheme {
  export let language: string;
  export let lemma: string;
  export let lexicalClass: string;
  export let nameType: string;
  export let nameTypeOrLexicalClass: string;
  export let script: string;
  export let tokenType: string;
}

namespace NSLinguisticTagger {
  export enum Options {
    OmitWords = 1,
    OmitPunctuation = 2,
    OmitWhitespace = 4,
    OmitOther = 8,
    JoinNames = 16
  }

  global['NSLinguisticTagger']['Options'] = Options;

}

namespace NSLocale {
  export enum LanguageDirection {
    Unknown = 0,
    LeftToRight = 1,
    RightToLeft = 2,
    TopToBottom = 3,
    BottomToTop = 4
  }

  global['NSLocale']['LanguageDirection'] = LanguageDirection;

  export let currentLocaleDidChangeNotification: string;
  export let alternateQuotationBeginDelimiterKey: string;
  export let alternateQuotationEndDelimiterKey: string;
  export let calendar: string;
  export let collationIdentifier: string;
  export let collatorIdentifier: string;
  export let countryCode: string;
  export let currencyCode: string;
  export let currencySymbol: string;
  export let decimalSeparator: string;
  export let exemplarCharacterSet: string;
  export let groupingSeparator: string;
  export let identifier: string;
  export let languageCode: string;
  export let measurementSystem: string;
  export let quotationBeginDelimiterKey: string;
  export let quotationEndDelimiterKey: string;
  export let scriptCode: string;
  export let usesMetricSystem: string;
  export let variantCode: string;
}

namespace NSMachPort {
  export enum Options {
    DeallocateNone = 0,
    DeallocateSendRight = 1,
    DeallocateReceiveRight = 2
  }

  global['NSMachPort']['Options'] = Options;

}

namespace NSManagedObject {
  export type ObjectWillChangePublisher = ObservableObjectPublisher;
}

namespace NSMatrix {
  export enum Mode {
    RadioModeMatrix = 0,
    HighlightModeMatrix = 1,
    ListModeMatrix = 2,
    TrackModeMatrix = 3
  }

  global['NSMatrix']['Mode'] = Mode;

}

namespace NSMediaLibraryBrowserController {
  export enum Library {
    Audio = 1,
    Image = 2,
    Movie = 4
  }

  global['NSMediaLibraryBrowserController']['Library'] = Library;

}

namespace NSMenu {
  export enum Properties {
    PropertyItemTitle = 1,
    PropertyItemAttributedTitle = 2,
    PropertyItemKeyEquivalent = 4,
    PropertyItemImage = 8,
    PropertyItemEnabled = 16,
    PropertyItemAccessibilityDescription = 32
  }

  global['NSMenu']['Properties'] = Properties;

  export let didAddItemNotification: string;
  export let didBeginTrackingNotification: string;
  export let didChangeItemNotification: string;
  export let didEndTrackingNotification: string;
  export let didRemoveItemNotification: string;
  export let didSendActionNotification: string;
  export let willSendActionNotification: string;
}

namespace NSMenuItem {
  export let importFromDeviceIdentifier: string;
}

namespace NSNib {
  export type Name = String;
}

namespace NSNotification {
  export let AVAssetChapterMetadataGroupsDidChange: string;
  export let AVAssetContainsFragmentsDidChange: string;
  export let AVAssetDurationDidChange: string;
  export let AVAssetMediaSelectionGroupsDidChange: string;
  export let AVAssetTrackSegmentsDidChange: string;
  export let AVAssetTrackTimeRangeDidChange: string;
  export let AVAssetTrackTrackAssociationsDidChange: string;
  export let AVAssetWasDefragmented: string;
  export let AVAudioEngineConfigurationChange: string;
  export let AVAudioUnitComponentTagsDidChange: string;
  export let AVCaptureDeviceSubjectAreaDidChange: string;
  export let AVCaptureDeviceWasConnected: string;
  export let AVCaptureDeviceWasDisconnected: string;
  export let AVCaptureInputPortFormatDescriptionDidChange: string;
  export let AVCaptureSessionDidStartRunning: string;
  export let AVCaptureSessionDidStopRunning: string;
  export let AVCaptureSessionInterruptionEnded: string;
  export let AVCaptureSessionRuntimeError: string;
  export let AVCaptureSessionWasInterrupted: string;
  export let AVFragmentedMovieContainsMovieFragmentsDidChange: string;
  export let AVFragmentedMovieDurationDidChange: string;
  export let AVFragmentedMovieTrackSegmentsDidChange: string;
  export let AVFragmentedMovieTrackTimeRangeDidChange: string;
  export let AVFragmentedMovieWasDefragmented: string;
  export let AVPlayerAvailableHDRModesDidChange: string;
  export let AVPlayerItemDidPlayToEndTime: string;
  export let AVPlayerItemFailedToPlayToEndTime: string;
  export let AVPlayerItemNewAccessLogEntry: string;
  export let AVPlayerItemNewErrorLogEntry: string;
  export let AVPlayerItemPlaybackStalled: string;
  export let AVPlayerItemTimeJumped: string;
  export let AVRouteDetectorMultipleRoutesDetectedDidChange: string;
  export let AVSampleBufferAudioRendererWasFlushedAutomatically: string;
  export let AVSampleBufferDisplayLayerFailedToDecode: string;
  export let NSAppleEventManagerWillProcessFirstEvent: string;
  export let NSBundleResourceRequestLowDiskSpace: string;
  export let NSCalendarDayChanged: string;
  export let NSClassDescriptionNeededForClass: string;
  export let NSDidBecomeSingleThreaded: string;
  export let NSExtensionHostDidBecomeActive: string;
  export let NSExtensionHostDidEnterBackground: string;
  export let NSExtensionHostWillEnterForeground: string;
  export let NSExtensionHostWillResignActive: string;
  export let NSFileHandleConnectionAccepted: string;
  export let NSFileHandleDataAvailable: string;
  export let NSFileHandleReadToEndOfFileCompletion: string;
  export let NSHTTPCookieManagerAcceptPolicyChanged: string;
  export let NSHTTPCookieManagerCookiesChanged: string;
  export let NSMetadataQueryDidFinishGathering: string;
  export let NSMetadataQueryDidStartGathering: string;
  export let NSMetadataQueryDidUpdate: string;
  export let NSMetadataQueryGatheringProgress: string;
  export let NSProcessInfoPowerStateDidChange: string;
  export let NSSystemClockDidChange: string;
  export let NSSystemTimeZoneDidChange: string;
  export let NSThreadWillExit: string;
  export let NSURLCredentialStorageChanged: string;
  export let NSUbiquityIdentityDidChange: string;
  export let NSUndoManagerCheckpoint: string;
  export let NSUndoManagerDidCloseUndoGroup: string;
  export let NSUndoManagerDidOpenUndoGroup: string;
  export let NSUndoManagerDidRedoChange: string;
  export let NSUndoManagerDidUndoChange: string;
  export let NSUndoManagerWillCloseUndoGroup: string;
  export let NSUndoManagerWillRedoChange: string;
  export let NSUndoManagerWillUndoChange: string;
  export let NSWillBecomeMultiThreaded: string;
  export let IKFilterBrowserFilterDoubleClick: string;
  export let IKFilterBrowserFilterSelected: string;
  export let IKFilterBrowserWillPreviewFilter: string;
  export let quartzFilterManagerDidAddFilter: string;
  export let quartzFilterManagerDidModifyFilter: string;
  export let quartzFilterManagerDidRemoveFilter: string;
  export let quartzFilterManagerDidSelectFilter: string;
}

namespace NSNumber {
  export type BooleanLiteralType = boolean;
  export type FloatLiteralType = number;
  export type IntegerLiteralType = number;
}

namespace NSOrderedSet {
  export type Iterator = NSFastEnumerationIterator;
}

namespace NSOutlineView {
  export let columnDidMoveNotification: string;
  export let columnDidResizeNotification: string;
  export let disclosureButtonIdentifier: string;
  export let itemDidCollapseNotification: string;
  export let itemDidExpandNotification: string;
  export let itemWillCollapseNotification: string;
  export let itemWillExpandNotification: string;
  export let selectionDidChangeNotification: string;
  export let selectionIsChangingNotification: string;
  export let showHideButtonIdentifier: string;
}

namespace NSPDFPanel {
  export enum Options {
    ShowsPaperSize = 4,
    ShowsOrientation = 8,
    RequestsParentDirectory = 16777216
  }

  global['NSPDFPanel']['Options'] = Options;

}

namespace NSPageController {
  export enum TransitionStyle {
    StackHistory = 0,
    StackBook = 1,
    HorizontalStrip = 2
  }

  global['NSPageController']['TransitionStyle'] = TransitionStyle;

  export type ObjectIdentifier = String;
}

namespace NSParagraphStyle {
  export enum TextTabType {
    LeftTabStopType = 0,
    RightTabStopType = 1,
    CenterTabStopType = 2,
    DecimalTabStopType = 3
  }

  global['NSParagraphStyle']['TextTabType'] = TextTabType;

  // struct
  export enum LineBreakStrategy {
    pushOut,
    hangulWordPriority,
    standard
  }

}

namespace NSPasteboard {
  export enum ContentsOptions {
    CurrentHostOnly = 1
  }

  global['NSPasteboard']['ContentsOptions'] = ContentsOptions;

  export enum ReadingOptions {
    AsData = 0,
    AsString = 1,
    AsPropertyList = 2,
    AsKeyedArchive = 4
  }

  global['NSPasteboard']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    Promised = 512
  }

  global['NSPasteboard']['WritingOptions'] = WritingOptions;

  export let fileContents: string;
  export let findPanelSearchOptions: string;
  export let drag: string;
  export let find: string;
  export let font: string;
  export let general: string;
  export let ruler: string;
  export let color: string;
  export let fileURL: string;
  export let html: string;
  export let multipleTextSelection: string;
  export let pdf: string;
  export let png: string;
  export let rtf: string;
  export let rtfd: string;
  export let sound: string;
  export let string: string;
  export let tiff: string;
  export let tabularText: string;
  export let textFinderOptions: string;
  export let URL: string;
  export let urlReadingContentsConformToTypes: string;
  export let urlReadingFileURLsOnly: string;
  export let soundPboardType: string;
}

namespace NSPathControl {
  export enum Style {
    Standard = 0,
    PopUp = 2,
    NavigationBar = 1
  }

  global['NSPathControl']['Style'] = Style;

}

namespace NSPickerTouchBarItem {
  export enum ControlRepresentation {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2
  }

  global['NSPickerTouchBarItem']['ControlRepresentation'] = ControlRepresentation;

  export enum SelectionMode {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2
  }

  global['NSPickerTouchBarItem']['SelectionMode'] = SelectionMode;

}

namespace NSPointerFunctions {
  export enum Options {
    StrongMemory = 0,
    ZeroingWeakMemory = 1,
    OpaqueMemory = 2,
    MallocMemory = 3,
    MachVirtualMemory = 4,
    WeakMemory = 5,
    ObjectPersonality = 0,
    OpaquePersonality = 256,
    ObjectPointerPersonality = 512,
    CStringPersonality = 768,
    StructPersonality = 1024,
    IntegerPersonality = 1280,
    CopyIn = 65536
  }

  global['NSPointerFunctions']['Options'] = Options;

}

namespace NSPopUpButton {
  export enum ArrowPosition {
    NoArrow = 0,
    ArrowAtCenter = 1,
    ArrowAtBottom = 2
  }

  global['NSPopUpButton']['ArrowPosition'] = ArrowPosition;

  export let willPopUpNotification: string;
}

namespace NSPopUpButtonCell {
  export let willPopUpNotification: string;
}

namespace NSPopover {
  export enum Behavior {
    ApplicationDefined = 0,
    Transient = 1,
    Semitransient = 2
  }

  global['NSPopover']['Behavior'] = Behavior;

  export let detachToWindow: string;
  export let closeReasonUserInfoKey: string;
  export let standard: string;
  export let didCloseNotification: string;
  export let didShowNotification: string;
  export let willCloseNotification: string;
  export let willShowNotification: string;
}

namespace NSPositionalSpecifier {
  export enum InsertionPosition {
    PositionAfter = 0,
    PositionBefore = 1,
    PositionBeginning = 2,
    PositionEnd = 3,
    PositionReplace = 4
  }

  global['NSPositionalSpecifier']['InsertionPosition'] = InsertionPosition;

}

namespace NSPrintInfo {
  export enum PaperOrientation {
    Portrait = 0,
    Landscape = 1
  }

  global['NSPrintInfo']['PaperOrientation'] = PaperOrientation;

  export enum PaginationMode {
    Automatic = 0,
    Fit = 1,
    Clip = 2
  }

  global['NSPrintInfo']['PaginationMode'] = PaginationMode;

  export let automatic: NSPrintInfo.PaginationMode;
  export let clip: NSPrintInfo.PaginationMode;
  export let fit: NSPrintInfo.PaginationMode;
  export let allPages: string;
  export let bottomMargin: string;
  export let cancel: string;
  export let copies: string;
  export let detailedErrorReporting: string;
  export let faxNumber: string;
  export let firstPage: string;
  export let headerAndFooter: string;
  export let horizontalPagination: string;
  export let horizontallyCentered: string;
  export let jobDisposition: string;
  export let jobSavingFileNameExtensionHidden: string;
  export let jobSavingURL: string;
  export let lastPage: string;
  export let leftMargin: string;
  export let mustCollate: string;
  export let orientation: string;
  export let pagesAcross: string;
  export let pagesDown: string;
  export let paperName: string;
  export let paperSize: string;
  export let preview: string;
  export let printer: string;
  export let printerName: string;
  export let reversePageOrder: string;
  export let rightMargin: string;
  export let save: string;
  export let scalingFactor: string;
  export let selectionOnly: string;
  export let spool: string;
  export let time: string;
  export let topMargin: string;
  export let verticalPagination: string;
  export let verticallyCentered: string;
  export type SettingKey = String;
}

namespace NSPrintOperation {
  export enum RenderingQuality {
    Best = 0,
    Responsive = 1
  }

  global['NSPrintOperation']['RenderingQuality'] = RenderingQuality;

  export enum PageOrder {
    DescendingPageOrder = -1,
    SpecialPageOrder = 0,
    AscendingPageOrder = 1,
    UnknownPageOrder = 2
  }

  global['NSPrintOperation']['PageOrder'] = PageOrder;

}

namespace NSPrintPanel {
  export enum Options {
    ShowsCopies = 1,
    ShowsPageRange = 2,
    ShowsPaperSize = 4,
    ShowsOrientation = 8,
    ShowsScaling = 16,
    ShowsPrintSelection = 32,
    ShowsPageSetupAccessory = 256,
    ShowsPreview = 131072
  }

  global['NSPrintPanel']['Options'] = Options;

  export let allPresets: string;
  export let noPresets: string;
  export let itemDescription: string;
  export let itemName: string;
  export let photo: string;
}

namespace NSPrinter {
  export enum TableStatus {
    OK = 0,
    NotFound = 1,
    Error = 2
  }

  global['NSPrinter']['TableStatus'] = TableStatus;

}

namespace NSProgressIndicator {
  export enum Style {
    Bar = 0,
    Spinning = 1
  }

  global['NSProgressIndicator']['Style'] = Style;

}

namespace NSRegularExpression {
  export enum MatchingFlags {
    Progress = 1,
    Completed = 2,
    HitEnd = 4,
    RequiredEnd = 8,
    InternalError = 16
  }

  global['NSRegularExpression']['MatchingFlags'] = MatchingFlags;

  export enum MatchingOptions {
    ReportProgress = 1,
    ReportCompletion = 2,
    Anchored = 4,
    WithTransparentBounds = 8,
    WithoutAnchoringBounds = 16
  }

  global['NSRegularExpression']['MatchingOptions'] = MatchingOptions;

  export enum Options {
    CaseInsensitive = 1,
    AllowCommentsAndWhitespace = 2,
    IgnoreMetacharacters = 4,
    DotMatchesLineSeparators = 8,
    AnchorsMatchLines = 16,
    UseUnixLineSeparators = 32,
    UseUnicodeWordBoundaries = 64
  }

  global['NSRegularExpression']['Options'] = Options;

}

namespace NSRelativeSpecifier {
  export enum RelativePosition {
    After = 0,
    Before = 1
  }

  global['NSRelativeSpecifier']['RelativePosition'] = RelativePosition;

}

namespace NSRuleEditor {
  export enum NestingMode {
    Single = 0,
    List = 1,
    Compound = 2,
    Simple = 3
  }

  global['NSRuleEditor']['NestingMode'] = NestingMode;

  export enum RowType {
    Simple = 0,
    Compound = 1
  }

  global['NSRuleEditor']['RowType'] = RowType;

  export let comparisonModifier: string;
  export let compoundType: string;
  export let customSelector: string;
  export let leftExpression: string;
  export let operatorType: string;
  export let options: string;
  export let rightExpression: string;
  export let rowsDidChangeNotification: string;
}

namespace NSRulerView {
  export enum Orientation {
    HorizontalRuler = 0,
    VerticalRuler = 1
  }

  global['NSRulerView']['Orientation'] = Orientation;

  export let centimeters: string;
  export let inches: string;
  export let picas: string;
  export let points: string;
}

namespace NSScreen {
  export let colorSpaceDidChangeNotification: string;
}

namespace NSScrollView {
  export enum Elasticity {
    Automatic = 0,
    None = 1,
    Allowed = 2
  }

  global['NSScrollView']['Elasticity'] = Elasticity;

  export enum FindBarPosition {
    AboveHorizontalRuler = 0,
    AboveContent = 1,
    BelowContent = 2
  }

  global['NSScrollView']['FindBarPosition'] = FindBarPosition;

  export let didEndLiveMagnifyNotification: string;
  export let didEndLiveScrollNotification: string;
  export let didLiveScrollNotification: string;
  export let willStartLiveMagnifyNotification: string;
  export let willStartLiveScrollNotification: string;
}

namespace NSScroller {
  export enum KnobStyle {
    Default = 0,
    Dark = 1,
    Light = 2
  }

  global['NSScroller']['KnobStyle'] = KnobStyle;

  export enum Part {
    NoPart = 0,
    DecrementPage = 1,
    Knob = 2,
    IncrementPage = 3,
    DecrementLine = 4,
    IncrementLine = 5,
    KnobSlot = 6
  }

  global['NSScroller']['Part'] = Part;

  export enum Style {
    Legacy = 0,
    Overlay = 1
  }

  global['NSScroller']['Style'] = Style;

  export enum UsableParts {
    NoScrollerParts = 0,
    OnlyScrollerArrows = 1,
    AllScrollerParts = 2
  }

  global['NSScroller']['UsableParts'] = UsableParts;

  export let preferredScrollerStyleDidChangeNotification: string;
}

namespace NSScrubber {
  export enum Alignment {
    None = 0,
    Leading = 1,
    Trailing = 2,
    Center = 3
  }

  global['NSScrubber']['Alignment'] = Alignment;

  export enum Mode {
    Fixed = 0,
    Free = 1
  }

  global['NSScrubber']['Mode'] = Mode;

}

namespace NSSearchField {
  export let clearRecentsMenuItemTag: number;
  export let noRecentsMenuItemTag: number;
  export let recentsMenuItemTag: number;
  export let recentsTitleMenuItemTag: number;
  export type RecentsAutosaveName = String;
}

namespace NSSegmentedControl {
  export enum Distribution {
    Fit = 0,
    Fill = 1,
    FillEqually = 2,
    FillProportionally = 3
  }

  global['NSSegmentedControl']['Distribution'] = Distribution;

  export enum Style {
    Automatic = 0,
    Rounded = 1,
    RoundRect = 3,
    TexturedSquare = 4,
    SmallSquare = 6,
    Separated = 8,
    TexturedRounded = 2,
    Capsule = 5
  }

  global['NSSegmentedControl']['Style'] = Style;

  export enum SwitchTracking {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2,
    MomentaryAccelerator = 3
  }

  global['NSSegmentedControl']['SwitchTracking'] = SwitchTracking;

}

namespace NSSet {
  export type Iterator = NSFastEnumerationIterator;
}

namespace NSSharingService {
  export enum CloudKitOptions {
    Standard = 0,
    AllowPublic = 1,
    AllowPrivate = 2,
    AllowReadOnly = 16,
    AllowReadWrite = 32
  }

  global['NSSharingService']['CloudKitOptions'] = CloudKitOptions;

  export enum SharingContentScope {
    Item = 0,
    Partial = 1,
    Full = 2
  }

  global['NSSharingService']['SharingContentScope'] = SharingContentScope;

  export let addToAperture: string;
  export let addToIPhoto: string;
  export let addToSafariReadingList: string;
  export let cloudSharing: string;
  export let composeEmail: string;
  export let composeMessage: string;
  export let sendViaAirDrop: string;
  export let useAsDesktopPicture: string;
}

namespace NSSlider {
  export enum SliderType {
    Linear = 0,
    Circular = 1
  }

  global['NSSlider']['SliderType'] = SliderType;

  export enum TickMarkPosition {
    Below = 0,
    Above = 1,
    Leading = 1,
    Trailing = 0
  }

  global['NSSlider']['TickMarkPosition'] = TickMarkPosition;

}

namespace NSSliderAccessory {
  export let default_: number;
  export let wide: number;
}

namespace NSSound {
  export type Name = String;
  export type PlaybackDeviceIdentifier = String;
}

namespace NSSpecifierTest {
  export enum TestComparisonOperation {
    EqualToComparison = 0,
    LessThanOrEqualToComparison = 1,
    LessThanComparison = 2,
    GreaterThanOrEqualToComparison = 3,
    GreaterThanComparison = 4,
    BeginsWithComparison = 5,
    EndsWithComparison = 6,
    ContainsComparison = 7
  }

  global['NSSpecifierTest']['TestComparisonOperation'] = TestComparisonOperation;

}

namespace NSSpeechSynthesizer {
  export enum Boundary {
    ImmediateBoundary = 0,
    WordBoundary = 1,
    SentenceBoundary = 2
  }

  global['NSSpeechSynthesizer']['Boundary'] = Boundary;

  export let characterMode: string;
  export let commandDelimiter: string;
  export let currentVoice: string;
  export let abbreviations: string;
  export let entryPhonemes: string;
  export let entrySpelling: string;
  export let localeIdentifier: string;
  export let modificationDate: string;
  export let pronunciations: string;
  export let errors: string;
  export let inputMode: string;
  export let numberMode: string;
  export let outputToFileURL: string;
  export let phonemeSymbols: string;
  export let pitchBase: string;
  export let pitchMod: string;
  export let rate: string;
  export let recentSync: string;
  export let reset: string;
  export let status: string;
  export let synthesizerInfo: string;
  export let volume: string;
  export let age: string;
  export let demoText: string;
  export let gender: string;
  export let female: string;
  export let male: string;
  export let neuter: string;
  export let identifier: string;
  export let individuallySpokenCharacters: string;
  export let name: string;
  export let supportedCharacters: string;
}

namespace NSSpellChecker {
  export enum CorrectionIndicatorType {
    Default = 0,
    Reversion = 1,
    Guesses = 2
  }

  global['NSSpellChecker']['CorrectionIndicatorType'] = CorrectionIndicatorType;

  export enum CorrectionResponse {
    None = 0,
    Accepted = 1,
    Rejected = 2,
    Ignored = 3,
    Edited = 4,
    Reverted = 5
  }

  global['NSSpellChecker']['CorrectionResponse'] = CorrectionResponse;

  export let didChangeAutomaticCapitalizationNotification: string;
  export let didChangeAutomaticDashSubstitutionNotification: string;
  export let didChangeAutomaticPeriodSubstitutionNotification: string;
  export let didChangeAutomaticQuoteSubstitutionNotification: string;
  export let didChangeAutomaticSpellingCorrectionNotification: string;
  export let didChangeAutomaticTextCompletionNotification: string;
  export let didChangeAutomaticTextReplacementNotification: string;
  export let documentAuthor: string;
  export let documentTitle: string;
  export let documentURL: string;
  export let orthography: string;
  export let quotes: string;
  export let referenceDate: string;
  export let referenceTimeZone: string;
  export let regularExpressions: string;
  export let replacements: string;
  export let selectedRange: string;
}

namespace NSSplitView {
  export enum DividerStyle {
    Thick = 1,
    Thin = 2,
    PaneSplitter = 3
  }

  global['NSSplitView']['DividerStyle'] = DividerStyle;

  export let didResizeSubviewsNotification: string;
  export let willResizeSubviewsNotification: string;
  export type AutosaveName = String;
}

namespace NSSplitViewController {
  export let automaticDimension: number;
}

namespace NSSplitViewItem {
  export enum Behavior {
    Default = 0,
    Sidebar = 1,
    ContentList = 2
  }

  global['NSSplitViewItem']['Behavior'] = Behavior;

  export enum CollapseBehavior {
    Default = 0,
    PreferResizingSplitViewWithFixedSiblings = 1,
    PreferResizingSiblingsWithFixedSplitView = 2,
    UseConstraints = 3
  }

  global['NSSplitViewItem']['CollapseBehavior'] = CollapseBehavior;

  export let unspecifiedDimension: number;
}

namespace NSStackView {
  export enum Distribution {
    GravityAreas = -1,
    Fill = 0,
    FillEqually = 1,
    FillProportionally = 2,
    EqualSpacing = 3,
    EqualCentering = 4
  }

  global['NSStackView']['Distribution'] = Distribution;

  export enum Gravity {
    Top = 1,
    Leading = 1,
    Center = 2,
    Bottom = 3,
    Trailing = 3
  }

  global['NSStackView']['Gravity'] = Gravity;

  export let useDefaultSpacing: number;
  export let detachOnlyIfNecessary: number;
  export let mustHold: number;
  export let notVisible: number;
}

namespace NSStatusItem {
  export enum Behavior {
    RemovalAllowed = 2,
    TerminationOnRemoval = 4
  }

  global['NSStatusItem']['Behavior'] = Behavior;

  export let squareLength: number;
  export let variableLength: number;
  export type AutosaveName = String;
}

namespace NSStoryboard {
  export type Name = String;
  export type SceneIdentifier = String;
}

namespace NSStoryboardSegue {
  export type Identifier = String;
}

namespace NSString {
  export enum DrawingOptions {
    UsesLineFragmentOrigin = 1,
    UsesFontLeading = 2,
    UsesDeviceMetrics = 8,
    TruncatesLastVisibleLine = 32,
    DisableScreenFontSubstitution = 4,
    OneShot = 16
  }

  global['NSString']['DrawingOptions'] = DrawingOptions;

  export enum CompareOptions {
    CaseInsensitiveSearch = 1,
    LiteralSearch = 2,
    BackwardsSearch = 4,
    AnchoredSearch = 8,
    NumericSearch = 64,
    DiacriticInsensitiveSearch = 128,
    WidthInsensitiveSearch = 256,
    ForcedOrderingSearch = 512,
    RegularExpressionSearch = 1024
  }

  global['NSString']['CompareOptions'] = CompareOptions;

  export enum EncodingConversionOptions {
    AllowLossy = 1,
    ExternalRepresentation = 2
  }

  global['NSString']['EncodingConversionOptions'] = EncodingConversionOptions;

  export enum EnumerationOptions {
    ByLines = 0,
    ByParagraphs = 1,
    ByComposedCharacterSequences = 2,
    ByWords = 3,
    BySentences = 4,
    Reverse = 256,
    SubstringNotRequired = 512,
    Localized = 1024
  }

  global['NSString']['EnumerationOptions'] = EnumerationOptions;

  export type ExtendedGraphemeClusterLiteralType = string;
  export type StringLiteralType = string;
  export type UnicodeScalarLiteralType = string;
}

namespace NSTabView {
  export enum TabPosition {
    None = 0,
    Top = 1,
    Left = 2,
    Bottom = 3,
    Right = 4
  }

  global['NSTabView']['TabPosition'] = TabPosition;

  export enum TabViewBorderType {
    None = 0,
    Line = 1,
    Bezel = 2
  }

  global['NSTabView']['TabViewBorderType'] = TabViewBorderType;

  export enum TabType {
    TopTabsBezelBorder = 0,
    LeftTabsBezelBorder = 1,
    BottomTabsBezelBorder = 2,
    RightTabsBezelBorder = 3,
    NoTabsBezelBorder = 4,
    NoTabsLineBorder = 5,
    NoTabsNoBorder = 6
  }

  global['NSTabView']['TabType'] = TabType;

}

namespace NSTabViewController {
  export enum TabStyle {
    SegmentedControlOnTop = 0,
    SegmentedControlOnBottom = 1,
    Toolbar = 2,
    Unspecified = -1
  }

  global['NSTabViewController']['TabStyle'] = TabStyle;

}

namespace NSTabViewItem {
  export enum State {
    SelectedTab = 0,
    BackgroundTab = 1,
    PressedTab = 2
  }

  global['NSTabViewItem']['State'] = State;

}

namespace NSTableColumn {
  export enum ResizingOptions {
    NoResizing = 0,
    AutoresizingMask = 1,
    UserResizingMask = 2
  }

  global['NSTableColumn']['ResizingOptions'] = ResizingOptions;

}

namespace NSTableView {
  export enum RowActionEdge {
    Leading = 0,
    Trailing = 1
  }

  global['NSTableView']['RowActionEdge'] = RowActionEdge;

  export enum AnimationOptions {
    EffectNone = 0,
    EffectFade = 1,
    EffectGap = 2,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 48,
    SlideRight = 64
  }

  global['NSTableView']['AnimationOptions'] = AnimationOptions;

  export enum ColumnAutoresizingStyle {
    NoColumnAutoresizing = 0,
    UniformColumnAutoresizingStyle = 1,
    SequentialColumnAutoresizingStyle = 2,
    ReverseSequentialColumnAutoresizingStyle = 3,
    LastColumnOnlyAutoresizingStyle = 4,
    FirstColumnOnlyAutoresizingStyle = 5
  }

  global['NSTableView']['ColumnAutoresizingStyle'] = ColumnAutoresizingStyle;

  export enum DraggingDestinationFeedbackStyle {
    None = -1,
    Regular = 0,
    SourceList = 1,
    Gap = 2
  }

  global['NSTableView']['DraggingDestinationFeedbackStyle'] = DraggingDestinationFeedbackStyle;

  export enum DropOperation {
    On = 0,
    Above = 1
  }

  global['NSTableView']['DropOperation'] = DropOperation;

  export enum GridLineStyle {
    GridNone = 0,
    SolidVerticalGridLineMask = 1,
    SolidHorizontalGridLineMask = 2,
    DashedHorizontalGridLineMask = 8
  }

  global['NSTableView']['GridLineStyle'] = GridLineStyle;

  export enum RowSizeStyle {
    Default = -1,
    Custom = 0,
    Small = 1,
    Medium = 2,
    Large = 3
  }

  global['NSTableView']['RowSizeStyle'] = RowSizeStyle;

  export enum SelectionHighlightStyle {
    None = -1,
    Regular = 0,
    SourceList = 1
  }

  global['NSTableView']['SelectionHighlightStyle'] = SelectionHighlightStyle;

  export let columnDidMoveNotification: string;
  export let columnDidResizeNotification: string;
  export let rowViewIdentifier: string;
  export let selectionDidChangeNotification: string;
  export let selectionIsChangingNotification: string;
  export type AutosaveName = String;
}

namespace NSTableViewRowAction {
  export enum Style {
    Regular = 0,
    Destructive = 1
  }

  global['NSTableViewRowAction']['Style'] = Style;

}

namespace NSText {
  export let didBeginEditingNotification: string;
  export let didChangeNotification: string;
  export let didEndEditingNotification: string;
  export let movementUserInfoKey: string;
}

namespace NSTextAlternatives {
  export let selectedAlternativeStringNotification: string;
}

namespace NSTextBlock {
  export enum Dimension {
    Width = 0,
    MinimumWidth = 1,
    MaximumWidth = 2,
    Height = 4,
    MinimumHeight = 5,
    MaximumHeight = 6
  }

  global['NSTextBlock']['Dimension'] = Dimension;

  export enum Layer {
    Padding = -1,
    Border = 0,
    Margin = 1
  }

  global['NSTextBlock']['Layer'] = Layer;

  export enum ValueType {
    AbsoluteValueType = 0,
    PercentageValueType = 1
  }

  global['NSTextBlock']['ValueType'] = ValueType;

  export enum VerticalAlignment {
    TopAlignment = 0,
    MiddleAlignment = 1,
    BottomAlignment = 2,
    BaselineAlignment = 3
  }

  global['NSTextBlock']['VerticalAlignment'] = VerticalAlignment;

}

namespace NSTextCheckingKey {
  export let airline: string;
  export let city: string;
  export let country: string;
  export let flight: string;
  export let jobTitle: string;
  export let name: string;
  export let organization: string;
  export let phone: string;
  export let state: string;
  export let street: string;
  export let zip: string;
}

namespace NSTextCheckingResult {
  export enum CheckingType {
    Orthography = 1,
    Spelling = 2,
    Grammar = 4,
    Date = 8,
    Address = 16,
    Link = 32,
    Quote = 64,
    Dash = 128,
    Replacement = 256,
    Correction = 512,
    RegularExpression = 1024,
    PhoneNumber = 2048,
    TransitInformation = 4096
  }

  global['NSTextCheckingResult']['CheckingType'] = CheckingType;

}

namespace NSTextField {
  export enum BezelStyle {
    SquareBezel = 0,
    RoundedBezel = 1
  }

  global['NSTextField']['BezelStyle'] = BezelStyle;

}

namespace NSTextFinder {
  export enum Action {
    ShowFindInterface = 1,
    NextMatch = 2,
    PreviousMatch = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetSearchString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10,
    HideFindInterface = 11,
    ShowReplaceInterface = 12,
    HideReplaceInterface = 13
  }

  global['NSTextFinder']['Action'] = Action;

  export enum MatchingType {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3
  }

  global['NSTextFinder']['MatchingType'] = MatchingType;

}

namespace NSTextInputContext {
  export let keyboardSelectionDidChangeNotification: string;
}

namespace NSTextList {
  export enum Options {
    PrependEnclosingMarker = 1
  }

  global['NSTextList']['Options'] = Options;

  export let box: string;
  export let check: string;
  export let circle: string;
  export let decimal: string;
  export let diamond: string;
  export let disc: string;
  export let hyphen: string;
  export let lowercaseAlpha: string;
  export let lowercaseHexadecimal: string;
  export let lowercaseLatin: string;
  export let lowercaseRoman: string;
  export let octal: string;
  export let square: string;
  export let uppercaseAlpha: string;
  export let uppercaseHexadecimal: string;
  export let uppercaseLatin: string;
  export let uppercaseRoman: string;
}

namespace NSTextStorage {
  export let didProcessEditingNotification: string;
  export let willProcessEditingNotification: string;
}

namespace NSTextTab {
  export let columnTerminators: string;
}

namespace NSTextTable {
  export enum LayoutAlgorithm {
    AutomaticLayoutAlgorithm = 0,
    FixedLayoutAlgorithm = 1
  }

  global['NSTextTable']['LayoutAlgorithm'] = LayoutAlgorithm;

}

namespace NSTextView {
  export let didChangeSelectionNotification: string;
  export let didChangeTypingAttributesNotification: string;
  export let willChangeNotifyingTextViewNotification: string;
}

namespace NSTimeZone {
  export enum NameStyle {
    Standard = 0,
    ShortStandard = 1,
    DaylightSaving = 2,
    ShortDaylightSaving = 3,
    Generic = 4,
    ShortGeneric = 5
  }

  global['NSTimeZone']['NameStyle'] = NameStyle;

}

namespace NSTokenField {
  export enum TokenStyle {
    Default = 0,
    None = 1,
    Rounded = 2,
    Squared = 3,
    PlainSquared = 4
  }

  global['NSTokenField']['TokenStyle'] = TokenStyle;

}

namespace NSToolbar {
  export enum DisplayMode {
    Default = 0,
    IconAndLabel = 1,
    IconOnly = 2,
    LabelOnly = 3
  }

  global['NSToolbar']['DisplayMode'] = DisplayMode;

  export enum SizeMode {
    Default = 0,
    Regular = 1,
    Small = 2
  }

  global['NSToolbar']['SizeMode'] = SizeMode;

  export let didRemoveItemNotification: string;
  export let willAddItemNotification: string;
  export type Identifier = String;
}

namespace NSToolbarItem {
  export let cloudSharing: string;
  export let customizeToolbar: string;
  export let flexibleSpace: string;
  export let high: number;
  export let low: number;
  export let standard: number;
  export let user: number;
  export let print: string;
  export let separator: string;
  export let showColors: string;
  export let showFonts: string;
  export let space: string;
  export let toggleSidebar: string;
}

namespace NSToolbarItemGroup {
  export enum ControlRepresentation {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2
  }

  global['NSToolbarItemGroup']['ControlRepresentation'] = ControlRepresentation;

  export enum SelectionMode {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2
  }

  global['NSToolbarItemGroup']['SelectionMode'] = SelectionMode;

}

namespace NSTouch {
  export enum Phase {
    Began = 1,
    Moved = 2,
    Stationary = 4,
    Ended = 8,
    Cancelled = 16,
    Touching = 7,
    Any = -1
  }

  global['NSTouch']['Phase'] = Phase;

  export enum TouchType {
    Direct = 0,
    Indirect = 1
  }

  global['NSTouch']['TouchType'] = TouchType;

  export enum TouchTypeMask {
    Direct = 1,
    Indirect = 2
  }

  global['NSTouch']['TouchTypeMask'] = TouchTypeMask;

}

namespace NSTouchBar {
  export type CustomizationIdentifier = String;
}

namespace NSTouchBarItem {
  export let candidateList: string;
  export let characterPicker: string;
  export let fixedSpaceLarge: string;
  export let fixedSpaceSmall: string;
  export let flexibleSpace: string;
  export let otherItemsProxy: string;
  export let textAlignment: string;
  export let textColorPicker: string;
  export let textFormat: string;
  export let textList: string;
  export let textStyle: string;
  export let high: number;
  export let low: number;
  export let normal: number;
}

namespace NSTrackingArea {
  export enum Options {
    MouseEnteredAndExited = 1,
    MouseMoved = 2,
    CursorUpdate = 4,
    ActiveWhenFirstResponder = 16,
    ActiveInKeyWindow = 32,
    ActiveInActiveApp = 64,
    ActiveAlways = 128,
    AssumeInside = 256,
    InVisibleRect = 512,
    EnabledDuringMouseDrag = 1024
  }

  global['NSTrackingArea']['Options'] = Options;

}

namespace NSURL {
  export enum BookmarkCreationOptions {
    PreferFileIDResolution = 256,
    MinimalBookmark = 512,
    SuitableForBookmarkFile = 1024,
    WithSecurityScope = 2048,
    SecurityScopeAllowOnlyReadAccess = 4096
  }

  global['NSURL']['BookmarkCreationOptions'] = BookmarkCreationOptions;

  export enum BookmarkResolutionOptions {
    WithoutUI = 256,
    WithoutMounting = 512,
    WithSecurityScope = 1024
  }

  global['NSURL']['BookmarkResolutionOptions'] = BookmarkResolutionOptions;

  export type BookmarkFileCreationOptions = number;
}

namespace NSURLHandle {
  export enum Status {
    NotLoaded = 0,
    LoadSucceeded = 1,
    LoadInProgress = 2,
    LoadFailed = 3
  }

  global['NSURLHandle']['Status'] = Status;

}

namespace NSURLRequest {
  export enum CachePolicy {
    UseProtocolCachePolicy = 0,
    ReloadIgnoringLocalCacheData = 1,
    ReloadIgnoringLocalAndRemoteCacheData = 4,
    ReloadIgnoringCacheData = 1,
    ReturnCacheDataElseLoad = 2,
    ReturnCacheDataDontLoad = 3,
    ReloadRevalidatingCacheData = 5
  }

  global['NSURLRequest']['CachePolicy'] = CachePolicy;

  export enum NetworkServiceType {
    NetworkServiceTypeDefault = 0,
    NetworkServiceTypeVoIP = 1,
    NetworkServiceTypeVideo = 2,
    NetworkServiceTypeBackground = 3,
    NetworkServiceTypeVoice = 4,
    NetworkServiceTypeResponsiveData = 6,
    NetworkServiceTypeAVStreaming = 8,
    NetworkServiceTypeResponsiveAV = 9,
    NetworkServiceTypeCallSignaling = 11
  }

  global['NSURLRequest']['NetworkServiceType'] = NetworkServiceType;

}

namespace NSUbiquitousKeyValueStore {
  export let didChangeExternallyNotification: string;
}

namespace NSUserNotification {
  export enum ActivationType {
    None = 0,
    ContentsClicked = 1,
    ActionButtonClicked = 2,
    Replied = 3,
    AdditionalActionClicked = 4
  }

  global['NSUserNotification']['ActivationType'] = ActivationType;

}

namespace NSValueTransformerName {
  export let isNilTransformerName: string;
  export let isNotNilTransformerName: string;
  export let negateBooleanTransformerName: string;
  export let secureUnarchiveFromDataTransformerName: string;
}

namespace NSView {
  export enum AutoresizingMask {
    ViewNotSizable = 0,
    ViewMinXMargin = 1,
    ViewWidthSizable = 2,
    ViewMaxXMargin = 4,
    ViewMinYMargin = 8,
    ViewHeightSizable = 16,
    ViewMaxYMargin = 32
  }

  global['NSView']['AutoresizingMask'] = AutoresizingMask;

  export enum BackgroundStyle {
    Normal = 0,
    Emphasized = 1,
    Raised = 2,
    Lowered = 3
  }

  global['NSView']['BackgroundStyle'] = BackgroundStyle;

  export enum LayerContentsPlacement {
    ScaleAxesIndependently = 0,
    ScaleProportionallyToFit = 1,
    ScaleProportionallyToFill = 2,
    Center = 3,
    Top = 4,
    TopRight = 5,
    Right = 6,
    BottomRight = 7,
    Bottom = 8,
    BottomLeft = 9,
    Left = 10,
    TopLeft = 11
  }

  global['NSView']['LayerContentsPlacement'] = LayerContentsPlacement;

  export enum LayerContentsRedrawPolicy {
    Never = 0,
    OnSetNeedsDisplay = 1,
    DuringViewResize = 2,
    BeforeViewResize = 3,
    Crossfade = 4
  }

  global['NSView']['LayerContentsRedrawPolicy'] = LayerContentsRedrawPolicy;

  export let emphasized: NSView.BackgroundStyle;
  export let normal: NSView.BackgroundStyle;
  export let dictionaryApplication: string;
  export let presentationType: string;
  export let overlay: string;
  export let fullScreenModeAllScreens: string;
  export let fullScreenModeApplicationPresentationOptions: string;
  export let fullScreenModeSetting: string;
  export let fullScreenModeWindowLevel: string;
  export let boundsDidChangeNotification: string;
  export let didUpdateTrackingAreasNotification: string;
  export let frameDidChangeNotification: string;
  export let noIntrinsicMetric: number;
  export type ToolTipTag = number;
  export type TrackingRectTag = number;
}

namespace NSViewAnimation {
  export let effect: string;
  export let endFrame: string;
  export let fadeIn: string;
  export let fadeOut: string;
  export let startFrame: string;
  export let target: string;
}

namespace NSViewController {
  export enum TransitionOptions {
    None = 0,
    Crossfade = 1,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 64,
    SlideRight = 128,
    SlideForward = 320,
    SlideBackward = 384,
    AllowUserInteraction = 4096
  }

  global['NSViewController']['TransitionOptions'] = TransitionOptions;

}

namespace NSVisualEffectView {
  export enum BlendingMode {
    BehindWindow = 0,
    WithinWindow = 1
  }

  global['NSVisualEffectView']['BlendingMode'] = BlendingMode;

  export enum Material {
    Titlebar = 3,
    Selection = 4,
    Menu = 5,
    Popover = 6,
    Sidebar = 7,
    HeaderView = 10,
    Sheet = 11,
    WindowBackground = 12,
    HUDWindow = 13,
    FullScreenUI = 15,
    ToolTip = 17,
    ContentBackground = 18,
    UnderWindowBackground = 21,
    UnderPageBackground = 22,
    AppearanceBased = 0,
    Light = 1,
    Dark = 2,
    MediumLight = 8,
    UltraDark = 9
  }

  global['NSVisualEffectView']['Material'] = Material;

  export enum State {
    FollowsWindowActiveState = 0,
    Active = 1,
    Inactive = 2
  }

  global['NSVisualEffectView']['State'] = State;

}

namespace NSWhoseSpecifier {
  export enum SubelementIdentifier {
    IndexSubelement = 0,
    EverySubelement = 1,
    MiddleSubelement = 2,
    RandomSubelement = 3,
    NoSubelement = 4
  }

  global['NSWhoseSpecifier']['SubelementIdentifier'] = SubelementIdentifier;

}

namespace NSWindow {
  export enum BackingStoreType {
    Retained = 0,
    Nonretained = 1,
    Buffered = 2
  }

  global['NSWindow']['BackingStoreType'] = BackingStoreType;

  export enum SelectionDirection {
    DirectSelection = 0,
    SelectingNext = 1,
    SelectingPrevious = 2
  }

  global['NSWindow']['SelectionDirection'] = SelectionDirection;

  export enum AnimationBehavior {
    Default = 0,
    None = 2,
    DocumentWindow = 3,
    UtilityWindow = 4,
    AlertPanel = 5
  }

  global['NSWindow']['AnimationBehavior'] = AnimationBehavior;

  export enum ButtonType {
    CloseButton = 0,
    MiniaturizeButton = 1,
    ZoomButton = 2,
    ToolbarButton = 3,
    DocumentIconButton = 4,
    DocumentVersionsButton = 6
  }

  global['NSWindow']['ButtonType'] = ButtonType;

  export enum CollectionBehavior {
    Default = 0,
    CanJoinAllSpaces = 1,
    MoveToActiveSpace = 2,
    Managed = 4,
    Transient = 8,
    Stationary = 16,
    ParticipatesInCycle = 32,
    IgnoresCycle = 64,
    FullScreenPrimary = 128,
    FullScreenAuxiliary = 256,
    FullScreenNone = 512,
    FullScreenAllowsTiling = 2048,
    FullScreenDisallowsTiling = 4096
  }

  global['NSWindow']['CollectionBehavior'] = CollectionBehavior;

  export enum Depth {
    TwentyfourBitRGB = 520,
    SixtyfourBitRGB = 528,
    OnehundredtwentyeightBitRGB = 544
  }

  global['NSWindow']['Depth'] = Depth;

  export enum NumberListOptions {
    AllApplications = 1,
    AllSpaces = 16
  }

  global['NSWindow']['NumberListOptions'] = NumberListOptions;

  export enum OcclusionState {
    Visible = 2
  }

  global['NSWindow']['OcclusionState'] = OcclusionState;

  export enum OrderingMode {
    Above = 1,
    Below = -1,
    Out = 0
  }

  global['NSWindow']['OrderingMode'] = OrderingMode;

  export enum SharingType {
    None = 0,
    ReadOnly = 1,
    ReadWrite = 2
  }

  global['NSWindow']['SharingType'] = SharingType;

  export enum StyleMask {
    Borderless = 0,
    Titled = 1,
    Closable = 2,
    Miniaturizable = 4,
    Resizable = 8,
    TexturedBackground = 256,
    UnifiedTitleAndToolbar = 4096,
    FullScreen = 16384,
    FullSizeContentView = 32768,
    UtilityWindow = 16,
    DocModalWindow = 64,
    NonactivatingPanel = 128,
    HUDWindow = 8192
  }

  global['NSWindow']['StyleMask'] = StyleMask;

  export enum TabbingMode {
    Automatic = 0,
    Preferred = 1,
    Disallowed = 2
  }

  global['NSWindow']['TabbingMode'] = TabbingMode;

  export enum TitleVisibility {
    Visible = 0,
    Hidden = 1
  }

  global['NSWindow']['TitleVisibility'] = TitleVisibility;

  export enum UserTabbingPreference {
    Manual = 0,
    Always = 1,
    InFullScreen = 2
  }

  global['NSWindow']['UserTabbingPreference'] = UserTabbingPreference;

  export let oldColorSpaceUserInfoKey: string;
  export let oldScaleFactorUserInfoKey: string;
  export let floating: number;
  export let mainMenu: number;
  export let modalPanel: number;
  export let normal: number;
  export let popUpMenu: number;
  export let screenSaver: number;
  export let statusBar: number;
  export let submenu: number;
  export let tornOffMenu: number;
  export let didBecomeKeyNotification: string;
  export let didBecomeMainNotification: string;
  export let didChangeBackingPropertiesNotification: string;
  export let didChangeOcclusionStateNotification: string;
  export let didChangeScreenNotification: string;
  export let didChangeScreenProfileNotification: string;
  export let didDeminiaturizeNotification: string;
  export let didEndLiveResizeNotification: string;
  export let didEndSheetNotification: string;
  export let didEnterFullScreenNotification: string;
  export let didEnterVersionBrowserNotification: string;
  export let didExitFullScreenNotification: string;
  export let didExitVersionBrowserNotification: string;
  export let didExposeNotification: string;
  export let didMiniaturizeNotification: string;
  export let didMoveNotification: string;
  export let didResignKeyNotification: string;
  export let didResignMainNotification: string;
  export let didResizeNotification: string;
  export let didUpdateNotification: string;
  export let willBeginSheetNotification: string;
  export let willCloseNotification: string;
  export let willEnterFullScreenNotification: string;
  export let willEnterVersionBrowserNotification: string;
  export let willExitFullScreenNotification: string;
  export let willExitVersionBrowserNotification: string;
  export let willMiniaturizeNotification: string;
  export let willMoveNotification: string;
  export let willStartLiveResizeNotification: string;
  export type FrameAutosaveName = String;
  export type PersistableFrameDescriptor = String;
  export type TabbingIdentifier = String;
}

namespace NSWorkspace {
  export enum AuthorizationType {
    CreateSymbolicLink = 0,
    SetAttributes = 1,
    ReplaceFile = 2
  }

  global['NSWorkspace']['AuthorizationType'] = AuthorizationType;

  export enum IconCreationOptions {
    ExcludeQuickDrawElementsIconCreationOption = 2,
    Exclude10_4ElementsIconCreationOption = 4
  }

  global['NSWorkspace']['IconCreationOptions'] = IconCreationOptions;

  export enum LaunchOptions {
    AndPrint = 2,
    WithErrorPresentation = 64,
    InhibitingBackgroundOnly = 128,
    WithoutAddingToRecents = 256,
    WithoutActivation = 512,
    Async = 65536,
    NewInstance = 524288,
    AndHide = 1048576,
    AndHideOthers = 2097152,
    Default = 65536,
    AllowingClassicStartup = 131072,
    PreferringClassic = 262144
  }

  global['NSWorkspace']['LaunchOptions'] = LaunchOptions;

  export let accessibilityDisplayOptionsDidChangeNotification: string;
  export let activeSpaceDidChangeNotification: string;
  export let applicationUserInfoKey: string;
  export let allowClipping: string;
  export let fillColor: string;
  export let imageScaling: string;
  export let didActivateApplicationNotification: string;
  export let didChangeFileLabelsNotification: string;
  export let didDeactivateApplicationNotification: string;
  export let didHideApplicationNotification: string;
  export let didLaunchApplicationNotification: string;
  export let didMountNotification: string;
  export let didRenameVolumeNotification: string;
  export let didTerminateApplicationNotification: string;
  export let didUnhideApplicationNotification: string;
  export let didUnmountNotification: string;
  export let didWakeNotification: string;
  export let appleEvent: string;
  export let architecture: string;
  export let arguments_: string;
  export let environment: string;
  export let screensDidSleepNotification: string;
  export let screensDidWakeNotification: string;
  export let sessionDidBecomeActiveNotification: string;
  export let sessionDidResignActiveNotification: string;
  export let localizedVolumeNameUserInfoKey: string;
  export let oldLocalizedVolumeNameUserInfoKey: string;
  export let oldVolumeURLUserInfoKey: string;
  export let volumeURLUserInfoKey: string;
  export let willLaunchApplicationNotification: string;
  export let willPowerOffNotification: string;
  export let willSleepNotification: string;
  export let willUnmountNotification: string;
}

namespace NSXPCConnection {
  export enum Options {
    Privileged = 4096
  }

  global['NSXPCConnection']['Options'] = Options;

}

namespace NetService {
  // struct
  export enum Options {
    noAutoRename,
    listenForConnections,
    center,
    name,
    object
  }

}

namespace NotificationQueue {
  export enum NotificationCoalescing {
    NoCoalescing = 0,
    CoalescingOnName = 1,
    CoalescingOnSender = 2
  }

  global['NotificationQueue']['NotificationCoalescing'] = NotificationCoalescing;

  export enum PostingStyle {
    WhenIdle = 1,
    ASAP = 2,
    Now = 3
  }

  global['NotificationQueue']['PostingStyle'] = PostingStyle;

}

namespace NumberFormatter {
  export enum Behavior {
    BehaviorDefault = 0,
    Behavior10_0 = 1000,
    Behavior10_4 = 1040
  }

  global['NumberFormatter']['Behavior'] = Behavior;

  export enum PadPosition {
    BeforePrefix = 0,
    AfterPrefix = 1,
    BeforeSuffix = 2,
    AfterSuffix = 3
  }

  global['NumberFormatter']['PadPosition'] = PadPosition;

  export enum RoundingMode {
    Ceiling = 0,
    Floor = 1,
    Down = 2,
    Up = 3,
    HalfEven = 4,
    HalfDown = 5,
    HalfUp = 6
  }

  global['NumberFormatter']['RoundingMode'] = RoundingMode;

  export enum Style {
    NoStyle = 0,
    DecimalStyle = 1,
    CurrencyStyle = 2,
    PercentStyle = 3,
    ScientificStyle = 4,
    SpellOutStyle = 5,
    OrdinalStyle = 6,
    CurrencyISOCodeStyle = 8,
    CurrencyPluralStyle = 9,
    CurrencyAccountingStyle = 10
  }

  global['NumberFormatter']['Style'] = Style;

}

namespace Operation {
  export enum QueuePriority {
    VeryLow = -8,
    Low = -4,
    Normal = 0,
    High = 4,
    VeryHigh = 8
  }

  global['Operation']['QueuePriority'] = QueuePriority;

}

namespace OperationQueue {
  export let defaultMaxConcurrentOperationCount: number;
}

namespace PersonNameComponentsFormatter {
  export enum Options {
    Phonetic = 2
  }

  global['PersonNameComponentsFormatter']['Options'] = Options;

  export enum Style {
    Default = 0,
    Short = 1,
    Medium = 2,
    Long = 3,
    Abbreviated = 4
  }

  global['PersonNameComponentsFormatter']['Style'] = Style;

}

namespace Port {
  export let didBecomeInvalidNotification: string;
}

namespace Process {
  export enum TerminationReason {
    Exit = 1,
    UncaughtSignal = 2
  }

  global['Process']['TerminationReason'] = TerminationReason;

  export let didTerminateNotification: string;
}

namespace ProcessInfo {
  export enum ActivityOptions {
    IdleDisplaySleepDisabled = 1099511627776,
    IdleSystemSleepDisabled = 1048576,
    SuddenTerminationDisabled = 16384,
    AutomaticTerminationDisabled = 32768,
    UserInitiated = 16777215,
    UserInitiatedAllowingIdleSystemSleep = 15728639,
    Background = 255,
    LatencyCritical = 1095216660480
  }

  global['ProcessInfo']['ActivityOptions'] = ActivityOptions;

  export enum ThermalState {
    Nominal = 0,
    Fair = 1,
    Serious = 2,
    Critical = 3
  }

  global['ProcessInfo']['ThermalState'] = ThermalState;

  export let thermalStateDidChangeNotification: string;
}

namespace Progress {
  export let copying: string;
  export let decompressingAfterDownloading: string;
  export let downloading: string;
  export let receiving: string;
}

namespace ProgressKind {
  export let file: string;
}

namespace ProgressUserInfoKey {
  export let estimatedTimeRemainingKey: string;
  export let fileAnimationImageKey: string;
  export let fileAnimationImageOriginalRectKey: string;
  export let fileCompletedCountKey: string;
  export let fileIconKey: string;
  export let fileOperationKindKey: string;
  export let fileTotalCountKey: string;
  export let fileURLKey: string;
  export let throughputKey: string;
}

namespace PropertyListSerialization {
  export enum PropertyListFormat {
    OpenStepFormat = 1,
    XMLFormat_v1_0 = 100,
    BinaryFormat_v1_0 = 200
  }

  global['PropertyListSerialization']['PropertyListFormat'] = PropertyListFormat;

  export enum MutabilityOptions {
    Immutable = 0,
    MutableContainers = 1,
    MutableContainersAndLeaves = 2
  }

  global['PropertyListSerialization']['MutabilityOptions'] = MutabilityOptions;

  export type ReadOptions = PropertyListSerialization;
  export type WriteOptions = number;
}

namespace RelativeDateTimeFormatter {
  export enum DateTimeStyle {
    Numeric = 0,
    Named = 1
  }

  global['RelativeDateTimeFormatter']['DateTimeStyle'] = DateTimeStyle;

  export enum UnitsStyle {
    Full = 0,
    SpellOut = 1,
    Short = 2,
    Abbreviated = 3
  }

  global['RelativeDateTimeFormatter']['UnitsStyle'] = UnitsStyle;

}

namespace RunLoop {
  export let eventTracking: string;
  export let modalPanel: string;
  export let default_: string;
  export let common: string;
}

namespace Stream {
  export enum Event {
    None = 0,
    OpenCompleted = 1,
    HasBytesAvailable = 2,
    HasSpaceAvailable = 4,
    ErrorOccurred = 8,
    EndEncountered = 16
  }

  global['Stream']['Event'] = Event;

  export enum Status {
    NotOpen = 0,
    Opening = 1,
    Open = 2,
    Reading = 3,
    Writing = 4,
    AtEnd = 5,
    Closed = 6,
    Error = 7
  }

  global['Stream']['Status'] = Status;

  export let dataWrittenToMemoryStreamKey: string;
  export let fileCurrentOffsetKey: string;
  export let networkServiceType: string;
  export let socksProxyConfigurationKey: string;
  export let socketSecurityLevelKey: string;
}

namespace StreamNetworkServiceTypeValue {
  export let background: string;
  export let callSignaling: string;
  export let video: string;
  export let voIP: string;
  export let voice: string;
}

namespace StreamSOCKSProxyConfiguration {
  export let hostKey: string;
  export let passwordKey: string;
  export let portKey: string;
  export let userKey: string;
  export let versionKey: string;
}

namespace StreamSOCKSProxyVersion {
  export let version4: string;
  export let version5: string;
}

namespace StreamSocketSecurityLevel {
  export let negotiatedSSL: string;
  export let none: string;
  export let ssLv2: string;
  export let ssLv3: string;
  export let tlSv1: string;
}

namespace StringEncodingDetectionOptionsKey {
  export let allowLossyKey: string;
  export let disallowedEncodingsKey: string;
  export let fromWindowsKey: string;
  export let likelyLanguageKey: string;
  export let lossySubstitutionKey: string;
  export let suggestedEncodingsKey: string;
  export let useOnlySuggestedEncodingsKey: string;
}

namespace StringTransform {
  export let fullwidthToHalfwidth: string;
  export let hiraganaToKatakana: string;
  export let latinToArabic: string;
  export let latinToCyrillic: string;
  export let latinToGreek: string;
  export let latinToHangul: string;
  export let latinToHebrew: string;
  export let latinToHiragana: string;
  export let latinToKatakana: string;
  export let latinToThai: string;
  export let mandarinToLatin: string;
  export let stripCombiningMarks: string;
  export let stripDiacritics: string;
  export let toLatin: string;
  export let toUnicodeName: string;
  export let toXMLHex: string;
}

namespace SystemPressureState {
  // struct
  export enum Factors {
    systemTemperature,
    peakPower,
    depthModuleTemperature
  }

}

namespace URLCache {
  export enum StoragePolicy {
    Allowed = 0,
    AllowedInMemoryOnly = 1,
    NotAllowed = 2
  }

  global['URLCache']['StoragePolicy'] = StoragePolicy;

}

namespace URLCredential {
  export enum Persistence {
    None = 0,
    ForSession = 1,
    Permanent = 2,
    Synchronizable = 3
  }

  global['URLCredential']['Persistence'] = Persistence;

}

namespace URLFileProtection {
  export let complete: string;
  export let completeUnlessOpen: string;
  export let completeUntilFirstUserAuthentication: string;
  export let none: string;
}

namespace URLFileResourceType {
  export let blockSpecial: string;
  export let characterSpecial: string;
  export let directory: string;
  export let namedPipe: string;
  export let regular: string;
  export let socket: string;
  export let symbolicLink: string;
  export let unknown: string;
}

namespace URLResourceKey {
  export let addedToDirectoryDateKey: string;
  export let applicationIsScriptableKey: string;
  export let attributeModificationDateKey: string;
  export let canonicalPathKey: string;
  export let contentAccessDateKey: string;
  export let contentModificationDateKey: string;
  export let creationDateKey: string;
  export let customIconKey: string;
  export let documentIdentifierKey: string;
  export let effectiveIconKey: string;
  export let fileAllocatedSizeKey: string;
  export let fileProtectionKey: string;
  export let fileResourceIdentifierKey: string;
  export let fileResourceTypeKey: string;
  export let fileSecurityKey: string;
  export let fileSizeKey: string;
  export let generationIdentifierKey: string;
  export let hasHiddenExtensionKey: string;
  export let isAliasFileKey: string;
  export let isApplicationKey: string;
  export let isDirectoryKey: string;
  export let isExcludedFromBackupKey: string;
  export let isExecutableKey: string;
  export let isHiddenKey: string;
  export let isMountTriggerKey: string;
  export let isPackageKey: string;
  export let isReadableKey: string;
  export let isRegularFileKey: string;
  export let isSymbolicLinkKey: string;
  export let isSystemImmutableKey: string;
  export let isUbiquitousItemKey: string;
  export let isUserImmutableKey: string;
  export let isVolumeKey: string;
  export let isWritableKey: string;
  export let keysOfUnsetValuesKey: string;
  export let labelColorKey: string;
  export let labelNumberKey: string;
  export let linkCountKey: string;
  export let localizedLabelKey: string;
  export let localizedNameKey: string;
  export let localizedTypeDescriptionKey: string;
  export let nameKey: string;
  export let parentDirectoryURLKey: string;
  export let pathKey: string;
  export let preferredIOBlockSizeKey: string;
  export let quarantinePropertiesKey: string;
  export let tagNamesKey: string;
  export let thumbnailDictionaryKey: string;
  export let thumbnailKey: string;
  export let totalFileAllocatedSizeKey: string;
  export let totalFileSizeKey: string;
  export let typeIdentifierKey: string;
  export let ubiquitousItemContainerDisplayNameKey: string;
  export let ubiquitousItemDownloadRequestedKey: string;
  export let ubiquitousItemDownloadingErrorKey: string;
  export let ubiquitousItemDownloadingStatusKey: string;
  export let ubiquitousItemHasUnresolvedConflictsKey: string;
  export let ubiquitousItemIsDownloadingKey: string;
  export let ubiquitousItemIsSharedKey: string;
  export let ubiquitousItemIsUploadedKey: string;
  export let ubiquitousItemIsUploadingKey: string;
  export let ubiquitousItemUploadingErrorKey: string;
  export let ubiquitousSharedItemCurrentUserPermissionsKey: string;
  export let ubiquitousSharedItemCurrentUserRoleKey: string;
  export let ubiquitousSharedItemMostRecentEditorNameComponentsKey: string;
  export let ubiquitousSharedItemOwnerNameComponentsKey: string;
  export let volumeAvailableCapacityForImportantUsageKey: string;
  export let volumeAvailableCapacityForOpportunisticUsageKey: string;
  export let volumeAvailableCapacityKey: string;
  export let volumeCreationDateKey: string;
  export let volumeIdentifierKey: string;
  export let volumeIsAutomountedKey: string;
  export let volumeIsBrowsableKey: string;
  export let volumeIsEjectableKey: string;
  export let volumeIsEncryptedKey: string;
  export let volumeIsInternalKey: string;
  export let volumeIsJournalingKey: string;
  export let volumeIsLocalKey: string;
  export let volumeIsReadOnlyKey: string;
  export let volumeIsRemovableKey: string;
  export let volumeIsRootFileSystemKey: string;
  export let volumeLocalizedFormatDescriptionKey: string;
  export let volumeLocalizedNameKey: string;
  export let volumeMaximumFileSizeKey: string;
  export let volumeNameKey: string;
  export let volumeResourceCountKey: string;
  export let volumeSupportsAccessPermissionsKey: string;
  export let volumeSupportsAdvisoryFileLockingKey: string;
  export let volumeSupportsCasePreservedNamesKey: string;
  export let volumeSupportsCaseSensitiveNamesKey: string;
  export let volumeSupportsCompressionKey: string;
  export let volumeSupportsExclusiveRenamingKey: string;
  export let volumeSupportsExtendedSecurityKey: string;
  export let volumeSupportsFileCloningKey: string;
  export let volumeSupportsHardLinksKey: string;
  export let volumeSupportsImmutableFilesKey: string;
  export let volumeSupportsJournalingKey: string;
  export let volumeSupportsPersistentIDsKey: string;
  export let volumeSupportsRenamingKey: string;
  export let volumeSupportsRootDirectoryDatesKey: string;
  export let volumeSupportsSparseFilesKey: string;
  export let volumeSupportsSwapRenamingKey: string;
  export let volumeSupportsSymbolicLinksKey: string;
  export let volumeSupportsVolumeSizesKey: string;
  export let volumeSupportsZeroRunsKey: string;
  export let volumeTotalCapacityKey: string;
  export let volumeURLForRemountingKey: string;
  export let volumeURLKey: string;
  export let volumeUUIDStringKey: string;
}

namespace URLSession {
  export enum AuthChallengeDisposition {
    UseCredential = 0,
    PerformDefaultHandling = 1,
    CancelAuthenticationChallenge = 2,
    RejectProtectionSpace = 3
  }

  global['URLSession']['AuthChallengeDisposition'] = AuthChallengeDisposition;

  export enum ResponseDisposition {
    Cancel = 0,
    Allow = 1,
    BecomeDownload = 2,
    BecomeStream = 3
  }

  global['URLSession']['ResponseDisposition'] = ResponseDisposition;

}

namespace URLSessionTask {
  export enum State {
    Running = 0,
    Suspended = 1,
    Canceling = 2,
    Completed = 3
  }

  global['URLSessionTask']['State'] = State;

  export let defaultPriority: number;
  export let highPriority: number;
  export let lowPriority: number;
}

namespace URLSessionTaskMetrics {
  export enum ResourceFetchType {
    Unknown = 0,
    NetworkLoad = 1,
    ServerPush = 2,
    LocalCache = 3
  }

  global['URLSessionTaskMetrics']['ResourceFetchType'] = ResourceFetchType;

}

namespace URLSessionWebSocketTask {
  export enum CloseCode {
    Invalid = 0,
    NormalClosure = 1000,
    GoingAway = 1001,
    ProtocolError = 1002,
    UnsupportedData = 1003,
    NoStatusReceived = 1005,
    AbnormalClosure = 1006,
    InvalidFramePayloadData = 1007,
    PolicyViolation = 1008,
    MessageTooBig = 1009,
    MandatoryExtensionMissing = 1010,
    InternalServerError = 1011,
    TLSHandshakeFailure = 1015
  }

  global['URLSessionWebSocketTask']['CloseCode'] = CloseCode;

}

namespace URLThumbnailDictionaryItem {
  export let NSThumbnail1024x1024SizeKey: string;
}

namespace URLUbiquitousItemDownloadingStatus {
  export let current: string;
  export let downloaded: string;
  export let notDownloaded: string;
}

namespace URLUbiquitousSharedItemPermissions {
  export let readOnly: string;
  export let readWrite: string;
}

namespace URLUbiquitousSharedItemRole {
  export let owner: string;
  export let participant: string;
}

namespace UserDefaults {
  export let argumentDomain: string;
  export let globalDomain: string;
  export let registrationDomain: string;
  export let completedInitialCloudSyncNotification: string;
  export let didChangeCloudAccountsNotification: string;
  export let noCloudAccountNotification: string;
  export let didChangeNotification: string;
  export let sizeLimitExceededNotification: string;
}

namespace XMLDTDNode {
  export enum DTDKind {
    EntityGeneralKind = 1,
    EntityParsedKind = 2,
    EntityUnparsedKind = 3,
    EntityParameterKind = 4,
    EntityPredefined = 5,
    AttributeCDATAKind = 6,
    AttributeIDKind = 7,
    AttributeIDRefKind = 8,
    AttributeIDRefsKind = 9,
    AttributeEntityKind = 10,
    AttributeEntitiesKind = 11,
    AttributeNMTokenKind = 12,
    AttributeNMTokensKind = 13,
    AttributeEnumerationKind = 14,
    AttributeNotationKind = 15,
    ElementDeclarationUndefinedKind = 16,
    ElementDeclarationEmptyKind = 17,
    ElementDeclarationAnyKind = 18,
    ElementDeclarationMixedKind = 19,
    ElementDeclarationElementKind = 20
  }

  global['XMLDTDNode']['DTDKind'] = DTDKind;

}

namespace XMLDocument {
  export enum ContentKind {
    XMLKind = 0,
    XHTMLKind = 1,
    HTMLKind = 2,
    TextKind = 3
  }

  global['XMLDocument']['ContentKind'] = ContentKind;

}

namespace XMLNode {
  export enum Kind {
    InvalidKind = 0,
    DocumentKind = 1,
    ElementKind = 2,
    AttributeKind = 3,
    NamespaceKind = 4,
    ProcessingInstructionKind = 5,
    CommentKind = 6,
    TextKind = 7,
    DTDKind = 8,
    EntityDeclarationKind = 9,
    AttributeDeclarationKind = 10,
    ElementDeclarationKind = 11,
    NotationDeclarationKind = 12
  }

  global['XMLNode']['Kind'] = Kind;

  export enum Options {
    NodeOptionsNone = 0,
    NodeIsCDATA = 1,
    NodeExpandEmptyElement = 2,
    NodeCompactEmptyElement = 4,
    NodeUseSingleQuotes = 8,
    NodeUseDoubleQuotes = 16,
    NodeNeverEscapeContents = 32,
    DocumentTidyHTML = 512,
    DocumentTidyXML = 1024,
    DocumentValidate = 8192,
    NodeLoadExternalEntitiesAlways = 16384,
    NodeLoadExternalEntitiesSameOriginOnly = 32768,
    NodeLoadExternalEntitiesNever = 524288,
    DocumentXInclude = 65536,
    NodePrettyPrint = 131072,
    DocumentIncludeContentTypeDeclaration = 262144,
    NodePreserveNamespaceOrder = 1048576,
    NodePreserveAttributeOrder = 2097152,
    NodePreserveEntities = 4194304,
    NodePreservePrefixes = 8388608,
    NodePreserveCDATA = 16777216,
    NodePreserveWhitespace = 33554432,
    NodePreserveDTD = 67108864,
    NodePreserveCharacterReferences = 134217728,
    NodePromoteSignificantWhitespace = 268435456,
    NodePreserveEmptyElements = 6,
    NodePreserveQuotes = 24,
    NodePreserveAll = 4293918750
  }

  global['XMLNode']['Options'] = Options;

}

namespace XMLParser {
  export enum ErrorCode {
    InternalError = 1,
    OutOfMemoryError = 2,
    DocumentStartError = 3,
    EmptyDocumentError = 4,
    PrematureDocumentEndError = 5,
    InvalidHexCharacterRefError = 6,
    InvalidDecimalCharacterRefError = 7,
    InvalidCharacterRefError = 8,
    InvalidCharacterError = 9,
    CharacterRefAtEOFError = 10,
    CharacterRefInPrologError = 11,
    CharacterRefInEpilogError = 12,
    CharacterRefInDTDError = 13,
    EntityRefAtEOFError = 14,
    EntityRefInPrologError = 15,
    EntityRefInEpilogError = 16,
    EntityRefInDTDError = 17,
    ParsedEntityRefAtEOFError = 18,
    ParsedEntityRefInPrologError = 19,
    ParsedEntityRefInEpilogError = 20,
    ParsedEntityRefInInternalSubsetError = 21,
    EntityReferenceWithoutNameError = 22,
    EntityReferenceMissingSemiError = 23,
    ParsedEntityRefNoNameError = 24,
    ParsedEntityRefMissingSemiError = 25,
    UndeclaredEntityError = 26,
    UnparsedEntityError = 28,
    EntityIsExternalError = 29,
    EntityIsParameterError = 30,
    UnknownEncodingError = 31,
    EncodingNotSupportedError = 32,
    StringNotStartedError = 33,
    StringNotClosedError = 34,
    NamespaceDeclarationError = 35,
    EntityNotStartedError = 36,
    EntityNotFinishedError = 37,
    LessThanSymbolInAttributeError = 38,
    AttributeNotStartedError = 39,
    AttributeNotFinishedError = 40,
    AttributeHasNoValueError = 41,
    AttributeRedefinedError = 42,
    LiteralNotStartedError = 43,
    LiteralNotFinishedError = 44,
    CommentNotFinishedError = 45,
    ProcessingInstructionNotStartedError = 46,
    ProcessingInstructionNotFinishedError = 47,
    NotationNotStartedError = 48,
    NotationNotFinishedError = 49,
    AttributeListNotStartedError = 50,
    AttributeListNotFinishedError = 51,
    MixedContentDeclNotStartedError = 52,
    MixedContentDeclNotFinishedError = 53,
    ElementContentDeclNotStartedError = 54,
    ElementContentDeclNotFinishedError = 55,
    XMLDeclNotStartedError = 56,
    XMLDeclNotFinishedError = 57,
    ConditionalSectionNotStartedError = 58,
    ConditionalSectionNotFinishedError = 59,
    ExternalSubsetNotFinishedError = 60,
    DOCTYPEDeclNotFinishedError = 61,
    MisplacedCDATAEndStringError = 62,
    CDATANotFinishedError = 63,
    MisplacedXMLDeclarationError = 64,
    SpaceRequiredError = 65,
    SeparatorRequiredError = 66,
    NMTOKENRequiredError = 67,
    NAMERequiredError = 68,
    PCDATARequiredError = 69,
    URIRequiredError = 70,
    PublicIdentifierRequiredError = 71,
    LTRequiredError = 72,
    GTRequiredError = 73,
    LTSlashRequiredError = 74,
    EqualExpectedError = 75,
    TagNameMismatchError = 76,
    UnfinishedTagError = 77,
    StandaloneValueError = 78,
    InvalidEncodingNameError = 79,
    CommentContainsDoubleHyphenError = 80,
    InvalidEncodingError = 81,
    ExternalStandaloneEntityError = 82,
    InvalidConditionalSectionError = 83,
    EntityValueRequiredError = 84,
    NotWellBalancedError = 85,
    ExtraContentError = 86,
    InvalidCharacterInEntityError = 87,
    ParsedEntityRefInInternalError = 88,
    EntityRefLoopError = 89,
    EntityBoundaryError = 90,
    InvalidURIError = 91,
    URIFragmentError = 92,
    NoDTDError = 94,
    DelegateAbortedParseError = 512
  }

  global['XMLParser']['ErrorCode'] = ErrorCode;

  export enum ExternalEntityResolvingPolicy {
    ResolveExternalEntitiesNever = 0,
    ResolveExternalEntitiesNoNetwork = 1,
    ResolveExternalEntitiesSameOriginOnly = 2,
    ResolveExternalEntitiesAlways = 3
  }

  global['XMLParser']['ExternalEntityResolvingPolicy'] = ExternalEntityResolvingPolicy;

  export let errorDomain: string;
}

export enum AVAssetReferenceRestrictions {
  forbidRemoteReferenceToLocal,
  forbidLocalReferenceToRemote,
  forbidCrossSiteReference,
  forbidLocalReferenceToLocal,
  forbidAll,
  defaultPolicy,
}

global['AVAssetReferenceRestrictions'] = AVAssetReferenceRestrictions;

export enum AVAudioPlayerNodeBufferOptions {
  byteSwapped,
  scalarCount,
  loops,
  interrupts,
  interruptsAtLoop,
}

global['AVAudioPlayerNodeBufferOptions'] = AVAudioPlayerNodeBufferOptions;

export enum AVAudioSpatializationFormats {
  monoAndStereo,
  multichannel,
  monoStereoAndMultichannel,
}

global['AVAudioSpatializationFormats'] = AVAudioSpatializationFormats;

export enum AVMovieWritingOptions {
  errorDomain,
  unknown,
  outOfMemory,
  sessionNotRunning,
  deviceAlreadyUsedByAnotherSession,
  noDataCaptured,
  sessionConfigurationChanged,
  diskFull,
  deviceWasDisconnected,
  mediaChanged,
  maximumDurationReached,
  maximumFileSizeReached,
  mediaDiscontinuity,
  maximumNumberOfSamplesForFileFormatReached,
  deviceNotConnected,
  deviceInUseByAnotherApplication,
  deviceLockedForConfigurationByAnotherProcess,
  exportFailed,
  decodeFailed,
  invalidSourceMedia,
  fileAlreadyExists,
  compositionTrackSegmentsNotContiguous,
  invalidCompositionTrackSegmentDuration,
  invalidCompositionTrackSegmentSourceStartTime,
  invalidCompositionTrackSegmentSourceDuration,
  fileFormatNotRecognized,
  fileFailedToParse,
  maximumStillImageCaptureRequestsExceeded,
  contentIsProtected,
  noImageAtTime,
  decoderNotFound,
  encoderNotFound,
  contentIsNotAuthorized,
  applicationIsNotAuthorized,
  operationNotSupportedForAsset,
  decoderTemporarilyUnavailable,
  encoderTemporarilyUnavailable,
  invalidVideoComposition,
  referenceForbiddenByReferencePolicy,
  invalidOutputURLPathExtension,
  screenCaptureFailed,
  displayWasDisabled,
  torchLevelUnavailable,
  incompatibleAsset,
  failedToLoadMediaData,
  serverIncorrectlyConfigured,
  applicationIsNotAuthorizedToUseDevice,
  failedToParse,
  fileTypeDoesNotSupportSampleReferences,
  undecodableMediaData,
  airPlayControllerRequiresInternet,
  airPlayReceiverRequiresInternet,
  videoCompositorFailed,
  createContentKeyRequestFailed,
  unsupportedOutputSettings,
  operationNotAllowed,
  contentIsUnavailable,
  formatUnsupported,
  malformedDepth,
  contentNotUpdated,
  noLongerPlayable,
  noCompatibleAlternatesForExternalDisplay,
  noSourceTrack,
  externalPlaybackNotSupportedForAsset,
  operationNotSupportedForPreset,
  incorrectlyConfigured,
  segmentStartedWithNonSyncSample,
  rosettaNotInstalled,
  addMovieHeaderToDestination,
  truncateDestinationToMovieHeaderOnly,
}

global['AVMovieWritingOptions'] = AVMovieWritingOptions;

export enum AVMusicSequenceLoadOptions {
  smfChannelsToTracks,
  scalarCount,
}

global['AVMusicSequenceLoadOptions'] = AVMusicSequenceLoadOptions;

export enum AlignmentOptions {
  alignMinXInward,
  alignMinYInward,
  alignMaxXInward,
  alignMaxYInward,
  alignWidthInward,
  alignHeightInward,
  alignMinXOutward,
  alignMinYOutward,
  alignMaxXOutward,
  alignMaxYOutward,
  alignWidthOutward,
  alignHeightOutward,
  alignMinXNearest,
  alignMinYNearest,
  alignMaxXNearest,
  alignMaxYNearest,
  alignWidthNearest,
  alignHeightNearest,
  alignRectFlipped,
  alignAllEdgesInward,
  alignAllEdgesOutward,
  alignAllEdgesNearest,
}

global['AlignmentOptions'] = AlignmentOptions;

export enum AnyObject {
  byteSwapped,
  scalarCount,
  assureMemoryNow,
  alwaysCopyData,
  dontOptimizeDepth,
  permitEmptyReference,
}

global['AnyObject'] = AnyObject;

export enum CAAutoresizingMask {
  layerMinXMargin,
  layerWidthSizable,
  layerMaxXMargin,
  layerMinYMargin,
  layerHeightSizable,
  layerMaxYMargin,
}

global['CAAutoresizingMask'] = CAAutoresizingMask;

export enum CACornerMask {
  layerMinXMinYCorner,
  layerMaxXMinYCorner,
  layerMinXMaxYCorner,
  layerMaxXMaxYCorner,
}

global['CACornerMask'] = CACornerMask;

export enum CAEdgeAntialiasingMask {
  layerLeftEdge,
  layerRightEdge,
  layerBottomEdge,
  layerTopEdge,
}

global['CAEdgeAntialiasingMask'] = CAEdgeAntialiasingMask;

export enum CFCalendarUnit {
  magnitude,
  byteSwapped,
  scalarCount,
  era,
  year,
  month,
  day,
  hour,
  minute,
  second,
  week,
  weekday,
  weekdayOrdinal,
  quarter,
  weekOfMonth,
  weekOfYear,
  yearForWeekOfYear,
}

global['CFCalendarUnit'] = CFCalendarUnit;

export enum CFDataSearchFlags {
  backwards,
  anchored,
}

global['CFDataSearchFlags'] = CFDataSearchFlags;

export enum CFFileSecurityClearOptions {
  magnitude,
  byteSwapped,
  scalarCount,
  owner,
  group,
  mode,
  ownerUUID,
  groupUUID,
  accessControlList,
}

global['CFFileSecurityClearOptions'] = CFFileSecurityClearOptions;

export enum CFGregorianUnitFlags {
  unitsYears,
  unitsMonths,
  unitsDays,
  unitsHours,
  unitsMinutes,
  unitsSeconds,
  allUnits,
}

global['CFGregorianUnitFlags'] = CFGregorianUnitFlags;

export enum CFISO8601DateFormatOptions {
  byteSwapped,
  scalarCount,
  withYear,
  withMonth,
  withWeekOfYear,
  withDay,
  withTime,
  withTimeZone,
  withSpaceBetweenDateAndTime,
  withDashSeparatorInDate,
  withColonSeparatorInTime,
  withColonSeparatorInTimeZone,
  withFractionalSeconds,
  withFullDate,
  withFullTime,
  withInternetDateTime,
}

global['CFISO8601DateFormatOptions'] = CFISO8601DateFormatOptions;

export enum CFNumberFormatterOptionFlags {
  magnitude,
  byteSwapped,
  scalarCount,
  parseIntegersOnly,
}

global['CFNumberFormatterOptionFlags'] = CFNumberFormatterOptionFlags;

export enum CFPropertyListMutabilityOptions {
  byteSwapped,
  scalarCount,
  mutableContainers,
  mutableContainersAndLeaves,
}

global['CFPropertyListMutabilityOptions'] = CFPropertyListMutabilityOptions;

export enum CFRunLoopActivity {
  entry,
  beforeTimers,
  beforeSources,
  beforeWaiting,
  afterWaiting,
  exit,
  allActivities,
}

global['CFRunLoopActivity'] = CFRunLoopActivity;

export enum CFSocketCallBackType {
  readCallBack,
  acceptCallBack,
  dataCallBack,
  connectCallBack,
  writeCallBack,
}

global['CFSocketCallBackType'] = CFSocketCallBackType;

export enum CFStreamEventType {
  magnitude,
  byteSwapped,
  scalarCount,
  openCompleted,
  hasBytesAvailable,
  canAcceptBytes,
  errorOccurred,
  endEncountered,
}

global['CFStreamEventType'] = CFStreamEventType;

export enum CFStringCompareFlags {
  compareCaseInsensitive,
  compareBackwards,
  compareAnchored,
  compareNonliteral,
  compareLocalized,
  compareNumerically,
  compareDiacriticInsensitive,
  compareWidthInsensitive,
  compareForcedOrdering,
}

global['CFStringCompareFlags'] = CFStringCompareFlags;

export enum CFStringTokenizerTokenType {
  byteSwapped,
  scalarCount,
  normal,
  hasSubTokensMask,
  hasDerivedSubTokensMask,
  hasHasNumbersMask,
  hasNonLettersMask,
  isCJWordMask,
}

global['CFStringTokenizerTokenType'] = CFStringTokenizerTokenType;

export enum CFURLBookmarkCreationOptions {
  byteSwapped,
  scalarCount,
  minimalBookmarkMask,
  suitableForBookmarkFile,
  withSecurityScope,
  securityScopeAllowOnlyReadAccess,
}

global['CFURLBookmarkCreationOptions'] = CFURLBookmarkCreationOptions;

export enum CFURLBookmarkResolutionOptions {
  byteSwapped,
  scalarCount,
  cfurlBookmarkResolutionWithoutUIMask,
  cfurlBookmarkResolutionWithoutMountingMask,
  cfurlBookmarkResolutionWithSecurityScope,
  cfBookmarkResolutionWithoutUIMask,
  cfBookmarkResolutionWithoutMountingMask,
}

global['CFURLBookmarkResolutionOptions'] = CFURLBookmarkResolutionOptions;

export enum CFURLEnumeratorOptions {
  descendRecursively,
  skipInvisibles,
  generateFileReferenceURLs,
  skipPackageContents,
  includeDirectoriesPreOrder,
  includeDirectoriesPostOrder,
  generateRelativePathURLs,
}

global['CFURLEnumeratorOptions'] = CFURLEnumeratorOptions;

export enum CFXMLParserOptions {
  validateDocument,
  skipMetaData,
  replacePhysicalEntities,
  skipWhitespace,
  resolveExternalEntities,
  addImpliedAttributes,
  allOptions,
}

global['CFXMLParserOptions'] = CFXMLParserOptions;

export enum CFXMLParserStatusCode {
  statusParseNotBegun,
  statusParseInProgress,
  errorUnexpectedEOF,
  errorUnknownEncoding,
  errorEncodingConversionFailure,
  errorMalformedProcessingInstruction,
  errorMalformedDTD,
  errorMalformedName,
  errorMalformedCDSect,
  errorMalformedCloseTag,
  errorMalformedStartTag,
  errorMalformedDocument,
  errorElementlessDocument,
  errorMalformedComment,
  errorMalformedCharacterReference,
  errorMalformedParsedCharacterData,
  errorNoData,
}

global['CFXMLParserStatusCode'] = CFXMLParserStatusCode;

export enum CGBitmapInfo {
  alphaInfoMask,
  floatInfoMask,
  floatComponents,
  byteOrderMask,
  byteOrder16Little,
  byteOrder32Little,
  byteOrder16Big,
  byteOrder32Big,
}

global['CGBitmapInfo'] = CGBitmapInfo;

export enum CGCaptureOptions {
  byteSwapped,
  scalarCount,
  noFill,
}

global['CGCaptureOptions'] = CGCaptureOptions;

export enum CGConfigureOption {
  byteSwapped,
  scalarCount,
  forAppOnly,
  forSession,
  permanently,
}

global['CGConfigureOption'] = CGConfigureOption;

export enum CGDisplayChangeSummaryFlags {
  byteSwapped,
  scalarCount,
  beginConfigurationFlag,
  movedFlag,
  setMainFlag,
  setModeFlag,
  addFlag,
  removeFlag,
  enabledFlag,
  disabledFlag,
  mirrorFlag,
  unMirrorFlag,
  desktopShapeChangedFlag,
}

global['CGDisplayChangeSummaryFlags'] = CGDisplayChangeSummaryFlags;

export enum CGEventFilterMask {
  byteSwapped,
  scalarCount,
  permitLocalMouseEvents,
  permitLocalKeyboardEvents,
  permitSystemDefinedEvents,
}

global['CGEventFilterMask'] = CGEventFilterMask;

export enum CGEventFlags {
  maskAlphaShift,
  maskShift,
  maskControl,
  maskAlternate,
  maskCommand,
  maskHelp,
  maskSecondaryFn,
  maskNumericPad,
  maskNonCoalesced,
}

global['CGEventFlags'] = CGEventFlags;

export enum CGGradientDrawingOptions {
  byteSwapped,
  scalarCount,
  drawsBeforeStartLocation,
  drawsAfterEndLocation,
}

global['CGGradientDrawingOptions'] = CGGradientDrawingOptions;

export enum CGPDFAccessPermissions {
  byteSwapped,
  scalarCount,
  allowsLowQualityPrinting,
  allowsHighQualityPrinting,
  allowsDocumentChanges,
  allowsDocumentAssembly,
  allowsContentCopying,
  allowsContentAccessibility,
  allowsCommenting,
  allowsFormFieldEntry,
}

global['CGPDFAccessPermissions'] = CGPDFAccessPermissions;

export enum CGScreenUpdateOperation {
  byteSwapped,
  scalarCount,
  refresh,
  move,
  reducedDirtyRectangleCount,
}

global['CGScreenUpdateOperation'] = CGScreenUpdateOperation;

export enum CGWindowImageOption {
  byteSwapped,
  scalarCount,
  boundsIgnoreFraming,
  shouldBeOpaque,
  onlyShadows,
  bestResolution,
  nominalResolution,
}

global['CGWindowImageOption'] = CGWindowImageOption;

export enum CGWindowListOption {
  magnitude,
  byteSwapped,
  scalarCount,
  optionAll,
  optionOnScreenOnly,
  optionOnScreenAboveWindow,
  optionOnScreenBelowWindow,
  optionIncludingWindow,
  excludeDesktopElements,
}

global['CGWindowListOption'] = CGWindowListOption;

export enum CKContainer_Application_Permissions {
  userDiscoverability,
}

global['CKContainer_Application_Permissions'] = CKContainer_Application_Permissions;

export enum CMSampleBuffer {
  audioBufferListAssure16ByteAlignment,
}

global['CMSampleBuffer'] = CMSampleBuffer;

export enum CMTimeFlags {
  magnitude,
  byteSwapped,
  scalarCount,
  valid,
  hasBeenRounded,
  positiveInfinity,
  negativeInfinity,
  indefinite,
  impliedValueFlagsMask,
}

global['CMTimeFlags'] = CMTimeFlags;

export enum Character {
  request,
  session,
  ascii,
  nextstep,
  japaneseEUC,
  utf8,
  isoLatin1,
  symbol,
  nonLossyASCII,
  shiftJIS,
  isoLatin2,
  unicode,
  windowsCP1251,
  windowsCP1252,
  windowsCP1253,
  windowsCP1254,
  windowsCP1250,
  iso2022JP,
  macOSRoman,
  utf16,
  utf16BigEndian,
  utf16LittleEndian,
  utf32,
  utf32BigEndian,
  utf32LittleEndian,
}

global['Character'] = Character;

export enum Data {
  video,
  audio,
  muxed,
  text,
  closedCaption,
  subtitle,
  timeCode,
  metadata,
  linearPCM,
  ac3,
  iec60958AC3,
  appleIMA4,
  mpeg4AAC,
  mpeg4CELP,
  mpeg4HVXC,
  mpeg4TwinVQ,
  mace3,
  mace6,
  uLaw,
  aLaw,
  qDesign,
  qDesign2,
  qualcomm,
  mpegLayer1,
  mpegLayer2,
  mpegLayer3,
  midiStream,
  parameterValueStream,
  appleLossless,
  mpeg4AAC_HE,
  mpeg4AAC_LD,
  mpeg4AAC_ELD,
  mpeg4AAC_ELD_SBR,
  mpeg4AAC_ELD_V2,
  mpeg4AAC_HE_V2,
  mpeg4AAC_Spatial,
  mpegD_USAC,
  amr,
  amr_WB,
  audible,
  iLBC,
  dviIntelIMA,
  microsoftGSM,
  aes3,
  enhancedAC3,
  flac,
  opus,
  aacLCProtected,
  aacAudibleProtected,
  pixelFormat_32ARGB,
  pixelFormat_32BGRA,
  pixelFormat_24RGB,
  pixelFormat_16BE555,
  pixelFormat_16BE565,
  pixelFormat_16LE555,
  pixelFormat_16LE565,
  pixelFormat_16LE5551,
  pixelFormat_422YpCbCr8,
  pixelFormat_422YpCbCr8_yuvs,
  pixelFormat_444YpCbCr8,
  pixelFormat_4444YpCbCrA8,
  pixelFormat_422YpCbCr16,
  pixelFormat_422YpCbCr10,
  pixelFormat_444YpCbCr10,
  pixelFormat_8IndexedGray_WhiteIsZero,
  animation,
  cinepak,
  jpeg,
  jpeg_OpenDML,
  sorensonVideo,
  sorensonVideo3,
  h263,
  h264,
  hevc,
  hevcWithAlpha,
  mpeg4Video,
  mpeg2Video,
  mpeg1Video,
  dvcNTSC,
  dvcPAL,
  dvcProPAL,
  dvcPro50NTSC,
  dvcPro50PAL,
  dvcPROHD720p60,
  dvcPROHD720p50,
  dvcPROHD1080i60,
  dvcPROHD1080i50,
  dvcPROHD1080p30,
  dvcPROHD1080p25,
  proRes4444XQ,
  proRes4444,
  proRes422HQ,
  proRes422,
  proRes422LT,
  proRes422Proxy,
  proResRAW,
  proResRAWHQ,
  mpeg1System,
  mpeg2Transport,
  mpeg2Program,
  dv,
  cea608,
  cea708,
  atsc,
  qt,
  mobile3GPP,
  webVTT,
  timeCode32,
  timeCode64,
  counter32,
  counter64,
  icy,
  id3,
  boxed,
  emsg,
  streamBasicDescription,
  magicCookie,
  channelLayout,
  extensions,
  all,
  startIndex,
  endIndex,
}

global['Data'] = Data;

export enum Int {
  byteSwapped,
  scalarCount,
}

global['Int'] = Int;

export enum NSBinarySearchingOptions {
  firstEqual,
  lastEqual,
  insertionIndex,
}

global['NSBinarySearchingOptions'] = NSBinarySearchingOptions;

export enum NSDirectionalRectEdge {
  top,
  leading,
  bottom,
  trailing,
  all,
}

global['NSDirectionalRectEdge'] = NSDirectionalRectEdge;

export enum NSDragOperation {
  copy,
  link,
  generic,
  private,
  move,
  delete,
  every,
  all_Obsolete,
  all,
}

global['NSDragOperation'] = NSDragOperation;

export enum NSDraggingItemEnumerationOptions {
  concurrent,
  clearNonenumeratedImages,
}

global['NSDraggingItemEnumerationOptions'] = NSDraggingItemEnumerationOptions;

export enum NSEnumerationOptions {
  concurrent,
  reverse,
}

global['NSEnumerationOptions'] = NSEnumerationOptions;

export enum NSFetchRequestResultType {
  managedObjectResultType,
  managedObjectIDResultType,
  dictionaryResultType,
  countResultType,
}

global['NSFetchRequestResultType'] = NSFetchRequestResultType;

export enum NSFontCollectionOptions {
  applicationOnlyMask,
}

global['NSFontCollectionOptions'] = NSFontCollectionOptions;

export enum NSFontTraitMask {
  byteSwapped,
  scalarCount,
  italicFontMask,
  boldFontMask,
  unboldFontMask,
  nonStandardCharacterSetFontMask,
  narrowFontMask,
  expandedFontMask,
  condensedFontMask,
  smallCapsFontMask,
  posterFontMask,
  compressedFontMask,
  fixedPitchFontMask,
  unitalicFontMask,
}

global['NSFontTraitMask'] = NSFontTraitMask;

export enum NSItemProviderFileOptions {
  openInPlace,
}

global['NSItemProviderFileOptions'] = NSItemProviderFileOptions;

export enum NSKeyValueObservingOptions {
  new,
  old,
  initial,
  prior,
}

global['NSKeyValueObservingOptions'] = NSKeyValueObservingOptions;

export enum NSOrderedCollectionDifferenceCalculationOptions {
  magnitude,
  timeInterval,
  hashValue,
  omitInsertedObjects,
  omitRemovedObjects,
  inferMoves,
}

global['NSOrderedCollectionDifferenceCalculationOptions'] = NSOrderedCollectionDifferenceCalculationOptions;

export enum NSPersistentCloudKitContainerSchemaInitializationOptions {
  dryRun,
  printSchema,
}

global['NSPersistentCloudKitContainerSchemaInitializationOptions'] = NSPersistentCloudKitContainerSchemaInitializationOptions;

export enum NSSnapshotEventType {
  undoInsertion,
  undoDeletion,
  undoUpdate,
  rollback,
  refresh,
  mergePolicy,
}

global['NSSnapshotEventType'] = NSSnapshotEventType;

export enum NSSortOptions {
  magnitude,
  byteSwapped,
  scalarCount,
  concurrent,
  stable,
}

global['NSSortOptions'] = NSSortOptions;

export enum NSSpringLoadingOptions {
  disabled,
  enabled,
  continuousActivation,
  noHover,
}

global['NSSpringLoadingOptions'] = NSSpringLoadingOptions;

export enum NSTextStorageEditActions {
  editedAttributes,
  editedCharacters,
}

global['NSTextStorageEditActions'] = NSTextStorageEditActions;

export enum NSTypesetterControlCharacterAction {
  magnitude,
  byteSwapped,
  scalarCount,
  zeroAdvancementAction,
  whitespaceAction,
  horizontalTabAction,
  lineBreakAction,
  paragraphBreakAction,
  containerBreakAction,
}

global['NSTypesetterControlCharacterAction'] = NSTypesetterControlCharacterAction;

export enum NSUnderlineStyle {
  single,
  thick,
  double,
  patternDot,
  patternDash,
  patternDashDot,
  patternDashDotDot,
  byWord,
}

global['NSUnderlineStyle'] = NSUnderlineStyle;

export enum UInt {
  magnitude,
  byteSwapped,
  scalarCount,
  hashValue,
  boolValue,
  ptr,
  bitWidth,
  leadingZeroBitCount,
  trailingZeroBitCount,
  nonzeroBitCount,
  count,
  startIndex,
  endIndex,
  indices,
  words,
}

global['UInt'] = UInt;

export enum UInt8 {
  regions,
  startIndex,
  endIndex,
  indices,
  hashValue,
  autoupdatingCurrent,
  current,
}

global['UInt8'] = UInt8;

export enum AVAssetReferenceRestrictions {
  ForbidNone = 0,
  ForbidRemoteReferenceToLocal = 1,
  ForbidLocalReferenceToRemote = 2,
  ForbidCrossSiteReference = 4,
  ForbidLocalReferenceToLocal = 8,
  ForbidAll = 65535,
  DefaultPolicy = 2
}

global['AVAssetReferenceRestrictions'] = AVAssetReferenceRestrictions;

export enum AVAudio3DMixingPointSourceInHeadMode {
  Mono = 0,
  Bypass = 1
}

global['AVAudio3DMixingPointSourceInHeadMode'] = AVAudio3DMixingPointSourceInHeadMode;

export enum AVAudio3DMixingRenderingAlgorithm {
  EqualPowerPanning = 0,
  SphericalHead = 1,
  HRTF = 2,
  SoundField = 3,
  StereoPassThrough = 5,
  HRTFHQ = 6,
  Auto = 7
}

global['AVAudio3DMixingRenderingAlgorithm'] = AVAudio3DMixingRenderingAlgorithm;

export enum AVAudio3DMixingSourceMode {
  SpatializeIfMono = 0,
  Bypass = 1,
  PointSource = 2,
  AmbienceBed = 3
}

global['AVAudio3DMixingSourceMode'] = AVAudio3DMixingSourceMode;

export enum AVAudioCommonFormat {
  OtherFormat = 0,
  PCMFormatFloat32 = 1,
  PCMFormatFloat64 = 2,
  PCMFormatInt16 = 3,
  PCMFormatInt32 = 4
}

global['AVAudioCommonFormat'] = AVAudioCommonFormat;

export enum AVAudioConverterInputStatus {
  HaveData = 0,
  NoDataNow = 1,
  EndOfStream = 2
}

global['AVAudioConverterInputStatus'] = AVAudioConverterInputStatus;

export enum AVAudioConverterOutputStatus {
  HaveData = 0,
  InputRanDry = 1,
  EndOfStream = 2,
  Error = 3
}

global['AVAudioConverterOutputStatus'] = AVAudioConverterOutputStatus;

export enum AVAudioConverterPrimeMethod {
  Pre = 0,
  Normal = 1,
  None = 2
}

global['AVAudioConverterPrimeMethod'] = AVAudioConverterPrimeMethod;

export enum AVAudioEngineManualRenderingError {
  InvalidMode = -80800,
  Initialized = -80801,
  NotRunning = -80802
}

global['AVAudioEngineManualRenderingError'] = AVAudioEngineManualRenderingError;

export enum AVAudioEngineManualRenderingMode {
  Offline = 0,
  Realtime = 1
}

global['AVAudioEngineManualRenderingMode'] = AVAudioEngineManualRenderingMode;

export enum AVAudioEngineManualRenderingStatus {
  Error = -1,
  Success = 0,
  InsufficientDataFromInputNode = 1,
  CannotDoInCurrentContext = 2
}

global['AVAudioEngineManualRenderingStatus'] = AVAudioEngineManualRenderingStatus;

export enum AVAudioEnvironmentDistanceAttenuationModel {
  Exponential = 1,
  Inverse = 2,
  Linear = 3
}

global['AVAudioEnvironmentDistanceAttenuationModel'] = AVAudioEnvironmentDistanceAttenuationModel;

export enum AVAudioEnvironmentOutputType {
  Auto = 0,
  Headphones = 1,
  BuiltInSpeakers = 2,
  ExternalSpeakers = 3
}

global['AVAudioEnvironmentOutputType'] = AVAudioEnvironmentOutputType;

export enum AVAudioPlayerNodeBufferOptions {
  Loops = 1,
  Interrupts = 2,
  InterruptsAtLoop = 4
}

global['AVAudioPlayerNodeBufferOptions'] = AVAudioPlayerNodeBufferOptions;

export enum AVAudioPlayerNodeCompletionCallbackType {
  DataConsumed = 0,
  DataRendered = 1,
  DataPlayedBack = 2
}

global['AVAudioPlayerNodeCompletionCallbackType'] = AVAudioPlayerNodeCompletionCallbackType;

export enum AVAudioQuality {
  Min = 0,
  Low = 32,
  Medium = 64,
  High = 96,
  Max = 127
}

global['AVAudioQuality'] = AVAudioQuality;

export enum AVAudioSessionActivationOptions {
  None = 0
}

global['AVAudioSessionActivationOptions'] = AVAudioSessionActivationOptions;

export enum AVAudioUnitDistortionPreset {
  DrumsBitBrush = 0,
  DrumsBufferBeats = 1,
  DrumsLoFi = 2,
  MultiBrokenSpeaker = 3,
  MultiCellphoneConcert = 4,
  MultiDecimated1 = 5,
  MultiDecimated2 = 6,
  MultiDecimated3 = 7,
  MultiDecimated4 = 8,
  MultiDistortedFunk = 9,
  MultiDistortedCubed = 10,
  MultiDistortedSquared = 11,
  MultiEcho1 = 12,
  MultiEcho2 = 13,
  MultiEchoTight1 = 14,
  MultiEchoTight2 = 15,
  MultiEverythingIsBroken = 16,
  SpeechAlienChatter = 17,
  SpeechCosmicInterference = 18,
  SpeechGoldenPi = 19,
  SpeechRadioTower = 20,
  SpeechWaves = 21
}

global['AVAudioUnitDistortionPreset'] = AVAudioUnitDistortionPreset;

export enum AVAudioUnitEQFilterType {
  Parametric = 0,
  LowPass = 1,
  HighPass = 2,
  ResonantLowPass = 3,
  ResonantHighPass = 4,
  BandPass = 5,
  BandStop = 6,
  LowShelf = 7,
  HighShelf = 8,
  ResonantLowShelf = 9,
  ResonantHighShelf = 10
}

global['AVAudioUnitEQFilterType'] = AVAudioUnitEQFilterType;

export enum AVAudioUnitReverbPreset {
  SmallRoom = 0,
  MediumRoom = 1,
  LargeRoom = 2,
  MediumHall = 3,
  LargeHall = 4,
  Plate = 5,
  MediumChamber = 6,
  LargeChamber = 7,
  Cathedral = 8,
  LargeRoom2 = 9,
  MediumHall2 = 10,
  MediumHall3 = 11,
  LargeHall2 = 12
}

global['AVAudioUnitReverbPreset'] = AVAudioUnitReverbPreset;

export enum AVAuthorizationStatus {
  NotDetermined = 0,
  Restricted = 1,
  Denied = 2,
  Authorized = 3
}

global['AVAuthorizationStatus'] = AVAuthorizationStatus;

export enum AVCaptureColorSpace {
  sRGB = 0,
  P3_D65 = 1
}

global['AVCaptureColorSpace'] = AVCaptureColorSpace;

export enum AVCaptureVideoOrientation {
  Portrait = 1,
  PortraitUpsideDown = 2,
  LandscapeRight = 3,
  LandscapeLeft = 4
}

global['AVCaptureVideoOrientation'] = AVCaptureVideoOrientation;

export enum AVContentAuthorizationStatus {
  Unknown = 0,
  Completed = 1,
  Cancelled = 2,
  TimedOut = 3,
  Busy = 4,
  NotAvailable = 5,
  NotPossible = 6
}

global['AVContentAuthorizationStatus'] = AVContentAuthorizationStatus;

export enum AVError {
  Unknown = -11800,
  OutOfMemory = -11801,
  SessionNotRunning = -11803,
  DeviceAlreadyUsedByAnotherSession = -11804,
  NoDataCaptured = -11805,
  SessionConfigurationChanged = -11806,
  DiskFull = -11807,
  DeviceWasDisconnected = -11808,
  MediaChanged = -11809,
  MaximumDurationReached = -11810,
  MaximumFileSizeReached = -11811,
  MediaDiscontinuity = -11812,
  MaximumNumberOfSamplesForFileFormatReached = -11813,
  DeviceNotConnected = -11814,
  DeviceInUseByAnotherApplication = -11815,
  DeviceLockedForConfigurationByAnotherProcess = -11817,
  ExportFailed = -11820,
  DecodeFailed = -11821,
  InvalidSourceMedia = -11822,
  FileAlreadyExists = -11823,
  CompositionTrackSegmentsNotContiguous = -11824,
  InvalidCompositionTrackSegmentDuration = -11825,
  InvalidCompositionTrackSegmentSourceStartTime = -11826,
  InvalidCompositionTrackSegmentSourceDuration = -11827,
  FileFormatNotRecognized = -11828,
  FileFailedToParse = -11829,
  MaximumStillImageCaptureRequestsExceeded = -11830,
  ContentIsProtected = -11831,
  NoImageAtTime = -11832,
  DecoderNotFound = -11833,
  EncoderNotFound = -11834,
  ContentIsNotAuthorized = -11835,
  ApplicationIsNotAuthorized = -11836,
  OperationNotSupportedForAsset = -11838,
  DecoderTemporarilyUnavailable = -11839,
  EncoderTemporarilyUnavailable = -11840,
  InvalidVideoComposition = -11841,
  ReferenceForbiddenByReferencePolicy = -11842,
  InvalidOutputURLPathExtension = -11843,
  ScreenCaptureFailed = -11844,
  DisplayWasDisabled = -11845,
  TorchLevelUnavailable = -11846,
  IncompatibleAsset = -11848,
  FailedToLoadMediaData = -11849,
  ServerIncorrectlyConfigured = -11850,
  ApplicationIsNotAuthorizedToUseDevice = -11852,
  FailedToParse = -11853,
  FileTypeDoesNotSupportSampleReferences = -11854,
  UndecodableMediaData = -11855,
  AirPlayControllerRequiresInternet = -11856,
  AirPlayReceiverRequiresInternet = -11857,
  VideoCompositorFailed = -11858,
  CreateContentKeyRequestFailed = -11860,
  UnsupportedOutputSettings = -11861,
  OperationNotAllowed = -11862,
  ContentIsUnavailable = -11863,
  FormatUnsupported = -11864,
  MalformedDepth = -11865,
  ContentNotUpdated = -11866,
  NoLongerPlayable = -11867,
  NoCompatibleAlternatesForExternalDisplay = -11868,
  NoSourceTrack = -11869,
  ExternalPlaybackNotSupportedForAsset = -11870,
  OperationNotSupportedForPreset = -11871,
  SessionHardwareCostOverage = -11872,
  UnsupportedDeviceActiveFormat = -11873
}

global['AVError'] = AVError;

export enum AVKeyValueStatus {
  Unknown = 0,
  Loading = 1,
  Loaded = 2,
  Failed = 3,
  Cancelled = 4
}

global['AVKeyValueStatus'] = AVKeyValueStatus;

export enum AVMovieWritingOptions {
  AddMovieHeaderToDestination = 0,
  TruncateDestinationToMovieHeaderOnly = 1
}

global['AVMovieWritingOptions'] = AVMovieWritingOptions;

export enum AVMusicSequenceLoadOptions {
  SMF_PreserveTracks = 0,
  SMF_ChannelsToTracks = 1
}

global['AVMusicSequenceLoadOptions'] = AVMusicSequenceLoadOptions;

export enum AVMusicTrackLoopCount {
  Forever = -1
}

global['AVMusicTrackLoopCount'] = AVMusicTrackLoopCount;

export enum AVQueuedSampleBufferRenderingStatus {
  Unknown = 0,
  Rendering = 1,
  Failed = 2
}

global['AVQueuedSampleBufferRenderingStatus'] = AVQueuedSampleBufferRenderingStatus;

export enum AVSpeechBoundary {
  Immediate = 0,
  Word = 1
}

global['AVSpeechBoundary'] = AVSpeechBoundary;

export enum AVSpeechSynthesisVoiceGender {
  Unspecified = 0,
  Male = 1,
  Female = 2
}

global['AVSpeechSynthesisVoiceGender'] = AVSpeechSynthesisVoiceGender;

export enum AVSpeechSynthesisVoiceQuality {
  Default = 1,
  Enhanced = 2
}

global['AVSpeechSynthesisVoiceQuality'] = AVSpeechSynthesisVoiceQuality;

export enum AVVideoFieldMode {
  Both = 0,
  TopOnly = 1,
  BottomOnly = 2,
  Deinterlace = 3
}

global['AVVideoFieldMode'] = AVVideoFieldMode;

export enum AVCaptureViewControlsStyle {
  Inline = 0,
  Floating = 1,
  InlineDeviceSelection = 2,
  Default = 0
}

global['AVCaptureViewControlsStyle'] = AVCaptureViewControlsStyle;

export enum AVPlayerViewControlsStyle {
  None = 0,
  Inline = 1,
  Floating = 2,
  Minimal = 3,
  Default = 1
}

global['AVPlayerViewControlsStyle'] = AVPlayerViewControlsStyle;

export enum AVPlayerViewTrimResult {
  OKButton = 0,
  CancelButton = 1
}

global['AVPlayerViewTrimResult'] = AVPlayerViewTrimResult;

export enum AVRoutePickerViewButtonState {
  Normal = 0,
  NormalHighlighted = 1,
  Active = 2,
  ActiveHighlighted = 3
}

global['AVRoutePickerViewButtonState'] = AVRoutePickerViewButtonState;

export enum NSAccessibilityPriorityLevel {
  Low = 10,
  Medium = 50,
  High = 90
}

global['NSAccessibilityPriorityLevel'] = NSAccessibilityPriorityLevel;

export enum NSAnimationEffect {
  DisappearingItemDefault = 0,
  Poof = 10
}

global['NSAnimationEffect'] = NSAnimationEffect;

export enum NSBorderType {
  NoBorder = 0,
  LineBorder = 1,
  BezelBorder = 2,
  GrooveBorder = 3
}

global['NSBorderType'] = NSBorderType;

export enum NSCharacterCollection {
  IdentityMappingCharacterCollection = 0,
  AdobeCNS1CharacterCollection = 1,
  AdobeGB1CharacterCollection = 2,
  AdobeJapan1CharacterCollection = 3,
  AdobeJapan2CharacterCollection = 4,
  AdobeKorea1CharacterCollection = 5
}

global['NSCharacterCollection'] = NSCharacterCollection;

export enum NSCollectionElementCategory {
  Item = 0,
  SupplementaryView = 1,
  DecorationView = 2,
  InterItemGap = 3
}

global['NSCollectionElementCategory'] = NSCollectionElementCategory;

export enum NSCollectionLayoutSectionOrthogonalScrollingBehavior {
  None = 0,
  Continuous = 1,
  ContinuousGroupLeadingBoundary = 2,
  Paging = 3,
  GroupPaging = 4,
  GroupPagingCentered = 5
}

global['NSCollectionLayoutSectionOrthogonalScrollingBehavior'] = NSCollectionLayoutSectionOrthogonalScrollingBehavior;

export enum NSColorRenderingIntent {
  Default = 0,
  AbsoluteColorimetric = 1,
  RelativeColorimetric = 2,
  Perceptual = 3,
  Saturation = 4
}

global['NSColorRenderingIntent'] = NSColorRenderingIntent;

export enum NSCompositingOperation {
  Clear = 0,
  Copy = 1,
  SourceOver = 2,
  SourceIn = 3,
  SourceOut = 4,
  SourceAtop = 5,
  DestinationOver = 6,
  DestinationIn = 7,
  DestinationOut = 8,
  DestinationAtop = 9,
  XOR = 10,
  PlusDarker = 11,
  Highlight = 12,
  PlusLighter = 13,
  Multiply = 14,
  Screen = 15,
  Overlay = 16,
  Darken = 17,
  Lighten = 18,
  ColorDodge = 19,
  ColorBurn = 20,
  SoftLight = 21,
  HardLight = 22,
  Difference = 23,
  Exclusion = 24,
  Hue = 25,
  Saturation = 26,
  Color = 27,
  Luminosity = 28
}

global['NSCompositingOperation'] = NSCompositingOperation;

export enum NSControlTint {
  DefaultControlTint = 0,
  BlueControlTint = 1,
  GraphiteControlTint = 6,
  ClearControlTint = 7
}

global['NSControlTint'] = NSControlTint;

export enum NSDirectionalRectEdge {
  None = 0,
  Top = 1,
  Leading = 2,
  Bottom = 4,
  Trailing = 8,
  All = 15
}

global['NSDirectionalRectEdge'] = NSDirectionalRectEdge;

export enum NSDisplayGamut {
  SRGB = 1,
  P3 = 2
}

global['NSDisplayGamut'] = NSDisplayGamut;

export enum NSDragOperation {
  None = 0,
  Copy = 1,
  Link = 2,
  Generic = 4,
  Private = 8,
  Move = 16,
  Delete = 32,
  Every = -1,
  All_Obsolete = 15,
  All = 15
}

global['NSDragOperation'] = NSDragOperation;

export enum NSDraggingContext {
  OutsideApplication = 0,
  WithinApplication = 1
}

global['NSDraggingContext'] = NSDraggingContext;

export enum NSDraggingFormation {
  Default = 0,
  None = 1,
  Pile = 2,
  List = 3,
  Stack = 4
}

global['NSDraggingFormation'] = NSDraggingFormation;

export enum NSDraggingItemEnumerationOptions {
  Concurrent = 1,
  ClearNonenumeratedImages = 65536
}

global['NSDraggingItemEnumerationOptions'] = NSDraggingItemEnumerationOptions;

export enum NSFindPanelAction {
  ShowFindPanel = 1,
  Next = 2,
  Previous = 3,
  ReplaceAll = 4,
  Replace = 5,
  ReplaceAndFind = 6,
  SetFindString = 7,
  ReplaceAllInSelection = 8,
  SelectAll = 9,
  SelectAllInSelection = 10
}

global['NSFindPanelAction'] = NSFindPanelAction;

export enum NSFindPanelSubstringMatchType {
  Contains = 0,
  StartsWith = 1,
  FullWord = 2,
  EndsWith = 3
}

global['NSFindPanelSubstringMatchType'] = NSFindPanelSubstringMatchType;

export enum NSFocusRingPlacement {
  Only = 0,
  Below = 1,
  Above = 2
}

global['NSFocusRingPlacement'] = NSFocusRingPlacement;

export enum NSFocusRingType {
  Default = 0,
  None = 1,
  Exterior = 2
}

global['NSFocusRingType'] = NSFocusRingType;

export enum NSFontAction {
  NoFontChangeAction = 0,
  ViaPanelFontAction = 1,
  AddTraitFontAction = 2,
  SizeUpFontAction = 3,
  SizeDownFontAction = 4,
  HeavierFontAction = 5,
  LighterFontAction = 6,
  RemoveTraitFontAction = 7
}

global['NSFontAction'] = NSFontAction;

export enum NSFontCollectionOptions {
  ApplicationOnlyMask = 1
}

global['NSFontCollectionOptions'] = NSFontCollectionOptions;

export enum NSFontRenderingMode {
  DefaultRenderingMode = 0,
  AntialiasedRenderingMode = 1,
  IntegerAdvancementsRenderingMode = 2,
  AntialiasedIntegerAdvancementsRenderingMode = 3
}

global['NSFontRenderingMode'] = NSFontRenderingMode;

export enum NSFontTraitMask {
  ItalicFontMask = 1,
  BoldFontMask = 2,
  UnboldFontMask = 4,
  NonStandardCharacterSetFontMask = 8,
  NarrowFontMask = 16,
  ExpandedFontMask = 32,
  CondensedFontMask = 64,
  SmallCapsFontMask = 128,
  PosterFontMask = 256,
  CompressedFontMask = 512,
  FixedPitchFontMask = 1024,
  UnitalicFontMask = 16777216
}

global['NSFontTraitMask'] = NSFontTraitMask;

export enum NSImageAlignment {
  Center = 0,
  Top = 1,
  TopLeft = 2,
  TopRight = 3,
  Left = 4,
  Bottom = 5,
  BottomLeft = 6,
  BottomRight = 7,
  Right = 8
}

global['NSImageAlignment'] = NSImageAlignment;

export enum NSImageInterpolation {
  Default = 0,
  None = 1,
  Low = 2,
  Medium = 4,
  High = 3
}

global['NSImageInterpolation'] = NSImageInterpolation;

export enum NSImageScaling {
  ImageScaleProportionallyDown = 0,
  ImageScaleAxesIndependently = 1,
  ImageScaleNone = 2,
  ImageScaleProportionallyUpOrDown = 3,
  ScaleProportionally = 0,
  ScaleToFit = 1,
  ScaleNone = 2
}

global['NSImageScaling'] = NSImageScaling;

export enum NSLineBreakMode {
  ByWordWrapping = 0,
  ByCharWrapping = 1,
  ByClipping = 2,
  ByTruncatingHead = 3,
  ByTruncatingTail = 4,
  ByTruncatingMiddle = 5
}

global['NSLineBreakMode'] = NSLineBreakMode;

export enum NSLineMovementDirection {
  DoesntMove = 0,
  MovesLeft = 1,
  MovesRight = 2,
  MovesDown = 3,
  MovesUp = 4
}

global['NSLineMovementDirection'] = NSLineMovementDirection;

export enum NSLineSweepDirection {
  Left = 0,
  Right = 1,
  Down = 2,
  Up = 3
}

global['NSLineSweepDirection'] = NSLineSweepDirection;

export enum NSRectAlignment {
  None = 0,
  Top = 1,
  TopLeading = 2,
  Leading = 3,
  BottomLeading = 4,
  Bottom = 5,
  BottomTrailing = 6,
  Trailing = 7,
  TopTrailing = 8
}

global['NSRectAlignment'] = NSRectAlignment;

export enum NSSelectionAffinity {
  Upstream = 0,
  Downstream = 1
}

global['NSSelectionAffinity'] = NSSelectionAffinity;

export enum NSSelectionGranularity {
  ByCharacter = 0,
  ByWord = 1,
  ByParagraph = 2
}

global['NSSelectionGranularity'] = NSSelectionGranularity;

export enum NSSpringLoadingHighlight {
  None = 0,
  Standard = 1,
  Emphasized = 2
}

global['NSSpringLoadingHighlight'] = NSSpringLoadingHighlight;

export enum NSSpringLoadingOptions {
  Disabled = 0,
  Enabled = 1,
  ContinuousActivation = 2,
  NoHover = 8
}

global['NSSpringLoadingOptions'] = NSSpringLoadingOptions;

export enum NSTextAlignment {
  Left = 0,
  Right = 1,
  Center = 2,
  Justified = 3,
  Natural = 4
}

global['NSTextAlignment'] = NSTextAlignment;

export enum NSTextInputTraitType {
  Default = 0,
  No = 1,
  Yes = 2
}

global['NSTextInputTraitType'] = NSTextInputTraitType;

export enum NSTextMovement {
  Return = 16,
  Tab = 17,
  Backtab = 18,
  Left = 19,
  Right = 20,
  Up = 21,
  Down = 22,
  Cancel = 23,
  Other = 0
}

global['NSTextMovement'] = NSTextMovement;

export enum NSTextScalingType {
  Standard = 0,
  iOS = 1
}

global['NSTextScalingType'] = NSTextScalingType;

export enum NSTextStorageEditActions {
  EditedAttributes = 1,
  EditedCharacters = 2
}

global['NSTextStorageEditActions'] = NSTextStorageEditActions;

export enum NSTypesetterControlCharacterAction {
  ZeroAdvancementAction = 1,
  WhitespaceAction = 2,
  HorizontalTabAction = 4,
  LineBreakAction = 8,
  ParagraphBreakAction = 16,
  ContainerBreakAction = 32
}

global['NSTypesetterControlCharacterAction'] = NSTypesetterControlCharacterAction;

export enum NSUnderlineStyle {
  None = 0,
  Single = 1,
  Thick = 2,
  Double = 9,
  PatternSolid = 0,
  PatternDot = 256,
  PatternDash = 512,
  PatternDashDot = 768,
  PatternDashDotDot = 1024,
  ByWord = 32768
}

global['NSUnderlineStyle'] = NSUnderlineStyle;

export enum NSUserInterfaceLayoutDirection {
  LeftToRight = 0,
  RightToLeft = 1
}

global['NSUserInterfaceLayoutDirection'] = NSUserInterfaceLayoutDirection;

export enum NSUserInterfaceLayoutOrientation {
  Horizontal = 0,
  Vertical = 1
}

global['NSUserInterfaceLayoutOrientation'] = NSUserInterfaceLayoutOrientation;

export enum NSWritingDirection {
  Natural = -1,
  LeftToRight = 0,
  RightToLeft = 1
}

global['NSWritingDirection'] = NSWritingDirection;

export enum NSWritingDirectionFormatType {
  Embedding = 0,
  Override = 2
}

global['NSWritingDirectionFormatType'] = NSWritingDirectionFormatType;

export enum NSAttributeType {
  UndefinedAttributeType = 0,
  Integer16AttributeType = 100,
  Integer32AttributeType = 200,
  Integer64AttributeType = 300,
  DecimalAttributeType = 400,
  DoubleAttributeType = 500,
  FloatAttributeType = 600,
  StringAttributeType = 700,
  BooleanAttributeType = 800,
  DateAttributeType = 900,
  BinaryDataAttributeType = 1000,
  UUIDAttributeType = 1100,
  URIAttributeType = 1200,
  TransformableAttributeType = 1800,
  ObjectIDAttributeType = 2000
}

global['NSAttributeType'] = NSAttributeType;

export enum NSBatchDeleteRequestResultType {
  ResultTypeStatusOnly = 0,
  ResultTypeObjectIDs = 1,
  ResultTypeCount = 2
}

global['NSBatchDeleteRequestResultType'] = NSBatchDeleteRequestResultType;

export enum NSBatchInsertRequestResultType {
  StatusOnly = 0,
  ObjectIDs = 1,
  Count = 2
}

global['NSBatchInsertRequestResultType'] = NSBatchInsertRequestResultType;

export enum NSBatchUpdateRequestResultType {
  StatusOnlyResultType = 0,
  UpdatedObjectIDsResultType = 1,
  UpdatedObjectsCountResultType = 2
}

global['NSBatchUpdateRequestResultType'] = NSBatchUpdateRequestResultType;

export enum NSDeleteRule {
  NoActionDeleteRule = 0,
  NullifyDeleteRule = 1,
  CascadeDeleteRule = 2,
  DenyDeleteRule = 3
}

global['NSDeleteRule'] = NSDeleteRule;

export enum NSEntityMappingType {
  UndefinedEntityMappingType = 0,
  CustomEntityMappingType = 1,
  AddEntityMappingType = 2,
  RemoveEntityMappingType = 3,
  CopyEntityMappingType = 4,
  TransformEntityMappingType = 5
}

global['NSEntityMappingType'] = NSEntityMappingType;

export enum NSFetchIndexElementType {
  Binary = 0,
  RTree = 1
}

global['NSFetchIndexElementType'] = NSFetchIndexElementType;

export enum NSFetchRequestResultType {
  ManagedObjectResultType = 0,
  ManagedObjectIDResultType = 1,
  DictionaryResultType = 2,
  CountResultType = 4
}

global['NSFetchRequestResultType'] = NSFetchRequestResultType;

export enum NSFetchedResultsChangeType {
  Insert = 1,
  Delete = 2,
  Move = 3,
  Update = 4
}

global['NSFetchedResultsChangeType'] = NSFetchedResultsChangeType;

export enum NSManagedObjectContextConcurrencyType {
  ConfinementConcurrencyType = 0,
  PrivateQueueConcurrencyType = 1,
  MainQueueConcurrencyType = 2
}

global['NSManagedObjectContextConcurrencyType'] = NSManagedObjectContextConcurrencyType;

export enum NSMergePolicyType {
  ErrorMergePolicyType = 0,
  MergeByPropertyStoreTrumpMergePolicyType = 1,
  MergeByPropertyObjectTrumpMergePolicyType = 2,
  OverwriteMergePolicyType = 3,
  RollbackMergePolicyType = 4
}

global['NSMergePolicyType'] = NSMergePolicyType;

export enum NSPersistentCloudKitContainerSchemaInitializationOptions {
  None = 0,
  DryRun = 2,
  PrintSchema = 4
}

global['NSPersistentCloudKitContainerSchemaInitializationOptions'] = NSPersistentCloudKitContainerSchemaInitializationOptions;

export enum NSPersistentHistoryChangeType {
  Insert = 0,
  Update = 1,
  Delete = 2
}

global['NSPersistentHistoryChangeType'] = NSPersistentHistoryChangeType;

export enum NSPersistentHistoryResultType {
  StatusOnly = 0,
  ObjectIDs = 1,
  Count = 2,
  TransactionsOnly = 3,
  ChangesOnly = 4,
  TransactionsAndChanges = 5
}

global['NSPersistentHistoryResultType'] = NSPersistentHistoryResultType;

export enum NSPersistentStoreRequestType {
  FetchRequestType = 1,
  SaveRequestType = 2,
  BatchInsertRequestType = 5,
  BatchUpdateRequestType = 6,
  BatchDeleteRequestType = 7
}

global['NSPersistentStoreRequestType'] = NSPersistentStoreRequestType;

export enum NSSnapshotEventType {
  UndoInsertion = 2,
  UndoDeletion = 4,
  UndoUpdate = 8,
  Rollback = 16,
  Refresh = 32,
  MergePolicy = 64
}

global['NSSnapshotEventType'] = NSSnapshotEventType;

export enum CFCalendarUnit {
  kCFCalendarUnitEra = 2,
  kCFCalendarUnitYear = 4,
  kCFCalendarUnitMonth = 8,
  kCFCalendarUnitDay = 16,
  kCFCalendarUnitHour = 32,
  kCFCalendarUnitMinute = 64,
  kCFCalendarUnitSecond = 128,
  kCFCalendarUnitWeek = 256,
  kCFCalendarUnitWeekday = 512,
  kCFCalendarUnitWeekdayOrdinal = 1024,
  kCFCalendarUnitQuarter = 2048,
  kCFCalendarUnitWeekOfMonth = 4096,
  kCFCalendarUnitWeekOfYear = 8192,
  kCFCalendarUnitYearForWeekOfYear = 16384
}

global['CFCalendarUnit'] = CFCalendarUnit;

export enum CFCharacterSetPredefinedSet {
  kCFCharacterSetControl = 1,
  kCFCharacterSetWhitespace = 2,
  kCFCharacterSetWhitespaceAndNewline = 3,
  kCFCharacterSetDecimalDigit = 4,
  kCFCharacterSetLetter = 5,
  kCFCharacterSetLowercaseLetter = 6,
  kCFCharacterSetUppercaseLetter = 7,
  kCFCharacterSetNonBase = 8,
  kCFCharacterSetDecomposable = 9,
  kCFCharacterSetAlphaNumeric = 10,
  kCFCharacterSetPunctuation = 11,
  kCFCharacterSetCapitalizedLetter = 13,
  kCFCharacterSetSymbol = 14,
  kCFCharacterSetNewline = 15,
  kCFCharacterSetIllegal = 12
}

global['CFCharacterSetPredefinedSet'] = CFCharacterSetPredefinedSet;

export enum CFComparisonResult {
  kCFCompareLessThan = -1,
  kCFCompareEqualTo = 0,
  kCFCompareGreaterThan = 1
}

global['CFComparisonResult'] = CFComparisonResult;

export enum CFDataSearchFlags {
  kCFDataSearchBackwards = 1,
  kCFDataSearchAnchored = 2
}

global['CFDataSearchFlags'] = CFDataSearchFlags;

export enum CFDateFormatterStyle {
  kCFDateFormatterNoStyle = 0,
  kCFDateFormatterShortStyle = 1,
  kCFDateFormatterMediumStyle = 2,
  kCFDateFormatterLongStyle = 3,
  kCFDateFormatterFullStyle = 4
}

global['CFDateFormatterStyle'] = CFDateFormatterStyle;

export enum CFFileSecurityClearOptions {
  kCFFileSecurityClearOwner = 1,
  kCFFileSecurityClearGroup = 2,
  kCFFileSecurityClearMode = 4,
  kCFFileSecurityClearOwnerUUID = 8,
  kCFFileSecurityClearGroupUUID = 16,
  kCFFileSecurityClearAccessControlList = 32
}

global['CFFileSecurityClearOptions'] = CFFileSecurityClearOptions;

export enum CFGregorianUnitFlags {
  kCFGregorianUnitsYears = 1,
  kCFGregorianUnitsMonths = 2,
  kCFGregorianUnitsDays = 4,
  kCFGregorianUnitsHours = 8,
  kCFGregorianUnitsMinutes = 16,
  kCFGregorianUnitsSeconds = 32,
  kCFGregorianAllUnits = 16777215
}

global['CFGregorianUnitFlags'] = CFGregorianUnitFlags;

export enum CFISO8601DateFormatOptions {
  kCFISO8601DateFormatWithYear = 1,
  kCFISO8601DateFormatWithMonth = 2,
  kCFISO8601DateFormatWithWeekOfYear = 4,
  kCFISO8601DateFormatWithDay = 16,
  kCFISO8601DateFormatWithTime = 32,
  kCFISO8601DateFormatWithTimeZone = 64,
  kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128,
  kCFISO8601DateFormatWithDashSeparatorInDate = 256,
  kCFISO8601DateFormatWithColonSeparatorInTime = 512,
  kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024,
  kCFISO8601DateFormatWithFractionalSeconds = 2048,
  kCFISO8601DateFormatWithFullDate = 275,
  kCFISO8601DateFormatWithFullTime = 1632,
  kCFISO8601DateFormatWithInternetDateTime = 1907
}

global['CFISO8601DateFormatOptions'] = CFISO8601DateFormatOptions;

export enum CFLocaleLanguageDirection {
  kCFLocaleLanguageDirectionUnknown = 0,
  kCFLocaleLanguageDirectionLeftToRight = 1,
  kCFLocaleLanguageDirectionRightToLeft = 2,
  kCFLocaleLanguageDirectionTopToBottom = 3,
  kCFLocaleLanguageDirectionBottomToTop = 4
}

global['CFLocaleLanguageDirection'] = CFLocaleLanguageDirection;

export enum CFNotificationSuspensionBehavior {
  Drop = 1,
  Coalesce = 2,
  Hold = 3,
  DeliverImmediately = 4
}

global['CFNotificationSuspensionBehavior'] = CFNotificationSuspensionBehavior;

export enum CFNumberFormatterOptionFlags {
  kCFNumberFormatterParseIntegersOnly = 1
}

global['CFNumberFormatterOptionFlags'] = CFNumberFormatterOptionFlags;

export enum CFNumberFormatterPadPosition {
  kCFNumberFormatterPadBeforePrefix = 0,
  kCFNumberFormatterPadAfterPrefix = 1,
  kCFNumberFormatterPadBeforeSuffix = 2,
  kCFNumberFormatterPadAfterSuffix = 3
}

global['CFNumberFormatterPadPosition'] = CFNumberFormatterPadPosition;

export enum CFNumberFormatterRoundingMode {
  kCFNumberFormatterRoundCeiling = 0,
  kCFNumberFormatterRoundFloor = 1,
  kCFNumberFormatterRoundDown = 2,
  kCFNumberFormatterRoundUp = 3,
  kCFNumberFormatterRoundHalfEven = 4,
  kCFNumberFormatterRoundHalfDown = 5,
  kCFNumberFormatterRoundHalfUp = 6
}

global['CFNumberFormatterRoundingMode'] = CFNumberFormatterRoundingMode;

export enum CFNumberFormatterStyle {
  kCFNumberFormatterNoStyle = 0,
  kCFNumberFormatterDecimalStyle = 1,
  kCFNumberFormatterCurrencyStyle = 2,
  kCFNumberFormatterPercentStyle = 3,
  kCFNumberFormatterScientificStyle = 4,
  kCFNumberFormatterSpellOutStyle = 5,
  kCFNumberFormatterOrdinalStyle = 6,
  kCFNumberFormatterCurrencyISOCodeStyle = 8,
  kCFNumberFormatterCurrencyPluralStyle = 9,
  kCFNumberFormatterCurrencyAccountingStyle = 10
}

global['CFNumberFormatterStyle'] = CFNumberFormatterStyle;

export enum CFNumberType {
  kCFNumberSInt8Type = 1,
  kCFNumberSInt16Type = 2,
  kCFNumberSInt32Type = 3,
  kCFNumberSInt64Type = 4,
  kCFNumberFloat32Type = 5,
  kCFNumberFloat64Type = 6,
  kCFNumberCharType = 7,
  kCFNumberShortType = 8,
  kCFNumberIntType = 9,
  kCFNumberLongType = 10,
  kCFNumberLongLongType = 11,
  kCFNumberFloatType = 12,
  kCFNumberDoubleType = 13,
  kCFNumberCFIndexType = 14,
  kCFNumberNSIntegerType = 15,
  kCFNumberCGFloatType = 16,
  kCFNumberMaxType = 16
}

global['CFNumberType'] = CFNumberType;

export enum CFPropertyListFormat {
  kCFPropertyListOpenStepFormat = 1,
  kCFPropertyListXMLFormat_v1_0 = 100,
  kCFPropertyListBinaryFormat_v1_0 = 200
}

global['CFPropertyListFormat'] = CFPropertyListFormat;

export enum CFPropertyListMutabilityOptions {
  kCFPropertyListImmutable = 0,
  kCFPropertyListMutableContainers = 1,
  kCFPropertyListMutableContainersAndLeaves = 2
}

global['CFPropertyListMutabilityOptions'] = CFPropertyListMutabilityOptions;

export enum CFRunLoopActivity {
  kCFRunLoopEntry = 1,
  kCFRunLoopBeforeTimers = 2,
  kCFRunLoopBeforeSources = 4,
  kCFRunLoopBeforeWaiting = 32,
  kCFRunLoopAfterWaiting = 64,
  kCFRunLoopExit = 128,
  kCFRunLoopAllActivities = 268435455
}

global['CFRunLoopActivity'] = CFRunLoopActivity;

export enum CFRunLoopRunResult {
  kCFRunLoopRunFinished = 1,
  kCFRunLoopRunStopped = 2,
  kCFRunLoopRunTimedOut = 3,
  kCFRunLoopRunHandledSource = 4
}

global['CFRunLoopRunResult'] = CFRunLoopRunResult;

export enum CFSocketCallBackType {
  kCFSocketNoCallBack = 0,
  kCFSocketReadCallBack = 1,
  kCFSocketAcceptCallBack = 2,
  kCFSocketDataCallBack = 3,
  kCFSocketConnectCallBack = 4,
  kCFSocketWriteCallBack = 8
}

global['CFSocketCallBackType'] = CFSocketCallBackType;

export enum CFSocketError {
  kCFSocketSuccess = 0,
  kCFSocketError = -1,
  kCFSocketTimeout = -2
}

global['CFSocketError'] = CFSocketError;

export enum CFStreamErrorDomain {
  kCFStreamErrorDomainCustom = -1,
  kCFStreamErrorDomainPOSIX = 1,
  kCFStreamErrorDomainMacOSStatus = 2
}

global['CFStreamErrorDomain'] = CFStreamErrorDomain;

export enum CFStreamEventType {
  kCFStreamEventNone = 0,
  kCFStreamEventOpenCompleted = 1,
  kCFStreamEventHasBytesAvailable = 2,
  kCFStreamEventCanAcceptBytes = 4,
  kCFStreamEventErrorOccurred = 8,
  kCFStreamEventEndEncountered = 16
}

global['CFStreamEventType'] = CFStreamEventType;

export enum CFStreamStatus {
  kCFStreamStatusNotOpen = 0,
  kCFStreamStatusOpening = 1,
  kCFStreamStatusOpen = 2,
  kCFStreamStatusReading = 3,
  kCFStreamStatusWriting = 4,
  kCFStreamStatusAtEnd = 5,
  kCFStreamStatusClosed = 6,
  kCFStreamStatusError = 7
}

global['CFStreamStatus'] = CFStreamStatus;

export enum CFStringBuiltInEncodings {
  kCFStringEncodingMacRoman = 0,
  kCFStringEncodingWindowsLatin1 = 1280,
  kCFStringEncodingISOLatin1 = 513,
  kCFStringEncodingNextStepLatin = 2817,
  kCFStringEncodingASCII = 1536,
  kCFStringEncodingUnicode = 256,
  kCFStringEncodingUTF8 = 134217984,
  kCFStringEncodingNonLossyASCII = 3071,
  kCFStringEncodingUTF16 = 256,
  kCFStringEncodingUTF16BE = 268435712,
  kCFStringEncodingUTF16LE = 335544576,
  kCFStringEncodingUTF32 = 201326848,
  kCFStringEncodingUTF32BE = 402653440,
  kCFStringEncodingUTF32LE = 469762304
}

global['CFStringBuiltInEncodings'] = CFStringBuiltInEncodings;

export enum CFStringCompareFlags {
  kCFCompareCaseInsensitive = 1,
  kCFCompareBackwards = 4,
  kCFCompareAnchored = 8,
  kCFCompareNonliteral = 16,
  kCFCompareLocalized = 32,
  kCFCompareNumerically = 64,
  kCFCompareDiacriticInsensitive = 128,
  kCFCompareWidthInsensitive = 256,
  kCFCompareForcedOrdering = 512
}

global['CFStringCompareFlags'] = CFStringCompareFlags;

export enum CFStringEncodings {
  kCFStringEncodingMacJapanese = 1,
  kCFStringEncodingMacChineseTrad = 2,
  kCFStringEncodingMacKorean = 3,
  kCFStringEncodingMacArabic = 4,
  kCFStringEncodingMacHebrew = 5,
  kCFStringEncodingMacGreek = 6,
  kCFStringEncodingMacCyrillic = 7,
  kCFStringEncodingMacDevanagari = 9,
  kCFStringEncodingMacGurmukhi = 10,
  kCFStringEncodingMacGujarati = 11,
  kCFStringEncodingMacOriya = 12,
  kCFStringEncodingMacBengali = 13,
  kCFStringEncodingMacTamil = 14,
  kCFStringEncodingMacTelugu = 15,
  kCFStringEncodingMacKannada = 16,
  kCFStringEncodingMacMalayalam = 17,
  kCFStringEncodingMacSinhalese = 18,
  kCFStringEncodingMacBurmese = 19,
  kCFStringEncodingMacKhmer = 20,
  kCFStringEncodingMacThai = 21,
  kCFStringEncodingMacLaotian = 22,
  kCFStringEncodingMacGeorgian = 23,
  kCFStringEncodingMacArmenian = 24,
  kCFStringEncodingMacChineseSimp = 25,
  kCFStringEncodingMacTibetan = 26,
  kCFStringEncodingMacMongolian = 27,
  kCFStringEncodingMacEthiopic = 28,
  kCFStringEncodingMacCentralEurRoman = 29,
  kCFStringEncodingMacVietnamese = 30,
  kCFStringEncodingMacExtArabic = 31,
  kCFStringEncodingMacSymbol = 33,
  kCFStringEncodingMacDingbats = 34,
  kCFStringEncodingMacTurkish = 35,
  kCFStringEncodingMacCroatian = 36,
  kCFStringEncodingMacIcelandic = 37,
  kCFStringEncodingMacRomanian = 38,
  kCFStringEncodingMacCeltic = 39,
  kCFStringEncodingMacGaelic = 40,
  kCFStringEncodingMacFarsi = 140,
  kCFStringEncodingMacUkrainian = 152,
  kCFStringEncodingMacInuit = 236,
  kCFStringEncodingMacVT100 = 252,
  kCFStringEncodingMacHFS = 255,
  kCFStringEncodingISOLatin2 = 514,
  kCFStringEncodingISOLatin3 = 515,
  kCFStringEncodingISOLatin4 = 516,
  kCFStringEncodingISOLatinCyrillic = 517,
  kCFStringEncodingISOLatinArabic = 518,
  kCFStringEncodingISOLatinGreek = 519,
  kCFStringEncodingISOLatinHebrew = 520,
  kCFStringEncodingISOLatin5 = 521,
  kCFStringEncodingISOLatin6 = 522,
  kCFStringEncodingISOLatinThai = 523,
  kCFStringEncodingISOLatin7 = 525,
  kCFStringEncodingISOLatin8 = 526,
  kCFStringEncodingISOLatin9 = 527,
  kCFStringEncodingISOLatin10 = 528,
  kCFStringEncodingDOSLatinUS = 1024,
  kCFStringEncodingDOSGreek = 1029,
  kCFStringEncodingDOSBalticRim = 1030,
  kCFStringEncodingDOSLatin1 = 1040,
  kCFStringEncodingDOSGreek1 = 1041,
  kCFStringEncodingDOSLatin2 = 1042,
  kCFStringEncodingDOSCyrillic = 1043,
  kCFStringEncodingDOSTurkish = 1044,
  kCFStringEncodingDOSPortuguese = 1045,
  kCFStringEncodingDOSIcelandic = 1046,
  kCFStringEncodingDOSHebrew = 1047,
  kCFStringEncodingDOSCanadianFrench = 1048,
  kCFStringEncodingDOSArabic = 1049,
  kCFStringEncodingDOSNordic = 1050,
  kCFStringEncodingDOSRussian = 1051,
  kCFStringEncodingDOSGreek2 = 1052,
  kCFStringEncodingDOSThai = 1053,
  kCFStringEncodingDOSJapanese = 1056,
  kCFStringEncodingDOSChineseSimplif = 1057,
  kCFStringEncodingDOSKorean = 1058,
  kCFStringEncodingDOSChineseTrad = 1059,
  kCFStringEncodingWindowsLatin2 = 1281,
  kCFStringEncodingWindowsCyrillic = 1282,
  kCFStringEncodingWindowsGreek = 1283,
  kCFStringEncodingWindowsLatin5 = 1284,
  kCFStringEncodingWindowsHebrew = 1285,
  kCFStringEncodingWindowsArabic = 1286,
  kCFStringEncodingWindowsBalticRim = 1287,
  kCFStringEncodingWindowsVietnamese = 1288,
  kCFStringEncodingWindowsKoreanJohab = 1296,
  kCFStringEncodingANSEL = 1537,
  kCFStringEncodingJIS_X0201_76 = 1568,
  kCFStringEncodingJIS_X0208_83 = 1569,
  kCFStringEncodingJIS_X0208_90 = 1570,
  kCFStringEncodingJIS_X0212_90 = 1571,
  kCFStringEncodingJIS_C6226_78 = 1572,
  kCFStringEncodingShiftJIS_X0213 = 1576,
  kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577,
  kCFStringEncodingGB_2312_80 = 1584,
  kCFStringEncodingGBK_95 = 1585,
  kCFStringEncodingGB_18030_2000 = 1586,
  kCFStringEncodingKSC_5601_87 = 1600,
  kCFStringEncodingKSC_5601_92_Johab = 1601,
  kCFStringEncodingCNS_11643_92_P1 = 1617,
  kCFStringEncodingCNS_11643_92_P2 = 1618,
  kCFStringEncodingCNS_11643_92_P3 = 1619,
  kCFStringEncodingISO_2022_JP = 2080,
  kCFStringEncodingISO_2022_JP_2 = 2081,
  kCFStringEncodingISO_2022_JP_1 = 2082,
  kCFStringEncodingISO_2022_JP_3 = 2083,
  kCFStringEncodingISO_2022_CN = 2096,
  kCFStringEncodingISO_2022_CN_EXT = 2097,
  kCFStringEncodingISO_2022_KR = 2112,
  kCFStringEncodingEUC_JP = 2336,
  kCFStringEncodingEUC_CN = 2352,
  kCFStringEncodingEUC_TW = 2353,
  kCFStringEncodingEUC_KR = 2368,
  kCFStringEncodingShiftJIS = 2561,
  kCFStringEncodingKOI8_R = 2562,
  kCFStringEncodingBig5 = 2563,
  kCFStringEncodingMacRomanLatin1 = 2564,
  kCFStringEncodingHZ_GB_2312 = 2565,
  kCFStringEncodingBig5_HKSCS_1999 = 2566,
  kCFStringEncodingVISCII = 2567,
  kCFStringEncodingKOI8_U = 2568,
  kCFStringEncodingBig5_E = 2569,
  kCFStringEncodingNextStepJapanese = 2818,
  kCFStringEncodingEBCDIC_US = 3073,
  kCFStringEncodingEBCDIC_CP037 = 3074,
  kCFStringEncodingUTF7 = 67109120,
  kCFStringEncodingUTF7_IMAP = 2576,
  kCFStringEncodingShiftJIS_X0213_00 = 1576
}

global['CFStringEncodings'] = CFStringEncodings;

export enum CFStringNormalizationForm {
  kCFStringNormalizationFormD = 0,
  kCFStringNormalizationFormKD = 1,
  kCFStringNormalizationFormC = 2,
  kCFStringNormalizationFormKC = 3
}

global['CFStringNormalizationForm'] = CFStringNormalizationForm;

export enum CFStringTokenizerTokenType {
  kCFStringTokenizerTokenNone = 0,
  kCFStringTokenizerTokenNormal = 1,
  kCFStringTokenizerTokenHasSubTokensMask = 2,
  kCFStringTokenizerTokenHasDerivedSubTokensMask = 4,
  kCFStringTokenizerTokenHasHasNumbersMask = 8,
  kCFStringTokenizerTokenHasNonLettersMask = 16,
  kCFStringTokenizerTokenIsCJWordMask = 32
}

global['CFStringTokenizerTokenType'] = CFStringTokenizerTokenType;

export enum CFTimeZoneNameStyle {
  kCFTimeZoneNameStyleStandard = 0,
  kCFTimeZoneNameStyleShortStandard = 1,
  kCFTimeZoneNameStyleDaylightSaving = 2,
  kCFTimeZoneNameStyleShortDaylightSaving = 3,
  kCFTimeZoneNameStyleGeneric = 4,
  kCFTimeZoneNameStyleShortGeneric = 5
}

global['CFTimeZoneNameStyle'] = CFTimeZoneNameStyle;

export enum CFURLBookmarkCreationOptions {
  kCFURLBookmarkCreationMinimalBookmarkMask = 512,
  kCFURLBookmarkCreationSuitableForBookmarkFile = 1024,
  kCFURLBookmarkCreationWithSecurityScope = 2048,
  kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096,
  kCFURLBookmarkCreationPreferFileIDResolutionMask = 256
}

global['CFURLBookmarkCreationOptions'] = CFURLBookmarkCreationOptions;

export enum CFURLBookmarkResolutionOptions {
  kCFURLBookmarkResolutionWithoutUIMask = 256,
  kCFURLBookmarkResolutionWithoutMountingMask = 512,
  kCFURLBookmarkResolutionWithSecurityScope = 1024,
  kCFBookmarkResolutionWithoutUIMask = 256,
  kCFBookmarkResolutionWithoutMountingMask = 512
}

global['CFURLBookmarkResolutionOptions'] = CFURLBookmarkResolutionOptions;

export enum CFURLComponentType {
  kCFURLComponentScheme = 1,
  kCFURLComponentNetLocation = 2,
  kCFURLComponentPath = 3,
  kCFURLComponentResourceSpecifier = 4,
  kCFURLComponentUser = 5,
  kCFURLComponentPassword = 6,
  kCFURLComponentUserInfo = 7,
  kCFURLComponentHost = 8,
  kCFURLComponentPort = 9,
  kCFURLComponentParameterString = 10,
  kCFURLComponentQuery = 11,
  kCFURLComponentFragment = 12
}

global['CFURLComponentType'] = CFURLComponentType;

export enum CFURLEnumeratorOptions {
  kCFURLEnumeratorDefaultBehavior = 0,
  kCFURLEnumeratorDescendRecursively = 1,
  kCFURLEnumeratorSkipInvisibles = 2,
  kCFURLEnumeratorGenerateFileReferenceURLs = 4,
  kCFURLEnumeratorSkipPackageContents = 8,
  kCFURLEnumeratorIncludeDirectoriesPreOrder = 16,
  kCFURLEnumeratorIncludeDirectoriesPostOrder = 32,
  kCFURLEnumeratorGenerateRelativePathURLs = 64
}

global['CFURLEnumeratorOptions'] = CFURLEnumeratorOptions;

export enum CFURLEnumeratorResult {
  kCFURLEnumeratorSuccess = 1,
  kCFURLEnumeratorEnd = 2,
  kCFURLEnumeratorError = 3,
  kCFURLEnumeratorDirectoryPostOrderSuccess = 4
}

global['CFURLEnumeratorResult'] = CFURLEnumeratorResult;

export enum CFURLPathStyle {
  kCFURLPOSIXPathStyle = 0,
  kCFURLHFSPathStyle = 1,
  kCFURLWindowsPathStyle = 2
}

global['CFURLPathStyle'] = CFURLPathStyle;

export enum CFXMLEntityTypeCode {
  kCFXMLEntityTypeParameter = 0,
  kCFXMLEntityTypeParsedInternal = 1,
  kCFXMLEntityTypeParsedExternal = 2,
  kCFXMLEntityTypeUnparsed = 3,
  kCFXMLEntityTypeCharacter = 4
}

global['CFXMLEntityTypeCode'] = CFXMLEntityTypeCode;

export enum CFXMLNodeTypeCode {
  kCFXMLNodeTypeDocument = 1,
  kCFXMLNodeTypeElement = 2,
  kCFXMLNodeTypeAttribute = 3,
  kCFXMLNodeTypeProcessingInstruction = 4,
  kCFXMLNodeTypeComment = 5,
  kCFXMLNodeTypeText = 6,
  kCFXMLNodeTypeCDATASection = 7,
  kCFXMLNodeTypeDocumentFragment = 8,
  kCFXMLNodeTypeEntity = 9,
  kCFXMLNodeTypeEntityReference = 10,
  kCFXMLNodeTypeDocumentType = 11,
  kCFXMLNodeTypeWhitespace = 12,
  kCFXMLNodeTypeNotation = 13,
  kCFXMLNodeTypeElementTypeDeclaration = 14,
  kCFXMLNodeTypeAttributeListDeclaration = 15
}

global['CFXMLNodeTypeCode'] = CFXMLNodeTypeCode;

export enum CFXMLParserOptions {
  kCFXMLParserValidateDocument = 1,
  kCFXMLParserSkipMetaData = 2,
  kCFXMLParserReplacePhysicalEntities = 4,
  kCFXMLParserSkipWhitespace = 8,
  kCFXMLParserResolveExternalEntities = 16,
  kCFXMLParserAddImpliedAttributes = 32,
  kCFXMLParserAllOptions = 16777215,
  kCFXMLParserNoOptions = 0
}

global['CFXMLParserOptions'] = CFXMLParserOptions;

export enum CFXMLParserStatusCode {
  kCFXMLStatusParseNotBegun = -2,
  kCFXMLStatusParseInProgress = -1,
  kCFXMLStatusParseSuccessful = 0,
  kCFXMLErrorUnexpectedEOF = 1,
  kCFXMLErrorUnknownEncoding = 2,
  kCFXMLErrorEncodingConversionFailure = 3,
  kCFXMLErrorMalformedProcessingInstruction = 4,
  kCFXMLErrorMalformedDTD = 5,
  kCFXMLErrorMalformedName = 6,
  kCFXMLErrorMalformedCDSect = 7,
  kCFXMLErrorMalformedCloseTag = 8,
  kCFXMLErrorMalformedStartTag = 9,
  kCFXMLErrorMalformedDocument = 10,
  kCFXMLErrorElementlessDocument = 11,
  kCFXMLErrorMalformedComment = 12,
  kCFXMLErrorMalformedCharacterReference = 13,
  kCFXMLErrorMalformedParsedCharacterData = 14,
  kCFXMLErrorNoData = 15
}

global['CFXMLParserStatusCode'] = CFXMLParserStatusCode;

export enum __CFByteOrder {
  CFByteOrderUnknown = 0,
  CFByteOrderLittleEndian = 1,
  CFByteOrderBigEndian = 2
}

global['__CFByteOrder'] = __CFByteOrder;

export enum CGBitmapInfo {
  kCGBitmapAlphaInfoMask = 31,
  kCGBitmapFloatInfoMask = 3840,
  kCGBitmapFloatComponents = 256,
  kCGBitmapByteOrderMask = 28672,
  kCGBitmapByteOrderDefault = 0,
  kCGBitmapByteOrder16Little = 4096,
  kCGBitmapByteOrder32Little = 8192,
  kCGBitmapByteOrder16Big = 12288,
  kCGBitmapByteOrder32Big = 16384
}

global['CGBitmapInfo'] = CGBitmapInfo;

export enum CGBlendMode {
  kCGBlendModeNormal = 0,
  kCGBlendModeMultiply = 1,
  kCGBlendModeScreen = 2,
  kCGBlendModeOverlay = 3,
  kCGBlendModeDarken = 4,
  kCGBlendModeLighten = 5,
  kCGBlendModeColorDodge = 6,
  kCGBlendModeColorBurn = 7,
  kCGBlendModeSoftLight = 8,
  kCGBlendModeHardLight = 9,
  kCGBlendModeDifference = 10,
  kCGBlendModeExclusion = 11,
  kCGBlendModeHue = 12,
  kCGBlendModeSaturation = 13,
  kCGBlendModeColor = 14,
  kCGBlendModeLuminosity = 15,
  kCGBlendModeClear = 16,
  kCGBlendModeCopy = 17,
  kCGBlendModeSourceIn = 18,
  kCGBlendModeSourceOut = 19,
  kCGBlendModeSourceAtop = 20,
  kCGBlendModeDestinationOver = 21,
  kCGBlendModeDestinationIn = 22,
  kCGBlendModeDestinationOut = 23,
  kCGBlendModeDestinationAtop = 24,
  kCGBlendModeXOR = 25,
  kCGBlendModePlusDarker = 26,
  kCGBlendModePlusLighter = 27
}

global['CGBlendMode'] = CGBlendMode;

export enum CGCaptureOptions {
  kCGCaptureNoOptions = 0,
  kCGCaptureNoFill = 1
}

global['CGCaptureOptions'] = CGCaptureOptions;

export enum CGColorConversionInfoTransformType {
  kCGColorConversionTransformFromSpace = 0,
  kCGColorConversionTransformToSpace = 1,
  kCGColorConversionTransformApplySpace = 2
}

global['CGColorConversionInfoTransformType'] = CGColorConversionInfoTransformType;

export enum CGColorRenderingIntent {
  kCGRenderingIntentDefault = 0,
  kCGRenderingIntentAbsoluteColorimetric = 1,
  kCGRenderingIntentRelativeColorimetric = 2,
  kCGRenderingIntentPerceptual = 3,
  kCGRenderingIntentSaturation = 4
}

global['CGColorRenderingIntent'] = CGColorRenderingIntent;

export enum CGColorSpaceModel {
  kCGColorSpaceModelUnknown = -1,
  kCGColorSpaceModelMonochrome = 0,
  kCGColorSpaceModelRGB = 1,
  kCGColorSpaceModelCMYK = 2,
  kCGColorSpaceModelLab = 3,
  kCGColorSpaceModelDeviceN = 4,
  kCGColorSpaceModelIndexed = 5,
  kCGColorSpaceModelPattern = 6,
  kCGColorSpaceModelXYZ = 7
}

global['CGColorSpaceModel'] = CGColorSpaceModel;

export enum CGConfigureOption {
  kCGConfigureForAppOnly = 0,
  kCGConfigureForSession = 1,
  kCGConfigurePermanently = 2
}

global['CGConfigureOption'] = CGConfigureOption;

export enum CGDisplayChangeSummaryFlags {
  kCGDisplayBeginConfigurationFlag = 1,
  kCGDisplayMovedFlag = 2,
  kCGDisplaySetMainFlag = 4,
  kCGDisplaySetModeFlag = 8,
  kCGDisplayAddFlag = 16,
  kCGDisplayRemoveFlag = 32,
  kCGDisplayEnabledFlag = 256,
  kCGDisplayDisabledFlag = 512,
  kCGDisplayMirrorFlag = 1024,
  kCGDisplayUnMirrorFlag = 2048,
  kCGDisplayDesktopShapeChangedFlag = 4096
}

global['CGDisplayChangeSummaryFlags'] = CGDisplayChangeSummaryFlags;

export enum CGDisplayStreamFrameStatus {
  kCGDisplayStreamFrameStatusFrameComplete = 0,
  kCGDisplayStreamFrameStatusFrameIdle = 1,
  kCGDisplayStreamFrameStatusFrameBlank = 2,
  kCGDisplayStreamFrameStatusStopped = 3
}

global['CGDisplayStreamFrameStatus'] = CGDisplayStreamFrameStatus;

export enum CGDisplayStreamUpdateRectType {
  kCGDisplayStreamUpdateRefreshedRects = 0,
  kCGDisplayStreamUpdateMovedRects = 1,
  kCGDisplayStreamUpdateDirtyRects = 2,
  kCGDisplayStreamUpdateReducedDirtyRects = 3
}

global['CGDisplayStreamUpdateRectType'] = CGDisplayStreamUpdateRectType;

export enum CGError {
  kCGErrorSuccess = 0,
  kCGErrorFailure = 1000,
  kCGErrorIllegalArgument = 1001,
  kCGErrorInvalidConnection = 1002,
  kCGErrorInvalidContext = 1003,
  kCGErrorCannotComplete = 1004,
  kCGErrorNotImplemented = 1006,
  kCGErrorRangeCheck = 1007,
  kCGErrorTypeCheck = 1008,
  kCGErrorInvalidOperation = 1010,
  kCGErrorNoneAvailable = 1011
}

global['CGError'] = CGError;

export enum CGEventField {
  kCGMouseEventNumber = 0,
  kCGMouseEventClickState = 1,
  kCGMouseEventPressure = 2,
  kCGMouseEventButtonNumber = 3,
  kCGMouseEventDeltaX = 4,
  kCGMouseEventDeltaY = 5,
  kCGMouseEventInstantMouser = 6,
  kCGMouseEventSubtype = 7,
  kCGKeyboardEventAutorepeat = 8,
  kCGKeyboardEventKeycode = 9,
  kCGKeyboardEventKeyboardType = 10,
  kCGScrollWheelEventDeltaAxis1 = 11,
  kCGScrollWheelEventDeltaAxis2 = 12,
  kCGScrollWheelEventDeltaAxis3 = 13,
  kCGScrollWheelEventFixedPtDeltaAxis1 = 93,
  kCGScrollWheelEventFixedPtDeltaAxis2 = 94,
  kCGScrollWheelEventFixedPtDeltaAxis3 = 95,
  kCGScrollWheelEventPointDeltaAxis1 = 96,
  kCGScrollWheelEventPointDeltaAxis2 = 97,
  kCGScrollWheelEventPointDeltaAxis3 = 98,
  kCGScrollWheelEventScrollPhase = 99,
  kCGScrollWheelEventScrollCount = 100,
  kCGScrollWheelEventMomentumPhase = 123,
  kCGScrollWheelEventInstantMouser = 14,
  kCGTabletEventPointX = 15,
  kCGTabletEventPointY = 16,
  kCGTabletEventPointZ = 17,
  kCGTabletEventPointButtons = 18,
  kCGTabletEventPointPressure = 19,
  kCGTabletEventTiltX = 20,
  kCGTabletEventTiltY = 21,
  kCGTabletEventRotation = 22,
  kCGTabletEventTangentialPressure = 23,
  kCGTabletEventDeviceID = 24,
  kCGTabletEventVendor1 = 25,
  kCGTabletEventVendor2 = 26,
  kCGTabletEventVendor3 = 27,
  kCGTabletProximityEventVendorID = 28,
  kCGTabletProximityEventTabletID = 29,
  kCGTabletProximityEventPointerID = 30,
  kCGTabletProximityEventDeviceID = 31,
  kCGTabletProximityEventSystemTabletID = 32,
  kCGTabletProximityEventVendorPointerType = 33,
  kCGTabletProximityEventVendorPointerSerialNumber = 34,
  kCGTabletProximityEventVendorUniqueID = 35,
  kCGTabletProximityEventCapabilityMask = 36,
  kCGTabletProximityEventPointerType = 37,
  kCGTabletProximityEventEnterProximity = 38,
  kCGEventTargetProcessSerialNumber = 39,
  kCGEventTargetUnixProcessID = 40,
  kCGEventSourceUnixProcessID = 41,
  kCGEventSourceUserData = 42,
  kCGEventSourceUserID = 43,
  kCGEventSourceGroupID = 44,
  kCGEventSourceStateID = 45,
  kCGScrollWheelEventIsContinuous = 88,
  kCGMouseEventWindowUnderMousePointer = 91,
  kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92,
  kCGEventUnacceleratedPointerMovementX = 170,
  kCGEventUnacceleratedPointerMovementY = 171
}

global['CGEventField'] = CGEventField;

export enum CGEventFilterMask {
  kCGEventFilterMaskPermitLocalMouseEvents = 1,
  kCGEventFilterMaskPermitLocalKeyboardEvents = 2,
  kCGEventFilterMaskPermitSystemDefinedEvents = 4
}

global['CGEventFilterMask'] = CGEventFilterMask;

export enum CGEventFlags {
  kCGEventFlagMaskAlphaShift = 65536,
  kCGEventFlagMaskShift = 131072,
  kCGEventFlagMaskControl = 262144,
  kCGEventFlagMaskAlternate = 524288,
  kCGEventFlagMaskCommand = 1048576,
  kCGEventFlagMaskHelp = 4194304,
  kCGEventFlagMaskSecondaryFn = 8388608,
  kCGEventFlagMaskNumericPad = 2097152,
  kCGEventFlagMaskNonCoalesced = 256
}

global['CGEventFlags'] = CGEventFlags;

export enum CGEventMouseSubtype {
  kCGEventMouseSubtypeDefault = 0,
  kCGEventMouseSubtypeTabletPoint = 1,
  kCGEventMouseSubtypeTabletProximity = 2
}

global['CGEventMouseSubtype'] = CGEventMouseSubtype;

export enum CGEventSourceStateID {
  kCGEventSourceStatePrivate = -1,
  kCGEventSourceStateCombinedSessionState = 0,
  kCGEventSourceStateHIDSystemState = 1
}

global['CGEventSourceStateID'] = CGEventSourceStateID;

export enum CGEventSuppressionState {
  kCGEventSuppressionStateSuppressionInterval = 0,
  kCGEventSuppressionStateRemoteMouseDrag = 1,
  kCGNumberOfEventSuppressionStates = 2
}

global['CGEventSuppressionState'] = CGEventSuppressionState;

export enum CGEventTapLocation {
  kCGHIDEventTap = 0,
  kCGSessionEventTap = 1,
  kCGAnnotatedSessionEventTap = 2
}

global['CGEventTapLocation'] = CGEventTapLocation;

export enum CGEventTapOptions {
  kCGEventTapOptionDefault = 0,
  kCGEventTapOptionListenOnly = 1
}

global['CGEventTapOptions'] = CGEventTapOptions;

export enum CGEventTapPlacement {
  kCGHeadInsertEventTap = 0,
  kCGTailAppendEventTap = 1
}

global['CGEventTapPlacement'] = CGEventTapPlacement;

export enum CGEventType {
  kCGEventNull = 0,
  kCGEventLeftMouseDown = 1,
  kCGEventLeftMouseUp = 2,
  kCGEventRightMouseDown = 3,
  kCGEventRightMouseUp = 4,
  kCGEventMouseMoved = 5,
  kCGEventLeftMouseDragged = 6,
  kCGEventRightMouseDragged = 7,
  kCGEventKeyDown = 10,
  kCGEventKeyUp = 11,
  kCGEventFlagsChanged = 12,
  kCGEventScrollWheel = 22,
  kCGEventTabletPointer = 23,
  kCGEventTabletProximity = 24,
  kCGEventOtherMouseDown = 25,
  kCGEventOtherMouseUp = 26,
  kCGEventOtherMouseDragged = 27,
  kCGEventTapDisabledByTimeout = 4294967294,
  kCGEventTapDisabledByUserInput = 4294967295
}

global['CGEventType'] = CGEventType;

export enum CGFontPostScriptFormat {
  kCGFontPostScriptFormatType1 = 1,
  kCGFontPostScriptFormatType3 = 3,
  kCGFontPostScriptFormatType42 = 42
}

global['CGFontPostScriptFormat'] = CGFontPostScriptFormat;

export enum CGGesturePhase {
  kCGGesturePhaseNone = 0,
  kCGGesturePhaseBegan = 1,
  kCGGesturePhaseChanged = 2,
  kCGGesturePhaseEnded = 4,
  kCGGesturePhaseCancelled = 8,
  kCGGesturePhaseMayBegin = 128
}

global['CGGesturePhase'] = CGGesturePhase;

export enum CGGlyphDeprecatedEnum {
  Min = 0,
  Max = 1
}

global['CGGlyphDeprecatedEnum'] = CGGlyphDeprecatedEnum;

export enum CGGradientDrawingOptions {
  kCGGradientDrawsBeforeStartLocation = 1,
  kCGGradientDrawsAfterEndLocation = 2
}

global['CGGradientDrawingOptions'] = CGGradientDrawingOptions;

export enum CGImageAlphaInfo {
  kCGImageAlphaNone = 0,
  kCGImageAlphaPremultipliedLast = 1,
  kCGImageAlphaPremultipliedFirst = 2,
  kCGImageAlphaLast = 3,
  kCGImageAlphaFirst = 4,
  kCGImageAlphaNoneSkipLast = 5,
  kCGImageAlphaNoneSkipFirst = 6,
  kCGImageAlphaOnly = 7
}

global['CGImageAlphaInfo'] = CGImageAlphaInfo;

export enum CGImageByteOrderInfo {
  kCGImageByteOrderMask = 28672,
  kCGImageByteOrderDefault = 0,
  kCGImageByteOrder16Little = 4096,
  kCGImageByteOrder32Little = 8192,
  kCGImageByteOrder16Big = 12288,
  kCGImageByteOrder32Big = 16384
}

global['CGImageByteOrderInfo'] = CGImageByteOrderInfo;

export enum CGImagePixelFormatInfo {
  kCGImagePixelFormatMask = 983040,
  kCGImagePixelFormatPacked = 0,
  kCGImagePixelFormatRGB555 = 65536,
  kCGImagePixelFormatRGB565 = 131072,
  kCGImagePixelFormatRGB101010 = 196608,
  kCGImagePixelFormatRGBCIF10 = 262144
}

global['CGImagePixelFormatInfo'] = CGImagePixelFormatInfo;

export enum CGInterpolationQuality {
  kCGInterpolationDefault = 0,
  kCGInterpolationNone = 1,
  kCGInterpolationLow = 2,
  kCGInterpolationMedium = 4,
  kCGInterpolationHigh = 3
}

global['CGInterpolationQuality'] = CGInterpolationQuality;

export enum CGLineCap {
  kCGLineCapButt = 0,
  kCGLineCapRound = 1,
  kCGLineCapSquare = 2
}

global['CGLineCap'] = CGLineCap;

export enum CGLineJoin {
  kCGLineJoinMiter = 0,
  kCGLineJoinRound = 1,
  kCGLineJoinBevel = 2
}

global['CGLineJoin'] = CGLineJoin;

export enum CGMomentumScrollPhase {
  kCGMomentumScrollPhaseNone = 0,
  kCGMomentumScrollPhaseBegin = 1,
  kCGMomentumScrollPhaseContinue = 2,
  kCGMomentumScrollPhaseEnd = 3
}

global['CGMomentumScrollPhase'] = CGMomentumScrollPhase;

export enum CGMouseButton {
  kCGMouseButtonLeft = 0,
  kCGMouseButtonRight = 1,
  kCGMouseButtonCenter = 2
}

global['CGMouseButton'] = CGMouseButton;

export enum CGPDFAccessPermissions {
  kCGPDFAllowsLowQualityPrinting = 1,
  kCGPDFAllowsHighQualityPrinting = 2,
  kCGPDFAllowsDocumentChanges = 4,
  kCGPDFAllowsDocumentAssembly = 8,
  kCGPDFAllowsContentCopying = 16,
  kCGPDFAllowsContentAccessibility = 32,
  kCGPDFAllowsCommenting = 64,
  kCGPDFAllowsFormFieldEntry = 128
}

global['CGPDFAccessPermissions'] = CGPDFAccessPermissions;

export enum CGPDFBox {
  kCGPDFMediaBox = 0,
  kCGPDFCropBox = 1,
  kCGPDFBleedBox = 2,
  kCGPDFTrimBox = 3,
  kCGPDFArtBox = 4
}

global['CGPDFBox'] = CGPDFBox;

export enum CGPDFDataFormat {
  Raw = 0,
  JPEGEncoded = 1,
  JPEG2000 = 2
}

global['CGPDFDataFormat'] = CGPDFDataFormat;

export enum CGPDFObjectType {
  kCGPDFObjectTypeNull = 1,
  kCGPDFObjectTypeBoolean = 2,
  kCGPDFObjectTypeInteger = 3,
  kCGPDFObjectTypeReal = 4,
  kCGPDFObjectTypeName = 5,
  kCGPDFObjectTypeString = 6,
  kCGPDFObjectTypeArray = 7,
  kCGPDFObjectTypeDictionary = 8,
  kCGPDFObjectTypeStream = 9
}

global['CGPDFObjectType'] = CGPDFObjectType;

export enum CGPDFTagType {
  Document = 100,
  Part = 101,
  Art = 102,
  Section = 103,
  Div = 104,
  BlockQuote = 105,
  Caption = 106,
  TOC = 107,
  TOCI = 108,
  Index = 109,
  NonStructure = 110,
  Private = 111,
  Paragraph = 200,
  Header = 201,
  Header1 = 202,
  Header2 = 203,
  Header3 = 204,
  Header4 = 205,
  Header5 = 206,
  Header6 = 207,
  List = 300,
  ListItem = 301,
  Label = 302,
  ListBody = 303,
  Table = 400,
  TableRow = 401,
  TableHeaderCell = 402,
  TableDataCell = 403,
  TableHeader = 404,
  TableBody = 405,
  TableFooter = 406,
  Span = 500,
  Quote = 501,
  Note = 502,
  Reference = 503,
  Bibliography = 504,
  Code = 505,
  Link = 506,
  Annotation = 507,
  Ruby = 600,
  RubyBaseText = 601,
  RubyAnnotationText = 602,
  RubyPunctuation = 603,
  Warichu = 604,
  WarichuText = 605,
  WarichuPunctiation = 606,
  Figure = 700,
  Formula = 701,
  Form = 702
}

global['CGPDFTagType'] = CGPDFTagType;

export enum CGPathDrawingMode {
  kCGPathFill = 0,
  kCGPathEOFill = 1,
  kCGPathStroke = 2,
  kCGPathFillStroke = 3,
  kCGPathEOFillStroke = 4
}

global['CGPathDrawingMode'] = CGPathDrawingMode;

export enum CGPathElementType {
  kCGPathElementMoveToPoint = 0,
  kCGPathElementAddLineToPoint = 1,
  kCGPathElementAddQuadCurveToPoint = 2,
  kCGPathElementAddCurveToPoint = 3,
  kCGPathElementCloseSubpath = 4
}

global['CGPathElementType'] = CGPathElementType;

export enum CGPatternTiling {
  kCGPatternTilingNoDistortion = 0,
  kCGPatternTilingConstantSpacingMinimalDistortion = 1,
  kCGPatternTilingConstantSpacing = 2
}

global['CGPatternTiling'] = CGPatternTiling;

export enum CGRectEdge {
  MinXEdge = 0,
  MinYEdge = 1,
  MaxXEdge = 2,
  MaxYEdge = 3
}

global['CGRectEdge'] = CGRectEdge;

export enum CGScreenUpdateOperation {
  kCGScreenUpdateOperationRefresh = 0,
  kCGScreenUpdateOperationMove = 1,
  kCGScreenUpdateOperationReducedDirtyRectangleCount = 2147483648
}

global['CGScreenUpdateOperation'] = CGScreenUpdateOperation;

export enum CGScrollEventUnit {
  kCGScrollEventUnitPixel = 0,
  kCGScrollEventUnitLine = 1
}

global['CGScrollEventUnit'] = CGScrollEventUnit;

export enum CGScrollPhase {
  kCGScrollPhaseBegan = 1,
  kCGScrollPhaseChanged = 2,
  kCGScrollPhaseEnded = 4,
  kCGScrollPhaseCancelled = 8,
  kCGScrollPhaseMayBegin = 128
}

global['CGScrollPhase'] = CGScrollPhase;

export enum CGTextDrawingMode {
  kCGTextFill = 0,
  kCGTextStroke = 1,
  kCGTextFillStroke = 2,
  kCGTextInvisible = 3,
  kCGTextFillClip = 4,
  kCGTextStrokeClip = 5,
  kCGTextFillStrokeClip = 6,
  kCGTextClip = 7
}

global['CGTextDrawingMode'] = CGTextDrawingMode;

export enum CGWindowBackingType {
  kCGBackingStoreRetained = 0,
  kCGBackingStoreNonretained = 1,
  kCGBackingStoreBuffered = 2
}

global['CGWindowBackingType'] = CGWindowBackingType;

export enum CGWindowImageOption {
  kCGWindowImageDefault = 0,
  kCGWindowImageBoundsIgnoreFraming = 1,
  kCGWindowImageShouldBeOpaque = 2,
  kCGWindowImageOnlyShadows = 4,
  kCGWindowImageBestResolution = 8,
  kCGWindowImageNominalResolution = 16
}

global['CGWindowImageOption'] = CGWindowImageOption;

export enum CGWindowLevelKey {
  kCGBaseWindowLevelKey = 0,
  kCGMinimumWindowLevelKey = 1,
  kCGDesktopWindowLevelKey = 2,
  kCGBackstopMenuLevelKey = 3,
  kCGNormalWindowLevelKey = 4,
  kCGFloatingWindowLevelKey = 5,
  kCGTornOffMenuWindowLevelKey = 6,
  kCGDockWindowLevelKey = 7,
  kCGMainMenuWindowLevelKey = 8,
  kCGStatusWindowLevelKey = 9,
  kCGModalPanelWindowLevelKey = 10,
  kCGPopUpMenuWindowLevelKey = 11,
  kCGDraggingWindowLevelKey = 12,
  kCGScreenSaverWindowLevelKey = 13,
  kCGMaximumWindowLevelKey = 14,
  kCGOverlayWindowLevelKey = 15,
  kCGHelpWindowLevelKey = 16,
  kCGUtilityWindowLevelKey = 17,
  kCGDesktopIconWindowLevelKey = 18,
  kCGCursorWindowLevelKey = 19,
  kCGAssistiveTechHighWindowLevelKey = 20,
  kCGNumberOfWindowLevelKeys = 21
}

global['CGWindowLevelKey'] = CGWindowLevelKey;

export enum CGWindowListOption {
  kCGWindowListOptionAll = 0,
  kCGWindowListOptionOnScreenOnly = 1,
  kCGWindowListOptionOnScreenAboveWindow = 2,
  kCGWindowListOptionOnScreenBelowWindow = 4,
  kCGWindowListOptionIncludingWindow = 8,
  kCGWindowListExcludeDesktopElements = 16
}

global['CGWindowListOption'] = CGWindowListOption;

export enum CGWindowSharingType {
  kCGWindowSharingNone = 0,
  kCGWindowSharingReadOnly = 1,
  kCGWindowSharingReadWrite = 2
}

global['CGWindowSharingType'] = CGWindowSharingType;

export enum CIDataMatrixCodeECCVersion {
  Version000 = 0,
  Version050 = 50,
  Version080 = 80,
  Version100 = 100,
  Version140 = 140,
  Version200 = 200
}

global['CIDataMatrixCodeECCVersion'] = CIDataMatrixCodeECCVersion;

export enum CIQRCodeErrorCorrectionLevel {
  L = 76,
  M = 77,
  Q = 81,
  H = 72
}

global['CIQRCodeErrorCorrectionLevel'] = CIQRCodeErrorCorrectionLevel;

export enum CIRenderDestinationAlphaMode {
  None = 0,
  Premultiplied = 1,
  Unpremultiplied = 2
}

global['CIRenderDestinationAlphaMode'] = CIRenderDestinationAlphaMode;

export enum CMTimeFlags {
  kCMTimeFlags_Valid = 1,
  kCMTimeFlags_HasBeenRounded = 2,
  kCMTimeFlags_PositiveInfinity = 4,
  kCMTimeFlags_NegativeInfinity = 8,
  kCMTimeFlags_Indefinite = 16,
  kCMTimeFlags_ImpliedValueFlagsMask = 28
}

global['CMTimeFlags'] = CMTimeFlags;

export enum CMTimeRoundingMethod {
  kCMTimeRoundingMethod_RoundHalfAwayFromZero = 1,
  kCMTimeRoundingMethod_RoundTowardZero = 2,
  kCMTimeRoundingMethod_RoundAwayFromZero = 3,
  kCMTimeRoundingMethod_QuickTime = 4,
  kCMTimeRoundingMethod_RoundTowardPositiveInfinity = 5,
  kCMTimeRoundingMethod_RoundTowardNegativeInfinity = 6,
  kCMTimeRoundingMethod_Default = 1
}

global['CMTimeRoundingMethod'] = CMTimeRoundingMethod;

export enum AlignmentOptions {
  MinXInward = 1,
  MinYInward = 2,
  MaxXInward = 4,
  MaxYInward = 8,
  WidthInward = 16,
  HeightInward = 32,
  MinXOutward = 256,
  MinYOutward = 512,
  MaxXOutward = 1024,
  MaxYOutward = 2048,
  WidthOutward = 4096,
  HeightOutward = 8192,
  MinXNearest = 65536,
  MinYNearest = 131072,
  MaxXNearest = 262144,
  MaxYNearest = 524288,
  WidthNearest = 1048576,
  HeightNearest = 2097152,
  RectFlipped = -9223372036854775808,
  AllEdgesInward = 15,
  AllEdgesOutward = 3840,
  AllEdgesNearest = 983040
}

global['AlignmentOptions'] = AlignmentOptions;

export enum NSBinarySearchingOptions {
  FirstEqual = 256,
  LastEqual = 512,
  InsertionIndex = 1024
}

global['NSBinarySearchingOptions'] = NSBinarySearchingOptions;

export enum NSCollectionChangeType {
  Insert = 0,
  Remove = 1
}

global['NSCollectionChangeType'] = NSCollectionChangeType;

export enum ComparisonResult {
  OrderedAscending = -1,
  OrderedSame = 0,
  OrderedDescending = 1
}

global['ComparisonResult'] = ComparisonResult;

export enum NSEnumerationOptions {
  Concurrent = 1,
  Reverse = 2
}

global['NSEnumerationOptions'] = NSEnumerationOptions;

export enum NSItemProviderFileOptions {
  OpenInPlace = 1
}

global['NSItemProviderFileOptions'] = NSItemProviderFileOptions;

export enum NSItemProviderRepresentationVisibility {
  All = 0,
  Team = 1,
  Group = 2,
  OwnProcess = 3
}

global['NSItemProviderRepresentationVisibility'] = NSItemProviderRepresentationVisibility;

export enum NSKeyValueChange {
  Setting = 1,
  Insertion = 2,
  Removal = 3,
  Replacement = 4
}

global['NSKeyValueChange'] = NSKeyValueChange;

export enum NSKeyValueObservingOptions {
  New = 1,
  Old = 2,
  Initial = 4,
  Prior = 8
}

global['NSKeyValueObservingOptions'] = NSKeyValueObservingOptions;

export enum NSKeyValueSetMutationKind {
  UnionSetMutation = 1,
  MinusSetMutation = 2,
  IntersectSetMutation = 3,
  SetSetMutation = 4
}

global['NSKeyValueSetMutationKind'] = NSKeyValueSetMutationKind;

export enum NSLinguisticTaggerUnit {
  Word = 0,
  Sentence = 1,
  Paragraph = 2,
  Document = 3
}

global['NSLinguisticTaggerUnit'] = NSLinguisticTaggerUnit;

export enum NSOrderedCollectionDifferenceCalculationOptions {
  OmitInsertedObjects = 1,
  OmitRemovedObjects = 2,
  InferMoves = 4
}

global['NSOrderedCollectionDifferenceCalculationOptions'] = NSOrderedCollectionDifferenceCalculationOptions;

export enum QualityOfService {
  UserInteractive = 33,
  UserInitiated = 25,
  Utility = 17,
  Background = 9,
  Default = -1
}

global['QualityOfService'] = QualityOfService;

export enum NSRectEdge {
  RectEdgeMinX = 0,
  RectEdgeMinY = 1,
  RectEdgeMaxX = 2,
  RectEdgeMaxY = 3,
  MinXEdge = 0,
  MinYEdge = 1,
  MaxXEdge = 2,
  MaxYEdge = 3
}

global['NSRectEdge'] = NSRectEdge;

export enum NSSaveOptions {
  Yes = 0,
  No = 1,
  Ask = 2
}

global['NSSaveOptions'] = NSSaveOptions;

export enum NSSortOptions {
  Concurrent = 1,
  Stable = 16
}

global['NSSortOptions'] = NSSortOptions;

export enum NSURLErrorNetworkUnavailableReason {
  Cellular = 0,
  Expensive = 1,
  Constrained = 2
}

global['NSURLErrorNetworkUnavailableReason'] = NSURLErrorNetworkUnavailableReason;

export enum NSURLSessionDelayedRequestDisposition {
  ContinueLoading = 0,
  UseNewRequest = 1,
  Cancel = 2
}

global['NSURLSessionDelayedRequestDisposition'] = NSURLSessionDelayedRequestDisposition;

export enum NSURLSessionWebSocketMessageType {
  Data = 0,
  String = 1
}

global['NSURLSessionWebSocketMessageType'] = NSURLSessionWebSocketMessageType;

export enum IKCameraDeviceViewDisplayMode {
  None = -1,
  Table = 0,
  Icon = 1
}

global['IKCameraDeviceViewDisplayMode'] = IKCameraDeviceViewDisplayMode;

export enum IKCameraDeviceViewTransferMode {
  FileBased = 0,
  MemoryBased = 1
}

global['IKCameraDeviceViewTransferMode'] = IKCameraDeviceViewTransferMode;

export enum IKDeviceBrowserViewDisplayMode {
  Table = 0,
  Outline = 1,
  Icon = 2
}

global['IKDeviceBrowserViewDisplayMode'] = IKDeviceBrowserViewDisplayMode;

export enum IKImageBrowserCellState {
  StateNoImage = 0,
  StateInvalid = 1,
  StateReady = 2
}

global['IKImageBrowserCellState'] = IKImageBrowserCellState;

export enum IKImageBrowserDropOperation {
  On = 0,
  Before = 1
}

global['IKImageBrowserDropOperation'] = IKImageBrowserDropOperation;

export enum IKScannerDeviceViewDisplayMode {
  None = -1,
  Simple = 0,
  Advanced = 1
}

global['IKScannerDeviceViewDisplayMode'] = IKScannerDeviceViewDisplayMode;

export enum IKScannerDeviceViewTransferMode {
  FileBased = 0,
  MemoryBased = 1
}

global['IKScannerDeviceViewTransferMode'] = IKScannerDeviceViewTransferMode;

export enum QCPlugInExecutionMode {
  kQCPlugInExecutionModeProvider = 1,
  kQCPlugInExecutionModeProcessor = 2,
  kQCPlugInExecutionModeConsumer = 3
}

global['QCPlugInExecutionMode'] = QCPlugInExecutionMode;

export enum QCPlugInTimeMode {
  kQCPlugInTimeModeNone = 0,
  kQCPlugInTimeModeIdle = 1,
  kQCPlugInTimeModeTimeBase = 2
}

global['QCPlugInTimeMode'] = QCPlugInTimeMode;

export enum QLPreviewViewStyle {
  Normal = 0,
  Compact = 1
}

global['QLPreviewViewStyle'] = QLPreviewViewStyle;

export enum CAAutoresizingMask {
  kCALayerNotSizable = 0,
  kCALayerMinXMargin = 1,
  kCALayerWidthSizable = 2,
  kCALayerMaxXMargin = 4,
  kCALayerMinYMargin = 8,
  kCALayerHeightSizable = 16,
  kCALayerMaxYMargin = 32
}

global['CAAutoresizingMask'] = CAAutoresizingMask;

export enum CAConstraintAttribute {
  kCAConstraintMinX = 0,
  kCAConstraintMidX = 1,
  kCAConstraintMaxX = 2,
  kCAConstraintWidth = 3,
  kCAConstraintMinY = 4,
  kCAConstraintMidY = 5,
  kCAConstraintMaxY = 6,
  kCAConstraintHeight = 7
}

global['CAConstraintAttribute'] = CAConstraintAttribute;

export enum CACornerMask {
  kCALayerMinXMinYCorner = 1,
  kCALayerMaxXMinYCorner = 2,
  kCALayerMinXMaxYCorner = 4,
  kCALayerMaxXMaxYCorner = 8
}

global['CACornerMask'] = CACornerMask;

export enum CAEdgeAntialiasingMask {
  kCALayerLeftEdge = 1,
  kCALayerRightEdge = 2,
  kCALayerBottomEdge = 4,
  kCALayerTopEdge = 8
}

global['CAEdgeAntialiasingMask'] = CAEdgeAntialiasingMask;

// export let AVAssetExportPreset1280x720: string;
// global['AVAssetExportPreset1280x720'] = AVAssetExportPreset1280x720;

// export let AVAssetExportPreset1920x1080: string;
// global['AVAssetExportPreset1920x1080'] = AVAssetExportPreset1920x1080;

// export let AVAssetExportPreset3840x2160: string;
// global['AVAssetExportPreset3840x2160'] = AVAssetExportPreset3840x2160;

// export let AVAssetExportPreset640x480: string;
// global['AVAssetExportPreset640x480'] = AVAssetExportPreset640x480;

// export let AVAssetExportPreset960x540: string;
// global['AVAssetExportPreset960x540'] = AVAssetExportPreset960x540;

// export let AVAssetExportPresetAppleM4A: string;
// global['AVAssetExportPresetAppleM4A'] = AVAssetExportPresetAppleM4A;

// export let AVAssetExportPresetAppleM4V1080pHD: string;
// global['AVAssetExportPresetAppleM4V1080pHD'] = AVAssetExportPresetAppleM4V1080pHD;

// export let AVAssetExportPresetAppleM4V480pSD: string;
// global['AVAssetExportPresetAppleM4V480pSD'] = AVAssetExportPresetAppleM4V480pSD;

// export let AVAssetExportPresetAppleM4V720pHD: string;
// global['AVAssetExportPresetAppleM4V720pHD'] = AVAssetExportPresetAppleM4V720pHD;

// export let AVAssetExportPresetAppleM4VAppleTV: string;
// global['AVAssetExportPresetAppleM4VAppleTV'] = AVAssetExportPresetAppleM4VAppleTV;

// export let AVAssetExportPresetAppleM4VCellular: string;
// global['AVAssetExportPresetAppleM4VCellular'] = AVAssetExportPresetAppleM4VCellular;

// export let AVAssetExportPresetAppleM4VWiFi: string;
// global['AVAssetExportPresetAppleM4VWiFi'] = AVAssetExportPresetAppleM4VWiFi;

// export let AVAssetExportPresetAppleM4ViPod: string;
// global['AVAssetExportPresetAppleM4ViPod'] = AVAssetExportPresetAppleM4ViPod;

// export let AVAssetExportPresetAppleProRes422LPCM: string;
// global['AVAssetExportPresetAppleProRes422LPCM'] = AVAssetExportPresetAppleProRes422LPCM;

// export let AVAssetExportPresetAppleProRes4444LPCM: string;
// global['AVAssetExportPresetAppleProRes4444LPCM'] = AVAssetExportPresetAppleProRes4444LPCM;

// export let AVAssetExportPresetHEVC1920x1080: string;
// global['AVAssetExportPresetHEVC1920x1080'] = AVAssetExportPresetHEVC1920x1080;

// export let AVAssetExportPresetHEVC1920x1080WithAlpha: string;
// global['AVAssetExportPresetHEVC1920x1080WithAlpha'] = AVAssetExportPresetHEVC1920x1080WithAlpha;

// export let AVAssetExportPresetHEVC3840x2160: string;
// global['AVAssetExportPresetHEVC3840x2160'] = AVAssetExportPresetHEVC3840x2160;

// export let AVAssetExportPresetHEVC3840x2160WithAlpha: string;
// global['AVAssetExportPresetHEVC3840x2160WithAlpha'] = AVAssetExportPresetHEVC3840x2160WithAlpha;

// export let AVAssetExportPresetHEVCHighestQuality: string;
// global['AVAssetExportPresetHEVCHighestQuality'] = AVAssetExportPresetHEVCHighestQuality;

// export let AVAssetExportPresetHEVCHighestQualityWithAlpha: string;
// global['AVAssetExportPresetHEVCHighestQualityWithAlpha'] = AVAssetExportPresetHEVCHighestQualityWithAlpha;

// export let AVAssetExportPresetHighestQuality: string;
// global['AVAssetExportPresetHighestQuality'] = AVAssetExportPresetHighestQuality;

// export let AVAssetExportPresetLowQuality: string;
// global['AVAssetExportPresetLowQuality'] = AVAssetExportPresetLowQuality;

// export let AVAssetExportPresetMediumQuality: string;
// global['AVAssetExportPresetMediumQuality'] = AVAssetExportPresetMediumQuality;

// export let AVAssetExportPresetPassthrough: string;
// global['AVAssetExportPresetPassthrough'] = AVAssetExportPresetPassthrough;

// export let AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey: string;
// global['AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey'] = AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey;

// export let AVAudioBitRateStrategy_Constant: string;
// global['AVAudioBitRateStrategy_Constant'] = AVAudioBitRateStrategy_Constant;

// export let AVAudioBitRateStrategy_LongTermAverage: string;
// global['AVAudioBitRateStrategy_LongTermAverage'] = AVAudioBitRateStrategy_LongTermAverage;

// export let AVAudioBitRateStrategy_Variable: string;
// global['AVAudioBitRateStrategy_Variable'] = AVAudioBitRateStrategy_Variable;

// export let AVAudioBitRateStrategy_VariableConstrained: string;
// global['AVAudioBitRateStrategy_VariableConstrained'] = AVAudioBitRateStrategy_VariableConstrained;

// export let AVAudioFileTypeKey: string;
// global['AVAudioFileTypeKey'] = AVAudioFileTypeKey;

// export let AVAudioUnitManufacturerNameApple: string;
// global['AVAudioUnitManufacturerNameApple'] = AVAudioUnitManufacturerNameApple;

// export let AVAudioUnitTypeEffect: string;
// global['AVAudioUnitTypeEffect'] = AVAudioUnitTypeEffect;

// export let AVAudioUnitTypeFormatConverter: string;
// global['AVAudioUnitTypeFormatConverter'] = AVAudioUnitTypeFormatConverter;

// export let AVAudioUnitTypeGenerator: string;
// global['AVAudioUnitTypeGenerator'] = AVAudioUnitTypeGenerator;

// export let AVAudioUnitTypeMIDIProcessor: string;
// global['AVAudioUnitTypeMIDIProcessor'] = AVAudioUnitTypeMIDIProcessor;

// export let AVAudioUnitTypeMixer: string;
// global['AVAudioUnitTypeMixer'] = AVAudioUnitTypeMixer;

// export let AVAudioUnitTypeMusicDevice: string;
// global['AVAudioUnitTypeMusicDevice'] = AVAudioUnitTypeMusicDevice;

// export let AVAudioUnitTypeMusicEffect: string;
// global['AVAudioUnitTypeMusicEffect'] = AVAudioUnitTypeMusicEffect;

// export let AVAudioUnitTypeOfflineEffect: string;
// global['AVAudioUnitTypeOfflineEffect'] = AVAudioUnitTypeOfflineEffect;

// export let AVAudioUnitTypeOutput: string;
// global['AVAudioUnitTypeOutput'] = AVAudioUnitTypeOutput;

// export let AVAudioUnitTypePanner: string;
// global['AVAudioUnitTypePanner'] = AVAudioUnitTypePanner;

// export let AVCaptureSessionErrorKey: string;
// global['AVCaptureSessionErrorKey'] = AVCaptureSessionErrorKey;

// export let AVChannelLayoutKey: string;
// global['AVChannelLayoutKey'] = AVChannelLayoutKey;

// export let AVContentKeyRequestProtocolVersionsKey: string;
// global['AVContentKeyRequestProtocolVersionsKey'] = AVContentKeyRequestProtocolVersionsKey;

// export let AVContentKeyRequestRequiresValidationDataInSecureTokenKey: string;
// global['AVContentKeyRequestRequiresValidationDataInSecureTokenKey'] = AVContentKeyRequestRequiresValidationDataInSecureTokenKey;

// export let AVCoreAnimationBeginTimeAtZero: number;
// global['AVCoreAnimationBeginTimeAtZero'] = AVCoreAnimationBeginTimeAtZero;

// export let AVEncoderAudioQualityForVBRKey: string;
// global['AVEncoderAudioQualityForVBRKey'] = AVEncoderAudioQualityForVBRKey;

// export let AVEncoderAudioQualityKey: string;
// global['AVEncoderAudioQualityKey'] = AVEncoderAudioQualityKey;

// export let AVEncoderBitDepthHintKey: string;
// global['AVEncoderBitDepthHintKey'] = AVEncoderBitDepthHintKey;

// export let AVEncoderBitRateKey: string;
// global['AVEncoderBitRateKey'] = AVEncoderBitRateKey;

// export let AVEncoderBitRatePerChannelKey: string;
// global['AVEncoderBitRatePerChannelKey'] = AVEncoderBitRatePerChannelKey;

// export let AVEncoderBitRateStrategyKey: string;
// global['AVEncoderBitRateStrategyKey'] = AVEncoderBitRateStrategyKey;

// export let AVErrorDeviceKey: string;
// global['AVErrorDeviceKey'] = AVErrorDeviceKey;

// export let AVErrorDiscontinuityFlagsKey: string;
// global['AVErrorDiscontinuityFlagsKey'] = AVErrorDiscontinuityFlagsKey;

// export let AVErrorFileSizeKey: string;
// global['AVErrorFileSizeKey'] = AVErrorFileSizeKey;

// export let AVErrorFileTypeKey: string;
// global['AVErrorFileTypeKey'] = AVErrorFileTypeKey;

// export let AVErrorMediaSubTypeKey: string;
// global['AVErrorMediaSubTypeKey'] = AVErrorMediaSubTypeKey;

// export let AVErrorMediaTypeKey: string;
// global['AVErrorMediaTypeKey'] = AVErrorMediaTypeKey;

// export let AVErrorPIDKey: string;
// global['AVErrorPIDKey'] = AVErrorPIDKey;

// export let AVErrorPersistentTrackIDKey: string;
// global['AVErrorPersistentTrackIDKey'] = AVErrorPersistentTrackIDKey;

// export let AVErrorPresentationTimeStampKey: string;
// global['AVErrorPresentationTimeStampKey'] = AVErrorPresentationTimeStampKey;

// export let AVErrorRecordingSuccessfullyFinishedKey: string;
// global['AVErrorRecordingSuccessfullyFinishedKey'] = AVErrorRecordingSuccessfullyFinishedKey;

// export let AVErrorTimeKey: string;
// global['AVErrorTimeKey'] = AVErrorTimeKey;

// export let AVFormatIDKey: string;
// global['AVFormatIDKey'] = AVFormatIDKey;

// export let AVFoundationErrorDomain: string;
// global['AVFoundationErrorDomain'] = AVFoundationErrorDomain;

// export let AVLinearPCMBitDepthKey: string;
// global['AVLinearPCMBitDepthKey'] = AVLinearPCMBitDepthKey;

// export let AVLinearPCMIsBigEndianKey: string;
// global['AVLinearPCMIsBigEndianKey'] = AVLinearPCMIsBigEndianKey;

// export let AVLinearPCMIsFloatKey: string;
// global['AVLinearPCMIsFloatKey'] = AVLinearPCMIsFloatKey;

// export let AVLinearPCMIsNonInterleaved: string;
// global['AVLinearPCMIsNonInterleaved'] = AVLinearPCMIsNonInterleaved;

// export let AVMovieReferenceRestrictionsKey: string;
// global['AVMovieReferenceRestrictionsKey'] = AVMovieReferenceRestrictionsKey;

// export let AVNumberOfChannelsKey: string;
// global['AVNumberOfChannelsKey'] = AVNumberOfChannelsKey;

// export let AVPlayerItemFailedToPlayToEndTimeErrorKey: string;
// global['AVPlayerItemFailedToPlayToEndTimeErrorKey'] = AVPlayerItemFailedToPlayToEndTimeErrorKey;

// export let AVPlayerItemTrackVideoFieldModeDeinterlaceFields: string;
// global['AVPlayerItemTrackVideoFieldModeDeinterlaceFields'] = AVPlayerItemTrackVideoFieldModeDeinterlaceFields;

// export let AVSampleBufferAudioRendererFlushTimeKey: string;
// global['AVSampleBufferAudioRendererFlushTimeKey'] = AVSampleBufferAudioRendererFlushTimeKey;

// export let AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey: string;
// global['AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey'] = AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey;

// export let AVSampleRateConverterAlgorithmKey: string;
// global['AVSampleRateConverterAlgorithmKey'] = AVSampleRateConverterAlgorithmKey;

// export let AVSampleRateConverterAlgorithm_Mastering: string;
// global['AVSampleRateConverterAlgorithm_Mastering'] = AVSampleRateConverterAlgorithm_Mastering;

// export let AVSampleRateConverterAlgorithm_MinimumPhase: string;
// global['AVSampleRateConverterAlgorithm_MinimumPhase'] = AVSampleRateConverterAlgorithm_MinimumPhase;

// export let AVSampleRateConverterAlgorithm_Normal: string;
// global['AVSampleRateConverterAlgorithm_Normal'] = AVSampleRateConverterAlgorithm_Normal;

// export let AVSampleRateConverterAudioQualityKey: string;
// global['AVSampleRateConverterAudioQualityKey'] = AVSampleRateConverterAudioQualityKey;

// export let AVSampleRateKey: string;
// global['AVSampleRateKey'] = AVSampleRateKey;

// export let AVSpeechSynthesisIPANotationAttribute: string;
// global['AVSpeechSynthesisIPANotationAttribute'] = AVSpeechSynthesisIPANotationAttribute;

// export let AVSpeechSynthesisVoiceIdentifierAlex: string;
// global['AVSpeechSynthesisVoiceIdentifierAlex'] = AVSpeechSynthesisVoiceIdentifierAlex;

// export let AVSpeechUtteranceDefaultSpeechRate: number;
// global['AVSpeechUtteranceDefaultSpeechRate'] = AVSpeechUtteranceDefaultSpeechRate;

// export let AVSpeechUtteranceMaximumSpeechRate: number;
// global['AVSpeechUtteranceMaximumSpeechRate'] = AVSpeechUtteranceMaximumSpeechRate;

// export let AVSpeechUtteranceMinimumSpeechRate: number;
// global['AVSpeechUtteranceMinimumSpeechRate'] = AVSpeechUtteranceMinimumSpeechRate;

// export let AVStreamingKeyDeliveryContentKeyType: string;
// global['AVStreamingKeyDeliveryContentKeyType'] = AVStreamingKeyDeliveryContentKeyType;

// export let AVStreamingKeyDeliveryPersistentContentKeyType: string;
// global['AVStreamingKeyDeliveryPersistentContentKeyType'] = AVStreamingKeyDeliveryPersistentContentKeyType;

// export let AVURLAssetAllowsCellularAccessKey: string;
// global['AVURLAssetAllowsCellularAccessKey'] = AVURLAssetAllowsCellularAccessKey;

// export let AVURLAssetAllowsConstrainedNetworkAccessKey: string;
// global['AVURLAssetAllowsConstrainedNetworkAccessKey'] = AVURLAssetAllowsConstrainedNetworkAccessKey;

// export let AVURLAssetAllowsExpensiveNetworkAccessKey: string;
// global['AVURLAssetAllowsExpensiveNetworkAccessKey'] = AVURLAssetAllowsExpensiveNetworkAccessKey;

// export let AVURLAssetHTTPCookiesKey: string;
// global['AVURLAssetHTTPCookiesKey'] = AVURLAssetHTTPCookiesKey;

// export let AVURLAssetPreferPreciseDurationAndTimingKey: string;
// global['AVURLAssetPreferPreciseDurationAndTimingKey'] = AVURLAssetPreferPreciseDurationAndTimingKey;

// export let AVURLAssetReferenceRestrictionsKey: string;
// global['AVURLAssetReferenceRestrictionsKey'] = AVURLAssetReferenceRestrictionsKey;

// export let AVVideoAllowFrameReorderingKey: string;
// global['AVVideoAllowFrameReorderingKey'] = AVVideoAllowFrameReorderingKey;

// export let AVVideoAllowWideColorKey: string;
// global['AVVideoAllowWideColorKey'] = AVVideoAllowWideColorKey;

// export let AVVideoAverageBitRateKey: string;
// global['AVVideoAverageBitRateKey'] = AVVideoAverageBitRateKey;

// export let AVVideoAverageNonDroppableFrameRateKey: string;
// global['AVVideoAverageNonDroppableFrameRateKey'] = AVVideoAverageNonDroppableFrameRateKey;

// export let AVVideoCleanApertureHeightKey: string;
// global['AVVideoCleanApertureHeightKey'] = AVVideoCleanApertureHeightKey;

// export let AVVideoCleanApertureHorizontalOffsetKey: string;
// global['AVVideoCleanApertureHorizontalOffsetKey'] = AVVideoCleanApertureHorizontalOffsetKey;

// export let AVVideoCleanApertureKey: string;
// global['AVVideoCleanApertureKey'] = AVVideoCleanApertureKey;

// export let AVVideoCleanApertureVerticalOffsetKey: string;
// global['AVVideoCleanApertureVerticalOffsetKey'] = AVVideoCleanApertureVerticalOffsetKey;

// export let AVVideoCleanApertureWidthKey: string;
// global['AVVideoCleanApertureWidthKey'] = AVVideoCleanApertureWidthKey;

// export let AVVideoCodecKey: string;
// global['AVVideoCodecKey'] = AVVideoCodecKey;

// export let AVVideoColorPrimariesKey: string;
// global['AVVideoColorPrimariesKey'] = AVVideoColorPrimariesKey;

// export let AVVideoColorPrimaries_EBU_3213: string;
// global['AVVideoColorPrimaries_EBU_3213'] = AVVideoColorPrimaries_EBU_3213;

// export let AVVideoColorPrimaries_ITU_R_2020: string;
// global['AVVideoColorPrimaries_ITU_R_2020'] = AVVideoColorPrimaries_ITU_R_2020;

// export let AVVideoColorPrimaries_ITU_R_709_2: string;
// global['AVVideoColorPrimaries_ITU_R_709_2'] = AVVideoColorPrimaries_ITU_R_709_2;

// export let AVVideoColorPrimaries_P3_D65: string;
// global['AVVideoColorPrimaries_P3_D65'] = AVVideoColorPrimaries_P3_D65;

// export let AVVideoColorPrimaries_SMPTE_C: string;
// global['AVVideoColorPrimaries_SMPTE_C'] = AVVideoColorPrimaries_SMPTE_C;

// export let AVVideoColorPropertiesKey: string;
// global['AVVideoColorPropertiesKey'] = AVVideoColorPropertiesKey;

// export let AVVideoCompressionPropertiesKey: string;
// global['AVVideoCompressionPropertiesKey'] = AVVideoCompressionPropertiesKey;

// export let AVVideoDecompressionPropertiesKey: string;
// global['AVVideoDecompressionPropertiesKey'] = AVVideoDecompressionPropertiesKey;

// export let AVVideoEncoderSpecificationKey: string;
// global['AVVideoEncoderSpecificationKey'] = AVVideoEncoderSpecificationKey;

// export let AVVideoExpectedSourceFrameRateKey: string;
// global['AVVideoExpectedSourceFrameRateKey'] = AVVideoExpectedSourceFrameRateKey;

// export let AVVideoH264EntropyModeCABAC: string;
// global['AVVideoH264EntropyModeCABAC'] = AVVideoH264EntropyModeCABAC;

// export let AVVideoH264EntropyModeCAVLC: string;
// global['AVVideoH264EntropyModeCAVLC'] = AVVideoH264EntropyModeCAVLC;

// export let AVVideoH264EntropyModeKey: string;
// global['AVVideoH264EntropyModeKey'] = AVVideoH264EntropyModeKey;

// export let AVVideoHeightKey: string;
// global['AVVideoHeightKey'] = AVVideoHeightKey;

// export let AVVideoMaxKeyFrameIntervalDurationKey: string;
// global['AVVideoMaxKeyFrameIntervalDurationKey'] = AVVideoMaxKeyFrameIntervalDurationKey;

// export let AVVideoMaxKeyFrameIntervalKey: string;
// global['AVVideoMaxKeyFrameIntervalKey'] = AVVideoMaxKeyFrameIntervalKey;

// export let AVVideoPixelAspectRatioHorizontalSpacingKey: string;
// global['AVVideoPixelAspectRatioHorizontalSpacingKey'] = AVVideoPixelAspectRatioHorizontalSpacingKey;

// export let AVVideoPixelAspectRatioKey: string;
// global['AVVideoPixelAspectRatioKey'] = AVVideoPixelAspectRatioKey;

// export let AVVideoPixelAspectRatioVerticalSpacingKey: string;
// global['AVVideoPixelAspectRatioVerticalSpacingKey'] = AVVideoPixelAspectRatioVerticalSpacingKey;

// export let AVVideoProfileLevelH264Baseline30: string;
// global['AVVideoProfileLevelH264Baseline30'] = AVVideoProfileLevelH264Baseline30;

// export let AVVideoProfileLevelH264Baseline31: string;
// global['AVVideoProfileLevelH264Baseline31'] = AVVideoProfileLevelH264Baseline31;

// export let AVVideoProfileLevelH264Baseline41: string;
// global['AVVideoProfileLevelH264Baseline41'] = AVVideoProfileLevelH264Baseline41;

// export let AVVideoProfileLevelH264BaselineAutoLevel: string;
// global['AVVideoProfileLevelH264BaselineAutoLevel'] = AVVideoProfileLevelH264BaselineAutoLevel;

// export let AVVideoProfileLevelH264High40: string;
// global['AVVideoProfileLevelH264High40'] = AVVideoProfileLevelH264High40;

// export let AVVideoProfileLevelH264High41: string;
// global['AVVideoProfileLevelH264High41'] = AVVideoProfileLevelH264High41;

// export let AVVideoProfileLevelH264HighAutoLevel: string;
// global['AVVideoProfileLevelH264HighAutoLevel'] = AVVideoProfileLevelH264HighAutoLevel;

// export let AVVideoProfileLevelH264Main30: string;
// global['AVVideoProfileLevelH264Main30'] = AVVideoProfileLevelH264Main30;

// export let AVVideoProfileLevelH264Main31: string;
// global['AVVideoProfileLevelH264Main31'] = AVVideoProfileLevelH264Main31;

// export let AVVideoProfileLevelH264Main32: string;
// global['AVVideoProfileLevelH264Main32'] = AVVideoProfileLevelH264Main32;

// export let AVVideoProfileLevelH264Main41: string;
// global['AVVideoProfileLevelH264Main41'] = AVVideoProfileLevelH264Main41;

// export let AVVideoProfileLevelH264MainAutoLevel: string;
// global['AVVideoProfileLevelH264MainAutoLevel'] = AVVideoProfileLevelH264MainAutoLevel;

// export let AVVideoProfileLevelKey: string;
// global['AVVideoProfileLevelKey'] = AVVideoProfileLevelKey;

// export let AVVideoQualityKey: string;
// global['AVVideoQualityKey'] = AVVideoQualityKey;

// export let AVVideoScalingModeFit: string;
// global['AVVideoScalingModeFit'] = AVVideoScalingModeFit;

// export let AVVideoScalingModeKey: string;
// global['AVVideoScalingModeKey'] = AVVideoScalingModeKey;

// export let AVVideoScalingModeResize: string;
// global['AVVideoScalingModeResize'] = AVVideoScalingModeResize;

// export let AVVideoScalingModeResizeAspect: string;
// global['AVVideoScalingModeResizeAspect'] = AVVideoScalingModeResizeAspect;

// export let AVVideoScalingModeResizeAspectFill: string;
// global['AVVideoScalingModeResizeAspectFill'] = AVVideoScalingModeResizeAspectFill;

// export let AVVideoTransferFunctionKey: string;
// global['AVVideoTransferFunctionKey'] = AVVideoTransferFunctionKey;

// export let AVVideoTransferFunction_ITU_R_2100_HLG: string;
// global['AVVideoTransferFunction_ITU_R_2100_HLG'] = AVVideoTransferFunction_ITU_R_2100_HLG;

// export let AVVideoTransferFunction_ITU_R_709_2: string;
// global['AVVideoTransferFunction_ITU_R_709_2'] = AVVideoTransferFunction_ITU_R_709_2;

// export let AVVideoTransferFunction_SMPTE_240M_1995: string;
// global['AVVideoTransferFunction_SMPTE_240M_1995'] = AVVideoTransferFunction_SMPTE_240M_1995;

// export let AVVideoTransferFunction_SMPTE_ST_2084_PQ: string;
// global['AVVideoTransferFunction_SMPTE_ST_2084_PQ'] = AVVideoTransferFunction_SMPTE_ST_2084_PQ;

// export let AVVideoWidthKey: string;
// global['AVVideoWidthKey'] = AVVideoWidthKey;

// export let AVVideoYCbCrMatrixKey: string;
// global['AVVideoYCbCrMatrixKey'] = AVVideoYCbCrMatrixKey;

// export let AVVideoYCbCrMatrix_ITU_R_2020: string;
// global['AVVideoYCbCrMatrix_ITU_R_2020'] = AVVideoYCbCrMatrix_ITU_R_2020;

// export let AVVideoYCbCrMatrix_ITU_R_601_4: string;
// global['AVVideoYCbCrMatrix_ITU_R_601_4'] = AVVideoYCbCrMatrix_ITU_R_601_4;

// export let AVVideoYCbCrMatrix_ITU_R_709_2: string;
// global['AVVideoYCbCrMatrix_ITU_R_709_2'] = AVVideoYCbCrMatrix_ITU_R_709_2;

// export let AVVideoYCbCrMatrix_SMPTE_240M_1995: string;
// global['AVVideoYCbCrMatrix_SMPTE_240M_1995'] = AVVideoYCbCrMatrix_SMPTE_240M_1995;

// export let NSAllRomanInputSourcesLocaleIdentifier: string;
// global['NSAllRomanInputSourcesLocaleIdentifier'] = NSAllRomanInputSourcesLocaleIdentifier;

// export let NSAnimationTriggerOrderIn: string;
// global['NSAnimationTriggerOrderIn'] = NSAnimationTriggerOrderIn;

// export let NSAnimationTriggerOrderOut: string;
// global['NSAnimationTriggerOrderOut'] = NSAnimationTriggerOrderOut;

// export let NSApp: NSApplication;
// global['NSApp'] = NSApp;

// export let NSBlack: number;
// global['NSBlack'] = NSBlack;

// export let NSDarkGray: number;
// global['NSDarkGray'] = NSDarkGray;

// export let NSDirectionalEdgeInsetsZero: NSDirectionalEdgeInsets;
// global['NSDirectionalEdgeInsetsZero'] = NSDirectionalEdgeInsetsZero;

// export let NSLightGray: number;
// global['NSLightGray'] = NSLightGray;

// export let NSMultipleValuesMarker: any;
// global['NSMultipleValuesMarker'] = NSMultipleValuesMarker;

// export let NSNoSelectionMarker: any;
// global['NSNoSelectionMarker'] = NSNoSelectionMarker;

// export let NSNotApplicableMarker: any;
// global['NSNotApplicableMarker'] = NSNotApplicableMarker;

// export let NSTypeIdentifierAddressText: string;
// global['NSTypeIdentifierAddressText'] = NSTypeIdentifierAddressText;

// export let NSTypeIdentifierDateText: string;
// global['NSTypeIdentifierDateText'] = NSTypeIdentifierDateText;

// export let NSTypeIdentifierPhoneNumberText: string;
// global['NSTypeIdentifierPhoneNumberText'] = NSTypeIdentifierPhoneNumberText;

// export let NSTypeIdentifierTransitInformationText: string;
// global['NSTypeIdentifierTransitInformationText'] = NSTypeIdentifierTransitInformationText;

// export let NSUnderlineByWord: NSUnderlineStyle;
// global['NSUnderlineByWord'] = NSUnderlineByWord;

// export let NSUnderlinePatternDash: NSUnderlineStyle;
// global['NSUnderlinePatternDash'] = NSUnderlinePatternDash;

// export let NSUnderlinePatternDashDot: NSUnderlineStyle;
// global['NSUnderlinePatternDashDot'] = NSUnderlinePatternDashDot;

// export let NSUnderlinePatternDashDotDot: NSUnderlineStyle;
// global['NSUnderlinePatternDashDotDot'] = NSUnderlinePatternDashDotDot;

// export let NSUnderlinePatternDot: NSUnderlineStyle;
// global['NSUnderlinePatternDot'] = NSUnderlinePatternDot;

// export let NSUnderlinePatternSolid: NSUnderlineStyle;
// global['NSUnderlinePatternSolid'] = NSUnderlinePatternSolid;

// export let NSUserActivityDocumentURLKey: string;
// global['NSUserActivityDocumentURLKey'] = NSUserActivityDocumentURLKey;

// export let NSWhite: number;
// global['NSWhite'] = NSWhite;

// export let NSAddedPersistentStoresKey: string;
// global['NSAddedPersistentStoresKey'] = NSAddedPersistentStoresKey;

// export let NSAffectedObjectsErrorKey: string;
// global['NSAffectedObjectsErrorKey'] = NSAffectedObjectsErrorKey;

// export let NSAffectedStoresErrorKey: string;
// global['NSAffectedStoresErrorKey'] = NSAffectedStoresErrorKey;

// export let NSBinaryStoreInsecureDecodingCompatibilityOption: string;
// global['NSBinaryStoreInsecureDecodingCompatibilityOption'] = NSBinaryStoreInsecureDecodingCompatibilityOption;

// export let NSBinaryStoreSecureDecodingClasses: string;
// global['NSBinaryStoreSecureDecodingClasses'] = NSBinaryStoreSecureDecodingClasses;

// export let NSBinaryStoreType: string;
// global['NSBinaryStoreType'] = NSBinaryStoreType;

// export let NSCoreDataCoreSpotlightExporter: string;
// global['NSCoreDataCoreSpotlightExporter'] = NSCoreDataCoreSpotlightExporter;

// export let NSCoreDataVersionNumber: number;
// global['NSCoreDataVersionNumber'] = NSCoreDataVersionNumber;

// export let NSDeletedObjectsKey: string;
// global['NSDeletedObjectsKey'] = NSDeletedObjectsKey;

// export let NSDetailedErrorsKey: string;
// global['NSDetailedErrorsKey'] = NSDetailedErrorsKey;

// export let NSErrorMergePolicy: any;
// global['NSErrorMergePolicy'] = NSErrorMergePolicy;

// export let NSErrorMergePolicy: any;
// global['NSErrorMergePolicy'] = NSErrorMergePolicy;

// export let NSFetchRequestExpressionType: NSExpression.ExpressionType;
// global['NSFetchRequestExpressionType'] = NSFetchRequestExpressionType;

// export let NSIgnorePersistentStoreVersioningOption: string;
// global['NSIgnorePersistentStoreVersioningOption'] = NSIgnorePersistentStoreVersioningOption;

// export let NSInMemoryStoreType: string;
// global['NSInMemoryStoreType'] = NSInMemoryStoreType;

// export let NSInferMappingModelAutomaticallyOption: string;
// global['NSInferMappingModelAutomaticallyOption'] = NSInferMappingModelAutomaticallyOption;

// export let NSInsertedObjectsKey: string;
// global['NSInsertedObjectsKey'] = NSInsertedObjectsKey;

// export let NSInvalidatedAllObjectsKey: string;
// global['NSInvalidatedAllObjectsKey'] = NSInvalidatedAllObjectsKey;

// export let NSInvalidatedObjectsKey: string;
// global['NSInvalidatedObjectsKey'] = NSInvalidatedObjectsKey;

// export let NSManagedObjectContextDidSaveNotification: string;
// global['NSManagedObjectContextDidSaveNotification'] = NSManagedObjectContextDidSaveNotification;

// export let NSManagedObjectContextObjectsDidChangeNotification: string;
// global['NSManagedObjectContextObjectsDidChangeNotification'] = NSManagedObjectContextObjectsDidChangeNotification;

// export let NSManagedObjectContextQueryGenerationKey: string;
// global['NSManagedObjectContextQueryGenerationKey'] = NSManagedObjectContextQueryGenerationKey;

// export let NSManagedObjectContextWillSaveNotification: string;
// global['NSManagedObjectContextWillSaveNotification'] = NSManagedObjectContextWillSaveNotification;

// export let NSMergeByPropertyObjectTrumpMergePolicy: any;
// global['NSMergeByPropertyObjectTrumpMergePolicy'] = NSMergeByPropertyObjectTrumpMergePolicy;

// export let NSMergeByPropertyObjectTrumpMergePolicy: any;
// global['NSMergeByPropertyObjectTrumpMergePolicy'] = NSMergeByPropertyObjectTrumpMergePolicy;

// export let NSMergeByPropertyStoreTrumpMergePolicy: any;
// global['NSMergeByPropertyStoreTrumpMergePolicy'] = NSMergeByPropertyStoreTrumpMergePolicy;

// export let NSMergeByPropertyStoreTrumpMergePolicy: any;
// global['NSMergeByPropertyStoreTrumpMergePolicy'] = NSMergeByPropertyStoreTrumpMergePolicy;

// export let NSMigratePersistentStoresAutomaticallyOption: string;
// global['NSMigratePersistentStoresAutomaticallyOption'] = NSMigratePersistentStoresAutomaticallyOption;

// export let NSMigrationDestinationObjectKey: string;
// global['NSMigrationDestinationObjectKey'] = NSMigrationDestinationObjectKey;

// export let NSMigrationEntityMappingKey: string;
// global['NSMigrationEntityMappingKey'] = NSMigrationEntityMappingKey;

// export let NSMigrationEntityPolicyKey: string;
// global['NSMigrationEntityPolicyKey'] = NSMigrationEntityPolicyKey;

// export let NSMigrationManagerKey: string;
// global['NSMigrationManagerKey'] = NSMigrationManagerKey;

// export let NSMigrationPropertyMappingKey: string;
// global['NSMigrationPropertyMappingKey'] = NSMigrationPropertyMappingKey;

// export let NSMigrationSourceObjectKey: string;
// global['NSMigrationSourceObjectKey'] = NSMigrationSourceObjectKey;

// export let NSOverwriteMergePolicy: any;
// global['NSOverwriteMergePolicy'] = NSOverwriteMergePolicy;

// export let NSOverwriteMergePolicy: any;
// global['NSOverwriteMergePolicy'] = NSOverwriteMergePolicy;

// export let NSPersistentHistoryTokenKey: string;
// global['NSPersistentHistoryTokenKey'] = NSPersistentHistoryTokenKey;

// export let NSPersistentHistoryTrackingKey: string;
// global['NSPersistentHistoryTrackingKey'] = NSPersistentHistoryTrackingKey;

// export let NSPersistentStoreConnectionPoolMaxSizeKey: string;
// global['NSPersistentStoreConnectionPoolMaxSizeKey'] = NSPersistentStoreConnectionPoolMaxSizeKey;

// export let NSPersistentStoreCoordinatorStoresDidChangeNotification: string;
// global['NSPersistentStoreCoordinatorStoresDidChangeNotification'] = NSPersistentStoreCoordinatorStoresDidChangeNotification;

// export let NSPersistentStoreCoordinatorStoresWillChangeNotification: string;
// global['NSPersistentStoreCoordinatorStoresWillChangeNotification'] = NSPersistentStoreCoordinatorStoresWillChangeNotification;

// export let NSPersistentStoreCoordinatorWillRemoveStoreNotification: string;
// global['NSPersistentStoreCoordinatorWillRemoveStoreNotification'] = NSPersistentStoreCoordinatorWillRemoveStoreNotification;

// export let NSPersistentStoreForceDestroyOption: string;
// global['NSPersistentStoreForceDestroyOption'] = NSPersistentStoreForceDestroyOption;

// export let NSPersistentStoreOSCompatibility: string;
// global['NSPersistentStoreOSCompatibility'] = NSPersistentStoreOSCompatibility;

// export let NSPersistentStoreRemoteChangeNotification: string;
// global['NSPersistentStoreRemoteChangeNotification'] = NSPersistentStoreRemoteChangeNotification;

// export let NSPersistentStoreRemoteChangeNotificationPostOptionKey: string;
// global['NSPersistentStoreRemoteChangeNotificationPostOptionKey'] = NSPersistentStoreRemoteChangeNotificationPostOptionKey;

// export let NSPersistentStoreSaveConflictsErrorKey: string;
// global['NSPersistentStoreSaveConflictsErrorKey'] = NSPersistentStoreSaveConflictsErrorKey;

// export let NSPersistentStoreTimeoutOption: string;
// global['NSPersistentStoreTimeoutOption'] = NSPersistentStoreTimeoutOption;

// export let NSPersistentStoreURLKey: string;
// global['NSPersistentStoreURLKey'] = NSPersistentStoreURLKey;

// export let NSReadOnlyPersistentStoreOption: string;
// global['NSReadOnlyPersistentStoreOption'] = NSReadOnlyPersistentStoreOption;

// export let NSRefreshedObjectsKey: string;
// global['NSRefreshedObjectsKey'] = NSRefreshedObjectsKey;

// export let NSRemovedPersistentStoresKey: string;
// global['NSRemovedPersistentStoresKey'] = NSRemovedPersistentStoresKey;

// export let NSRollbackMergePolicy: any;
// global['NSRollbackMergePolicy'] = NSRollbackMergePolicy;

// export let NSRollbackMergePolicy: any;
// global['NSRollbackMergePolicy'] = NSRollbackMergePolicy;

// export let NSSQLiteAnalyzeOption: string;
// global['NSSQLiteAnalyzeOption'] = NSSQLiteAnalyzeOption;

// export let NSSQLiteErrorDomain: string;
// global['NSSQLiteErrorDomain'] = NSSQLiteErrorDomain;

// export let NSSQLiteManualVacuumOption: string;
// global['NSSQLiteManualVacuumOption'] = NSSQLiteManualVacuumOption;

// export let NSSQLitePragmasOption: string;
// global['NSSQLitePragmasOption'] = NSSQLitePragmasOption;

// export let NSSQLiteStoreType: string;
// global['NSSQLiteStoreType'] = NSSQLiteStoreType;

// export let NSStoreModelVersionHashesKey: string;
// global['NSStoreModelVersionHashesKey'] = NSStoreModelVersionHashesKey;

// export let NSStoreModelVersionIdentifiersKey: string;
// global['NSStoreModelVersionIdentifiersKey'] = NSStoreModelVersionIdentifiersKey;

// export let NSStoreTypeKey: string;
// global['NSStoreTypeKey'] = NSStoreTypeKey;

// export let NSStoreUUIDKey: string;
// global['NSStoreUUIDKey'] = NSStoreUUIDKey;

// export let NSUUIDChangedPersistentStoresKey: string;
// global['NSUUIDChangedPersistentStoresKey'] = NSUUIDChangedPersistentStoresKey;

// export let NSUpdatedObjectsKey: string;
// global['NSUpdatedObjectsKey'] = NSUpdatedObjectsKey;

// export let NSValidateXMLStoreOption: string;
// global['NSValidateXMLStoreOption'] = NSValidateXMLStoreOption;

// export let NSValidationKeyErrorKey: string;
// global['NSValidationKeyErrorKey'] = NSValidationKeyErrorKey;

// export let NSValidationObjectErrorKey: string;
// global['NSValidationObjectErrorKey'] = NSValidationObjectErrorKey;

// export let NSValidationPredicateErrorKey: string;
// global['NSValidationPredicateErrorKey'] = NSValidationPredicateErrorKey;

// export let NSValidationValueErrorKey: string;
// global['NSValidationValueErrorKey'] = NSValidationValueErrorKey;

// export let NSXMLStoreType: string;
// global['NSXMLStoreType'] = NSXMLStoreType;

// export let kCFAbsoluteTimeIntervalSince1904: number;
// global['kCFAbsoluteTimeIntervalSince1904'] = kCFAbsoluteTimeIntervalSince1904;

// export let kCFAbsoluteTimeIntervalSince1970: number;
// global['kCFAbsoluteTimeIntervalSince1970'] = kCFAbsoluteTimeIntervalSince1970;

// export let kCFAllocatorDefault: any;
// global['kCFAllocatorDefault'] = kCFAllocatorDefault;

// export let kCFAllocatorMalloc: any;
// global['kCFAllocatorMalloc'] = kCFAllocatorMalloc;

// export let kCFAllocatorMallocZone: any;
// global['kCFAllocatorMallocZone'] = kCFAllocatorMallocZone;

// export let kCFAllocatorNull: any;
// global['kCFAllocatorNull'] = kCFAllocatorNull;

// export let kCFAllocatorSystemDefault: any;
// global['kCFAllocatorSystemDefault'] = kCFAllocatorSystemDefault;

// export let kCFAllocatorUseContext: any;
// global['kCFAllocatorUseContext'] = kCFAllocatorUseContext;

// export let kCFBooleanFalse: number;
// global['kCFBooleanFalse'] = kCFBooleanFalse;

// export let kCFBooleanTrue: number;
// global['kCFBooleanTrue'] = kCFBooleanTrue;

// export let kCFBundleDevelopmentRegionKey: string;
// global['kCFBundleDevelopmentRegionKey'] = kCFBundleDevelopmentRegionKey;

// export let kCFBundleExecutableKey: string;
// global['kCFBundleExecutableKey'] = kCFBundleExecutableKey;

// export let kCFBundleIdentifierKey: string;
// global['kCFBundleIdentifierKey'] = kCFBundleIdentifierKey;

// export let kCFBundleInfoDictionaryVersionKey: string;
// global['kCFBundleInfoDictionaryVersionKey'] = kCFBundleInfoDictionaryVersionKey;

// export let kCFBundleLocalizationsKey: string;
// global['kCFBundleLocalizationsKey'] = kCFBundleLocalizationsKey;

// export let kCFBundleNameKey: string;
// global['kCFBundleNameKey'] = kCFBundleNameKey;

// export let kCFBundleVersionKey: string;
// global['kCFBundleVersionKey'] = kCFBundleVersionKey;

// export let kCFCopyStringBagCallBacks: CFBagCallBacks;
// global['kCFCopyStringBagCallBacks'] = kCFCopyStringBagCallBacks;

// export let kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
// global['kCFCopyStringDictionaryKeyCallBacks'] = kCFCopyStringDictionaryKeyCallBacks;

// export let kCFCopyStringSetCallBacks: CFSetCallBacks;
// global['kCFCopyStringSetCallBacks'] = kCFCopyStringSetCallBacks;

// export let kCFCoreFoundationVersionNumber: number;
// global['kCFCoreFoundationVersionNumber'] = kCFCoreFoundationVersionNumber;

// export let kCFErrorDescriptionKey: string;
// global['kCFErrorDescriptionKey'] = kCFErrorDescriptionKey;

// export let kCFErrorDomainCocoa: any;
// global['kCFErrorDomainCocoa'] = kCFErrorDomainCocoa;

// export let kCFErrorDomainMach: any;
// global['kCFErrorDomainMach'] = kCFErrorDomainMach;

// export let kCFErrorDomainOSStatus: any;
// global['kCFErrorDomainOSStatus'] = kCFErrorDomainOSStatus;

// export let kCFErrorDomainPOSIX: any;
// global['kCFErrorDomainPOSIX'] = kCFErrorDomainPOSIX;

// export let kCFErrorFilePathKey: string;
// global['kCFErrorFilePathKey'] = kCFErrorFilePathKey;

// export let kCFErrorLocalizedDescriptionKey: string;
// global['kCFErrorLocalizedDescriptionKey'] = kCFErrorLocalizedDescriptionKey;

// export let kCFErrorLocalizedFailureKey: string;
// global['kCFErrorLocalizedFailureKey'] = kCFErrorLocalizedFailureKey;

// export let kCFErrorLocalizedFailureReasonKey: string;
// global['kCFErrorLocalizedFailureReasonKey'] = kCFErrorLocalizedFailureReasonKey;

// export let kCFErrorLocalizedRecoverySuggestionKey: string;
// global['kCFErrorLocalizedRecoverySuggestionKey'] = kCFErrorLocalizedRecoverySuggestionKey;

// export let kCFErrorURLKey: string;
// global['kCFErrorURLKey'] = kCFErrorURLKey;

// export let kCFErrorUnderlyingErrorKey: string;
// global['kCFErrorUnderlyingErrorKey'] = kCFErrorUnderlyingErrorKey;

// export let kCFNotFound: number;
// global['kCFNotFound'] = kCFNotFound;

// export let kCFNull: NSNull;
// global['kCFNull'] = kCFNull;

// export let kCFNumberNaN: number;
// global['kCFNumberNaN'] = kCFNumberNaN;

// export let kCFNumberNegativeInfinity: number;
// global['kCFNumberNegativeInfinity'] = kCFNumberNegativeInfinity;

// export let kCFNumberPositiveInfinity: number;
// global['kCFNumberPositiveInfinity'] = kCFNumberPositiveInfinity;

// export let kCFPlugInDynamicRegisterFunctionKey: string;
// global['kCFPlugInDynamicRegisterFunctionKey'] = kCFPlugInDynamicRegisterFunctionKey;

// export let kCFPlugInDynamicRegistrationKey: string;
// global['kCFPlugInDynamicRegistrationKey'] = kCFPlugInDynamicRegistrationKey;

// export let kCFPlugInFactoriesKey: string;
// global['kCFPlugInFactoriesKey'] = kCFPlugInFactoriesKey;

// export let kCFPlugInTypesKey: string;
// global['kCFPlugInTypesKey'] = kCFPlugInTypesKey;

// export let kCFPlugInUnloadFunctionKey: string;
// global['kCFPlugInUnloadFunctionKey'] = kCFPlugInUnloadFunctionKey;

// export let kCFPreferencesAnyApplication: string;
// global['kCFPreferencesAnyApplication'] = kCFPreferencesAnyApplication;

// export let kCFPreferencesAnyHost: string;
// global['kCFPreferencesAnyHost'] = kCFPreferencesAnyHost;

// export let kCFPreferencesAnyUser: string;
// global['kCFPreferencesAnyUser'] = kCFPreferencesAnyUser;

// export let kCFPreferencesCurrentApplication: string;
// global['kCFPreferencesCurrentApplication'] = kCFPreferencesCurrentApplication;

// export let kCFPreferencesCurrentHost: string;
// global['kCFPreferencesCurrentHost'] = kCFPreferencesCurrentHost;

// export let kCFPreferencesCurrentUser: string;
// global['kCFPreferencesCurrentUser'] = kCFPreferencesCurrentUser;

// export let kCFSocketCommandKey: string;
// global['kCFSocketCommandKey'] = kCFSocketCommandKey;

// export let kCFSocketErrorKey: string;
// global['kCFSocketErrorKey'] = kCFSocketErrorKey;

// export let kCFSocketNameKey: string;
// global['kCFSocketNameKey'] = kCFSocketNameKey;

// export let kCFSocketRegisterCommand: string;
// global['kCFSocketRegisterCommand'] = kCFSocketRegisterCommand;

// export let kCFSocketResultKey: string;
// global['kCFSocketResultKey'] = kCFSocketResultKey;

// export let kCFSocketRetrieveCommand: string;
// global['kCFSocketRetrieveCommand'] = kCFSocketRetrieveCommand;

// export let kCFSocketValueKey: string;
// global['kCFSocketValueKey'] = kCFSocketValueKey;

// export let kCFStreamErrorDomainSOCKS: number;
// global['kCFStreamErrorDomainSOCKS'] = kCFStreamErrorDomainSOCKS;

// export let kCFStreamErrorDomainSSL: number;
// global['kCFStreamErrorDomainSSL'] = kCFStreamErrorDomainSSL;

// export let kCFStreamPropertySOCKSPassword: string;
// global['kCFStreamPropertySOCKSPassword'] = kCFStreamPropertySOCKSPassword;

// export let kCFStreamPropertySOCKSProxy: string;
// global['kCFStreamPropertySOCKSProxy'] = kCFStreamPropertySOCKSProxy;

// export let kCFStreamPropertySOCKSProxyHost: string;
// global['kCFStreamPropertySOCKSProxyHost'] = kCFStreamPropertySOCKSProxyHost;

// export let kCFStreamPropertySOCKSProxyPort: string;
// global['kCFStreamPropertySOCKSProxyPort'] = kCFStreamPropertySOCKSProxyPort;

// export let kCFStreamPropertySOCKSUser: string;
// global['kCFStreamPropertySOCKSUser'] = kCFStreamPropertySOCKSUser;

// export let kCFStreamPropertySOCKSVersion: string;
// global['kCFStreamPropertySOCKSVersion'] = kCFStreamPropertySOCKSVersion;

// export let kCFStreamPropertyShouldCloseNativeSocket: string;
// global['kCFStreamPropertyShouldCloseNativeSocket'] = kCFStreamPropertyShouldCloseNativeSocket;

// export let kCFStreamPropertySocketSecurityLevel: string;
// global['kCFStreamPropertySocketSecurityLevel'] = kCFStreamPropertySocketSecurityLevel;

// export let kCFStreamSocketSOCKSVersion4: string;
// global['kCFStreamSocketSOCKSVersion4'] = kCFStreamSocketSOCKSVersion4;

// export let kCFStreamSocketSOCKSVersion5: string;
// global['kCFStreamSocketSOCKSVersion5'] = kCFStreamSocketSOCKSVersion5;

// export let kCFStreamSocketSecurityLevelNegotiatedSSL: string;
// global['kCFStreamSocketSecurityLevelNegotiatedSSL'] = kCFStreamSocketSecurityLevelNegotiatedSSL;

// export let kCFStreamSocketSecurityLevelNone: string;
// global['kCFStreamSocketSecurityLevelNone'] = kCFStreamSocketSecurityLevelNone;

// export let kCFStreamSocketSecurityLevelTLSv1: string;
// global['kCFStreamSocketSecurityLevelTLSv1'] = kCFStreamSocketSecurityLevelTLSv1;

// export let kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
// global['kCFStringBinaryHeapCallBacks'] = kCFStringBinaryHeapCallBacks;

// export let kCFStringTransformFullwidthHalfwidth: string;
// global['kCFStringTransformFullwidthHalfwidth'] = kCFStringTransformFullwidthHalfwidth;

// export let kCFStringTransformHiraganaKatakana: string;
// global['kCFStringTransformHiraganaKatakana'] = kCFStringTransformHiraganaKatakana;

// export let kCFStringTransformLatinArabic: string;
// global['kCFStringTransformLatinArabic'] = kCFStringTransformLatinArabic;

// export let kCFStringTransformLatinCyrillic: string;
// global['kCFStringTransformLatinCyrillic'] = kCFStringTransformLatinCyrillic;

// export let kCFStringTransformLatinGreek: string;
// global['kCFStringTransformLatinGreek'] = kCFStringTransformLatinGreek;

// export let kCFStringTransformLatinHangul: string;
// global['kCFStringTransformLatinHangul'] = kCFStringTransformLatinHangul;

// export let kCFStringTransformLatinHebrew: string;
// global['kCFStringTransformLatinHebrew'] = kCFStringTransformLatinHebrew;

// export let kCFStringTransformLatinHiragana: string;
// global['kCFStringTransformLatinHiragana'] = kCFStringTransformLatinHiragana;

// export let kCFStringTransformLatinKatakana: string;
// global['kCFStringTransformLatinKatakana'] = kCFStringTransformLatinKatakana;

// export let kCFStringTransformLatinThai: string;
// global['kCFStringTransformLatinThai'] = kCFStringTransformLatinThai;

// export let kCFStringTransformMandarinLatin: string;
// global['kCFStringTransformMandarinLatin'] = kCFStringTransformMandarinLatin;

// export let kCFStringTransformStripCombiningMarks: string;
// global['kCFStringTransformStripCombiningMarks'] = kCFStringTransformStripCombiningMarks;

// export let kCFStringTransformStripDiacritics: string;
// global['kCFStringTransformStripDiacritics'] = kCFStringTransformStripDiacritics;

// export let kCFStringTransformToLatin: string;
// global['kCFStringTransformToLatin'] = kCFStringTransformToLatin;

// export let kCFStringTransformToUnicodeName: string;
// global['kCFStringTransformToUnicodeName'] = kCFStringTransformToUnicodeName;

// export let kCFStringTransformToXMLHex: string;
// global['kCFStringTransformToXMLHex'] = kCFStringTransformToXMLHex;

// export let kCFTypeArrayCallBacks: CFArrayCallBacks;
// global['kCFTypeArrayCallBacks'] = kCFTypeArrayCallBacks;

// export let kCFTypeBagCallBacks: CFBagCallBacks;
// global['kCFTypeBagCallBacks'] = kCFTypeBagCallBacks;

// export let kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
// global['kCFTypeDictionaryKeyCallBacks'] = kCFTypeDictionaryKeyCallBacks;

// export let kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
// global['kCFTypeDictionaryValueCallBacks'] = kCFTypeDictionaryValueCallBacks;

// export let kCFTypeSetCallBacks: CFSetCallBacks;
// global['kCFTypeSetCallBacks'] = kCFTypeSetCallBacks;

// export let kCFURLAddedToDirectoryDateKey: string;
// global['kCFURLAddedToDirectoryDateKey'] = kCFURLAddedToDirectoryDateKey;

// export let kCFURLApplicationIsScriptableKey: string;
// global['kCFURLApplicationIsScriptableKey'] = kCFURLApplicationIsScriptableKey;

// export let kCFURLAttributeModificationDateKey: string;
// global['kCFURLAttributeModificationDateKey'] = kCFURLAttributeModificationDateKey;

// export let kCFURLCanonicalPathKey: string;
// global['kCFURLCanonicalPathKey'] = kCFURLCanonicalPathKey;

// export let kCFURLContentAccessDateKey: string;
// global['kCFURLContentAccessDateKey'] = kCFURLContentAccessDateKey;

// export let kCFURLContentModificationDateKey: string;
// global['kCFURLContentModificationDateKey'] = kCFURLContentModificationDateKey;

// export let kCFURLCreationDateKey: string;
// global['kCFURLCreationDateKey'] = kCFURLCreationDateKey;

// export let kCFURLDocumentIdentifierKey: string;
// global['kCFURLDocumentIdentifierKey'] = kCFURLDocumentIdentifierKey;

// export let kCFURLFileAllocatedSizeKey: string;
// global['kCFURLFileAllocatedSizeKey'] = kCFURLFileAllocatedSizeKey;

// export let kCFURLFileResourceIdentifierKey: string;
// global['kCFURLFileResourceIdentifierKey'] = kCFURLFileResourceIdentifierKey;

// export let kCFURLFileResourceTypeBlockSpecial: string;
// global['kCFURLFileResourceTypeBlockSpecial'] = kCFURLFileResourceTypeBlockSpecial;

// export let kCFURLFileResourceTypeCharacterSpecial: string;
// global['kCFURLFileResourceTypeCharacterSpecial'] = kCFURLFileResourceTypeCharacterSpecial;

// export let kCFURLFileResourceTypeDirectory: string;
// global['kCFURLFileResourceTypeDirectory'] = kCFURLFileResourceTypeDirectory;

// export let kCFURLFileResourceTypeKey: string;
// global['kCFURLFileResourceTypeKey'] = kCFURLFileResourceTypeKey;

// export let kCFURLFileResourceTypeNamedPipe: string;
// global['kCFURLFileResourceTypeNamedPipe'] = kCFURLFileResourceTypeNamedPipe;

// export let kCFURLFileResourceTypeRegular: string;
// global['kCFURLFileResourceTypeRegular'] = kCFURLFileResourceTypeRegular;

// export let kCFURLFileResourceTypeSocket: string;
// global['kCFURLFileResourceTypeSocket'] = kCFURLFileResourceTypeSocket;

// export let kCFURLFileResourceTypeSymbolicLink: string;
// global['kCFURLFileResourceTypeSymbolicLink'] = kCFURLFileResourceTypeSymbolicLink;

// export let kCFURLFileResourceTypeUnknown: string;
// global['kCFURLFileResourceTypeUnknown'] = kCFURLFileResourceTypeUnknown;

// export let kCFURLFileSecurityKey: string;
// global['kCFURLFileSecurityKey'] = kCFURLFileSecurityKey;

// export let kCFURLFileSizeKey: string;
// global['kCFURLFileSizeKey'] = kCFURLFileSizeKey;

// export let kCFURLGenerationIdentifierKey: string;
// global['kCFURLGenerationIdentifierKey'] = kCFURLGenerationIdentifierKey;

// export let kCFURLHasHiddenExtensionKey: string;
// global['kCFURLHasHiddenExtensionKey'] = kCFURLHasHiddenExtensionKey;

// export let kCFURLIsAliasFileKey: string;
// global['kCFURLIsAliasFileKey'] = kCFURLIsAliasFileKey;

// export let kCFURLIsApplicationKey: string;
// global['kCFURLIsApplicationKey'] = kCFURLIsApplicationKey;

// export let kCFURLIsDirectoryKey: string;
// global['kCFURLIsDirectoryKey'] = kCFURLIsDirectoryKey;

// export let kCFURLIsExcludedFromBackupKey: string;
// global['kCFURLIsExcludedFromBackupKey'] = kCFURLIsExcludedFromBackupKey;

// export let kCFURLIsExecutableKey: string;
// global['kCFURLIsExecutableKey'] = kCFURLIsExecutableKey;

// export let kCFURLIsHiddenKey: string;
// global['kCFURLIsHiddenKey'] = kCFURLIsHiddenKey;

// export let kCFURLIsMountTriggerKey: string;
// global['kCFURLIsMountTriggerKey'] = kCFURLIsMountTriggerKey;

// export let kCFURLIsPackageKey: string;
// global['kCFURLIsPackageKey'] = kCFURLIsPackageKey;

// export let kCFURLIsReadableKey: string;
// global['kCFURLIsReadableKey'] = kCFURLIsReadableKey;

// export let kCFURLIsRegularFileKey: string;
// global['kCFURLIsRegularFileKey'] = kCFURLIsRegularFileKey;

// export let kCFURLIsSymbolicLinkKey: string;
// global['kCFURLIsSymbolicLinkKey'] = kCFURLIsSymbolicLinkKey;

// export let kCFURLIsSystemImmutableKey: string;
// global['kCFURLIsSystemImmutableKey'] = kCFURLIsSystemImmutableKey;

// export let kCFURLIsUbiquitousItemKey: string;
// global['kCFURLIsUbiquitousItemKey'] = kCFURLIsUbiquitousItemKey;

// export let kCFURLIsUserImmutableKey: string;
// global['kCFURLIsUserImmutableKey'] = kCFURLIsUserImmutableKey;

// export let kCFURLIsVolumeKey: string;
// global['kCFURLIsVolumeKey'] = kCFURLIsVolumeKey;

// export let kCFURLIsWritableKey: string;
// global['kCFURLIsWritableKey'] = kCFURLIsWritableKey;

// export let kCFURLKeysOfUnsetValuesKey: string;
// global['kCFURLKeysOfUnsetValuesKey'] = kCFURLKeysOfUnsetValuesKey;

// export let kCFURLLabelNumberKey: string;
// global['kCFURLLabelNumberKey'] = kCFURLLabelNumberKey;

// export let kCFURLLinkCountKey: string;
// global['kCFURLLinkCountKey'] = kCFURLLinkCountKey;

// export let kCFURLLocalizedLabelKey: string;
// global['kCFURLLocalizedLabelKey'] = kCFURLLocalizedLabelKey;

// export let kCFURLLocalizedNameKey: string;
// global['kCFURLLocalizedNameKey'] = kCFURLLocalizedNameKey;

// export let kCFURLLocalizedTypeDescriptionKey: string;
// global['kCFURLLocalizedTypeDescriptionKey'] = kCFURLLocalizedTypeDescriptionKey;

// export let kCFURLNameKey: string;
// global['kCFURLNameKey'] = kCFURLNameKey;

// export let kCFURLParentDirectoryURLKey: string;
// global['kCFURLParentDirectoryURLKey'] = kCFURLParentDirectoryURLKey;

// export let kCFURLPathKey: string;
// global['kCFURLPathKey'] = kCFURLPathKey;

// export let kCFURLPreferredIOBlockSizeKey: string;
// global['kCFURLPreferredIOBlockSizeKey'] = kCFURLPreferredIOBlockSizeKey;

// export let kCFURLQuarantinePropertiesKey: string;
// global['kCFURLQuarantinePropertiesKey'] = kCFURLQuarantinePropertiesKey;

// export let kCFURLTagNamesKey: string;
// global['kCFURLTagNamesKey'] = kCFURLTagNamesKey;

// export let kCFURLTotalFileAllocatedSizeKey: string;
// global['kCFURLTotalFileAllocatedSizeKey'] = kCFURLTotalFileAllocatedSizeKey;

// export let kCFURLTotalFileSizeKey: string;
// global['kCFURLTotalFileSizeKey'] = kCFURLTotalFileSizeKey;

// export let kCFURLTypeIdentifierKey: string;
// global['kCFURLTypeIdentifierKey'] = kCFURLTypeIdentifierKey;

// export let kCFURLUbiquitousItemDownloadingErrorKey: string;
// global['kCFURLUbiquitousItemDownloadingErrorKey'] = kCFURLUbiquitousItemDownloadingErrorKey;

// export let kCFURLUbiquitousItemDownloadingStatusCurrent: string;
// global['kCFURLUbiquitousItemDownloadingStatusCurrent'] = kCFURLUbiquitousItemDownloadingStatusCurrent;

// export let kCFURLUbiquitousItemDownloadingStatusDownloaded: string;
// global['kCFURLUbiquitousItemDownloadingStatusDownloaded'] = kCFURLUbiquitousItemDownloadingStatusDownloaded;

// export let kCFURLUbiquitousItemDownloadingStatusKey: string;
// global['kCFURLUbiquitousItemDownloadingStatusKey'] = kCFURLUbiquitousItemDownloadingStatusKey;

// export let kCFURLUbiquitousItemDownloadingStatusNotDownloaded: string;
// global['kCFURLUbiquitousItemDownloadingStatusNotDownloaded'] = kCFURLUbiquitousItemDownloadingStatusNotDownloaded;

// export let kCFURLUbiquitousItemHasUnresolvedConflictsKey: string;
// global['kCFURLUbiquitousItemHasUnresolvedConflictsKey'] = kCFURLUbiquitousItemHasUnresolvedConflictsKey;

// export let kCFURLUbiquitousItemIsDownloadingKey: string;
// global['kCFURLUbiquitousItemIsDownloadingKey'] = kCFURLUbiquitousItemIsDownloadingKey;

// export let kCFURLUbiquitousItemIsUploadedKey: string;
// global['kCFURLUbiquitousItemIsUploadedKey'] = kCFURLUbiquitousItemIsUploadedKey;

// export let kCFURLUbiquitousItemIsUploadingKey: string;
// global['kCFURLUbiquitousItemIsUploadingKey'] = kCFURLUbiquitousItemIsUploadingKey;

// export let kCFURLUbiquitousItemUploadingErrorKey: string;
// global['kCFURLUbiquitousItemUploadingErrorKey'] = kCFURLUbiquitousItemUploadingErrorKey;

// export let kCFURLVolumeAvailableCapacityForImportantUsageKey: string;
// global['kCFURLVolumeAvailableCapacityForImportantUsageKey'] = kCFURLVolumeAvailableCapacityForImportantUsageKey;

// export let kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: string;
// global['kCFURLVolumeAvailableCapacityForOpportunisticUsageKey'] = kCFURLVolumeAvailableCapacityForOpportunisticUsageKey;

// export let kCFURLVolumeAvailableCapacityKey: string;
// global['kCFURLVolumeAvailableCapacityKey'] = kCFURLVolumeAvailableCapacityKey;

// export let kCFURLVolumeCreationDateKey: string;
// global['kCFURLVolumeCreationDateKey'] = kCFURLVolumeCreationDateKey;

// export let kCFURLVolumeIdentifierKey: string;
// global['kCFURLVolumeIdentifierKey'] = kCFURLVolumeIdentifierKey;

// export let kCFURLVolumeIsAutomountedKey: string;
// global['kCFURLVolumeIsAutomountedKey'] = kCFURLVolumeIsAutomountedKey;

// export let kCFURLVolumeIsBrowsableKey: string;
// global['kCFURLVolumeIsBrowsableKey'] = kCFURLVolumeIsBrowsableKey;

// export let kCFURLVolumeIsEjectableKey: string;
// global['kCFURLVolumeIsEjectableKey'] = kCFURLVolumeIsEjectableKey;

// export let kCFURLVolumeIsEncryptedKey: string;
// global['kCFURLVolumeIsEncryptedKey'] = kCFURLVolumeIsEncryptedKey;

// export let kCFURLVolumeIsInternalKey: string;
// global['kCFURLVolumeIsInternalKey'] = kCFURLVolumeIsInternalKey;

// export let kCFURLVolumeIsJournalingKey: string;
// global['kCFURLVolumeIsJournalingKey'] = kCFURLVolumeIsJournalingKey;

// export let kCFURLVolumeIsLocalKey: string;
// global['kCFURLVolumeIsLocalKey'] = kCFURLVolumeIsLocalKey;

// export let kCFURLVolumeIsReadOnlyKey: string;
// global['kCFURLVolumeIsReadOnlyKey'] = kCFURLVolumeIsReadOnlyKey;

// export let kCFURLVolumeIsRemovableKey: string;
// global['kCFURLVolumeIsRemovableKey'] = kCFURLVolumeIsRemovableKey;

// export let kCFURLVolumeIsRootFileSystemKey: string;
// global['kCFURLVolumeIsRootFileSystemKey'] = kCFURLVolumeIsRootFileSystemKey;

// export let kCFURLVolumeLocalizedFormatDescriptionKey: string;
// global['kCFURLVolumeLocalizedFormatDescriptionKey'] = kCFURLVolumeLocalizedFormatDescriptionKey;

// export let kCFURLVolumeLocalizedNameKey: string;
// global['kCFURLVolumeLocalizedNameKey'] = kCFURLVolumeLocalizedNameKey;

// export let kCFURLVolumeMaximumFileSizeKey: string;
// global['kCFURLVolumeMaximumFileSizeKey'] = kCFURLVolumeMaximumFileSizeKey;

// export let kCFURLVolumeNameKey: string;
// global['kCFURLVolumeNameKey'] = kCFURLVolumeNameKey;

// export let kCFURLVolumeResourceCountKey: string;
// global['kCFURLVolumeResourceCountKey'] = kCFURLVolumeResourceCountKey;

// export let kCFURLVolumeSupportsAccessPermissionsKey: string;
// global['kCFURLVolumeSupportsAccessPermissionsKey'] = kCFURLVolumeSupportsAccessPermissionsKey;

// export let kCFURLVolumeSupportsAdvisoryFileLockingKey: string;
// global['kCFURLVolumeSupportsAdvisoryFileLockingKey'] = kCFURLVolumeSupportsAdvisoryFileLockingKey;

// export let kCFURLVolumeSupportsCasePreservedNamesKey: string;
// global['kCFURLVolumeSupportsCasePreservedNamesKey'] = kCFURLVolumeSupportsCasePreservedNamesKey;

// export let kCFURLVolumeSupportsCaseSensitiveNamesKey: string;
// global['kCFURLVolumeSupportsCaseSensitiveNamesKey'] = kCFURLVolumeSupportsCaseSensitiveNamesKey;

// export let kCFURLVolumeSupportsCompressionKey: string;
// global['kCFURLVolumeSupportsCompressionKey'] = kCFURLVolumeSupportsCompressionKey;

// export let kCFURLVolumeSupportsExclusiveRenamingKey: string;
// global['kCFURLVolumeSupportsExclusiveRenamingKey'] = kCFURLVolumeSupportsExclusiveRenamingKey;

// export let kCFURLVolumeSupportsExtendedSecurityKey: string;
// global['kCFURLVolumeSupportsExtendedSecurityKey'] = kCFURLVolumeSupportsExtendedSecurityKey;

// export let kCFURLVolumeSupportsFileCloningKey: string;
// global['kCFURLVolumeSupportsFileCloningKey'] = kCFURLVolumeSupportsFileCloningKey;

// export let kCFURLVolumeSupportsHardLinksKey: string;
// global['kCFURLVolumeSupportsHardLinksKey'] = kCFURLVolumeSupportsHardLinksKey;

// export let kCFURLVolumeSupportsImmutableFilesKey: string;
// global['kCFURLVolumeSupportsImmutableFilesKey'] = kCFURLVolumeSupportsImmutableFilesKey;

// export let kCFURLVolumeSupportsJournalingKey: string;
// global['kCFURLVolumeSupportsJournalingKey'] = kCFURLVolumeSupportsJournalingKey;

// export let kCFURLVolumeSupportsPersistentIDsKey: string;
// global['kCFURLVolumeSupportsPersistentIDsKey'] = kCFURLVolumeSupportsPersistentIDsKey;

// export let kCFURLVolumeSupportsRenamingKey: string;
// global['kCFURLVolumeSupportsRenamingKey'] = kCFURLVolumeSupportsRenamingKey;

// export let kCFURLVolumeSupportsRootDirectoryDatesKey: string;
// global['kCFURLVolumeSupportsRootDirectoryDatesKey'] = kCFURLVolumeSupportsRootDirectoryDatesKey;

// export let kCFURLVolumeSupportsSparseFilesKey: string;
// global['kCFURLVolumeSupportsSparseFilesKey'] = kCFURLVolumeSupportsSparseFilesKey;

// export let kCFURLVolumeSupportsSwapRenamingKey: string;
// global['kCFURLVolumeSupportsSwapRenamingKey'] = kCFURLVolumeSupportsSwapRenamingKey;

// export let kCFURLVolumeSupportsSymbolicLinksKey: string;
// global['kCFURLVolumeSupportsSymbolicLinksKey'] = kCFURLVolumeSupportsSymbolicLinksKey;

// export let kCFURLVolumeSupportsVolumeSizesKey: string;
// global['kCFURLVolumeSupportsVolumeSizesKey'] = kCFURLVolumeSupportsVolumeSizesKey;

// export let kCFURLVolumeSupportsZeroRunsKey: string;
// global['kCFURLVolumeSupportsZeroRunsKey'] = kCFURLVolumeSupportsZeroRunsKey;

// export let kCFURLVolumeTotalCapacityKey: string;
// global['kCFURLVolumeTotalCapacityKey'] = kCFURLVolumeTotalCapacityKey;

// export let kCFURLVolumeURLForRemountingKey: string;
// global['kCFURLVolumeURLForRemountingKey'] = kCFURLVolumeURLForRemountingKey;

// export let kCFURLVolumeURLKey: string;
// global['kCFURLVolumeURLKey'] = kCFURLVolumeURLKey;

// export let kCFURLVolumeUUIDStringKey: string;
// global['kCFURLVolumeUUIDStringKey'] = kCFURLVolumeUUIDStringKey;

// export let kCFUserNotificationAlertHeaderKey: string;
// global['kCFUserNotificationAlertHeaderKey'] = kCFUserNotificationAlertHeaderKey;

// export let kCFUserNotificationAlertMessageKey: string;
// global['kCFUserNotificationAlertMessageKey'] = kCFUserNotificationAlertMessageKey;

// export let kCFUserNotificationAlertTopMostKey: string;
// global['kCFUserNotificationAlertTopMostKey'] = kCFUserNotificationAlertTopMostKey;

// export let kCFUserNotificationAlternateButtonTitleKey: string;
// global['kCFUserNotificationAlternateButtonTitleKey'] = kCFUserNotificationAlternateButtonTitleKey;

// export let kCFUserNotificationCheckBoxTitlesKey: string;
// global['kCFUserNotificationCheckBoxTitlesKey'] = kCFUserNotificationCheckBoxTitlesKey;

// export let kCFUserNotificationDefaultButtonTitleKey: string;
// global['kCFUserNotificationDefaultButtonTitleKey'] = kCFUserNotificationDefaultButtonTitleKey;

// export let kCFUserNotificationIconURLKey: string;
// global['kCFUserNotificationIconURLKey'] = kCFUserNotificationIconURLKey;

// export let kCFUserNotificationKeyboardTypesKey: string;
// global['kCFUserNotificationKeyboardTypesKey'] = kCFUserNotificationKeyboardTypesKey;

// export let kCFUserNotificationLocalizationURLKey: string;
// global['kCFUserNotificationLocalizationURLKey'] = kCFUserNotificationLocalizationURLKey;

// export let kCFUserNotificationOtherButtonTitleKey: string;
// global['kCFUserNotificationOtherButtonTitleKey'] = kCFUserNotificationOtherButtonTitleKey;

// export let kCFUserNotificationPopUpSelectionKey: string;
// global['kCFUserNotificationPopUpSelectionKey'] = kCFUserNotificationPopUpSelectionKey;

// export let kCFUserNotificationPopUpTitlesKey: string;
// global['kCFUserNotificationPopUpTitlesKey'] = kCFUserNotificationPopUpTitlesKey;

// export let kCFUserNotificationProgressIndicatorValueKey: string;
// global['kCFUserNotificationProgressIndicatorValueKey'] = kCFUserNotificationProgressIndicatorValueKey;

// export let kCFUserNotificationSoundURLKey: string;
// global['kCFUserNotificationSoundURLKey'] = kCFUserNotificationSoundURLKey;

// export let kCFUserNotificationTextFieldTitlesKey: string;
// global['kCFUserNotificationTextFieldTitlesKey'] = kCFUserNotificationTextFieldTitlesKey;

// export let kCFUserNotificationTextFieldValuesKey: string;
// global['kCFUserNotificationTextFieldValuesKey'] = kCFUserNotificationTextFieldValuesKey;

// export let kCFXMLTreeErrorDescription: string;
// global['kCFXMLTreeErrorDescription'] = kCFXMLTreeErrorDescription;

// export let kCFXMLTreeErrorLineNumber: string;
// global['kCFXMLTreeErrorLineNumber'] = kCFXMLTreeErrorLineNumber;

// export let kCFXMLTreeErrorLocation: string;
// global['kCFXMLTreeErrorLocation'] = kCFXMLTreeErrorLocation;

// export let kCFXMLTreeErrorStatusCode: string;
// global['kCFXMLTreeErrorStatusCode'] = kCFXMLTreeErrorStatusCode;

// export let kCGDisplayShowDuplicateLowResolutionModes: string;
// global['kCGDisplayShowDuplicateLowResolutionModes'] = kCGDisplayShowDuplicateLowResolutionModes;

// export let kCGFontIndexInvalid: number;
// global['kCGFontIndexInvalid'] = kCGFontIndexInvalid;

// export let kCGFontIndexMax: number;
// global['kCGFontIndexMax'] = kCGFontIndexMax;

// export let kCGGlyphMax: number;
// global['kCGGlyphMax'] = kCGGlyphMax;

// export let kCGPDFContextAccessPermissions: string;
// global['kCGPDFContextAccessPermissions'] = kCGPDFContextAccessPermissions;

// export let kCGPDFContextAllowsCopying: string;
// global['kCGPDFContextAllowsCopying'] = kCGPDFContextAllowsCopying;

// export let kCGPDFContextAllowsPrinting: string;
// global['kCGPDFContextAllowsPrinting'] = kCGPDFContextAllowsPrinting;

// export let kCGPDFContextArtBox: string;
// global['kCGPDFContextArtBox'] = kCGPDFContextArtBox;

// export let kCGPDFContextAuthor: string;
// global['kCGPDFContextAuthor'] = kCGPDFContextAuthor;

// export let kCGPDFContextBleedBox: string;
// global['kCGPDFContextBleedBox'] = kCGPDFContextBleedBox;

// export let kCGPDFContextCreator: string;
// global['kCGPDFContextCreator'] = kCGPDFContextCreator;

// export let kCGPDFContextCropBox: string;
// global['kCGPDFContextCropBox'] = kCGPDFContextCropBox;

// export let kCGPDFContextEncryptionKeyLength: string;
// global['kCGPDFContextEncryptionKeyLength'] = kCGPDFContextEncryptionKeyLength;

// export let kCGPDFContextKeywords: string;
// global['kCGPDFContextKeywords'] = kCGPDFContextKeywords;

// export let kCGPDFContextMediaBox: string;
// global['kCGPDFContextMediaBox'] = kCGPDFContextMediaBox;

// export let kCGPDFContextOutputIntent: string;
// global['kCGPDFContextOutputIntent'] = kCGPDFContextOutputIntent;

// export let kCGPDFContextOutputIntents: string;
// global['kCGPDFContextOutputIntents'] = kCGPDFContextOutputIntents;

// export let kCGPDFContextOwnerPassword: string;
// global['kCGPDFContextOwnerPassword'] = kCGPDFContextOwnerPassword;

// export let kCGPDFContextSubject: string;
// global['kCGPDFContextSubject'] = kCGPDFContextSubject;

// export let kCGPDFContextTitle: string;
// global['kCGPDFContextTitle'] = kCGPDFContextTitle;

// export let kCGPDFContextTrimBox: string;
// global['kCGPDFContextTrimBox'] = kCGPDFContextTrimBox;

// export let kCGPDFContextUserPassword: string;
// global['kCGPDFContextUserPassword'] = kCGPDFContextUserPassword;

// export let kCGPDFOutlineChildren: string;
// global['kCGPDFOutlineChildren'] = kCGPDFOutlineChildren;

// export let kCGPDFOutlineDestination: string;
// global['kCGPDFOutlineDestination'] = kCGPDFOutlineDestination;

// export let kCGPDFOutlineDestinationRect: string;
// global['kCGPDFOutlineDestinationRect'] = kCGPDFOutlineDestinationRect;

// export let kCGPDFOutlineTitle: string;
// global['kCGPDFOutlineTitle'] = kCGPDFOutlineTitle;

// export let kCGPDFXDestinationOutputProfile: string;
// global['kCGPDFXDestinationOutputProfile'] = kCGPDFXDestinationOutputProfile;

// export let kCGPDFXInfo: string;
// global['kCGPDFXInfo'] = kCGPDFXInfo;

// export let kCGPDFXOutputCondition: string;
// global['kCGPDFXOutputCondition'] = kCGPDFXOutputCondition;

// export let kCGPDFXOutputConditionIdentifier: string;
// global['kCGPDFXOutputConditionIdentifier'] = kCGPDFXOutputConditionIdentifier;

// export let kCGPDFXOutputIntentSubtype: string;
// global['kCGPDFXOutputIntentSubtype'] = kCGPDFXOutputIntentSubtype;

// export let kCGPDFXRegistryName: string;
// global['kCGPDFXRegistryName'] = kCGPDFXRegistryName;

// export let kCGWindowAlpha: string;
// global['kCGWindowAlpha'] = kCGWindowAlpha;

// export let kCGWindowBackingLocationVideoMemory: string;
// global['kCGWindowBackingLocationVideoMemory'] = kCGWindowBackingLocationVideoMemory;

// export let kCGWindowBounds: string;
// global['kCGWindowBounds'] = kCGWindowBounds;

// export let kCGWindowIsOnscreen: string;
// global['kCGWindowIsOnscreen'] = kCGWindowIsOnscreen;

// export let kCGWindowLayer: string;
// global['kCGWindowLayer'] = kCGWindowLayer;

// export let kCGWindowMemoryUsage: string;
// global['kCGWindowMemoryUsage'] = kCGWindowMemoryUsage;

// export let kCGWindowName: string;
// global['kCGWindowName'] = kCGWindowName;

// export let kCGWindowNumber: string;
// global['kCGWindowNumber'] = kCGWindowNumber;

// export let kCGWindowOwnerName: string;
// global['kCGWindowOwnerName'] = kCGWindowOwnerName;

// export let kCGWindowOwnerPID: string;
// global['kCGWindowOwnerPID'] = kCGWindowOwnerPID;

// export let kCGWindowSharingState: string;
// global['kCGWindowSharingState'] = kCGWindowSharingState;

// export let kCGWindowStoreType: string;
// global['kCGWindowStoreType'] = kCGWindowStoreType;

// export let CIDetectorAccuracy: string;
// global['CIDetectorAccuracy'] = CIDetectorAccuracy;

// export let CIDetectorAccuracyHigh: string;
// global['CIDetectorAccuracyHigh'] = CIDetectorAccuracyHigh;

// export let CIDetectorAccuracyLow: string;
// global['CIDetectorAccuracyLow'] = CIDetectorAccuracyLow;

// export let CIDetectorAspectRatio: string;
// global['CIDetectorAspectRatio'] = CIDetectorAspectRatio;

// export let CIDetectorEyeBlink: string;
// global['CIDetectorEyeBlink'] = CIDetectorEyeBlink;

// export let CIDetectorFocalLength: string;
// global['CIDetectorFocalLength'] = CIDetectorFocalLength;

// export let CIDetectorImageOrientation: string;
// global['CIDetectorImageOrientation'] = CIDetectorImageOrientation;

// export let CIDetectorMaxFeatureCount: string;
// global['CIDetectorMaxFeatureCount'] = CIDetectorMaxFeatureCount;

// export let CIDetectorMinFeatureSize: string;
// global['CIDetectorMinFeatureSize'] = CIDetectorMinFeatureSize;

// export let CIDetectorNumberOfAngles: string;
// global['CIDetectorNumberOfAngles'] = CIDetectorNumberOfAngles;

// export let CIDetectorReturnSubFeatures: string;
// global['CIDetectorReturnSubFeatures'] = CIDetectorReturnSubFeatures;

// export let CIDetectorSmile: string;
// global['CIDetectorSmile'] = CIDetectorSmile;

// export let CIDetectorTracking: string;
// global['CIDetectorTracking'] = CIDetectorTracking;

// export let CIDetectorTypeFace: string;
// global['CIDetectorTypeFace'] = CIDetectorTypeFace;

// export let CIDetectorTypeQRCode: string;
// global['CIDetectorTypeQRCode'] = CIDetectorTypeQRCode;

// export let CIDetectorTypeRectangle: string;
// global['CIDetectorTypeRectangle'] = CIDetectorTypeRectangle;

// export let CIDetectorTypeText: string;
// global['CIDetectorTypeText'] = CIDetectorTypeText;

// export let CIFeatureTypeFace: string;
// global['CIFeatureTypeFace'] = CIFeatureTypeFace;

// export let CIFeatureTypeQRCode: string;
// global['CIFeatureTypeQRCode'] = CIFeatureTypeQRCode;

// export let CIFeatureTypeRectangle: string;
// global['CIFeatureTypeRectangle'] = CIFeatureTypeRectangle;

// export let CIFeatureTypeText: string;
// global['CIFeatureTypeText'] = CIFeatureTypeText;

// export let kCIApplyOptionColorSpace: string;
// global['kCIApplyOptionColorSpace'] = kCIApplyOptionColorSpace;

// export let kCIApplyOptionDefinition: string;
// global['kCIApplyOptionDefinition'] = kCIApplyOptionDefinition;

// export let kCIApplyOptionExtent: string;
// global['kCIApplyOptionExtent'] = kCIApplyOptionExtent;

// export let kCIApplyOptionUserInfo: string;
// global['kCIApplyOptionUserInfo'] = kCIApplyOptionUserInfo;

// export let kCIAttributeClass: string;
// global['kCIAttributeClass'] = kCIAttributeClass;

// export let kCIAttributeDefault: string;
// global['kCIAttributeDefault'] = kCIAttributeDefault;

// export let kCIAttributeDescription: string;
// global['kCIAttributeDescription'] = kCIAttributeDescription;

// export let kCIAttributeDisplayName: string;
// global['kCIAttributeDisplayName'] = kCIAttributeDisplayName;

// export let kCIAttributeFilterAvailable_Mac: string;
// global['kCIAttributeFilterAvailable_Mac'] = kCIAttributeFilterAvailable_Mac;

// export let kCIAttributeFilterAvailable_iOS: string;
// global['kCIAttributeFilterAvailable_iOS'] = kCIAttributeFilterAvailable_iOS;

// export let kCIAttributeFilterCategories: string;
// global['kCIAttributeFilterCategories'] = kCIAttributeFilterCategories;

// export let kCIAttributeFilterDisplayName: string;
// global['kCIAttributeFilterDisplayName'] = kCIAttributeFilterDisplayName;

// export let kCIAttributeFilterName: string;
// global['kCIAttributeFilterName'] = kCIAttributeFilterName;

// export let kCIAttributeIdentity: string;
// global['kCIAttributeIdentity'] = kCIAttributeIdentity;

// export let kCIAttributeMax: string;
// global['kCIAttributeMax'] = kCIAttributeMax;

// export let kCIAttributeMin: string;
// global['kCIAttributeMin'] = kCIAttributeMin;

// export let kCIAttributeName: string;
// global['kCIAttributeName'] = kCIAttributeName;

// export let kCIAttributeReferenceDocumentation: string;
// global['kCIAttributeReferenceDocumentation'] = kCIAttributeReferenceDocumentation;

// export let kCIAttributeSliderMax: string;
// global['kCIAttributeSliderMax'] = kCIAttributeSliderMax;

// export let kCIAttributeSliderMin: string;
// global['kCIAttributeSliderMin'] = kCIAttributeSliderMin;

// export let kCIAttributeType: string;
// global['kCIAttributeType'] = kCIAttributeType;

// export let kCIAttributeTypeAngle: string;
// global['kCIAttributeTypeAngle'] = kCIAttributeTypeAngle;

// export let kCIAttributeTypeBoolean: string;
// global['kCIAttributeTypeBoolean'] = kCIAttributeTypeBoolean;

// export let kCIAttributeTypeColor: string;
// global['kCIAttributeTypeColor'] = kCIAttributeTypeColor;

// export let kCIAttributeTypeCount: string;
// global['kCIAttributeTypeCount'] = kCIAttributeTypeCount;

// export let kCIAttributeTypeDistance: string;
// global['kCIAttributeTypeDistance'] = kCIAttributeTypeDistance;

// export let kCIAttributeTypeGradient: string;
// global['kCIAttributeTypeGradient'] = kCIAttributeTypeGradient;

// export let kCIAttributeTypeImage: string;
// global['kCIAttributeTypeImage'] = kCIAttributeTypeImage;

// export let kCIAttributeTypeInteger: string;
// global['kCIAttributeTypeInteger'] = kCIAttributeTypeInteger;

// export let kCIAttributeTypeOffset: string;
// global['kCIAttributeTypeOffset'] = kCIAttributeTypeOffset;

// export let kCIAttributeTypeOpaqueColor: string;
// global['kCIAttributeTypeOpaqueColor'] = kCIAttributeTypeOpaqueColor;

// export let kCIAttributeTypePosition: string;
// global['kCIAttributeTypePosition'] = kCIAttributeTypePosition;

// export let kCIAttributeTypePosition3: string;
// global['kCIAttributeTypePosition3'] = kCIAttributeTypePosition3;

// export let kCIAttributeTypeRectangle: string;
// global['kCIAttributeTypeRectangle'] = kCIAttributeTypeRectangle;

// export let kCIAttributeTypeScalar: string;
// global['kCIAttributeTypeScalar'] = kCIAttributeTypeScalar;

// export let kCIAttributeTypeTime: string;
// global['kCIAttributeTypeTime'] = kCIAttributeTypeTime;

// export let kCIAttributeTypeTransform: string;
// global['kCIAttributeTypeTransform'] = kCIAttributeTypeTransform;

// export let kCICategoryBlur: string;
// global['kCICategoryBlur'] = kCICategoryBlur;

// export let kCICategoryBuiltIn: string;
// global['kCICategoryBuiltIn'] = kCICategoryBuiltIn;

// export let kCICategoryColorAdjustment: string;
// global['kCICategoryColorAdjustment'] = kCICategoryColorAdjustment;

// export let kCICategoryColorEffect: string;
// global['kCICategoryColorEffect'] = kCICategoryColorEffect;

// export let kCICategoryCompositeOperation: string;
// global['kCICategoryCompositeOperation'] = kCICategoryCompositeOperation;

// export let kCICategoryDistortionEffect: string;
// global['kCICategoryDistortionEffect'] = kCICategoryDistortionEffect;

// export let kCICategoryFilterGenerator: string;
// global['kCICategoryFilterGenerator'] = kCICategoryFilterGenerator;

// export let kCICategoryGenerator: string;
// global['kCICategoryGenerator'] = kCICategoryGenerator;

// export let kCICategoryGeometryAdjustment: string;
// global['kCICategoryGeometryAdjustment'] = kCICategoryGeometryAdjustment;

// export let kCICategoryGradient: string;
// global['kCICategoryGradient'] = kCICategoryGradient;

// export let kCICategoryHalftoneEffect: string;
// global['kCICategoryHalftoneEffect'] = kCICategoryHalftoneEffect;

// export let kCICategoryHighDynamicRange: string;
// global['kCICategoryHighDynamicRange'] = kCICategoryHighDynamicRange;

// export let kCICategoryInterlaced: string;
// global['kCICategoryInterlaced'] = kCICategoryInterlaced;

// export let kCICategoryNonSquarePixels: string;
// global['kCICategoryNonSquarePixels'] = kCICategoryNonSquarePixels;

// export let kCICategoryReduction: string;
// global['kCICategoryReduction'] = kCICategoryReduction;

// export let kCICategorySharpen: string;
// global['kCICategorySharpen'] = kCICategorySharpen;

// export let kCICategoryStillImage: string;
// global['kCICategoryStillImage'] = kCICategoryStillImage;

// export let kCICategoryStylize: string;
// global['kCICategoryStylize'] = kCICategoryStylize;

// export let kCICategoryTileEffect: string;
// global['kCICategoryTileEffect'] = kCICategoryTileEffect;

// export let kCICategoryTransition: string;
// global['kCICategoryTransition'] = kCICategoryTransition;

// export let kCICategoryVideo: string;
// global['kCICategoryVideo'] = kCICategoryVideo;

// export let kCIFilterGeneratorExportedKey: string;
// global['kCIFilterGeneratorExportedKey'] = kCIFilterGeneratorExportedKey;

// export let kCIFilterGeneratorExportedKeyName: string;
// global['kCIFilterGeneratorExportedKeyName'] = kCIFilterGeneratorExportedKeyName;

// export let kCIFilterGeneratorExportedKeyTargetObject: string;
// global['kCIFilterGeneratorExportedKeyTargetObject'] = kCIFilterGeneratorExportedKeyTargetObject;

// export let kCIInputAmountKey: string;
// global['kCIInputAmountKey'] = kCIInputAmountKey;

// export let kCIInputAngleKey: string;
// global['kCIInputAngleKey'] = kCIInputAngleKey;

// export let kCIInputAspectRatioKey: string;
// global['kCIInputAspectRatioKey'] = kCIInputAspectRatioKey;

// export let kCIInputBackgroundImageKey: string;
// global['kCIInputBackgroundImageKey'] = kCIInputBackgroundImageKey;

// export let kCIInputBiasKey: string;
// global['kCIInputBiasKey'] = kCIInputBiasKey;

// export let kCIInputBrightnessKey: string;
// global['kCIInputBrightnessKey'] = kCIInputBrightnessKey;

// export let kCIInputCenterKey: string;
// global['kCIInputCenterKey'] = kCIInputCenterKey;

// export let kCIInputColorKey: string;
// global['kCIInputColorKey'] = kCIInputColorKey;

// export let kCIInputContrastKey: string;
// global['kCIInputContrastKey'] = kCIInputContrastKey;

// export let kCIInputDepthImageKey: string;
// global['kCIInputDepthImageKey'] = kCIInputDepthImageKey;

// export let kCIInputDisparityImageKey: string;
// global['kCIInputDisparityImageKey'] = kCIInputDisparityImageKey;

// export let kCIInputEVKey: string;
// global['kCIInputEVKey'] = kCIInputEVKey;

// export let kCIInputEnableEDRModeKey: string;
// global['kCIInputEnableEDRModeKey'] = kCIInputEnableEDRModeKey;

// export let kCIInputExtentKey: string;
// global['kCIInputExtentKey'] = kCIInputExtentKey;

// export let kCIInputGradientImageKey: string;
// global['kCIInputGradientImageKey'] = kCIInputGradientImageKey;

// export let kCIInputImageKey: string;
// global['kCIInputImageKey'] = kCIInputImageKey;

// export let kCIInputIntensityKey: string;
// global['kCIInputIntensityKey'] = kCIInputIntensityKey;

// export let kCIInputMaskImageKey: string;
// global['kCIInputMaskImageKey'] = kCIInputMaskImageKey;

// export let kCIInputMatteImageKey: string;
// global['kCIInputMatteImageKey'] = kCIInputMatteImageKey;

// export let kCIInputRadiusKey: string;
// global['kCIInputRadiusKey'] = kCIInputRadiusKey;

// export let kCIInputRefractionKey: string;
// global['kCIInputRefractionKey'] = kCIInputRefractionKey;

// export let kCIInputSaturationKey: string;
// global['kCIInputSaturationKey'] = kCIInputSaturationKey;

// export let kCIInputScaleKey: string;
// global['kCIInputScaleKey'] = kCIInputScaleKey;

// export let kCIInputShadingImageKey: string;
// global['kCIInputShadingImageKey'] = kCIInputShadingImageKey;

// export let kCIInputSharpnessKey: string;
// global['kCIInputSharpnessKey'] = kCIInputSharpnessKey;

// export let kCIInputTargetImageKey: string;
// global['kCIInputTargetImageKey'] = kCIInputTargetImageKey;

// export let kCIInputTimeKey: string;
// global['kCIInputTimeKey'] = kCIInputTimeKey;

// export let kCIInputTransformKey: string;
// global['kCIInputTransformKey'] = kCIInputTransformKey;

// export let kCIInputVersionKey: string;
// global['kCIInputVersionKey'] = kCIInputVersionKey;

// export let kCIInputWeightsKey: string;
// global['kCIInputWeightsKey'] = kCIInputWeightsKey;

// export let kCIInputWidthKey: string;
// global['kCIInputWidthKey'] = kCIInputWidthKey;

// export let kCIOutputImageKey: string;
// global['kCIOutputImageKey'] = kCIOutputImageKey;

// export let kCISamplerAffineMatrix: string;
// global['kCISamplerAffineMatrix'] = kCISamplerAffineMatrix;

// export let kCISamplerColorSpace: string;
// global['kCISamplerColorSpace'] = kCISamplerColorSpace;

// export let kCISamplerFilterLinear: string;
// global['kCISamplerFilterLinear'] = kCISamplerFilterLinear;

// export let kCISamplerFilterMode: string;
// global['kCISamplerFilterMode'] = kCISamplerFilterMode;

// export let kCISamplerFilterNearest: string;
// global['kCISamplerFilterNearest'] = kCISamplerFilterNearest;

// export let kCISamplerWrapBlack: string;
// global['kCISamplerWrapBlack'] = kCISamplerWrapBlack;

// export let kCISamplerWrapClamp: string;
// global['kCISamplerWrapClamp'] = kCISamplerWrapClamp;

// export let kCISamplerWrapMode: string;
// global['kCISamplerWrapMode'] = kCISamplerWrapMode;

// export let kCIUIParameterSet: string;
// global['kCIUIParameterSet'] = kCIUIParameterSet;

// export let kCIUISetAdvanced: string;
// global['kCIUISetAdvanced'] = kCIUISetAdvanced;

// export let kCIUISetBasic: string;
// global['kCIUISetBasic'] = kCIUISetBasic;

// export let kCIUISetDevelopment: string;
// global['kCIUISetDevelopment'] = kCIUISetDevelopment;

// export let kCIUISetIntermediate: string;
// global['kCIUISetIntermediate'] = kCIUISetIntermediate;

// export let kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha: string;
// global['kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha'] = kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha;

// export let kCMFormatDescriptionAlphaChannelMode_StraightAlpha: string;
// global['kCMFormatDescriptionAlphaChannelMode_StraightAlpha'] = kCMFormatDescriptionAlphaChannelMode_StraightAlpha;

// export let kCMFormatDescriptionChromaLocation_Bottom: string;
// global['kCMFormatDescriptionChromaLocation_Bottom'] = kCMFormatDescriptionChromaLocation_Bottom;

// export let kCMFormatDescriptionChromaLocation_BottomLeft: string;
// global['kCMFormatDescriptionChromaLocation_BottomLeft'] = kCMFormatDescriptionChromaLocation_BottomLeft;

// export let kCMFormatDescriptionChromaLocation_Center: string;
// global['kCMFormatDescriptionChromaLocation_Center'] = kCMFormatDescriptionChromaLocation_Center;

// export let kCMFormatDescriptionChromaLocation_DV420: string;
// global['kCMFormatDescriptionChromaLocation_DV420'] = kCMFormatDescriptionChromaLocation_DV420;

// export let kCMFormatDescriptionChromaLocation_Left: string;
// global['kCMFormatDescriptionChromaLocation_Left'] = kCMFormatDescriptionChromaLocation_Left;

// export let kCMFormatDescriptionChromaLocation_Top: string;
// global['kCMFormatDescriptionChromaLocation_Top'] = kCMFormatDescriptionChromaLocation_Top;

// export let kCMFormatDescriptionChromaLocation_TopLeft: string;
// global['kCMFormatDescriptionChromaLocation_TopLeft'] = kCMFormatDescriptionChromaLocation_TopLeft;

// export let kCMFormatDescriptionColorPrimaries_DCI_P3: string;
// global['kCMFormatDescriptionColorPrimaries_DCI_P3'] = kCMFormatDescriptionColorPrimaries_DCI_P3;

// export let kCMFormatDescriptionColorPrimaries_EBU_3213: string;
// global['kCMFormatDescriptionColorPrimaries_EBU_3213'] = kCMFormatDescriptionColorPrimaries_EBU_3213;

// export let kCMFormatDescriptionColorPrimaries_ITU_R_2020: string;
// global['kCMFormatDescriptionColorPrimaries_ITU_R_2020'] = kCMFormatDescriptionColorPrimaries_ITU_R_2020;

// export let kCMFormatDescriptionColorPrimaries_ITU_R_709_2: string;
// global['kCMFormatDescriptionColorPrimaries_ITU_R_709_2'] = kCMFormatDescriptionColorPrimaries_ITU_R_709_2;

// export let kCMFormatDescriptionColorPrimaries_P22: string;
// global['kCMFormatDescriptionColorPrimaries_P22'] = kCMFormatDescriptionColorPrimaries_P22;

// export let kCMFormatDescriptionColorPrimaries_P3_D65: string;
// global['kCMFormatDescriptionColorPrimaries_P3_D65'] = kCMFormatDescriptionColorPrimaries_P3_D65;

// export let kCMFormatDescriptionColorPrimaries_SMPTE_C: string;
// global['kCMFormatDescriptionColorPrimaries_SMPTE_C'] = kCMFormatDescriptionColorPrimaries_SMPTE_C;

// export let kCMFormatDescriptionConformsToMPEG2VideoProfile: string;
// global['kCMFormatDescriptionConformsToMPEG2VideoProfile'] = kCMFormatDescriptionConformsToMPEG2VideoProfile;

// export let kCMFormatDescriptionExtensionKey_MetadataKeyTable: string;
// global['kCMFormatDescriptionExtensionKey_MetadataKeyTable'] = kCMFormatDescriptionExtensionKey_MetadataKeyTable;

// export let kCMFormatDescriptionExtension_AlphaChannelMode: string;
// global['kCMFormatDescriptionExtension_AlphaChannelMode'] = kCMFormatDescriptionExtension_AlphaChannelMode;

// export let kCMFormatDescriptionExtension_AlternativeTransferCharacteristics: string;
// global['kCMFormatDescriptionExtension_AlternativeTransferCharacteristics'] = kCMFormatDescriptionExtension_AlternativeTransferCharacteristics;

// export let kCMFormatDescriptionExtension_AuxiliaryTypeInfo: string;
// global['kCMFormatDescriptionExtension_AuxiliaryTypeInfo'] = kCMFormatDescriptionExtension_AuxiliaryTypeInfo;

// export let kCMFormatDescriptionExtension_BytesPerRow: string;
// global['kCMFormatDescriptionExtension_BytesPerRow'] = kCMFormatDescriptionExtension_BytesPerRow;

// export let kCMFormatDescriptionExtension_ChromaLocationBottomField: string;
// global['kCMFormatDescriptionExtension_ChromaLocationBottomField'] = kCMFormatDescriptionExtension_ChromaLocationBottomField;

// export let kCMFormatDescriptionExtension_ChromaLocationTopField: string;
// global['kCMFormatDescriptionExtension_ChromaLocationTopField'] = kCMFormatDescriptionExtension_ChromaLocationTopField;

// export let kCMFormatDescriptionExtension_CleanAperture: string;
// global['kCMFormatDescriptionExtension_CleanAperture'] = kCMFormatDescriptionExtension_CleanAperture;

// export let kCMFormatDescriptionExtension_ColorPrimaries: string;
// global['kCMFormatDescriptionExtension_ColorPrimaries'] = kCMFormatDescriptionExtension_ColorPrimaries;

// export let kCMFormatDescriptionExtension_ContainsAlphaChannel: string;
// global['kCMFormatDescriptionExtension_ContainsAlphaChannel'] = kCMFormatDescriptionExtension_ContainsAlphaChannel;

// export let kCMFormatDescriptionExtension_ContentLightLevelInfo: string;
// global['kCMFormatDescriptionExtension_ContentLightLevelInfo'] = kCMFormatDescriptionExtension_ContentLightLevelInfo;

// export let kCMFormatDescriptionExtension_Depth: string;
// global['kCMFormatDescriptionExtension_Depth'] = kCMFormatDescriptionExtension_Depth;

// export let kCMFormatDescriptionExtension_FieldCount: string;
// global['kCMFormatDescriptionExtension_FieldCount'] = kCMFormatDescriptionExtension_FieldCount;

// export let kCMFormatDescriptionExtension_FieldDetail: string;
// global['kCMFormatDescriptionExtension_FieldDetail'] = kCMFormatDescriptionExtension_FieldDetail;

// export let kCMFormatDescriptionExtension_FormatName: string;
// global['kCMFormatDescriptionExtension_FormatName'] = kCMFormatDescriptionExtension_FormatName;

// export let kCMFormatDescriptionExtension_FullRangeVideo: string;
// global['kCMFormatDescriptionExtension_FullRangeVideo'] = kCMFormatDescriptionExtension_FullRangeVideo;

// export let kCMFormatDescriptionExtension_GammaLevel: string;
// global['kCMFormatDescriptionExtension_GammaLevel'] = kCMFormatDescriptionExtension_GammaLevel;

// export let kCMFormatDescriptionExtension_ICCProfile: string;
// global['kCMFormatDescriptionExtension_ICCProfile'] = kCMFormatDescriptionExtension_ICCProfile;

// export let kCMFormatDescriptionExtension_MasteringDisplayColorVolume: string;
// global['kCMFormatDescriptionExtension_MasteringDisplayColorVolume'] = kCMFormatDescriptionExtension_MasteringDisplayColorVolume;

// export let kCMFormatDescriptionExtension_OriginalCompressionSettings: string;
// global['kCMFormatDescriptionExtension_OriginalCompressionSettings'] = kCMFormatDescriptionExtension_OriginalCompressionSettings;

// export let kCMFormatDescriptionExtension_PixelAspectRatio: string;
// global['kCMFormatDescriptionExtension_PixelAspectRatio'] = kCMFormatDescriptionExtension_PixelAspectRatio;

// export let kCMFormatDescriptionExtension_RevisionLevel: string;
// global['kCMFormatDescriptionExtension_RevisionLevel'] = kCMFormatDescriptionExtension_RevisionLevel;

// export let kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms: string;
// global['kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms'] = kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms;

// export let kCMFormatDescriptionExtension_SpatialQuality: string;
// global['kCMFormatDescriptionExtension_SpatialQuality'] = kCMFormatDescriptionExtension_SpatialQuality;

// export let kCMFormatDescriptionExtension_TemporalQuality: string;
// global['kCMFormatDescriptionExtension_TemporalQuality'] = kCMFormatDescriptionExtension_TemporalQuality;

// export let kCMFormatDescriptionExtension_TransferFunction: string;
// global['kCMFormatDescriptionExtension_TransferFunction'] = kCMFormatDescriptionExtension_TransferFunction;

// export let kCMFormatDescriptionExtension_Vendor: string;
// global['kCMFormatDescriptionExtension_Vendor'] = kCMFormatDescriptionExtension_Vendor;

// export let kCMFormatDescriptionExtension_VerbatimISOSampleEntry: string;
// global['kCMFormatDescriptionExtension_VerbatimISOSampleEntry'] = kCMFormatDescriptionExtension_VerbatimISOSampleEntry;

// export let kCMFormatDescriptionExtension_VerbatimImageDescription: string;
// global['kCMFormatDescriptionExtension_VerbatimImageDescription'] = kCMFormatDescriptionExtension_VerbatimImageDescription;

// export let kCMFormatDescriptionExtension_VerbatimSampleDescription: string;
// global['kCMFormatDescriptionExtension_VerbatimSampleDescription'] = kCMFormatDescriptionExtension_VerbatimSampleDescription;

// export let kCMFormatDescriptionExtension_Version: string;
// global['kCMFormatDescriptionExtension_Version'] = kCMFormatDescriptionExtension_Version;

// export let kCMFormatDescriptionExtension_YCbCrMatrix: string;
// global['kCMFormatDescriptionExtension_YCbCrMatrix'] = kCMFormatDescriptionExtension_YCbCrMatrix;

// export let kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly: string;
// global['kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly'] = kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly;

// export let kCMFormatDescriptionFieldDetail_SpatialFirstLineLate: string;
// global['kCMFormatDescriptionFieldDetail_SpatialFirstLineLate'] = kCMFormatDescriptionFieldDetail_SpatialFirstLineLate;

// export let kCMFormatDescriptionFieldDetail_TemporalBottomFirst: string;
// global['kCMFormatDescriptionFieldDetail_TemporalBottomFirst'] = kCMFormatDescriptionFieldDetail_TemporalBottomFirst;

// export let kCMFormatDescriptionFieldDetail_TemporalTopFirst: string;
// global['kCMFormatDescriptionFieldDetail_TemporalTopFirst'] = kCMFormatDescriptionFieldDetail_TemporalTopFirst;

// export let kCMFormatDescriptionKey_CleanApertureHeight: string;
// global['kCMFormatDescriptionKey_CleanApertureHeight'] = kCMFormatDescriptionKey_CleanApertureHeight;

// export let kCMFormatDescriptionKey_CleanApertureHeightRational: string;
// global['kCMFormatDescriptionKey_CleanApertureHeightRational'] = kCMFormatDescriptionKey_CleanApertureHeightRational;

// export let kCMFormatDescriptionKey_CleanApertureHorizontalOffset: string;
// global['kCMFormatDescriptionKey_CleanApertureHorizontalOffset'] = kCMFormatDescriptionKey_CleanApertureHorizontalOffset;

// export let kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational: string;
// global['kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational'] = kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational;

// export let kCMFormatDescriptionKey_CleanApertureVerticalOffset: string;
// global['kCMFormatDescriptionKey_CleanApertureVerticalOffset'] = kCMFormatDescriptionKey_CleanApertureVerticalOffset;

// export let kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational: string;
// global['kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational'] = kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational;

// export let kCMFormatDescriptionKey_CleanApertureWidth: string;
// global['kCMFormatDescriptionKey_CleanApertureWidth'] = kCMFormatDescriptionKey_CleanApertureWidth;

// export let kCMFormatDescriptionKey_CleanApertureWidthRational: string;
// global['kCMFormatDescriptionKey_CleanApertureWidthRational'] = kCMFormatDescriptionKey_CleanApertureWidthRational;

// export let kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing: string;
// global['kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing'] = kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing;

// export let kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing: string;
// global['kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing'] = kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing;

// export let kCMFormatDescriptionTransferFunction_ITU_R_2020: string;
// global['kCMFormatDescriptionTransferFunction_ITU_R_2020'] = kCMFormatDescriptionTransferFunction_ITU_R_2020;

// export let kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG: string;
// global['kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG'] = kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG;

// export let kCMFormatDescriptionTransferFunction_ITU_R_709_2: string;
// global['kCMFormatDescriptionTransferFunction_ITU_R_709_2'] = kCMFormatDescriptionTransferFunction_ITU_R_709_2;

// export let kCMFormatDescriptionTransferFunction_Linear: string;
// global['kCMFormatDescriptionTransferFunction_Linear'] = kCMFormatDescriptionTransferFunction_Linear;

// export let kCMFormatDescriptionTransferFunction_SMPTE_240M_1995: string;
// global['kCMFormatDescriptionTransferFunction_SMPTE_240M_1995'] = kCMFormatDescriptionTransferFunction_SMPTE_240M_1995;

// export let kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ: string;
// global['kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ'] = kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ;

// export let kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1: string;
// global['kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1'] = kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1;

// export let kCMFormatDescriptionTransferFunction_UseGamma: string;
// global['kCMFormatDescriptionTransferFunction_UseGamma'] = kCMFormatDescriptionTransferFunction_UseGamma;

// export let kCMFormatDescriptionTransferFunction_sRGB: string;
// global['kCMFormatDescriptionTransferFunction_sRGB'] = kCMFormatDescriptionTransferFunction_sRGB;

// export let kCMFormatDescriptionVendor_Apple: string;
// global['kCMFormatDescriptionVendor_Apple'] = kCMFormatDescriptionVendor_Apple;

// export let kCMFormatDescriptionYCbCrMatrix_ITU_R_2020: string;
// global['kCMFormatDescriptionYCbCrMatrix_ITU_R_2020'] = kCMFormatDescriptionYCbCrMatrix_ITU_R_2020;

// export let kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4: string;
// global['kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4'] = kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4;

// export let kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2: string;
// global['kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2'] = kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2;

// export let kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995: string;
// global['kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995'] = kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995;

// export let kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags: string;
// global['kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags'] = kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags;

// export let kCMHEVCTemporalLevelInfoKey_LevelIndex: string;
// global['kCMHEVCTemporalLevelInfoKey_LevelIndex'] = kCMHEVCTemporalLevelInfoKey_LevelIndex;

// export let kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags: string;
// global['kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags'] = kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags;

// export let kCMHEVCTemporalLevelInfoKey_ProfileIndex: string;
// global['kCMHEVCTemporalLevelInfoKey_ProfileIndex'] = kCMHEVCTemporalLevelInfoKey_ProfileIndex;

// export let kCMHEVCTemporalLevelInfoKey_ProfileSpace: string;
// global['kCMHEVCTemporalLevelInfoKey_ProfileSpace'] = kCMHEVCTemporalLevelInfoKey_ProfileSpace;

// export let kCMHEVCTemporalLevelInfoKey_TemporalLevel: string;
// global['kCMHEVCTemporalLevelInfoKey_TemporalLevel'] = kCMHEVCTemporalLevelInfoKey_TemporalLevel;

// export let kCMHEVCTemporalLevelInfoKey_TierFlag: string;
// global['kCMHEVCTemporalLevelInfoKey_TierFlag'] = kCMHEVCTemporalLevelInfoKey_TierFlag;

// export let kCMMemoryPoolOption_AgeOutPeriod: string;
// global['kCMMemoryPoolOption_AgeOutPeriod'] = kCMMemoryPoolOption_AgeOutPeriod;

// export let kCMMetadataBaseDataType_AffineTransformF64: string;
// global['kCMMetadataBaseDataType_AffineTransformF64'] = kCMMetadataBaseDataType_AffineTransformF64;

// export let kCMMetadataBaseDataType_BMP: string;
// global['kCMMetadataBaseDataType_BMP'] = kCMMetadataBaseDataType_BMP;

// export let kCMMetadataBaseDataType_DimensionsF32: string;
// global['kCMMetadataBaseDataType_DimensionsF32'] = kCMMetadataBaseDataType_DimensionsF32;

// export let kCMMetadataBaseDataType_Float32: string;
// global['kCMMetadataBaseDataType_Float32'] = kCMMetadataBaseDataType_Float32;

// export let kCMMetadataBaseDataType_Float64: string;
// global['kCMMetadataBaseDataType_Float64'] = kCMMetadataBaseDataType_Float64;

// export let kCMMetadataBaseDataType_GIF: string;
// global['kCMMetadataBaseDataType_GIF'] = kCMMetadataBaseDataType_GIF;

// export let kCMMetadataBaseDataType_JPEG: string;
// global['kCMMetadataBaseDataType_JPEG'] = kCMMetadataBaseDataType_JPEG;

// export let kCMMetadataBaseDataType_JSON: string;
// global['kCMMetadataBaseDataType_JSON'] = kCMMetadataBaseDataType_JSON;

// export let kCMMetadataBaseDataType_PNG: string;
// global['kCMMetadataBaseDataType_PNG'] = kCMMetadataBaseDataType_PNG;

// export let kCMMetadataBaseDataType_PerspectiveTransformF64: string;
// global['kCMMetadataBaseDataType_PerspectiveTransformF64'] = kCMMetadataBaseDataType_PerspectiveTransformF64;

// export let kCMMetadataBaseDataType_PointF32: string;
// global['kCMMetadataBaseDataType_PointF32'] = kCMMetadataBaseDataType_PointF32;

// export let kCMMetadataBaseDataType_PolygonF32: string;
// global['kCMMetadataBaseDataType_PolygonF32'] = kCMMetadataBaseDataType_PolygonF32;

// export let kCMMetadataBaseDataType_PolylineF32: string;
// global['kCMMetadataBaseDataType_PolylineF32'] = kCMMetadataBaseDataType_PolylineF32;

// export let kCMMetadataBaseDataType_RawData: string;
// global['kCMMetadataBaseDataType_RawData'] = kCMMetadataBaseDataType_RawData;

// export let kCMMetadataBaseDataType_RectF32: string;
// global['kCMMetadataBaseDataType_RectF32'] = kCMMetadataBaseDataType_RectF32;

// export let kCMMetadataBaseDataType_SInt16: string;
// global['kCMMetadataBaseDataType_SInt16'] = kCMMetadataBaseDataType_SInt16;

// export let kCMMetadataBaseDataType_SInt32: string;
// global['kCMMetadataBaseDataType_SInt32'] = kCMMetadataBaseDataType_SInt32;

// export let kCMMetadataBaseDataType_SInt64: string;
// global['kCMMetadataBaseDataType_SInt64'] = kCMMetadataBaseDataType_SInt64;

// export let kCMMetadataBaseDataType_SInt8: string;
// global['kCMMetadataBaseDataType_SInt8'] = kCMMetadataBaseDataType_SInt8;

// export let kCMMetadataBaseDataType_UInt16: string;
// global['kCMMetadataBaseDataType_UInt16'] = kCMMetadataBaseDataType_UInt16;

// export let kCMMetadataBaseDataType_UInt32: string;
// global['kCMMetadataBaseDataType_UInt32'] = kCMMetadataBaseDataType_UInt32;

// export let kCMMetadataBaseDataType_UInt64: string;
// global['kCMMetadataBaseDataType_UInt64'] = kCMMetadataBaseDataType_UInt64;

// export let kCMMetadataBaseDataType_UInt8: string;
// global['kCMMetadataBaseDataType_UInt8'] = kCMMetadataBaseDataType_UInt8;

// export let kCMMetadataBaseDataType_UTF16: string;
// global['kCMMetadataBaseDataType_UTF16'] = kCMMetadataBaseDataType_UTF16;

// export let kCMMetadataBaseDataType_UTF8: string;
// global['kCMMetadataBaseDataType_UTF8'] = kCMMetadataBaseDataType_UTF8;

// export let kCMMetadataDataType_QuickTimeMetadataDirection: string;
// global['kCMMetadataDataType_QuickTimeMetadataDirection'] = kCMMetadataDataType_QuickTimeMetadataDirection;

// export let kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709: string;
// global['kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709'] = kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709;

// export let kCMMetadataFormatDescriptionKey_ConformingDataTypes: string;
// global['kCMMetadataFormatDescriptionKey_ConformingDataTypes'] = kCMMetadataFormatDescriptionKey_ConformingDataTypes;

// export let kCMMetadataFormatDescriptionKey_DataType: string;
// global['kCMMetadataFormatDescriptionKey_DataType'] = kCMMetadataFormatDescriptionKey_DataType;

// export let kCMMetadataFormatDescriptionKey_DataTypeNamespace: string;
// global['kCMMetadataFormatDescriptionKey_DataTypeNamespace'] = kCMMetadataFormatDescriptionKey_DataTypeNamespace;

// export let kCMMetadataFormatDescriptionKey_LanguageTag: string;
// global['kCMMetadataFormatDescriptionKey_LanguageTag'] = kCMMetadataFormatDescriptionKey_LanguageTag;

// export let kCMMetadataFormatDescriptionKey_LocalID: string;
// global['kCMMetadataFormatDescriptionKey_LocalID'] = kCMMetadataFormatDescriptionKey_LocalID;

// export let kCMMetadataFormatDescriptionKey_Namespace: string;
// global['kCMMetadataFormatDescriptionKey_Namespace'] = kCMMetadataFormatDescriptionKey_Namespace;

// export let kCMMetadataFormatDescriptionKey_SetupData: string;
// global['kCMMetadataFormatDescriptionKey_SetupData'] = kCMMetadataFormatDescriptionKey_SetupData;

// export let kCMMetadataFormatDescriptionKey_StructuralDependency: string;
// global['kCMMetadataFormatDescriptionKey_StructuralDependency'] = kCMMetadataFormatDescriptionKey_StructuralDependency;

// export let kCMMetadataFormatDescriptionKey_Value: string;
// global['kCMMetadataFormatDescriptionKey_Value'] = kCMMetadataFormatDescriptionKey_Value;

// export let kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType: string;
// global['kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType;

// export let kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag: string;
// global['kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag;

// export let kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier: string;
// global['kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier;

// export let kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData: string;
// global['kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData;

// export let kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency: string;
// global['kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency;

// export let kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag: string;
// global['kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag'] = kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag;

// export let kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing: string;
// global['kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing'] = kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing;

// export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform: string;
// global['kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform'] = kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform;

// export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions: string;
// global['kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions'] = kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions;

// export let kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709: string;
// global['kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709'] = kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709;

// export let kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform: string;
// global['kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform'] = kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform;

// export let kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation: string;
// global['kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation'] = kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation;

// export let kCMMetadataKeySpace_HLSDateRange: string;
// global['kCMMetadataKeySpace_HLSDateRange'] = kCMMetadataKeySpace_HLSDateRange;

// export let kCMMetadataKeySpace_ID3: string;
// global['kCMMetadataKeySpace_ID3'] = kCMMetadataKeySpace_ID3;

// export let kCMMetadataKeySpace_ISOUserData: string;
// global['kCMMetadataKeySpace_ISOUserData'] = kCMMetadataKeySpace_ISOUserData;

// export let kCMMetadataKeySpace_Icy: string;
// global['kCMMetadataKeySpace_Icy'] = kCMMetadataKeySpace_Icy;

// export let kCMMetadataKeySpace_QuickTimeMetadata: string;
// global['kCMMetadataKeySpace_QuickTimeMetadata'] = kCMMetadataKeySpace_QuickTimeMetadata;

// export let kCMMetadataKeySpace_QuickTimeUserData: string;
// global['kCMMetadataKeySpace_QuickTimeUserData'] = kCMMetadataKeySpace_QuickTimeUserData;

// export let kCMMetadataKeySpace_iTunes: string;
// global['kCMMetadataKeySpace_iTunes'] = kCMMetadataKeySpace_iTunes;

// export let kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount: string;
// global['kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount'] = kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount;

// export let kCMSampleAttachmentKey_DependsOnOthers: string;
// global['kCMSampleAttachmentKey_DependsOnOthers'] = kCMSampleAttachmentKey_DependsOnOthers;

// export let kCMSampleAttachmentKey_DisplayImmediately: string;
// global['kCMSampleAttachmentKey_DisplayImmediately'] = kCMSampleAttachmentKey_DisplayImmediately;

// export let kCMSampleAttachmentKey_DoNotDisplay: string;
// global['kCMSampleAttachmentKey_DoNotDisplay'] = kCMSampleAttachmentKey_DoNotDisplay;

// export let kCMSampleAttachmentKey_EarlierDisplayTimesAllowed: string;
// global['kCMSampleAttachmentKey_EarlierDisplayTimesAllowed'] = kCMSampleAttachmentKey_EarlierDisplayTimesAllowed;

// export let kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess: string;
// global['kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess'] = kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess;

// export let kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType: string;
// global['kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType'] = kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType;

// export let kCMSampleAttachmentKey_HEVCTemporalLevelInfo: string;
// global['kCMSampleAttachmentKey_HEVCTemporalLevelInfo'] = kCMSampleAttachmentKey_HEVCTemporalLevelInfo;

// export let kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess: string;
// global['kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess'] = kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess;

// export let kCMSampleAttachmentKey_HasRedundantCoding: string;
// global['kCMSampleAttachmentKey_HasRedundantCoding'] = kCMSampleAttachmentKey_HasRedundantCoding;

// export let kCMSampleAttachmentKey_IsDependedOnByOthers: string;
// global['kCMSampleAttachmentKey_IsDependedOnByOthers'] = kCMSampleAttachmentKey_IsDependedOnByOthers;

// export let kCMSampleAttachmentKey_NotSync: string;
// global['kCMSampleAttachmentKey_NotSync'] = kCMSampleAttachmentKey_NotSync;

// export let kCMSampleAttachmentKey_PartialSync: string;
// global['kCMSampleAttachmentKey_PartialSync'] = kCMSampleAttachmentKey_PartialSync;

// export let kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix: string;
// global['kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix'] = kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix;

// export let kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately: string;
// global['kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately'] = kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately;

// export let kCMSampleBufferAttachmentKey_DrainAfterDecoding: string;
// global['kCMSampleBufferAttachmentKey_DrainAfterDecoding'] = kCMSampleBufferAttachmentKey_DrainAfterDecoding;

// export let kCMSampleBufferAttachmentKey_DroppedFrameReason: string;
// global['kCMSampleBufferAttachmentKey_DroppedFrameReason'] = kCMSampleBufferAttachmentKey_DroppedFrameReason;

// export let kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo: string;
// global['kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo'] = kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo;

// export let kCMSampleBufferAttachmentKey_EmptyMedia: string;
// global['kCMSampleBufferAttachmentKey_EmptyMedia'] = kCMSampleBufferAttachmentKey_EmptyMedia;

// export let kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration: string;
// global['kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration'] = kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration;

// export let kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence: string;
// global['kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence'] = kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence;

// export let kCMSampleBufferAttachmentKey_ForceKeyFrame: string;
// global['kCMSampleBufferAttachmentKey_ForceKeyFrame'] = kCMSampleBufferAttachmentKey_ForceKeyFrame;

// export let kCMSampleBufferAttachmentKey_GradualDecoderRefresh: string;
// global['kCMSampleBufferAttachmentKey_GradualDecoderRefresh'] = kCMSampleBufferAttachmentKey_GradualDecoderRefresh;

// export let kCMSampleBufferAttachmentKey_PermanentEmptyMedia: string;
// global['kCMSampleBufferAttachmentKey_PermanentEmptyMedia'] = kCMSampleBufferAttachmentKey_PermanentEmptyMedia;

// export let kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed: string;
// global['kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed'] = kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed;

// export let kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding: string;
// global['kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding'] = kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding;

// export let kCMSampleBufferAttachmentKey_ResumeOutput: string;
// global['kCMSampleBufferAttachmentKey_ResumeOutput'] = kCMSampleBufferAttachmentKey_ResumeOutput;

// export let kCMSampleBufferAttachmentKey_Reverse: string;
// global['kCMSampleBufferAttachmentKey_Reverse'] = kCMSampleBufferAttachmentKey_Reverse;

// export let kCMSampleBufferAttachmentKey_SampleReferenceByteOffset: string;
// global['kCMSampleBufferAttachmentKey_SampleReferenceByteOffset'] = kCMSampleBufferAttachmentKey_SampleReferenceByteOffset;

// export let kCMSampleBufferAttachmentKey_SampleReferenceURL: string;
// global['kCMSampleBufferAttachmentKey_SampleReferenceURL'] = kCMSampleBufferAttachmentKey_SampleReferenceURL;

// export let kCMSampleBufferAttachmentKey_SpeedMultiplier: string;
// global['kCMSampleBufferAttachmentKey_SpeedMultiplier'] = kCMSampleBufferAttachmentKey_SpeedMultiplier;

// export let kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo: string;
// global['kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo'] = kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo;

// export let kCMSampleBufferAttachmentKey_TransitionID: string;
// global['kCMSampleBufferAttachmentKey_TransitionID'] = kCMSampleBufferAttachmentKey_TransitionID;

// export let kCMSampleBufferAttachmentKey_TrimDurationAtEnd: string;
// global['kCMSampleBufferAttachmentKey_TrimDurationAtEnd'] = kCMSampleBufferAttachmentKey_TrimDurationAtEnd;

// export let kCMSampleBufferAttachmentKey_TrimDurationAtStart: string;
// global['kCMSampleBufferAttachmentKey_TrimDurationAtStart'] = kCMSampleBufferAttachmentKey_TrimDurationAtStart;

// export let kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS: string;
// global['kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS'] = kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS;

// export let kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS: string;
// global['kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS'] = kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS;

// export let kCMSampleBufferConduitNotificationParameter_ResumeTag: string;
// global['kCMSampleBufferConduitNotificationParameter_ResumeTag'] = kCMSampleBufferConduitNotificationParameter_ResumeTag;

// export let kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange: string;
// global['kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange'] = kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange;

// export let kCMSampleBufferConduitNotification_InhibitOutputUntil: string;
// global['kCMSampleBufferConduitNotification_InhibitOutputUntil'] = kCMSampleBufferConduitNotification_InhibitOutputUntil;

// export let kCMSampleBufferConduitNotification_ResetOutput: string;
// global['kCMSampleBufferConduitNotification_ResetOutput'] = kCMSampleBufferConduitNotification_ResetOutput;

// export let kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged: string;
// global['kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged'] = kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged;

// export let kCMSampleBufferConsumerNotification_BufferConsumed: string;
// global['kCMSampleBufferConsumerNotification_BufferConsumed'] = kCMSampleBufferConsumerNotification_BufferConsumed;

// export let kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch: string;
// global['kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch'] = kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch;

// export let kCMSampleBufferDroppedFrameReason_Discontinuity: string;
// global['kCMSampleBufferDroppedFrameReason_Discontinuity'] = kCMSampleBufferDroppedFrameReason_Discontinuity;

// export let kCMSampleBufferDroppedFrameReason_FrameWasLate: string;
// global['kCMSampleBufferDroppedFrameReason_FrameWasLate'] = kCMSampleBufferDroppedFrameReason_FrameWasLate;

// export let kCMSampleBufferDroppedFrameReason_OutOfBuffers: string;
// global['kCMSampleBufferDroppedFrameReason_OutOfBuffers'] = kCMSampleBufferDroppedFrameReason_OutOfBuffers;

// export let kCMSampleBufferLensStabilizationInfo_Active: string;
// global['kCMSampleBufferLensStabilizationInfo_Active'] = kCMSampleBufferLensStabilizationInfo_Active;

// export let kCMSampleBufferLensStabilizationInfo_Off: string;
// global['kCMSampleBufferLensStabilizationInfo_Off'] = kCMSampleBufferLensStabilizationInfo_Off;

// export let kCMSampleBufferLensStabilizationInfo_OutOfRange: string;
// global['kCMSampleBufferLensStabilizationInfo_OutOfRange'] = kCMSampleBufferLensStabilizationInfo_OutOfRange;

// export let kCMSampleBufferLensStabilizationInfo_Unavailable: string;
// global['kCMSampleBufferLensStabilizationInfo_Unavailable'] = kCMSampleBufferLensStabilizationInfo_Unavailable;

// export let kCMSampleBufferNotificationParameter_OSStatus: string;
// global['kCMSampleBufferNotificationParameter_OSStatus'] = kCMSampleBufferNotificationParameter_OSStatus;

// export let kCMSampleBufferNotification_DataBecameReady: string;
// global['kCMSampleBufferNotification_DataBecameReady'] = kCMSampleBufferNotification_DataBecameReady;

// export let kCMSampleBufferNotification_DataFailed: string;
// global['kCMSampleBufferNotification_DataFailed'] = kCMSampleBufferNotification_DataFailed;

// export let kCMTextFormatDescriptionColor_Alpha: string;
// global['kCMTextFormatDescriptionColor_Alpha'] = kCMTextFormatDescriptionColor_Alpha;

// export let kCMTextFormatDescriptionColor_Blue: string;
// global['kCMTextFormatDescriptionColor_Blue'] = kCMTextFormatDescriptionColor_Blue;

// export let kCMTextFormatDescriptionColor_Green: string;
// global['kCMTextFormatDescriptionColor_Green'] = kCMTextFormatDescriptionColor_Green;

// export let kCMTextFormatDescriptionColor_Red: string;
// global['kCMTextFormatDescriptionColor_Red'] = kCMTextFormatDescriptionColor_Red;

// export let kCMTextFormatDescriptionExtension_BackgroundColor: string;
// global['kCMTextFormatDescriptionExtension_BackgroundColor'] = kCMTextFormatDescriptionExtension_BackgroundColor;

// export let kCMTextFormatDescriptionExtension_DefaultFontName: string;
// global['kCMTextFormatDescriptionExtension_DefaultFontName'] = kCMTextFormatDescriptionExtension_DefaultFontName;

// export let kCMTextFormatDescriptionExtension_DefaultStyle: string;
// global['kCMTextFormatDescriptionExtension_DefaultStyle'] = kCMTextFormatDescriptionExtension_DefaultStyle;

// export let kCMTextFormatDescriptionExtension_DefaultTextBox: string;
// global['kCMTextFormatDescriptionExtension_DefaultTextBox'] = kCMTextFormatDescriptionExtension_DefaultTextBox;

// export let kCMTextFormatDescriptionExtension_DisplayFlags: string;
// global['kCMTextFormatDescriptionExtension_DisplayFlags'] = kCMTextFormatDescriptionExtension_DisplayFlags;

// export let kCMTextFormatDescriptionExtension_FontTable: string;
// global['kCMTextFormatDescriptionExtension_FontTable'] = kCMTextFormatDescriptionExtension_FontTable;

// export let kCMTextFormatDescriptionExtension_HorizontalJustification: string;
// global['kCMTextFormatDescriptionExtension_HorizontalJustification'] = kCMTextFormatDescriptionExtension_HorizontalJustification;

// export let kCMTextFormatDescriptionExtension_TextJustification: string;
// global['kCMTextFormatDescriptionExtension_TextJustification'] = kCMTextFormatDescriptionExtension_TextJustification;

// export let kCMTextFormatDescriptionExtension_VerticalJustification: string;
// global['kCMTextFormatDescriptionExtension_VerticalJustification'] = kCMTextFormatDescriptionExtension_VerticalJustification;

// export let kCMTextFormatDescriptionRect_Bottom: string;
// global['kCMTextFormatDescriptionRect_Bottom'] = kCMTextFormatDescriptionRect_Bottom;

// export let kCMTextFormatDescriptionRect_Left: string;
// global['kCMTextFormatDescriptionRect_Left'] = kCMTextFormatDescriptionRect_Left;

// export let kCMTextFormatDescriptionRect_Right: string;
// global['kCMTextFormatDescriptionRect_Right'] = kCMTextFormatDescriptionRect_Right;

// export let kCMTextFormatDescriptionRect_Top: string;
// global['kCMTextFormatDescriptionRect_Top'] = kCMTextFormatDescriptionRect_Top;

// export let kCMTextFormatDescriptionStyle_Ascent: string;
// global['kCMTextFormatDescriptionStyle_Ascent'] = kCMTextFormatDescriptionStyle_Ascent;

// export let kCMTextFormatDescriptionStyle_EndChar: string;
// global['kCMTextFormatDescriptionStyle_EndChar'] = kCMTextFormatDescriptionStyle_EndChar;

// export let kCMTextFormatDescriptionStyle_Font: string;
// global['kCMTextFormatDescriptionStyle_Font'] = kCMTextFormatDescriptionStyle_Font;

// export let kCMTextFormatDescriptionStyle_FontFace: string;
// global['kCMTextFormatDescriptionStyle_FontFace'] = kCMTextFormatDescriptionStyle_FontFace;

// export let kCMTextFormatDescriptionStyle_FontSize: string;
// global['kCMTextFormatDescriptionStyle_FontSize'] = kCMTextFormatDescriptionStyle_FontSize;

// export let kCMTextFormatDescriptionStyle_ForegroundColor: string;
// global['kCMTextFormatDescriptionStyle_ForegroundColor'] = kCMTextFormatDescriptionStyle_ForegroundColor;

// export let kCMTextFormatDescriptionStyle_Height: string;
// global['kCMTextFormatDescriptionStyle_Height'] = kCMTextFormatDescriptionStyle_Height;

// export let kCMTextFormatDescriptionStyle_StartChar: string;
// global['kCMTextFormatDescriptionStyle_StartChar'] = kCMTextFormatDescriptionStyle_StartChar;

// export let kCMTextMarkupAlignmentType_End: string;
// global['kCMTextMarkupAlignmentType_End'] = kCMTextMarkupAlignmentType_End;

// export let kCMTextMarkupAlignmentType_Left: string;
// global['kCMTextMarkupAlignmentType_Left'] = kCMTextMarkupAlignmentType_Left;

// export let kCMTextMarkupAlignmentType_Middle: string;
// global['kCMTextMarkupAlignmentType_Middle'] = kCMTextMarkupAlignmentType_Middle;

// export let kCMTextMarkupAlignmentType_Right: string;
// global['kCMTextMarkupAlignmentType_Right'] = kCMTextMarkupAlignmentType_Right;

// export let kCMTextMarkupAlignmentType_Start: string;
// global['kCMTextMarkupAlignmentType_Start'] = kCMTextMarkupAlignmentType_Start;

// export let kCMTextMarkupAttribute_Alignment: string;
// global['kCMTextMarkupAttribute_Alignment'] = kCMTextMarkupAttribute_Alignment;

// export let kCMTextMarkupAttribute_BackgroundColorARGB: string;
// global['kCMTextMarkupAttribute_BackgroundColorARGB'] = kCMTextMarkupAttribute_BackgroundColorARGB;

// export let kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight: string;
// global['kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight'] = kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight;

// export let kCMTextMarkupAttribute_BoldStyle: string;
// global['kCMTextMarkupAttribute_BoldStyle'] = kCMTextMarkupAttribute_BoldStyle;

// export let kCMTextMarkupAttribute_CharacterBackgroundColorARGB: string;
// global['kCMTextMarkupAttribute_CharacterBackgroundColorARGB'] = kCMTextMarkupAttribute_CharacterBackgroundColorARGB;

// export let kCMTextMarkupAttribute_CharacterEdgeStyle: string;
// global['kCMTextMarkupAttribute_CharacterEdgeStyle'] = kCMTextMarkupAttribute_CharacterEdgeStyle;

// export let kCMTextMarkupAttribute_FontFamilyName: string;
// global['kCMTextMarkupAttribute_FontFamilyName'] = kCMTextMarkupAttribute_FontFamilyName;

// export let kCMTextMarkupAttribute_ForegroundColorARGB: string;
// global['kCMTextMarkupAttribute_ForegroundColorARGB'] = kCMTextMarkupAttribute_ForegroundColorARGB;

// export let kCMTextMarkupAttribute_GenericFontFamilyName: string;
// global['kCMTextMarkupAttribute_GenericFontFamilyName'] = kCMTextMarkupAttribute_GenericFontFamilyName;

// export let kCMTextMarkupAttribute_ItalicStyle: string;
// global['kCMTextMarkupAttribute_ItalicStyle'] = kCMTextMarkupAttribute_ItalicStyle;

// export let kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection: string;
// global['kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection'] = kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection;

// export let kCMTextMarkupAttribute_RelativeFontSize: string;
// global['kCMTextMarkupAttribute_RelativeFontSize'] = kCMTextMarkupAttribute_RelativeFontSize;

// export let kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection: string;
// global['kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection'] = kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection;

// export let kCMTextMarkupAttribute_UnderlineStyle: string;
// global['kCMTextMarkupAttribute_UnderlineStyle'] = kCMTextMarkupAttribute_UnderlineStyle;

// export let kCMTextMarkupAttribute_VerticalLayout: string;
// global['kCMTextMarkupAttribute_VerticalLayout'] = kCMTextMarkupAttribute_VerticalLayout;

// export let kCMTextMarkupAttribute_WritingDirectionSizePercentage: string;
// global['kCMTextMarkupAttribute_WritingDirectionSizePercentage'] = kCMTextMarkupAttribute_WritingDirectionSizePercentage;

// export let kCMTextMarkupCharacterEdgeStyle_Depressed: string;
// global['kCMTextMarkupCharacterEdgeStyle_Depressed'] = kCMTextMarkupCharacterEdgeStyle_Depressed;

// export let kCMTextMarkupCharacterEdgeStyle_DropShadow: string;
// global['kCMTextMarkupCharacterEdgeStyle_DropShadow'] = kCMTextMarkupCharacterEdgeStyle_DropShadow;

// export let kCMTextMarkupCharacterEdgeStyle_None: string;
// global['kCMTextMarkupCharacterEdgeStyle_None'] = kCMTextMarkupCharacterEdgeStyle_None;

// export let kCMTextMarkupCharacterEdgeStyle_Raised: string;
// global['kCMTextMarkupCharacterEdgeStyle_Raised'] = kCMTextMarkupCharacterEdgeStyle_Raised;

// export let kCMTextMarkupCharacterEdgeStyle_Uniform: string;
// global['kCMTextMarkupCharacterEdgeStyle_Uniform'] = kCMTextMarkupCharacterEdgeStyle_Uniform;

// export let kCMTextMarkupGenericFontName_Casual: string;
// global['kCMTextMarkupGenericFontName_Casual'] = kCMTextMarkupGenericFontName_Casual;

// export let kCMTextMarkupGenericFontName_Cursive: string;
// global['kCMTextMarkupGenericFontName_Cursive'] = kCMTextMarkupGenericFontName_Cursive;

// export let kCMTextMarkupGenericFontName_Default: string;
// global['kCMTextMarkupGenericFontName_Default'] = kCMTextMarkupGenericFontName_Default;

// export let kCMTextMarkupGenericFontName_Fantasy: string;
// global['kCMTextMarkupGenericFontName_Fantasy'] = kCMTextMarkupGenericFontName_Fantasy;

// export let kCMTextMarkupGenericFontName_Monospace: string;
// global['kCMTextMarkupGenericFontName_Monospace'] = kCMTextMarkupGenericFontName_Monospace;

// export let kCMTextMarkupGenericFontName_MonospaceSansSerif: string;
// global['kCMTextMarkupGenericFontName_MonospaceSansSerif'] = kCMTextMarkupGenericFontName_MonospaceSansSerif;

// export let kCMTextMarkupGenericFontName_MonospaceSerif: string;
// global['kCMTextMarkupGenericFontName_MonospaceSerif'] = kCMTextMarkupGenericFontName_MonospaceSerif;

// export let kCMTextMarkupGenericFontName_ProportionalSansSerif: string;
// global['kCMTextMarkupGenericFontName_ProportionalSansSerif'] = kCMTextMarkupGenericFontName_ProportionalSansSerif;

// export let kCMTextMarkupGenericFontName_ProportionalSerif: string;
// global['kCMTextMarkupGenericFontName_ProportionalSerif'] = kCMTextMarkupGenericFontName_ProportionalSerif;

// export let kCMTextMarkupGenericFontName_SansSerif: string;
// global['kCMTextMarkupGenericFontName_SansSerif'] = kCMTextMarkupGenericFontName_SansSerif;

// export let kCMTextMarkupGenericFontName_Serif: string;
// global['kCMTextMarkupGenericFontName_Serif'] = kCMTextMarkupGenericFontName_Serif;

// export let kCMTextMarkupGenericFontName_SmallCapital: string;
// global['kCMTextMarkupGenericFontName_SmallCapital'] = kCMTextMarkupGenericFontName_SmallCapital;

// export let kCMTextVerticalLayout_LeftToRight: string;
// global['kCMTextVerticalLayout_LeftToRight'] = kCMTextVerticalLayout_LeftToRight;

// export let kCMTextVerticalLayout_RightToLeft: string;
// global['kCMTextVerticalLayout_RightToLeft'] = kCMTextVerticalLayout_RightToLeft;

// export let kCMTimeCodeFormatDescriptionExtension_SourceReferenceName: string;
// global['kCMTimeCodeFormatDescriptionExtension_SourceReferenceName'] = kCMTimeCodeFormatDescriptionExtension_SourceReferenceName;

// export let kCMTimeCodeFormatDescriptionKey_LangCode: string;
// global['kCMTimeCodeFormatDescriptionKey_LangCode'] = kCMTimeCodeFormatDescriptionKey_LangCode;

// export let kCMTimeCodeFormatDescriptionKey_Value: string;
// global['kCMTimeCodeFormatDescriptionKey_Value'] = kCMTimeCodeFormatDescriptionKey_Value;

// export let kCMTimeEpochKey: string;
// global['kCMTimeEpochKey'] = kCMTimeEpochKey;

// export let kCMTimeFlagsKey: string;
// global['kCMTimeFlagsKey'] = kCMTimeFlagsKey;

// export let kCMTimeMappingSourceKey: string;
// global['kCMTimeMappingSourceKey'] = kCMTimeMappingSourceKey;

// export let kCMTimeMappingTargetKey: string;
// global['kCMTimeMappingTargetKey'] = kCMTimeMappingTargetKey;

// export let kCMTimeRangeDurationKey: string;
// global['kCMTimeRangeDurationKey'] = kCMTimeRangeDurationKey;

// export let kCMTimeRangeStartKey: string;
// global['kCMTimeRangeStartKey'] = kCMTimeRangeStartKey;

// export let kCMTimeScaleKey: string;
// global['kCMTimeScaleKey'] = kCMTimeScaleKey;

// export let kCMTimeValueKey: string;
// global['kCMTimeValueKey'] = kCMTimeValueKey;

// export let kCMTimebaseNotificationKey_EventTime: string;
// global['kCMTimebaseNotificationKey_EventTime'] = kCMTimebaseNotificationKey_EventTime;

// export let kCMTimebaseNotification_EffectiveRateChanged: string;
// global['kCMTimebaseNotification_EffectiveRateChanged'] = kCMTimebaseNotification_EffectiveRateChanged;

// export let kCMTimebaseNotification_TimeJumped: string;
// global['kCMTimebaseNotification_TimeJumped'] = kCMTimebaseNotification_TimeJumped;

// export let kCMIOBlockBufferAttachmentKey_CVPixelBufferReference: string;
// global['kCMIOBlockBufferAttachmentKey_CVPixelBufferReference'] = kCMIOBlockBufferAttachmentKey_CVPixelBufferReference;

// export let kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp: string;
// global['kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp'] = kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp;

// export let kCMIOSampleBufferAttachmentKey_ClientSequenceID: string;
// global['kCMIOSampleBufferAttachmentKey_ClientSequenceID'] = kCMIOSampleBufferAttachmentKey_ClientSequenceID;

// export let kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer: string;
// global['kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer'] = kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer;

// export let kCMIOSampleBufferAttachmentKey_DiscontinuityFlags: string;
// global['kCMIOSampleBufferAttachmentKey_DiscontinuityFlags'] = kCMIOSampleBufferAttachmentKey_DiscontinuityFlags;

// export let kCMIOSampleBufferAttachmentKey_HDV1_PackData: string;
// global['kCMIOSampleBufferAttachmentKey_HDV1_PackData'] = kCMIOSampleBufferAttachmentKey_HDV1_PackData;

// export let kCMIOSampleBufferAttachmentKey_HDV2_VAUX: string;
// global['kCMIOSampleBufferAttachmentKey_HDV2_VAUX'] = kCMIOSampleBufferAttachmentKey_HDV2_VAUX;

// export let kCMIOSampleBufferAttachmentKey_HostTime: string;
// global['kCMIOSampleBufferAttachmentKey_HostTime'] = kCMIOSampleBufferAttachmentKey_HostTime;

// export let kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers: string;
// global['kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers'] = kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers;

// export let kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp: string;
// global['kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp'] = kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp;

// export let kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount: string;
// global['kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount'] = kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount;

// export let kCMIOSampleBufferAttachmentKey_NoDataMarker: string;
// global['kCMIOSampleBufferAttachmentKey_NoDataMarker'] = kCMIOSampleBufferAttachmentKey_NoDataMarker;

// export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer: string;
// global['kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer'] = kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer;

// export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP: string;
// global['kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP'] = kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP;

// export let kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo: string;
// global['kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo'] = kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo;

// export let kCMIOSampleBufferAttachmentKey_RepeatedBufferContents: string;
// global['kCMIOSampleBufferAttachmentKey_RepeatedBufferContents'] = kCMIOSampleBufferAttachmentKey_RepeatedBufferContents;

// export let kCMIOSampleBufferAttachmentKey_SMPTETime: string;
// global['kCMIOSampleBufferAttachmentKey_SMPTETime'] = kCMIOSampleBufferAttachmentKey_SMPTETime;

// export let kCMIOSampleBufferAttachmentKey_SequenceNumber: string;
// global['kCMIOSampleBufferAttachmentKey_SequenceNumber'] = kCMIOSampleBufferAttachmentKey_SequenceNumber;

// export let kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription: string;
// global['kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription'] = kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent;

// export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState: string;
// global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState;

// export let NSAppleEventTimeOutDefault: number;
// global['NSAppleEventTimeOutDefault'] = NSAppleEventTimeOutDefault;

// export let NSAppleEventTimeOutNone: number;
// global['NSAppleEventTimeOutNone'] = NSAppleEventTimeOutNone;

// export let NSAssertionHandlerKey: string;
// global['NSAssertionHandlerKey'] = NSAssertionHandlerKey;

// export let NSCocoaErrorDomain: string;
// global['NSCocoaErrorDomain'] = NSCocoaErrorDomain;

// export let NSDeallocateZombies: boolean;
// global['NSDeallocateZombies'] = NSDeallocateZombies;

// export let NSDebugDescriptionErrorKey: string;
// global['NSDebugDescriptionErrorKey'] = NSDebugDescriptionErrorKey;

// export let NSDebugEnabled: boolean;
// global['NSDebugEnabled'] = NSDebugEnabled;

// export let NSEdgeInsetsZero: NSEdgeInsets;
// global['NSEdgeInsetsZero'] = NSEdgeInsetsZero;

// export let NSExtensionItemAttachmentsKey: string;
// global['NSExtensionItemAttachmentsKey'] = NSExtensionItemAttachmentsKey;

// export let NSExtensionItemAttributedContentTextKey: string;
// global['NSExtensionItemAttributedContentTextKey'] = NSExtensionItemAttributedContentTextKey;

// export let NSExtensionItemAttributedTitleKey: string;
// global['NSExtensionItemAttributedTitleKey'] = NSExtensionItemAttributedTitleKey;

// export let NSExtensionItemsAndErrorsKey: string;
// global['NSExtensionItemsAndErrorsKey'] = NSExtensionItemsAndErrorsKey;

// export let NSExtensionJavaScriptPreprocessingResultsKey: string;
// global['NSExtensionJavaScriptPreprocessingResultsKey'] = NSExtensionJavaScriptPreprocessingResultsKey;

// export let NSFileHandleNotificationDataItem: string;
// global['NSFileHandleNotificationDataItem'] = NSFileHandleNotificationDataItem;

// export let NSFileHandleNotificationFileHandleItem: string;
// global['NSFileHandleNotificationFileHandleItem'] = NSFileHandleNotificationFileHandleItem;

// export let NSFileManagerUnmountDissentingProcessIdentifierErrorKey: string;
// global['NSFileManagerUnmountDissentingProcessIdentifierErrorKey'] = NSFileManagerUnmountDissentingProcessIdentifierErrorKey;

// export let NSFilePathErrorKey: string;
// global['NSFilePathErrorKey'] = NSFilePathErrorKey;

// export let NSFoundationVersionNumber: number;
// global['NSFoundationVersionNumber'] = NSFoundationVersionNumber;

// export let NSGrammarCorrections: string;
// global['NSGrammarCorrections'] = NSGrammarCorrections;

// export let NSGrammarRange: string;
// global['NSGrammarRange'] = NSGrammarRange;

// export let NSGrammarUserDescription: string;
// global['NSGrammarUserDescription'] = NSGrammarUserDescription;

// export let NSHashTableCopyIn: NSPointerFunctions.Options;
// global['NSHashTableCopyIn'] = NSHashTableCopyIn;

// export let NSHashTableObjectPointerPersonality: NSPointerFunctions.Options;
// global['NSHashTableObjectPointerPersonality'] = NSHashTableObjectPointerPersonality;

// export let NSHashTableStrongMemory: NSPointerFunctions.Options;
// global['NSHashTableStrongMemory'] = NSHashTableStrongMemory;

// export let NSHashTableWeakMemory: NSPointerFunctions.Options;
// global['NSHashTableWeakMemory'] = NSHashTableWeakMemory;

// export let NSHelpAnchorErrorKey: string;
// global['NSHelpAnchorErrorKey'] = NSHelpAnchorErrorKey;

// export let NSIntegerHashCallBacks: NSHashTableCallBacks;
// global['NSIntegerHashCallBacks'] = NSIntegerHashCallBacks;

// export let NSIntegerMapKeyCallBacks: NSMapTableKeyCallBacks;
// global['NSIntegerMapKeyCallBacks'] = NSIntegerMapKeyCallBacks;

// export let NSIntegerMapValueCallBacks: NSMapTableValueCallBacks;
// global['NSIntegerMapValueCallBacks'] = NSIntegerMapValueCallBacks;

// export let NSItemProviderPreferredImageSizeKey: string;
// global['NSItemProviderPreferredImageSizeKey'] = NSItemProviderPreferredImageSizeKey;

// export let NSKeepAllocationStatistics: boolean;
// global['NSKeepAllocationStatistics'] = NSKeepAllocationStatistics;

// export let NSKeyedArchiveRootObjectKey: string;
// global['NSKeyedArchiveRootObjectKey'] = NSKeyedArchiveRootObjectKey;

// export let NSLoadedClasses: string;
// global['NSLoadedClasses'] = NSLoadedClasses;

// export let NSLocalizedDescriptionKey: string;
// global['NSLocalizedDescriptionKey'] = NSLocalizedDescriptionKey;

// export let NSLocalizedFailureErrorKey: string;
// global['NSLocalizedFailureErrorKey'] = NSLocalizedFailureErrorKey;

// export let NSLocalizedFailureReasonErrorKey: string;
// global['NSLocalizedFailureReasonErrorKey'] = NSLocalizedFailureReasonErrorKey;

// export let NSLocalizedRecoveryOptionsErrorKey: string;
// global['NSLocalizedRecoveryOptionsErrorKey'] = NSLocalizedRecoveryOptionsErrorKey;

// export let NSLocalizedRecoverySuggestionErrorKey: string;
// global['NSLocalizedRecoverySuggestionErrorKey'] = NSLocalizedRecoverySuggestionErrorKey;

// export let NSMachErrorDomain: string;
// global['NSMachErrorDomain'] = NSMachErrorDomain;

// export let NSMapTableCopyIn: NSPointerFunctions.Options;
// global['NSMapTableCopyIn'] = NSMapTableCopyIn;

// export let NSMapTableObjectPointerPersonality: NSPointerFunctions.Options;
// global['NSMapTableObjectPointerPersonality'] = NSMapTableObjectPointerPersonality;

// export let NSMapTableStrongMemory: NSPointerFunctions.Options;
// global['NSMapTableStrongMemory'] = NSMapTableStrongMemory;

// export let NSMapTableWeakMemory: NSPointerFunctions.Options;
// global['NSMapTableWeakMemory'] = NSMapTableWeakMemory;

// export let NSMetadataItemAcquisitionMakeKey: string;
// global['NSMetadataItemAcquisitionMakeKey'] = NSMetadataItemAcquisitionMakeKey;

// export let NSMetadataItemAcquisitionModelKey: string;
// global['NSMetadataItemAcquisitionModelKey'] = NSMetadataItemAcquisitionModelKey;

// export let NSMetadataItemAlbumKey: string;
// global['NSMetadataItemAlbumKey'] = NSMetadataItemAlbumKey;

// export let NSMetadataItemAltitudeKey: string;
// global['NSMetadataItemAltitudeKey'] = NSMetadataItemAltitudeKey;

// export let NSMetadataItemApertureKey: string;
// global['NSMetadataItemApertureKey'] = NSMetadataItemApertureKey;

// export let NSMetadataItemAppleLoopDescriptorsKey: string;
// global['NSMetadataItemAppleLoopDescriptorsKey'] = NSMetadataItemAppleLoopDescriptorsKey;

// export let NSMetadataItemAppleLoopsKeyFilterTypeKey: string;
// global['NSMetadataItemAppleLoopsKeyFilterTypeKey'] = NSMetadataItemAppleLoopsKeyFilterTypeKey;

// export let NSMetadataItemAppleLoopsLoopModeKey: string;
// global['NSMetadataItemAppleLoopsLoopModeKey'] = NSMetadataItemAppleLoopsLoopModeKey;

// export let NSMetadataItemAppleLoopsRootKeyKey: string;
// global['NSMetadataItemAppleLoopsRootKeyKey'] = NSMetadataItemAppleLoopsRootKeyKey;

// export let NSMetadataItemApplicationCategoriesKey: string;
// global['NSMetadataItemApplicationCategoriesKey'] = NSMetadataItemApplicationCategoriesKey;

// export let NSMetadataItemAttributeChangeDateKey: string;
// global['NSMetadataItemAttributeChangeDateKey'] = NSMetadataItemAttributeChangeDateKey;

// export let NSMetadataItemAudiencesKey: string;
// global['NSMetadataItemAudiencesKey'] = NSMetadataItemAudiencesKey;

// export let NSMetadataItemAudioBitRateKey: string;
// global['NSMetadataItemAudioBitRateKey'] = NSMetadataItemAudioBitRateKey;

// export let NSMetadataItemAudioChannelCountKey: string;
// global['NSMetadataItemAudioChannelCountKey'] = NSMetadataItemAudioChannelCountKey;

// export let NSMetadataItemAudioEncodingApplicationKey: string;
// global['NSMetadataItemAudioEncodingApplicationKey'] = NSMetadataItemAudioEncodingApplicationKey;

// export let NSMetadataItemAudioSampleRateKey: string;
// global['NSMetadataItemAudioSampleRateKey'] = NSMetadataItemAudioSampleRateKey;

// export let NSMetadataItemAudioTrackNumberKey: string;
// global['NSMetadataItemAudioTrackNumberKey'] = NSMetadataItemAudioTrackNumberKey;

// export let NSMetadataItemAuthorAddressesKey: string;
// global['NSMetadataItemAuthorAddressesKey'] = NSMetadataItemAuthorAddressesKey;

// export let NSMetadataItemAuthorEmailAddressesKey: string;
// global['NSMetadataItemAuthorEmailAddressesKey'] = NSMetadataItemAuthorEmailAddressesKey;

// export let NSMetadataItemAuthorsKey: string;
// global['NSMetadataItemAuthorsKey'] = NSMetadataItemAuthorsKey;

// export let NSMetadataItemBitsPerSampleKey: string;
// global['NSMetadataItemBitsPerSampleKey'] = NSMetadataItemBitsPerSampleKey;

// export let NSMetadataItemCFBundleIdentifierKey: string;
// global['NSMetadataItemCFBundleIdentifierKey'] = NSMetadataItemCFBundleIdentifierKey;

// export let NSMetadataItemCameraOwnerKey: string;
// global['NSMetadataItemCameraOwnerKey'] = NSMetadataItemCameraOwnerKey;

// export let NSMetadataItemCityKey: string;
// global['NSMetadataItemCityKey'] = NSMetadataItemCityKey;

// export let NSMetadataItemCodecsKey: string;
// global['NSMetadataItemCodecsKey'] = NSMetadataItemCodecsKey;

// export let NSMetadataItemColorSpaceKey: string;
// global['NSMetadataItemColorSpaceKey'] = NSMetadataItemColorSpaceKey;

// export let NSMetadataItemCommentKey: string;
// global['NSMetadataItemCommentKey'] = NSMetadataItemCommentKey;

// export let NSMetadataItemComposerKey: string;
// global['NSMetadataItemComposerKey'] = NSMetadataItemComposerKey;

// export let NSMetadataItemContactKeywordsKey: string;
// global['NSMetadataItemContactKeywordsKey'] = NSMetadataItemContactKeywordsKey;

// export let NSMetadataItemContentCreationDateKey: string;
// global['NSMetadataItemContentCreationDateKey'] = NSMetadataItemContentCreationDateKey;

// export let NSMetadataItemContentModificationDateKey: string;
// global['NSMetadataItemContentModificationDateKey'] = NSMetadataItemContentModificationDateKey;

// export let NSMetadataItemContentTypeKey: string;
// global['NSMetadataItemContentTypeKey'] = NSMetadataItemContentTypeKey;

// export let NSMetadataItemContentTypeTreeKey: string;
// global['NSMetadataItemContentTypeTreeKey'] = NSMetadataItemContentTypeTreeKey;

// export let NSMetadataItemContributorsKey: string;
// global['NSMetadataItemContributorsKey'] = NSMetadataItemContributorsKey;

// export let NSMetadataItemCopyrightKey: string;
// global['NSMetadataItemCopyrightKey'] = NSMetadataItemCopyrightKey;

// export let NSMetadataItemCountryKey: string;
// global['NSMetadataItemCountryKey'] = NSMetadataItemCountryKey;

// export let NSMetadataItemCoverageKey: string;
// global['NSMetadataItemCoverageKey'] = NSMetadataItemCoverageKey;

// export let NSMetadataItemCreatorKey: string;
// global['NSMetadataItemCreatorKey'] = NSMetadataItemCreatorKey;

// export let NSMetadataItemDateAddedKey: string;
// global['NSMetadataItemDateAddedKey'] = NSMetadataItemDateAddedKey;

// export let NSMetadataItemDeliveryTypeKey: string;
// global['NSMetadataItemDeliveryTypeKey'] = NSMetadataItemDeliveryTypeKey;

// export let NSMetadataItemDescriptionKey: string;
// global['NSMetadataItemDescriptionKey'] = NSMetadataItemDescriptionKey;

// export let NSMetadataItemDirectorKey: string;
// global['NSMetadataItemDirectorKey'] = NSMetadataItemDirectorKey;

// export let NSMetadataItemDisplayNameKey: string;
// global['NSMetadataItemDisplayNameKey'] = NSMetadataItemDisplayNameKey;

// export let NSMetadataItemDownloadedDateKey: string;
// global['NSMetadataItemDownloadedDateKey'] = NSMetadataItemDownloadedDateKey;

// export let NSMetadataItemDueDateKey: string;
// global['NSMetadataItemDueDateKey'] = NSMetadataItemDueDateKey;

// export let NSMetadataItemDurationSecondsKey: string;
// global['NSMetadataItemDurationSecondsKey'] = NSMetadataItemDurationSecondsKey;

// export let NSMetadataItemEXIFGPSVersionKey: string;
// global['NSMetadataItemEXIFGPSVersionKey'] = NSMetadataItemEXIFGPSVersionKey;

// export let NSMetadataItemEXIFVersionKey: string;
// global['NSMetadataItemEXIFVersionKey'] = NSMetadataItemEXIFVersionKey;

// export let NSMetadataItemEditorsKey: string;
// global['NSMetadataItemEditorsKey'] = NSMetadataItemEditorsKey;

// export let NSMetadataItemEmailAddressesKey: string;
// global['NSMetadataItemEmailAddressesKey'] = NSMetadataItemEmailAddressesKey;

// export let NSMetadataItemEncodingApplicationsKey: string;
// global['NSMetadataItemEncodingApplicationsKey'] = NSMetadataItemEncodingApplicationsKey;

// export let NSMetadataItemExecutableArchitecturesKey: string;
// global['NSMetadataItemExecutableArchitecturesKey'] = NSMetadataItemExecutableArchitecturesKey;

// export let NSMetadataItemExecutablePlatformKey: string;
// global['NSMetadataItemExecutablePlatformKey'] = NSMetadataItemExecutablePlatformKey;

// export let NSMetadataItemExposureModeKey: string;
// global['NSMetadataItemExposureModeKey'] = NSMetadataItemExposureModeKey;

// export let NSMetadataItemExposureProgramKey: string;
// global['NSMetadataItemExposureProgramKey'] = NSMetadataItemExposureProgramKey;

// export let NSMetadataItemExposureTimeSecondsKey: string;
// global['NSMetadataItemExposureTimeSecondsKey'] = NSMetadataItemExposureTimeSecondsKey;

// export let NSMetadataItemExposureTimeStringKey: string;
// global['NSMetadataItemExposureTimeStringKey'] = NSMetadataItemExposureTimeStringKey;

// export let NSMetadataItemFNumberKey: string;
// global['NSMetadataItemFNumberKey'] = NSMetadataItemFNumberKey;

// export let NSMetadataItemFSContentChangeDateKey: string;
// global['NSMetadataItemFSContentChangeDateKey'] = NSMetadataItemFSContentChangeDateKey;

// export let NSMetadataItemFSCreationDateKey: string;
// global['NSMetadataItemFSCreationDateKey'] = NSMetadataItemFSCreationDateKey;

// export let NSMetadataItemFSNameKey: string;
// global['NSMetadataItemFSNameKey'] = NSMetadataItemFSNameKey;

// export let NSMetadataItemFSSizeKey: string;
// global['NSMetadataItemFSSizeKey'] = NSMetadataItemFSSizeKey;

// export let NSMetadataItemFinderCommentKey: string;
// global['NSMetadataItemFinderCommentKey'] = NSMetadataItemFinderCommentKey;

// export let NSMetadataItemFlashOnOffKey: string;
// global['NSMetadataItemFlashOnOffKey'] = NSMetadataItemFlashOnOffKey;

// export let NSMetadataItemFocalLength35mmKey: string;
// global['NSMetadataItemFocalLength35mmKey'] = NSMetadataItemFocalLength35mmKey;

// export let NSMetadataItemFocalLengthKey: string;
// global['NSMetadataItemFocalLengthKey'] = NSMetadataItemFocalLengthKey;

// export let NSMetadataItemFontsKey: string;
// global['NSMetadataItemFontsKey'] = NSMetadataItemFontsKey;

// export let NSMetadataItemGPSAreaInformationKey: string;
// global['NSMetadataItemGPSAreaInformationKey'] = NSMetadataItemGPSAreaInformationKey;

// export let NSMetadataItemGPSDOPKey: string;
// global['NSMetadataItemGPSDOPKey'] = NSMetadataItemGPSDOPKey;

// export let NSMetadataItemGPSDateStampKey: string;
// global['NSMetadataItemGPSDateStampKey'] = NSMetadataItemGPSDateStampKey;

// export let NSMetadataItemGPSDestBearingKey: string;
// global['NSMetadataItemGPSDestBearingKey'] = NSMetadataItemGPSDestBearingKey;

// export let NSMetadataItemGPSDestDistanceKey: string;
// global['NSMetadataItemGPSDestDistanceKey'] = NSMetadataItemGPSDestDistanceKey;

// export let NSMetadataItemGPSDestLatitudeKey: string;
// global['NSMetadataItemGPSDestLatitudeKey'] = NSMetadataItemGPSDestLatitudeKey;

// export let NSMetadataItemGPSDestLongitudeKey: string;
// global['NSMetadataItemGPSDestLongitudeKey'] = NSMetadataItemGPSDestLongitudeKey;

// export let NSMetadataItemGPSDifferentalKey: string;
// global['NSMetadataItemGPSDifferentalKey'] = NSMetadataItemGPSDifferentalKey;

// export let NSMetadataItemGPSMapDatumKey: string;
// global['NSMetadataItemGPSMapDatumKey'] = NSMetadataItemGPSMapDatumKey;

// export let NSMetadataItemGPSMeasureModeKey: string;
// global['NSMetadataItemGPSMeasureModeKey'] = NSMetadataItemGPSMeasureModeKey;

// export let NSMetadataItemGPSProcessingMethodKey: string;
// global['NSMetadataItemGPSProcessingMethodKey'] = NSMetadataItemGPSProcessingMethodKey;

// export let NSMetadataItemGPSStatusKey: string;
// global['NSMetadataItemGPSStatusKey'] = NSMetadataItemGPSStatusKey;

// export let NSMetadataItemGPSTrackKey: string;
// global['NSMetadataItemGPSTrackKey'] = NSMetadataItemGPSTrackKey;

// export let NSMetadataItemGenreKey: string;
// global['NSMetadataItemGenreKey'] = NSMetadataItemGenreKey;

// export let NSMetadataItemHasAlphaChannelKey: string;
// global['NSMetadataItemHasAlphaChannelKey'] = NSMetadataItemHasAlphaChannelKey;

// export let NSMetadataItemHeadlineKey: string;
// global['NSMetadataItemHeadlineKey'] = NSMetadataItemHeadlineKey;

// export let NSMetadataItemISOSpeedKey: string;
// global['NSMetadataItemISOSpeedKey'] = NSMetadataItemISOSpeedKey;

// export let NSMetadataItemIdentifierKey: string;
// global['NSMetadataItemIdentifierKey'] = NSMetadataItemIdentifierKey;

// export let NSMetadataItemImageDirectionKey: string;
// global['NSMetadataItemImageDirectionKey'] = NSMetadataItemImageDirectionKey;

// export let NSMetadataItemInformationKey: string;
// global['NSMetadataItemInformationKey'] = NSMetadataItemInformationKey;

// export let NSMetadataItemInstantMessageAddressesKey: string;
// global['NSMetadataItemInstantMessageAddressesKey'] = NSMetadataItemInstantMessageAddressesKey;

// export let NSMetadataItemInstructionsKey: string;
// global['NSMetadataItemInstructionsKey'] = NSMetadataItemInstructionsKey;

// export let NSMetadataItemIsApplicationManagedKey: string;
// global['NSMetadataItemIsApplicationManagedKey'] = NSMetadataItemIsApplicationManagedKey;

// export let NSMetadataItemIsGeneralMIDISequenceKey: string;
// global['NSMetadataItemIsGeneralMIDISequenceKey'] = NSMetadataItemIsGeneralMIDISequenceKey;

// export let NSMetadataItemIsLikelyJunkKey: string;
// global['NSMetadataItemIsLikelyJunkKey'] = NSMetadataItemIsLikelyJunkKey;

// export let NSMetadataItemIsUbiquitousKey: string;
// global['NSMetadataItemIsUbiquitousKey'] = NSMetadataItemIsUbiquitousKey;

// export let NSMetadataItemKeySignatureKey: string;
// global['NSMetadataItemKeySignatureKey'] = NSMetadataItemKeySignatureKey;

// export let NSMetadataItemKeywordsKey: string;
// global['NSMetadataItemKeywordsKey'] = NSMetadataItemKeywordsKey;

// export let NSMetadataItemKindKey: string;
// global['NSMetadataItemKindKey'] = NSMetadataItemKindKey;

// export let NSMetadataItemLanguagesKey: string;
// global['NSMetadataItemLanguagesKey'] = NSMetadataItemLanguagesKey;

// export let NSMetadataItemLastUsedDateKey: string;
// global['NSMetadataItemLastUsedDateKey'] = NSMetadataItemLastUsedDateKey;

// export let NSMetadataItemLatitudeKey: string;
// global['NSMetadataItemLatitudeKey'] = NSMetadataItemLatitudeKey;

// export let NSMetadataItemLayerNamesKey: string;
// global['NSMetadataItemLayerNamesKey'] = NSMetadataItemLayerNamesKey;

// export let NSMetadataItemLensModelKey: string;
// global['NSMetadataItemLensModelKey'] = NSMetadataItemLensModelKey;

// export let NSMetadataItemLongitudeKey: string;
// global['NSMetadataItemLongitudeKey'] = NSMetadataItemLongitudeKey;

// export let NSMetadataItemLyricistKey: string;
// global['NSMetadataItemLyricistKey'] = NSMetadataItemLyricistKey;

// export let NSMetadataItemMaxApertureKey: string;
// global['NSMetadataItemMaxApertureKey'] = NSMetadataItemMaxApertureKey;

// export let NSMetadataItemMediaTypesKey: string;
// global['NSMetadataItemMediaTypesKey'] = NSMetadataItemMediaTypesKey;

// export let NSMetadataItemMeteringModeKey: string;
// global['NSMetadataItemMeteringModeKey'] = NSMetadataItemMeteringModeKey;

// export let NSMetadataItemMusicalGenreKey: string;
// global['NSMetadataItemMusicalGenreKey'] = NSMetadataItemMusicalGenreKey;

// export let NSMetadataItemMusicalInstrumentCategoryKey: string;
// global['NSMetadataItemMusicalInstrumentCategoryKey'] = NSMetadataItemMusicalInstrumentCategoryKey;

// export let NSMetadataItemMusicalInstrumentNameKey: string;
// global['NSMetadataItemMusicalInstrumentNameKey'] = NSMetadataItemMusicalInstrumentNameKey;

// export let NSMetadataItemNamedLocationKey: string;
// global['NSMetadataItemNamedLocationKey'] = NSMetadataItemNamedLocationKey;

// export let NSMetadataItemNumberOfPagesKey: string;
// global['NSMetadataItemNumberOfPagesKey'] = NSMetadataItemNumberOfPagesKey;

// export let NSMetadataItemOrganizationsKey: string;
// global['NSMetadataItemOrganizationsKey'] = NSMetadataItemOrganizationsKey;

// export let NSMetadataItemOrientationKey: string;
// global['NSMetadataItemOrientationKey'] = NSMetadataItemOrientationKey;

// export let NSMetadataItemOriginalFormatKey: string;
// global['NSMetadataItemOriginalFormatKey'] = NSMetadataItemOriginalFormatKey;

// export let NSMetadataItemOriginalSourceKey: string;
// global['NSMetadataItemOriginalSourceKey'] = NSMetadataItemOriginalSourceKey;

// export let NSMetadataItemPageHeightKey: string;
// global['NSMetadataItemPageHeightKey'] = NSMetadataItemPageHeightKey;

// export let NSMetadataItemPageWidthKey: string;
// global['NSMetadataItemPageWidthKey'] = NSMetadataItemPageWidthKey;

// export let NSMetadataItemParticipantsKey: string;
// global['NSMetadataItemParticipantsKey'] = NSMetadataItemParticipantsKey;

// export let NSMetadataItemPathKey: string;
// global['NSMetadataItemPathKey'] = NSMetadataItemPathKey;

// export let NSMetadataItemPerformersKey: string;
// global['NSMetadataItemPerformersKey'] = NSMetadataItemPerformersKey;

// export let NSMetadataItemPhoneNumbersKey: string;
// global['NSMetadataItemPhoneNumbersKey'] = NSMetadataItemPhoneNumbersKey;

// export let NSMetadataItemPixelCountKey: string;
// global['NSMetadataItemPixelCountKey'] = NSMetadataItemPixelCountKey;

// export let NSMetadataItemPixelHeightKey: string;
// global['NSMetadataItemPixelHeightKey'] = NSMetadataItemPixelHeightKey;

// export let NSMetadataItemPixelWidthKey: string;
// global['NSMetadataItemPixelWidthKey'] = NSMetadataItemPixelWidthKey;

// export let NSMetadataItemProducerKey: string;
// global['NSMetadataItemProducerKey'] = NSMetadataItemProducerKey;

// export let NSMetadataItemProfileNameKey: string;
// global['NSMetadataItemProfileNameKey'] = NSMetadataItemProfileNameKey;

// export let NSMetadataItemProjectsKey: string;
// global['NSMetadataItemProjectsKey'] = NSMetadataItemProjectsKey;

// export let NSMetadataItemPublishersKey: string;
// global['NSMetadataItemPublishersKey'] = NSMetadataItemPublishersKey;

// export let NSMetadataItemRecipientAddressesKey: string;
// global['NSMetadataItemRecipientAddressesKey'] = NSMetadataItemRecipientAddressesKey;

// export let NSMetadataItemRecipientEmailAddressesKey: string;
// global['NSMetadataItemRecipientEmailAddressesKey'] = NSMetadataItemRecipientEmailAddressesKey;

// export let NSMetadataItemRecipientsKey: string;
// global['NSMetadataItemRecipientsKey'] = NSMetadataItemRecipientsKey;

// export let NSMetadataItemRecordingDateKey: string;
// global['NSMetadataItemRecordingDateKey'] = NSMetadataItemRecordingDateKey;

// export let NSMetadataItemRecordingYearKey: string;
// global['NSMetadataItemRecordingYearKey'] = NSMetadataItemRecordingYearKey;

// export let NSMetadataItemRedEyeOnOffKey: string;
// global['NSMetadataItemRedEyeOnOffKey'] = NSMetadataItemRedEyeOnOffKey;

// export let NSMetadataItemResolutionHeightDPIKey: string;
// global['NSMetadataItemResolutionHeightDPIKey'] = NSMetadataItemResolutionHeightDPIKey;

// export let NSMetadataItemResolutionWidthDPIKey: string;
// global['NSMetadataItemResolutionWidthDPIKey'] = NSMetadataItemResolutionWidthDPIKey;

// export let NSMetadataItemRightsKey: string;
// global['NSMetadataItemRightsKey'] = NSMetadataItemRightsKey;

// export let NSMetadataItemSecurityMethodKey: string;
// global['NSMetadataItemSecurityMethodKey'] = NSMetadataItemSecurityMethodKey;

// export let NSMetadataItemSpeedKey: string;
// global['NSMetadataItemSpeedKey'] = NSMetadataItemSpeedKey;

// export let NSMetadataItemStarRatingKey: string;
// global['NSMetadataItemStarRatingKey'] = NSMetadataItemStarRatingKey;

// export let NSMetadataItemStateOrProvinceKey: string;
// global['NSMetadataItemStateOrProvinceKey'] = NSMetadataItemStateOrProvinceKey;

// export let NSMetadataItemStreamableKey: string;
// global['NSMetadataItemStreamableKey'] = NSMetadataItemStreamableKey;

// export let NSMetadataItemSubjectKey: string;
// global['NSMetadataItemSubjectKey'] = NSMetadataItemSubjectKey;

// export let NSMetadataItemTempoKey: string;
// global['NSMetadataItemTempoKey'] = NSMetadataItemTempoKey;

// export let NSMetadataItemTextContentKey: string;
// global['NSMetadataItemTextContentKey'] = NSMetadataItemTextContentKey;

// export let NSMetadataItemThemeKey: string;
// global['NSMetadataItemThemeKey'] = NSMetadataItemThemeKey;

// export let NSMetadataItemTimeSignatureKey: string;
// global['NSMetadataItemTimeSignatureKey'] = NSMetadataItemTimeSignatureKey;

// export let NSMetadataItemTimestampKey: string;
// global['NSMetadataItemTimestampKey'] = NSMetadataItemTimestampKey;

// export let NSMetadataItemTitleKey: string;
// global['NSMetadataItemTitleKey'] = NSMetadataItemTitleKey;

// export let NSMetadataItemTotalBitRateKey: string;
// global['NSMetadataItemTotalBitRateKey'] = NSMetadataItemTotalBitRateKey;

// export let NSMetadataItemURLKey: string;
// global['NSMetadataItemURLKey'] = NSMetadataItemURLKey;

// export let NSMetadataItemVersionKey: string;
// global['NSMetadataItemVersionKey'] = NSMetadataItemVersionKey;

// export let NSMetadataItemVideoBitRateKey: string;
// global['NSMetadataItemVideoBitRateKey'] = NSMetadataItemVideoBitRateKey;

// export let NSMetadataItemWhereFromsKey: string;
// global['NSMetadataItemWhereFromsKey'] = NSMetadataItemWhereFromsKey;

// export let NSMetadataItemWhiteBalanceKey: string;
// global['NSMetadataItemWhiteBalanceKey'] = NSMetadataItemWhiteBalanceKey;

// export let NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope: string;
// global['NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope'] = NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope;

// export let NSMetadataQueryIndexedLocalComputerScope: string;
// global['NSMetadataQueryIndexedLocalComputerScope'] = NSMetadataQueryIndexedLocalComputerScope;

// export let NSMetadataQueryIndexedNetworkScope: string;
// global['NSMetadataQueryIndexedNetworkScope'] = NSMetadataQueryIndexedNetworkScope;

// export let NSMetadataQueryLocalComputerScope: string;
// global['NSMetadataQueryLocalComputerScope'] = NSMetadataQueryLocalComputerScope;

// export let NSMetadataQueryNetworkScope: string;
// global['NSMetadataQueryNetworkScope'] = NSMetadataQueryNetworkScope;

// export let NSMetadataQueryResultContentRelevanceAttribute: string;
// global['NSMetadataQueryResultContentRelevanceAttribute'] = NSMetadataQueryResultContentRelevanceAttribute;

// export let NSMetadataQueryUbiquitousDataScope: string;
// global['NSMetadataQueryUbiquitousDataScope'] = NSMetadataQueryUbiquitousDataScope;

// export let NSMetadataQueryUbiquitousDocumentsScope: string;
// global['NSMetadataQueryUbiquitousDocumentsScope'] = NSMetadataQueryUbiquitousDocumentsScope;

// export let NSMetadataQueryUpdateAddedItemsKey: string;
// global['NSMetadataQueryUpdateAddedItemsKey'] = NSMetadataQueryUpdateAddedItemsKey;

// export let NSMetadataQueryUpdateChangedItemsKey: string;
// global['NSMetadataQueryUpdateChangedItemsKey'] = NSMetadataQueryUpdateChangedItemsKey;

// export let NSMetadataQueryUpdateRemovedItemsKey: string;
// global['NSMetadataQueryUpdateRemovedItemsKey'] = NSMetadataQueryUpdateRemovedItemsKey;

// export let NSMetadataQueryUserHomeScope: string;
// global['NSMetadataQueryUserHomeScope'] = NSMetadataQueryUserHomeScope;

// export let NSMetadataUbiquitousItemContainerDisplayNameKey: string;
// global['NSMetadataUbiquitousItemContainerDisplayNameKey'] = NSMetadataUbiquitousItemContainerDisplayNameKey;

// export let NSMetadataUbiquitousItemDownloadRequestedKey: string;
// global['NSMetadataUbiquitousItemDownloadRequestedKey'] = NSMetadataUbiquitousItemDownloadRequestedKey;

// export let NSMetadataUbiquitousItemDownloadingErrorKey: string;
// global['NSMetadataUbiquitousItemDownloadingErrorKey'] = NSMetadataUbiquitousItemDownloadingErrorKey;

// export let NSMetadataUbiquitousItemDownloadingStatusCurrent: string;
// global['NSMetadataUbiquitousItemDownloadingStatusCurrent'] = NSMetadataUbiquitousItemDownloadingStatusCurrent;

// export let NSMetadataUbiquitousItemDownloadingStatusDownloaded: string;
// global['NSMetadataUbiquitousItemDownloadingStatusDownloaded'] = NSMetadataUbiquitousItemDownloadingStatusDownloaded;

// export let NSMetadataUbiquitousItemDownloadingStatusKey: string;
// global['NSMetadataUbiquitousItemDownloadingStatusKey'] = NSMetadataUbiquitousItemDownloadingStatusKey;

// export let NSMetadataUbiquitousItemDownloadingStatusNotDownloaded: string;
// global['NSMetadataUbiquitousItemDownloadingStatusNotDownloaded'] = NSMetadataUbiquitousItemDownloadingStatusNotDownloaded;

// export let NSMetadataUbiquitousItemHasUnresolvedConflictsKey: string;
// global['NSMetadataUbiquitousItemHasUnresolvedConflictsKey'] = NSMetadataUbiquitousItemHasUnresolvedConflictsKey;

// export let NSMetadataUbiquitousItemIsDownloadingKey: string;
// global['NSMetadataUbiquitousItemIsDownloadingKey'] = NSMetadataUbiquitousItemIsDownloadingKey;

// export let NSMetadataUbiquitousItemIsExternalDocumentKey: string;
// global['NSMetadataUbiquitousItemIsExternalDocumentKey'] = NSMetadataUbiquitousItemIsExternalDocumentKey;

// export let NSMetadataUbiquitousItemIsSharedKey: string;
// global['NSMetadataUbiquitousItemIsSharedKey'] = NSMetadataUbiquitousItemIsSharedKey;

// export let NSMetadataUbiquitousItemIsUploadedKey: string;
// global['NSMetadataUbiquitousItemIsUploadedKey'] = NSMetadataUbiquitousItemIsUploadedKey;

// export let NSMetadataUbiquitousItemIsUploadingKey: string;
// global['NSMetadataUbiquitousItemIsUploadingKey'] = NSMetadataUbiquitousItemIsUploadingKey;

// export let NSMetadataUbiquitousItemPercentDownloadedKey: string;
// global['NSMetadataUbiquitousItemPercentDownloadedKey'] = NSMetadataUbiquitousItemPercentDownloadedKey;

// export let NSMetadataUbiquitousItemPercentUploadedKey: string;
// global['NSMetadataUbiquitousItemPercentUploadedKey'] = NSMetadataUbiquitousItemPercentUploadedKey;

// export let NSMetadataUbiquitousItemURLInLocalContainerKey: string;
// global['NSMetadataUbiquitousItemURLInLocalContainerKey'] = NSMetadataUbiquitousItemURLInLocalContainerKey;

// export let NSMetadataUbiquitousItemUploadingErrorKey: string;
// global['NSMetadataUbiquitousItemUploadingErrorKey'] = NSMetadataUbiquitousItemUploadingErrorKey;

// export let NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey: string;
// global['NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey'] = NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey;

// export let NSMetadataUbiquitousSharedItemCurrentUserRoleKey: string;
// global['NSMetadataUbiquitousSharedItemCurrentUserRoleKey'] = NSMetadataUbiquitousSharedItemCurrentUserRoleKey;

// export let NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey: string;
// global['NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey'] = NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey;

// export let NSMetadataUbiquitousSharedItemOwnerNameComponentsKey: string;
// global['NSMetadataUbiquitousSharedItemOwnerNameComponentsKey'] = NSMetadataUbiquitousSharedItemOwnerNameComponentsKey;

// export let NSMetadataUbiquitousSharedItemPermissionsReadOnly: string;
// global['NSMetadataUbiquitousSharedItemPermissionsReadOnly'] = NSMetadataUbiquitousSharedItemPermissionsReadOnly;

// export let NSMetadataUbiquitousSharedItemPermissionsReadWrite: string;
// global['NSMetadataUbiquitousSharedItemPermissionsReadWrite'] = NSMetadataUbiquitousSharedItemPermissionsReadWrite;

// export let NSMetadataUbiquitousSharedItemRoleOwner: string;
// global['NSMetadataUbiquitousSharedItemRoleOwner'] = NSMetadataUbiquitousSharedItemRoleOwner;

// export let NSMetadataUbiquitousSharedItemRoleParticipant: string;
// global['NSMetadataUbiquitousSharedItemRoleParticipant'] = NSMetadataUbiquitousSharedItemRoleParticipant;

// export let NSNonOwnedPointerHashCallBacks: NSHashTableCallBacks;
// global['NSNonOwnedPointerHashCallBacks'] = NSNonOwnedPointerHashCallBacks;

// export let NSNonOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
// global['NSNonOwnedPointerMapKeyCallBacks'] = NSNonOwnedPointerMapKeyCallBacks;

// export let NSNonOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
// global['NSNonOwnedPointerMapValueCallBacks'] = NSNonOwnedPointerMapValueCallBacks;

// export let NSNonOwnedPointerOrNullMapKeyCallBacks: NSMapTableKeyCallBacks;
// global['NSNonOwnedPointerOrNullMapKeyCallBacks'] = NSNonOwnedPointerOrNullMapKeyCallBacks;

// export let NSNonRetainedObjectHashCallBacks: NSHashTableCallBacks;
// global['NSNonRetainedObjectHashCallBacks'] = NSNonRetainedObjectHashCallBacks;

// export let NSNonRetainedObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
// global['NSNonRetainedObjectMapKeyCallBacks'] = NSNonRetainedObjectMapKeyCallBacks;

// export let NSNonRetainedObjectMapValueCallBacks: NSMapTableValueCallBacks;
// global['NSNonRetainedObjectMapValueCallBacks'] = NSNonRetainedObjectMapValueCallBacks;

// export let NSNotFound: number;
// global['NSNotFound'] = NSNotFound;

// export let NSNotificationDeliverImmediately: DistributedNotificationCenter.Options;
// global['NSNotificationDeliverImmediately'] = NSNotificationDeliverImmediately;

// export let NSNotificationPostToAllSessions: DistributedNotificationCenter.Options;
// global['NSNotificationPostToAllSessions'] = NSNotificationPostToAllSessions;

// export let NSOSStatusErrorDomain: string;
// global['NSOSStatusErrorDomain'] = NSOSStatusErrorDomain;

// export let NSObjectHashCallBacks: NSHashTableCallBacks;
// global['NSObjectHashCallBacks'] = NSObjectHashCallBacks;

// export let NSObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
// global['NSObjectMapKeyCallBacks'] = NSObjectMapKeyCallBacks;

// export let NSObjectMapValueCallBacks: NSMapTableValueCallBacks;
// global['NSObjectMapValueCallBacks'] = NSObjectMapValueCallBacks;

// export let NSOperationNotSupportedForKeyException: string;
// global['NSOperationNotSupportedForKeyException'] = NSOperationNotSupportedForKeyException;

// export let NSOwnedObjectIdentityHashCallBacks: NSHashTableCallBacks;
// global['NSOwnedObjectIdentityHashCallBacks'] = NSOwnedObjectIdentityHashCallBacks;

// export let NSOwnedPointerHashCallBacks: NSHashTableCallBacks;
// global['NSOwnedPointerHashCallBacks'] = NSOwnedPointerHashCallBacks;

// export let NSOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
// global['NSOwnedPointerMapKeyCallBacks'] = NSOwnedPointerMapKeyCallBacks;

// export let NSOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
// global['NSOwnedPointerMapValueCallBacks'] = NSOwnedPointerMapValueCallBacks;

// export let NSPOSIXErrorDomain: string;
// global['NSPOSIXErrorDomain'] = NSPOSIXErrorDomain;

// export let NSPersonNameComponentDelimiter: string;
// global['NSPersonNameComponentDelimiter'] = NSPersonNameComponentDelimiter;

// export let NSPersonNameComponentFamilyName: string;
// global['NSPersonNameComponentFamilyName'] = NSPersonNameComponentFamilyName;

// export let NSPersonNameComponentGivenName: string;
// global['NSPersonNameComponentGivenName'] = NSPersonNameComponentGivenName;

// export let NSPersonNameComponentKey: string;
// global['NSPersonNameComponentKey'] = NSPersonNameComponentKey;

// export let NSPersonNameComponentMiddleName: string;
// global['NSPersonNameComponentMiddleName'] = NSPersonNameComponentMiddleName;

// export let NSPersonNameComponentNickname: string;
// global['NSPersonNameComponentNickname'] = NSPersonNameComponentNickname;

// export let NSPersonNameComponentPrefix: string;
// global['NSPersonNameComponentPrefix'] = NSPersonNameComponentPrefix;

// export let NSPersonNameComponentSuffix: string;
// global['NSPersonNameComponentSuffix'] = NSPersonNameComponentSuffix;

// export let NSPointerToStructHashCallBacks: NSHashTableCallBacks;
// global['NSPointerToStructHashCallBacks'] = NSPointerToStructHashCallBacks;

// export let NSRecoveryAttempterErrorKey: string;
// global['NSRecoveryAttempterErrorKey'] = NSRecoveryAttempterErrorKey;

// export let NSStreamSOCKSErrorDomain: string;
// global['NSStreamSOCKSErrorDomain'] = NSStreamSOCKSErrorDomain;

// export let NSStreamSocketSSLErrorDomain: string;
// global['NSStreamSocketSSLErrorDomain'] = NSStreamSocketSSLErrorDomain;

// export let NSStringEncodingErrorKey: string;
// global['NSStringEncodingErrorKey'] = NSStringEncodingErrorKey;

// export let NSURLAuthenticationMethodClientCertificate: string;
// global['NSURLAuthenticationMethodClientCertificate'] = NSURLAuthenticationMethodClientCertificate;

// export let NSURLAuthenticationMethodDefault: string;
// global['NSURLAuthenticationMethodDefault'] = NSURLAuthenticationMethodDefault;

// export let NSURLAuthenticationMethodHTMLForm: string;
// global['NSURLAuthenticationMethodHTMLForm'] = NSURLAuthenticationMethodHTMLForm;

// export let NSURLAuthenticationMethodHTTPBasic: string;
// global['NSURLAuthenticationMethodHTTPBasic'] = NSURLAuthenticationMethodHTTPBasic;

// export let NSURLAuthenticationMethodHTTPDigest: string;
// global['NSURLAuthenticationMethodHTTPDigest'] = NSURLAuthenticationMethodHTTPDigest;

// export let NSURLAuthenticationMethodNTLM: string;
// global['NSURLAuthenticationMethodNTLM'] = NSURLAuthenticationMethodNTLM;

// export let NSURLAuthenticationMethodNegotiate: string;
// global['NSURLAuthenticationMethodNegotiate'] = NSURLAuthenticationMethodNegotiate;

// export let NSURLAuthenticationMethodServerTrust: string;
// global['NSURLAuthenticationMethodServerTrust'] = NSURLAuthenticationMethodServerTrust;

// export let NSURLCredentialStorageRemoveSynchronizableCredentials: string;
// global['NSURLCredentialStorageRemoveSynchronizableCredentials'] = NSURLCredentialStorageRemoveSynchronizableCredentials;

// export let NSURLErrorBackgroundTaskCancelledReasonKey: string;
// global['NSURLErrorBackgroundTaskCancelledReasonKey'] = NSURLErrorBackgroundTaskCancelledReasonKey;

// export let NSURLErrorDomain: string;
// global['NSURLErrorDomain'] = NSURLErrorDomain;

// export let NSURLErrorFailingURLErrorKey: string;
// global['NSURLErrorFailingURLErrorKey'] = NSURLErrorFailingURLErrorKey;

// export let NSURLErrorFailingURLPeerTrustErrorKey: string;
// global['NSURLErrorFailingURLPeerTrustErrorKey'] = NSURLErrorFailingURLPeerTrustErrorKey;

// export let NSURLErrorFailingURLStringErrorKey: string;
// global['NSURLErrorFailingURLStringErrorKey'] = NSURLErrorFailingURLStringErrorKey;

// export let NSURLErrorKey: string;
// global['NSURLErrorKey'] = NSURLErrorKey;

// export let NSURLErrorNetworkUnavailableReasonKey: string;
// global['NSURLErrorNetworkUnavailableReasonKey'] = NSURLErrorNetworkUnavailableReasonKey;

// export let NSURLFileScheme: string;
// global['NSURLFileScheme'] = NSURLFileScheme;

// export let NSURLProtectionSpaceFTP: string;
// global['NSURLProtectionSpaceFTP'] = NSURLProtectionSpaceFTP;

// export let NSURLProtectionSpaceFTPProxy: string;
// global['NSURLProtectionSpaceFTPProxy'] = NSURLProtectionSpaceFTPProxy;

// export let NSURLProtectionSpaceHTTP: string;
// global['NSURLProtectionSpaceHTTP'] = NSURLProtectionSpaceHTTP;

// export let NSURLProtectionSpaceHTTPProxy: string;
// global['NSURLProtectionSpaceHTTPProxy'] = NSURLProtectionSpaceHTTPProxy;

// export let NSURLProtectionSpaceHTTPS: string;
// global['NSURLProtectionSpaceHTTPS'] = NSURLProtectionSpaceHTTPS;

// export let NSURLProtectionSpaceHTTPSProxy: string;
// global['NSURLProtectionSpaceHTTPSProxy'] = NSURLProtectionSpaceHTTPSProxy;

// export let NSURLProtectionSpaceSOCKSProxy: string;
// global['NSURLProtectionSpaceSOCKSProxy'] = NSURLProtectionSpaceSOCKSProxy;

// export let NSURLSessionDownloadTaskResumeData: string;
// global['NSURLSessionDownloadTaskResumeData'] = NSURLSessionDownloadTaskResumeData;

// export let NSURLSessionTransferSizeUnknown: number;
// global['NSURLSessionTransferSizeUnknown'] = NSURLSessionTransferSizeUnknown;

// export let NSUbiquitousKeyValueStoreChangeReasonKey: string;
// global['NSUbiquitousKeyValueStoreChangeReasonKey'] = NSUbiquitousKeyValueStoreChangeReasonKey;

// export let NSUbiquitousKeyValueStoreChangedKeysKey: string;
// global['NSUbiquitousKeyValueStoreChangedKeysKey'] = NSUbiquitousKeyValueStoreChangedKeysKey;

// export let NSUnderlyingErrorKey: string;
// global['NSUnderlyingErrorKey'] = NSUnderlyingErrorKey;

// export let NSUndoCloseGroupingRunLoopOrdering: number;
// global['NSUndoCloseGroupingRunLoopOrdering'] = NSUndoCloseGroupingRunLoopOrdering;

// export let NSUndoManagerGroupIsDiscardableKey: string;
// global['NSUndoManagerGroupIsDiscardableKey'] = NSUndoManagerGroupIsDiscardableKey;

// export let NSUserActivityTypeBrowsingWeb: string;
// global['NSUserActivityTypeBrowsingWeb'] = NSUserActivityTypeBrowsingWeb;

// export let NSUserNotificationDefaultSoundName: string;
// global['NSUserNotificationDefaultSoundName'] = NSUserNotificationDefaultSoundName;

// export let NSZeroPoint: CGPoint;
// global['NSZeroPoint'] = NSZeroPoint;

// export let NSZeroRect: CGRect;
// global['NSZeroRect'] = NSZeroRect;

// export let NSZeroSize: CGSize;
// global['NSZeroSize'] = NSZeroSize;

// export let NSZombieEnabled: boolean;
// global['NSZombieEnabled'] = NSZombieEnabled;

// export let IKFilterBrowserDefaultInputImage: string;
// global['IKFilterBrowserDefaultInputImage'] = IKFilterBrowserDefaultInputImage;

// export let IKFilterBrowserExcludeCategories: string;
// global['IKFilterBrowserExcludeCategories'] = IKFilterBrowserExcludeCategories;

// export let IKFilterBrowserExcludeFilters: string;
// global['IKFilterBrowserExcludeFilters'] = IKFilterBrowserExcludeFilters;

// export let IKFilterBrowserShowCategories: string;
// global['IKFilterBrowserShowCategories'] = IKFilterBrowserShowCategories;

// export let IKFilterBrowserShowPreview: string;
// global['IKFilterBrowserShowPreview'] = IKFilterBrowserShowPreview;

// export let IKImageBrowserBackgroundColorKey: string;
// global['IKImageBrowserBackgroundColorKey'] = IKImageBrowserBackgroundColorKey;

// export let IKImageBrowserCGImageRepresentationType: string;
// global['IKImageBrowserCGImageRepresentationType'] = IKImageBrowserCGImageRepresentationType;

// export let IKImageBrowserCGImageSourceRepresentationType: string;
// global['IKImageBrowserCGImageSourceRepresentationType'] = IKImageBrowserCGImageSourceRepresentationType;

// export let IKImageBrowserCellBackgroundLayer: string;
// global['IKImageBrowserCellBackgroundLayer'] = IKImageBrowserCellBackgroundLayer;

// export let IKImageBrowserCellForegroundLayer: string;
// global['IKImageBrowserCellForegroundLayer'] = IKImageBrowserCellForegroundLayer;

// export let IKImageBrowserCellPlaceHolderLayer: string;
// global['IKImageBrowserCellPlaceHolderLayer'] = IKImageBrowserCellPlaceHolderLayer;

// export let IKImageBrowserCellSelectionLayer: string;
// global['IKImageBrowserCellSelectionLayer'] = IKImageBrowserCellSelectionLayer;

// export let IKImageBrowserCellsHighlightedTitleAttributesKey: string;
// global['IKImageBrowserCellsHighlightedTitleAttributesKey'] = IKImageBrowserCellsHighlightedTitleAttributesKey;

// export let IKImageBrowserCellsOutlineColorKey: string;
// global['IKImageBrowserCellsOutlineColorKey'] = IKImageBrowserCellsOutlineColorKey;

// export let IKImageBrowserCellsSubtitleAttributesKey: string;
// global['IKImageBrowserCellsSubtitleAttributesKey'] = IKImageBrowserCellsSubtitleAttributesKey;

// export let IKImageBrowserCellsTitleAttributesKey: string;
// global['IKImageBrowserCellsTitleAttributesKey'] = IKImageBrowserCellsTitleAttributesKey;

// export let IKImageBrowserGroupBackgroundColorKey: string;
// global['IKImageBrowserGroupBackgroundColorKey'] = IKImageBrowserGroupBackgroundColorKey;

// export let IKImageBrowserGroupFooterLayer: string;
// global['IKImageBrowserGroupFooterLayer'] = IKImageBrowserGroupFooterLayer;

// export let IKImageBrowserGroupHeaderLayer: string;
// global['IKImageBrowserGroupHeaderLayer'] = IKImageBrowserGroupHeaderLayer;

// export let IKImageBrowserGroupRangeKey: string;
// global['IKImageBrowserGroupRangeKey'] = IKImageBrowserGroupRangeKey;

// export let IKImageBrowserGroupStyleKey: string;
// global['IKImageBrowserGroupStyleKey'] = IKImageBrowserGroupStyleKey;

// export let IKImageBrowserGroupTitleKey: string;
// global['IKImageBrowserGroupTitleKey'] = IKImageBrowserGroupTitleKey;

// export let IKImageBrowserIconRefPathRepresentationType: string;
// global['IKImageBrowserIconRefPathRepresentationType'] = IKImageBrowserIconRefPathRepresentationType;

// export let IKImageBrowserIconRefRepresentationType: string;
// global['IKImageBrowserIconRefRepresentationType'] = IKImageBrowserIconRefRepresentationType;

// export let IKImageBrowserNSBitmapImageRepresentationType: string;
// global['IKImageBrowserNSBitmapImageRepresentationType'] = IKImageBrowserNSBitmapImageRepresentationType;

// export let IKImageBrowserNSDataRepresentationType: string;
// global['IKImageBrowserNSDataRepresentationType'] = IKImageBrowserNSDataRepresentationType;

// export let IKImageBrowserNSImageRepresentationType: string;
// global['IKImageBrowserNSImageRepresentationType'] = IKImageBrowserNSImageRepresentationType;

// export let IKImageBrowserNSURLRepresentationType: string;
// global['IKImageBrowserNSURLRepresentationType'] = IKImageBrowserNSURLRepresentationType;

// export let IKImageBrowserPDFPageRepresentationType: string;
// global['IKImageBrowserPDFPageRepresentationType'] = IKImageBrowserPDFPageRepresentationType;

// export let IKImageBrowserPathRepresentationType: string;
// global['IKImageBrowserPathRepresentationType'] = IKImageBrowserPathRepresentationType;

// export let IKImageBrowserQCCompositionPathRepresentationType: string;
// global['IKImageBrowserQCCompositionPathRepresentationType'] = IKImageBrowserQCCompositionPathRepresentationType;

// export let IKImageBrowserQCCompositionRepresentationType: string;
// global['IKImageBrowserQCCompositionRepresentationType'] = IKImageBrowserQCCompositionRepresentationType;

// export let IKImageBrowserQTMoviePathRepresentationType: string;
// global['IKImageBrowserQTMoviePathRepresentationType'] = IKImageBrowserQTMoviePathRepresentationType;

// export let IKImageBrowserQTMovieRepresentationType: string;
// global['IKImageBrowserQTMovieRepresentationType'] = IKImageBrowserQTMovieRepresentationType;

// export let IKImageBrowserQuickLookPathRepresentationType: string;
// global['IKImageBrowserQuickLookPathRepresentationType'] = IKImageBrowserQuickLookPathRepresentationType;

// export let IKImageBrowserSelectionColorKey: string;
// global['IKImageBrowserSelectionColorKey'] = IKImageBrowserSelectionColorKey;

// export let IKOverlayTypeBackground: string;
// global['IKOverlayTypeBackground'] = IKOverlayTypeBackground;

// export let IKOverlayTypeImage: string;
// global['IKOverlayTypeImage'] = IKOverlayTypeImage;

// export let IKPictureTakerAllowsEditingKey: string;
// global['IKPictureTakerAllowsEditingKey'] = IKPictureTakerAllowsEditingKey;

// export let IKPictureTakerAllowsFileChoosingKey: string;
// global['IKPictureTakerAllowsFileChoosingKey'] = IKPictureTakerAllowsFileChoosingKey;

// export let IKPictureTakerAllowsVideoCaptureKey: string;
// global['IKPictureTakerAllowsVideoCaptureKey'] = IKPictureTakerAllowsVideoCaptureKey;

// export let IKPictureTakerCropAreaSizeKey: string;
// global['IKPictureTakerCropAreaSizeKey'] = IKPictureTakerCropAreaSizeKey;

// export let IKPictureTakerImageTransformsKey: string;
// global['IKPictureTakerImageTransformsKey'] = IKPictureTakerImageTransformsKey;

// export let IKPictureTakerInformationalTextKey: string;
// global['IKPictureTakerInformationalTextKey'] = IKPictureTakerInformationalTextKey;

// export let IKPictureTakerOutputImageMaxSizeKey: string;
// global['IKPictureTakerOutputImageMaxSizeKey'] = IKPictureTakerOutputImageMaxSizeKey;

// export let IKPictureTakerRemainOpenAfterValidateKey: string;
// global['IKPictureTakerRemainOpenAfterValidateKey'] = IKPictureTakerRemainOpenAfterValidateKey;

// export let IKPictureTakerShowAddressBookPicture: string;
// global['IKPictureTakerShowAddressBookPicture'] = IKPictureTakerShowAddressBookPicture;

// export let IKPictureTakerShowAddressBookPictureKey: string;
// global['IKPictureTakerShowAddressBookPictureKey'] = IKPictureTakerShowAddressBookPictureKey;

// export let IKPictureTakerShowEffectsKey: string;
// global['IKPictureTakerShowEffectsKey'] = IKPictureTakerShowEffectsKey;

// export let IKPictureTakerShowEmptyPicture: string;
// global['IKPictureTakerShowEmptyPicture'] = IKPictureTakerShowEmptyPicture;

// export let IKPictureTakerShowEmptyPictureKey: string;
// global['IKPictureTakerShowEmptyPictureKey'] = IKPictureTakerShowEmptyPictureKey;

// export let IKPictureTakerShowRecentPictureKey: string;
// global['IKPictureTakerShowRecentPictureKey'] = IKPictureTakerShowRecentPictureKey;

// export let IKPictureTakerUpdateRecentPictureKey: string;
// global['IKPictureTakerUpdateRecentPictureKey'] = IKPictureTakerUpdateRecentPictureKey;

// export let IKSlideshowAudioFile: string;
// global['IKSlideshowAudioFile'] = IKSlideshowAudioFile;

// export let IKSlideshowModeImages: string;
// global['IKSlideshowModeImages'] = IKSlideshowModeImages;

// export let IKSlideshowModeOther: string;
// global['IKSlideshowModeOther'] = IKSlideshowModeOther;

// export let IKSlideshowModePDF: string;
// global['IKSlideshowModePDF'] = IKSlideshowModePDF;

// export let IKSlideshowPDFDisplayBox: string;
// global['IKSlideshowPDFDisplayBox'] = IKSlideshowPDFDisplayBox;

// export let IKSlideshowPDFDisplayMode: string;
// global['IKSlideshowPDFDisplayMode'] = IKSlideshowPDFDisplayMode;

// export let IKSlideshowPDFDisplaysAsBook: string;
// global['IKSlideshowPDFDisplaysAsBook'] = IKSlideshowPDFDisplaysAsBook;

// export let IKSlideshowScreen: string;
// global['IKSlideshowScreen'] = IKSlideshowScreen;

// export let IKSlideshowStartIndex: string;
// global['IKSlideshowStartIndex'] = IKSlideshowStartIndex;

// export let IKSlideshowStartPaused: string;
// global['IKSlideshowStartPaused'] = IKSlideshowStartPaused;

// export let IKSlideshowWrapAround: string;
// global['IKSlideshowWrapAround'] = IKSlideshowWrapAround;

// export let IKToolModeAnnotate: string;
// global['IKToolModeAnnotate'] = IKToolModeAnnotate;

// export let IKToolModeCrop: string;
// global['IKToolModeCrop'] = IKToolModeCrop;

// export let IKToolModeMove: string;
// global['IKToolModeMove'] = IKToolModeMove;

// export let IKToolModeNone: string;
// global['IKToolModeNone'] = IKToolModeNone;

// export let IKToolModeRotate: string;
// global['IKToolModeRotate'] = IKToolModeRotate;

// export let IKToolModeSelect: string;
// global['IKToolModeSelect'] = IKToolModeSelect;

// export let IKToolModeSelectEllipse: string;
// global['IKToolModeSelectEllipse'] = IKToolModeSelectEllipse;

// export let IKToolModeSelectLasso: string;
// global['IKToolModeSelectLasso'] = IKToolModeSelectLasso;

// export let IKToolModeSelectRect: string;
// global['IKToolModeSelectRect'] = IKToolModeSelectRect;

// export let IKUIFlavorAllowFallback: string;
// global['IKUIFlavorAllowFallback'] = IKUIFlavorAllowFallback;

// export let IKUISizeFlavor: string;
// global['IKUISizeFlavor'] = IKUISizeFlavor;

// export let IKUISizeMini: string;
// global['IKUISizeMini'] = IKUISizeMini;

// export let IKUISizeRegular: string;
// global['IKUISizeRegular'] = IKUISizeRegular;

// export let IKUISizeSmall: string;
// global['IKUISizeSmall'] = IKUISizeSmall;

// export let IKUImaxSize: string;
// global['IKUImaxSize'] = IKUImaxSize;

// export let IK_ApertureBundleIdentifier: string;
// global['IK_ApertureBundleIdentifier'] = IK_ApertureBundleIdentifier;

// export let IK_MailBundleIdentifier: string;
// global['IK_MailBundleIdentifier'] = IK_MailBundleIdentifier;

// export let IK_PhotosBundleIdentifier: string;
// global['IK_PhotosBundleIdentifier'] = IK_PhotosBundleIdentifier;

// export let IK_iPhotoBundleIdentifier: string;
// global['IK_iPhotoBundleIdentifier'] = IK_iPhotoBundleIdentifier;

// export let QCCompositionInputPaceKey: string;
// global['QCCompositionInputPaceKey'] = QCCompositionInputPaceKey;

// export let globalUpdateOK: boolean;
// global['globalUpdateOK'] = globalUpdateOK;

// export let kQuartzFilterApplicationDomain: string;
// global['kQuartzFilterApplicationDomain'] = kQuartzFilterApplicationDomain;

// export let kQuartzFilterPDFWorkflowDomain: string;
// global['kQuartzFilterPDFWorkflowDomain'] = kQuartzFilterPDFWorkflowDomain;

// export let kQuartzFilterPrintingDomain: string;
// global['kQuartzFilterPrintingDomain'] = kQuartzFilterPrintingDomain;

// export let CATransform3DIdentity: CATransform3D;
// global['CATransform3DIdentity'] = CATransform3DIdentity;

// export let kCAOnOrderIn: string;
// global['kCAOnOrderIn'] = kCAOnOrderIn;

// export let kCAOnOrderOut: string;
// global['kCAOnOrderOut'] = kCAOnOrderOut;

// export let kCARendererColorSpace: string;
// global['kCARendererColorSpace'] = kCARendererColorSpace;

// export let kCARendererMetalCommandQueue: string;
// global['kCARendererMetalCommandQueue'] = kCARendererMetalCommandQueue;

// export let kCATransactionAnimationDuration: string;
// global['kCATransactionAnimationDuration'] = kCATransactionAnimationDuration;

// export let kCATransactionAnimationTimingFunction: string;
// global['kCATransactionAnimationTimingFunction'] = kCATransactionAnimationTimingFunction;

// export let kCATransactionCompletionBlock: string;
// global['kCATransactionCompletionBlock'] = kCATransactionCompletionBlock;

// export let kCATransactionDisableActions: string;
// global['kCATransactionDisableActions'] = kCATransactionDisableActions;

// export let kCATransition: string;
// global['kCATransition'] = kCATransition;

export {
  AVAsset,
  AVAssetCache,
  AVAssetExportSession,
  AVAssetImageGenerator,
  AVAssetReader,
  AVAssetReaderAudioMixOutput,
  AVAssetReaderOutput,
  AVAssetReaderOutputMetadataAdaptor,
  AVAssetReaderSampleReferenceOutput,
  AVAssetReaderTrackOutput,
  AVAssetReaderVideoCompositionOutput,
  AVAssetResourceLoader,
  AVAssetResourceLoaderDelegate,
  AVAssetResourceLoadingContentInformationRequest,
  AVAssetResourceLoadingDataRequest,
  AVAssetResourceLoadingRequest,
  AVAssetResourceLoadingRequestor,
  AVAssetResourceRenewalRequest,
  AVAssetTrack,
  AVAssetTrackGroup,
  AVAssetTrackSegment,
  AVAssetWriter,
  AVAssetWriterInput,
  AVAssetWriterInputGroup,
  AVAssetWriterInputMetadataAdaptor,
  AVAssetWriterInputPassDescription,
  AVAssetWriterInputPixelBufferAdaptor,
  AVAsynchronousCIImageFilteringRequest,
  AVAsynchronousKeyValueLoading,
  AVAsynchronousVideoCompositionRequest,
  AVAudio3DMixing,
  AVAudioBuffer,
  AVAudioChannelLayout,
  AVAudioCompressedBuffer,
  AVAudioConnectionPoint,
  AVAudioConverter,
  AVAudioEngine,
  AVAudioEnvironmentDistanceAttenuationParameters,
  AVAudioEnvironmentNode,
  AVAudioEnvironmentReverbParameters,
  AVAudioFile,
  AVAudioFormat,
  AVAudioIONode,
  AVAudioInputNode,
  AVAudioMix,
  AVAudioMixInputParameters,
  AVAudioMixerNode,
  AVAudioMixing,
  AVAudioMixingDestination,
  AVAudioNode,
  AVAudioOutputNode,
  AVAudioPCMBuffer,
  AVAudioPlayer,
  AVAudioPlayerDelegate,
  AVAudioPlayerNode,
  AVAudioRecorder,
  AVAudioRecorderDelegate,
  AVAudioSequencer,
  AVAudioSession,
  AVAudioSinkNode,
  AVAudioSourceNode,
  AVAudioStereoMixing,
  AVAudioTime,
  AVAudioTimePitchAlgorithm,
  AVAudioUnit,
  AVAudioUnitComponent,
  AVAudioUnitComponentManager,
  AVAudioUnitDelay,
  AVAudioUnitDistortion,
  AVAudioUnitEQ,
  AVAudioUnitEQFilterParameters,
  AVAudioUnitEffect,
  AVAudioUnitGenerator,
  AVAudioUnitMIDIInstrument,
  AVAudioUnitReverb,
  AVAudioUnitSampler,
  AVAudioUnitTimeEffect,
  AVAudioUnitTimePitch,
  AVAudioUnitVarispeed,
  AVCameraCalibrationData,
  AVCaptureAudioChannel,
  AVCaptureAudioDataOutput,
  AVCaptureAudioDataOutputSampleBufferDelegate,
  AVCaptureAudioFileOutput,
  AVCaptureAudioPreviewOutput,
  AVCaptureConnection,
  AVCaptureDevice,
  AVCaptureDeviceInput,
  AVCaptureFileOutput,
  AVCaptureFileOutputDelegate,
  AVCaptureFileOutputRecordingDelegate,
  AVCaptureInput,
  AVCaptureMovieFileOutput,
  AVCaptureOutput,
  AVCapturePhoto,
  AVCapturePhotoCaptureDelegate,
  AVCapturePhotoOutput,
  AVCapturePhotoSettings,
  AVCaptureResolvedPhotoSettings,
  AVCaptureScreenInput,
  AVCaptureSession,
  AVCaptureVideoDataOutput,
  AVCaptureVideoDataOutputSampleBufferDelegate,
  AVCaptureVideoPreviewLayer,
  AVCaptureView,
  AVCaptureViewDelegate,
  AVComposition,
  AVCompositionTrack,
  AVCompositionTrackFormatDescriptionReplacement,
  AVCompositionTrackSegment,
  AVContentKeyRecipient,
  AVContentKeyRequest,
  AVContentKeyResponse,
  AVContentKeySession,
  AVContentKeySessionDelegate,
  AVContentKeySessionServerPlaybackContextOption,
  AVContentKeySystem,
  AVDateRangeMetadataGroup,
  AVDepthData,
  AVFileType,
  AVFragmentMinding,
  AVFragmentedAsset,
  AVFragmentedAssetMinder,
  AVFragmentedAssetTrack,
  AVFragmentedMovie,
  AVFragmentedMovieMinder,
  AVFragmentedMovieTrack,
  AVFrameRateRange,
  AVLayerVideoGravity,
  AVMIDIPlayer,
  AVMediaCharacteristic,
  AVMediaDataStorage,
  AVMediaSelection,
  AVMediaSelectionGroup,
  AVMediaSelectionOption,
  AVMediaType,
  AVMetadataBodyObject,
  AVMetadataCatBodyObject,
  AVMetadataDogBodyObject,
  AVMetadataExtraAttributeKey,
  AVMetadataFaceObject,
  AVMetadataFormat,
  AVMetadataGroup,
  AVMetadataHumanBodyObject,
  AVMetadataIdentifier,
  AVMetadataItem,
  AVMetadataItemFilter,
  AVMetadataItemValueRequest,
  AVMetadataKey,
  AVMetadataKeySpace,
  AVMetadataMachineReadableCodeObject,
  AVMetadataObject,
  AVMetadataSalientObject,
  AVMovie,
  AVMovieTrack,
  AVMusicTrack,
  AVMutableAudioMix,
  AVMutableAudioMixInputParameters,
  AVMutableComposition,
  AVMutableCompositionTrack,
  AVMutableDateRangeMetadataGroup,
  AVMutableMediaSelection,
  AVMutableMetadataItem,
  AVMutableMovie,
  AVMutableMovieTrack,
  AVMutableTimedMetadataGroup,
  AVMutableVideoComposition,
  AVMutableVideoCompositionInstruction,
  AVMutableVideoCompositionLayerInstruction,
  AVOutputSettingsAssistant,
  AVOutputSettingsPreset,
  AVPersistableContentKeyRequest,
  AVPictureInPictureController,
  AVPictureInPictureControllerDelegate,
  AVPlayer,
  AVPlayerItem,
  AVPlayerItemAccessLog,
  AVPlayerItemAccessLogEvent,
  AVPlayerItemErrorLog,
  AVPlayerItemErrorLogEvent,
  AVPlayerItemLegibleOutput,
  AVPlayerItemLegibleOutputPushDelegate,
  AVPlayerItemMediaDataCollector,
  AVPlayerItemMetadataCollector,
  AVPlayerItemMetadataCollectorPushDelegate,
  AVPlayerItemMetadataOutput,
  AVPlayerItemMetadataOutputPushDelegate,
  AVPlayerItemOutput,
  AVPlayerItemOutputPullDelegate,
  AVPlayerItemOutputPushDelegate,
  AVPlayerItemTrack,
  AVPlayerItemVideoOutput,
  AVPlayerLayer,
  AVPlayerLooper,
  AVPlayerMediaSelectionCriteria,
  AVPlayerView,
  AVPlayerViewPictureInPictureDelegate,
  AVPortraitEffectsMatte,
  AVQueuePlayer,
  AVQueuedSampleBufferRendering,
  AVRouteDetector,
  AVRoutePickerView,
  AVRoutePickerViewDelegate,
  AVSampleBufferAudioRenderer,
  AVSampleBufferDisplayLayer,
  AVSampleBufferGenerator,
  AVSampleBufferRenderSynchronizer,
  AVSampleBufferRequest,
  AVSampleCursor,
  AVSemanticSegmentationMatte,
  AVSpeechSynthesisVoice,
  AVSpeechSynthesizer,
  AVSpeechSynthesizerDelegate,
  AVSpeechUtterance,
  AVSynchronizedLayer,
  AVTextStyleRule,
  AVTimedMetadataGroup,
  AVURLAsset,
  AVVideoApertureMode,
  AVVideoCodecType,
  AVVideoCompositing,
  AVVideoComposition,
  AVVideoCompositionCoreAnimationTool,
  AVVideoCompositionInstruction,
  AVVideoCompositionLayerInstruction,
  AVVideoCompositionRenderContext,
  AVVideoCompositionRenderHint,
  AVVideoCompositionValidationHandling,
  Authorization,
  BlockOperation,
  Bundle,
  ByteCountFormatter,
  CAAction,
  CAAnimation,
  CAAnimationCalculationMode,
  CAAnimationDelegate,
  CAAnimationGroup,
  CAAnimationRotationMode,
  CABasicAnimation,
  CAConstraint,
  CAConstraintLayoutManager,
  CAEDRMetadata,
  CAEmitterCell,
  CAEmitterLayer,
  CAEmitterLayerEmitterMode,
  CAEmitterLayerEmitterShape,
  CAEmitterLayerRenderMode,
  CAGradientLayer,
  CAGradientLayerType,
  CAKeyframeAnimation,
  CALayer,
  CALayerContentsFilter,
  CALayerContentsFormat,
  CALayerContentsGravity,
  CALayerCornerCurve,
  CALayerDelegate,
  CALayoutManager,
  CAMediaTiming,
  CAMediaTimingFillMode,
  CAMediaTimingFunction,
  CAMediaTimingFunctionName,
  CAMetalDrawable,
  CAMetalLayer,
  CAPropertyAnimation,
  CARemoteLayerClient,
  CARemoteLayerServer,
  CARenderer,
  CAReplicatorLayer,
  CAScrollLayer,
  CAScrollLayerScrollMode,
  CAShapeLayer,
  CAShapeLayerFillRule,
  CAShapeLayerLineCap,
  CAShapeLayerLineJoin,
  CASpringAnimation,
  CATextLayer,
  CATextLayerAlignmentMode,
  CATextLayerTruncationMode,
  CATiledLayer,
  CATransaction,
  CATransformLayer,
  CATransition,
  CATransitionSubtype,
  CATransitionType,
  CAValueFunction,
  CAValueFunctionName,
  CFCalendarIdentifier,
  CFDateFormatterKey,
  CFLocaleKey,
  CFNotificationName,
  CFNumberFormatterKey,
  CFRunLoopMode,
  CFStreamPropertyKey,
  CGAffineTransform,
  CGColor,
  CGColorSpace,
  CGDisplayStream,
  CGFont,
  CGPDFTagProperty,
  CGPoint,
  CGRect,
  CGSize,
  CIAccordionFoldTransition,
  CIAffineClamp,
  CIAffineTile,
  CIAttributedTextImageGenerator,
  CIAztecCodeDescriptor,
  CIAztecCodeGenerator,
  CIBarcodeDescriptor,
  CIBarcodeGenerator,
  CIBarsSwipeTransition,
  CIBicubicScaleTransform,
  CIBlendKernel,
  CIBlendWithMask,
  CIBloom,
  CIBokehBlur,
  CIBoxBlur,
  CICMYKHalftone,
  CICheckerboardGenerator,
  CICircularScreen,
  CICode128BarcodeGenerator,
  CIColor,
  CIColorClamp,
  CIColorControls,
  CIColorCrossPolynomial,
  CIColorCube,
  CIColorCubeWithColorSpace,
  CIColorCubesMixedWithMask,
  CIColorCurves,
  CIColorInvert,
  CIColorKernel,
  CIColorMap,
  CIColorMatrix,
  CIColorMonochrome,
  CIColorPolynomial,
  CIColorPosterize,
  CIComicEffect,
  CICompositeOperation,
  CIContext,
  CIContextOption,
  CIConvolution,
  CICopyMachineTransition,
  CICoreMLModel,
  CICrystallize,
  CIDataMatrixCodeDescriptor,
  CIDepthOfField,
  CIDepthToDisparity,
  CIDetector,
  CIDiscBlur,
  CIDisintegrateWithMaskTransition,
  CIDisparityToDepth,
  CIDissolveTransition,
  CIDither,
  CIDocumentEnhancer,
  CIDotScreen,
  CIEdgePreserveUpsample,
  CIEdgeWork,
  CIEdges,
  CIEightfoldReflectedTile,
  CIExposureAdjust,
  CIFaceFeature,
  CIFalseColor,
  CIFeature,
  CIFilter,
  CIFilterConstructor,
  CIFilterGenerator,
  CIFilterShape,
  CIFlashTransition,
  CIFormat,
  CIFourCoordinateGeometryFilter,
  CIFourfoldReflectedTile,
  CIFourfoldRotatedTile,
  CIFourfoldTranslatedTile,
  CIGaborGradients,
  CIGammaAdjust,
  CIGaussianBlur,
  CIGaussianGradient,
  CIGlideReflectedTile,
  CIGloom,
  CIHatchedScreen,
  CIHeightFieldFromMask,
  CIHexagonalPixellate,
  CIHighlightShadowAdjust,
  CIHueAdjust,
  CIHueSaturationValueGradient,
  CIImage,
  CIImageAccumulator,
  CIImageAutoAdjustmentOption,
  CIImageOption,
  CIImageProcessorInput,
  CIImageProcessorKernel,
  CIImageProcessorOutput,
  CIImageRepresentationOption,
  CIKaleidoscope,
  CIKernel,
  CIKeystoneCorrectionCombined,
  CIKeystoneCorrectionHorizontal,
  CIKeystoneCorrectionVertical,
  CILabDeltaE,
  CILanczosScaleTransform,
  CILenticularHaloGenerator,
  CILineOverlay,
  CILineScreen,
  CILinearGradient,
  CILinearToSRGBToneCurve,
  CIMaskToAlpha,
  CIMaskedVariableBlur,
  CIMaximumComponent,
  CIMedian,
  CIMeshGenerator,
  CIMinimumComponent,
  CIMix,
  CIModTransition,
  CIMorphologyGradient,
  CIMorphologyMaximum,
  CIMorphologyMinimum,
  CIMorphologyRectangleMaximum,
  CIMorphologyRectangleMinimum,
  CIMotionBlur,
  CINoiseReduction,
  CIOpTile,
  CIPDF417BarcodeGenerator,
  CIPDF417CodeDescriptor,
  CIPageCurlTransition,
  CIPageCurlWithShadowTransition,
  CIPaletteCentroid,
  CIPalettize,
  CIParallelogramTile,
  CIPerspectiveCorrection,
  CIPerspectiveRotate,
  CIPerspectiveTile,
  CIPerspectiveTransform,
  CIPerspectiveTransformWithExtent,
  CIPhotoEffect,
  CIPixellate,
  CIPlugIn,
  CIPlugInRegistration,
  CIPointillize,
  CIQRCodeDescriptor,
  CIQRCodeFeature,
  CIQRCodeGenerator,
  CIRAWFilterOption,
  CIRadialGradient,
  CIRandomGenerator,
  CIRectangleFeature,
  CIRenderDestination,
  CIRenderInfo,
  CIRenderTask,
  CIRippleTransition,
  CIRoundedRectangleGenerator,
  CISRGBToneCurveToLinear,
  CISaliencyMap,
  CISampler,
  CISepiaTone,
  CIShadedMaterial,
  CISharpenLuminance,
  CISixfoldReflectedTile,
  CISixfoldRotatedTile,
  CISmoothLinearGradient,
  CISpotColor,
  CISpotLight,
  CIStarShineGenerator,
  CIStraighten,
  CIStripesGenerator,
  CISunbeamsGenerator,
  CISwipeTransition,
  CITemperatureAndTint,
  CITextFeature,
  CITextImageGenerator,
  CIThermal,
  CIToneCurve,
  CITransitionFilter,
  CITriangleKaleidoscope,
  CITriangleTile,
  CITwelvefoldReflectedTile,
  CIUnsharpMask,
  CIVector,
  CIVibrance,
  CIVignette,
  CIVignetteEffect,
  CIWarpKernel,
  CIWhitePointAdjust,
  CIXRay,
  CIZoomBlur,
  CMImageDescriptionFlavor,
  CMSampleTimingInfo,
  CMSoundDescriptionFlavor,
  CMTime,
  CMTimeMapping,
  CMTimeRange,
  CachedURLResponse,
  DateComponentsFormatter,
  DateFormatter,
  DateIntervalFormatter,
  Decimal,
  Dimension,
  DirectoryEnumerator,
  DiscoverySession,
  DistributedNotificationCenter,
  EnergyFormatter,
  FileAttributeKey,
  FileAttributeType,
  FileHandle,
  FileManager,
  FileManagerDelegate,
  FileProtectionType,
  FileWrapper,
  Format,
  Formatter,
  HTTPCookie,
  HTTPCookiePropertyKey,
  HTTPCookieStorage,
  HTTPCookieStringPolicy,
  HTTPURLResponse,
  Host,
  IKCameraDeviceView,
  IKCameraDeviceViewDelegate,
  IKDeviceBrowserView,
  IKDeviceBrowserViewDelegate,
  IKFilterBrowserPanel,
  IKFilterBrowserView,
  IKFilterCustomUIProvider,
  IKFilterUIView,
  IKImageBrowserCell,
  IKImageEditPanel,
  IKImageEditPanelDataSource,
  IKImageView,
  IKPictureTaker,
  IKSaveOptions,
  IKScannerDeviceView,
  IKScannerDeviceViewDelegate,
  IKSlideshow,
  IKSlideshowDataSource,
  ISO8601DateFormatter,
  InputSource,
  InputStream,
  ItemResult,
  JSONSerialization,
  LengthFormatter,
  ListFormatter,
  MassFormatter,
  MeasurementFormatter,
  MessagePort,
  NSATSTypesetter,
  NSAccessibility,
  NSAccessibilityButton,
  NSAccessibilityCheckBox,
  NSAccessibilityContainsTransientUI,
  NSAccessibilityCustomAction,
  NSAccessibilityCustomRotor,
  NSAccessibilityCustomRotorItemSearchDelegate,
  NSAccessibilityElement,
  NSAccessibilityElementLoading,
  NSAccessibilityGroup,
  NSAccessibilityImage,
  NSAccessibilityLayoutArea,
  NSAccessibilityLayoutItem,
  NSAccessibilityList,
  NSAccessibilityNavigableStaticText,
  NSAccessibilityOutline,
  NSAccessibilityProgressIndicator,
  NSAccessibilityRadioButton,
  NSAccessibilityRow,
  NSAccessibilitySlider,
  NSAccessibilityStaticText,
  NSAccessibilityStepper,
  NSAccessibilitySwitch,
  NSAccessibilityTable,
  NSActionCell,
  NSAffineTransform,
  NSAlert,
  NSAlertDelegate,
  NSAlignmentFeedbackFilter,
  NSAlignmentFeedbackToken,
  NSAnimatablePropertyContainer,
  NSAnimation,
  NSAnimationContext,
  NSAnimationDelegate,
  NSAppKitVersion,
  NSAppearance,
  NSAppearanceCustomization,
  NSAppleEventDescriptor,
  NSAppleEventManager,
  NSAppleScript,
  NSApplication,
  NSApplicationDelegate,
  NSArray,
  NSArrayController,
  NSAssertionHandler,
  NSAsynchronousFetchRequest,
  NSAsynchronousFetchResult,
  NSAtomicStore,
  NSAtomicStoreCacheNode,
  NSAttributeDescription,
  NSAttributedString,
  NSAutoreleasePool,
  NSBackgroundActivityScheduler,
  NSBatchDeleteRequest,
  NSBatchDeleteResult,
  NSBatchInsertRequest,
  NSBatchInsertResult,
  NSBatchUpdateRequest,
  NSBatchUpdateResult,
  NSBezierPath,
  NSBindingInfoKey,
  NSBindingName,
  NSBindingOption,
  NSBindingSelectionMarker,
  NSBitmapImageRep,
  NSBox,
  NSBrowser,
  NSBrowserCell,
  NSBrowserDelegate,
  NSButton,
  NSButtonCell,
  NSButtonTouchBarItem,
  NSCIImageRep,
  NSCache,
  NSCacheDelegate,
  NSCalendar,
  NSCandidateListTouchBarItem,
  NSCandidateListTouchBarItemDelegate,
  NSCell,
  NSChangeSpelling,
  NSCharacterSet,
  NSClassDescription,
  NSClickGestureRecognizer,
  NSClipView,
  NSCloneCommand,
  NSCloseCommand,
  NSCloudSharingServiceDelegate,
  NSCloudSharingValidation,
  NSCoder,
  NSCoding,
  NSCollectionLayoutAnchor,
  NSCollectionLayoutBoundarySupplementaryItem,
  NSCollectionLayoutContainer,
  NSCollectionLayoutDecorationItem,
  NSCollectionLayoutDimension,
  NSCollectionLayoutEdgeSpacing,
  NSCollectionLayoutEnvironment,
  NSCollectionLayoutGroup,
  NSCollectionLayoutGroupCustomItem,
  NSCollectionLayoutItem,
  NSCollectionLayoutSection,
  NSCollectionLayoutSize,
  NSCollectionLayoutSpacing,
  NSCollectionLayoutSupplementaryItem,
  NSCollectionLayoutVisibleItem,
  NSCollectionView,
  NSCollectionViewCompositionalLayout,
  NSCollectionViewCompositionalLayoutConfiguration,
  NSCollectionViewDataSource,
  NSCollectionViewDelegate,
  NSCollectionViewDelegateFlowLayout,
  NSCollectionViewDiffableDataSourceReference,
  NSCollectionViewElement,
  NSCollectionViewFlowLayout,
  NSCollectionViewFlowLayoutInvalidationContext,
  NSCollectionViewGridLayout,
  NSCollectionViewItem,
  NSCollectionViewLayout,
  NSCollectionViewLayoutAttributes,
  NSCollectionViewLayoutInvalidationContext,
  NSCollectionViewPrefetching,
  NSCollectionViewSectionHeaderView,
  NSCollectionViewTransitionLayout,
  NSCollectionViewUpdateItem,
  NSColor,
  NSColorChanging,
  NSColorList,
  NSColorPanel,
  NSColorPicker,
  NSColorPickerTouchBarItem,
  NSColorPickingCustom,
  NSColorPickingDefault,
  NSColorSampler,
  NSColorSpace,
  NSColorSpaceName,
  NSColorWell,
  NSComboBox,
  NSComboBoxCell,
  NSComboBoxCellDataSource,
  NSComboBoxDataSource,
  NSComboBoxDelegate,
  NSComparisonPredicate,
  NSCompoundPredicate,
  NSCondition,
  NSConditionLock,
  NSConstraintConflict,
  NSControl,
  NSControlTextEditingDelegate,
  NSController,
  NSCopying,
  NSCoreDataCoreSpotlightDelegate,
  NSCountCommand,
  NSCountedSet,
  NSCreateCommand,
  NSCursor,
  NSCustomImageRep,
  NSCustomTouchBarItem,
  NSData,
  NSDataAsset,
  NSDataDetector,
  NSDate,
  NSDateComponents,
  NSDateInterval,
  NSDatePicker,
  NSDatePickerCell,
  NSDatePickerCellDelegate,
  NSDecimalNumber,
  NSDecimalNumberBehaviors,
  NSDecimalNumberHandler,
  NSDeleteCommand,
  NSDerivedAttributeDescription,
  NSDeviceDescriptionKey,
  NSDictionary,
  NSDictionaryController,
  NSDictionaryControllerKeyValuePair,
  NSDiffableDataSourceSnapshotReference,
  NSDiscardableContent,
  NSDistributedLock,
  NSDockTile,
  NSDockTilePlugIn,
  NSDocument,
  NSDocumentController,
  NSDraggingDestination,
  NSDraggingImageComponent,
  NSDraggingInfo,
  NSDraggingItem,
  NSDraggingSession,
  NSDraggingSource,
  NSDrawer,
  NSDrawerDelegate,
  NSEPSImageRep,
  NSEditor,
  NSEditorRegistration,
  NSEntityDescription,
  NSEntityMapping,
  NSEntityMigrationPolicy,
  NSEnumerator,
  NSError,
  NSEvent,
  NSException,
  NSExceptionName,
  NSExistsCommand,
  NSExpression,
  NSExpressionDescription,
  NSExtensionContext,
  NSExtensionItem,
  NSExtensionRequestHandling,
  NSFastEnumeration,
  NSFetchIndexDescription,
  NSFetchIndexElementDescription,
  NSFetchRequest,
  NSFetchRequestExpression,
  NSFetchRequestResult,
  NSFetchedPropertyDescription,
  NSFetchedResultsController,
  NSFetchedResultsControllerDelegate,
  NSFetchedResultsSectionInfo,
  NSFileAccessIntent,
  NSFileCoordinator,
  NSFilePresenter,
  NSFilePromiseProvider,
  NSFilePromiseProviderDelegate,
  NSFilePromiseReceiver,
  NSFileProviderService,
  NSFileSecurity,
  NSFileVersion,
  NSFont,
  NSFontAssetRequest,
  NSFontChanging,
  NSFontCollection,
  NSFontDescriptor,
  NSFontManager,
  NSFontPanel,
  NSFormCell,
  NSGestureRecognizer,
  NSGestureRecognizerDelegate,
  NSGetCommand,
  NSGlyphGenerator,
  NSGlyphInfo,
  NSGlyphStorage,
  NSGradient,
  NSGraphicsContext,
  NSGridCell,
  NSGridColumn,
  NSGridRow,
  NSGridView,
  NSGroupTouchBarItem,
  NSHapticFeedbackManager,
  NSHapticFeedbackPerformer,
  NSHashTable,
  NSHelpManager,
  NSIgnoreMisspelledWords,
  NSImage,
  NSImageCell,
  NSImageDelegate,
  NSImageRep,
  NSImageView,
  NSIncrementalStore,
  NSIncrementalStoreNode,
  NSIndexPath,
  NSIndexSet,
  NSIndexSpecifier,
  NSInputServerMouseTracker,
  NSInputServiceProvider,
  NSItemProvider,
  NSItemProviderReading,
  NSItemProviderWriting,
  NSKeyValueChangeKey,
  NSKeyValueOperator,
  NSKeyedArchiver,
  NSKeyedArchiverDelegate,
  NSKeyedUnarchiver,
  NSKeyedUnarchiverDelegate,
  NSLayoutAnchor,
  NSLayoutConstraint,
  NSLayoutDimension,
  NSLayoutGuide,
  NSLayoutManager,
  NSLayoutManagerDelegate,
  NSLayoutXAxisAnchor,
  NSLayoutYAxisAnchor,
  NSLevelIndicator,
  NSLevelIndicatorCell,
  NSLinguisticTag,
  NSLinguisticTagScheme,
  NSLinguisticTagger,
  NSLocale,
  NSLock,
  NSLocking,
  NSLogicalTest,
  NSMachPort,
  NSMachPortDelegate,
  NSMagnificationGestureRecognizer,
  NSManagedObject,
  NSManagedObjectContext,
  NSManagedObjectID,
  NSManagedObjectModel,
  NSMapTable,
  NSMappingModel,
  NSMatrix,
  NSMatrixDelegate,
  NSMeasurement,
  NSMediaLibraryBrowserController,
  NSMenu,
  NSMenuDelegate,
  NSMenuItem,
  NSMenuItemCell,
  NSMenuItemValidation,
  NSMenuToolbarItem,
  NSMergeConflict,
  NSMergePolicy,
  NSMetadataItem,
  NSMetadataQuery,
  NSMetadataQueryAttributeValueTuple,
  NSMetadataQueryDelegate,
  NSMetadataQueryResultGroup,
  NSMiddleSpecifier,
  NSMigrationManager,
  NSMoveCommand,
  NSMutableArray,
  NSMutableAttributedString,
  NSMutableCharacterSet,
  NSMutableCopying,
  NSMutableData,
  NSMutableDictionary,
  NSMutableFontCollection,
  NSMutableIndexSet,
  NSMutableOrderedSet,
  NSMutableParagraphStyle,
  NSMutableSet,
  NSMutableString,
  NSMutableURLRequest,
  NSNameSpecifier,
  NSNib,
  NSNotification,
  NSNull,
  NSNumber,
  NSObjectController,
  NSOpenPanel,
  NSOpenSavePanelDelegate,
  NSOrderedCollectionChange,
  NSOrderedCollectionDifference,
  NSOrderedSet,
  NSOrthography,
  NSOutlineView,
  NSOutlineViewDataSource,
  NSOutlineViewDelegate,
  NSPDFImageRep,
  NSPDFInfo,
  NSPDFPanel,
  NSPICTImageRep,
  NSPageController,
  NSPageControllerDelegate,
  NSPageLayout,
  NSPanGestureRecognizer,
  NSPanel,
  NSParagraphStyle,
  NSPasteboard,
  NSPasteboardItem,
  NSPasteboardItemDataProvider,
  NSPasteboardReading,
  NSPasteboardTypeOwner,
  NSPasteboardWriting,
  NSPathCell,
  NSPathCellDelegate,
  NSPathComponentCell,
  NSPathControl,
  NSPathControlDelegate,
  NSPathControlItem,
  NSPersistentCloudKitContainer,
  NSPersistentCloudKitContainerOptions,
  NSPersistentContainer,
  NSPersistentDocument,
  NSPersistentHistoryChange,
  NSPersistentHistoryChangeRequest,
  NSPersistentHistoryResult,
  NSPersistentHistoryToken,
  NSPersistentHistoryTransaction,
  NSPersistentStore,
  NSPersistentStoreAsynchronousResult,
  NSPersistentStoreCoordinator,
  NSPersistentStoreDescription,
  NSPersistentStoreRequest,
  NSPersistentStoreResult,
  NSPersonNameComponents,
  NSPickerTouchBarItem,
  NSPointerArray,
  NSPointerFunctions,
  NSPopUpButton,
  NSPopUpButtonCell,
  NSPopover,
  NSPopoverDelegate,
  NSPopoverTouchBarItem,
  NSPositionalSpecifier,
  NSPredicate,
  NSPredicateEditor,
  NSPredicateEditorRowTemplate,
  NSPressGestureRecognizer,
  NSPressureConfiguration,
  NSPrintInfo,
  NSPrintOperation,
  NSPrintPanel,
  NSPrintPanelAccessorizing,
  NSPrinter,
  NSProgressIndicator,
  NSPropertyDescription,
  NSPropertyMapping,
  NSPropertySpecifier,
  NSProtocolChecker,
  NSProxy,
  NSPurgeableData,
  NSQueryGenerationToken,
  NSQuitCommand,
  NSRandomSpecifier,
  NSRangeSpecifier,
  NSRecursiveLock,
  NSRegularExpression,
  NSRelationshipDescription,
  NSRelativeSpecifier,
  NSResponder,
  NSRotationGestureRecognizer,
  NSRuleEditor,
  NSRuleEditorDelegate,
  NSRulerMarker,
  NSRulerView,
  NSRunningApplication,
  NSSaveChangesRequest,
  NSSavePanel,
  NSScreen,
  NSScriptClassDescription,
  NSScriptCoercionHandler,
  NSScriptCommand,
  NSScriptCommandDescription,
  NSScriptExecutionContext,
  NSScriptObjectSpecifier,
  NSScriptSuiteRegistry,
  NSScriptWhoseTest,
  NSScrollView,
  NSScroller,
  NSScrubber,
  NSScrubberArrangedView,
  NSScrubberDataSource,
  NSScrubberDelegate,
  NSScrubberFlowLayout,
  NSScrubberFlowLayoutDelegate,
  NSScrubberImageItemView,
  NSScrubberItemView,
  NSScrubberLayout,
  NSScrubberLayoutAttributes,
  NSScrubberProportionalLayout,
  NSScrubberSelectionStyle,
  NSScrubberSelectionView,
  NSScrubberTextItemView,
  NSSearchField,
  NSSearchFieldCell,
  NSSearchFieldDelegate,
  NSSecureCoding,
  NSSecureTextField,
  NSSecureTextFieldCell,
  NSSecureUnarchiveFromDataTransformer,
  NSSegmentedCell,
  NSSegmentedControl,
  NSSeguePerforming,
  NSServicesMenuRequestor,
  NSSet,
  NSSetCommand,
  NSShadow,
  NSSharingService,
  NSSharingServiceDelegate,
  NSSharingServicePicker,
  NSSharingServicePickerDelegate,
  NSSharingServicePickerToolbarItem,
  NSSharingServicePickerToolbarItemDelegate,
  NSSharingServicePickerTouchBarItem,
  NSSharingServicePickerTouchBarItemDelegate,
  NSSlider,
  NSSliderAccessory,
  NSSliderAccessoryBehavior,
  NSSliderCell,
  NSSliderTouchBarItem,
  NSSortDescriptor,
  NSSound,
  NSSoundDelegate,
  NSSpecifierTest,
  NSSpeechRecognizer,
  NSSpeechRecognizerDelegate,
  NSSpeechSynthesizer,
  NSSpeechSynthesizerDelegate,
  NSSpellChecker,
  NSSpellServer,
  NSSpellServerDelegate,
  NSSplitView,
  NSSplitViewController,
  NSSplitViewDelegate,
  NSSplitViewItem,
  NSSpringLoadingDestination,
  NSStackView,
  NSStackViewDelegate,
  NSStandardKeyBindingResponding,
  NSStatusBar,
  NSStatusBarButton,
  NSStatusItem,
  NSStepper,
  NSStepperCell,
  NSStepperTouchBarItem,
  NSStoryboard,
  NSStoryboardSegue,
  NSString,
  NSStringDrawingContext,
  NSSwitch,
  NSTabView,
  NSTabViewController,
  NSTabViewDelegate,
  NSTabViewItem,
  NSTableCellView,
  NSTableColumn,
  NSTableHeaderCell,
  NSTableHeaderView,
  NSTableRowView,
  NSTableView,
  NSTableViewDataSource,
  NSTableViewDelegate,
  NSTableViewRowAction,
  NSText,
  NSTextAlternatives,
  NSTextAttachment,
  NSTextAttachmentCell,
  NSTextAttachmentContainer,
  NSTextBlock,
  NSTextCheckingClient,
  NSTextCheckingController,
  NSTextCheckingKey,
  NSTextCheckingResult,
  NSTextContainer,
  NSTextDelegate,
  NSTextField,
  NSTextFieldCell,
  NSTextFieldDelegate,
  NSTextFinder,
  NSTextFinderBarContainer,
  NSTextFinderClient,
  NSTextInput,
  NSTextInputClient,
  NSTextInputContext,
  NSTextInputTraits,
  NSTextLayoutOrientationProvider,
  NSTextList,
  NSTextStorage,
  NSTextStorageDelegate,
  NSTextTab,
  NSTextTable,
  NSTextTableBlock,
  NSTextView,
  NSTextViewDelegate,
  NSTimeZone,
  NSTitlebarAccessoryViewController,
  NSTokenField,
  NSTokenFieldCell,
  NSTokenFieldCellDelegate,
  NSTokenFieldDelegate,
  NSToolbar,
  NSToolbarDelegate,
  NSToolbarItem,
  NSToolbarItemGroup,
  NSToolbarItemValidation,
  NSTouch,
  NSTouchBar,
  NSTouchBarDelegate,
  NSTouchBarItem,
  NSTouchBarProvider,
  NSTrackingArea,
  NSTreeController,
  NSTreeNode,
  NSTypesetter,
  NSURL,
  NSURLComponents,
  NSURLConnection,
  NSURLConnectionDataDelegate,
  NSURLConnectionDelegate,
  NSURLConnectionDownloadDelegate,
  NSURLDownload,
  NSURLDownloadDelegate,
  NSURLHandle,
  NSURLQueryItem,
  NSURLRequest,
  NSURLSessionWebSocketMessage,
  NSUUID,
  NSUbiquitousKeyValueStore,
  NSUniqueIDSpecifier,
  NSUnitInformationStorage,
  NSUserActivity,
  NSUserActivityDelegate,
  NSUserActivityRestoring,
  NSUserAppleScriptTask,
  NSUserAutomatorTask,
  NSUserDefaultsController,
  NSUserInterfaceCompression,
  NSUserInterfaceCompressionOptions,
  NSUserInterfaceItemIdentification,
  NSUserInterfaceItemSearching,
  NSUserInterfaceValidations,
  NSUserNotification,
  NSUserNotificationAction,
  NSUserNotificationCenter,
  NSUserNotificationCenterDelegate,
  NSUserScriptTask,
  NSUserUnixTask,
  NSValidatedUserInterfaceItem,
  NSValue,
  NSValueTransformerName,
  NSView,
  NSViewAnimation,
  NSViewController,
  NSViewControllerPresentationAnimator,
  NSViewLayerContentScaleDelegate,
  NSViewToolTipOwner,
  NSVisualEffectView,
  NSWhoseSpecifier,
  NSWindow,
  NSWindowController,
  NSWindowDelegate,
  NSWindowRestoration,
  NSWindowTab,
  NSWindowTabGroup,
  NSWorkspace,
  NSXPCCoder,
  NSXPCConnection,
  NSXPCInterface,
  NSXPCListener,
  NSXPCListenerDelegate,
  NSXPCListenerEndpoint,
  NSXPCProxyCreating,
  NetService,
  NetServiceBrowser,
  NetServiceBrowserDelegate,
  NetServiceDelegate,
  NotificationCenter,
  NotificationQueue,
  NumberFormatter,
  OpenConfiguration,
  Operation,
  OperationQueue,
  OutputStream,
  PersonNameComponentsFormatter,
  Pipe,
  Port,
  PortDelegate,
  PortMessage,
  Process,
  ProcessInfo,
  Progress,
  ProgressKind,
  ProgressReporting,
  ProgressUserInfoKey,
  PropertyListSerialization,
  QLPreviewItem,
  QLPreviewPanel,
  QLPreviewPanelDataSource,
  QLPreviewPanelDelegate,
  QLPreviewView,
  QLPreviewingController,
  QuartzFilter,
  QuartzFilterManager,
  QuartzFilterView,
  RelativeDateTimeFormatter,
  RunLoop,
  Scanner,
  SearchParameters,
  SocketPort,
  Stream,
  StreamDelegate,
  StreamNetworkServiceTypeValue,
  StreamSOCKSProxyConfiguration,
  StreamSOCKSProxyVersion,
  StreamSocketSecurityLevel,
  StringEncodingDetectionOptionsKey,
  StringTransform,
  SystemPressureState,
  Thread,
  Timer,
  URLAuthenticationChallenge,
  URLAuthenticationChallengeSender,
  URLCache,
  URLCredential,
  URLCredentialStorage,
  URLFileProtection,
  URLFileResourceType,
  URLProtectionSpace,
  URLProtocol,
  URLProtocolClient,
  URLResourceKey,
  URLResponse,
  URLSession,
  URLSessionConfiguration,
  URLSessionDataDelegate,
  URLSessionDataTask,
  URLSessionDelegate,
  URLSessionDownloadDelegate,
  URLSessionDownloadTask,
  URLSessionStreamDelegate,
  URLSessionStreamTask,
  URLSessionTask,
  URLSessionTaskDelegate,
  URLSessionTaskMetrics,
  URLSessionTaskTransactionMetrics,
  URLSessionUploadTask,
  URLSessionWebSocketDelegate,
  URLSessionWebSocketTask,
  URLThumbnailDictionaryItem,
  URLUbiquitousItemDownloadingStatus,
  URLUbiquitousSharedItemPermissions,
  URLUbiquitousSharedItemRole,
  UndoManager,
  Unit,
  UnitAcceleration,
  UnitAngle,
  UnitArea,
  UnitConcentrationMass,
  UnitConverter,
  UnitConverterLinear,
  UnitDispersion,
  UnitDuration,
  UnitElectricCharge,
  UnitElectricCurrent,
  UnitElectricPotentialDifference,
  UnitElectricResistance,
  UnitEnergy,
  UnitFrequency,
  UnitFuelEfficiency,
  UnitIlluminance,
  UnitLength,
  UnitMass,
  UnitPower,
  UnitPressure,
  UnitSpeed,
  UnitTemperature,
  UnitVolume,
  UserDefaults,
  ValueTransformer,
  XMLDTD,
  XMLDTDNode,
  XMLDocument,
  XMLElement,
  XMLNode,
  XMLParser,
  XMLParserDelegate,
};
