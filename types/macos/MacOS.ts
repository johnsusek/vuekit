/* eslint-disable */

declare global {

export class AVAsset extends NSObject {
  allMediaSelections: AVMediaSelection[];
  availableChapterLocales: Locale[];
  availableMediaCharacteristicsWithMediaSelectionOptions: string[];
  availableMetadataFormats: string[];
  canContainFragments: boolean;
  commonMetadata: AVMetadataItem[];
  isCompatibleWithAirPlayVideo: boolean;
  isComposable: boolean;
  containsFragments: boolean;
  creationDate: AVMetadataItem;
  duration: CMTime;
  isExportable: boolean;
  hasProtectedContent: boolean;
  lyrics: string;
  metadata: AVMetadataItem[];
  minimumTimeOffsetFromLive: CMTime;
  overallDurationHint: CMTime;
  isPlayable: boolean;
  preferredMediaSelection: AVMediaSelection;
  preferredRate: number;
  preferredTransform: CGAffineTransform;
  preferredVolume: number;
  providesPreciseDurationAndTiming: boolean;
  isReadable: boolean;
  referenceRestrictions: AVAsset.AVAssetReferenceRestrictions;
  trackGroups: AVAssetTrackGroup[];
  tracks: AVAssetTrack[];
  cancelLoading(): void;
  chapterMetadataGroups(bestMatchingPreferredLanguages: string[]): AVTimedMetadataGroup[];
  chapterMetadataGroups(withTitleLocale: Locale, containingItemsWithCommonKeys?: string[]): AVTimedMetadataGroup[];
  mediaSelectionGroup(forMediaCharacteristic: string): AVMediaSelectionGroup;
  // dupe name w instance property   metadata(forFormat: string): AVMetadataItem[];
  track(withTrackID: number): AVAssetTrack;
  // dupe name w instance property   tracks(withMediaCharacteristic: string): AVAssetTrack[];
  // dupe name w instance property   tracks(withMediaType: string): AVAssetTrack[];
  unusedTrackID(): number;
}

export class AVAssetCache extends NSObject {
  isPlayableOffline: boolean;
  mediaSelectionOptions(in_: AVMediaSelectionGroup): AVMediaSelectionOption[];
}

export class AVAssetExportSession extends NSObject {
  static allExportPresets(): string[];
  static determineCompatibility(ofExportPreset: string, with_: AVAsset, outputFileType?: string, completionHandler?: (p1: boolean) => void): void;
  static exportPresets(compatibleWith: AVAsset): string[];
  asset: AVAsset;
  audioMix: AVAudioMix;
  setAudioMix(_: AVAudioMix);
  audioTimePitchAlgorithm: string;
  setAudioTimePitchAlgorithm(_: string);
  canPerformMultiplePassesOverSourceMediaData: boolean;
  setCanPerformMultiplePassesOverSourceMediaData(_: boolean);
  customVideoCompositor: any;
  directoryForTemporaryFiles: URL;
  setDirectoryForTemporaryFiles(_: URL);
  error: Error;
  estimatedOutputFileLength: number;
  fileLengthLimit: number;
  setFileLengthLimit(_: number);
  maxDuration: CMTime;
  metadata: AVMetadataItem[];
  setMetadata(_: AVMetadataItem[]);
  metadataItemFilter: AVMetadataItemFilter;
  setMetadataItemFilter(_: AVMetadataItemFilter);
  outputFileType: string;
  setOutputFileType(_: string);
  outputURL: URL;
  setOutputURL(_: URL);
  presetName: string;
  progress: number;
  shouldOptimizeForNetworkUse: boolean;
  setShouldOptimizeForNetworkUse(_: boolean);
  status: AVAssetExportSession.Status;
  supportedFileTypes: string[];
  timeRange: CMTimeRange;
  setTimeRange(_: CMTimeRange);
  videoComposition: AVVideoComposition;
  setVideoComposition(_: AVVideoComposition);
  cancelExport(): void;
  determineCompatibleFileTypes(completionHandler: (p1: string[]) => void): void;
  estimateMaximumDuration(completionHandler?: (p1: CMTime, p2: Error) => void): void;
  estimateOutputFileLength(completionHandler?: (p1: number, p2: Error) => void): void;
  exportAsynchronously(completionHandler: () => void): void;
  static createWithAssetWithPresetName(_: AVAsset, presetName: string): AVAssetExportSession;
}

export class AVAssetImageGenerator extends NSObject {
  apertureMode: string;
  setApertureMode(_: string);
  appliesPreferredTrackTransform: boolean;
  setAppliesPreferredTrackTransform(_: boolean);
  asset: AVAsset;
  customVideoCompositor: any;
  maximumSize: CGSize;
  setMaximumSize(_: CGSize);
  requestedTimeToleranceAfter: CMTime;
  setRequestedTimeToleranceAfter(_: CMTime);
  requestedTimeToleranceBefore: CMTime;
  setRequestedTimeToleranceBefore(_: CMTime);
  videoComposition: AVVideoComposition;
  setVideoComposition(_: AVVideoComposition);
  cancelAllCGImageGeneration(): void;
  copyCGImageAtTime(actualTime: CMTime, error?: CMTime): any;
  generateCGImagesAsynchronously(forTimes: NSValue[], completionHandler: (p1: CMTime, p2: any, p3: CMTime, p4: AVAssetImageGenerator.Result, p5: Error) => void): void;
  static createWithAsset(_: AVAsset): AVAssetImageGenerator;
}

export class AVAssetReader extends NSObject {
  static createWithAssetReaderWithAsset(error: AVAsset): AVAssetReader;
  asset: AVAsset;
  error: Error;
  outputs: AVAssetReaderOutput[];
  status: AVAssetReader.Status;
  timeRange: CMTimeRange;
  setTimeRange(_: CMTimeRange);
  add(_: AVAssetReaderOutput): void;
  canAdd(_: AVAssetReaderOutput): boolean;
  cancelReading(): void;
  static createWith(error: AVAsset): AVAssetReader;
  startReading(): boolean;
}

export class AVAssetReaderAudioMixOutput extends AVAssetReaderOutput {
  audioMix: AVAudioMix;
  setAudioMix(_: AVAudioMix);
  audioSettings: Map<string, any>;
  audioTimePitchAlgorithm: string;
  setAudioTimePitchAlgorithm(_: string);
  audioTracks: AVAssetTrack[];
  static createWithAudioTracksWithAudioSettings(_: AVAssetTrack[], audioSettings?: Map<string, any>): AVAssetReaderAudioMixOutput;
}

export class AVAssetReaderOutput extends NSObject {
  alwaysCopiesSampleData: boolean;
  setAlwaysCopiesSampleData(_: boolean);
  mediaType: string;
  supportsRandomAccess: boolean;
  setSupportsRandomAccess(_: boolean);
  copyNextSampleBuffer(): any;
  markConfigurationAsFinal(): void;
  reset(forReadingTimeRanges: NSValue[]): void;
}

export class AVAssetReaderOutputMetadataAdaptor extends NSObject {
  assetReaderTrackOutput: AVAssetReaderTrackOutput;
  static createWithAssetReaderTrackOutput(_: AVAssetReaderTrackOutput): AVAssetReaderOutputMetadataAdaptor;
  nextTimedMetadataGroup(): AVTimedMetadataGroup;
}

export class AVAssetReaderSampleReferenceOutput extends AVAssetReaderOutput {
  track: AVAssetTrack;
  static createWithTrack(_: AVAssetTrack): AVAssetReaderSampleReferenceOutput;
}

export class AVAssetReaderTrackOutput extends AVAssetReaderOutput {
  audioTimePitchAlgorithm: string;
  setAudioTimePitchAlgorithm(_: string);
  outputSettings: Map<string, any>;
  track: AVAssetTrack;
  static createWithTrackWithOutputSettings(_: AVAssetTrack, outputSettings?: Map<string, any>): AVAssetReaderTrackOutput;
}

export class AVAssetReaderVideoCompositionOutput extends AVAssetReaderOutput {
  customVideoCompositor: any;
  videoComposition: AVVideoComposition;
  setVideoComposition(_: AVVideoComposition);
  videoSettings: Map<string, any>;
  videoTracks: AVAssetTrack[];
  static createWithVideoTracksWithVideoSettings(_: AVAssetTrack[], videoSettings?: Map<string, any>): AVAssetReaderVideoCompositionOutput;
}

export class AVAssetResourceLoader extends NSObject {
  delegate: any;
  delegateQueue: NSObject;
  preloadsEligibleContentKeys: boolean;
  setPreloadsEligibleContentKeys(_: boolean);
  setDelegate(_?: any, queue?: NSObject): void;
}

interface AVAssetResourceLoaderDelegate {
  resourceLoader(_: AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource: AVAssetResourceLoadingRequest): boolean;
  resourceLoader(_: AVAssetResourceLoader, shouldWaitForRenewalOfRequestedResource: AVAssetResourceRenewalRequest): boolean;
  resourceLoader(_: AVAssetResourceLoader, didCancel: AVAssetResourceLoadingRequest): void;
  resourceLoader(_: AVAssetResourceLoader, shouldWaitForResponseTo: URLAuthenticationChallenge): boolean;
  resourceLoader(_: AVAssetResourceLoader, didCancel: URLAuthenticationChallenge): void;
}

export class AVAssetResourceLoadingContentInformationRequest extends NSObject {
  allowedContentTypes: string[];
  isByteRangeAccessSupported: boolean;
  setByteRangeAccessSupported(_: boolean);
  contentLength: number;
  setContentLength(_: number);
  contentType: string;
  setContentType(_: string);
  renewalDate: Date;
  setRenewalDate(_: Date);
}

export class AVAssetResourceLoadingDataRequest extends NSObject {
  currentOffset: number;
  requestedLength: number;
  requestedOffset: number;
  requestsAllDataToEndOfResource: boolean;
  respond(with_: Data): void;
}

export class AVAssetResourceLoadingRequest extends NSObject {
  isCancelled: boolean;
  contentInformationRequest: AVAssetResourceLoadingContentInformationRequest;
  dataRequest: AVAssetResourceLoadingDataRequest;
  isFinished: boolean;
  redirect: URLRequest;
  setRedirect(_: URLRequest);
  request: URLRequest;
  requestor: AVAssetResourceLoadingRequestor;
  response: URLResponse;
  setResponse(_: URLResponse);
  finishLoading(): void;
  finishLoading(with_?: Error): void;
  persistentContentKeyFromKeyVendorResponse(options: Data, error?: Map<string, any>): Data;
  streamingContentKeyRequestDataForApp(contentIdentifier: Data, options: Data, error?: Map<string, any>): Data;
}

export class AVAssetResourceLoadingRequestor extends NSObject {
  providesExpiredSessionReports: boolean;
}

export class AVAssetResourceRenewalRequest extends AVAssetResourceLoadingRequest {
}

export class AVAssetTrack extends NSObject {
  asset: AVAsset;
  availableMetadataFormats: string[];
  availableTrackAssociationTypes: string[];
  canProvideSampleCursors: boolean;
  commonMetadata: AVMetadataItem[];
  isDecodable: boolean;
  // @ts-ignore 
  isEnabled: boolean;
  estimatedDataRate: number;
  extendedLanguageTag: string;
  formatDescriptions: any[];
  hasAudioSampleDependencies: boolean;
  languageCode: string;
  mediaType: string;
  metadata: AVMetadataItem[];
  minFrameDuration: CMTime;
  naturalSize: CGSize;
  naturalTimeScale: number;
  nominalFrameRate: number;
  isPlayable: boolean;
  preferredTransform: CGAffineTransform;
  preferredVolume: number;
  requiresFrameReordering: boolean;
  segments: AVAssetTrackSegment[];
  isSelfContained: boolean;
  timeRange: CMTimeRange;
  totalSampleDataLength: number;
  trackID: number;
  associatedTracks(ofType: string): AVAssetTrack[];
  hasMediaCharacteristic(_: string): boolean;
  makeSampleCursorAtFirstSampleInDecodeOrder(): AVSampleCursor;
  makeSampleCursorAtLastSampleInDecodeOrder(): AVSampleCursor;
  makeSampleCursor(presentationTimeStamp: CMTime): AVSampleCursor;
  // dupe name w instance property   metadata(forFormat: string): AVMetadataItem[];
  samplePresentationTime(forTrackTime: CMTime): CMTime;
  segment(forTrackTime: CMTime): AVAssetTrackSegment;
}

export class AVAssetTrackGroup extends NSObject {
  trackIDs: number[];
}

export class AVAssetTrackSegment extends NSObject {
  isEmpty: boolean;
  timeMapping: CMTimeMapping;
}

export class AVAssetWriter extends NSObject {
  static createWithAssetWriterWithURLFileType(fileType: URL, error: string): AVAssetWriter;
  availableMediaTypes: string[];
  directoryForTemporaryFiles: URL;
  setDirectoryForTemporaryFiles(_: URL);
  error: Error;
  inputGroups: AVAssetWriterInputGroup[];
  inputs: AVAssetWriterInput[];
  metadata: AVMetadataItem[];
  setMetadata(_: AVMetadataItem[]);
  movieFragmentInterval: CMTime;
  setMovieFragmentInterval(_: CMTime);
  movieTimeScale: number;
  setMovieTimeScale(_: number);
  outputFileType: string;
  outputURL: URL;
  overallDurationHint: CMTime;
  setOverallDurationHint(_: CMTime);
  shouldOptimizeForNetworkUse: boolean;
  setShouldOptimizeForNetworkUse(_: boolean);
  status: AVAssetWriter.Status;
  add(_: AVAssetWriterInput): void;
  add(_: AVAssetWriterInputGroup): void;
  canAdd(_: AVAssetWriterInput): boolean;
  canAdd(_: AVAssetWriterInputGroup): boolean;
  canApply(outputSettings?: Map<string, any>, forMediaType?: string): boolean;
  cancelWriting(): void;
  endSession(atSourceTime: CMTime): void;
  finishWriting(completionHandler: () => void): void;
  startSession(atSourceTime: CMTime): void;
  startWriting(): boolean;
}

export class AVAssetWriterInput extends NSObject {
  canPerformMultiplePasses: boolean;
  currentPassDescription: AVAssetWriterInputPassDescription;
  expectsMediaDataInRealTime: boolean;
  setExpectsMediaDataInRealTime(_: boolean);
  extendedLanguageTag: string;
  setExtendedLanguageTag(_: string);
  languageCode: string;
  setLanguageCode(_: string);
  marksOutputTrackAsEnabled: boolean;
  setMarksOutputTrackAsEnabled(_: boolean);
  mediaDataLocation: string;
  setMediaDataLocation(_: string);
  mediaTimeScale: number;
  setMediaTimeScale(_: number);
  mediaType: string;
  metadata: AVMetadataItem[];
  setMetadata(_: AVMetadataItem[]);
  naturalSize: CGSize;
  setNaturalSize(_: CGSize);
  outputSettings: Map<string, any>;
  performsMultiPassEncodingIfSupported: boolean;
  setPerformsMultiPassEncodingIfSupported(_: boolean);
  preferredMediaChunkAlignment: number;
  setPreferredMediaChunkAlignment(_: number);
  preferredMediaChunkDuration: CMTime;
  setPreferredMediaChunkDuration(_: CMTime);
  preferredVolume: number;
  setPreferredVolume(_: number);
  isReadyForMoreMediaData: boolean;
  sampleReferenceBaseURL: URL;
  setSampleReferenceBaseURL(_: URL);
  sourceFormatHint: any;
  transform: CGAffineTransform;
  setTransform(_: CGAffineTransform);
  addTrackAssociation(withTrackOf: AVAssetWriterInput, type: string): void;
  append(_: any): boolean;
  canAddTrackAssociation(withTrackOf: AVAssetWriterInput, type: string): boolean;
  static createWithMediaTypeWithOutputSettings(_: string, outputSettings?: Map<string, any>): AVAssetWriterInput;
  static createWithMediaTypeWithOutputSettingsWithSourceFormatHint(_: string, outputSettings?: Map<string, any>, sourceFormatHint?: any): AVAssetWriterInput;
  markAsFinished(): void;
  markCurrentPassAsFinished(): void;
  requestMediaDataWhenReady(on: NSObject, using: () => void): void;
  respondToEachPassDescription(on: NSObject, using: () => void): void;
}

export class AVAssetWriterInputGroup extends AVMediaSelectionGroup {
  defaultInput: AVAssetWriterInput;
  inputs: AVAssetWriterInput[];
  static createWithInputsWithDefaultInput(_: AVAssetWriterInput[], defaultInput?: AVAssetWriterInput): AVAssetWriterInputGroup;
}

export class AVAssetWriterInputMetadataAdaptor extends NSObject {
  assetWriterInput: AVAssetWriterInput;
  append(_: AVTimedMetadataGroup): boolean;
  static createWithAssetWriterInput(_: AVAssetWriterInput): AVAssetWriterInputMetadataAdaptor;
}

export class AVAssetWriterInputPassDescription extends NSObject {
  sourceTimeRanges: NSValue[];
}

export class AVAssetWriterInputPixelBufferAdaptor extends NSObject {
  assetWriterInput: AVAssetWriterInput;
  pixelBufferPool: any;
  sourcePixelBufferAttributes: Map<string, any>;
  append(_: any, withPresentationTime: CMTime): boolean;
  static createWithAssetWriterInputWithSourcePixelBufferAttributes(_: AVAssetWriterInput, sourcePixelBufferAttributes?: Map<string, any>): AVAssetWriterInputPixelBufferAdaptor;
}

export class AVAsynchronousCIImageFilteringRequest extends NSObject {
  compositionTime: CMTime;
  renderSize: CGSize;
  sourceImage: CIImage;
  finish(with_: Error): void;
  finish(with_: CIImage, context?: CIContext): void;
}

interface AVAsynchronousKeyValueLoading {
  loadValuesAsynchronously(forKeys: string[], completionHandler?: () => void): void;
  statusOfValue(forKey: string): AVAsynchronousKeyValueLoading.AVKeyValueStatus;
}

export class AVAsynchronousVideoCompositionRequest extends NSObject {
  compositionTime: CMTime;
  renderContext: AVVideoCompositionRenderContext;
  sourceTrackIDs: number[];
  videoCompositionInstruction: any;
  finishCancelledRequest(): void;
  finish(withComposedVideoFrame: any): void;
  finish(with_: Error): void;
  sourceFrame(byTrackID: number): any;
}

interface AVAudio3DMixing {
  obstruction: number;
  setObstruction(_: number);
  occlusion: number;
  setOcclusion(_: number);
  pointSourceInHeadMode: AVAudioMixing.AVAudio3DMixingPointSourceInHeadMode;
  setPointSourceInHeadMode(_: AVAudioMixing.AVAudio3DMixingPointSourceInHeadMode);
  position: AVAudio3DPoint;
  setPosition(_: AVAudio3DPoint);
  rate: number;
  setRate(_: number);
  renderingAlgorithm: AVAudioMixing.AVAudio3DMixingRenderingAlgorithm;
  setRenderingAlgorithm(_: AVAudioMixing.AVAudio3DMixingRenderingAlgorithm);
  reverbBlend: number;
  setReverbBlend(_: number);
  sourceMode: AVAudioMixing.AVAudio3DMixingSourceMode;
  setSourceMode(_: AVAudioMixing.AVAudio3DMixingSourceMode);
}

export class AVAudioBuffer extends NSObject {
  audioBufferList: AudioBufferList;
  format: AVAudioFormat;
  mutableAudioBufferList: AudioBufferList;
}

export class AVAudioChannelLayout extends NSObject {
  channelCount: number;
  layout: AudioChannelLayout;
  layoutTag: number;
  static createWithLayout(_: AudioChannelLayout): AVAudioChannelLayout;
  static createWithLayoutTag(_: number): AVAudioChannelLayout;
}

export class AVAudioCompressedBuffer extends AVAudioBuffer {
  byteCapacity: number;
  byteLength: number;
  setByteLength(_: number);
  data: any;
  maximumPacketSize: number;
  packetCapacity: number;
  packetCount: number;
  setPacketCount(_: number);
  packetDescriptions: AudioStreamPacketDescription;
  static createWithFormatWithPacketCapacity(_: AVAudioFormat, packetCapacity: number): AVAudioCompressedBuffer;
  static createWithFormatWithPacketCapacityWithMaximumPacketSize(_: AVAudioFormat, packetCapacity: number, maximumPacketSize: number): AVAudioCompressedBuffer;
}

export class AVAudioConnectionPoint extends NSObject {
  bus: number;
  node: AVAudioNode;
  static createWithNodeWithBus(_: AVAudioNode, bus: number): AVAudioConnectionPoint;
}

export class AVAudioConverter extends NSObject {
  applicableEncodeBitRates: number[];
  applicableEncodeSampleRates: number[];
  availableEncodeBitRates: number[];
  availableEncodeChannelLayoutTags: number[];
  availableEncodeSampleRates: number[];
  bitRate: number;
  setBitRate(_: number);
  bitRateStrategy: string;
  setBitRateStrategy(_: string);
  channelMap: number[];
  setChannelMap(_: number[]);
  dither: boolean;
  setDither(_: boolean);
  downmix: boolean;
  setDownmix(_: boolean);
  inputFormat: AVAudioFormat;
  magicCookie: Data;
  setMagicCookie(_: Data);
  maximumOutputPacketSize: number;
  outputFormat: AVAudioFormat;
  primeInfo: AVAudioConverterPrimeInfo;
  setPrimeInfo(_: AVAudioConverterPrimeInfo);
  primeMethod: AVAudioConverter.AVAudioConverterPrimeMethod;
  setPrimeMethod(_: AVAudioConverter.AVAudioConverterPrimeMethod);
  sampleRateConverterAlgorithm: string;
  setSampleRateConverterAlgorithm(_: string);
  sampleRateConverterQuality: number;
  setSampleRateConverterQuality(_: number);
  convert(to: AVAudioBuffer, error?: Error, withInputFrom?: (p1: number, p2: AVAudioConverter.AVAudioConverterInputStatus) => AVAudioBuffer): AVAudioConverter.AVAudioConverterOutputStatus;
  convertToBuffer(fromBuffer: AVAudioPCMBuffer, error: AVAudioPCMBuffer): boolean;
  static createWithFromFormatWithToFormat(_: AVAudioFormat, toFormat: AVAudioFormat): AVAudioConverter;
  reset(): void;
}

export class AVAudioEngine extends NSObject {
  attachedNodes: Set<any>;
  isAutoShutdownEnabled: boolean;
  setAutoShutdownEnabled(_: boolean);
  inputNode: AVAudioInputNode;
  isInManualRenderingMode: boolean;
  mainMixerNode: AVAudioMixerNode;
  manualRenderingBlock: (p1: number, p2: AudioBufferList, p3: number) => AVAudioEngine.AVAudioEngineManualRenderingStatus;
  manualRenderingFormat: AVAudioFormat;
  manualRenderingMaximumFrameCount: number;
  manualRenderingMode: AVAudioEngine.AVAudioEngineManualRenderingMode;
  manualRenderingSampleTime: number;
  musicSequence: any;
  setMusicSequence(_: any);
  outputNode: AVAudioOutputNode;
  isRunning: boolean;
  attach(_: AVAudioNode): void;
  connect(_: AVAudioNode, to: AVAudioNode, format?: AVAudioFormat): void;
  connect(_: AVAudioNode, to: AVAudioNode, fromBus: number, toBus: number, format?: AVAudioFormat): void;
  connect(_: AVAudioNode, to: AVAudioConnectionPoint[], fromBus: number, format?: AVAudioFormat): void;
  connectMIDI(_: AVAudioNode, to: AVAudioNode, format?: AVAudioFormat, block?: (p1: number, p2: number, p3: number, p4: string) => number): void;
  connectMIDI(_: AVAudioNode, to: AVAudioNode[], format?: AVAudioFormat, block?: (p1: number, p2: number, p3: number, p4: string) => number): void;
  detach(_: AVAudioNode): void;
  disableManualRenderingMode(): void;
  disconnectMIDI(_: AVAudioNode, from: AVAudioNode): void;
  disconnectMIDI(_: AVAudioNode, from: AVAudioNode[]): void;
  disconnectMIDIInput(_: AVAudioNode): void;
  disconnectMIDIOutput(_: AVAudioNode): void;
  disconnectNodeInput(_: AVAudioNode): void;
  disconnectNodeInput(_: AVAudioNode, bus: number): void;
  disconnectNodeOutput(_: AVAudioNode): void;
  disconnectNodeOutput(_: AVAudioNode, bus: number): void;
  enableManualRenderingMode(format: AVAudioEngine.AVAudioEngineManualRenderingMode, maximumFrameCount: AVAudioFormat, error: number): boolean;
  inputConnectionPoint(for_: AVAudioNode, inputBus: number): AVAudioConnectionPoint;
  outputConnectionPoints(for_: AVAudioNode, outputBus: number): AVAudioConnectionPoint[];
  pause(): void;
  prepare(): void;
  renderOffline(toBuffer: number, error: AVAudioPCMBuffer): AVAudioEngine.AVAudioEngineManualRenderingStatus;
  reset(): void;
  startAndReturnError(): boolean;
  stop(): void;
}

export class AVAudioEnvironmentDistanceAttenuationParameters extends NSObject {
  distanceAttenuationModel: AVAudioEnvironmentNode.AVAudioEnvironmentDistanceAttenuationModel;
  setDistanceAttenuationModel(_: AVAudioEnvironmentNode.AVAudioEnvironmentDistanceAttenuationModel);
  maximumDistance: number;
  setMaximumDistance(_: number);
  referenceDistance: number;
  setReferenceDistance(_: number);
  rolloffFactor: number;
  setRolloffFactor(_: number);
}

export class AVAudioEnvironmentNode extends AVAudioNode {
  applicableRenderingAlgorithms: number[];
  distanceAttenuationParameters: AVAudioEnvironmentDistanceAttenuationParameters;
  listenerAngularOrientation: AVAudio3DAngularOrientation;
  setListenerAngularOrientation(_: AVAudio3DAngularOrientation);
  listenerPosition: AVAudio3DPoint;
  setListenerPosition(_: AVAudio3DPoint);
  listenerVectorOrientation: AVAudio3DVectorOrientation;
  setListenerVectorOrientation(_: AVAudio3DVectorOrientation);
  nextAvailableInputBus: number;
  outputType: AVAudioEnvironmentNode.AVAudioEnvironmentOutputType;
  setOutputType(_: AVAudioEnvironmentNode.AVAudioEnvironmentOutputType);
  outputVolume: number;
  setOutputVolume(_: number);
  reverbParameters: AVAudioEnvironmentReverbParameters;
}

export class AVAudioEnvironmentReverbParameters extends NSObject {
  enable: boolean;
  setEnable(_: boolean);
  filterParameters: AVAudioUnitEQFilterParameters;
  level: number;
  setLevel(_: number);
  loadFactoryReverbPreset(_: AVAudioUnitReverb.AVAudioUnitReverbPreset): void;
}

export class AVAudioFile extends NSObject {
  fileFormat: AVAudioFormat;
  framePosition: number;
  setFramePosition(_: number);
  length: number;
  processingFormat: AVAudioFormat;
  url: URL;
  static createWithForReadingWithCommonFormat(commonFormat: URL, interleaved: AVAudioFormat.AVAudioCommonFormat, error: boolean): AVAudioFile;
  static createWith(error: URL): AVAudioFile;
  static createWithForWritingWithSettingsWithCommonFormat(settings: URL, commonFormat: Map<string, any>, interleaved: AVAudioFormat.AVAudioCommonFormat, error: boolean): AVAudioFile;
  static createWithForWriting(settings: URL, error: Map<string, any>): AVAudioFile;
  readIntoBuffer(error: AVAudioPCMBuffer): boolean;
  readIntoBuffer(frameCount: AVAudioPCMBuffer, error: number): boolean;
  writeFromBuffer(error: AVAudioPCMBuffer): boolean;
}

export class AVAudioFormat extends NSObject {
  channelCount: number;
  channelLayout: AVAudioChannelLayout;
  commonFormat: AVAudioFormat.AVAudioCommonFormat;
  formatDescription: any;
  isInterleaved: boolean;
  magicCookie: Data;
  setMagicCookie(_: Data);
  sampleRate: number;
  settings: Map<string, any>;
  isStandard: boolean;
  streamDescription: AudioStreamBasicDescription;
  static createWithStandardFormatWithSampleRateWithChannelLayout(_: number, channelLayout: AVAudioChannelLayout): AVAudioFormat;
  static createWithStandardFormatWithSampleRateWithChannels(_: number, channels: number): AVAudioFormat;
  static createWithCmAudioFormatDescription(_: any): AVAudioFormat;
  static createWithCommonFormatWithSampleRateWithChannelsWithInterleaved(_: AVAudioFormat.AVAudioCommonFormat, sampleRate: number, channels: number, interleaved: boolean): AVAudioFormat;
  static createWithCommonFormatWithSampleRateWithInterleavedWithChannelLayout(_: AVAudioFormat.AVAudioCommonFormat, sampleRate: number, interleaved: boolean, channelLayout: AVAudioChannelLayout): AVAudioFormat;
  static createWithSettings(_: Map<string, any>): AVAudioFormat;
  static createWithStreamDescription(_: AudioStreamBasicDescription): AVAudioFormat;
  static createWithStreamDescriptionWithChannelLayout(_: AudioStreamBasicDescription, channelLayout?: AVAudioChannelLayout): AVAudioFormat;
}

export class AVAudioIONode extends AVAudioNode {
  audioUnit: ComponentInstanceRecord;
  presentationLatency: number;
  isVoiceProcessingEnabled: boolean;
  setVoiceProcessingEnabled(error: boolean): boolean;
}

export class AVAudioInputNode extends AVAudioIONode {
  isVoiceProcessingAGCEnabled: boolean;
  setVoiceProcessingAGCEnabled(_: boolean);
  isVoiceProcessingBypassed: boolean;
  setVoiceProcessingBypassed(_: boolean);
  isVoiceProcessingInputMuted: boolean;
  setVoiceProcessingInputMuted(_: boolean);
  setManualRenderingInputPCMFormat(_: AVAudioFormat, inputBlock: (p1: number) => AudioBufferList): boolean;
}

export class AVAudioMix extends NSObject {
  inputParameters: AVAudioMixInputParameters[];
}

export class AVAudioMixInputParameters extends NSObject {
  audioTapProcessor: any;
  audioTimePitchAlgorithm: string;
  trackID: number;
  getVolumeRamp(for_: CMTime, startVolume?: number, endVolume?: number, timeRange?: CMTimeRange): boolean;
}

export class AVAudioMixerNode extends AVAudioNode {
  nextAvailableInputBus: number;
  outputVolume: number;
  setOutputVolume(_: number);
}

interface AVAudioMixing {
  volume: number;
  setVolume(_: number);
  destination(forMixer: AVAudioNode, bus: number): AVAudioMixingDestination;
}

export class AVAudioMixingDestination extends NSObject {
  connectionPoint: AVAudioConnectionPoint;
}

export class AVAudioNode extends NSObject {
  AUAudioUnit: AUAudioUnit;
  engine: AVAudioEngine;
  lastRenderTime: AVAudioTime;
  latency: number;
  numberOfInputs: number;
  numberOfOutputs: number;
  outputPresentationLatency: number;
  inputFormat(forBus: number): AVAudioFormat;
  installTap(onBus: number, bufferSize: number, format?: AVAudioFormat, block?: (p1: AVAudioPCMBuffer, p2: AVAudioTime) => void): void;
  name(forInputBus: number): string;
  name(forOutputBus: number): string;
  outputFormat(forBus: number): AVAudioFormat;
  removeTap(onBus: number): void;
  reset(): void;
}

export class AVAudioOutputNode extends AVAudioIONode {
}

export class AVAudioPCMBuffer extends AVAudioBuffer {
  floatChannelData: number;
  frameCapacity: number;
  frameLength: number;
  setFrameLength(_: number);
  int16ChannelData: number;
  int32ChannelData: number;
  stride: number;
  static createWithPcmFormatWithFrameCapacity(_: AVAudioFormat, frameCapacity: number): AVAudioPCMBuffer;
}

export class AVAudioPlayer extends NSObject {
  currentDevice: string;
  setCurrentDevice(_: string);
  currentTime: number;
  setCurrentTime(_: number);
  data: Data;
  delegate: any;
  setDelegate(_: any);
  deviceCurrentTime: number;
  duration: number;
  enableRate: boolean;
  setEnableRate(_: boolean);
  format: AVAudioFormat;
  isMeteringEnabled: boolean;
  setMeteringEnabled(_: boolean);
  numberOfChannels: number;
  numberOfLoops: number;
  setNumberOfLoops(_: number);
  pan: number;
  setPan(_: number);
  isPlaying: boolean;
  rate: number;
  setRate(_: number);
  settings: Map<string, any>;
  url: URL;
  volume: number;
  setVolume(_: number);
  averagePower(forChannel: number): number;
  static createWith(error: URL): AVAudioPlayer;
  static createWithContentsOf(fileTypeHint: URL, error?: string): AVAudioPlayer;
  static createWith(error: Data): AVAudioPlayer;
  static createWithData(fileTypeHint: Data, error?: string): AVAudioPlayer;
  pause(): void;
  peakPower(forChannel: number): number;
  play(): boolean;
  play(atTime: number): boolean;
  prepareToPlay(): boolean;
  setVolume(_: number, fadeDuration: number): void;
  stop(): void;
  updateMeters(): void;
}

interface AVAudioPlayerDelegate {
  audioPlayerDecodeErrorDidOccur(_: AVAudioPlayer, error?: Error): void;
  audioPlayerDidFinishPlaying(_: AVAudioPlayer, successfully: boolean): void;
}

export class AVAudioPlayerNode extends AVAudioNode {
  isPlaying: boolean;
  nodeTime(forPlayerTime: AVAudioTime): AVAudioTime;
  pause(): void;
  play(): void;
  play(at?: AVAudioTime): void;
  playerTime(forNodeTime: AVAudioTime): AVAudioTime;
  prepare(withFrameCount: number): void;
  scheduleBuffer(_: AVAudioPCMBuffer, at?: AVAudioTime, options?: AVAudioPlayerNode.AVAudioPlayerNodeBufferOptions, completionCallbackType?: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType) => void): void;
  scheduleBuffer(_: AVAudioPCMBuffer, at?: AVAudioTime, options?: AVAudioPlayerNode.AVAudioPlayerNodeBufferOptions, completionHandler?: () => void): void;
  scheduleBuffer(_: AVAudioPCMBuffer, completionCallbackType: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType) => void): void;
  scheduleBuffer(_: AVAudioPCMBuffer, completionHandler?: () => void): void;
  scheduleFile(_: AVAudioFile, at?: AVAudioTime, completionCallbackType?: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType) => void): void;
  scheduleFile(_: AVAudioFile, at?: AVAudioTime, completionHandler?: () => void): void;
  scheduleSegment(_: AVAudioFile, startingFrame: number, frameCount: number, at?: AVAudioTime, completionCallbackType?: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNode.AVAudioPlayerNodeCompletionCallbackType) => void): void;
  scheduleSegment(_: AVAudioFile, startingFrame: number, frameCount: number, at?: AVAudioTime, completionHandler?: () => void): void;
  stop(): void;
}

export class AVAudioRecorder extends NSObject {
  currentTime: number;
  delegate: any;
  setDelegate(_: any);
  deviceCurrentTime: number;
  format: AVAudioFormat;
  isMeteringEnabled: boolean;
  setMeteringEnabled(_: boolean);
  isRecording: boolean;
  settings: Map<string, any>;
  url: URL;
  averagePower(forChannel: number): number;
  deleteRecording(): boolean;
  static createWithUrl(format: URL, error: AVAudioFormat): AVAudioRecorder;
  static createWithUrl(settings: URL, error: Map<string, any>): AVAudioRecorder;
  pause(): void;
  peakPower(forChannel: number): number;
  prepareToRecord(): boolean;
  record(): boolean;
  record(atTime: number): boolean;
  record(atTime: number, forDuration: number): boolean;
  record(forDuration: number): boolean;
  stop(): void;
  updateMeters(): void;
}

interface AVAudioRecorderDelegate {
  audioRecorderDidFinishRecording(_: AVAudioRecorder, successfully: boolean): void;
  audioRecorderEncodeErrorDidOccur(_: AVAudioRecorder, error?: Error): void;
}

export class AVAudioSequencer extends NSObject {
  currentPositionInBeats: number;
  setCurrentPositionInBeats(_: number);
  currentPositionInSeconds: number;
  setCurrentPositionInSeconds(_: number);
  isPlaying: boolean;
  rate: number;
  setRate(_: number);
  tempoTrack: AVMusicTrack;
  tracks: AVMusicTrack[];
  userInfo: Map<string, any>;
  beats(forHostTime: number): number;
  beats(forSeconds: number): number;
  data(withSMPTEResolution: number): Data;
  hostTime(forBeats: number): number;
  static createWithAudioEngine(_: AVAudioEngine): AVAudioSequencer;
  loadFromData(options: Data, error: AVAudioSequencer.AVMusicSequenceLoadOptions): boolean;
  loadFromURL(options: URL, error: AVAudioSequencer.AVMusicSequenceLoadOptions): boolean;
  prepareToPlay(): void;
  seconds(forBeats: number): number;
  startAndReturnError(): boolean;
  stop(): void;
  writeToURL(SMPTEResolution: URL, replaceExisting: number, error: boolean): boolean;
}

export class AVAudioSession extends NSObject {
}

export class AVAudioSessionChannelDescription extends NSObject {
}

export class AVAudioSessionDataSourceDescription extends NSObject {
}

interface AVAudioSessionDelegate {
}

export class AVAudioSessionPortDescription extends NSObject {
}

export class AVAudioSessionRouteDescription extends NSObject {
}

export class AVAudioSinkNode extends AVAudioNode {
  static createWithReceiverBlock(_: (p1: AudioTimeStamp, p2: number, p3: AudioBufferList) => number): AVAudioSinkNode;
}

export class AVAudioSourceNode extends AVAudioNode {
  static createWithFormatWithRenderBlock(_: AVAudioFormat, renderBlock: (p1: boolean, p2: AudioTimeStamp, p3: number, p4: AudioBufferList) => number): AVAudioSourceNode;
  static createWithRenderBlock(_: (p1: boolean, p2: AudioTimeStamp, p3: number, p4: AudioBufferList) => number): AVAudioSourceNode;
}

interface AVAudioStereoMixing {
  pan: number;
  setPan(_: number);
}

export class AVAudioTime extends NSObject {
  //  static hostTime(forSeconds: number): number;
  static seconds(forHostTime: number): number;
  audioTimeStamp: AudioTimeStamp;
  hostTime: number;
  isHostTimeValid: boolean;
  sampleRate: number;
  sampleTime: number;
  isSampleTimeValid: boolean;
  extrapolateTime(fromAnchor: AVAudioTime): AVAudioTime;
  static createWithAudioTimeStampWithSampleRate(_: AudioTimeStamp, sampleRate: number): AVAudioTime;
  static createWithHostTime(_: number): AVAudioTime;
  static createWithHostTimeWithSampleTimeWithAtRate(_: number, sampleTime: number, atRate: number): AVAudioTime;
  static createWithSampleTimeWithAtRate(_: number, atRate: number): AVAudioTime;
}

export class AVAudioUnit extends AVAudioNode {
  static instantiate(with_: AudioComponentDescription, options: AudioComponent.AudioComponentInstantiationOptions, completionHandler?: (p1: AVAudioUnit, p2: Error) => void): void;
  audioComponentDescription: AudioComponentDescription;
  audioUnit: ComponentInstanceRecord;
  manufacturerName: string;
  loadAudioUnitPresetAtURL(error: URL): boolean;
}

export class AVAudioUnitComponent extends NSObject {
  allTagNames: string[];
  audioComponent: any;
  audioComponentDescription: AudioComponentDescription;
  availableArchitectures: number[];
  configurationDictionary: Map<string, any>;
  hasCustomView: boolean;
  hasMIDIInput: boolean;
  hasMIDIOutput: boolean;
  icon: NSImage;
  iconURL: URL;
  localizedTypeName: string;
  manufacturerName: string;
  name: string;
  passesAUVal: boolean;
  isSandboxSafe: boolean;
  typeName: string;
  userTagNames: string[];
  setUserTagNames(_: string[]);
  versionString: string;
  supportsNumberInputChannels(_: number, outputChannels: number): boolean;
}

export class AVAudioUnitComponentManager extends NSObject {
  static createWithSharedAudioUnitComponentManager(): AVAudioUnitComponentManager;
  standardLocalizedTagNames: string[];
  tagNames: string[];
  components(matching: AudioComponentDescription): AVAudioUnitComponent[];
  components(matching: NSPredicate): AVAudioUnitComponent[];
  components(passingTest: (p1: AVAudioUnitComponent, p2: boolean) => boolean): AVAudioUnitComponent[];
}

export class AVAudioUnitDelay extends AVAudioUnitEffect {
  delayTime: number;
  setDelayTime(_: number);
  feedback: number;
  setFeedback(_: number);
  lowPassCutoff: number;
  setLowPassCutoff(_: number);
  wetDryMix: number;
  setWetDryMix(_: number);
}

export class AVAudioUnitDistortion extends AVAudioUnitEffect {
  preGain: number;
  setPreGain(_: number);
  wetDryMix: number;
  setWetDryMix(_: number);
  loadFactoryPreset(_: AVAudioUnitDistortion.AVAudioUnitDistortionPreset): void;
}

export class AVAudioUnitEQ extends AVAudioUnitEffect {
  bands: AVAudioUnitEQFilterParameters[];
  globalGain: number;
  setGlobalGain(_: number);
  static createWithNumberOfBands(_: number): AVAudioUnitEQ;
}

export class AVAudioUnitEQFilterParameters extends NSObject {
  bandwidth: number;
  setBandwidth(_: number);
  bypass: boolean;
  setBypass(_: boolean);
  filterType: AVAudioUnitEQ.AVAudioUnitEQFilterType;
  setFilterType(_: AVAudioUnitEQ.AVAudioUnitEQFilterType);
  frequency: number;
  setFrequency(_: number);
  gain: number;
  setGain(_: number);
}

export class AVAudioUnitEffect extends AVAudioUnit {
  bypass: boolean;
  setBypass(_: boolean);
  static createWithAudioComponentDescription(_: AudioComponentDescription): AVAudioUnitEffect;
}

export class AVAudioUnitGenerator extends AVAudioUnit {
  bypass: boolean;
  setBypass(_: boolean);
  static createWithAudioComponentDescription(_: AudioComponentDescription): AVAudioUnitGenerator;
}

export class AVAudioUnitMIDIInstrument extends AVAudioUnit {
  static createWithAudioComponentDescription(_: AudioComponentDescription): AVAudioUnitMIDIInstrument;
  sendController(_: number, withValue: number, onChannel: number): void;
  sendMIDIEvent(_: number, data1: number): void;
  sendMIDIEvent(_: number, data1: number, data2: number): void;
  sendMIDISysExEvent(_: Data): void;
  sendPitchBend(_: number, onChannel: number): void;
  sendPressure(_: number, onChannel: number): void;
  sendPressure(forKey: number, withValue: number, onChannel: number): void;
  sendProgramChange(_: number, bankMSB: number, bankLSB: number, onChannel: number): void;
  sendProgramChange(_: number, onChannel: number): void;
  startNote(_: number, withVelocity: number, onChannel: number): void;
  stopNote(_: number, onChannel: number): void;
}

export class AVAudioUnitReverb extends AVAudioUnitEffect {
  wetDryMix: number;
  setWetDryMix(_: number);
  loadFactoryPreset(_: AVAudioUnitReverb.AVAudioUnitReverbPreset): void;
}

export class AVAudioUnitSampler extends AVAudioUnitMIDIInstrument {
  globalTuning: number;
  setGlobalTuning(_: number);
  masterGain: number;
  setMasterGain(_: number);
  stereoPan: number;
  setStereoPan(_: number);
  loadAudioFilesAtURLs(error: URL[]): boolean;
  loadInstrumentAtURL(error: URL): boolean;
  loadSoundBankInstrumentAtURL(program: URL, bankMSB: number, bankLSB: number, error: number): boolean;
}

export class AVAudioUnitTimeEffect extends AVAudioUnit {
  bypass: boolean;
  setBypass(_: boolean);
  static createWithAudioComponentDescription(_: AudioComponentDescription): AVAudioUnitTimeEffect;
}

export class AVAudioUnitTimePitch extends AVAudioUnitTimeEffect {
  overlap: number;
  setOverlap(_: number);
  pitch: number;
  setPitch(_: number);
  rate: number;
  setRate(_: number);
}

export class AVAudioUnitVarispeed extends AVAudioUnitTimeEffect {
  rate: number;
  setRate(_: number);
}

export class AVCameraCalibrationData extends NSObject {
  extrinsicMatrix: simd_float4x3;
  intrinsicMatrix: simd_float3x3;
  intrinsicMatrixReferenceDimensions: CGSize;
  inverseLensDistortionLookupTable: Data;
  lensDistortionCenter: CGPoint;
  lensDistortionLookupTable: Data;
  pixelSize: number;
}

export class AVCaptureAudioChannel extends NSObject {
  averagePowerLevel: number;
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  peakHoldLevel: number;
  volume: number;
  setVolume(_: number);
}

export class AVCaptureAudioDataOutput extends AVCaptureOutput {
  audioSettings: Map<string, any>;
  setAudioSettings(_: Map<string, any>);
  sampleBufferCallbackQueue: NSObject;
  sampleBufferDelegate: any;
  recommendedAudioSettingsForAssetWriter(writingTo: string): Map<any, any>;
  setSampleBufferDelegate(_?: any, queue?: NSObject): void;
}

interface AVCaptureAudioDataOutputSampleBufferDelegate {
  captureOutput(_: AVCaptureOutput, didOutput: any, from: AVCaptureConnection): void;
}

export class AVCaptureAudioFileOutput extends AVCaptureFileOutput {
  static availableOutputFileTypes(): string[];
  audioSettings: Map<string, any>;
  setAudioSettings(_: Map<string, any>);
  metadata: AVMetadataItem[];
  setMetadata(_: AVMetadataItem[]);
  // @ts-ignore 
  startRecording(to: URL, outputFileType: string, recordingDelegate: any): void;
}

export class AVCaptureAudioPreviewOutput extends AVCaptureOutput {
  outputDeviceUniqueID: string;
  setOutputDeviceUniqueID(_: string);
  volume: number;
  setVolume(_: number);
}

export class AVCaptureAutoExposureBracketedStillImageSettings extends AVCaptureBracketedStillImageSettings {
  static createWithAutoExposureSettingsWithExposureTargetBias(exposureTargetBias: number): AVCaptureAutoExposureBracketedStillImageSettings;
  exposureTargetBias: number;
}

export class AVCaptureBracketedStillImageSettings extends NSObject {
}

export class AVCaptureConnection extends NSObject {
  isActive: boolean;
  audioChannels: AVCaptureAudioChannel[];
  automaticallyAdjustsVideoMirroring: boolean;
  setAutomaticallyAdjustsVideoMirroring(_: boolean);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  inputPorts: AVCaptureInput.Port[];
  output: AVCaptureOutput;
  isVideoFieldModeSupported: boolean;
  isVideoMaxFrameDurationSupported: boolean;
  isVideoMinFrameDurationSupported: boolean;
  isVideoMirroringSupported: boolean;
  isVideoOrientationSupported: boolean;
  videoFieldMode: AVCaptureSession.AVVideoFieldMode;
  setVideoFieldMode(_: AVCaptureSession.AVVideoFieldMode);
  videoMaxFrameDuration: CMTime;
  setVideoMaxFrameDuration(_: CMTime);
  videoMinFrameDuration: CMTime;
  setVideoMinFrameDuration(_: CMTime);
  isVideoMirrored: boolean;
  setVideoMirrored(_: boolean);
  videoOrientation: AVCaptureSession.AVCaptureVideoOrientation;
  setVideoOrientation(_: AVCaptureSession.AVCaptureVideoOrientation);
  videoPreviewLayer: AVCaptureVideoPreviewLayer;
  static createWithInputPortWithVideoPreviewLayer(_: AVCaptureInput.Port, videoPreviewLayer: AVCaptureVideoPreviewLayer): AVCaptureConnection;
  static createWithInputPortsWithOutput(_: AVCaptureInput.Port[], output: AVCaptureOutput): AVCaptureConnection;
}

export class AVCaptureDataOutputSynchronizer extends NSObject {
  dataOutputs: AVCaptureOutput[];
  delegate: any;
  delegateCallbackQueue: NSObject;
  static createWithDataOutputs(_: AVCaptureOutput[]): AVCaptureDataOutputSynchronizer;
  setDelegate(_?: any, queue?: NSObject): void;
}

interface AVCaptureDataOutputSynchronizerDelegate {
  dataOutputSynchronizer(_: AVCaptureDataOutputSynchronizer, didOutput: AVCaptureSynchronizedDataCollection): void;
}

export class AVCaptureDepthDataOutput extends AVCaptureOutput {
  alwaysDiscardsLateDepthData: boolean;
  setAlwaysDiscardsLateDepthData(_: boolean);
  delegate: any;
  delegateCallbackQueue: NSObject;
  isFilteringEnabled: boolean;
  setFilteringEnabled(_: boolean);
  setDelegate(_?: any, callbackQueue?: NSObject): void;
}

interface AVCaptureDepthDataOutputDelegate {
  depthDataOutput(_: AVCaptureDepthDataOutput, didOutput: AVDepthData, timestamp: CMTime, connection: AVCaptureConnection): void;
  depthDataOutput(_: AVCaptureDepthDataOutput, didDrop: AVDepthData, timestamp: CMTime, connection: AVCaptureConnection, reason: AVCaptureOutputBase.AVCaptureOutput.DataDroppedReason): void;
}

export class AVCaptureDevice extends NSObject {
  static authorizationStatus(for_: string): AVCaptureDevice.AVAuthorizationStatus;
  static default(_: string, for_?: string, position?: AVCaptureDevice.Position): AVCaptureDevice;
  static default(for_: string): AVCaptureDevice;
  static requestAccess(for_: string, completionHandler: (p1: boolean) => void): void;
  activeColorSpace: AVCaptureDevice.AVCaptureColorSpace;
  setActiveColorSpace(_: AVCaptureDevice.AVCaptureColorSpace);
  activeFormat: AVCaptureDevice.Format;
  setActiveFormat(_: AVCaptureDevice.Format);
  activeInputSource: AVCaptureDevice.InputSource;
  setActiveInputSource(_: AVCaptureDevice.InputSource);
  activeVideoMaxFrameDuration: CMTime;
  setActiveVideoMaxFrameDuration(_: CMTime);
  activeVideoMinFrameDuration: CMTime;
  setActiveVideoMinFrameDuration(_: CMTime);
  isAdjustingExposure: boolean;
  isAdjustingFocus: boolean;
  isAdjustingWhiteBalance: boolean;
  isConnected: boolean;
  deviceType: string;
  exposureMode: AVCaptureDevice.ExposureMode;
  setExposureMode(_: AVCaptureDevice.ExposureMode);
  exposurePointOfInterest: CGPoint;
  setExposurePointOfInterest(_: CGPoint);
  isExposurePointOfInterestSupported: boolean;
  isFlashAvailable: boolean;
  flashMode: AVCaptureDevice.FlashMode;
  setFlashMode(_: AVCaptureDevice.FlashMode);
  focusMode: AVCaptureDevice.FocusMode;
  setFocusMode(_: AVCaptureDevice.FocusMode);
  focusPointOfInterest: CGPoint;
  setFocusPointOfInterest(_: CGPoint);
  isFocusPointOfInterestSupported: boolean;
  formats: AVCaptureDevice.Format[];
  hasFlash: boolean;
  hasTorch: boolean;
  isInUseByAnotherApplication: boolean;
  inputSources: AVCaptureDevice.InputSource[];
  linkedDevices: AVCaptureDevice[];
  localizedName: string;
  manufacturer: string;
  modelID: string;
  position: AVCaptureDevice.Position;
  isSuspended: boolean;
  isTorchActive: boolean;
  isTorchAvailable: boolean;
  torchLevel: number;
  torchMode: AVCaptureDevice.TorchMode;
  setTorchMode(_: AVCaptureDevice.TorchMode);
  transportControlsPlaybackMode: AVCaptureDevice.TransportControlsPlaybackMode;
  transportControlsSpeed: number;
  transportControlsSupported: boolean;
  transportType: number;
  uniqueID: string;
  whiteBalanceMode: AVCaptureDevice.WhiteBalanceMode;
  setWhiteBalanceMode(_: AVCaptureDevice.WhiteBalanceMode);
  hasMediaType(_: string): boolean;
  isExposureModeSupported(_: AVCaptureDevice.ExposureMode): boolean;
  isFlashModeSupported(_: AVCaptureDevice.FlashMode): boolean;
  isFocusModeSupported(_: AVCaptureDevice.FocusMode): boolean;
  isTorchModeSupported(_: AVCaptureDevice.TorchMode): boolean;
  isWhiteBalanceModeSupported(_: AVCaptureDevice.WhiteBalanceMode): boolean;
  lockForConfiguration(): boolean;
  setTorchModeOn(level: number): boolean;
  setTransportControlsPlaybackMode(_: AVCaptureDevice.TransportControlsPlaybackMode, speed: number): void;
  supportsSessionPreset(_: string): boolean;
  unlockForConfiguration(): void;
}

export class AVCaptureDeviceInput extends AVCaptureInput {
  static createWithDeviceInputWithDevice(error: AVCaptureDevice): AVCaptureDeviceInput;
  device: AVCaptureDevice;
  static createWith(error: AVCaptureDevice): AVCaptureDeviceInput;
}

export class AVCaptureFileOutput extends AVCaptureOutput {
  delegate: any;
  setDelegate(_: any);
  maxRecordedDuration: CMTime;
  setMaxRecordedDuration(_: CMTime);
  maxRecordedFileSize: number;
  setMaxRecordedFileSize(_: number);
  minFreeDiskSpaceLimit: number;
  setMinFreeDiskSpaceLimit(_: number);
  outputFileURL: URL;
  recordedDuration: CMTime;
  recordedFileSize: number;
  isRecording: boolean;
  isRecordingPaused: boolean;
  pauseRecording(): void;
  resumeRecording(): void;
  startRecording(to: URL, recordingDelegate: any): void;
  stopRecording(): void;
}

interface AVCaptureFileOutputDelegate {
  fileOutput(_: AVCaptureFileOutput, didOutputSampleBuffer: any, from: AVCaptureConnection): void;
  fileOutputShouldProvideSampleAccurateRecordingStart(_: AVCaptureOutput): boolean;
}

interface AVCaptureFileOutputRecordingDelegate {
  fileOutput(_: AVCaptureFileOutput, didStartRecordingTo: URL, from: AVCaptureConnection[]): void;
  fileOutput(_: AVCaptureFileOutput, didPauseRecordingTo: URL, from: AVCaptureConnection[]): void;
  fileOutput(_: AVCaptureFileOutput, didResumeRecordingTo: URL, from: AVCaptureConnection[]): void;
  fileOutput(_: AVCaptureFileOutput, willFinishRecordingTo: URL, from: AVCaptureConnection[], error?: Error): void;
  fileOutput(_: AVCaptureFileOutput, didFinishRecordingTo: URL, from: AVCaptureConnection[], error?: Error): void;
}

export class AVCaptureInput extends NSObject {
  ports: AVCaptureInput.Port[];
}

export class AVCaptureManualExposureBracketedStillImageSettings extends AVCaptureBracketedStillImageSettings {
  static createWithManualExposureSettingsWithExposureDurationWithISO(exposureDuration: CMTime, iso: number): AVCaptureManualExposureBracketedStillImageSettings;
  ISO: number;
  exposureDuration: CMTime;
}

export class AVCaptureMetadataInput extends AVCaptureInput {
  appendTimedMetadataGroup(error: AVTimedMetadataGroup): boolean;
  static createWithFormatDescriptionWithClock(_: any, clock: any): AVCaptureMetadataInput;
}

export class AVCaptureMetadataOutput extends AVCaptureOutput {
  availableMetadataObjectTypes: string[];
  metadataObjectTypes: string[];
  setMetadataObjectTypes(_: string[]);
  metadataObjectsCallbackQueue: NSObject;
  metadataObjectsDelegate: any;
  rectOfInterest: CGRect;
  setRectOfInterest(_: CGRect);
  setMetadataObjectsDelegate(_?: any, queue?: NSObject): void;
}

interface AVCaptureMetadataOutputObjectsDelegate {
  metadataOutput(_: AVCaptureOutput, didOutput: AVMetadataObject[], from: AVCaptureConnection): void;
}

export class AVCaptureMovieFileOutput extends AVCaptureFileOutput {
  metadata: AVMetadataItem[];
  setMetadata(_: AVMetadataItem[]);
  movieFragmentInterval: CMTime;
  setMovieFragmentInterval(_: CMTime);
  outputSettings(for_: AVCaptureConnection): Map<string, any>;
  setOutputSettings(_?: Map<string, any>, for_?: AVCaptureConnection): void;
}

export class AVCaptureMultiCamSession extends AVCaptureSession {
  hardwareCost: number;
  systemPressureCost: number;
  static isMultiCamSupported: boolean;
}

export class AVCaptureOutput extends NSObject {
  connections: AVCaptureConnection[];
  connection(with_: string): AVCaptureConnection;
  metadataOutputRectConverted(fromOutputRect: CGRect): CGRect;
  outputRectConverted(fromMetadataOutputRect: CGRect): CGRect;
  transformedMetadataObject(for_: AVMetadataObject, connection: AVCaptureConnection): AVMetadataObject;
}

export class AVCapturePhoto extends NSObject {
  photoCount: number;
  pixelBuffer: any;
  resolvedSettings: AVCaptureResolvedPhotoSettings;
  timestamp: CMTime;
  cgImageRepresentation(): any;
  fileDataRepresentation(): Data;
}

export class AVCapturePhotoBracketSettings extends AVCapturePhotoSettings {
  bracketedSettings: AVCaptureBracketedStillImageSettings[];
  isLensStabilizationEnabled: boolean;
  setLensStabilizationEnabled(_: boolean);
}

interface AVCapturePhotoCaptureDelegate {
  photoOutput(_: AVCapturePhotoOutput, willBeginCaptureFor: AVCaptureResolvedPhotoSettings): void;
  photoOutput(_: AVCapturePhotoOutput, willCapturePhotoFor: AVCaptureResolvedPhotoSettings): void;
  photoOutput(_: AVCapturePhotoOutput, didCapturePhotoFor: AVCaptureResolvedPhotoSettings): void;
  photoOutput(_: AVCapturePhotoOutput, didFinishProcessingPhoto: AVCapturePhoto, error?: Error): void;
  photoOutput(_: AVCapturePhotoOutput, didFinishCaptureFor: AVCaptureResolvedPhotoSettings, error?: Error): void;
}

interface AVCapturePhotoFileDataRepresentationCustomizer {
  replacementDepthData(for_: AVCapturePhoto): AVDepthData;
  replacementEmbeddedThumbnailPixelBuffer(withPhotoFormat?: Map<string, any>, for_?: AVCapturePhoto): any;
  replacementMetadata(for_: AVCapturePhoto): Map<string, any>;
  replacementPortraitEffectsMatte(for_: AVCapturePhoto): AVPortraitEffectsMatte;
  replacementSemanticSegmentationMatte(ofType: string, for_: AVCapturePhoto): AVSemanticSegmentationMatte;
}

export class AVCapturePhotoOutput extends AVCaptureOutput {
  availablePhotoCodecTypes: string[];
  availablePhotoFileTypes: string[];
  availablePhotoPixelFormatTypes: number[];
  capturePhoto(with_: AVCapturePhotoSettings, delegate: any): void;
  supportedPhotoCodecTypes(for_: string): string[];
  supportedPhotoPixelFormatTypes(for_: string): number[];
}

export class AVCapturePhotoSettings extends NSObject {
  format: Map<string, any>;
  processedFileType: string;
  uniqueID: number;
}

export class AVCaptureResolvedPhotoSettings extends NSObject {
  expectedPhotoCount: number;
  photoDimensions: CMVideoDimensions;
  uniqueID: number;
}

export class AVCaptureScreenInput extends AVCaptureInput {
  capturesCursor: boolean;
  setCapturesCursor(_: boolean);
  capturesMouseClicks: boolean;
  setCapturesMouseClicks(_: boolean);
  cropRect: CGRect;
  setCropRect(_: CGRect);
  minFrameDuration: CMTime;
  setMinFrameDuration(_: CMTime);
  scaleFactor: number;
  setScaleFactor(_: number);
  static createWithDisplayID(_: number): AVCaptureScreenInput;
}

export class AVCaptureSession extends NSObject {
  connections: AVCaptureConnection[];
  inputs: AVCaptureInput[];
  masterClock: any;
  outputs: AVCaptureOutput[];
  isRunning: boolean;
  sessionPreset: string;
  setSessionPreset(_: string);
  addConnection(_: AVCaptureConnection): void;
  addInput(_: AVCaptureInput): void;
  addInputWithNoConnections(_: AVCaptureInput): void;
  addOutput(_: AVCaptureOutput): void;
  addOutputWithNoConnections(_: AVCaptureOutput): void;
  beginConfiguration(): void;
  canAddConnection(_: AVCaptureConnection): boolean;
  canAddInput(_: AVCaptureInput): boolean;
  canAddOutput(_: AVCaptureOutput): boolean;
  canSetSessionPreset(_: string): boolean;
  commitConfiguration(): void;
  removeConnection(_: AVCaptureConnection): void;
  removeInput(_: AVCaptureInput): void;
  removeOutput(_: AVCaptureOutput): void;
  startRunning(): void;
  stopRunning(): void;
}

export class AVCaptureSynchronizedData extends NSObject {
  timestamp: CMTime;
}

export class AVCaptureSynchronizedDataCollection extends NSObject {
  count: number;
  synchronizedData(for_: AVCaptureOutput): AVCaptureSynchronizedData;
}

export class AVCaptureSynchronizedDepthData extends AVCaptureSynchronizedData {
  depthData: AVDepthData;
  depthDataWasDropped: boolean;
  droppedReason: AVCaptureOutputBase.AVCaptureOutput.DataDroppedReason;
}

export class AVCaptureSynchronizedMetadataObjectData extends AVCaptureSynchronizedData {
  metadataObjects: AVMetadataObject[];
}

export class AVCaptureSynchronizedSampleBufferData extends AVCaptureSynchronizedData {
  droppedReason: AVCaptureOutputBase.AVCaptureOutput.DataDroppedReason;
  sampleBuffer: any;
  sampleBufferWasDropped: boolean;
}

export class AVCaptureVideoDataOutput extends AVCaptureOutput {
  alwaysDiscardsLateVideoFrames: boolean;
  setAlwaysDiscardsLateVideoFrames(_: boolean);
  availableVideoCVPixelFormatTypes: number[];
  availableVideoCodecTypes: string[];
  sampleBufferCallbackQueue: NSObject;
  sampleBufferDelegate: any;
  videoSettings: Map<string, any>;
  setVideoSettings(_: Map<string, any>);
  availableVideoCodecTypesForAssetWriter(writingTo: string): string[];
  recommendedVideoSettingsForAssetWriter(writingTo: string): Map<string, any>;
  recommendedVideoSettings(forVideoCodecType: string, assetWriterOutputFileType: string): Map<any, any>;
  setSampleBufferDelegate(_?: any, queue?: NSObject): void;
}

interface AVCaptureVideoDataOutputSampleBufferDelegate {
  captureOutput(_: AVCaptureOutput, didOutput: any, from: AVCaptureConnection): void;
  captureOutput(_: AVCaptureOutput, didDrop: any, from: AVCaptureConnection): void;
}

export class AVCaptureVideoPreviewLayer extends CALayer {
  connection: AVCaptureConnection;
  session: AVCaptureSession;
  setSession(_: AVCaptureSession);
  videoGravity: string;
  setVideoGravity(_: string);
  captureDevicePointConverted(fromLayerPoint: CGPoint): CGPoint;
  static createWithSession(_: AVCaptureSession): AVCaptureVideoPreviewLayer;
  static createWithSessionWithNoConnection(_: AVCaptureSession): AVCaptureVideoPreviewLayer;
  metadataOutputRectConverted(fromLayerRect: CGRect): CGRect;
  layerPointConverted(fromCaptureDevicePoint: CGPoint): CGPoint;
  layerRectConverted(fromMetadataOutputRect: CGRect): CGRect;
  setSessionWithNoConnection(_: AVCaptureSession): void;
  transformedMetadataObject(for_: AVMetadataObject): AVMetadataObject;
}

export class AVComposition extends AVAsset {
  URLAssetInitializationOptions: Map<string, any>;
  naturalSize: CGSize;
  // @ts-ignore 
  track(withTrackID: number): AVCompositionTrack;
}

export class AVCompositionTrack extends AVAssetTrack {
  formatDescriptionReplacements: AVCompositionTrackFormatDescriptionReplacement[];
  // @ts-ignore 
  segment(forTrackTime: CMTime): AVCompositionTrackSegment;
}

export class AVCompositionTrackFormatDescriptionReplacement extends NSObject {
  originalFormatDescription: any;
  replacementFormatDescription: any;
}

export class AVCompositionTrackSegment extends AVAssetTrackSegment {
  sourceTrackID: number;
  sourceURL: URL;
  static createWithTimeRange(_: CMTimeRange): AVCompositionTrackSegment;
  static createWithUrlWithTrackIDWithSourceTimeRangeWithTargetTimeRange(_: URL, trackID: number, sourceTimeRange: CMTimeRange, targetTimeRange: CMTimeRange): AVCompositionTrackSegment;
}

interface AVContentKeyRecipient {
  mayRequireContentKeysForMediaDataProcessing: boolean;
}

export class AVContentKeyRequest extends NSObject {
  canProvidePersistableContentKey: boolean;
  error: Error;
  identifier: any;
  initializationData: Data;
  options: Map<string, any>;
  renewsExpiringResponseData: boolean;
  status: AVContentKeySession.AVContentKeyRequest.Status;
  makeStreamingContentKeyRequestData(forApp: Data, contentIdentifier?: Data, options?: Map<string, any>, completionHandler?: (p1: Data, p2: Error) => void): void;
  processContentKeyResponse(_: AVContentKeyResponse): void;
  processContentKeyResponseError(_: Error): void;
  respondByRequestingPersistableContentKeyRequestAndReturnError(): boolean;
}

export class AVContentKeyResponse extends NSObject {
}

export class AVContentKeySession extends NSObject {
  static pendingExpiredSessionReports(withAppIdentifier: Data, storageDirectoryAt: URL): Data[];
  static removePendingExpiredSessionReports(_: Data[], withAppIdentifier: Data, storageDirectoryAt: URL): void;
  contentKeyRecipients: any[];
  contentProtectionSessionIdentifier: Data;
  delegate: any;
  delegateQueue: NSObject;
  keySystem: string;
  storageURL: URL;
  addContentKeyRecipient(_: any): void;
  expire(): void;
  invalidateAllPersistableContentKeys(forApp: Data, options?: Map<string, any>, completionHandler?: (p1: Data, p2: Error) => void): void;
  invalidatePersistableContentKey(_: Data, options?: Map<string, any>, completionHandler?: (p1: Data, p2: Error) => void): void;
  makeSecureTokenForExpirationDate(ofPersistableContentKey: Data, completionHandler?: (p1: Data, p2: Error) => void): void;
  processContentKeyRequest(withIdentifier?: any, initializationData?: Data, options?: Map<string, any>): void;
  removeContentKeyRecipient(_: any): void;
  renewExpiringResponseData(for_: AVContentKeyRequest): void;
  setDelegate(_?: any, queue?: NSObject): void;
}

interface AVContentKeySessionDelegate {
  contentKeySession(_: AVContentKeySession, didProvide: AVContentKeyRequest): void;
  contentKeySession(_: AVContentKeySession, didProvideRenewingContentKeyRequest: AVContentKeyRequest): void;
  contentKeySession(_: AVContentKeySession, didProvide: AVPersistableContentKeyRequest): void;
  contentKeySession(_: AVContentKeySession, didUpdatePersistableContentKey: Data, forContentKeyIdentifier: any): void;
  contentKeySession(_: AVContentKeySession, contentKeyRequest: AVContentKeyRequest, didFailWithError: Error): void;
  contentKeySession(_: AVContentKeySession, shouldRetry: AVContentKeyRequest, reason: string): boolean;
  contentKeySession(_: AVContentKeySession, contentKeyRequestDidSucceed: AVContentKeyRequest): void;
  contentKeySessionContentProtectionSessionIdentifierDidChange(_: AVContentKeySession): void;
  contentKeySessionDidGenerateExpiredSessionReport(_: AVContentKeySession): void;
}

export class AVDateRangeMetadataGroup extends AVMetadataGroup {
  endDate: Date;
  startDate: Date;
  static createWithItemsWithStartDateWithEndDate(_: AVMetadataItem[], startDate: Date, endDate?: Date): AVDateRangeMetadataGroup;
}

export class AVDepthData extends NSObject {
  static createWithDepthDataFromDictionaryRepresentation(error: Map<any, any>): AVDepthData;
  availableDepthDataTypes: number[];
  cameraCalibrationData: AVCameraCalibrationData;
  depthDataAccuracy: AVDepthData.Accuracy;
  isDepthDataFiltered: boolean;
  depthDataMap: any;
  depthDataQuality: AVDepthData.Quality;
  depthDataType: number;
  createWithDepthDataByApplyingExifOrientation(_: CGImageProperties.CGImagePropertyOrientation): AVDepthData;
  createWithDepthDataByConvertingToDepthDataType(toDepthDataType: number): AVDepthData;
  createWithDepthDataByReplacingDepthDataMapWithPixelBuffer(error: any): AVDepthData;
  dictionaryRepresentation(forAuxiliaryDataType?: string): Map<any, any>;
}

interface AVFragmentMinding {
  isAssociatedWithFragmentMinder: boolean;
}

export class AVFragmentedAsset extends AVURLAsset {
  // @ts-ignore 
  track(withTrackID: number): AVFragmentedAssetTrack;
}

export class AVFragmentedAssetMinder extends NSObject {
  assets: AVAsset[];
  mindingInterval: number;
  setMindingInterval(_: number);
  addFragmentedAsset(_: AVAsset): void;
  static createWithAssetWithMindingInterval(_: AVAsset, mindingInterval: number): AVFragmentedAssetMinder;
  removeFragmentedAsset(_: AVAsset): void;
}

export class AVFragmentedAssetTrack extends AVAssetTrack {
}

export class AVFragmentedMovie extends AVMovie {
  // @ts-ignore 
  track(withTrackID: number): AVFragmentedMovieTrack;
}

export class AVFragmentedMovieMinder extends AVFragmentedAssetMinder {
  movies: AVFragmentedMovie[];
  add(_: AVFragmentedMovie): void;
  static createWithMovieWithMindingInterval(_: AVFragmentedMovie, mindingInterval: number): AVFragmentedMovieMinder;
  remove(_: AVFragmentedMovie): void;
}

export class AVFragmentedMovieTrack extends AVMovieTrack {
}

export class AVFrameRateRange extends NSObject {
  maxFrameDuration: CMTime;
  maxFrameRate: number;
  minFrameDuration: CMTime;
  minFrameRate: number;
}

export class AVMIDIPlayer extends NSObject {
  currentPosition: number;
  setCurrentPosition(_: number);
  duration: number;
  isPlaying: boolean;
  rate: number;
  setRate(_: number);
  static createWithContentsOf(soundBankURL: URL, error?: URL): AVMIDIPlayer;
  static createWithData(soundBankURL: Data, error?: URL): AVMIDIPlayer;
  play(_?: () => void): void;
  prepareToPlay(): void;
  stop(): void;
}

// export function AVMakeRectWithAspectRatioInsideRect(aspectRatio: CGSize, boundingRect: CGRect): CGRect;

export class AVMediaDataStorage extends NSObject {
  url(): URL;
  static createWithUrlWithOptions(_: URL, options?: Map<string, any>): AVMediaDataStorage;
}

export class AVMediaSelection extends NSObject {
  asset: AVAsset;
  mediaSelectionCriteriaCanBeAppliedAutomatically(to: AVMediaSelectionGroup): boolean;
  selectedMediaOption(in_: AVMediaSelectionGroup): AVMediaSelectionOption;
}

export class AVMediaSelectionGroup extends NSObject {
  static mediaSelectionOptions(from: AVMediaSelectionOption[], filteredAndSortedAccordingToPreferredLanguages: string[]): AVMediaSelectionOption[];
  static mediaSelectionOptions(from: AVMediaSelectionOption[], with_: Locale): AVMediaSelectionOption[];
  static mediaSelectionOptions(from: AVMediaSelectionOption[], withMediaCharacteristics: string[]): AVMediaSelectionOption[];
  static mediaSelectionOptions(from: AVMediaSelectionOption[], withoutMediaCharacteristics: string[]): AVMediaSelectionOption[];
  static playableMediaSelectionOptions(from: AVMediaSelectionOption[]): AVMediaSelectionOption[];
  allowsEmptySelection: boolean;
  defaultOption: AVMediaSelectionOption;
  options: AVMediaSelectionOption[];
  mediaSelectionOption(withPropertyList: any): AVMediaSelectionOption;
}

export class AVMediaSelectionOption extends NSObject {
  availableMetadataFormats: string[];
  commonMetadata: AVMetadataItem[];
  displayName: string;
  extendedLanguageTag: string;
  locale: Locale;
  mediaSubTypes: number[];
  mediaType: string;
  isPlayable: boolean;
  associatedMediaSelectionOption(in_: AVMediaSelectionGroup): AVMediaSelectionOption;
  // dupe name w instance property   displayName(with_: Locale): string;
  hasMediaCharacteristic(_: string): boolean;
  metadata(forFormat: string): AVMetadataItem[];
  propertyList(): any;
}

export class AVMetadataBodyObject extends AVMetadataObject {
  bodyID: number;
}

export class AVMetadataCatBodyObject extends AVMetadataBodyObject {
}

export class AVMetadataDogBodyObject extends AVMetadataBodyObject {
}

export class AVMetadataFaceObject extends AVMetadataObject {
  faceID: number;
  hasRollAngle: boolean;
  hasYawAngle: boolean;
  rollAngle: number;
  yawAngle: number;
}

export class AVMetadataGroup extends NSObject {
  classifyingLabel: string;
  items: AVMetadataItem[];
  uniqueID: string;
}

export class AVMetadataHumanBodyObject extends AVMetadataBodyObject {
}

export class AVMetadataItem extends NSObject {
  //  static identifier(forKey: any, keySpace: string): string;
  //  static key(forIdentifier: string): any;
  //  static keySpace(forIdentifier: string): string;
  static metadataItems(from: AVMetadataItem[], filteredAndSortedAccordingToPreferredLanguages: string[]): AVMetadataItem[];
  static metadataItems(from: AVMetadataItem[], filteredByIdentifier: string): AVMetadataItem[];
  static metadataItems(from: AVMetadataItem[], filteredBy: AVMetadataItemFilter): AVMetadataItem[];
  static metadataItems(from: AVMetadataItem[], withKey?: any, keySpace?: string): AVMetadataItem[];
  static metadataItems(from: AVMetadataItem[], with_: Locale): AVMetadataItem[];
  commonKey: string;
  dataType: string;
  dataValue: Data;
  dateValue: Date;
  duration: CMTime;
  extendedLanguageTag: string;
  extraAttributes: Map<string, any>;
  identifier: string;
  key: any;
  keySpace: string;
  locale: Locale;
  numberValue: number;
  startDate: Date;
  stringValue: string;
  time: CMTime;
}

export class AVMetadataItemFilter extends NSObject {
  static forSharing(): AVMetadataItemFilter;
}

export class AVMetadataItemValueRequest extends NSObject {
  metadataItem: AVMetadataItem;
  respond(error: Error): void;
  respond(value: any): void;
}

export class AVMetadataMachineReadableCodeObject extends AVMetadataObject {
  corners: Map<any, any>[];
  descriptor: CIBarcodeDescriptor;
  stringValue: string;
}

export class AVMetadataObject extends NSObject {
  bounds: CGRect;
  duration: CMTime;
  time: CMTime;
  type: string;
}

export class AVMetadataSalientObject extends AVMetadataObject {
  objectID: number;
}

export class AVMovie extends AVAsset {
  static movieTypes(): string[];
  URL: URL;
  canContainMovieFragments: boolean;
  containsMovieFragments: boolean;
  data: Data;
  defaultMediaDataStorage: AVMediaDataStorage;
  static createWithDataWithOptions(_: Data, options?: Map<string, any>): AVMovie;
  static createWithUrlWithOptions(_: URL, options?: Map<string, any>): AVMovie;
  is(compatibleWithFileType: string): boolean;
  makeMovieHeader(fileType: string): Data;
  // @ts-ignore 
  track(withTrackID: number): AVMovieTrack;
  writeMovieHeaderToURL(fileType: URL, options: string, error: AVMovie.AVMovieWritingOptions): boolean;
}

export class AVMovieTrack extends AVAssetTrack {
  alternateGroupID: number;
  mediaDataStorage: AVMediaDataStorage;
  mediaDecodeTimeRange: CMTimeRange;
  mediaPresentationTimeRange: CMTimeRange;
}

export class AVMusicTrack extends NSObject {
  destinationAudioUnit: AVAudioUnit;
  setDestinationAudioUnit(_: AVAudioUnit);
  destinationMIDIEndpoint: number;
  setDestinationMIDIEndpoint(_: number);
  lengthInBeats: number;
  setLengthInBeats(_: number);
  lengthInSeconds: number;
  setLengthInSeconds(_: number);
  loopRange: AVBeatRange;
  setLoopRange(_: AVBeatRange);
  isLoopingEnabled: boolean;
  setLoopingEnabled(_: boolean);
  isMuted: boolean;
  setMuted(_: boolean);
  numberOfLoops: number;
  setNumberOfLoops(_: number);
  offsetTime: number;
  setOffsetTime(_: number);
  isSoloed: boolean;
  setSoloed(_: boolean);
  timeResolution: number;
}

export class AVMutableAudioMix extends AVAudioMix {
  inputParameters: AVAudioMixInputParameters[];
  setInputParameters(_: AVAudioMixInputParameters[]);
}

export class AVMutableAudioMixInputParameters extends AVAudioMixInputParameters {
  audioTapProcessor: any;
  setAudioTapProcessor(_: any);
  audioTimePitchAlgorithm: string;
  setAudioTimePitchAlgorithm(_: string);
  trackID: number;
  setTrackID(_: number);
  setVolume(_: number, at: CMTime): void;
  setVolumeRamp(fromStartVolume: number, toEndVolume: number, timeRange: CMTimeRange): void;
}

export class AVMutableComposition extends AVComposition {
  naturalSize: CGSize;
  setNaturalSize(_: CGSize);
  addMutableTrack(withMediaType: string, preferredTrackID: number): AVMutableCompositionTrack;
  insertEmptyTimeRange(_: CMTimeRange): void;
  insertTimeRange(_: CMTimeRange, of: AVAsset, at: CMTime): boolean;
  mutableTrack(compatibleWith: AVAssetTrack): AVMutableCompositionTrack;
  removeTimeRange(_: CMTimeRange): void;
  removeTrack(_: AVCompositionTrack): void;
  scaleTimeRange(_: CMTimeRange, toDuration: CMTime): void;
  // @ts-ignore 
  track(withTrackID: number): AVMutableCompositionTrack;
}

export class AVMutableCompositionTrack extends AVCompositionTrack {
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  extendedLanguageTag: string;
  setExtendedLanguageTag(_: string);
  languageCode: string;
  setLanguageCode(_: string);
  naturalTimeScale: number;
  setNaturalTimeScale(_: number);
  preferredTransform: CGAffineTransform;
  setPreferredTransform(_: CGAffineTransform);
  preferredVolume: number;
  setPreferredVolume(_: number);
  segments: AVCompositionTrackSegment[];
  setSegments(_: AVCompositionTrackSegment[]);
  addTrackAssociation(to: AVCompositionTrack, type: string): void;
  insertEmptyTimeRange(_: CMTimeRange): void;
  insertTimeRange(ofTrack: CMTimeRange, atTime: AVAssetTrack, error: CMTime): boolean;
  insertTimeRanges(ofTracks: NSValue[], atTime: AVAssetTrack[], error: CMTime): boolean;
  removeTimeRange(_: CMTimeRange): void;
  removeTrackAssociation(to: AVCompositionTrack, type: string): void;
  replaceFormatDescription(_: any, with_?: any): void;
  scaleTimeRange(_: CMTimeRange, toDuration: CMTime): void;
  validateTrackSegments(error: AVCompositionTrackSegment[]): boolean;
}

export class AVMutableDateRangeMetadataGroup extends AVDateRangeMetadataGroup {
  endDate: Date;
  setEndDate(_: Date);
  items: AVMetadataItem[];
  setItems(_: AVMetadataItem[]);
  startDate: Date;
  setStartDate(_: Date);
}

export class AVMutableMediaSelection extends AVMediaSelection {
  select(_?: AVMediaSelectionOption, in_?: AVMediaSelectionGroup): void;
}

export class AVMutableMetadataItem extends AVMetadataItem {
  dataType: string;
  setDataType(_: string);
  duration: CMTime;
  setDuration(_: CMTime);
  extendedLanguageTag: string;
  setExtendedLanguageTag(_: string);
  extraAttributes: Map<string, any>;
  setExtraAttributes(_: Map<string, any>);
  locale: Locale;
  setLocale(_: Locale);
  startDate: Date;
  setStartDate(_: Date);
  time: CMTime;
  setTime(_: CMTime);
}

export class AVMutableMovie extends AVMovie {
  static createWithMovieWithSettingsFromMovieOptions(options?: AVMovie, error?: Map<string, any>): AVMutableMovie;
  defaultMediaDataStorage: AVMediaDataStorage;
  setDefaultMediaDataStorage(_: AVMediaDataStorage);
  interleavingPeriod: CMTime;
  setInterleavingPeriod(_: CMTime);
  isModified: boolean;
  setModified(_: boolean);
  preferredRate: number;
  setPreferredRate(_: number);
  preferredTransform: CGAffineTransform;
  setPreferredTransform(_: CGAffineTransform);
  preferredVolume: number;
  setPreferredVolume(_: number);
  timescale: number;
  setTimescale(_: number);
  addMutableTrack(withMediaType: string, copySettingsFrom?: AVAssetTrack, options?: Map<string, any>): AVMutableMovieTrack;
  addMutableTracksCopyingSettings(from: AVAssetTrack[], options?: Map<string, any>): AVMutableMovieTrack[];
  // @ts-ignore 
  static createWithData(options: Data, error?: Map<string, any>): AVMutableMovie;
  static createWithSettingsFromMovie(options?: AVMovie, error?: Map<string, any>): AVMutableMovie;
  // @ts-ignore 
  static createWithUrl(options: URL, error?: Map<string, any>): AVMutableMovie;
  insertEmptyTimeRange(_: CMTimeRange): void;
  insertTimeRange(_: CMTimeRange, of: AVAsset, at: CMTime, copySampleData: boolean): boolean;
  mutableTrack(compatibleWith: AVAssetTrack): AVMutableMovieTrack;
  removeTimeRange(_: CMTimeRange): void;
  removeTrack(_: AVMovieTrack): void;
  scale(_: CMTimeRange, toDuration: CMTime): void;
  // @ts-ignore 
  track(withTrackID: number): AVMutableMovieTrack;
}

export class AVMutableMovieTrack extends AVMovieTrack {
  alternateGroupID: number;
  setAlternateGroupID(_: number);
  cleanApertureDimensions: CGSize;
  setCleanApertureDimensions(_: CGSize);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  encodedPixelsDimensions: CGSize;
  setEncodedPixelsDimensions(_: CGSize);
  extendedLanguageTag: string;
  setExtendedLanguageTag(_: string);
  hasProtectedContent: boolean;
  languageCode: string;
  setLanguageCode(_: string);
  mediaDataStorage: AVMediaDataStorage;
  setMediaDataStorage(_: AVMediaDataStorage);
  isModified: boolean;
  setModified(_: boolean);
  naturalSize: CGSize;
  setNaturalSize(_: CGSize);
  preferredMediaChunkAlignment: number;
  setPreferredMediaChunkAlignment(_: number);
  preferredMediaChunkDuration: CMTime;
  setPreferredMediaChunkDuration(_: CMTime);
  preferredMediaChunkSize: number;
  setPreferredMediaChunkSize(_: number);
  preferredTransform: CGAffineTransform;
  setPreferredTransform(_: CGAffineTransform);
  preferredVolume: number;
  setPreferredVolume(_: number);
  productionApertureDimensions: CGSize;
  setProductionApertureDimensions(_: CGSize);
  sampleReferenceBaseURL: URL;
  setSampleReferenceBaseURL(_: URL);
  timescale: number;
  setTimescale(_: number);
  addTrackAssociation(to: AVMovieTrack, type: string): void;
  append(_: any, decodeTime?: CMTime, presentationTime?: CMTime): boolean;
  insertEmptyTimeRange(_: CMTimeRange): void;
  insertMediaTimeRange(_: CMTimeRange, into: CMTimeRange): boolean;
  insertTimeRange(ofTrack: CMTimeRange, atTime: AVAssetTrack, copySampleData: CMTime, error: boolean): boolean;
  removeTimeRange(_: CMTimeRange): void;
  removeTrackAssociation(to: AVMovieTrack, type: string): void;
  replaceFormatDescription(_: any, with_: any): void;
  scaleTimeRange(_: CMTimeRange, toDuration: CMTime): void;
}

export class AVMutableTimedMetadataGroup extends AVTimedMetadataGroup {
  items: AVMetadataItem[];
  setItems(_: AVMetadataItem[]);
  timeRange: CMTimeRange;
  setTimeRange(_: CMTimeRange);
}

export class AVMutableVideoComposition extends AVVideoComposition {
  animationTool: AVVideoCompositionCoreAnimationTool;
  setAnimationTool(_: AVVideoCompositionCoreAnimationTool);
  colorPrimaries: string;
  setColorPrimaries(_: string);
  colorTransferFunction: string;
  setColorTransferFunction(_: string);
  colorYCbCrMatrix: string;
  setColorYCbCrMatrix(_: string);
  customVideoCompositorClass: typeof NSObject;
  setCustomVideoCompositorClass(_: typeof NSObject);
  frameDuration: CMTime;
  setFrameDuration(_: CMTime);
  instructions: any[];
  setInstructions(_: any[]);
  renderScale: number;
  setRenderScale(_: number);
  renderSize: CGSize;
  setRenderSize(_: CGSize);
  sourceTrackIDForFrameTiming: number;
  setSourceTrackIDForFrameTiming(_: number);
}

export class AVMutableVideoCompositionInstruction extends AVVideoCompositionInstruction {
  backgroundColor: any;
  setBackgroundColor(_: any);
  enablePostProcessing: boolean;
  setEnablePostProcessing(_: boolean);
  layerInstructions: AVVideoCompositionLayerInstruction[];
  setLayerInstructions(_: AVVideoCompositionLayerInstruction[]);
  timeRange: CMTimeRange;
  setTimeRange(_: CMTimeRange);
}

export class AVMutableVideoCompositionLayerInstruction extends AVVideoCompositionLayerInstruction {
  trackID: number;
  setTrackID(_: number);
  setCropRectangle(_: CGRect, at: CMTime): void;
  setCropRectangleRamp(fromStartCropRectangle: CGRect, toEndCropRectangle: CGRect, timeRange: CMTimeRange): void;
  setOpacity(_: number, at: CMTime): void;
  setOpacityRamp(fromStartOpacity: number, toEndOpacity: number, timeRange: CMTimeRange): void;
  setTransform(_: CGAffineTransform, at: CMTime): void;
  setTransformRamp(fromStart: CGAffineTransform, toEnd: CGAffineTransform, timeRange: CMTimeRange): void;
}

export class AVOutputSettingsAssistant extends NSObject {
  static availableOutputSettingsPresets(): string[];
  audioSettings: Map<string, any>;
  outputFileType: string;
  sourceAudioFormat: any;
  setSourceAudioFormat(_: any);
  sourceVideoAverageFrameDuration: CMTime;
  setSourceVideoAverageFrameDuration(_: CMTime);
  sourceVideoFormat: any;
  setSourceVideoFormat(_: any);
  sourceVideoMinFrameDuration: CMTime;
  setSourceVideoMinFrameDuration(_: CMTime);
  videoSettings: Map<string, any>;
}

export class AVPersistableContentKeyRequest extends AVContentKeyRequest {
  persistableContentKeyFromKeyVendorResponse(options: Data, error?: Map<string, any>): Data;
}

export class AVPlayer extends NSObject {
  actionAtItemEnd: AVPlayer.ActionAtItemEnd;
  setActionAtItemEnd(_: AVPlayer.ActionAtItemEnd);
  allowsExternalPlayback: boolean;
  setAllowsExternalPlayback(_: boolean);
  appliesMediaSelectionCriteriaAutomatically: boolean;
  setAppliesMediaSelectionCriteriaAutomatically(_: boolean);
  audioOutputDeviceUniqueID: string;
  setAudioOutputDeviceUniqueID(_: string);
  automaticallyWaitsToMinimizeStalling: boolean;
  setAutomaticallyWaitsToMinimizeStalling(_: boolean);
  currentItem: AVPlayerItem;
  error: Error;
  isExternalPlaybackActive: boolean;
  masterClock: any;
  setMasterClock(_: any);
  isMuted: boolean;
  setMuted(_: boolean);
  outputObscuredDueToInsufficientExternalProtection: boolean;
  preferredVideoDecoderGPURegistryID: number;
  setPreferredVideoDecoderGPURegistryID(_: number);
  preventsDisplaySleepDuringVideoPlayback: boolean;
  setPreventsDisplaySleepDuringVideoPlayback(_: boolean);
  rate: number;
  setRate(_: number);
  reasonForWaitingToPlay: string;
  status: AVPlayer.Status;
  timeControlStatus: AVPlayer.TimeControlStatus;
  volume: number;
  setVolume(_: number);
  static eligibleForHDRPlayback: boolean;
  addBoundaryTimeObserver(forTimes: NSValue[], queue?: NSObject, using?: () => void): any;
  addPeriodicTimeObserver(forInterval: CMTime, queue?: NSObject, using?: (p1: CMTime) => void): any;
  cancelPendingPrerolls(): void;
  currentTime(): CMTime;
  static createWithPlayerItem(_?: AVPlayerItem): AVPlayer;
  static createWithUrl(_: URL): AVPlayer;
  mediaSelectionCriteria(forMediaCharacteristic: string): AVPlayerMediaSelectionCriteria;
  pause(): void;
  play(): void;
  playImmediately(atRate: number): void;
  preroll(atRate: number, completionHandler?: (p1: boolean) => void): void;
  removeTimeObserver(_: any): void;
  replaceCurrentItem(with_?: AVPlayerItem): void;
  seek(to: Date): void;
  seek(to: Date, completionHandler: (p1: boolean) => void): void;
  seek(to: CMTime): void;
  seek(to: CMTime, completionHandler: (p1: boolean) => void): void;
  seek(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime): void;
  seek(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime, completionHandler: (p1: boolean) => void): void;
  setMediaSelectionCriteria(_?: AVPlayerMediaSelectionCriteria, forMediaCharacteristic?: string): void;
  setRate(_: number, time: CMTime, atHostTime: CMTime): void;
}

export class AVPlayerItem extends NSObject {
  isApplicationAuthorizedForPlayback: boolean;
  asset: AVAsset;
  audioMix: AVAudioMix;
  setAudioMix(_: AVAudioMix);
  isAudioSpatializationAllowed: boolean;
  setAudioSpatializationAllowed(_: boolean);
  audioTimePitchAlgorithm: string;
  setAudioTimePitchAlgorithm(_: string);
  isAuthorizationRequiredForPlayback: boolean;
  automaticallyLoadedAssetKeys: string[];
  automaticallyPreservesTimeOffsetFromLive: boolean;
  setAutomaticallyPreservesTimeOffsetFromLive(_: boolean);
  canPlayFastForward: boolean;
  canPlayFastReverse: boolean;
  canPlayReverse: boolean;
  canPlaySlowForward: boolean;
  canPlaySlowReverse: boolean;
  canStepBackward: boolean;
  canStepForward: boolean;
  canUseNetworkResourcesForLiveStreamingWhilePaused: boolean;
  setCanUseNetworkResourcesForLiveStreamingWhilePaused(_: boolean);
  configuredTimeOffsetFromLive: CMTime;
  setConfiguredTimeOffsetFromLive(_: CMTime);
  contentAuthorizationRequestStatus: AVPlayerItemProtectedContentAdditions.AVContentAuthorizationStatus;
  isContentAuthorizedForPlayback: boolean;
  currentMediaSelection: AVMediaSelection;
  customVideoCompositor: any;
  duration: CMTime;
  error: Error;
  forwardPlaybackEndTime: CMTime;
  setForwardPlaybackEndTime(_: CMTime);
  loadedTimeRanges: NSValue[];
  mediaDataCollectors: AVPlayerItemMediaDataCollector[];
  outputs: AVPlayerItemOutput[];
  isPlaybackBufferEmpty: boolean;
  isPlaybackBufferFull: boolean;
  isPlaybackLikelyToKeepUp: boolean;
  preferredForwardBufferDuration: number;
  setPreferredForwardBufferDuration(_: number);
  preferredMaximumResolution: CGSize;
  setPreferredMaximumResolution(_: CGSize);
  preferredPeakBitRate: number;
  setPreferredPeakBitRate(_: number);
  presentationSize: CGSize;
  recommendedTimeOffsetFromLive: CMTime;
  reversePlaybackEndTime: CMTime;
  setReversePlaybackEndTime(_: CMTime);
  seekableTimeRanges: NSValue[];
  seekingWaitsForVideoCompositionRendering: boolean;
  setSeekingWaitsForVideoCompositionRendering(_: boolean);
  status: AVPlayerItem.Status;
  textStyleRules: AVTextStyleRule[];
  setTextStyleRules(_: AVTextStyleRule[]);
  timebase: any;
  tracks: AVPlayerItemTrack[];
  videoApertureMode: string;
  setVideoApertureMode(_: string);
  videoComposition: AVVideoComposition;
  setVideoComposition(_: AVVideoComposition);
  accessLog(): AVPlayerItemAccessLog;
  add(_: AVPlayerItemMediaDataCollector): void;
  add(_: AVPlayerItemOutput): void;
  cancelContentAuthorizationRequest(): void;
  cancelPendingSeeks(): void;
  currentDate(): Date;
  currentTime(): CMTime;
  errorLog(): AVPlayerItemErrorLog;
  static createWithAsset(_: AVAsset): AVPlayerItem;
  static createWithAssetWithAutomaticallyLoadedAssetKeys(_: AVAsset, automaticallyLoadedAssetKeys?: string[]): AVPlayerItem;
  static createWithUrl(_: URL): AVPlayerItem;
  remove(_: AVPlayerItemMediaDataCollector): void;
  remove(_: AVPlayerItemOutput): void;
  requestContentAuthorizationAsynchronously(withTimeoutInterval: number, completionHandler: () => void): void;
  seek(to: Date, completionHandler?: (p1: boolean) => void): boolean;
  seek(to: CMTime, completionHandler?: (p1: boolean) => void): void;
  seek(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime, completionHandler?: (p1: boolean) => void): void;
  select(_?: AVMediaSelectionOption, in_?: AVMediaSelectionGroup): void;
  selectMediaOptionAutomatically(in_: AVMediaSelectionGroup): void;
  step(byCount: number): void;
}

export class AVPlayerItemAccessLog extends NSObject {
  events: AVPlayerItemAccessLogEvent[];
  extendedLogDataStringEncoding: number;
  extendedLogData(): Data;
}

export class AVPlayerItemAccessLogEvent extends NSObject {
  URI: string;
  averageAudioBitrate: number;
  averageVideoBitrate: number;
  downloadOverdue: number;
  durationWatched: number;
  indicatedAverageBitrate: number;
  indicatedBitrate: number;
  mediaRequestsWWAN: number;
  numberOfBytesTransferred: number;
  numberOfDroppedVideoFrames: number;
  numberOfMediaRequests: number;
  numberOfServerAddressChanges: number;
  numberOfStalls: number;
  observedBitrate: number;
  observedBitrateStandardDeviation: number;
  observedMaxBitrate: number;
  observedMinBitrate: number;
  playbackSessionID: string;
  playbackStartDate: Date;
  playbackStartOffset: number;
  playbackType: string;
  segmentsDownloadedDuration: number;
  serverAddress: string;
  startupTime: number;
  switchBitrate: number;
  transferDuration: number;
}

export class AVPlayerItemErrorLog extends NSObject {
  events: AVPlayerItemErrorLogEvent[];
  extendedLogDataStringEncoding: number;
  extendedLogData(): Data;
}

export class AVPlayerItemErrorLogEvent extends NSObject {
  URI: string;
  date: Date;
  errorComment: string;
  errorDomain: string;
  errorStatusCode: number;
  playbackSessionID: string;
  serverAddress: string;
}

export class AVPlayerItemLegibleOutput extends AVPlayerItemOutput {
  advanceIntervalForDelegateInvocation: number;
  setAdvanceIntervalForDelegateInvocation(_: number);
  delegate: any;
  delegateQueue: NSObject;
  textStylingResolution: string;
  setTextStylingResolution(_: string);
  static createWithMediaSubtypesForNativeRepresentation(_: number[]): AVPlayerItemLegibleOutput;
  setDelegate(_?: any, queue?: NSObject): void;
}

interface AVPlayerItemLegibleOutputPushDelegate {
  legibleOutput(_: AVPlayerItemLegibleOutput, didOutputAttributedStrings: NSAttributedString[], nativeSampleBuffers: any[], forItemTime: CMTime): void;
}

export class AVPlayerItemMediaDataCollector extends NSObject {
}

export class AVPlayerItemMetadataCollector extends AVPlayerItemMediaDataCollector {
  delegate: any;
  delegateQueue: NSObject;
  static createWithIdentifiersWithClassifyingLabels(_?: string[], classifyingLabels?: string[]): AVPlayerItemMetadataCollector;
  setDelegate(_?: any, queue?: NSObject): void;
}

interface AVPlayerItemMetadataCollectorPushDelegate {
  metadataCollector(_: AVPlayerItemMetadataCollector, didCollect: AVDateRangeMetadataGroup[], indexesOfNewGroups: IndexSet, indexesOfModifiedGroups: IndexSet): void;
}

export class AVPlayerItemMetadataOutput extends AVPlayerItemOutput {
  advanceIntervalForDelegateInvocation: number;
  setAdvanceIntervalForDelegateInvocation(_: number);
  delegate: any;
  delegateQueue: NSObject;
  static createWithIdentifiers(_?: string[]): AVPlayerItemMetadataOutput;
  setDelegate(_?: any, queue?: NSObject): void;
}

interface AVPlayerItemMetadataOutputPushDelegate {
  metadataOutput(_: AVPlayerItemMetadataOutput, didOutputTimedMetadataGroups: AVTimedMetadataGroup[], from?: AVPlayerItemTrack): void;
}

export class AVPlayerItemOutput extends NSObject {
  suppressesPlayerRendering: boolean;
  setSuppressesPlayerRendering(_: boolean);
  itemTime(for_: CVTimeStamp): CMTime;
  itemTime(forHostTime: number): CMTime;
  itemTime(forMachAbsoluteTime: number): CMTime;
}

interface AVPlayerItemOutputPullDelegate {
  outputMediaDataWillChange(_: AVPlayerItemOutput): void;
  outputSequenceWasFlushed(_: AVPlayerItemOutput): void;
}

interface AVPlayerItemOutputPushDelegate {
  outputSequenceWasFlushed(_: AVPlayerItemOutput): void;
}

export class AVPlayerItemTrack extends NSObject {
  assetTrack: AVAssetTrack;
  currentVideoFrameRate: number;
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  videoFieldMode: string;
  setVideoFieldMode(_: string);
}

export class AVPlayerItemVideoOutput extends AVPlayerItemOutput {
  delegate: any;
  delegateQueue: NSObject;
  copyPixelBuffer(forItemTime: CMTime, itemTimeForDisplay?: CMTime): any;
  hasNewPixelBuffer(forItemTime: CMTime): boolean;
  static createWithOutputSettings(_?: Map<string, any>): AVPlayerItemVideoOutput;
  static createWithPixelBufferAttributes(_?: Map<string, any>): AVPlayerItemVideoOutput;
  requestNotificationOfMediaDataChange(withAdvanceInterval: number): void;
  setDelegate(_?: any, queue?: NSObject): void;
}

export class AVPlayerLayer extends CALayer {
  pixelBufferAttributes: Map<string, any>;
  setPixelBufferAttributes(_: Map<string, any>);
  player: AVPlayer;
  setPlayer(_: AVPlayer);
  isReadyForDisplay: boolean;
  videoGravity: string;
  setVideoGravity(_: string);
  videoRect: CGRect;
}

export class AVPlayerLooper extends NSObject {
  error: Error;
  loopCount: number;
  loopingPlayerItems: AVPlayerItem[];
  status: AVPlayerLooper.Status;
  disableLooping(): void;
  static createWithPlayerWithTemplateItemWithTimeRange(_: AVQueuePlayer, templateItem: AVPlayerItem, timeRange: CMTimeRange): AVPlayerLooper;
}

export class AVPlayerMediaSelectionCriteria extends NSObject {
  preferredLanguages: string[];
  preferredMediaCharacteristics: string[];
  principalMediaCharacteristics: string[];
  static createWithPreferredLanguagesWithPreferredMediaCharacteristics(_?: string[], preferredMediaCharacteristics?: string[]): AVPlayerMediaSelectionCriteria;
  static createWithPrincipalMediaCharacteristicsWithPreferredLanguagesWithPreferredMediaCharacteristics(_?: string[], preferredLanguages?: string[], preferredMediaCharacteristics?: string[]): AVPlayerMediaSelectionCriteria;
}

export class AVPortraitEffectsMatte extends NSObject {
  static createWithPortraitEffectsMatteFromDictionaryRepresentation(error: Map<any, any>): AVPortraitEffectsMatte;
  mattingImage: any;
  pixelFormatType: number;
  dictionaryRepresentation(forAuxiliaryDataType?: string): Map<any, any>;
  createWithPortraitEffectsMatteByApplyingExifOrientation(_: CGImageProperties.CGImagePropertyOrientation): AVPortraitEffectsMatte;
  createWithPortraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBuffer(error: any): AVPortraitEffectsMatte;
}

export class AVQueuePlayer extends AVPlayer {
  advanceToNextItem(): void;
  canInsert(_: AVPlayerItem, after?: AVPlayerItem): boolean;
  static createWithItems(_: AVPlayerItem[]): AVQueuePlayer;
  insert(_: AVPlayerItem, after?: AVPlayerItem): void;
  items(): AVPlayerItem[];
  removeAllItems(): void;
  remove(_: AVPlayerItem): void;
}

interface AVQueuedSampleBufferRendering {
  isReadyForMoreMediaData: boolean;
  timebase: any;
  enqueue(_: any): void;
  flush(): void;
  requestMediaDataWhenReady(on: NSObject, using: () => void): void;
  stopRequestingMediaData(): void;
}

export class AVRouteDetector extends NSObject {
  multipleRoutesDetected: boolean;
  isRouteDetectionEnabled: boolean;
  setRouteDetectionEnabled(_: boolean);
}

export class AVSampleBufferAudioRenderer extends NSObject {
  audioOutputDeviceUniqueID: string;
  setAudioOutputDeviceUniqueID(_: string);
  audioTimePitchAlgorithm: string;
  setAudioTimePitchAlgorithm(_: string);
  error: Error;
  isMuted: boolean;
  setMuted(_: boolean);
  status: AVQueuedSampleBufferRendering.AVQueuedSampleBufferRenderingStatus;
  volume: number;
  setVolume(_: number);
  flush(fromSourceTime: CMTime, completionHandler: (p1: boolean) => void): void;
}

export class AVSampleBufferDisplayLayer extends CALayer {
  controlTimebase: any;
  setControlTimebase(_: any);
  error: Error;
  preventsCapture: boolean;
  setPreventsCapture(_: boolean);
  preventsDisplaySleepDuringVideoPlayback: boolean;
  setPreventsDisplaySleepDuringVideoPlayback(_: boolean);
  status: AVQueuedSampleBufferRendering.AVQueuedSampleBufferRenderingStatus;
  videoGravity: string;
  setVideoGravity(_: string);
  flushAndRemoveImage(): void;
}

export class AVSampleBufferGenerator extends NSObject {
  static notifyOfDataReady(for_: any, completionHandler: (p1: boolean, p2: Error) => void): void;
  createSampleBuffer(for_: AVSampleBufferRequest): any;
  static createWithAssetWithTimebase(_: AVAsset, timebase?: any): AVSampleBufferGenerator;
}

export class AVSampleBufferRenderSynchronizer extends NSObject {
  rate: number;
  setRate(_: number);
  renderers: any[];
  timebase: any;
  addBoundaryTimeObserver(forTimes: NSValue[], queue?: NSObject, using?: () => void): any;
  addPeriodicTimeObserver(forInterval: CMTime, queue?: NSObject, using?: (p1: CMTime) => void): any;
  addRenderer(_: any): void;
  currentTime(): CMTime;
  removeRenderer(_: any, at: CMTime, completionHandler?: (p1: boolean) => void): void;
  removeTimeObserver(_: any): void;
  setRate(_: number, time: CMTime): void;
}

export class AVSampleBufferRequest extends NSObject {
  direction: AVSampleBufferGenerator.AVSampleBufferRequest.Direction;
  setDirection(_: AVSampleBufferGenerator.AVSampleBufferRequest.Direction);
  limitCursor: AVSampleCursor;
  setLimitCursor(_: AVSampleCursor);
  maxSampleCount: number;
  setMaxSampleCount(_: number);
  mode: AVSampleBufferGenerator.AVSampleBufferRequest.Mode;
  setMode(_: AVSampleBufferGenerator.AVSampleBufferRequest.Mode);
  overrideTime: CMTime;
  setOverrideTime(_: CMTime);
  preferredMinSampleCount: number;
  setPreferredMinSampleCount(_: number);
  startCursor: AVSampleCursor;
  static createWithStartCursor(_: AVSampleCursor): AVSampleBufferRequest;
}

export class AVSampleCursor extends NSObject {
  currentChunkInfo: AVSampleCursorChunkInfo;
  currentChunkStorageRange: AVSampleCursorStorageRange;
  currentChunkStorageURL: URL;
  currentSampleAudioDependencyInfo: AVSampleCursorAudioDependencyInfo;
  currentSampleDependencyInfo: AVSampleCursorDependencyInfo;
  currentSampleDuration: CMTime;
  currentSampleIndexInChunk: number;
  currentSampleStorageRange: AVSampleCursorStorageRange;
  currentSampleSyncInfo: AVSampleCursorSyncInfo;
  decodeTimeStamp: CMTime;
  presentationTimeStamp: CMTime;
  samplesRequiredForDecoderRefresh: number;
  comparePositionInDecodeOrder(withPositionOf: AVSampleCursor): NSObjCRuntime.ComparisonResult;
  copyCurrentSampleFormatDescription(): any;
  maySamplesWithEarlierDecodeTimeStampsHavePresentationTimeStamps(laterThan: AVSampleCursor): boolean;
  maySamplesWithLaterDecodeTimeStampsHavePresentationTimeStamps(earlierThan: AVSampleCursor): boolean;
  step(byDecodeTime: CMTime, wasPinned?: boolean): CMTime;
  step(byPresentationTime: CMTime, wasPinned?: boolean): CMTime;
  stepInDecodeOrder(byCount: number): number;
  stepInPresentationOrder(byCount: number): number;
}

export class AVSemanticSegmentationMatte extends NSObject {
  static createWithSemanticSegmentationMatteFromImageSourceAuxiliaryDataTypeDictionaryRepresentation(dictionaryRepresentation: string, error: Map<any, any>): AVSemanticSegmentationMatte;
  matteType: string;
  mattingImage: any;
  pixelFormatType: number;
  dictionaryRepresentation(forAuxiliaryDataType?: string): Map<any, any>;
  createWithSemanticSegmentationMatteByApplyingExifOrientation(_: CGImageProperties.CGImagePropertyOrientation): AVSemanticSegmentationMatte;
  createWithSemanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBuffer(error: any): AVSemanticSegmentationMatte;
}

export class AVSpeechSynthesisVoice extends NSObject {
  static currentLanguageCode(): string;
  static speechVoices(): AVSpeechSynthesisVoice[];
  audioFileSettings: Map<string, any>;
  gender: AVSpeechSynthesis.AVSpeechSynthesisVoiceGender;
  identifier: string;
  language: string;
  name: string;
  quality: AVSpeechSynthesis.AVSpeechSynthesisVoiceQuality;
}

export class AVSpeechSynthesizer extends NSObject {
  delegate: any;
  setDelegate(_: any);
  isPaused: boolean;
  isSpeaking: boolean;
  continueSpeaking(): boolean;
  pauseSpeaking(at: AVSpeechSynthesis.AVSpeechBoundary): boolean;
  speak(_: AVSpeechUtterance): void;
  stopSpeaking(at: AVSpeechSynthesis.AVSpeechBoundary): boolean;
  write(_: AVSpeechUtterance, toBufferCallback: (p1: AVAudioBuffer) => void): void;
}

interface AVSpeechSynthesizerDelegate {
  speechSynthesizer(_: AVSpeechSynthesizer, didStart: AVSpeechUtterance): void;
  speechSynthesizer(_: AVSpeechSynthesizer, didFinish: AVSpeechUtterance): void;
  speechSynthesizer(_: AVSpeechSynthesizer, didPause: AVSpeechUtterance): void;
  speechSynthesizer(_: AVSpeechSynthesizer, didContinue: AVSpeechUtterance): void;
  speechSynthesizer(_: AVSpeechSynthesizer, didCancel: AVSpeechUtterance): void;
  speechSynthesizer(_: AVSpeechSynthesizer, willSpeakRangeOfSpeechString: NSRange, utterance: AVSpeechUtterance): void;
}

export class AVSpeechUtterance extends NSObject {
  attributedSpeechString: NSAttributedString;
  pitchMultiplier: number;
  setPitchMultiplier(_: number);
  postUtteranceDelay: number;
  setPostUtteranceDelay(_: number);
  preUtteranceDelay: number;
  setPreUtteranceDelay(_: number);
  rate: number;
  setRate(_: number);
  speechString: string;
  voice: AVSpeechSynthesisVoice;
  setVoice(_: AVSpeechSynthesisVoice);
  volume: number;
  setVolume(_: number);
  static createWithAttributedString(_: NSAttributedString): AVSpeechUtterance;
  static createWithString(_: string): AVSpeechUtterance;
}

export class AVSynchronizedLayer extends CALayer {
  playerItem: AVPlayerItem;
  setPlayerItem(_: AVPlayerItem);
}

export class AVTextStyleRule extends NSObject {
  static propertyList(for_: AVTextStyleRule[]): any;
  static textStyleRules(fromPropertyList: any): AVTextStyleRule[];
  textMarkupAttributes: Map<string, any>;
  textSelector: string;
  static createWithTextMarkupAttributes(_: Map<string, any>): AVTextStyleRule;
  static createWithTextMarkupAttributesWithTextSelector(_: Map<string, any>, textSelector?: string): AVTextStyleRule;
}

export class AVTimedMetadataGroup extends AVMetadataGroup {
  timeRange: CMTimeRange;
  copyFormatDescription(): any;
  static createWithItemsWithTimeRange(_: AVMetadataItem[], timeRange: CMTimeRange): AVTimedMetadataGroup;
  static createWithSampleBuffer(_: any): AVTimedMetadataGroup;
}

export class AVURLAsset extends AVAsset {
  static audiovisualMIMETypes(): string[];
  static audiovisualTypes(): string[];
  static isPlayableExtendedMIMEType(_: string): boolean;
  URL: URL;
  assetCache: AVAssetCache;
  resourceLoader: AVAssetResourceLoader;
  compatibleTrack(for_: AVCompositionTrack): AVAssetTrack;
  static createWithUrlWithOptions(_: URL, options?: Map<string, any>): AVURLAsset;
}

interface AVVideoCompositing {
  requiredPixelBufferAttributesForRenderContext: Map<string, any>;
  sourcePixelBufferAttributes: Map<string, any>;
  supportsWideColorSourceFrames?: boolean;
  anticipateRendering(using: AVVideoCompositionRenderHint): void;
  cancelAllPendingVideoCompositionRequests(): void;
  prerollForRendering(using: AVVideoCompositionRenderHint): void;
  renderContextChanged(_: AVVideoCompositionRenderContext): void;
  startRequest(_: AVAsynchronousVideoCompositionRequest): void;
}

export class AVVideoComposition extends NSObject {
  animationTool: AVVideoCompositionCoreAnimationTool;
  colorPrimaries: string;
  colorTransferFunction: string;
  colorYCbCrMatrix: string;
  customVideoCompositorClass: typeof NSObject;
  frameDuration: CMTime;
  instructions: any[];
  renderScale: number;
  renderSize: CGSize;
  sourceTrackIDForFrameTiming: number;
  isValid(for_?: AVAsset, timeRange?: CMTimeRange, validationDelegate?: any): boolean;
}

export class AVVideoCompositionCoreAnimationTool extends NSObject {
}

export class AVVideoCompositionInstruction extends NSObject {
  backgroundColor: any;
  layerInstructions: AVVideoCompositionLayerInstruction[];
}

interface AVVideoCompositionInstructionProtocol {
  containsTweening: boolean;
  enablePostProcessing: boolean;
  passthroughTrackID: number;
  requiredSourceTrackIDs: NSValue[];
  timeRange: CMTimeRange;
}

export class AVVideoCompositionLayerInstruction extends NSObject {
  trackID: number;
  getCropRectangleRamp(for_: CMTime, startCropRectangle?: CGRect, endCropRectangle?: CGRect, timeRange?: CMTimeRange): boolean;
  getOpacityRamp(for_: CMTime, startOpacity?: number, endOpacity?: number, timeRange?: CMTimeRange): boolean;
  getTransformRamp(for_: CMTime, start?: CGAffineTransform, end?: CGAffineTransform, timeRange?: CMTimeRange): boolean;
}

export class AVVideoCompositionRenderContext extends NSObject {
  edgeWidths: AVEdgeWidths;
  highQualityRendering: boolean;
  pixelAspectRatio: AVPixelAspectRatio;
  renderScale: number;
  renderTransform: CGAffineTransform;
  size: CGSize;
  videoComposition: AVVideoComposition;
  newPixelBuffer(): any;
}

export class AVVideoCompositionRenderHint extends NSObject {
  endCompositionTime: CMTime;
  startCompositionTime: CMTime;
}

interface AVVideoCompositionValidationHandling {
  videoComposition(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidValueForKey: string): boolean;
  videoComposition(_: AVVideoComposition, shouldContinueValidatingAfterFindingEmptyTimeRange: CMTimeRange): boolean;
  videoComposition(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidTimeRangeIn: any): boolean;
  videoComposition(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidTrackIDIn: any, layerInstruction: AVVideoCompositionLayerInstruction, asset: AVAsset): boolean;
}

export class AVCaptureView extends NSView {
  controlsStyle: AVCaptureView.AVCaptureViewControlsStyle;
  setControlsStyle(_: AVCaptureView.AVCaptureViewControlsStyle);
  delegate: any;
  setDelegate(_: any);
  fileOutput: AVCaptureFileOutput;
  session: AVCaptureSession;
  videoGravity: string;
  setVideoGravity(_: string);
  setSession(_?: AVCaptureSession, showVideoPreview?: boolean, showAudioPreview?: boolean): void;
}

export type CaptureView = AVCaptureView

interface AVCaptureViewDelegate {
  captureView(_: AVCaptureView, startRecordingTo: AVCaptureFileOutput): void;
}

export class AVPictureInPictureController extends NSObject {
  static isPictureInPictureSupported(): boolean;
  delegate: any;
  setDelegate(_: any);
  isPictureInPictureActive: boolean;
  isPictureInPicturePossible: boolean;
  isPictureInPictureSuspended: boolean;
  playerLayer: AVPlayerLayer;
  static pictureInPictureButtonStartImage: NSImage;
  static pictureInPictureButtonStopImage: NSImage;
  static createWithPlayerLayer(_: AVPlayerLayer): AVPictureInPictureController;
  startPictureInPicture(): void;
  stopPictureInPicture(): void;
}

interface AVPictureInPictureControllerDelegate {
  pictureInPictureController(_: AVPictureInPictureController, failedToStartPictureInPictureWithError: Error): void;
  pictureInPictureController(_: AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (p1: boolean) => void): void;
  pictureInPictureControllerDidStartPictureInPicture(_: AVPictureInPictureController): void;
  pictureInPictureControllerDidStopPictureInPicture(_: AVPictureInPictureController): void;
  pictureInPictureControllerWillStartPictureInPicture(_: AVPictureInPictureController): void;
  pictureInPictureControllerWillStopPictureInPicture(_: AVPictureInPictureController): void;
}

export class AVPlayerView extends NSView {
  actionPopUpButtonMenu: NSMenu;
  setActionPopUpButtonMenu(_: NSMenu);
  allowsPictureInPicturePlayback: boolean;
  setAllowsPictureInPicturePlayback(_: boolean);
  canBeginTrimming: boolean;
  contentOverlayView: NSView;
  controlsStyle: AVPlayerView.AVPlayerViewControlsStyle;
  setControlsStyle(_: AVPlayerView.AVPlayerViewControlsStyle);
  pictureInPictureDelegate: any;
  setPictureInPictureDelegate(_: any);
  player: AVPlayer;
  setPlayer(_: AVPlayer);
  isReadyForDisplay: boolean;
  showsFrameSteppingButtons: boolean;
  setShowsFrameSteppingButtons(_: boolean);
  showsFullScreenToggleButton: boolean;
  setShowsFullScreenToggleButton(_: boolean);
  showsSharingServiceButton: boolean;
  setShowsSharingServiceButton(_: boolean);
  showsTimecodes: boolean;
  setShowsTimecodes(_: boolean);
  updatesNowPlayingInfoCenter: boolean;
  setUpdatesNowPlayingInfoCenter(_: boolean);
  videoBounds: CGRect;
  videoGravity: string;
  setVideoGravity(_: string);
  beginTrimming(completionHandler?: (p1: AVPlayerView.AVPlayerViewTrimResult) => void): void;
  flashChapterNumber(_: number, chapterTitle?: string): void;
}

export type PlayerView = AVPlayerView

interface AVPlayerViewPictureInPictureDelegate {
  playerView(_: AVPlayerView, failedToStartPictureInPictureWithError: Error): void;
  playerView(_: AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (p1: boolean) => void): void;
  playerViewDidStartPicture(inPicture: AVPlayerView): void;
  playerViewDidStopPicture(inPicture: AVPlayerView): void;
  playerViewShouldAutomaticallyDismissAtPicture(inPictureStart: AVPlayerView): boolean;
  playerViewWillStartPicture(inPicture: AVPlayerView): void;
  playerViewWillStopPicture(inPicture: AVPlayerView): void;
}

export class AVRoutePickerView extends NSView {
  delegate: any;
  setDelegate(_: any);
  player: AVPlayer;
  setPlayer(_: AVPlayer);
  isRoutePickerButtonBordered: boolean;
  setRoutePickerButtonBordered(_: boolean);
  routePickerButtonColor(for_: AVRoutePickerView.AVRoutePickerViewButtonState): NSColor;
  setRoutePickerButtonColor(_?: NSColor, for_?: AVRoutePickerView.AVRoutePickerViewButtonState): void;
}

export type RoutePickerView = AVRoutePickerView

interface AVRoutePickerViewDelegate {
  routePickerViewDidEndPresentingRoutes(_: AVRoutePickerView): void;
  routePickerViewWillBeginPresentingRoutes(_: AVRoutePickerView): void;
}

export class NSATSTypesetter extends NSTypesetter {
  static sharedTypesetter: NSATSTypesetter;
}

interface NSAccessibility {
  accessibilityActivationPoint: CGPoint;
  setAccessibilityActivationPoint(_: CGPoint);
  accessibilityAllowedValues: number[];
  setAccessibilityAllowedValues(_: number[]);
  isAccessibilityAlternateUIVisible: boolean;
  setAccessibilityAlternateUIVisible(_: boolean);
  accessibilityApplicationFocusedUIElement: any;
  setAccessibilityApplicationFocusedUIElement(_: any);
  accessibilityCancelButton: any;
  setAccessibilityCancelButton(_: any);
  accessibilityChildren: any[];
  setAccessibilityChildren(_: any[]);
  accessibilityChildrenInNavigationOrder: any[];
  setAccessibilityChildrenInNavigationOrder(_: any[]);
  accessibilityClearButton: any;
  setAccessibilityClearButton(_: any);
  accessibilityCloseButton: any;
  setAccessibilityCloseButton(_: any);
  accessibilityColumnCount: number;
  setAccessibilityColumnCount(_: number);
  accessibilityColumnHeaderUIElements: any[];
  setAccessibilityColumnHeaderUIElements(_: any[]);
  accessibilityColumnIndexRange: NSRange;
  setAccessibilityColumnIndexRange(_: NSRange);
  accessibilityColumns: any[];
  setAccessibilityColumns(_: any[]);
  accessibilityColumnTitles: any[];
  setAccessibilityColumnTitles(_: any[]);
  accessibilityContents: any[];
  setAccessibilityContents(_: any[]);
  accessibilityCriticalValue: any;
  setAccessibilityCriticalValue(_: any);
  accessibilityCustomActions: NSAccessibilityCustomAction[];
  setAccessibilityCustomActions(_: NSAccessibilityCustomAction[]);
  accessibilityCustomRotors: NSAccessibilityCustomRotor[];
  setAccessibilityCustomRotors(_: NSAccessibilityCustomRotor[]);
  accessibilityDecrementButton: any;
  setAccessibilityDecrementButton(_: any);
  accessibilityDefaultButton: any;
  setAccessibilityDefaultButton(_: any);
  isAccessibilityDisclosed: boolean;
  setAccessibilityDisclosed(_: boolean);
  accessibilityDisclosedByRow: any;
  setAccessibilityDisclosedByRow(_: any);
  accessibilityDisclosedRows: any;
  setAccessibilityDisclosedRows(_: any);
  accessibilityDisclosureLevel: number;
  setAccessibilityDisclosureLevel(_: number);
  accessibilityDocument: string;
  setAccessibilityDocument(_: string);
  isAccessibilityEdited: boolean;
  setAccessibilityEdited(_: boolean);
  isAccessibilityElement: boolean;
  setAccessibilityElement(_: boolean);
  isAccessibilityEnabled: boolean;
  setAccessibilityEnabled(_: boolean);
  isAccessibilityExpanded: boolean;
  setAccessibilityExpanded(_: boolean);
  accessibilityExtrasMenuBar: any;
  setAccessibilityExtrasMenuBar(_: any);
  accessibilityFilename: string;
  setAccessibilityFilename(_: string);
  isAccessibilityFocused: boolean;
  setAccessibilityFocused(_: boolean);
  accessibilityFocusedWindow: any;
  setAccessibilityFocusedWindow(_: any);
  accessibilityFrame: CGRect;
  setAccessibilityFrame(_: CGRect);
  isAccessibilityFrontmost: boolean;
  setAccessibilityFrontmost(_: boolean);
  accessibilityFullScreenButton: any;
  setAccessibilityFullScreenButton(_: any);
  accessibilityGrowArea: any;
  setAccessibilityGrowArea(_: any);
  accessibilityHandles: any[];
  setAccessibilityHandles(_: any[]);
  accessibilityHeader: any;
  setAccessibilityHeader(_: any);
  accessibilityHelp: string;
  setAccessibilityHelp(_: string);
  isAccessibilityHidden: boolean;
  setAccessibilityHidden(_: boolean);
  accessibilityHorizontalScrollBar: any;
  setAccessibilityHorizontalScrollBar(_: any);
  accessibilityHorizontalUnitDescription: string;
  setAccessibilityHorizontalUnitDescription(_: string);
  accessibilityHorizontalUnits: NSAccessibilityConstants.NSAccessibility.Units;
  setAccessibilityHorizontalUnits(_: NSAccessibilityConstants.NSAccessibility.Units);
  accessibilityIdentifier: string;
  setAccessibilityIdentifier(_: string);
  accessibilityIncrementButton: any;
  setAccessibilityIncrementButton(_: any);
  accessibilityIndex: number;
  setAccessibilityIndex(_: number);
  accessibilityInsertionPointLineNumber: number;
  setAccessibilityInsertionPointLineNumber(_: number);
  accessibilityLabel: string;
  setAccessibilityLabel(_: string);
  accessibilityLabelUIElements: any[];
  setAccessibilityLabelUIElements(_: any[]);
  accessibilityLabelValue: number;
  setAccessibilityLabelValue(_: number);
  accessibilityLinkedUIElements: any[];
  setAccessibilityLinkedUIElements(_: any[]);
  isAccessibilityMain: boolean;
  setAccessibilityMain(_: boolean);
  accessibilityMainWindow: any;
  setAccessibilityMainWindow(_: any);
  accessibilityMarkerGroupUIElement: any;
  setAccessibilityMarkerGroupUIElement(_: any);
  accessibilityMarkerTypeDescription: string;
  setAccessibilityMarkerTypeDescription(_: string);
  accessibilityMarkerUIElements: any[];
  setAccessibilityMarkerUIElements(_: any[]);
  accessibilityMarkerValues: any;
  setAccessibilityMarkerValues(_: any);
  accessibilityMaxValue: any;
  setAccessibilityMaxValue(_: any);
  accessibilityMenuBar: any;
  setAccessibilityMenuBar(_: any);
  accessibilityMinimizeButton: any;
  setAccessibilityMinimizeButton(_: any);
  isAccessibilityMinimized: boolean;
  setAccessibilityMinimized(_: boolean);
  accessibilityMinValue: any;
  setAccessibilityMinValue(_: any);
  isAccessibilityModal: boolean;
  setAccessibilityModal(_: boolean);
  accessibilityNextContents: any[];
  setAccessibilityNextContents(_: any[]);
  accessibilityNumberOfCharacters: number;
  setAccessibilityNumberOfCharacters(_: number);
  isAccessibilityOrderedByRow: boolean;
  setAccessibilityOrderedByRow(_: boolean);
  accessibilityOrientation: NSAccessibilityConstants.NSAccessibility.Orientation;
  setAccessibilityOrientation(_: NSAccessibilityConstants.NSAccessibility.Orientation);
  accessibilityOverflowButton: any;
  setAccessibilityOverflowButton(_: any);
  accessibilityParent: any;
  setAccessibilityParent(_: any);
  accessibilityPlaceholderValue: string;
  setAccessibilityPlaceholderValue(_: string);
  accessibilityPreviousContents: any[];
  setAccessibilityPreviousContents(_: any[]);
  isAccessibilityProtectedContent: boolean;
  setAccessibilityProtectedContent(_: boolean);
  accessibilityProxy: any;
  setAccessibilityProxy(_: any);
  isAccessibilityRequired: boolean;
  setAccessibilityRequired(_: boolean);
  accessibilityRole: string;
  setAccessibilityRole(_: string);
  accessibilityRoleDescription: string;
  setAccessibilityRoleDescription(_: string);
  accessibilityRowCount: number;
  setAccessibilityRowCount(_: number);
  accessibilityRowHeaderUIElements: any[];
  setAccessibilityRowHeaderUIElements(_: any[]);
  accessibilityRowIndexRange: NSRange;
  setAccessibilityRowIndexRange(_: NSRange);
  accessibilityRows: any[];
  setAccessibilityRows(_: any[]);
  accessibilityRulerMarkerType: NSAccessibilityConstants.NSAccessibility.RulerMarkerType;
  setAccessibilityRulerMarkerType(_: NSAccessibilityConstants.NSAccessibility.RulerMarkerType);
  accessibilitySearchButton: any;
  setAccessibilitySearchButton(_: any);
  accessibilitySearchMenu: any;
  setAccessibilitySearchMenu(_: any);
  isAccessibilitySelected: boolean;
  setAccessibilitySelected(_: boolean);
  accessibilitySelectedCells: any[];
  setAccessibilitySelectedCells(_: any[]);
  accessibilitySelectedChildren: any[];
  setAccessibilitySelectedChildren(_: any[]);
  accessibilitySelectedColumns: any[];
  setAccessibilitySelectedColumns(_: any[]);
  accessibilitySelectedRows: any[];
  setAccessibilitySelectedRows(_: any[]);
  accessibilitySelectedText: string;
  setAccessibilitySelectedText(_: string);
  accessibilitySelectedTextRange: NSRange;
  setAccessibilitySelectedTextRange(_: NSRange);
  accessibilitySelectedTextRanges: NSValue[];
  setAccessibilitySelectedTextRanges(_: NSValue[]);
  accessibilityServesAsTitleForUIElements: any[];
  setAccessibilityServesAsTitleForUIElements(_: any[]);
  accessibilitySharedCharacterRange: NSRange;
  setAccessibilitySharedCharacterRange(_: NSRange);
  accessibilitySharedFocusElements: any[];
  setAccessibilitySharedFocusElements(_: any[]);
  accessibilitySharedTextUIElements: any[];
  setAccessibilitySharedTextUIElements(_: any[]);
  accessibilityShownMenu: any;
  setAccessibilityShownMenu(_: any);
  accessibilitySortDirection: NSAccessibilityConstants.NSAccessibility.SortDirection;
  setAccessibilitySortDirection(_: NSAccessibilityConstants.NSAccessibility.SortDirection);
  accessibilitySplitters: any[];
  setAccessibilitySplitters(_: any[]);
  accessibilitySubrole: string;
  setAccessibilitySubrole(_: string);
  accessibilityTabs: any[];
  setAccessibilityTabs(_: any[]);
  accessibilityTitle: string;
  setAccessibilityTitle(_: string);
  accessibilityTitleUIElement: any;
  setAccessibilityTitleUIElement(_: any);
  accessibilityToolbarButton: any;
  setAccessibilityToolbarButton(_: any);
  accessibilityTopLevelUIElement: any;
  setAccessibilityTopLevelUIElement(_: any);
  accessibilityUnitDescription: string;
  setAccessibilityUnitDescription(_: string);
  accessibilityUnits: NSAccessibilityConstants.NSAccessibility.Units;
  setAccessibilityUnits(_: NSAccessibilityConstants.NSAccessibility.Units);
  accessibilityURL: URL;
  setAccessibilityURL(_: URL);
  accessibilityValue: any;
  setAccessibilityValue(_: any);
  accessibilityValueDescription: string;
  setAccessibilityValueDescription(_: string);
  accessibilityVerticalScrollBar: any;
  setAccessibilityVerticalScrollBar(_: any);
  accessibilityVerticalUnitDescription: string;
  setAccessibilityVerticalUnitDescription(_: string);
  accessibilityVerticalUnits: NSAccessibilityConstants.NSAccessibility.Units;
  setAccessibilityVerticalUnits(_: NSAccessibilityConstants.NSAccessibility.Units);
  accessibilityVisibleCells: any[];
  setAccessibilityVisibleCells(_: any[]);
  accessibilityVisibleCharacterRange: NSRange;
  setAccessibilityVisibleCharacterRange(_: NSRange);
  accessibilityVisibleChildren: any[];
  setAccessibilityVisibleChildren(_: any[]);
  accessibilityVisibleColumns: any[];
  setAccessibilityVisibleColumns(_: any[]);
  accessibilityVisibleRows: any[];
  setAccessibilityVisibleRows(_: any[]);
  accessibilityWarningValue: any;
  setAccessibilityWarningValue(_: any);
  accessibilityWindow: any;
  setAccessibilityWindow(_: any);
  accessibilityWindows: any[];
  setAccessibilityWindows(_: any[]);
  accessibilityZoomButton: any;
  setAccessibilityZoomButton(_: any);
  accessibilityAttributedStringForRange(_: NSRange): NSAttributedString;
  accessibilityCellForColumn(_: number, row: number): any;
  accessibilityFrameForRange(_: NSRange): CGRect;
  accessibilityLayoutPointForScreenPoint(_: CGPoint): CGPoint;
  accessibilityLayoutSizeForScreenSize(_: CGSize): CGSize;
  accessibilityLineForIndex(_: number): number;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  accessibilityRangeForIndex(_: number): NSRange;
  accessibilityRangeForLine(_: number): NSRange;
  accessibilityRangeForPosition(_: CGPoint): NSRange;
  accessibilityRTFForRange(_: NSRange): Data;
  accessibilityScreenPointForLayoutPoint(_: CGPoint): CGPoint;
  accessibilityScreenSizeForLayoutSize(_: CGSize): CGSize;
  accessibilityStringForRange(_: NSRange): string;
  accessibilityStyleRangeForIndex(_: number): NSRange;
  isAccessibilitySelectorAllowed(_: string): boolean;
}

// export function NSAccessibilityActionDescription(action: string): string;

interface NSAccessibilityButton {
  accessibilityLabel(): string;
  accessibilityPerformPress(): boolean;
}

interface NSAccessibilityCheckBox {
  accessibilityValue(): number;
}

interface NSAccessibilityContainsTransientUI {
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  isAccessibilityAlternateUIVisible(): boolean;
}

export class NSAccessibilityCustomAction extends NSObject {
  handler: () => boolean;
  setHandler(_: () => boolean);
  name: string;
  setName(_: string);
  selector: string;
  setSelector(_: string);
  target: any;
  setTarget(_: any);
  static createWithNameWithHandler(_: string, handler?: () => boolean): NSAccessibilityCustomAction;
  static createWithNameWithTargetWithSelector(_: string, target: any, selector: string): NSAccessibilityCustomAction;
}

export class NSAccessibilityCustomRotor extends NSObject {
  itemLoadingDelegate: any;
  setItemLoadingDelegate(_: any);
  itemSearchDelegate: any;
  setItemSearchDelegate(_: any);
  label: string;
  setLabel(_: string);
  type: NSAccessibilityCustomRotor.RotorType;
  setType(_: NSAccessibilityCustomRotor.RotorType);
  static createWithLabelWithItemSearchDelegate(_: string, itemSearchDelegate: any): NSAccessibilityCustomRotor;
  static createWithRotorTypeWithItemSearchDelegate(_: NSAccessibilityCustomRotor.RotorType, itemSearchDelegate: any): NSAccessibilityCustomRotor;
}

interface NSAccessibilityCustomRotorItemSearchDelegate {
  rotor(_: NSAccessibilityCustomRotor, resultFor: NSAccessibilityCustomRotor.SearchParameters): NSAccessibilityCustomRotor.ItemResult;
}

export class NSAccessibilityElement extends NSObject {
  static element(withRole: string, frame: CGRect, label?: string, parent?: any): any;
  accessibilityFrameInParentSpace: CGRect;
  setAccessibilityFrameInParentSpace(_: CGRect);
  accessibilityAddChildElement(_: NSAccessibilityElement): void;
}

interface NSAccessibilityElementLoading {
  accessibilityElement(withToken: any): any;
  accessibilityRangeInTargetElement(withToken: any): NSRange;
}

interface NSAccessibilityElementProtocol {
  accessibilityFrame(): CGRect;
  accessibilityIdentifier(): string;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
}

// export function NSAccessibilityFrameInView(parentView: NSView, frame: CGRect): CGRect;

interface NSAccessibilityGroup {
}

interface NSAccessibilityImage {
  accessibilityLabel(): string;
}

interface NSAccessibilityLayoutArea {
  accessibilityFocusedUIElement: any;
  accessibilityChildren(): any[];
  accessibilityLabel(): string;
  accessibilitySelectedChildren(): any[];
}

interface NSAccessibilityLayoutItem {
  setAccessibilityFrame(_: CGRect): void;
}

interface NSAccessibilityList {
}

interface NSAccessibilityNavigableStaticText {
  accessibilityFrame(for_: NSRange): CGRect;
  accessibilityLine(for_: number): number;
  accessibilityRange(forLine: number): NSRange;
  accessibilityString(for_: NSRange): string;
}

interface NSAccessibilityOutline {
}

// export function NSAccessibilityPointInView(parentView: NSView, point: CGPoint): CGPoint;

// export function NSAccessibilityPostNotification(element: any, notification: string): void;

// export function NSAccessibilityPostNotificationWithUserInfo(element: any, notification: string, userInfo: Map<string, any>): void;

interface NSAccessibilityProgressIndicator {
  accessibilityValue(): number;
}

interface NSAccessibilityRadioButton {
  accessibilityValue(): number;
}

// export function NSAccessibilityRoleDescription(role: string, subrole: string): string;

// export function NSAccessibilityRoleDescriptionForUIElement(element: any): string;

interface NSAccessibilityRow {
  accessibilityDisclosureLevel(): number;
  accessibilityIndex(): number;
}

// export function NSAccessibilitySetMayContainProtectedContent(flag: boolean): boolean;

interface NSAccessibilitySlider {
  accessibilityLabel(): string;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityValue(): any;
}

interface NSAccessibilityStaticText {
  accessibilityAttributedString(for_: NSRange): NSAttributedString;
  accessibilityValue(): string;
  accessibilityVisibleCharacterRange(): NSRange;
}

interface NSAccessibilityStepper {
  accessibilityLabel(): string;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityValue(): any;
}

interface NSAccessibilitySwitch {
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityValue(): string;
}

interface NSAccessibilityTable {
  accessibilityColumnHeaderUIElements(): any[];
  accessibilityColumns(): any[];
  accessibilityLabel(): string;
  accessibilityRowHeaderUIElements(): any[];
  accessibilityRows(): any[];
  accessibilitySelectedCells(): any[];
  accessibilitySelectedColumns(): any[];
  accessibilitySelectedRows(): any[];
  accessibilityVisibleCells(): any[];
  accessibilityVisibleColumns(): any[];
  accessibilityVisibleRows(): any[];
  setAccessibilitySelectedRows(_: any[]): void;
}

// export function NSAccessibilityUnignoredAncestor(element: any): any;

// export function NSAccessibilityUnignoredChildren(originalChildren: any[]): any[];

// export function NSAccessibilityUnignoredChildrenForOnlyChild(originalChild: any): any[];

// export function NSAccessibilityUnignoredDescendant(element: any): any;

export class NSActionCell extends NSCell {
}

export class NSAlert extends NSObject {
  accessoryView: NSView;
  setAccessoryView(_: NSView);
  alertStyle: NSAlert.Style;
  setAlertStyle(_: NSAlert.Style);
  buttons: NSButton[];
  delegate: any;
  setDelegate(_: any);
  helpAnchor: string;
  setHelpAnchor(_: string);
  icon: NSImage;
  setIcon(_: NSImage);
  informativeText: string;
  setInformativeText(_: string);
  messageText: string;
  setMessageText(_: string);
  showsHelp: boolean;
  setShowsHelp(_: boolean);
  showsSuppressionButton: boolean;
  setShowsSuppressionButton(_: boolean);
  suppressionButton: NSButton;
  window: NSWindow;
  addButton(withTitle: string): NSButton;
  beginSheetModal(for_: NSWindow, completionHandler?: (p1: number) => void): void;
  layout(): void;
  runModal(): number;
}

interface NSAlertDelegate {
  alertShowHelp(_: NSAlert): boolean;
}

export class NSAlignmentFeedbackFilter extends NSObject {
  static inputEventMask: NSEvent.EventTypeMask;
  alignmentFeedbackTokenForHorizontalMovement(in_?: NSView, previousX?: number, alignedX?: number, defaultX?: number): any;
  alignmentFeedbackTokenForMovement(in_?: NSView, previousPoint?: CGPoint, alignedPoint?: CGPoint, defaultPoint?: CGPoint): any;
  alignmentFeedbackTokenForVerticalMovement(in_?: NSView, previousY?: number, alignedY?: number, defaultY?: number): any;
  performFeedback(_: any[], performanceTime: NSHapticFeedback.NSHapticFeedbackManager.PerformanceTime): void;
  update(with_: NSEvent): void;
  update(withPanRecognizer: NSPanGestureRecognizer): void;
}

interface NSAlignmentFeedbackToken {
}

interface NSAnimatablePropertyContainer {
  animations: Map<string, any>;
  setAnimations(_: Map<string, any>);
  animation(forKey: string): any;
  createWithAnimator(): NSAnimatablePropertyContainer;
}

export class NSAnimation extends NSObject {
  isAnimating: boolean;
  animationBlockingMode: NSAnimation.BlockingMode;
  setAnimationBlockingMode(_: NSAnimation.BlockingMode);
  animationCurve: NSAnimation.Curve;
  setAnimationCurve(_: NSAnimation.Curve);
  currentProgress: number;
  setCurrentProgress(_: number);
  currentValue: number;
  delegate: any;
  setDelegate(_: any);
  duration: number;
  setDuration(_: number);
  frameRate: number;
  setFrameRate(_: number);
  progressMarks: number[];
  setProgressMarks(_: number[]);
  runLoopModesForAnimating: string[];
  addProgressMark(_: number): void;
  clearStart(): void;
  clearStop(): void;
  static createWithDurationWithAnimationCurve(_: number, animationCurve: NSAnimation.Curve): NSAnimation;
  removeProgressMark(_: number): void;
  start(): void;
  start(when: NSAnimation, reachesProgress: number): void;
  stop(): void;
  stop(when: NSAnimation, reachesProgress: number): void;
}

export class NSAnimationContext extends NSObject {
  static beginGrouping(): void;
  static endGrouping(): void;
  static runAnimationGroup(_: (p1: NSAnimationContext) => void): void;
  static runAnimationGroup(_: (p1: NSAnimationContext) => void, completionHandler?: () => void): void;
  allowsImplicitAnimation: boolean;
  setAllowsImplicitAnimation(_: boolean);
  completionHandler: () => void;
  setCompletionHandler(_: () => void);
  duration: number;
  setDuration(_: number);
  timingFunction: CAMediaTimingFunction;
  setTimingFunction(_: CAMediaTimingFunction);
  static currentContext: NSAnimationContext;
}

interface NSAnimationDelegate {
  animation(_: NSAnimation, valueForProgress: number): number;
  animation(_: NSAnimation, didReachProgressMark: number): void;
  animationDidEnd(_: NSAnimation): void;
  animationDidStop(_: NSAnimation): void;
  animationShouldStart(_: NSAnimation): boolean;
}

export class NSAppearance extends NSObject {
  allowsVibrancy: boolean;
  name: string;
  static currentAppearance: NSAppearance;
  setCurrentAppearance(_: NSAppearance);
  bestMatch(from: string[]): string;
  static createWithAppearanceNamedWithBundle(_: string, bundle?: Bundle): NSAppearance;
}

interface NSAppearanceCustomization {
  appearance: NSAppearance;
  setAppearance(_: NSAppearance);
  effectiveAppearance: NSAppearance;
}

export class NSApplication extends NSResponder {
  static detachDrawingThread(_: string, toTarget: any, with_?: any): void;
  isActive: boolean;
  applicationIconImage: NSImage;
  setApplicationIconImage(_: NSImage);
  isAutomaticCustomizeTouchBarMenuItemEnabled: boolean;
  setAutomaticCustomizeTouchBarMenuItemEnabled(_: boolean);
  currentEvent: NSEvent;
  currentSystemPresentationOptions: NSApplication.PresentationOptions;
  delegate: any;
  setDelegate(_: any);
  dockTile: NSDockTile;
  enabledRemoteNotificationTypes: NSApplication.RemoteNotificationType;
  isFullKeyboardAccessEnabled: boolean;
  helpMenu: NSMenu;
  setHelpMenu(_: NSMenu);
  isHidden: boolean;
  keyWindow: NSWindow;
  mainMenu: NSMenu;
  setMainMenu(_: NSMenu);
  mainWindow: NSWindow;
  modalWindow: NSWindow;
  occlusionState: NSApplication.OcclusionState;
  orderedDocuments: NSDocument[];
  orderedWindows: NSWindow[];
  presentationOptions: NSApplication.PresentationOptions;
  setPresentationOptions(_: NSApplication.PresentationOptions);
  isRegisteredForRemoteNotifications: boolean;
  isRunning: boolean;
  servicesMenu: NSMenu;
  setServicesMenu(_: NSMenu);
  servicesProvider: any;
  setServicesProvider(_: any);
  userInterfaceLayoutDirection: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection;
  windows: NSWindow[];
  windowsMenu: NSMenu;
  setWindowsMenu(_: NSMenu);
  static sharedApplication: NSApplication;
  abortModal(): void;
  activateContextHelpMode(_?: any): void;
  activate(ignoringOtherApps: boolean): void;
  activationPolicy(): NSRunningApplication.NSApplication.ActivationPolicy;
  addWindowsItem(_: NSWindow, title: string, filename: boolean): void;
  arrangeInFront(_?: any): void;
  beginModalSession(for_: NSWindow): any;
  cancelUserAttentionRequest(_: number): void;
  changeWindowsItem(_: NSWindow, title: string, filename: boolean): void;
  completeStateRestoration(): void;
  deactivate(): void;
  disableRelaunchOnLogin(): void;
  discardEvents(matching: NSEvent.EventTypeMask, before?: NSEvent): void;
  enableRelaunchOnLogin(): void;
  endModalSession(_: any): void;
  enumerateWindows(options: NSApplication.WindowListOptions, using: (p1: NSWindow, p2: boolean) => void): void;
  extendStateRestoration(): void;
  finishLaunching(): void;
  hide(_?: any): void;
  hideOtherApplications(_?: any): void;
  miniaturizeAll(_?: any): void;
  nextEvent(matching: NSEvent.EventTypeMask, until?: Date, inMode?: string, dequeue?: boolean): NSEvent;
  orderFrontCharacterPalette(_?: any): void;
  orderFrontColorPanel(_?: any): void;
  orderFrontStandardAboutPanel(_?: any): void;
  orderFrontStandardAboutPanel(options: Map<string, any>): void;
  postEvent(_: NSEvent, atStart: boolean): void;
  preventWindowOrdering(): void;
  registerForRemoteNotifications(matching: NSApplication.RemoteNotificationType): void;
  registerForRemoteNotifications(): void;
  registerServicesMenuSendTypes(_: string[], returnTypes: string[]): void;
  registerUserInterfaceItemSearchHandler(_: any): void;
  removeWindowsItem(_: NSWindow): void;
  reply(toApplicationShouldTerminate: boolean): void;
  reply(toOpenOrPrint: NSApplication.DelegateReply): void;
  reportException(_: NSException): void;
  requestUserAttention(_: NSApplication.RequestUserAttentionType): number;
  restoreWindow(withIdentifier: string, state: NSCoder, completionHandler?: (p1: NSWindow, p2: Error) => void): boolean;
  run(): void;
  runModal(for_: NSWindow): number;
  runModalSession(_: any): number;
  runPageLayout(_?: any): void;
  searchString(_: string, inUserInterfaceItemString: string, range: NSRange, found?: NSRange): boolean;
  sendAction(_: string, to?: any, from?: any): boolean;
  sendEvent(_: NSEvent): void;
  setActivationPolicy(_: NSRunningApplication.NSApplication.ActivationPolicy): boolean;
  setWindowsNeedUpdate(_: boolean): void;
  showHelp(_?: any): void;
  stop(_?: any): void;
  stopModal(): void;
  stopModal(withCode: number): void;
  target(forAction: string): any;
  target(forAction: string, to?: any, from?: any): any;
  terminate(_?: any): void;
  toggleTouchBarCustomizationPalette(_?: any): void;
  unhide(_?: any): void;
  unhideAllApplications(_?: any): void;
  unhideWithoutActivation(): void;
  unregisterForRemoteNotifications(): void;
  unregisterUserInterfaceItemSearchHandler(_: any): void;
  updateWindows(): void;
  updateWindowsItem(_: NSWindow): void;
  window(withWindowNumber: number): NSWindow;
}

interface NSApplicationDelegate {
  application(_: NSApplication, continue_: NSUserActivity, restorationHandler: (p1: any[]) => void): boolean;
  application(_: NSApplication, open: URL[]): void;
  application(_: NSApplication, openFile: string): boolean;
  application(_: NSApplication, openFiles: string[]): void;
  application(_: NSApplication, openTempFile: string): boolean;
  application(_: NSApplication, delegateHandlesKey: string): boolean;
  application(_: any, openFileWithoutUI: string): boolean;
  application(_: NSApplication, printFile: string): boolean;
  application(_: NSApplication, printFiles: string[], withSettings: Map<string, any>, showPrintPanels: boolean): NSApplication.PrintReply;
  application(_: NSApplication, userDidAcceptCloudKitShareWith: CKShare.Metadata): void;
  application(_: NSApplication, didUpdate: NSUserActivity): void;
  application(_: NSApplication, didFailToContinueUserActivityWithType: string, error: Error): void;
  application(_: NSApplication, willPresentError: Error): Error;
  application(_: NSApplication, didRegisterForRemoteNotificationsWithDeviceToken: Data): void;
  application(_: NSApplication, didFailToRegisterForRemoteNotificationsWithError: Error): void;
  application(_: NSApplication, didReceiveRemoteNotification: Map<string, any>): void;
  application(_: NSApplication, willEncodeRestorableState: NSCoder): void;
  application(_: NSApplication, didDecodeRestorableState: NSCoder): void;
  application(_: NSApplication, willContinueUserActivityWithType: string): boolean;
  applicationDidBecomeActive(_: Notification): void;
  applicationDidChangeOcclusionState(_: Notification): void;
  applicationDidChangeScreenParameters(_: Notification): void;
  applicationDidFinishLaunching(_: Notification): void;
  applicationDidHide(_: Notification): void;
  applicationDidResignActive(_: Notification): void;
  applicationDidUnhide(_: Notification): void;
  applicationDidUpdate(_: Notification): void;
  applicationDockMenu(_: NSApplication): NSMenu;
  applicationOpenUntitledFile(_: NSApplication): boolean;
  applicationShouldHandleReopen(_: NSApplication, hasVisibleWindows: boolean): boolean;
  applicationShouldOpenUntitledFile(_: NSApplication): boolean;
  applicationShouldTerminate(_: NSApplication): NSApplication.TerminateReply;
  applicationShouldTerminateAfterLastWindowClosed(_: NSApplication): boolean;
  applicationWillBecomeActive(_: Notification): void;
  applicationWillFinishLaunching(_: Notification): void;
  applicationWillHide(_: Notification): void;
  applicationWillResignActive(_: Notification): void;
  applicationWillTerminate(_: Notification): void;
  applicationWillUnhide(_: Notification): void;
  applicationWillUpdate(_: Notification): void;
}

// export function NSApplicationLoad(): boolean;

// export function NSApplicationMain(argc: number, argv: string): never;

export class NSArrayController extends NSObjectController {
  alwaysUsesMultipleValuesMarker: boolean;
  setAlwaysUsesMultipleValuesMarker(_: boolean);
  arrangedObjects: any;
  automaticRearrangementKeyPaths: string[];
  automaticallyRearrangesObjects: boolean;
  setAutomaticallyRearrangesObjects(_: boolean);
  avoidsEmptySelection: boolean;
  setAvoidsEmptySelection(_: boolean);
  canInsert: boolean;
  canSelectNext: boolean;
  canSelectPrevious: boolean;
  clearsFilterPredicateOnInsertion: boolean;
  setClearsFilterPredicateOnInsertion(_: boolean);
  filterPredicate: NSPredicate;
  setFilterPredicate(_: NSPredicate);
  preservesSelection: boolean;
  setPreservesSelection(_: boolean);
  selectionIndex: number;
  selectionIndexes: IndexSet;
  selectsInsertedObjects: boolean;
  setSelectsInsertedObjects(_: boolean);
  sortDescriptors: NSSortDescriptor[];
  setSortDescriptors(_: NSSortDescriptor[]);
  // @ts-ignore 
  add(contentsOf: any[]): void;
  addSelectedObjects(_: any[]): boolean;
  addSelectionIndexes(_: IndexSet): boolean;
  arrange(_: any[]): any[];
  didChangeArrangementCriteria(): void;
  insert(_?: any): void;
  insert(_: any, atArrangedObjectIndex: number): void;
  insert(contentsOf: any[], atArrangedObjectIndexes: IndexSet): void;
  rearrangeObjects(): void;
  // @ts-ignore 
  remove(atArrangedObjectIndex: number): void;
  // @ts-ignore 
  remove(contentsOf: any[]): void;
  // @ts-ignore 
  remove(atArrangedObjectIndexes: IndexSet): void;
  removeSelectedObjects(_: any[]): boolean;
  removeSelectionIndexes(_: IndexSet): boolean;
  selectNext(_?: any): void;
  selectPrevious(_?: any): void;
  setSelectedObjects(_: any[]): boolean;
  setSelectionIndex(_: number): boolean;
  setSelectionIndexes(_: IndexSet): boolean;
}

// export function NSAvailableWindowDepths(): NSGraphics.NSWindow.Depth;

// export function NSBeep(): void;

// export function NSBestDepth(colorSpace: string, bps: number, bpp: number, planar: boolean, exactMatch: boolean): NSGraphics.NSWindow.Depth;

export class NSBezierPath extends NSObject {
  static clip(_: CGRect): void;
  static drawPackedGlyphs(_: string, at: CGPoint): void;
  static fill(_: CGRect): void;
  static strokeLine(from: CGPoint, to: CGPoint): void;
  static stroke(_: CGRect): void;
  bezierPathByFlatteningPath: NSBezierPath;
  bezierPathByReversingPath: NSBezierPath;
  bounds: CGRect;
  controlPointBounds: CGRect;
  currentPoint: CGPoint;
  elementCount: number;
  isEmpty: boolean;
  flatness: number;
  setFlatness(_: number);
  lineCapStyle: NSBezierPath.LineCapStyle;
  setLineCapStyle(_: NSBezierPath.LineCapStyle);
  lineJoinStyle: NSBezierPath.LineJoinStyle;
  setLineJoinStyle(_: NSBezierPath.LineJoinStyle);
  lineWidth: number;
  setLineWidth(_: number);
  miterLimit: number;
  setMiterLimit(_: number);
  windingRule: NSBezierPath.WindingRule;
  setWindingRule(_: NSBezierPath.WindingRule);
  static defaultFlatness: number;
  setDefaultFlatness(_: number);
  static defaultLineCapStyle: NSBezierPath.LineCapStyle;
  setDefaultLineCapStyle(_: NSBezierPath.LineCapStyle);
  static defaultLineJoinStyle: NSBezierPath.LineJoinStyle;
  setDefaultLineJoinStyle(_: NSBezierPath.LineJoinStyle);
  static defaultLineWidth: number;
  setDefaultLineWidth(_: number);
  static defaultMiterLimit: number;
  setDefaultMiterLimit(_: number);
  static defaultWindingRule: NSBezierPath.WindingRule;
  setDefaultWindingRule(_: NSBezierPath.WindingRule);
  addClip(): void;
  append(_: NSBezierPath): void;
  appendArc(from: CGPoint, to: CGPoint, radius: number): void;
  appendArc(withCenter: CGPoint, radius: number, startAngle: number, endAngle: number): void;
  appendArc(withCenter: CGPoint, radius: number, startAngle: number, endAngle: number, clockwise: boolean): void;
  append(withCGGlyph: number, in_: NSFont): void;
  append(withCGGlyphs: number, count: number, in_: NSFont): void;
  appendOval(in_: CGRect): void;
  appendPoints(_: CGPoint, count: number): void;
  appendRect(_: CGRect): void;
  appendRoundedRect(_: CGRect, xRadius: number, yRadius: number): void;
  close(): void;
  contains(_: CGPoint): boolean;
  curve(to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): void;
  element(at: number): NSBezierPath.ElementType;
  element(at: number, associatedPoints?: CGPoint): NSBezierPath.ElementType;
  fill(): void;
  getLineDash(_?: number, count?: number, phase?: number): void;
  line(to: CGPoint): void;
  move(to: CGPoint): void;
  relativeCurve(to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): void;
  relativeLine(to: CGPoint): void;
  relativeMove(to: CGPoint): void;
  removeAllPoints(): void;
  setAssociatedPoints(_?: CGPoint, at?: number): void;
  setClip(): void;
  setLineDash(_?: number, count?: number, phase?: number): void;
  stroke(): void;
  transform(using: AffineTransform): void;
}

export class NSBindingSelectionMarker extends NSObject {
  static defaultPlaceholder(for_?: NSBindingSelectionMarker, on?: typeof NSObject, withBinding?: string): any;
  static setDefaultPlaceholder(_?: any, for_?: NSBindingSelectionMarker, on?: typeof NSObject, withBinding?: string): void;
  static multipleValuesSelectionMarker: NSBindingSelectionMarker;
  static noSelectionMarker: NSBindingSelectionMarker;
  static notApplicableSelectionMarker: NSBindingSelectionMarker;
}

// @ts-ignore
export class NSBitmapImageRep extends NSImageRep {
  static tiffRepresentationOfImageReps(in_: NSImageRep[]): Data;
  static tiffRepresentationOfImageReps(in_: NSImageRep[], using: NSBitmapImageRep.TIFFCompression, factor: number): Data;
  static getTIFFCompressionTypes(_?: NSBitmapImageRep.TIFFCompression, count?: number): void;
// @ts-ignore 
    static imageReps(with_: Data): NSImageRep[];
  static localizedName(forTIFFCompressionType: NSBitmapImageRep.TIFFCompression): string;
  static representationOfImageReps(in_: NSImageRep[], using: NSBitmapImageRep.FileType, properties: Map<string, any>): Data;
  CGImage: any;
  TIFFRepresentation: Data;
  bitmapData: string;
  bitmapFormat: NSBitmapImageRep.Format;
  bitsPerPixel: number;
  bytesPerPlane: number;
  bytesPerRow: number;
  colorSpace: NSColorSpace;
  numberOfPlanes: number;
  isPlanar: boolean;
  samplesPerPixel: number;
  tiffRepresentation(using: NSBitmapImageRep.TIFFCompression, factor: number): Data;
  converting(to: NSColorSpace, renderingIntent: NSGraphics.NSColorRenderingIntent): NSBitmapImageRep;
  retagging(with_: NSColorSpace): NSBitmapImageRep;
  canBeCompressed(using: NSBitmapImageRep.TIFFCompression): boolean;
  colorAt(x: number, y: number): NSColor;
  colorize(byMappingGray: number, to?: NSColor, blackMapping?: NSColor, whiteMapping?: NSColor): void;
  getBitmapDataPlanes(_?: string): void;
  getCompression(_?: NSBitmapImageRep.TIFFCompression, factor?: number): void;
  getPixel(_: number, atX: number, y: number): void;
  incrementalLoad(from: Data, complete: boolean): number;
  static createWithForIncrementalLoad(): NSBitmapImageRep;
  static createWithBitmapDataPlanesWithPixelsWideWithPixelsHighWithBitsPerSampleWithSamplesPerPixelWithHasAlphaWithIsPlanarWithColorSpaceNameWithBitmapFormatWithBytesPerRowWithBitsPerPixel(_?: string, pixelsWide?: number, pixelsHigh?: number, bitsPerSample?: number, samplesPerPixel?: number, hasAlpha?: boolean, isPlanar?: boolean, colorSpaceName?: string, bitmapFormat?: NSBitmapImageRep.Format, bytesPerRow?: number, bitsPerPixel?: number): NSBitmapImageRep;
  static createWithBitmapDataPlanesWithPixelsWideWithPixelsHighWithBitsPerSampleWithSamplesPerPixelWithHasAlphaWithIsPlanarWithColorSpaceNameWithBytesPerRowWithBitsPerPixel(_?: string, pixelsWide?: number, pixelsHigh?: number, bitsPerSample?: number, samplesPerPixel?: number, hasAlpha?: boolean, isPlanar?: boolean, colorSpaceName?: string, bytesPerRow?: number, bitsPerPixel?: number): NSBitmapImageRep;
  static createWithCgImage(_: any): NSBitmapImageRep;
  static createWithCiImage(_: CIImage): NSBitmapImageRep;
  static createWithData(_: Data): NSBitmapImageRep;
  representation(using: NSBitmapImageRep.FileType, properties: Map<string, any>): Data;
  setColor(_: NSColor, atX: number, y: number): void;
  setCompression(_: NSBitmapImageRep.TIFFCompression, factor: number): void;
  setPixel(_: number, atX: number, y: number): void;
  setProperty(_: string, withValue?: any): void;
  // @ts-ignore 
  value(forProperty: string): any;
}

// export function NSBitsPerPixelFromDepth(depth: NSGraphics.NSWindow.Depth): number;

// export function NSBitsPerSampleFromDepth(depth: NSGraphics.NSWindow.Depth): number;

export class NSBox extends NSView {
  borderColor: NSColor;
  setBorderColor(_: NSColor);
  borderRect: CGRect;
  borderWidth: number;
  setBorderWidth(_: number);
  boxType: NSBox.BoxType;
  setBoxType(_: NSBox.BoxType);
  contentView: NSView;
  setContentView(_: NSView);
  contentViewMargins: CGSize;
  setContentViewMargins(_: CGSize);
  cornerRadius: number;
  setCornerRadius(_: number);
  fillColor: NSColor;
  setFillColor(_: NSColor);
  title: string;
  setTitle(_: string);
  titleCell: any;
  titleFont: NSFont;
  setTitleFont(_: NSFont);
  titlePosition: NSBox.TitlePosition;
  setTitlePosition(_: NSBox.TitlePosition);
  titleRect: CGRect;
  isTransparent: boolean;
  setTransparent(_: boolean);
  setFrameFromContentFrame(_: CGRect): void;
  sizeToFit(): void;
}

export type Box = NSBox

export class NSBrowser extends NSControl {
  static removeSavedColumns(withAutosaveName: string): void;
  allowsBranchSelection: boolean;
  setAllowsBranchSelection(_: boolean);
  allowsEmptySelection: boolean;
  setAllowsEmptySelection(_: boolean);
  allowsMultipleSelection: boolean;
  setAllowsMultipleSelection(_: boolean);
  allowsTypeSelect: boolean;
  setAllowsTypeSelect(_: boolean);
  autohidesScroller: boolean;
  setAutohidesScroller(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  cellPrototype: any;
  setCellPrototype(_: any);
  clickedColumn: number;
  clickedRow: number;
  columnResizingType: NSBrowser.ColumnResizingType;
  setColumnResizingType(_: NSBrowser.ColumnResizingType);
  columnsAutosaveName: string;
  setColumnsAutosaveName(_: string);
  delegate: any;
  setDelegate(_: any);
  doubleAction: string;
  setDoubleAction(_: string);
  firstVisibleColumn: number;
  hasHorizontalScroller: boolean;
  setHasHorizontalScroller(_: boolean);
  lastColumn: number;
  setLastColumn(_: number);
  lastVisibleColumn: number;
  isLoaded: boolean;
  maxVisibleColumns: number;
  setMaxVisibleColumns(_: number);
  minColumnWidth: number;
  setMinColumnWidth(_: number);
  numberOfVisibleColumns: number;
  pathSeparator: string;
  setPathSeparator(_: string);
  prefersAllColumnUserResizing: boolean;
  setPrefersAllColumnUserResizing(_: boolean);
  reusesColumns: boolean;
  setReusesColumns(_: boolean);
  rowHeight: number;
  setRowHeight(_: number);
  selectedCells: NSCell[];
  selectedColumn: number;
  selectionIndexPath: IndexPath;
  setSelectionIndexPath(_: IndexPath);
  selectionIndexPaths: IndexPath[];
  setSelectionIndexPaths(_: IndexPath[]);
  sendsActionOnArrowKeys: boolean;
  setSendsActionOnArrowKeys(_: boolean);
  separatesColumns: boolean;
  setSeparatesColumns(_: boolean);
  takesTitleFromPreviousColumn: boolean;
  setTakesTitleFromPreviousColumn(_: boolean);
  titleHeight: number;
  isTitled: boolean;
  setTitled(_: boolean);
  static cellClass: typeof NSObject;
  addColumn(): void;
  canDragRows(with_: IndexSet, inColumn: number, with_2: NSEvent): boolean;
  columnContentWidth(forColumnWidth: number): number;
  columnWidth(forColumnContentWidth: number): number;
  defaultColumnWidth(): number;
  doClick(_?: any): void;
  doDoubleClick(_?: any): void;
  draggingImageForRows(with_: IndexSet, inColumn: number, with_2: NSEvent, offset?: CGPoint): NSImage;
  drawTitle(ofColumn: number, in_: CGRect): void;
  editItem(at: IndexPath, with_?: NSEvent, select?: boolean): void;
  // @ts-ignore 
  frame(ofColumn: number): CGRect;
  // @ts-ignore 
  frame(ofInsideOfColumn: number): CGRect;
  // @ts-ignore 
  frame(ofRow: number, inColumn: number): CGRect;
  getRow(_?: number, column?: number, for_?: CGPoint): boolean;
  indexPath(forColumn: number): IndexPath;
  isLeafItem(_?: any): boolean;
  item(at: IndexPath): any;
  item(atRow: number, inColumn: number): any;
  loadColumnZero(): void;
  loadedCell(atRow: number, column: number): any;
  noteHeightOfRowsWithIndexesChanged(_: IndexSet, inColumn: number): void;
  parentForItems(inColumn: number): any;
  path(): string;
  path(toColumn: number): string;
  reloadColumn(_: number): void;
  reloadData(forRowIndexes: IndexSet, inColumn: number): void;
  scrollColumnToVisible(_: number): void;
  scrollColumnsLeft(by: number): void;
  scrollColumnsRight(by: number): void;
  scrollRowToVisible(_: number, inColumn: number): void;
  selectRow(_: number, inColumn: number): void;
  selectRowIndexes(_: IndexSet, inColumn: number): void;
  // @ts-ignore 
  // dupe name w instance property   selectedCell(inColumn: number): any;
  selectedRow(inColumn: number): number;
  selectedRowIndexes(inColumn: number): IndexSet;
  // @ts-ignore 
  sendAction(): boolean;
  setCellClass(_: typeof NSObject): void;
  setDefaultColumnWidth(_: number): void;
  setDraggingSourceOperationMask(_: NSDragging.NSDragOperation, forLocal: boolean): void;
  setPath(_: string): boolean;
  setTitle(_: string, ofColumn: number): void;
  setWidth(_: number, ofColumn: number): void;
  tile(): void;
  titleFrame(ofColumn: number): CGRect;
  title(ofColumn: number): string;
  validateVisibleColumns(): void;
  width(ofColumn: number): number;
}

export type Browser = NSBrowser

export class NSBrowserCell extends NSCell {
  alternateImage: NSImage;
  setAlternateImage(_: NSImage);
  isLeaf: boolean;
  setLeaf(_: boolean);
  isLoaded: boolean;
  setLoaded(_: boolean);
  static branchImage: NSImage;
  static highlightedBranchImage: NSImage;
  // @ts-ignore 
  highlightColor(in_: NSView): NSColor;
  reset(): void;
  set(): void;
}

interface NSBrowserDelegate {
  browser(_: NSBrowser, numberOfRowsInColumn: number): number;
  browser(_: NSBrowser, createRowsForColumn: number, in_: NSMatrix): void;
  browser(_: NSBrowser, numberOfChildrenOfItem?: any): number;
  browser(_: NSBrowser, child: number, ofItem?: any): any;
  browser(_: NSBrowser, isLeafItem?: any): boolean;
  browser(_: NSBrowser, objectValueForItem?: any): any;
  browser(_: NSBrowser, heightOfRow: number, inColumn: number): number;
  browser(_: NSBrowser, didChangeLastColumn: number, toColumn: number): void;
  browser(_: NSBrowser, setObjectValue?: any, forItem?: any): void;
  browser(_: NSBrowser, shouldEditItem?: any): boolean;
  browser(_: NSBrowser, willDisplayCell: any, atRow: number, column: number): void;
  browser(_: NSBrowser, titleOfColumn: number): string;
  browser(_: NSBrowser, selectCellWith: string, inColumn: number): boolean;
  browser(_: NSBrowser, selectRow: number, inColumn: number): boolean;
  browser(_: NSBrowser, isColumnValid: number): boolean;
  browser(_: NSBrowser, headerViewControllerForItem?: any): NSViewController;
  browser(_: NSBrowser, selectionIndexesForProposedSelection: IndexSet, inColumn: number): IndexSet;
  browser(_: NSBrowser, shouldSizeColumn: number, forUserResize: boolean, toWidth: number): number;
  browser(_: NSBrowser, sizeToFitWidthOfColumn: number): number;
  browser(_: NSBrowser, previewViewControllerForLeafItem: any): NSViewController;
  browser(_: NSBrowser, shouldShowCellExpansionForRow: number, column: number): boolean;
  browser(_: NSBrowser, writeRowsWith: IndexSet, inColumn: number, to: NSPasteboard): boolean;
  browser(_: NSBrowser, canDragRowsWith: IndexSet, inColumn: number, with_: NSEvent): boolean;
  browser(_: NSBrowser, draggingImageForRowsWith: IndexSet, inColumn: number, with_: NSEvent, offset: CGPoint): NSImage;
  browser(_: NSBrowser, validateDrop: any, proposedRow: number, column: number, dropOperation: NSBrowser.DropOperation): NSDragging.NSDragOperation;
  browser(_: NSBrowser, acceptDrop: any, atRow: number, column: number, dropOperation: NSBrowser.DropOperation): boolean;
  browser(_: NSBrowser, typeSelectStringForRow: number, inColumn: number): string;
  browser(_: NSBrowser, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
  browser(_: NSBrowser, nextTypeSelectMatchFromRow: number, toRow: number, inColumn: number, for_?: string): number;
  browserColumnConfigurationDidChange(_: Notification): void;
  browserDidScroll(_: NSBrowser): void;
  browserWillScroll(_: NSBrowser): void;
  rootItem(for_: NSBrowser): any;
}

export class NSButton extends NSControl {
  allowsMixedState: boolean;
  setAllowsMixedState(_: boolean);
  alternateImage: NSImage;
  setAlternateImage(_: NSImage);
  alternateTitle: string;
  setAlternateTitle(_: string);
  attributedAlternateTitle: NSAttributedString;
  setAttributedAlternateTitle(_: NSAttributedString);
  attributedTitle: NSAttributedString;
  setAttributedTitle(_: NSAttributedString);
  bezelColor: NSColor;
  setBezelColor(_: NSColor);
  bezelStyle: NSButtonCell.NSButton.BezelStyle;
  setBezelStyle(_: NSButtonCell.NSButton.BezelStyle);
  isBordered: boolean;
  setBordered(_: boolean);
  contentTintColor: NSColor;
  setContentTintColor(_: NSColor);
  image: NSImage;
  setImage(_: NSImage);
  imageHugsTitle: boolean;
  setImageHugsTitle(_: boolean);
  imagePosition: NSCell.NSControl.ImagePosition;
  setImagePosition(_: NSCell.NSControl.ImagePosition);
  imageScaling: NSCell.NSImageScaling;
  setImageScaling(_: NSCell.NSImageScaling);
  keyEquivalent: string;
  setKeyEquivalent(_: string);
  keyEquivalentModifierMask: NSEvent.ModifierFlags;
  setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags);
  maxAcceleratorLevel: number;
  setMaxAcceleratorLevel(_: number);
  showsBorderOnlyWhileMouseInside: boolean;
  setShowsBorderOnlyWhileMouseInside(_: boolean);
  sound: NSSound;
  setSound(_: NSSound);
  isSpringLoaded: boolean;
  setSpringLoaded(_: boolean);
  state: number;
  setState(_: number);
  title: string;
  setTitle(_: string);
  isTransparent: boolean;
  setTransparent(_: boolean);
  getPeriodicDelay(_: number, interval: number): void;
  highlight(_: boolean): void;
  setButtonType(_: NSButtonCell.NSButton.ButtonType): void;
  setNextState(): void;
  setPeriodicDelay(_: number, interval: number): void;
}

export type Button = NSButton

export class NSButtonCell extends NSActionCell {
  alternateImage: NSImage;
  setAlternateImage(_: NSImage);
  alternateTitle: string;
  setAlternateTitle(_: string);
  attributedAlternateTitle: NSAttributedString;
  setAttributedAlternateTitle(_: NSAttributedString);
  attributedTitle: NSAttributedString;
  setAttributedTitle(_: NSAttributedString);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  bezelStyle: NSButtonCell.NSButton.BezelStyle;
  setBezelStyle(_: NSButtonCell.NSButton.BezelStyle);
  highlightsBy: NSCell.StyleMask;
  setHighlightsBy(_: NSCell.StyleMask);
  imageDimsWhenDisabled: boolean;
  setImageDimsWhenDisabled(_: boolean);
  imagePosition: NSCell.NSControl.ImagePosition;
  setImagePosition(_: NSCell.NSControl.ImagePosition);
  imageScaling: NSCell.NSImageScaling;
  setImageScaling(_: NSCell.NSImageScaling);
  keyEquivalent: string;
  setKeyEquivalent(_: string);
  keyEquivalentModifierMask: NSEvent.ModifierFlags;
  setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags);
  showsBorderOnlyWhileMouseInside: boolean;
  setShowsBorderOnlyWhileMouseInside(_: boolean);
  showsStateBy: NSCell.StyleMask;
  setShowsStateBy(_: NSCell.StyleMask);
  sound: NSSound;
  setSound(_: NSSound);
  isTransparent: boolean;
  setTransparent(_: boolean);
  drawBezel(withFrame: CGRect, in_: NSView): void;
  drawImage(_: NSImage, withFrame: CGRect, in_: NSView): void;
  drawTitle(_: NSAttributedString, withFrame: CGRect, in_: NSView): CGRect;
  mouseEntered(with_: NSEvent): void;
  mouseExited(with_: NSEvent): void;
  setButtonType(_: NSButtonCell.NSButton.ButtonType): void;
  setPeriodicDelay(_: number, interval: number): void;
}

export class NSButtonTouchBarItem extends NSTouchBarItem {
  action: string;
  setAction(_: string);
  bezelColor: NSColor;
  setBezelColor(_: NSColor);
  customizationLabel: string;
  setCustomizationLabel(_: string);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  image: NSImage;
  setImage(_: NSImage);
  target: any;
  setTarget(_: any);
  title: string;
  setTitle(_: string);
}

export class NSCIImageRep extends NSImageRep {
  CIImage: CIImage;
  static createWithCiImage(_: CIImage): NSCIImageRep;
}

export class NSCandidateListTouchBarItem<CandidateType> extends NSTouchBarItem {
  allowsCollapsing: boolean;
  setAllowsCollapsing(_: boolean);
  allowsTextInputContextCandidates: boolean;
  setAllowsTextInputContextCandidates(_: boolean);
  attributedStringForCandidate: (p1: CandidateType, p2: number) => NSAttributedString;
  setAttributedStringForCandidate(_: (p1: CandidateType, p2: number) => NSAttributedString);
  isCandidateListVisible: boolean;
  candidates: CandidateType[];
  client: NSView;
  setClient(_: NSView);
  isCollapsed: boolean;
  setCollapsed(_: boolean);
  customizationLabel: string;
  setCustomizationLabel(_: string);
  delegate: any;
  setDelegate(_: any);
  setCandidates(_: CandidateType[], forSelectedRange: NSRange, in_?: string): void;
  update(withInsertionPointVisibility: boolean): void;
}

interface NSCandidateListTouchBarItemDelegate {
  candidateListTouchBarItem(_: NSCandidateListTouchBarItem<any>, beginSelectingCandidateAt: number): void;
  candidateListTouchBarItem(_: NSCandidateListTouchBarItem<any>, changeSelectionFromCandidateAt: number, to: number): void;
  candidateListTouchBarItem(_: NSCandidateListTouchBarItem<any>, endSelectingCandidateAt: number): void;
  candidateListTouchBarItem(_: NSCandidateListTouchBarItem<any>, changedCandidateListVisibility: boolean): void;
}

export class NSCell extends NSObject implements NSUserInterfaceItemIdentification {
  acceptsFirstResponder: boolean;
  action: string;
  setAction(_: string);
  alignment: NSText.NSTextAlignment;
  setAlignment(_: NSText.NSTextAlignment);
  allowsEditingTextAttributes: boolean;
  setAllowsEditingTextAttributes(_: boolean);
  allowsMixedState: boolean;
  setAllowsMixedState(_: boolean);
  allowsUndo: boolean;
  setAllowsUndo(_: boolean);
  attributedStringValue: NSAttributedString;
  setAttributedStringValue(_: NSAttributedString);
  backgroundStyle: NSCell.NSView.BackgroundStyle;
  setBackgroundStyle(_: NSCell.NSView.BackgroundStyle);
  baseWritingDirection: NSText.NSWritingDirection;
  setBaseWritingDirection(_: NSText.NSWritingDirection);
  isBezeled: boolean;
  setBezeled(_: boolean);
  isBordered: boolean;
  setBordered(_: boolean);
  cellSize: CGSize;
  isContinuous: boolean;
  setContinuous(_: boolean);
  controlSize: NSCell.NSControl.ControlSize;
  setControlSize(_: NSCell.NSControl.ControlSize);
  controlView: NSView;
  setControlView(_: NSView);
  doubleValue: number;
  setDoubleValue(_: number);
  isEditable: boolean;
  setEditable(_: boolean);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  floatValue: number;
  setFloatValue(_: number);
  focusRingType: NSGraphics.NSFocusRingType;
  setFocusRingType(_: NSGraphics.NSFocusRingType);
  font: NSFont;
  setFont(_: NSFont);
  formatter: Formatter;
  setFormatter(_: Formatter);
  hasValidObjectValue: boolean;
  isHighlighted: boolean;
  setHighlighted(_: boolean);
  image: NSImage;
  setImage(_: NSImage);
  importsGraphics: boolean;
  setImportsGraphics(_: boolean);
  intValue: number;
  setIntValue(_: number);
  integerValue: number;
  setIntegerValue(_: number);
  interiorBackgroundStyle: NSCell.NSView.BackgroundStyle;
  keyEquivalent: string;
  lineBreakMode: NSParagraphStyle.NSLineBreakMode;
  setLineBreakMode(_: NSParagraphStyle.NSLineBreakMode);
  menu: NSMenu;
  setMenu(_: NSMenu);
  mouseDownFlags: number;
  nextState: number;
  objectValue: any;
  setObjectValue(_: any);
  isOpaque: boolean;
  refusesFirstResponder: boolean;
  setRefusesFirstResponder(_: boolean);
  representedObject: any;
  setRepresentedObject(_: any);
  isScrollable: boolean;
  setScrollable(_: boolean);
  isSelectable: boolean;
  setSelectable(_: boolean);
  sendsActionOnEndEditing: boolean;
  setSendsActionOnEndEditing(_: boolean);
  showsFirstResponder: boolean;
  setShowsFirstResponder(_: boolean);
  state: number;
  setState(_: number);
  stringValue: string;
  setStringValue(_: string);
  tag: number;
  setTag(_: number);
  target: any;
  setTarget(_: any);
  title: string;
  setTitle(_: string);
  truncatesLastVisibleLine: boolean;
  setTruncatesLastVisibleLine(_: boolean);
  type: NSCell.CellType;
  setType(_: NSCell.CellType);
  userInterfaceLayoutDirection: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(_: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection);
  usesSingleLineMode: boolean;
  setUsesSingleLineMode(_: boolean);
  wantsNotificationForMarkedText: boolean;
  wraps: boolean;
  setWraps(_: boolean);
  static defaultFocusRingType: NSGraphics.NSFocusRingType;
  static defaultMenu: NSMenu;
  static prefersTrackingUntilMouseUp: boolean;
  identifier: string;
  setIdentifier(_: string);
  calcDrawInfo(_: CGRect): void;
  cellAttribute(_: NSCell.Attribute): number;
  // dupe name w instance property   cellSize(forBounds: CGRect): CGSize;
  compare(_: any): NSObjCRuntime.ComparisonResult;
  continueTracking(last: CGPoint, current: CGPoint, in_: NSView): boolean;
  draggingImageComponents(withFrame: CGRect, in_: NSView): NSDraggingImageComponent[];
  drawFocusRingMask(withFrame: CGRect, in_: NSView): void;
  drawInterior(withFrame: CGRect, in_: NSView): void;
  draw(withExpansionFrame: CGRect, in_: NSView): void;
  draw(withFrame: CGRect, in_: NSView): void;
  drawingRect(forBounds: CGRect): CGRect;
  edit(withFrame: CGRect, in_: NSView, editor: NSText, delegate?: any, event?: NSEvent): void;
  endEditing(_: NSText): void;
  expansionFrame(withFrame: CGRect, in_: NSView): CGRect;
  fieldEditor(for_: NSView): NSTextView;
  focusRingMaskBounds(forFrame: CGRect, in_: NSView): CGRect;
  getPeriodicDelay(_: number, interval: number): void;
  highlight(_: boolean, withFrame: CGRect, in_: NSView): void;
  highlightColor(withFrame: CGRect, in_: NSView): NSColor;
  hitTest(for_: NSEvent, in_: CGRect, of: NSView): NSCell.HitResult;
  imageRect(forBounds: CGRect): CGRect;
  static createWithImageCell(_?: NSImage): NSCell;
  static createWithTextCell(_: string): NSCell;
  // dupe name w instance property   menu(for_: NSEvent, in_: CGRect, of: NSView): NSMenu;
  performClick(_?: any): void;
  resetCursorRect(_: CGRect, in_: NSView): void;
  select(withFrame: CGRect, in_: NSView, editor: NSText, delegate?: any, start?: number, length?: number): void;
  sendAction(on: NSEvent.EventTypeMask): number;
  setCellAttribute(_: NSCell.Attribute, to: number): void;
  setNextState(): void;
  setUpFieldEditorAttributes(_: NSText): NSText;
  startTracking(at: CGPoint, in_: NSView): boolean;
  stopTracking(last: CGPoint, current: CGPoint, in_: NSView, mouseIsUp: boolean): void;
  takeDoubleValueFrom(_?: any): void;
  takeFloatValueFrom(_?: any): void;
  takeIntValueFrom(_?: any): void;
  takeIntegerValueFrom(_?: any): void;
  takeObjectValueFrom(_?: any): void;
  takeStringValueFrom(_?: any): void;
  titleRect(forBounds: CGRect): CGRect;
  trackMouse(with_: NSEvent, in_: CGRect, of: NSView, untilMouseUp: boolean): boolean;
}

interface NSChangeSpelling {
  changeSpelling(_?: any): void;
}

export class NSClickGestureRecognizer extends NSGestureRecognizer {
  buttonMask: number;
  setButtonMask(_: number);
  numberOfClicksRequired: number;
  setNumberOfClicksRequired(_: number);
  numberOfTouchesRequired: number;
  setNumberOfTouchesRequired(_: number);
}

export class NSClipView extends NSView {
  automaticallyAdjustsContentInsets: boolean;
  setAutomaticallyAdjustsContentInsets(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  contentInsets: NSEdgeInsets;
  setContentInsets(_: NSEdgeInsets);
  documentCursor: NSCursor;
  setDocumentCursor(_: NSCursor);
  documentRect: CGRect;
  documentView: NSView;
  setDocumentView(_: NSView);
  documentVisibleRect: CGRect;
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  constrainBoundsRect(_: CGRect): CGRect;
  // @ts-ignore 
  scroll(to: CGPoint): void;
  viewBoundsChanged(_: Notification): void;
  viewFrameChanged(_: Notification): void;
}

export type ClipView = NSClipView

interface NSCloudSharingServiceDelegate {
  options(for_: NSSharingService, share: NSItemProvider): NSSharingService.CloudKitOptions;
  sharingService(_: NSSharingService, didCompleteForItems: any[], error?: Error): void;
  sharingService(_: NSSharingService, didSave: CKShare): void;
  sharingService(_: NSSharingService, didStopSharing: CKShare): void;
}

interface NSCloudSharingValidation {
  cloudShare(for_: any): CKShare;
}

export class NSCollectionLayoutAnchor extends NSObject {
  edges: NSCollectionViewCompositionalLayout.NSDirectionalRectEdge;
  isAbsoluteOffset: boolean;
  isFractionalOffset: boolean;
  offset: CGPoint;
}

export class NSCollectionLayoutBoundarySupplementaryItem extends NSCollectionLayoutSupplementaryItem {
  alignment: NSCollectionViewCompositionalLayout.NSRectAlignment;
  extendsBoundary: boolean;
  setExtendsBoundary(_: boolean);
  offset: CGPoint;
  pinToVisibleBounds: boolean;
  setPinToVisibleBounds(_: boolean);
}

interface NSCollectionLayoutContainer {
  contentInsets: NSDirectionalEdgeInsets;
  contentSize: CGSize;
  effectiveContentInsets: NSDirectionalEdgeInsets;
  effectiveContentSize: CGSize;
}

export class NSCollectionLayoutDecorationItem extends NSCollectionLayoutItem {
  static createWithBackgroundDecorationItemWithElementKind(elementKind: string): NSCollectionLayoutDecorationItem;
  elementKind: string;
  zIndex: number;
  setZIndex(_: number);
}

export class NSCollectionLayoutDimension extends NSObject {
  static createWithAbsoluteDimension(_: number): NSCollectionLayoutDimension;
  static createWithEstimatedDimension(_: number): NSCollectionLayoutDimension;
  static createWithFractionalHeightDimension(_: number): NSCollectionLayoutDimension;
  static createWithFractionalWidthDimension(_: number): NSCollectionLayoutDimension;
  dimension: number;
  isAbsolute: boolean;
  isEstimated: boolean;
  isFractionalHeight: boolean;
  isFractionalWidth: boolean;
}

export class NSCollectionLayoutEdgeSpacing extends NSObject {
  bottom: NSCollectionLayoutSpacing;
  leading: NSCollectionLayoutSpacing;
  top: NSCollectionLayoutSpacing;
  trailing: NSCollectionLayoutSpacing;
}

interface NSCollectionLayoutEnvironment {
  container: any;
}

export class NSCollectionLayoutGroup extends NSCollectionLayoutItem {
  static createWithCustomGroupWithLayoutSizeWithItemProvider(layoutSize: NSCollectionLayoutSize, itemProvider: (p1: any) => NSCollectionLayoutGroupCustomItem[]): NSCollectionLayoutGroup;
  static createWithHorizontalGroupWithLayoutSizeWithSubitemWithCount(layoutSize: NSCollectionLayoutSize, subitem: NSCollectionLayoutItem, count: number): NSCollectionLayoutGroup;
  static createWithHorizontalGroupWithLayoutSizeWithSubitems(layoutSize: NSCollectionLayoutSize, subitems: NSCollectionLayoutItem[]): NSCollectionLayoutGroup;
  static createWithVerticalGroupWithLayoutSizeWithSubitemWithCount(layoutSize: NSCollectionLayoutSize, subitem: NSCollectionLayoutItem, count: number): NSCollectionLayoutGroup;
  static createWithVerticalGroupWithLayoutSizeWithSubitems(layoutSize: NSCollectionLayoutSize, subitems: NSCollectionLayoutItem[]): NSCollectionLayoutGroup;
  interItemSpacing: NSCollectionLayoutSpacing;
  setInterItemSpacing(_: NSCollectionLayoutSpacing);
  subitems: NSCollectionLayoutItem[];
  supplementaryItems: NSCollectionLayoutSupplementaryItem[];
  setSupplementaryItems(_: NSCollectionLayoutSupplementaryItem[]);
  visualDescription(): string;
}

export class NSCollectionLayoutGroupCustomItem extends NSObject {
  frame: CGRect;
  zIndex: number;
}

export class NSCollectionLayoutItem extends NSObject {
  contentInsets: NSDirectionalEdgeInsets;
  setContentInsets(_: NSDirectionalEdgeInsets);
  edgeSpacing: NSCollectionLayoutEdgeSpacing;
  setEdgeSpacing(_: NSCollectionLayoutEdgeSpacing);
  layoutSize: NSCollectionLayoutSize;
  supplementaryItems: NSCollectionLayoutSupplementaryItem[];
}

export class NSCollectionLayoutSection extends NSObject {
  boundarySupplementaryItems: NSCollectionLayoutBoundarySupplementaryItem[];
  setBoundarySupplementaryItems(_: NSCollectionLayoutBoundarySupplementaryItem[]);
  contentInsets: NSDirectionalEdgeInsets;
  setContentInsets(_: NSDirectionalEdgeInsets);
  decorationItems: NSCollectionLayoutDecorationItem[];
  setDecorationItems(_: NSCollectionLayoutDecorationItem[]);
  interGroupSpacing: number;
  setInterGroupSpacing(_: number);
  orthogonalScrollingBehavior: NSCollectionViewCompositionalLayout.NSCollectionLayoutSectionOrthogonalScrollingBehavior;
  setOrthogonalScrollingBehavior(_: NSCollectionViewCompositionalLayout.NSCollectionLayoutSectionOrthogonalScrollingBehavior);
  supplementariesFollowContentInsets: boolean;
  setSupplementariesFollowContentInsets(_: boolean);
  visibleItemsInvalidationHandler: (p1: any[], p2: CGPoint, p3: any) => void;
  setVisibleItemsInvalidationHandler(_: (p1: any[], p2: CGPoint, p3: any) => void);
}

export class NSCollectionLayoutSize extends NSObject {
  heightDimension: NSCollectionLayoutDimension;
  widthDimension: NSCollectionLayoutDimension;
}

export class NSCollectionLayoutSpacing extends NSObject {
  static createWithFixedSpacing(_: number): NSCollectionLayoutSpacing;
  static createWithFlexibleSpacing(_: number): NSCollectionLayoutSpacing;
  isFixedSpacing: boolean;
  isFlexibleSpacing: boolean;
  spacing: number;
}

export class NSCollectionLayoutSupplementaryItem extends NSCollectionLayoutItem {
  containerAnchor: NSCollectionLayoutAnchor;
  elementKind: string;
  itemAnchor: NSCollectionLayoutAnchor;
  zIndex: number;
  setZIndex(_: number);
}

interface NSCollectionLayoutVisibleItem {
  alpha: number;
  setAlpha(_: number);
  bounds: CGRect;
  center: CGPoint;
  setCenter(_: CGPoint);
  frame: CGRect;
  indexPath: IndexPath;
  isHidden: boolean;
  setHidden(_: boolean);
  name: string;
  representedElementCategory: NSCollectionViewLayout.NSCollectionElementCategory;
  representedElementKind: string;
  zIndex: number;
  setZIndex(_: number);
}

export class NSCollectionView extends NSView {
  allowsEmptySelection: boolean;
  setAllowsEmptySelection(_: boolean);
  allowsMultipleSelection: boolean;
  setAllowsMultipleSelection(_: boolean);
  backgroundColors: NSColor[];
  setBackgroundColors(_: NSColor[]);
  backgroundView: NSView;
  setBackgroundView(_: NSView);
  backgroundViewScrollsWithContent: boolean;
  setBackgroundViewScrollsWithContent(_: boolean);
  collectionViewLayout: NSCollectionViewLayout;
  setCollectionViewLayout(_: NSCollectionViewLayout);
  content: any[];
  setContent(_: any[]);
  dataSource: any;
  setDataSource(_: any);
  delegate: any;
  setDelegate(_: any);
  isFirstResponder: boolean;
  numberOfSections: number;
  prefetchDataSource: any;
  setPrefetchDataSource(_: any);
  isSelectable: boolean;
  setSelectable(_: boolean);
  selectionIndexPaths: Set<any>;
  setSelectionIndexPaths(_: Set<any>);
  selectionIndexes: IndexSet;
  setSelectionIndexes(_: IndexSet);
  deleteItems(at: Set<any>): void;
  deleteSections(_: IndexSet): void;
  deselectAll(_?: any): void;
  deselectItems(at: Set<any>): void;
  draggingImageForItems(at: Set<any>, with_: NSEvent, offset: CGPoint): NSImage;
  draggingImageForItems(at: IndexSet, with_: NSEvent, offset: CGPoint): NSImage;
  frameForItem(at: number): CGRect;
  frameForItem(at: number, withNumberOfItems: number): CGRect;
  indexPath(for_: NSCollectionViewItem): IndexPath;
  indexPathForItem(at: CGPoint): IndexPath;
  indexPathsForVisibleItems(): Set<any>;
  indexPathsForVisibleSupplementaryElements(ofKind: string): Set<any>;
  insertItems(at: Set<any>): void;
  insertSections(_: IndexSet): void;
  item(at: number): NSCollectionViewItem;
  item(at: IndexPath): NSCollectionViewItem;
  layoutAttributesForItem(at: IndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForSupplementaryElement(ofKind: string, at: IndexPath): NSCollectionViewLayoutAttributes;
  makeItem(withIdentifier: string, for_: IndexPath): NSCollectionViewItem;
  makeSupplementaryView(ofKind: string, withIdentifier: string, for_: IndexPath): NSView;
  moveItem(at: IndexPath, to: IndexPath): void;
  moveSection(_: number, toSection: number): void;
  numberOfItems(inSection: number): number;
  performBatchUpdates(_?: () => void, completionHandler?: (p1: boolean) => void): void;
  register(_?: typeof NSObject, forItemWithIdentifier?: string): void;
  register(_?: typeof NSObject, forSupplementaryViewOfKind?: string, withIdentifier?: string): void;
  register(_?: NSNib, forItemWithIdentifier?: string): void;
  register(_?: NSNib, forSupplementaryViewOfKind?: string, withIdentifier?: string): void;
  reloadData(): void;
  reloadItems(at: Set<any>): void;
  reloadSections(_: IndexSet): void;
  scrollToItems(at: Set<any>, scrollPosition: NSCollectionView.ScrollPosition): void;
  selectItems(at: Set<any>, scrollPosition: NSCollectionView.ScrollPosition): void;
  setDraggingSourceOperationMask(_: NSDragging.NSDragOperation, forLocal: boolean): void;
  supplementaryView(forElementKind: string, at: IndexPath): NSView;
  toggleSectionCollapse(_: any): void;
  visibleItems(): NSCollectionViewItem[];
  visibleSupplementaryViews(ofKind: string): NSView[];
}

export type CollectionView = NSCollectionView

export class NSCollectionViewCompositionalLayout extends NSCollectionViewLayout {
  configuration: NSCollectionViewCompositionalLayoutConfiguration;
  setConfiguration(_: NSCollectionViewCompositionalLayoutConfiguration);
  static createWithSection(_: NSCollectionLayoutSection): NSCollectionViewCompositionalLayout;
  static createWithSectionWithConfiguration(_: NSCollectionLayoutSection, configuration: NSCollectionViewCompositionalLayoutConfiguration): NSCollectionViewCompositionalLayout;
  static createWithSectionProvider(_: (p1: number, p2: any) => NSCollectionLayoutSection): NSCollectionViewCompositionalLayout;
  static createWithSectionProviderWithConfiguration(_: (p1: number, p2: any) => NSCollectionLayoutSection, configuration: NSCollectionViewCompositionalLayoutConfiguration): NSCollectionViewCompositionalLayout;
}

export class NSCollectionViewCompositionalLayoutConfiguration extends NSObject {
  boundarySupplementaryItems: NSCollectionLayoutBoundarySupplementaryItem[];
  setBoundarySupplementaryItems(_: NSCollectionLayoutBoundarySupplementaryItem[]);
  interSectionSpacing: number;
  setInterSectionSpacing(_: number);
  scrollDirection: NSCollectionViewFlowLayout.NSCollectionView.ScrollDirection;
  setScrollDirection(_: NSCollectionViewFlowLayout.NSCollectionView.ScrollDirection);
}

interface NSCollectionViewDataSource {
  collectionView(_: NSCollectionView, numberOfItemsInSection: number): number;
  collectionView(_: NSCollectionView, itemForRepresentedObjectAt: IndexPath): NSCollectionViewItem;
  collectionView(_: NSCollectionView, viewForSupplementaryElementOfKind: string, at: IndexPath): NSView;
  numberOfSections(in_: NSCollectionView): number;
}

interface NSCollectionViewDelegate {
  collectionView(_: NSCollectionView, canDragItemsAt: Set<any>, with_: NSEvent): boolean;
  collectionView(_: NSCollectionView, canDragItemsAt: IndexSet, with_: NSEvent): boolean;
  collectionView(_: NSCollectionView, writeItemsAt: Set<any>, to: NSPasteboard): boolean;
  collectionView(_: NSCollectionView, writeItemsAt: IndexSet, to: NSPasteboard): boolean;
  collectionView(_: NSCollectionView, draggingImageForItemsAt: Set<any>, with_: NSEvent, offset: CGPoint): NSImage;
  collectionView(_: NSCollectionView, draggingImageForItemsAt: IndexSet, with_: NSEvent, offset: CGPoint): NSImage;
  collectionView(_: NSCollectionView, validateDrop: any, proposedIndexPath: IndexPath, dropOperation: NSCollectionView.DropOperation): NSDragging.NSDragOperation;
  collectionView(_: NSCollectionView, validateDrop: any, proposedIndex: number, dropOperation: NSCollectionView.DropOperation): NSDragging.NSDragOperation;
  collectionView(_: NSCollectionView, acceptDrop: any, indexPath: IndexPath, dropOperation: NSCollectionView.DropOperation): boolean;
  collectionView(_: NSCollectionView, acceptDrop: any, index: number, dropOperation: NSCollectionView.DropOperation): boolean;
  collectionView(_: NSCollectionView, pasteboardWriterForItemAt: IndexPath): any;
  collectionView(_: NSCollectionView, pasteboardWriterForItemAt: number): any;
  collectionView(_: NSCollectionView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItemsAt: Set<any>): void;
  collectionView(_: NSCollectionView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItemsAt: IndexSet): void;
  collectionView(_: NSCollectionView, draggingSession: NSDraggingSession, endedAt: CGPoint, dragOperation: NSDragging.NSDragOperation): void;
  collectionView(_: NSCollectionView, updateDraggingItemsForDrag: any): void;
  collectionView(_: NSCollectionView, shouldChangeItemsAt: Set<any>, to: NSCollectionView.NSCollectionViewItem.HighlightState): Set<any>;
  collectionView(_: NSCollectionView, didChangeItemsAt: Set<any>, to: NSCollectionView.NSCollectionViewItem.HighlightState): void;
  collectionView(_: NSCollectionView, shouldSelectItemsAt: Set<any>): Set<any>;
  collectionView(_: NSCollectionView, shouldDeselectItemsAt: Set<any>): Set<any>;
  collectionView(_: NSCollectionView, didSelectItemsAt: Set<any>): void;
  collectionView(_: NSCollectionView, didDeselectItemsAt: Set<any>): void;
  collectionView(_: NSCollectionView, willDisplay: NSCollectionViewItem, forRepresentedObjectAt: IndexPath): void;
  collectionView(_: NSCollectionView, willDisplaySupplementaryView: NSView, forElementKind: string, at: IndexPath): void;
  collectionView(_: NSCollectionView, didEndDisplaying: NSCollectionViewItem, forRepresentedObjectAt: IndexPath): void;
  collectionView(_: NSCollectionView, didEndDisplayingSupplementaryView: NSView, forElementOfKind: string, at: IndexPath): void;
  collectionView(_: NSCollectionView, transitionLayoutForOldLayout: NSCollectionViewLayout, newLayout: NSCollectionViewLayout): NSCollectionViewTransitionLayout;
}

interface NSCollectionViewDelegateFlowLayout {
  collectionView(_: NSCollectionView, layout: NSCollectionViewLayout, sizeForItemAt: IndexPath): CGSize;
  collectionView(_: NSCollectionView, layout: NSCollectionViewLayout, insetForSectionAt: number): NSEdgeInsets;
  collectionView(_: NSCollectionView, layout: NSCollectionViewLayout, minimumLineSpacingForSectionAt: number): number;
  collectionView(_: NSCollectionView, layout: NSCollectionViewLayout, minimumInteritemSpacingForSectionAt: number): number;
  collectionView(_: NSCollectionView, layout: NSCollectionViewLayout, referenceSizeForHeaderInSection: number): CGSize;
  collectionView(_: NSCollectionView, layout: NSCollectionViewLayout, referenceSizeForFooterInSection: number): CGSize;
}

export class NSCollectionViewDiffableDataSourceReference<SectionIdentifierType, ItemIdentifierType> extends NSObject {
  supplementaryViewProvider: (p1: NSCollectionView, p2: string, p3: IndexPath) => NSView;
  setSupplementaryViewProvider(_: (p1: NSCollectionView, p2: string, p3: IndexPath) => NSView);
  applySnapshot(_: NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: boolean): void;
  indexPath(forItemIdentifier: ItemIdentifierType): IndexPath;
  // static createWithCollectionViewWithItemProvider(_: NSCollectionView, itemProvider: (p1: NSCollectionView, p2: IndexPath, p3: ItemIdentifierType) => NSCollectionViewItem): NSCollectionViewDiffableDataSourceReference<SectionIdentifierType, ItemIdentifierType>;
  itemIdentifier(for_: IndexPath): ItemIdentifierType;
  snapshot(): NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType>;
}

interface NSCollectionViewElement {
  apply(_: NSCollectionViewLayoutAttributes): void;
  didTransition(from: NSCollectionViewLayout, to: NSCollectionViewLayout): void;
  preferredLayoutAttributesFitting(_: NSCollectionViewLayoutAttributes): NSCollectionViewLayoutAttributes;
  prepareForReuse(): void;
  willTransition(from: NSCollectionViewLayout, to: NSCollectionViewLayout): void;
}

export class NSCollectionViewFlowLayout extends NSCollectionViewLayout {
  estimatedItemSize: CGSize;
  setEstimatedItemSize(_: CGSize);
  footerReferenceSize: CGSize;
  setFooterReferenceSize(_: CGSize);
  headerReferenceSize: CGSize;
  setHeaderReferenceSize(_: CGSize);
  itemSize: CGSize;
  setItemSize(_: CGSize);
  minimumInteritemSpacing: number;
  setMinimumInteritemSpacing(_: number);
  minimumLineSpacing: number;
  setMinimumLineSpacing(_: number);
  scrollDirection: NSCollectionViewFlowLayout.NSCollectionView.ScrollDirection;
  setScrollDirection(_: NSCollectionViewFlowLayout.NSCollectionView.ScrollDirection);
  sectionFootersPinToVisibleBounds: boolean;
  setSectionFootersPinToVisibleBounds(_: boolean);
  sectionHeadersPinToVisibleBounds: boolean;
  setSectionHeadersPinToVisibleBounds(_: boolean);
  sectionInset: NSEdgeInsets;
  setSectionInset(_: NSEdgeInsets);
  collapseSection(at: number): void;
  expandSection(at: number): void;
  section(atIndexIsCollapsed: number): boolean;
}

export class NSCollectionViewFlowLayoutInvalidationContext extends NSCollectionViewLayoutInvalidationContext {
  invalidateFlowLayoutAttributes: boolean;
  setInvalidateFlowLayoutAttributes(_: boolean);
  invalidateFlowLayoutDelegateMetrics: boolean;
  setInvalidateFlowLayoutDelegateMetrics(_: boolean);
}

export class NSCollectionViewGridLayout extends NSCollectionViewLayout {
  backgroundColors: NSColor[];
  setBackgroundColors(_: NSColor[]);
  margins: NSEdgeInsets;
  setMargins(_: NSEdgeInsets);
  maximumItemSize: CGSize;
  setMaximumItemSize(_: CGSize);
  maximumNumberOfColumns: number;
  setMaximumNumberOfColumns(_: number);
  maximumNumberOfRows: number;
  setMaximumNumberOfRows(_: number);
  minimumInteritemSpacing: number;
  setMinimumInteritemSpacing(_: number);
  minimumItemSize: CGSize;
  setMinimumItemSize(_: CGSize);
  minimumLineSpacing: number;
  setMinimumLineSpacing(_: number);
}

export class NSCollectionViewItem extends NSViewController {
  collectionView: NSCollectionView;
  draggingImageComponents: NSDraggingImageComponent[];
  highlightState: NSCollectionView.NSCollectionViewItem.HighlightState;
  setHighlightState(_: NSCollectionView.NSCollectionViewItem.HighlightState);
  imageView: NSImageView;
  setImageView(_: NSImageView);
  isSelected: boolean;
  setSelected(_: boolean);
  textField: NSTextField;
  setTextField(_: NSTextField);
}

export class NSCollectionViewLayout extends NSObject {
  collectionView: NSCollectionView;
  collectionViewContentSize: CGSize;
  static invalidationContextClass: typeof NSObject;
  static layoutAttributesClass: typeof NSObject;
  finalLayoutAttributesForDisappearingDecorationElement(ofKind: string, at: IndexPath): NSCollectionViewLayoutAttributes;
  finalLayoutAttributesForDisappearingItem(at: IndexPath): NSCollectionViewLayoutAttributes;
  finalLayoutAttributesForDisappearingSupplementaryElement(ofKind: string, at: IndexPath): NSCollectionViewLayoutAttributes;
  finalizeAnimatedBoundsChange(): void;
  finalizeCollectionViewUpdates(): void;
  finalizeLayoutTransition(): void;
  indexPathsToDeleteForDecorationView(ofKind: string): Set<any>;
  indexPathsToDeleteForSupplementaryView(ofKind: string): Set<any>;
  indexPathsToInsertForDecorationView(ofKind: string): Set<any>;
  indexPathsToInsertForSupplementaryView(ofKind: string): Set<any>;
  initialLayoutAttributesForAppearingDecorationElement(ofKind: string, at: IndexPath): NSCollectionViewLayoutAttributes;
  initialLayoutAttributesForAppearingItem(at: IndexPath): NSCollectionViewLayoutAttributes;
  initialLayoutAttributesForAppearingSupplementaryElement(ofKind: string, at: IndexPath): NSCollectionViewLayoutAttributes;
  invalidateLayout(): void;
  invalidateLayout(with_: NSCollectionViewLayoutInvalidationContext): void;
  invalidationContext(forBoundsChange: CGRect): NSCollectionViewLayoutInvalidationContext;
  invalidationContext(forPreferredLayoutAttributes: NSCollectionViewLayoutAttributes, withOriginalAttributes: NSCollectionViewLayoutAttributes): NSCollectionViewLayoutInvalidationContext;
  layoutAttributesForDecorationView(ofKind: string, at: IndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForDropTarget(at: CGPoint): NSCollectionViewLayoutAttributes;
  layoutAttributesForElements(in_: CGRect): NSCollectionViewLayoutAttributes[];
  layoutAttributesForInterItemGap(before: IndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForItem(at: IndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForSupplementaryView(ofKind: string, at: IndexPath): NSCollectionViewLayoutAttributes;
  prepare(forAnimatedBoundsChange: CGRect): void;
  prepare(forCollectionViewUpdates: NSCollectionViewUpdateItem[]): void;
  prepareForTransition(from: NSCollectionViewLayout): void;
  prepareForTransition(to: NSCollectionViewLayout): void;
  prepare(): void;
  register(_?: typeof NSObject, forDecorationViewOfKind?: string): void;
  register(_?: NSNib, forDecorationViewOfKind?: string): void;
  shouldInvalidateLayout(forBoundsChange: CGRect): boolean;
  shouldInvalidateLayout(forPreferredLayoutAttributes: NSCollectionViewLayoutAttributes, withOriginalAttributes: NSCollectionViewLayoutAttributes): boolean;
  targetContentOffset(forProposedContentOffset: CGPoint): CGPoint;
  targetContentOffset(forProposedContentOffset: CGPoint, withScrollingVelocity: CGPoint): CGPoint;
}

export class NSCollectionViewLayoutAttributes extends NSObject {
  alpha: number;
  setAlpha(_: number);
  frame: CGRect;
  setFrame(_: CGRect);
  isHidden: boolean;
  setHidden(_: boolean);
  indexPath: IndexPath;
  setIndexPath(_: IndexPath);
  representedElementCategory: NSCollectionViewLayout.NSCollectionElementCategory;
  representedElementKind: string;
  size: CGSize;
  setSize(_: CGSize);
  zIndex: number;
  setZIndex(_: number);
}

export class NSCollectionViewLayoutInvalidationContext extends NSObject {
  contentOffsetAdjustment: CGPoint;
  setContentOffsetAdjustment(_: CGPoint);
  contentSizeAdjustment: CGSize;
  setContentSizeAdjustment(_: CGSize);
  invalidateDataSourceCounts: boolean;
  invalidateEverything: boolean;
  invalidatedDecorationIndexPaths: Map<string, Set<any>>;
  invalidatedItemIndexPaths: Set<any>;
  invalidatedSupplementaryIndexPaths: Map<string, Set<any>>;
  invalidateDecorationElements(ofKind: string, at: Set<any>): void;
  invalidateItems(at: Set<any>): void;
  invalidateSupplementaryElements(ofKind: string, at: Set<any>): void;
}

interface NSCollectionViewPrefetching {
  collectionView(_: NSCollectionView, prefetchItemsAt: IndexPath[]): void;
  collectionView(_: NSCollectionView, cancelPrefetchingForItemsAt: IndexPath[]): void;
}

interface NSCollectionViewSectionHeaderView {
  sectionCollapseButton?: NSButton;
  setSectionCollapseButton(_: NSButton);
}

export class NSCollectionViewTransitionLayout extends NSCollectionViewLayout {
  currentLayout: NSCollectionViewLayout;
  nextLayout: NSCollectionViewLayout;
  transitionProgress: number;
  setTransitionProgress(_: number);
  static createWithCurrentLayoutWithNextLayout(_: NSCollectionViewLayout, nextLayout: NSCollectionViewLayout): NSCollectionViewTransitionLayout;
  updateValue(_: number, forAnimatedKey: string): void;
  // @ts-ignore 
  value(forAnimatedKey: string): number;
}

export class NSCollectionViewUpdateItem extends NSObject {
  indexPathAfterUpdate: IndexPath;
  indexPathBeforeUpdate: IndexPath;
  updateAction: NSCollectionViewLayout.NSCollectionView.UpdateAction;
}

export class NSColor extends NSObject {
  CGColor: any;
  alphaComponent: number;
  blackComponent: number;
  blueComponent: number;
  brightnessComponent: number;
  catalogNameComponent: string;
  colorNameComponent: string;
  colorSpace: NSColorSpace;
  cyanComponent: number;
  greenComponent: number;
  hueComponent: number;
  localizedCatalogNameComponent: string;
  localizedColorNameComponent: string;
  magentaComponent: number;
  numberOfComponents: number;
  patternImage: NSImage;
  redComponent: number;
  saturationComponent: number;
  type: NSColor.ColorType;
  whiteComponent: number;
  yellowComponent: number;
  static alternateSelectedControlTextColor: NSColor;
  static alternatingContentBackgroundColors: NSColor[];
  static blackColor: NSColor;
  static blueColor: NSColor;
  static brownColor: NSColor;
  static clearColor: NSColor;
  static controlAccentColor: NSColor;
  static controlBackgroundColor: NSColor;
  static controlColor: NSColor;
  static controlTextColor: NSColor;
  static currentControlTint: NSCell.NSControlTint;
  static cyanColor: NSColor;
  static darkGrayColor: NSColor;
  static disabledControlTextColor: NSColor;
  static findHighlightColor: NSColor;
  static grayColor: NSColor;
  static greenColor: NSColor;
  static gridColor: NSColor;
  static headerTextColor: NSColor;
  static highlightColor: NSColor;
  static ignoresAlpha: boolean;
  setIgnoresAlpha(_: boolean);
  static keyboardFocusIndicatorColor: NSColor;
  static labelColor: NSColor;
  static lightGrayColor: NSColor;
  static linkColor: NSColor;
  static magentaColor: NSColor;
  static orangeColor: NSColor;
  static placeholderTextColor: NSColor;
  static purpleColor: NSColor;
  static quaternaryLabelColor: NSColor;
  static redColor: NSColor;
  static scrubberTexturedBackgroundColor: NSColor;
  static secondaryLabelColor: NSColor;
  static selectedContentBackgroundColor: NSColor;
  static selectedControlColor: NSColor;
  static selectedControlTextColor: NSColor;
  static selectedMenuItemTextColor: NSColor;
  static selectedTextBackgroundColor: NSColor;
  static selectedTextColor: NSColor;
  static separatorColor: NSColor;
  static shadowColor: NSColor;
  static systemBlueColor: NSColor;
  static systemBrownColor: NSColor;
  static systemGrayColor: NSColor;
  static systemGreenColor: NSColor;
  static systemIndigoColor: NSColor;
  static systemOrangeColor: NSColor;
  static systemPinkColor: NSColor;
  static systemPurpleColor: NSColor;
  static systemRedColor: NSColor;
  static systemTealColor: NSColor;
  static systemYellowColor: NSColor;
  static tertiaryLabelColor: NSColor;
  static textBackgroundColor: NSColor;
  static textColor: NSColor;
  static underPageBackgroundColor: NSColor;
  static unemphasizedSelectedContentBackgroundColor: NSColor;
  static unemphasizedSelectedTextBackgroundColor: NSColor;
  static unemphasizedSelectedTextColor: NSColor;
  static whiteColor: NSColor;
  static windowBackgroundColor: NSColor;
  static windowFrameTextColor: NSColor;
  static yellowColor: NSColor;
  blended(withFraction: number, of: NSColor): NSColor;
  usingColorSpace(_: NSColorSpace): NSColor;
  usingType(_: NSColor.ColorType): NSColor;
  withAlphaComponent(_: number): NSColor;
  withSystemEffect(_: NSColor.SystemEffect): NSColor;
  drawSwatch(in_: CGRect): void;
  getComponents(_: number): void;
  getCyan(_?: number, magenta?: number, yellow?: number, black?: number, alpha?: number): void;
  getHue(_?: number, saturation?: number, brightness?: number, alpha?: number): void;
  getRed(_?: number, green?: number, blue?: number, alpha?: number): void;
  getWhite(_?: number, alpha?: number): void;
  highlight(withLevel: number): NSColor;
  set(): void;
  setFill(): void;
  setStroke(): void;
  shadow(withLevel: number): NSColor;
  write(to: NSPasteboard): void;
}

interface NSColorChanging {
  changeColor(_?: NSColorPanel): void;
}

export class NSColorList extends NSObject {
  allKeys: string[];
  isEditable: boolean;
  name: string;
  static availableColorLists: NSColorList[];
  color(withKey: string): NSColor;
  static createWithName(_: string): NSColorList;
  static createWithNameWithFromFile(_: string, fromFile?: string): NSColorList;
  insertColor(_: NSColor, key: string, at: number): void;
  removeColor(withKey: string): void;
  removeFile(): void;
  setColor(_: NSColor, forKey: string): void;
  writeToURL(error?: URL): boolean;
}

export class NSColorPanel extends NSPanel {
  static dragColor(_: NSColor, with_: NSEvent, from: NSView): boolean;
  static setPickerMask(_: NSColorPanel.Options): void;
  static setPickerMode(_: NSColorPanel.Mode): void;
  accessoryView: NSView;
  setAccessoryView(_: NSView);
  alpha: number;
  color: NSColor;
  setColor(_: NSColor);
  isContinuous: boolean;
  setContinuous(_: boolean);
  mode: NSColorPanel.Mode;
  setMode(_: NSColorPanel.Mode);
  showsAlpha: boolean;
  setShowsAlpha(_: boolean);
  static sharedColorPanel: NSColorPanel;
  static sharedColorPanelExists: boolean;
  attachColorList(_: NSColorList): void;
  detachColorList(_: NSColorList): void;
  setAction(_?: string): void;
  setTarget(_?: any): void;
}

export class NSColorPicker extends NSObject {
  buttonToolTip: string;
  colorPanel: NSColorPanel;
  minContentSize: CGSize;
  provideNewButtonImage: NSImage;
}

export class NSColorPickerTouchBarItem extends NSTouchBarItem {
  static createWithColorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
  static createWithColorPickerWithIdentifierWithButtonImage(withIdentifier: string, buttonImage: NSImage): NSColorPickerTouchBarItem;
  static createWithStrokeColorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
  static createWithTextColorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
  action: string;
  setAction(_: string);
  allowedColorSpaces: NSColorSpace[];
  setAllowedColorSpaces(_: NSColorSpace[]);
  color: NSColor;
  setColor(_: NSColor);
  colorList: NSColorList;
  setColorList(_: NSColorList);
  customizationLabel: string;
  setCustomizationLabel(_: string);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  showsAlpha: boolean;
  setShowsAlpha(_: boolean);
  target: any;
  setTarget(_: any);
}

interface NSColorPickingCustom {
  currentMode(): NSColorPanel.Mode;
  provideNewView(_: boolean): NSView;
  setColor(_: NSColor): void;
  supportsMode(_: NSColorPanel.Mode): boolean;
}

interface NSColorPickingDefault {
  provideNewButtonImage: NSImage;
  buttonToolTip: string;
  minContentSize: CGSize;
  alphaControlAddedOrRemoved(_?: any): void;
  attachColorList(_: NSColorList): void;
  detachColorList(_: NSColorList): void;
  insertNewButtonImage(_: NSImage, in_: NSButtonCell): void;
  setMode(_: NSColorPanel.Mode): void;
  viewSizeChanged(_?: any): void;
}

export class NSColorSampler extends NSObject {
  show(selectionHandler?: (p1: NSColor) => void): void;
}

export class NSColorSpace extends NSObject {
  static availableColorSpaces(with_: NSColorSpace.Model): NSColorSpace[];
  CGColorSpace: any;
  ICCProfileData: Data;
  colorSpaceModel: NSColorSpace.Model;
  colorSyncProfile: any;
  localizedName: string;
  numberOfColorComponents: number;
  static adobeRGB1998ColorSpace: NSColorSpace;
  static deviceCMYKColorSpace: NSColorSpace;
  static deviceGrayColorSpace: NSColorSpace;
  static deviceRGBColorSpace: NSColorSpace;
  static displayP3ColorSpace: NSColorSpace;
  static extendedGenericGamma22GrayColorSpace: NSColorSpace;
  static extendedSRGBColorSpace: NSColorSpace;
  static genericCMYKColorSpace: NSColorSpace;
  static genericGamma22GrayColorSpace: NSColorSpace;
  static genericGrayColorSpace: NSColorSpace;
  static genericRGBColorSpace: NSColorSpace;
  static sRGBColorSpace: NSColorSpace;
  static createWithCgColorSpace(_: any): NSColorSpace;
  static createWithColorSyncProfile(_: any): NSColorSpace;
  static createWithIccProfileData(_: Data): NSColorSpace;
}

// export function NSColorSpaceFromDepth(depth: NSGraphics.NSWindow.Depth): string;

export class NSColorWell extends NSControl {
  isActive: boolean;
  isBordered: boolean;
  setBordered(_: boolean);
  color: NSColor;
  setColor(_: NSColor);
  activate(_: boolean): void;
  deactivate(): void;
  drawWell(inside: CGRect): void;
  takeColorFrom(_?: any): void;
}

export type ColorWell = NSColorWell

export class NSComboBox extends NSTextField {
  isButtonBordered: boolean;
  setButtonBordered(_: boolean);
  completes: boolean;
  setCompletes(_: boolean);
  dataSource: any;
  setDataSource(_: any);
  delegate: any;
  setDelegate(_: any);
  hasVerticalScroller: boolean;
  setHasVerticalScroller(_: boolean);
  indexOfSelectedItem: number;
  intercellSpacing: CGSize;
  setIntercellSpacing(_: CGSize);
  itemHeight: number;
  setItemHeight(_: number);
  numberOfItems: number;
  numberOfVisibleItems: number;
  setNumberOfVisibleItems(_: number);
  objectValueOfSelectedItem: any;
  objectValues: any[];
  usesDataSource: boolean;
  setUsesDataSource(_: boolean);
  addItem(withObjectValue: any): void;
  addItems(withObjectValues: any[]): void;
  deselectItem(at: number): void;
  indexOfItem(withObjectValue: any): number;
  insertItem(withObjectValue: any, at: number): void;
  itemObjectValue(at: number): any;
  noteNumberOfItemsChanged(): void;
  reloadData(): void;
  removeAllItems(): void;
  removeItem(at: number): void;
  removeItem(withObjectValue: any): void;
  scrollItemAtIndexToTop(_: number): void;
  scrollItemAtIndexToVisible(_: number): void;
  selectItem(at: number): void;
  selectItem(withObjectValue?: any): void;
}

export type ComboBox = NSComboBox

export class NSComboBoxCell extends NSTextFieldCell {
  isButtonBordered: boolean;
  setButtonBordered(_: boolean);
  completes: boolean;
  setCompletes(_: boolean);
  dataSource: any;
  setDataSource(_: any);
  hasVerticalScroller: boolean;
  setHasVerticalScroller(_: boolean);
  indexOfSelectedItem: number;
  intercellSpacing: CGSize;
  setIntercellSpacing(_: CGSize);
  itemHeight: number;
  setItemHeight(_: number);
  numberOfItems: number;
  numberOfVisibleItems: number;
  setNumberOfVisibleItems(_: number);
  objectValueOfSelectedItem: any;
  objectValues: any[];
  usesDataSource: boolean;
  setUsesDataSource(_: boolean);
  addItem(withObjectValue: any): void;
  addItems(withObjectValues: any[]): void;
  completedString(_: string): string;
  deselectItem(at: number): void;
  indexOfItem(withObjectValue: any): number;
  insertItem(withObjectValue: any, at: number): void;
  itemObjectValue(at: number): any;
  noteNumberOfItemsChanged(): void;
  reloadData(): void;
  removeAllItems(): void;
  removeItem(at: number): void;
  removeItem(withObjectValue: any): void;
  scrollItemAtIndexToTop(_: number): void;
  scrollItemAtIndexToVisible(_: number): void;
  selectItem(at: number): void;
  selectItem(withObjectValue?: any): void;
}

interface NSComboBoxCellDataSource {
  comboBoxCell(_: NSComboBoxCell, objectValueForItemAt: number): any;
  comboBoxCell(_: NSComboBoxCell, indexOfItemWithStringValue: string): number;
  comboBoxCell(_: NSComboBoxCell, completedString: string): string;
  numberOfItems(in_: NSComboBoxCell): number;
}

interface NSComboBoxDataSource {
  comboBox(_: NSComboBox, objectValueForItemAt: number): any;
  comboBox(_: NSComboBox, indexOfItemWithStringValue: string): number;
  comboBox(_: NSComboBox, completedString: string): string;
  numberOfItems(in_: NSComboBox): number;
}

interface NSComboBoxDelegate {
  comboBoxSelectionDidChange(_: Notification): void;
  comboBoxSelectionIsChanging(_: Notification): void;
  comboBoxWillDismiss(_: Notification): void;
  comboBoxWillPopUp(_: Notification): void;
}

export class NSControl extends NSView {
  action: string;
  setAction(_: string);
  alignment: NSText.NSTextAlignment;
  setAlignment(_: NSText.NSTextAlignment);
  allowsExpansionToolTips: boolean;
  setAllowsExpansionToolTips(_: boolean);
  attributedStringValue: NSAttributedString;
  setAttributedStringValue(_: NSAttributedString);
  baseWritingDirection: NSText.NSWritingDirection;
  setBaseWritingDirection(_: NSText.NSWritingDirection);
  cell: NSCell;
  setCell(_: NSCell);
  isContinuous: boolean;
  setContinuous(_: boolean);
  controlSize: NSCell.NSControl.ControlSize;
  setControlSize(_: NSCell.NSControl.ControlSize);
  doubleValue: number;
  setDoubleValue(_: number);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  floatValue: number;
  setFloatValue(_: number);
  font: NSFont;
  setFont(_: NSFont);
  formatter: Formatter;
  setFormatter(_: Formatter);
  isHighlighted: boolean;
  setHighlighted(_: boolean);
  ignoresMultiClick: boolean;
  setIgnoresMultiClick(_: boolean);
  intValue: number;
  setIntValue(_: number);
  integerValue: number;
  setIntegerValue(_: number);
  lineBreakMode: NSParagraphStyle.NSLineBreakMode;
  setLineBreakMode(_: NSParagraphStyle.NSLineBreakMode);
  objectValue: any;
  setObjectValue(_: any);
  refusesFirstResponder: boolean;
  setRefusesFirstResponder(_: boolean);
  stringValue: string;
  setStringValue(_: string);
  tag: number;
  setTag(_: number);
  target: any;
  setTarget(_: any);
  usesSingleLineMode: boolean;
  setUsesSingleLineMode(_: boolean);
  static cellClass: typeof NSObject;
  setCellClass(_: typeof NSObject);
  abortEditing(): boolean;
  currentEditor(): NSText;
  drawCell(_: NSCell): void;
  drawCellInside(_: NSCell): void;
  // @ts-ignore 
  draw(withExpansionFrame: CGRect, in_: NSView): void;
  edit(withFrame: CGRect, editor: NSText, delegate?: any, event?: NSEvent): void;
  endEditing(_: NSText): void;
  expansionFrame(withFrame: CGRect): CGRect;
  // @ts-ignore 
  invalidateIntrinsicContentSize(for_: NSCell): void;
  performClick(_?: any): void;
  selectCell(_: NSCell): void;
  select(withFrame: CGRect, editor: NSText, delegate?: any, start?: number, length?: number): void;
  selectedCell(): NSCell;
  selectedTag(): number;
  sendAction(_?: string, to?: any): boolean;
  sendAction(on: NSEvent.EventTypeMask): number;
  sizeThatFits(_: CGSize): CGSize;
  sizeToFit(): void;
  takeDoubleValueFrom(_?: any): void;
  takeFloatValueFrom(_?: any): void;
  takeIntValueFrom(_?: any): void;
  takeIntegerValueFrom(_?: any): void;
  takeObjectValueFrom(_?: any): void;
  takeStringValueFrom(_?: any): void;
  updateCell(_: NSCell): void;
  updateCellInside(_: NSCell): void;
  validateEditing(): void;
}

export type Control = NSControl

interface NSControlTextEditingDelegate {
  control(_: NSControl, textShouldBeginEditing: NSText): boolean;
  control(_: NSControl, textShouldEndEditing: NSText): boolean;
  control(_: NSControl, didFailToFormatString: string, errorDescription?: string): boolean;
  control(_: NSControl, didFailToValidatePartialString: string, errorDescription?: string): void;
  control(_: NSControl, isValidObject?: any): boolean;
  control(_: NSControl, textView: NSTextView, doCommandBy: string): boolean;
  control(_: NSControl, textView: NSTextView, completions: string[], forPartialWordRange: NSRange, indexOfSelectedItem: number): string[];
  controlTextDidBeginEditing(_: Notification): void;
  controlTextDidChange(_: Notification): void;
  controlTextDidEndEditing(_: Notification): void;
}

export class NSController extends NSObject {
  isEditing: boolean;
}

// export function NSCreateFileContentsPboardType(fileType: string): string;

// export function NSCreateFilenamePboardType(fileType: string): string;

export class NSCursor extends NSObject {
  static hide(): void;
  //  static pop(): void;
  static setHiddenUntilMouseMoves(_: boolean): void;
  static unhide(): void;
  hotSpot: CGPoint;
  image: NSImage;
  static IBeamCursor: NSCursor;
  static IBeamCursorForVerticalLayout: NSCursor;
  static arrowCursor: NSCursor;
  static closedHandCursor: NSCursor;
  static contextualMenuCursor: NSCursor;
  static crosshairCursor: NSCursor;
  static currentCursor: NSCursor;
  static currentSystemCursor: NSCursor;
  static disappearingItemCursor: NSCursor;
  static dragCopyCursor: NSCursor;
  static dragLinkCursor: NSCursor;
  static openHandCursor: NSCursor;
  static operationNotAllowedCursor: NSCursor;
  static pointingHandCursor: NSCursor;
  static resizeDownCursor: NSCursor;
  static resizeLeftCursor: NSCursor;
  static resizeLeftRightCursor: NSCursor;
  static resizeRightCursor: NSCursor;
  static resizeUpCursor: NSCursor;
  static resizeUpDownCursor: NSCursor;
  static createWithImageWithHotSpot(_: NSImage, hotSpot: CGPoint): NSCursor;
  pop(): void;
  push(): void;
  set(): void;
}

export class NSCustomImageRep extends NSImageRep {
  delegate: any;
  drawSelector: string;
  drawingHandler: (p1: CGRect) => boolean;
  static createWithDrawSelectorWithDelegate(_: string, delegate: any): NSCustomImageRep;
  static createWithSizeWithFlippedWithDrawingHandler(_: CGSize, flipped: boolean, drawingHandler: (p1: CGRect) => boolean): NSCustomImageRep;
}

export class NSCustomTouchBarItem extends NSTouchBarItem {
  customizationLabel: string;
  setCustomizationLabel(_: string);
  viewController: NSViewController;
  setViewController(_: NSViewController);
}

export class NSDataAsset extends NSObject {
  data: Data;
  name: string;
  typeIdentifier: string;
  static createWithName(_: string): NSDataAsset;
  static createWithNameWithBundle(_: string, bundle: Bundle): NSDataAsset;
}

export class NSDatePicker extends NSControl {
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  isBezeled: boolean;
  setBezeled(_: boolean);
  isBordered: boolean;
  setBordered(_: boolean);
  calendar: Calendar;
  setCalendar(_: Calendar);
  datePickerElements: NSDatePickerCell.NSDatePicker.ElementFlags;
  setDatePickerElements(_: NSDatePickerCell.NSDatePicker.ElementFlags);
  datePickerMode: NSDatePickerCell.NSDatePicker.Mode;
  setDatePickerMode(_: NSDatePickerCell.NSDatePicker.Mode);
  datePickerStyle: NSDatePickerCell.NSDatePicker.Style;
  setDatePickerStyle(_: NSDatePickerCell.NSDatePicker.Style);
  dateValue: Date;
  setDateValue(_: Date);
  delegate: any;
  setDelegate(_: any);
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  locale: Locale;
  setLocale(_: Locale);
  maxDate: Date;
  setMaxDate(_: Date);
  minDate: Date;
  setMinDate(_: Date);
  presentsCalendarOverlay: boolean;
  setPresentsCalendarOverlay(_: boolean);
  textColor: NSColor;
  setTextColor(_: NSColor);
  timeInterval: number;
  setTimeInterval(_: number);
  timeZone: TimeZone;
  setTimeZone(_: TimeZone);
}

export type DatePicker = NSDatePicker

export class NSDatePickerCell extends NSActionCell {
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  calendar: Calendar;
  setCalendar(_: Calendar);
  datePickerElements: NSDatePickerCell.NSDatePicker.ElementFlags;
  setDatePickerElements(_: NSDatePickerCell.NSDatePicker.ElementFlags);
  datePickerMode: NSDatePickerCell.NSDatePicker.Mode;
  setDatePickerMode(_: NSDatePickerCell.NSDatePicker.Mode);
  datePickerStyle: NSDatePickerCell.NSDatePicker.Style;
  setDatePickerStyle(_: NSDatePickerCell.NSDatePicker.Style);
  dateValue: Date;
  setDateValue(_: Date);
  delegate: any;
  setDelegate(_: any);
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  locale: Locale;
  setLocale(_: Locale);
  maxDate: Date;
  setMaxDate(_: Date);
  minDate: Date;
  setMinDate(_: Date);
  textColor: NSColor;
  setTextColor(_: NSColor);
  timeInterval: number;
  setTimeInterval(_: number);
  timeZone: TimeZone;
  setTimeZone(_: TimeZone);
}

interface NSDatePickerCellDelegate {
  datePickerCell(_: NSDatePickerCell, validateProposedDateValue: Date, timeInterval?: number): void;
}

export class NSDictionaryController extends NSArrayController {
  excludedKeys: string[];
  setExcludedKeys(_: string[]);
  includedKeys: string[];
  setIncludedKeys(_: string[]);
  initialKey: string;
  setInitialKey(_: string);
  initialValue: any;
  setInitialValue(_: any);
  localizedKeyDictionary: Map<string, string>;
  setLocalizedKeyDictionary(_: Map<string, string>);
  localizedKeyTable: string;
  setLocalizedKeyTable(_: string);
  // @ts-ignore 
  newObject(): NSDictionaryControllerKeyValuePair;
}

export class NSDictionaryControllerKeyValuePair extends NSObject {
  isExplicitlyIncluded: boolean;
  key: string;
  setKey(_: string);
  localizedKey: string;
  setLocalizedKey(_: string);
}

export class NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType> extends NSObject {
  itemIdentifiers: ItemIdentifierType[];
  numberOfItems: number;
  numberOfSections: number;
  sectionIdentifiers: SectionIdentifierType[];
  appendItems(withIdentifiers: ItemIdentifierType[]): void;
  appendItems(withIdentifiers: ItemIdentifierType[], intoSectionWithIdentifier: SectionIdentifierType): void;
  appendSections(withIdentifiers: any[]): void;
  deleteAllItems(): void;
  deleteItems(withIdentifiers: ItemIdentifierType[]): void;
  deleteSections(withIdentifiers: SectionIdentifierType[]): void;
  index(ofItemIdentifier: ItemIdentifierType): number;
  index(ofSectionIdentifier: SectionIdentifierType): number;
  insertItems(withIdentifiers: ItemIdentifierType[], afterItemWithIdentifier: ItemIdentifierType): void;
  insertItems(withIdentifiers: ItemIdentifierType[], beforeItemWithIdentifier: ItemIdentifierType): void;
  insertSections(withIdentifiers: SectionIdentifierType[], afterSectionWithIdentifier: SectionIdentifierType): void;
  insertSections(withIdentifiers: SectionIdentifierType[], beforeSectionWithIdentifier: SectionIdentifierType): void;
  itemIdentifiersInSection(withIdentifier: SectionIdentifierType): ItemIdentifierType[];
  moveItem(withIdentifier: ItemIdentifierType, afterItemWithIdentifier: ItemIdentifierType): void;
  moveItem(withIdentifier: ItemIdentifierType, beforeItemWithIdentifier: ItemIdentifierType): void;
  moveSection(withIdentifier: SectionIdentifierType, afterSectionWithIdentifier: SectionIdentifierType): void;
  moveSection(withIdentifier: SectionIdentifierType, beforeSectionWithIdentifier: SectionIdentifierType): void;
  // dupe name w instance property   numberOfItems(inSection: SectionIdentifierType): number;
  reloadItems(withIdentifiers: ItemIdentifierType[]): void;
  reloadSections(withIdentifiers: SectionIdentifierType[]): void;
  sectionIdentifier(forSectionContainingItemIdentifier: ItemIdentifierType): SectionIdentifierType;
}

export class NSDockTile extends NSObject {
  badgeLabel: string;
  setBadgeLabel(_: string);
  contentView: NSView;
  setContentView(_: NSView);
  owner: any;
  showsApplicationBadge: boolean;
  setShowsApplicationBadge(_: boolean);
  size: CGSize;
  display(): void;
}

interface NSDockTilePlugIn {
  dockMenu(): NSMenu;
  setDockTile(_?: NSDockTile): void;
}

export class NSDocument extends NSObject {
  static canConcurrentlyReadDocuments(ofType: string): boolean;
  static isNativeType(_: string): boolean;
  PDFPrintOperation: NSPrintOperation;
  allowsDocumentSharing: boolean;
  autosavedContentsFileURL: URL;
  setAutosavedContentsFileURL(_: URL);
  autosavingFileType: string;
  autosavingIsImplicitlyCancellable: boolean;
  backupFileURL: URL;
  isBrowsingVersions: boolean;
  displayName: string;
  setDisplayName(_: string);
  isDocumentEdited: boolean;
  isDraft: boolean;
  setDraft(_: boolean);
  isEntireFileLoaded: boolean;
  fileModificationDate: Date;
  setFileModificationDate(_: Date);
  fileNameExtensionWasHiddenInLastRunSavePanel: boolean;
  fileType: string;
  setFileType(_: string);
  fileTypeFromLastRunSavePanel: string;
  fileURL: URL;
  setFileURL(_: URL);
  hasUnautosavedChanges: boolean;
  hasUndoManager: boolean;
  setHasUndoManager(_: boolean);
  isInViewingMode: boolean;
  keepBackupFile: boolean;
  lastComponentOfFileName: string;
  setLastComponentOfFileName(_: string);
  isLocked: boolean;
  printInfo: NSPrintInfo;
  setPrintInfo(_: NSPrintInfo);
  shouldRunSavePanelWithAccessoryView: boolean;
  undoManager: UndoManager;
  setUndoManager(_: UndoManager);
  userActivity: NSUserActivity;
  setUserActivity(_: NSUserActivity);
  windowControllers: NSWindowController[];
  windowForSheet: NSWindow;
  windowNibName: string;
  static autosavesDrafts: boolean;
  static autosavesInPlace: boolean;
  static preservesVersions: boolean;
  static readableTypes: string[];
  static restorableStateKeyPaths: string[];
  static usesUbiquitousStorage: boolean;
  static writableTypes: string[];
  addWindowController(_: NSWindowController): void;
  autosave(withDelegate?: any, didAutosave?: string, contextInfo?: any): void;
  autosave(withImplicitCancellability: boolean, completionHandler?: (p1: Error) => void): void;
  browseVersions(_?: any): void;
  canAsynchronouslyWrite(to: URL, ofType: string, for_: NSDocument.SaveOperationType): boolean;
  canClose(withDelegate: any, shouldClose?: string, contextInfo?: any): void;
  changeCountToken(for_: NSDocument.SaveOperationType): any;
  checkAutosavingSafetyAndReturnError(): boolean;
  close(): void;
  continueActivity(_: () => void): void;
  continueAsynchronousWorkOnMainThread(_: () => void): void;
  dataOfType(error: string): Data;
  defaultDraftName(): string;
  duplicateAndReturnError(): NSDocument;
  duplicate(_?: any): void;
  duplicate(withDelegate?: any, didDuplicate?: string, contextInfo?: any): void;
  encodeRestorableState(with_: NSCoder): void;
  encodeRestorableState(with_: NSCoder, backgroundQueue: OperationQueue): void;
  fileAttributesToWriteToURL(ofType: URL, forSaveOperation: string, originalContentsURL: NSDocument.SaveOperationType, error?: URL): Map<string, any>;
  fileNameExtension(forType: string, saveOperation: NSDocument.SaveOperationType): string;
  fileWrapperOfType(error: string): FileWrapper;
  handleClose(_: NSCloseCommand): any;
  handlePrint(_: NSScriptCommand): any;
  handleSave(_: NSScriptCommand): any;
  static createWithForURLWithContentsOfURL(withContentsOfURL?: URL, ofType?: URL, error?: string): NSDocument;
  static createWithContentsOf(ofType: URL, error: string): NSDocument;
  static createWith(error: string): NSDocument;
  invalidateRestorableState(): void;
  lock(_?: any): void;
  lock(completionHandler?: (p1: boolean) => void): void;
  lock(completionHandler?: (p1: Error) => void): void;
  makeWindowControllers(): void;
  move(_?: any): void;
  moveToUbiquityContainer(_?: any): void;
  move(completionHandler?: (p1: boolean) => void): void;
  move(to: URL, completionHandler?: (p1: Error) => void): void;
  performActivity(withSynchronousWaiting: boolean, using: (p1: () => void) => void): void;
  performAsynchronousFileAccess(_: (p1: () => void) => void): void;
  performSynchronousFileAccess(_: () => void): void;
  preparePageLayout(_: NSPageLayout): boolean;
  prepareSavePanel(_: NSSavePanel): boolean;
  prepare(_: NSSharingServicePicker): void;
  presentError(_: Error): boolean;
  presentError(_: Error, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
  printDocument(_?: any): void;
  print(withSettings: Map<string, any>, showPrintPanel: boolean, delegate?: any, didPrint?: string, contextInfo?: any): void;
  printOperationWithSettings(error: Map<string, any>): NSPrintOperation;
  readFromData(ofType: Data, error: string): boolean;
  readFromFileWrapper(ofType: FileWrapper, error: string): boolean;
  readFromURL(ofType: URL, error: string): boolean;
  removeWindowController(_: NSWindowController): void;
  rename(_?: any): void;
  restoreWindow(withIdentifier: string, state: NSCoder, completionHandler?: (p1: NSWindow, p2: Error) => void): void;
  restoreState(with_: NSCoder): void;
  revertToSaved(_?: any): void;
  revertToContentsOfURL(ofType: URL, error: string): boolean;
  runModalPageLayout(with_: NSPrintInfo, delegate?: any, didRun?: string, contextInfo?: any): void;
  runModalPrintOperation(_: NSPrintOperation, delegate?: any, didRun?: string, contextInfo?: any): void;
  runModalSavePanel(for_: NSDocument.SaveOperationType, delegate?: any, didSave?: string, contextInfo?: any): void;
  runPageLayout(_?: any): void;
  save(_?: any): void;
  saveAs(_?: any): void;
  saveTo(_?: any): void;
  saveToPDF(_?: any): void;
  save(withDelegate?: any, didSave?: string, contextInfo?: any): void;
  save(to: URL, ofType: string, for_: NSDocument.SaveOperationType, completionHandler?: (p1: Error) => void): void;
  save(to: URL, ofType: string, for_: NSDocument.SaveOperationType, delegate?: any, didSave?: string, contextInfo?: any): void;
  scheduleAutosaving(): void;
  setDisplayName(_?: string): void;
  setWindow(_?: NSWindow): void;
  share(with_: NSSharingService, completionHandler?: (p1: boolean) => void): void;
  shouldChangePrintInfo(_: NSPrintInfo): boolean;
  shouldCloseWindowController(_: NSWindowController, delegate?: any, shouldClose?: string, contextInfo?: any): void;
  showWindows(): void;
  stopBrowsingVersions(completionHandler?: () => void): void;
  unblockUserInteraction(): void;
  unlock(_?: any): void;
  unlock(completionHandler?: (p1: boolean) => void): void;
  unlock(completionHandler?: (p1: Error) => void): void;
  updateChangeCount(_: NSDocument.ChangeType): void;
  updateChangeCount(withToken: any, for_: NSDocument.SaveOperationType): void;
  updateUserActivityState(_: NSUserActivity): void;
  willNotPresentError(_: Error): void;
  willPresentError(_: Error): Error;
  windowControllerDidLoadNib(_: NSWindowController): void;
  windowControllerWillLoadNib(_: NSWindowController): void;
  // dupe name w static property   writableTypes(for_: NSDocument.SaveOperationType): string[];
  writeSafelyToURL(ofType: URL, forSaveOperation: string, error: NSDocument.SaveOperationType): boolean;
  writeToURL(ofType: URL, error: string): boolean;
  writeToURL(ofType: URL, forSaveOperation: string, originalContentsURL: NSDocument.SaveOperationType, error?: URL): boolean;
}

export class NSDocumentController extends NSObject {
  allowsAutomaticShareMenu: boolean;
  autosavingDelay: number;
  setAutosavingDelay(_: number);
  currentDirectory: string;
  currentDocument: NSDocument;
  defaultType: string;
  documentClassNames: string[];
  documents: NSDocument[];
  hasEditedDocuments: boolean;
  maximumRecentDocumentCount: number;
  recentDocumentURLs: URL[];
  static sharedDocumentController: NSDocumentController;
  urlsFromRunningOpenPanel(): URL[];
  addDocument(_: NSDocument): void;
  beginOpenPanel(_: NSOpenPanel, forTypes?: string[], completionHandler?: (p1: number) => void): void;
  beginOpenPanel(completionHandler?: (p1: URL[]) => void): void;
  clearRecentDocuments(_?: any): void;
  closeAllDocuments(withDelegate?: any, didCloseAllSelector?: string, contextInfo?: any): void;
  displayName(forType: string): string;
  documentClass(forType: string): typeof NSObject;
  document(for_: URL): NSDocument;
  document(for_: NSWindow): NSDocument;
  duplicateDocumentWithContentsOfURL(copying: URL, displayName: boolean, error?: string): NSDocument;
  makeDocumentForURL(withContentsOfURL?: URL, ofType?: URL, error?: string): NSDocument;
  makeDocumentWithContentsOfURL(ofType: URL, error: string): NSDocument;
  makeUntitledDocumentOfType(error: string): NSDocument;
  newDocument(_?: any): void;
  noteNewRecentDocument(_: NSDocument): void;
  noteNewRecentDocumentURL(_: URL): void;
  openDocument(_?: any): void;
  openDocument(withContentsOf: URL, display: boolean, completionHandler?: (p1: NSDocument, p2: boolean, p3: Error) => void): void;
  openUntitledDocumentAndDisplay(error: boolean): NSDocument;
  presentError(_: Error): boolean;
  presentError(_: Error, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
  removeDocument(_: NSDocument): void;
  reopenDocument(for_?: URL, withContentsOf?: URL, display?: boolean, completionHandler?: (p1: NSDocument, p2: boolean, p3: Error) => void): void;
  reviewUnsavedDocuments(withAlertTitle?: string, cancellable?: boolean, delegate?: any, didReviewAllSelector?: string, contextInfo?: any): void;
  runModalOpenPanel(_: NSOpenPanel, forTypes?: string[]): number;
  saveAllDocuments(_?: any): void;
  standardShareMenuItem(): NSMenuItem;
  typeForContentsOfURL(error: URL): string;
  willPresentError(_: Error): Error;
}

// export function NSDottedFrameRect(rect: CGRect): void;

interface NSDraggingDestination {
  concludeDragOperation(_?: any): void;
  draggingEnded(_: any): void;
  draggingEntered(_: any): NSDragging.NSDragOperation;
  draggingExited(_?: any): void;
  draggingUpdated(_: any): NSDragging.NSDragOperation;
  performDragOperation(_: any): boolean;
  prepareForDragOperation(_: any): boolean;
  updateDraggingItemsForDrag(_?: any): void;
  wantsPeriodicDraggingUpdates(): boolean;
}

export class NSDraggingImageComponent extends NSObject {
  contents: any;
  setContents(_: any);
  frame: CGRect;
  setFrame(_: CGRect);
  key: string;
  setKey(_: string);
  static createWithKey(_: string): NSDraggingImageComponent;
}

interface NSDraggingInfo {
  animatesToDestination: boolean;
  setAnimatesToDestination(_: boolean);
    // unavailableInSwift draggedImage: NSImage;
  draggedImageLocation: CGPoint;
  draggingDestinationWindow: NSWindow;
  draggingFormation: NSDragging.NSDraggingFormation;
  setDraggingFormation(_: NSDragging.NSDraggingFormation);
  draggingLocation: CGPoint;
  draggingPasteboard: NSPasteboard;
  draggingSequenceNumber: number;
  draggingSource: any;
  draggingSourceOperationMask: NSDragging.NSDragOperation;
  numberOfValidItemsForDrop: number;
  setNumberOfValidItemsForDrop(_: number);
  springLoadingHighlight: NSDragging.NSSpringLoadingHighlight;
  enumerateDraggingItems(options: NSDragging.NSDraggingItemEnumerationOptions, for_?: NSView, classes?: typeof NSObject[], searchOptions?: Map<string, any>, using?: (p1: NSDraggingItem, p2: number, p3: boolean) => void): void;
  resetSpringLoading(): void;
  slideDraggedImage(to: CGPoint): void;
}

export class NSDraggingItem extends NSObject {
  draggingFrame: CGRect;
  setDraggingFrame(_: CGRect);
  imageComponents: NSDraggingImageComponent[];
  imageComponentsProvider: () => NSDraggingImageComponent[];
  setImageComponentsProvider(_: () => NSDraggingImageComponent[]);
  item: any;
  static createWithPasteboardWriter(_: any): NSDraggingItem;
  setDraggingFrame(_: CGRect, contents?: any): void;
}

export class NSDraggingSession extends NSObject {
  animatesToStartingPositionsOnCancelOrFail: boolean;
  setAnimatesToStartingPositionsOnCancelOrFail(_: boolean);
  draggingFormation: NSDragging.NSDraggingFormation;
  setDraggingFormation(_: NSDragging.NSDraggingFormation);
  draggingLeaderIndex: number;
  setDraggingLeaderIndex(_: number);
  draggingLocation: CGPoint;
  draggingPasteboard: NSPasteboard;
  draggingSequenceNumber: number;
  enumerateDraggingItems(options: NSDragging.NSDraggingItemEnumerationOptions, for_?: NSView, classes?: typeof NSObject[], searchOptions?: Map<string, any>, using?: (p1: NSDraggingItem, p2: number, p3: boolean) => void): void;
}

interface NSDraggingSource {
  draggingSession(_: NSDraggingSession, sourceOperationMaskFor: NSDragging.NSDraggingContext): NSDragging.NSDragOperation;
  draggingSession(_: NSDraggingSession, willBeginAt: CGPoint): void;
  draggingSession(_: NSDraggingSession, movedTo: CGPoint): void;
  draggingSession(_: NSDraggingSession, endedAt: CGPoint, operation: NSDragging.NSDragOperation): void;
  ignoreModifierKeys(for_: NSDraggingSession): boolean;
}

// export function NSDrawBitmap(rect: CGRect, width: number, height: number, bps: number, spp: number, bpp: number, bpr: number, isPlanar: boolean, hasAlpha: boolean, colorSpaceName: string, data: string): void;

// export function NSDrawButton(rect: CGRect, clipRect: CGRect): void;

// export function NSDrawColorTiledRects(boundsRect: CGRect, clipRect: CGRect, sides: NSGeometry.NSRectEdge, colors: NSColor, count: number): CGRect;

// export function NSDrawDarkBezel(rect: CGRect, clipRect: CGRect): void;

// export function NSDrawGrayBezel(rect: CGRect, clipRect: CGRect): void;

// export function NSDrawGroove(rect: CGRect, clipRect: CGRect): void;

// export function NSDrawLightBezel(rect: CGRect, clipRect: CGRect): void;

// export function NSDrawNinePartImage(frame: CGRect, topLeftCorner: NSImage, topEdgeFill: NSImage, topRightCorner: NSImage, leftEdgeFill: NSImage, centerFill: NSImage, rightEdgeFill: NSImage, bottomLeftCorner: NSImage, bottomEdgeFill: NSImage, bottomRightCorner: NSImage, op: NSGraphics.NSCompositingOperation, alphaFraction: number, flipped: boolean): void;

// export function NSDrawThreePartImage(frame: CGRect, startCap: NSImage, centerFill: NSImage, endCap: NSImage, vertical: boolean, op: NSGraphics.NSCompositingOperation, alphaFraction: number, flipped: boolean): void;

// export function NSDrawTiledRects(boundsRect: CGRect, clipRect: CGRect, sides: NSGeometry.NSRectEdge, grays: number, count: number): CGRect;

// export function NSDrawWhiteBezel(rect: CGRect, clipRect: CGRect): void;

// export function NSDrawWindowBackground(rect: CGRect): void;

interface NSDrawerDelegate {
}

export class NSEPSImageRep extends NSImageRep {
  EPSRepresentation: Data;
  boundingBox: CGRect;
  static createWithData(_: Data): NSEPSImageRep;
}

interface NSEditor {
  commitEditing(): boolean;
  commitEditing(withDelegate?: any, didCommit?: string, contextInfo?: any): void;
  commitEditingAndReturnError(): boolean;
  discardEditing(): void;
}

interface NSEditorRegistration {
  objectDidBeginEditing(_: any): void;
  objectDidEndEditing(_: any): void;
}

// export function NSEraseRect(rect: CGRect): void;

export class NSEvent extends NSObject {
  static addGlobalMonitorForEvents(matching: NSEvent.EventTypeMask, handler: (p1: NSEvent) => void): any;
  static addLocalMonitorForEvents(matching: NSEvent.EventTypeMask, handler?: (p1: NSEvent) => NSEvent): any;
  static enterExitEvent(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, eventNumber?: number, trackingNumber?: number, userData?: any): NSEvent;
  static keyEvent(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, characters?: string, charactersIgnoringModifiers?: string, isARepeat?: boolean, keyCode?: number): NSEvent;
  static mouseEvent(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, eventNumber?: number, clickCount?: number, pressure?: number): NSEvent;
  static otherEvent(with_: NSEvent.EventType, location: CGPoint, modifierFlags: NSEvent.ModifierFlags, timestamp: number, windowNumber: number, context?: NSGraphicsContext, subtype?: number, data1?: number, data2?: number): NSEvent;
  static removeMonitor(_: any): void;
  static startPeriodicEvents(afterDelay: number, withPeriod: number): void;
  static stopPeriodicEvents(): void;
  isARepeat: boolean;
  CGEvent: any;
  absoluteX: number;
  absoluteY: number;
  absoluteZ: number;
  associatedEventsMask: NSEvent.EventTypeMask;
  buttonMask: NSEvent.ButtonMask;
  buttonNumber: number;
  capabilityMask: number;
  characters: string;
  charactersIgnoringModifiers: string;
  clickCount: number;
  data1: number;
  data2: number;
  deltaX: number;
  deltaY: number;
  deltaZ: number;
  deviceID: number;
  isDirectionInvertedFromDevice: boolean;
  isEnteringProximity: boolean;
  eventNumber: number;
  eventRef: any;
  hasPreciseScrollingDeltas: boolean;
  keyCode: number;
  locationInWindow: CGPoint;
  magnification: number;
  modifierFlags: NSEvent.ModifierFlags;
  momentumPhase: NSEvent.Phase;
  phase: NSEvent.Phase;
  pointingDeviceID: number;
  pointingDeviceSerialNumber: number;
  pointingDeviceType: NSEvent.PointingDeviceType;
  pressure: number;
  pressureBehavior: NSEvent.PressureBehavior;
  rotation: number;
  scrollingDeltaX: number;
  scrollingDeltaY: number;
  stage: number;
  stageTransition: number;
  subtype: NSEvent.EventSubtype;
  systemTabletID: number;
  tabletID: number;
  tangentialPressure: number;
  tilt: CGPoint;
  timestamp: number;
  trackingArea: NSTrackingArea;
  trackingNumber: number;
  type: NSEvent.EventType;
  uniqueID: number;
  userData: any;
  vendorDefined: any;
  vendorID: number;
  vendorPointingDeviceType: number;
  window: NSWindow;
  windowNumber: number;
  static doubleClickInterval: number;
  static keyRepeatDelay: number;
  static keyRepeatInterval: number;
  //   static modifierFlags: NSEvent.ModifierFlags;
  static isMouseCoalescingEnabled: boolean;
  setMouseCoalescingEnabled(_: boolean);
  static mouseLocation: CGPoint;
  static pressedMouseButtons: number;
  static isSwipeTrackingFromScrollEventsEnabled: boolean;
  allTouches(): Set<any>;
  // dupe name w instance property   characters(byApplyingModifiers: NSEvent.ModifierFlags): string;
  coalescedTouches(for_: NSTouch): NSTouch[];
  touches(for_: NSView): Set<any>;
  touches(matching: NSTouch.Phase, in_?: NSView): Set<any>;
  trackSwipeEvent(options: NSEvent.SwipeTrackingOptions, dampenAmountThresholdMin: number, max: number, usingHandler: (p1: number, p2: NSEvent.Phase, p3: boolean, p4: boolean) => void): void;
}

export class NSFilePromiseProvider extends NSObject {
  delegate: any;
  setDelegate(_: any);
  fileType: string;
  setFileType(_: string);
  userInfo: any;
  setUserInfo(_: any);
  static createWithFileTypeWithDelegate(_: string, delegate: any): NSFilePromiseProvider;
}

interface NSFilePromiseProviderDelegate {
  filePromiseProvider(_: NSFilePromiseProvider, fileNameForType: string): string;
  filePromiseProvider(_: NSFilePromiseProvider, writePromiseTo: URL, completionHandler?: (p1: Error) => void): void;
  operationQueue(for_: NSFilePromiseProvider): OperationQueue;
}

export class NSFilePromiseReceiver extends NSObject {
  fileNames: string[];
  fileTypes: string[];
  static readableDraggedTypes: string[];
  receivePromisedFiles(atDestination: URL, options: Map<any, any>, operationQueue: OperationQueue, reader?: (p1: URL, p2: Error) => void): void;
}

export class NSFont extends NSObject {
  static boldSystemFont(ofSize: number): NSFont;
  static controlContentFont(ofSize: number): NSFont;
  static labelFont(ofSize: number): NSFont;
  static menuBarFont(ofSize: number): NSFont;
  static menuFont(ofSize: number): NSFont;
  static messageFont(ofSize: number): NSFont;
  static monospacedDigitSystemFont(ofSize: number, weight: number): NSFont;
  static monospacedSystemFont(ofSize: number, weight: number): NSFont;
  static paletteFont(ofSize: number): NSFont;
  static setUserFixedPitch(_?: NSFont): void;
  static setUser(_?: NSFont): void;
  static systemFont(ofSize: number): NSFont;
  static systemFont(ofSize: number, weight: number): NSFont;
  //  static systemFontSize(for_: NSCell.NSControl.ControlSize): number;
  static titleBarFont(ofSize: number): NSFont;
  static toolTipsFont(ofSize: number): NSFont;
  static userFixedPitchFont(ofSize: number): NSFont;
  static userFont(ofSize: number): NSFont;
  ascender: number;
  boundingRectForFont: CGRect;
  capHeight: number;
  coveredCharacterSet: CharacterSet;
  descender: number;
  displayName: string;
  familyName: string;
  isFixedPitch: boolean;
  fontDescriptor: NSFontDescriptor;
  fontName: string;
  italicAngle: number;
  leading: number;
  matrix: number;
  maximumAdvancement: CGSize;
  mostCompatibleStringEncoding: number;
  numberOfGlyphs: number;
  pointSize: number;
  printerFont: NSFont;
  renderingMode: NSFont.NSFontRenderingMode;
  screenFont: NSFont;
  textTransform: AffineTransform;
  underlinePosition: number;
  underlineThickness: number;
  isVertical: boolean;
  verticalFont: NSFont;
  xHeight: number;
  static labelFontSize: number;
  static smallSystemFontSize: number;
  static systemFontSize: number;
  advancement(forCGGlyph: number): CGSize;
  advancement(forGlyph: number): CGSize;
  boundingRect(forCGGlyph: number): CGRect;
  boundingRect(forGlyph: number): CGRect;
  getAdvancements(_: CGSize, forCGGlyphs: number, count: number): void;
  getAdvancements(_: CGSize, forGlyphs: number, count: number): void;
  getAdvancements(_: CGSize, forPackedGlyphs: any, length: number): void;
  getBoundingRects(_: CGRect, forCGGlyphs: number, count: number): void;
  getBoundingRects(_: CGRect, forGlyphs: number, count: number): void;
  glyph(withName: string): number;
  // dupe name w instance property   screenFont(with_: NSFont.NSFontRenderingMode): NSFont;
  set(): void;
  set(in_: NSGraphicsContext): void;
}

export class NSFontAssetRequest extends NSObject {
  downloadedFontDescriptors: NSFontDescriptor[];
  download(withCompletionHandler?: (p1: Error) => boolean): void;
  static createWithFontDescriptorsWithOptions(_: NSFontDescriptor[], options: NSFontAssetRequest.Options): NSFontAssetRequest;
}

interface NSFontChanging {
  changeFont(_?: NSFontManager): void;
  validModesForFontPanel(_: NSFontPanel): NSFontPanel.ModeMask;
}

export class NSFontCollection extends NSObject {
  static hideFontCollectionWithName(visibility: string, error: NSFontCollection.Visibility): boolean;
  static rename(fromName: string, visibility: NSFontCollection.Visibility, toName: string): boolean;
  static showFontCollection(withName: NSFontCollection, visibility: string, error: NSFontCollection.Visibility): boolean;
  exclusionDescriptors: NSFontDescriptor[];
  matchingDescriptors: NSFontDescriptor[];
  queryDescriptors: NSFontDescriptor[];
  static allFontCollectionNames: string[];
  static fontCollectionWithAllAvailableDescriptors: NSFontCollection;
  // dupe name w instance property   matchingDescriptors(forFamily: string): NSFontDescriptor[];
  // dupe name w instance property   matchingDescriptors(forFamily: string, options?: Map<string, number>): NSFontDescriptor[];
  // dupe name w instance property   matchingDescriptors(options?: Map<string, number>): NSFontDescriptor[];
}

export class NSFontDescriptor extends NSObject {
  fontAttributes: Map<string, any>;
  matrix: AffineTransform;
  pointSize: number;
  postscriptName: string;
  requiresFontAssetRequest: boolean;
  symbolicTraits: NSFontDescriptor.SymbolicTraits;
  addingAttributes(_: Map<string, any>): NSFontDescriptor;
  createWithFontDescriptorWithDesign(_: string): NSFontDescriptor;
  withFace(_: string): NSFontDescriptor;
  withFamily(_: string): NSFontDescriptor;
  withMatrix(_: AffineTransform): NSFontDescriptor;
  withSize(_: number): NSFontDescriptor;
  withSymbolicTraits(_: NSFontDescriptor.SymbolicTraits): NSFontDescriptor;
  static createWithFontAttributes(_?: Map<string, any>): NSFontDescriptor;
  matchingFontDescriptor(withMandatoryKeys?: Set<any>): NSFontDescriptor;
  matchingFontDescriptors(withMandatoryKeys?: Set<any>): NSFontDescriptor[];
  object(forKey: string): any;
}

export class NSFontManager extends NSObject {
  static setFontManagerFactory(_?: typeof NSObject): void;
  static setFontPanelFactory(_?: typeof NSObject): void;
  action: string;
  setAction(_: string);
  availableFontFamilies: string[];
  availableFonts: string[];
  currentFontAction: NSFontManager.NSFontAction;
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  isMultiple: boolean;
  selectedFont: NSFont;
  target: any;
  setTarget(_: any);
  static sharedFontManager: NSFontManager;
  addFontTrait(_?: any): void;
  availableFontNames(with_: NSFontManager.NSFontTraitMask): string[];
  availableMembers(ofFontFamily: string): any[][];
  convertAttributes(_: Map<string, any>): Map<string, any>;
  convert(_: NSFont): NSFont;
  convert(_: NSFont, toFace: string): NSFont;
  convert(_: NSFont, toFamily: string): NSFont;
  convert(_: NSFont, toHaveTrait: NSFontManager.NSFontTraitMask): NSFont;
  convert(_: NSFont, toNotHaveTrait: NSFontManager.NSFontTraitMask): NSFont;
  convert(_: NSFont, toSize: number): NSFont;
  convertFontTraits(_: NSFontManager.NSFontTraitMask): NSFontManager.NSFontTraitMask;
  convertWeight(_: boolean, of: NSFont): NSFont;
  fontMenu(_: boolean): NSMenu;
  fontNamed(_: string, hasTraits: NSFontManager.NSFontTraitMask): boolean;
  fontPanel(_: boolean): NSFontPanel;
  font(withFamily: string, traits: NSFontManager.NSFontTraitMask, weight: number, size: number): NSFont;
  localizedName(forFamily: string, face?: string): string;
  modifyFont(_?: any): void;
  modifyFontViaPanel(_?: any): void;
  orderFrontFontPanel(_?: any): void;
  orderFrontStylesPanel(_?: any): void;
  removeFontTrait(_?: any): void;
  sendAction(): boolean;
  setFontMenu(_: NSMenu): void;
  setSelectedAttributes(_: Map<string, any>, isMultiple: boolean): void;
  setSelectedFont(_: NSFont, isMultiple: boolean): void;
  traits(of: NSFont): NSFontManager.NSFontTraitMask;
  weight(of: NSFont): number;
}

export class NSFontPanel extends NSPanel {
  accessoryView: NSView;
  setAccessoryView(_: NSView);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  static sharedFontPanel: NSFontPanel;
  static sharedFontPanelExists: boolean;
  convert(_: NSFont): NSFont;
  reloadDefaultFontFamilies(): void;
  setPanelFont(_: NSFont, isMultiple: boolean): void;
}

export class NSFormCell extends NSActionCell {
  attributedTitle: NSAttributedString;
  setAttributedTitle(_: NSAttributedString);
  placeholderAttributedString: NSAttributedString;
  setPlaceholderAttributedString(_: NSAttributedString);
  placeholderString: string;
  setPlaceholderString(_: string);
  preferredTextFieldWidth: number;
  setPreferredTextFieldWidth(_: number);
  titleAlignment: NSText.NSTextAlignment;
  setTitleAlignment(_: NSText.NSTextAlignment);
  titleBaseWritingDirection: NSText.NSWritingDirection;
  setTitleBaseWritingDirection(_: NSText.NSWritingDirection);
  titleFont: NSFont;
  setTitleFont(_: NSFont);
  titleWidth: number;
  setTitleWidth(_: number);
  // dupe name w instance property   titleWidth(_: CGSize): number;
}

// export function NSFrameRect(rect: CGRect): void;

// export function NSFrameRectWithWidth(rect: CGRect, frameWidth: number): void;

// export function NSFrameRectWithWidthUsingOperation(rect: CGRect, frameWidth: number, op: NSGraphics.NSCompositingOperation): void;

export class NSGestureRecognizer extends NSObject {
  action: string;
  setAction(_: string);
  allowedTouchTypes: NSTouch.TouchTypeMask;
  setAllowedTouchTypes(_: NSTouch.TouchTypeMask);
  delaysKeyEvents: boolean;
  setDelaysKeyEvents(_: boolean);
  delaysMagnificationEvents: boolean;
  setDelaysMagnificationEvents(_: boolean);
  delaysOtherMouseButtonEvents: boolean;
  setDelaysOtherMouseButtonEvents(_: boolean);
  delaysPrimaryMouseButtonEvents: boolean;
  setDelaysPrimaryMouseButtonEvents(_: boolean);
  delaysRotationEvents: boolean;
  setDelaysRotationEvents(_: boolean);
  delaysSecondaryMouseButtonEvents: boolean;
  setDelaysSecondaryMouseButtonEvents(_: boolean);
  delegate: any;
  setDelegate(_: any);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  pressureConfiguration: NSPressureConfiguration;
  setPressureConfiguration(_: NSPressureConfiguration);
  state: NSGestureRecognizer.State;
  setState(_: NSGestureRecognizer.State);
  target: any;
  setTarget(_: any);
  canBePrevented(by: NSGestureRecognizer): boolean;
  canPrevent(_: NSGestureRecognizer): boolean;
  flagsChanged(with_: NSEvent): void;
  static createWithTargetWithAction(_?: any, action?: string): NSGestureRecognizer;
  keyDown(with_: NSEvent): void;
  keyUp(with_: NSEvent): void;
  location(in_?: NSView): CGPoint;
  magnify(with_: NSEvent): void;
  mouseDown(with_: NSEvent): void;
  mouseDragged(with_: NSEvent): void;
  mouseUp(with_: NSEvent): void;
  otherMouseDown(with_: NSEvent): void;
  otherMouseDragged(with_: NSEvent): void;
  otherMouseUp(with_: NSEvent): void;
  pressureChange(with_: NSEvent): void;
  reset(): void;
  rightMouseDown(with_: NSEvent): void;
  rightMouseDragged(with_: NSEvent): void;
  rightMouseUp(with_: NSEvent): void;
  rotate(with_: NSEvent): void;
  shouldBeRequiredToFail(by: NSGestureRecognizer): boolean;
  shouldRequireFailure(of: NSGestureRecognizer): boolean;
  tabletPoint(with_: NSEvent): void;
  touchesBegan(with_: NSEvent): void;
  touchesCancelled(with_: NSEvent): void;
  touchesEnded(with_: NSEvent): void;
  touchesMoved(with_: NSEvent): void;
}

interface NSGestureRecognizerDelegate {
  gestureRecognizer(_: NSGestureRecognizer, shouldAttemptToRecognizeWith: NSEvent): boolean;
  gestureRecognizer(_: NSGestureRecognizer, shouldRecognizeSimultaneouslyWith: NSGestureRecognizer): boolean;
  gestureRecognizer(_: NSGestureRecognizer, shouldRequireFailureOf: NSGestureRecognizer): boolean;
  gestureRecognizer(_: NSGestureRecognizer, shouldBeRequiredToFailBy: NSGestureRecognizer): boolean;
  gestureRecognizer(_: NSGestureRecognizer, shouldReceive: NSTouch): boolean;
  gestureRecognizerShouldBegin(_: NSGestureRecognizer): boolean;
}

// export function NSGetFileType(pboardType: string): string;

// export function NSGetFileTypes(pboardTypes: string[]): string[];

export class NSGlyphGenerator extends NSObject {
  static sharedGlyphGenerator: NSGlyphGenerator;
  generateGlyphs(for_: any, desiredNumberOfCharacters: number, glyphIndex?: number, characterIndex?: number): void;
}

export class NSGlyphInfo extends NSObject {
  baseString: string;
  characterCollection: NSGlyphInfo.NSCharacterCollection;
  characterIdentifier: number;
  glyphID: number;
  glyphName: string;
}

interface NSGlyphStorage {
  attributedString(): NSAttributedString;
  insertGlyphs(_: number, length: number, forStartingGlyphAt: number, characterIndex: number): void;
  layoutOptions(): number;
  setIntAttribute(_: number, value: number, forGlyphAt: number): void;
}

export class NSGradient extends NSObject {
  colorSpace: NSColorSpace;
  numberOfColorStops: number;
  draw(fromCenter: CGPoint, radius: number, toCenter: CGPoint, radius2: number, options: NSGradient.DrawingOptions): void;
  draw(from: CGPoint, to: CGPoint, options: NSGradient.DrawingOptions): void;
  draw(in_: NSBezierPath, angle: number): void;
  draw(in_: NSBezierPath, relativeCenterPosition: CGPoint): void;
  draw(in_: CGRect, angle: number): void;
  draw(in_: CGRect, relativeCenterPosition: CGPoint): void;
  getColor(_?: NSColor, location?: number, at?: number): void;
  static createWithColors(_: NSColor[]): NSGradient;
  static createWithColorsWithAtLocationsWithColorSpace(_: NSColor[], atLocations?: number, colorSpace?: NSColorSpace): NSGradient;
  static createWithColorsAndLocations(_: NSColor): NSGradient;
  static createWithStartingColorWithEndingColor(_: NSColor, endingColor: NSColor): NSGradient;
  interpolatedColor(atLocation: number): NSColor;
}

export class NSGraphicsContext extends NSObject {
  static currentContextDrawingToScreen(): boolean;
  //  static restoreGraphicsState(): void;
  //  static saveGraphicsState(): void;
  CGContext: any;
  CIContext: CIContext;
  attributes: Map<string, any>;
  colorRenderingIntent: NSGraphics.NSColorRenderingIntent;
  setColorRenderingIntent(_: NSGraphics.NSColorRenderingIntent);
  compositingOperation: NSGraphics.NSCompositingOperation;
  setCompositingOperation(_: NSGraphics.NSCompositingOperation);
  isDrawingToScreen: boolean;
  isFlipped: boolean;
  imageInterpolation: NSGraphicsContext.NSImageInterpolation;
  setImageInterpolation(_: NSGraphicsContext.NSImageInterpolation);
  patternPhase: CGPoint;
  setPatternPhase(_: CGPoint);
  shouldAntialias: boolean;
  setShouldAntialias(_: boolean);
  static currentContext: NSGraphicsContext;
  setCurrentContext(_: NSGraphicsContext);
  flushGraphics(): void;
  restoreGraphicsState(): void;
  saveGraphicsState(): void;
}

export class NSGridCell extends NSObject {
  column: NSGridColumn;
  contentView: NSView;
  setContentView(_: NSView);
  customPlacementConstraints: NSLayoutConstraint[];
  setCustomPlacementConstraints(_: NSLayoutConstraint[]);
  row: NSGridRow;
  rowAlignment: NSGridView.NSGridRow.Alignment;
  setRowAlignment(_: NSGridView.NSGridRow.Alignment);
  xPlacement: NSGridView.NSGridCell.Placement;
  setXPlacement(_: NSGridView.NSGridCell.Placement);
  yPlacement: NSGridView.NSGridCell.Placement;
  setYPlacement(_: NSGridView.NSGridCell.Placement);
  static emptyContentView: NSView;
}

export class NSGridColumn extends NSObject {
  gridView: NSGridView;
  isHidden: boolean;
  setHidden(_: boolean);
  leadingPadding: number;
  setLeadingPadding(_: number);
  numberOfCells: number;
  trailingPadding: number;
  setTrailingPadding(_: number);
  width: number;
  setWidth(_: number);
  xPlacement: NSGridView.NSGridCell.Placement;
  setXPlacement(_: NSGridView.NSGridCell.Placement);
  cell(at: number): NSGridCell;
  mergeCells(in_: NSRange): void;
}

export class NSGridRow extends NSObject {
  bottomPadding: number;
  setBottomPadding(_: number);
  gridView: NSGridView;
  height: number;
  setHeight(_: number);
  isHidden: boolean;
  setHidden(_: boolean);
  numberOfCells: number;
  rowAlignment: NSGridView.NSGridRow.Alignment;
  setRowAlignment(_: NSGridView.NSGridRow.Alignment);
  topPadding: number;
  setTopPadding(_: number);
  yPlacement: NSGridView.NSGridCell.Placement;
  setYPlacement(_: NSGridView.NSGridCell.Placement);
  cell(at: number): NSGridCell;
  mergeCells(in_: NSRange): void;
}

export class NSGridView extends NSView {
  columnSpacing: number;
  setColumnSpacing(_: number);
  numberOfColumns: number;
  numberOfRows: number;
  rowAlignment: NSGridView.NSGridRow.Alignment;
  setRowAlignment(_: NSGridView.NSGridRow.Alignment);
  rowSpacing: number;
  setRowSpacing(_: number);
  xPlacement: NSGridView.NSGridCell.Placement;
  setXPlacement(_: NSGridView.NSGridCell.Placement);
  yPlacement: NSGridView.NSGridCell.Placement;
  setYPlacement(_: NSGridView.NSGridCell.Placement);
  addColumn(with_: NSView[]): NSGridColumn;
  addRow(with_: NSView[]): NSGridRow;
  cell(atColumnIndex: number, rowIndex: number): NSGridCell;
  cell(for_: NSView): NSGridCell;
  column(at: number): NSGridColumn;
  index(of: NSGridColumn): number;
  index(of: NSGridRow): number;
  insertColumn(at: number, with_: NSView[]): NSGridColumn;
  insertRow(at: number, with_: NSView[]): NSGridRow;
  mergeCells(inHorizontalRange: NSRange, verticalRange: NSRange): void;
  moveColumn(at: number, to: number): void;
  moveRow(at: number, to: number): void;
  removeColumn(at: number): void;
  removeRow(at: number): void;
  row(at: number): NSGridRow;
}

export type GridView = NSGridView

export class NSGroupTouchBarItem extends NSTouchBarItem {
  customizationLabel: string;
  setCustomizationLabel(_: string);
  effectiveCompressionOptions: NSUserInterfaceCompressionOptions;
  groupTouchBar: NSTouchBar;
  setGroupTouchBar(_: NSTouchBar);
  groupUserInterfaceLayoutDirection: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection;
  setGroupUserInterfaceLayoutDirection(_: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection);
  preferredItemWidth: number;
  setPreferredItemWidth(_: number);
  prefersEqualWidths: boolean;
  setPrefersEqualWidths(_: boolean);
  prioritizedCompressionOptions: NSUserInterfaceCompressionOptions[];
  setPrioritizedCompressionOptions(_: NSUserInterfaceCompressionOptions[]);
}

export class NSHapticFeedbackManager extends NSObject {
  static defaultPerformer: any;
}

interface NSHapticFeedbackPerformer {
  perform(_: NSHapticFeedback.NSHapticFeedbackManager.FeedbackPattern, performanceTime: NSHapticFeedback.NSHapticFeedbackManager.PerformanceTime): void;
}

export class NSHelpManager extends NSObject {
  static isContextHelpModeActive: boolean;
  setContextHelpModeActive(_: boolean);
  static sharedHelpManager: NSHelpManager;
  contextHelp(for_: any): NSAttributedString;
  find(_: string, inBook?: string): void;
  openHelpAnchor(_: string, inBook?: string): void;
  registerBooks(in_: Bundle): boolean;
  removeContextHelp(for_: any): void;
  setContextHelp(_: NSAttributedString, for_: any): void;
  showContextHelp(for_: any, locationHint: CGPoint): boolean;
}

interface NSIgnoreMisspelledWords {
  ignoreSpelling(_?: any): void;
}

export class NSImage extends NSObject {
  static canInit(with_: NSPasteboard): boolean;
  TIFFRepresentation: Data;
  accessibilityDescription: string;
  setAccessibilityDescription(_: string);
  alignmentRect: CGRect;
  setAlignmentRect(_: CGRect);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  cacheMode: NSImage.CacheMode;
  setCacheMode(_: NSImage.CacheMode);
  capInsets: NSEdgeInsets;
  setCapInsets(_: NSEdgeInsets);
  delegate: any;
  setDelegate(_: any);
  matchesOnMultipleResolution: boolean;
  setMatchesOnMultipleResolution(_: boolean);
  matchesOnlyOnBestFittingAxis: boolean;
  setMatchesOnlyOnBestFittingAxis(_: boolean);
  prefersColorMatch: boolean;
  setPrefersColorMatch(_: boolean);
  representations: NSImageRep[];
  resizingMode: NSImage.ResizingMode;
  setResizingMode(_: NSImage.ResizingMode);
  size: CGSize;
  setSize(_: CGSize);
  isTemplate: boolean;
  setTemplate(_: boolean);
  usesEPSOnResolutionMismatch: boolean;
  setUsesEPSOnResolutionMismatch(_: boolean);
  isValid: boolean;
  static imageTypes: string[];
  static imageUnfilteredTypes: string[];
  cgImage(forProposedRect?: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>): any;
  tiffRepresentation(using: NSBitmapImageRep.TIFFCompression, factor: number): Data;
  addRepresentation(_: NSImageRep): void;
  addRepresentations(_: NSImageRep[]): void;
  bestRepresentation(for_: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>): NSImageRep;
  cancelIncrementalLoad(): void;
  draw(at: CGPoint, from: CGRect, operation: NSGraphics.NSCompositingOperation, fraction: number): void;
  draw(in_: CGRect): void;
  draw(in_: CGRect, from: CGRect, operation: NSGraphics.NSCompositingOperation, fraction: number): void;
  draw(in_: CGRect, from: CGRect, operation: NSGraphics.NSCompositingOperation, fraction: number, respectFlipped: boolean, hints?: Map<string, any>): void;
  drawRepresentation(_: NSImageRep, in_: CGRect): boolean;
  hitTest(_: CGRect, withDestinationRect: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>, flipped?: boolean): boolean;
  static createWithByReferencingFile(_: string): NSImage;
  static createWithCgImageWithSize(_: any, size: CGSize): NSImage;
  static createWithContentsOfFile(_: string): NSImage;
  static createWithContentsOf(_: URL): NSImage;
  static createWithData(_: Data): NSImage;
  static createWithDataIgnoringOrientation(_: Data): NSImage;
  static createWithIconRef(_: any): NSImage;
  static createWithPasteboard(_: NSPasteboard): NSImage;
  static createWithSize(_: CGSize): NSImage;
  layerContents(forContentsScale: number): any;
  lockFocus(): void;
  lockFocusFlipped(_: boolean): void;
  name(): string;
  recache(): void;
  recommendedLayerContentsScale(_: number): number;
  removeRepresentation(_: NSImageRep): void;
  setName(_?: string): boolean;
  unlockFocus(): void;
}

export class NSImageCell extends NSCell {
  imageAlignment: NSImageCell.NSImageAlignment;
  setImageAlignment(_: NSImageCell.NSImageAlignment);
  imageFrameStyle: NSImageCell.NSImageView.FrameStyle;
  setImageFrameStyle(_: NSImageCell.NSImageView.FrameStyle);
  imageScaling: NSCell.NSImageScaling;
  setImageScaling(_: NSCell.NSImageScaling);
}

interface NSImageDelegate {
  image(_: NSImage, willLoadRepresentation: NSImageRep): void;
  image(_: NSImage, didLoadRepresentationHeader: NSImageRep): void;
  image(_: NSImage, didLoadPartOfRepresentation: NSImageRep, withValidRows: number): void;
  image(_: NSImage, didLoadRepresentation: NSImageRep, with_: NSImage.LoadStatus): void;
  imageDidNotDraw(_: NSImage, in_: CGRect): NSImage;
}

export class NSImageRep extends NSObject {
  static canInit(with_: Data): boolean;
  static canInit(with_: NSPasteboard): boolean;
  static class(for_: Data): typeof NSObject;
  static class(forType: string): typeof NSObject;
// @ts-ignore 
    static imageReps(withContentsOfFile: string): NSImageRep[];
// @ts-ignore 
    static imageReps(withContentsOf: URL): NSImageRep[];
// @ts-ignore 
    static imageReps(with_: NSPasteboard): NSImageRep[];
  static registerClass(_: typeof NSObject): void;
  static unregisterClass(_: typeof NSObject): void;
  hasAlpha: boolean;
  setAlpha(_: boolean);
  bitsPerSample: number;
  setBitsPerSample(_: number);
  colorSpaceName: string;
  setColorSpaceName(_: string);
  layoutDirection: NSImageRep.NSImage.LayoutDirection;
  setLayoutDirection(_: NSImageRep.NSImage.LayoutDirection);
  isOpaque: boolean;
  setOpaque(_: boolean);
  pixelsHigh: number;
  setPixelsHigh(_: number);
  pixelsWide: number;
  setPixelsWide(_: number);
  size: CGSize;
  setSize(_: CGSize);
  static imageTypes: string[];
  static imageUnfilteredTypes: string[];
  static registeredImageRepClasses: typeof NSObject[];
  cgImage(forProposedRect?: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>): any;
  draw(): boolean;
  draw(at: CGPoint): boolean;
  draw(in_: CGRect): boolean;
  draw(in_: CGRect, from: CGRect, operation: NSGraphics.NSCompositingOperation, fraction: number, respectFlipped: boolean, hints?: Map<string, any>): boolean;
}

export class NSImageView extends NSControl {
  allowsCutCopyPaste: boolean;
  setAllowsCutCopyPaste(_: boolean);
  animates: boolean;
  setAnimates(_: boolean);
  contentTintColor: NSColor;
  setContentTintColor(_: NSColor);
  isEditable: boolean;
  setEditable(_: boolean);
  image: NSImage;
  setImage(_: NSImage);
  imageAlignment: NSImageCell.NSImageAlignment;
  setImageAlignment(_: NSImageCell.NSImageAlignment);
  imageFrameStyle: NSImageCell.NSImageView.FrameStyle;
  setImageFrameStyle(_: NSImageCell.NSImageView.FrameStyle);
  imageScaling: NSCell.NSImageScaling;
  setImageScaling(_: NSCell.NSImageScaling);
}

export type ImageView = NSImageView

interface NSInputServerMouseTracker {
}

interface NSInputServiceProvider {
}

// export function NSIsControllerMarker(object_: any): boolean;

export class NSLayoutAnchor<AnchorType> extends NSObject {
  constraintsAffectingLayout: NSLayoutConstraint[];
  hasAmbiguousLayout: boolean;
  item: any;
  name: string;
  constraintEqualToAnchor(equalTo: NSLayoutAnchor<any>): NSLayoutConstraint;
  constraintEqualToAnchorWithConstant(equalTo: NSLayoutAnchor<any>, constant: number): NSLayoutConstraint;
  constraintGreaterThanOrEqualToAnchor(greaterThanOrEqualTo: NSLayoutAnchor<any>): NSLayoutConstraint;
  constraintGreaterThanOrEqualToAnchorWithConstant(greaterThanOrEqualTo: NSLayoutAnchor<any>, constant: number): NSLayoutConstraint;
  constraintLessThanOrEqualToAnchor(lessThanOrEqualTo: NSLayoutAnchor<any>): NSLayoutConstraint;
  constraintLessThanOrEqualToAnchorWithConstant(lessThanOrEqualTo: NSLayoutAnchor<any>, constant: number): NSLayoutConstraint;
}

export class NSLayoutConstraint extends NSObject {
  static activateConstraints(_: NSLayoutConstraint[]): void;
  static constraintsWithVisualFormatWithOptionsWithMetricsWithViews(withVisualFormat: string, options: NSLayoutConstraint.FormatOptions, metrics?: Map<string, any>, views?: Map<string, any>): NSLayoutConstraint[];
  static deactivateConstraints(_: NSLayoutConstraint[]): void;
  isActive: boolean;
  setActive(_: boolean);
  constant: number;
  setConstant(_: number);
  firstAnchor: NSLayoutAnchor<any>;
  firstAttribute: NSLayoutConstraint.Attribute;
  firstItem: any;
  identifier: string;
  setIdentifier(_: string);
  multiplier: number;
  priority: number;
  setPriority(_: number);
  relation: NSLayoutConstraint.Relation;
  secondAnchor: NSLayoutAnchor<any>;
  secondAttribute: NSLayoutConstraint.Attribute;
  secondItem: any;
  shouldBeArchived: boolean;
  setShouldBeArchived(_: boolean);
}

export class NSLayoutDimension extends NSLayoutAnchor<NSLayoutDimension> {
  // @ts-ignore 
  constraintEqualToAnchorWithMultiplier(equalTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintEqualToAnchorWithMultiplierWithConstant(equalTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintEqualToConstant(equalToConstant: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintGreaterThanOrEqualToAnchorWithMultiplier(greaterThanOrEqualTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintGreaterThanOrEqualToAnchorWithMultiplierWithConstant(greaterThanOrEqualTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintGreaterThanOrEqualToConstant(greaterThanOrEqualToConstant: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintLessThanOrEqualToAnchorWithMultiplier(lessThanOrEqualTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintLessThanOrEqualToAnchorWithMultiplierWithConstant(lessThanOrEqualTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
  // @ts-ignore 
  constraintLessThanOrEqualToConstant(lessThanOrEqualToConstant: number): NSLayoutConstraint;
}

export class NSLayoutGuide extends NSObject implements NSUserInterfaceItemIdentification {
  bottomAnchor: NSLayoutYAxisAnchor;
  centerXAnchor: NSLayoutXAxisAnchor;
  centerYAnchor: NSLayoutYAxisAnchor;
  frame: CGRect;
  hasAmbiguousLayout: boolean;
  heightAnchor: NSLayoutDimension;
  leadingAnchor: NSLayoutXAxisAnchor;
  leftAnchor: NSLayoutXAxisAnchor;
  owningView: NSView;
  setOwningView(_: NSView);
  rightAnchor: NSLayoutXAxisAnchor;
  topAnchor: NSLayoutYAxisAnchor;
  trailingAnchor: NSLayoutXAxisAnchor;
  widthAnchor: NSLayoutDimension;
  identifier: string;
  setIdentifier(_: string);
  constraintsAffectingLayout(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint[];
}

export class NSLayoutManager extends NSObject {
  allowsNonContiguousLayout: boolean;
  setAllowsNonContiguousLayout(_: boolean);
  backgroundLayoutEnabled: boolean;
  setBackgroundLayoutEnabled(_: boolean);
  defaultAttachmentScaling: NSCell.NSImageScaling;
  setDefaultAttachmentScaling(_: NSCell.NSImageScaling);
  delegate: any;
  setDelegate(_: any);
  extraLineFragmentRect: CGRect;
  extraLineFragmentTextContainer: NSTextContainer;
  extraLineFragmentUsedRect: CGRect;
  firstTextView: NSTextView;
  glyphGenerator: NSGlyphGenerator;
  setGlyphGenerator(_: NSGlyphGenerator);
  hasNonContiguousLayout: boolean;
  limitsLayoutForSuspiciousContents: boolean;
  setLimitsLayoutForSuspiciousContents(_: boolean);
  numberOfGlyphs: number;
  showsControlCharacters: boolean;
  setShowsControlCharacters(_: boolean);
  showsInvisibleCharacters: boolean;
  setShowsInvisibleCharacters(_: boolean);
  textContainers: NSTextContainer[];
  textStorage: NSTextStorage;
  setTextStorage(_: NSTextStorage);
  textViewForBeginningOfSelection: NSTextView;
  typesetter: NSTypesetter;
  setTypesetter(_: NSTypesetter);
  typesetterBehavior: NSLayoutManager.TypesetterBehavior;
  setTypesetterBehavior(_: NSLayoutManager.TypesetterBehavior);
  usesDefaultHyphenation: boolean;
  setUsesDefaultHyphenation(_: boolean);
  usesFontLeading: boolean;
  setUsesFontLeading(_: boolean);
  cgGlyph(at: number): number;
  cgGlyph(at: number, isValidIndex?: boolean): number;
  addTemporaryAttribute(_: string, value: any, forCharacterRange: NSRange): void;
  addTemporaryAttributes(_: Map<string, any>, forCharacterRange: NSRange): void;
  addTextContainer(_: NSTextContainer): void;
  attachmentSize(forGlyphAt: number): CGSize;
  boundingRect(forGlyphRange: NSRange, in_: NSTextContainer): CGRect;
  boundsRect(for_: NSTextBlock, at: number, effectiveRange?: NSRange): CGRect;
  boundsRect(for_: NSTextBlock, glyphRange: NSRange): CGRect;
  characterIndexForGlyph(at: number): number;
  characterIndex(for_: CGPoint, in_: NSTextContainer, fractionOfDistanceBetweenInsertionPoints?: number): number;
  characterRange(forGlyphRange: NSRange, actualGlyphRange?: NSRange): NSRange;
  defaultBaselineOffset(for_: NSFont): number;
  defaultLineHeight(for_: NSFont): number;
  drawBackground(forGlyphRange: NSRange, at: CGPoint): void;
  drawGlyphs(forGlyphRange: NSRange, at: CGPoint): void;
  drawStrikethrough(forGlyphRange: NSRange, strikethroughType: NSAttributedString.NSUnderlineStyle, baselineOffset: number, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
  drawUnderline(forGlyphRange: NSRange, underlineType: NSAttributedString.NSUnderlineStyle, baselineOffset: number, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
  drawsOutsideLineFragment(forGlyphAt: number): boolean;
  ensureGlyphs(forCharacterRange: NSRange): void;
  ensureGlyphs(forGlyphRange: NSRange): void;
  ensureLayout(forBoundingRect: CGRect, in_: NSTextContainer): void;
  ensureLayout(forCharacterRange: NSRange): void;
  ensureLayout(forGlyphRange: NSRange): void;
  ensureLayout(for_: NSTextContainer): void;
  enumerateEnclosingRects(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in_: NSTextContainer, using: (p1: CGRect, p2: boolean) => void): void;
  enumerateLineFragments(forGlyphRange: NSRange, using: (p1: CGRect, p2: CGRect, p3: NSTextContainer, p4: NSRange, p5: boolean) => void): void;
  fillBackgroundRectArray(_: CGRect, count: number, forCharacterRange: NSRange, color: NSColor): void;
  firstUnlaidCharacterIndex(): number;
  firstUnlaidGlyphIndex(): number;
  fractionOfDistanceThroughGlyph(for_: CGPoint, in_: NSTextContainer): number;
  getFirstUnlaidCharacterIndex(_?: number, glyphIndex?: number): void;
  getGlyphs(in_: NSRange, glyphs?: number, properties?: NSLayoutManager.GlyphProperty, characterIndexes?: number, bidiLevels?: string): number;
  getLineFragmentInsertionPoints(forCharacterAt: number, alternatePositions: boolean, inDisplayOrder: boolean, positions?: number, characterIndexes?: number): number;
  glyph(at: number): number;
  glyph(at: number, isValidIndex?: boolean): number;
  glyphIndexForCharacter(at: number): number;
  glyphIndex(for_: CGPoint, in_: NSTextContainer): number;
  glyphIndex(for_: CGPoint, in_: NSTextContainer, fractionOfDistanceThroughGlyph?: number): number;
  glyphRange(forBoundingRect: CGRect, in_: NSTextContainer): NSRange;
  glyphRange(forBoundingRectWithoutAdditionalLayout: CGRect, in_: NSTextContainer): NSRange;
  glyphRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): NSRange;
  glyphRange(for_: NSTextContainer): NSRange;
  insertTextContainer(_: NSTextContainer, at: number): void;
  invalidateDisplay(forCharacterRange: NSRange): void;
  invalidateDisplay(forGlyphRange: NSRange): void;
  invalidateGlyphs(forCharacterRange: NSRange, changeInLength: number, actualCharacterRange?: NSRange): void;
  invalidateLayout(forCharacterRange: NSRange, actualCharacterRange?: NSRange): void;
  isValidGlyphIndex(_: number): boolean;
  layoutManagerOwnsFirstResponder(in_: NSWindow): boolean;
  layoutRect(for_: NSTextBlock, at: number, effectiveRange?: NSRange): CGRect;
  layoutRect(for_: NSTextBlock, glyphRange: NSRange): CGRect;
  lineFragmentRect(forGlyphAt: number, effectiveRange?: NSRange): CGRect;
  lineFragmentRect(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): CGRect;
  lineFragmentUsedRect(forGlyphAt: number, effectiveRange?: NSRange): CGRect;
  lineFragmentUsedRect(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): CGRect;
  location(forGlyphAt: number): CGPoint;
  notShownAttribute(forGlyphAt: number): boolean;
  processEditing(for_: NSTextStorage, edited: NSTextStorage.NSTextStorageEditActions, range: NSRange, changeInLength: number, invalidatedRange: NSRange): void;
  propertyForGlyph(at: number): NSLayoutManager.GlyphProperty;
  range(ofNominallySpacedGlyphsContaining: number): NSRange;
  rectArray(forCharacterRange: NSRange, withinSelectedCharacterRange: NSRange, in_: NSTextContainer, rectCount: number): CGRect;
  rectArray(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in_: NSTextContainer, rectCount: number): CGRect;
  removeTemporaryAttribute(_: string, forCharacterRange: NSRange): void;
  removeTextContainer(at: number): void;
  replaceTextStorage(_: NSTextStorage): void;
  rulerAccessoryView(for_: NSTextView, paragraphStyle: NSParagraphStyle, ruler: NSRulerView, enabled: boolean): NSView;
  rulerMarkers(for_: NSTextView, paragraphStyle: NSParagraphStyle, ruler: NSRulerView): NSRulerMarker[];
  setAttachmentSize(_: CGSize, forGlyphRange: NSRange): void;
  setBoundsRect(_: CGRect, for_: NSTextBlock, glyphRange: NSRange): void;
  setDrawsOutsideLineFragment(_: boolean, forGlyphAt: number): void;
  setExtraLineFragmentRect(_: CGRect, usedRect: CGRect, textContainer: NSTextContainer): void;
  setGlyphs(_: number, properties: NSLayoutManager.GlyphProperty, characterIndexes: number, font: NSFont, forGlyphRange: NSRange): void;
  setLayoutRect(_: CGRect, for_: NSTextBlock, glyphRange: NSRange): void;
  setLineFragmentRect(_: CGRect, forGlyphRange: NSRange, usedRect: CGRect): void;
  setLocation(_: CGPoint, forStartOfGlyphRange: NSRange): void;
  setNotShownAttribute(_: boolean, forGlyphAt: number): void;
  setTemporaryAttributes(_: Map<string, any>, forCharacterRange: NSRange): void;
  setTextContainer(_: NSTextContainer, forGlyphRange: NSRange): void;
  showAttachmentCell(_: NSCell, in_: CGRect, characterIndex: number): void;
  showCGGlyphs(_: number, positions: CGPoint, count: number, font: NSFont, textMatrix: CGAffineTransform, attributes: Map<string, any>, in_: any): void;
  strikethroughGlyphRange(_: NSRange, strikethroughType: NSAttributedString.NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
  temporaryAttribute(_: string, atCharacterIndex: number, effectiveRange?: NSRange): any;
  temporaryAttribute(_: string, atCharacterIndex: number, longestEffectiveRange?: NSRange, in_?: NSRange): any;
  temporaryAttributes(atCharacterIndex: number, effectiveRange?: NSRange): Map<string, any>;
  temporaryAttributes(atCharacterIndex: number, longestEffectiveRange?: NSRange, in_?: NSRange): Map<string, any>;
  textContainerChangedGeometry(_: NSTextContainer): void;
  textContainerChangedTextView(_: NSTextContainer): void;
  textContainer(forGlyphAt: number, effectiveRange?: NSRange): NSTextContainer;
  textContainer(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): NSTextContainer;
  truncatedGlyphRange(inLineFragmentForGlyphAt: number): NSRange;
  underlineGlyphRange(_: NSRange, underlineType: NSAttributedString.NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
  usedRect(for_: NSTextContainer): CGRect;
}

interface NSLayoutManagerDelegate {
  layoutManager(_: NSLayoutManager, shouldGenerateGlyphs: number, properties: NSLayoutManager.GlyphProperty, characterIndexes: number, font: NSFont, forGlyphRange: NSRange): number;
  layoutManager(_: NSLayoutManager, lineSpacingAfterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
  layoutManager(_: NSLayoutManager, paragraphSpacingBeforeGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
  layoutManager(_: NSLayoutManager, paragraphSpacingAfterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
  layoutManager(_: NSLayoutManager, shouldUse: NSLayoutManager.ControlCharacterAction, forControlCharacterAt: number): NSLayoutManager.ControlCharacterAction;
  layoutManager(_: NSLayoutManager, shouldBreakLineByWordBeforeCharacterAt: number): boolean;
  layoutManager(_: NSLayoutManager, shouldBreakLineByHyphenatingBeforeCharacterAt: number): boolean;
  layoutManager(_: NSLayoutManager, boundingBoxForControlGlyphAt: number, for_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
  layoutManager(_: NSLayoutManager, shouldSetLineFragmentRect: CGRect, lineFragmentUsedRect: CGRect, baselineOffset: number, in_: NSTextContainer, forGlyphRange: NSRange): boolean;
  layoutManager(_: NSLayoutManager, didCompleteLayoutFor?: NSTextContainer, atEnd?: boolean): void;
  layoutManager(_: NSLayoutManager, textContainer: NSTextContainer, didChangeGeometryFrom: CGSize): void;
  layoutManager(_: NSLayoutManager, shouldUseTemporaryAttributes: Map<string, any>, forDrawingToScreen: boolean, atCharacterIndex: number, effectiveRange?: NSRange): Map<string, any>;
  layoutManagerDidInvalidateLayout(_: NSLayoutManager): void;
}

export class NSLayoutXAxisAnchor extends NSLayoutAnchor<NSLayoutXAxisAnchor> {
  anchorWithOffset(to: NSLayoutXAxisAnchor): NSLayoutDimension;
}

export class NSLayoutYAxisAnchor extends NSLayoutAnchor<NSLayoutYAxisAnchor> {
  anchorWithOffset(to: NSLayoutYAxisAnchor): NSLayoutDimension;
}

export class NSLevelIndicator extends NSControl {
  criticalFillColor: NSColor;
  setCriticalFillColor(_: NSColor);
  criticalValue: number;
  setCriticalValue(_: number);
  drawsTieredCapacityLevels: boolean;
  setDrawsTieredCapacityLevels(_: boolean);
  isEditable: boolean;
  setEditable(_: boolean);
  fillColor: NSColor;
  setFillColor(_: NSColor);
  levelIndicatorStyle: NSLevelIndicatorCell.NSLevelIndicator.Style;
  setLevelIndicatorStyle(_: NSLevelIndicatorCell.NSLevelIndicator.Style);
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  numberOfMajorTickMarks: number;
  setNumberOfMajorTickMarks(_: number);
  numberOfTickMarks: number;
  setNumberOfTickMarks(_: number);
  placeholderVisibility: NSLevelIndicator.PlaceholderVisibility;
  setPlaceholderVisibility(_: NSLevelIndicator.PlaceholderVisibility);
  ratingImage: NSImage;
  setRatingImage(_: NSImage);
  ratingPlaceholderImage: NSImage;
  setRatingPlaceholderImage(_: NSImage);
  tickMarkPosition: NSSliderCell.NSSlider.TickMarkPosition;
  setTickMarkPosition(_: NSSliderCell.NSSlider.TickMarkPosition);
  warningFillColor: NSColor;
  setWarningFillColor(_: NSColor);
  warningValue: number;
  setWarningValue(_: number);
  rectOfTickMark(at: number): CGRect;
  tickMarkValue(at: number): number;
}

export type LevelIndicator = NSLevelIndicator

export class NSLevelIndicatorCell extends NSActionCell {
  criticalValue: number;
  setCriticalValue(_: number);
  levelIndicatorStyle: NSLevelIndicatorCell.NSLevelIndicator.Style;
  setLevelIndicatorStyle(_: NSLevelIndicatorCell.NSLevelIndicator.Style);
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  numberOfMajorTickMarks: number;
  setNumberOfMajorTickMarks(_: number);
  numberOfTickMarks: number;
  setNumberOfTickMarks(_: number);
  tickMarkPosition: NSSliderCell.NSSlider.TickMarkPosition;
  setTickMarkPosition(_: NSSliderCell.NSSlider.TickMarkPosition);
  warningValue: number;
  setWarningValue(_: number);
  static createWithLevelIndicatorStyle(_: NSLevelIndicatorCell.NSLevelIndicator.Style): NSLevelIndicatorCell;
  rectOfTickMark(at: number): CGRect;
  tickMarkValue(at: number): number;
}

export class NSMagnificationGestureRecognizer extends NSGestureRecognizer {
  magnification: number;
  setMagnification(_: number);
}

export class NSMatrix extends NSControl {
  allowsEmptySelection: boolean;
  setAllowsEmptySelection(_: boolean);
  autorecalculatesCellSize: boolean;
  setAutorecalculatesCellSize(_: boolean);
  autosizesCells: boolean;
  setAutosizesCells(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  cellBackgroundColor: NSColor;
  setCellBackgroundColor(_: NSColor);
  cellClass: typeof NSObject;
  setCellClass(_: typeof NSObject);
  cellSize: CGSize;
  setCellSize(_: CGSize);
  cells: NSCell[];
  delegate: any;
  setDelegate(_: any);
  doubleAction: string;
  setDoubleAction(_: string);
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  drawsCellBackground: boolean;
  setDrawsCellBackground(_: boolean);
  intercellSpacing: CGSize;
  setIntercellSpacing(_: CGSize);
  keyCell: NSCell;
  setKeyCell(_: NSCell);
  mode: NSMatrix.Mode;
  setMode(_: NSMatrix.Mode);
  mouseDownFlags: number;
  numberOfColumns: number;
  numberOfRows: number;
  prototype: NSCell;
  setPrototype(_: NSCell);
  selectedCells: NSCell[];
  selectedColumn: number;
  selectedRow: number;
  isSelectionByRect: boolean;
  setSelectionByRect(_: boolean);
  tabKeyTraversesCells: boolean;
  setTabKeyTraversesCells(_: boolean);
  addColumn(): void;
  addColumn(with_: NSCell[]): void;
  addRow(): void;
  addRow(with_: NSCell[]): void;
  // @ts-ignore 
  cell(atRow: number, column: number): NSCell;
  cellFrame(atRow: number, column: number): CGRect;
  // @ts-ignore 
  cell(withTag: number): NSCell;
  deselectAllCells(): void;
  deselectSelectedCell(): void;
  // @ts-ignore 
  drawCell(atRow: number, column: number): void;
  getNumberOfRows(_?: number, columns?: number): void;
  getRow(_: number, column: number, for_: CGPoint): boolean;
  getRow(_: number, column: number, of: NSCell): boolean;
  highlightCell(_: boolean, atRow: number, column: number): void;
  // @ts-ignore 
  static createWithFrameWithModeWithCellClassWithNumberOfRowsWithNumberOfColumns(_: CGRect, mode: NSMatrix.Mode, cellClass?: typeof NSObject, numberOfRows?: number, numberOfColumns?: number): NSMatrix;
  // @ts-ignore 
  static createWithFrameWithModeWithPrototypeWithNumberOfRowsWithNumberOfColumns(_: CGRect, mode: NSMatrix.Mode, prototype: NSCell, numberOfRows: number, numberOfColumns: number): NSMatrix;
  insertColumn(_: number): void;
  insertColumn(_: number, with_?: NSCell[]): void;
  insertRow(_: number): void;
  insertRow(_: number, with_?: NSCell[]): void;
  makeCell(atRow: number, column: number): NSCell;
  putCell(_: NSCell, atRow: number, column: number): void;
  removeColumn(_: number): void;
  removeRow(_: number): void;
  renewRows(_: number, columns: number): void;
  scrollCellToVisible(atRow: number, column: number): void;
  // @ts-ignore 
  selectCell(atRow: number, column: number): void;
  // @ts-ignore 
  selectCell(withTag: number): boolean;
  selectText(_?: any): void;
  selectText(atRow: number, column: number): NSCell;
  // @ts-ignore 
  sendAction(): boolean;
  // @ts-ignore 
  sendAction(_: string, to: any, forAllCells: boolean): void;
  sendDoubleAction(): void;
  setScrollable(_: boolean): void;
  setSelectionFrom(_: number, to: number, anchor: number, highlight: boolean): void;
  setState(_: number, atRow: number, column: number): void;
  setToolTip(_?: string, for_?: NSCell): void;
  setValidateSize(_: boolean): void;
  sizeToCells(): void;
  sort(using?: (p1: any, p2: any, p3: any) => number, context?: any): void;
  sort(using: string): void;
  textDidBeginEditing(_: Notification): void;
  textDidChange(_: Notification): void;
  textDidEndEditing(_: Notification): void;
  textShouldBeginEditing(_: NSText): boolean;
  textShouldEndEditing(_: NSText): boolean;
  // @ts-ignore 
  toolTip(for_: NSCell): string;
}

export type Matrix = NSMatrix

interface NSMatrixDelegate {
}

export class NSMediaLibraryBrowserController extends NSObject {
  frame: CGRect;
  setFrame(_: CGRect);
  mediaLibraries: NSMediaLibraryBrowserController.Library;
  setMediaLibraries(_: NSMediaLibraryBrowserController.Library);
  isVisible: boolean;
  setVisible(_: boolean);
  static sharedMediaLibraryBrowserController: NSMediaLibraryBrowserController;
  togglePanel(_?: any): void;
}

export class NSMenu extends NSObject implements NSUserInterfaceItemIdentification {
  static menuBarVisible(): boolean;
  static popUpContextMenu(_: NSMenu, with_: NSEvent, for_: NSView): void;
  static popUpContextMenu(_: NSMenu, with_: NSEvent, for_: NSView, with_2?: NSFont): void;
  static setMenuBarVisible(_: boolean): void;
  allowsContextMenuPlugIns: boolean;
  setAllowsContextMenuPlugIns(_: boolean);
  autoenablesItems: boolean;
  setAutoenablesItems(_: boolean);
  delegate: any;
  setDelegate(_: any);
  font: NSFont;
  setFont(_: NSFont);
  highlightedItem: NSMenuItem;
  itemArray: NSMenuItem[];
  setItemArray(_: NSMenuItem[]);
  menuBarHeight: number;
  minimumWidth: number;
  setMinimumWidth(_: number);
  numberOfItems: number;
  propertiesToUpdate: NSMenu.Properties;
  showsStateColumn: boolean;
  setShowsStateColumn(_: boolean);
  size: CGSize;
  supermenu: NSMenu;
  setSupermenu(_: NSMenu);
  title: string;
  setTitle(_: string);
  userInterfaceLayoutDirection: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(_: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection);
  identifier: string;
  setIdentifier(_: string);
  addItem(_: NSMenuItem): void;
  addItem(withTitle: string, action?: string, keyEquivalent?: string): NSMenuItem;
  cancelTracking(): void;
  cancelTrackingWithoutAnimation(): void;
  index(of: NSMenuItem): number;
  indexOfItem(withRepresentedObject?: any): number;
  indexOfItem(withSubmenu?: NSMenu): number;
  indexOfItem(withTag: number): number;
  indexOfItem(withTarget?: any, andAction?: string): number;
  indexOfItem(withTitle: string): number;
  static createWithTitle(_: string): NSMenu;
  insertItem(_: NSMenuItem, at: number): void;
  insertItem(withTitle: string, action?: string, keyEquivalent?: string, at?: number): NSMenuItem;
  item(at: number): NSMenuItem;
  itemChanged(_: NSMenuItem): void;
  item(withTag: number): NSMenuItem;
  item(withTitle: string): NSMenuItem;
  performActionForItem(at: number): void;
  performKeyEquivalent(with_: NSEvent): boolean;
  popUp(positioning?: NSMenuItem, at?: CGPoint, in_?: NSView): boolean;
  removeAllItems(): void;
  removeItem(_: NSMenuItem): void;
  removeItem(at: number): void;
  setSubmenu(_?: NSMenu, for_?: NSMenuItem): void;
  submenuAction(_?: any): void;
  update(): void;
}

interface NSMenuDelegate {
  confinementRect(for_: NSMenu, on?: NSScreen): CGRect;
  menu(_: NSMenu, update: NSMenuItem, at: number, shouldCancel: boolean): boolean;
  menu(_: NSMenu, willHighlight?: NSMenuItem): void;
  menuDidClose(_: NSMenu): void;
  menuHasKeyEquivalent(_: NSMenu, for_: NSEvent, target?: any, action?: string): boolean;
  menuNeedsUpdate(_: NSMenu): void;
  menuWillOpen(_: NSMenu): void;
  numberOfItems(in_: NSMenu): number;
}

export class NSMenuItem extends NSObject implements NSUserInterfaceItemIdentification {
  static isSeparatorItem(): NSMenuItem;
  action: string;
  setAction(_: string);
  allowsKeyEquivalentWhenHidden: boolean;
  setAllowsKeyEquivalentWhenHidden(_: boolean);
  isAlternate: boolean;
  setAlternate(_: boolean);
  attributedTitle: NSAttributedString;
  setAttributedTitle(_: NSAttributedString);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  hasSubmenu: boolean;
  isHidden: boolean;
  setHidden(_: boolean);
  isHiddenOrHasHiddenAncestor: boolean;
  isHighlighted: boolean;
  image: NSImage;
  setImage(_: NSImage);
  indentationLevel: number;
  setIndentationLevel(_: number);
  keyEquivalent: string;
  setKeyEquivalent(_: string);
  keyEquivalentModifierMask: NSEvent.ModifierFlags;
  setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags);
  menu: NSMenu;
  setMenu(_: NSMenu);
  mixedStateImage: NSImage;
  setMixedStateImage(_: NSImage);
  offStateImage: NSImage;
  setOffStateImage(_: NSImage);
  onStateImage: NSImage;
  setOnStateImage(_: NSImage);
  parentItem: NSMenuItem;
  representedObject: any;
  setRepresentedObject(_: any);
  //   isSeparatorItem: boolean;
  state: number;
  setState(_: number);
  submenu: NSMenu;
  setSubmenu(_: NSMenu);
  tag: number;
  setTag(_: number);
  target: any;
  setTarget(_: any);
  title: string;
  setTitle(_: string);
  toolTip: string;
  setToolTip(_: string);
  userKeyEquivalent: string;
  static usesUserKeyEquivalents: boolean;
  setUsesUserKeyEquivalents(_: boolean);
  identifier: string;
  setIdentifier(_: string);
  static createWithTitleWithActionWithKeyEquivalent(_: string, action?: string, keyEquivalent?: string): NSMenuItem;
}

export class NSMenuItemCell extends NSButtonCell {
  imageWidth: number;
  keyEquivalentWidth: number;
  menuItem: NSMenuItem;
  setMenuItem(_: NSMenuItem);
  needsDisplay: boolean;
  setNeedsDisplay(_: boolean);
  needsSizing: boolean;
  setNeedsSizing(_: boolean);
  stateImageWidth: number;
  titleWidth: number;
  calcSize(): void;
  drawBorderAndBackground(withFrame: CGRect, in_: NSView): void;
  // @ts-ignore 
  drawImage(withFrame: CGRect, in_: NSView): void;
  drawKeyEquivalent(withFrame: CGRect, in_: NSView): void;
  drawSeparatorItem(withFrame: CGRect, in_: NSView): void;
  drawStateImage(withFrame: CGRect, in_: NSView): void;
  // @ts-ignore 
  drawTitle(withFrame: CGRect, in_: NSView): void;
  keyEquivalentRect(forBounds: CGRect): CGRect;
  stateImageRect(forBounds: CGRect): CGRect;
}

interface NSMenuItemValidation {
  validateMenuItem(_: NSMenuItem): boolean;
}

export class NSMenuToolbarItem extends NSToolbarItem {
  menu: NSMenu;
  setMenu(_: NSMenu);
  showsIndicator: boolean;
  setShowsIndicator(_: boolean);
}

export class NSMutableFontCollection extends NSFontCollection {
  exclusionDescriptors: NSFontDescriptor[];
  setExclusionDescriptors(_: NSFontDescriptor[]);
  queryDescriptors: NSFontDescriptor[];
  setQueryDescriptors(_: NSFontDescriptor[]);
  static fontCollectionWithAllAvailableDescriptors: NSMutableFontCollection;
  addQuery(for_: NSFontDescriptor[]): void;
  removeQuery(for_: NSFontDescriptor[]): void;
}

export class NSMutableParagraphStyle extends NSParagraphStyle {
  alignment: NSText.NSTextAlignment;
  setAlignment(_: NSText.NSTextAlignment);
  allowsDefaultTighteningForTruncation: boolean;
  setAllowsDefaultTighteningForTruncation(_: boolean);
  baseWritingDirection: NSText.NSWritingDirection;
  setBaseWritingDirection(_: NSText.NSWritingDirection);
  defaultTabInterval: number;
  setDefaultTabInterval(_: number);
  firstLineHeadIndent: number;
  setFirstLineHeadIndent(_: number);
  headIndent: number;
  setHeadIndent(_: number);
  headerLevel: number;
  setHeaderLevel(_: number);
  hyphenationFactor: number;
  setHyphenationFactor(_: number);
  lineBreakMode: NSParagraphStyle.NSLineBreakMode;
  setLineBreakMode(_: NSParagraphStyle.NSLineBreakMode);
  lineHeightMultiple: number;
  setLineHeightMultiple(_: number);
  lineSpacing: number;
  setLineSpacing(_: number);
  maximumLineHeight: number;
  setMaximumLineHeight(_: number);
  minimumLineHeight: number;
  setMinimumLineHeight(_: number);
  paragraphSpacing: number;
  setParagraphSpacing(_: number);
  paragraphSpacingBefore: number;
  setParagraphSpacingBefore(_: number);
  tabStops: NSTextTab[];
  setTabStops(_: NSTextTab[]);
  tailIndent: number;
  setTailIndent(_: number);
  textBlocks: NSTextBlock[];
  setTextBlocks(_: NSTextBlock[]);
  textLists: NSTextList[];
  setTextLists(_: NSTextList[]);
  tighteningFactorForTruncation: number;
  setTighteningFactorForTruncation(_: number);
  addTabStop(_: NSTextTab): void;
  removeTabStop(_: NSTextTab): void;
  setParagraphStyle(_: NSParagraphStyle): void;
}

export class NSNib extends NSObject {
  static createWithNibDataWithBundle(_: Data, bundle?: Bundle): NSNib;
  static createWithNibNamedWithBundle(_: string, bundle?: Bundle): NSNib;
  instantiate(withOwner?: any, topLevelObjects?: any[]): boolean;
}

// export function NSNumberOfColorComponents(colorSpaceName: string): number;

export class NSObjectController extends NSController {
  automaticallyPreparesContent: boolean;
  setAutomaticallyPreparesContent(_: boolean);
  canAdd: boolean;
  canRemove: boolean;
  content: any;
  setContent(_: any);
  isEditable: boolean;
  setEditable(_: boolean);
  entityName: string;
  setEntityName(_: string);
  fetchPredicate: NSPredicate;
  setFetchPredicate(_: NSPredicate);
  managedObjectContext: NSManagedObjectContext;
  setManagedObjectContext(_: NSManagedObjectContext);
  objectClass: typeof NSObject;
  setObjectClass(_: typeof NSObject);
  selectedObjects: any[];
  selection: any;
  usesLazyFetching: boolean;
  setUsesLazyFetching(_: boolean);
  add(_?: any): void;
  addObject(_: any): void;
  defaultFetchRequest(): NSFetchRequest<any>;
  fetch(_?: any): void;
  fetchWithRequest(merge?: NSFetchRequest<any>, error?: boolean): boolean;
  static createWithContent(_?: any): NSObjectController;
  newObject(): any;
  prepareContent(): void;
  remove(_?: any): void;
  removeObject(_: any): void;
  validateUserInterfaceItem(_: any): boolean;
}

export class NSOpenPanel extends NSSavePanel {
  URLs: URL[];
  isAccessoryViewDisclosed: boolean;
  setAccessoryViewDisclosed(_: boolean);
  allowsMultipleSelection: boolean;
  setAllowsMultipleSelection(_: boolean);
  canChooseDirectories: boolean;
  setCanChooseDirectories(_: boolean);
  canChooseFiles: boolean;
  setCanChooseFiles(_: boolean);
  canDownloadUbiquitousContents: boolean;
  setCanDownloadUbiquitousContents(_: boolean);
  canResolveUbiquitousConflicts: boolean;
  setCanResolveUbiquitousConflicts(_: boolean);
  resolvesAliases: boolean;
  setResolvesAliases(_: boolean);
}

interface NSOpenSavePanelDelegate {
  panel(_: any, shouldEnable: URL): boolean;
  panel(validateURL: any, error: URL): boolean;
  panel(_: any, didChangeToDirectoryURL?: URL): void;
  panel(_: any, userEnteredFilename: string, confirmed: boolean): string;
  panel(_: any, willExpand: boolean): void;
  panelSelectionDidChange(_?: any): void;
}

export class NSOutlineView extends NSTableView {
  autoresizesOutlineColumn: boolean;
  setAutoresizesOutlineColumn(_: boolean);
  autosaveExpandedItems: boolean;
  setAutosaveExpandedItems(_: boolean);
  dataSource: any;
  setDataSource(_: any);
  delegate: any;
  setDelegate(_: any);
  indentationMarkerFollowsCell: boolean;
  setIndentationMarkerFollowsCell(_: boolean);
  indentationPerLevel: number;
  setIndentationPerLevel(_: number);
  outlineTableColumn: NSTableColumn;
  setOutlineTableColumn(_: NSTableColumn);
  stronglyReferencesItems: boolean;
  setStronglyReferencesItems(_: boolean);
  child(_: number, ofItem?: any): any;
  childIndex(forItem: any): number;
  collapseItem(_?: any): void;
  collapseItem(_?: any, collapseChildren?: boolean): void;
  expandItem(_?: any): void;
  expandItem(_?: any, expandChildren?: boolean): void;
  frameOfOutlineCell(atRow: number): CGRect;
  insertItems(at: IndexSet, inParent?: any, withAnimation?: NSTableView.AnimationOptions): void;
  isExpandable(_?: any): boolean;
  isItemExpanded(_?: any): boolean;
  item(atRow: number): any;
  level(forItem?: any): number;
  level(forRow: number): number;
  moveItem(at: number, inParent?: any, to?: number, inParent2?: any): void;
  numberOfChildren(ofItem?: any): number;
  parent(forItem?: any): any;
  reloadItem(_?: any): void;
  reloadItem(_?: any, reloadChildren?: boolean): void;
  removeItems(at: IndexSet, inParent?: any, withAnimation?: NSTableView.AnimationOptions): void;
  // @ts-ignore 
  row(forItem?: any): number;
  setDropItem(_?: any, dropChildIndex?: number): void;
  shouldCollapseAutoExpandedItems(forDeposited: boolean): boolean;
}

export type OutlineView = NSOutlineView

interface NSOutlineViewDataSource {
  outlineView(_: NSOutlineView, numberOfChildrenOfItem?: any): number;
  outlineView(_: NSOutlineView, child: number, ofItem?: any): any;
  outlineView(_: NSOutlineView, isItemExpandable: any): boolean;
  outlineView(_: NSOutlineView, objectValueFor?: NSTableColumn, byItem?: any): any;
  outlineView(_: NSOutlineView, setObjectValue?: any, for_?: NSTableColumn, byItem?: any): void;
  outlineView(_: NSOutlineView, itemForPersistentObject: any): any;
  outlineView(_: NSOutlineView, persistentObjectForItem?: any): any;
  outlineView(_: NSOutlineView, sortDescriptorsDidChange: NSSortDescriptor[]): void;
  outlineView(_: NSOutlineView, pasteboardWriterForItem: any): any;
  outlineView(_: NSOutlineView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItems: any[]): void;
  outlineView(_: NSOutlineView, draggingSession: NSDraggingSession, endedAt: CGPoint, operation: NSDragging.NSDragOperation): void;
  outlineView(_: NSOutlineView, writeItems: any[], to: NSPasteboard): boolean;
  outlineView(_: NSOutlineView, updateDraggingItemsForDrag: any): void;
  outlineView(_: NSOutlineView, validateDrop: any, proposedItem?: any, proposedChildIndex?: number): NSDragging.NSDragOperation;
  outlineView(_: NSOutlineView, acceptDrop: any, item?: any, childIndex?: number): boolean;
}

interface NSOutlineViewDelegate {
  outlineView(_: NSOutlineView, viewFor?: NSTableColumn, item?: any): NSView;
  outlineView(_: NSOutlineView, rowViewForItem: any): NSTableRowView;
  outlineView(_: NSOutlineView, didAdd: NSTableRowView, forRow: number): void;
  outlineView(_: NSOutlineView, didRemove: NSTableRowView, forRow: number): void;
  outlineView(_: NSOutlineView, willDisplayCell: any, for_?: NSTableColumn, item?: any): void;
  outlineView(_: NSOutlineView, shouldEdit?: NSTableColumn, item?: any): boolean;
  outlineView(_: NSOutlineView, shouldShowOutlineCellForItem: any): boolean;
  outlineView(_: NSOutlineView, shouldSelectItem: any): boolean;
  outlineView(_: NSOutlineView, selectionIndexesForProposedSelection: IndexSet): IndexSet;
  outlineView(_: NSOutlineView, shouldSelect?: NSTableColumn): boolean;
  outlineView(_: NSOutlineView, mouseDownInHeaderOf: NSTableColumn): void;
  outlineView(_: NSOutlineView, didClick: NSTableColumn): void;
  outlineView(_: NSOutlineView, didDrag: NSTableColumn): void;
  outlineView(_: NSOutlineView, toolTipFor: NSCell, rect: CGRect, tableColumn?: NSTableColumn, item?: any, mouseLocation?: CGPoint): string;
  outlineView(_: NSOutlineView, heightOfRowByItem: any): number;
  outlineView(_: NSOutlineView, typeSelectStringFor?: NSTableColumn, item?: any): string;
  outlineView(_: NSOutlineView, nextTypeSelectMatchFromItem: any, toItem: any, for_: string): any;
  outlineView(_: NSOutlineView, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
  outlineView(_: NSOutlineView, shouldShowCellExpansionFor?: NSTableColumn, item?: any): boolean;
  outlineView(_: NSOutlineView, shouldTrackCell: NSCell, for_?: NSTableColumn, item?: any): boolean;
  outlineView(_: NSOutlineView, dataCellFor?: NSTableColumn, item?: any): NSCell;
  outlineView(_: NSOutlineView, isGroupItem: any): boolean;
  outlineView(_: NSOutlineView, shouldExpandItem: any): boolean;
  outlineView(_: NSOutlineView, shouldCollapseItem: any): boolean;
  outlineView(_: NSOutlineView, willDisplayOutlineCell: any, for_?: NSTableColumn, item?: any): void;
  outlineView(_: NSOutlineView, sizeToFitWidthOfColumn: number): number;
  outlineView(_: NSOutlineView, shouldReorderColumn: number, toColumn: number): boolean;
  outlineViewColumnDidMove(_: Notification): void;
  outlineViewColumnDidResize(_: Notification): void;
  outlineViewItemDidCollapse(_: Notification): void;
  outlineViewItemDidExpand(_: Notification): void;
  outlineViewItemWillCollapse(_: Notification): void;
  outlineViewItemWillExpand(_: Notification): void;
  outlineViewSelectionDidChange(_: Notification): void;
  outlineViewSelectionIsChanging(_: Notification): void;
  selectionShouldChange(in_: NSOutlineView): boolean;
}

export class NSPDFImageRep extends NSImageRep {
  PDFRepresentation: Data;
  bounds: CGRect;
  currentPage: number;
  setCurrentPage(_: number);
  pageCount: number;
  static createWithData(_: Data): NSPDFImageRep;
}

export class NSPDFInfo extends NSObject {
  URL: URL;
  setURL(_: URL);
  attributes: Map<string, any>;
  isFileExtensionHidden: boolean;
  setFileExtensionHidden(_: boolean);
  orientation: NSPrintInfo.PaperOrientation;
  setOrientation(_: NSPrintInfo.PaperOrientation);
  paperSize: CGSize;
  setPaperSize(_: CGSize);
  tagNames: string[];
  setTagNames(_: string[]);
}

export class NSPDFPanel extends NSObject {
  accessoryController: NSViewController;
  setAccessoryController(_: NSViewController);
  defaultFileName: string;
  setDefaultFileName(_: string);
  options: NSPDFPanel.Options;
  setOptions(_: NSPDFPanel.Options);
  beginSheet(with_: NSPDFInfo, modalFor?: NSWindow, completionHandler?: (p1: number) => void): void;
}

export class NSPICTImageRep extends NSImageRep {
  PICTRepresentation: Data;
  boundingBox: CGRect;
  static createWithData(_: Data): NSPICTImageRep;
}

export class NSPageController extends NSViewController {
  arrangedObjects: any[];
  setArrangedObjects(_: any[]);
  delegate: any;
  setDelegate(_: any);
  selectedIndex: number;
  setSelectedIndex(_: number);
  selectedViewController: NSViewController;
  transitionStyle: NSPageController.TransitionStyle;
  setTransitionStyle(_: NSPageController.TransitionStyle);
  completeTransition(): void;
  navigateBack(_?: any): void;
  navigateForward(_?: any): void;
  navigateForward(to: any): void;
  takeSelectedIndexFrom(_?: any): void;
}

interface NSPageControllerDelegate {
  pageController(_: NSPageController, identifierFor: any): string;
  pageController(_: NSPageController, viewControllerForIdentifier: string): NSViewController;
  pageController(_: NSPageController, frameFor?: any): CGRect;
  pageController(_: NSPageController, prepare: NSViewController, with_?: any): void;
  pageController(_: NSPageController, didTransitionTo: any): void;
  pageControllerDidEndLiveTransition(_: NSPageController): void;
  pageControllerWillStartLiveTransition(_: NSPageController): void;
}

export class NSPageLayout extends NSObject {
  accessoryControllers: NSViewController[];
  printInfo: NSPrintInfo;
  addAccessoryController(_: NSViewController): void;
  beginSheet(with_: NSPrintInfo, modalFor: NSWindow, delegate?: any, didEnd?: string, contextInfo?: any): void;
  removeAccessoryController(_: NSViewController): void;
  runModal(): number;
  runModal(with_: NSPrintInfo): number;
}

export class NSPanGestureRecognizer extends NSGestureRecognizer {
  buttonMask: number;
  setButtonMask(_: number);
  numberOfTouchesRequired: number;
  setNumberOfTouchesRequired(_: number);
  setTranslation(_: CGPoint, in_?: NSView): void;
  translation(in_?: NSView): CGPoint;
  velocity(in_?: NSView): CGPoint;
}

export class NSPanel extends NSWindow {
  becomesKeyOnlyIfNeeded: boolean;
  setBecomesKeyOnlyIfNeeded(_: boolean);
  isFloatingPanel: boolean;
  setFloatingPanel(_: boolean);
  worksWhenModal: boolean;
  setWorksWhenModal(_: boolean);
}

export class NSParagraphStyle extends NSObject {
  static defaultWritingDirection(forLanguage?: string): NSText.NSWritingDirection;
  alignment: NSText.NSTextAlignment;
  allowsDefaultTighteningForTruncation: boolean;
  baseWritingDirection: NSText.NSWritingDirection;
  defaultTabInterval: number;
  firstLineHeadIndent: number;
  headIndent: number;
  headerLevel: number;
  hyphenationFactor: number;
  lineBreakMode: NSParagraphStyle.NSLineBreakMode;
  lineHeightMultiple: number;
  lineSpacing: number;
  maximumLineHeight: number;
  minimumLineHeight: number;
  paragraphSpacing: number;
  paragraphSpacingBefore: number;
  tabStops: NSTextTab[];
  tailIndent: number;
  textBlocks: NSTextBlock[];
  textLists: NSTextList[];
  tighteningFactorForTruncation: number;
  static defaultParagraphStyle: NSParagraphStyle;
}

export class NSPasteboard extends NSObject {
  static withUniqueName(): NSPasteboard;
  //  static types(filterableTo: string): string[];
  changeCount: number;
  name: string;
  pasteboardItems: NSPasteboardItem[];
  types: string[];
  static generalPasteboard: NSPasteboard;
  addTypes(_: string[], owner?: any): number;
  availableType(from: string[]): string;
  canReadItem(withDataConformingToTypes: string[]): boolean;
  canReadObject(forClasses: typeof NSObject[], options?: Map<string, any>): boolean;
  clearContents(): number;
  data(forType: string): Data;
  declareTypes(_: string[], owner?: any): number;
  index(of: NSPasteboardItem): number;
  prepareForNewContents(with_: NSPasteboard.ContentsOptions): number;
  propertyList(forType: string): any;
  readFileContentsType(_?: string, toFile?: string): string;
  readFileWrapper(): FileWrapper;
  readObjects(forClasses: typeof NSObject[], options?: Map<string, any>): any[];
  releaseGlobally(): void;
  setData(_?: Data, forType?: string): boolean;
  setPropertyList(_: any, forType: string): boolean;
  setString(_: string, forType: string): boolean;
  writeFileContents(_: string): boolean;
  write(_: FileWrapper): boolean;
  writeObjects(_: any[]): boolean;
}

export class NSPasteboardItem extends NSObject {
  types: string[];
  availableType(from: string[]): string;
  data(forType: string): Data;
  propertyList(forType: string): any;
  setData(_: Data, forType: string): boolean;
  setDataProvider(_: any, forTypes: string[]): boolean;
  setPropertyList(_: any, forType: string): boolean;
  setString(_: string, forType: string): boolean;
}

interface NSPasteboardItemDataProvider {
  pasteboard(_?: NSPasteboard, item?: NSPasteboardItem, provideDataForType?: string): void;
  pasteboardFinishedWithDataProvider(_: NSPasteboard): void;
}

interface NSPasteboardReading {
}

interface NSPasteboardTypeOwner {
  pasteboard(_: NSPasteboard, provideDataForType: string): void;
  pasteboardChangedOwner(_: NSPasteboard): void;
}

interface NSPasteboardWriting {
  pasteboardPropertyList(forType: string): any;
  writableTypes(for_: NSPasteboard): string[];
  writingOptions(forType: string, pasteboard: NSPasteboard): NSPasteboard.WritingOptions;
}

export class NSPathCell extends NSActionCell {
  URL: URL;
  setURL(_: URL);
  allowedTypes: string[];
  setAllowedTypes(_: string[]);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  clickedPathComponentCell: NSPathComponentCell;
  delegate: any;
  setDelegate(_: any);
  doubleAction: string;
  setDoubleAction(_: string);
  pathComponentCells: NSPathComponentCell[];
  setPathComponentCells(_: NSPathComponentCell[]);
  pathStyle: NSPathCell.NSPathControl.Style;
  setPathStyle(_: NSPathCell.NSPathControl.Style);
  placeholderAttributedString: NSAttributedString;
  setPlaceholderAttributedString(_: NSAttributedString);
  placeholderString: string;
  setPlaceholderString(_: string);
  static pathComponentCellClass: typeof NSObject;
  mouseEntered(with_: NSEvent, frame: CGRect, in_: NSView): void;
  mouseExited(with_: NSEvent, frame: CGRect, in_: NSView): void;
  pathComponentCell(at: CGPoint, withFrame: CGRect, in_: NSView): NSPathComponentCell;
  rect(of: NSPathComponentCell, withFrame: CGRect, in_: NSView): CGRect;
  setObjectValue(_?: any): void;
}

interface NSPathCellDelegate {
  pathCell(_: NSPathCell, willDisplay: NSOpenPanel): void;
  pathCell(_: NSPathCell, willPopUp: NSMenu): void;
}

export class NSPathComponentCell extends NSTextFieldCell {
  URL: URL;
  setURL(_: URL);
}

export class NSPathControl extends NSControl {
  URL: URL;
  setURL(_: URL);
  allowedTypes: string[];
  setAllowedTypes(_: string[]);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  clickedPathItem: NSPathControlItem;
  delegate: any;
  setDelegate(_: any);
  doubleAction: string;
  setDoubleAction(_: string);
  isEditable: boolean;
  setEditable(_: boolean);
  pathItems: NSPathControlItem[];
  setPathItems(_: NSPathControlItem[]);
  pathStyle: NSPathCell.NSPathControl.Style;
  setPathStyle(_: NSPathCell.NSPathControl.Style);
  placeholderAttributedString: NSAttributedString;
  setPlaceholderAttributedString(_: NSAttributedString);
  placeholderString: string;
  setPlaceholderString(_: string);
  setDraggingSourceOperationMask(_: NSDragging.NSDragOperation, forLocal: boolean): void;
}

export type PathControl = NSPathControl

interface NSPathControlDelegate {
  pathControl(_: NSPathControl, shouldDrag: NSPathControlItem, with_: NSPasteboard): boolean;
  pathControl(_: NSPathControl, shouldDrag: NSPathComponentCell, with_: NSPasteboard): boolean;
  pathControl(_: NSPathControl, validateDrop: any): NSDragging.NSDragOperation;
  pathControl(_: NSPathControl, acceptDrop: any): boolean;
  pathControl(_: NSPathControl, willDisplay: NSOpenPanel): void;
  pathControl(_: NSPathControl, willPopUp: NSMenu): void;
}

export class NSPathControlItem extends NSObject {
  URL: URL;
  attributedTitle: NSAttributedString;
  setAttributedTitle(_: NSAttributedString);
  image: NSImage;
  setImage(_: NSImage);
  title: string;
  setTitle(_: string);
}

// export function NSPerformService(itemName: string, pboard: NSPasteboard): boolean;

export class NSPersistentDocument extends NSDocument {
  managedObjectContext: NSManagedObjectContext;
  setManagedObjectContext(_: NSManagedObjectContext);
  managedObjectModel: NSManagedObjectModel;
  configurePersistentStoreCoordinatorForURL(ofType: URL, modelConfiguration: string, storeOptions?: string, error?: Map<string, any>): boolean;
  persistentStoreType(forFileType: string): string;
}

export class NSPickerTouchBarItem extends NSTouchBarItem {
  action: string;
  setAction(_: string);
  collapsedRepresentationImage: NSImage;
  setCollapsedRepresentationImage(_: NSImage);
  collapsedRepresentationLabel: string;
  setCollapsedRepresentationLabel(_: string);
  controlRepresentation: NSPickerTouchBarItem.ControlRepresentation;
  setControlRepresentation(_: NSPickerTouchBarItem.ControlRepresentation);
  customizationLabel: string;
  setCustomizationLabel(_: string);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  numberOfOptions: number;
  setNumberOfOptions(_: number);
  selectedIndex: number;
  setSelectedIndex(_: number);
  selectionColor: NSColor;
  setSelectionColor(_: NSColor);
  selectionMode: NSPickerTouchBarItem.SelectionMode;
  setSelectionMode(_: NSPickerTouchBarItem.SelectionMode);
  target: any;
  setTarget(_: any);
  image(at: number): NSImage;
  // @ts-ignore 
  isEnabled(at: number): boolean;
  label(at: number): string;
  setEnabled(_: boolean, at: number): void;
  setImage(_?: NSImage, at?: number): void;
  setLabel(_: string, at: number): void;
}

// export function NSPlanarFromDepth(depth: NSGraphics.NSWindow.Depth): boolean;

export class NSPopUpButton extends NSButton {
  autoenablesItems: boolean;
  setAutoenablesItems(_: boolean);
  indexOfSelectedItem: number;
  itemArray: NSMenuItem[];
  itemTitles: string[];
  lastItem: NSMenuItem;
  numberOfItems: number;
  preferredEdge: NSGeometry.NSRectEdge;
  setPreferredEdge(_: NSGeometry.NSRectEdge);
  pullsDown: boolean;
  setPullsDown(_: boolean);
  selectedItem: NSMenuItem;
  titleOfSelectedItem: string;
  addItem(withTitle: string): void;
  addItems(withTitles: string[]): void;
  index(of: NSMenuItem): number;
  indexOfItem(withRepresentedObject?: any): number;
  indexOfItem(withTag: number): number;
  indexOfItem(withTarget?: any, andAction?: string): number;
  indexOfItem(withTitle: string): number;
  // @ts-ignore 
  static createWithFrameWithPullsDown(_: CGRect, pullsDown: boolean): NSPopUpButton;
  insertItem(withTitle: string, at: number): void;
  item(at: number): NSMenuItem;
  itemTitle(at: number): string;
  item(withTitle: string): NSMenuItem;
  removeAllItems(): void;
  removeItem(at: number): void;
  removeItem(withTitle: string): void;
  // @ts-ignore 
  select(_?: NSMenuItem): void;
  selectItem(at: number): void;
  selectItem(withTag: number): boolean;
  selectItem(withTitle: string): void;
  setTitle(_: string): void;
  synchronizeTitleAndSelectedItem(): void;
}

export type PopUpButton = NSPopUpButton

export class NSPopUpButtonCell extends NSMenuItemCell {
  altersStateOfSelectedItem: boolean;
  setAltersStateOfSelectedItem(_: boolean);
  arrowPosition: NSPopUpButtonCell.NSPopUpButton.ArrowPosition;
  setArrowPosition(_: NSPopUpButtonCell.NSPopUpButton.ArrowPosition);
  autoenablesItems: boolean;
  setAutoenablesItems(_: boolean);
  indexOfSelectedItem: number;
  itemArray: NSMenuItem[];
  itemTitles: string[];
  lastItem: NSMenuItem;
  numberOfItems: number;
  preferredEdge: NSGeometry.NSRectEdge;
  setPreferredEdge(_: NSGeometry.NSRectEdge);
  pullsDown: boolean;
  setPullsDown(_: boolean);
  selectedItem: NSMenuItem;
  titleOfSelectedItem: string;
  usesItemFromMenu: boolean;
  setUsesItemFromMenu(_: boolean);
  addItem(withTitle: string): void;
  addItems(withTitles: string[]): void;
  attachPopUp(withFrame: CGRect, in_: NSView): void;
  dismissPopUp(): void;
  index(of: NSMenuItem): number;
  indexOfItem(withRepresentedObject?: any): number;
  indexOfItem(withTag: number): number;
  indexOfItem(withTarget?: any, andAction?: string): number;
  indexOfItem(withTitle: string): number;
  // @ts-ignore 
  static createWithTextCellWithPullsDown(_: string, pullsDown: boolean): NSPopUpButtonCell;
  insertItem(withTitle: string, at: number): void;
  item(at: number): NSMenuItem;
  itemTitle(at: number): string;
  item(withTitle: string): NSMenuItem;
  // @ts-ignore 
  performClick(withFrame: CGRect, in_: NSView): void;
  removeAllItems(): void;
  removeItem(at: number): void;
  removeItem(withTitle: string): void;
  // @ts-ignore 
  select(_?: NSMenuItem): void;
  selectItem(at: number): void;
  selectItem(withTag: number): boolean;
  selectItem(withTitle: string): void;
  setTitle(_?: string): void;
  synchronizeTitleAndSelectedItem(): void;
}

export class NSPopover extends NSResponder {
  animates: boolean;
  setAnimates(_: boolean);
  behavior: NSPopover.Behavior;
  setBehavior(_: NSPopover.Behavior);
  contentSize: CGSize;
  setContentSize(_: CGSize);
  contentViewController: NSViewController;
  setContentViewController(_: NSViewController);
  delegate: any;
  setDelegate(_: any);
  isDetached: boolean;
  positioningRect: CGRect;
  setPositioningRect(_: CGRect);
  isShown: boolean;
  close(): void;
  performClose(_?: any): void;
  show(relativeTo: CGRect, of: NSView, preferredEdge: NSGeometry.NSRectEdge): void;
}

interface NSPopoverDelegate {
  detachableWindow(for_: NSPopover): NSWindow;
  popoverDidClose(_: Notification): void;
  popoverDidDetach(_: NSPopover): void;
  popoverDidShow(_: Notification): void;
  popoverShouldClose(_: NSPopover): boolean;
  popoverShouldDetach(_: NSPopover): boolean;
  popoverWillClose(_: Notification): void;
  popoverWillShow(_: Notification): void;
}

export class NSPopoverTouchBarItem extends NSTouchBarItem {
  collapsedRepresentation: NSView;
  setCollapsedRepresentation(_: NSView);
  collapsedRepresentationImage: NSImage;
  setCollapsedRepresentationImage(_: NSImage);
  collapsedRepresentationLabel: string;
  setCollapsedRepresentationLabel(_: string);
  customizationLabel: string;
  setCustomizationLabel(_: string);
  popoverTouchBar: NSTouchBar;
  setPopoverTouchBar(_: NSTouchBar);
  pressAndHoldTouchBar: NSTouchBar;
  setPressAndHoldTouchBar(_: NSTouchBar);
  showsCloseButton: boolean;
  setShowsCloseButton(_: boolean);
  dismissPopover(_?: any): void;
  makeStandardActivatePopoverGestureRecognizer(): NSGestureRecognizer;
  showPopover(_?: any): void;
}

export class NSPredicateEditor extends NSRuleEditor {
  rowTemplates: NSPredicateEditorRowTemplate[];
  setRowTemplates(_: NSPredicateEditorRowTemplate[]);
}

export type PredicateEditor = NSPredicateEditor

export class NSPredicateEditorRowTemplate extends NSObject {
  static templates(withAttributeKeyPaths: string[], in_: NSEntityDescription): NSPredicateEditorRowTemplate[];
  compoundTypes: number[];
  leftExpressions: NSExpression[];
  modifier: NSComparisonPredicate.Modifier;
  operators: number[];
  options: number;
  rightExpressionAttributeType: NSAttributeDescription.NSAttributeType;
  rightExpressions: NSExpression[];
  templateViews: NSView[];
  displayableSubpredicates(of: NSPredicate): NSPredicate[];
  static createWithCompoundTypes(_: number[]): NSPredicateEditorRowTemplate;
  static createWithLeftExpressionsWithRightExpressionAttributeTypeWithModifierWithOperatorsWithOptions(_: NSExpression[], rightExpressionAttributeType: NSAttributeDescription.NSAttributeType, modifier: NSComparisonPredicate.Modifier, operators: number[], options: number): NSPredicateEditorRowTemplate;
  static createWithLeftExpressionsWithRightExpressionsWithModifierWithOperatorsWithOptions(_: NSExpression[], rightExpressions: NSExpression[], modifier: NSComparisonPredicate.Modifier, operators: number[], options: number): NSPredicateEditorRowTemplate;
  match(for_: NSPredicate): number;
  predicate(withSubpredicates?: NSPredicate[]): NSPredicate;
  setPredicate(_: NSPredicate): void;
}

export class NSPressGestureRecognizer extends NSGestureRecognizer {
  allowableMovement: number;
  setAllowableMovement(_: number);
  buttonMask: number;
  setButtonMask(_: number);
  minimumPressDuration: number;
  setMinimumPressDuration(_: number);
  numberOfTouchesRequired: number;
  setNumberOfTouchesRequired(_: number);
}

export class NSPressureConfiguration extends NSObject {
  pressureBehavior: NSEvent.PressureBehavior;
  static createWithPressureBehavior(_: NSEvent.PressureBehavior): NSPressureConfiguration;
  set(): void;
}

export class NSPrintInfo extends NSObject {
  bottomMargin: number;
  setBottomMargin(_: number);
  horizontalPagination: NSPrintInfo.PaginationMode;
  setHorizontalPagination(_: NSPrintInfo.PaginationMode);
  isHorizontallyCentered: boolean;
  setHorizontallyCentered(_: boolean);
  imageablePageBounds: CGRect;
  jobDisposition: string;
  setJobDisposition(_: string);
  leftMargin: number;
  setLeftMargin(_: number);
  localizedPaperName: string;
  orientation: NSPrintInfo.PaperOrientation;
  setOrientation(_: NSPrintInfo.PaperOrientation);
  paperName: string;
  setPaperName(_: string);
  paperSize: CGSize;
  setPaperSize(_: CGSize);
  printSettings: Map<string, any>;
  printer: NSPrinter;
  setPrinter(_: NSPrinter);
  rightMargin: number;
  setRightMargin(_: number);
  scalingFactor: number;
  setScalingFactor(_: number);
  isSelectionOnly: boolean;
  setSelectionOnly(_: boolean);
  topMargin: number;
  setTopMargin(_: number);
  verticalPagination: NSPrintInfo.PaginationMode;
  setVerticalPagination(_: NSPrintInfo.PaginationMode);
  isVerticallyCentered: boolean;
  setVerticallyCentered(_: boolean);
  static defaultPrinter: NSPrinter;
  static sharedPrintInfo: NSPrintInfo;
  setSharedPrintInfo(_: NSPrintInfo);
  pmPageFormat(): any;
  pmPrintSession(): any;
  pmPrintSettings(): any;
  dictionary(): Map<string, any>;
  static createWithDictionary(_: Map<string, any>): NSPrintInfo;
  setUpPrintOperationDefaultValues(): void;
  takeSettings(from: NSPDFInfo): void;
  updateFromPMPageFormat(): void;
  updateFromPMPrintSettings(): void;
}

export class NSPrintOperation extends NSObject {
  static epsOperation(with_: NSView, inside: CGRect, to?: NSMutableData): NSPrintOperation;
  static epsOperation(with_: NSView, inside: CGRect, to: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
  static epsOperation(with_: NSView, inside: CGRect, toPath: string, printInfo: NSPrintInfo): NSPrintOperation;
  static pdfOperation(with_: NSView, inside: CGRect, to: NSMutableData): NSPrintOperation;
  static pdfOperation(with_: NSView, inside: CGRect, to: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
  static pdfOperation(with_: NSView, inside: CGRect, toPath: string, printInfo: NSPrintInfo): NSPrintOperation;
  PDFPanel: NSPDFPanel;
  setPDFPanel(_: NSPDFPanel);
  canSpawnSeparateThread: boolean;
  setCanSpawnSeparateThread(_: boolean);
  context: NSGraphicsContext;
  isCopyingOperation: boolean;
  currentPage: number;
  jobTitle: string;
  setJobTitle(_: string);
  pageOrder: NSPrintOperation.PageOrder;
  setPageOrder(_: NSPrintOperation.PageOrder);
  pageRange: NSRange;
  preferredRenderingQuality: NSPrintOperation.RenderingQuality;
  printInfo: NSPrintInfo;
  setPrintInfo(_: NSPrintInfo);
  printPanel: NSPrintPanel;
  setPrintPanel(_: NSPrintPanel);
  showsPrintPanel: boolean;
  setShowsPrintPanel(_: boolean);
  showsProgressPanel: boolean;
  setShowsProgressPanel(_: boolean);
  static currentOperation: NSPrintOperation;
  setCurrentOperation(_: NSPrintOperation);
  cleanUp(): void;
  createContext(): NSGraphicsContext;
  deliverResult(): boolean;
  destroyContext(): void;
  run(): boolean;
  runModal(for_: NSWindow, delegate?: any, didRun?: string, contextInfo?: any): void;
}

export class NSPrintPanel extends NSObject {
  accessoryControllers: NSViewController[];
  helpAnchor: string;
  setHelpAnchor(_: string);
  jobStyleHint: string;
  setJobStyleHint(_: string);
  options: NSPrintPanel.Options;
  setOptions(_: NSPrintPanel.Options);
  printInfo: NSPrintInfo;
  addAccessoryController(_: NSViewController): void;
  beginSheet(with_: NSPrintInfo, modalFor: NSWindow, delegate?: any, didEnd?: string, contextInfo?: any): void;
  defaultButtonTitle(): string;
  removeAccessoryController(_: NSViewController): void;
  runModal(): number;
  runModal(with_: NSPrintInfo): number;
  setDefaultButtonTitle(_?: string): void;
}

interface NSPrintPanelAccessorizing {
  keyPathsForValuesAffectingPreview(): Set<any>;
  localizedSummaryItems(): Map<string, string>[];
}

export class NSPrinter extends NSObject {
  deviceDescription: Map<string, any>;
  languageLevel: number;
  name: string;
  type: string;
  static printerNames: string[];
  static printerTypes: string[];
  pageSize(forPaper: string): CGSize;
}

export class NSProgressIndicator extends NSView {
  isBezeled: boolean;
  setBezeled(_: boolean);
  controlSize: NSCell.NSControl.ControlSize;
  setControlSize(_: NSCell.NSControl.ControlSize);
  controlTint: NSCell.NSControlTint;
  setControlTint(_: NSCell.NSControlTint);
  isDisplayedWhenStopped: boolean;
  setDisplayedWhenStopped(_: boolean);
  doubleValue: number;
  setDoubleValue(_: number);
  isIndeterminate: boolean;
  setIndeterminate(_: boolean);
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  style: NSProgressIndicator.Style;
  setStyle(_: NSProgressIndicator.Style);
  usesThreadedAnimation: boolean;
  setUsesThreadedAnimation(_: boolean);
  increment(by: number): void;
  sizeToFit(): void;
  startAnimation(_?: any): void;
  stopAnimation(_?: any): void;
}

export type ProgressIndicator = NSProgressIndicator

// export function NSRectClip(rect: CGRect): void;

// export function NSRectClipList(rects: CGRect, count: number): void;

// export function NSRectFill(rect: CGRect): void;

// export function NSRectFillList(rects: CGRect, count: number): void;

// export function NSRectFillListUsingOperation(rects: CGRect, count: number, op: NSGraphics.NSCompositingOperation): void;

// export function NSRectFillListWithColors(rects: CGRect, colors: NSColor, num: number): void;

// export function NSRectFillListWithColorsUsingOperation(rects: CGRect, colors: NSColor, num: number, op: NSGraphics.NSCompositingOperation): void;

// export function NSRectFillListWithGrays(rects: CGRect, grays: number, num: number): void;

// export function NSRectFillUsingOperation(rect: CGRect, op: NSGraphics.NSCompositingOperation): void;

// export function NSRegisterServicesProvider(provider: any, name: string): void;

export class NSResponder extends NSObject {
  acceptsFirstResponder: boolean;
  menu: NSMenu;
  setMenu(_: NSMenu);
  nextResponder: NSResponder;
  setNextResponder(_: NSResponder);
  touchBar: NSTouchBar;
  setTouchBar(_: NSTouchBar);
  undoManager: UndoManager;
  userActivity: NSUserActivity;
  setUserActivity(_: NSUserActivity);
  static restorableStateKeyPaths: string[];
  becomeFirstResponder(): boolean;
  beginGesture(with_: NSEvent): void;
  changeMode(with_: NSEvent): void;
  cursorUpdate(with_: NSEvent): void;
  encodeRestorableState(with_: NSCoder): void;
  encodeRestorableState(with_: NSCoder, backgroundQueue: OperationQueue): void;
  endGesture(with_: NSEvent): void;
  flagsChanged(with_: NSEvent): void;
  flushBufferedKeyEvents(): void;
  helpRequested(_: NSEvent): void;
  interpretKeyEvents(_: NSEvent[]): void;
  invalidateRestorableState(): void;
  keyDown(with_: NSEvent): void;
  keyUp(with_: NSEvent): void;
  magnify(with_: NSEvent): void;
  makeTouchBar(): NSTouchBar;
  mouseDown(with_: NSEvent): void;
  mouseDragged(with_: NSEvent): void;
  mouseEntered(with_: NSEvent): void;
  mouseExited(with_: NSEvent): void;
  mouseMoved(with_: NSEvent): void;
  mouseUp(with_: NSEvent): void;
  newWindowForTab(_?: any): void;
  noResponder(for_: string): void;
  otherMouseDown(with_: NSEvent): void;
  otherMouseDragged(with_: NSEvent): void;
  otherMouseUp(with_: NSEvent): void;
  performKeyEquivalent(with_: NSEvent): boolean;
  performTextFinderAction(_?: any): void;
  presentError(_: Error): boolean;
  presentError(_: Error, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
  pressureChange(with_: NSEvent): void;
  quickLook(with_: NSEvent): void;
  resignFirstResponder(): boolean;
  restoreState(with_: NSCoder): void;
  rightMouseDown(with_: NSEvent): void;
  rightMouseDragged(with_: NSEvent): void;
  rightMouseUp(with_: NSEvent): void;
  rotate(with_: NSEvent): void;
  scrollWheel(with_: NSEvent): void;
  shouldBeTreatedAsInkEvent(_: NSEvent): boolean;
  showContextHelp(_?: any): void;
  smartMagnify(with_: NSEvent): void;
  supplementalTarget(forAction: string, sender?: any): any;
  swipe(with_: NSEvent): void;
  tabletPoint(with_: NSEvent): void;
  tabletProximity(with_: NSEvent): void;
  touchesBegan(with_: NSEvent): void;
  touchesCancelled(with_: NSEvent): void;
  touchesEnded(with_: NSEvent): void;
  touchesMoved(with_: NSEvent): void;
  tryToPerform(_: string, with_?: any): boolean;
  updateUserActivityState(_: NSUserActivity): void;
  validRequestor(forSendType?: string, returnType?: string): any;
  validateProposedFirstResponder(_: NSResponder, for_?: NSEvent): boolean;
  wantsForwardedScrollEvents(for_: NSEvent.GestureAxis): boolean;
  wantsScrollEventsForSwipeTracking(on: NSEvent.GestureAxis): boolean;
  willPresentError(_: Error): Error;
}

export class NSRotationGestureRecognizer extends NSGestureRecognizer {
  rotation: number;
  setRotation(_: number);
  rotationInDegrees: number;
  setRotationInDegrees(_: number);
}

export class NSRuleEditor extends NSControl {
  canRemoveAllRows: boolean;
  setCanRemoveAllRows(_: boolean);
  criteriaKeyPath: string;
  setCriteriaKeyPath(_: string);
  delegate: any;
  setDelegate(_: any);
  displayValuesKeyPath: string;
  setDisplayValuesKeyPath(_: string);
  isEditable: boolean;
  setEditable(_: boolean);
  formattingDictionary: Map<string, string>;
  setFormattingDictionary(_: Map<string, string>);
  formattingStringsFilename: string;
  setFormattingStringsFilename(_: string);
  nestingMode: NSRuleEditor.NestingMode;
  setNestingMode(_: NSRuleEditor.NestingMode);
  numberOfRows: number;
  predicate: NSPredicate;
  rowClass: typeof NSObject;
  setRowClass(_: typeof NSObject);
  rowHeight: number;
  setRowHeight(_: number);
  rowTypeKeyPath: string;
  setRowTypeKeyPath(_: string);
  selectedRowIndexes: IndexSet;
  subrowsKeyPath: string;
  setSubrowsKeyPath(_: string);
  addRow(_?: any): void;
  criteria(forRow: number): any[];
  displayValues(forRow: number): any[];
  insertRow(at: number, with_: NSRuleEditor.RowType, asSubrowOfRow: number, animate: boolean): void;
  parentRow(forRow: number): number;
  // dupe name w instance property   predicate(forRow: number): NSPredicate;
  reloadCriteria(): void;
  reloadPredicate(): void;
  removeRow(at: number): void;
  removeRows(at: IndexSet, includeSubrows: boolean): void;
  row(forDisplayValue: any): number;
  rowType(forRow: number): NSRuleEditor.RowType;
  selectRowIndexes(_: IndexSet, byExtendingSelection: boolean): void;
  setCriteria(_: any[], andDisplayValues: any[], forRowAt: number): void;
  subrowIndexes(forRow: number): IndexSet;
}

export type RuleEditor = NSRuleEditor

interface NSRuleEditorDelegate {
  ruleEditor(_: NSRuleEditor, numberOfChildrenForCriterion?: any, with_?: NSRuleEditor.RowType): number;
  ruleEditor(_: NSRuleEditor, child: number, forCriterion?: any, with_?: NSRuleEditor.RowType): any;
  ruleEditor(_: NSRuleEditor, displayValueForCriterion: any, inRow: number): any;
  ruleEditor(_: NSRuleEditor, predicatePartsForCriterion: any, withDisplayValue: any, inRow: number): Map<string, any>;
  ruleEditorRowsDidChange(_: Notification): void;
}

export class NSRulerMarker extends NSObject {
  isDragging: boolean;
  image: NSImage;
  setImage(_: NSImage);
  imageOrigin: CGPoint;
  setImageOrigin(_: CGPoint);
  imageRectInRuler: CGRect;
  markerLocation: number;
  setMarkerLocation(_: number);
  isMovable: boolean;
  setMovable(_: boolean);
  isRemovable: boolean;
  setRemovable(_: boolean);
  representedObject: any;
  setRepresentedObject(_: any);
  ruler: NSRulerView;
  thicknessRequiredInRuler: number;
  draw(_: CGRect): void;
  static createWithRulerViewWithMarkerLocationWithImageWithImageOrigin(_: NSRulerView, markerLocation: number, image: NSImage, imageOrigin: CGPoint): NSRulerMarker;
  trackMouse(with_: NSEvent, adding: boolean): boolean;
}

export class NSRulerView extends NSView {
  static registerUnit(withName: string, abbreviation: string, unitToPointsConversionFactor: number, stepUpCycle: number[], stepDownCycle: number[]): void;
  accessoryView: NSView;
  setAccessoryView(_: NSView);
  baselineLocation: number;
  clientView: NSView;
  setClientView(_: NSView);
  markers: NSRulerMarker[];
  setMarkers(_: NSRulerMarker[]);
  measurementUnits: string;
  setMeasurementUnits(_: string);
  orientation: NSRulerView.Orientation;
  setOrientation(_: NSRulerView.Orientation);
  originOffset: number;
  setOriginOffset(_: number);
  requiredThickness: number;
  reservedThicknessForAccessoryView: number;
  setReservedThicknessForAccessoryView(_: number);
  reservedThicknessForMarkers: number;
  setReservedThicknessForMarkers(_: number);
  ruleThickness: number;
  setRuleThickness(_: number);
  scrollView: NSScrollView;
  setScrollView(_: NSScrollView);
  addMarker(_: NSRulerMarker): void;
  drawHashMarksAndLabels(in_: CGRect): void;
  drawMarkers(in_: CGRect): void;
  static createWithScrollViewWithOrientation(_?: NSScrollView, orientation?: NSRulerView.Orientation): NSRulerView;
  invalidateHashMarks(): void;
  moveRulerline(fromLocation: number, toLocation: number): void;
  removeMarker(_: NSRulerMarker): void;
  trackMarker(_: NSRulerMarker, withMouseEvent: NSEvent): boolean;
}

export type RulerView = NSRulerView

export class NSRunningApplication extends NSObject {
  static runningApplications(withBundleIdentifier: string): NSRunningApplication[];
  static terminateAutomaticallyTerminableApplications(): void;
  activationPolicy: NSRunningApplication.NSApplication.ActivationPolicy;
  isActive: boolean;
  bundleIdentifier: string;
  bundleURL: URL;
  executableArchitecture: number;
  executableURL: URL;
  isFinishedLaunching: boolean;
  isHidden: boolean;
  icon: NSImage;
  launchDate: Date;
  localizedName: string;
  ownsMenuBar: boolean;
  processIdentifier: number;
  isTerminated: boolean;
  static currentApplication: NSRunningApplication;
  activate(options: NSRunningApplication.NSApplication.ActivationOptions): boolean;
  forceTerminate(): boolean;
  hide(): boolean;
  terminate(): boolean;
  unhide(): boolean;
}

export class NSSavePanel extends NSPanel {
  URL: URL;
  accessoryView: NSView;
  setAccessoryView(_: NSView);
  allowedFileTypes: string[];
  setAllowedFileTypes(_: string[]);
  allowsOtherFileTypes: boolean;
  setAllowsOtherFileTypes(_: boolean);
  canCreateDirectories: boolean;
  setCanCreateDirectories(_: boolean);
  canSelectHiddenExtension: boolean;
  setCanSelectHiddenExtension(_: boolean);
  delegate: any;
  setDelegate(_: any);
  directoryURL: URL;
  setDirectoryURL(_: URL);
  isExpanded: boolean;
  isExtensionHidden: boolean;
  setExtensionHidden(_: boolean);
  message: string;
  setMessage(_: string);
  nameFieldLabel: string;
  setNameFieldLabel(_: string);
  nameFieldStringValue: string;
  setNameFieldStringValue(_: string);
  prompt: string;
  setPrompt(_: string);
  showsHiddenFiles: boolean;
  setShowsHiddenFiles(_: boolean);
  showsTagField: boolean;
  setShowsTagField(_: boolean);
  tagNames: string[];
  setTagNames(_: string[]);
  treatsFilePackagesAsDirectories: boolean;
  setTreatsFilePackagesAsDirectories(_: boolean);
  beginSheetModal(for_: NSWindow, completionHandler: (p1: number) => void): void;
  begin(completionHandler: (p1: number) => void): void;
  cancel(_?: any): void;
  ok(_?: any): void;
  runModal(): number;
  validateVisibleColumns(): void;
}

export class NSScreen extends NSObject {
  backingScaleFactor: number;
  colorSpace: NSColorSpace;
  depth: NSGraphics.NSWindow.Depth;
  deviceDescription: Map<string, any>;
  frame: CGRect;
  localizedName: string;
  maximumExtendedDynamicRangeColorComponentValue: number;
  maximumPotentialExtendedDynamicRangeColorComponentValue: number;
  maximumReferenceExtendedDynamicRangeColorComponentValue: number;
  supportedWindowDepths: NSGraphics.NSWindow.Depth;
  visibleFrame: CGRect;
  static deepestScreen: NSScreen;
  static mainScreen: NSScreen;
  static screens: NSScreen[];
  static screensHaveSeparateSpaces: boolean;
  backingAlignedRect(_: CGRect, options: NSGeometry.AlignmentOptions): CGRect;
  canRepresent(_: NSGraphics.NSDisplayGamut): boolean;
  convertRectFromBacking(_: CGRect): CGRect;
  convertRectToBacking(_: CGRect): CGRect;
}

export class NSScrollView extends NSView {
  //  static contentSize(forFrameSize: CGSize, horizontalScrollerClass?: typeof NSObject, verticalScrollerClass?: typeof NSObject, borderType?: NSView.NSBorderType, controlSize?: NSCell.NSControl.ControlSize, scrollerStyle?: NSScroller.Style): CGSize;
  static frameSize(forContentSize: CGSize, horizontalScrollerClass?: typeof NSObject, verticalScrollerClass?: typeof NSObject, borderType?: NSView.NSBorderType, controlSize?: NSCell.NSControl.ControlSize, scrollerStyle?: NSScroller.Style): CGSize;
  allowsMagnification: boolean;
  setAllowsMagnification(_: boolean);
  autohidesScrollers: boolean;
  setAutohidesScrollers(_: boolean);
  automaticallyAdjustsContentInsets: boolean;
  setAutomaticallyAdjustsContentInsets(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  borderType: NSView.NSBorderType;
  setBorderType(_: NSView.NSBorderType);
  contentInsets: NSEdgeInsets;
  setContentInsets(_: NSEdgeInsets);
  contentSize: CGSize;
  contentView: NSClipView;
  setContentView(_: NSClipView);
  documentCursor: NSCursor;
  setDocumentCursor(_: NSCursor);
  documentView: NSView;
  setDocumentView(_: NSView);
  documentVisibleRect: CGRect;
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  findBarPosition: NSScrollView.FindBarPosition;
  setFindBarPosition(_: NSScrollView.FindBarPosition);
  hasHorizontalRuler: boolean;
  setHasHorizontalRuler(_: boolean);
  hasHorizontalScroller: boolean;
  setHasHorizontalScroller(_: boolean);
  hasVerticalRuler: boolean;
  setHasVerticalRuler(_: boolean);
  hasVerticalScroller: boolean;
  setHasVerticalScroller(_: boolean);
  horizontalLineScroll: number;
  setHorizontalLineScroll(_: number);
  horizontalPageScroll: number;
  setHorizontalPageScroll(_: number);
  horizontalRulerView: NSRulerView;
  setHorizontalRulerView(_: NSRulerView);
  horizontalScrollElasticity: NSScrollView.Elasticity;
  setHorizontalScrollElasticity(_: NSScrollView.Elasticity);
  horizontalScroller: NSScroller;
  setHorizontalScroller(_: NSScroller);
  lineScroll: number;
  setLineScroll(_: number);
  magnification: number;
  setMagnification(_: number);
  maxMagnification: number;
  setMaxMagnification(_: number);
  minMagnification: number;
  setMinMagnification(_: number);
  pageScroll: number;
  setPageScroll(_: number);
  rulersVisible: boolean;
  setRulersVisible(_: boolean);
  scrollerInsets: NSEdgeInsets;
  setScrollerInsets(_: NSEdgeInsets);
  scrollerKnobStyle: NSScroller.KnobStyle;
  setScrollerKnobStyle(_: NSScroller.KnobStyle);
  scrollerStyle: NSScroller.Style;
  setScrollerStyle(_: NSScroller.Style);
  scrollsDynamically: boolean;
  setScrollsDynamically(_: boolean);
  usesPredominantAxisScrolling: boolean;
  setUsesPredominantAxisScrolling(_: boolean);
  verticalLineScroll: number;
  setVerticalLineScroll(_: number);
  verticalPageScroll: number;
  setVerticalPageScroll(_: number);
  verticalRulerView: NSRulerView;
  setVerticalRulerView(_: NSRulerView);
  verticalScrollElasticity: NSScrollView.Elasticity;
  setVerticalScrollElasticity(_: NSScrollView.Elasticity);
  verticalScroller: NSScroller;
  setVerticalScroller(_: NSScroller);
  static rulerViewClass: typeof NSObject;
  setRulerViewClass(_: typeof NSObject);
  addFloatingSubview(_: NSView, for_: NSEvent.GestureAxis): void;
  flashScrollers(): void;
  // @ts-ignore 
  magnify(toFit: CGRect): void;
  setMagnification(_: number, centeredAt: CGPoint): void;
  tile(): void;
}

export type ScrollView = NSScrollView

export class NSScroller extends NSControl {
  static scrollerWidth(for_: NSCell.NSControl.ControlSize, scrollerStyle: NSScroller.Style): number;
  hitPart: NSScroller.Part;
  knobProportion: number;
  setKnobProportion(_: number);
  knobStyle: NSScroller.KnobStyle;
  setKnobStyle(_: NSScroller.KnobStyle);
  scrollerStyle: NSScroller.Style;
  setScrollerStyle(_: NSScroller.Style);
  usableParts: NSScroller.UsableParts;
  static isCompatibleWithOverlayScrollers: boolean;
  static preferredScrollerStyle: NSScroller.Style;
  checkSpaceForParts(): void;
  drawKnob(): void;
  drawKnobSlot(in_: CGRect, highlight: boolean): void;
  rect(for_: NSScroller.Part): CGRect;
  setKnobProportion(_: number): void;
  testPart(_: CGPoint): NSScroller.Part;
  trackKnob(with_: NSEvent): void;
}

export type Scroller = NSScroller

export class NSScrubber extends NSView {
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  backgroundView: NSView;
  setBackgroundView(_: NSView);
  isContinuous: boolean;
  setContinuous(_: boolean);
  dataSource: any;
  setDataSource(_: any);
  delegate: any;
  setDelegate(_: any);
  floatsSelectionViews: boolean;
  setFloatsSelectionViews(_: boolean);
  highlightedIndex: number;
  itemAlignment: NSScrubber.Alignment;
  setItemAlignment(_: NSScrubber.Alignment);
  mode: NSScrubber.Mode;
  setMode(_: NSScrubber.Mode);
  numberOfItems: number;
  scrubberLayout: NSScrubberLayout;
  setScrubberLayout(_: NSScrubberLayout);
  selectedIndex: number;
  setSelectedIndex(_: number);
  selectionBackgroundStyle: NSScrubberSelectionStyle;
  setSelectionBackgroundStyle(_: NSScrubberSelectionStyle);
  selectionOverlayStyle: NSScrubberSelectionStyle;
  setSelectionOverlayStyle(_: NSScrubberSelectionStyle);
  showsAdditionalContentIndicators: boolean;
  setShowsAdditionalContentIndicators(_: boolean);
  showsArrowButtons: boolean;
  setShowsArrowButtons(_: boolean);
  insertItems(at: IndexSet): void;
  itemViewForItem(at: number): NSScrubberItemView;
  makeItem(withIdentifier: string, owner?: any): NSScrubberItemView;
  moveItem(at: number, to: number): void;
  performSequentialBatchUpdates(_: () => void): void;
  register(_?: typeof NSObject, forItemIdentifier?: string): void;
  register(_?: NSNib, forItemIdentifier?: string): void;
  reloadData(): void;
  reloadItems(at: IndexSet): void;
  removeItems(at: IndexSet): void;
  scrollItem(at: number, to: NSScrubber.Alignment): void;
}

export type Scrubber = NSScrubber

export class NSScrubberArrangedView extends NSView {
  isHighlighted: boolean;
  setHighlighted(_: boolean);
  isSelected: boolean;
  setSelected(_: boolean);
  apply(_: NSScrubberLayoutAttributes): void;
}

export type ScrubberArrangedView = NSScrubberArrangedView

interface NSScrubberDataSource {
  numberOfItems(for_: NSScrubber): number;
  scrubber(_: NSScrubber, viewForItemAt: number): NSScrubberItemView;
}

interface NSScrubberDelegate {
  didBeginInteracting(with_: NSScrubber): void;
  didCancelInteracting(with_: NSScrubber): void;
  didFinishInteracting(with_: NSScrubber): void;
  scrubber(_: NSScrubber, didSelectItemAt: number): void;
  scrubber(_: NSScrubber, didHighlightItemAt: number): void;
  scrubber(_: NSScrubber, didChangeVisibleRange: NSRange): void;
}

export class NSScrubberFlowLayout extends NSScrubberLayout {
  itemSize: CGSize;
  setItemSize(_: CGSize);
  itemSpacing: number;
  setItemSpacing(_: number);
  invalidateLayoutForItems(at: IndexSet): void;
}

interface NSScrubberFlowLayoutDelegate {
  scrubber(_: NSScrubber, layout: NSScrubberFlowLayout, sizeForItemAt: number): CGSize;
}

export class NSScrubberImageItemView extends NSScrubberItemView {
  image: NSImage;
  setImage(_: NSImage);
  imageAlignment: NSImageCell.NSImageAlignment;
  setImageAlignment(_: NSImageCell.NSImageAlignment);
  imageView: NSImageView;
}

export type ScrubberImageItemView = NSScrubberImageItemView

export class NSScrubberItemView extends NSScrubberArrangedView {
}

export type ScrubberItemView = NSScrubberItemView

export class NSScrubberLayout extends NSObject {
  automaticallyMirrorsInRightToLeftLayout: boolean;
  scrubber: NSScrubber;
  scrubberContentSize: CGSize;
  shouldInvalidateLayoutForHighlightChange: boolean;
  shouldInvalidateLayoutForSelectionChange: boolean;
  visibleRect: CGRect;
  static layoutAttributesClass: typeof NSObject;
  invalidateLayout(): void;
  layoutAttributesForItem(at: number): NSScrubberLayoutAttributes;
  layoutAttributesForItems(in_: CGRect): Set<any>;
  prepare(): void;
  shouldInvalidateLayoutForChange(fromVisibleRect: CGRect, toVisibleRect: CGRect): boolean;
}

export class NSScrubberLayoutAttributes extends NSObject {
  alpha: number;
  setAlpha(_: number);
  frame: CGRect;
  setFrame(_: CGRect);
  itemIndex: number;
  setItemIndex(_: number);
}

export class NSScrubberProportionalLayout extends NSScrubberLayout {
  numberOfVisibleItems: number;
  setNumberOfVisibleItems(_: number);
  static createWithNumberOfVisibleItems(_: number): NSScrubberProportionalLayout;
}

export class NSScrubberSelectionStyle extends NSObject {
  static outlineOverlayStyle: NSScrubberSelectionStyle;
  static roundedBackgroundStyle: NSScrubberSelectionStyle;
  makeSelectionView(): NSScrubberSelectionView;
}

export class NSScrubberSelectionView extends NSScrubberArrangedView {
}

export type ScrubberSelectionView = NSScrubberSelectionView

export class NSScrubberTextItemView extends NSScrubberItemView {
  textField: NSTextField;
  title: string;
  setTitle(_: string);
}

export type ScrubberTextItemView = NSScrubberTextItemView

export class NSSearchField extends NSTextField {
  centersPlaceholder: boolean;
  setCentersPlaceholder(_: boolean);
  delegate: any;
  setDelegate(_: any);
  maximumRecents: number;
  setMaximumRecents(_: number);
  recentSearches: string[];
  setRecentSearches(_: string[]);
  recentsAutosaveName: string;
  setRecentsAutosaveName(_: string);
  searchMenuTemplate: NSMenu;
  setSearchMenuTemplate(_: NSMenu);
  sendsSearchStringImmediately: boolean;
  setSendsSearchStringImmediately(_: boolean);
  sendsWholeSearchString: boolean;
  setSendsWholeSearchString(_: boolean);
  rectForCancelButton(whenCentered: boolean): CGRect;
  rectForSearchButton(whenCentered: boolean): CGRect;
  rectForSearchText(whenCentered: boolean): CGRect;
}

export type SearchField = NSSearchField

export class NSSearchFieldCell extends NSTextFieldCell {
  cancelButtonCell: NSButtonCell;
  setCancelButtonCell(_: NSButtonCell);
  maximumRecents: number;
  setMaximumRecents(_: number);
  recentSearches: string[];
  setRecentSearches(_: string[]);
  recentsAutosaveName: string;
  setRecentsAutosaveName(_: string);
  searchButtonCell: NSButtonCell;
  setSearchButtonCell(_: NSButtonCell);
  searchMenuTemplate: NSMenu;
  setSearchMenuTemplate(_: NSMenu);
  sendsSearchStringImmediately: boolean;
  setSendsSearchStringImmediately(_: boolean);
  sendsWholeSearchString: boolean;
  setSendsWholeSearchString(_: boolean);
  cancelButtonRect(forBounds: CGRect): CGRect;
  resetCancelButtonCell(): void;
  resetSearchButtonCell(): void;
  searchButtonRect(forBounds: CGRect): CGRect;
  searchTextRect(forBounds: CGRect): CGRect;
}

interface NSSearchFieldDelegate {
  searchFieldDidEndSearching(_: NSSearchField): void;
  searchFieldDidStartSearching(_: NSSearchField): void;
}

export class NSSecureTextField extends NSTextField {
}

export type SecureTextField = NSSecureTextField

export class NSSecureTextFieldCell extends NSTextFieldCell {
  echosBullets: boolean;
  setEchosBullets(_: boolean);
}

export class NSSegmentedCell extends NSActionCell {
  segmentCount: number;
  setSegmentCount(_: number);
  segmentStyle: NSSegmentedControl.Style;
  setSegmentStyle(_: NSSegmentedControl.Style);
  selectedSegment: number;
  setSelectedSegment(_: number);
  trackingMode: NSSegmentedControl.SwitchTracking;
  setTrackingMode(_: NSSegmentedControl.SwitchTracking);
  drawSegment(_: number, inFrame: CGRect, with_: NSView): void;
  // @ts-ignore 
  image(forSegment: number): NSImage;
  imageScaling(forSegment: number): NSCell.NSImageScaling;
  // @ts-ignore 
  interiorBackgroundStyle(forSegment: number): NSCell.NSView.BackgroundStyle;
  // @ts-ignore 
  // @ts-ignore 
  isEnabled(forSegment: number): boolean;
  isSelected(forSegment: number): boolean;
  label(forSegment: number): string;
  makeNextSegmentKey(): void;
  makePreviousSegmentKey(): void;
  // @ts-ignore 
  menu(forSegment: number): NSMenu;
  selectSegment(withTag: number): boolean;
  // @ts-ignore 
  setEnabled(_: boolean, forSegment: number): void;
  setImage(_?: NSImage, forSegment?: number): void;
  setImageScaling(_: NSCell.NSImageScaling, forSegment: number): void;
  setLabel(_: string, forSegment: number): void;
  setMenu(_?: NSMenu, forSegment?: number): void;
  setSelected(_: boolean, forSegment: number): void;
  // @ts-ignore 
  setTag(_: number, forSegment: number): void;
  setToolTip(_?: string, forSegment?: number): void;
  setWidth(_: number, forSegment: number): void;
  // @ts-ignore 
  tag(forSegment: number): number;
  toolTip(forSegment: number): string;
  width(forSegment: number): number;
}

export class NSSegmentedControl extends NSControl {
  doubleValueForSelectedSegment: number;
  indexOfSelectedItem: number;
  segmentCount: number;
  setSegmentCount(_: number);
  segmentDistribution: NSSegmentedControl.Distribution;
  setSegmentDistribution(_: NSSegmentedControl.Distribution);
  segmentStyle: NSSegmentedControl.Style;
  setSegmentStyle(_: NSSegmentedControl.Style);
  selectedSegment: number;
  setSelectedSegment(_: number);
  selectedSegmentBezelColor: NSColor;
  setSelectedSegmentBezelColor(_: NSColor);
  isSpringLoaded: boolean;
  setSpringLoaded(_: boolean);
  trackingMode: NSSegmentedControl.SwitchTracking;
  setTrackingMode(_: NSSegmentedControl.SwitchTracking);
  // @ts-ignore 
  alignment(forSegment: number): NSText.NSTextAlignment;
  image(forSegment: number): NSImage;
  imageScaling(forSegment: number): NSCell.NSImageScaling;
  // @ts-ignore 
  // @ts-ignore 
  isEnabled(forSegment: number): boolean;
  isSelected(forSegment: number): boolean;
  label(forSegment: number): string;
  // @ts-ignore 
  menu(forSegment: number): NSMenu;
  selectSegment(withTag: number): boolean;
  // @ts-ignore 
  setAlignment(_: NSText.NSTextAlignment, forSegment: number): void;
  // @ts-ignore 
  setEnabled(_: boolean, forSegment: number): void;
  setImage(_?: NSImage, forSegment?: number): void;
  setImageScaling(_: NSCell.NSImageScaling, forSegment: number): void;
  setLabel(_: string, forSegment: number): void;
  setMenu(_?: NSMenu, forSegment?: number): void;
  setSelected(_: boolean, forSegment: number): void;
  setShowsMenuIndicator(_: boolean, forSegment: number): void;
  // @ts-ignore 
  setTag(_: number, forSegment: number): void;
  setToolTip(_?: string, forSegment?: number): void;
  setWidth(_: number, forSegment: number): void;
  showsMenuIndicator(forSegment: number): boolean;
  // @ts-ignore 
  tag(forSegment: number): number;
  // @ts-ignore 
  toolTip(forSegment: number): string;
  width(forSegment: number): number;
}

export type SegmentedControl = NSSegmentedControl

interface NSSeguePerforming {
  performSegue(withIdentifier: string, sender?: any): void;
  prepare(for_: NSStoryboardSegue, sender?: any): void;
  shouldPerformSegue(withIdentifier: string, sender?: any): boolean;
}

interface NSServicesMenuRequestor {
  readSelection(from: NSPasteboard): boolean;
  writeSelection(to: NSPasteboard, types: string[]): boolean;
}

// export function NSSetFocusRingStyle(placement: NSGraphics.NSFocusRingPlacement): void;

// export function NSSetShowsServicesMenuItem(itemName: string, enabled: boolean): number;

export class NSShadow extends NSObject {
  shadowBlurRadius: number;
  setShadowBlurRadius(_: number);
  shadowColor: NSColor;
  setShadowColor(_: NSColor);
  shadowOffset: CGSize;
  setShadowOffset(_: CGSize);
  set(): void;
}

export class NSSharingService extends NSObject {
  static sharingServices(forItems: any[]): NSSharingService[];
  accountName: string;
  alternateImage: NSImage;
  attachmentFileURLs: URL[];
  delegate: any;
  setDelegate(_: any);
  image: NSImage;
  menuItemTitle: string;
  setMenuItemTitle(_: string);
  messageBody: string;
  permanentLink: URL;
  recipients: string[];
  setRecipients(_: string[]);
  subject: string;
  setSubject(_: string);
  title: string;
  canPerform(withItems?: any[]): boolean;
  static createWithTitleWithImageWithAlternateImageWithHandler(_: string, image: NSImage, alternateImage?: NSImage, handler?: () => void): NSSharingService;
  // @ts-ignore 
  perform(withItems: any[]): void;
}

interface NSSharingServiceDelegate {
  anchoringView(for_: NSSharingService, showRelativeTo: CGRect, preferredEdge: NSGeometry.NSRectEdge): NSView;
  sharingService(_: NSSharingService, willShareItems: any[]): void;
  sharingService(_: NSSharingService, didFailToShareItems: any[], error: Error): void;
  sharingService(_: NSSharingService, didShareItems: any[]): void;
  sharingService(_: NSSharingService, sourceFrameOnScreenForShareItem: any): CGRect;
  sharingService(_: NSSharingService, transitionImageForShareItem: any, contentRect: CGRect): NSImage;
  sharingService(_: NSSharingService, sourceWindowForShareItems: any[], sharingContentScope: NSSharingService.SharingContentScope): NSWindow;
}

export class NSSharingServicePicker extends NSObject {
  delegate: any;
  setDelegate(_: any);
  static createWithItems(_: any[]): NSSharingServicePicker;
  show(relativeTo: CGRect, of: NSView, preferredEdge: NSGeometry.NSRectEdge): void;
}

interface NSSharingServicePickerDelegate {
  sharingServicePicker(_: NSSharingServicePicker, sharingServicesForItems: any[], proposedSharingServices: NSSharingService[]): NSSharingService[];
  sharingServicePicker(_: NSSharingServicePicker, delegateFor: NSSharingService): any;
  sharingServicePicker(_: NSSharingServicePicker, didChoose?: NSSharingService): void;
}

export class NSSharingServicePickerToolbarItem extends NSToolbarItem {
  delegate: any;
  setDelegate(_: any);
}

interface NSSharingServicePickerToolbarItemDelegate {
  items(for_: NSSharingServicePickerToolbarItem): any[];
}

export class NSSharingServicePickerTouchBarItem extends NSTouchBarItem {
  buttonImage: NSImage;
  setButtonImage(_: NSImage);
  buttonTitle: string;
  setButtonTitle(_: string);
  delegate: any;
  setDelegate(_: any);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
}

interface NSSharingServicePickerTouchBarItemDelegate {
  items(for_: NSSharingServicePickerTouchBarItem): any[];
}

// export function NSShowAnimationEffect(animationEffect: NSGraphics.NSAnimationEffect, centerLocation: CGPoint, size: CGSize, animationDelegate: any, didEndSelector: string, contextInfo: any): void;

// export function NSShowsServicesMenuItem(itemName: string): boolean;

export class NSSlider extends NSControl {
  allowsTickMarkValuesOnly: boolean;
  setAllowsTickMarkValuesOnly(_: boolean);
  altIncrementValue: number;
  setAltIncrementValue(_: number);
  knobThickness: number;
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  numberOfTickMarks: number;
  setNumberOfTickMarks(_: number);
  sliderType: NSSliderCell.NSSlider.SliderType;
  setSliderType(_: NSSliderCell.NSSlider.SliderType);
  tickMarkPosition: NSSliderCell.NSSlider.TickMarkPosition;
  setTickMarkPosition(_: NSSliderCell.NSSlider.TickMarkPosition);
  trackFillColor: NSColor;
  setTrackFillColor(_: NSColor);
  isVertical: boolean;
  closestTickMarkValue(toValue: number): number;
  indexOfTickMark(at: CGPoint): number;
  rectOfTickMark(at: number): CGRect;
  tickMarkValue(at: number): number;
}

export type Slider = NSSlider

export class NSSliderAccessory extends NSObject {
  behavior: NSSliderAccessoryBehavior;
  setBehavior(_: NSSliderAccessoryBehavior);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
}

export class NSSliderAccessoryBehavior extends NSObject {
  static automaticBehavior: NSSliderAccessoryBehavior;
  static valueResetBehavior: NSSliderAccessoryBehavior;
  static valueStepBehavior: NSSliderAccessoryBehavior;
  handleAction(_: NSSliderAccessory): void;
}

export class NSSliderCell extends NSActionCell {
  allowsTickMarkValuesOnly: boolean;
  setAllowsTickMarkValuesOnly(_: boolean);
  altIncrementValue: number;
  setAltIncrementValue(_: number);
  knobThickness: number;
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  numberOfTickMarks: number;
  setNumberOfTickMarks(_: number);
  sliderType: NSSliderCell.NSSlider.SliderType;
  setSliderType(_: NSSliderCell.NSSlider.SliderType);
  tickMarkPosition: NSSliderCell.NSSlider.TickMarkPosition;
  setTickMarkPosition(_: NSSliderCell.NSSlider.TickMarkPosition);
  trackRect: CGRect;
  isVertical: boolean;
  barRect(flipped: boolean): CGRect;
  closestTickMarkValue(toValue: number): number;
  drawBar(inside: CGRect, flipped: boolean): void;
  drawKnob(): void;
  drawKnob(_: CGRect): void;
  drawTickMarks(): void;
  indexOfTickMark(at: CGPoint): number;
  knobRect(flipped: boolean): CGRect;
  rectOfTickMark(at: number): CGRect;
  tickMarkValue(at: number): number;
}

export class NSSliderTouchBarItem extends NSTouchBarItem {
  action: string;
  setAction(_: string);
  customizationLabel: string;
  setCustomizationLabel(_: string);
  doubleValue: number;
  setDoubleValue(_: number);
  label: string;
  setLabel(_: string);
  maximumSliderWidth: number;
  setMaximumSliderWidth(_: number);
  maximumValueAccessory: NSSliderAccessory;
  setMaximumValueAccessory(_: NSSliderAccessory);
  minimumSliderWidth: number;
  setMinimumSliderWidth(_: number);
  minimumValueAccessory: NSSliderAccessory;
  setMinimumValueAccessory(_: NSSliderAccessory);
  slider: NSSlider;
  setSlider(_: NSSlider);
  target: any;
  setTarget(_: any);
  valueAccessoryWidth: number;
  setValueAccessoryWidth(_: number);
}

export class NSSound extends NSObject {
  static canInit(with_: NSPasteboard): boolean;
  currentTime: number;
  setCurrentTime(_: number);
  delegate: any;
  setDelegate(_: any);
  duration: number;
  loops: boolean;
  setLoops(_: boolean);
  name: string;
  playbackDeviceIdentifier: string;
  setPlaybackDeviceIdentifier(_: string);
  isPlaying: boolean;
  volume: number;
  setVolume(_: number);
  static soundUnfilteredTypes: string[];
  static createWithContentsOfFileWithByReference(_: string, byReference: boolean): NSSound;
  static createWithContentsOfWithByReference(_: URL, byReference: boolean): NSSound;
  static createWithData(_: Data): NSSound;
  static createWithPasteboard(_: NSPasteboard): NSSound;
  pause(): boolean;
  play(): boolean;
  resume(): boolean;
  setName(_?: string): boolean;
  stop(): boolean;
  write(to: NSPasteboard): void;
}

interface NSSoundDelegate {
  sound(_: NSSound, didFinishPlaying: boolean): void;
}

export class NSSpeechRecognizer extends NSObject {
  blocksOtherRecognizers: boolean;
  setBlocksOtherRecognizers(_: boolean);
  commands: string[];
  setCommands(_: string[]);
  delegate: any;
  setDelegate(_: any);
  displayedCommandsTitle: string;
  setDisplayedCommandsTitle(_: string);
  listensInForegroundOnly: boolean;
  setListensInForegroundOnly(_: boolean);
  startListening(): void;
  stopListening(): void;
}

interface NSSpeechRecognizerDelegate {
  speechRecognizer(_: NSSpeechRecognizer, didRecognizeCommand: string): void;
}

export class NSSpeechSynthesizer extends NSObject {
  static attributes(forVoice: string): Map<string, any>;
  delegate: any;
  setDelegate(_: any);
  rate: number;
  setRate(_: number);
  isSpeaking: boolean;
  usesFeedbackWindow: boolean;
  setUsesFeedbackWindow(_: boolean);
  volume: number;
  setVolume(_: number);
  static isAnyApplicationSpeaking: boolean;
  static availableVoices: string[];
  static defaultVoice: string;
  addSpeechDictionary(_: Map<string, any>): void;
  continueSpeaking(): void;
  static createWithVoice(_?: string): NSSpeechSynthesizer;
  objectForProperty(error: string): any;
  pauseSpeaking(at: NSSpeechSynthesizer.Boundary): void;
  phonemes(from: string): string;
  setObject(forProperty?: any, error?: string): boolean;
  setVoice(_?: string): boolean;
  startSpeaking(_: string): boolean;
  startSpeaking(_: string, to: URL): boolean;
  stopSpeaking(): void;
  stopSpeaking(at: NSSpeechSynthesizer.Boundary): void;
  voice(): string;
}

interface NSSpeechSynthesizerDelegate {
  speechSynthesizer(_: NSSpeechSynthesizer, didFinishSpeaking: boolean): void;
  speechSynthesizer(_: NSSpeechSynthesizer, willSpeakWord: NSRange, of: string): void;
  speechSynthesizer(_: NSSpeechSynthesizer, willSpeakPhoneme: number): void;
  speechSynthesizer(_: NSSpeechSynthesizer, didEncounterErrorAt: number, of: string, message: string): void;
  speechSynthesizer(_: NSSpeechSynthesizer, didEncounterSyncMessage: string): void;
}

export class NSSpellChecker extends NSObject {
  static uniqueSpellDocumentTag(): number;
  accessoryView: NSView;
  setAccessoryView(_: NSView);
  automaticallyIdentifiesLanguages: boolean;
  setAutomaticallyIdentifiesLanguages(_: boolean);
  availableLanguages: string[];
  spellingPanel: NSPanel;
  substitutionsPanel: NSPanel;
  substitutionsPanelAccessoryViewController: NSViewController;
  setSubstitutionsPanelAccessoryViewController(_: NSViewController);
  userPreferredLanguages: string[];
  userReplacementsDictionary: Map<string, string>;
  static isAutomaticCapitalizationEnabled: boolean;
  static isAutomaticDashSubstitutionEnabled: boolean;
  static isAutomaticPeriodSubstitutionEnabled: boolean;
  static isAutomaticQuoteSubstitutionEnabled: boolean;
  static isAutomaticSpellingCorrectionEnabled: boolean;
  static isAutomaticTextCompletionEnabled: boolean;
  static isAutomaticTextReplacementEnabled: boolean;
  static sharedSpellChecker: NSSpellChecker;
  static sharedSpellCheckerExists: boolean;
  checkGrammar(of: string, startingAt: number, language?: string, wrap?: boolean, inSpellDocumentWithTag?: number, details?: Map<string, any>[]): NSRange;
  checkSpelling(of: string, startingAt: number): NSRange;
  checkSpelling(of: string, startingAt: number, language?: string, wrap?: boolean, inSpellDocumentWithTag?: number, wordCount?: number): NSRange;
  check(_: string, range: NSRange, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, orthography?: NSOrthography, wordCount?: number): NSTextCheckingResult[];
  closeSpellDocument(withTag: number): void;
  completions(forPartialWordRange: NSRange, in_: string, language?: string, inSpellDocumentWithTag?: number): string[];
  correction(forWordRange: NSRange, in_: string, language: string, inSpellDocumentWithTag: number): string;
  countWords(in_: string, language?: string): number;
  deletesAutospaceBetweenString(_: string, andString: string, language?: string): boolean;
  dismissCorrectionIndicator(for_: NSView): void;
  guesses(forWordRange: NSRange, in_: string, language?: string, inSpellDocumentWithTag?: number): string[];
  hasLearnedWord(_: string): boolean;
  ignoreWord(_: string, inSpellDocumentWithTag: number): void;
  ignoredWords(inSpellDocumentWithTag: number): string[];
  language(): string;
  language(forWordRange: NSRange, in_: string, orthography?: NSOrthography): string;
  learnWord(_: string): void;
  menu(for_: NSTextCheckingResult, string: string, options?: Map<string, any>, atLocation?: CGPoint, in_?: NSView): NSMenu;
  preventsAutocorrection(before: string, language?: string): boolean;
  record(_: NSSpellChecker.CorrectionResponse, toCorrection: string, forWord: string, language?: string, inSpellDocumentWithTag?: number): void;
  requestCandidates(forSelectedRange: NSRange, in_: string, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, completionHandler?: (p1: number, p2: NSTextCheckingResult[]) => void): number;
  requestChecking(of: string, range: NSRange, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, completionHandler?: (p1: number, p2: NSTextCheckingResult[], p3: NSOrthography, p4: number) => void): number;
  setIgnoredWords(_: string[], inSpellDocumentWithTag: number): void;
  setLanguage(_: string): boolean;
  setWordFieldStringValue(_: string): void;
  showCorrectionIndicator(of: NSSpellChecker.CorrectionIndicatorType, primaryString: string, alternativeStrings: string[], forStringIn: CGRect, view: NSView, completionHandler?: (p1: string) => void): void;
  unlearnWord(_: string): void;
  updatePanels(): void;
  updateSpellingPanel(withGrammarString: string, detail: Map<string, any>): void;
  updateSpellingPanel(withMisspelledWord: string): void;
  userQuotesArray(forLanguage: string): string[];
}

export class NSSplitView extends NSView {
  arrangedSubviews: NSView[];
  arrangesAllSubviews: boolean;
  setArrangesAllSubviews(_: boolean);
  autosaveName: string;
  setAutosaveName(_: string);
  delegate: any;
  setDelegate(_: any);
  dividerColor: NSColor;
  dividerStyle: NSSplitView.DividerStyle;
  setDividerStyle(_: NSSplitView.DividerStyle);
  dividerThickness: number;
  isVertical: boolean;
  setVertical(_: boolean);
  addArrangedSubview(_: NSView): void;
  adjustSubviews(): void;
  drawDivider(in_: CGRect): void;
  holdingPriorityForSubview(at: number): number;
  insertArrangedSubview(_: NSView, at: number): void;
  isSubviewCollapsed(_: NSView): boolean;
  maxPossiblePositionOfDivider(at: number): number;
  minPossiblePositionOfDivider(at: number): number;
  removeArrangedSubview(_: NSView): void;
  setHoldingPriority(_: number, forSubviewAt: number): void;
  setPosition(_: number, ofDividerAt: number): void;
}

export type SplitView = NSSplitView

export class NSSplitViewController extends NSViewController {
  minimumThicknessForInlineSidebars: number;
  setMinimumThicknessForInlineSidebars(_: number);
  splitView: NSSplitView;
  setSplitView(_: NSSplitView);
  splitViewItems: NSSplitViewItem[];
  setSplitViewItems(_: NSSplitViewItem[]);
  addSplitViewItem(_: NSSplitViewItem): void;
  insertSplitViewItem(_: NSSplitViewItem, at: number): void;
  removeSplitViewItem(_: NSSplitViewItem): void;
  splitViewItem(for_: NSViewController): NSSplitViewItem;
  toggleSidebar(_?: any): void;
}

interface NSSplitViewDelegate {
  splitView(_: NSSplitView, canCollapseSubview: NSView): boolean;
  splitView(_: NSSplitView, constrainMinCoordinate: number, ofSubviewAt: number): number;
  splitView(_: NSSplitView, constrainMaxCoordinate: number, ofSubviewAt: number): number;
  splitView(_: NSSplitView, constrainSplitPosition: number, ofSubviewAt: number): number;
  splitView(_: NSSplitView, resizeSubviewsWithOldSize: CGSize): void;
  splitView(_: NSSplitView, shouldAdjustSizeOfSubview: NSView): boolean;
  splitView(_: NSSplitView, shouldHideDividerAt: number): boolean;
  splitView(_: NSSplitView, effectiveRect: CGRect, forDrawnRect: CGRect, ofDividerAt: number): CGRect;
  splitView(_: NSSplitView, additionalEffectiveRectOfDividerAt: number): CGRect;
  splitViewDidResizeSubviews(_: Notification): void;
  splitViewWillResizeSubviews(_: Notification): void;
}

export class NSSplitViewItem extends NSObject {
  automaticMaximumThickness: number;
  setAutomaticMaximumThickness(_: number);
  behavior: NSSplitViewItem.Behavior;
  canCollapse: boolean;
  setCanCollapse(_: boolean);
  collapseBehavior: NSSplitViewItem.CollapseBehavior;
  setCollapseBehavior(_: NSSplitViewItem.CollapseBehavior);
  isCollapsed: boolean;
  setCollapsed(_: boolean);
  holdingPriority: number;
  setHoldingPriority(_: number);
  maximumThickness: number;
  setMaximumThickness(_: number);
  minimumThickness: number;
  setMinimumThickness(_: number);
  preferredThicknessFraction: number;
  setPreferredThicknessFraction(_: number);
  isSpringLoaded: boolean;
  setSpringLoaded(_: boolean);
  viewController: NSViewController;
  setViewController(_: NSViewController);
}

interface NSSpringLoadingDestination {
  draggingEnded(_: any): void;
  springLoadingActivated(_: boolean, draggingInfo: any): void;
  springLoadingEntered(_: any): NSDragging.NSSpringLoadingOptions;
  springLoadingExited(_: any): void;
  springLoadingHighlightChanged(_: any): void;
  springLoadingUpdated(_: any): NSDragging.NSSpringLoadingOptions;
}

export class NSStackView extends NSView {
  alignment: NSLayoutConstraint.Attribute;
  setAlignment(_: NSLayoutConstraint.Attribute);
  arrangedSubviews: NSView[];
  delegate: any;
  setDelegate(_: any);
  detachedViews: NSView[];
  detachesHiddenViews: boolean;
  setDetachesHiddenViews(_: boolean);
  distribution: NSStackView.Distribution;
  setDistribution(_: NSStackView.Distribution);
  edgeInsets: NSEdgeInsets;
  setEdgeInsets(_: NSEdgeInsets);
  orientation: NSUserInterfaceLayout.NSUserInterfaceLayoutOrientation;
  setOrientation(_: NSUserInterfaceLayout.NSUserInterfaceLayoutOrientation);
  spacing: number;
  setSpacing(_: number);
  views: NSView[];
  addArrangedSubview(_: NSView): void;
  addView(_: NSView, in_: NSStackView.Gravity): void;
  clippingResistancePriority(for_: NSLayoutConstraint.Orientation): number;
  customSpacing(after: NSView): number;
  huggingPriority(for_: NSLayoutConstraint.Orientation): number;
  insertArrangedSubview(_: NSView, at: number): void;
  insertView(_: NSView, at: number, in_: NSStackView.Gravity): void;
  removeArrangedSubview(_: NSView): void;
  removeView(_: NSView): void;
  setClippingResistancePriority(_: number, for_: NSLayoutConstraint.Orientation): void;
  setCustomSpacing(_: number, after: NSView): void;
  setHuggingPriority(_: number, for_: NSLayoutConstraint.Orientation): void;
  setViews(_: NSView[], in_: NSStackView.Gravity): void;
  setVisibilityPriority(_: number, for_: NSView): void;
  // dupe name w instance property   views(in_: NSStackView.Gravity): NSView[];
  visibilityPriority(for_: NSView): number;
}

export type StackView = NSStackView

interface NSStackViewDelegate {
  stackView(_: NSStackView, willDetach: NSView[]): void;
  stackView(_: NSStackView, didReattach: NSView[]): void;
}

interface NSStandardKeyBindingResponding {
  cancelOperation(_?: any): void;
  capitalizeWord(_?: any): void;
  centerSelectionInVisibleArea(_?: any): void;
  changeCaseOfLetter(_?: any): void;
  complete(_?: any): void;
  deleteBackward(_?: any): void;
  deleteBackwardByDecomposingPreviousCharacter(_?: any): void;
  deleteForward(_?: any): void;
  deleteToBeginningOfLine(_?: any): void;
  deleteToBeginningOfParagraph(_?: any): void;
  deleteToEndOfLine(_?: any): void;
  deleteToEndOfParagraph(_?: any): void;
  deleteToMark(_?: any): void;
  deleteWordBackward(_?: any): void;
  deleteWordForward(_?: any): void;
  doCommand(by: string): void;
  indent(_?: any): void;
  insertBacktab(_?: any): void;
  insertContainerBreak(_?: any): void;
  insertDoubleQuoteIgnoringSubstitution(_?: any): void;
  insertLineBreak(_?: any): void;
  insertNewline(_?: any): void;
  insertNewlineIgnoringFieldEditor(_?: any): void;
  insertParagraphSeparator(_?: any): void;
  insertSingleQuoteIgnoringSubstitution(_?: any): void;
  insertTab(_?: any): void;
  insertTabIgnoringFieldEditor(_?: any): void;
  insertText(_: any): void;
  lowercaseWord(_?: any): void;
  makeBaseWritingDirectionLeftToRight(_?: any): void;
  makeBaseWritingDirectionNatural(_?: any): void;
  makeBaseWritingDirectionRightToLeft(_?: any): void;
  makeTextWritingDirectionLeftToRight(_?: any): void;
  makeTextWritingDirectionNatural(_?: any): void;
  makeTextWritingDirectionRightToLeft(_?: any): void;
  moveBackward(_?: any): void;
  moveBackwardAndModifySelection(_?: any): void;
  moveDown(_?: any): void;
  moveDownAndModifySelection(_?: any): void;
  moveForward(_?: any): void;
  moveForwardAndModifySelection(_?: any): void;
  moveLeft(_?: any): void;
  moveLeftAndModifySelection(_?: any): void;
  moveParagraphBackwardAndModifySelection(_?: any): void;
  moveParagraphForwardAndModifySelection(_?: any): void;
  moveRight(_?: any): void;
  moveRightAndModifySelection(_?: any): void;
  moveToBeginningOfDocument(_?: any): void;
  moveToBeginningOfDocumentAndModifySelection(_?: any): void;
  moveToBeginningOfLine(_?: any): void;
  moveToBeginningOfLineAndModifySelection(_?: any): void;
  moveToBeginningOfParagraph(_?: any): void;
  moveToBeginningOfParagraphAndModifySelection(_?: any): void;
  moveToEndOfDocument(_?: any): void;
  moveToEndOfDocumentAndModifySelection(_?: any): void;
  moveToEndOfLine(_?: any): void;
  moveToEndOfLineAndModifySelection(_?: any): void;
  moveToEndOfParagraph(_?: any): void;
  moveToEndOfParagraphAndModifySelection(_?: any): void;
  moveToLeftEndOfLine(_?: any): void;
  moveToLeftEndOfLineAndModifySelection(_?: any): void;
  moveToRightEndOfLine(_?: any): void;
  moveToRightEndOfLineAndModifySelection(_?: any): void;
  moveUp(_?: any): void;
  moveUpAndModifySelection(_?: any): void;
  moveWordBackward(_?: any): void;
  moveWordBackwardAndModifySelection(_?: any): void;
  moveWordForward(_?: any): void;
  moveWordForwardAndModifySelection(_?: any): void;
  moveWordLeft(_?: any): void;
  moveWordLeftAndModifySelection(_?: any): void;
  moveWordRight(_?: any): void;
  moveWordRightAndModifySelection(_?: any): void;
  pageDown(_?: any): void;
  pageDownAndModifySelection(_?: any): void;
  pageUp(_?: any): void;
  pageUpAndModifySelection(_?: any): void;
  quickLookPreviewItems(_?: any): void;
  scrollLineDown(_?: any): void;
  scrollLineUp(_?: any): void;
  scrollPageDown(_?: any): void;
  scrollPageUp(_?: any): void;
  scrollToBeginningOfDocument(_?: any): void;
  scrollToEndOfDocument(_?: any): void;
  selectAll(_?: any): void;
  selectLine(_?: any): void;
  selectParagraph(_?: any): void;
  selectToMark(_?: any): void;
  selectWord(_?: any): void;
  setMark(_?: any): void;
  swapWithMark(_?: any): void;
  transpose(_?: any): void;
  transposeWords(_?: any): void;
  uppercaseWord(_?: any): void;
  yank(_?: any): void;
}

export class NSStatusBar extends NSObject {
  thickness: number;
  isVertical: boolean;
  static systemStatusBar: NSStatusBar;
  removeStatusItem(_: NSStatusItem): void;
  statusItem(withLength: number): NSStatusItem;
}

export class NSStatusBarButton extends NSButton {
  appearsDisabled: boolean;
  setAppearsDisabled(_: boolean);
}

export type StatusBarButton = NSStatusBarButton

export class NSStatusItem extends NSObject {
  autosaveName: string;
  setAutosaveName(_: string);
  behavior: NSStatusItem.Behavior;
  setBehavior(_: NSStatusItem.Behavior);
  button: NSStatusBarButton;
  length: number;
  setLength(_: number);
  menu: NSMenu;
  setMenu(_: NSMenu);
  statusBar: NSStatusBar;
  isVisible: boolean;
  setVisible(_: boolean);
}

export class NSStepper extends NSControl {
  autorepeat: boolean;
  setAutorepeat(_: boolean);
  increment: number;
  setIncrement(_: number);
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  valueWraps: boolean;
  setValueWraps(_: boolean);
}

export type Stepper = NSStepper

export class NSStepperCell extends NSActionCell {
  autorepeat: boolean;
  setAutorepeat(_: boolean);
  increment: number;
  setIncrement(_: number);
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  valueWraps: boolean;
  setValueWraps(_: boolean);
}

export class NSStepperTouchBarItem extends NSTouchBarItem {
  action: string;
  setAction(_: string);
  customizationLabel: string;
  setCustomizationLabel(_: string);
  increment: number;
  setIncrement(_: number);
  maxValue: number;
  setMaxValue(_: number);
  minValue: number;
  setMinValue(_: number);
  target: any;
  setTarget(_: any);
}

export class NSStoryboard extends NSObject {
  static mainStoryboard: NSStoryboard;
  instantiateController(withIdentifier: string): any;
  instantiateControllerWithIdentifier(_: string, creator?: (p1: NSCoder) => any): any;
  instantiateInitialController(): any;
  instantiateInitialControllerWithCreator(_?: (p1: NSCoder) => any): any;
}

export class NSStoryboardSegue extends NSObject {
  destinationController: any;
  identifier: string;
  sourceController: any;
  static createWithIdentifierWithSourceWithDestination(_: string, source: any, destination: any): NSStoryboardSegue;
  // @ts-ignore 
  perform(): void;
}

export class NSStringDrawingContext extends NSObject {
  actualScaleFactor: number;
  minimumScaleFactor: number;
  setMinimumScaleFactor(_: number);
  totalBounds: CGRect;
}

export class NSSwitch extends NSControl {
  state: number;
  setState(_: number);
}

export type Switch = NSSwitch

export class NSTabView extends NSView {
  allowsTruncatedLabels: boolean;
  setAllowsTruncatedLabels(_: boolean);
  contentRect: CGRect;
  controlSize: NSCell.NSControl.ControlSize;
  setControlSize(_: NSCell.NSControl.ControlSize);
  delegate: any;
  setDelegate(_: any);
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  font: NSFont;
  setFont(_: NSFont);
  minimumSize: CGSize;
  numberOfTabViewItems: number;
  selectedTabViewItem: NSTabViewItem;
  tabPosition: NSTabView.TabPosition;
  setTabPosition(_: NSTabView.TabPosition);
  tabViewBorderType: NSTabView.TabViewBorderType;
  setTabViewBorderType(_: NSTabView.TabViewBorderType);
  tabViewItems: NSTabViewItem[];
  setTabViewItems(_: NSTabViewItem[]);
  tabViewType: NSTabView.TabType;
  setTabViewType(_: NSTabView.TabType);
  addTabViewItem(_: NSTabViewItem): void;
  indexOfTabViewItem(_: NSTabViewItem): number;
  indexOfTabViewItem(withIdentifier: any): number;
  insertTabViewItem(_: NSTabViewItem, at: number): void;
  removeTabViewItem(_: NSTabViewItem): void;
  selectFirstTabViewItem(_?: any): void;
  selectLastTabViewItem(_?: any): void;
  selectNextTabViewItem(_?: any): void;
  selectPreviousTabViewItem(_?: any): void;
  selectTabViewItem(_?: NSTabViewItem): void;
  selectTabViewItem(at: number): void;
  selectTabViewItem(withIdentifier: any): void;
  tabViewItem(at: number): NSTabViewItem;
  tabViewItem(at: CGPoint): NSTabViewItem;
  takeSelectedTabViewItemFromSender(_?: any): void;
}

export type TabView = NSTabView

export class NSTabViewController extends NSViewController {
  canPropagateSelectedChildViewControllerTitle: boolean;
  setCanPropagateSelectedChildViewControllerTitle(_: boolean);
  selectedTabViewItemIndex: number;
  setSelectedTabViewItemIndex(_: number);
  tabStyle: NSTabViewController.TabStyle;
  setTabStyle(_: NSTabViewController.TabStyle);
  tabView: NSTabView;
  setTabView(_: NSTabView);
  tabViewItems: NSTabViewItem[];
  setTabViewItems(_: NSTabViewItem[]);
  transitionOptions: NSViewController.TransitionOptions;
  setTransitionOptions(_: NSViewController.TransitionOptions);
  addTabViewItem(_: NSTabViewItem): void;
  insertTabViewItem(_: NSTabViewItem, at: number): void;
  removeTabViewItem(_: NSTabViewItem): void;
  tabViewItem(for_: NSViewController): NSTabViewItem;
}

interface NSTabViewDelegate {
  tabView(_: NSTabView, shouldSelect?: NSTabViewItem): boolean;
  tabView(_: NSTabView, willSelect?: NSTabViewItem): void;
  tabView(_: NSTabView, didSelect?: NSTabViewItem): void;
  tabViewDidChangeNumberOfTabViewItems(_: NSTabView): void;
}

export class NSTabViewItem extends NSObject {
  color: NSColor;
  setColor(_: NSColor);
  identifier: any;
  setIdentifier(_: any);
  image: NSImage;
  setImage(_: NSImage);
  initialFirstResponder: NSView;
  setInitialFirstResponder(_: NSView);
  label: string;
  setLabel(_: string);
  tabState: NSTabViewItem.State;
  tabView: NSTabView;
  toolTip: string;
  setToolTip(_: string);
  viewController: NSViewController;
  setViewController(_: NSViewController);
  drawLabel(_: boolean, in_: CGRect): void;
  static createWithIdentifier(_?: any): NSTabViewItem;
  sizeOfLabel(_: boolean): CGSize;
}

export class NSTableCellView extends NSView {
  backgroundStyle: NSCell.NSView.BackgroundStyle;
  setBackgroundStyle(_: NSCell.NSView.BackgroundStyle);
  draggingImageComponents: NSDraggingImageComponent[];
  imageView: NSImageView;
  setImageView(_: NSImageView);
  objectValue: any;
  setObjectValue(_: any);
  rowSizeStyle: NSTableView.RowSizeStyle;
  setRowSizeStyle(_: NSTableView.RowSizeStyle);
  textField: NSTextField;
  setTextField(_: NSTextField);
}

export type TableCellView = NSTableCellView

export class NSTableColumn extends NSObject implements NSUserInterfaceItemIdentification {
  dataCell: any;
  setDataCell(_: any);
  isEditable: boolean;
  setEditable(_: boolean);
  headerCell: NSTableHeaderCell;
  setHeaderCell(_: NSTableHeaderCell);
  headerToolTip: string;
  setHeaderToolTip(_: string);
  isHidden: boolean;
  setHidden(_: boolean);
  maxWidth: number;
  setMaxWidth(_: number);
  minWidth: number;
  setMinWidth(_: number);
  resizingMask: NSTableColumn.ResizingOptions;
  setResizingMask(_: NSTableColumn.ResizingOptions);
  sortDescriptorPrototype: NSSortDescriptor;
  setSortDescriptorPrototype(_: NSSortDescriptor);
  tableView: NSTableView;
  setTableView(_: NSTableView);
  title: string;
  setTitle(_: string);
  width: number;
  setWidth(_: number);
  identifier: string;
  setIdentifier(_: string);
  // dupe name w instance property   dataCell(forRow: number): any;
  static createWithIdentifier(_: string): NSTableColumn;
  sizeToFit(): void;
}

export class NSTableHeaderCell extends NSTextFieldCell {
  drawSortIndicator(withFrame: CGRect, in_: NSView, ascending: boolean, priority: number): void;
  sortIndicatorRect(forBounds: CGRect): CGRect;
}

export class NSTableHeaderView extends NSView {
  draggedColumn: number;
  draggedDistance: number;
  resizedColumn: number;
  tableView: NSTableView;
  setTableView(_: NSTableView);
  column(at: CGPoint): number;
  headerRect(ofColumn: number): CGRect;
}

export type TableHeaderView = NSTableHeaderView

export class NSTableRowView extends NSView {
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  draggingDestinationFeedbackStyle: NSTableView.DraggingDestinationFeedbackStyle;
  setDraggingDestinationFeedbackStyle(_: NSTableView.DraggingDestinationFeedbackStyle);
  isEmphasized: boolean;
  setEmphasized(_: boolean);
  isFloating: boolean;
  setFloating(_: boolean);
  isGroupRowStyle: boolean;
  setGroupRowStyle(_: boolean);
  indentationForDropOperation: number;
  setIndentationForDropOperation(_: number);
  interiorBackgroundStyle: NSCell.NSView.BackgroundStyle;
  isNextRowSelected: boolean;
  setNextRowSelected(_: boolean);
  numberOfColumns: number;
  isPreviousRowSelected: boolean;
  setPreviousRowSelected(_: boolean);
  isSelected: boolean;
  setSelected(_: boolean);
  selectionHighlightStyle: NSTableView.SelectionHighlightStyle;
  setSelectionHighlightStyle(_: NSTableView.SelectionHighlightStyle);
  isTargetForDropOperation: boolean;
  setTargetForDropOperation(_: boolean);
  drawBackground(in_: CGRect): void;
  drawDraggingDestinationFeedback(in_: CGRect): void;
  drawSelection(in_: CGRect): void;
  drawSeparator(in_: CGRect): void;
  // @ts-ignore 
  view(atColumn: number): any;
}

export type TableRowView = NSTableRowView

export class NSTableView extends NSControl {
  allowsColumnReordering: boolean;
  setAllowsColumnReordering(_: boolean);
  allowsColumnResizing: boolean;
  setAllowsColumnResizing(_: boolean);
  allowsColumnSelection: boolean;
  setAllowsColumnSelection(_: boolean);
  allowsEmptySelection: boolean;
  setAllowsEmptySelection(_: boolean);
  allowsMultipleSelection: boolean;
  setAllowsMultipleSelection(_: boolean);
  allowsTypeSelect: boolean;
  setAllowsTypeSelect(_: boolean);
  autosaveName: string;
  setAutosaveName(_: string);
  autosaveTableColumns: boolean;
  setAutosaveTableColumns(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  clickedColumn: number;
  clickedRow: number;
  columnAutoresizingStyle: NSTableView.ColumnAutoresizingStyle;
  setColumnAutoresizingStyle(_: NSTableView.ColumnAutoresizingStyle);
  cornerView: NSView;
  setCornerView(_: NSView);
  dataSource: any;
  setDataSource(_: any);
  delegate: any;
  setDelegate(_: any);
  doubleAction: string;
  setDoubleAction(_: string);
  draggingDestinationFeedbackStyle: NSTableView.DraggingDestinationFeedbackStyle;
  setDraggingDestinationFeedbackStyle(_: NSTableView.DraggingDestinationFeedbackStyle);
  editedColumn: number;
  editedRow: number;
  effectiveRowSizeStyle: NSTableView.RowSizeStyle;
  floatsGroupRows: boolean;
  setFloatsGroupRows(_: boolean);
  gridColor: NSColor;
  setGridColor(_: NSColor);
  gridStyleMask: NSTableView.GridLineStyle;
  setGridStyleMask(_: NSTableView.GridLineStyle);
  headerView: NSTableHeaderView;
  setHeaderView(_: NSTableHeaderView);
  hiddenRowIndexes: IndexSet;
  highlightedTableColumn: NSTableColumn;
  setHighlightedTableColumn(_: NSTableColumn);
  intercellSpacing: CGSize;
  setIntercellSpacing(_: CGSize);
  numberOfColumns: number;
  numberOfRows: number;
  numberOfSelectedColumns: number;
  numberOfSelectedRows: number;
  registeredNibsByIdentifier: Map<string, NSNib>;
  rowActionsVisible: boolean;
  setRowActionsVisible(_: boolean);
  rowHeight: number;
  setRowHeight(_: number);
  rowSizeStyle: NSTableView.RowSizeStyle;
  setRowSizeStyle(_: NSTableView.RowSizeStyle);
  selectedColumn: number;
  selectedColumnIndexes: IndexSet;
  selectedRow: number;
  selectedRowIndexes: IndexSet;
  selectionHighlightStyle: NSTableView.SelectionHighlightStyle;
  setSelectionHighlightStyle(_: NSTableView.SelectionHighlightStyle);
  sortDescriptors: NSSortDescriptor[];
  setSortDescriptors(_: NSSortDescriptor[]);
  tableColumns: NSTableColumn[];
  usesAlternatingRowBackgroundColors: boolean;
  setUsesAlternatingRowBackgroundColors(_: boolean);
  usesAutomaticRowHeights: boolean;
  setUsesAutomaticRowHeights(_: boolean);
  usesStaticContents: boolean;
  setUsesStaticContents(_: boolean);
  verticalMotionCanBeginDrag: boolean;
  setVerticalMotionCanBeginDrag(_: boolean);
  addTableColumn(_: NSTableColumn): void;
  beginUpdates(): void;
  canDragRows(with_: IndexSet, at: CGPoint): boolean;
  column(at: CGPoint): number;
  column(for_: NSView): number;
  columnIndexes(in_: CGRect): IndexSet;
  column(withIdentifier: string): number;
  deselectAll(_?: any): void;
  deselectColumn(_: number): void;
  deselectRow(_: number): void;
  didAdd(_: NSTableRowView, forRow: number): void;
  didRemove(_: NSTableRowView, forRow: number): void;
  dragImageForRows(with_: IndexSet, tableColumns: NSTableColumn[], event: NSEvent, offset: CGPoint): NSImage;
  drawBackground(inClipRect: CGRect): void;
  drawGrid(inClipRect: CGRect): void;
  drawRow(_: number, clipRect: CGRect): void;
  editColumn(_: number, row: number, with_?: NSEvent, select?: boolean): void;
  endUpdates(): void;
  enumerateAvailableRowViews(_: (p1: NSTableRowView, p2: number) => void): void;
  frameOfCell(atColumn: number, row: number): CGRect;
  hideRows(at: IndexSet, withAnimation: NSTableView.AnimationOptions): void;
  highlightSelection(inClipRect: CGRect): void;
  indicatorImage(in_: NSTableColumn): NSImage;
  insertRows(at: IndexSet, withAnimation: NSTableView.AnimationOptions): void;
  isColumnSelected(_: number): boolean;
  isRowSelected(_: number): boolean;
  makeView(withIdentifier: string, owner?: any): NSView;
  moveColumn(_: number, toColumn: number): void;
  moveRow(at: number, to: number): void;
  noteHeightOfRows(withIndexesChanged: IndexSet): void;
  noteNumberOfRowsChanged(): void;
  rect(ofColumn: number): CGRect;
  rect(ofRow: number): CGRect;
  register(_?: NSNib, forIdentifier?: string): void;
  reloadData(): void;
  reloadData(forRowIndexes: IndexSet, columnIndexes: IndexSet): void;
  removeRows(at: IndexSet, withAnimation: NSTableView.AnimationOptions): void;
  removeTableColumn(_: NSTableColumn): void;
  row(at: CGPoint): number;
  row(for_: NSView): number;
  rowView(atRow: number, makeIfNecessary: boolean): NSTableRowView;
  rows(in_: CGRect): NSRange;
  scrollColumnToVisible(_: number): void;
  scrollRowToVisible(_: number): void;
  selectColumnIndexes(_: IndexSet, byExtendingSelection: boolean): void;
  selectRowIndexes(_: IndexSet, byExtendingSelection: boolean): void;
  setDraggingSourceOperationMask(_: NSDragging.NSDragOperation, forLocal: boolean): void;
  setDropRow(_: number, dropOperation: NSTableView.DropOperation): void;
  setIndicatorImage(_?: NSImage, in_?: NSTableColumn): void;
  sizeLastColumnToFit(): void;
  tableColumn(withIdentifier: string): NSTableColumn;
  tile(): void;
  unhideRows(at: IndexSet, withAnimation: NSTableView.AnimationOptions): void;
  // @ts-ignore 
  view(atColumn: number, row: number, makeIfNecessary: boolean): NSView;
}

export type TableView = NSTableView

interface NSTableViewDataSource {
  numberOfRows(in_: NSTableView): number;
  tableView(_: NSTableView, objectValueFor?: NSTableColumn, row?: number): any;
  tableView(_: NSTableView, setObjectValue?: any, for_?: NSTableColumn, row?: number): void;
  tableView(_: NSTableView, sortDescriptorsDidChange: NSSortDescriptor[]): void;
  tableView(_: NSTableView, pasteboardWriterForRow: number): any;
  tableView(_: NSTableView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forRowIndexes: IndexSet): void;
  tableView(_: NSTableView, draggingSession: NSDraggingSession, endedAt: CGPoint, operation: NSDragging.NSDragOperation): void;
  tableView(_: NSTableView, updateDraggingItemsForDrag: any): void;
  tableView(_: NSTableView, writeRowsWith: IndexSet, to: NSPasteboard): boolean;
  tableView(_: NSTableView, validateDrop: any, proposedRow: number, proposedDropOperation: NSTableView.DropOperation): NSDragging.NSDragOperation;
  tableView(_: NSTableView, acceptDrop: any, row: number, dropOperation: NSTableView.DropOperation): boolean;
}

interface NSTableViewDelegate {
  selectionShouldChange(in_: NSTableView): boolean;
  tableView(_: NSTableView, viewFor?: NSTableColumn, row?: number): NSView;
  tableView(_: NSTableView, rowViewForRow: number): NSTableRowView;
  tableView(_: NSTableView, didAdd: NSTableRowView, forRow: number): void;
  tableView(_: NSTableView, didRemove: NSTableRowView, forRow: number): void;
  tableView(_: NSTableView, willDisplayCell: any, for_?: NSTableColumn, row?: number): void;
  tableView(_: NSTableView, shouldEdit?: NSTableColumn, row?: number): boolean;
  tableView(_: NSTableView, toolTipFor: NSCell, rect: CGRect, tableColumn?: NSTableColumn, row?: number, mouseLocation?: CGPoint): string;
  tableView(_: NSTableView, shouldShowCellExpansionFor?: NSTableColumn, row?: number): boolean;
  tableView(_: NSTableView, shouldTrackCell: NSCell, for_?: NSTableColumn, row?: number): boolean;
  tableView(_: NSTableView, dataCellFor?: NSTableColumn, row?: number): NSCell;
  tableView(_: NSTableView, shouldSelectRow: number): boolean;
  tableView(_: NSTableView, selectionIndexesForProposedSelection: IndexSet): IndexSet;
  tableView(_: NSTableView, shouldSelect?: NSTableColumn): boolean;
  tableView(_: NSTableView, mouseDownInHeaderOf: NSTableColumn): void;
  tableView(_: NSTableView, didClick: NSTableColumn): void;
  tableView(_: NSTableView, didDrag: NSTableColumn): void;
  tableView(_: NSTableView, heightOfRow: number): number;
  tableView(_: NSTableView, typeSelectStringFor?: NSTableColumn, row?: number): string;
  tableView(_: NSTableView, nextTypeSelectMatchFromRow: number, toRow: number, for_: string): number;
  tableView(_: NSTableView, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
  tableView(_: NSTableView, isGroupRow: number): boolean;
  tableView(_: NSTableView, sizeToFitWidthOfColumn: number): number;
  tableView(_: NSTableView, shouldReorderColumn: number, toColumn: number): boolean;
  tableView(_: NSTableView, rowActionsForRow: number, edge: NSTableView.RowActionEdge): NSTableViewRowAction[];
  tableViewColumnDidMove(_: Notification): void;
  tableViewColumnDidResize(_: Notification): void;
  tableViewSelectionDidChange(_: Notification): void;
  tableViewSelectionIsChanging(_: Notification): void;
}

export class NSTableViewRowAction extends NSObject {
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  image: NSImage;
  setImage(_: NSImage);
  style: NSTableViewRowAction.Style;
  title: string;
  setTitle(_: string);
}

export class NSText extends NSView {
  alignment: NSText.NSTextAlignment;
  setAlignment(_: NSText.NSTextAlignment);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  baseWritingDirection: NSText.NSWritingDirection;
  setBaseWritingDirection(_: NSText.NSWritingDirection);
  delegate: any;
  setDelegate(_: any);
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  isEditable: boolean;
  setEditable(_: boolean);
  isFieldEditor: boolean;
  setFieldEditor(_: boolean);
  font: NSFont;
  setFont(_: NSFont);
  isHorizontallyResizable: boolean;
  setHorizontallyResizable(_: boolean);
  importsGraphics: boolean;
  setImportsGraphics(_: boolean);
  maxSize: CGSize;
  setMaxSize(_: CGSize);
  minSize: CGSize;
  setMinSize(_: CGSize);
  isRichText: boolean;
  setRichText(_: boolean);
  isRulerVisible: boolean;
  isSelectable: boolean;
  setSelectable(_: boolean);
  selectedRange: NSRange;
  setSelectedRange(_: NSRange);
  textColor: NSColor;
  setTextColor(_: NSColor);
  usesFontPanel: boolean;
  setUsesFontPanel(_: boolean);
  isVerticallyResizable: boolean;
  setVerticallyResizable(_: boolean);
  rtfd(from: NSRange): Data;
  rtf(from: NSRange): Data;
  alignCenter(_?: any): void;
  alignLeft(_?: any): void;
  alignRight(_?: any): void;
  checkSpelling(_?: any): void;
  // @ts-ignore 
  copy(_?: any): void;
  copyFont(_?: any): void;
  copyRuler(_?: any): void;
  cut(_?: any): void;
  delete(_?: any): void;
  paste(_?: any): void;
  pasteFont(_?: any): void;
  pasteRuler(_?: any): void;
  readRTFD(fromFile: string): boolean;
  replaceCharacters(in_: NSRange, withRTF: Data): void;
  replaceCharacters(in_: NSRange, withRTFD: Data): void;
  replaceCharacters(in_: NSRange, with_: string): void;
  scrollRangeToVisible(_: NSRange): void;
  setFont(_: NSFont, range: NSRange): void;
  setTextColor(_?: NSColor, range?: NSRange): void;
  showGuessPanel(_?: any): void;
  sizeToFit(): void;
  subscript(_?: any): void;
  superscript(_?: any): void;
  toggleRuler(_?: any): void;
  underline(_?: any): void;
  unscript(_?: any): void;
  writeRTFD(toFile: string, atomically: boolean): boolean;
}

export type Text = NSText

export class NSTextAlternatives extends NSObject {
  alternativeStrings: string[];
  primaryString: string;
  static createWithPrimaryStringWithAlternativeStrings(_: string, alternativeStrings: string[]): NSTextAlternatives;
  noteSelectedAlternativeString(_: string): void;
}

export class NSTextAttachment extends NSObject {
  attachmentCell: any;
  setAttachmentCell(_: any);
  bounds: CGRect;
  setBounds(_: CGRect);
  contents: Data;
  setContents(_: Data);
  fileType: string;
  setFileType(_: string);
  fileWrapper: FileWrapper;
  setFileWrapper(_: FileWrapper);
  image: NSImage;
  setImage(_: NSImage);
  static createWithDataWithOfType(_?: Data, ofType?: string): NSTextAttachment;
  static createWithFileWrapper(_?: FileWrapper): NSTextAttachment;
}

export class NSTextAttachmentCell extends NSCell {
}

interface NSTextAttachmentCellProtocol {
  attachment: NSTextAttachment;
  setAttachment(_: NSTextAttachment);
  cellBaselineOffset(): CGPoint;
  cellFrameForTextContainer(_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
  cellSize(): CGSize;
  drawWithFrame(_: CGRect, inView?: NSView): void;
  drawWithFrame(_: CGRect, inView?: NSView, characterIndex?: number): void;
  drawWithFrame(_: CGRect, inView?: NSView, characterIndex?: number, layoutManager?: NSLayoutManager): void;
  highlight(_: boolean, withFrame: CGRect, inView?: NSView): void;
  trackMouse(_: NSEvent, inRect: CGRect, ofView?: NSView, untilMouseUp?: boolean): boolean;
  trackMouse(_: NSEvent, inRect: CGRect, ofView?: NSView, atCharacterIndex?: number, untilMouseUp?: boolean): boolean;
  wantsToTrackMouse(): boolean;
  wantsToTrackMouseForEvent(_: NSEvent, inRect: CGRect, ofView?: NSView, atCharacterIndex?: number): boolean;
}

interface NSTextAttachmentContainer {
  attachmentBounds(for_?: NSTextContainer, proposedLineFragment?: CGRect, glyphPosition?: CGPoint, characterIndex?: number): CGRect;
  image(forBounds: CGRect, textContainer?: NSTextContainer, characterIndex?: number): NSImage;
}

export class NSTextBlock extends NSObject {
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  contentWidth: number;
  contentWidthValueType: NSTextTable.NSTextBlock.ValueType;
  verticalAlignment: NSTextTable.NSTextBlock.VerticalAlignment;
  setVerticalAlignment(_: NSTextTable.NSTextBlock.VerticalAlignment);
  borderColor(for_: NSGeometry.NSRectEdge): NSColor;
  boundsRect(forContentRect: CGRect, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
  drawBackground(withFrame: CGRect, in_: NSView, characterRange: NSRange, layoutManager: NSLayoutManager): void;
  rectForLayout(at: CGPoint, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
  setBorderColor(_?: NSColor): void;
  setBorderColor(_?: NSColor, for_?: NSGeometry.NSRectEdge): void;
  setContentWidth(_: number, type: NSTextTable.NSTextBlock.ValueType): void;
  // @ts-ignore 
  setValue(_: number, type: NSTextTable.NSTextBlock.ValueType, for_: NSTextTable.NSTextBlock.Dimension): void;
  setWidth(_: number, type: NSTextTable.NSTextBlock.ValueType, for_: NSTextTable.NSTextBlock.Layer): void;
  setWidth(_: number, type: NSTextTable.NSTextBlock.ValueType, for_: NSTextTable.NSTextBlock.Layer, edge: NSGeometry.NSRectEdge): void;
  // @ts-ignore 
  value(for_: NSTextTable.NSTextBlock.Dimension): number;
  valueType(for_: NSTextTable.NSTextBlock.Dimension): NSTextTable.NSTextBlock.ValueType;
  width(for_: NSTextTable.NSTextBlock.Layer, edge: NSGeometry.NSRectEdge): number;
  widthValueType(for_: NSTextTable.NSTextBlock.Layer, edge: NSGeometry.NSRectEdge): NSTextTable.NSTextBlock.ValueType;
}

interface NSTextCheckingClient {
  addAnnotations(_: Map<string, string>, range: NSRange): void;
  annotatedSubstring(forProposedRange: NSRange, actualRange?: NSRange): NSAttributedString;
  candidateListTouchBarItem(): NSCandidateListTouchBarItem<any>;
  removeAnnotation(_: string, range: NSRange): void;
  replaceCharacters(in_: NSRange, withAnnotatedString: NSAttributedString): void;
  selectAndShow(_: NSRange): void;
  setAnnotations(_: Map<string, string>, range: NSRange): void;
  view(for_: NSRange, firstRect?: CGRect, actualRange?: NSRange): NSView;
}

export class NSTextCheckingController extends NSObject {
  client: any;
  spellCheckerDocumentTag: number;
  setSpellCheckerDocumentTag(_: number);
  changeSpelling(_?: any): void;
  checkSpelling(_?: any): void;
  checkTextInDocument(_?: any): void;
  checkText(in_: NSRange, types: number, options: Map<string, any>): void;
  checkTextInSelection(_?: any): void;
  considerTextChecking(for_: NSRange): void;
  didChangeSelectedRange(): void;
  didChangeText(in_: NSRange): void;
  ignoreSpelling(_?: any): void;
  static createWithClient(_: any): NSTextCheckingController;
  insertedText(in_: NSRange): void;
  invalidate(): void;
  menu(at: number, clickedOnSelection: boolean, effectiveRange: NSRange): NSMenu;
  orderFrontSubstitutionsPanel(_?: any): void;
  showGuessPanel(_?: any): void;
  updateCandidates(): void;
  validAnnotations(): string[];
}

export class NSTextContainer extends NSObject {
  containerSize: CGSize;
  setContainerSize(_: CGSize);
  exclusionPaths: NSBezierPath[];
  setExclusionPaths(_: NSBezierPath[]);
  heightTracksTextView: boolean;
  setHeightTracksTextView(_: boolean);
  layoutManager: NSLayoutManager;
  setLayoutManager(_: NSLayoutManager);
  lineBreakMode: NSParagraphStyle.NSLineBreakMode;
  setLineBreakMode(_: NSParagraphStyle.NSLineBreakMode);
  lineFragmentPadding: number;
  setLineFragmentPadding(_: number);
  maximumNumberOfLines: number;
  setMaximumNumberOfLines(_: number);
  isSimpleRectangularTextContainer: boolean;
  size: CGSize;
  setSize(_: CGSize);
  textView: NSTextView;
  setTextView(_: NSTextView);
  widthTracksTextView: boolean;
  setWidthTracksTextView(_: boolean);
  static createWithContainerSize(_: CGSize): NSTextContainer;
  static createWithSize(_: CGSize): NSTextContainer;
  lineFragmentRect(forProposedRect: CGRect, at: number, writingDirection: NSText.NSWritingDirection, remaining?: CGRect): CGRect;
  lineFragmentRect(forProposedRect: CGRect, sweepDirection: NSTextContainer.NSLineSweepDirection, movementDirection: NSTextContainer.NSLineMovementDirection, remaining?: CGRect): CGRect;
  replaceLayoutManager(_: NSLayoutManager): void;
}

interface NSTextDelegate {
  textDidBeginEditing(_: Notification): void;
  textDidChange(_: Notification): void;
  textDidEndEditing(_: Notification): void;
  textShouldBeginEditing(_: NSText): boolean;
  textShouldEndEditing(_: NSText): boolean;
}

export class NSTextField extends NSControl {
  allowsCharacterPickerTouchBarItem: boolean;
  setAllowsCharacterPickerTouchBarItem(_: boolean);
  allowsDefaultTighteningForTruncation: boolean;
  setAllowsDefaultTighteningForTruncation(_: boolean);
  allowsEditingTextAttributes: boolean;
  setAllowsEditingTextAttributes(_: boolean);
  isAutomaticTextCompletionEnabled: boolean;
  setAutomaticTextCompletionEnabled(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  bezelStyle: NSTextFieldCell.NSTextField.BezelStyle;
  setBezelStyle(_: NSTextFieldCell.NSTextField.BezelStyle);
  isBezeled: boolean;
  setBezeled(_: boolean);
  isBordered: boolean;
  setBordered(_: boolean);
  delegate: any;
  setDelegate(_: any);
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  isEditable: boolean;
  setEditable(_: boolean);
  importsGraphics: boolean;
  setImportsGraphics(_: boolean);
  maximumNumberOfLines: number;
  setMaximumNumberOfLines(_: number);
  placeholderAttributedString: NSAttributedString;
  setPlaceholderAttributedString(_: NSAttributedString);
  placeholderString: string;
  setPlaceholderString(_: string);
  preferredMaxLayoutWidth: number;
  setPreferredMaxLayoutWidth(_: number);
  isSelectable: boolean;
  setSelectable(_: boolean);
  textColor: NSColor;
  setTextColor(_: NSColor);
  selectText(_?: any): void;
  textDidBeginEditing(_: Notification): void;
  textDidChange(_: Notification): void;
  textDidEndEditing(_: Notification): void;
  textShouldBeginEditing(_: NSText): boolean;
  textShouldEndEditing(_: NSText): boolean;
}

export type TextField = NSTextField

export class NSTextFieldCell extends NSActionCell {
  allowedInputSourceLocales: string[];
  setAllowedInputSourceLocales(_: string[]);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  bezelStyle: NSTextFieldCell.NSTextField.BezelStyle;
  setBezelStyle(_: NSTextFieldCell.NSTextField.BezelStyle);
  drawsBackground: boolean;
  setDrawsBackground(_: boolean);
  placeholderAttributedString: NSAttributedString;
  setPlaceholderAttributedString(_: NSAttributedString);
  placeholderString: string;
  setPlaceholderString(_: string);
  textColor: NSColor;
  setTextColor(_: NSColor);
  setWantsNotificationForMarkedText(_: boolean): void;
}

interface NSTextFieldDelegate {
  textField(_: NSTextField, textView: NSTextView, candidatesForSelectedRange: NSRange): any[];
  textField(_: NSTextField, textView: NSTextView, candidates: NSTextCheckingResult[], forSelectedRange: NSRange): NSTextCheckingResult[];
  textField(_: NSTextField, textView: NSTextView, shouldSelectCandidateAt: number): boolean;
}

export class NSTextFinder extends NSObject {
  static drawIncrementalMatchHighlight(in_: CGRect): void;
  client: any;
  setClient(_: any);
  findBarContainer: any;
  setFindBarContainer(_: any);
  findIndicatorNeedsUpdate: boolean;
  setFindIndicatorNeedsUpdate(_: boolean);
  incrementalMatchRanges: NSValue[];
  isIncrementalSearchingEnabled: boolean;
  setIncrementalSearchingEnabled(_: boolean);
  incrementalSearchingShouldDimContentView: boolean;
  setIncrementalSearchingShouldDimContentView(_: boolean);
  cancelFindIndicator(): void;
  noteClientStringWillChange(): void;
  performAction(_: NSTextFinder.Action): void;
  validateAction(_: NSTextFinder.Action): boolean;
}

interface NSTextFinderBarContainer {
  findBarView: NSView;
  setFindBarView(_: NSView);
  isFindBarVisible: boolean;
  setFindBarVisible(_: boolean);
  contentView: NSView;
  findBarViewDidChangeHeight(): void;
}

interface NSTextFinderClient {
  allowsMultipleSelection?: boolean;
  firstSelectedRange?: NSRange;
  isEditable?: boolean;
  isSelectable?: boolean;
  selectedRanges?: NSValue[];
  setSelectedRanges(_: NSValue[]);
  
  visibleCharacterRanges?: NSValue[];
  contentView(at: number, effectiveCharacterRange: NSRange): NSView;
  didReplaceCharacters(): void;
  drawCharacters(in_: NSRange, forContentView: NSView): void;
  rects(forCharacterRange: NSRange): NSValue[];
  replaceCharacters(in_: NSRange, with_: string): void;
  scrollRangeToVisible(_: NSRange): void;
  shouldReplaceCharacters(inRanges: NSValue[], with_: string[]): boolean;
  stringLength(): number;
}

interface NSTextInput {
}

interface NSTextInputClient {
  attributedString(): NSAttributedString;
  attributedSubstring(forProposedRange: NSRange, actualRange?: NSRange): NSAttributedString;
  baselineDeltaForCharacter(at: number): number;
  characterIndex(for_: CGPoint): number;
  doCommand(by: string): void;
  drawsVerticallyForCharacter(at: number): boolean;
  firstRect(forCharacterRange: NSRange, actualRange?: NSRange): CGRect;
  fractionOfDistanceThroughGlyph(for_: CGPoint): number;
  hasMarkedText(): boolean;
  insertText(_: any, replacementRange: NSRange): void;
  markedRange(): NSRange;
  selectedRange(): NSRange;
  setMarkedText(_: any, selectedRange: NSRange, replacementRange: NSRange): void;
  unmarkText(): void;
  validAttributesForMarkedText(): string[];
  windowLevel(): number;
}

export class NSTextInputContext extends NSObject {
  static localizedName(forInputSource: string): string;
  acceptsGlyphInfo: boolean;
  setAcceptsGlyphInfo(_: boolean);
  allowedInputSourceLocales: string[];
  setAllowedInputSourceLocales(_: string[]);
  client: any;
  keyboardInputSources: string[];
  selectedKeyboardInputSource: string;
  setSelectedKeyboardInputSource(_: string);
  static currentInputContext: NSTextInputContext;
  activate(): void;
  deactivate(): void;
  discardMarkedText(): void;
  handleEvent(_: NSEvent): boolean;
  static createWithClient(_: any): NSTextInputContext;
  invalidateCharacterCoordinates(): void;
}

interface NSTextInputTraits {
  autocorrectionType?: NSTextCheckingClient.NSTextInputTraitType;
  setAutocorrectionType(_: NSTextCheckingClient.NSTextInputTraitType);
  dataDetectionType?: NSTextCheckingClient.NSTextInputTraitType;
  setDataDetectionType(_: NSTextCheckingClient.NSTextInputTraitType);
  grammarCheckingType?: NSTextCheckingClient.NSTextInputTraitType;
  setGrammarCheckingType(_: NSTextCheckingClient.NSTextInputTraitType);
  linkDetectionType?: NSTextCheckingClient.NSTextInputTraitType;
  setLinkDetectionType(_: NSTextCheckingClient.NSTextInputTraitType);
  smartDashesType?: NSTextCheckingClient.NSTextInputTraitType;
  setSmartDashesType(_: NSTextCheckingClient.NSTextInputTraitType);
  smartInsertDeleteType?: NSTextCheckingClient.NSTextInputTraitType;
  setSmartInsertDeleteType(_: NSTextCheckingClient.NSTextInputTraitType);
  smartQuotesType?: NSTextCheckingClient.NSTextInputTraitType;
  setSmartQuotesType(_: NSTextCheckingClient.NSTextInputTraitType);
  spellCheckingType?: NSTextCheckingClient.NSTextInputTraitType;
  setSpellCheckingType(_: NSTextCheckingClient.NSTextInputTraitType);
  textCompletionType?: NSTextCheckingClient.NSTextInputTraitType;
  setTextCompletionType(_: NSTextCheckingClient.NSTextInputTraitType);
  textReplacementType?: NSTextCheckingClient.NSTextInputTraitType;
  setTextReplacementType(_: NSTextCheckingClient.NSTextInputTraitType);
}

interface NSTextLayoutOrientationProvider {
  layoutOrientation: NSLayoutManager.TextLayoutOrientation;
}

export class NSTextList extends NSObject {
  listOptions: NSTextList.Options;
  markerFormat: string;
  startingItemNumber: number;
  setStartingItemNumber(_: number);
  static createWithMarkerFormatWithOptions(_: string, options: number): NSTextList;
  marker(forItemNumber: number): string;
}

export class NSTextStorage extends NSMutableAttributedString {
  attributeRuns: NSTextStorage[];
  setAttributeRuns(_: NSTextStorage[]);
  changeInLength: number;
  characters: NSTextStorage[];
  setCharacters(_: NSTextStorage[]);
  delegate: any;
  setDelegate(_: any);
  editedMask: NSTextStorage.NSTextStorageEditActions;
  editedRange: NSRange;
  fixesAttributesLazily: boolean;
  font: NSFont;
  setFont(_: NSFont);
  foregroundColor: NSColor;
  setForegroundColor(_: NSColor);
  layoutManagers: NSLayoutManager[];
  paragraphs: NSTextStorage[];
  setParagraphs(_: NSTextStorage[]);
  words: NSTextStorage[];
  setWords(_: NSTextStorage[]);
  addLayoutManager(_: NSLayoutManager): void;
  edited(_: NSTextStorage.NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
  ensureAttributesAreFixed(in_: NSRange): void;
  invalidateAttributes(in_: NSRange): void;
  processEditing(): void;
  removeLayoutManager(_: NSLayoutManager): void;
}

interface NSTextStorageDelegate {
  textStorage(_: NSTextStorage, willProcessEditing: NSTextStorage.NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
  textStorage(_: NSTextStorage, didProcessEditing: NSTextStorage.NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
}

export class NSTextTab extends NSObject {
  static columnTerminators(for_?: Locale): CharacterSet;
  alignment: NSText.NSTextAlignment;
  location: number;
  options: Map<string, any>;
  tabStopType: NSParagraphStyle.TextTabType;
  static createWithTextAlignmentWithLocationWithOptions(_: NSText.NSTextAlignment, location: number, options: Map<string, any>): NSTextTab;
  static createWithTypeWithLocation(_: NSParagraphStyle.TextTabType, location: number): NSTextTab;
}

export class NSTextTable extends NSTextBlock {
  collapsesBorders: boolean;
  setCollapsesBorders(_: boolean);
  hidesEmptyCells: boolean;
  setHidesEmptyCells(_: boolean);
  layoutAlgorithm: NSTextTable.LayoutAlgorithm;
  setLayoutAlgorithm(_: NSTextTable.LayoutAlgorithm);
  numberOfColumns: number;
  setNumberOfColumns(_: number);
  // @ts-ignore 
  boundsRect(for_: NSTextTableBlock, contentRect: CGRect, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
  // @ts-ignore 
  drawBackground(for_: NSTextTableBlock, withFrame: CGRect, in_: NSView, characterRange: NSRange, layoutManager: NSLayoutManager): void;
  rect(for_: NSTextTableBlock, layoutAt: CGPoint, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
}

export class NSTextTableBlock extends NSTextBlock {
  columnSpan: number;
  rowSpan: number;
  startingColumn: number;
  startingRow: number;
  table: NSTextTable;
  static createWithTableWithStartingRowWithRowSpanWithStartingColumnWithColumnSpan(_: NSTextTable, startingRow: number, rowSpan: number, startingColumn: number, columnSpan: number): NSTextTableBlock;
}

export class NSTextView extends NSText {
  static createWithFieldEditor(): NSTextView;
  static registerForServices(): void;
  static scrollableDocumentContentTextView(): NSScrollView;
  static scrollablePlainDocumentContentTextView(): NSScrollView;
  static scrollableTextView(): NSScrollView;
  acceptableDragTypes: string[];
  acceptsGlyphInfo: boolean;
  setAcceptsGlyphInfo(_: boolean);
  allowedInputSourceLocales: string[];
  setAllowedInputSourceLocales(_: string[]);
  allowsCharacterPickerTouchBarItem: boolean;
  setAllowsCharacterPickerTouchBarItem(_: boolean);
  allowsDocumentBackgroundColorChange: boolean;
  setAllowsDocumentBackgroundColorChange(_: boolean);
  allowsImageEditing: boolean;
  setAllowsImageEditing(_: boolean);
  allowsUndo: boolean;
  setAllowsUndo(_: boolean);
  isAutomaticDashSubstitutionEnabled: boolean;
  setAutomaticDashSubstitutionEnabled(_: boolean);
  isAutomaticDataDetectionEnabled: boolean;
  setAutomaticDataDetectionEnabled(_: boolean);
  isAutomaticLinkDetectionEnabled: boolean;
  setAutomaticLinkDetectionEnabled(_: boolean);
  isAutomaticQuoteSubstitutionEnabled: boolean;
  setAutomaticQuoteSubstitutionEnabled(_: boolean);
  isAutomaticSpellingCorrectionEnabled: boolean;
  setAutomaticSpellingCorrectionEnabled(_: boolean);
  isAutomaticTextCompletionEnabled: boolean;
  setAutomaticTextCompletionEnabled(_: boolean);
  isAutomaticTextReplacementEnabled: boolean;
  setAutomaticTextReplacementEnabled(_: boolean);
  isCoalescingUndo: boolean;
  isContinuousSpellCheckingEnabled: boolean;
  setContinuousSpellCheckingEnabled(_: boolean);
  defaultParagraphStyle: NSParagraphStyle;
  setDefaultParagraphStyle(_: NSParagraphStyle);
  delegate: any;
  setDelegate(_: any);
  displaysLinkToolTips: boolean;
  setDisplaysLinkToolTips(_: boolean);
  enabledTextCheckingTypes: number;
  setEnabledTextCheckingTypes(_: number);
  isGrammarCheckingEnabled: boolean;
  setGrammarCheckingEnabled(_: boolean);
  isIncrementalSearchingEnabled: boolean;
  setIncrementalSearchingEnabled(_: boolean);
  insertionPointColor: NSColor;
  setInsertionPointColor(_: NSColor);
  layoutManager: NSLayoutManager;
  linkTextAttributes: Map<string, any>;
  setLinkTextAttributes(_: Map<string, any>);
  markedTextAttributes: Map<string, any>;
  setMarkedTextAttributes(_: Map<string, any>);
  rangeForUserCharacterAttributeChange: NSRange;
  rangeForUserCompletion: NSRange;
  rangeForUserParagraphAttributeChange: NSRange;
  rangeForUserTextChange: NSRange;
  rangesForUserCharacterAttributeChange: NSValue[];
  rangesForUserParagraphAttributeChange: NSValue[];
  rangesForUserTextChange: NSValue[];
  readablePasteboardTypes: string[];
  isRulerVisible: boolean;
  setRulerVisible(_: boolean);
  selectedRanges: NSValue[];
  setSelectedRanges(_: NSValue[]);
  selectedTextAttributes: Map<string, any>;
  setSelectedTextAttributes(_: Map<string, any>);
  selectionAffinity: NSTextView.NSSelectionAffinity;
  selectionGranularity: NSTextView.NSSelectionGranularity;
  setSelectionGranularity(_: NSTextView.NSSelectionGranularity);
  shouldDrawInsertionPoint: boolean;
  smartInsertDeleteEnabled: boolean;
  setSmartInsertDeleteEnabled(_: boolean);
  spellCheckerDocumentTag: number;
  textContainer: NSTextContainer;
  setTextContainer(_: NSTextContainer);
  textContainerInset: CGSize;
  setTextContainerInset(_: CGSize);
  textContainerOrigin: CGPoint;
  textStorage: NSTextStorage;
  typingAttributes: Map<string, any>;
  setTypingAttributes(_: Map<string, any>);
  usesAdaptiveColorMappingForDarkAppearance: boolean;
  setUsesAdaptiveColorMappingForDarkAppearance(_: boolean);
  usesFindBar: boolean;
  setUsesFindBar(_: boolean);
  usesFindPanel: boolean;
  setUsesFindPanel(_: boolean);
  usesInspectorBar: boolean;
  setUsesInspectorBar(_: boolean);
  usesRolloverButtonForSelection: boolean;
  setUsesRolloverButtonForSelection(_: boolean);
  usesRuler: boolean;
  setUsesRuler(_: boolean);
  writablePasteboardTypes: string[];
  static stronglyReferencesTextStorage: boolean;
  alignJustified(_?: any): void;
  breakUndoCoalescing(): void;
  changeAttributes(_?: any): void;
  changeDocumentBackgroundColor(_?: any): void;
  changeLayoutOrientation(_?: any): void;
  characterIndexForInsertion(at: CGPoint): number;
  checkTextInDocument(_?: any): void;
  checkText(in_: NSRange, types: number, options: Map<string, any>): void;
  checkTextInSelection(_?: any): void;
  cleanUpAfterDragOperation(): void;
  clicked(onLink: any, at: number): void;
  completions(forPartialWordRange: NSRange, indexOfSelectedItem: number): string[];
  didChangeText(): void;
  dragImageForSelection(with_: NSEvent, origin?: CGPoint): NSImage;
  dragOperation(for_: any, type: string): NSDragging.NSDragOperation;
  dragSelection(with_: NSEvent, offset: CGSize, slideBack: boolean): boolean;
  drawInsertionPoint(in_: CGRect, color: NSColor, turnedOn: boolean): void;
  drawBackground(in_: CGRect): void;
  handleTextCheckingResults(_: NSTextCheckingResult[], forRange: NSRange, types: number, options: Map<string, any>, orthography: NSOrthography, wordCount: number): void;
  // @ts-ignore 
  static createWithFrameWithTextContainer(_: CGRect, textContainer?: NSTextContainer): NSTextView;
  insertCompletion(_: string, forPartialWordRange: NSRange, movement: number, isFinal: boolean): void;
  invalidateTextContainerOrigin(): void;
  loosenKerning(_?: any): void;
  lowerBaseline(_?: any): void;
  orderFrontLinkPanel(_?: any): void;
  orderFrontListPanel(_?: any): void;
  orderFrontSharingServicePicker(_?: any): void;
  orderFrontSpacingPanel(_?: any): void;
  orderFrontSubstitutionsPanel(_?: any): void;
  orderFrontTablePanel(_?: any): void;
  outline(_?: any): void;
  pasteAsPlainText(_?: any): void;
  pasteAsRichText(_?: any): void;
  performFindPanelAction(_?: any): void;
  performValidatedReplacement(in_: NSRange, with_: NSAttributedString): boolean;
  preferredPasteboardType(from: string[], restrictedToTypesFrom?: string[]): string;
  raiseBaseline(_?: any): void;
  readSelection(from: NSPasteboard): boolean;
  readSelection(from: NSPasteboard, type: string): boolean;
  replaceTextContainer(_: NSTextContainer): void;
  selectionRange(forProposedRange: NSRange, granularity: NSTextView.NSSelectionGranularity): NSRange;
  // @ts-ignore 
  setAlignment(_: NSText.NSTextAlignment, range: NSRange): void;
  // @ts-ignore 
  setBaseWritingDirection(_: NSText.NSWritingDirection, range: NSRange): void;
  setConstrainedFrameSize(_: CGSize): void;
  setLayoutOrientation(_: NSLayoutManager.TextLayoutOrientation): void;
  // @ts-ignore 
  setNeedsDisplay(_: CGRect, avoidAdditionalLayout: boolean): void;
  setSelectedRange(_: NSRange): void;
  setSelectedRange(_: NSRange, affinity: NSTextView.NSSelectionAffinity, stillSelecting: boolean): void;
  setSelectedRanges(_: NSValue[], affinity: NSTextView.NSSelectionAffinity, stillSelecting: boolean): void;
  setSpellingState(_: number, range: NSRange): void;
  shouldChangeText(in_: NSRange, replacementString?: string): boolean;
  shouldChangeText(inRanges: NSValue[], replacementStrings?: string[]): boolean;
  showFindIndicator(for_: NSRange): void;
  smartDeleteRange(forProposedRange: NSRange): NSRange;
  smartInsert(afterStringFor: string, replacing: NSRange): string;
  smartInsert(beforeStringFor: string, replacing: NSRange): string;
  smartInsert(for_: string, replacing: NSRange, before?: string, after?: string): void;
  startSpeaking(_?: any): void;
  stopSpeaking(_?: any): void;
  tightenKerning(_?: any): void;
  toggleAutomaticDashSubstitution(_?: any): void;
  toggleAutomaticDataDetection(_?: any): void;
  toggleAutomaticLinkDetection(_?: any): void;
  toggleAutomaticQuoteSubstitution(_?: any): void;
  toggleAutomaticSpellingCorrection(_?: any): void;
  toggleAutomaticTextCompletion(_?: any): void;
  toggleAutomaticTextReplacement(_?: any): void;
  toggleContinuousSpellChecking(_?: any): void;
  toggleGrammarChecking(_?: any): void;
  toggleQuickLookPreviewPanel(_?: any): void;
  toggleSmartInsertDelete(_?: any): void;
  turnOffKerning(_?: any): void;
  turnOffLigatures(_?: any): void;
  updateCandidates(): void;
  updateDragTypeRegistration(): void;
  updateFontPanel(): void;
  updateInsertionPointStateAndRestartTimer(_: boolean): void;
  updateQuickLookPreviewPanel(): void;
  updateRuler(): void;
  updateTextTouchBarItems(): void;
  updateTouchBarItemIdentifiers(): void;
  useAllLigatures(_?: any): void;
  useStandardKerning(_?: any): void;
  useStandardLigatures(_?: any): void;
  writeSelection(to: NSPasteboard, type: string): boolean;
  writeSelection(to: NSPasteboard, types: string[]): boolean;
}

export type TextView = NSTextView

interface NSTextViewDelegate {
  textView(_: NSTextView, clickedOnLink: any, at: number): boolean;
  textView(_: NSTextView, clickedOn: any, in_: CGRect, at: number): void;
  textView(_: NSTextView, doubleClickedOn: any, in_: CGRect, at: number): void;
  textView(_: NSTextView, draggedCell: any, in_: CGRect, event: NSEvent, at: number): void;
  textView(_: NSTextView, writablePasteboardTypesFor: any, at: number): string[];
  textView(_: NSTextView, write: any, at: number, to: NSPasteboard, type: string): boolean;
  textView(_: NSTextView, willChangeSelectionFromCharacterRange: NSRange, toCharacterRange: NSRange): NSRange;
  textView(_: NSTextView, willChangeSelectionFromCharacterRanges: NSValue[], toCharacterRanges: NSValue[]): NSValue[];
  textView(_: NSTextView, shouldChangeTextInRanges: NSValue[], replacementStrings?: string[]): boolean;
  textView(_: NSTextView, shouldChangeTypingAttributes: Map<string, any>, toAttributes: Map<string, any>): Map<string, any>;
  textView(_: NSTextView, willDisplayToolTip: string, forCharacterAt: number): string;
  textView(_: NSTextView, completions: string[], forPartialWordRange: NSRange, indexOfSelectedItem?: number): string[];
  textView(_: NSTextView, shouldChangeTextIn: NSRange, replacementString?: string): boolean;
  textView(_: NSTextView, doCommandBy: string): boolean;
  textView(_: NSTextView, shouldSetSpellingState: number, range: NSRange): number;
  textView(_: NSTextView, menu: NSMenu, for_: NSEvent, at: number): NSMenu;
  textView(_: NSTextView, willCheckTextIn: NSRange, options: Map<string, any>, types: number): Map<string, any>;
  textView(_: NSTextView, didCheckTextIn: NSRange, types: number, options: Map<string, any>, results: NSTextCheckingResult[], orthography: NSOrthography, wordCount: number): NSTextCheckingResult[];
  textView(_: NSTextView, urlForContentsOf: NSTextAttachment, at: number): URL;
  textView(_: NSTextView, willShow: NSSharingServicePicker, forItems: any[]): NSSharingServicePicker;
  textView(_: NSTextView, shouldUpdateTouchBarItemIdentifiers: string[]): string[];
  textView(_: NSTextView, candidatesForSelectedRange: NSRange): any[];
  textView(_: NSTextView, candidates: NSTextCheckingResult[], forSelectedRange: NSRange): NSTextCheckingResult[];
  textView(_: NSTextView, shouldSelectCandidateAt: number): boolean;
  textViewDidChangeSelection(_: Notification): void;
  textViewDidChangeTypingAttributes(_: Notification): void;
  undoManager(for_: NSTextView): UndoManager;
}

export class NSTitlebarAccessoryViewController extends NSViewController {
  fullScreenMinHeight: number;
  setFullScreenMinHeight(_: number);
  isHidden: boolean;
  setHidden(_: boolean);
  layoutAttribute: NSLayoutConstraint.Attribute;
  setLayoutAttribute(_: NSLayoutConstraint.Attribute);
}

export class NSTokenField extends NSTextField {
  completionDelay: number;
  setCompletionDelay(_: number);
  delegate: any;
  setDelegate(_: any);
  tokenStyle: NSTokenFieldCell.NSTokenField.TokenStyle;
  setTokenStyle(_: NSTokenFieldCell.NSTokenField.TokenStyle);
  tokenizingCharacterSet: CharacterSet;
  setTokenizingCharacterSet(_: CharacterSet);
  static defaultCompletionDelay: number;
  static defaultTokenizingCharacterSet: CharacterSet;
}

export type TokenField = NSTokenField

export class NSTokenFieldCell extends NSTextFieldCell {
  completionDelay: number;
  setCompletionDelay(_: number);
  delegate: any;
  setDelegate(_: any);
  tokenStyle: NSTokenFieldCell.NSTokenField.TokenStyle;
  setTokenStyle(_: NSTokenFieldCell.NSTokenField.TokenStyle);
  tokenizingCharacterSet: CharacterSet;
  setTokenizingCharacterSet(_: CharacterSet);
  static defaultCompletionDelay: number;
  static defaultTokenizingCharacterSet: CharacterSet;
}

interface NSTokenFieldCellDelegate {
  tokenFieldCell(_: NSTokenFieldCell, completionsForSubstring: string, indexOfToken: number, indexOfSelectedItem: number): any[];
  tokenFieldCell(_: NSTokenFieldCell, shouldAdd: any[], at: number): any[];
  tokenFieldCell(_: NSTokenFieldCell, displayStringForRepresentedObject: any): string;
  tokenFieldCell(_: NSTokenFieldCell, editingStringForRepresentedObject: any): string;
  tokenFieldCell(_: NSTokenFieldCell, representedObjectForEditing: string): any;
  tokenFieldCell(_: NSTokenFieldCell, writeRepresentedObjects: any[], to: NSPasteboard): boolean;
  tokenFieldCell(_: NSTokenFieldCell, readFrom: NSPasteboard): any[];
  tokenFieldCell(_: NSTokenFieldCell, menuForRepresentedObject: any): NSMenu;
  tokenFieldCell(_: NSTokenFieldCell, hasMenuForRepresentedObject: any): boolean;
  tokenFieldCell(_: NSTokenFieldCell, styleForRepresentedObject: any): NSTokenFieldCell.NSTokenField.TokenStyle;
}

interface NSTokenFieldDelegate {
  tokenField(_: NSTokenField, completionsForSubstring: string, indexOfToken: number, indexOfSelectedItem?: number): any[];
  tokenField(_: NSTokenField, shouldAdd: any[], at: number): any[];
  tokenField(_: NSTokenField, displayStringForRepresentedObject: any): string;
  tokenField(_: NSTokenField, editingStringForRepresentedObject: any): string;
  tokenField(_: NSTokenField, representedObjectForEditing: string): any;
  tokenField(_: NSTokenField, writeRepresentedObjects: any[], to: NSPasteboard): boolean;
  tokenField(_: NSTokenField, readFrom: NSPasteboard): any[];
  tokenField(_: NSTokenField, menuForRepresentedObject: any): NSMenu;
  tokenField(_: NSTokenField, hasMenuForRepresentedObject: any): boolean;
  tokenField(_: NSTokenField, styleForRepresentedObject: any): NSTokenFieldCell.NSTokenField.TokenStyle;
}

export class NSToolbar extends NSObject {
  allowsExtensionItems: boolean;
  setAllowsExtensionItems(_: boolean);
  allowsUserCustomization: boolean;
  setAllowsUserCustomization(_: boolean);
  autosavesConfiguration: boolean;
  setAutosavesConfiguration(_: boolean);
  centeredItemIdentifier: string;
  setCenteredItemIdentifier(_: string);
  configurationDictionary: Map<string, any>;
  customizationPaletteIsRunning: boolean;
  delegate: any;
  setDelegate(_: any);
  displayMode: NSToolbar.DisplayMode;
  setDisplayMode(_: NSToolbar.DisplayMode);
  identifier: string;
  items: NSToolbarItem[];
  selectedItemIdentifier: string;
  setSelectedItemIdentifier(_: string);
  showsBaselineSeparator: boolean;
  setShowsBaselineSeparator(_: boolean);
  sizeMode: NSToolbar.SizeMode;
  setSizeMode(_: NSToolbar.SizeMode);
  isVisible: boolean;
  setVisible(_: boolean);
  visibleItems: NSToolbarItem[];
  static createWithIdentifier(_: string): NSToolbar;
  insertItem(withItemIdentifier: string, at: number): void;
  removeItem(at: number): void;
  runCustomizationPalette(_?: any): void;
  setConfiguration(_: Map<string, any>): void;
  validateVisibleItems(): void;
}

interface NSToolbarDelegate {
  toolbar(_: NSToolbar, itemForItemIdentifier: string, willBeInsertedIntoToolbar: boolean): NSToolbarItem;
  toolbarAllowedItemIdentifiers(_: NSToolbar): string[];
  toolbarDefaultItemIdentifiers(_: NSToolbar): string[];
  toolbarDidRemoveItem(_: Notification): void;
  toolbarSelectableItemIdentifiers(_: NSToolbar): string[];
  toolbarWillAddItem(_: Notification): void;
}

export class NSToolbarItem extends NSObject {
  action: string;
  setAction(_: string);
  allowsDuplicatesInToolbar: boolean;
  autovalidates: boolean;
  setAutovalidates(_: boolean);
  isBordered: boolean;
  setBordered(_: boolean);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  image: NSImage;
  setImage(_: NSImage);
  itemIdentifier: string;
  label: string;
  setLabel(_: string);
  maxSize: CGSize;
  setMaxSize(_: CGSize);
  menuFormRepresentation: NSMenuItem;
  setMenuFormRepresentation(_: NSMenuItem);
  minSize: CGSize;
  setMinSize(_: CGSize);
  paletteLabel: string;
  setPaletteLabel(_: string);
  tag: number;
  setTag(_: number);
  target: any;
  setTarget(_: any);
  title: string;
  setTitle(_: string);
  toolTip: string;
  setToolTip(_: string);
  toolbar: NSToolbar;
  visibilityPriority: number;
  setVisibilityPriority(_: number);
  static createWithItemIdentifier(_: string): NSToolbarItem;
  validate(): void;
}

export class NSToolbarItemGroup extends NSToolbarItem {
  controlRepresentation: NSToolbarItemGroup.ControlRepresentation;
  setControlRepresentation(_: NSToolbarItemGroup.ControlRepresentation);
  selectedIndex: number;
  setSelectedIndex(_: number);
  selectionMode: NSToolbarItemGroup.SelectionMode;
  setSelectionMode(_: NSToolbarItemGroup.SelectionMode);
  subitems: NSToolbarItem[];
  setSubitems(_: NSToolbarItem[]);
  isSelected(at: number): boolean;
  setSelected(_: boolean, at: number): void;
}

interface NSToolbarItemValidation {
  validateToolbarItem(_: NSToolbarItem): boolean;
}

export class NSTouch extends NSObject {
  device: any;
  deviceSize: CGSize;
  identity: any;
  normalizedPosition: CGPoint;
  phase: NSTouch.Phase;
  isResting: boolean;
  type: NSTouch.TouchType;
  location(in_?: NSView): CGPoint;
  previousLocation(in_?: NSView): CGPoint;
}

export class NSTouchBar extends NSObject {
  customizationAllowedItemIdentifiers: string[];
  setCustomizationAllowedItemIdentifiers(_: string[]);
  customizationIdentifier: string;
  setCustomizationIdentifier(_: string);
  customizationRequiredItemIdentifiers: string[];
  setCustomizationRequiredItemIdentifiers(_: string[]);
  defaultItemIdentifiers: string[];
  setDefaultItemIdentifiers(_: string[]);
  delegate: any;
  setDelegate(_: any);
  escapeKeyReplacementItemIdentifier: string;
  setEscapeKeyReplacementItemIdentifier(_: string);
  itemIdentifiers: string[];
  principalItemIdentifier: string;
  setPrincipalItemIdentifier(_: string);
  templateItems: Set<any>;
  setTemplateItems(_: Set<any>);
  isVisible: boolean;
  static isAutomaticCustomizeTouchBarMenuItemEnabled: boolean;
  setAutomaticCustomizeTouchBarMenuItemEnabled(_: boolean);
  item(forIdentifier: string): NSTouchBarItem;
}

interface NSTouchBarDelegate {
  touchBar(_: NSTouchBar, makeItemForIdentifier: string): NSTouchBarItem;
}

export class NSTouchBarItem extends NSObject {
  customizationLabel: string;
  identifier: string;
  viewController: NSViewController;
  visibilityPriority: number;
  setVisibilityPriority(_: number);
  isVisible: boolean;
  static createWithIdentifier(_: string): NSTouchBarItem;
}

interface NSTouchBarProvider {
  touchBar: NSTouchBar;
}

export class NSTrackingArea extends NSObject {
  options: NSTrackingArea.Options;
  owner: any;
  rect: CGRect;
  userInfo: Map<any, any>;
  static createWithRectWithOptionsWithOwnerWithUserInfo(_: CGRect, options: NSTrackingArea.Options, owner?: any, userInfo?: Map<any, any>): NSTrackingArea;
}

export class NSTreeController extends NSObjectController {
  alwaysUsesMultipleValuesMarker: boolean;
  setAlwaysUsesMultipleValuesMarker(_: boolean);
  arrangedObjects: NSTreeNode;
  avoidsEmptySelection: boolean;
  setAvoidsEmptySelection(_: boolean);
  canAddChild: boolean;
  canInsert: boolean;
  canInsertChild: boolean;
  childrenKeyPath: string;
  setChildrenKeyPath(_: string);
  countKeyPath: string;
  setCountKeyPath(_: string);
  leafKeyPath: string;
  setLeafKeyPath(_: string);
  preservesSelection: boolean;
  setPreservesSelection(_: boolean);
  selectedNodes: NSTreeNode[];
  selectionIndexPath: IndexPath;
  selectionIndexPaths: IndexPath[];
  selectsInsertedObjects: boolean;
  setSelectsInsertedObjects(_: boolean);
  sortDescriptors: NSSortDescriptor[];
  setSortDescriptors(_: NSSortDescriptor[]);
  addChild(_?: any): void;
  addSelectionIndexPaths(_: IndexPath[]): boolean;
  // dupe name w instance property   childrenKeyPath(for_: NSTreeNode): string;
  // dupe name w instance property   countKeyPath(for_: NSTreeNode): string;
  insert(_?: any): void;
  insertChild(_?: any): void;
  insert(_?: any, atArrangedObjectIndexPath?: IndexPath): void;
  insert(_: any[], atArrangedObjectIndexPaths: IndexPath[]): void;
  // dupe name w instance property   leafKeyPath(for_: NSTreeNode): string;
  move(_: NSTreeNode, to: IndexPath): void;
  move(_: NSTreeNode[], to: IndexPath): void;
  rearrangeObjects(): void;
  // @ts-ignore 
  removeObject(atArrangedObjectIndexPath: IndexPath): void;
  removeObjects(atArrangedObjectIndexPaths: IndexPath[]): void;
  removeSelectionIndexPaths(_: IndexPath[]): boolean;
  setSelectionIndexPath(_?: IndexPath): boolean;
  setSelectionIndexPaths(_: IndexPath[]): boolean;
}

export class NSTreeNode extends NSObject {
  childNodes: NSTreeNode[];
  indexPath: IndexPath;
  isLeaf: boolean;
  mutableChildNodes: NSTreeNode[];
  parentNode: NSTreeNode;
  representedObject: any;
  descendant(at: IndexPath): NSTreeNode;
  static createWithRepresentedObject(_?: any): NSTreeNode;
  sort(with_: NSSortDescriptor[], recursively: boolean): void;
}

export class NSTypesetter extends NSObject {
  static printingAdjustment(in_: NSLayoutManager, forNominallySpacedGlyphRange: NSRange, packedGlyphs: string, count: number): CGSize;
  //  static sharedSystemTypesetter(for_: NSLayoutManager.TypesetterBehavior): any;
  attributedString: NSAttributedString;
  setAttributedString(_: NSAttributedString);
  attributesForExtraLineFragment: Map<string, any>;
  bidiProcessingEnabled: boolean;
  setBidiProcessingEnabled(_: boolean);
  currentParagraphStyle: NSParagraphStyle;
  currentTextContainer: NSTextContainer;
  hyphenationFactor: number;
  setHyphenationFactor(_: number);
  layoutManager: NSLayoutManager;
  lineFragmentPadding: number;
  setLineFragmentPadding(_: number);
  paragraphCharacterRange: NSRange;
  paragraphGlyphRange: NSRange;
  paragraphSeparatorCharacterRange: NSRange;
  paragraphSeparatorGlyphRange: NSRange;
  textContainers: NSTextContainer[];
  typesetterBehavior: NSLayoutManager.TypesetterBehavior;
  setTypesetterBehavior(_: NSLayoutManager.TypesetterBehavior);
  usesFontLeading: boolean;
  setUsesFontLeading(_: boolean);
  static defaultTypesetterBehavior: NSLayoutManager.TypesetterBehavior;
  static sharedSystemTypesetter: NSTypesetter;
  actionForControlCharacter(at: number): NSTypesetter.NSTypesetterControlCharacterAction;
  baselineOffset(in_: NSLayoutManager, glyphIndex: number): number;
  beginLine(withGlyphAt: number): void;
  beginParagraph(): void;
  boundingBox(forControlGlyphAt: number, for_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
  characterRange(forGlyphRange: NSRange, actualGlyphRange?: NSRange): NSRange;
  endLine(withGlyphRange: NSRange): void;
  endParagraph(): void;
  getLineFragmentRect(_: CGRect, usedRect: CGRect, forParagraphSeparatorGlyphRange: NSRange, atProposedOrigin: CGPoint): void;
  getLineFragmentRect(_: CGRect, usedRect: CGRect, remaining: CGRect, forStartingGlyphAt: number, proposedRect: CGRect, lineSpacing: number, paragraphSpacingBefore: number, paragraphSpacingAfter: number): void;
  glyphRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): NSRange;
  hyphenCharacter(forGlyphAt: number): number;
  // dupe name w instance property   hyphenationFactor(forGlyphAt: number): number;
  layoutCharacters(in_: NSRange, for_: NSLayoutManager, maximumNumberOfLineFragments: number): NSRange;
  layoutGlyphs(in_: NSLayoutManager, startingAtGlyphIndex: number, maxNumberOfLineFragments: number, nextGlyphIndex: number): void;
  layoutParagraph(at: CGPoint): number;
  lineSpacing(afterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
  paragraphSpacing(afterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
  paragraphSpacing(beforeGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
  setAttachmentSize(_: CGSize, forGlyphRange: NSRange): void;
  setBidiLevels(_: string, forGlyphRange: NSRange): void;
  setDrawsOutsideLineFragment(_: boolean, forGlyphRange: NSRange): void;
  setHardInvalidation(_: boolean, forGlyphRange: NSRange): void;
  setLineFragmentRect(_: CGRect, forGlyphRange: NSRange, usedRect: CGRect, baselineOffset: number): void;
  setLocation(_: CGPoint, withAdvancements: number, forStartOfGlyphRange: NSRange): void;
  setNotShownAttribute(_: boolean, forGlyphRange: NSRange): void;
  setParagraphGlyphRange(_: NSRange, separatorGlyphRange: NSRange): void;
  shouldBreakLine(byHyphenatingBeforeCharacterAt: number): boolean;
  shouldBreakLine(byWordBeforeCharacterAt: number): boolean;
  substituteFont(for_: NSFont): NSFont;
  textTab(forGlyphLocation: number, writingDirection: NSText.NSWritingDirection, maxLocation: number): NSTextTab;
  willSetLineFragmentRect(_: CGRect, forGlyphRange: NSRange, usedRect: CGRect, baselineOffset: number): void;
}

// export function NSUnregisterServicesProvider(name: string): void;

// export function NSUpdateDynamicServices(): void;

interface NSUserActivityRestoring {
  restoreUserActivityState(_: NSUserActivity): void;
}

export class NSUserDefaultsController extends NSController {
  appliesImmediately: boolean;
  setAppliesImmediately(_: boolean);
  defaults: UserDefaults;
  hasUnappliedChanges: boolean;
  initialValues: Map<string, any>;
  setInitialValues(_: Map<string, any>);
  values: any;
  static sharedUserDefaultsController: NSUserDefaultsController;
  static createWithDefaultsWithInitialValues(_?: UserDefaults, initialValues?: Map<string, any>): NSUserDefaultsController;
  revert(_?: any): void;
  revertToInitialValues(_?: any): void;
  save(_?: any): void;
}

interface NSUserInterfaceCompression {
  activeCompressionOptions: NSUserInterfaceCompressionOptions;
  compress(withPrioritizedCompressionOptions: NSUserInterfaceCompressionOptions[]): void;
  minimumSize(withPrioritizedCompressionOptions: NSUserInterfaceCompressionOptions[]): CGSize;
}

export class NSUserInterfaceCompressionOptions extends NSObject {
  isEmpty: boolean;
  static breakEqualWidthsOption: NSUserInterfaceCompressionOptions;
  static hideImagesOption: NSUserInterfaceCompressionOptions;
  static hideTextOption: NSUserInterfaceCompressionOptions;
  static reduceMetricsOption: NSUserInterfaceCompressionOptions;
  static standardOptions: NSUserInterfaceCompressionOptions;
  contains(_: NSUserInterfaceCompressionOptions): boolean;
  static createWithIdentifier(_: string): NSUserInterfaceCompressionOptions;
  intersects(_: NSUserInterfaceCompressionOptions): boolean;
  union(_: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
  subtracting(_: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
}

interface NSUserInterfaceItemIdentification {
  identifier: string;
  setIdentifier(_: string);
}

interface NSUserInterfaceItemSearching {
  localizedTitles(forItem: any): string[];
  performAction(forItem: any): void;
  searchForItems(withSearch: string, resultLimit: number, matchedItemHandler: (p1: any[]) => void): void;
  showAllHelpTopics(forSearch: string): void;
}

interface NSUserInterfaceValidations {
  validateUserInterfaceItem(_: any): boolean;
}

interface NSValidatedUserInterfaceItem {
  action: string;
  tag: number;
}

export class NSView extends NSResponder implements NSUserInterfaceItemIdentification {
  alignmentRectInsets: NSEdgeInsets;
  allowedTouchTypes: NSTouch.TouchTypeMask;
  setAllowedTouchTypes(_: NSTouch.TouchTypeMask);
  allowsVibrancy: boolean;
  alphaValue: number;
  setAlphaValue(_: number);
  autoresizesSubviews: boolean;
  setAutoresizesSubviews(_: boolean);
  autoresizingMask: NSView.AutoresizingMask;
  setAutoresizingMask(_: NSView.AutoresizingMask);
  backgroundFilters: CIFilter[];
  setBackgroundFilters(_: CIFilter[]);
  baselineOffsetFromBottom: number;
  bottomAnchor: NSLayoutYAxisAnchor;
  bounds: CGRect;
  setBounds(_: CGRect);
  boundsRotation: number;
  setBoundsRotation(_: number);
  canBecomeKeyView: boolean;
  canDrawConcurrently: boolean;
  setCanDrawConcurrently(_: boolean);
  canDrawSubviewsIntoLayer: boolean;
  setCanDrawSubviewsIntoLayer(_: boolean);
  candidateListTouchBarItem: NSCandidateListTouchBarItem<any>;
  centerXAnchor: NSLayoutXAxisAnchor;
  centerYAnchor: NSLayoutYAxisAnchor;
  compositingFilter: CIFilter;
  setCompositingFilter(_: CIFilter);
  constraints: NSLayoutConstraint[];
  contentFilters: CIFilter[];
  setContentFilters(_: CIFilter[]);
  isDrawingFindIndicator: boolean;
  enclosingMenuItem: NSMenuItem;
  enclosingScrollView: NSScrollView;
  firstBaselineAnchor: NSLayoutYAxisAnchor;
  firstBaselineOffsetFromTop: number;
  fittingSize: CGSize;
  isFlipped: boolean;
  focusRingMaskBounds: CGRect;
  focusRingType: NSGraphics.NSFocusRingType;
  setFocusRingType(_: NSGraphics.NSFocusRingType);
  frame: CGRect;
  setFrame(_: CGRect);
  frameCenterRotation: number;
  setFrameCenterRotation(_: number);
  frameRotation: number;
  setFrameRotation(_: number);
  gestureRecognizers: NSGestureRecognizer[];
  setGestureRecognizers(_: NSGestureRecognizer[]);
  hasAmbiguousLayout: boolean;
  heightAdjustLimit: number;
  heightAnchor: NSLayoutDimension;
  isHidden: boolean;
  setHidden(_: boolean);
  isHiddenOrHasHiddenAncestor: boolean;
  isHorizontalContentSizeConstraintActive: boolean;
  setHorizontalContentSizeConstraintActive(_: boolean);
  isInFullScreenMode: boolean;
  inLiveResize: boolean;
  inputContext: NSTextInputContext;
  intrinsicContentSize: CGSize;
  lastBaselineAnchor: NSLayoutYAxisAnchor;
  lastBaselineOffsetFromBottom: number;
  layerContentsPlacement: NSView.LayerContentsPlacement;
  setLayerContentsPlacement(_: NSView.LayerContentsPlacement);
  layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy;
  setLayerContentsRedrawPolicy(_: NSView.LayerContentsRedrawPolicy);
  layerUsesCoreImageFilters: boolean;
  setLayerUsesCoreImageFilters(_: boolean);
  layoutGuides: NSLayoutGuide[];
  leadingAnchor: NSLayoutXAxisAnchor;
  leftAnchor: NSLayoutXAxisAnchor;
  mouseDownCanMoveWindow: boolean;
  needsDisplay: boolean;
  setNeedsDisplay(_: boolean);
  needsLayout: boolean;
  setNeedsLayout(_: boolean);
  needsPanelToBecomeKey: boolean;
  needsUpdateConstraints: boolean;
  setNeedsUpdateConstraints(_: boolean);
  nextKeyView: NSView;
  setNextKeyView(_: NSView);
  nextValidKeyView: NSView;
  isOpaque: boolean;
  opaqueAncestor: NSView;
  pageFooter: NSAttributedString;
  pageHeader: NSAttributedString;
  postsBoundsChangedNotifications: boolean;
  setPostsBoundsChangedNotifications(_: boolean);
  postsFrameChangedNotifications: boolean;
  setPostsFrameChangedNotifications(_: boolean);
  preparedContentRect: CGRect;
  setPreparedContentRect(_: CGRect);
  preservesContentDuringLiveResize: boolean;
  pressureConfiguration: NSPressureConfiguration;
  setPressureConfiguration(_: NSPressureConfiguration);
  previousKeyView: NSView;
  previousValidKeyView: NSView;
  printJobTitle: string;
  rectPreservedDuringLiveResize: CGRect;
  registeredDraggedTypes: string[];
  rightAnchor: NSLayoutXAxisAnchor;
  isRotatedFromBase: boolean;
  isRotatedOrScaledFromBase: boolean;
  shadow: NSShadow;
  setShadow(_: NSShadow);
  subviews: NSView[];
  setSubviews(_: NSView[]);
  superview: NSView;
  tag: number;
  toolTip: string;
  setToolTip(_: string);
  topAnchor: NSLayoutYAxisAnchor;
  trackingAreas: NSTrackingArea[];
  trailingAnchor: NSLayoutXAxisAnchor;
  translatesAutoresizingMaskIntoConstraints: boolean;
  setTranslatesAutoresizingMaskIntoConstraints(_: boolean);
  userInterfaceLayoutDirection: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(_: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection);
  isVerticalContentSizeConstraintActive: boolean;
  setVerticalContentSizeConstraintActive(_: boolean);
  visibleRect: CGRect;
  wantsDefaultClipping: boolean;
  wantsLayer: boolean;
  setWantsLayer(_: boolean);
  wantsRestingTouches: boolean;
  setWantsRestingTouches(_: boolean);
  wantsUpdateLayer: boolean;
  widthAdjustLimit: number;
  widthAnchor: NSLayoutDimension;
  window: NSWindow;
  static isCompatibleWithResponsiveScrolling: boolean;
  static defaultFocusRingType: NSGraphics.NSFocusRingType;
  static defaultMenu: NSMenu;
  static focusView: NSView;
  static requiresConstraintBasedLayout: boolean;
  identifier: string;
  setIdentifier(_: string);
  acceptsFirstMouse(for_?: NSEvent): boolean;
  addConstraint(_: NSLayoutConstraint): void;
  addConstraints(_: NSLayoutConstraint[]): void;
  addCursorRectCursor(_: CGRect, cursor: NSCursor): void;
  addGestureRecognizer(_: NSGestureRecognizer): void;
  addLayoutGuide(_: NSLayoutGuide): void;
  addSubview(_: NSView): void;
  addSubviewPositionedWithRelativeTo(_: NSView, positioned: NSGraphics.NSWindow.OrderingMode, relativeTo?: NSView): void;
  addToolTipRectWithOwnerWithUserData(_: CGRect, owner: any, userData?: any): number;
  addTrackingArea(_: NSTrackingArea): void;
  addTrackingRectOwnerWithUserDataWithAssumeInside(_: CGRect, owner: any, userData?: any, assumeInside?: boolean): number;
  adjustPageHeightNewTopWithBottomWithLimit(_: number, top: number, bottom: number, limit: number): void;
  adjustPageWidthNewLeftWithRightWithLimit(_: number, left: number, right: number, limit: number): void;
  adjustScroll(_: CGRect): CGRect;
  alignmentRectForFrame(forFrame: CGRect): CGRect;
  ancestorSharedWithView(with_: NSView): NSView;
  autoscroll(with_: NSEvent): boolean;
  backingAlignedRectOptions(_: CGRect, options: NSGeometry.AlignmentOptions): CGRect;
  beginDocument(): void;
  beginDraggingSessionWithItemsWithEventWithSource(with_: NSDraggingItem[], event: NSEvent, source: any): NSDraggingSession;
  beginPageInRectWithAtPlacement(in_: CGRect, atPlacement: CGPoint): void;
  bitmapImageRepForCachingDisplayInRect(in_: CGRect): NSBitmapImageRep;
  cacheDisplayInRectWithToBitmapImageRep(in_: CGRect, to: NSBitmapImageRep): void;
  centerScanRect(_: CGRect): CGRect;
  constraintsAffectingLayoutForOrientation(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint[];
  contentCompressionResistancePriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
  contentHuggingPriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
  convertPointWithFromView(_: CGPoint, from?: NSView): CGPoint;
  convertPointWithToView(_: CGPoint, to?: NSView): CGPoint;
  convertPointFromBacking(_: CGPoint): CGPoint;
  convertPointFromLayer(_: CGPoint): CGPoint;
  convertPointToBacking(_: CGPoint): CGPoint;
  convertPointToLayer(_: CGPoint): CGPoint;
  convertRectWithFromView(_: CGRect, from?: NSView): CGRect;
  convertRectWithToView(_: CGRect, to?: NSView): CGRect;
  convertRectFromBacking(_: CGRect): CGRect;
  convertRectFromLayer(_: CGRect): CGRect;
  convertRectToBacking(_: CGRect): CGRect;
  convertRectToLayer(_: CGRect): CGRect;
  convertSizeWithFromView(_: CGSize, from?: NSView): CGSize;
  convertSizeWithToView(_: CGSize, to?: NSView): CGSize;
  convertSizeFromBacking(_: CGSize): CGSize;
  convertSizeFromLayer(_: CGSize): CGSize;
  convertSizeToBacking(_: CGSize): CGSize;
  convertSizeToLayer(_: CGSize): CGSize;
  dataWithEPSInsideRect(inside: CGRect): Data;
  dataWithPDFInsideRect(inside: CGRect): Data;
  didAddSubview(_: NSView): void;
  didCloseMenuWithEvent(_: NSMenu, with_?: NSEvent): void;
  discardCursorRects(): void;
  display(): void;
  displayIfNeeded(): void;
  displayIfNeededIgnoringOpacity(): void;
  displayIfNeededInRect(_: CGRect): void;
  displayIfNeededInRectIgnoringOpacity(_: CGRect): void;
  displayRect(_: CGRect): void;
  displayRectIgnoringOpacity(_: CGRect): void;
  displayRectIgnoringOpacityWithInContext(_: CGRect, in_: NSGraphicsContext): void;
  drawFocusRingMask(): void;
  drawPageBorderWithSize(with_: CGSize): void;
  drawRect(_: CGRect): void;
  endDocument(): void;
  endPage(): void;
  enterFullScreenModeWithOptions(_: NSScreen, withOptions?: Map<string, any>): boolean;
  exerciseAmbiguityInLayout(): void;
  exitFullScreenModeWithOptions(options?: Map<string, any>): void;
  // dupe name w instance property   frameForAlignmentRect(forAlignmentRect: CGRect): CGRect;
  getRectsBeingDrawnCount(_?: CGRect, count?: number): void;
  getRectsExposedDuringLiveResizeCount(_: CGRect, count: number): void;
  hitTest(_: CGPoint): NSView;
  static createWithFrame(_: CGRect): NSView;
  invalidateIntrinsicContentSize(): void;
  isDescendantOf(of: NSView): boolean;
  knowsPageRange(_: NSRange): boolean;
  layout(): void;
  layoutSubtreeIfNeeded(): void;
  locationOfPrintRect(_: CGRect): CGPoint;
  makeBackingLayer(): CALayer;
  // @ts-ignore 
  menuForEvent(for_: NSEvent): NSMenu;
  mouseWithInRect(_: CGPoint, in_: CGRect): boolean;
  needsToDrawRect(_: CGRect): boolean;
  noteFocusRingMaskChanged(): void;
  prepareContentInRect(in_: CGRect): void;
  prepareForReuse(): void;
  print(_?: any): void;
  rectForPage(_: number): CGRect;
  rectForSmartMagnificationAtPointWithInRect(at: CGPoint, in_: CGRect): CGRect;
  reflectScrolledClipView(_: NSClipView): void;
  registerForDraggedTypes(_: string[]): void;
  removeAllToolTips(): void;
  removeConstraint(_: NSLayoutConstraint): void;
  removeConstraints(_: NSLayoutConstraint[]): void;
  removeCursorRectCursor(_: CGRect, cursor: NSCursor): void;
  removeFromSuperview(): void;
  removeFromSuperviewWithoutNeedingDisplay(): void;
  removeGestureRecognizer(_: NSGestureRecognizer): void;
  removeLayoutGuide(_: NSLayoutGuide): void;
  removeToolTip(_: number): void;
  removeTrackingArea(_: NSTrackingArea): void;
  removeTrackingRect(_: number): void;
  replaceSubviewWith(_: NSView, with_: NSView): void;
  resetCursorRects(): void;
  resizeSubviewsWithOldSize(withOldSize: CGSize): void;
  resizeWithOldSuperviewSize(withOldSuperviewSize: CGSize): void;
  // @ts-ignore 
  rotateByAngle(byDegrees: number): void;
  rulerViewDidAddMarker(_: NSRulerView, didAdd: NSRulerMarker): void;
  rulerViewDidMoveMarker(_: NSRulerView, didMove: NSRulerMarker): void;
  rulerViewDidRemoveMarker(_: NSRulerView, didRemove: NSRulerMarker): void;
  rulerViewHandleMouseDown(_: NSRulerView, handleMouseDownWith: NSEvent): void;
  rulerViewLocationForPoint(_: NSRulerView, locationFor: CGPoint): number;
  rulerViewPointForLocation(_: NSRulerView, pointForLocation: number): CGPoint;
  rulerViewShouldAddMarker(_: NSRulerView, shouldAdd: NSRulerMarker): boolean;
  rulerViewShouldMoveMarker(_: NSRulerView, shouldMove: NSRulerMarker): boolean;
  rulerViewShouldRemoveMarker(_: NSRulerView, shouldRemove: NSRulerMarker): boolean;
  rulerViewWillAddMarkerWithAtLocation(_: NSRulerView, willAdd: NSRulerMarker, atLocation: number): number;
  rulerViewWillMoveMarkerWithToLocation(_: NSRulerView, willMove: NSRulerMarker, toLocation: number): number;
  rulerViewWillSetClientView(_: NSRulerView, willSetClientView: NSView): void;
  scaleUnitSquareToSize(to: CGSize): void;
  scrollClipViewWithToPoint(_: NSClipView, to: CGPoint): void;
  scrollPoint(_: CGPoint): void;
  scrollRectToVisible(_: CGRect): boolean;
  setBoundsOrigin(_: CGPoint): void;
  setBoundsSize(_: CGSize): void;
  setContentCompressionResistancePriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
  setContentHuggingPriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
  setFrameOrigin(_: CGPoint): void;
  setFrameSize(_: CGSize): void;
  setKeyboardFocusRingNeedsDisplayInRect(_: CGRect): void;
  setNeedsDisplayInRect(_: CGRect): void;
  shouldDelayWindowOrderingForEvent(for_: NSEvent): boolean;
  showDefinitionForAttributedStringWithAtPoint(for_?: NSAttributedString, at?: CGPoint): void;
  showDefinitionForAttributedStringWithRangeWithOptionsWithBaselineOriginProvider(for_?: NSAttributedString, range?: NSRange, options?: Map<string, any>, baselineOriginProvider?: (p1: NSRange) => CGPoint): void;
  sortSubviewsUsingFunctionWithContext(_?: (p1: NSView, p2: NSView, p3: any) => NSObjCRuntime.ComparisonResult, context?: any): void;
  translateOriginToPoint(to: CGPoint): void;
  translateRectsNeedingDisplayInRectWithBy(in_: CGRect, by: CGSize): void;
  unregisterDraggedTypes(): void;
  updateConstraints(): void;
  updateConstraintsForSubtreeIfNeeded(): void;
  updateLayer(): void;
  updateTrackingAreas(): void;
  viewDidChangeBackingProperties(): void;
  viewDidChangeEffectiveAppearance(): void;
  viewDidEndLiveResize(): void;
  viewDidHide(): void;
  viewDidMoveToSuperview(): void;
  viewDidMoveToWindow(): void;
  viewDidUnhide(): void;
  viewWillDraw(): void;
  viewWillMoveToSuperview(toSuperview?: NSView): void;
  viewWillMoveToWindow(toWindow?: NSWindow): void;
  viewWillStartLiveResize(): void;
  viewWithTag(_: number): NSView;
  willOpenMenuWithEvent(_: NSMenu, with_: NSEvent): void;
  willRemoveSubview(_: NSView): void;
  writeEPSInsideRectWithToPasteboard(inside: CGRect, to: NSPasteboard): void;
  writePDFInsideRectWithToPasteboard(inside: CGRect, to: NSPasteboard): void;
}

export class NSViewAnimation extends NSAnimation {
  viewAnimations: Map<string, any>[];
  setViewAnimations(_: Map<string, any>[]);
  static createWithViewAnimations(_: Map<string, any>[]): NSViewAnimation;
}

export class NSViewController extends NSResponder implements NSUserInterfaceItemIdentification {
  childViewControllers: NSViewController[];
  setChildViewControllers(_: NSViewController[]);
  extensionContext: NSExtensionContext;
  nibBundle: Bundle;
  nibName: string;
  parentViewController: NSViewController;
  preferredContentSize: CGSize;
  setPreferredContentSize(_: CGSize);
  preferredMaximumSize: CGSize;
  preferredMinimumSize: CGSize;
  preferredScreenOrigin: CGPoint;
  setPreferredScreenOrigin(_: CGPoint);
  presentedViewControllers: NSViewController[];
  presentingViewController: NSViewController;
  representedObject: any;
  setRepresentedObject(_: any);
  sourceItemView: NSView;
  setSourceItemView(_: NSView);
  storyboard: NSStoryboard;
  title: string;
  setTitle(_: string);
  isViewLoaded: boolean;
  identifier: string;
  setIdentifier(_: string);
  addChild(_: NSViewController): void;
  dismiss(_?: any): void;
  dismiss(_: NSViewController): void;
  static createWithNibNameWithBundle(_?: string, bundle?: Bundle): NSViewController;
  insertChild(_: NSViewController, at: number): void;
  loadView(): void;
  preferredContentSizeDidChange(for_: NSViewController): void;
  present(_: NSViewController, animator: any): void;
  present(_: NSViewController, asPopoverRelativeTo: CGRect, of: NSView, preferredEdge: NSGeometry.NSRectEdge, behavior: NSPopover.Behavior): void;
  presentAsModalWindow(_: NSViewController): void;
  presentAsSheet(_: NSViewController): void;
  removeChild(at: number): void;
  removeFromParent(): void;
  transition(from: NSViewController, to: NSViewController, options: NSViewController.TransitionOptions, completionHandler?: () => void): void;
  updateViewConstraints(): void;
  viewDidAppear(): void;
  viewDidDisappear(): void;
  viewDidLayout(): void;
  viewDidLoad(): void;
  viewWillAppear(): void;
  viewWillDisappear(): void;
  viewWillLayout(): void;
  viewWillTransition(to: CGSize): void;
}

interface NSViewControllerPresentationAnimator {
  animateDismissal(of: NSViewController, from: NSViewController): void;
  animatePresentation(of: NSViewController, from: NSViewController): void;
}

interface NSViewLayerContentScaleDelegate {
  layer(_: CALayer, shouldInheritContentsScale: number, from: NSWindow): boolean;
}

interface NSViewToolTipOwner {
  view(_: NSView, stringForToolTip: number, point: CGPoint, userData?: any): string;
}

export class NSVisualEffectView extends NSView {
  blendingMode: NSVisualEffectView.BlendingMode;
  setBlendingMode(_: NSVisualEffectView.BlendingMode);
  isEmphasized: boolean;
  setEmphasized(_: boolean);
  interiorBackgroundStyle: NSCell.NSView.BackgroundStyle;
  maskImage: NSImage;
  setMaskImage(_: NSImage);
  material: NSVisualEffectView.Material;
  setMaterial(_: NSVisualEffectView.Material);
  state: NSVisualEffectView.State;
  setState(_: NSVisualEffectView.State);
}

export type VisualEffectView = NSVisualEffectView

export class NSWindow extends NSResponder implements NSUserInterfaceItemIdentification {
  static contentRect(forFrameRect: CGRect, styleMask: NSWindow.StyleMask): CGRect;
  static frameRect(forContentRect: CGRect, styleMask: NSWindow.StyleMask): CGRect;
  static minFrameWidth(withTitle: string, styleMask: NSWindow.StyleMask): number;
  static removeFrame(usingName: string): void;
  static standardWindowButton(_: NSWindow.ButtonType, for_: NSWindow.StyleMask): NSButton;
  //  static windowNumber(at: CGPoint, belowWindowWithWindowNumber: number): number;
  static windowNumbers(options: NSWindow.NumberListOptions): number[];
  acceptsMouseMovedEvents: boolean;
  setAcceptsMouseMovedEvents(_: boolean);
  allowsConcurrentViewDrawing: boolean;
  setAllowsConcurrentViewDrawing(_: boolean);
  allowsToolTipsWhenApplicationIsInactive: boolean;
  setAllowsToolTipsWhenApplicationIsInactive(_: boolean);
  alphaValue: number;
  setAlphaValue(_: number);
  animationBehavior: NSWindow.AnimationBehavior;
  setAnimationBehavior(_: NSWindow.AnimationBehavior);
  appearanceSource: NSObject;
  setAppearanceSource(_: NSObject);
  areCursorRectsEnabled: boolean;
  aspectRatio: CGSize;
  setAspectRatio(_: CGSize);
  attachedSheet: NSWindow;
  autorecalculatesKeyViewLoop: boolean;
  setAutorecalculatesKeyViewLoop(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  backingScaleFactor: number;
  backingType: NSGraphics.NSWindow.BackingStoreType;
  setBackingType(_: NSGraphics.NSWindow.BackingStoreType);
  canBecomeKeyWindow: boolean;
  canBecomeMainWindow: boolean;
  canBecomeVisibleWithoutLogin: boolean;
  setCanBecomeVisibleWithoutLogin(_: boolean);
  canHide: boolean;
  setCanHide(_: boolean);
  childWindows: NSWindow[];
  collectionBehavior: NSWindow.CollectionBehavior;
  setCollectionBehavior(_: NSWindow.CollectionBehavior);
  colorSpace: NSColorSpace;
  setColorSpace(_: NSColorSpace);
  contentAspectRatio: CGSize;
  setContentAspectRatio(_: CGSize);
  contentLayoutGuide: any;
  contentLayoutRect: CGRect;
  contentMaxSize: CGSize;
  setContentMaxSize(_: CGSize);
  contentMinSize: CGSize;
  setContentMinSize(_: CGSize);
  contentResizeIncrements: CGSize;
  setContentResizeIncrements(_: CGSize);
  contentView: NSView;
  setContentView(_: NSView);
  contentViewController: NSViewController;
  setContentViewController(_: NSViewController);
  currentEvent: NSEvent;
  deepestScreen: NSScreen;
  defaultButtonCell: NSButtonCell;
  setDefaultButtonCell(_: NSButtonCell);
  delegate: any;
  setDelegate(_: any);
  depthLimit: NSGraphics.NSWindow.Depth;
  setDepthLimit(_: NSGraphics.NSWindow.Depth);
  deviceDescription: Map<string, any>;
  displaysWhenScreenProfileChanges: boolean;
  setDisplaysWhenScreenProfileChanges(_: boolean);
  dockTile: NSDockTile;
  isDocumentEdited: boolean;
  setDocumentEdited(_: boolean);
  isExcludedFromWindowsMenu: boolean;
  setExcludedFromWindowsMenu(_: boolean);
  firstResponder: NSResponder;
  isFloatingPanel: boolean;
  frame: CGRect;
  frameAutosaveName: string;
  hasCloseBox: boolean;
  hasDynamicDepthLimit: boolean;
  hasShadow: boolean;
  setHasShadow(_: boolean);
  hasTitleBar: boolean;
  hidesOnDeactivate: boolean;
  setHidesOnDeactivate(_: boolean);
  ignoresMouseEvents: boolean;
  setIgnoresMouseEvents(_: boolean);
  inLiveResize: boolean;
  initialFirstResponder: NSView;
  setInitialFirstResponder(_: NSView);
  keyViewSelectionDirection: NSWindow.SelectionDirection;
  isKeyWindow: boolean;
  level: number;
  setLevel(_: number);
  isMainWindow: boolean;
  maxFullScreenContentSize: CGSize;
  setMaxFullScreenContentSize(_: CGSize);
  maxSize: CGSize;
  setMaxSize(_: CGSize);
  minFullScreenContentSize: CGSize;
  setMinFullScreenContentSize(_: CGSize);
  minSize: CGSize;
  setMinSize(_: CGSize);
  isMiniaturizable: boolean;
  isMiniaturized: boolean;
  miniwindowImage: NSImage;
  setMiniwindowImage(_: NSImage);
  miniwindowTitle: string;
  setMiniwindowTitle(_: string);
  isModalPanel: boolean;
  mouseLocationOutsideOfEventStream: CGPoint;
  isMovable: boolean;
  setMovable(_: boolean);
  isMovableByWindowBackground: boolean;
  setMovableByWindowBackground(_: boolean);
  occlusionState: NSWindow.OcclusionState;
  isOnActiveSpace: boolean;
  isOpaque: boolean;
  setOpaque(_: boolean);
  orderedIndex: number;
  setOrderedIndex(_: number);
  parentWindow: NSWindow;
  setParentWindow(_: NSWindow);
  preservesContentDuringLiveResize: boolean;
  setPreservesContentDuringLiveResize(_: boolean);
  preventsApplicationTerminationWhenModal: boolean;
  setPreventsApplicationTerminationWhenModal(_: boolean);
  isReleasedWhenClosed: boolean;
  setReleasedWhenClosed(_: boolean);
  representedFilename: string;
  setRepresentedFilename(_: string);
  representedURL: URL;
  setRepresentedURL(_: URL);
  isResizable: boolean;
  resizeFlags: NSEvent.ModifierFlags;
  resizeIncrements: CGSize;
  setResizeIncrements(_: CGSize);
  isRestorable: boolean;
  setRestorable(_: boolean);
  restorationClass: typeof NSObject;
  setRestorationClass(_: typeof NSObject);
  screen: NSScreen;
  sharingType: NSWindow.SharingType;
  setSharingType(_: NSWindow.SharingType);
  isSheet: boolean;
  sheetParent: NSWindow;
  sheets: NSWindow[];
  showsResizeIndicator: boolean;
  setShowsResizeIndicator(_: boolean);
  showsToolbarButton: boolean;
  setShowsToolbarButton(_: boolean);
  stringWithSavedFrame: string;
  styleMask: NSWindow.StyleMask;
  setStyleMask(_: NSWindow.StyleMask);
  tab: NSWindowTab;
  tabGroup: NSWindowTabGroup;
  tabbedWindows: NSWindow[];
  tabbingIdentifier: string;
  setTabbingIdentifier(_: string);
  tabbingMode: NSWindow.TabbingMode;
  setTabbingMode(_: NSWindow.TabbingMode);
  title: string;
  setTitle(_: string);
  titleVisibility: NSWindow.TitleVisibility;
  setTitleVisibility(_: NSWindow.TitleVisibility);
  titlebarAccessoryViewControllers: NSTitlebarAccessoryViewController[];
  setTitlebarAccessoryViewControllers(_: NSTitlebarAccessoryViewController[]);
  titlebarAppearsTransparent: boolean;
  setTitlebarAppearsTransparent(_: boolean);
  toolbar: NSToolbar;
  setToolbar(_: NSToolbar);
  viewsNeedDisplay: boolean;
  setViewsNeedDisplay(_: boolean);
  isVisible: boolean;
  windowController: NSWindowController;
  setWindowController(_: NSWindowController);
  windowNumber: number;
  windowRef: any;
  windowTitlebarLayoutDirection: NSUserInterfaceLayout.NSUserInterfaceLayoutDirection;
  worksWhenModal: boolean;
  isZoomable: boolean;
  isZoomed: boolean;
  static allowsAutomaticWindowTabbing: boolean;
  setAllowsAutomaticWindowTabbing(_: boolean);
  static defaultDepthLimit: NSGraphics.NSWindow.Depth;
  static userTabbingPreference: NSWindow.UserTabbingPreference;
  identifier: string;
  setIdentifier(_: string);
  addChildWindow(_: NSWindow, ordered: NSGraphics.NSWindow.OrderingMode): void;
  addTabbedWindow(_: NSWindow, ordered: NSGraphics.NSWindow.OrderingMode): void;
  addTitlebarAccessoryViewController(_: NSTitlebarAccessoryViewController): void;
  anchorAttribute(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint.Attribute;
  animationResizeTime(_: CGRect): number;
  autorecalculatesContentBorderThickness(for_: NSGeometry.NSRectEdge): boolean;
  backingAlignedRect(_: CGRect, options: NSGeometry.AlignmentOptions): CGRect;
  becomeKey(): void;
  becomeMain(): void;
  beginCriticalSheet(_: NSWindow, completionHandler?: (p1: number) => void): void;
  beginSheet(_: NSWindow, completionHandler?: (p1: number) => void): void;
  canRepresent(_: NSGraphics.NSDisplayGamut): boolean;
  cascadeTopLeft(from: CGPoint): CGPoint;
  center(): void;
  close(): void;
  constrainFrameRect(_: CGRect, to?: NSScreen): CGRect;
  contentBorderThickness(for_: NSGeometry.NSRectEdge): number;
  contentRect(forFrameRect: CGRect): CGRect;
  convertPointFromBacking(_: CGPoint): CGPoint;
  convertPoint(fromScreen: CGPoint): CGPoint;
  convertPointToBacking(_: CGPoint): CGPoint;
  convertPoint(toScreen: CGPoint): CGPoint;
  convertFromBacking(_: CGRect): CGRect;
  convertFromScreen(_: CGRect): CGRect;
  convertToBacking(_: CGRect): CGRect;
  convertToScreen(_: CGRect): CGRect;
  dataWithEPS(inside: CGRect): Data;
  dataWithPDF(inside: CGRect): Data;
  deminiaturize(_?: any): void;
  disableCursorRects(): void;
  disableKeyEquivalentForDefaultButtonCell(): void;
  disableScreenUpdatesUntilFlush(): void;
  disableSnapshotRestoration(): void;
  discardCursorRects(): void;
  discardEvents(matching: NSEvent.EventTypeMask, before?: NSEvent): void;
  display(): void;
  displayIfNeeded(): void;
  drag(_: NSImage, at: CGPoint, offset: CGSize, event: NSEvent, pasteboard: NSPasteboard, source: any, slideBack: boolean): void;
  enableCursorRects(): void;
  enableKeyEquivalentForDefaultButtonCell(): void;
  enableSnapshotRestoration(): void;
  endEditing(for_?: any): void;
  endSheet(_: NSWindow): void;
  endSheet(_: NSWindow, returnCode: number): void;
  fieldEditor(_: boolean, for_?: any): NSText;
  frameRect(forContentRect: CGRect): CGRect;
  handleClose(_: NSCloseCommand): any;
  handlePrint(_: NSScriptCommand): any;
  handleSave(_: NSScriptCommand): any;
  static createWithContentRectWithStyleMaskWithBackingWithDefer(_: CGRect, styleMask: NSWindow.StyleMask, backing: NSGraphics.NSWindow.BackingStoreType, defer: boolean): NSWindow;
  static createWithContentRectWithStyleMaskWithBackingWithDeferWithScreen(_: CGRect, styleMask: NSWindow.StyleMask, backing: NSGraphics.NSWindow.BackingStoreType, defer: boolean, screen?: NSScreen): NSWindow;
  static createWithWindowRef(_: any): NSWindow;
  insertTitlebarAccessoryViewController(_: NSTitlebarAccessoryViewController, at: number): void;
  invalidateCursorRects(for_: NSView): void;
  invalidateShadow(): void;
  layoutIfNeeded(): void;
  makeFirstResponder(_?: NSResponder): boolean;
  makeKeyAndOrderFront(_?: any): void;
  makeKey(): void;
  makeMain(): void;
  mergeAllWindows(_?: any): void;
  miniaturize(_?: any): void;
  moveTabToNewWindow(_?: any): void;
  nextEvent(matching: NSEvent.EventTypeMask): NSEvent;
  nextEvent(matching: NSEvent.EventTypeMask, until?: Date, inMode?: string, dequeue?: boolean): NSEvent;
  orderBack(_?: any): void;
  orderFront(_?: any): void;
  orderFrontRegardless(): void;
  orderOut(_?: any): void;
  order(_: NSGraphics.NSWindow.OrderingMode, relativeTo: number): void;
  performClose(_?: any): void;
  performMiniaturize(_?: any): void;
  performDrag(with_: NSEvent): void;
  performZoom(_?: any): void;
  postEvent(_: NSEvent, atStart: boolean): void;
  printWindow(_?: any): void;
  recalculateKeyViewLoop(): void;
  registerForDraggedTypes(_: string[]): void;
  removeChildWindow(_: NSWindow): void;
  removeTitlebarAccessoryViewController(at: number): void;
  resetCursorRects(): void;
  resignKey(): void;
  resignMain(): void;
  runToolbarCustomizationPalette(_?: any): void;
  saveFrame(usingName: string): void;
  selectKeyView(following: NSView): void;
  selectKeyView(preceding: NSView): void;
  selectNextKeyView(_?: any): void;
  selectNextTab(_?: any): void;
  selectPreviousKeyView(_?: any): void;
  selectPreviousTab(_?: any): void;
  sendEvent(_: NSEvent): void;
  setAnchorAttribute(_: NSLayoutConstraint.Attribute, for_: NSLayoutConstraint.Orientation): void;
  setAutorecalculatesContentBorderThickness(_: boolean, for_: NSGeometry.NSRectEdge): void;
  setContentBorderThickness(_: number, for_: NSGeometry.NSRectEdge): void;
  setContentSize(_: CGSize): void;
  setDynamicDepthLimit(_: boolean): void;
  setFrame(_: CGRect, display: boolean): void;
  setFrame(_: CGRect, display: boolean, animate: boolean): void;
  setFrameAutosaveName(_: string): boolean;
  setFrame(from: string): void;
  setFrameOrigin(_: CGPoint): void;
  setFrameTopLeftPoint(_: CGPoint): void;
  setFrameUsingName(_: string): boolean;
  setFrameUsingName(_: string, force: boolean): boolean;
  setIsMiniaturized(_: boolean): void;
  setIsVisible(_: boolean): void;
  setIsZoomed(_: boolean): void;
  setTitleWithRepresentedFilename(_: string): void;
  standardWindowButton(_: NSWindow.ButtonType): NSButton;
  toggleFullScreen(_?: any): void;
  toggleTabBar(_?: any): void;
  toggleTabOverview(_?: any): void;
  toggleToolbarShown(_?: any): void;
  trackEvents(matching: NSEvent.EventTypeMask, timeout: number, mode: string, handler?: (p1: NSEvent, p2: boolean) => void): void;
  unregisterDraggedTypes(): void;
  update(): void;
  updateConstraintsIfNeeded(): void;
  visualizeConstraints(_?: NSLayoutConstraint[]): void;
  zoom(_?: any): void;
}

export class NSWindowController extends NSResponder {
  contentViewController: NSViewController;
  setContentViewController(_: NSViewController);
  document: any;
  setDocument(_: any);
  owner: any;
  shouldCascadeWindows: boolean;
  setShouldCascadeWindows(_: boolean);
  shouldCloseDocument: boolean;
  setShouldCloseDocument(_: boolean);
  storyboard: NSStoryboard;
  window: NSWindow;
  setWindow(_: NSWindow);
  windowFrameAutosaveName: string;
  setWindowFrameAutosaveName(_: string);
  isWindowLoaded: boolean;
  windowNibName: string;
  windowNibPath: string;
  close(): void;
  dismissController(_?: any): void;
  static createWithWindow(_?: NSWindow): NSWindowController;
  static createWithWindowNibName(_: string): NSWindowController;
  static createWithWindowNibNameWithOwner(_: string, owner: any): NSWindowController;
  static createWithWindowNibPathWithOwner(_: string, owner: any): NSWindowController;
  loadWindow(): void;
  setDocumentEdited(_: boolean): void;
  showWindow(_?: any): void;
  synchronizeWindowTitleWithDocumentName(): void;
  windowDidLoad(): void;
  windowTitle(forDocumentDisplayName: string): string;
  windowWillLoad(): void;
}

interface NSWindowDelegate {
  customWindowsToEnterFullScreen(for_: NSWindow): NSWindow[];
  customWindowsToEnterFullScreen(for_: NSWindow, on: NSScreen): NSWindow[];
  customWindowsToExitFullScreen(for_: NSWindow): NSWindow[];
  window(_: NSWindow, startCustomAnimationToExitFullScreenWithDuration: number): void;
  window(_: NSWindow, didDecodeRestorableState: NSCoder): void;
  window(_: NSWindow, willEncodeRestorableState: NSCoder): void;
  window(_: NSWindow, willPositionSheet: NSWindow, using: CGRect): CGRect;
  window(_: NSWindow, shouldPopUpDocumentPathMenu: NSMenu): boolean;
  window(_: NSWindow, shouldDragDocumentWith: NSEvent, from: CGPoint, with_: NSPasteboard): boolean;
  window(_: NSWindow, willUseFullScreenContentSize: CGSize): CGSize;
  window(_: NSWindow, willUseFullScreenPresentationOptions: NSApplication.PresentationOptions): NSApplication.PresentationOptions;
  window(_: NSWindow, startCustomAnimationToEnterFullScreenWithDuration: number): void;
  window(_: NSWindow, willResizeForVersionBrowserWithMaxPreferredSize: CGSize, maxAllowedSize: CGSize): CGSize;
  window(_: NSWindow, startCustomAnimationToEnterFullScreenOn: NSScreen, withDuration: number): void;
  windowDidBecomeKey(_: Notification): void;
  windowDidBecomeMain(_: Notification): void;
  windowDidChangeBackingProperties(_: Notification): void;
  windowDidChangeOcclusionState(_: Notification): void;
  windowDidChangeScreen(_: Notification): void;
  windowDidChangeScreenProfile(_: Notification): void;
  windowDidDeminiaturize(_: Notification): void;
  windowDidEndLiveResize(_: Notification): void;
  windowDidEndSheet(_: Notification): void;
  windowDidEnterFullScreen(_: Notification): void;
  windowDidEnterVersionBrowser(_: Notification): void;
  windowDidExitFullScreen(_: Notification): void;
  windowDidExitVersionBrowser(_: Notification): void;
  windowDidExpose(_: Notification): void;
  windowDidFailToEnterFullScreen(_: NSWindow): void;
  windowDidFailToExitFullScreen(_: NSWindow): void;
  windowDidMiniaturize(_: Notification): void;
  windowDidMove(_: Notification): void;
  windowDidResignKey(_: Notification): void;
  windowDidResignMain(_: Notification): void;
  windowDidResize(_: Notification): void;
  windowDidUpdate(_: Notification): void;
  windowShouldClose(_: NSWindow): boolean;
  windowShouldZoom(_: NSWindow, toFrame: CGRect): boolean;
  windowWillBeginSheet(_: Notification): void;
  windowWillClose(_: Notification): void;
  windowWillEnterFullScreen(_: Notification): void;
  windowWillEnterVersionBrowser(_: Notification): void;
  windowWillExitFullScreen(_: Notification): void;
  windowWillExitVersionBrowser(_: Notification): void;
  windowWillMiniaturize(_: Notification): void;
  windowWillMove(_: Notification): void;
  windowWillResize(_: NSWindow, to: CGSize): CGSize;
  windowWillReturnFieldEditor(_: NSWindow, to?: any): any;
  windowWillReturnUndoManager(_: NSWindow): UndoManager;
  windowWillStartLiveResize(_: Notification): void;
  windowWillUseStandardFrame(_: NSWindow, defaultFrame: CGRect): CGRect;
}

interface NSWindowRestoration {
}

export class NSWindowTab extends NSObject {
  accessoryView: NSView;
  setAccessoryView(_: NSView);
  attributedTitle: NSAttributedString;
  setAttributedTitle(_: NSAttributedString);
  title: string;
  setTitle(_: string);
  toolTip: string;
  setToolTip(_: string);
}

export class NSWindowTabGroup extends NSObject {
  identifier: string;
  isOverviewVisible: boolean;
  setOverviewVisible(_: boolean);
  selectedWindow: NSWindow;
  setSelectedWindow(_: NSWindow);
  isTabBarVisible: boolean;
  windows: NSWindow[];
  addWindow(_: NSWindow): void;
  insertWindow(_: NSWindow, at: number): void;
  removeWindow(_: NSWindow): void;
}

export class NSWorkspace extends NSObject {
  accessibilityDisplayShouldDifferentiateWithoutColor: boolean;
  accessibilityDisplayShouldIncreaseContrast: boolean;
  accessibilityDisplayShouldInvertColors: boolean;
  accessibilityDisplayShouldReduceMotion: boolean;
  accessibilityDisplayShouldReduceTransparency: boolean;
  fileLabelColors: NSColor[];
  fileLabels: string[];
  frontmostApplication: NSRunningApplication;
  menuBarOwningApplication: NSRunningApplication;
  notificationCenter: NotificationCenter;
  runningApplications: NSRunningApplication[];
  isSwitchControlEnabled: boolean;
  isVoiceOverEnabled: boolean;
  static sharedWorkspace: NSWorkspace;
  urlForApplication(toOpen: URL): URL;
  urlForApplication(withBundleIdentifier: string): URL;
  activateFileViewerSelecting(_: URL[]): void;
  desktopImageOptions(for_: NSScreen): Map<string, any>;
  desktopImageURL(for_: NSScreen): URL;
  duplicate(_: URL[], completionHandler?: (p1: Map<URL, URL>, p2: Error) => void): void;
  extendPowerOff(by: number): number;
  filenameExtension(_: string, isValidForType: string): boolean;
  getFileSystemInfo(forPath: string, isRemovable?: boolean, isWritable?: boolean, isUnmountable?: boolean, description?: string, type?: string): boolean;
  getInfoForFile(_: string, application?: string, type?: string): boolean;
  hideOtherApplications(): void;
  icon(forFile: string): NSImage;
  icon(forFileType: string): NSImage;
  icon(forFiles: string[]): NSImage;
  isFilePackage(atPath: string): boolean;
  launchApplicationAtURL(options: URL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
  localizedDescription(forType: string): string;
  noteFileSystemChanged(_: string): void;
  openApplication(at: URL, configuration: NSWorkspace.OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: Error) => void): void;
  open(_: URL): boolean;
  open(_: URL, configuration: NSWorkspace.OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: Error) => void): void;
  openURL(options: URL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
  open(_: URL[], withApplicationAt: URL, configuration: NSWorkspace.OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: Error) => void): void;
  openURLs(withApplicationAtURL: URL[], options: URL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
  preferredFilenameExtension(forType: string): string;
  recycle(_: URL[], completionHandler?: (p1: Map<URL, URL>, p2: Error) => void): void;
  requestAuthorization(to: NSWorkspace.AuthorizationType, completionHandler?: (p1: NSWorkspace.Authorization, p2: Error) => void): void;
  selectFile(_?: string, inFileViewerRootedAtPath?: string): boolean;
  setDesktopImageURL(forScreen: URL, options: NSScreen, error: Map<string, any>): boolean;
  setIcon(_?: NSImage, forFile?: string, options?: NSWorkspace.IconCreationOptions): boolean;
  showSearchResults(forQueryString: string): boolean;
  type(_: string, conformsToType: string): boolean;
  typeOfFile(error: string): string;
  unmountAndEjectDevice(atPath: string): boolean;
  unmountAndEjectDeviceAtURL(error: URL): boolean;
}

export class CKAcceptSharesOperation extends CKOperation {
  acceptSharesCompletionBlock: (p1: Error) => void;
  setAcceptSharesCompletionBlock(_: (p1: Error) => void);
  perShareCompletionBlock: (p1: CKShare.Metadata, p2: CKShare, p3: Error) => void;
  setPerShareCompletionBlock(_: (p1: CKShare.Metadata, p2: CKShare, p3: Error) => void);
  shareMetadatas: CKShare.Metadata[];
  setShareMetadatas(_: CKShare.Metadata[]);
  static createWithShareMetadatas(_: CKShare.Metadata[]): CKAcceptSharesOperation;
}

export class CKAsset extends NSObject {
  fileURL: URL;
  static createWithFileURL(_: URL): CKAsset;
}

export class CKContainer extends NSObject {
  static default(): CKContainer;
  containerIdentifier: string;
  privateCloudDatabase: CKDatabase;
  publicCloudDatabase: CKDatabase;
  sharedCloudDatabase: CKDatabase;
  accept(_: CKShare.Metadata, completionHandler?: (p1: CKShare, p2: Error) => void): void;
  accountStatus(completionHandler?: (p1: CKContainer.CKAccountStatus, p2: Error) => void): void;
  add(_: CKOperation): void;
  database(with_: CKDatabase.Scope): CKDatabase;
  discoverAllIdentities(completionHandler?: (p1: CKUserIdentity[], p2: Error) => void): void;
  discoverUserIdentity(withEmailAddress: string, completionHandler?: (p1: CKUserIdentity, p2: Error) => void): void;
  discoverUserIdentity(withPhoneNumber: string, completionHandler?: (p1: CKUserIdentity, p2: Error) => void): void;
  discoverUserIdentity(withUserRecordID: CKRecord.ID, completionHandler?: (p1: CKUserIdentity, p2: Error) => void): void;
  fetchAllLongLivedOperationIDsWithCompletionHandler(_?: (p1: string[], p2: Error) => void): void;
  fetchLongLivedOperationWithID(_: string, completionHandler?: (p1: CKOperation, p2: Error) => void): void;
  fetchShareMetadata(with_: URL, completionHandler?: (p1: CKShare.Metadata, p2: Error) => void): void;
  fetchShareParticipant(withEmailAddress: string, completionHandler?: (p1: CKShare.Participant, p2: Error) => void): void;
  fetchShareParticipant(withPhoneNumber: string, completionHandler?: (p1: CKShare.Participant, p2: Error) => void): void;
  fetchShareParticipant(withUserRecordID: CKRecord.ID, completionHandler?: (p1: CKShare.Participant, p2: Error) => void): void;
  fetchUserRecordID(completionHandler?: (p1: CKRecord.ID, p2: Error) => void): void;
  requestApplicationPermission(_: CKContainer.CKContainer_Application_Permissions, completionHandler: (p1: CKContainer.CKContainer_Application_PermissionStatus, p2: Error) => void): void;
  status(forApplicationPermission: CKContainer.CKContainer_Application_Permissions, completionHandler: (p1: CKContainer.CKContainer_Application_PermissionStatus, p2: Error) => void): void;
}

export class CKDatabase extends NSObject {
  databaseScope: CKDatabase.Scope;
  add(_: CKDatabaseOperation): void;
  delete(withRecordID: CKRecord.ID, completionHandler?: (p1: CKRecord.ID, p2: Error) => void): void;
  delete(withRecordZoneID: CKRecordZone.ID, completionHandler?: (p1: CKRecordZone.ID, p2: Error) => void): void;
  __delete(withSubscriptionID: string, completionHandler?: (p1: string, p2: Error) => void): void;
  fetchAllRecordZones(completionHandler?: (p1: CKRecordZone[], p2: Error) => void): void;
  fetchAllSubscriptions(completionHandler?: (p1: CKSubscription[], p2: Error) => void): void;
  fetch(withRecordID: CKRecord.ID, completionHandler?: (p1: CKRecord, p2: Error) => void): void;
  fetch(withRecordZoneID: CKRecordZone.ID, completionHandler?: (p1: CKRecordZone, p2: Error) => void): void;
  __fetch(withSubscriptionID: string, completionHandler?: (p1: CKSubscription, p2: Error) => void): void;
  // @ts-ignore 
  perform(_: CKQuery, inZoneWith?: CKRecordZone.ID, completionHandler?: (p1: CKRecord[], p2: Error) => void): void;
  save(_: CKRecord, completionHandler?: (p1: CKRecord, p2: Error) => void): void;
  save(_: CKRecordZone, completionHandler?: (p1: CKRecordZone, p2: Error) => void): void;
  save(_: CKSubscription, completionHandler?: (p1: CKSubscription, p2: Error) => void): void;
}

export class CKDatabaseNotification extends CKNotification {
  databaseScope: CKDatabase.Scope;
}

export class CKDatabaseOperation extends CKOperation {
  database: CKDatabase;
  setDatabase(_: CKDatabase);
}

export class CKDatabaseSubscription extends CKSubscription {
  recordType: string;
  setRecordType(_: string);
  static createWithSubscriptionID(_: string): CKDatabaseSubscription;
}

export class CKDiscoverAllUserIdentitiesOperation extends CKOperation {
  discoverAllUserIdentitiesCompletionBlock: (p1: Error) => void;
  setDiscoverAllUserIdentitiesCompletionBlock(_: (p1: Error) => void);
  userIdentityDiscoveredBlock: (p1: CKUserIdentity) => void;
  setUserIdentityDiscoveredBlock(_: (p1: CKUserIdentity) => void);
}

export class CKDiscoverUserIdentitiesOperation extends CKOperation {
  discoverUserIdentitiesCompletionBlock: (p1: Error) => void;
  setDiscoverUserIdentitiesCompletionBlock(_: (p1: Error) => void);
  userIdentityDiscoveredBlock: (p1: CKUserIdentity, p2: CKUserIdentity.LookupInfo) => void;
  setUserIdentityDiscoveredBlock(_: (p1: CKUserIdentity, p2: CKUserIdentity.LookupInfo) => void);
  userIdentityLookupInfos: CKUserIdentity.LookupInfo[];
  setUserIdentityLookupInfos(_: CKUserIdentity.LookupInfo[]);
  static createWithUserIdentityLookupInfos(_: CKUserIdentity.LookupInfo[]): CKDiscoverUserIdentitiesOperation;
}

export class CKFetchDatabaseChangesOperation extends CKDatabaseOperation {
  changeTokenUpdatedBlock: (p1: CKServerChangeToken) => void;
  setChangeTokenUpdatedBlock(_: (p1: CKServerChangeToken) => void);
  fetchAllChanges: boolean;
  setFetchAllChanges(_: boolean);
  fetchDatabaseChangesCompletionBlock: (p1: CKServerChangeToken, p2: boolean, p3: Error) => void;
  setFetchDatabaseChangesCompletionBlock(_: (p1: CKServerChangeToken, p2: boolean, p3: Error) => void);
  previousServerChangeToken: CKServerChangeToken;
  setPreviousServerChangeToken(_: CKServerChangeToken);
  recordZoneWithIDChangedBlock: (p1: CKRecordZone.ID) => void;
  setRecordZoneWithIDChangedBlock(_: (p1: CKRecordZone.ID) => void);
  recordZoneWithIDWasDeletedBlock: (p1: CKRecordZone.ID) => void;
  setRecordZoneWithIDWasDeletedBlock(_: (p1: CKRecordZone.ID) => void);
  recordZoneWithIDWasPurgedBlock: (p1: CKRecordZone.ID) => void;
  setRecordZoneWithIDWasPurgedBlock(_: (p1: CKRecordZone.ID) => void);
  resultsLimit: number;
  setResultsLimit(_: number);
  static createWithPreviousServerChangeToken(_?: CKServerChangeToken): CKFetchDatabaseChangesOperation;
}

export class CKFetchRecordZoneChangesOperation extends CKDatabaseOperation {
  configurationsByRecordZoneID: Map<CKRecordZone.ID, CKFetchRecordZoneChangesOperation.ZoneConfiguration>;
  setConfigurationsByRecordZoneID(_: Map<CKRecordZone.ID, CKFetchRecordZoneChangesOperation.ZoneConfiguration>);
  fetchAllChanges: boolean;
  setFetchAllChanges(_: boolean);
  fetchRecordZoneChangesCompletionBlock: (p1: Error) => void;
  setFetchRecordZoneChangesCompletionBlock(_: (p1: Error) => void);
  recordChangedBlock: (p1: CKRecord) => void;
  setRecordChangedBlock(_: (p1: CKRecord) => void);
  recordWithIDWasDeletedBlock: (p1: CKRecord.ID, p2: string) => void;
  setRecordWithIDWasDeletedBlock(_: (p1: CKRecord.ID, p2: string) => void);
  recordZoneChangeTokensUpdatedBlock: (p1: CKRecordZone.ID, p2: CKServerChangeToken, p3: Data) => void;
  setRecordZoneChangeTokensUpdatedBlock(_: (p1: CKRecordZone.ID, p2: CKServerChangeToken, p3: Data) => void);
  recordZoneFetchCompletionBlock: (p1: CKRecordZone.ID, p2: CKServerChangeToken, p3: Data, p4: boolean, p5: Error) => void;
  setRecordZoneFetchCompletionBlock(_: (p1: CKRecordZone.ID, p2: CKServerChangeToken, p3: Data, p4: boolean, p5: Error) => void);
  recordZoneIDs: CKRecordZone.ID[];
  setRecordZoneIDs(_: CKRecordZone.ID[]);
  static createWithRecordZoneiDsWithConfigurationsByRecordZoneID(_: CKRecordZone.ID[], configurationsByRecordZoneID?: Map<CKRecordZone.ID, CKFetchRecordZoneChangesOperation.ZoneConfiguration>): CKFetchRecordZoneChangesOperation;
}

export class CKFetchRecordZonesOperation extends CKDatabaseOperation {
  static createWithFetchAllRecordZonesOperation(): CKFetchRecordZonesOperation;
  fetchRecordZonesCompletionBlock: (p1: Map<CKRecordZone.ID, CKRecordZone>, p2: Error) => void;
  setFetchRecordZonesCompletionBlock(_: (p1: Map<CKRecordZone.ID, CKRecordZone>, p2: Error) => void);
  recordZoneIDs: CKRecordZone.ID[];
  setRecordZoneIDs(_: CKRecordZone.ID[]);
  static createWithRecordZoneiDs(_: CKRecordZone.ID[]): CKFetchRecordZonesOperation;
}

export class CKFetchRecordsOperation extends CKDatabaseOperation {
  static createWithFetchCurrentUserRecordOperation(): CKFetchRecordsOperation;
  desiredKeys: string[];
  setDesiredKeys(_: string[]);
  fetchRecordsCompletionBlock: (p1: Map<CKRecord.ID, CKRecord>, p2: Error) => void;
  setFetchRecordsCompletionBlock(_: (p1: Map<CKRecord.ID, CKRecord>, p2: Error) => void);
  perRecordCompletionBlock: (p1: CKRecord, p2: CKRecord.ID, p3: Error) => void;
  setPerRecordCompletionBlock(_: (p1: CKRecord, p2: CKRecord.ID, p3: Error) => void);
  perRecordProgressBlock: (p1: CKRecord.ID, p2: number) => void;
  setPerRecordProgressBlock(_: (p1: CKRecord.ID, p2: number) => void);
  recordIDs: CKRecord.ID[];
  setRecordIDs(_: CKRecord.ID[]);
  static createWithRecordiDs(_: CKRecord.ID[]): CKFetchRecordsOperation;
}

export class CKFetchShareMetadataOperation extends CKOperation {
  fetchShareMetadataCompletionBlock: (p1: Error) => void;
  setFetchShareMetadataCompletionBlock(_: (p1: Error) => void);
  perShareMetadataBlock: (p1: URL, p2: CKShare.Metadata, p3: Error) => void;
  setPerShareMetadataBlock(_: (p1: URL, p2: CKShare.Metadata, p3: Error) => void);
  rootRecordDesiredKeys: string[];
  setRootRecordDesiredKeys(_: string[]);
  shareURLs: URL[];
  setShareURLs(_: URL[]);
  shouldFetchRootRecord: boolean;
  setShouldFetchRootRecord(_: boolean);
}

export class CKFetchShareParticipantsOperation extends CKOperation {
  fetchShareParticipantsCompletionBlock: (p1: Error) => void;
  setFetchShareParticipantsCompletionBlock(_: (p1: Error) => void);
  shareParticipantFetchedBlock: (p1: CKShare.Participant) => void;
  setShareParticipantFetchedBlock(_: (p1: CKShare.Participant) => void);
  userIdentityLookupInfos: CKUserIdentity.LookupInfo[];
  setUserIdentityLookupInfos(_: CKUserIdentity.LookupInfo[]);
  static createWithUserIdentityLookupInfos(_: CKUserIdentity.LookupInfo[]): CKFetchShareParticipantsOperation;
}

export class CKFetchSubscriptionsOperation extends CKDatabaseOperation {
  static createWithFetchAllSubscriptionsOperation(): CKFetchSubscriptionsOperation;
  fetchSubscriptionCompletionBlock: (p1: Map<string, CKSubscription>, p2: Error) => void;
  setFetchSubscriptionCompletionBlock(_: (p1: Map<string, CKSubscription>, p2: Error) => void);
  subscriptionIDs: string[];
  setSubscriptionIDs(_: string[]);
  static createWithSubscriptioniDs(_: string[]): CKFetchSubscriptionsOperation;
}

export class CKFetchWebAuthTokenOperation extends CKDatabaseOperation {
  APIToken: string;
  setAPIToken(_: string);
  fetchWebAuthTokenCompletionBlock: (p1: string, p2: Error) => void;
  setFetchWebAuthTokenCompletionBlock(_: (p1: string, p2: Error) => void);
  static createWithApiToken(_: string): CKFetchWebAuthTokenOperation;
}

export class CKLocationSortDescriptor extends NSSortDescriptor {
  relativeLocation: CLLocation;
  // @ts-ignore 
  static createWithKeyWithRelativeLocation(_: string, relativeLocation: CLLocation): CKLocationSortDescriptor;
}

export class CKModifyRecordZonesOperation extends CKDatabaseOperation {
  modifyRecordZonesCompletionBlock: (p1: CKRecordZone[], p2: CKRecordZone.ID[], p3: Error) => void;
  setModifyRecordZonesCompletionBlock(_: (p1: CKRecordZone[], p2: CKRecordZone.ID[], p3: Error) => void);
  recordZoneIDsToDelete: CKRecordZone.ID[];
  setRecordZoneIDsToDelete(_: CKRecordZone.ID[]);
  recordZonesToSave: CKRecordZone[];
  setRecordZonesToSave(_: CKRecordZone[]);
  static createWithRecordZonesToSaveWithRecordZoneiDsToDelete(_?: CKRecordZone[], recordZoneIDsToDelete?: CKRecordZone.ID[]): CKModifyRecordZonesOperation;
}

export class CKModifyRecordsOperation extends CKDatabaseOperation {
  atomic: boolean;
  setAtomic(_: boolean);
  clientChangeTokenData: Data;
  setClientChangeTokenData(_: Data);
  modifyRecordsCompletionBlock: (p1: CKRecord[], p2: CKRecord.ID[], p3: Error) => void;
  setModifyRecordsCompletionBlock(_: (p1: CKRecord[], p2: CKRecord.ID[], p3: Error) => void);
  perRecordCompletionBlock: (p1: CKRecord, p2: Error) => void;
  setPerRecordCompletionBlock(_: (p1: CKRecord, p2: Error) => void);
  perRecordProgressBlock: (p1: CKRecord, p2: number) => void;
  setPerRecordProgressBlock(_: (p1: CKRecord, p2: number) => void);
  recordIDsToDelete: CKRecord.ID[];
  setRecordIDsToDelete(_: CKRecord.ID[]);
  recordsToSave: CKRecord[];
  setRecordsToSave(_: CKRecord[]);
  savePolicy: CKModifyRecordsOperation.RecordSavePolicy;
  setSavePolicy(_: CKModifyRecordsOperation.RecordSavePolicy);
  static createWithRecordsToSaveWithRecordiDsToDelete(_?: CKRecord[], recordIDsToDelete?: CKRecord.ID[]): CKModifyRecordsOperation;
}

export class CKModifySubscriptionsOperation extends CKDatabaseOperation {
  modifySubscriptionsCompletionBlock: (p1: CKSubscription[], p2: string[], p3: Error) => void;
  setModifySubscriptionsCompletionBlock(_: (p1: CKSubscription[], p2: string[], p3: Error) => void);
  subscriptionIDsToDelete: string[];
  setSubscriptionIDsToDelete(_: string[]);
  subscriptionsToSave: CKSubscription[];
  setSubscriptionsToSave(_: CKSubscription[]);
  static createWithSubscriptionsToSaveWithSubscriptioniDsToDelete(_?: CKSubscription[], subscriptionIDsToDelete?: string[]): CKModifySubscriptionsOperation;
}

export class CKNotification extends NSObject {
  alertActionLocalizationKey: string;
  alertBody: string;
  alertLaunchImage: string;
  alertLocalizationArgs: string[];
  alertLocalizationKey: string;
  badge: number;
  category: string;
  containerIdentifier: string;
  isPruned: boolean;
  notificationID: CKNotification.ID;
  notificationType: CKNotification.NotificationType;
  soundName: string;
  subscriptionID: string;
  subtitle: string;
  subtitleLocalizationArgs: string[];
  subtitleLocalizationKey: string;
  title: string;
  titleLocalizationArgs: string[];
  titleLocalizationKey: string;
}

export class CKOperation extends Operation {
  configuration: CKOperation.Configuration;
  setConfiguration(_: CKOperation.Configuration);
  group: CKOperationGroup;
  setGroup(_: CKOperationGroup);
  longLivedOperationWasPersistedBlock: () => void;
  setLongLivedOperationWasPersistedBlock(_: () => void);
  operationID: string;
}

export class CKOperationGroup extends NSObject {
  defaultConfiguration: CKOperation.Configuration;
  setDefaultConfiguration(_: CKOperation.Configuration);
  expectedReceiveSize: CKOperationGroup.TransferSize;
  setExpectedReceiveSize(_: CKOperationGroup.TransferSize);
  expectedSendSize: CKOperationGroup.TransferSize;
  setExpectedSendSize(_: CKOperationGroup.TransferSize);
  name: string;
  setName(_: string);
  operationGroupID: string;
  quantity: number;
  setQuantity(_: number);
}

export class CKQuery extends NSObject {
  predicate: NSPredicate;
  recordType: string;
  sortDescriptors: NSSortDescriptor[];
  setSortDescriptors(_: NSSortDescriptor[]);
  static createWithRecordTypeWithPredicate(_: string, predicate: NSPredicate): CKQuery;
}

export class CKQueryNotification extends CKNotification {
  databaseScope: CKDatabase.Scope;
  queryNotificationReason: CKNotification.CKQueryNotification.Reason;
  recordFields: Map<string, any>;
  recordID: CKRecord.ID;
}

export class CKQueryOperation extends CKDatabaseOperation {
  cursor: CKQueryOperation.Cursor;
  setCursor(_: CKQueryOperation.Cursor);
  desiredKeys: string[];
  setDesiredKeys(_: string[]);
  query: CKQuery;
  setQuery(_: CKQuery);
  queryCompletionBlock: (p1: CKQueryOperation.Cursor, p2: Error) => void;
  setQueryCompletionBlock(_: (p1: CKQueryOperation.Cursor, p2: Error) => void);
  recordFetchedBlock: (p1: CKRecord) => void;
  setRecordFetchedBlock(_: (p1: CKRecord) => void);
  resultsLimit: number;
  setResultsLimit(_: number);
  zoneID: CKRecordZone.ID;
  setZoneID(_: CKRecordZone.ID);
  static createWithCursor(_: CKQueryOperation.Cursor): CKQueryOperation;
  static createWithQuery(_: CKQuery): CKQueryOperation;
}

export class CKQuerySubscription extends CKSubscription {
  predicate: NSPredicate;
  querySubscriptionOptions: CKSubscription.CKQuerySubscription.Options;
  recordType: string;
  zoneID: CKRecordZone.ID;
  setZoneID(_: CKRecordZone.ID);
  static createWithRecordTypeWithPredicateWithOptions(_: string, predicate: NSPredicate, options: CKSubscription.CKQuerySubscription.Options): CKQuerySubscription;
  static createWithRecordTypeWithPredicateWithSubscriptionIDWithOptions(_: string, predicate: NSPredicate, subscriptionID: string, options: CKSubscription.CKQuerySubscription.Options): CKQuerySubscription;
}

export class CKRecord extends NSObject {
  creationDate: Date;
  creatorUserRecordID: CKRecord.ID;
  lastModifiedUserRecordID: CKRecord.ID;
  modificationDate: Date;
  parent: CKRecord.Reference;
  setParent(_: CKRecord.Reference);
  recordChangeTag: string;
  recordID: CKRecord.ID;
  recordType: string;
  share: CKRecord.Reference;
  allTokens(): string[];
  encodeSystemFields(with_: NSCoder): void;
  static createWithRecordType(_: string): CKRecord;
  static createWithRecordTypeWithRecordID(_: string, recordID: CKRecord.ID): CKRecord;
  static createWithRecordTypeWithZoneID(_: string, zoneID: CKRecordZone.ID): CKRecord;
  setParent(_?: CKRecord): void;
  setParent(_?: CKRecord.ID): void;
}

interface CKRecordKeyValueSetting {
  allKeys(): string[];
  changedKeys(): string[];
  object(forKey: string): any;
  objectForKeyedSubscript(_: string): any;
  setObject(_?: any, forKey?: string): void;
  setObject(_?: any, forKeyedSubscript?: string): void;
}

export class CKRecordZone extends NSObject {
  static default(): CKRecordZone;
  capabilities: CKRecordZone.Capabilities;
  zoneID: CKRecordZone.ID;
  static createWithZoneID(_: CKRecordZone.ID): CKRecordZone;
  static createWithZoneName(_: string): CKRecordZone;
}

export class CKRecordZoneNotification extends CKNotification {
  databaseScope: CKDatabase.Scope;
  recordZoneID: CKRecordZone.ID;
}

export class CKRecordZoneSubscription extends CKSubscription {
  recordType: string;
  setRecordType(_: string);
  zoneID: CKRecordZone.ID;
  static createWithZoneID(_: CKRecordZone.ID): CKRecordZoneSubscription;
  static createWithZoneIDWithSubscriptionID(_: CKRecordZone.ID, subscriptionID: string): CKRecordZoneSubscription;
}

export class CKServerChangeToken extends NSObject {
}

export class CKShare extends CKRecord {
  URL: URL;
  currentUserParticipant: CKShare.Participant;
  owner: CKShare.Participant;
  participants: CKShare.Participant[];
  publicPermission: CKShare.Participant.CKShare_Participant_Permission;
  setPublicPermission(_: CKShare.Participant.CKShare_Participant_Permission);
  addParticipant(_: CKShare.Participant): void;
  static createWithRootRecord(_: CKRecord): CKShare;
  removeParticipant(_: CKShare.Participant): void;
}

export class CKSubscription extends NSObject {
  notificationInfo: CKSubscription.NotificationInfo;
  setNotificationInfo(_: CKSubscription.NotificationInfo);
  subscriptionID: string;
  subscriptionType: CKSubscription.SubscriptionType;
}

export class CKUserIdentity extends NSObject {
  contactIdentifiers: string[];
  hasiCloudAccount: boolean;
  lookupInfo: CKUserIdentity.LookupInfo;
  nameComponents: PersonNameComponents;
  userRecordID: CKRecord.ID;
}

interface __CKRecordObjCValue {
}

// export function AudioConvertHostTimeToNanos(inHostTime: number): number;

// export function AudioConvertNanosToHostTime(inNanos: number): number;

// export function AudioDeviceCreateIOProcID(inDevice: number, inProc: (p1: number, p2: AudioTimeStamp, p3: AudioBufferList, p4: AudioTimeStamp, p5: AudioBufferList, p6: AudioTimeStamp, p7: any) => number, inClientData: any, outIOProcID: (p1: number, p2: AudioTimeStamp, p3: AudioBufferList, p4: AudioTimeStamp, p5: AudioBufferList, p6: AudioTimeStamp, p7: any) => number): number;

// export function AudioDeviceCreateIOProcIDWithBlock(outIOProcID: (p1: number, p2: AudioTimeStamp, p3: AudioBufferList, p4: AudioTimeStamp, p5: AudioBufferList, p6: AudioTimeStamp, p7: any) => number, inDevice: number, inDispatchQueue: NSObject, inIOBlock: (p1: AudioTimeStamp, p2: AudioBufferList, p3: AudioTimeStamp, p4: AudioBufferList, p5: AudioTimeStamp) => void): number;

// export function AudioDeviceDestroyIOProcID(inDevice: number, inIOProcID: (p1: number, p2: AudioTimeStamp, p3: AudioBufferList, p4: AudioTimeStamp, p5: AudioBufferList, p6: AudioTimeStamp, p7: any) => number): number;

// export function AudioDeviceGetCurrentTime(inDevice: number, outTime: AudioTimeStamp): number;

// export function AudioDeviceGetNearestStartTime(inDevice: number, ioRequestedStartTime: AudioTimeStamp, inFlags: number): number;

// export function AudioDeviceStart(inDevice: number, inProcID: (p1: number, p2: AudioTimeStamp, p3: AudioBufferList, p4: AudioTimeStamp, p5: AudioBufferList, p6: AudioTimeStamp, p7: any) => number): number;

// export function AudioDeviceStartAtTime(inDevice: number, inProcID: (p1: number, p2: AudioTimeStamp, p3: AudioBufferList, p4: AudioTimeStamp, p5: AudioBufferList, p6: AudioTimeStamp, p7: any) => number, ioRequestedStartTime: AudioTimeStamp, inFlags: number): number;

// export function AudioDeviceStop(inDevice: number, inProcID: (p1: number, p2: AudioTimeStamp, p3: AudioBufferList, p4: AudioTimeStamp, p5: AudioBufferList, p6: AudioTimeStamp, p7: any) => number): number;

// export function AudioDeviceTranslateTime(inDevice: number, inTime: AudioTimeStamp, outTime: AudioTimeStamp): number;

// export function AudioGetCurrentHostTime(): number;

// export function AudioGetHostClockFrequency(): number;

// export function AudioGetHostClockMinimumTimeDelta(): number;

// export function AudioHardwareCreateAggregateDevice(inDescription: Map<any, any>, outDeviceID: number): number;

// export function AudioHardwareDestroyAggregateDevice(inDeviceID: number): number;

// export function AudioHardwareUnload(): number;

// export function AudioObjectAddPropertyListener(inObjectID: number, inAddress: AudioObjectPropertyAddress, inListener: (p1: number, p2: number, p3: AudioObjectPropertyAddress, p4: any) => number, inClientData: any): number;

// export function AudioObjectAddPropertyListenerBlock(inObjectID: number, inAddress: AudioObjectPropertyAddress, inDispatchQueue: NSObject, inListener: (p1: number, p2: AudioObjectPropertyAddress) => void): number;

// export function AudioObjectGetPropertyData(inObjectID: number, inAddress: AudioObjectPropertyAddress, inQualifierDataSize: number, inQualifierData: any, ioDataSize: number, outData: any): number;

// export function AudioObjectGetPropertyDataSize(inObjectID: number, inAddress: AudioObjectPropertyAddress, inQualifierDataSize: number, inQualifierData: any, outDataSize: number): number;

// export function AudioObjectHasProperty(inObjectID: number, inAddress: AudioObjectPropertyAddress): boolean;

// export function AudioObjectIsPropertySettable(inObjectID: number, inAddress: AudioObjectPropertyAddress, outIsSettable: string | any): number;

// export function AudioObjectRemovePropertyListener(inObjectID: number, inAddress: AudioObjectPropertyAddress, inListener: (p1: number, p2: number, p3: AudioObjectPropertyAddress, p4: any) => number, inClientData: any): number;

// export function AudioObjectRemovePropertyListenerBlock(inObjectID: number, inAddress: AudioObjectPropertyAddress, inDispatchQueue: NSObject, inListener: (p1: number, p2: AudioObjectPropertyAddress) => void): number;

// export function AudioObjectSetPropertyData(inObjectID: number, inAddress: AudioObjectPropertyAddress, inQualifierDataSize: number, inQualifierData: any, inDataSize: number, inData: any): number;

// export function AudioObjectShow(inObjectID: number): void;

export class AUAudioUnitViewConfiguration extends NSObject {
  height: number;
  hostHasController: boolean;
  width: number;
  static createWithWidthWithHeightWithHostHasController(_: number, height: number, hostHasController: boolean): AUAudioUnitViewConfiguration;
}

interface AUCustomViewPersistentData {
  customViewPersistentData: Map<string, any>;
  setCustomViewPersistentData(_: Map<string, any>);
}

export class AUGenericView extends NSView {
  audioUnit: ComponentInstanceRecord;
  showsExpertParameters: boolean;
  setShowsExpertParameters(_: boolean);
  static createWithAudioUnit(_: ComponentInstanceRecord): AUGenericView;
  static createWithAudioUnitWithDisplayFlags(_: ComponentInstanceRecord, displayFlags: AUGenericView.AUGenericViewDisplayFlags): AUGenericView;
}

export class AUPannerView extends NSView {
  static AUPannerViewWithAudioUnit(_: ComponentInstanceRecord): AUPannerView;
  audioUnit: ComponentInstanceRecord;
}

export class AUViewController extends NSViewController {
}

export class CABTLEMIDIWindowController extends NSWindowController {
}

export class CAInterDeviceAudioViewController extends NSViewController {
}

export class CANetworkBrowserWindowController extends NSWindowController {
  static isAVBSupported(): boolean;
}

export class CBATTRequest extends NSObject {
  central: CBCentral;
  characteristic: CBCharacteristic;
  offset: number;
}

export class CBAttribute extends NSObject {
  UUID: CBUUID;
}

export class CBCentral extends CBPeer {
  maximumUpdateValueLength: number;
}

export class CBCentralManager extends CBManager {
  delegate: any;
  setDelegate(_: any);
  isScanning: boolean;
  cancelPeripheralConnection(_: CBPeripheral): void;
  connectPeripheral(_: CBPeripheral, options?: Map<string, any>): void;
  static createWithDelegateWithQueue(_?: any, queue?: NSObject): CBCentralManager;
  static createWithDelegateWithQueueWithOptions(_?: any, queue?: NSObject, options?: Map<string, any>): CBCentralManager;
  retrieveConnectedPeripheralsWithServices(_: CBUUID[]): CBPeripheral[];
  retrievePeripheralsWithIdentifiers(_: UUID[]): CBPeripheral[];
  scanForPeripheralsWithServices(_?: CBUUID[], options?: Map<string, any>): void;
  stopScan(): void;
}

interface CBCentralManagerDelegate {
  centralManager(_: CBCentralManager, willRestoreState: Map<string, any>): void;
  centralManager(_: CBCentralManager, didDiscoverPeripheral: CBPeripheral, advertisementData: Map<string, any>, RSSI: number): void;
  centralManager(_: CBCentralManager, didConnectPeripheral: CBPeripheral): void;
  centralManager(_: CBCentralManager, didFailToConnectPeripheral: CBPeripheral, error?: Error): void;
  centralManager(_: CBCentralManager, didDisconnectPeripheral: CBPeripheral, error?: Error): void;
  centralManagerDidUpdateState(_: CBCentralManager): void;
}

export class CBCharacteristic extends CBAttribute {
  descriptors: CBDescriptor[];
  isNotifying: boolean;
  properties: CBCharacteristic.CBCharacteristicProperties;
  service: CBService;
}

export class CBDescriptor extends CBAttribute {
  characteristic: CBCharacteristic;
}

export class CBL2CAPChannel extends NSObject {
  PSM: number;
  inputStream: InputStream;
  outputStream: OutputStream;
  peer: CBPeer;
}

export class CBManager extends NSObject {
  authorization: CBManager.CBManagerAuthorization;
  state: CBManager.CBManagerState;
  //   static authorization: CBManager.CBManagerAuthorization;
}

export class CBMutableCharacteristic extends CBCharacteristic {
  descriptors: CBDescriptor[];
  setDescriptors(_: CBDescriptor[]);
  permissions: CBCharacteristic.CBAttributePermissions;
  setPermissions(_: CBCharacteristic.CBAttributePermissions);
  properties: CBCharacteristic.CBCharacteristicProperties;
  setProperties(_: CBCharacteristic.CBCharacteristicProperties);
  subscribedCentrals: CBCentral[];
  static createWithTypeWithPropertiesWithValueWithPermissions(_: CBUUID, properties: CBCharacteristic.CBCharacteristicProperties, value?: Data, permissions?: CBCharacteristic.CBAttributePermissions): CBMutableCharacteristic;
}

export class CBMutableDescriptor extends CBDescriptor {
  static createWithTypeWithValue(_: CBUUID, value?: any): CBMutableDescriptor;
}

export class CBMutableService extends CBService {
  characteristics: CBCharacteristic[];
  setCharacteristics(_: CBCharacteristic[]);
  includedServices: CBService[];
  setIncludedServices(_: CBService[]);
  static createWithTypeWithPrimary(_: CBUUID, primary: boolean): CBMutableService;
}

export class CBPeer extends NSObject {
  identifier: UUID;
}

export class CBPeripheral extends CBPeer {
  canSendWriteWithoutResponse: boolean;
  delegate: any;
  setDelegate(_: any);
  name: string;
  services: CBService[];
  state: CBPeripheral.CBPeripheralState;
  discoverCharacteristics(_?: CBUUID[], forService?: CBService): void;
  discoverDescriptorsForCharacteristic(_: CBCharacteristic): void;
  discoverIncludedServices(_?: CBUUID[], forService?: CBService): void;
  discoverServices(_?: CBUUID[]): void;
  maximumWriteValueLengthForType(_: CBPeripheral.CBCharacteristicWriteType): number;
  openL2CAPChannel(_: number): void;
  readRSSI(): void;
  readValueForCharacteristic(_: CBCharacteristic): void;
  readValueForDescriptor(_: CBDescriptor): void;
  setNotifyValue(_: boolean, forCharacteristic: CBCharacteristic): void;
  writeValue(_: Data, forCharacteristic: CBCharacteristic, type: CBPeripheral.CBCharacteristicWriteType): void;
  writeValue(_: Data, forDescriptor: CBDescriptor): void;
}

interface CBPeripheralDelegate {
  peripheral(_: CBPeripheral, didModifyServices: CBService[]): void;
  peripheral(_: CBPeripheral, didReadRSSI: number, error?: Error): void;
  peripheral(_: CBPeripheral, didDiscoverServices?: Error): void;
  peripheral(_: CBPeripheral, didDiscoverIncludedServicesForService: CBService, error?: Error): void;
  peripheral(_: CBPeripheral, didDiscoverCharacteristicsForService: CBService, error?: Error): void;
  peripheral(_: CBPeripheral, didUpdateValueForCharacteristic: CBCharacteristic, error?: Error): void;
  peripheral(_: CBPeripheral, didWriteValueForCharacteristic: CBCharacteristic, error?: Error): void;
  peripheral(_: CBPeripheral, didUpdateNotificationStateForCharacteristic: CBCharacteristic, error?: Error): void;
  peripheral(_: CBPeripheral, didDiscoverDescriptorsForCharacteristic: CBCharacteristic, error?: Error): void;
  peripheral(_: CBPeripheral, didUpdateValueForDescriptor: CBDescriptor, error?: Error): void;
  peripheral(_: CBPeripheral, didWriteValueForDescriptor: CBDescriptor, error?: Error): void;
  peripheral(_: CBPeripheral, didOpenL2CAPChannel?: CBL2CAPChannel, error?: Error): void;
  peripheralDidUpdateName(_: CBPeripheral): void;
  peripheralIsReadyToSendWriteWithoutResponse(_: CBPeripheral): void;
}

export class CBPeripheralManager extends CBManager {
  delegate: any;
  setDelegate(_: any);
  isAdvertising: boolean;
  addService(_: CBMutableService): void;
  static createWithDelegateWithQueue(_?: any, queue?: NSObject): CBPeripheralManager;
  static createWithDelegateWithQueueWithOptions(_?: any, queue?: NSObject, options?: Map<string, any>): CBPeripheralManager;
  publishL2CAPChannelWithEncryption(_: boolean): void;
  removeAllServices(): void;
  removeService(_: CBMutableService): void;
  respondToRequest(_: CBATTRequest, withResult: CBError.CBATTError): void;
  setDesiredConnectionLatency(_: CBPeripheralManager.CBPeripheralManagerConnectionLatency, forCentral: CBCentral): void;
  startAdvertising(_?: Map<string, any>): void;
  stopAdvertising(): void;
  unpublishL2CAPChannel(_: number): void;
  updateValue(_: Data, forCharacteristic: CBMutableCharacteristic, onSubscribedCentrals?: CBCentral[]): boolean;
}

interface CBPeripheralManagerDelegate {
  peripheralManager(_: CBPeripheralManager, willRestoreState: Map<string, any>): void;
  peripheralManager(_: CBPeripheralManager, didAddService: CBService, error?: Error): void;
  peripheralManager(_: CBPeripheralManager, central: CBCentral, didSubscribeToCharacteristic: CBCharacteristic): void;
  peripheralManager(_: CBPeripheralManager, central: CBCentral, didUnsubscribeFromCharacteristic: CBCharacteristic): void;
  peripheralManager(_: CBPeripheralManager, didReceiveReadRequest: CBATTRequest): void;
  peripheralManager(_: CBPeripheralManager, didReceiveWriteRequests: CBATTRequest[]): void;
  peripheralManager(_: CBPeripheralManager, didPublishL2CAPChannel: number, error?: Error): void;
  peripheralManager(_: CBPeripheralManager, didUnpublishL2CAPChannel: number, error?: Error): void;
  peripheralManager(_: CBPeripheralManager, didOpenL2CAPChannel?: CBL2CAPChannel, error?: Error): void;
  peripheralManagerDidStartAdvertising(_: CBPeripheralManager, error?: Error): void;
  peripheralManagerDidUpdateState(_: CBPeripheralManager): void;
  peripheralManagerIsReadyToUpdateSubscribers(_: CBPeripheralManager): void;
}

export class CBService extends CBAttribute {
  characteristics: CBCharacteristic[];
  includedServices: CBService[];
  isPrimary: boolean;
  peripheral: CBPeripheral;
}

export class CBUUID extends NSObject {
  static UUIDWithData(_: Data): CBUUID;
  static UUIDWithNSUUID(_: UUID): CBUUID;
  static UUIDWithString(_: string): CBUUID;
  UUIDString: string;
  data: Data;
}

export class NSAsynchronousFetchRequest<ResultType> extends NSPersistentStoreRequest {
  completionBlock: (p1: NSAsynchronousFetchResult<any>) => void;
  estimatedResultCount: number;
  setEstimatedResultCount(_: number);
  fetchRequest: NSFetchRequest<any>;
  // static createWithFetchRequestWithCompletionBlock(_: NSFetchRequest<any>, completionBlock?: (p1: NSAsynchronousFetchResult<any>) => void): NSAsynchronousFetchRequest<ResultType>;
}

export class NSAsynchronousFetchResult<ResultType> extends NSPersistentStoreAsynchronousResult {
  fetchRequest: NSAsynchronousFetchRequest<any>;
  finalResult: ResultType[];
}

export class NSAtomicStore extends NSPersistentStore {
  addCacheNodes(_: Set<any>): void;
  cacheNode(for_: NSManagedObjectID): NSAtomicStoreCacheNode;
  cacheNodes(): Set<any>;
  // @ts-ignore 
  // dupe name w inherited static method  load(): boolean;
  newCacheNode(for_: NSManagedObject): NSAtomicStoreCacheNode;
  newReferenceObject(for_: NSManagedObject): any;
  objectID(for_: NSEntityDescription, withReferenceObject: any): NSManagedObjectID;
  referenceObject(for_: NSManagedObjectID): any;
  save(): boolean;
  updateCacheNode(_: NSAtomicStoreCacheNode, from: NSManagedObject): void;
  willRemoveCacheNodes(_: Set<any>): void;
}

export class NSAtomicStoreCacheNode extends NSObject {
  objectID: NSManagedObjectID;
  propertyCache: Map<string, any>;
  setPropertyCache(_: Map<string, any>);
  static createWithObjectID(_: NSManagedObjectID): NSAtomicStoreCacheNode;
}

export class NSAttributeDescription extends NSPropertyDescription {
  allowsExternalBinaryDataStorage: boolean;
  setAllowsExternalBinaryDataStorage(_: boolean);
  attributeType: NSAttributeDescription.NSAttributeType;
  setAttributeType(_: NSAttributeDescription.NSAttributeType);
  attributeValueClassName: string;
  setAttributeValueClassName(_: string);
  defaultValue: any;
  setDefaultValue(_: any);
  preservesValueInHistoryOnDeletion: boolean;
  setPreservesValueInHistoryOnDeletion(_: boolean);
  valueTransformerName: string;
  setValueTransformerName(_: string);
}

export class NSBatchDeleteRequest extends NSPersistentStoreRequest {
  fetchRequest: NSFetchRequest<any>;
  resultType: NSPersistentStoreResult.NSBatchDeleteRequestResultType;
  setResultType(_: NSPersistentStoreResult.NSBatchDeleteRequestResultType);
  static createWithFetchRequest(_: NSFetchRequest<any>): NSBatchDeleteRequest;
  static createWithObjectiDs(_: NSManagedObjectID[]): NSBatchDeleteRequest;
}

export class NSBatchDeleteResult extends NSPersistentStoreResult {
  result: any;
  resultType: NSPersistentStoreResult.NSBatchDeleteRequestResultType;
}

export class NSBatchInsertRequest extends NSPersistentStoreRequest {
  entity: NSEntityDescription;
  entityName: string;
  objectsToInsert: Map<string, any>[];
  setObjectsToInsert(_: Map<string, any>[]);
  resultType: NSPersistentStoreResult.NSBatchInsertRequestResultType;
  setResultType(_: NSPersistentStoreResult.NSBatchInsertRequestResultType);
  static createWithEntityWithObjects(_: NSEntityDescription, objects: Map<string, any>[]): NSBatchInsertRequest;
  static createWithEntityNameWithObjects(_: string, objects: Map<string, any>[]): NSBatchInsertRequest;
}

export class NSBatchInsertResult extends NSPersistentStoreResult {
  result: any;
  resultType: NSPersistentStoreResult.NSBatchInsertRequestResultType;
}

export class NSBatchUpdateRequest extends NSPersistentStoreRequest {
  entity: NSEntityDescription;
  entityName: string;
  includesSubentities: boolean;
  setIncludesSubentities(_: boolean);
  predicate: NSPredicate;
  setPredicate(_: NSPredicate);
  propertiesToUpdate: Map<any, any>;
  setPropertiesToUpdate(_: Map<any, any>);
  resultType: NSPersistentStoreResult.NSBatchUpdateRequestResultType;
  setResultType(_: NSPersistentStoreResult.NSBatchUpdateRequestResultType);
  static createWithEntity(_: NSEntityDescription): NSBatchUpdateRequest;
  static createWithEntityName(_: string): NSBatchUpdateRequest;
}

export class NSBatchUpdateResult extends NSPersistentStoreResult {
  result: any;
  resultType: NSPersistentStoreResult.NSBatchUpdateRequestResultType;
}

export class NSConstraintConflict extends NSObject {
  conflictingObjects: NSManagedObject[];
  conflictingSnapshots: Map<any, any>[];
  constraint: string[];
  constraintValues: Map<string, any>;
  databaseObject: NSManagedObject;
  databaseSnapshot: Map<string, any>;
}

export class NSCoreDataCoreSpotlightDelegate extends NSObject {
  attributeSetForObject(_: NSManagedObject): CSSearchableItemAttributeSet;
  domainIdentifier(): string;
  indexName(): string;
  static createWithForStoreWithDescriptionWithModel(_: NSPersistentStoreDescription, model: NSManagedObjectModel): NSCoreDataCoreSpotlightDelegate;
  searchableIndex(_: CSSearchableIndex, reindexAllSearchableItemsWithAcknowledgementHandler: () => void): void;
  searchableIndex(_: CSSearchableIndex, reindexSearchableItemsWithIdentifiers: string[], acknowledgementHandler: () => void): void;
}

export class NSDerivedAttributeDescription extends NSAttributeDescription {
  derivationExpression: NSExpression;
  setDerivationExpression(_: NSExpression);
}

export class NSEntityDescription extends NSObject {
  static entity(forEntityName: string, in_: NSManagedObjectContext): NSEntityDescription;
  static insertNewObject(forEntityName: string, into: NSManagedObjectContext): NSManagedObject;
  isAbstract: boolean;
  setAbstract(_: boolean);
  attributesByName: Map<string, NSAttributeDescription>;
  coreSpotlightDisplayNameExpression: NSExpression;
  setCoreSpotlightDisplayNameExpression(_: NSExpression);
  indexes: NSFetchIndexDescription[];
  setIndexes(_: NSFetchIndexDescription[]);
  managedObjectClassName: string;
  setManagedObjectClassName(_: string);
  managedObjectModel: NSManagedObjectModel;
  name: string;
  setName(_: string);
  properties: NSPropertyDescription[];
  setProperties(_: NSPropertyDescription[]);
  propertiesByName: Map<string, NSPropertyDescription>;
  relationshipsByName: Map<string, NSRelationshipDescription>;
  renamingIdentifier: string;
  setRenamingIdentifier(_: string);
  subentities: NSEntityDescription[];
  setSubentities(_: NSEntityDescription[]);
  subentitiesByName: Map<string, NSEntityDescription>;
  superentity: NSEntityDescription;
  uniquenessConstraints: any[][];
  setUniquenessConstraints(_: any[][]);
  userInfo: Map<any, any>;
  setUserInfo(_: Map<any, any>);
  versionHash: Data;
  versionHashModifier: string;
  setVersionHashModifier(_: string);
  isKindOf(entity: NSEntityDescription): boolean;
  relationships(forDestination: NSEntityDescription): NSRelationshipDescription[];
}

export class NSEntityMapping extends NSObject {
  attributeMappings: NSPropertyMapping[];
  setAttributeMappings(_: NSPropertyMapping[]);
  destinationEntityName: string;
  setDestinationEntityName(_: string);
  destinationEntityVersionHash: Data;
  setDestinationEntityVersionHash(_: Data);
  entityMigrationPolicyClassName: string;
  setEntityMigrationPolicyClassName(_: string);
  mappingType: NSEntityMapping.NSEntityMappingType;
  setMappingType(_: NSEntityMapping.NSEntityMappingType);
  name: string;
  setName(_: string);
  relationshipMappings: NSPropertyMapping[];
  setRelationshipMappings(_: NSPropertyMapping[]);
  sourceEntityName: string;
  setSourceEntityName(_: string);
  sourceEntityVersionHash: Data;
  setSourceEntityVersionHash(_: Data);
  sourceExpression: NSExpression;
  setSourceExpression(_: NSExpression);
  userInfo: Map<any, any>;
  setUserInfo(_: Map<any, any>);
}

export class NSEntityMigrationPolicy extends NSObject {
  begin(_: NSEntityMapping, with_: NSMigrationManager): boolean;
  createDestinationInstances(forSource: NSManagedObject, in_: NSEntityMapping, manager: NSMigrationManager): boolean;
  createRelationships(forDestination: NSManagedObject, in_: NSEntityMapping, manager: NSMigrationManager): boolean;
  endEntityMapping(manager: NSEntityMapping, error: NSMigrationManager): boolean;
  endInstanceCreation(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
  endRelationshipCreation(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
  performCustomValidation(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
}

export class NSExpressionDescription extends NSPropertyDescription {
  expression: NSExpression;
  setExpression(_: NSExpression);
  expressionResultType: NSAttributeDescription.NSAttributeType;
  setExpressionResultType(_: NSAttributeDescription.NSAttributeType);
}

export class NSFetchIndexDescription extends NSObject {
  elements: NSFetchIndexElementDescription[];
  setElements(_: NSFetchIndexElementDescription[]);
  entity: NSEntityDescription;
  name: string;
  setName(_: string);
  partialIndexPredicate: NSPredicate;
  setPartialIndexPredicate(_: NSPredicate);
  static createWithNameWithElements(_: string, elements?: NSFetchIndexElementDescription[]): NSFetchIndexDescription;
}

export class NSFetchIndexElementDescription extends NSObject {
  isAscending: boolean;
  setAscending(_: boolean);
  collationType: NSFetchIndexElementDescription.NSFetchIndexElementType;
  setCollationType(_: NSFetchIndexElementDescription.NSFetchIndexElementType);
  indexDescription: NSFetchIndexDescription;
  property: NSPropertyDescription;
  propertyName: string;
  static createWithPropertyWithCollationType(_: NSPropertyDescription, collationType: NSFetchIndexElementDescription.NSFetchIndexElementType): NSFetchIndexElementDescription;
}

export class NSFetchRequest<ResultType> extends NSPersistentStoreRequest {
  entity: NSEntityDescription;
  setEntity(_: NSEntityDescription);
  entityName: string;
  fetchBatchSize: number;
  setFetchBatchSize(_: number);
  fetchLimit: number;
  setFetchLimit(_: number);
  fetchOffset: number;
  setFetchOffset(_: number);
  havingPredicate: NSPredicate;
  setHavingPredicate(_: NSPredicate);
  includesPendingChanges: boolean;
  setIncludesPendingChanges(_: boolean);
  includesPropertyValues: boolean;
  setIncludesPropertyValues(_: boolean);
  includesSubentities: boolean;
  setIncludesSubentities(_: boolean);
  predicate: NSPredicate;
  setPredicate(_: NSPredicate);
  propertiesToFetch: any[];
  setPropertiesToFetch(_: any[]);
  propertiesToGroupBy: any[];
  setPropertiesToGroupBy(_: any[]);
  relationshipKeyPathsForPrefetching: string[];
  setRelationshipKeyPathsForPrefetching(_: string[]);
  resultType: NSFetchRequest.NSFetchRequestResultType;
  setResultType(_: NSFetchRequest.NSFetchRequestResultType);
  returnsDistinctResults: boolean;
  setReturnsDistinctResults(_: boolean);
  returnsObjectsAsFaults: boolean;
  setReturnsObjectsAsFaults(_: boolean);
  shouldRefreshRefetchedObjects: boolean;
  setShouldRefreshRefetchedObjects(_: boolean);
  sortDescriptors: NSSortDescriptor[];
  setSortDescriptors(_: NSSortDescriptor[]);
  execute(): ResultType[];
  // static createWithEntityName(_: string): NSFetchRequest<ResultType>;
}

export class NSFetchRequestExpression extends NSExpression {
  static expression(forFetch: NSExpression, context: NSExpression, countOnly: boolean): NSExpression;
  contextExpression: NSExpression;
  isCountOnlyRequest: boolean;
  requestExpression: NSExpression;
}

interface NSFetchRequestResult {
}

export class NSFetchedPropertyDescription extends NSPropertyDescription {
  fetchRequest: NSFetchRequest<any>;
  setFetchRequest(_: NSFetchRequest<any>);
}

export class NSFetchedResultsController<ResultType> extends NSObject {
  static deleteCache(withName?: string): void;
  cacheName: string;
  delegate: any;
  setDelegate(_: any);
  fetchRequest: NSFetchRequest<any>;
  fetchedObjects: ResultType[];
  managedObjectContext: NSManagedObjectContext;
  sectionIndexTitles: string[];
  sectionNameKeyPath: string;
  sections: any[];
  indexPath(forObject: ResultType): IndexPath;
  // static createWithFetchRequestWithManagedObjectContextWithSectionNameKeyPathWithCacheName(_: NSFetchRequest<any>, managedObjectContext: NSManagedObjectContext, sectionNameKeyPath?: string, cacheName?: string): NSFetchedResultsController<ResultType>;
  object(at: IndexPath): ResultType;
  performFetch(): boolean;
  section(forSectionIndexTitle: string, at: number): number;
  sectionIndexTitle(forSectionName: string): string;
}

interface NSFetchedResultsControllerDelegate {
  controller(_: NSFetchedResultsController<any>, didChangeContentWith: NSDiffableDataSourceSnapshotReference<string, NSManagedObjectID>): void;
  controller(_: NSFetchedResultsController<any>, didChangeContentWith: CollectionDifference<any>): void;
  controller(_: NSFetchedResultsController<any>, didChange: any, at?: IndexPath, for_?: NSFetchedResultsController.NSFetchedResultsChangeType, newIndexPath?: IndexPath): void;
  controller(_: NSFetchedResultsController<any>, didChange: any, atSectionIndex: number, for_: NSFetchedResultsController.NSFetchedResultsChangeType): void;
  controller(_: NSFetchedResultsController<any>, sectionIndexTitleForSectionName: string): string;
  controllerDidChangeContent(_: NSFetchedResultsController<any>): void;
  controllerWillChangeContent(_: NSFetchedResultsController<any>): void;
}

interface NSFetchedResultsSectionInfo {
  indexTitle: string;
  name: string;
  numberOfObjects: number;
  objects: any[];
}

export class NSIncrementalStore extends NSPersistentStore {
  static identifierForNewStore(at: URL): any;
  executeRequest(withContext: NSPersistentStoreRequest, error?: NSManagedObjectContext): any;
  managedObjectContextDidRegisterObjects(with_: NSManagedObjectID[]): void;
  managedObjectContextDidUnregisterObjects(with_: NSManagedObjectID[]): void;
  newObjectID(for_: NSEntityDescription, referenceObject: any): NSManagedObjectID;
  newValueForRelationship(forObjectWithID: NSRelationshipDescription, withContext: NSManagedObjectID, error?: NSManagedObjectContext): any;
  newValuesForObjectWithID(withContext: NSManagedObjectID, error: NSManagedObjectContext): NSIncrementalStoreNode;
  obtainPermanentIDsForObjects(error: NSManagedObject[]): NSManagedObjectID[];
  referenceObject(for_: NSManagedObjectID): any;
}

export class NSIncrementalStoreNode extends NSObject {
  objectID: NSManagedObjectID;
  static createWithObjectIDWithValuesWithVersion(_: NSManagedObjectID, withValues: Map<string, any>, version: number): NSIncrementalStoreNode;
  update(withValues: Map<string, any>, version: number): void;
  // @ts-ignore 
  value(for_: NSPropertyDescription): any;
}

export class NSManagedObject extends NSObject {
  //  static entity(): NSEntityDescription;
  static fetchRequest(): NSFetchRequest<any>;
  isDeleted: boolean;
  //   entity: NSEntityDescription;
  isFault: boolean;
  faultingState: number;
  hasChanges: boolean;
  hasPersistentChangedValues: boolean;
  isInserted: boolean;
  managedObjectContext: NSManagedObjectContext;
  objectID: NSManagedObjectID;
  isUpdated: boolean;
  static contextShouldIgnoreUnmodeledPropertyChanges: boolean;
  awakeFromFetch(): void;
  awakeFromInsert(): void;
  awake(fromSnapshotEvents: NSManagedObject.NSSnapshotEventType): void;
  changedValues(): Map<string, any>;
  changedValuesForCurrentEvent(): Map<string, any>;
  committedValues(forKeys?: string[]): Map<string, any>;
  didAccessValue(forKey?: string): void;
  didSave(): void;
  didTurnIntoFault(): void;
  hasFault(forRelationshipNamed: string): boolean;
  static createWithContext(_: NSManagedObjectContext): NSManagedObject;
  static createWithEntityWithInsertIntoManagedObjectContext(_: NSEntityDescription, insertIntoManagedObjectContext?: NSManagedObjectContext): NSManagedObject;
  objectIDs(forRelationshipNamed: string): NSManagedObjectID[];
  // @ts-ignore 
  observationInfo(): any;
  prepareForDeletion(): void;
  primitiveValue(forKey: string): any;
  setObservationInfo(_?: any): void;
  setPrimitiveValue(_?: any, forKey?: string): void;
  validateForDelete(): boolean;
  validateForInsert(): boolean;
  validateForUpdate(): boolean;
  willAccessValue(forKey?: string): void;
  willSave(): void;
  willTurnIntoFault(): void;
}

export class NSManagedObjectContext extends NSObject {
  static mergeChanges(fromRemoteContextSave: Map<any, any>, into: NSManagedObjectContext[]): void;
  automaticallyMergesChangesFromParent: boolean;
  setAutomaticallyMergesChangesFromParent(_: boolean);
  concurrencyType: NSManagedObjectContext.NSManagedObjectContextConcurrencyType;
  deletedObjects: Set<any>;
  hasChanges: boolean;
  insertedObjects: Set<any>;
  mergePolicy: any;
  setMergePolicy(_: any);
  name: string;
  setName(_: string);
  parentContext: NSManagedObjectContext;
  setParentContext(_: NSManagedObjectContext);
  persistentStoreCoordinator: NSPersistentStoreCoordinator;
  setPersistentStoreCoordinator(_: NSPersistentStoreCoordinator);
  propagatesDeletesAtEndOfEvent: boolean;
  setPropagatesDeletesAtEndOfEvent(_: boolean);
  queryGenerationToken: NSQueryGenerationToken;
  registeredObjects: Set<any>;
  retainsRegisteredObjects: boolean;
  setRetainsRegisteredObjects(_: boolean);
  shouldDeleteInaccessibleFaults: boolean;
  setShouldDeleteInaccessibleFaults(_: boolean);
  stalenessInterval: number;
  setStalenessInterval(_: number);
  transactionAuthor: string;
  setTransactionAuthor(_: string);
  undoManager: UndoManager;
  setUndoManager(_: UndoManager);
  updatedObjects: Set<any>;
  userInfo: Map<any, any>;
  assign(_: any, to: NSPersistentStore): void;
  countForFetchRequest(error: NSFetchRequest<any>): number;
  delete(_: NSManagedObject): void;
  detectConflicts(for_: NSManagedObject): void;
  fetch(_: NSFetchRequest<any>): any[];
  executeRequest(error: NSPersistentStoreRequest): NSPersistentStoreResult;
  existingObjectWithID(error: NSManagedObjectID): NSManagedObject;
  static createWithConcurrencyType(_: NSManagedObjectContext.NSManagedObjectContextConcurrencyType): NSManagedObjectContext;
  insert(_: NSManagedObject): void;
  mergeChanges(fromContextDidSave: Notification): void;
  registeredObject(for_: NSManagedObjectID): NSManagedObject;
  object(with_: NSManagedObjectID): NSManagedObject;
  obtainPermanentIDsForObjects(error: NSManagedObject[]): boolean;
  // @ts-ignore 
  perform(_: () => void): void;
  performAndWait(_: () => void): void;
  processPendingChanges(): void;
  redo(): void;
  refreshAllObjects(): void;
  refresh(_: NSManagedObject, mergeChanges: boolean): void;
  reset(): void;
  rollback(): void;
  save(): boolean;
  setQueryGenerationFromToken(error?: NSQueryGenerationToken): boolean;
  shouldHandleInaccessibleFault(_: NSManagedObject, for_: NSManagedObjectID, triggeredByProperty?: NSPropertyDescription): boolean;
  undo(): void;
}

export class NSManagedObjectID extends NSObject {
  entity: NSEntityDescription;
  persistentStore: NSPersistentStore;
  isTemporaryID: boolean;
  uriRepresentation(): URL;
}

export class NSManagedObjectModel extends NSObject {
  static mergedModel(from?: Bundle[]): NSManagedObjectModel;
  static mergedModel(from?: Bundle[], forStoreMetadata?: Map<string, any>): NSManagedObjectModel;
  configurations: string[];
  entities: NSEntityDescription[];
  setEntities(_: NSEntityDescription[]);
  entitiesByName: Map<string, NSEntityDescription>;
  entityVersionHashesByName: Map<string, Data>;
  fetchRequestTemplatesByName: Map<string, NSFetchRequest<any>>;
  localizationDictionary: Map<string, string>;
  setLocalizationDictionary(_: Map<string, string>);
  versionIdentifiers: Set<any>;
  setVersionIdentifiers(_: Set<any>);
  // dupe name w instance property   entities(forConfigurationName?: string): NSEntityDescription[];
  fetchRequestFromTemplate(withName: string, substitutionVariables: Map<string, any>): NSFetchRequest<any>;
  fetchRequestTemplate(forName: string): NSFetchRequest<any>;
  static createWithContentsOf(_: URL): NSManagedObjectModel;
  isConfiguration(withName?: string, compatibleWithStoreMetadata?: Map<string, any>): boolean;
  setEntities(_: NSEntityDescription[], forConfigurationName: string): void;
  setFetchRequestTemplate(_?: NSFetchRequest<any>, forName?: string): void;
}

export class NSMappingModel extends NSObject {
  static inferredMappingModelForSourceModel(destinationModel: NSManagedObjectModel, error: NSManagedObjectModel): NSMappingModel;
  entityMappings: NSEntityMapping[];
  setEntityMappings(_: NSEntityMapping[]);
  entityMappingsByName: Map<string, NSEntityMapping>;
  static createWithContentsOf(_?: URL): NSMappingModel;
}

export class NSMergeConflict extends NSObject {
  cachedSnapshot: Map<string, any>;
  newVersionNumber: number;
  objectSnapshot: Map<string, any>;
  oldVersionNumber: number;
  persistedSnapshot: Map<string, any>;
  sourceObject: NSManagedObject;
  static createWithSourceWithNewVersionWithOldVersionWithCachedSnapshotWithPersistedSnapshot(_: NSManagedObject, newVersion: number, oldVersion: number, cachedSnapshot?: Map<string, any>, persistedSnapshot?: Map<string, any>): NSMergeConflict;
}

export class NSMergePolicy extends NSObject {
  mergeType: NSMergePolicy.NSMergePolicyType;
  static errorMergePolicy: NSMergePolicy;
  static mergeByPropertyObjectTrumpMergePolicy: NSMergePolicy;
  static mergeByPropertyStoreTrumpMergePolicy: NSMergePolicy;
  static overwriteMergePolicy: NSMergePolicy;
  static rollbackMergePolicy: NSMergePolicy;
  static createWithMergeType(_: NSMergePolicy.NSMergePolicyType): NSMergePolicy;
  resolve(mergeConflicts: any[]): boolean;
  resolve(constraintConflicts: NSConstraintConflict[]): boolean;
  resolve(optimisticLockingConflicts: NSMergeConflict[]): boolean;
}

export class NSMigrationManager extends NSObject {
  currentEntityMapping: NSEntityMapping;
  destinationContext: NSManagedObjectContext;
  destinationModel: NSManagedObjectModel;
  mappingModel: NSMappingModel;
  migrationProgress: number;
  sourceContext: NSManagedObjectContext;
  sourceModel: NSManagedObjectModel;
  userInfo: Map<any, any>;
  setUserInfo(_: Map<any, any>);
  usesStoreSpecificMigrationManager: boolean;
  setUsesStoreSpecificMigrationManager(_: boolean);
  associate(sourceInstance: NSManagedObject, withDestinationInstance: NSManagedObject, for_: NSEntityMapping): void;
  cancelMigrationWithError(_: Error): void;
  destinationEntity(for_: NSEntityMapping): NSEntityDescription;
  destinationInstances(forEntityMappingName: string, sourceInstances?: NSManagedObject[]): NSManagedObject[];
  static createWithSourceModelWithDestinationModel(_: NSManagedObjectModel, destinationModel: NSManagedObjectModel): NSMigrationManager;
  migrateStore(from: URL, sourceType: string, options?: Map<any, any>, with_?: NSMappingModel, toDestinationURL?: URL, destinationType?: string, destinationOptions?: Map<any, any>): boolean;
  reset(): void;
  sourceEntity(for_: NSEntityMapping): NSEntityDescription;
  sourceInstances(forEntityMappingName: string, destinationInstances?: NSManagedObject[]): NSManagedObject[];
}

export class NSPersistentCloudKitContainer extends NSPersistentContainer {
  initializeCloudKitSchemaWithOptions(error: NSPersistentCloudKitContainer.NSPersistentCloudKitContainerSchemaInitializationOptions): boolean;
  record(for_: NSManagedObjectID): CKRecord;
  recordID(for_: NSManagedObjectID): CKRecord.ID;
  recordIDs(for_: NSManagedObjectID[]): Map<NSManagedObjectID, CKRecord.ID>;
  records(for_: NSManagedObjectID[]): Map<NSManagedObjectID, CKRecord>;
}

export class NSPersistentCloudKitContainerOptions extends NSObject {
  containerIdentifier: string;
  static createWithContainerIdentifier(_: string): NSPersistentCloudKitContainerOptions;
}

export class NSPersistentContainer extends NSObject {
  static defaultDirectoryURL(): URL;
  managedObjectModel: NSManagedObjectModel;
  name: string;
  persistentStoreCoordinator: NSPersistentStoreCoordinator;
  persistentStoreDescriptions: NSPersistentStoreDescription[];
  setPersistentStoreDescriptions(_: NSPersistentStoreDescription[]);
  viewContext: NSManagedObjectContext;
  static createWithName(_: string): NSPersistentContainer;
  static createWithNameWithManagedObjectModel(_: string, managedObjectModel: NSManagedObjectModel): NSPersistentContainer;
  loadPersistentStores(completionHandler?: (p1: NSPersistentStoreDescription, p2: Error) => void): void;
  newBackgroundContext(): NSManagedObjectContext;
  performBackgroundTask(_: (p1: NSManagedObjectContext) => void): void;
}

export class NSPersistentHistoryChange extends NSObject {
  //  static entityDescription(with_: NSManagedObjectContext): NSEntityDescription;
  changeID: number;
  changeType: NSPersistentHistoryChange.NSPersistentHistoryChangeType;
  changedObjectID: NSManagedObjectID;
  tombstone: Map<any, any>;
  transaction: NSPersistentHistoryTransaction;
  updatedProperties: Set<any>;
  static entityDescription: NSEntityDescription;
  static fetchRequest: NSFetchRequest<any>;
}

export class NSPersistentHistoryChangeRequest extends NSPersistentStoreRequest {
  static createWithDeleteHistoryBeforeDate(before: Date): NSPersistentHistoryChangeRequest;
  static createWithDeleteHistoryBeforeToken(before?: NSPersistentHistoryToken): NSPersistentHistoryChangeRequest;
  static createWithDeleteHistoryBeforeTransaction(before?: NSPersistentHistoryTransaction): NSPersistentHistoryChangeRequest;
  static createWithFetchHistoryAfterDate(after: Date): NSPersistentHistoryChangeRequest;
  static createWithFetchHistoryAfterToken(after?: NSPersistentHistoryToken): NSPersistentHistoryChangeRequest;
  static createWithFetchHistoryAfterTransaction(after?: NSPersistentHistoryTransaction): NSPersistentHistoryChangeRequest;
  static createWithFetchHistoryWithFetchRequest(withFetch: NSFetchRequest<any>): NSPersistentHistoryChangeRequest;
  fetchRequest: NSFetchRequest<any>;
  setFetchRequest(_: NSFetchRequest<any>);
  resultType: NSPersistentStoreResult.NSPersistentHistoryResultType;
  setResultType(_: NSPersistentStoreResult.NSPersistentHistoryResultType);
  token: NSPersistentHistoryToken;
}

export class NSPersistentHistoryResult extends NSPersistentStoreResult {
  result: any;
  resultType: NSPersistentStoreResult.NSPersistentHistoryResultType;
}

export class NSPersistentHistoryToken extends NSObject {
}

export class NSPersistentHistoryTransaction extends NSObject {
  //  static entityDescription(with_: NSManagedObjectContext): NSEntityDescription;
  author: string;
  bundleID: string;
  changes: NSPersistentHistoryChange[];
  contextName: string;
  processID: string;
  storeID: string;
  timestamp: Date;
  token: NSPersistentHistoryToken;
  transactionNumber: number;
  static entityDescription: NSEntityDescription;
  static fetchRequest: NSFetchRequest<any>;
  objectIDNotification(): Notification;
}

export class NSPersistentStore extends NSObject {
  static metadataForPersistentStoreWithURL(error: URL): Map<string, any>;
  static migrationManagerClass(): typeof NSObject;
  static setMetadata(_?: Map<string, any>, forPersistentStoreAt?: URL): boolean;
  URL: URL;
  setURL(_: URL);
  configurationName: string;
  coreSpotlightExporter: NSCoreDataCoreSpotlightDelegate;
  identifier: string;
  setIdentifier(_: string);
  metadata: Map<string, any>;
  setMetadata(_: Map<string, any>);
  options: Map<any, any>;
  persistentStoreCoordinator: NSPersistentStoreCoordinator;
  isReadOnly: boolean;
  setReadOnly(_: boolean);
  type: string;
  didAdd(to: NSPersistentStoreCoordinator): void;
  loadMetadata(): boolean;
  willRemove(from?: NSPersistentStoreCoordinator): void;
}

export class NSPersistentStoreAsynchronousResult extends NSPersistentStoreResult {
  managedObjectContext: NSManagedObjectContext;
  operationError: Error;
  progress: Progress;
  cancel(): void;
}

export class NSPersistentStoreCoordinator extends NSObject {
  static elementsDerived(fromExternalRecordAt: URL): Map<any, any>;
  static metadataForPersistentStore(ofType: string, at: URL, options?: Map<any, any>): Map<string, any>;
  static registerStoreClass(_?: typeof NSObject, forStoreType?: string): void;
  static setMetadata(_?: Map<string, any>, forPersistentStoreOfType?: string, at?: URL, options?: Map<any, any>): boolean;
  managedObjectModel: NSManagedObjectModel;
  name: string;
  setName(_: string);
  persistentStores: NSPersistentStore[];
  static registeredStoreTypes: Map<string, NSValue>;
  url(for_: NSPersistentStore): URL;
  addPersistentStore(with_: NSPersistentStoreDescription, completionHandler?: (p1: NSPersistentStoreDescription, p2: Error) => void): void;
  addPersistentStore(ofType: string, configurationName?: string, at?: URL, options?: Map<any, any>): NSPersistentStore;
  currentPersistentHistoryToken(fromStores?: any[]): NSPersistentHistoryToken;
  destroyPersistentStore(at: URL, ofType: string, options?: Map<any, any>): boolean;
  executeRequest(withContext: NSPersistentStoreRequest, error: NSManagedObjectContext): any;
  importStore(withIdentifier?: string, fromExternalRecordsDirectoryAt?: URL, to?: URL, options?: Map<any, any>, ofType?: string): NSPersistentStore;
  static createWithManagedObjectModel(_: NSManagedObjectModel): NSPersistentStoreCoordinator;
  managedObjectID(forURIRepresentation: URL): NSManagedObjectID;
  metadata(for_: NSPersistentStore): Map<string, any>;
  migratePersistentStore(toURL: NSPersistentStore, options: URL, withType?: Map<any, any>, error?: string): NSPersistentStore;
  // @ts-ignore 
  perform(_: () => void): void;
  performAndWait(_: () => void): void;
  persistentStore(for_: URL): NSPersistentStore;
  remove(_: NSPersistentStore): boolean;
  replacePersistentStore(at: URL, destinationOptions?: Map<any, any>, withPersistentStoreFrom?: URL, sourceOptions?: Map<any, any>, ofType?: string): boolean;
  setMetadata(_?: Map<string, any>, for_?: NSPersistentStore): void;
  setURL(_: URL, for_: NSPersistentStore): boolean;
}

export class NSPersistentStoreDescription extends NSObject {
  URL: URL;
  setURL(_: URL);
  cloudKitContainerOptions: NSPersistentCloudKitContainerOptions;
  setCloudKitContainerOptions(_: NSPersistentCloudKitContainerOptions);
  configuration: string;
  setConfiguration(_: string);
  options: Map<string, NSObject>;
  isReadOnly: boolean;
  setReadOnly(_: boolean);
  shouldAddStoreAsynchronously: boolean;
  setShouldAddStoreAsynchronously(_: boolean);
  shouldInferMappingModelAutomatically: boolean;
  setShouldInferMappingModelAutomatically(_: boolean);
  shouldMigrateStoreAutomatically: boolean;
  setShouldMigrateStoreAutomatically(_: boolean);
  sqlitePragmas: Map<string, NSObject>;
  timeout: number;
  setTimeout(_: number);
  type: string;
  setType(_: string);
  static createWithUrl(_: URL): NSPersistentStoreDescription;
  setOption(_?: NSObject, forKey?: string): void;
  // @ts-ignore 
  setValue(_?: NSObject, forPragmaNamed?: string): void;
}

export class NSPersistentStoreRequest extends NSObject {
  affectedStores: NSPersistentStore[];
  setAffectedStores(_: NSPersistentStore[]);
  requestType: NSPersistentStoreRequest.NSPersistentStoreRequestType;
}

export class NSPersistentStoreResult extends NSObject {
}

export class NSPropertyDescription extends NSObject {
  entity: NSEntityDescription;
  isIndexedBySpotlight: boolean;
  setIndexedBySpotlight(_: boolean);
  name: string;
  setName(_: string);
  isOptional: boolean;
  setOptional(_: boolean);
  renamingIdentifier: string;
  setRenamingIdentifier(_: string);
  isTransient: boolean;
  setTransient(_: boolean);
  userInfo: Map<any, any>;
  setUserInfo(_: Map<any, any>);
  validationPredicates: NSPredicate[];
  validationWarnings: any[];
  versionHash: Data;
  versionHashModifier: string;
  setVersionHashModifier(_: string);
  setValidationPredicates(_?: NSPredicate[], withValidationWarnings?: string[]): void;
}

export class NSPropertyMapping extends NSObject {
  name: string;
  setName(_: string);
  userInfo: Map<any, any>;
  setUserInfo(_: Map<any, any>);
  valueExpression: NSExpression;
  setValueExpression(_: NSExpression);
}

export class NSQueryGenerationToken extends NSObject {
  static currentQueryGenerationToken: NSQueryGenerationToken;
}

export class NSRelationshipDescription extends NSPropertyDescription {
  deleteRule: NSRelationshipDescription.NSDeleteRule;
  setDeleteRule(_: NSRelationshipDescription.NSDeleteRule);
  destinationEntity: NSEntityDescription;
  setDestinationEntity(_: NSEntityDescription);
  inverseRelationship: NSRelationshipDescription;
  setInverseRelationship(_: NSRelationshipDescription);
  maxCount: number;
  setMaxCount(_: number);
  minCount: number;
  setMinCount(_: number);
  isOrdered: boolean;
  setOrdered(_: boolean);
  isToMany: boolean;
}

export class NSSaveChangesRequest extends NSPersistentStoreRequest {
  deletedObjects: Set<any>;
  insertedObjects: Set<any>;
  lockedObjects: Set<any>;
  updatedObjects: Set<any>;
}

// export function CFAbsoluteTimeGetCurrent(): number;

// export function CFAllocatorAllocate(allocator: any, size: number, hint: number): any;

// export function CFAllocatorCreate(allocator: any, context: CFAllocatorContext): any;

// export function CFAllocatorDeallocate(allocator: any, ptr: any): void;

// export function CFAllocatorGetContext(allocator: any, context: CFAllocatorContext): void;

// export function CFAllocatorGetDefault(): any;

// export function CFAllocatorGetPreferredSizeForSize(allocator: any, size: number, hint: number): number;

// export function CFAllocatorGetTypeID(): number;

// export function CFAllocatorReallocate(allocator: any, ptr: any, newsize: number, hint: number): any;

// export function CFAllocatorSetDefault(allocator: any): void;

// export function CFArrayAppendArray(theArray: any[], otherArray: any[], otherRange: CFRange): void;

// export function CFArrayAppendValue(theArray: any[], value: any): void;

// export function CFArrayApplyFunction(theArray: any[], range: CFRange, applier: (p1: any, p2: any) => void, context: any): void;

// export function CFArrayBSearchValues(theArray: any[], range: CFRange, value: any, comparator: (p1: any, p2: any, p3: any) => CFBase.CFComparisonResult, context: any): number;

// export function CFArrayContainsValue(theArray: any[], range: CFRange, value: any): boolean;

// export function CFArrayCreate(allocator: any, values: any, numValues: number, callBacks: CFArrayCallBacks): any[];

// export function CFArrayCreateCopy(allocator: any, theArray: any[]): any[];

// export function CFArrayCreateMutable(allocator: any, capacity: number, callBacks: CFArrayCallBacks): any[];

// export function CFArrayCreateMutableCopy(allocator: any, capacity: number, theArray: any[]): any[];

// export function CFArrayExchangeValuesAtIndices(theArray: any[], idx1: number, idx2: number): void;

// export function CFArrayGetCount(theArray: any[]): number;

// export function CFArrayGetCountOfValue(theArray: any[], range: CFRange, value: any): number;

// export function CFArrayGetFirstIndexOfValue(theArray: any[], range: CFRange, value: any): number;

// export function CFArrayGetLastIndexOfValue(theArray: any[], range: CFRange, value: any): number;

// export function CFArrayGetTypeID(): number;

// export function CFArrayGetValueAtIndex(theArray: any[], idx: number): any;

// export function CFArrayGetValues(theArray: any[], range: CFRange, values: any): void;

// export function CFArrayInsertValueAtIndex(theArray: any[], idx: number, value: any): void;

// export function CFArrayRemoveAllValues(theArray: any[]): void;

// export function CFArrayRemoveValueAtIndex(theArray: any[], idx: number): void;

// export function CFArrayReplaceValues(theArray: any[], range: CFRange, newValues: any, newCount: number): void;

// export function CFArraySetValueAtIndex(theArray: any[], idx: number, value: any): void;

// export function CFArraySortValues(theArray: any[], range: CFRange, comparator: (p1: any, p2: any, p3: any) => CFBase.CFComparisonResult, context: any): void;

// export function CFAttributedStringBeginEditing(aStr: NSAttributedString): void;

// export function CFAttributedStringCreate(alloc: any, str: string, attributes: Map<any, any>): NSAttributedString;

// export function CFAttributedStringCreateCopy(alloc: any, aStr: NSAttributedString): NSAttributedString;

// export function CFAttributedStringCreateMutable(alloc: any, maxLength: number): NSAttributedString;

// export function CFAttributedStringCreateMutableCopy(alloc: any, maxLength: number, aStr: NSAttributedString): NSAttributedString;

// export function CFAttributedStringCreateWithSubstring(alloc: any, aStr: NSAttributedString, range: CFRange): NSAttributedString;

// export function CFAttributedStringEndEditing(aStr: NSAttributedString): void;

// export function CFAttributedStringGetAttribute(aStr: NSAttributedString, loc: number, attrName: string, effectiveRange: CFRange): any;

// export function CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: NSAttributedString, loc: number, attrName: string, inRange: CFRange, longestEffectiveRange: CFRange): any;

// export function CFAttributedStringGetAttributes(aStr: NSAttributedString, loc: number, effectiveRange: CFRange): Map<any, any>;

// export function CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: NSAttributedString, loc: number, inRange: CFRange, longestEffectiveRange: CFRange): Map<any, any>;

// export function CFAttributedStringGetLength(aStr: NSAttributedString): number;

// export function CFAttributedStringGetMutableString(aStr: NSAttributedString): string;

// export function CFAttributedStringGetString(aStr: NSAttributedString): string;

// export function CFAttributedStringGetTypeID(): number;

// export function CFAttributedStringRemoveAttribute(aStr: NSAttributedString, range: CFRange, attrName: string): void;

// export function CFAttributedStringReplaceAttributedString(aStr: NSAttributedString, range: CFRange, replacement: NSAttributedString): void;

// export function CFAttributedStringReplaceString(aStr: NSAttributedString, range: CFRange, replacement: string): void;

// export function CFAttributedStringSetAttribute(aStr: NSAttributedString, range: CFRange, attrName: string, value: any): void;

// export function CFAttributedStringSetAttributes(aStr: NSAttributedString, range: CFRange, replacement: Map<any, any>, clearOtherAttributes: boolean): void;

// export function CFAutorelease(arg: any): any;

// export function CFBagAddValue(theBag: any, value: any): void;

// export function CFBagApplyFunction(theBag: any, applier: (p1: any, p2: any) => void, context: any): void;

// export function CFBagContainsValue(theBag: any, value: any): boolean;

// export function CFBagCreate(allocator: any, values: any, numValues: number, callBacks: CFBagCallBacks): any;

// export function CFBagCreateCopy(allocator: any, theBag: any): any;

// export function CFBagCreateMutable(allocator: any, capacity: number, callBacks: CFBagCallBacks): any;

// export function CFBagCreateMutableCopy(allocator: any, capacity: number, theBag: any): any;

// export function CFBagGetCount(theBag: any): number;

// export function CFBagGetCountOfValue(theBag: any, value: any): number;

// export function CFBagGetTypeID(): number;

// export function CFBagGetValue(theBag: any, value: any): any;

// export function CFBagGetValueIfPresent(theBag: any, candidate: any, value: any): boolean;

// export function CFBagGetValues(theBag: any, values: any): void;

// export function CFBagRemoveAllValues(theBag: any): void;

// export function CFBagRemoveValue(theBag: any, value: any): void;

// export function CFBagReplaceValue(theBag: any, value: any): void;

// export function CFBagSetValue(theBag: any, value: any): void;

// export function CFBinaryHeapAddValue(heap: any, value: any): void;

// export function CFBinaryHeapApplyFunction(heap: any, applier: (p1: any, p2: any) => void, context: any): void;

// export function CFBinaryHeapContainsValue(heap: any, value: any): boolean;

// export function CFBinaryHeapCreate(allocator: any, capacity: number, callBacks: CFBinaryHeapCallBacks, compareContext: CFBinaryHeapCompareContext): any;

// export function CFBinaryHeapCreateCopy(allocator: any, capacity: number, heap: any): any;

// export function CFBinaryHeapGetCount(heap: any): number;

// export function CFBinaryHeapGetCountOfValue(heap: any, value: any): number;

// export function CFBinaryHeapGetMinimum(heap: any): any;

// export function CFBinaryHeapGetMinimumIfPresent(heap: any, value: any): boolean;

// export function CFBinaryHeapGetTypeID(): number;

// export function CFBinaryHeapGetValues(heap: any, values: any): void;

// export function CFBinaryHeapRemoveAllValues(heap: any): void;

// export function CFBinaryHeapRemoveMinimumValue(heap: any): void;

// export function CFBitVectorContainsBit(bv: any, range: CFRange, value: number): boolean;

// export function CFBitVectorCreate(allocator: any, bytes: string | any, numBits: number): any;

// export function CFBitVectorCreateCopy(allocator: any, bv: any): any;

// export function CFBitVectorCreateMutable(allocator: any, capacity: number): any;

// export function CFBitVectorCreateMutableCopy(allocator: any, capacity: number, bv: any): any;

// export function CFBitVectorFlipBitAtIndex(bv: any, idx: number): void;

// export function CFBitVectorFlipBits(bv: any, range: CFRange): void;

// export function CFBitVectorGetBitAtIndex(bv: any, idx: number): number;

// export function CFBitVectorGetBits(bv: any, range: CFRange, bytes: string | any): void;

// export function CFBitVectorGetCount(bv: any): number;

// export function CFBitVectorGetCountOfBit(bv: any, range: CFRange, value: number): number;

// export function CFBitVectorGetFirstIndexOfBit(bv: any, range: CFRange, value: number): number;

// export function CFBitVectorGetLastIndexOfBit(bv: any, range: CFRange, value: number): number;

// export function CFBitVectorGetTypeID(): number;

// export function CFBitVectorSetAllBits(bv: any, value: number): void;

// export function CFBitVectorSetBitAtIndex(bv: any, idx: number, value: number): void;

// export function CFBitVectorSetBits(bv: any, range: CFRange, value: number): void;

// export function CFBitVectorSetCount(bv: any, count: number): void;

// export function CFBooleanGetTypeID(): number;

// export function CFBooleanGetValue(boolean: number): boolean;

// export function CFBundleCopyAuxiliaryExecutableURL(bundle: any, executableName: string): URL;

// export function CFBundleCopyBuiltInPlugInsURL(bundle: any): URL;

// export function CFBundleCopyBundleLocalizations(bundle: any): any[];

// export function CFBundleCopyBundleURL(bundle: any): URL;

// export function CFBundleCopyExecutableArchitectures(bundle: any): any[];

// export function CFBundleCopyExecutableArchitecturesForURL(url: URL): any[];

// export function CFBundleCopyExecutableURL(bundle: any): URL;

// export function CFBundleCopyInfoDictionaryForURL(url: URL): Map<any, any>;

// export function CFBundleCopyInfoDictionaryInDirectory(bundleURL: URL): Map<any, any>;

// export function CFBundleCopyLocalizationsForPreferences(locArray: any[], prefArray: any[]): any[];

// export function CFBundleCopyLocalizationsForURL(url: URL): any[];

// export function CFBundleCopyLocalizedString(bundle: any, key: string, value: string, tableName: string): string;

// export function CFBundleCopyPreferredLocalizationsFromArray(locArray: any[]): any[];

// export function CFBundleCopyPrivateFrameworksURL(bundle: any): URL;

// export function CFBundleCopyResourceURL(bundle: any, resourceName: string, resourceType: string, subDirName: string): URL;

// export function CFBundleCopyResourceURLForLocalization(bundle: any, resourceName: string, resourceType: string, subDirName: string, localizationName: string): URL;

// export function CFBundleCopyResourceURLInDirectory(bundleURL: URL, resourceName: string, resourceType: string, subDirName: string): URL;

// export function CFBundleCopyResourceURLsOfType(bundle: any, resourceType: string, subDirName: string): any[];

// export function CFBundleCopyResourceURLsOfTypeForLocalization(bundle: any, resourceType: string, subDirName: string, localizationName: string): any[];

// export function CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: URL, resourceType: string, subDirName: string): any[];

// export function CFBundleCopyResourcesDirectoryURL(bundle: any): URL;

// export function CFBundleCopySharedFrameworksURL(bundle: any): URL;

// export function CFBundleCopySharedSupportURL(bundle: any): URL;

// export function CFBundleCopySupportFilesDirectoryURL(bundle: any): URL;

// export function CFBundleCreate(allocator: any, bundleURL: URL): any;

// export function CFBundleCreateBundlesFromDirectory(allocator: any, directoryURL: URL, bundleType: string): any[];

// export function CFBundleGetAllBundles(): any[];

// export function CFBundleGetBundleWithIdentifier(bundleID: string): any;

// export function CFBundleGetDataPointerForName(bundle: any, symbolName: string): any;

// export function CFBundleGetDataPointersForNames(bundle: any, symbolNames: any[], stbl: any): void;

// export function CFBundleGetDevelopmentRegion(bundle: any): string;

// export function CFBundleGetFunctionPointerForName(bundle: any, functionName: string): any;

// export function CFBundleGetFunctionPointersForNames(bundle: any, functionNames: any[], ftbl: any): void;

// export function CFBundleGetIdentifier(bundle: any): string;

// export function CFBundleGetInfoDictionary(bundle: any): Map<any, any>;

// export function CFBundleGetLocalInfoDictionary(bundle: any): Map<any, any>;

// export function CFBundleGetMainBundle(): any;

// export function CFBundleGetPackageInfo(bundle: any, packageType: number, packageCreator: number): void;

// export function CFBundleGetPackageInfoInDirectory(url: URL, packageType: number, packageCreator: number): boolean;

// export function CFBundleGetPlugIn(bundle: any): any;

// export function CFBundleGetTypeID(): number;

// export function CFBundleGetValueForInfoDictionaryKey(bundle: any, key: string): any;

// export function CFBundleGetVersionNumber(bundle: any): number;

// export function CFBundleIsExecutableLoaded(bundle: any): boolean;

// export function CFBundleLoadExecutable(bundle: any): boolean;

// export function CFBundleLoadExecutableAndReturnError(bundle: any, error: Error): boolean;

// export function CFBundlePreflightExecutable(bundle: any, error: Error): boolean;

// export function CFBundleUnloadExecutable(bundle: any): void;

// export function CFCalendarCopyCurrent(): Calendar;

// export function CFCalendarCopyLocale(calendar: Calendar): Locale;

// export function CFCalendarCopyTimeZone(calendar: Calendar): TimeZone;

// export function CFCalendarCreateWithIdentifier(allocator: any, identifier: any): Calendar;

// export function CFCalendarGetFirstWeekday(calendar: Calendar): number;

// export function CFCalendarGetIdentifier(calendar: Calendar): any;

// export function CFCalendarGetMaximumRangeOfUnit(calendar: Calendar, unit: CFCalendar.CFCalendarUnit): CFRange;

// export function CFCalendarGetMinimumDaysInFirstWeek(calendar: Calendar): number;

// export function CFCalendarGetMinimumRangeOfUnit(calendar: Calendar, unit: CFCalendar.CFCalendarUnit): CFRange;

// export function CFCalendarGetOrdinalityOfUnit(calendar: Calendar, smallerUnit: CFCalendar.CFCalendarUnit, biggerUnit: CFCalendar.CFCalendarUnit, at: number): number;

// export function CFCalendarGetRangeOfUnit(calendar: Calendar, smallerUnit: CFCalendar.CFCalendarUnit, biggerUnit: CFCalendar.CFCalendarUnit, at: number): CFRange;

// export function CFCalendarGetTimeRangeOfUnit(calendar: Calendar, unit: CFCalendar.CFCalendarUnit, at: number, startp: number, tip: number): boolean;

// export function CFCalendarGetTypeID(): number;

// export function CFCalendarSetFirstWeekday(calendar: Calendar, wkdy: number): void;

// export function CFCalendarSetLocale(calendar: Calendar, locale: Locale): void;

// export function CFCalendarSetMinimumDaysInFirstWeek(calendar: Calendar, mwd: number): void;

// export function CFCalendarSetTimeZone(calendar: Calendar, tz: TimeZone): void;

// export function CFCharacterSetAddCharactersInRange(theSet: CharacterSet, theRange: CFRange): void;

// export function CFCharacterSetAddCharactersInString(theSet: CharacterSet, theString: string): void;

// export function CFCharacterSetCreateBitmapRepresentation(alloc: any, theSet: CharacterSet): Data;

// export function CFCharacterSetCreateCopy(alloc: any, theSet: CharacterSet): CharacterSet;

// export function CFCharacterSetCreateInvertedSet(alloc: any, theSet: CharacterSet): CharacterSet;

// export function CFCharacterSetCreateMutable(alloc: any): CharacterSet;

// export function CFCharacterSetCreateMutableCopy(alloc: any, theSet: CharacterSet): CharacterSet;

// export function CFCharacterSetCreateWithBitmapRepresentation(alloc: any, theData: Data): CharacterSet;

// export function CFCharacterSetCreateWithCharactersInRange(alloc: any, theRange: CFRange): CharacterSet;

// export function CFCharacterSetCreateWithCharactersInString(alloc: any, theString: string): CharacterSet;

// export function CFCharacterSetGetPredefined(theSetIdentifier: CFCharacterSet.CFCharacterSetPredefinedSet): CharacterSet;

// export function CFCharacterSetGetTypeID(): number;

// export function CFCharacterSetHasMemberInPlane(theSet: CharacterSet, thePlane: number): boolean;

// export function CFCharacterSetIntersect(theSet: CharacterSet, theOtherSet: CharacterSet): void;

// export function CFCharacterSetInvert(theSet: CharacterSet): void;

// export function CFCharacterSetIsCharacterMember(theSet: CharacterSet, theChar: number): boolean;

// export function CFCharacterSetIsLongCharacterMember(theSet: CharacterSet, theChar: number): boolean;

// export function CFCharacterSetIsSupersetOfSet(theSet: CharacterSet, theOtherset: CharacterSet): boolean;

// export function CFCharacterSetRemoveCharactersInRange(theSet: CharacterSet, theRange: CFRange): void;

// export function CFCharacterSetRemoveCharactersInString(theSet: CharacterSet, theString: string): void;

// export function CFCharacterSetUnion(theSet: CharacterSet, theOtherSet: CharacterSet): void;

// export function CFCopyDescription(cf: any): string;

// export function CFCopyHomeDirectoryURL(): URL;

// export function CFCopyTypeIDDescription(type_id: number): string;

// export function CFDataAppendBytes(theData: Data, bytes: string | any, length: number): void;

// export function CFDataCreate(allocator: any, bytes: string | any, length: number): Data;

// export function CFDataCreateCopy(allocator: any, theData: Data): Data;

// export function CFDataCreateMutable(allocator: any, capacity: number): Data;

// export function CFDataCreateMutableCopy(allocator: any, capacity: number, theData: Data): Data;

// export function CFDataCreateWithBytesNoCopy(allocator: any, bytes: string | any, length: number, bytesDeallocator: any): Data;

// export function CFDataDeleteBytes(theData: Data, range: CFRange): void;

// export function CFDataFind(theData: Data, dataToFind: Data, searchRange: CFRange, compareOptions: CFData.CFDataSearchFlags): CFRange;

// export function CFDataGetBytePtr(theData: Data): string;

// export function CFDataGetBytes(theData: Data, range: CFRange, buffer: string | any): void;

// export function CFDataGetLength(theData: Data): number;

// export function CFDataGetMutableBytePtr(theData: Data): string;

// export function CFDataGetTypeID(): number;

// export function CFDataIncreaseLength(theData: Data, extraLength: number): void;

// export function CFDataReplaceBytes(theData: Data, range: CFRange, newBytes: string | any, newLength: number): void;

// export function CFDataSetLength(theData: Data, length: number): void;

// export function CFDateCompare(theDate: Date, otherDate: Date, context: any): CFBase.CFComparisonResult;

// export function CFDateCreate(allocator: any, at: number): Date;

// export function CFDateFormatterCopyProperty(formatter: any, key: any): any;

// export function CFDateFormatterCreate(allocator: any, locale: Locale, dateStyle: CFDateFormatter.CFDateFormatterStyle, timeStyle: CFDateFormatter.CFDateFormatterStyle): any;

// export function CFDateFormatterCreateDateFormatFromTemplate(allocator: any, tmplate: string, options: number, locale: Locale): string;

// export function CFDateFormatterCreateDateFromString(allocator: any, formatter: any, string: string, rangep: CFRange): Date;

// export function CFDateFormatterCreateISO8601Formatter(allocator: any, formatOptions: CFDateFormatter.CFISO8601DateFormatOptions): any;

// export function CFDateFormatterCreateStringWithAbsoluteTime(allocator: any, formatter: any, at: number): string;

// export function CFDateFormatterCreateStringWithDate(allocator: any, formatter: any, date: Date): string;

// export function CFDateFormatterGetAbsoluteTimeFromString(formatter: any, string: string, rangep: CFRange, atp: number): boolean;

// export function CFDateFormatterGetDateStyle(formatter: any): CFDateFormatter.CFDateFormatterStyle;

// export function CFDateFormatterGetFormat(formatter: any): string;

// export function CFDateFormatterGetLocale(formatter: any): Locale;

// export function CFDateFormatterGetTimeStyle(formatter: any): CFDateFormatter.CFDateFormatterStyle;

// export function CFDateFormatterGetTypeID(): number;

// export function CFDateFormatterSetFormat(formatter: any, formatString: string): void;

// export function CFDateFormatterSetProperty(formatter: any, key: string, value: any): void;

// export function CFDateGetAbsoluteTime(theDate: Date): number;

// export function CFDateGetTimeIntervalSinceDate(theDate: Date, otherDate: Date): number;

// export function CFDateGetTypeID(): number;

// export function CFDictionaryAddValue(theDict: Map<any, any>, key: any, value: any): void;

// export function CFDictionaryApplyFunction(theDict: Map<any, any>, applier: (p1: any, p2: any, p3: any) => void, context: any): void;

// export function CFDictionaryContainsKey(theDict: Map<any, any>, key: any): boolean;

// export function CFDictionaryContainsValue(theDict: Map<any, any>, value: any): boolean;

// export function CFDictionaryCreate(allocator: any, keys: any, values: any, numValues: number, keyCallBacks: CFDictionaryKeyCallBacks, valueCallBacks: CFDictionaryValueCallBacks): Map<any, any>;

// export function CFDictionaryCreateCopy(allocator: any, theDict: Map<any, any>): Map<any, any>;

// export function CFDictionaryCreateMutable(allocator: any, capacity: number, keyCallBacks: CFDictionaryKeyCallBacks, valueCallBacks: CFDictionaryValueCallBacks): Map<any, any>;

// export function CFDictionaryCreateMutableCopy(allocator: any, capacity: number, theDict: Map<any, any>): Map<any, any>;

// export function CFDictionaryGetCount(theDict: Map<any, any>): number;

// export function CFDictionaryGetCountOfKey(theDict: Map<any, any>, key: any): number;

// export function CFDictionaryGetCountOfValue(theDict: Map<any, any>, value: any): number;

// export function CFDictionaryGetKeysAndValues(theDict: Map<any, any>, keys: any, values: any): void;

// export function CFDictionaryGetTypeID(): number;

// export function CFDictionaryGetValue(theDict: Map<any, any>, key: any): any;

// export function CFDictionaryGetValueIfPresent(theDict: Map<any, any>, key: any, value: any): boolean;

// export function CFDictionaryRemoveAllValues(theDict: Map<any, any>): void;

// export function CFDictionaryRemoveValue(theDict: Map<any, any>, key: any): void;

// export function CFDictionaryReplaceValue(theDict: Map<any, any>, key: any, value: any): void;

// export function CFDictionarySetValue(theDict: Map<any, any>, key: any, value: any): void;

// export function CFEqual(cf1: any, cf2: any): boolean;

// export function CFErrorCopyDescription(err: Error): string;

// export function CFErrorCopyFailureReason(err: Error): string;

// export function CFErrorCopyRecoverySuggestion(err: Error): string;

// export function CFErrorCopyUserInfo(err: Error): Map<any, any>;

// export function CFErrorCreate(allocator: any, domain: any, code: number, userInfo: Map<any, any>): Error;

// export function CFErrorCreateWithUserInfoKeysAndValues(allocator: any, domain: any, code: number, userInfoKeys: any, userInfoValues: any, numUserInfoValues: number): Error;

// export function CFErrorGetCode(err: Error): number;

// export function CFErrorGetDomain(err: Error): any;

// export function CFErrorGetTypeID(): number;

// export function CFFileDescriptorCreate(allocator: any, fd: number, closeOnInvalidate: boolean, callout: (p1: any, p2: number, p3: any) => void, context: CFFileDescriptorContext): any;

// export function CFFileDescriptorCreateRunLoopSource(allocator: any, f: any, order: number): any;

// export function CFFileDescriptorDisableCallBacks(f: any, callBackTypes: number): void;

// export function CFFileDescriptorEnableCallBacks(f: any, callBackTypes: number): void;

// export function CFFileDescriptorGetContext(f: any, context: CFFileDescriptorContext): void;

// export function CFFileDescriptorGetNativeDescriptor(f: any): number;

// export function CFFileDescriptorGetTypeID(): number;

// export function CFFileDescriptorInvalidate(f: any): void;

// export function CFFileDescriptorIsValid(f: any): boolean;

// export function CFFileSecurityClearProperties(fileSec: NSFileSecurity, clearPropertyMask: CFFileSecurity.CFFileSecurityClearOptions): boolean;

// export function CFFileSecurityCopyAccessControlList(fileSec: NSFileSecurity, accessControlList: any): boolean;

// export function CFFileSecurityCopyGroupUUID(fileSec: NSFileSecurity, groupUUID: any): boolean;

// export function CFFileSecurityCopyOwnerUUID(fileSec: NSFileSecurity, ownerUUID: any): boolean;

// export function CFFileSecurityCreate(allocator: any): NSFileSecurity;

// export function CFFileSecurityCreateCopy(allocator: any, fileSec: NSFileSecurity): NSFileSecurity;

// export function CFFileSecurityGetGroup(fileSec: NSFileSecurity, group: number): boolean;

// export function CFFileSecurityGetMode(fileSec: NSFileSecurity, mode: number): boolean;

// export function CFFileSecurityGetOwner(fileSec: NSFileSecurity, owner: number): boolean;

// export function CFFileSecurityGetTypeID(): number;

// export function CFFileSecuritySetAccessControlList(fileSec: NSFileSecurity, accessControlList: any): boolean;

// export function CFFileSecuritySetGroup(fileSec: NSFileSecurity, group: number): boolean;

// export function CFFileSecuritySetGroupUUID(fileSec: NSFileSecurity, groupUUID: any): boolean;

// export function CFFileSecuritySetMode(fileSec: NSFileSecurity, mode: number): boolean;

// export function CFFileSecuritySetOwner(fileSec: NSFileSecurity, owner: number): boolean;

// export function CFFileSecuritySetOwnerUUID(fileSec: NSFileSecurity, ownerUUID: any): boolean;

// export function CFGetAllocator(cf: any): any;

// export function CFGetRetainCount(cf: any): number;

// export function CFGetTypeID(cf: any): number;

// export function CFHash(cf: any): number;

// export function CFLocaleCopyAvailableLocaleIdentifiers(): any[];

// export function CFLocaleCopyCommonISOCurrencyCodes(): any[];

// export function CFLocaleCopyCurrent(): Locale;

// export function CFLocaleCopyDisplayNameForPropertyValue(displayLocale: Locale, key: any, value: string): string;

// export function CFLocaleCopyISOCountryCodes(): any[];

// export function CFLocaleCopyISOCurrencyCodes(): any[];

// export function CFLocaleCopyISOLanguageCodes(): any[];

// export function CFLocaleCopyPreferredLanguages(): any[];

// export function CFLocaleCreate(allocator: any, localeIdentifier: any): Locale;

// export function CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: any, localeIdentifier: string): any;

// export function CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: any, lcode: number, rcode: number): any;

// export function CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: any, localeIdentifier: string): any;

// export function CFLocaleCreateComponentsFromLocaleIdentifier(allocator: any, localeID: any): Map<any, any>;

// export function CFLocaleCreateCopy(allocator: any, locale: Locale): Locale;

// export function CFLocaleCreateLocaleIdentifierFromComponents(allocator: any, dictionary: Map<any, any>): any;

// export function CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: any, lcid: number): any;

// export function CFLocaleGetIdentifier(locale: Locale): any;

// export function CFLocaleGetLanguageCharacterDirection(isoLangCode: string): CFLocale.CFLocaleLanguageDirection;

// export function CFLocaleGetLanguageLineDirection(isoLangCode: string): CFLocale.CFLocaleLanguageDirection;

// export function CFLocaleGetSystem(): Locale;

// export function CFLocaleGetTypeID(): number;

// export function CFLocaleGetValue(locale: Locale, key: any): any;

// export function CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: any): number;

// export function CFMachPortCreate(allocator: any, callout: (p1: NSMachPort, p2: any, p3: number, p4: any) => void, context: CFMachPortContext, shouldFreeInfo: string | any): NSMachPort;

// export function CFMachPortCreateRunLoopSource(allocator: any, port: NSMachPort, order: number): any;

// export function CFMachPortCreateWithPort(allocator: any, portNum: number, callout: (p1: NSMachPort, p2: any, p3: number, p4: any) => void, context: CFMachPortContext, shouldFreeInfo: string | any): NSMachPort;

// export function CFMachPortGetContext(port: NSMachPort, context: CFMachPortContext): void;

// export function CFMachPortGetInvalidationCallBack(port: NSMachPort): (p1: NSMachPort, p2: any) => void;

// export function CFMachPortGetPort(port: NSMachPort): number;

// export function CFMachPortGetTypeID(): number;

// export function CFMachPortInvalidate(port: NSMachPort): void;

// export function CFMachPortIsValid(port: NSMachPort): boolean;

// export function CFMachPortSetInvalidationCallBack(port: NSMachPort, callout: (p1: NSMachPort, p2: any) => void): void;

// export function CFMakeCollectable(cf: any): any;

// export function CFMessagePortCreateLocal(allocator: any, name: string, callout: (p1: MessagePort, p2: number, p3: Data, p4: any) => Data, context: CFMessagePortContext, shouldFreeInfo: string | any): MessagePort;

// export function CFMessagePortCreateRemote(allocator: any, name: string): MessagePort;

// export function CFMessagePortCreateRunLoopSource(allocator: any, local: MessagePort, order: number): any;

// export function CFMessagePortGetContext(ms: MessagePort, context: CFMessagePortContext): void;

// export function CFMessagePortGetInvalidationCallBack(ms: MessagePort): (p1: MessagePort, p2: any) => void;

// export function CFMessagePortGetName(ms: MessagePort): string;

// export function CFMessagePortGetTypeID(): number;

// export function CFMessagePortInvalidate(ms: MessagePort): void;

// export function CFMessagePortIsRemote(ms: MessagePort): boolean;

// export function CFMessagePortIsValid(ms: MessagePort): boolean;

// export function CFMessagePortSendRequest(remote: MessagePort, msgid: number, data: Data, sendTimeout: number, rcvTimeout: number, replyMode: string, returnData: Data): number;

// export function CFMessagePortSetDispatchQueue(ms: MessagePort, queue: NSObject): void;

// export function CFMessagePortSetInvalidationCallBack(ms: MessagePort, callout: (p1: MessagePort, p2: any) => void): void;

// export function CFMessagePortSetName(ms: MessagePort, newName: string): boolean;

// export function CFNotificationCenterAddObserver(center: any, observer: any, callBack: (p1: any, p2: any, p3: any, p4: any, p5: Map<any, any>) => void, name: string, object_: any, suspensionBehavior: CFNotificationCenter.CFNotificationSuspensionBehavior): void;

// export function CFNotificationCenterGetDarwinNotifyCenter(): any;

// export function CFNotificationCenterGetDistributedCenter(): any;

// export function CFNotificationCenterGetLocalCenter(): any;

// export function CFNotificationCenterGetTypeID(): number;

// export function CFNotificationCenterPostNotification(center: any, name: any, object_: any, userInfo: Map<any, any>, deliverImmediately: boolean): void;

// export function CFNotificationCenterPostNotificationWithOptions(center: any, name: any, object_: any, userInfo: Map<any, any>, options: number): void;

// export function CFNotificationCenterRemoveEveryObserver(center: any, observer: any): void;

// export function CFNotificationCenterRemoveObserver(center: any, observer: any, name: any, object_: any): void;

// export function CFNullGetTypeID(): number;

// export function CFNumberCompare(number: number, otherNumber: number, context: any): CFBase.CFComparisonResult;

// export function CFNumberCreate(allocator: any, theType: CFNumber.CFNumberType, valuePtr: any): number;

// export function CFNumberFormatterCopyProperty(formatter: any, key: any): any;

// export function CFNumberFormatterCreate(allocator: any, locale: Locale, style: CFNumberFormatter.CFNumberFormatterStyle): any;

// export function CFNumberFormatterCreateNumberFromString(allocator: any, formatter: any, string: string, rangep: CFRange, options: number): number;

// export function CFNumberFormatterCreateStringWithNumber(allocator: any, formatter: any, number: number): string;

// export function CFNumberFormatterCreateStringWithValue(allocator: any, formatter: any, numberType: CFNumber.CFNumberType, valuePtr: any): string;

// export function CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: string, defaultFractionDigits: number, roundingIncrement: number): boolean;

// export function CFNumberFormatterGetFormat(formatter: any): string;

// export function CFNumberFormatterGetLocale(formatter: any): Locale;

// export function CFNumberFormatterGetStyle(formatter: any): CFNumberFormatter.CFNumberFormatterStyle;

// export function CFNumberFormatterGetTypeID(): number;

// export function CFNumberFormatterGetValueFromString(formatter: any, string: string, rangep: CFRange, numberType: CFNumber.CFNumberType, valuePtr: any): boolean;

// export function CFNumberFormatterSetFormat(formatter: any, formatString: string): void;

// export function CFNumberFormatterSetProperty(formatter: any, key: any, value: any): void;

// export function CFNumberGetByteSize(number: number): number;

// export function CFNumberGetType(number: number): CFNumber.CFNumberType;

// export function CFNumberGetTypeID(): number;

// export function CFNumberGetValue(number: number, theType: CFNumber.CFNumberType, valuePtr: any): boolean;

// export function CFNumberIsFloatType(number: number): boolean;

// export function CFPlugInAddInstanceForFactory(factoryID: any): void;

// export function CFPlugInCreate(allocator: any, plugInURL: URL): any;

// export function CFPlugInFindFactoriesForPlugInType(typeUUID: any): any[];

// export function CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: any, plugIn: any): any[];

// export function CFPlugInGetBundle(plugIn: any): any;

// export function CFPlugInGetTypeID(): number;

// export function CFPlugInInstanceCreate(allocator: any, factoryUUID: any, typeUUID: any): any;

// export function CFPlugInInstanceCreateWithInstanceDataSize(allocator: any, instanceDataSize: number, deallocateInstanceFunction: (p1: any) => void, factoryName: string, getInterfaceFunction: (p1: any, p2: string, p3: any) => boolean): any;

// export function CFPlugInInstanceGetFactoryName(instance: any): string;

// export function CFPlugInInstanceGetInstanceData(instance: any): any;

// export function CFPlugInInstanceGetInterfaceFunctionTable(instance: any, interfaceName: string, ftbl: any): boolean;

// export function CFPlugInInstanceGetTypeID(): number;

// export function CFPlugInIsLoadOnDemand(plugIn: any): boolean;

// export function CFPlugInRegisterFactoryFunction(factoryUUID: any, func: (p1: any, p2: any) => any): boolean;

// export function CFPlugInRegisterFactoryFunctionByName(factoryUUID: any, plugIn: any, functionName: string): boolean;

// export function CFPlugInRegisterPlugInType(factoryUUID: any, typeUUID: any): boolean;

// export function CFPlugInRemoveInstanceForFactory(factoryID: any): void;

// export function CFPlugInSetLoadOnDemand(plugIn: any, flag: boolean): void;

// export function CFPlugInUnregisterFactory(factoryUUID: any): boolean;

// export function CFPlugInUnregisterPlugInType(factoryUUID: any, typeUUID: any): boolean;

// export function CFPreferencesAddSuitePreferencesToApp(applicationID: string, suiteID: string): void;

// export function CFPreferencesAppSynchronize(applicationID: string): boolean;

// export function CFPreferencesAppValueIsForced(key: string, applicationID: string): boolean;

// export function CFPreferencesCopyAppValue(key: string, applicationID: string): any;

// export function CFPreferencesCopyKeyList(applicationID: string, userName: string, hostName: string): any[];

// export function CFPreferencesCopyMultiple(keysToFetch: any[], applicationID: string, userName: string, hostName: string): Map<any, any>;

// export function CFPreferencesCopyValue(key: string, applicationID: string, userName: string, hostName: string): any;

// export function CFPreferencesGetAppBooleanValue(key: string, applicationID: string, keyExistsAndHasValidFormat: string | any): boolean;

// export function CFPreferencesGetAppIntegerValue(key: string, applicationID: string, keyExistsAndHasValidFormat: string | any): number;

// export function CFPreferencesRemoveSuitePreferencesFromApp(applicationID: string, suiteID: string): void;

// export function CFPreferencesSetAppValue(key: string, value: any, applicationID: string): void;

// export function CFPreferencesSetMultiple(keysToSet: Map<any, any>, keysToRemove: any[], applicationID: string, userName: string, hostName: string): void;

// export function CFPreferencesSetValue(key: string, value: any, applicationID: string, userName: string, hostName: string): void;

// export function CFPreferencesSynchronize(applicationID: string, userName: string, hostName: string): boolean;

// export function CFPropertyListCreateData(allocator: any, propertyList: any, format: CFPropertyList.CFPropertyListFormat, options: number, error: Error): Data;

// export function CFPropertyListCreateDeepCopy(allocator: any, propertyList: any, mutabilityOption: number): any;

// export function CFPropertyListCreateWithData(allocator: any, data: Data, options: number, format: CFPropertyList.CFPropertyListFormat, error: Error): any;

// export function CFPropertyListCreateWithStream(allocator: any, stream: InputStream, streamLength: number, options: number, format: CFPropertyList.CFPropertyListFormat, error: Error): any;

// export function CFPropertyListIsValid(plist: any, format: CFPropertyList.CFPropertyListFormat): boolean;

// export function CFPropertyListWrite(propertyList: any, stream: OutputStream, format: CFPropertyList.CFPropertyListFormat, options: number, error: Error): number;

// export function CFReadStreamClose(stream: InputStream): void;

// export function CFReadStreamCopyDispatchQueue(stream: InputStream): NSObject;

// export function CFReadStreamCopyError(stream: InputStream): Error;

// export function CFReadStreamCopyProperty(stream: InputStream, propertyName: any): any;

// export function CFReadStreamCreateWithBytesNoCopy(alloc: any, bytes: string | any, length: number, bytesDeallocator: any): InputStream;

// export function CFReadStreamCreateWithFile(alloc: any, fileURL: URL): InputStream;

// export function CFReadStreamGetBuffer(stream: InputStream, maxBytesToRead: number, numBytesRead: number): string;

// export function CFReadStreamGetError(stream: InputStream): CFStreamError;

// export function CFReadStreamGetStatus(stream: InputStream): CFStream.CFStreamStatus;

// export function CFReadStreamGetTypeID(): number;

// export function CFReadStreamHasBytesAvailable(stream: InputStream): boolean;

// export function CFReadStreamOpen(stream: InputStream): boolean;

// export function CFReadStreamRead(stream: InputStream, buffer: string | any, bufferLength: number): number;

// export function CFReadStreamScheduleWithRunLoop(stream: InputStream, runLoop: any, runLoopMode: any): void;

// export function CFReadStreamSetClient(stream: InputStream, streamEvents: number, clientCB: (p1: InputStream, p2: CFStream.CFStreamEventType, p3: any) => void, clientContext: CFStreamClientContext): boolean;

// export function CFReadStreamSetDispatchQueue(stream: InputStream, q: NSObject): void;

// export function CFReadStreamSetProperty(stream: InputStream, propertyName: any, propertyValue: any): boolean;

// export function CFReadStreamUnscheduleFromRunLoop(stream: InputStream, runLoop: any, runLoopMode: any): void;

// export function CFRelease(cf: any): void;

// export function CFRetain(cf: any): any;

// export function CFRunLoopAddCommonMode(rl: any, mode: any): void;

// export function CFRunLoopAddObserver(rl: any, observer: any, mode: any): void;

// export function CFRunLoopAddSource(rl: any, source: any, mode: any): void;

// export function CFRunLoopAddTimer(rl: any, timer: Timer, mode: any): void;

// export function CFRunLoopContainsObserver(rl: any, observer: any, mode: any): boolean;

// export function CFRunLoopContainsSource(rl: any, source: any, mode: any): boolean;

// export function CFRunLoopContainsTimer(rl: any, timer: Timer, mode: any): boolean;

// export function CFRunLoopCopyAllModes(rl: any): any[];

// export function CFRunLoopCopyCurrentMode(rl: any): any;

// export function CFRunLoopGetCurrent(): any;

// export function CFRunLoopGetMain(): any;

// export function CFRunLoopGetNextTimerFireDate(rl: any, mode: any): number;

// export function CFRunLoopGetTypeID(): number;

// export function CFRunLoopIsWaiting(rl: any): boolean;

// export function CFRunLoopObserverCreate(allocator: any, activities: number, repeats: boolean, order: number, callout: (p1: any, p2: CFRunLoop.CFRunLoopActivity, p3: any) => void, context: CFRunLoopObserverContext): any;

// export function CFRunLoopObserverCreateWithHandler(allocator: any, activities: number, repeats: boolean, order: number, block: (p1: any, p2: CFRunLoop.CFRunLoopActivity) => void): any;

// export function CFRunLoopObserverDoesRepeat(observer: any): boolean;

// export function CFRunLoopObserverGetActivities(observer: any): number;

// export function CFRunLoopObserverGetContext(observer: any, context: CFRunLoopObserverContext): void;

// export function CFRunLoopObserverGetOrder(observer: any): number;

// export function CFRunLoopObserverGetTypeID(): number;

// export function CFRunLoopObserverInvalidate(observer: any): void;

// export function CFRunLoopObserverIsValid(observer: any): boolean;

// export function CFRunLoopPerformBlock(rl: any, mode: any, block: () => void): void;

// export function CFRunLoopRemoveObserver(rl: any, observer: any, mode: any): void;

// export function CFRunLoopRemoveSource(rl: any, source: any, mode: any): void;

// export function CFRunLoopRemoveTimer(rl: any, timer: Timer, mode: any): void;

// export function CFRunLoopRun(): void;

// export function CFRunLoopRunInMode(mode: any, seconds: number, returnAfterSourceHandled: boolean): CFRunLoop.CFRunLoopRunResult;

// export function CFRunLoopSourceCreate(allocator: any, order: number, context: CFRunLoopSourceContext): any;

// export function CFRunLoopSourceGetContext(source: any, context: CFRunLoopSourceContext): void;

// export function CFRunLoopSourceGetOrder(source: any): number;

// export function CFRunLoopSourceGetTypeID(): number;

// export function CFRunLoopSourceInvalidate(source: any): void;

// export function CFRunLoopSourceIsValid(source: any): boolean;

// export function CFRunLoopSourceSignal(source: any): void;

// export function CFRunLoopStop(rl: any): void;

// export function CFRunLoopTimerCreate(allocator: any, fireDate: number, interval: number, flags: number, order: number, callout: (p1: Timer, p2: any) => void, context: CFRunLoopTimerContext): Timer;

// export function CFRunLoopTimerCreateWithHandler(allocator: any, fireDate: number, interval: number, flags: number, order: number, block: (p1: Timer) => void): Timer;

// export function CFRunLoopTimerDoesRepeat(timer: Timer): boolean;

// export function CFRunLoopTimerGetContext(timer: Timer, context: CFRunLoopTimerContext): void;

// export function CFRunLoopTimerGetInterval(timer: Timer): number;

// export function CFRunLoopTimerGetNextFireDate(timer: Timer): number;

// export function CFRunLoopTimerGetOrder(timer: Timer): number;

// export function CFRunLoopTimerGetTolerance(timer: Timer): number;

// export function CFRunLoopTimerGetTypeID(): number;

// export function CFRunLoopTimerInvalidate(timer: Timer): void;

// export function CFRunLoopTimerIsValid(timer: Timer): boolean;

// export function CFRunLoopTimerSetNextFireDate(timer: Timer, fireDate: number): void;

// export function CFRunLoopTimerSetTolerance(timer: Timer, tolerance: number): void;

// export function CFRunLoopWakeUp(rl: any): void;

// export function CFSetAddValue(theSet: Set<any>, value: any): void;

// export function CFSetApplyFunction(theSet: Set<any>, applier: (p1: any, p2: any) => void, context: any): void;

// export function CFSetContainsValue(theSet: Set<any>, value: any): boolean;

// export function CFSetCreate(allocator: any, values: any, numValues: number, callBacks: CFSetCallBacks): Set<any>;

// export function CFSetCreateCopy(allocator: any, theSet: Set<any>): Set<any>;

// export function CFSetCreateMutable(allocator: any, capacity: number, callBacks: CFSetCallBacks): Set<any>;

// export function CFSetCreateMutableCopy(allocator: any, capacity: number, theSet: Set<any>): Set<any>;

// export function CFSetGetCount(theSet: Set<any>): number;

// export function CFSetGetCountOfValue(theSet: Set<any>, value: any): number;

// export function CFSetGetTypeID(): number;

// export function CFSetGetValue(theSet: Set<any>, value: any): any;

// export function CFSetGetValueIfPresent(theSet: Set<any>, candidate: any, value: any): boolean;

// export function CFSetGetValues(theSet: Set<any>, values: any): void;

// export function CFSetRemoveAllValues(theSet: Set<any>): void;

// export function CFSetRemoveValue(theSet: Set<any>, value: any): void;

// export function CFSetReplaceValue(theSet: Set<any>, value: any): void;

// export function CFSetSetValue(theSet: Set<any>, value: any): void;

// export function CFShow(obj: any): void;

// export function CFShowStr(str: string): void;

// export function CFSocketConnectToAddress(s: any, address: Data, timeout: number): CFSocket.CFSocketError;

// export function CFSocketCopyAddress(s: any): Data;

// export function CFSocketCopyPeerAddress(s: any): Data;

// export function CFSocketCopyRegisteredSocketSignature(nameServerSignature: CFSocketSignature, timeout: number, name: string, signature: CFSocketSignature, nameServerAddress: Data): CFSocket.CFSocketError;

// export function CFSocketCopyRegisteredValue(nameServerSignature: CFSocketSignature, timeout: number, name: string, value: any, nameServerAddress: Data): CFSocket.CFSocketError;

// export function CFSocketCreate(allocator: any, protocolFamily: number, socketType: number, protocol: number, callBackTypes: number, callout: (p1: any, p2: CFSocket.CFSocketCallBackType, p3: Data, p4: any, p5: any) => void, context: CFSocketContext): any;

// export function CFSocketCreateConnectedToSocketSignature(allocator: any, signature: CFSocketSignature, callBackTypes: number, callout: (p1: any, p2: CFSocket.CFSocketCallBackType, p3: Data, p4: any, p5: any) => void, context: CFSocketContext, timeout: number): any;

// export function CFSocketCreateRunLoopSource(allocator: any, s: any, order: number): any;

// export function CFSocketCreateWithNative(allocator: any, sock: number, callBackTypes: number, callout: (p1: any, p2: CFSocket.CFSocketCallBackType, p3: Data, p4: any, p5: any) => void, context: CFSocketContext): any;

// export function CFSocketCreateWithSocketSignature(allocator: any, signature: CFSocketSignature, callBackTypes: number, callout: (p1: any, p2: CFSocket.CFSocketCallBackType, p3: Data, p4: any, p5: any) => void, context: CFSocketContext): any;

// export function CFSocketDisableCallBacks(s: any, callBackTypes: number): void;

// export function CFSocketEnableCallBacks(s: any, callBackTypes: number): void;

// export function CFSocketGetContext(s: any, context: CFSocketContext): void;

// export function CFSocketGetDefaultNameRegistryPortNumber(): number;

// export function CFSocketGetNative(s: any): number;

// export function CFSocketGetSocketFlags(s: any): number;

// export function CFSocketGetTypeID(): number;

// export function CFSocketInvalidate(s: any): void;

// export function CFSocketIsValid(s: any): boolean;

// export function CFSocketRegisterSocketSignature(nameServerSignature: CFSocketSignature, timeout: number, name: string, signature: CFSocketSignature): CFSocket.CFSocketError;

// export function CFSocketRegisterValue(nameServerSignature: CFSocketSignature, timeout: number, name: string, value: any): CFSocket.CFSocketError;

// export function CFSocketSendData(s: any, address: Data, data: Data, timeout: number): CFSocket.CFSocketError;

// export function CFSocketSetAddress(s: any, address: Data): CFSocket.CFSocketError;

// export function CFSocketSetDefaultNameRegistryPortNumber(port: number): void;

// export function CFSocketSetSocketFlags(s: any, flags: number): void;

// export function CFSocketUnregister(nameServerSignature: CFSocketSignature, timeout: number, name: string): CFSocket.CFSocketError;

// export function CFStreamCreateBoundPair(alloc: any, readStream: InputStream, writeStream: OutputStream, transferBufferSize: number): void;

// export function CFStreamCreatePairWithPeerSocketSignature(alloc: any, signature: CFSocketSignature, readStream: InputStream, writeStream: OutputStream): void;

// export function CFStreamCreatePairWithSocket(alloc: any, sock: number, readStream: InputStream, writeStream: OutputStream): void;

// export function CFStreamCreatePairWithSocketToHost(alloc: any, host: string, port: number, readStream: InputStream, writeStream: OutputStream): void;

// export function CFStringAppend(theString: string, appendedString: string): void;

// export function CFStringAppendCString(theString: string, cStr: string | any, encoding: number): void;

// export function CFStringAppendCharacters(theString: string, chars: number, numChars: number): void;

// export function CFStringAppendPascalString(theString: string, pStr: string | any, encoding: number): void;

// export function CFStringCapitalize(theString: string, locale: Locale): void;

// export function CFStringCompare(theString1: string, theString2: string, compareOptions: CFString.CFStringCompareFlags): CFBase.CFComparisonResult;

// export function CFStringCompareWithOptions(theString1: string, theString2: string, rangeToCompare: CFRange, compareOptions: CFString.CFStringCompareFlags): CFBase.CFComparisonResult;

// export function CFStringCompareWithOptionsAndLocale(theString1: string, theString2: string, rangeToCompare: CFRange, compareOptions: CFString.CFStringCompareFlags, locale: Locale): CFBase.CFComparisonResult;

// export function CFStringConvertEncodingToIANACharSetName(encoding: number): string;

// export function CFStringConvertEncodingToNSStringEncoding(encoding: number): number;

// export function CFStringConvertEncodingToWindowsCodepage(encoding: number): number;

// export function CFStringConvertIANACharSetNameToEncoding(theString: string): number;

// export function CFStringConvertNSStringEncodingToEncoding(encoding: number): number;

// export function CFStringConvertWindowsCodepageToEncoding(codepage: number): number;

// export function CFStringCreateArrayBySeparatingStrings(alloc: any, theString: string, separatorString: string): any[];

// export function CFStringCreateArrayWithFindResults(alloc: any, theString: string, stringToFind: string, rangeToSearch: CFRange, compareOptions: CFString.CFStringCompareFlags): any[];

// export function CFStringCreateByCombiningStrings(alloc: any, theArray: any[], separatorString: string): string;

// export function CFStringCreateCopy(alloc: any, theString: string): string;

// export function CFStringCreateExternalRepresentation(alloc: any, theString: string, encoding: number, lossByte: number): Data;

// export function CFStringCreateFromExternalRepresentation(alloc: any, data: Data, encoding: number): string;

// export function CFStringCreateMutable(alloc: any, maxLength: number): string;

// export function CFStringCreateMutableCopy(alloc: any, maxLength: number, theString: string): string;

// export function CFStringCreateMutableWithExternalCharactersNoCopy(alloc: any, chars: number, numChars: number, capacity: number, externalCharactersAllocator: any): string;

// export function CFStringCreateWithBytes(alloc: any, bytes: string | any, numBytes: number, encoding: number, isExternalRepresentation: boolean): string;

// export function CFStringCreateWithBytesNoCopy(alloc: any, bytes: string | any, numBytes: number, encoding: number, isExternalRepresentation: boolean, contentsDeallocator: any): string;

// export function CFStringCreateWithCString(alloc: any, cStr: string | any, encoding: number): string;

// export function CFStringCreateWithCStringNoCopy(alloc: any, cStr: string | any, encoding: number, contentsDeallocator: any): string;

// export function CFStringCreateWithCharacters(alloc: any, chars: number, numChars: number): string;

// export function CFStringCreateWithCharactersNoCopy(alloc: any, chars: number, numChars: number, contentsDeallocator: any): string;

// export function CFStringCreateWithFileSystemRepresentation(alloc: any, buffer: string | any): string;

// export function CFStringCreateWithPascalString(alloc: any, pStr: string | any, encoding: number): string;

// export function CFStringCreateWithPascalStringNoCopy(alloc: any, pStr: string | any, encoding: number, contentsDeallocator: any): string;

// export function CFStringCreateWithSubstring(alloc: any, str: string, range: CFRange): string;

// export function CFStringDelete(theString: string, range: CFRange): void;

// export function CFStringFind(theString: string, stringToFind: string, compareOptions: CFString.CFStringCompareFlags): CFRange;

// export function CFStringFindAndReplace(theString: string, stringToFind: string, replacementString: string, rangeToSearch: CFRange, compareOptions: CFString.CFStringCompareFlags): number;

// export function CFStringFindCharacterFromSet(theString: string, theSet: CharacterSet, rangeToSearch: CFRange, searchOptions: CFString.CFStringCompareFlags, result: CFRange): boolean;

// export function CFStringFindWithOptions(theString: string, stringToFind: string, rangeToSearch: CFRange, searchOptions: CFString.CFStringCompareFlags, result: CFRange): boolean;

// export function CFStringFindWithOptionsAndLocale(theString: string, stringToFind: string, rangeToSearch: CFRange, searchOptions: CFString.CFStringCompareFlags, locale: Locale, result: CFRange): boolean;

// export function CFStringFold(theString: string, theFlags: CFString.CFStringCompareFlags, theLocale: Locale): void;

// export function CFStringGetBytes(theString: string, range: CFRange, encoding: number, lossByte: number, isExternalRepresentation: boolean, buffer: string | any, maxBufLen: number, usedBufLen: number): number;

// export function CFStringGetCString(theString: string, buffer: string | any, bufferSize: number, encoding: number): boolean;

// export function CFStringGetCStringPtr(theString: string, encoding: number): string;

// export function CFStringGetCharacterAtIndex(theString: string, idx: number): number;

// export function CFStringGetCharacters(theString: string, range: CFRange, buffer: number): void;

// export function CFStringGetCharactersPtr(theString: string): number;

// export function CFStringGetDoubleValue(str: string): number;

// export function CFStringGetFastestEncoding(theString: string): number;

// export function CFStringGetFileSystemRepresentation(string: string, buffer: string | any, maxBufLen: number): boolean;

// export function CFStringGetHyphenationLocationBeforeIndex(string: string, location: number, limitRange: CFRange, options: number, locale: Locale, character: number): number;

// export function CFStringGetIntValue(str: string): number;

// export function CFStringGetLength(theString: string): number;

// export function CFStringGetLineBounds(theString: string, range: CFRange, lineBeginIndex: number, lineEndIndex: number, contentsEndIndex: number): void;

// export function CFStringGetListOfAvailableEncodings(): number;

// export function CFStringGetMaximumSizeForEncoding(length: number, encoding: number): number;

// export function CFStringGetMaximumSizeOfFileSystemRepresentation(string: string): number;

// export function CFStringGetMostCompatibleMacStringEncoding(encoding: number): number;

// export function CFStringGetNameOfEncoding(encoding: number): string;

// export function CFStringGetParagraphBounds(string: string, range: CFRange, parBeginIndex: number, parEndIndex: number, contentsEndIndex: number): void;

// export function CFStringGetPascalString(theString: string, buffer: string | any, bufferSize: number, encoding: number): boolean;

// export function CFStringGetPascalStringPtr(theString: string, encoding: number): string;

// export function CFStringGetRangeOfComposedCharactersAtIndex(theString: string, theIndex: number): CFRange;

// export function CFStringGetSmallestEncoding(theString: string): number;

// export function CFStringGetSystemEncoding(): number;

// export function CFStringGetTypeID(): number;

// export function CFStringHasPrefix(theString: string, prefix: string): boolean;

// export function CFStringHasSuffix(theString: string, suffix: string): boolean;

// export function CFStringInsert(str: string, idx: number, insertedStr: string): void;

// export function CFStringIsEncodingAvailable(encoding: number): boolean;

// export function CFStringIsHyphenationAvailableForLocale(locale: Locale): boolean;

// export function CFStringLowercase(theString: string, locale: Locale): void;

// export function CFStringNormalize(theString: string, theForm: CFString.CFStringNormalizationForm): void;

// export function CFStringPad(theString: string, padString: string, length: number, indexIntoPad: number): void;

// export function CFStringReplace(theString: string, range: CFRange, replacement: string): void;

// export function CFStringReplaceAll(theString: string, replacement: string): void;

// export function CFStringSetExternalCharactersNoCopy(theString: string, chars: number, length: number, capacity: number): void;

// export function CFStringTokenizerAdvanceToNextToken(tokenizer: any): CFStringTokenizer.CFStringTokenizerTokenType;

// export function CFStringTokenizerCopyBestStringLanguage(string: string, range: CFRange): string;

// export function CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: any, attribute: number): any;

// export function CFStringTokenizerCreate(alloc: any, string: string, range: CFRange, options: number, locale: Locale): any;

// export function CFStringTokenizerGetCurrentSubTokens(tokenizer: any, ranges: CFRange, maxRangeLength: number, derivedSubTokens: any[]): number;

// export function CFStringTokenizerGetCurrentTokenRange(tokenizer: any): CFRange;

// export function CFStringTokenizerGetTypeID(): number;

// export function CFStringTokenizerGoToTokenAtIndex(tokenizer: any, index: number): CFStringTokenizer.CFStringTokenizerTokenType;

// export function CFStringTokenizerSetString(tokenizer: any, string: string, range: CFRange): void;

// export function CFStringTransform(string: string, range: CFRange, transform: string, reverse: boolean): boolean;

// export function CFStringTrim(theString: string, trimString: string): void;

// export function CFStringTrimWhitespace(theString: string): void;

// export function CFStringUppercase(theString: string, locale: Locale): void;

// export function CFTimeZoneCopyAbbreviation(tz: TimeZone, at: number): string;

// export function CFTimeZoneCopyAbbreviationDictionary(): Map<any, any>;

// export function CFTimeZoneCopyDefault(): TimeZone;

// export function CFTimeZoneCopyKnownNames(): any[];

// export function CFTimeZoneCopyLocalizedName(tz: TimeZone, style: CFTimeZone.CFTimeZoneNameStyle, locale: Locale): string;

// export function CFTimeZoneCopySystem(): TimeZone;

// export function CFTimeZoneCreate(allocator: any, name: string, data: Data): TimeZone;

// export function CFTimeZoneCreateWithName(allocator: any, name: string, tryAbbrev: boolean): TimeZone;

// export function CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: any, ti: number): TimeZone;

// export function CFTimeZoneGetData(tz: TimeZone): Data;

// export function CFTimeZoneGetDaylightSavingTimeOffset(tz: TimeZone, at: number): number;

// export function CFTimeZoneGetName(tz: TimeZone): string;

// export function CFTimeZoneGetNextDaylightSavingTimeTransition(tz: TimeZone, at: number): number;

// export function CFTimeZoneGetSecondsFromGMT(tz: TimeZone, at: number): number;

// export function CFTimeZoneGetTypeID(): number;

// export function CFTimeZoneIsDaylightSavingTime(tz: TimeZone, at: number): boolean;

// export function CFTimeZoneResetSystem(): void;

// export function CFTimeZoneSetAbbreviationDictionary(dict: Map<any, any>): void;

// export function CFTimeZoneSetDefault(tz: TimeZone): void;

// export function CFTreeAppendChild(tree: any, newChild: any): void;

// export function CFTreeApplyFunctionToChildren(tree: any, applier: (p1: any, p2: any) => void, context: any): void;

// export function CFTreeCreate(allocator: any, context: CFTreeContext): any;

// export function CFTreeFindRoot(tree: any): any;

// export function CFTreeGetChildAtIndex(tree: any, idx: number): any;

// export function CFTreeGetChildCount(tree: any): number;

// export function CFTreeGetChildren(tree: any, children: any): void;

// export function CFTreeGetContext(tree: any, context: CFTreeContext): void;

// export function CFTreeGetFirstChild(tree: any): any;

// export function CFTreeGetNextSibling(tree: any): any;

// export function CFTreeGetParent(tree: any): any;

// export function CFTreeGetTypeID(): number;

// export function CFTreeInsertSibling(tree: any, newSibling: any): void;

// export function CFTreePrependChild(tree: any, newChild: any): void;

// export function CFTreeRemove(tree: any): void;

// export function CFTreeRemoveAllChildren(tree: any): void;

// export function CFTreeSetContext(tree: any, context: CFTreeContext): void;

// export function CFTreeSortChildren(tree: any, comparator: (p1: any, p2: any, p3: any) => CFBase.CFComparisonResult, context: any): void;

// export function CFURLCanBeDecomposed(anURL: URL): boolean;

// export function CFURLClearResourcePropertyCache(url: URL): void;

// export function CFURLClearResourcePropertyCacheForKey(url: URL, key: string): void;

// export function CFURLCopyAbsoluteURL(relativeURL: URL): URL;

// export function CFURLCopyFileSystemPath(anURL: URL, pathStyle: CFURL.CFURLPathStyle): string;

// export function CFURLCopyFragment(anURL: URL, charactersToLeaveEscaped: string): string;

// export function CFURLCopyHostName(anURL: URL): string;

// export function CFURLCopyLastPathComponent(url: URL): string;

// export function CFURLCopyNetLocation(anURL: URL): string;

// export function CFURLCopyPassword(anURL: URL): string;

// export function CFURLCopyPath(anURL: URL): string;

// export function CFURLCopyPathExtension(url: URL): string;

// export function CFURLCopyQueryString(anURL: URL, charactersToLeaveEscaped: string): string;

// export function CFURLCopyResourcePropertiesForKeys(url: URL, keys: any[], error: Error): Map<any, any>;

// export function CFURLCopyResourcePropertyForKey(url: URL, key: string, propertyValueTypeRefPtr: any, error: Error): boolean;

// export function CFURLCopyResourceSpecifier(anURL: URL): string;

// export function CFURLCopyScheme(anURL: URL): string;

// export function CFURLCopyStrictPath(anURL: URL, isAbsolute: string | any): string;

// export function CFURLCopyUserName(anURL: URL): string;

// export function CFURLCreateAbsoluteURLWithBytes(alloc: any, relativeURLBytes: string | any, length: number, encoding: number, baseURL: URL, useCompatibilityMode: boolean): URL;

// export function CFURLCreateBookmarkData(allocator: any, url: URL, options: CFURL.CFURLBookmarkCreationOptions, resourcePropertiesToInclude: any[], relativeToURL: URL, error: Error): Data;

// export function CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: any, aliasRecordDataRef: Data): Data;

// export function CFURLCreateBookmarkDataFromFile(allocator: any, fileURL: URL, errorRef: Error): Data;

// export function CFURLCreateByResolvingBookmarkData(allocator: any, bookmark: Data, options: CFURL.CFURLBookmarkResolutionOptions, relativeToURL: URL, resourcePropertiesToInclude: any[], isStale: string | any, error: Error): URL;

// export function CFURLCreateCopyAppendingPathComponent(allocator: any, url: URL, pathComponent: string, isDirectory: boolean): URL;

// export function CFURLCreateCopyAppendingPathExtension(allocator: any, url: URL, extension: string): URL;

// export function CFURLCreateCopyDeletingLastPathComponent(allocator: any, url: URL): URL;

// export function CFURLCreateCopyDeletingPathExtension(allocator: any, url: URL): URL;

// export function CFURLCreateData(allocator: any, url: URL, encoding: number, escapeWhitespace: boolean): Data;

// export function CFURLCreateFilePathURL(allocator: any, url: URL, error: Error): URL;

// export function CFURLCreateFileReferenceURL(allocator: any, url: URL, error: Error): URL;

// export function CFURLCreateFromFileSystemRepresentation(allocator: any, buffer: string | any, bufLen: number, isDirectory: boolean): URL;

// export function CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: any, buffer: string | any, bufLen: number, isDirectory: boolean, baseURL: URL): URL;

// export function CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: any, resourcePropertiesToReturn: any[], bookmark: Data): Map<any, any>;

// export function CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: any, resourcePropertyKey: string, bookmark: Data): any;

// export function CFURLCreateStringByReplacingPercentEscapes(allocator: any, originalString: string, charactersToLeaveEscaped: string): string;

// export function CFURLCreateWithBytes(allocator: any, URLBytes: string | any, length: number, encoding: number, baseURL: URL): URL;

// export function CFURLCreateWithFileSystemPath(allocator: any, filePath: string, pathStyle: CFURL.CFURLPathStyle, isDirectory: boolean): URL;

// export function CFURLCreateWithFileSystemPathRelativeToBase(allocator: any, filePath: string, pathStyle: CFURL.CFURLPathStyle, isDirectory: boolean, baseURL: URL): URL;

// export function CFURLCreateWithString(allocator: any, URLString: string, baseURL: URL): URL;

// export function CFURLEnumeratorCreateForDirectoryURL(alloc: any, directoryURL: URL, option: CFURLEnumerator.CFURLEnumeratorOptions, propertyKeys: any[]): any;

// export function CFURLEnumeratorCreateForMountedVolumes(alloc: any, option: CFURLEnumerator.CFURLEnumeratorOptions, propertyKeys: any[]): any;

// export function CFURLEnumeratorGetDescendentLevel(enumerator: any): number;

// export function CFURLEnumeratorGetNextURL(enumerator: any, url: URL, error: Error): CFURLEnumerator.CFURLEnumeratorResult;

// export function CFURLEnumeratorGetTypeID(): number;

// export function CFURLEnumeratorSkipDescendents(enumerator: any): void;

// export function CFURLGetBaseURL(anURL: URL): URL;

// export function CFURLGetByteRangeForComponent(url: URL, component: CFURL.CFURLComponentType, rangeIncludingSeparators: CFRange): CFRange;

// export function CFURLGetBytes(url: URL, buffer: string | any, bufferLength: number): number;

// export function CFURLGetFileSystemRepresentation(url: URL, resolveAgainstBase: boolean, buffer: string | any, maxBufLen: number): boolean;

// export function CFURLGetPortNumber(anURL: URL): number;

// export function CFURLGetString(anURL: URL): string;

// export function CFURLGetTypeID(): number;

// export function CFURLHasDirectoryPath(anURL: URL): boolean;

// export function CFURLIsFileReferenceURL(url: URL): boolean;

// export function CFURLResourceIsReachable(url: URL, error: Error): boolean;

// export function CFURLSetResourcePropertiesForKeys(url: URL, keyedPropertyValues: Map<any, any>, error: Error): boolean;

// export function CFURLSetResourcePropertyForKey(url: URL, key: string, propertyValue: any, error: Error): boolean;

// export function CFURLSetTemporaryResourcePropertyForKey(url: URL, key: string, propertyValue: any): void;

// export function CFURLStartAccessingSecurityScopedResource(url: URL): boolean;

// export function CFURLStopAccessingSecurityScopedResource(url: URL): void;

// export function CFURLWriteBookmarkDataToFile(bookmarkRef: Data, fileURL: URL, options: number, errorRef: Error): boolean;

// export function CFUUIDCreate(alloc: any): any;

// export function CFUUIDCreateFromString(alloc: any, uuidStr: string): any;

// export function CFUUIDCreateFromUUIDBytes(alloc: any, bytes: CFUUIDBytes): any;

// export function CFUUIDCreateString(alloc: any, uuid: any): string;

// export function CFUUIDCreateWithBytes(alloc: any, byte0: number, byte1: number, byte2: number, byte3: number, byte4: number, byte5: number, byte6: number, byte7: number, byte8: number, byte9: number, byte10: number, byte11: number, byte12: number, byte13: number, byte14: number, byte15: number): any;

// export function CFUUIDGetConstantUUIDWithBytes(alloc: any, byte0: number, byte1: number, byte2: number, byte3: number, byte4: number, byte5: number, byte6: number, byte7: number, byte8: number, byte9: number, byte10: number, byte11: number, byte12: number, byte13: number, byte14: number, byte15: number): any;

// export function CFUUIDGetTypeID(): number;

// export function CFUUIDGetUUIDBytes(uuid: any): CFUUIDBytes;

// export function CFUserNotificationCancel(userNotification: any): number;

// export function CFUserNotificationCreate(allocator: any, timeout: number, flags: number, error: number, dictionary: Map<any, any>): any;

// export function CFUserNotificationCreateRunLoopSource(allocator: any, userNotification: any, callout: (p1: any, p2: number) => void, order: number): any;

// export function CFUserNotificationDisplayAlert(timeout: number, flags: number, iconURL: URL, soundURL: URL, localizationURL: URL, alertHeader: string, alertMessage: string, defaultButtonTitle: string, alternateButtonTitle: string, otherButtonTitle: string, responseFlags: number): number;

// export function CFUserNotificationDisplayNotice(timeout: number, flags: number, iconURL: URL, soundURL: URL, localizationURL: URL, alertHeader: string, alertMessage: string, defaultButtonTitle: string): number;

// export function CFUserNotificationGetResponseDictionary(userNotification: any): Map<any, any>;

// export function CFUserNotificationGetResponseValue(userNotification: any, key: string, idx: number): string;

// export function CFUserNotificationGetTypeID(): number;

// export function CFUserNotificationReceiveResponse(userNotification: any, timeout: number, responseFlags: number): number;

// export function CFUserNotificationUpdate(userNotification: any, timeout: number, flags: number, dictionary: Map<any, any>): number;

// export function CFWriteStreamCanAcceptBytes(stream: OutputStream): boolean;

// export function CFWriteStreamClose(stream: OutputStream): void;

// export function CFWriteStreamCopyDispatchQueue(stream: OutputStream): NSObject;

// export function CFWriteStreamCopyError(stream: OutputStream): Error;

// export function CFWriteStreamCopyProperty(stream: OutputStream, propertyName: any): any;

// export function CFWriteStreamCreateWithAllocatedBuffers(alloc: any, bufferAllocator: any): OutputStream;

// export function CFWriteStreamCreateWithBuffer(alloc: any, buffer: string | any, bufferCapacity: number): OutputStream;

// export function CFWriteStreamCreateWithFile(alloc: any, fileURL: URL): OutputStream;

// export function CFWriteStreamGetError(stream: OutputStream): CFStreamError;

// export function CFWriteStreamGetStatus(stream: OutputStream): CFStream.CFStreamStatus;

// export function CFWriteStreamGetTypeID(): number;

// export function CFWriteStreamOpen(stream: OutputStream): boolean;

// export function CFWriteStreamScheduleWithRunLoop(stream: OutputStream, runLoop: any, runLoopMode: any): void;

// export function CFWriteStreamSetClient(stream: OutputStream, streamEvents: number, clientCB: (p1: OutputStream, p2: CFStream.CFStreamEventType, p3: any) => void, clientContext: CFStreamClientContext): boolean;

// export function CFWriteStreamSetDispatchQueue(stream: OutputStream, q: NSObject): void;

// export function CFWriteStreamSetProperty(stream: OutputStream, propertyName: any, propertyValue: any): boolean;

// export function CFWriteStreamUnscheduleFromRunLoop(stream: OutputStream, runLoop: any, runLoopMode: any): void;

// export function CFWriteStreamWrite(stream: OutputStream, buffer: string | any, bufferLength: number): number;

// export function CFXMLCreateStringByEscapingEntities(allocator: any, string: string, entitiesDictionary: Map<any, any>): string;

// export function CFXMLCreateStringByUnescapingEntities(allocator: any, string: string, entitiesDictionary: Map<any, any>): string;

// export function __CFRangeMake(loc: number, len: number): CFRange;

// export function __CFStringMakeConstantString(cStr: string | any): string;

// export function CGAcquireDisplayFadeReservation(seconds: number, token: number): CGError.CGError;

// export function CGAffineTransformConcat(t1: CGAffineTransform, t2: CGAffineTransform): CGAffineTransform;

// export function CGAffineTransformEqualToTransform(t1: CGAffineTransform, t2: CGAffineTransform): boolean;

// export function CGAffineTransformInvert(t: CGAffineTransform): CGAffineTransform;

// export function CGAffineTransformIsIdentity(t: CGAffineTransform): boolean;

// export function CGAffineTransformMake(a: number, b: number, c: number, d: number, tx: number, ty: number): CGAffineTransform;

// export function CGAffineTransformMakeRotation(angle: number): CGAffineTransform;

// export function CGAffineTransformMakeScale(sx: number, sy: number): CGAffineTransform;

// export function CGAffineTransformMakeTranslation(tx: number, ty: number): CGAffineTransform;

// export function CGAffineTransformRotate(t: CGAffineTransform, angle: number): CGAffineTransform;

// export function CGAffineTransformScale(t: CGAffineTransform, sx: number, sy: number): CGAffineTransform;

// export function CGAffineTransformTranslate(t: CGAffineTransform, tx: number, ty: number): CGAffineTransform;

// export function CGAssociateMouseAndMouseCursorPosition(connected: number): CGError.CGError;

// export function CGBeginDisplayConfiguration(config: any): CGError.CGError;

// export function CGBitmapContextCreate(data: any, width: number, height: number, bitsPerComponent: number, bytesPerRow: number, space: any, bitmapInfo: number): any;

// export function CGBitmapContextCreateImage(context: any): any;

// export function CGBitmapContextCreateWithData(data: any, width: number, height: number, bitsPerComponent: number, bytesPerRow: number, space: any, bitmapInfo: number, releaseCallback: (p1: any, p2: any) => void, releaseInfo: any): any;

// export function CGBitmapContextGetAlphaInfo(context: any): CGImage.CGImageAlphaInfo;

// export function CGBitmapContextGetBitmapInfo(context: any): CGImage.CGBitmapInfo;

// export function CGBitmapContextGetBitsPerComponent(context: any): number;

// export function CGBitmapContextGetBitsPerPixel(context: any): number;

// export function CGBitmapContextGetBytesPerRow(context: any): number;

// export function CGBitmapContextGetColorSpace(context: any): any;

// export function CGBitmapContextGetData(context: any): any;

// export function CGBitmapContextGetHeight(context: any): number;

// export function CGBitmapContextGetWidth(context: any): number;

// export function CGCancelDisplayConfiguration(config: any): CGError.CGError;

// export function CGCaptureAllDisplays(): CGError.CGError;

// export function CGCaptureAllDisplaysWithOptions(options: CGDirectDisplay.CGCaptureOptions): CGError.CGError;

// export function CGColorConversionInfoCreate(src: any, dst: any): any;

// export function CGColorConversionInfoCreateWithOptions(src: any, dst: any, options: Map<any, any>): any;

// export function CGColorCreate(space: any, components: number): any;

// export function CGColorCreateCopy(color: any): any;

// export function CGColorCreateCopyByMatchingToColorSpace(p1: any, intent: CGColorSpace.CGColorRenderingIntent, color: any, options: Map<any, any>): any;

// export function CGColorCreateCopyWithAlpha(color: any, alpha: number): any;

// export function CGColorCreateGenericCMYK(cyan: number, magenta: number, yellow: number, black: number, alpha: number): any;

// export function CGColorCreateGenericGray(gray: number, alpha: number): any;

// export function CGColorCreateGenericGrayGamma2_2(gray: number, alpha: number): any;

// export function CGColorCreateGenericRGB(red: number, green: number, blue: number, alpha: number): any;

// export function CGColorCreateSRGB(red: number, green: number, blue: number, alpha: number): any;

// export function CGColorCreateWithPattern(space: any, pattern: any, components: number): any;

// export function CGColorEqualToColor(color1: any, color2: any): boolean;

// export function CGColorGetAlpha(color: any): number;

// export function CGColorGetColorSpace(color: any): any;

// export function CGColorGetComponents(color: any): number;

// export function CGColorGetConstantColor(colorName: string): any;

// export function CGColorGetNumberOfComponents(color: any): number;

// export function CGColorGetPattern(color: any): any;

// export function CGColorRelease(color: any): void;

// export function CGColorRetain(color: any): any;

// export function CGColorSpaceCopyICCData(space: any): Data;

// export function CGColorSpaceCopyName(space: any): string;

// export function CGColorSpaceCopyPropertyList(space: any): any;

// export function CGColorSpaceCreateCalibratedGray(whitePoint: number, blackPoint: number, gamma: number): any;

// export function CGColorSpaceCreateCalibratedRGB(whitePoint: number, blackPoint: number, gamma: number, matrix: number): any;

// export function CGColorSpaceCreateDeviceCMYK(): any;

// export function CGColorSpaceCreateDeviceGray(): any;

// export function CGColorSpaceCreateDeviceRGB(): any;

// export function CGColorSpaceCreateICCBased(nComponents: number, range: number, profile: any, alternate: any): any;

// export function CGColorSpaceCreateIndexed(baseSpace: any, lastIndex: number, colorTable: string | any): any;

// export function CGColorSpaceCreateLab(whitePoint: number, blackPoint: number, range: number): any;

// export function CGColorSpaceCreatePattern(baseSpace: any): any;

// export function CGColorSpaceCreateWithICCData(data: any): any;

// export function CGColorSpaceCreateWithName(name: string): any;

// export function CGColorSpaceCreateWithPlatformColorSpace(ref: any): any;

// export function CGColorSpaceCreateWithPropertyList(plist: any): any;

// export function CGColorSpaceGetBaseColorSpace(space: any): any;

// export function CGColorSpaceGetColorTable(space: any, table: string | any): void;

// export function CGColorSpaceGetColorTableCount(space: any): number;

// export function CGColorSpaceGetModel(space: any): CGColorSpace.CGColorSpaceModel;

// export function CGColorSpaceGetName(space: any): string;

// export function CGColorSpaceGetNumberOfComponents(space: any): number;

// export function CGColorSpaceIsWideGamutRGB(p1: any): boolean;

// export function CGColorSpaceRelease(space: any): void;

// export function CGColorSpaceRetain(space: any): any;

// export function CGColorSpaceSupportsOutput(space: any): boolean;

// export function CGCompleteDisplayConfiguration(config: any, option: CGDisplayConfiguration.CGConfigureOption): CGError.CGError;

// export function CGConfigureDisplayFadeEffect(config: any, fadeOutSeconds: number, fadeInSeconds: number, fadeRed: number, fadeGreen: number, fadeBlue: number): CGError.CGError;

// export function CGConfigureDisplayMirrorOfDisplay(config: any, display: number, master: number): CGError.CGError;

// export function CGConfigureDisplayOrigin(config: any, display: number, x: number, y: number): CGError.CGError;

// export function CGConfigureDisplayStereoOperation(config: any, display: number, stereo: number, forceBlueLine: number): CGError.CGError;

// export function CGConfigureDisplayWithDisplayMode(config: any, display: number, mode: any, options: Map<any, any>): CGError.CGError;

// export function CGContextAddArc(c: any, x: number, y: number, radius: number, startAngle: number, endAngle: number, clockwise: number): void;

// export function CGContextAddArcToPoint(c: any, x1: number, y1: number, x2: number, y2: number, radius: number): void;

// export function CGContextAddCurveToPoint(c: any, cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

// export function CGContextAddEllipseInRect(c: any, rect: CGRect): void;

// export function CGContextAddLineToPoint(c: any, x: number, y: number): void;

// export function CGContextAddLines(c: any, points: CGPoint, count: number): void;

// export function CGContextAddPath(c: any, path: any): void;

// export function CGContextAddQuadCurveToPoint(c: any, cpx: number, cpy: number, x: number, y: number): void;

// export function CGContextAddRect(c: any, rect: CGRect): void;

// export function CGContextAddRects(c: any, rects: CGRect, count: number): void;

// export function CGContextBeginPage(c: any, mediaBox: CGRect): void;

// export function CGContextBeginPath(c: any): void;

// export function CGContextBeginTransparencyLayer(c: any, auxiliaryInfo: Map<any, any>): void;

// export function CGContextBeginTransparencyLayerWithRect(c: any, rect: CGRect, auxInfo: Map<any, any>): void;

// export function CGContextClearRect(c: any, rect: CGRect): void;

// export function CGContextClip(c: any): void;

// export function CGContextClipToMask(c: any, rect: CGRect, mask: any): void;

// export function CGContextClipToRect(c: any, rect: CGRect): void;

// export function CGContextClipToRects(c: any, rects: CGRect, count: number): void;

// export function CGContextClosePath(c: any): void;

// export function CGContextConcatCTM(c: any, transform: CGAffineTransform): void;

// export function CGContextConvertPointToDeviceSpace(c: any, point: CGPoint): CGPoint;

// export function CGContextConvertPointToUserSpace(c: any, point: CGPoint): CGPoint;

// export function CGContextConvertRectToDeviceSpace(c: any, rect: CGRect): CGRect;

// export function CGContextConvertRectToUserSpace(c: any, rect: CGRect): CGRect;

// export function CGContextConvertSizeToDeviceSpace(c: any, size: CGSize): CGSize;

// export function CGContextConvertSizeToUserSpace(c: any, size: CGSize): CGSize;

// export function CGContextCopyPath(c: any): any;

// export function CGContextDrawImage(c: any, rect: CGRect, image: any): void;

// export function CGContextDrawLayerAtPoint(context: any, point: CGPoint, layer: any): void;

// export function CGContextDrawLayerInRect(context: any, rect: CGRect, layer: any): void;

// export function CGContextDrawLinearGradient(c: any, gradient: any, startPoint: CGPoint, endPoint: CGPoint, options: CGGradient.CGGradientDrawingOptions): void;

// export function CGContextDrawPDFPage(c: any, page: any): void;

// export function CGContextDrawPath(c: any, mode: CGContext.CGPathDrawingMode): void;

// export function CGContextDrawRadialGradient(c: any, gradient: any, startCenter: CGPoint, startRadius: number, endCenter: CGPoint, endRadius: number, options: CGGradient.CGGradientDrawingOptions): void;

// export function CGContextDrawShading(c: any, shading: any): void;

// export function CGContextDrawTiledImage(c: any, rect: CGRect, image: any): void;

// export function CGContextEOClip(c: any): void;

// export function CGContextEOFillPath(c: any): void;

// export function CGContextEndPage(c: any): void;

// export function CGContextEndTransparencyLayer(c: any): void;

// export function CGContextFillEllipseInRect(c: any, rect: CGRect): void;

// export function CGContextFillPath(c: any): void;

// export function CGContextFillRect(c: any, rect: CGRect): void;

// export function CGContextFillRects(c: any, rects: CGRect, count: number): void;

// export function CGContextFlush(c: any): void;

// export function CGContextGetCTM(c: any): CGAffineTransform;

// export function CGContextGetClipBoundingBox(c: any): CGRect;

// export function CGContextGetInterpolationQuality(c: any): CGContext.CGInterpolationQuality;

// export function CGContextGetPathBoundingBox(c: any): CGRect;

// export function CGContextGetPathCurrentPoint(c: any): CGPoint;

// export function CGContextGetTextMatrix(c: any): CGAffineTransform;

// export function CGContextGetTextPosition(c: any): CGPoint;

// export function CGContextGetUserSpaceToDeviceSpaceTransform(c: any): CGAffineTransform;

// export function CGContextIsPathEmpty(c: any): boolean;

// export function CGContextMoveToPoint(c: any, x: number, y: number): void;

// export function CGContextPathContainsPoint(c: any, point: CGPoint, mode: CGContext.CGPathDrawingMode): boolean;

// export function CGContextRelease(c: any): void;

// export function CGContextReplacePathWithStrokedPath(c: any): void;

// export function CGContextResetClip(c: any): void;

// export function CGContextRestoreGState(c: any): void;

// export function CGContextRetain(c: any): any;

// export function CGContextRotateCTM(c: any, angle: number): void;

// export function CGContextSaveGState(c: any): void;

// export function CGContextScaleCTM(c: any, sx: number, sy: number): void;

// export function CGContextSetAllowsAntialiasing(c: any, allowsAntialiasing: boolean): void;

// export function CGContextSetAllowsFontSmoothing(c: any, allowsFontSmoothing: boolean): void;

// export function CGContextSetAllowsFontSubpixelPositioning(c: any, allowsFontSubpixelPositioning: boolean): void;

// export function CGContextSetAllowsFontSubpixelQuantization(c: any, allowsFontSubpixelQuantization: boolean): void;

// export function CGContextSetAlpha(c: any, alpha: number): void;

// export function CGContextSetBlendMode(c: any, mode: CGContext.CGBlendMode): void;

// export function CGContextSetCMYKFillColor(c: any, cyan: number, magenta: number, yellow: number, black: number, alpha: number): void;

// export function CGContextSetCMYKStrokeColor(c: any, cyan: number, magenta: number, yellow: number, black: number, alpha: number): void;

// export function CGContextSetCharacterSpacing(c: any, spacing: number): void;

// export function CGContextSetFillColor(c: any, components: number): void;

// export function CGContextSetFillColorSpace(c: any, space: any): void;

// export function CGContextSetFillColorWithColor(c: any, color: any): void;

// export function CGContextSetFillPattern(c: any, pattern: any, components: number): void;

// export function CGContextSetFlatness(c: any, flatness: number): void;

// export function CGContextSetFont(c: any, font: any): void;

// export function CGContextSetFontSize(c: any, size: number): void;

// export function CGContextSetGrayFillColor(c: any, gray: number, alpha: number): void;

// export function CGContextSetGrayStrokeColor(c: any, gray: number, alpha: number): void;

// export function CGContextSetInterpolationQuality(c: any, quality: CGContext.CGInterpolationQuality): void;

// export function CGContextSetLineCap(c: any, cap: CGPath.CGLineCap): void;

// export function CGContextSetLineDash(c: any, phase: number, lengths: number, count: number): void;

// export function CGContextSetLineJoin(c: any, join: CGPath.CGLineJoin): void;

// export function CGContextSetLineWidth(c: any, width: number): void;

// export function CGContextSetMiterLimit(c: any, limit: number): void;

// export function CGContextSetPatternPhase(c: any, phase: CGSize): void;

// export function CGContextSetRGBFillColor(c: any, red: number, green: number, blue: number, alpha: number): void;

// export function CGContextSetRGBStrokeColor(c: any, red: number, green: number, blue: number, alpha: number): void;

// export function CGContextSetRenderingIntent(c: any, intent: CGColorSpace.CGColorRenderingIntent): void;

// export function CGContextSetShadow(c: any, offset: CGSize, blur: number): void;

// export function CGContextSetShadowWithColor(c: any, offset: CGSize, blur: number, color: any): void;

// export function CGContextSetShouldAntialias(c: any, shouldAntialias: boolean): void;

// export function CGContextSetShouldSmoothFonts(c: any, shouldSmoothFonts: boolean): void;

// export function CGContextSetShouldSubpixelPositionFonts(c: any, shouldSubpixelPositionFonts: boolean): void;

// export function CGContextSetShouldSubpixelQuantizeFonts(c: any, shouldSubpixelQuantizeFonts: boolean): void;

// export function CGContextSetStrokeColor(c: any, components: number): void;

// export function CGContextSetStrokeColorSpace(c: any, space: any): void;

// export function CGContextSetStrokeColorWithColor(c: any, color: any): void;

// export function CGContextSetStrokePattern(c: any, pattern: any, components: number): void;

// export function CGContextSetTextDrawingMode(c: any, mode: CGContext.CGTextDrawingMode): void;

// export function CGContextSetTextMatrix(c: any, t: CGAffineTransform): void;

// export function CGContextSetTextPosition(c: any, x: number, y: number): void;

// export function CGContextShowGlyphsAtPositions(c: any, glyphs: number, Lpositions: CGPoint, count: number): void;

// export function CGContextStrokeEllipseInRect(c: any, rect: CGRect): void;

// export function CGContextStrokeLineSegments(c: any, points: CGPoint, count: number): void;

// export function CGContextStrokePath(c: any): void;

// export function CGContextStrokeRect(c: any, rect: CGRect): void;

// export function CGContextStrokeRectWithWidth(c: any, rect: CGRect, width: number): void;

// export function CGContextSynchronize(c: any): void;

// export function CGContextTranslateCTM(c: any, tx: number, ty: number): void;

// export function CGDataConsumerCreate(info: any, cbks: CGDataConsumerCallbacks): any;

// export function CGDataConsumerCreateWithCFData(data: Data): any;

// export function CGDataConsumerCreateWithURL(url: URL): any;

// export function CGDataConsumerRelease(consumer: any): void;

// export function CGDataConsumerRetain(consumer: any): any;

// export function CGDataProviderCopyData(provider: any): Data;

// export function CGDataProviderCreateDirect(info: any, size: number, callbacks: CGDataProviderDirectCallbacks): any;

// export function CGDataProviderCreateSequential(info: any, callbacks: CGDataProviderSequentialCallbacks): any;

// export function CGDataProviderCreateWithCFData(data: Data): any;

// export function CGDataProviderCreateWithData(info: any, data: any, size: number, releaseData: (p1: any, p2: any, p3: number) => void): any;

// export function CGDataProviderCreateWithFilename(filename: string | any): any;

// export function CGDataProviderCreateWithURL(url: URL): any;

// export function CGDataProviderGetInfo(provider: any): any;

// export function CGDataProviderRelease(provider: any): void;

// export function CGDataProviderRetain(provider: any): any;

// export function CGDirectDisplayCopyCurrentMetalDevice(display: number): any;

// export function CGDisplayBounds(display: number): CGRect;

// export function CGDisplayCapture(display: number): CGError.CGError;

// export function CGDisplayCaptureWithOptions(display: number, options: CGDirectDisplay.CGCaptureOptions): CGError.CGError;

// export function CGDisplayCopyAllDisplayModes(display: number, options: Map<any, any>): any[];

// export function CGDisplayCopyColorSpace(display: number): any;

// export function CGDisplayCopyDisplayMode(display: number): any;

// export function CGDisplayCreateImage(displayID: number): any;

// export function CGDisplayCreateImageForRect(display: number, rect: CGRect): any;

// export function CGDisplayFade(token: number, duration: number, startBlend: number, endBlend: number, redBlend: number, greenBlend: number, blueBlend: number, synchronous: number): CGError.CGError;

// export function CGDisplayGammaTableCapacity(display: number): number;

// export function CGDisplayGetDrawingContext(display: number): any;

// export function CGDisplayHideCursor(display: number): CGError.CGError;

// export function CGDisplayIDToOpenGLDisplayMask(display: number): number;

// export function CGDisplayIsActive(display: number): number;

// export function CGDisplayIsAlwaysInMirrorSet(display: number): number;

// export function CGDisplayIsAsleep(display: number): number;

// export function CGDisplayIsBuiltin(display: number): number;

// export function CGDisplayIsInHWMirrorSet(display: number): number;

// export function CGDisplayIsInMirrorSet(display: number): number;

// export function CGDisplayIsMain(display: number): number;

// export function CGDisplayIsOnline(display: number): number;

// export function CGDisplayIsStereo(display: number): number;

// export function CGDisplayMirrorsDisplay(display: number): number;

// export function CGDisplayModeGetHeight(mode: any): number;

// export function CGDisplayModeGetIODisplayModeID(mode: any): number;

// export function CGDisplayModeGetIOFlags(mode: any): number;

// export function CGDisplayModeGetPixelHeight(mode: any): number;

// export function CGDisplayModeGetPixelWidth(mode: any): number;

// export function CGDisplayModeGetRefreshRate(mode: any): number;

// export function CGDisplayModeGetWidth(mode: any): number;

// export function CGDisplayModeIsUsableForDesktopGUI(mode: any): boolean;

// export function CGDisplayModeRelease(mode: any): void;

// export function CGDisplayModeRetain(mode: any): any;

// export function CGDisplayModelNumber(display: number): number;

// export function CGDisplayMoveCursorToPoint(display: number, point: CGPoint): CGError.CGError;

// export function CGDisplayPixelsHigh(display: number): number;

// export function CGDisplayPixelsWide(display: number): number;

// export function CGDisplayPrimaryDisplay(display: number): number;

// export function CGDisplayRegisterReconfigurationCallback(callback: (p1: number, p2: CGDisplayConfiguration.CGDisplayChangeSummaryFlags, p3: any) => void, userInfo: any): CGError.CGError;

// export function CGDisplayRelease(display: number): CGError.CGError;

// export function CGDisplayRemoveReconfigurationCallback(callback: (p1: number, p2: CGDisplayConfiguration.CGDisplayChangeSummaryFlags, p3: any) => void, userInfo: any): CGError.CGError;

// export function CGDisplayRestoreColorSyncSettings(): void;

// export function CGDisplayRotation(display: number): number;

// export function CGDisplayScreenSize(display: number): CGSize;

// export function CGDisplaySerialNumber(display: number): number;

// export function CGDisplaySetDisplayMode(display: number, mode: any, options: Map<any, any>): CGError.CGError;

// export function CGDisplaySetStereoOperation(display: number, stereo: number, forceBlueLine: number, option: CGDisplayConfiguration.CGConfigureOption): CGError.CGError;

// export function CGDisplayShowCursor(display: number): CGError.CGError;

// export function CGDisplayStreamCreate(display: number, outputWidth: number, outputHeight: number, pixelFormat: number, properties: Map<any, any>, handler: (p1: CGDisplayStream.CGDisplayStreamFrameStatus, p2: number, p3: any, p4: any) => void): any;

// export function CGDisplayStreamCreateWithDispatchQueue(display: number, outputWidth: number, outputHeight: number, pixelFormat: number, properties: Map<any, any>, queue: NSObject, handler: (p1: CGDisplayStream.CGDisplayStreamFrameStatus, p2: number, p3: any, p4: any) => void): any;

// export function CGDisplayStreamGetRunLoopSource(displayStream: any): any;

// export function CGDisplayStreamStart(displayStream: any): CGError.CGError;

// export function CGDisplayStreamStop(displayStream: any): CGError.CGError;

// export function CGDisplayStreamUpdateCreateMergedUpdate(firstUpdate: any, secondUpdate: any): any;

// export function CGDisplayStreamUpdateGetDropCount(updateRef: any): number;

// export function CGDisplayStreamUpdateGetMovedRectsDelta(updateRef: any, dx: number, dy: number): void;

// export function CGDisplayStreamUpdateGetRects(updateRef: any, rectType: CGDisplayStream.CGDisplayStreamUpdateRectType, rectCount: number): CGRect;

// export function CGDisplayUnitNumber(display: number): number;

// export function CGDisplayUsesOpenGLAcceleration(display: number): number;

// export function CGDisplayVendorNumber(display: number): number;

// export function CGEventCreate(source: any): any;

// export function CGEventCreateCopy(event: any): any;

// export function CGEventCreateData(allocator: any, event: any): Data;

// export function CGEventCreateFromData(allocator: any, data: Data): any;

// export function CGEventCreateKeyboardEvent(source: any, virtualKey: number, keyDown: boolean): any;

// export function CGEventCreateMouseEvent(source: any, mouseType: CGEventTypes.CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGEventTypes.CGMouseButton): any;

// export function CGEventCreateScrollWheelEvent2(source: any, units: CGEventTypes.CGScrollEventUnit, wheelCount: number, wheel1: number, wheel2: number, wheel3: number): any;

// export function CGEventCreateSourceFromEvent(event: any): any;

// export function CGEventGetDoubleValueField(event: any, field: CGEventTypes.CGEventField): number;

// export function CGEventGetFlags(event: any): CGEventTypes.CGEventFlags;

// export function CGEventGetIntegerValueField(event: any, field: CGEventTypes.CGEventField): number;

// export function CGEventGetLocation(event: any): CGPoint;

// export function CGEventGetTimestamp(event: any): number;

// export function CGEventGetType(event: any): CGEventTypes.CGEventType;

// export function CGEventGetUnflippedLocation(event: any): CGPoint;

// export function CGEventKeyboardGetUnicodeString(event: any, maxStringLength: number, actualStringLength: number, unicodeString: number): void;

// export function CGEventKeyboardSetUnicodeString(event: any, stringLength: number, unicodeString: number): void;

// export function CGEventPost(tap: CGEventTypes.CGEventTapLocation, event: any): void;

// export function CGEventPostToPSN(processSerialNumber: any, event: any): void;

// export function CGEventPostToPid(pid: number, event: any): void;

// export function CGEventSetDoubleValueField(event: any, field: CGEventTypes.CGEventField, value: number): void;

// export function CGEventSetFlags(event: any, flags: CGEventTypes.CGEventFlags): void;

// export function CGEventSetIntegerValueField(event: any, field: CGEventTypes.CGEventField, value: number): void;

// export function CGEventSetLocation(event: any, location: CGPoint): void;

// export function CGEventSetSource(event: any, source: any): void;

// export function CGEventSetTimestamp(event: any, timestamp: number): void;

// export function CGEventSetType(event: any, type: CGEventTypes.CGEventType): void;

// export function CGEventSourceButtonState(stateID: CGEventTypes.CGEventSourceStateID, button: CGEventTypes.CGMouseButton): boolean;

// export function CGEventSourceCounterForEventType(stateID: CGEventTypes.CGEventSourceStateID, eventType: CGEventTypes.CGEventType): number;

// export function CGEventSourceCreate(stateID: CGEventTypes.CGEventSourceStateID): any;

// export function CGEventSourceFlagsState(stateID: CGEventTypes.CGEventSourceStateID): CGEventTypes.CGEventFlags;

// export function CGEventSourceGetKeyboardType(source: any): number;

// export function CGEventSourceGetLocalEventsFilterDuringSuppressionState(source: any, state: CGRemoteOperation.CGEventSuppressionState): CGRemoteOperation.CGEventFilterMask;

// export function CGEventSourceGetLocalEventsSuppressionInterval(source: any): number;

// export function CGEventSourceGetPixelsPerLine(source: any): number;

// export function CGEventSourceGetSourceStateID(source: any): CGEventTypes.CGEventSourceStateID;

// export function CGEventSourceGetUserData(source: any): number;

// export function CGEventSourceKeyState(stateID: CGEventTypes.CGEventSourceStateID, key: number): boolean;

// export function CGEventSourceSecondsSinceLastEventType(stateID: CGEventTypes.CGEventSourceStateID, eventType: CGEventTypes.CGEventType): number;

// export function CGEventSourceSetKeyboardType(source: any, keyboardType: number): void;

// export function CGEventSourceSetLocalEventsFilterDuringSuppressionState(source: any, filter: CGRemoteOperation.CGEventFilterMask, state: CGRemoteOperation.CGEventSuppressionState): void;

// export function CGEventSourceSetLocalEventsSuppressionInterval(source: any, seconds: number): void;

// export function CGEventSourceSetPixelsPerLine(source: any, pixelsPerLine: number): void;

// export function CGEventSourceSetUserData(source: any, userData: number): void;

// export function CGEventTapCreate(tap: CGEventTypes.CGEventTapLocation, place: CGEventTypes.CGEventTapPlacement, options: CGEventTypes.CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventTypes.CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

// export function CGEventTapCreateForPSN(processSerialNumber: any, place: CGEventTypes.CGEventTapPlacement, options: CGEventTypes.CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventTypes.CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

// export function CGEventTapCreateForPid(pid: number, place: CGEventTypes.CGEventTapPlacement, options: CGEventTypes.CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventTypes.CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

// export function CGEventTapEnable(tap: NSMachPort, enable: boolean): void;

// export function CGEventTapIsEnabled(tap: NSMachPort): boolean;

// export function CGEventTapPostEvent(proxy: any, event: any): void;

// export function CGFontCanCreatePostScriptSubset(font: any, format: CGFont.CGFontPostScriptFormat): boolean;

// export function CGFontCopyFullName(font: any): string;

// export function CGFontCopyGlyphNameForGlyph(font: any, glyph: number): string;

// export function CGFontCopyPostScriptName(font: any): string;

// export function CGFontCopyTableForTag(font: any, tag: number): Data;

// export function CGFontCopyTableTags(font: any): any[];

// export function CGFontCopyVariationAxes(font: any): any[];

// export function CGFontCopyVariations(font: any): Map<any, any>;

// export function CGFontCreateCopyWithVariations(font: any, variations: Map<any, any>): any;

// export function CGFontCreatePostScriptEncoding(font: any, encoding: number): Data;

// export function CGFontCreatePostScriptSubset(font: any, subsetName: string, format: CGFont.CGFontPostScriptFormat, glyphs: number, count: number, encoding: number): Data;

// export function CGFontCreateWithDataProvider(provider: any): any;

// export function CGFontCreateWithFontName(name: string): any;

// export function CGFontGetAscent(font: any): number;

// export function CGFontGetCapHeight(font: any): number;

// export function CGFontGetDescent(font: any): number;

// export function CGFontGetFontBBox(font: any): CGRect;

// export function CGFontGetGlyphAdvances(font: any, glyphs: number, count: number, advances: number): boolean;

// export function CGFontGetGlyphBBoxes(font: any, glyphs: number, count: number, bboxes: CGRect): boolean;

// export function CGFontGetGlyphWithGlyphName(font: any, name: string): number;

// export function CGFontGetItalicAngle(font: any): number;

// export function CGFontGetLeading(font: any): number;

// export function CGFontGetNumberOfGlyphs(font: any): number;

// export function CGFontGetStemV(font: any): number;

// export function CGFontGetUnitsPerEm(font: any): number;

// export function CGFontGetXHeight(font: any): number;

// export function CGFontRelease(font: any): void;

// export function CGFontRetain(font: any): any;

// export function CGFunctionCreate(info: any, domainDimension: number, domain: number, rangeDimension: number, range: number, callbacks: CGFunctionCallbacks): any;

// export function CGFunctionRelease(function_: any): void;

// export function CGFunctionRetain(function_: any): any;

// export function CGGetActiveDisplayList(maxDisplays: number, activeDisplays: number, displayCount: number): CGError.CGError;

// export function CGGetDisplayTransferByFormula(display: number, redMin: number, redMax: number, redGamma: number, greenMin: number, greenMax: number, greenGamma: number, blueMin: number, blueMax: number, blueGamma: number): CGError.CGError;

// export function CGGetDisplayTransferByTable(display: number, capacity: number, redTable: number, greenTable: number, blueTable: number, sampleCount: number): CGError.CGError;

// export function CGGetDisplaysWithOpenGLDisplayMask(mask: number, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError.CGError;

// export function CGGetDisplaysWithPoint(point: CGPoint, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError.CGError;

// export function CGGetDisplaysWithRect(rect: CGRect, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError.CGError;

// export function CGGetEventTapList(maxNumberOfTaps: number, tapList: __CGEventTapInformation, eventTapCount: number): CGError.CGError;

// export function CGGetLastMouseDelta(deltaX: number, deltaY: number): void;

// export function CGGetOnlineDisplayList(maxDisplays: number, onlineDisplays: number, displayCount: number): CGError.CGError;

// export function CGGradientCreateWithColorComponents(space: any, components: number, locations: number, count: number): any;

// export function CGGradientCreateWithColors(space: any, colors: any[], locations: number): any;

// export function CGGradientRelease(gradient: any): void;

// export function CGGradientRetain(gradient: any): any;

// export function CGImageCreate(width: number, height: number, bitsPerComponent: number, bitsPerPixel: number, bytesPerRow: number, space: any, bitmapInfo: CGImage.CGBitmapInfo, provider: any, decode: number, shouldInterpolate: boolean, intent: CGColorSpace.CGColorRenderingIntent): any;

// export function CGImageCreateCopy(image: any): any;

// export function CGImageCreateCopyWithColorSpace(image: any, space: any): any;

// export function CGImageCreateWithImageInRect(image: any, rect: CGRect): any;

// export function CGImageCreateWithJPEGDataProvider(source: any, decode: number, shouldInterpolate: boolean, intent: CGColorSpace.CGColorRenderingIntent): any;

// export function CGImageCreateWithMask(image: any, mask: any): any;

// export function CGImageCreateWithMaskingColors(image: any, components: number): any;

// export function CGImageCreateWithPNGDataProvider(source: any, decode: number, shouldInterpolate: boolean, intent: CGColorSpace.CGColorRenderingIntent): any;

// export function CGImageGetAlphaInfo(image: any): CGImage.CGImageAlphaInfo;

// export function CGImageGetBitmapInfo(image: any): CGImage.CGBitmapInfo;

// export function CGImageGetBitsPerComponent(image: any): number;

// export function CGImageGetBitsPerPixel(image: any): number;

// export function CGImageGetByteOrderInfo(image: any): CGImage.CGImageByteOrderInfo;

// export function CGImageGetBytesPerRow(image: any): number;

// export function CGImageGetColorSpace(image: any): any;

// export function CGImageGetDataProvider(image: any): any;

// export function CGImageGetDecode(image: any): number;

// export function CGImageGetHeight(image: any): number;

// export function CGImageGetPixelFormatInfo(image: any): CGImage.CGImagePixelFormatInfo;

// export function CGImageGetRenderingIntent(image: any): CGColorSpace.CGColorRenderingIntent;

// export function CGImageGetShouldInterpolate(image: any): boolean;

// export function CGImageGetUTType(image: any): string;

// export function CGImageGetWidth(image: any): number;

// export function CGImageIsMask(image: any): boolean;

// export function CGImageMaskCreate(width: number, height: number, bitsPerComponent: number, bitsPerPixel: number, bytesPerRow: number, provider: any, decode: number, shouldInterpolate: boolean): any;

// export function CGImageRelease(image: any): void;

// export function CGImageRetain(image: any): any;

// export function CGLayerCreateWithContext(context: any, size: CGSize, auxiliaryInfo: Map<any, any>): any;

// export function CGLayerGetContext(layer: any): any;

// export function CGLayerGetSize(layer: any): CGSize;

// export function CGLayerRelease(layer: any): void;

// export function CGLayerRetain(layer: any): any;

// export function CGMainDisplayID(): number;

// export function CGMutablePath.init(): any;

// export function CGOpenGLDisplayMaskToDisplayID(mask: number): number;

// export function CGPDFArrayApplyBlock(array: any, block: (p1: number, p2: any, p3: any) => boolean, info: any): void;

// export function CGPDFArrayGetArray(array: any, index: number, value: any): boolean;

// export function CGPDFArrayGetBoolean(array: any, index: number, value: string | any): boolean;

// export function CGPDFArrayGetCount(array: any): number;

// export function CGPDFArrayGetDictionary(array: any, index: number, value: any): boolean;

// export function CGPDFArrayGetInteger(array: any, index: number, value: number): boolean;

// export function CGPDFArrayGetName(array: any, index: number, value: string): boolean;

// export function CGPDFArrayGetNull(array: any, index: number): boolean;

// export function CGPDFArrayGetNumber(array: any, index: number, value: number): boolean;

// export function CGPDFArrayGetObject(array: any, index: number, value: any): boolean;

// export function CGPDFArrayGetStream(array: any, index: number, value: any): boolean;

// export function CGPDFArrayGetString(array: any, index: number, value: any): boolean;

// export function CGPDFContentStreamCreateWithPage(page: any): any;

// export function CGPDFContentStreamCreateWithStream(stream: any, streamResources: any, parent: any): any;

// export function CGPDFContentStreamGetResource(cs: any, category: string | any, name: string | any): any;

// export function CGPDFContentStreamGetStreams(cs: any): any[];

// export function CGPDFContentStreamRelease(cs: any): void;

// export function CGPDFContentStreamRetain(cs: any): any;

// export function CGPDFContextAddDestinationAtPoint(context: any, name: string, point: CGPoint): void;

// export function CGPDFContextAddDocumentMetadata(context: any, metadata: Data): void;

// export function CGPDFContextBeginPage(context: any, pageInfo: Map<any, any>): void;

// export function CGPDFContextBeginTag(context: any, tagType: CGPDFContext.CGPDFTagType, tagProperties: Map<any, any>): void;

// export function CGPDFContextClose(context: any): void;

// export function CGPDFContextCreate(consumer: any, mediaBox: CGRect, auxiliaryInfo: Map<any, any>): any;

// export function CGPDFContextCreateWithURL(url: URL, mediaBox: CGRect, auxiliaryInfo: Map<any, any>): any;

// export function CGPDFContextEndPage(context: any): void;

// export function CGPDFContextEndTag(context: any): void;

// export function CGPDFContextSetDestinationForRect(context: any, name: string, rect: CGRect): void;

// export function CGPDFContextSetOutline(context: any, outline: Map<any, any>): void;

// export function CGPDFContextSetURLForRect(context: any, url: URL, rect: CGRect): void;

// export function CGPDFDictionaryApplyBlock(dict: any, block: (p1: string, p2: any, p3: any) => boolean, info: any): void;

// export function CGPDFDictionaryApplyFunction(dict: any, function_: (p1: string, p2: any, p3: any) => void, info: any): void;

// export function CGPDFDictionaryGetArray(dict: any, key: string | any, value: any): boolean;

// export function CGPDFDictionaryGetBoolean(dict: any, key: string | any, value: string | any): boolean;

// export function CGPDFDictionaryGetCount(dict: any): number;

// export function CGPDFDictionaryGetDictionary(dict: any, key: string | any, value: any): boolean;

// export function CGPDFDictionaryGetInteger(dict: any, key: string | any, value: number): boolean;

// export function CGPDFDictionaryGetName(dict: any, key: string | any, value: string): boolean;

// export function CGPDFDictionaryGetNumber(dict: any, key: string | any, value: number): boolean;

// export function CGPDFDictionaryGetObject(dict: any, key: string | any, value: any): boolean;

// export function CGPDFDictionaryGetStream(dict: any, key: string | any, value: any): boolean;

// export function CGPDFDictionaryGetString(dict: any, key: string | any, value: any): boolean;

// export function CGPDFDocumentAllowsCopying(document: any): boolean;

// export function CGPDFDocumentAllowsPrinting(document: any): boolean;

// export function CGPDFDocumentCreateWithProvider(provider: any): any;

// export function CGPDFDocumentCreateWithURL(url: URL): any;

// export function CGPDFDocumentGetAccessPermissions(document: any): CGPDFDocument.CGPDFAccessPermissions;

// export function CGPDFDocumentGetCatalog(document: any): any;

// export function CGPDFDocumentGetID(document: any): any;

// export function CGPDFDocumentGetInfo(document: any): any;

// export function CGPDFDocumentGetNumberOfPages(document: any): number;

// export function CGPDFDocumentGetOutline(document: any): Map<any, any>;

// export function CGPDFDocumentGetPage(document: any, pageNumber: number): any;

// export function CGPDFDocumentGetVersion(document: any, majorVersion: number, minorVersion: number): void;

// export function CGPDFDocumentIsEncrypted(document: any): boolean;

// export function CGPDFDocumentIsUnlocked(document: any): boolean;

// export function CGPDFDocumentRelease(document: any): void;

// export function CGPDFDocumentRetain(document: any): any;

// export function CGPDFDocumentUnlockWithPassword(document: any, password: string | any): boolean;

// export function CGPDFObjectGetType(object_: any): CGPDFObject.CGPDFObjectType;

// export function CGPDFObjectGetValue(object_: any, type: CGPDFObject.CGPDFObjectType, value: any): boolean;

// export function CGPDFOperatorTableCreate(): any;

// export function CGPDFOperatorTableRelease(table: any): void;

// export function CGPDFOperatorTableRetain(table: any): any;

// export function CGPDFOperatorTableSetCallback(table: any, name: string | any, callback: (p1: any, p2: any) => void): void;

// export function CGPDFPageGetBoxRect(page: any, box: CGPDFPage.CGPDFBox): CGRect;

// export function CGPDFPageGetDictionary(page: any): any;

// export function CGPDFPageGetDocument(page: any): any;

// export function CGPDFPageGetDrawingTransform(page: any, box: CGPDFPage.CGPDFBox, rect: CGRect, rotate: number, preserveAspectRatio: boolean): CGAffineTransform;

// export function CGPDFPageGetPageNumber(page: any): number;

// export function CGPDFPageGetRotationAngle(page: any): number;

// export function CGPDFPageRelease(page: any): void;

// export function CGPDFPageRetain(page: any): any;

// export function CGPDFScannerCreate(cs: any, table: any, info: any): any;

// export function CGPDFScannerGetContentStream(scanner: any): any;

// export function CGPDFScannerPopArray(scanner: any, value: any): boolean;

// export function CGPDFScannerPopBoolean(scanner: any, value: string | any): boolean;

// export function CGPDFScannerPopDictionary(scanner: any, value: any): boolean;

// export function CGPDFScannerPopInteger(scanner: any, value: number): boolean;

// export function CGPDFScannerPopName(scanner: any, value: string): boolean;

// export function CGPDFScannerPopNumber(scanner: any, value: number): boolean;

// export function CGPDFScannerPopObject(scanner: any, value: any): boolean;

// export function CGPDFScannerPopStream(scanner: any, value: any): boolean;

// export function CGPDFScannerPopString(scanner: any, value: any): boolean;

// export function CGPDFScannerRelease(scanner: any): void;

// export function CGPDFScannerRetain(scanner: any): any;

// export function CGPDFScannerScan(scanner: any): boolean;

// export function CGPDFStreamCopyData(stream: any, format: CGPDFStream.CGPDFDataFormat): Data;

// export function CGPDFStreamGetDictionary(stream: any): any;

// export function CGPDFStringCopyDate(string: any): Date;

// export function CGPDFStringCopyTextString(string: any): string;

// export function CGPDFStringGetBytePtr(string: any): string;

// export function CGPDFStringGetLength(string: any): number;

// export function CGPDFTagTypeGetName(tagType: CGPDFContext.CGPDFTagType): string;

// export function CGPSConverterAbort(converter: any): boolean;

// export function CGPSConverterConvert(converter: any, provider: any, consumer: any, options: Map<any, any>): boolean;

// export function CGPSConverterCreate(info: any, callbacks: CGPSConverterCallbacks, options: Map<any, any>): any;

// export function CGPSConverterIsConverting(converter: any): boolean;

// export function CGPath.apply(path: any, info: any, function_: (p1: any, p2: CGPathElement) => void): void;

// export function CGPathAddArc(path: any, m: CGAffineTransform, x: number, y: number, radius: number, startAngle: number, endAngle: number, clockwise: boolean): void;

// export function CGPathAddArcToPoint(path: any, m: CGAffineTransform, x1: number, y1: number, x2: number, y2: number, radius: number): void;

// export function CGPathAddCurveToPoint(path: any, m: CGAffineTransform, cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

// export function CGPathAddEllipseInRect(path: any, m: CGAffineTransform, rect: CGRect): void;

// export function CGPathAddLineToPoint(path: any, m: CGAffineTransform, x: number, y: number): void;

// export function CGPathAddLines(path: any, m: CGAffineTransform, points: CGPoint, count: number): void;

// export function CGPathAddPath(path1: any, m: CGAffineTransform, path2: any): void;

// export function CGPathAddQuadCurveToPoint(path: any, m: CGAffineTransform, cpx: number, cpy: number, x: number, y: number): void;

// export function CGPathAddRect(path: any, m: CGAffineTransform, rect: CGRect): void;

// export function CGPathAddRects(path: any, m: CGAffineTransform, rects: CGRect, count: number): void;

// export function CGPathAddRelativeArc(path: any, matrix: CGAffineTransform, x: number, y: number, radius: number, startAngle: number, delta: number): void;

// export function CGPathAddRoundedRect(path: any, transform: CGAffineTransform, rect: CGRect, cornerWidth: number, cornerHeight: number): void;

// export function CGPathApplyWithBlock(path: any, block: (p1: CGPathElement) => void): void;

// export function CGPathCloseSubpath(path: any): void;

// export function CGPathContainsPoint(path: any, m: CGAffineTransform, point: CGPoint, eoFill: boolean): boolean;

// export function CGPathCreateCopy(path: any): any;

// export function CGPathCreateCopyByDashingPath(path: any, transform: CGAffineTransform, phase: number, lengths: number, count: number): any;

// export function CGPathCreateCopyByStrokingPath(path: any, transform: CGAffineTransform, lineWidth: number, lineCap: CGPath.CGLineCap, lineJoin: CGPath.CGLineJoin, miterLimit: number): any;

// export function CGPathCreateCopyByTransformingPath(path: any, transform: CGAffineTransform): any;

// export function CGPathCreateMutableCopy(path: any): any;

// export function CGPathCreateMutableCopyByTransformingPath(path: any, transform: CGAffineTransform): any;

// export function CGPathCreateWithEllipseInRect(rect: CGRect, transform: CGAffineTransform): any;

// export function CGPathCreateWithRect(rect: CGRect, transform: CGAffineTransform): any;

// export function CGPathCreateWithRoundedRect(rect: CGRect, cornerWidth: number, cornerHeight: number, transform: CGAffineTransform): any;

// export function CGPathEqualToPath(path1: any, path2: any): boolean;

// export function CGPathGetBoundingBox(path: any): CGRect;

// export function CGPathGetCurrentPoint(path: any): CGPoint;

// export function CGPathGetPathBoundingBox(path: any): CGRect;

// export function CGPathIsEmpty(path: any): boolean;

// export function CGPathIsRect(path: any, rect: CGRect): boolean;

// export function CGPathMoveToPoint(path: any, m: CGAffineTransform, x: number, y: number): void;

// export function CGPathRelease(path: any): void;

// export function CGPathRetain(path: any): any;

// export function CGPatternCreate(info: any, bounds: CGRect, matrix: CGAffineTransform, xStep: number, yStep: number, tiling: CGPattern.CGPatternTiling, isColored: boolean, callbacks: CGPatternCallbacks): any;

// export function CGPatternRelease(pattern: any): void;

// export function CGPatternRetain(pattern: any): any;

// export function CGPointApplyAffineTransform(point: CGPoint, t: CGAffineTransform): CGPoint;

// export function CGPointCreateDictionaryRepresentation(point: CGPoint): Map<any, any>;

// export function CGPointEqualToPoint(point1: CGPoint, point2: CGPoint): boolean;

// export function CGPointMake(x: number, y: number): CGPoint;

// export function CGPointMakeWithDictionaryRepresentation(dict: Map<any, any>, point: CGPoint): boolean;

// export function CGRectApplyAffineTransform(rect: CGRect, t: CGAffineTransform): CGRect;

// export function CGRectContainsPoint(rect: CGRect, point: CGPoint): boolean;

// export function CGRectContainsRect(rect1: CGRect, rect2: CGRect): boolean;

// export function CGRectCreateDictionaryRepresentation(p1: CGRect): Map<any, any>;

// export function CGRectDivide(rect: CGRect, slice: CGRect, remainder: CGRect, amount: number, edge: CGGeometry.CGRectEdge): void;

// export function CGRectEqualToRect(rect1: CGRect, rect2: CGRect): boolean;

// export function CGRectGetHeight(rect: CGRect): number;

// export function CGRectGetMaxX(rect: CGRect): number;

// export function CGRectGetMaxY(rect: CGRect): number;

// export function CGRectGetMidX(rect: CGRect): number;

// export function CGRectGetMidY(rect: CGRect): number;

// export function CGRectGetMinX(rect: CGRect): number;

// export function CGRectGetMinY(rect: CGRect): number;

// export function CGRectGetWidth(rect: CGRect): number;

// export function CGRectInset(rect: CGRect, dx: number, dy: number): CGRect;

// export function CGRectIntegral(rect: CGRect): CGRect;

// export function CGRectIntersection(r1: CGRect, r2: CGRect): CGRect;

// export function CGRectIntersectsRect(rect1: CGRect, rect2: CGRect): boolean;

// export function CGRectIsEmpty(rect: CGRect): boolean;

// export function CGRectIsInfinite(rect: CGRect): boolean;

// export function CGRectIsNull(rect: CGRect): boolean;

// export function CGRectMake(x: number, y: number, width: number, height: number): CGRect;

// export function CGRectMakeWithDictionaryRepresentation(dict: Map<any, any>, rect: CGRect): boolean;

// export function CGRectOffset(rect: CGRect, dx: number, dy: number): CGRect;

// export function CGRectStandardize(rect: CGRect): CGRect;

// export function CGRectUnion(r1: CGRect, r2: CGRect): CGRect;

// export function CGReleaseAllDisplays(): CGError.CGError;

// export function CGReleaseDisplayFadeReservation(token: number): CGError.CGError;

// export function CGRestorePermanentDisplayConfiguration(): void;

// export function CGSessionCopyCurrentDictionary(): Map<any, any>;

// export function CGSetDisplayTransferByByteTable(display: number, tableSize: number, redTable: string | any, greenTable: string | any, blueTable: string | any): CGError.CGError;

// export function CGSetDisplayTransferByFormula(display: number, redMin: number, redMax: number, redGamma: number, greenMin: number, greenMax: number, greenGamma: number, blueMin: number, blueMax: number, blueGamma: number): CGError.CGError;

// export function CGSetDisplayTransferByTable(display: number, tableSize: number, redTable: number, greenTable: number, blueTable: number): CGError.CGError;

// export function CGShadingCreateAxial(space: any, start: CGPoint, end: CGPoint, function_: any, extendStart: boolean, extendEnd: boolean): any;

// export function CGShadingCreateRadial(space: any, start: CGPoint, startRadius: number, end: CGPoint, endRadius: number, function_: any, extendStart: boolean, extendEnd: boolean): any;

// export function CGShadingRelease(shading: any): void;

// export function CGShadingRetain(shading: any): any;

// export function CGShieldingWindowID(display: number): number;

// export function CGShieldingWindowLevel(): number;

// export function CGSizeApplyAffineTransform(size: CGSize, t: CGAffineTransform): CGSize;

// export function CGSizeCreateDictionaryRepresentation(size: CGSize): Map<any, any>;

// export function CGSizeEqualToSize(size1: CGSize, size2: CGSize): boolean;

// export function CGSizeMake(width: number, height: number): CGSize;

// export function CGSizeMakeWithDictionaryRepresentation(dict: Map<any, any>, size: CGSize): boolean;

// export function CGVectorMake(dx: number, dy: number): CGVector;

// export function CGWarpMouseCursorPosition(newCursorPosition: CGPoint): CGError.CGError;

// export function CGWindowLevelForKey(key: CGWindowLevel.CGWindowLevelKey): number;

// export function CGWindowListCopyWindowInfo(option: CGWindow.CGWindowListOption, relativeToWindow: number): any[];

// export function CGWindowListCreate(option: CGWindow.CGWindowListOption, relativeToWindow: number): any[];

// export function CGWindowListCreateDescriptionFromArray(windowArray: any[]): any[];

// export function CGWindowListCreateImage(screenBounds: CGRect, listOption: CGWindow.CGWindowListOption, windowID: number, imageOption: CGWindow.CGWindowImageOption): any;

// export function CGWindowListCreateImageFromArray(screenBounds: CGRect, windowArray: any[], imageOption: CGWindow.CGWindowImageOption): any;

// export function CGWindowServerCreateServerPort(): NSMachPort;

// export function getter(): number;

// export function getterFunction(): number;

// export function getterFunction10(): number;

// export function getterFunction11(): number;

// export function getterFunction12(): number;

// export function getterFunction13(): number;

// export function getterFunction14(): number;

// export function getterFunction15(): number;

// export function getterFunction16(): number;

// export function getterFunction17(): number;

// export function getterFunction18(): number;

// export function getterFunction19(): number;

// export function getterFunction2(): number;

// export function getterFunction20(): number;

// export function getterFunction21(): number;

// export function getterFunction3(): number;

// export function getterFunction4(): number;

// export function getterFunction5(): number;

// export function getterFunction6(): number;

// export function getterFunction7(): number;

// export function getterFunction8(): number;

// export function getterFunction9(): number;

interface CHHapticAdvancedPatternPlayer {
  completionHandler: (p1: Error) => void;
  setCompletionHandler(_: (p1: Error) => void);
  loopEnabled: boolean;
  setLoopEnabled(_: boolean);
  loopEnd: number;
  setLoopEnd(_: number);
  playbackRate: number;
  setPlaybackRate(_: number);
  pauseAtTime(error: number): boolean;
  resumeAtTime(error: number): boolean;
  seekToOffset(error: number): boolean;
}

interface CHHapticDeviceCapability {
  supportsAudio: boolean;
  supportsHaptics: boolean;
  attributesForDynamicParameter(error: string): any;
  attributesForEventParameter(eventType: string, error: string): any;
}

export class CHHapticDynamicParameter extends NSObject {
  parameterID: string;
  relativeTime: number;
  setRelativeTime(_: number);
  static createWithParameterIDWithValueWithRelativeTime(_: string, value: number, relativeTime: number): CHHapticDynamicParameter;
}

export class CHHapticEngine extends NSObject {
  static capabilitiesForHardware(): any;
  isAutoShutdownEnabled: boolean;
  setAutoShutdownEnabled(_: boolean);
  currentTime: number;
  isMutedForAudio: boolean;
  setIsMutedForAudio(_: boolean);
  isMutedForHaptics: boolean;
  setIsMutedForHaptics(_: boolean);
  playsHapticsOnly: boolean;
  setPlaysHapticsOnly(_: boolean);
  resetHandler: () => void;
  setResetHandler(_: () => void);
  stoppedHandler: (p1: CHHapticEngine.StoppedReason) => void;
  setStoppedHandler(_: (p1: CHHapticEngine.StoppedReason) => void);
  makeAdvancedPlayer(with_: CHHapticPattern): any;
  makePlayer(with_: CHHapticPattern): any;
  static createWith(error?: AVAudioSession): CHHapticEngine;
  notifyWhenPlayersFinished(finishedHandler: (p1: Error) => CHHapticEngine.FinishedAction): void;
  playPatternFromData(error: Data): boolean;
  playPatternFromURL(error: URL): boolean;
  registerAudioResource(options: URL, error: Map<any, any>): number;
  startAndReturnError(): boolean;
  startWithCompletionHandler(_?: (p1: Error) => void): void;
  stopWithCompletionHandler(_?: (p1: Error) => void): void;
  unregisterAudioResource(error: number): boolean;
}

export class CHHapticEvent extends NSObject {
  duration: number;
  setDuration(_: number);
  eventParameters: CHHapticEventParameter[];
  relativeTime: number;
  setRelativeTime(_: number);
  type: string;
  static createWithAudioResourceIDWithParametersWithRelativeTime(_: number, parameters: CHHapticEventParameter[], relativeTime: number): CHHapticEvent;
  static createWithAudioResourceIDWithParametersWithRelativeTimeWithDuration(_: number, parameters: CHHapticEventParameter[], relativeTime: number, duration: number): CHHapticEvent;
  static createWithEventTypeWithParametersWithRelativeTime(_: string, parameters: CHHapticEventParameter[], relativeTime: number): CHHapticEvent;
  static createWithEventTypeWithParametersWithRelativeTimeWithDuration(_: string, parameters: CHHapticEventParameter[], relativeTime: number, duration: number): CHHapticEvent;
}

export class CHHapticEventParameter extends NSObject {
  parameterID: string;
  static createWithParameterIDWithValue(_: string, value: number): CHHapticEventParameter;
}

interface CHHapticParameterAttributes {
  defaultValue: number;
  maxValue: number;
  minValue: number;
}

export class CHHapticParameterCurve extends NSObject {
  controlPoints: CHHapticParameterCurve.ControlPoint[];
  parameterID: string;
  relativeTime: number;
  setRelativeTime(_: number);
  static createWithParameterIDWithControlPointsWithRelativeTime(_: string, controlPoints: CHHapticParameterCurve.ControlPoint[], relativeTime: number): CHHapticParameterCurve;
}

export class CHHapticPattern extends NSObject {
  duration: number;
  exportDictionaryAndReturnError(): Map<string, any>;
  static createWith(error: Map<string, any>): CHHapticPattern;
  static createWithEvents(parameterCurves: CHHapticEvent[], error: CHHapticParameterCurve[]): CHHapticPattern;
  static createWithEvents(parameters: CHHapticEvent[], error: CHHapticDynamicParameter[]): CHHapticPattern;
}

interface CHHapticPatternPlayer {
  isMuted: boolean;
  setIsMuted(_: boolean);
  cancelAndReturnError(): boolean;
  scheduleParameterCurve(atTime: CHHapticParameterCurve, error: number): boolean;
  sendParameters(atTime: CHHapticDynamicParameter[], error: number): boolean;
  startAtTime(error: number): boolean;
  stopAtTime(error: number): boolean;
}

interface CIAccordionFoldTransition {
  bottomHeight: number;
  setBottomHeight(_: number);
  foldShadowAmount: number;
  setFoldShadowAmount(_: number);
  numberOfFolds: number;
  setNumberOfFolds(_: number);
}

interface CIAffineClamp {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  transform: CGAffineTransform;
  setTransform(_: CGAffineTransform);
}

interface CIAffineTile {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  transform: CGAffineTransform;
  setTransform(_: CGAffineTransform);
}

interface CIAttributedTextImageGenerator {
  scaleFactor: number;
  setScaleFactor(_: number);
  text: NSAttributedString;
  setText(_: NSAttributedString);
}

export class CIAztecCodeDescriptor extends CIBarcodeDescriptor {
  dataCodewordCount: number;
  errorCorrectedPayload: Data;
  isCompact: boolean;
  layerCount: number;
  static createWithPayloadWithIsCompactWithLayerCountWithDataCodewordCount(_: Data, isCompact: boolean, layerCount: number, dataCodewordCount: number): CIAztecCodeDescriptor;
}

interface CIAztecCodeGenerator {
  compactStyle: number;
  setCompactStyle(_: number);
  correctionLevel: number;
  setCorrectionLevel(_: number);
  layers: number;
  setLayers(_: number);
  message: Data;
  setMessage(_: Data);
}

export class CIBarcodeDescriptor extends NSObject {
}

interface CIBarcodeGenerator {
  barcodeDescriptor: CIBarcodeDescriptor;
  setBarcodeDescriptor(_: CIBarcodeDescriptor);
}

interface CIBarsSwipeTransition {
  angle: number;
  setAngle(_: number);
  barOffset: number;
  setBarOffset(_: number);
  width: number;
  setWidth(_: number);
}

interface CIBicubicScaleTransform {
  aspectRatio: number;
  setAspectRatio(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  parameterB: number;
  setParameterB(_: number);
  parameterC: number;
  setParameterC(_: number);
  scale: number;
  setScale(_: number);
}

export class CIBlendKernel extends CIColorKernel {
  //  static createWithKernelWithFunctionNameFromMetalLibraryData(fromMetalLibraryData: string, error: Data): CIBlendKernel;
  //  static createWithKernelWithFunctionNameFromMetalLibraryDataWithOutputPixelFormat(fromMetalLibraryData: string, outputPixelFormat: Data, error: number): CIBlendKernel;
  static clear: CIBlendKernel;
  static color: CIBlendKernel;
  static colorBurn: CIBlendKernel;
  static colorDodge: CIBlendKernel;
  static componentAdd: CIBlendKernel;
  static componentMax: CIBlendKernel;
  static componentMin: CIBlendKernel;
  static componentMultiply: CIBlendKernel;
  static darken: CIBlendKernel;
  static darkerColor: CIBlendKernel;
  static destination: CIBlendKernel;
  static destinationAtop: CIBlendKernel;
  static destinationIn: CIBlendKernel;
  static destinationOut: CIBlendKernel;
  static destinationOver: CIBlendKernel;
  static difference: CIBlendKernel;
  static divide: CIBlendKernel;
  static exclusion: CIBlendKernel;
  static exclusiveOr: CIBlendKernel;
  static hardLight: CIBlendKernel;
  static hardMix: CIBlendKernel;
  static hue: CIBlendKernel;
  static lighten: CIBlendKernel;
  static lighterColor: CIBlendKernel;
  static linearBurn: CIBlendKernel;
  static linearDodge: CIBlendKernel;
  static linearLight: CIBlendKernel;
  static luminosity: CIBlendKernel;
  static multiply: CIBlendKernel;
  static overlay: CIBlendKernel;
  static pinLight: CIBlendKernel;
  static saturation: CIBlendKernel;
  static screen: CIBlendKernel;
  static softLight: CIBlendKernel;
  static source: CIBlendKernel;
  static sourceAtop: CIBlendKernel;
  static sourceIn: CIBlendKernel;
  static sourceOut: CIBlendKernel;
  static sourceOver: CIBlendKernel;
  static subtract: CIBlendKernel;
  static vividLight: CIBlendKernel;
  // @ts-ignore 
  apply(foreground: CIImage, background: CIImage): CIImage;
  // @ts-ignore 
  apply(foreground: CIImage, background: CIImage, colorSpace: any): CIImage;
}

interface CIBlendWithMask {
  backgroundImage: CIImage;
  setBackgroundImage(_: CIImage);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  maskImage: CIImage;
  setMaskImage(_: CIImage);
}

interface CIBloom {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
  radius: number;
  setRadius(_: number);
}

interface CIBokehBlur {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
  ringAmount: number;
  setRingAmount(_: number);
  ringSize: number;
  setRingSize(_: number);
  softness: number;
  setSoftness(_: number);
}

interface CIBoxBlur {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CICMYKHalftone {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  grayComponentReplacement: number;
  setGrayComponentReplacement(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  sharpness: number;
  setSharpness(_: number);
  underColorRemoval: number;
  setUnderColorRemoval(_: number);
  width: number;
  setWidth(_: number);
}

interface CICheckerboardGenerator {
  center: CGPoint;
  setCenter(_: CGPoint);
  color0: CIColor;
  setColor0(_: CIColor);
  color1: CIColor;
  setColor1(_: CIColor);
  sharpness: number;
  setSharpness(_: number);
  width: number;
  setWidth(_: number);
}

interface CICircularScreen {
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  sharpness: number;
  setSharpness(_: number);
  width: number;
  setWidth(_: number);
}

interface CICode128BarcodeGenerator {
  barcodeHeight: number;
  setBarcodeHeight(_: number);
  message: Data;
  setMessage(_: Data);
  quietSpace: number;
  setQuietSpace(_: number);
}

export class CIColor extends NSObject {
  alpha: number;
  blue: number;
  colorSpace: any;
  components: number;
  green: number;
  numberOfComponents: number;
  red: number;
  stringRepresentation: string;
  static blackColor: CIColor;
  static blueColor: CIColor;
  static clearColor: CIColor;
  static cyanColor: CIColor;
  static grayColor: CIColor;
  static greenColor: CIColor;
  static magentaColor: CIColor;
  static redColor: CIColor;
  static whiteColor: CIColor;
  static yellowColor: CIColor;
  static createWithCgColor(_: any): CIColor;
  static createWithColor(_: NSColor): CIColor;
  static createWithRedWithGreenWithBlue(_: number, green: number, blue: number): CIColor;
  static createWithRedWithGreenWithBlueWithAlpha(_: number, green: number, blue: number, alpha: number): CIColor;
  static createWithRedWithGreenWithBlueWithAlphaWithColorSpace(_: number, green: number, blue: number, alpha: number, colorSpace: any): CIColor;
  static createWithRedWithGreenWithBlueWithColorSpace(_: number, green: number, blue: number, colorSpace: any): CIColor;
}

interface CIColorClamp {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  maxComponents: CIVector;
  setMaxComponents(_: CIVector);
  minComponents: CIVector;
  setMinComponents(_: CIVector);
}

interface CIColorControls {
  brightness: number;
  setBrightness(_: number);
  contrast: number;
  setContrast(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  saturation: number;
  setSaturation(_: number);
}

interface CIColorCrossPolynomial {
  blueCoefficients: CIVector;
  setBlueCoefficients(_: CIVector);
  greenCoefficients: CIVector;
  setGreenCoefficients(_: CIVector);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  redCoefficients: CIVector;
  setRedCoefficients(_: CIVector);
}

interface CIColorCube {
  cubeData: Data;
  setCubeData(_: Data);
  cubeDimension: number;
  setCubeDimension(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIColorCubeWithColorSpace {
  colorSpace: any;
  setColorSpace(_: any);
  cubeData: Data;
  setCubeData(_: Data);
  cubeDimension: number;
  setCubeDimension(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIColorCubesMixedWithMask {
  colorSpace: any;
  setColorSpace(_: any);
  cube0Data: Data;
  setCube0Data(_: Data);
  cube1Data: Data;
  setCube1Data(_: Data);
  cubeDimension: number;
  setCubeDimension(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  maskImage: CIImage;
  setMaskImage(_: CIImage);
}

interface CIColorCurves {
  colorSpace: any;
  setColorSpace(_: any);
  curvesData: Data;
  setCurvesData(_: Data);
  curvesDomain: CIVector;
  setCurvesDomain(_: CIVector);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIColorInvert {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CIColorKernel extends CIKernel {
  //  static createWithKernelWithFunctionNameFromMetalLibraryData(fromMetalLibraryData: string, error: Data): CIColorKernel;
  //  static createWithKernelWithFunctionNameFromMetalLibraryDataWithOutputPixelFormat(fromMetalLibraryData: string, outputPixelFormat: Data, error: number): CIColorKernel;
  // @ts-ignore 
  apply(extent: CGRect, arguments_?: any[]): CIImage;
}

interface CIColorMap {
  gradientImage: CIImage;
  setGradientImage(_: CIImage);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIColorMatrix {
  AVector: CIVector;
  setAVector(_: CIVector);
  biasVector: CIVector;
  setBiasVector(_: CIVector);
  BVector: CIVector;
  setBVector(_: CIVector);
  GVector: CIVector;
  setGVector(_: CIVector);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  RVector: CIVector;
  setRVector(_: CIVector);
}

interface CIColorMonochrome {
  color: CIColor;
  setColor(_: CIColor);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
}

interface CIColorPolynomial {
  alphaCoefficients: CIVector;
  setAlphaCoefficients(_: CIVector);
  blueCoefficients: CIVector;
  setBlueCoefficients(_: CIVector);
  greenCoefficients: CIVector;
  setGreenCoefficients(_: CIVector);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  redCoefficients: CIVector;
  setRedCoefficients(_: CIVector);
}

interface CIColorPosterize {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  levels: number;
  setLevels(_: number);
}

interface CIComicEffect {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CICompositeOperation {
  backgroundImage: CIImage;
  setBackgroundImage(_: CIImage);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CIContext extends NSObject {
  static offlineGPUCount(): number;
  workingColorSpace: any;
  workingFormat: number;
  heifRepresentation(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): Data;
  jpegRepresentation(of: CIImage, colorSpace: any, options: Map<string, any>): Data;
  pngRepresentation(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): Data;
  tiffRepresentation(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): Data;
  clearCaches(): void;
  createCGImage(_: CIImage, from: CGRect): any;
  createCGImage(_: CIImage, from: CGRect, format: number, colorSpace?: any): any;
  createCGImage(_: CIImage, from: CGRect, format: number, colorSpace?: any, deferred?: boolean): any;
  depthBlurEffectFilter(for_: CIImage, disparityImage: CIImage, portraitEffectsMatte?: CIImage, hairSemanticSegmentation?: CIImage, orientation?: CGImageProperties.CGImagePropertyOrientation, options?: Map<any, any>): CIFilter;
  depthBlurEffectFilter(for_: CIImage, disparityImage: CIImage, portraitEffectsMatte?: CIImage, orientation?: CGImageProperties.CGImagePropertyOrientation, options?: Map<any, any>): CIFilter;
  depthBlurEffectFilter(forImageData: Data, options?: Map<any, any>): CIFilter;
  depthBlurEffectFilter(forImageURL: URL, options?: Map<any, any>): CIFilter;
  draw(_: CIImage, in_: CGRect, from: CGRect): void;
  static createWithOptions(_?: Map<string, any>): CIContext;
  prepareRender(fromRect: CIImage, toDestination: CGRect, atPoint: CIRenderDestination, error: CGPoint): boolean;
  reclaimResources(): void;
  render(_: CIImage, toBitmap: any, rowBytes: number, bounds: CGRect, format: number, colorSpace?: any): void;
  render(_: CIImage, to: any): void;
  render(_: CIImage, to: any, bounds: CGRect, colorSpace?: any): void;
  render(_: CIImage, to: any, bounds: CGRect, colorSpace?: any): void;
  render(_: CIImage, to: any, commandBuffer?: any, bounds?: CGRect, colorSpace?: any): void;
  startTaskToClear(error: CIRenderDestination): CIRenderTask;
  startTaskToRender(fromRect: CIImage, toDestination: CGRect, atPoint: CIRenderDestination, error: CGPoint): CIRenderTask;
  startTaskToRender(toDestination: CIImage, error: CIRenderDestination): CIRenderTask;
  writeHEIFRepresentationOfImage(toURL: CIImage, format: URL, colorSpace: number, options: any, error: Map<string, any>): boolean;
  writeJPEGRepresentationOfImage(toURL: CIImage, colorSpace: URL, options: any, error: Map<string, any>): boolean;
  writePNGRepresentationOfImage(toURL: CIImage, format: URL, colorSpace: number, options: any, error: Map<string, any>): boolean;
  writeTIFFRepresentationOfImage(toURL: CIImage, format: URL, colorSpace: number, options: any, error: Map<string, any>): boolean;
}

interface CIConvolution {
  bias: number;
  setBias(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  weights: CIVector;
  setWeights(_: CIVector);
}

interface CICopyMachineTransition {
  angle: number;
  setAngle(_: number);
  color: CIColor;
  setColor(_: CIColor);
  extent: CGRect;
  setExtent(_: CGRect);
  opacity: number;
  setOpacity(_: number);
  width: number;
  setWidth(_: number);
}

interface CICoreMLModel {
  headIndex: number;
  setHeadIndex(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  model: MLModel;
  setModel(_: MLModel);
  softmaxNormalization: boolean;
  setSoftmaxNormalization(_: boolean);
}

interface CICrystallize {
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

export class CIDataMatrixCodeDescriptor extends CIBarcodeDescriptor {
  columnCount: number;
  eccVersion: CIBarcodeDescriptor.CIDataMatrixCodeECCVersion;
  errorCorrectedPayload: Data;
  rowCount: number;
  static createWithPayloadWithRowCountWithColumnCountWithEccVersion(_: Data, rowCount: number, columnCount: number, eccVersion: CIBarcodeDescriptor.CIDataMatrixCodeECCVersion): CIDataMatrixCodeDescriptor;
}

interface CIDepthOfField {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  point0: CGPoint;
  setPoint0(_: CGPoint);
  point1: CGPoint;
  setPoint1(_: CGPoint);
  radius: number;
  setRadius(_: number);
  saturation: number;
  setSaturation(_: number);
  unsharpMaskIntensity: number;
  setUnsharpMaskIntensity(_: number);
  unsharpMaskRadius: number;
  setUnsharpMaskRadius(_: number);
}

interface CIDepthToDisparity {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CIDetector extends NSObject {
  features(in_: CIImage): CIFeature[];
  features(in_: CIImage, options?: Map<string, any>): CIFeature[];
}

interface CIDiscBlur {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIDisintegrateWithMaskTransition {
  maskImage: CIImage;
  setMaskImage(_: CIImage);
  shadowDensity: number;
  setShadowDensity(_: number);
  shadowOffset: CGPoint;
  setShadowOffset(_: CGPoint);
  shadowRadius: number;
  setShadowRadius(_: number);
}

interface CIDisparityToDepth {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIDissolveTransition {
}

interface CIDither {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
}

interface CIDocumentEnhancer {
  amount: number;
  setAmount(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIDotScreen {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  sharpness: number;
  setSharpness(_: number);
  width: number;
  setWidth(_: number);
}

interface CIEdgePreserveUpsample {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  lumaSigma: number;
  setLumaSigma(_: number);
  smallImage: CIImage;
  setSmallImage(_: CIImage);
  spatialSigma: number;
  setSpatialSigma(_: number);
}

interface CIEdgeWork {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIEdges {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
}

interface CIEightfoldReflectedTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIExposureAdjust {
  EV: number;
  setEV(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CIFaceFeature extends CIFeature {
  faceAngle: number;
  hasFaceAngle: boolean;
  hasLeftEyePosition: boolean;
  hasMouthPosition: boolean;
  hasRightEyePosition: boolean;
  hasSmile: boolean;
  hasTrackingFrameCount: boolean;
  hasTrackingID: boolean;
  leftEyeClosed: boolean;
  leftEyePosition: CGPoint;
  mouthPosition: CGPoint;
  rightEyeClosed: boolean;
  rightEyePosition: CGPoint;
  trackingFrameCount: number;
  trackingID: number;
}

interface CIFalseColor {
  color0: CIColor;
  setColor0(_: CIColor);
  color1: CIColor;
  setColor1(_: CIColor);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CIFeature extends NSObject {
  bounds: CGRect;
  type: string;
}

export class CIFilter extends NSObject {
  static CMYKHalftone(): CIFilter;
  static LabDeltaE(): CIFilter;
  static PDF417BarcodeGenerator(): CIFilter;
  static QRCodeGenerator(): CIFilter;
  static accordionFoldTransitionFilter(): CIFilter;
  static additionCompositingFilter(): CIFilter;
  static affineClampFilter(): CIFilter;
  static affineTileFilter(): CIFilter;
  static attributedTextImageGeneratorFilter(): CIFilter;
  static aztecCodeGeneratorFilter(): CIFilter;
  static barcodeGeneratorFilter(): CIFilter;
  static barsSwipeTransitionFilter(): CIFilter;
  static bicubicScaleTransformFilter(): CIFilter;
  static blendWithAlphaMaskFilter(): CIFilter;
  static blendWithBlueMaskFilter(): CIFilter;
  static blendWithMaskFilter(): CIFilter;
  static blendWithRedMaskFilter(): CIFilter;
  static bloomFilter(): CIFilter;
  static bokehBlurFilter(): CIFilter;
  static boxBlurFilter(): CIFilter;
  static checkerboardGeneratorFilter(): CIFilter;
  static circularScreenFilter(): CIFilter;
  static code128BarcodeGeneratorFilter(): CIFilter;
  static colorBlendModeFilter(): CIFilter;
  static colorBurnBlendModeFilter(): CIFilter;
  static colorClampFilter(): CIFilter;
  static colorControlsFilter(): CIFilter;
  static colorCrossPolynomialFilter(): CIFilter;
  static colorCubeFilter(): CIFilter;
  static colorCubeWithColorSpaceFilter(): CIFilter;
  static colorCubesMixedWithMaskFilter(): CIFilter;
  static colorCurvesFilter(): CIFilter;
  static colorDodgeBlendModeFilter(): CIFilter;
  static colorInvertFilter(): CIFilter;
  static colorMapFilter(): CIFilter;
  static colorMatrixFilter(): CIFilter;
  static colorMonochromeFilter(): CIFilter;
  static colorPolynomialFilter(): CIFilter;
  static colorPosterizeFilter(): CIFilter;
  static comicEffectFilter(): CIFilter;
  static convolution3X3Filter(): CIFilter;
  static convolution5X5Filter(): CIFilter;
  static convolution7X7Filter(): CIFilter;
  static convolution9HorizontalFilter(): CIFilter;
  static convolution9VerticalFilter(): CIFilter;
  static copyMachineTransitionFilter(): CIFilter;
  static coreMLModelFilter(): CIFilter;
  static crystallizeFilter(): CIFilter;
  static darkenBlendModeFilter(): CIFilter;
  static depthOfFieldFilter(): CIFilter;
  static depthToDisparityFilter(): CIFilter;
  static differenceBlendModeFilter(): CIFilter;
  static discBlurFilter(): CIFilter;
  static disintegrateWithMaskTransitionFilter(): CIFilter;
  static disparityToDepthFilter(): CIFilter;
  static dissolveTransitionFilter(): CIFilter;
  static ditherFilter(): CIFilter;
  static divideBlendModeFilter(): CIFilter;
  static documentEnhancerFilter(): CIFilter;
  static dotScreenFilter(): CIFilter;
  static edgePreserveUpsampleFilter(): CIFilter;
  static edgeWorkFilter(): CIFilter;
  static edgesFilter(): CIFilter;
  static eightfoldReflectedTileFilter(): CIFilter;
  static exclusionBlendModeFilter(): CIFilter;
  static exposureAdjustFilter(): CIFilter;
  static falseColorFilter(): CIFilter;
  static filterArray(fromSerializedXMP: Data, inputImageExtent: CGRect): CIFilter[];
  static filterNames(inCategories?: string[]): string[];
  static filterNames(inCategory?: string): string[];
  static flashTransitionFilter(): CIFilter;
  static fourfoldReflectedTileFilter(): CIFilter;
  static fourfoldRotatedTileFilter(): CIFilter;
  static fourfoldTranslatedTileFilter(): CIFilter;
  static gaborGradientsFilter(): CIFilter;
  static gammaAdjustFilter(): CIFilter;
  static gaussianBlurFilter(): CIFilter;
  static gaussianGradientFilter(): CIFilter;
  static glideReflectedTileFilter(): CIFilter;
  static gloomFilter(): CIFilter;
  static hardLightBlendModeFilter(): CIFilter;
  static hatchedScreenFilter(): CIFilter;
  static heightFieldFromMaskFilter(): CIFilter;
  static hexagonalPixellateFilter(): CIFilter;
  static highlightShadowAdjustFilter(): CIFilter;
  static hueAdjustFilter(): CIFilter;
  static hueBlendModeFilter(): CIFilter;
  static hueSaturationValueGradientFilter(): CIFilter;
  static kaleidoscopeFilter(): CIFilter;
  static keystoneCorrectionCombinedFilter(): CIFilter;
  static keystoneCorrectionHorizontalFilter(): CIFilter;
  static keystoneCorrectionVerticalFilter(): CIFilter;
  static lanczosScaleTransformFilter(): CIFilter;
  static lenticularHaloGeneratorFilter(): CIFilter;
  static lightenBlendModeFilter(): CIFilter;
  static lineOverlayFilter(): CIFilter;
  static lineScreenFilter(): CIFilter;
  static linearBurnBlendModeFilter(): CIFilter;
  static linearDodgeBlendModeFilter(): CIFilter;
  static linearGradientFilter(): CIFilter;
  static linearToSRGBToneCurveFilter(): CIFilter;
  static localizedDescription(forFilterName: string): string;
  static localizedName(forCategory: string): string;
  static localizedName(forFilterName: string): string;
  static localizedReferenceDocumentation(forFilterName: string): URL;
  static luminosityBlendModeFilter(): CIFilter;
  static maskToAlphaFilter(): CIFilter;
  static maskedVariableBlurFilter(): CIFilter;
  static maximumComponentFilter(): CIFilter;
  static maximumCompositingFilter(): CIFilter;
  static medianFilter(): CIFilter;
  static meshGeneratorFilter(): CIFilter;
  static minimumComponentFilter(): CIFilter;
  static minimumCompositingFilter(): CIFilter;
  static mixFilter(): CIFilter;
  static modTransitionFilter(): CIFilter;
  static morphologyGradientFilter(): CIFilter;
  static morphologyMaximumFilter(): CIFilter;
  static morphologyMinimumFilter(): CIFilter;
  static morphologyRectangleMaximumFilter(): CIFilter;
  static morphologyRectangleMinimumFilter(): CIFilter;
  static motionBlurFilter(): CIFilter;
  static multiplyBlendModeFilter(): CIFilter;
  static multiplyCompositingFilter(): CIFilter;
  static noiseReductionFilter(): CIFilter;
  static opTileFilter(): CIFilter;
  static overlayBlendModeFilter(): CIFilter;
  static pageCurlTransitionFilter(): CIFilter;
  static pageCurlWithShadowTransitionFilter(): CIFilter;
  static paletteCentroidFilter(): CIFilter;
  static palettizeFilter(): CIFilter;
  static parallelogramTileFilter(): CIFilter;
  static perspectiveCorrectionFilter(): CIFilter;
  static perspectiveRotateFilter(): CIFilter;
  static perspectiveTileFilter(): CIFilter;
  static perspectiveTransformFilter(): CIFilter;
  static perspectiveTransformWithExtentFilter(): CIFilter;
  static photoEffectChromeFilter(): CIFilter;
  static photoEffectFadeFilter(): CIFilter;
  static photoEffectInstantFilter(): CIFilter;
  static photoEffectMonoFilter(): CIFilter;
  static photoEffectNoirFilter(): CIFilter;
  static photoEffectProcessFilter(): CIFilter;
  static photoEffectTonalFilter(): CIFilter;
  static photoEffectTransferFilter(): CIFilter;
  static pinLightBlendModeFilter(): CIFilter;
  static pixellateFilter(): CIFilter;
  static pointillizeFilter(): CIFilter;
  static radialGradientFilter(): CIFilter;
  static randomGeneratorFilter(): CIFilter;
  static registerName(_: string, constructor: any, classAttributes: Map<string, any>): void;
  static rippleTransitionFilter(): CIFilter;
  static roundedRectangleGeneratorFilter(): CIFilter;
  static sRGBToneCurveToLinearFilter(): CIFilter;
  static saliencyMapFilter(): CIFilter;
  static saturationBlendModeFilter(): CIFilter;
  static screenBlendModeFilter(): CIFilter;
  static sepiaToneFilter(): CIFilter;
  static serializedXMP(from: CIFilter[], inputImageExtent: CGRect): Data;
  static shadedMaterialFilter(): CIFilter;
  static sharpenLuminanceFilter(): CIFilter;
  static sixfoldReflectedTileFilter(): CIFilter;
  static sixfoldRotatedTileFilter(): CIFilter;
  static smoothLinearGradientFilter(): CIFilter;
  static softLightBlendModeFilter(): CIFilter;
  static sourceAtopCompositingFilter(): CIFilter;
  static sourceInCompositingFilter(): CIFilter;
  static sourceOutCompositingFilter(): CIFilter;
  static sourceOverCompositingFilter(): CIFilter;
  static spotColorFilter(): CIFilter;
  static spotLightFilter(): CIFilter;
  static starShineGeneratorFilter(): CIFilter;
  static straightenFilter(): CIFilter;
  static stripesGeneratorFilter(): CIFilter;
  static subtractBlendModeFilter(): CIFilter;
  static sunbeamsGeneratorFilter(): CIFilter;
  static supportedRawCameraModels(): string[];
  static swipeTransitionFilter(): CIFilter;
  static temperatureAndTintFilter(): CIFilter;
  static textImageGeneratorFilter(): CIFilter;
  static thermalFilter(): CIFilter;
  static toneCurveFilter(): CIFilter;
  static triangleKaleidoscopeFilter(): CIFilter;
  static triangleTileFilter(): CIFilter;
  static twelvefoldReflectedTileFilter(): CIFilter;
  static unsharpMaskFilter(): CIFilter;
  static vibranceFilter(): CIFilter;
  static vignetteEffectFilter(): CIFilter;
  static vignetteFilter(): CIFilter;
  static whitePointAdjustFilter(): CIFilter;
  static xRayFilter(): CIFilter;
  static zoomBlurFilter(): CIFilter;
  attributes: Map<string, any>;
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  inputKeys: string[];
  //   //   name: string;
  setName(_: string);
  outputImage: CIImage;
  outputKeys: string[];
  apply(_: CIKernel, arguments_?: any[], options?: Map<string, any>): CIImage;
  // dupe name w instance property   name(): string;
  setDefaults(): void;
  setName(_: string): void;
  viewForUIConfiguration(_: Map<any, any>, excludedKeys: any[]): IKFilterUIView;
}

interface CIFilterConstructor {
  filter(withName: string): CIFilter;
}

export class CIFilterGenerator extends NSObject {
  classAttributes: Map<any, any>;
  setClassAttributes(_: Map<any, any>);
  exportedKeys: Map<any, any>;
  connect(_: any, withKey?: string, to?: any, withKey2?: string): void;
  disconnectObject(_: any, withKey: string, to: any, withKey2: string): void;
  exportKey(_: string, from: any, withName?: string): void;
  filter(): CIFilter;
  static createWithContentsOf(_: URL): CIFilterGenerator;
  registerFilterName(_: string): void;
  removeExportedKey(_: string): void;
  setAttributes(_: Map<any, any>, forExportedKey: string): void;
  write(to: URL, atomically: boolean): boolean;
}

interface CIFilterProtocol {
  outputImage: CIImage;
}

export class CIFilterShape extends NSObject {
  extent: CGRect;
  static createWithRect(_: CGRect): CIFilterShape;
  insetBy(x: number, y: number): CIFilterShape;
  intersect(with_: CIFilterShape): CIFilterShape;
  intersect(with_: CGRect): CIFilterShape;
  transform(by: CGAffineTransform, interior: boolean): CIFilterShape;
  union(with_: CIFilterShape): CIFilterShape;
  union(with_: CGRect): CIFilterShape;
}

interface CIFlashTransition {
  center: CGPoint;
  setCenter(_: CGPoint);
  color: CIColor;
  setColor(_: CIColor);
  extent: CGRect;
  setExtent(_: CGRect);
  fadeThreshold: number;
  setFadeThreshold(_: number);
  maxStriationRadius: number;
  setMaxStriationRadius(_: number);
  striationContrast: number;
  setStriationContrast(_: number);
  striationStrength: number;
  setStriationStrength(_: number);
}

interface CIFourCoordinateGeometryFilter {
  bottomLeft: CGPoint;
  setBottomLeft(_: CGPoint);
  bottomRight: CGPoint;
  setBottomRight(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  topLeft: CGPoint;
  setTopLeft(_: CGPoint);
  topRight: CGPoint;
  setTopRight(_: CGPoint);
}

interface CIFourfoldReflectedTile {
  acuteAngle: number;
  setAcuteAngle(_: number);
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIFourfoldRotatedTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIFourfoldTranslatedTile {
  acuteAngle: number;
  setAcuteAngle(_: number);
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIGaborGradients {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIGammaAdjust {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIGaussianBlur {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIGaussianGradient {
  center: CGPoint;
  setCenter(_: CGPoint);
  color0: CIColor;
  setColor0(_: CIColor);
  color1: CIColor;
  setColor1(_: CIColor);
  radius: number;
  setRadius(_: number);
}

interface CIGlideReflectedTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIGloom {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
  radius: number;
  setRadius(_: number);
}

interface CIHatchedScreen {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  sharpness: number;
  setSharpness(_: number);
  width: number;
  setWidth(_: number);
}

interface CIHeightFieldFromMask {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIHexagonalPixellate {
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  scale: number;
  setScale(_: number);
}

interface CIHighlightShadowAdjust {
  highlightAmount: number;
  setHighlightAmount(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
  shadowAmount: number;
  setShadowAmount(_: number);
}

interface CIHueAdjust {
  angle: number;
  setAngle(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIHueSaturationValueGradient {
  colorSpace: any;
  setColorSpace(_: any);
  dither: number;
  setDither(_: number);
  radius: number;
  setRadius(_: number);
  softness: number;
  setSoftness(_: number);
  value: number;
  setValue(_: number);
}

export class CIImage extends NSObject {
  static empty(): CIImage;
  static createWithImageWithDepthData(_: AVDepthData): CIImage;
  static createWithImageWithDepthDataOptions(_: AVDepthData, options?: Map<string, any>): CIImage;
  static imageWithImageProvider(_: any, _2: number, size: number, format: number, colorSpace?: any, options?: Map<string, any>): CIImage;
  static createWithImageWithPortaitEffectsMatte(_: AVPortraitEffectsMatte): CIImage;
  static createWithImageWithPortaitEffectsMatteOptions(_: AVPortraitEffectsMatte, options?: Map<string, any>): CIImage;
  static createWithImageWithSemanticSegmentationMatte(_: AVSemanticSegmentationMatte): CIImage;
  static createWithImageWithSemanticSegmentationMatteOptions(_: AVSemanticSegmentationMatte, options?: Map<string, any>): CIImage;
  CGImage: any;
  colorSpace: any;
  definition: CIFilterShape;
  depthData: AVDepthData;
  extent: CGRect;
  pixelBuffer: any;
  portraitEffectsMatte: AVPortraitEffectsMatte;
  properties: Map<string, any>;
  semanticSegmentationMatte: AVSemanticSegmentationMatte;
  url: URL;
  static blackImage: CIImage;
  static blueImage: CIImage;
  static clearImage: CIImage;
  static cyanImage: CIImage;
  static grayImage: CIImage;
  static greenImage: CIImage;
  static magentaImage: CIImage;
  static redImage: CIImage;
  static whiteImage: CIImage;
  static yellowImage: CIImage;
  autoAdjustmentFilters(): CIFilter[];
  autoAdjustmentFilters(options?: Map<string, any>): CIFilter[];
  draw(at: CGPoint, from: CGRect, operation: NSGraphics.NSCompositingOperation, fraction: number): void;
  draw(in_: CGRect, from: CGRect, operation: NSGraphics.NSCompositingOperation, fraction: number): void;
  oriented(_: CGImageProperties.CGImagePropertyOrientation): CIImage;
  applyingFilter(_: string): CIImage;
  applyingFilter(_: string, parameters?: Map<string, any>): CIImage;
  applyingGaussianBlur(sigma: number): CIImage;
  oriented(forExifOrientation: number): CIImage;
  transformed(by: CGAffineTransform): CIImage;
  transformed(by: CGAffineTransform, highQualityDownsample: boolean): CIImage;
  clampedToExtent(): CIImage;
  clamped(to: CGRect): CIImage;
  matchedToWorkingSpace(from: any): CIImage;
  matchedFromWorkingSpace(to: any): CIImage;
  composited(over: CIImage): CIImage;
  cropped(to: CGRect): CIImage;
  insertingIntermediate(): CIImage;
  insertingIntermediate(cache: boolean): CIImage;
  premultiplyingAlpha(): CIImage;
  samplingLinear(): CIImage;
  samplingNearest(): CIImage;
  settingAlphaOne(in_: CGRect): CIImage;
  settingProperties(_: Map<any, any>): CIImage;
  unpremultiplyingAlpha(): CIImage;
  orientationTransform(for_: CGImageProperties.CGImagePropertyOrientation): CGAffineTransform;
  orientationTransform(forExifOrientation: number): CGAffineTransform;
  static createWithBitmapDataWithBytesPerRowWithSizeWithFormatWithColorSpace(_: Data, bytesPerRow: number, size: CGSize, format: number, colorSpace?: any): CIImage;
  static createWithBitmapImageRep(_: NSBitmapImageRep): CIImage;
  static createWithCgImage(_: any): CIImage;
  static createWithCgImageWithOptions(_: any, options?: Map<string, any>): CIImage;
  static createWithCgImageSourceWithIndexWithOptions(_: any, index: number, options?: Map<string, any>): CIImage;
  static createWithCvImageBuffer(_: any): CIImage;
  static createWithCvImageBufferWithOptions(_: any, options?: Map<string, any>): CIImage;
  static createWithCvPixelBuffer(_: any): CIImage;
  static createWithCvPixelBufferWithOptions(_: any, options?: Map<string, any>): CIImage;
  static createWithColor(_: CIColor): CIImage;
  static createWithContentsOf(_: URL): CIImage;
  static createWithContentsOfWithOptions(_: URL, options?: Map<string, any>): CIImage;
  static createWithData(_: Data): CIImage;
  static createWithDataWithOptions(_: Data, options?: Map<string, any>): CIImage;
  static createWithDepthData(_: AVDepthData): CIImage;
  static createWithDepthDataWithOptions(_: AVDepthData, options?: Map<string, any>): CIImage;
  static createWithIoSurface(_: any): CIImage;
  static createWithIoSurfaceWithOptions(_: any, options?: Map<string, any>): CIImage;
  static createWithImageProviderWithSizeWithFormatWithColorSpaceWithOptions(_: any, _2: number, size: number, format: number, colorSpace?: any, options?: Map<string, any>): CIImage;
  static createWithMtlTextureWithOptions(_: any, options?: Map<string, any>): CIImage;
  static createWithPortaitEffectsMatte(_: AVPortraitEffectsMatte): CIImage;
  static createWithPortaitEffectsMatteWithOptions(_: AVPortraitEffectsMatte, options?: Map<string, any>): CIImage;
  static createWithSemanticSegmentationMatte(_: AVSemanticSegmentationMatte): CIImage;
  static createWithSemanticSegmentationMatteWithOptions(_: AVSemanticSegmentationMatte, options?: Map<string, any>): CIImage;
  regionOfInterest(for_: CIImage, in_: CGRect): CGRect;
}

export class CIImageAccumulator extends NSObject {
  extent: CGRect;
  format: number;
  clear(): void;
  image(): CIImage;
  static createWithExtentWithFormat(_: CGRect, format: number): CIImageAccumulator;
  static createWithExtentWithFormatWithColorSpace(_: CGRect, format: number, colorSpace: any): CIImageAccumulator;
  setImage(_: CIImage): void;
  setImage(_: CIImage, dirtyRect: CGRect): void;
}

interface CIImageProcessorInput {
  baseAddress: any;
  bytesPerRow: number;
  format: number;
  metalTexture: any;
  pixelBuffer: any;
  region: CGRect;
  surface: any;
}

export class CIImageProcessorKernel extends NSObject {
  static applyWithExtent(inputs: CGRect, arguments_?: CIImage[], error?: Map<string, any>): CIImage;
  static formatForInput(at: number): number;
  static processWithInputs(arguments_?: any[], output?: Map<string, any>, error?: any): boolean;
  static roi(forInput: number, arguments_?: Map<string, any>, outputRect?: CGRect): CGRect;
  static outputFormat: number;
  static outputIsOpaque: boolean;
  static synchronizeInputs: boolean;
}

interface CIImageProcessorOutput {
  baseAddress: any;
  bytesPerRow: number;
  format: number;
  metalCommandBuffer: any;
  metalTexture: any;
  pixelBuffer: any;
  region: CGRect;
  surface: any;
}

interface CIKaleidoscope {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  count: number;
  setCount(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CIKernel extends NSObject {
  static createWithKernelWithFunctionNameFromMetalLibraryData(fromMetalLibraryData: string, error: Data): CIKernel;
  static createWithKernelWithFunctionNameFromMetalLibraryDataWithOutputPixelFormat(fromMetalLibraryData: string, outputPixelFormat: Data, error: number): CIKernel;
  name: string;
  apply(extent: CGRect, roiCallback: (p1: number, p2: CGRect) => CGRect, arguments_?: any[]): CIImage;
  setROISelector(_: string): void;
}

interface CIKeystoneCorrectionCombined {
  focalLength: number;
  setFocalLength(_: number);
}

interface CIKeystoneCorrectionHorizontal {
  focalLength: number;
  setFocalLength(_: number);
}

interface CIKeystoneCorrectionVertical {
  focalLength: number;
  setFocalLength(_: number);
}

interface CILabDeltaE {
  image2: CIImage;
  setImage2(_: CIImage);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CILanczosScaleTransform {
  aspectRatio: number;
  setAspectRatio(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  scale: number;
  setScale(_: number);
}

interface CILenticularHaloGenerator {
  center: CGPoint;
  setCenter(_: CGPoint);
  color: CIColor;
  setColor(_: CIColor);
  haloOverlap: number;
  setHaloOverlap(_: number);
  haloRadius: number;
  setHaloRadius(_: number);
  haloWidth: number;
  setHaloWidth(_: number);
  striationContrast: number;
  setStriationContrast(_: number);
  striationStrength: number;
  setStriationStrength(_: number);
  time: number;
  setTime(_: number);
}

interface CILineOverlay {
  contrast: number;
  setContrast(_: number);
  edgeIntensity: number;
  setEdgeIntensity(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  NRNoiseLevel: number;
  setNRNoiseLevel(_: number);
  NRSharpness: number;
  setNRSharpness(_: number);
  threshold: number;
  setThreshold(_: number);
}

interface CILineScreen {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  sharpness: number;
  setSharpness(_: number);
  width: number;
  setWidth(_: number);
}

interface CILinearGradient {
  color0: CIColor;
  setColor0(_: CIColor);
  color1: CIColor;
  setColor1(_: CIColor);
  point0: CGPoint;
  setPoint0(_: CGPoint);
  point1: CGPoint;
  setPoint1(_: CGPoint);
}

interface CILinearToSRGBToneCurve {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIMaskToAlpha {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIMaskedVariableBlur {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  mask: CIImage;
  setMask(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIMaximumComponent {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIMedian {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIMeshGenerator {
  color: CIColor;
  setColor(_: CIColor);
  mesh: any[];
  setMesh(_: any[]);
  width: number;
  setWidth(_: number);
}

interface CIMinimumComponent {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIMix {
  amount: number;
  setAmount(_: number);
  backgroundImage: CIImage;
  setBackgroundImage(_: CIImage);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIModTransition {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  compression: number;
  setCompression(_: number);
  radius: number;
  setRadius(_: number);
}

interface CIMorphologyGradient {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIMorphologyMaximum {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIMorphologyMinimum {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CIMorphologyRectangleMaximum {
  height: number;
  setHeight(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIMorphologyRectangleMinimum {
  height: number;
  setHeight(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIMotionBlur {
  angle: number;
  setAngle(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

interface CINoiseReduction {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  noiseLevel: number;
  setNoiseLevel(_: number);
  sharpness: number;
  setSharpness(_: number);
}

interface CIOpTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  scale: number;
  setScale(_: number);
  width: number;
  setWidth(_: number);
}

interface CIPDF417BarcodeGenerator {
  alwaysSpecifyCompaction: number;
  setAlwaysSpecifyCompaction(_: number);
  compactionMode: number;
  setCompactionMode(_: number);
  compactStyle: number;
  setCompactStyle(_: number);
  correctionLevel: number;
  setCorrectionLevel(_: number);
  dataColumns: number;
  setDataColumns(_: number);
  maxHeight: number;
  setMaxHeight(_: number);
  maxWidth: number;
  setMaxWidth(_: number);
  message: Data;
  setMessage(_: Data);
  minHeight: number;
  setMinHeight(_: number);
  minWidth: number;
  setMinWidth(_: number);
  preferredAspectRatio: number;
  setPreferredAspectRatio(_: number);
  rows: number;
  setRows(_: number);
}

export class CIPDF417CodeDescriptor extends CIBarcodeDescriptor {
  columnCount: number;
  errorCorrectedPayload: Data;
  isCompact: boolean;
  rowCount: number;
  static createWithPayloadWithIsCompactWithRowCountWithColumnCount(_: Data, isCompact: boolean, rowCount: number, columnCount: number): CIPDF417CodeDescriptor;
}

interface CIPageCurlTransition {
  angle: number;
  setAngle(_: number);
  backsideImage: CIImage;
  setBacksideImage(_: CIImage);
  extent: CGRect;
  setExtent(_: CGRect);
  radius: number;
  setRadius(_: number);
  shadingImage: CIImage;
  setShadingImage(_: CIImage);
}

interface CIPageCurlWithShadowTransition {
  angle: number;
  setAngle(_: number);
  backsideImage: CIImage;
  setBacksideImage(_: CIImage);
  extent: CGRect;
  setExtent(_: CGRect);
  radius: number;
  setRadius(_: number);
  shadowAmount: number;
  setShadowAmount(_: number);
  shadowExtent: CGRect;
  setShadowExtent(_: CGRect);
  shadowSize: number;
  setShadowSize(_: number);
}

interface CIPaletteCentroid {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  paletteImage: CIImage;
  setPaletteImage(_: CIImage);
  perceptual: boolean;
  setPerceptual(_: boolean);
}

interface CIPalettize {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  paletteImage: CIImage;
  setPaletteImage(_: CIImage);
  perceptual: boolean;
  setPerceptual(_: boolean);
}

interface CIParallelogramTile {
  acuteAngle: number;
  setAcuteAngle(_: number);
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIPerspectiveCorrection {
  crop: boolean;
  setCrop(_: boolean);
}

interface CIPerspectiveRotate {
  focalLength: number;
  setFocalLength(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  pitch: number;
  setPitch(_: number);
  roll: number;
  setRoll(_: number);
  yaw: number;
  setYaw(_: number);
}

interface CIPerspectiveTile {
  bottomLeft: CGPoint;
  setBottomLeft(_: CGPoint);
  bottomRight: CGPoint;
  setBottomRight(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  topLeft: CGPoint;
  setTopLeft(_: CGPoint);
  topRight: CGPoint;
  setTopRight(_: CGPoint);
}

interface CIPerspectiveTransform {
}

interface CIPerspectiveTransformWithExtent {
  extent: CGRect;
  setExtent(_: CGRect);
}

interface CIPhotoEffect {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIPixellate {
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  scale: number;
  setScale(_: number);
}

export class CIPlugIn extends NSObject {
  static loadNonExecutablePlugIn(_: URL): void;
  static loadNonExecutablePlugIns(): void;
}

interface CIPlugInRegistration {
  load(_: any): boolean;
}

interface CIPointillize {
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
}

export class CIQRCodeDescriptor extends CIBarcodeDescriptor {
  errorCorrectedPayload: Data;
  errorCorrectionLevel: CIBarcodeDescriptor.CIQRCodeErrorCorrectionLevel;
  maskPattern: number;
  symbolVersion: number;
  static createWithPayloadWithSymbolVersionWithMaskPatternWithErrorCorrectionLevel(_: Data, symbolVersion: number, maskPattern: number, errorCorrectionLevel: CIBarcodeDescriptor.CIQRCodeErrorCorrectionLevel): CIQRCodeDescriptor;
}

export class CIQRCodeFeature extends CIFeature {
  bottomLeft: CGPoint;
  bottomRight: CGPoint;
  messageString: string;
  symbolDescriptor: CIQRCodeDescriptor;
  topLeft: CGPoint;
  topRight: CGPoint;
}

interface CIQRCodeGenerator {
  correctionLevel: string;
  setCorrectionLevel(_: string);
  message: Data;
  setMessage(_: Data);
}

interface CIRadialGradient {
  center: CGPoint;
  setCenter(_: CGPoint);
  color0: CIColor;
  setColor0(_: CIColor);
  color1: CIColor;
  setColor1(_: CIColor);
  radius0: number;
  setRadius0(_: number);
  radius1: number;
  setRadius1(_: number);
}

interface CIRandomGenerator {
}

export class CIRectangleFeature extends CIFeature {
  bottomLeft: CGPoint;
  bottomRight: CGPoint;
  topLeft: CGPoint;
  topRight: CGPoint;
}

export class CIRenderDestination extends NSObject {
  alphaMode: CIRenderDestination.CIRenderDestinationAlphaMode;
  setAlphaMode(_: CIRenderDestination.CIRenderDestinationAlphaMode);
  blendKernel: CIBlendKernel;
  setBlendKernel(_: CIBlendKernel);
  blendsInDestinationColorSpace: boolean;
  setBlendsInDestinationColorSpace(_: boolean);
  isClamped: boolean;
  setClamped(_: boolean);
  colorSpace: any;
  setColorSpace(_: any);
  isDithered: boolean;
  setDithered(_: boolean);
  isFlipped: boolean;
  setFlipped(_: boolean);
  height: number;
  width: number;
  static createWithBitmapDataWithWidthWithHeightWithBytesPerRowWithFormat(_: any, width: number, height: number, bytesPerRow: number, format: number): CIRenderDestination;
  static createWithGlTextureWithTargetWithWidthWithHeight(_: number, target: number, width: number, height: number): CIRenderDestination;
  static createWithIoSurface(_: IOSurface): CIRenderDestination;
  static createWithMtlTextureWithCommandBuffer(_: any, commandBuffer?: any): CIRenderDestination;
  static createWithPixelBuffer(_: any): CIRenderDestination;
  static createWithWidthWithHeightWithPixelFormatWithCommandBufferWithMtlTextureProvider(_: number, height: number, pixelFormat: MTLPixelFormat.MTLPixelFormat, commandBuffer?: any, mtlTextureProvider?: () => any): CIRenderDestination;
}

export class CIRenderInfo extends NSObject {
  kernelExecutionTime: number;
  passCount: number;
  pixelsProcessed: number;
}

export class CIRenderTask extends NSObject {
  waitUntilCompletedAndReturnError(): CIRenderInfo;
}

interface CIRippleTransition {
  center: CGPoint;
  setCenter(_: CGPoint);
  extent: CGRect;
  setExtent(_: CGRect);
  scale: number;
  setScale(_: number);
  shadingImage: CIImage;
  setShadingImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIRoundedRectangleGenerator {
  color: CIColor;
  setColor(_: CIColor);
  extent: CGRect;
  setExtent(_: CGRect);
  radius: number;
  setRadius(_: number);
}

interface CISRGBToneCurveToLinear {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CISaliencyMap {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CISampler extends NSObject {
  static createWithSamplerWithImageKeysAndValues(_: CIImage, keysAndValues: any): CISampler;
  definition: CIFilterShape;
  extent: CGRect;
  static createWithImage(_: CIImage): CISampler;
  static createWithImageWithOptions(_: CIImage, options?: Map<any, any>): CISampler;
}

interface CISepiaTone {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
}

interface CIShadedMaterial {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  scale: number;
  setScale(_: number);
  shadingImage: CIImage;
  setShadingImage(_: CIImage);
}

interface CISharpenLuminance {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  radius: number;
  setRadius(_: number);
  sharpness: number;
  setSharpness(_: number);
}

interface CISixfoldReflectedTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CISixfoldRotatedTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CISmoothLinearGradient {
  color0: CIColor;
  setColor0(_: CIColor);
  color1: CIColor;
  setColor1(_: CIColor);
  point0: CGPoint;
  setPoint0(_: CGPoint);
  point1: CGPoint;
  setPoint1(_: CGPoint);
}

interface CISpotColor {
  centerColor1: CIColor;
  setCenterColor1(_: CIColor);
  centerColor2: CIColor;
  setCenterColor2(_: CIColor);
  centerColor3: CIColor;
  setCenterColor3(_: CIColor);
  closeness1: number;
  setCloseness1(_: number);
  closeness2: number;
  setCloseness2(_: number);
  closeness3: number;
  setCloseness3(_: number);
  contrast1: number;
  setContrast1(_: number);
  contrast2: number;
  setContrast2(_: number);
  contrast3: number;
  setContrast3(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  replacementColor1: CIColor;
  setReplacementColor1(_: CIColor);
  replacementColor2: CIColor;
  setReplacementColor2(_: CIColor);
  replacementColor3: CIColor;
  setReplacementColor3(_: CIColor);
}

interface CISpotLight {
  brightness: number;
  setBrightness(_: number);
  color: CIColor;
  setColor(_: CIColor);
  concentration: number;
  setConcentration(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  lightPointsAt: CIVector;
  setLightPointsAt(_: CIVector);
  lightPosition: CIVector;
  setLightPosition(_: CIVector);
}

interface CIStarShineGenerator {
  center: CGPoint;
  setCenter(_: CGPoint);
  color: CIColor;
  setColor(_: CIColor);
  crossAngle: number;
  setCrossAngle(_: number);
  crossOpacity: number;
  setCrossOpacity(_: number);
  crossScale: number;
  setCrossScale(_: number);
  crossWidth: number;
  setCrossWidth(_: number);
  epsilon: number;
  setEpsilon(_: number);
  radius: number;
  setRadius(_: number);
}

interface CIStraighten {
  angle: number;
  setAngle(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIStripesGenerator {
  center: CGPoint;
  setCenter(_: CGPoint);
  color0: CIColor;
  setColor0(_: CIColor);
  color1: CIColor;
  setColor1(_: CIColor);
  sharpness: number;
  setSharpness(_: number);
  width: number;
  setWidth(_: number);
}

interface CISunbeamsGenerator {
  center: CGPoint;
  setCenter(_: CGPoint);
  color: CIColor;
  setColor(_: CIColor);
  maxStriationRadius: number;
  setMaxStriationRadius(_: number);
  striationContrast: number;
  setStriationContrast(_: number);
  striationStrength: number;
  setStriationStrength(_: number);
  sunRadius: number;
  setSunRadius(_: number);
  time: number;
  setTime(_: number);
}

interface CISwipeTransition {
  angle: number;
  setAngle(_: number);
  color: CIColor;
  setColor(_: CIColor);
  extent: CGRect;
  setExtent(_: CGRect);
  opacity: number;
  setOpacity(_: number);
  width: number;
  setWidth(_: number);
}

interface CITemperatureAndTint {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  neutral: CIVector;
  setNeutral(_: CIVector);
  targetNeutral: CIVector;
  setTargetNeutral(_: CIVector);
}

export class CITextFeature extends CIFeature {
  bottomLeft: CGPoint;
  bottomRight: CGPoint;
  subFeatures: any[];
  topLeft: CGPoint;
  topRight: CGPoint;
}

interface CITextImageGenerator {
  fontName: string;
  setFontName(_: string);
  fontSize: number;
  setFontSize(_: number);
  scaleFactor: number;
  setScaleFactor(_: number);
  text: string;
  setText(_: string);
}

interface CIThermal {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIToneCurve {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  point0: CGPoint;
  setPoint0(_: CGPoint);
  point1: CGPoint;
  setPoint1(_: CGPoint);
  point2: CGPoint;
  setPoint2(_: CGPoint);
  point3: CGPoint;
  setPoint3(_: CGPoint);
  point4: CGPoint;
  setPoint4(_: CGPoint);
}

interface CITransitionFilter {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  targetImage: CIImage;
  setTargetImage(_: CIImage);
  time: number;
  setTime(_: number);
}

interface CITriangleKaleidoscope {
  decay: number;
  setDecay(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  point: CGPoint;
  setPoint(_: CGPoint);
  rotation: number;
  setRotation(_: number);
  size: number;
  setSize(_: number);
}

interface CITriangleTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CITwelvefoldReflectedTile {
  angle: number;
  setAngle(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  width: number;
  setWidth(_: number);
}

interface CIUnsharpMask {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
  radius: number;
  setRadius(_: number);
}

export class CIVector extends NSObject {
  CGAffineTransformValue: CGAffineTransform;
  CGPointValue: CGPoint;
  CGRectValue: CGRect;
  W: number;
  X: number;
  Y: number;
  Z: number;
  count: number;
  stringRepresentation: string;
  static createWithCgAffineTransform(_: CGAffineTransform): CIVector;
  static createWithCgPoint(_: CGPoint): CIVector;
  static createWithCgRect(_: CGRect): CIVector;
  static createWithString(_: string): CIVector;
  static createWithValuesWithCount(_: number, count: number): CIVector;
  static createWithX(_: number): CIVector;
  static createWithXWithY(_: number, Y: number): CIVector;
  static createWithXWithYWithZ(_: number, Y: number, Z: number): CIVector;
  static createWithXWithYWithZWithW(_: number, Y: number, Z: number, W: number): CIVector;
  // @ts-ignore 
  value(at: number): number;
}

interface CIVibrance {
  amount: number;
  setAmount(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIVignette {
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
  radius: number;
  setRadius(_: number);
}

interface CIVignetteEffect {
  center: CGPoint;
  setCenter(_: CGPoint);
  falloff: number;
  setFalloff(_: number);
  inputImage: CIImage;
  setInputImage(_: CIImage);
  intensity: number;
  setIntensity(_: number);
  radius: number;
  setRadius(_: number);
}

export class CIWarpKernel extends CIKernel {
  //  static createWithKernelWithFunctionNameFromMetalLibraryData(fromMetalLibraryData: string, error: Data): CIWarpKernel;
  //  static createWithKernelWithFunctionNameFromMetalLibraryDataWithOutputPixelFormat(fromMetalLibraryData: string, outputPixelFormat: Data, error: number): CIWarpKernel;
  // @ts-ignore 
  apply(extent: CGRect, roiCallback: (p1: number, p2: CGRect) => CGRect, image: CIImage, arguments_?: any[]): CIImage;
}

interface CIWhitePointAdjust {
  color: CIColor;
  setColor(_: CIColor);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIXRay {
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

interface CIZoomBlur {
  amount: number;
  setAmount(_: number);
  center: CGPoint;
  setCenter(_: CGPoint);
  inputImage: CIImage;
  setInputImage(_: CIImage);
}

export class CLBeacon extends NSObject {
  accuracy: number;
  major: number;
  minor: number;
  proximity: CLRegion.CLProximity;
  proximityUUID: UUID;
  rssi: number;
}

export class CLBeaconIdentityConstraint extends NSObject {
  UUID: UUID;
  major: number;
  minor: number;
  static createWithUuID(_: UUID): CLBeaconIdentityConstraint;
  static createWithUuIDWithMajor(_: UUID, major: number): CLBeaconIdentityConstraint;
  static createWithUuIDWithMajorWithMinor(_: UUID, major: number, minor: number): CLBeaconIdentityConstraint;
}

export class CLBeaconRegion extends CLRegion {
  major: number;
  minor: number;
  notifyEntryStateOnDisplay: boolean;
  setNotifyEntryStateOnDisplay(_: boolean);
  proximityUUID: UUID;
  static createWithProximityuuIDWithIdentifier(_: UUID, identifier: string): CLBeaconRegion;
  static createWithProximityuuIDWithMajorWithIdentifier(_: UUID, major: number, identifier: string): CLBeaconRegion;
  static createWithProximityuuIDWithMajorWithMinorWithIdentifier(_: UUID, major: number, minor: number, identifier: string): CLBeaconRegion;
  peripheralDataWithMeasuredPower(_?: number): Map<string, any>;
}

export class CLCircularRegion extends CLRegion {
  center: CLLocationCoordinate2D;
  radius: number;
  containsCoordinate(_: CLLocationCoordinate2D): boolean;
  static createWithCenterWithRadiusWithIdentifier(_: CLLocationCoordinate2D, radius: number, identifier: string): CLCircularRegion;
}

export class CLFloor extends NSObject {
  level: number;
}

export class CLGeocoder extends NSObject {
  isGeocoding: boolean;
  cancelGeocode(): void;
  geocodeAddressString(_: string, completionHandler: (p1: CLPlacemark[], p2: Error) => void): void;
  geocodeAddressString(_: string, inRegion?: CLRegion, completionHandler?: (p1: CLPlacemark[], p2: Error) => void): void;
  geocodeAddressString(_: string, inRegion?: CLRegion, preferredLocale?: Locale, completionHandler?: (p1: CLPlacemark[], p2: Error) => void): void;
  geocodePostalAddress(_: CNPostalAddress, completionHandler: (p1: CLPlacemark[], p2: Error) => void): void;
  geocodePostalAddress(_: CNPostalAddress, preferredLocale?: Locale, completionHandler?: (p1: CLPlacemark[], p2: Error) => void): void;
  reverseGeocodeLocation(_: CLLocation, completionHandler: (p1: CLPlacemark[], p2: Error) => void): void;
  reverseGeocodeLocation(_: CLLocation, preferredLocale?: Locale, completionHandler?: (p1: CLPlacemark[], p2: Error) => void): void;
}

export class CLHeading extends NSObject {
  headingAccuracy: number;
  magneticHeading: number;
  timestamp: Date;
  trueHeading: number;
  x: number;
  y: number;
  z: number;
}

export class CLLocation extends NSObject {
  altitude: number;
  coordinate: CLLocationCoordinate2D;
  course: number;
  courseAccuracy: number;
  floor: CLFloor;
  horizontalAccuracy: number;
  speed: number;
  speedAccuracy: number;
  timestamp: Date;
  verticalAccuracy: number;
  distanceFromLocation(_: CLLocation): number;
  static createWithCoordinateWithAltitudeWithHorizontalAccuracyWithVerticalAccuracyWithCourseWithCourseAccuracyWithSpeedWithSpeedAccuracyWithTimestamp(_: CLLocationCoordinate2D, altitude: number, horizontalAccuracy: number, verticalAccuracy: number, course: number, courseAccuracy: number, speed: number, speedAccuracy: number, timestamp: Date): CLLocation;
  static createWithCoordinateWithAltitudeWithHorizontalAccuracyWithVerticalAccuracyWithCourseWithSpeedWithTimestamp(_: CLLocationCoordinate2D, altitude: number, horizontalAccuracy: number, verticalAccuracy: number, course: number, speed: number, timestamp: Date): CLLocation;
  static createWithCoordinateWithAltitudeWithHorizontalAccuracyWithVerticalAccuracyWithTimestamp(_: CLLocationCoordinate2D, altitude: number, horizontalAccuracy: number, verticalAccuracy: number, timestamp: Date): CLLocation;
  static createWithLatitudeWithLongitude(_: number, longitude: number): CLLocation;
}

// export function CLLocationCoordinate2DIsValid(coord: CLLocationCoordinate2D): boolean;

// export function CLLocationCoordinate2DMake(latitude: number, longitude: number): CLLocationCoordinate2D;

export class CLLocationManager extends NSObject {
  static authorizationStatus(): CLLocationManager.CLAuthorizationStatus;
  static headingAvailable(): boolean;
  static isMonitoringAvailableForClass(_: typeof NSObject): boolean;
  static locationServicesEnabled(): boolean;
  static significantLocationChangeMonitoringAvailable(): boolean;
  delegate: any;
  setDelegate(_: any);
  desiredAccuracy: number;
  setDesiredAccuracy(_: number);
  distanceFilter: number;
  setDistanceFilter(_: number);
  location: CLLocation;
  maximumRegionMonitoringDistance: number;
  monitoredRegions: Set<any>;
  purpose: string;
  setPurpose(_: string);
  requestAlwaysAuthorization(): void;
  requestLocation(): void;
  requestStateForRegion(_: CLRegion): void;
  startMonitoringForRegion(_: CLRegion): void;
  startMonitoringSignificantLocationChanges(): void;
  startUpdatingLocation(): void;
  stopMonitoringForRegion(_: CLRegion): void;
  stopMonitoringSignificantLocationChanges(): void;
  stopUpdatingLocation(): void;
}

interface CLLocationManagerDelegate {
  locationManager(_: CLLocationManager, didUpdateToLocation: CLLocation, fromLocation: CLLocation): void;
  locationManager(_: CLLocationManager, didUpdateLocations: CLLocation[]): void;
  locationManager(_: CLLocationManager, didDetermineState: CLRegion.CLRegionState, forRegion: CLRegion): void;
  locationManager(_: CLLocationManager, didEnterRegion: CLRegion): void;
  locationManager(_: CLLocationManager, didExitRegion: CLRegion): void;
  locationManager(_: CLLocationManager, didFailWithError: Error): void;
  locationManager(_: CLLocationManager, monitoringDidFailForRegion?: CLRegion, withError?: Error): void;
  locationManager(_: CLLocationManager, didChangeAuthorizationStatus: CLLocationManager.CLAuthorizationStatus): void;
  locationManager(_: CLLocationManager, didStartMonitoringForRegion: CLRegion): void;
  locationManager(_: CLLocationManager, didFinishDeferredUpdatesWithError?: Error): void;
}

export class CLPlacemark extends NSObject {
  ISOcountryCode: string;
  administrativeArea: string;
  areasOfInterest: string[];
  country: string;
  inlandWater: string;
  locality: string;
  location: CLLocation;
  name: string;
  ocean: string;
  postalAddress: CNPostalAddress;
  postalCode: string;
  region: CLRegion;
  subAdministrativeArea: string;
  subLocality: string;
  subThoroughfare: string;
  thoroughfare: string;
  timeZone: TimeZone;
  static createWithPlacemark(_: CLPlacemark): CLPlacemark;
}

export class CLRegion extends NSObject {
  identifier: string;
  notifyOnEntry: boolean;
  setNotifyOnEntry(_: boolean);
  notifyOnExit: boolean;
  setNotifyOnExit(_: boolean);
}

export class CLVisit extends NSObject {
  arrivalDate: Date;
  coordinate: CLLocationCoordinate2D;
  departureDate: Date;
  horizontalAccuracy: number;
}

// export function MIDIClientCreate(name: string, notifyProc: (p1: MIDINotification, p2: any) => void, notifyRefCon: any, outClient: number): number;

// export function MIDIClientCreateWithBlock(name: string, outClient: number, notifyBlock: (p1: MIDINotification) => void): number;

// export function MIDIClientDispose(client: number): number;

// export function MIDIDestinationCreate(client: number, name: string, readProc: (p1: MIDIPacketList, p2: any, p3: any) => void, refCon: any, outDest: number): number;

// export function MIDIDestinationCreateWithBlock(client: number, name: string, outDest: number, readBlock: (p1: MIDIPacketList, p2: any) => void): number;

// export function MIDIDeviceAddEntity(device: number, name: string, embedded: boolean, numSourceEndpoints: number, numDestinationEndpoints: number, newEntity: number): number;

// export function MIDIDeviceCreate(owner: MIDIDriverInterface, name: string, manufacturer: string, model: string, outDevice: number): number;

// export function MIDIDeviceDispose(device: number): number;

// export function MIDIDeviceGetEntity(device: number, entityIndex0: number): number;

// export function MIDIDeviceGetNumberOfEntities(device: number): number;

// export function MIDIDeviceListAddDevice(devList: number, dev: number): number;

// export function MIDIDeviceListDispose(devList: number): number;

// export function MIDIDeviceListGetDevice(devList: number, index0: number): number;

// export function MIDIDeviceListGetNumberOfDevices(devList: number): number;

// export function MIDIDeviceRemoveEntity(device: number, entity: number): number;

// export function MIDIDriverEnableMonitoring(driver: MIDIDriverInterface, enabled: boolean): number;

// export function MIDIEndpointDispose(endpt: number): number;

// export function MIDIEndpointGetEntity(inEndpoint: number, outEntity: number): number;

// export function MIDIEndpointGetRefCons(endpt: number, ref1: any, ref2: any): number;

// export function MIDIEndpointSetRefCons(endpt: number, ref1: any, ref2: any): number;

// export function MIDIEntityAddOrRemoveEndpoints(entity: number, numSourceEndpoints: number, numDestinationEndpoints: number): number;

// export function MIDIEntityGetDestination(entity: number, destIndex0: number): number;

// export function MIDIEntityGetDevice(inEntity: number, outDevice: number): number;

// export function MIDIEntityGetNumberOfDestinations(entity: number): number;

// export function MIDIEntityGetNumberOfSources(entity: number): number;

// export function MIDIEntityGetSource(entity: number, sourceIndex0: number): number;

// export function MIDIExternalDeviceCreate(name: string, manufacturer: string, model: string, outDevice: number): number;

// export function MIDIFlushOutput(dest: number): number;

// export function MIDIGetDestination(destIndex0: number): number;

// export function MIDIGetDevice(deviceIndex0: number): number;

// export function MIDIGetDriverDeviceList(driver: MIDIDriverInterface): number;

// export function MIDIGetDriverIORunLoop(): any;

// export function MIDIGetExternalDevice(deviceIndex0: number): number;

// export function MIDIGetNumberOfDestinations(): number;

// export function MIDIGetNumberOfDevices(): number;

// export function MIDIGetNumberOfExternalDevices(): number;

// export function MIDIGetNumberOfSources(): number;

// export function MIDIGetSource(sourceIndex0: number): number;

// export function MIDIInputPortCreate(client: number, portName: string, readProc: (p1: MIDIPacketList, p2: any, p3: any) => void, refCon: any, outPort: number): number;

// export function MIDIInputPortCreateWithBlock(client: number, portName: string, outPort: number, readBlock: (p1: MIDIPacketList, p2: any) => void): number;

// export function MIDIObjectFindByUniqueID(inUniqueID: number, outObject: number, outObjectType: MIDIServices.MIDIObjectType): number;

// export function MIDIObjectGetDataProperty(obj: number, propertyID: string, outData: Data): number;

// export function MIDIObjectGetDictionaryProperty(obj: number, propertyID: string, outDict: Map<any, any>): number;

// export function MIDIObjectGetIntegerProperty(obj: number, propertyID: string, outValue: number): number;

// export function MIDIObjectGetProperties(obj: number, outProperties: any, deep: boolean): number;

// export function MIDIObjectGetStringProperty(obj: number, propertyID: string, str: string): number;

// export function MIDIObjectRemoveProperty(obj: number, propertyID: string): number;

// export function MIDIObjectSetDataProperty(obj: number, propertyID: string, data: Data): number;

// export function MIDIObjectSetDictionaryProperty(obj: number, propertyID: string, dict: Map<any, any>): number;

// export function MIDIObjectSetIntegerProperty(obj: number, propertyID: string, value: number): number;

// export function MIDIObjectSetStringProperty(obj: number, propertyID: string, str: string): number;

// export function MIDIOutputPortCreate(client: number, portName: string, outPort: number): number;

// export function MIDIPacketListAdd(pktlist: MIDIPacketList, listSize: number, curPacket: MIDIPacket, time: number, nData: number, data: string | any): MIDIPacket;

// export function MIDIPacketListInit(pktlist: MIDIPacketList): MIDIPacket;

// export function MIDIPortConnectSource(port: number, source: number, connRefCon: any): number;

// export function MIDIPortDisconnectSource(port: number, source: number): number;

// export function MIDIPortDispose(port: number): number;

// export function MIDIReceived(src: number, pktlist: MIDIPacketList): number;

// export function MIDIRestart(): number;

// export function MIDISend(port: number, dest: number, pktlist: MIDIPacketList): number;

// export function MIDISendSysex(request: MIDISysexSendRequest): number;

// export function MIDISetupAddDevice(device: number): number;

// export function MIDISetupAddExternalDevice(device: number): number;

// export function MIDISetupRemoveDevice(device: number): number;

// export function MIDISetupRemoveExternalDevice(device: number): number;

// export function MIDISourceCreate(client: number, name: string, outSrc: number): number;

// export function MIDIThruConnectionCreate(inPersistentOwnerID: string, inConnectionParams: Data, outConnection: number): number;

// export function MIDIThruConnectionDispose(connection: number): number;

// export function MIDIThruConnectionFind(inPersistentOwnerID: string, outConnectionList: Data): number;

// export function MIDIThruConnectionGetParams(connection: number, outConnectionParams: Data): number;

// export function MIDIThruConnectionParamsInitialize(inConnectionParams: MIDIThruConnectionParams): void;

// export function MIDIThruConnectionSetParams(connection: number, inConnectionParams: Data): number;

export class MLArrayBatchProvider extends NSObject {
  array: any[];
  static createWith(error: Map<string, any[]>): MLArrayBatchProvider;
}

interface MLBatchProvider {
  count: number;
  featuresAtIndex(_: number): any;
}

interface MLCustomLayer {
  encodeToCommandBuffer(inputs: any, outputs: any[], error: any[]): boolean;
  evaluateOnCPUWithInputs(outputs: MLMultiArray[], error: MLMultiArray[]): boolean;
  outputShapesForInputShapes(error: number[][]): number[][];
  setWeightData(error: Data[]): boolean;
}

interface MLCustomModel {
  predictionFromFeatures(options: any, error: MLPredictionOptions): any;
  predictionsFromBatch(options: any, error: MLPredictionOptions): any;
}

export class MLDictionaryConstraint extends NSObject {
  keyType: MLFeatureType.MLFeatureType;
}

export class MLDictionaryFeatureProvider extends NSObject {
  dictionary: Map<string, MLFeatureValue>;
  static createWith(error: Map<string, any>): MLDictionaryFeatureProvider;
  objectForKeyedSubscript(_: string): MLFeatureValue;
}

export class MLFeatureDescription extends NSObject {
  dictionaryConstraint: MLDictionaryConstraint;
  imageConstraint: MLImageConstraint;
  multiArrayConstraint: MLMultiArrayConstraint;
  name: string;
  isOptional: boolean;
  sequenceConstraint: MLSequenceConstraint;
  type: MLFeatureType.MLFeatureType;
  isAllowedValue(_: MLFeatureValue): boolean;
}

interface MLFeatureProvider {
  featureNames: Set<any>;
  featureValueForName(_: string): MLFeatureValue;
}

export class MLFeatureValue extends NSObject {
  static createWithFeatureValueWithCGImageConstraintWithOptions(constraint: any, options: MLImageConstraint, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithCGImageOrientationWithConstraintWithOptions(orientation: any, constraint: CGImageProperties.CGImagePropertyOrientation, options: MLImageConstraint, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithCGImageOrientationWithPixelsWideWithPixelsHighWithPixelFormatTypeWithOptions(orientation: any, pixelsWide: CGImageProperties.CGImagePropertyOrientation, pixelsHigh: number, pixelFormatType: number, options: number, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithCGImagePixelsWideWithPixelsHighWithPixelFormatTypeWithOptions(pixelsWide: any, pixelsHigh: number, pixelFormatType: number, options: number, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithDictionary(error: Map<any, number>): MLFeatureValue;
  static createWithFeatureValueWithDouble(_: number): MLFeatureValue;
  static createWithFeatureValueWithImageAtURLConstraintWithOptions(constraint: URL, options: MLImageConstraint, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithImageAtURLOrientationWithConstraintWithOptions(orientation: URL, constraint: CGImageProperties.CGImagePropertyOrientation, options: MLImageConstraint, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithImageAtURLOrientationWithPixelsWideWithPixelsHighWithPixelFormatTypeWithOptions(orientation: URL, pixelsWide: CGImageProperties.CGImagePropertyOrientation, pixelsHigh: number, pixelFormatType: number, options: number, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithImageAtURLPixelsWideWithPixelsHighWithPixelFormatTypeWithOptions(pixelsWide: URL, pixelsHigh: number, pixelFormatType: number, options: number, error?: Map<string, any>): MLFeatureValue;
  static createWithFeatureValueWithInt64(_: number): MLFeatureValue;
  static createWithFeatureValueWithMultiArray(_: MLMultiArray): MLFeatureValue;
  static createWithFeatureValueWithPixelBuffer(_: any): MLFeatureValue;
  static createWithFeatureValueWithSequence(_: MLSequence): MLFeatureValue;
  static createWithFeatureValueWithString(_: string): MLFeatureValue;
  dictionaryValue: Map<any, number>;
  doubleValue: number;
  imageBufferValue: any;
  int64Value: number;
  multiArrayValue: MLMultiArray;
  sequenceValue: MLSequence;
  stringValue: string;
  type: MLFeatureType.MLFeatureType;
  isUndefined: boolean;
  isEqualToFeatureValue(_: MLFeatureValue): boolean;
}

export class MLImageConstraint extends NSObject {
  pixelFormatType: number;
  pixelsHigh: number;
  pixelsWide: number;
  sizeConstraint: MLImageSizeConstraint;
}

export class MLImageSize extends NSObject {
  pixelsHigh: number;
  pixelsWide: number;
}

export class MLImageSizeConstraint extends NSObject {
  enumeratedImageSizes: MLImageSize[];
  pixelsHighRange: NSRange;
  pixelsWideRange: NSRange;
  type: MLImageSizeConstraintType.MLImageSizeConstraintType;
}

export class MLKey extends NSObject {
  name: string;
  scope: string;
}

export class MLMetricKey extends MLKey {
  static epochIndex: MLMetricKey;
  static lossValue: MLMetricKey;
  static miniBatchIndex: MLMetricKey;
}

export class MLModel extends NSObject {
  static compileModelAtURL(error: URL): URL;
  static createWithModelWithContentsOfURLConfiguration(configuration: URL, error: MLModelConfiguration): MLModel;
  static createWithModelWithContentsOfURL(error: URL): MLModel;
  configuration: MLModelConfiguration;
  modelDescription: MLModelDescription;
  parameterValueForKey(error: MLParameterKey): any;
  prediction(from: any): any;
  prediction(from: any, options: MLPredictionOptions): any;
  predictionsFromBatch(error: any): any;
  predictions(from: any, options: MLPredictionOptions): any;
}

export class MLModelConfiguration extends NSObject {
  allowLowPrecisionAccumulationOnGPU: boolean;
  setAllowLowPrecisionAccumulationOnGPU(_: boolean);
  computeUnits: MLModelConfiguration.MLComputeUnits;
  setComputeUnits(_: MLModelConfiguration.MLComputeUnits);
  preferredMetalDevice: any;
  setPreferredMetalDevice(_: any);
}

export class MLModelDescription extends NSObject {
  inputDescriptionsByName: Map<string, MLFeatureDescription>;
  isUpdatable: boolean;
  metadata: Map<string, any>;
  outputDescriptionsByName: Map<string, MLFeatureDescription>;
  parameterDescriptionsByKey: Map<MLParameterKey, MLParameterDescription>;
  predictedFeatureName: string;
  predictedProbabilitiesName: string;
  trainingInputDescriptionsByName: Map<string, MLFeatureDescription>;
}

export class MLMultiArray extends NSObject {
  count: number;
  dataPointer: any;
  dataType: MLMultiArray.MLMultiArrayDataType;
  shape: number[];
  strides: number[];
  static createWithDataPointerWithShapeWithDataTypeWithStrides(shape: any, dataType: number[], strides: MLMultiArray.MLMultiArrayDataType, deallocator: number[], error?: (p1: any) => void): MLMultiArray;
  static createWithShape(dataType: number[], error: MLMultiArray.MLMultiArrayDataType): MLMultiArray;
  objectAtIndexedSubscript(_: number): number;
  objectForKeyedSubscript(_: number[]): number;
  setObject(_: number, atIndexedSubscript: number): void;
  setObject(_: number, forKeyedSubscript: number[]): void;
}

export class MLMultiArrayConstraint extends NSObject {
  dataType: MLMultiArray.MLMultiArrayDataType;
  shape: number[];
  shapeConstraint: MLMultiArrayShapeConstraint;
}

export class MLMultiArrayShapeConstraint extends NSObject {
  enumeratedShapes: number[][];
  sizeRangeForDimension: NSValue[];
  type: MLMultiArrayShapeConstraintType.MLMultiArrayShapeConstraintType;
}

export class MLNumericConstraint extends NSObject {
  enumeratedNumbers: Set<any>;
  maxNumber: number;
  minNumber: number;
}

export class MLParameterDescription extends NSObject {
  defaultValue: any;
  key: MLParameterKey;
  numericConstraint: MLNumericConstraint;
}

export class MLParameterKey extends MLKey {
  static beta1: MLParameterKey;
  static beta2: MLParameterKey;
  static biases: MLParameterKey;
  static epochs: MLParameterKey;
  static eps: MLParameterKey;
  static learningRate: MLParameterKey;
  static linkedModelFileName: MLParameterKey;
  static linkedModelSearchPath: MLParameterKey;
  static miniBatchSize: MLParameterKey;
  static momentum: MLParameterKey;
  static numberOfNeighbors: MLParameterKey;
  static seed: MLParameterKey;
  static shuffle: MLParameterKey;
  static weights: MLParameterKey;
  scopedTo(_: string): MLParameterKey;
}

export class MLPredictionOptions extends NSObject {
  usesCPUOnly: boolean;
  setUsesCPUOnly(_: boolean);
}

export class MLSequence extends NSObject {
  int64Values: number[];
  stringValues: string[];
  type: MLFeatureType.MLFeatureType;
}

export class MLSequenceConstraint extends NSObject {
  countRange: NSRange;
  valueDescription: MLFeatureDescription;
}

export class MLTask extends NSObject {
  error: Error;
  state: MLTask.MLTaskState;
  taskIdentifier: string;
  cancel(): void;
  resume(): void;
}

export class MLUpdateContext extends NSObject {
  event: MLUpdateProgressEvent.MLUpdateProgressEvent;
  metrics: Map<MLMetricKey, any>;
  model: MLModel;
  task: MLUpdateTask;
}

export class MLUpdateProgressHandlers extends NSObject {
  static createWithForEventsWithProgressHandlerWithCompletionHandler(_: MLUpdateProgressEvent.MLUpdateProgressEvent, progressHandler?: (p1: MLUpdateContext) => void, completionHandler?: (p1: MLUpdateContext) => void): MLUpdateProgressHandlers;
}

export class MLUpdateTask extends MLTask {
  static createWithUpdateTaskForModelAtURLTrainingDataWithConfigurationWithCompletionHandler(trainingData: URL, configuration: any, completionHandler?: MLModelConfiguration, error?: (p1: MLUpdateContext) => void): MLUpdateTask;
  static createWithUpdateTaskForModelAtURLTrainingDataWithConfigurationWithProgressHandlers(trainingData: URL, configuration: any, progressHandlers?: MLModelConfiguration, error?: MLUpdateProgressHandlers): MLUpdateTask;
  resumeWithParameters(_: Map<MLParameterKey, any>): void;
}

interface MLWritable {
  writeToURL(error: URL): boolean;
}

// export function CMAudioClockCreate(allocator: any, clockOut: any): number;

// export function CMAudioDeviceClockCreate(allocator: any, deviceUID: string, clockOut: any): number;

// export function CMAudioDeviceClockCreateFromAudioDeviceID(allocator: any, deviceID: number, clockOut: any): number;

// export function CMAudioDeviceClockGetAudioDevice(clock: any, deviceUIDOut: string, deviceIDOut: number, trackingDefaultDeviceOut: string | any): number;

// export function CMAudioDeviceClockSetAudioDeviceID(clock: any, deviceID: number): number;

// export function CMAudioDeviceClockSetAudioDeviceUID(clock: any, deviceUID: string): number;

// export function CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(allocator: any, audioFormatDescription: any, flavor: any, blockBufferOut: any): number;

// export function CMAudioFormatDescriptionCreate(allocator: any, asbd: AudioStreamBasicDescription, layoutSize: number, layout: AudioChannelLayout, magicCookieSize: number, magicCookie: any, extensions: Map<any, any>, formatDescriptionOut: any): number;

// export function CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer(allocator: any, soundDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

// export function CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData(allocator: any, soundDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

// export function CMAudioFormatDescriptionCreateSummary(allocator: any, formatDescriptionArray: any[], flags: number, formatDescriptionOut: any): number;

// export function CMAudioFormatDescriptionEqual(formatDescription: any, otherFormatDescription: any, equalityMask: number, equalityMaskOut: number): boolean;

// export function CMAudioFormatDescriptionGetChannelLayout(desc: any, sizeOut: number): AudioChannelLayout;

// export function CMAudioFormatDescriptionGetFormatList(desc: any, sizeOut: number): AudioFormatListItem;

// export function CMAudioFormatDescriptionGetMagicCookie(desc: any, sizeOut: number): any;

// export function CMAudioFormatDescriptionGetMostCompatibleFormat(desc: any): AudioFormatListItem;

// export function CMAudioFormatDescriptionGetRichestDecodableFormat(desc: any): AudioFormatListItem;

// export function CMAudioFormatDescriptionGetStreamBasicDescription(desc: any): AudioStreamBasicDescription;

// export function CMAudioSampleBufferCreateReadyWithPacketDescriptions(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any): number;

// export function CMAudioSampleBufferCreateWithPacketDescriptions(allocator: any, dataBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any): number;

// export function CMAudioSampleBufferCreateWithPacketDescriptionsAndMakeDataReadyHandler(allocator: any, dataBuffer: any, dataReady: boolean, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

// export function CMBlockBufferAccessDataBytes(theBuffer: any, offset: number, length: number, temporaryBlock: any, returnedPointerOut: string): number;

// export function CMBlockBufferAppendBufferReference(theBuffer: any, targetBBuf: any, offsetToData: number, dataLength: number, flags: number): number;

// export function CMBlockBufferAppendMemoryBlock(theBuffer: any, memoryBlock: any, blockLength: number, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number): number;

// export function CMBlockBufferAssureBlockMemory(theBuffer: any): number;

// export function CMBlockBufferCopyDataBytes(theSourceBuffer: any, offsetToData: number, dataLength: number, destination: any): number;

// export function CMBlockBufferCreateContiguous(structureAllocator: any, sourceBuffer: any, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

// export function CMBlockBufferCreateEmpty(structureAllocator: any, subBlockCapacity: number, flags: number, blockBufferOut: any): number;

// export function CMBlockBufferCreateWithBufferReference(structureAllocator: any, bufferReference: any, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

// export function CMBlockBufferCreateWithMemoryBlock(structureAllocator: any, memoryBlock: any, blockLength: number, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

// export function CMBlockBufferFillDataBytes(fillByte: number, destinationBuffer: any, offsetIntoDestination: number, dataLength: number): number;

// export function CMBlockBufferGetDataLength(theBuffer: any): number;

// export function CMBlockBufferGetDataPointer(theBuffer: any, offset: number, lengthAtOffsetOut: number, totalLengthOut: number, dataPointerOut: string): number;

// export function CMBlockBufferGetTypeID(): number;

// export function CMBlockBufferIsEmpty(theBuffer: any): boolean;

// export function CMBlockBufferIsRangeContiguous(theBuffer: any, offset: number, length: number): boolean;

// export function CMBlockBufferReplaceDataBytes(sourceBytes: any, destinationBuffer: any, offsetIntoDestination: number, dataLength: number): number;

// export function CMBufferQueueCallForEachBuffer(queue: any, callback: (p1: any, p2: any) => number, refcon: any): number;

// export function CMBufferQueueContainsEndOfData(queue: any): boolean;

// export function CMBufferQueueCreate(allocator: any, capacity: number, callbacks: CMBufferCallbacks, queueOut: any): number;

// export function CMBufferQueueCreateWithHandlers(allocator: any, capacity: number, handlers: CMBufferHandlers, queueOut: any): number;

// export function CMBufferQueueDequeueAndRetain(queue: any): any;

// export function CMBufferQueueDequeueIfDataReadyAndRetain(queue: any): any;

// export function CMBufferQueueEnqueue(queue: any, buf: any): number;

// export function CMBufferQueueGetBufferCount(queue: any): number;

// export function CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS(): CMBufferCallbacks;

// export function CMBufferQueueGetCallbacksForUnsortedSampleBuffers(): CMBufferCallbacks;

// export function CMBufferQueueGetDuration(queue: any): CMTime;

// export function CMBufferQueueGetEndPresentationTimeStamp(queue: any): CMTime;

// export function CMBufferQueueGetFirstDecodeTimeStamp(queue: any): CMTime;

// export function CMBufferQueueGetFirstPresentationTimeStamp(queue: any): CMTime;

// export function CMBufferQueueGetHead(queue: any): any;

// export function CMBufferQueueGetMaxPresentationTimeStamp(queue: any): CMTime;

// export function CMBufferQueueGetMinDecodeTimeStamp(queue: any): CMTime;

// export function CMBufferQueueGetMinPresentationTimeStamp(queue: any): CMTime;

// export function CMBufferQueueGetTotalSize(queue: any): number;

// export function CMBufferQueueGetTypeID(): number;

// export function CMBufferQueueInstallTrigger(queue: any, callback: (p1: any, p2: any) => void, refcon: any, condition: number, time: CMTime, triggerTokenOut: any): number;

// export function CMBufferQueueInstallTriggerHandler(queue: any, condition: number, time: CMTime, triggerTokenOut: any, handler: (p1: any) => void): number;

// export function CMBufferQueueInstallTriggerHandlerWithIntegerThreshold(queue: any, condition: number, threshold: number, triggerTokenOut: any, handler: (p1: any) => void): number;

// export function CMBufferQueueInstallTriggerWithIntegerThreshold(queue: any, callback: (p1: any, p2: any) => void, refcon: any, condition: number, threshold: number, triggerTokenOut: any): number;

// export function CMBufferQueueIsAtEndOfData(queue: any): boolean;

// export function CMBufferQueueIsEmpty(queue: any): boolean;

// export function CMBufferQueueMarkEndOfData(queue: any): number;

// export function CMBufferQueueRemoveTrigger(queue: any, triggerToken: any): number;

// export function CMBufferQueueReset(queue: any): number;

// export function CMBufferQueueResetWithCallback(queue: any, callback: (p1: any, p2: any) => void, refcon: any): number;

// export function CMBufferQueueSetValidationCallback(queue: any, callback: (p1: any, p2: any, p3: any) => number, refcon: any): number;

// export function CMBufferQueueSetValidationHandler(queue: any, handler: (p1: any, p2: any) => number): number;

// export function CMBufferQueueTestTrigger(queue: any, triggerToken: any): boolean;

// export function CMClockConvertHostTimeToSystemUnits(hostTime: CMTime): number;

// export function CMClockGetAnchorTime(clock: any, clockTimeOut: CMTime, referenceClockTimeOut: CMTime): number;

// export function CMClockGetHostTimeClock(): any;

// export function CMClockGetTime(clock: any): CMTime;

// export function CMClockGetTypeID(): number;

// export function CMClockInvalidate(clock: any): void;

// export function CMClockMakeHostTimeFromSystemUnits(hostTime: number): CMTime;

// export function CMClockMightDrift(clock: any, otherClock: any): boolean;

// export function CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(allocator: any, closedCaptionFormatDescription: any, flavor: any, blockBufferOut: any): number;

// export function CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(allocator: any, closedCaptionDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

// export function CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData(allocator: any, closedCaptionDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

// export function CMCopyDictionaryOfAttachments(allocator: any, target: any, attachmentMode: number): Map<any, any>;

// export function CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(soundDescriptionBlockBuffer: any, flavor: any): boolean;

// export function CMFormatDescriptionCreate(allocator: any, mediaType: number, mediaSubType: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

// export function CMFormatDescriptionEqual(formatDescription: any, otherFormatDescription: any): boolean;

// export function CMFormatDescriptionEqualIgnoringExtensionKeys(formatDescription: any, otherFormatDescription: any, formatDescriptionExtensionKeysToIgnore: any, sampleDescriptionExtensionAtomKeysToIgnore: any): boolean;

// export function CMFormatDescriptionGetExtension(desc: any, extensionKey: string): any;

// export function CMFormatDescriptionGetExtensions(desc: any): Map<any, any>;

// export function CMFormatDescriptionGetMediaSubType(desc: any): number;

// export function CMFormatDescriptionGetMediaType(desc: any): number;

// export function CMFormatDescriptionGetTypeID(): number;

// export function CMGetAttachment(target: any, key: string, attachmentModeOut: number): any;

// export function CMMemoryPoolCreate(options: Map<any, any>): any;

// export function CMMemoryPoolFlush(pool: any): void;

// export function CMMemoryPoolGetAllocator(pool: any): any;

// export function CMMemoryPoolGetTypeID(): number;

// export function CMMemoryPoolInvalidate(pool: any): void;

// export function CMMetadataCreateIdentifierForKeyAndKeySpace(allocator: any, key: any, keySpace: string, identifierOut: string): number;

// export function CMMetadataCreateKeyFromIdentifier(allocator: any, identifier: string, keyOut: any): number;

// export function CMMetadataCreateKeyFromIdentifierAsCFData(allocator: any, identifier: string, keyOut: Data): number;

// export function CMMetadataCreateKeySpaceFromIdentifier(allocator: any, identifier: string, keySpaceOut: string): number;

// export function CMMetadataDataTypeRegistryDataTypeConformsToDataType(dataType: string, conformsToDataType: string): boolean;

// export function CMMetadataDataTypeRegistryDataTypeIsBaseDataType(dataType: string): boolean;

// export function CMMetadataDataTypeRegistryDataTypeIsRegistered(dataType: string): boolean;

// export function CMMetadataDataTypeRegistryGetBaseDataTypeForConformingDataType(dataType: string): string;

// export function CMMetadataDataTypeRegistryGetBaseDataTypes(): any[];

// export function CMMetadataDataTypeRegistryGetConformingDataTypes(dataType: string): any[];

// export function CMMetadataDataTypeRegistryGetDataTypeDescription(dataType: string): string;

// export function CMMetadataDataTypeRegistryRegisterDataType(dataType: string, description: string, conformingDataTypes: any[]): number;

// export function CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(allocator: any, metadataFormatDescription: any, flavor: any, blockBufferOut: any): number;

// export function CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions(allocator: any, sourceDescription: any, otherSourceDescription: any, formatDescriptionOut: any): number;

// export function CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(allocator: any, metadataDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

// export function CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData(allocator: any, metadataDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

// export function CMMetadataFormatDescriptionCreateWithKeys(allocator: any, metadataType: number, keys: any[], formatDescriptionOut: any): number;

// export function CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications(allocator: any, sourceDescription: any, metadataSpecifications: any[], formatDescriptionOut: any): number;

// export function CMMetadataFormatDescriptionCreateWithMetadataSpecifications(allocator: any, metadataType: number, metadataSpecifications: any[], formatDescriptionOut: any): number;

// export function CMMetadataFormatDescriptionGetIdentifiers(desc: any): any[];

// export function CMMetadataFormatDescriptionGetKeyWithLocalID(desc: any, localKeyID: number): Map<any, any>;

// export function CMMuxedFormatDescriptionCreate(allocator: any, muxType: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

// export function CMPropagateAttachments(source: any, destination: any): void;

// export function CMRemoveAllAttachments(target: any): void;

// export function CMRemoveAttachment(target: any, key: string): void;

// export function CMSampleBufferCallBlockForEachSample(sbuf: any, handler: (p1: any, p2: number) => number): number;

// export function CMSampleBufferCallForEachSample(sbuf: any, callback: (p1: any, p2: number, p3: any) => number, refcon: any): number;

// export function CMSampleBufferCopyPCMDataIntoAudioBufferList(sbuf: any, frameOffset: number, numFrames: number, bufferList: AudioBufferList): number;

// export function CMSampleBufferCopySampleBufferForRange(allocator: any, sbuf: any, sampleRange: CFRange, sampleBufferOut: any): number;

// export function CMSampleBufferCreate(allocator: any, dataBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any): number;

// export function CMSampleBufferCreateCopy(allocator: any, sbuf: any, sampleBufferOut: any): number;

// export function CMSampleBufferCreateCopyWithNewTiming(allocator: any, originalSBuf: any, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, sampleBufferOut: any): number;

// export function CMSampleBufferCreateForImageBuffer(allocator: any, imageBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any): number;

// export function CMSampleBufferCreateForImageBufferWithMakeDataReadyHandler(allocator: any, imageBuffer: any, dataReady: boolean, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

// export function CMSampleBufferCreateReady(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any): number;

// export function CMSampleBufferCreateReadyWithImageBuffer(allocator: any, imageBuffer: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any): number;

// export function CMSampleBufferCreateWithMakeDataReadyHandler(allocator: any, dataBuffer: any, dataReady: boolean, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

// export function CMSampleBufferDataIsReady(sbuf: any): boolean;

// export function CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(sbuf: any, bufferListSizeNeededOut: number, bufferListOut: AudioBufferList, bufferListSize: number, blockBufferStructureAllocator: any, blockBufferBlockAllocator: any, flags: number, blockBufferOut: any): number;

// export function CMSampleBufferGetAudioStreamPacketDescriptions(sbuf: any, packetDescriptionsSize: number, packetDescriptionsOut: AudioStreamPacketDescription, packetDescriptionsSizeNeededOut: number): number;

// export function CMSampleBufferGetAudioStreamPacketDescriptionsPtr(sbuf: any, packetDescriptionsPointerOut: AudioStreamPacketDescription, packetDescriptionsSizeOut: number): number;

// export function CMSampleBufferGetDataBuffer(sbuf: any): any;

// export function CMSampleBufferGetDecodeTimeStamp(sbuf: any): CMTime;

// export function CMSampleBufferGetDuration(sbuf: any): CMTime;

// export function CMSampleBufferGetFormatDescription(sbuf: any): any;

// export function CMSampleBufferGetImageBuffer(sbuf: any): any;

// export function CMSampleBufferGetNumSamples(sbuf: any): number;

// export function CMSampleBufferGetOutputDecodeTimeStamp(sbuf: any): CMTime;

// export function CMSampleBufferGetOutputDuration(sbuf: any): CMTime;

// export function CMSampleBufferGetOutputPresentationTimeStamp(sbuf: any): CMTime;

// export function CMSampleBufferGetOutputSampleTimingInfoArray(sbuf: any, timingArrayEntries: number, timingArrayOut: CMSampleTimingInfo, timingArrayEntriesNeededOut: number): number;

// export function CMSampleBufferGetPresentationTimeStamp(sbuf: any): CMTime;

// export function CMSampleBufferGetSampleAttachmentsArray(sbuf: any, createIfNecessary: boolean): any[];

// export function CMSampleBufferGetSampleSize(sbuf: any, sampleIndex: number): number;

// export function CMSampleBufferGetSampleSizeArray(sbuf: any, sizeArrayEntries: number, sizeArrayOut: number, sizeArrayEntriesNeededOut: number): number;

// export function CMSampleBufferGetSampleTimingInfo(sbuf: any, sampleIndex: number, timingInfoOut: CMSampleTimingInfo): number;

// export function CMSampleBufferGetSampleTimingInfoArray(sbuf: any, numSampleTimingEntries: number, timingArrayOut: CMSampleTimingInfo, timingArrayEntriesNeededOut: number): number;

// export function CMSampleBufferGetTotalSampleSize(sbuf: any): number;

// export function CMSampleBufferGetTypeID(): number;

// export function CMSampleBufferHasDataFailed(sbuf: any, statusOut: number): boolean;

// export function CMSampleBufferInvalidate(sbuf: any): number;

// export function CMSampleBufferIsValid(sbuf: any): boolean;

// export function CMSampleBufferMakeDataReady(sbuf: any): number;

// export function CMSampleBufferSetDataBuffer(sbuf: any, dataBuffer: any): number;

// export function CMSampleBufferSetDataBufferFromAudioBufferList(sbuf: any, blockBufferStructureAllocator: any, blockBufferBlockAllocator: any, flags: number, bufferList: AudioBufferList): number;

// export function CMSampleBufferSetDataFailed(sbuf: any, status: number): number;

// export function CMSampleBufferSetDataReady(sbuf: any): number;

// export function CMSampleBufferSetInvalidateCallback(sbuf: any, invalidateCallback: (p1: any, p2: number) => void, invalidateRefCon: number): number;

// export function CMSampleBufferSetInvalidateHandler(sbuf: any, invalidateHandler: (p1: any) => void): number;

// export function CMSampleBufferSetOutputPresentationTimeStamp(sbuf: any, outputPresentationTimeStamp: CMTime): number;

// export function CMSampleBufferTrackDataReadiness(sbuf: any, sampleBufferToTrack: any): number;

// export function CMSetAttachment(target: any, key: string, value: any, attachmentMode: number): void;

// export function CMSetAttachments(target: any, theAttachments: Map<any, any>, attachmentMode: number): void;

// export function CMSimpleQueueCreate(allocator: any, capacity: number, queueOut: any): number;

// export function CMSimpleQueueDequeue(queue: any): any;

// export function CMSimpleQueueEnqueue(queue: any, element: any): number;

// export function CMSimpleQueueGetCapacity(queue: any): number;

// export function CMSimpleQueueGetCount(queue: any): number;

// export function CMSimpleQueueGetHead(queue: any): any;

// export function CMSimpleQueueGetTypeID(): number;

// export function CMSimpleQueueReset(queue: any): number;

// export function CMSwapBigEndianClosedCaptionDescriptionToHost(closedCaptionDescriptionData: string | any, closedCaptionDescriptionSize: number): number;

// export function CMSwapBigEndianImageDescriptionToHost(imageDescriptionData: string | any, imageDescriptionSize: number): number;

// export function CMSwapBigEndianMetadataDescriptionToHost(metadataDescriptionData: string | any, metadataDescriptionSize: number): number;

// export function CMSwapBigEndianSoundDescriptionToHost(soundDescriptionData: string | any, soundDescriptionSize: number): number;

// export function CMSwapBigEndianTextDescriptionToHost(textDescriptionData: string | any, textDescriptionSize: number): number;

// export function CMSwapBigEndianTimeCodeDescriptionToHost(timeCodeDescriptionData: string | any, timeCodeDescriptionSize: number): number;

// export function CMSwapHostEndianClosedCaptionDescriptionToBig(closedCaptionDescriptionData: string | any, closedCaptionDescriptionSize: number): number;

// export function CMSwapHostEndianImageDescriptionToBig(imageDescriptionData: string | any, imageDescriptionSize: number): number;

// export function CMSwapHostEndianMetadataDescriptionToBig(metadataDescriptionData: string | any, metadataDescriptionSize: number): number;

// export function CMSwapHostEndianSoundDescriptionToBig(soundDescriptionData: string | any, soundDescriptionSize: number): number;

// export function CMSwapHostEndianTextDescriptionToBig(textDescriptionData: string | any, textDescriptionSize: number): number;

// export function CMSwapHostEndianTimeCodeDescriptionToBig(timeCodeDescriptionData: string | any, timeCodeDescriptionSize: number): number;

// export function CMSyncConvertTime(time: CMTime, fromClockOrTimebase: any, toClockOrTimebase: any): CMTime;

// export function CMSyncGetRelativeRate(ofClockOrTimebase: any, relativeToClockOrTimebase: any): number;

// export function CMSyncGetRelativeRateAndAnchorTime(ofClockOrTimebase: any, relativeToClockOrTimebase: any, outRelativeRate: number, outOfClockOrTimebaseAnchorTime: CMTime, outRelativeToClockOrTimebaseAnchorTime: CMTime): number;

// export function CMSyncGetTime(clockOrTimebase: any): CMTime;

// export function CMSyncMightDrift(clockOrTimebase1: any, clockOrTimebase2: any): boolean;

// export function CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(allocator: any, textFormatDescription: any, flavor: any, blockBufferOut: any): number;

// export function CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(allocator: any, textDescriptionBlockBuffer: any, flavor: any, mediaType: number, formatDescriptionOut: any): number;

// export function CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData(allocator: any, textDescriptionData: string | any, size: number, flavor: any, mediaType: number, formatDescriptionOut: any): number;

// export function CMTextFormatDescriptionGetDefaultStyle(desc: any, localFontIDOut: number, boldOut: string | any, italicOut: string | any, underlineOut: string | any, fontSizeOut: number, colorComponentsOut: number): number;

// export function CMTextFormatDescriptionGetDefaultTextBox(desc: any, originIsAtTopLeft: boolean, heightOfTextTrack: number, defaultTextBoxOut: CGRect): number;

// export function CMTextFormatDescriptionGetDisplayFlags(desc: any, displayFlagsOut: number): number;

// export function CMTextFormatDescriptionGetFontName(desc: any, localFontID: number, fontNameOut: string): number;

// export function CMTextFormatDescriptionGetJustification(desc: any, horizontaJustificationlOut: number, verticalJustificationOut: number): number;

// export function CMTimeAbsoluteValue(time: CMTime): CMTime;

// export function CMTimeAdd(lhs: CMTime, rhs: CMTime): CMTime;

// export function CMTimeClampToRange(time: CMTime, range: CMTimeRange): CMTime;

// export function CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(allocator: any, timeCodeFormatDescription: any, flavor: any, blockBufferOut: any): number;

// export function CMTimeCodeFormatDescriptionCreate(allocator: any, timeCodeFormatType: number, frameDuration: CMTime, frameQuanta: number, flags: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

// export function CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(allocator: any, timeCodeDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

// export function CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData(allocator: any, timeCodeDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

// export function CMTimeCodeFormatDescriptionGetFrameDuration(timeCodeFormatDescription: any): CMTime;

// export function CMTimeCodeFormatDescriptionGetFrameQuanta(timeCodeFormatDescription: any): number;

// export function CMTimeCodeFormatDescriptionGetTimeCodeFlags(desc: any): number;

// export function CMTimeCompare(time1: CMTime, time2: CMTime): number;

// export function CMTimeConvertScale(time: CMTime, newTimescale: number, method: CMTime.CMTimeRoundingMethod): CMTime;

// export function CMTimeCopyAsDictionary(time: CMTime, allocator: any): Map<any, any>;

// export function CMTimeCopyDescription(allocator: any, time: CMTime): string;

// export function CMTimeFoldIntoRange(time: CMTime, foldRange: CMTimeRange): CMTime;

// export function CMTimeGetSeconds(time: CMTime): number;

// export function CMTimeMake(value: number, timescale: number): CMTime;

// export function CMTimeMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTime;

// export function CMTimeMakeWithEpoch(value: number, timescale: number, epoch: number): CMTime;

// export function CMTimeMakeWithSeconds(seconds: number, preferredTimescale: number): CMTime;

// export function CMTimeMapDurationFromRangeToRange(dur: CMTime, fromRange: CMTimeRange, toRange: CMTimeRange): CMTime;

// export function CMTimeMapTimeFromRangeToRange(t: CMTime, fromRange: CMTimeRange, toRange: CMTimeRange): CMTime;

// export function CMTimeMappingCopyAsDictionary(mapping: CMTimeMapping, allocator: any): Map<any, any>;

// export function CMTimeMappingCopyDescription(allocator: any, mapping: CMTimeMapping): string;

// export function CMTimeMappingMake(source: CMTimeRange, target: CMTimeRange): CMTimeMapping;

// export function CMTimeMappingMakeEmpty(target: CMTimeRange): CMTimeMapping;

// export function CMTimeMappingMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTimeMapping;

// export function CMTimeMappingShow(mapping: CMTimeMapping): void;

// export function CMTimeMaximum(time1: CMTime, time2: CMTime): CMTime;

// export function CMTimeMinimum(time1: CMTime, time2: CMTime): CMTime;

// export function CMTimeMultiply(time: CMTime, multiplier: number): CMTime;

// export function CMTimeMultiplyByFloat64(time: CMTime, multiplier: number): CMTime;

// export function CMTimeMultiplyByRatio(time: CMTime, multiplier: number, divisor: number): CMTime;

// export function CMTimeRangeContainsTime(range: CMTimeRange, time: CMTime): boolean;

// export function CMTimeRangeContainsTimeRange(range: CMTimeRange, otherRange: CMTimeRange): boolean;

// export function CMTimeRangeCopyAsDictionary(range: CMTimeRange, allocator: any): Map<any, any>;

// export function CMTimeRangeCopyDescription(allocator: any, range: CMTimeRange): string;

// export function CMTimeRangeEqual(range1: CMTimeRange, range2: CMTimeRange): boolean;

// export function CMTimeRangeFromTimeToTime(start: CMTime, end: CMTime): CMTimeRange;

// export function CMTimeRangeGetEnd(range: CMTimeRange): CMTime;

// export function CMTimeRangeGetIntersection(range: CMTimeRange, otherRange: CMTimeRange): CMTimeRange;

// export function CMTimeRangeGetUnion(range: CMTimeRange, otherRange: CMTimeRange): CMTimeRange;

// export function CMTimeRangeMake(start: CMTime, duration: CMTime): CMTimeRange;

// export function CMTimeRangeMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTimeRange;

// export function CMTimeRangeShow(range: CMTimeRange): void;

// export function CMTimeShow(time: CMTime): void;

// export function CMTimeSubtract(lhs: CMTime, rhs: CMTime): CMTime;

// export function CMTimebaseAddTimer(timebase: any, timer: Timer, runloop: any): number;

// export function CMTimebaseAddTimerDispatchSource(timebase: any, timerSource: NSObject): number;

// export function CMTimebaseCopyMaster(timebase: any): any;

// export function CMTimebaseCopyMasterClock(timebase: any): any;

// export function CMTimebaseCopyMasterTimebase(timebase: any): any;

// export function CMTimebaseCopyUltimateMasterClock(timebase: any): any;

// export function CMTimebaseCreateWithMasterClock(allocator: any, masterClock: any, timebaseOut: any): number;

// export function CMTimebaseCreateWithMasterTimebase(allocator: any, masterTimebase: any, timebaseOut: any): number;

// export function CMTimebaseGetEffectiveRate(timebase: any): number;

// export function CMTimebaseGetRate(timebase: any): number;

// export function CMTimebaseGetTime(timebase: any): CMTime;

// export function CMTimebaseGetTimeAndRate(timebase: any, timeOut: CMTime, rateOut: number): number;

// export function CMTimebaseGetTimeWithTimeScale(timebase: any, timescale: number, method: CMTime.CMTimeRoundingMethod): CMTime;

// export function CMTimebaseGetTypeID(): number;

// export function CMTimebaseNotificationBarrier(timebase: any): number;

// export function CMTimebaseRemoveTimer(timebase: any, timer: Timer): number;

// export function CMTimebaseRemoveTimerDispatchSource(timebase: any, timerSource: NSObject): number;

// export function CMTimebaseSetAnchorTime(timebase: any, timebaseTime: CMTime, immediateMasterTime: CMTime): number;

// export function CMTimebaseSetMasterClock(timebase: any, newMasterClock: any): number;

// export function CMTimebaseSetMasterTimebase(timebase: any, newMasterTimebase: any): number;

// export function CMTimebaseSetRate(timebase: any, rate: number): number;

// export function CMTimebaseSetRateAndAnchorTime(timebase: any, rate: number, timebaseTime: CMTime, immediateMasterTime: CMTime): number;

// export function CMTimebaseSetTime(timebase: any, time: CMTime): number;

// export function CMTimebaseSetTimerDispatchSourceNextFireTime(timebase: any, timerSource: NSObject, fireTime: CMTime, flags: number): number;

// export function CMTimebaseSetTimerDispatchSourceToFireImmediately(timebase: any, timerSource: NSObject): number;

// export function CMTimebaseSetTimerNextFireTime(timebase: any, timer: Timer, fireTime: CMTime, flags: number): number;

// export function CMTimebaseSetTimerToFireImmediately(timebase: any, timer: Timer): number;

// export function CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(allocator: any, videoFormatDescription: any, stringEncoding: number, flavor: any, blockBufferOut: any): number;

// export function CMVideoFormatDescriptionCreate(allocator: any, codecType: number, width: number, height: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

// export function CMVideoFormatDescriptionCreateForImageBuffer(allocator: any, imageBuffer: any, formatDescriptionOut: any): number;

// export function CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(allocator: any, imageDescriptionBlockBuffer: any, stringEncoding: number, flavor: any, formatDescriptionOut: any): number;

// export function CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(allocator: any, imageDescriptionData: string | any, size: number, stringEncoding: number, flavor: any, formatDescriptionOut: any): number;

// export function CMVideoFormatDescriptionCreateFromH264ParameterSets(allocator: any, parameterSetCount: number, parameterSetPointers: string, parameterSetSizes: number, NALUnitHeaderLength: number, formatDescriptionOut: any): number;

// export function CMVideoFormatDescriptionCreateFromHEVCParameterSets(allocator: any, parameterSetCount: number, parameterSetPointers: string, parameterSetSizes: number, NALUnitHeaderLength: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

// export function CMVideoFormatDescriptionGetCleanAperture(videoDesc: any, originIsAtTopLeft: boolean): CGRect;

// export function CMVideoFormatDescriptionGetDimensions(videoDesc: any): CMVideoDimensions;

// export function CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers(): any[];

// export function CMVideoFormatDescriptionGetH264ParameterSetAtIndex(videoDesc: any, parameterSetIndex: number, parameterSetPointerOut: string, parameterSetSizeOut: number, parameterSetCountOut: number, NALUnitHeaderLengthOut: number): number;

// export function CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(videoDesc: any, parameterSetIndex: number, parameterSetPointerOut: string, parameterSetSizeOut: number, parameterSetCountOut: number, NALUnitHeaderLengthOut: number): number;

// export function CMVideoFormatDescriptionGetPresentationDimensions(videoDesc: any, usePixelAspectRatio: boolean, useCleanAperture: boolean): CGSize;

// export function CMVideoFormatDescriptionMatchesImageBuffer(desc: any, imageBuffer: any): boolean;

// export function CMIODeviceProcessAVCCommand(deviceID: number, ioAVCCommand: CMIODeviceAVCCommand): number;

// export function CMIODeviceProcessRS422Command(deviceID: number, ioRS422Command: CMIODeviceRS422Command): number;

// export function CMIODeviceStartStream(deviceID: number, streamID: number): number;

// export function CMIODeviceStopStream(deviceID: number, streamID: number): number;

// export function CMIOObjectAddPropertyListener(objectID: number, address: CMIOObjectPropertyAddress, listener: (p1: number, p2: number, p3: CMIOObjectPropertyAddress, p4: any) => number, clientData: any): number;

// export function CMIOObjectAddPropertyListenerBlock(objectID: number, address: CMIOObjectPropertyAddress, dispatchQueue: NSObject, listener: (p1: number, p2: CMIOObjectPropertyAddress) => void): number;

// export function CMIOObjectCreate(owningPlugIn: CMIOHardwarePlugInInterface, owningObjectID: number, classID: number, objectID: number): number;

// export function CMIOObjectGetPropertyData(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number, dataUsed: number, data: any): number;

// export function CMIOObjectGetPropertyDataSize(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number): number;

// export function CMIOObjectHasProperty(objectID: number, address: CMIOObjectPropertyAddress): boolean;

// export function CMIOObjectIsPropertySettable(objectID: number, address: CMIOObjectPropertyAddress, isSettable: string | any): number;

// export function CMIOObjectPropertiesChanged(owningPlugIn: CMIOHardwarePlugInInterface, objectID: number, numberAddresses: number, addresses: CMIOObjectPropertyAddress): number;

// export function CMIOObjectRemovePropertyListener(objectID: number, address: CMIOObjectPropertyAddress, listener: (p1: number, p2: number, p3: CMIOObjectPropertyAddress, p4: any) => number, clientData: any): number;

// export function CMIOObjectRemovePropertyListenerBlock(objectID: number, address: CMIOObjectPropertyAddress, dispatchQueue: NSObject, listener: (p1: number, p2: CMIOObjectPropertyAddress) => void): number;

// export function CMIOObjectSetPropertyData(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number, data: any): number;

// export function CMIOObjectShow(objectID: number): void;

// export function CMIOObjectsPublishedAndDied(owningPlugIn: CMIOHardwarePlugInInterface, owningObjectID: number, numberPublishedCMIOObjects: number, publishedCMIOObjects: number, numberDeadCMIOObjects: number, deadCMIOObjects: number): number;

// export function CMIOSampleBufferCopyNonRequiredAttachments(sourceSBuf: any, destSBuf: any, attachmentMode: number): number;

// export function CMIOSampleBufferCopySampleAttachments(sourceSBuf: any, destSBuf: any): number;

// export function CMIOSampleBufferCreate(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

// export function CMIOSampleBufferCreateForImageBuffer(allocator: any, imageBuffer: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

// export function CMIOSampleBufferCreateNoDataMarker(allocator: any, noDataEvent: number, formatDescription: any, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

// export function CMIOSampleBufferGetDiscontinuityFlags(sbuf: any): number;

// export function CMIOSampleBufferGetSequenceNumber(sbuf: any): number;

// export function CMIOSampleBufferSetDiscontinuityFlags(allocator: any, sbuf: any, discontinuityFlags: number): void;

// export function CMIOSampleBufferSetSequenceNumber(allocator: any, sbuf: any, sequenceNumber: number): void;

// export function CMIOStreamClockConvertHostTimeToDeviceTime(hostTime: number, clock: any): CMTime;

// export function CMIOStreamClockCreate(allocator: any, clockName: string, sourceIdentifier: any, getTimeCallMinimumInterval: CMTime, numberOfEventsForRateSmoothing: number, numberOfAveragesForRateSmoothing: number, clock: any): number;

// export function CMIOStreamClockInvalidate(clock: any): number;

// export function CMIOStreamClockPostTimingEvent(eventTime: CMTime, hostTime: number, resynchronize: boolean, clock: any): number;

// export function CMIOStreamCopyBufferQueue(streamID: number, queueAlteredProc: (p1: number, p2: any, p3: any) => void, queueAlteredRefCon: any, queue: any): number;

// export function CMIOStreamDeckCueTo(streamID: number, frameNumber: number, playOnCue: boolean): number;

// export function CMIOStreamDeckJog(streamID: number, speed: number): number;

// export function CMIOStreamDeckPlay(streamID: number): number;

// export function CMIOStreamDeckStop(streamID: number): number;

export class CMAccelerometerData extends CMLogItem {
  acceleration: CMAcceleration;
}

export class CMAltimeter extends NSObject {
  static isRelativeAltitudeAvailable(): boolean;
  startRelativeAltitudeUpdatesToQueue(_: OperationQueue, withHandler: (p1: CMAltitudeData, p2: Error) => void): void;
  stopRelativeAltitudeUpdates(): void;
}

export class CMAltitudeData extends CMLogItem {
  pressure: number;
  relativeAltitude: number;
}

export class CMAttitude extends NSObject {
  pitch: number;
  quaternion: CMQuaternion;
  roll: number;
  rotationMatrix: CMRotationMatrix;
  yaw: number;
  multiplyByInverseOfAttitude(_: CMAttitude): void;
}

export class CMDeviceMotion extends CMLogItem {
  attitude: CMAttitude;
  gravity: CMAcceleration;
  heading: number;
  magneticField: CMCalibratedMagneticField;
  rotationRate: CMRotationRate;
  userAcceleration: CMAcceleration;
}

export class CMDyskineticSymptomResult extends NSObject {
  endDate: Date;
  percentLikely: number;
  percentUnlikely: number;
  startDate: Date;
}

export class CMGyroData extends CMLogItem {
  rotationRate: CMRotationRate;
}

export class CMLogItem extends NSObject {
  timestamp: number;
}

export class CMMagnetometerData extends CMLogItem {
  magneticField: CMMagneticField;
}

export class CMMotionActivity extends CMLogItem {
  automotive: boolean;
  confidence: CMMotionActivity.CMMotionActivityConfidence;
  running: boolean;
  startDate: Date;
  stationary: boolean;
  unknown: boolean;
  walking: boolean;
}

export class CMMotionActivityManager extends NSObject {
  static isActivityAvailable(): boolean;
  queryActivityStartingFromDate(_: Date, toDate: Date, toQueue: OperationQueue, withHandler: (p1: CMMotionActivity[], p2: Error) => void): void;
  startActivityUpdatesToQueue(_: OperationQueue, withHandler: (p1: CMMotionActivity) => void): void;
  stopActivityUpdates(): void;
}

export class CMMotionManager extends NSObject {
  isAccelerometerActive: boolean;
  isAccelerometerAvailable: boolean;
  accelerometerData: CMAccelerometerData;
  accelerometerUpdateInterval: number;
  setAccelerometerUpdateInterval(_: number);
  deviceMotion: CMDeviceMotion;
  isDeviceMotionActive: boolean;
  isDeviceMotionAvailable: boolean;
  deviceMotionUpdateInterval: number;
  setDeviceMotionUpdateInterval(_: number);
  isGyroActive: boolean;
  isGyroAvailable: boolean;
  gyroData: CMGyroData;
  gyroUpdateInterval: number;
  setGyroUpdateInterval(_: number);
  startAccelerometerUpdates(): void;
  startAccelerometerUpdatesToQueue(_: OperationQueue, withHandler: (p1: CMAccelerometerData, p2: Error) => void): void;
  startDeviceMotionUpdates(): void;
  startDeviceMotionUpdatesToQueue(_: OperationQueue, withHandler: (p1: CMDeviceMotion, p2: Error) => void): void;
  startGyroUpdates(): void;
  startGyroUpdatesToQueue(_: OperationQueue, withHandler: (p1: CMGyroData, p2: Error) => void): void;
  stopAccelerometerUpdates(): void;
  stopDeviceMotionUpdates(): void;
  stopGyroUpdates(): void;
}

export class CMMovementDisorderManager extends NSObject {
  static authorizationStatus(): CMAuthorization.CMAuthorizationStatus;
  static isAvailable(): boolean;
  lastProcessedDate(): Date;
  monitorKinesiasExpirationDate(): Date;
  monitorKinesiasForDuration(_: number): void;
  queryDyskineticSymptomFromDate(_: Date, toDate: Date, withHandler: (p1: CMDyskineticSymptomResult[], p2: Error) => void): void;
  queryTremorFromDate(_: Date, toDate: Date, withHandler: (p1: CMTremorResult[], p2: Error) => void): void;
}

export class CMPedometer extends NSObject {
  static isDistanceAvailable(): boolean;
  static isFloorCountingAvailable(): boolean;
  static isPaceAvailable(): boolean;
  static isStepCountingAvailable(): boolean;
  queryPedometerDataFromDate(_: Date, toDate: Date, withHandler: (p1: CMPedometerData, p2: Error) => void): void;
  startPedometerUpdatesFromDate(_: Date, withHandler: (p1: CMPedometerData, p2: Error) => void): void;
  stopPedometerUpdates(): void;
}

export class CMPedometerData extends NSObject {
  averageActivePace: number;
  currentCadence: number;
  currentPace: number;
  distance: number;
  endDate: Date;
  floorsAscended: number;
  floorsDescended: number;
  numberOfSteps: number;
  startDate: Date;
}

export class CMPedometerEvent extends NSObject {
  date: Date;
  type: CMPedometer.CMPedometerEventType;
}

export class CMRecordedAccelerometerData extends CMAccelerometerData {
  identifier: number;
  startDate: Date;
}

export class CMSensorDataList extends NSObject {
}

export class CMSensorRecorder extends NSObject {
  static isAccelerometerRecordingAvailable(): boolean;
  static isAuthorizedForRecording(): boolean;
  accelerometerDataFromDate(_: Date, toDate: Date): CMSensorDataList;
  recordAccelerometerForDuration(_: number): void;
}

export class CMStepCounter extends NSObject {
  static isStepCountingAvailable(): boolean;
  queryStepCountStartingFrom(_: Date, to: Date, toQueue: OperationQueue, withHandler: (p1: number, p2: Error) => void): void;
  startStepCountingUpdatesToQueue(_: OperationQueue, updateOn: number, withHandler: (p1: number, p2: Date, p3: Error) => void): void;
  stopStepCountingUpdates(): void;
}

export class CMTremorResult extends NSObject {
  endDate: Date;
  percentMild: number;
  percentModerate: number;
  percentNone: number;
  percentSlight: number;
  percentStrong: number;
  percentUnknown: number;
  startDate: Date;
}

// export function AECallObjectAccessor(desiredClass: number, containerToken: AEDesc, containerClass: number, keyForm: number, keyData: AEDesc, token: AEDesc): number;

// export function AECheckIsRecord(theDesc: AEDesc): boolean;

// export function AECoerceDesc(theAEDesc: AEDesc, toType: number, result: AEDesc): number;

// export function AECoercePtr(typeCode: number, dataPtr: any, dataSize: number, toType: number, result: AEDesc): number;

// export function AECompareDesc(desc1: AEDesc, desc2: AEDesc, resultP: string | any): number;

// export function AECountItems(theAEDescList: AEDesc, theCount: number): number;

// export function AECreateAppleEvent(theAEEventClass: number, theAEEventID: number, target: AEDesc, returnID: number, transactionID: number, result: AEDesc): number;

// export function AECreateDesc(typeCode: number, dataPtr: any, dataSize: number, result: AEDesc): number;

// export function AECreateDescFromExternalPtr(descriptorType: number, dataPtr: any, dataLength: number, disposeCallback: (p1: any, p2: number, p3: any) => void, disposeRefcon: any, theDesc: AEDesc): number;

// export function AECreateList(factoringPtr: any, factoredSize: number, isRecord: boolean, resultList: AEDesc): number;

// export function AECreateRemoteProcessResolver(allocator: any, url: URL): any;

// export function AEDecodeMessage(header: mach_msg_header_t, event: AEDesc, reply: AEDesc): number;

// export function AEDeleteItem(theAEDescList: AEDesc, index: number): number;

// export function AEDeleteParam(theAppleEvent: AEDesc, theAEKeyword: number): number;

// export function AEDeterminePermissionToAutomateTarget(target: AEDesc, theAEEventClass: number, theAEEventID: number, askUserIfNeeded: boolean): number;

// export function AEDisposeDesc(theAEDesc: AEDesc): number;

// export function AEDisposeRemoteProcessResolver(ref: any): void;

// export function AEDisposeToken(theToken: AEDesc): number;

// export function AEDuplicateDesc(theAEDesc: AEDesc, result: AEDesc): number;

// export function AEFlattenDesc(theAEDesc: AEDesc, buffer: string | any, bufferSize: number, actualSize: number): number;

// export function AEGetAttributeDesc(theAppleEvent: AEDesc, theAEKeyword: number, desiredType: number, result: AEDesc): number;

// export function AEGetAttributePtr(theAppleEvent: AEDesc, theAEKeyword: number, desiredType: number, typeCode: number, dataPtr: any, maximumSize: number, actualSize: number): number;

// export function AEGetCoercionHandler(fromType: number, toType: number, handler: (p1: AEDesc, p2: number, p3: any, p4: AEDesc) => number, handlerRefcon: any, fromTypeIsDesc: string | any, isSysHandler: boolean): number;

// export function AEGetDescData(theAEDesc: AEDesc, dataPtr: any, maximumSize: number): number;

// export function AEGetDescDataRange(dataDesc: AEDesc, buffer: any, offset: number, length: number): number;

// export function AEGetDescDataSize(theAEDesc: AEDesc): number;

// export function AEGetEventHandler(theAEEventClass: number, theAEEventID: number, handler: (p1: AEDesc, p2: AEDesc, p3: any) => number, handlerRefcon: any, isSysHandler: boolean): number;

// export function AEGetNthDesc(theAEDescList: AEDesc, index: number, desiredType: number, theAEKeyword: number, result: AEDesc): number;

// export function AEGetNthPtr(theAEDescList: AEDesc, index: number, desiredType: number, theAEKeyword: number, typeCode: number, dataPtr: any, maximumSize: number, actualSize: number): number;

// export function AEGetObjectAccessor(desiredClass: number, containerType: number, accessor: (p1: number, p2: AEDesc, p3: number, p4: number, p5: AEDesc, p6: AEDesc, p7: any) => number, accessorRefcon: any, isSysHandler: boolean): number;

// export function AEGetParamDesc(theAppleEvent: AEDesc, theAEKeyword: number, desiredType: number, result: AEDesc): number;

// export function AEGetParamPtr(theAppleEvent: AEDesc, theAEKeyword: number, desiredType: number, actualType: number, dataPtr: any, maximumSize: number, actualSize: number): number;

// export function AEGetRegisteredMachPort(): number;

// export function AEGetSpecialHandler(functionClass: number, handler: (p1: AEDesc, p2: AEDesc, p3: any) => number, isSysHandler: boolean): number;

// export function AEInitializeDesc(desc: AEDesc): void;

// export function AEInstallCoercionHandler(fromType: number, toType: number, handler: (p1: AEDesc, p2: number, p3: any, p4: AEDesc) => number, handlerRefcon: any, fromTypeIsDesc: boolean, isSysHandler: boolean): number;

// export function AEInstallEventHandler(theAEEventClass: number, theAEEventID: number, handler: (p1: AEDesc, p2: AEDesc, p3: any) => number, handlerRefcon: any, isSysHandler: boolean): number;

// export function AEInstallObjectAccessor(desiredClass: number, containerType: number, theAccessor: (p1: number, p2: AEDesc, p3: number, p4: number, p5: AEDesc, p6: AEDesc, p7: any) => number, accessorRefcon: any, isSysHandler: boolean): number;

// export function AEInstallSpecialHandler(functionClass: number, handler: (p1: AEDesc, p2: AEDesc, p3: any) => number, isSysHandler: boolean): number;

// export function AEManagerInfo(keyWord: number, result: number): number;

// export function AEObjectInit(): number;

// export function AEPrintDescToHandle(desc: AEDesc, result: string): number;

// export function AEProcessMessage(header: mach_msg_header_t): number;

// export function AEPutAttributeDesc(theAppleEvent: AEDesc, theAEKeyword: number, theAEDesc: AEDesc): number;

// export function AEPutAttributePtr(theAppleEvent: AEDesc, theAEKeyword: number, typeCode: number, dataPtr: any, dataSize: number): number;

// export function AEPutDesc(theAEDescList: AEDesc, index: number, theAEDesc: AEDesc): number;

// export function AEPutParamDesc(theAppleEvent: AEDesc, theAEKeyword: number, theAEDesc: AEDesc): number;

// export function AEPutParamPtr(theAppleEvent: AEDesc, theAEKeyword: number, typeCode: number, dataPtr: any, dataSize: number): number;

// export function AEPutPtr(theAEDescList: AEDesc, index: number, typeCode: number, dataPtr: any, dataSize: number): number;

// export function AERemoteProcessResolverGetProcesses(ref: any, outError: CFStreamError): any[];

// export function AERemoteProcessResolverScheduleWithRunLoop(ref: any, runLoop: any, runLoopMode: string, callback: (p1: any, p2: any) => void, ctx: AERemoteProcessResolverContext): void;

// export function AERemoveCoercionHandler(fromType: number, toType: number, handler: (p1: AEDesc, p2: number, p3: any, p4: AEDesc) => number, isSysHandler: boolean): number;

// export function AERemoveEventHandler(theAEEventClass: number, theAEEventID: number, handler: (p1: AEDesc, p2: AEDesc, p3: any) => number, isSysHandler: boolean): number;

// export function AERemoveObjectAccessor(desiredClass: number, containerType: number, theAccessor: (p1: number, p2: AEDesc, p3: number, p4: number, p5: AEDesc, p6: AEDesc, p7: any) => number, isSysHandler: boolean): number;

// export function AERemoveSpecialHandler(functionClass: number, handler: (p1: AEDesc, p2: AEDesc, p3: any) => number, isSysHandler: boolean): number;

// export function AEReplaceDescData(typeCode: number, dataPtr: any, dataSize: number, theAEDesc: AEDesc): number;

// export function AEResolve(objectSpecifier: AEDesc, callbackFlags: number, theToken: AEDesc): number;

// export function AESendMessage(event: AEDesc, reply: AEDesc, sendMode: number, timeOutInTicks: number): number;

// export function AESetObjectCallbacks(myCompareProc: (p1: number, p2: AEDesc, p3: AEDesc, p4: string) => number, myCountProc: (p1: number, p2: number, p3: AEDesc, p4: number) => number, myDisposeTokenProc: (p1: AEDesc) => number, myGetMarkTokenProc: (p1: AEDesc, p2: number, p3: AEDesc) => number, myMarkProc: (p1: AEDesc, p2: AEDesc, p3: number) => number, myAdjustMarksProc: (p1: number, p2: number, p3: AEDesc) => number, myGetErrDescProcPtr: (p1: AEDesc) => number): number;

// export function AESizeOfAttribute(theAppleEvent: AEDesc, theAEKeyword: number, typeCode: number, dataSize: number): number;

// export function AESizeOfFlattenedDesc(theAEDesc: AEDesc): number;

// export function AESizeOfNthItem(theAEDescList: AEDesc, index: number, typeCode: number, dataSize: number): number;

// export function AESizeOfParam(theAppleEvent: AEDesc, theAEKeyword: number, typeCode: number, dataSize: number): number;

// export function AEStreamClose(ref: any, desc: AEDesc): number;

// export function AEStreamCloseDesc(ref: any): number;

// export function AEStreamCloseList(ref: any): number;

// export function AEStreamCloseRecord(ref: any): number;

// export function AEStreamCreateEvent(clazz: number, id: number, targetType: number, targetData: any, targetLength: number, returnID: number, transactionID: number): any;

// export function AEStreamOpen(): any;

// export function AEStreamOpenDesc(ref: any, newType: number): number;

// export function AEStreamOpenEvent(event: AEDesc): any;

// export function AEStreamOpenKeyDesc(ref: any, key: number, newType: number): number;

// export function AEStreamOpenList(ref: any): number;

// export function AEStreamOpenRecord(ref: any, newType: number): number;

// export function AEStreamOptionalParam(ref: any, key: number): number;

// export function AEStreamSetRecordType(ref: any, newType: number): number;

// export function AEStreamWriteAEDesc(ref: any, desc: AEDesc): number;

// export function AEStreamWriteData(ref: any, data: any, length: number): number;

// export function AEStreamWriteDesc(ref: any, newType: number, data: any, length: number): number;

// export function AEStreamWriteKey(ref: any, key: number): number;

// export function AEStreamWriteKeyDesc(ref: any, key: number, newType: number, data: any, length: number): number;

// export function AEUnflattenDesc(buffer: any, result: AEDesc): number;

// export function CSBackupIsItemExcluded(item: URL, excludeByPath: string | any): boolean;

// export function CSBackupSetItemExcluded(item: URL, exclude: boolean, excludeByPath: boolean): number;

// export function CSDiskSpaceCancelRecovery(operationUUID: any): void;

// export function CSDiskSpaceGetRecoveryEstimate(volumeURL: URL): number;

// export function CSDiskSpaceStartRecovery(volumeURL: URL, bytesNeeded: number, options: number, outOperationUUID: any, callbackQueue: NSObject, callback: (p1: boolean, p2: number, p3: Error) => void): void;

// export function CSGetDefaultIdentityAuthority(): any;

// export function CSGetLocalIdentityAuthority(): any;

// export function CSGetManagedIdentityAuthority(): any;

// export function CSIdentityAddAlias(identity: any, alias: string): void;

// export function CSIdentityAddMember(group: any, member: any): void;

// export function CSIdentityAuthenticateUsingPassword(user: any, password: string): boolean;

// export function CSIdentityAuthorityCopyLocalizedName(authority: any): string;

// export function CSIdentityAuthorityGetTypeID(): number;

// export function CSIdentityCommit(identity: any, authorization: any, error: Error): boolean;

// export function CSIdentityCommitAsynchronously(identity: any, clientContext: CSIdentityClientContext, runLoop: any, runLoopMode: string, authorization: any): boolean;

// export function CSIdentityCreate(allocator: any, identityClass: number, fullName: string, posixName: string, flags: number, authority: any): any;

// export function CSIdentityCreateCopy(allocator: any, identity: any): any;

// export function CSIdentityCreateGroupMembershipQuery(allocator: any, group: any): any;

// export function CSIdentityCreatePersistentReference(allocator: any, identity: any): Data;

// export function CSIdentityDelete(identity: any): void;

// export function CSIdentityGetAliases(identity: any): any[];

// export function CSIdentityGetAuthority(identity: any): any;

// export function CSIdentityGetCertificate(user: any): any;

// export function CSIdentityGetClass(identity: any): number;

// export function CSIdentityGetEmailAddress(identity: any): string;

// export function CSIdentityGetFullName(identity: any): string;

// export function CSIdentityGetImageData(identity: any): Data;

// export function CSIdentityGetImageDataType(identity: any): string;

// export function CSIdentityGetImageURL(identity: any): URL;

// export function CSIdentityGetPosixID(identity: any): number;

// export function CSIdentityGetPosixName(identity: any): string;

// export function CSIdentityGetTypeID(): number;

// export function CSIdentityGetUUID(identity: any): any;

// export function CSIdentityIsCommitting(identity: any): boolean;

// export function CSIdentityIsEnabled(user: any): boolean;

// export function CSIdentityIsHidden(identity: any): boolean;

// export function CSIdentityIsMemberOfGroup(identity: any, group: any): boolean;

// export function CSIdentityQueryCopyResults(query: any): any[];

// export function CSIdentityQueryCreate(allocator: any, identityClass: number, authority: any): any;

// export function CSIdentityQueryCreateForCurrentUser(allocator: any): any;

// export function CSIdentityQueryCreateForName(allocator: any, name: string, comparisonMethod: number, identityClass: number, authority: any): any;

// export function CSIdentityQueryCreateForPersistentReference(allocator: any, referenceData: Data): any;

// export function CSIdentityQueryCreateForPosixID(allocator: any, posixID: number, identityClass: number, authority: any): any;

// export function CSIdentityQueryCreateForUUID(allocator: any, uuid: any, authority: any): any;

// export function CSIdentityQueryExecute(query: any, flags: number, error: Error): boolean;

// export function CSIdentityQueryExecuteAsynchronously(query: any, flags: number, clientContext: CSIdentityQueryClientContext, runLoop: any, runLoopMode: string): boolean;

// export function CSIdentityQueryGetTypeID(): number;

// export function CSIdentityQueryStop(query: any): void;

// export function CSIdentityRemoveAlias(identity: any, alias: string): void;

// export function CSIdentityRemoveClient(identity: any): void;

// export function CSIdentityRemoveMember(group: any, member: any): void;

// export function CSIdentitySetCertificate(user: any, certificate: any): void;

// export function CSIdentitySetEmailAddress(identity: any, emailAddress: string): void;

// export function CSIdentitySetFullName(identity: any, fullName: string): void;

// export function CSIdentitySetImageData(identity: any, imageData: Data, imageDataType: string): void;

// export function CSIdentitySetImageURL(identity: any, url: URL): void;

// export function CSIdentitySetIsEnabled(user: any, isEnabled: boolean): void;

// export function CSIdentitySetPassword(user: any, password: string): void;

// export function ChangeTextToUnicodeInfo(ioTextToUnicodeInfo: any, iUnicodeMapping: UnicodeMapping): number;

// export function ChangeUnicodeToTextInfo(ioUnicodeToTextInfo: any, iUnicodeMapping: UnicodeMapping): number;

// export function ConvertFromPStringToUnicode(iTextToUnicodeInfo: any, iPascalStr: string | any, iOutputBufLen: number, oUnicodeLen: number, oUnicodeStr: number): number;

// export function ConvertFromTextToUnicode(iTextToUnicodeInfo: any, iSourceLen: number, iSourceStr: any, iControlFlags: number, iOffsetCount: number, iOffsetArray: number, oOffsetCount: number, oOffsetArray: number, iOutputBufLen: number, oSourceRead: number, oUnicodeLen: number, oUnicodeStr: number): number;

// export function ConvertFromUnicodeToPString(iUnicodeToTextInfo: any, iUnicodeLen: number, iUnicodeStr: number, oPascalStr: number): number;

// export function ConvertFromUnicodeToScriptCodeRun(iUnicodeToTextInfo: any, iUnicodeLen: number, iUnicodeStr: number, iControlFlags: number, iOffsetCount: number, iOffsetArray: number, oOffsetCount: number, oOffsetArray: number, iOutputBufLen: number, oInputRead: number, oOutputLen: number, oOutputStr: any, iScriptRunBufLen: number, oScriptRunOutLen: number, oScriptCodeRuns: ScriptCodeRun): number;

// export function ConvertFromUnicodeToText(iUnicodeToTextInfo: any, iUnicodeLen: number, iUnicodeStr: number, iControlFlags: number, iOffsetCount: number, iOffsetArray: number, oOffsetCount: number, oOffsetArray: number, iOutputBufLen: number, oInputRead: number, oOutputLen: number, oOutputStr: any): number;

// export function ConvertFromUnicodeToTextRun(iUnicodeToTextInfo: any, iUnicodeLen: number, iUnicodeStr: number, iControlFlags: number, iOffsetCount: number, iOffsetArray: number, oOffsetCount: number, oOffsetArray: number, iOutputBufLen: number, oInputRead: number, oOutputLen: number, oOutputStr: any, iEncodingRunBufLen: number, oEncodingRunOutLen: number, oEncodingRuns: TextEncodingRun): number;

// export function CountUnicodeMappings(iFilter: number, iFindMapping: UnicodeMapping, oActualCount: number): number;

// export function CreateCompDescriptor(comparisonOperator: number, operand1: AEDesc, operand2: AEDesc, disposeInputs: boolean, theDescriptor: AEDesc): number;

// export function CreateLogicalDescriptor(theLogicalTerms: AEDesc, theLogicOperator: number, disposeInputs: boolean, theDescriptor: AEDesc): number;

// export function CreateObjSpecifier(desiredClass: number, theContainer: AEDesc, keyForm: number, keyData: AEDesc, disposeInputs: boolean, objSpecifier: AEDesc): number;

// export function CreateOffsetDescriptor(theOffset: number, theDescriptor: AEDesc): number;

// export function CreateRangeDescriptor(rangeStart: AEDesc, rangeStop: AEDesc, disposeInputs: boolean, theDescriptor: AEDesc): number;

// export function CreateTextEncoding(encodingBase: number, encodingVariant: number, encodingFormat: number): number;

// export function CreateTextToUnicodeInfo(iUnicodeMapping: UnicodeMapping, oTextToUnicodeInfo: any): number;

// export function CreateTextToUnicodeInfoByEncoding(iEncoding: number, oTextToUnicodeInfo: any): number;

// export function CreateUnicodeToTextInfo(iUnicodeMapping: UnicodeMapping, oUnicodeToTextInfo: any): number;

// export function CreateUnicodeToTextInfoByEncoding(iEncoding: number, oUnicodeToTextInfo: any): number;

// export function CreateUnicodeToTextRunInfo(iNumberOfMappings: number, iUnicodeMappings: UnicodeMapping, oUnicodeToTextInfo: any): number;

// export function CreateUnicodeToTextRunInfoByEncoding(iNumberOfEncodings: number, iEncodings: number, oUnicodeToTextInfo: any): number;

// export function CreateUnicodeToTextRunInfoByScriptCode(iNumberOfScriptCodes: number, iScripts: number, oUnicodeToTextInfo: any): number;

// export function DCSCopyTextDefinition(dictionary: any, textString: string, range: CFRange): string;

// export function DCSGetTermRangeInString(dictionary: any, textString: string, offset: number): CFRange;

// export function DisposeAECoerceDescUPP(userUPP: (p1: AEDesc, p2: number, p3: any, p4: AEDesc) => number): void;

// export function DisposeAECoercePtrUPP(userUPP: (p1: number, p2: any, p3: number, p4: number, p5: any, p6: AEDesc) => number): void;

// export function DisposeAEDisposeExternalUPP(userUPP: (p1: any, p2: number, p3: any) => void): void;

// export function DisposeAEEventHandlerUPP(userUPP: (p1: AEDesc, p2: AEDesc, p3: any) => number): void;

// export function DisposeIndexToUCStringUPP(userUPP: (p1: number, p2: any, p3: any, p4: string, p5: number) => boolean): void;

// export function DisposeOSLAccessorUPP(userUPP: (p1: number, p2: AEDesc, p3: number, p4: number, p5: AEDesc, p6: AEDesc, p7: any) => number): void;

// export function DisposeOSLAdjustMarksUPP(userUPP: (p1: number, p2: number, p3: AEDesc) => number): void;

// export function DisposeOSLCompareUPP(userUPP: (p1: number, p2: AEDesc, p3: AEDesc, p4: string) => number): void;

// export function DisposeOSLCountUPP(userUPP: (p1: number, p2: number, p3: AEDesc, p4: number) => number): void;

// export function DisposeOSLDisposeTokenUPP(userUPP: (p1: AEDesc) => number): void;

// export function DisposeOSLGetErrDescUPP(userUPP: (p1: AEDesc) => number): void;

// export function DisposeOSLGetMarkTokenUPP(userUPP: (p1: AEDesc, p2: number, p3: AEDesc) => number): void;

// export function DisposeOSLMarkUPP(userUPP: (p1: AEDesc, p2: AEDesc, p3: number) => number): void;

// export function DisposeTextToUnicodeInfo(ioTextToUnicodeInfo: any): number;

// export function DisposeUnicodeToTextFallbackUPP(userUPP: (p1: number, p2: number, p3: number, p4: string, p5: number, p6: number, p7: any, p8: UnicodeMapping) => number): void;

// export function DisposeUnicodeToTextInfo(ioUnicodeToTextInfo: any): number;

// export function DisposeUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: any): number;

// export function FSEventStreamCopyDescription(streamRef: any): string;

// export function FSEventStreamCopyPathsBeingWatched(streamRef: any): any[];

// export function FSEventStreamCreate(allocator: any, callback: (p1: any, p2: any, p3: number, p4: any, p5: number, p6: number) => void, context: FSEventStreamContext, pathsToWatch: any[], sinceWhen: number, latency: number, flags: number): any;

// export function FSEventStreamCreateRelativeToDevice(allocator: any, callback: (p1: any, p2: any, p3: number, p4: any, p5: number, p6: number) => void, context: FSEventStreamContext, deviceToWatch: number, pathsToWatchRelativeToDevice: any[], sinceWhen: number, latency: number, flags: number): any;

// export function FSEventStreamFlushAsync(streamRef: any): number;

// export function FSEventStreamFlushSync(streamRef: any): void;

// export function FSEventStreamGetDeviceBeingWatched(streamRef: any): number;

// export function FSEventStreamGetLatestEventId(streamRef: any): number;

// export function FSEventStreamInvalidate(streamRef: any): void;

// export function FSEventStreamRelease(streamRef: any): void;

// export function FSEventStreamRetain(streamRef: any): void;

// export function FSEventStreamScheduleWithRunLoop(streamRef: any, runLoop: any, runLoopMode: string): void;

// export function FSEventStreamSetDispatchQueue(streamRef: any, q: NSObject): void;

// export function FSEventStreamSetExclusionPaths(streamRef: any, pathsToExclude: any[]): boolean;

// export function FSEventStreamShow(streamRef: any): void;

// export function FSEventStreamStart(streamRef: any): boolean;

// export function FSEventStreamStop(streamRef: any): void;

// export function FSEventStreamUnscheduleFromRunLoop(streamRef: any, runLoop: any, runLoopMode: string): void;

// export function FSEventsCopyUUIDForDevice(dev: number): any;

// export function FSEventsGetCurrentEventId(): number;

// export function FSEventsGetLastEventIdForDeviceBeforeTime(dev: number, time: number): number;

// export function FSEventsPurgeEventsForDeviceUpToEventId(dev: number, eventId: number): boolean;

// export function GetScriptInfoFromTextEncoding(iEncoding: number, oTextScriptID: number, oTextLanguageID: number): number;

// export function GetTextEncodingBase(encoding: number): number;

// export function GetTextEncodingFormat(encoding: number): number;

// export function GetTextEncodingFromScriptInfo(iTextScriptID: number, iTextLanguageID: number, iTextRegionID: number, oEncoding: number): number;

// export function GetTextEncodingName(iEncoding: number, iNamePartSelector: number, iPreferredRegion: number, iPreferredEncoding: number, iOutputBufLen: number, oNameLength: number, oActualRegion: number, oActualEncoding: number, oEncodingName: string | any): number;

// export function GetTextEncodingVariant(encoding: number): number;

// export function InvokeAECoerceDescUPP(fromDesc: AEDesc, toType: number, handlerRefcon: any, toDesc: AEDesc, userUPP: (p1: AEDesc, p2: number, p3: any, p4: AEDesc) => number): number;

// export function InvokeAECoercePtrUPP(typeCode: number, dataPtr: any, dataSize: number, toType: number, handlerRefcon: any, result: AEDesc, userUPP: (p1: number, p2: any, p3: number, p4: number, p5: any, p6: AEDesc) => number): number;

// export function InvokeAEDisposeExternalUPP(dataPtr: any, dataLength: number, refcon: any, userUPP: (p1: any, p2: number, p3: any) => void): void;

// export function InvokeAEEventHandlerUPP(theAppleEvent: AEDesc, reply: AEDesc, handlerRefcon: any, userUPP: (p1: AEDesc, p2: AEDesc, p3: any) => number): number;

// export function InvokeIndexToUCStringUPP(index: number, listDataPtr: any, refcon: any, outString: string, tsOptions: number, userUPP: (p1: number, p2: any, p3: any, p4: string, p5: number) => boolean): boolean;

// export function InvokeOSLAccessorUPP(desiredClass: number, container: AEDesc, containerClass: number, form: number, selectionData: AEDesc, value: AEDesc, accessorRefcon: any, userUPP: (p1: number, p2: AEDesc, p3: number, p4: number, p5: AEDesc, p6: AEDesc, p7: any) => number): number;

// export function InvokeOSLAdjustMarksUPP(newStart: number, newStop: number, markToken: AEDesc, userUPP: (p1: number, p2: number, p3: AEDesc) => number): number;

// export function InvokeOSLCompareUPP(oper: number, obj1: AEDesc, obj2: AEDesc, result: string | any, userUPP: (p1: number, p2: AEDesc, p3: AEDesc, p4: string) => number): number;

// export function InvokeOSLCountUPP(desiredType: number, containerClass: number, container: AEDesc, result: number, userUPP: (p1: number, p2: number, p3: AEDesc, p4: number) => number): number;

// export function InvokeOSLDisposeTokenUPP(unneededToken: AEDesc, userUPP: (p1: AEDesc) => number): number;

// export function InvokeOSLGetErrDescUPP(appDescPtr: AEDesc, userUPP: (p1: AEDesc) => number): number;

// export function InvokeOSLGetMarkTokenUPP(dContainerToken: AEDesc, containerClass: number, result: AEDesc, userUPP: (p1: AEDesc, p2: number, p3: AEDesc) => number): number;

// export function InvokeOSLMarkUPP(dToken: AEDesc, markToken: AEDesc, index: number, userUPP: (p1: AEDesc, p2: AEDesc, p3: number) => number): number;

// export function InvokeUnicodeToTextFallbackUPP(iSrcUniStr: number, iSrcUniStrLen: number, oSrcConvLen: number, oDestStr: string | any, iDestStrLen: number, oDestConvLen: number, iInfoPtr: any, iUnicodeMappingPtr: UnicodeMapping, userUPP: (p1: number, p2: number, p3: number, p4: string, p5: number, p6: number, p7: any, p8: UnicodeMapping) => number): number;

// export function LSCanURLAcceptURL(inItemURL: URL, inTargetURL: URL, inRoleMask: LSInfo.LSRolesMask, inFlags: LSInfo.LSAcceptanceFlags, outAcceptsItem: string | any): number;

// export function LSCopyAllRoleHandlersForContentType(inContentType: string, inRole: LSInfo.LSRolesMask): any[];

// export function LSCopyApplicationURLsForBundleIdentifier(inBundleIdentifier: string, outError: Error): any[];

// export function LSCopyApplicationURLsForURL(inURL: URL, inRoleMask: LSInfo.LSRolesMask): any[];

// export function LSCopyDefaultApplicationURLForContentType(inContentType: string, inRoleMask: LSInfo.LSRolesMask, outError: Error): URL;

// export function LSCopyDefaultApplicationURLForURL(inURL: URL, inRoleMask: LSInfo.LSRolesMask, outError: Error): URL;

// export function LSCopyDefaultRoleHandlerForContentType(inContentType: string, inRole: LSInfo.LSRolesMask): string;

// export function LSOpenCFURLRef(inURL: URL, outLaunchedURL: URL): number;

// export function LSOpenFromURLSpec(inLaunchSpec: LSLaunchURLSpec, outLaunchedURL: URL): number;

// export function LSRegisterURL(inURL: URL, inUpdate: boolean): number;

// export function LSSetDefaultHandlerForURLScheme(inURLScheme: string, inHandlerBundleID: string): number;

// export function LSSetDefaultRoleHandlerForContentType(inContentType: string, inRole: LSInfo.LSRolesMask, inHandlerBundleID: string): number;

// export function LocaleOperationCountNames(opClass: number, nameCount: number): number;

// export function LocaleOperationGetIndName(opClass: number, nameIndex: number, maxNameLen: number, actualNameLen: number, displayName: number, displayLocale: any): number;

// export function LocaleOperationGetName(opClass: number, displayLocale: any, maxNameLen: number, actualNameLen: number, displayName: number): number;

// export function LocaleRefFromLangOrRegionCode(lang: number, region: number, locale: any): number;

// export function LocaleRefFromLocaleString(localeString: number, locale: any): number;

// export function LocaleRefGetPartString(locale: any, partMask: number, maxStringLen: number, partString: number): number;

// export function LocaleStringToLangAndRegionCodes(localeString: number, lang: number, region: number): number;

// export function LongDoubleToSInt64(value: number): number;

// export function LongDoubleToUInt64(value: number): number;

// export function MDCopyLabelKinds(): any[];

// export function MDCopyLabelWithUUID(labelUUID: any): any;

// export function MDCopyLabelsMatchingExpression(simpleQueryString: string): any[];

// export function MDCopyLabelsWithKind(kind: string): any[];

// export function MDItemCopyAttribute(item: any, name: string): any;

// export function MDItemCopyAttributeNames(item: any): any[];

// export function MDItemCopyAttributes(item: any, names: any[]): Map<any, any>;

// export function MDItemCopyLabels(item: any): any[];

// export function MDItemCreate(allocator: any, path: string): any;

// export function MDItemCreateWithURL(allocator: any, url: URL): any;

// export function MDItemGetTypeID(): number;

// export function MDItemRemoveLabel(item: any, label: any): boolean;

// export function MDItemSetLabel(item: any, label: any): boolean;

// export function MDItemsCopyAttributes(items: any[], names: any[]): any[];

// export function MDItemsCreateWithURLs(allocator: any, urls: any[]): any[];

// export function MDLabelCopyAttribute(label: any, name: string): any;

// export function MDLabelCopyAttributeName(label: any): string;

// export function MDLabelCreate(allocator: any, displayName: string, kind: string, domain: MDLabel.MDLabelDomain): any;

// export function MDLabelDelete(label: any): boolean;

// export function MDLabelGetTypeID(): number;

// export function MDLabelSetAttributes(label: any, attrs: Map<any, any>): boolean;

// export function MDQueryCopyQueryString(query: any): string;

// export function MDQueryCopySortingAttributes(query: any): any[];

// export function MDQueryCopyValueListAttributes(query: any): any[];

// export function MDQueryCopyValuesOfAttribute(query: any, name: string): any[];

// export function MDQueryCreate(allocator: any, queryString: string, valueListAttrs: any[], sortingAttrs: any[]): any;

// export function MDQueryCreateForItems(allocator: any, queryString: string, valueListAttrs: any[], sortingAttrs: any[], items: any[]): any;

// export function MDQueryCreateSubset(allocator: any, query: any, queryString: string, valueListAttrs: any[], sortingAttrs: any[]): any;

// export function MDQueryDisableUpdates(query: any): void;

// export function MDQueryEnableUpdates(query: any): void;

// export function MDQueryExecute(query: any, optionFlags: number): boolean;

// export function MDQueryGetAttributeValueOfResultAtIndex(query: any, name: string, idx: number): any;

// export function MDQueryGetBatchingParameters(query: any): MDQueryBatchingParams;

// export function MDQueryGetCountOfResultsWithAttributeValue(query: any, name: string, value: any): number;

// export function MDQueryGetIndexOfResult(query: any, result: any): number;

// export function MDQueryGetResultAtIndex(query: any, idx: number): any;

// export function MDQueryGetResultCount(query: any): number;

// export function MDQueryGetSortOptionFlagsForAttribute(query: any, fieldName: string): number;

// export function MDQueryGetTypeID(): number;

// export function MDQueryIsGatheringComplete(query: any): boolean;

// export function MDQuerySetBatchingParameters(query: any, params: MDQueryBatchingParams): void;

// export function MDQuerySetCreateResultFunction(query: any, func: (p1: any, p2: any, p3: any) => any, context: any, cb: CFArrayCallBacks): void;

// export function MDQuerySetCreateValueFunction(query: any, func: (p1: any, p2: string, p3: any, p4: any) => any, context: any, cb: CFArrayCallBacks): void;

// export function MDQuerySetDispatchQueue(query: any, queue: NSObject): void;

// export function MDQuerySetMaxCount(query: any, size: number): void;

// export function MDQuerySetSearchScope(query: any, scopeDirectories: any[], scopeOptions: number): void;

// export function MDQuerySetSortComparator(query: any, comparator: (p1: any, p2: any, p3: any) => CFBase.CFComparisonResult, context: any): void;

// export function MDQuerySetSortComparatorBlock(query: any, comparator: (p1: any, p2: any) => CFBase.CFComparisonResult): void;

// export function MDQuerySetSortOptionFlagsForAttribute(query: any, fieldName: string, flags: number): boolean;

// export function MDQuerySetSortOrder(query: any, sortingAttrs: any[]): boolean;

// export function MDQueryStop(query: any): void;

// export function MDSchemaCopyAllAttributes(): any[];

// export function MDSchemaCopyAttributesForContentType(contentTypeUTI: string): Map<any, any>;

// export function MDSchemaCopyDisplayDescriptionForAttribute(name: string): string;

// export function MDSchemaCopyDisplayNameForAttribute(name: string): string;

// export function MDSchemaCopyMetaAttributesForAttribute(name: string): Map<any, any>;

// export function NearestMacTextEncodings(generalEncoding: number, bestMacEncoding: number, alternateMacEncoding: number): number;

// export function NewAECoerceDescUPP(userRoutine: (p1: AEDesc, p2: number, p3: any, p4: AEDesc) => number): (p1: AEDesc, p2: number, p3: any, p4: AEDesc) => number;

// export function NewAECoercePtrUPP(userRoutine: (p1: number, p2: any, p3: number, p4: number, p5: any, p6: AEDesc) => number): (p1: number, p2: any, p3: number, p4: number, p5: any, p6: AEDesc) => number;

// export function NewAEDisposeExternalUPP(userRoutine: (p1: any, p2: number, p3: any) => void): (p1: any, p2: number, p3: any) => void;

// export function NewAEEventHandlerUPP(userRoutine: (p1: AEDesc, p2: AEDesc, p3: any) => number): (p1: AEDesc, p2: AEDesc, p3: any) => number;

// export function NewIndexToUCStringUPP(userRoutine: (p1: number, p2: any, p3: any, p4: string, p5: number) => boolean): (p1: number, p2: any, p3: any, p4: string, p5: number) => boolean;

// export function NewOSLAccessorUPP(userRoutine: (p1: number, p2: AEDesc, p3: number, p4: number, p5: AEDesc, p6: AEDesc, p7: any) => number): (p1: number, p2: AEDesc, p3: number, p4: number, p5: AEDesc, p6: AEDesc, p7: any) => number;

// export function NewOSLAdjustMarksUPP(userRoutine: (p1: number, p2: number, p3: AEDesc) => number): (p1: number, p2: number, p3: AEDesc) => number;

// export function NewOSLCompareUPP(userRoutine: (p1: number, p2: AEDesc, p3: AEDesc, p4: string) => number): (p1: number, p2: AEDesc, p3: AEDesc, p4: string) => number;

// export function NewOSLCountUPP(userRoutine: (p1: number, p2: number, p3: AEDesc, p4: number) => number): (p1: number, p2: number, p3: AEDesc, p4: number) => number;

// export function NewOSLDisposeTokenUPP(userRoutine: (p1: AEDesc) => number): (p1: AEDesc) => number;

// export function NewOSLGetErrDescUPP(userRoutine: (p1: AEDesc) => number): (p1: AEDesc) => number;

// export function NewOSLGetMarkTokenUPP(userRoutine: (p1: AEDesc, p2: number, p3: AEDesc) => number): (p1: AEDesc, p2: number, p3: AEDesc) => number;

// export function NewOSLMarkUPP(userRoutine: (p1: AEDesc, p2: AEDesc, p3: number) => number): (p1: AEDesc, p2: AEDesc, p3: number) => number;

// export function NewUnicodeToTextFallbackUPP(userRoutine: (p1: number, p2: number, p3: number, p4: string, p5: number, p6: number, p7: any, p8: UnicodeMapping) => number): (p1: number, p2: number, p3: number, p4: string, p5: number, p6: number, p7: any, p8: UnicodeMapping) => number;

// export function QueryUnicodeMappings(iFilter: number, iFindMapping: UnicodeMapping, iMaxCount: number, oActualCount: number, oReturnedMappings: UnicodeMapping): number;

// export function ResetTextToUnicodeInfo(ioTextToUnicodeInfo: any): number;

// export function ResetUnicodeToTextInfo(ioUnicodeToTextInfo: any): number;

// export function ResetUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: any): number;

// export function ResolveDefaultTextEncoding(encoding: number): number;

// export function RevertTextEncodingToScriptInfo(iEncoding: number, oTextScriptID: number, oTextLanguageID: number, oTextFontname: number): number;

// export function S32Set(value: number): number;

// export function S64Add(left: number, right: number): number;

// export function S64And(left: number, right: number): boolean;

// export function S64BitwiseAnd(left: number, right: number): number;

// export function S64BitwiseEor(left: number, right: number): number;

// export function S64BitwiseNot(value: number): number;

// export function S64BitwiseOr(left: number, right: number): number;

// export function S64Div(dividend: number, divisor: number): number;

// export function S64Divide(dividend: number, divisor: number, remainder: number): number;

// export function S64Eor(left: number, right: number): boolean;

// export function S64Max(): number;

// export function S64Min(): number;

// export function S64Mod(dividend: number, divisor: number): number;

// export function S64Multiply(left: number, right: number): number;

// export function S64Negate(value: number): number;

// export function S64Not(value: number): boolean;

// export function S64Or(left: number, right: number): boolean;

// export function S64Set(value: number): number;

// export function S64SetU(value: number): number;

// export function S64ShiftLeft(value: number, shift: number): number;

// export function S64ShiftRight(value: number, shift: number): number;

// export function S64Subtract(left: number, right: number): number;

// export function SInt64ToLongDouble(value: number): number;

// export function SInt64ToUInt64(value: number): number;

// export function SKDocumentCopyURL(inDocument: any): URL;

// export function SKDocumentCreate(inScheme: string, inParent: any, inName: string): any;

// export function SKDocumentCreateWithURL(inURL: URL): any;

// export function SKDocumentGetName(inDocument: any): string;

// export function SKDocumentGetParent(inDocument: any): any;

// export function SKDocumentGetSchemeName(inDocument: any): string;

// export function SKDocumentGetTypeID(): number;

// export function SKIndexAddDocument(inIndex: any, inDocument: any, inMIMETypeHint: string, inCanReplace: boolean): boolean;

// export function SKIndexAddDocumentWithText(inIndex: any, inDocument: any, inDocumentText: string, inCanReplace: boolean): boolean;

// export function SKIndexClose(inIndex: any): void;

// export function SKIndexCompact(inIndex: any): boolean;

// export function SKIndexCopyDocumentForDocumentID(inIndex: any, inDocumentID: number): any;

// export function SKIndexCopyDocumentIDArrayForTermID(inIndex: any, inTermID: number): any[];

// export function SKIndexCopyDocumentProperties(inIndex: any, inDocument: any): Map<any, any>;

// export function SKIndexCopyDocumentRefsForDocumentIDs(inIndex: any, inCount: number, inDocumentIDsArray: number, outDocumentRefsArray: any): void;

// export function SKIndexCopyDocumentURLsForDocumentIDs(inIndex: any, inCount: number, inDocumentIDsArray: number, outDocumentURLsArray: URL): void;

// export function SKIndexCopyInfoForDocumentIDs(inIndex: any, inCount: number, inDocumentIDsArray: number, outNamesArray: string, outParentIDsArray: number): void;

// export function SKIndexCopyTermIDArrayForDocumentID(inIndex: any, inDocumentID: number): any[];

// export function SKIndexCopyTermStringForTermID(inIndex: any, inTermID: number): string;

// export function SKIndexCreateWithMutableData(inData: Data, inIndexName: string, inIndexType: SKIndex.SKIndexType, inAnalysisProperties: Map<any, any>): any;

// export function SKIndexCreateWithURL(inURL: URL, inIndexName: string, inIndexType: SKIndex.SKIndexType, inAnalysisProperties: Map<any, any>): any;

// export function SKIndexDocumentIteratorCopyNext(inIterator: any): any;

// export function SKIndexDocumentIteratorCreate(inIndex: any, inParentDocument: any): any;

// export function SKIndexDocumentIteratorGetTypeID(): number;

// export function SKIndexFlush(inIndex: any): boolean;

// export function SKIndexGetAnalysisProperties(inIndex: any): Map<any, any>;

// export function SKIndexGetDocumentCount(inIndex: any): number;

// export function SKIndexGetDocumentID(inIndex: any, inDocument: any): number;

// export function SKIndexGetDocumentState(inIndex: any, inDocument: any): SKIndex.SKDocumentIndexState;

// export function SKIndexGetDocumentTermCount(inIndex: any, inDocumentID: number): number;

// export function SKIndexGetDocumentTermFrequency(inIndex: any, inDocumentID: number, inTermID: number): number;

// export function SKIndexGetIndexType(inIndex: any): SKIndex.SKIndexType;

// export function SKIndexGetMaximumBytesBeforeFlush(inIndex: any): number;

// export function SKIndexGetMaximumDocumentID(inIndex: any): number;

// export function SKIndexGetMaximumTermID(inIndex: any): number;

// export function SKIndexGetTermDocumentCount(inIndex: any, inTermID: number): number;

// export function SKIndexGetTermIDForTermString(inIndex: any, inTermString: string): number;

// export function SKIndexGetTypeID(): number;

// export function SKIndexMoveDocument(inIndex: any, inDocument: any, inNewParent: any): boolean;

// export function SKIndexOpenWithData(inData: Data, inIndexName: string): any;

// export function SKIndexOpenWithMutableData(inData: Data, inIndexName: string): any;

// export function SKIndexOpenWithURL(inURL: URL, inIndexName: string, inWriteAccess: boolean): any;

// export function SKIndexRemoveDocument(inIndex: any, inDocument: any): boolean;

// export function SKIndexRenameDocument(inIndex: any, inDocument: any, inNewName: string): boolean;

// export function SKIndexSetDocumentProperties(inIndex: any, inDocument: any, inProperties: Map<any, any>): void;

// export function SKIndexSetMaximumBytesBeforeFlush(inIndex: any, inBytesForUpdate: number): void;

// export function SKLoadDefaultExtractorPlugIns(): void;

// export function SKSearchCancel(inSearch: any): void;

// export function SKSearchCreate(inIndex: any, inQuery: string, inSearchOptions: number): any;

// export function SKSearchFindMatches(inSearch: any, inMaximumCount: number, outDocumentIDsArray: number, outScoresArray: number, maximumTime: number, outFoundCount: number): boolean;

// export function SKSearchGetTypeID(): number;

// export function SKSummaryCopyParagraphAtIndex(summary: any, i: number): string;

// export function SKSummaryCopyParagraphSummaryString(summary: any, numParagraphs: number): string;

// export function SKSummaryCopySentenceAtIndex(summary: any, i: number): string;

// export function SKSummaryCopySentenceSummaryString(summary: any, numSentences: number): string;

// export function SKSummaryCreateWithString(inString: string): any;

// export function SKSummaryGetParagraphCount(summary: any): number;

// export function SKSummaryGetParagraphSummaryInfo(summary: any, numParagraphsInSummary: number, outRankOrderOfParagraphs: number, outParagraphIndexOfParagraphs: number): number;

// export function SKSummaryGetSentenceCount(summary: any): number;

// export function SKSummaryGetSentenceSummaryInfo(summary: any, numSentencesInSummary: number, outRankOrderOfSentences: number, outSentenceIndexOfSentences: number, outParagraphIndexOfSentences: number): number;

// export function SKSummaryGetTypeID(): number;

// export function SetFallbackUnicodeToText(iUnicodeToTextInfo: any, iFallback: (p1: number, p2: number, p3: number, p4: string, p5: number, p6: number, p7: any, p8: UnicodeMapping) => number, iControlFlags: number, iInfoPtr: any): number;

// export function SetFallbackUnicodeToTextRun(iUnicodeToTextRunInfo: any, iFallback: (p1: number, p2: number, p3: number, p4: string, p5: number, p6: number, p7: any, p8: UnicodeMapping) => number, iControlFlags: number, iInfoPtr: any): number;

// export function TECClearConverterContextInfo(encodingConverter: any): number;

// export function TECClearSnifferContextInfo(encodingSniffer: any): number;

// export function TECConvertText(encodingConverter: any, inputBuffer: string | any, inputBufferLength: number, actualInputLength: number, outputBuffer: string | any, outputBufferLength: number, actualOutputLength: number): number;

// export function TECConvertTextToMultipleEncodings(encodingConverter: any, inputBuffer: string | any, inputBufferLength: number, actualInputLength: number, outputBuffer: string | any, outputBufferLength: number, actualOutputLength: number, outEncodingsBuffer: TextEncodingRun, maxOutEncodingRuns: number, actualOutEncodingRuns: number): number;

// export function TECCopyTextEncodingInternetNameAndMIB(textEncoding: number, usage: number, encodingNamePtr: string, mibEnumPtr: number): number;

// export function TECCountAvailableSniffers(numberOfEncodings: number): number;

// export function TECCountAvailableTextEncodings(numberEncodings: number): number;

// export function TECCountDestinationTextEncodings(inputEncoding: number, numberOfEncodings: number): number;

// export function TECCountDirectTextEncodingConversions(numberOfEncodings: number): number;

// export function TECCountMailTextEncodings(locale: number, numberEncodings: number): number;

// export function TECCountSubTextEncodings(inputEncoding: number, numberOfEncodings: number): number;

// export function TECCountWebTextEncodings(locale: number, numberEncodings: number): number;

// export function TECCreateConverter(newEncodingConverter: any, inputEncoding: number, outputEncoding: number): number;

// export function TECCreateConverterFromPath(newEncodingConverter: any, inPath: number, inEncodings: number): number;

// export function TECCreateOneToManyConverter(newEncodingConverter: any, inputEncoding: number, numOutputEncodings: number, outputEncodings: number): number;

// export function TECCreateSniffer(encodingSniffer: any, testEncodings: number, numTextEncodings: number): number;

// export function TECDisposeConverter(newEncodingConverter: any): number;

// export function TECDisposeSniffer(encodingSniffer: any): number;

// export function TECFlushMultipleEncodings(encodingConverter: any, outputBuffer: string | any, outputBufferLength: number, actualOutputLength: number, outEncodingsBuffer: TextEncodingRun, maxOutEncodingRuns: number, actualOutEncodingRuns: number): number;

// export function TECFlushText(encodingConverter: any, outputBuffer: string | any, outputBufferLength: number, actualOutputLength: number): number;

// export function TECGetAvailableSniffers(availableSniffers: number, maxAvailableSniffers: number, actualAvailableSniffers: number): number;

// export function TECGetAvailableTextEncodings(availableEncodings: number, maxAvailableEncodings: number, actualAvailableEncodings: number): number;

// export function TECGetDestinationTextEncodings(inputEncoding: number, destinationEncodings: number, maxDestinationEncodings: number, actualDestinationEncodings: number): number;

// export function TECGetDirectTextEncodingConversions(availableConversions: TECConversionInfo, maxAvailableConversions: number, actualAvailableConversions: number): number;

// export function TECGetEncodingList(encodingConverter: any, numEncodings: number, encodingList: string): number;

// export function TECGetInfo(tecInfo: TECInfo): number;

// export function TECGetMailTextEncodings(locale: number, availableEncodings: number, maxAvailableEncodings: number, actualAvailableEncodings: number): number;

// export function TECGetSubTextEncodings(inputEncoding: number, subEncodings: number, maxSubEncodings: number, actualSubEncodings: number): number;

// export function TECGetTextEncodingFromInternetName(textEncoding: number, encodingName: string | any): number;

// export function TECGetTextEncodingFromInternetNameOrMIB(textEncodingPtr: number, usage: number, encodingName: string, mibEnum: number): number;

// export function TECGetTextEncodingInternetName(textEncoding: number, encodingName: number): number;

// export function TECGetWebTextEncodings(locale: number, availableEncodings: number, maxAvailableEncodings: number, actualAvailableEncodings: number): number;

// export function TECSetBasicOptions(encodingConverter: any, controlFlags: number): number;

// export function TECSniffTextEncoding(encodingSniffer: any, inputBuffer: string | any, inputBufferLength: number, testEncodings: number, numTextEncodings: number, numErrsArray: number, maxErrs: number, numFeaturesArray: number, maxFeatures: number): number;

// export function TruncateForTextToUnicode(iTextToUnicodeInfo: any, iSourceLen: number, iSourceStr: any, iMaxLen: number, oTruncatedLen: number): number;

// export function TruncateForUnicodeToText(iUnicodeToTextInfo: any, iSourceLen: number, iSourceStr: number, iControlFlags: number, iMaxLen: number, oTruncatedLen: number): number;

// export function U32SetU(value: number): number;

// export function U64Add(left: number, right: number): number;

// export function U64And(left: number, right: number): boolean;

// export function U64BitwiseAnd(left: number, right: number): number;

// export function U64BitwiseEor(left: number, right: number): number;

// export function U64BitwiseNot(value: number): number;

// export function U64BitwiseOr(left: number, right: number): number;

// export function U64Div(dividend: number, divisor: number): number;

// export function U64Divide(dividend: number, divisor: number, remainder: number): number;

// export function U64Eor(left: number, right: number): boolean;

// export function U64Max(): number;

// export function U64Mod(dividend: number, divisor: number): number;

// export function U64Multiply(left: number, right: number): number;

// export function U64Not(value: number): boolean;

// export function U64Or(left: number, right: number): boolean;

// export function U64Set(value: number): number;

// export function U64SetU(value: number): number;

// export function U64ShiftLeft(value: number, shift: number): number;

// export function U64ShiftRight(value: number, shift: number): number;

// export function U64Subtract(left: number, right: number): number;

// export function UCCompareCollationKeys(key1Ptr: number, key1Length: number, key2Ptr: number, key2Length: number, equivalent: string | any, order: number): number;

// export function UCCompareText(collatorRef: any, text1Ptr: number, text1Length: number, text2Ptr: number, text2Length: number, equivalent: string | any, order: number): number;

// export function UCCompareTextDefault(options: number, text1Ptr: number, text1Length: number, text2Ptr: number, text2Length: number, equivalent: string | any, order: number): number;

// export function UCCompareTextNoLocale(options: number, text1Ptr: number, text1Length: number, text2Ptr: number, text2Length: number, equivalent: string | any, order: number): number;

// export function UCConvertCFAbsoluteTimeToLongDateTime(iCFTime: number, oLongDate: number): number;

// export function UCConvertCFAbsoluteTimeToSeconds(iCFTime: number, oSeconds: number): number;

// export function UCConvertCFAbsoluteTimeToUTCDateTime(iCFTime: number, oUTCDate: UTCDateTime): number;

// export function UCConvertLongDateTimeToCFAbsoluteTime(iLongTime: number, oCFTime: number): number;

// export function UCConvertSecondsToCFAbsoluteTime(iSeconds: number, oCFTime: number): number;

// export function UCConvertUTCDateTimeToCFAbsoluteTime(iUTCDate: UTCDateTime, oCFTime: number): number;

// export function UCCreateCollator(locale: any, opVariant: number, options: number, collatorRef: any): number;

// export function UCDisposeCollator(collatorRef: any): number;

// export function UCGetCharProperty(charPtr: number, textLength: number, propType: number, propValue: number): number;

// export function UCGetCollationKey(collatorRef: any, textPtr: number, textLength: number, maxKeySize: number, actualKeySize: number, collationKey: number): number;

// export function UCKeyTranslate(keyLayoutPtr: UCKeyboardLayout, virtualKeyCode: number, keyAction: number, modifierKeyState: number, keyboardType: number, keyTranslateOptions: number, deadKeyState: number, maxStringLength: number, actualStringLength: number, unicodeString: number): number;

// export function UCTypeSelectAddKeyToSelector(inRef: any, inText: string, inEventTime: number, updateFlag: string | any): number;

// export function UCTypeSelectCompare(ref: any, inText: string, result: number): number;

// export function UCTypeSelectCreateSelector(locale: any, opVariant: number, options: number, newSelector: any): number;

// export function UCTypeSelectFindItem(ref: any, listSize: number, listDataPtr: any, refcon: any, userUPP: (p1: number, p2: any, p3: any, p4: string, p5: number) => boolean, closestItem: number): number;

// export function UCTypeSelectFlushSelectorData(ref: any): number;

// export function UCTypeSelectReleaseSelector(ref: any): number;

// export function UCTypeSelectWalkList(ref: any, currSelect: string, direction: number, listSize: number, listDataPtr: any, refcon: any, userUPP: (p1: number, p2: any, p3: any, p4: string, p5: number) => boolean, closestItem: number): number;

// export function UCTypeSelectWouldResetBuffer(inRef: any, inText: string, inEventTime: number): boolean;

// export function UInt64ToLongDouble(value: number): number;

// export function UInt64ToSInt64(value: number): number;

// export function UTCreateStringForOSType(inOSType: number): string;

// export function UTGetOSTypeFromString(inString: string): number;

// export function UTTypeConformsTo(inUTI: string, inConformsToUTI: string): boolean;

// export function UTTypeCopyAllTagsWithClass(inUTI: string, inTagClass: string): any[];

// export function UTTypeCopyDeclaration(inUTI: string): Map<any, any>;

// export function UTTypeCopyDeclaringBundleURL(inUTI: string): URL;

// export function UTTypeCopyDescription(inUTI: string): string;

// export function UTTypeCopyPreferredTagWithClass(inUTI: string, inTagClass: string): string;

// export function UTTypeCreateAllIdentifiersForTag(inTagClass: string, inTag: string, inConformingToUTI: string): any[];

// export function UTTypeCreatePreferredIdentifierForTag(inTagClass: string, inTag: string, inConformingToUTI: string): string;

// export function UTTypeEqual(inUTI1: string, inUTI2: string): boolean;

// export function UTTypeIsDeclared(inUTI: string): boolean;

// export function UTTypeIsDynamic(inUTI: string): boolean;

// export function UpgradeScriptInfoToTextEncoding(iTextScriptID: number, iTextLanguageID: number, iRegionID: number, iTextFontname: string | any, oEncoding: number): number;

// export function dec2numl(d: decimal): number;

// export function ldtox80(x: number, x80: Float80): void;

// export function num2decl(f: decform, x: number, d: decimal): void;

// export function relationl(x: number, y: number): number;

// export function x80told(x80: Float80, x: number): void;

export class CSCustomAttributeKey extends NSObject {
  keyName: string;
  isMultiValued: boolean;
  isSearchable: boolean;
  isSearchableByDefault: boolean;
  isUnique: boolean;
  static createWithKeyName(_: string): CSCustomAttributeKey;
  static createWithKeyNameWithSearchableWithSearchableByDefaultWithUniqueWithMultiValued(_: string, searchable: boolean, searchableByDefault: boolean, unique: boolean, multiValued: boolean): CSCustomAttributeKey;
}

export class CSIndexExtensionRequestHandler extends NSObject {
}

export class CSLocalizedString extends NSString {
  //  static createWithObjectWithItemProviderDataTypeIdentifier(typeIdentifier: Data, error: string): CSLocalizedString;
  //  static createWithStringWithCStringEncoding(_: string, encoding: number): CSLocalizedString;
  //  static createWithStringWithCharactersLength(_: string, length: number): CSLocalizedString;
  //  static createWithStringWithContentsOfFileEncoding(encoding: string, error: number): CSLocalizedString;
  //  static createWithStringWithContentsOfFileUsedEncoding(usedEncoding: string, error?: number): CSLocalizedString;
  //  static createWithStringWithContentsOfURLEncoding(encoding: URL, error: number): CSLocalizedString;
  //  static createWithStringWithContentsOfURLUsedEncoding(usedEncoding: URL, error?: number): CSLocalizedString;
  //  static createWithStringWithString(_: string): CSLocalizedString;
  //  static createWithStringWithUTF8String(_: string): CSLocalizedString;
  static createWithLocalizedStrings(_: Map<any, any>): CSLocalizedString;
  localizedString(): string;
}

export class CSPerson extends NSObject {
  contactIdentifier: string;
  setContactIdentifier(_: string);
  displayName: string;
  handleIdentifier: string;
  handles: string[];
  static createWithDisplayNameWithHandlesWithHandleIdentifier(_?: string, handles?: string[], handleIdentifier?: string): CSPerson;
}

export class CSSearchQuery extends NSObject {
  isCancelled: boolean;
  completionHandler: (p1: Error) => void;
  setCompletionHandler(_: (p1: Error) => void);
  foundItemCount: number;
  foundItemsHandler: (p1: CSSearchableItem[]) => void;
  setFoundItemsHandler(_: (p1: CSSearchableItem[]) => void);
  protectionClasses: string[];
  setProtectionClasses(_: string[]);
  cancel(): void;
  static createWithQueryStringWithAttributes(_: string, attributes?: string[]): CSSearchQuery;
  start(): void;
}

export class CSSearchableIndex extends NSObject {
  static createWithDefaultSearchableIndex(): CSSearchableIndex;
  static isIndexingAvailable(): boolean;
  indexDelegate: any;
  setIndexDelegate(_: any);
  beginIndexBatch(): void;
  deleteAllSearchableItemsWithCompletionHandler(_?: (p1: Error) => void): void;
  deleteSearchableItemsWithDomainIdentifiers(_: string[], completionHandler?: (p1: Error) => void): void;
  deleteSearchableItemsWithIdentifiers(_: string[], completionHandler?: (p1: Error) => void): void;
  endIndexBatchWithClientState(_: Data, completionHandler?: (p1: Error) => void): void;
  fetchLastClientStateWithCompletionHandler(_?: (p1: Data, p2: Error) => void): void;
  indexSearchableItems(_: CSSearchableItem[], completionHandler?: (p1: Error) => void): void;
  static createWithName(_: string): CSSearchableIndex;
  static createWithNameWithProtectionClass(_: string, protectionClass?: string): CSSearchableIndex;
}

interface CSSearchableIndexDelegate {
  dataForSearchableIndex(itemIdentifier: CSSearchableIndex, typeIdentifier: string, error: string): Data;
  fileURLForSearchableIndex(itemIdentifier: CSSearchableIndex, typeIdentifier: string, inPlace: string, error: boolean): URL;
  searchableIndex(_: CSSearchableIndex, reindexAllSearchableItemsWithAcknowledgementHandler: () => void): void;
  searchableIndex(_: CSSearchableIndex, reindexSearchableItemsWithIdentifiers: string[], acknowledgementHandler: () => void): void;
  searchableIndexDidFinishThrottle(_: CSSearchableIndex): void;
  searchableIndexDidThrottle(_: CSSearchableIndex): void;
}

export class CSSearchableItem extends NSObject {
  attributeSet: CSSearchableItemAttributeSet;
  setAttributeSet(_: CSSearchableItemAttributeSet);
  domainIdentifier: string;
  setDomainIdentifier(_: string);
  expirationDate: Date;
  setExpirationDate(_: Date);
  uniqueIdentifier: string;
  setUniqueIdentifier(_: string);
  static createWithUniqueIdentifierWithDomainIdentifierWithAttributeSet(_?: string, domainIdentifier?: string, attributeSet?: CSSearchableItemAttributeSet): CSSearchableItem;
}

export class CSSearchableItemAttributeSet extends NSObject {
  EXIFGPSVersion: string;
  setEXIFGPSVersion(_: string);
  EXIFVersion: string;
  setEXIFVersion(_: string);
  GPSAreaInformation: string;
  setGPSAreaInformation(_: string);
  GPSDOP: number;
  setGPSDOP(_: number);
  GPSDateStamp: Date;
  setGPSDateStamp(_: Date);
  GPSDestBearing: number;
  setGPSDestBearing(_: number);
  GPSDestDistance: number;
  setGPSDestDistance(_: number);
  GPSDestLatitude: number;
  setGPSDestLatitude(_: number);
  GPSDestLongitude: number;
  setGPSDestLongitude(_: number);
  GPSDifferental: number;
  setGPSDifferental(_: number);
  GPSMapDatum: string;
  setGPSMapDatum(_: string);
  GPSMeasureMode: string;
  setGPSMeasureMode(_: string);
  GPSProcessingMethod: string;
  setGPSProcessingMethod(_: string);
  GPSStatus: string;
  setGPSStatus(_: string);
  GPSTrack: number;
  setGPSTrack(_: number);
  HTMLContentData: Data;
  setHTMLContentData(_: Data);
  ISOSpeed: number;
  setISOSpeed(_: number);
  URL: URL;
  setURL(_: URL);
  accountHandles: string[];
  setAccountHandles(_: string[]);
  accountIdentifier: string;
  setAccountIdentifier(_: string);
  acquisitionMake: string;
  setAcquisitionMake(_: string);
  acquisitionModel: string;
  setAcquisitionModel(_: string);
  addedDate: Date;
  setAddedDate(_: Date);
  additionalRecipients: CSPerson[];
  setAdditionalRecipients(_: CSPerson[]);
  album: string;
  setAlbum(_: string);
  allDay: number;
  setAllDay(_: number);
  alternateNames: string[];
  setAlternateNames(_: string[]);
  altitude: number;
  setAltitude(_: number);
  aperture: number;
  setAperture(_: number);
  artist: string;
  setArtist(_: string);
  audiences: string[];
  setAudiences(_: string[]);
  audioBitRate: number;
  setAudioBitRate(_: number);
  audioChannelCount: number;
  setAudioChannelCount(_: number);
  audioEncodingApplication: string;
  setAudioEncodingApplication(_: string);
  audioSampleRate: number;
  setAudioSampleRate(_: number);
  audioTrackNumber: number;
  setAudioTrackNumber(_: number);
  authorAddresses: string[];
  setAuthorAddresses(_: string[]);
  authorEmailAddresses: string[];
  setAuthorEmailAddresses(_: string[]);
  authorNames: string[];
  setAuthorNames(_: string[]);
  authors: CSPerson[];
  setAuthors(_: CSPerson[]);
  bitsPerSample: number;
  setBitsPerSample(_: number);
  cameraOwner: string;
  setCameraOwner(_: string);
  city: string;
  setCity(_: string);
  codecs: string[];
  setCodecs(_: string[]);
  colorSpace: string;
  setColorSpace(_: string);
  comment: string;
  setComment(_: string);
  completionDate: Date;
  setCompletionDate(_: Date);
  composer: string;
  setComposer(_: string);
  contactKeywords: string[];
  setContactKeywords(_: string[]);
  containerDisplayName: string;
  setContainerDisplayName(_: string);
  containerIdentifier: string;
  setContainerIdentifier(_: string);
  containerOrder: number;
  setContainerOrder(_: number);
  containerTitle: string;
  setContainerTitle(_: string);
  contentCreationDate: Date;
  setContentCreationDate(_: Date);
  contentDescription: string;
  setContentDescription(_: string);
  contentModificationDate: Date;
  setContentModificationDate(_: Date);
  contentRating: number;
  setContentRating(_: number);
  contentSources: string[];
  setContentSources(_: string[]);
  contentType: string;
  setContentType(_: string);
  contentTypeTree: string[];
  setContentTypeTree(_: string[]);
  contentURL: URL;
  setContentURL(_: URL);
  contributors: string[];
  setContributors(_: string[]);
  copyright: string;
  setCopyright(_: string);
  country: string;
  setCountry(_: string);
  coverage: string[];
  setCoverage(_: string[]);
  creator: string;
  setCreator(_: string);
  deliveryType: number;
  setDeliveryType(_: number);
  director: string;
  setDirector(_: string);
  displayName: string;
  setDisplayName(_: string);
  domainIdentifier: string;
  setDomainIdentifier(_: string);
  downloadedDate: Date;
  setDownloadedDate(_: Date);
  dueDate: Date;
  setDueDate(_: Date);
  duration: number;
  setDuration(_: number);
  editors: string[];
  setEditors(_: string[]);
  emailAddresses: string[];
  setEmailAddresses(_: string[]);
  emailHeaders: Map<string, any[]>;
  setEmailHeaders(_: Map<string, any[]>);
  encodingApplications: string[];
  setEncodingApplications(_: string[]);
  endDate: Date;
  setEndDate(_: Date);
  exposureMode: number;
  setExposureMode(_: number);
  exposureProgram: string;
  setExposureProgram(_: string);
  exposureTime: number;
  setExposureTime(_: number);
  exposureTimeString: string;
  setExposureTimeString(_: string);
  fNumber: number;
  setFNumber(_: number);
  fileSize: number;
  setFileSize(_: number);
  isFlashOn: number;
  setFlashOn(_: number);
  focalLength: number;
  setFocalLength(_: number);
  isFocalLength35mm: number;
  setFocalLength35mm(_: number);
  fontNames: string[];
  setFontNames(_: string[]);
  fullyFormattedAddress: string;
  setFullyFormattedAddress(_: string);
  isGeneralMIDISequence: number;
  setGeneralMIDISequence(_: number);
  genre: string;
  setGenre(_: string);
  hasAlphaChannel: number;
  setHasAlphaChannel(_: number);
  headline: string;
  setHeadline(_: string);
  hiddenAdditionalRecipients: CSPerson[];
  setHiddenAdditionalRecipients(_: CSPerson[]);
  identifier: string;
  setIdentifier(_: string);
  imageDirection: number;
  setImageDirection(_: number);
  importantDates: Date[];
  setImportantDates(_: Date[]);
  information: string;
  setInformation(_: string);
  instantMessageAddresses: string[];
  setInstantMessageAddresses(_: string[]);
  instructions: string;
  setInstructions(_: string);
  keySignature: string;
  setKeySignature(_: string);
  keywords: string[];
  setKeywords(_: string[]);
  kind: string;
  setKind(_: string);
  languages: string[];
  setLanguages(_: string[]);
  lastUsedDate: Date;
  setLastUsedDate(_: Date);
  latitude: number;
  setLatitude(_: number);
  layerNames: string[];
  setLayerNames(_: string[]);
  lensModel: string;
  setLensModel(_: string);
  isLikelyJunk: number;
  setLikelyJunk(_: number);
  isLocal: number;
  setLocal(_: number);
  longitude: number;
  setLongitude(_: number);
  lyricist: string;
  setLyricist(_: string);
  mailboxIdentifiers: string[];
  setMailboxIdentifiers(_: string[]);
  maxAperture: number;
  setMaxAperture(_: number);
  mediaTypes: string[];
  setMediaTypes(_: string[]);
  metadataModificationDate: Date;
  setMetadataModificationDate(_: Date);
  meteringMode: string;
  setMeteringMode(_: string);
  musicalGenre: string;
  setMusicalGenre(_: string);
  musicalInstrumentCategory: string;
  setMusicalInstrumentCategory(_: string);
  musicalInstrumentName: string;
  setMusicalInstrumentName(_: string);
  namedLocation: string;
  setNamedLocation(_: string);
  organizations: string[];
  setOrganizations(_: string[]);
  orientation: number;
  setOrientation(_: number);
  originalFormat: string;
  setOriginalFormat(_: string);
  originalSource: string;
  setOriginalSource(_: string);
  pageCount: number;
  setPageCount(_: number);
  pageHeight: number;
  setPageHeight(_: number);
  pageWidth: number;
  setPageWidth(_: number);
  participants: string[];
  setParticipants(_: string[]);
  path: string;
  setPath(_: string);
  performers: string[];
  setPerformers(_: string[]);
  phoneNumbers: string[];
  setPhoneNumbers(_: string[]);
  pixelCount: number;
  setPixelCount(_: number);
  pixelHeight: number;
  setPixelHeight(_: number);
  pixelWidth: number;
  setPixelWidth(_: number);
  playCount: number;
  setPlayCount(_: number);
  postalCode: string;
  setPostalCode(_: string);
  primaryRecipients: CSPerson[];
  setPrimaryRecipients(_: CSPerson[]);
  producer: string;
  setProducer(_: string);
  profileName: string;
  setProfileName(_: string);
  projects: string[];
  setProjects(_: string[]);
  providerDataTypeIdentifiers: string[];
  setProviderDataTypeIdentifiers(_: string[]);
  providerFileTypeIdentifiers: string[];
  setProviderFileTypeIdentifiers(_: string[]);
  providerInPlaceFileTypeIdentifiers: string[];
  setProviderInPlaceFileTypeIdentifiers(_: string[]);
  publishers: string[];
  setPublishers(_: string[]);
  rankingHint: number;
  setRankingHint(_: number);
  rating: number;
  setRating(_: number);
  ratingDescription: string;
  setRatingDescription(_: string);
  recipientAddresses: string[];
  setRecipientAddresses(_: string[]);
  recipientEmailAddresses: string[];
  setRecipientEmailAddresses(_: string[]);
  recipientNames: string[];
  setRecipientNames(_: string[]);
  recordingDate: Date;
  setRecordingDate(_: Date);
  isRedEyeOn: number;
  setRedEyeOn(_: number);
  relatedUniqueIdentifier: string;
  setRelatedUniqueIdentifier(_: string);
  resolutionHeightDPI: number;
  setResolutionHeightDPI(_: number);
  resolutionWidthDPI: number;
  setResolutionWidthDPI(_: number);
  rights: string;
  setRights(_: string);
  role: string;
  setRole(_: string);
  securityMethod: string;
  setSecurityMethod(_: string);
  speed: number;
  setSpeed(_: number);
  startDate: Date;
  setStartDate(_: Date);
  stateOrProvince: string;
  setStateOrProvince(_: string);
  isStreamable: number;
  setStreamable(_: number);
  subThoroughfare: string;
  setSubThoroughfare(_: string);
  subject: string;
  setSubject(_: string);
  supportsNavigation: number;
  setSupportsNavigation(_: number);
  supportsPhoneCall: number;
  setSupportsPhoneCall(_: number);
  tempo: number;
  setTempo(_: number);
  textContent: string;
  setTextContent(_: string);
  theme: string;
  setTheme(_: string);
  thoroughfare: string;
  setThoroughfare(_: string);
  thumbnailData: Data;
  setThumbnailData(_: Data);
  thumbnailURL: URL;
  setThumbnailURL(_: URL);
  timeSignature: string;
  setTimeSignature(_: string);
  timestamp: Date;
  setTimestamp(_: Date);
  title: string;
  setTitle(_: string);
  totalBitRate: number;
  setTotalBitRate(_: number);
  isUserCreated: number;
  setUserCreated(_: number);
  isUserCurated: number;
  setUserCurated(_: number);
  isUserOwned: number;
  setUserOwned(_: number);
  videoBitRate: number;
  setVideoBitRate(_: number);
  weakRelatedUniqueIdentifier: string;
  setWeakRelatedUniqueIdentifier(_: string);
  whiteBalance: number;
  setWhiteBalance(_: number);
  static createWithItemContentType(_: string): CSSearchableItemAttributeSet;
  // @ts-ignore 
  setValue(_?: any, forCustomKey?: CSCustomAttributeKey): void;
  valueForCustomKey(_: CSCustomAttributeKey): any;
}

// export function CTFontCollectionCopyExclusionDescriptors(collection: NSFontCollection): any[];

// export function CTFontCollectionCopyFontAttribute(collection: NSFontCollection, attributeName: string, options: CTFontCollection.CTFontCollectionCopyOptions): any[];

// export function CTFontCollectionCopyFontAttributes(collection: NSFontCollection, attributeNames: Set<any>, options: CTFontCollection.CTFontCollectionCopyOptions): any[];

// export function CTFontCollectionCopyQueryDescriptors(collection: NSFontCollection): any[];

// export function CTFontCollectionCreateCopyWithFontDescriptors(original: NSFontCollection, queryDescriptors: any[], options: Map<any, any>): NSFontCollection;

// export function CTFontCollectionCreateFromAvailableFonts(options: Map<any, any>): NSFontCollection;

// export function CTFontCollectionCreateMatchingFontDescriptors(collection: NSFontCollection): any[];

// export function CTFontCollectionCreateMatchingFontDescriptorsForFamily(collection: NSFontCollection, familyName: string, options: Map<any, any>): any[];

// export function CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(collection: NSFontCollection, sortCallback: (p1: NSFontDescriptor, p2: NSFontDescriptor, p3: any) => CFBase.CFComparisonResult, refCon: any): any[];

// export function CTFontCollectionCreateMatchingFontDescriptorsWithOptions(collection: NSFontCollection, options: Map<any, any>): any[];

// export function CTFontCollectionCreateMutableCopy(original: NSFontCollection): NSFontCollection;

// export function CTFontCollectionCreateWithFontDescriptors(queryDescriptors: any[], options: Map<any, any>): NSFontCollection;

// export function CTFontCollectionGetTypeID(): number;

// export function CTFontCollectionSetExclusionDescriptors(collection: NSFontCollection, descriptors: any[]): void;

// export function CTFontCollectionSetQueryDescriptors(collection: NSFontCollection, descriptors: any[]): void;

// export function CTFontCopyAttribute(font: NSFont, attribute: string): any;

// export function CTFontCopyAvailableTables(font: NSFont, options: CTFont.CTFontTableOptions): any[];

// export function CTFontCopyCharacterSet(font: NSFont): CharacterSet;

// export function CTFontCopyDefaultCascadeListForLanguages(font: NSFont, languagePrefList: any[]): any[];

// export function CTFontCopyDisplayName(font: NSFont): string;

// export function CTFontCopyFamilyName(font: NSFont): string;

// export function CTFontCopyFeatureSettings(font: NSFont): any[];

// export function CTFontCopyFeatures(font: NSFont): any[];

// export function CTFontCopyFontDescriptor(font: NSFont): NSFontDescriptor;

// export function CTFontCopyFullName(font: NSFont): string;

// export function CTFontCopyGraphicsFont(font: NSFont, attributes: NSFontDescriptor): any;

// export function CTFontCopyLocalizedName(font: NSFont, nameKey: string, actualLanguage: string): string;

// export function CTFontCopyName(font: NSFont, nameKey: string): string;

// export function CTFontCopyPostScriptName(font: NSFont): string;

// export function CTFontCopySupportedLanguages(font: NSFont): any[];

// export function CTFontCopyTable(font: NSFont, table: number, options: CTFont.CTFontTableOptions): Data;

// export function CTFontCopyTraits(font: NSFont): Map<any, any>;

// export function CTFontCopyVariation(font: NSFont): Map<any, any>;

// export function CTFontCopyVariationAxes(font: NSFont): any[];

// export function CTFontCreateCopyWithAttributes(font: NSFont, size: number, matrix: CGAffineTransform, attributes: NSFontDescriptor): NSFont;

// export function CTFontCreateCopyWithFamily(font: NSFont, size: number, matrix: CGAffineTransform, family: string): NSFont;

// export function CTFontCreateCopyWithSymbolicTraits(font: NSFont, size: number, matrix: CGAffineTransform, symTraitValue: CTFontTraits.CTFontSymbolicTraits, symTraitMask: CTFontTraits.CTFontSymbolicTraits): NSFont;

// export function CTFontCreateForString(currentFont: NSFont, string: string, range: CFRange): NSFont;

// export function CTFontCreateForStringWithLanguage(currentFont: NSFont, string: string, range: CFRange, language: string): NSFont;

// export function CTFontCreatePathForGlyph(font: NSFont, glyph: number, matrix: CGAffineTransform): any;

// export function CTFontCreateUIFontForLanguage(uiType: CTFont.CTFontUIFontType, size: number, language: string): NSFont;

// export function CTFontCreateWithFontDescriptor(descriptor: NSFontDescriptor, size: number, matrix: CGAffineTransform): NSFont;

// export function CTFontCreateWithFontDescriptorAndOptions(descriptor: NSFontDescriptor, size: number, matrix: CGAffineTransform, options: CTFont.CTFontOptions): NSFont;

// export function CTFontCreateWithGraphicsFont(graphicsFont: any, size: number, matrix: CGAffineTransform, attributes: NSFontDescriptor): NSFont;

// export function CTFontCreateWithName(name: string, size: number, matrix: CGAffineTransform): NSFont;

// export function CTFontCreateWithNameAndOptions(name: string, size: number, matrix: CGAffineTransform, options: CTFont.CTFontOptions): NSFont;

// export function CTFontCreateWithPlatformFont(platformFont: number, size: number, matrix: CGAffineTransform, attributes: NSFontDescriptor): NSFont;

// export function CTFontDescriptorCopyAttribute(descriptor: NSFontDescriptor, attribute: string): any;

// export function CTFontDescriptorCopyAttributes(descriptor: NSFontDescriptor): Map<any, any>;

// export function CTFontDescriptorCopyLocalizedAttribute(descriptor: NSFontDescriptor, attribute: string, language: string): any;

// export function CTFontDescriptorCreateCopyWithAttributes(original: NSFontDescriptor, attributes: Map<any, any>): NSFontDescriptor;

// export function CTFontDescriptorCreateCopyWithFamily(original: NSFontDescriptor, family: string): NSFontDescriptor;

// export function CTFontDescriptorCreateCopyWithFeature(original: NSFontDescriptor, featureTypeIdentifier: number, featureSelectorIdentifier: number): NSFontDescriptor;

// export function CTFontDescriptorCreateCopyWithSymbolicTraits(original: NSFontDescriptor, symTraitValue: CTFontTraits.CTFontSymbolicTraits, symTraitMask: CTFontTraits.CTFontSymbolicTraits): NSFontDescriptor;

// export function CTFontDescriptorCreateCopyWithVariation(original: NSFontDescriptor, variationIdentifier: number, variationValue: number): NSFontDescriptor;

// export function CTFontDescriptorCreateMatchingFontDescriptor(descriptor: NSFontDescriptor, mandatoryAttributes: Set<any>): NSFontDescriptor;

// export function CTFontDescriptorCreateMatchingFontDescriptors(descriptor: NSFontDescriptor, mandatoryAttributes: Set<any>): any[];

// export function CTFontDescriptorCreateWithAttributes(attributes: Map<any, any>): NSFontDescriptor;

// export function CTFontDescriptorCreateWithNameAndSize(name: string, size: number): NSFontDescriptor;

// export function CTFontDescriptorGetTypeID(): number;

// export function CTFontDescriptorMatchFontDescriptorsWithProgressHandler(descriptors: any[], mandatoryAttributes: Set<any>, progressBlock: (p1: CTFontDescriptor.CTFontDescriptorMatchingState, p2: Map<any, any>) => boolean): boolean;

// export function CTFontDrawGlyphs(font: NSFont, glyphs: number, positions: CGPoint, count: number, context: any): void;

// export function CTFontGetAdvancesForGlyphs(font: NSFont, orientation: CTFontDescriptor.CTFontOrientation, glyphs: number, advances: CGSize, count: number): number;

// export function CTFontGetAscent(font: NSFont): number;

// export function CTFontGetBoundingBox(font: NSFont): CGRect;

// export function CTFontGetBoundingRectsForGlyphs(font: NSFont, orientation: CTFontDescriptor.CTFontOrientation, glyphs: number, boundingRects: CGRect, count: number): CGRect;

// export function CTFontGetCapHeight(font: NSFont): number;

// export function CTFontGetDescent(font: NSFont): number;

// export function CTFontGetGlyphCount(font: NSFont): number;

// export function CTFontGetGlyphWithName(font: NSFont, glyphName: string): number;

// export function CTFontGetGlyphsForCharacters(font: NSFont, characters: number, glyphs: number, count: number): boolean;

// export function CTFontGetLeading(font: NSFont): number;

// export function CTFontGetLigatureCaretPositions(font: NSFont, glyph: number, positions: number, maxPositions: number): number;

// export function CTFontGetMatrix(font: NSFont): CGAffineTransform;

// export function CTFontGetOpticalBoundsForGlyphs(font: NSFont, glyphs: number, boundingRects: CGRect, count: number, options: number): CGRect;

// export function CTFontGetPlatformFont(font: NSFont, attributes: NSFontDescriptor): number;

// export function CTFontGetSize(font: NSFont): number;

// export function CTFontGetSlantAngle(font: NSFont): number;

// export function CTFontGetStringEncoding(font: NSFont): number;

// export function CTFontGetSymbolicTraits(font: NSFont): CTFontTraits.CTFontSymbolicTraits;

// export function CTFontGetTypeID(): number;

// export function CTFontGetUnderlinePosition(font: NSFont): number;

// export function CTFontGetUnderlineThickness(font: NSFont): number;

// export function CTFontGetUnitsPerEm(font: NSFont): number;

// export function CTFontGetVerticalTranslationsForGlyphs(font: NSFont, glyphs: number, translations: CGSize, count: number): void;

// export function CTFontGetXHeight(font: NSFont): number;

// export function CTFontManagerCompareFontFamilyNames(family1: any, family2: any, context: any): CFBase.CFComparisonResult;

// export function CTFontManagerCopyAvailableFontFamilyNames(): any[];

// export function CTFontManagerCopyAvailableFontURLs(): any[];

// export function CTFontManagerCopyAvailablePostScriptNames(): any[];

// export function CTFontManagerCopyRegisteredFontDescriptors(scope: CTFontManager.CTFontManagerScope, enabled: boolean): any[];

// export function CTFontManagerCreateFontDescriptorFromData(data: Data): NSFontDescriptor;

// export function CTFontManagerCreateFontDescriptorsFromData(data: Data): any[];

// export function CTFontManagerCreateFontDescriptorsFromURL(fileURL: URL): any[];

// export function CTFontManagerCreateFontRequestRunLoopSource(sourceOrder: number, createMatchesCallback: (p1: Map<any, any>, p2: number) => any[]): any;

// export function CTFontManagerEnableFontDescriptors(descriptors: any[], enable: boolean): void;

// export function CTFontManagerGetAutoActivationSetting(bundleIdentifier: string): CTFontManager.CTFontManagerAutoActivationSetting;

// export function CTFontManagerGetScopeForURL(fontURL: URL): CTFontManager.CTFontManagerScope;

// export function CTFontManagerIsSupportedFont(fontURL: URL): boolean;

// export function CTFontManagerRegisterFontDescriptors(fontDescriptors: any[], scope: CTFontManager.CTFontManagerScope, enabled: boolean, registrationHandler: (p1: any[], p2: boolean) => boolean): void;

// export function CTFontManagerRegisterFontURLs(fontURLs: any[], scope: CTFontManager.CTFontManagerScope, enabled: boolean, registrationHandler: (p1: any[], p2: boolean) => boolean): void;

// export function CTFontManagerRegisterFontsForURL(fontURL: URL, scope: CTFontManager.CTFontManagerScope, error: Error): boolean;

// export function CTFontManagerRegisterFontsWithAssetNames(fontAssetNames: any[], bundle: any, scope: CTFontManager.CTFontManagerScope, enabled: boolean, registrationHandler: (p1: any[], p2: boolean) => boolean): void;

// export function CTFontManagerRegisterGraphicsFont(font: any, error: Error): boolean;

// export function CTFontManagerRequestFonts(fontDescriptors: any[], completionHandler: (p1: any[]) => void): void;

// export function CTFontManagerSetAutoActivationSetting(bundleIdentifier: string, setting: CTFontManager.CTFontManagerAutoActivationSetting): void;

// export function CTFontManagerUnregisterFontDescriptors(fontDescriptors: any[], scope: CTFontManager.CTFontManagerScope, registrationHandler: (p1: any[], p2: boolean) => boolean): void;

// export function CTFontManagerUnregisterFontURLs(fontURLs: any[], scope: CTFontManager.CTFontManagerScope, registrationHandler: (p1: any[], p2: boolean) => boolean): void;

// export function CTFontManagerUnregisterFontsForURL(fontURL: URL, scope: CTFontManager.CTFontManagerScope, error: Error): boolean;

// export function CTFontManagerUnregisterGraphicsFont(font: any, error: Error): boolean;

// export function CTFrameDraw(frame: any, context: any): void;

// export function CTFrameGetFrameAttributes(frame: any): Map<any, any>;

// export function CTFrameGetLineOrigins(frame: any, range: CFRange, origins: CGPoint): void;

// export function CTFrameGetLines(frame: any): any[];

// export function CTFrameGetPath(frame: any): any;

// export function CTFrameGetStringRange(frame: any): CFRange;

// export function CTFrameGetTypeID(): number;

// export function CTFrameGetVisibleStringRange(frame: any): CFRange;

// export function CTFramesetterCreateFrame(framesetter: any, stringRange: CFRange, path: any, frameAttributes: Map<any, any>): any;

// export function CTFramesetterCreateWithAttributedString(attrString: NSAttributedString): any;

// export function CTFramesetterCreateWithTypesetter(typesetter: any): any;

// export function CTFramesetterGetTypeID(): number;

// export function CTFramesetterGetTypesetter(framesetter: any): any;

// export function CTFramesetterSuggestFrameSizeWithConstraints(framesetter: any, stringRange: CFRange, frameAttributes: Map<any, any>, constraints: CGSize, fitRange: CFRange): CGSize;

// export function CTGetCoreTextVersion(): number;

// export function CTGlyphInfoCreateWithCharacterIdentifier(cid: number, collection: CTGlyphInfo.CTCharacterCollection, baseString: string): NSGlyphInfo;

// export function CTGlyphInfoCreateWithGlyph(glyph: number, font: NSFont, baseString: string): NSGlyphInfo;

// export function CTGlyphInfoCreateWithGlyphName(glyphName: string, font: NSFont, baseString: string): NSGlyphInfo;

// export function CTGlyphInfoGetCharacterCollection(glyphInfo: NSGlyphInfo): CTGlyphInfo.CTCharacterCollection;

// export function CTGlyphInfoGetCharacterIdentifier(glyphInfo: NSGlyphInfo): number;

// export function CTGlyphInfoGetGlyph(glyphInfo: NSGlyphInfo): number;

// export function CTGlyphInfoGetGlyphName(glyphInfo: NSGlyphInfo): string;

// export function CTGlyphInfoGetTypeID(): number;

// export function CTLineCreateJustifiedLine(line: any, justificationFactor: number, justificationWidth: number): any;

// export function CTLineCreateTruncatedLine(line: any, width: number, truncationType: CTLine.CTLineTruncationType, truncationToken: any): any;

// export function CTLineCreateWithAttributedString(attrString: NSAttributedString): any;

// export function CTLineDraw(line: any, context: any): void;

// export function CTLineEnumerateCaretOffsets(line: any, block: (p1: number, p2: number, p3: boolean, p4: boolean) => void): void;

// export function CTLineGetBoundsWithOptions(line: any, options: CTLine.CTLineBoundsOptions): CGRect;

// export function CTLineGetGlyphCount(line: any): number;

// export function CTLineGetGlyphRuns(line: any): any[];

// export function CTLineGetImageBounds(line: any, context: any): CGRect;

// export function CTLineGetOffsetForStringIndex(line: any, charIndex: number, secondaryOffset: number): number;

// export function CTLineGetPenOffsetForFlush(line: any, flushFactor: number, flushWidth: number): number;

// export function CTLineGetStringIndexForPosition(line: any, position: CGPoint): number;

// export function CTLineGetStringRange(line: any): CFRange;

// export function CTLineGetTrailingWhitespaceWidth(line: any): number;

// export function CTLineGetTypeID(): number;

// export function CTLineGetTypographicBounds(line: any, ascent: number, descent: number, leading: number): number;

// export function CTParagraphStyleCreate(settings: CTParagraphStyleSetting, settingCount: number): any;

// export function CTParagraphStyleCreateCopy(paragraphStyle: any): any;

// export function CTParagraphStyleGetTypeID(): number;

// export function CTParagraphStyleGetValueForSpecifier(paragraphStyle: any, spec: CTParagraphStyle.CTParagraphStyleSpecifier, valueBufferSize: number, valueBuffer: any): boolean;

// export function CTRubyAnnotationCreate(alignment: CTRubyAnnotation.CTRubyAlignment, overhang: CTRubyAnnotation.CTRubyOverhang, sizeFactor: number, text: string): any;

// export function CTRubyAnnotationCreateCopy(rubyAnnotation: any): any;

// export function CTRubyAnnotationCreateWithAttributes(alignment: CTRubyAnnotation.CTRubyAlignment, overhang: CTRubyAnnotation.CTRubyOverhang, position: CTRubyAnnotation.CTRubyPosition, string: string, attributes: Map<any, any>): any;

// export function CTRubyAnnotationGetAlignment(rubyAnnotation: any): CTRubyAnnotation.CTRubyAlignment;

// export function CTRubyAnnotationGetOverhang(rubyAnnotation: any): CTRubyAnnotation.CTRubyOverhang;

// export function CTRubyAnnotationGetSizeFactor(rubyAnnotation: any): number;

// export function CTRubyAnnotationGetTextForPosition(rubyAnnotation: any, position: CTRubyAnnotation.CTRubyPosition): string;

// export function CTRubyAnnotationGetTypeID(): number;

// export function CTRunDelegateCreate(callbacks: CTRunDelegateCallbacks, refCon: any): any;

// export function CTRunDelegateGetRefCon(runDelegate: any): any;

// export function CTRunDelegateGetTypeID(): number;

// export function CTRunDraw(run: any, context: any, range: CFRange): void;

// export function CTRunGetAdvances(run: any, range: CFRange, buffer: CGSize): void;

// export function CTRunGetAdvancesPtr(run: any): CGSize;

// export function CTRunGetAttributes(run: any): Map<any, any>;

// export function CTRunGetBaseAdvancesAndOrigins(runRef: any, range: CFRange, advancesBuffer: CGSize, originsBuffer: CGPoint): void;

// export function CTRunGetGlyphCount(run: any): number;

// export function CTRunGetGlyphs(run: any, range: CFRange, buffer: number): void;

// export function CTRunGetGlyphsPtr(run: any): number;

// export function CTRunGetImageBounds(run: any, context: any, range: CFRange): CGRect;

// export function CTRunGetPositions(run: any, range: CFRange, buffer: CGPoint): void;

// export function CTRunGetPositionsPtr(run: any): CGPoint;

// export function CTRunGetStatus(run: any): CTRun.CTRunStatus;

// export function CTRunGetStringIndices(run: any, range: CFRange, buffer: number): void;

// export function CTRunGetStringIndicesPtr(run: any): number;

// export function CTRunGetStringRange(run: any): CFRange;

// export function CTRunGetTextMatrix(run: any): CGAffineTransform;

// export function CTRunGetTypeID(): number;

// export function CTRunGetTypographicBounds(run: any, range: CFRange, ascent: number, descent: number, leading: number): number;

// export function CTTextTabCreate(alignment: CTParagraphStyle.CTTextAlignment, location: number, options: Map<any, any>): any;

// export function CTTextTabGetAlignment(tab: any): CTParagraphStyle.CTTextAlignment;

// export function CTTextTabGetLocation(tab: any): number;

// export function CTTextTabGetOptions(tab: any): Map<any, any>;

// export function CTTextTabGetTypeID(): number;

// export function CTTypesetterCreateLine(typesetter: any, stringRange: CFRange): any;

// export function CTTypesetterCreateLineWithOffset(typesetter: any, stringRange: CFRange, offset: number): any;

// export function CTTypesetterCreateWithAttributedString(string: NSAttributedString): any;

// export function CTTypesetterCreateWithAttributedStringAndOptions(string: NSAttributedString, options: Map<any, any>): any;

// export function CTTypesetterGetTypeID(): number;

// export function CTTypesetterSuggestClusterBreak(typesetter: any, startIndex: number, width: number): number;

// export function CTTypesetterSuggestClusterBreakWithOffset(typesetter: any, startIndex: number, width: number, offset: number): number;

// export function CTTypesetterSuggestLineBreak(typesetter: any, startIndex: number, width: number): number;

// export function CTTypesetterSuggestLineBreakWithOffset(typesetter: any, startIndex: number, width: number, offset: number): number;

// export function CVBufferGetAttachment(buffer: any, key: string, attachmentMode: CVBuffer.CVAttachmentMode): any;

// export function CVBufferGetAttachments(buffer: any, attachmentMode: CVBuffer.CVAttachmentMode): Map<any, any>;

// export function CVBufferPropagateAttachments(sourceBuffer: any, destinationBuffer: any): void;

// export function CVBufferRelease(buffer: any): void;

// export function CVBufferRemoveAllAttachments(buffer: any): void;

// export function CVBufferRemoveAttachment(buffer: any, key: string): void;

// export function CVBufferRetain(buffer: any): any;

// export function CVBufferSetAttachment(buffer: any, key: string, value: any, attachmentMode: CVBuffer.CVAttachmentMode): void;

// export function CVBufferSetAttachments(buffer: any, theAttachments: Map<any, any>, attachmentMode: CVBuffer.CVAttachmentMode): void;

// export function CVColorPrimariesGetIntegerCodePointForString(colorPrimariesString: string): number;

// export function CVColorPrimariesGetStringForIntegerCodePoint(colorPrimariesCodePoint: number): string;

// export function CVDisplayLinkCreateWithActiveCGDisplays(displayLinkOut: any): number;

// export function CVDisplayLinkCreateWithCGDisplay(displayID: number, displayLinkOut: any): number;

// export function CVDisplayLinkCreateWithCGDisplays(displayArray: number, count: number, displayLinkOut: any): number;

// export function CVDisplayLinkCreateWithOpenGLDisplayMask(mask: number, displayLinkOut: any): number;

// export function CVDisplayLinkGetActualOutputVideoRefreshPeriod(displayLink: any): number;

// export function CVDisplayLinkGetCurrentCGDisplay(displayLink: any): number;

// export function CVDisplayLinkGetCurrentTime(displayLink: any, outTime: CVTimeStamp): number;

// export function CVDisplayLinkGetNominalOutputVideoRefreshPeriod(displayLink: any): CVTime;

// export function CVDisplayLinkGetOutputVideoLatency(displayLink: any): CVTime;

// export function CVDisplayLinkGetTypeID(): number;

// export function CVDisplayLinkIsRunning(displayLink: any): boolean;

// export function CVDisplayLinkRelease(displayLink: any): void;

// export function CVDisplayLinkRetain(displayLink: any): any;

// export function CVDisplayLinkSetCurrentCGDisplay(displayLink: any, displayID: number): number;

// export function CVDisplayLinkSetCurrentCGDisplayFromOpenGLContext(displayLink: any, cglContext: _CGLContextObject, cglPixelFormat: any): number;

// export function CVDisplayLinkSetOutputCallback(displayLink: any, callback: (p1: any, p2: CVTimeStamp, p3: CVTimeStamp, p4: number, p5: number, p6: any) => number, userInfo: any): number;

// export function CVDisplayLinkSetOutputHandler(displayLink: any, handler: (p1: any, p2: CVTimeStamp, p3: CVTimeStamp, p4: number, p5: number) => number): number;

// export function CVDisplayLinkStart(displayLink: any): number;

// export function CVDisplayLinkStop(displayLink: any): number;

// export function CVDisplayLinkTranslateTime(displayLink: any, inTime: CVTimeStamp, outTime: CVTimeStamp): number;

// export function CVGetCurrentHostTime(): number;

// export function CVGetHostClockFrequency(): number;

// export function CVGetHostClockMinimumTimeDelta(): number;

// export function CVImageBufferCreateColorSpaceFromAttachments(attachments: Map<any, any>): any;

// export function CVImageBufferGetCleanRect(imageBuffer: any): CGRect;

// export function CVImageBufferGetColorSpace(imageBuffer: any): any;

// export function CVImageBufferGetDisplaySize(imageBuffer: any): CGSize;

// export function CVImageBufferGetEncodedSize(imageBuffer: any): CGSize;

// export function CVImageBufferIsFlipped(imageBuffer: any): boolean;

// export function CVMetalTextureCacheCreate(allocator: any, cacheAttributes: Map<any, any>, metalDevice: any, textureAttributes: Map<any, any>, cacheOut: any): number;

// export function CVMetalTextureCacheCreateTextureFromImage(allocator: any, textureCache: any, sourceImage: any, textureAttributes: Map<any, any>, pixelFormat: MTLPixelFormat.MTLPixelFormat, width: number, height: number, planeIndex: number, textureOut: any): number;

// export function CVMetalTextureCacheFlush(textureCache: any, options: number): void;

// export function CVMetalTextureCacheGetTypeID(): number;

// export function CVMetalTextureGetCleanTexCoords(image: any, lowerLeft: number, lowerRight: number, upperRight: number, upperLeft: number): void;

// export function CVMetalTextureGetTexture(image: any): any;

// export function CVMetalTextureGetTypeID(): number;

// export function CVMetalTextureIsFlipped(image: any): boolean;

// export function CVPixelBufferCreate(allocator: any, width: number, height: number, pixelFormatType: number, pixelBufferAttributes: Map<any, any>, pixelBufferOut: any): number;

// export function CVPixelBufferCreateResolvedAttributesDictionary(allocator: any, attributes: any[], resolvedDictionaryOut: Map<any, any>): number;

// export function CVPixelBufferCreateWithBytes(allocator: any, width: number, height: number, pixelFormatType: number, baseAddress: any, bytesPerRow: number, releaseCallback: (p1: any, p2: any) => void, releaseRefCon: any, pixelBufferAttributes: Map<any, any>, pixelBufferOut: any): number;

// export function CVPixelBufferCreateWithIOSurface(allocator: any, surface: any, pixelBufferAttributes: Map<any, any>, pixelBufferOut: any): number;

// export function CVPixelBufferCreateWithPlanarBytes(allocator: any, width: number, height: number, pixelFormatType: number, dataPtr: any, dataSize: number, numberOfPlanes: number, planeBaseAddress: any, planeWidth: number, planeHeight: number, planeBytesPerRow: number, releaseCallback: (p1: any, p2: any, p3: number, p4: number, p5: any) => void, releaseRefCon: any, pixelBufferAttributes: Map<any, any>, pixelBufferOut: any): number;

// export function CVPixelBufferFillExtendedPixels(pixelBuffer: any): number;

// export function CVPixelBufferGetBaseAddress(pixelBuffer: any): any;

// export function CVPixelBufferGetBaseAddressOfPlane(pixelBuffer: any, planeIndex: number): any;

// export function CVPixelBufferGetBytesPerRow(pixelBuffer: any): number;

// export function CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer: any, planeIndex: number): number;

// export function CVPixelBufferGetDataSize(pixelBuffer: any): number;

// export function CVPixelBufferGetExtendedPixels(pixelBuffer: any, extraColumnsOnLeft: number, extraColumnsOnRight: number, extraRowsOnTop: number, extraRowsOnBottom: number): void;

// export function CVPixelBufferGetHeight(pixelBuffer: any): number;

// export function CVPixelBufferGetHeightOfPlane(pixelBuffer: any, planeIndex: number): number;

// export function CVPixelBufferGetIOSurface(pixelBuffer: any): any;

// export function CVPixelBufferGetPixelFormatType(pixelBuffer: any): number;

// export function CVPixelBufferGetPlaneCount(pixelBuffer: any): number;

// export function CVPixelBufferGetTypeID(): number;

// export function CVPixelBufferGetWidth(pixelBuffer: any): number;

// export function CVPixelBufferGetWidthOfPlane(pixelBuffer: any, planeIndex: number): number;

// export function CVPixelBufferIsPlanar(pixelBuffer: any): boolean;

// export function CVPixelBufferLockBaseAddress(pixelBuffer: any, lockFlags: CVPixelBuffer.CVPixelBufferLockFlags): number;

// export function CVPixelBufferPoolCreate(allocator: any, poolAttributes: Map<any, any>, pixelBufferAttributes: Map<any, any>, poolOut: any): number;

// export function CVPixelBufferPoolCreatePixelBuffer(allocator: any, pixelBufferPool: any, pixelBufferOut: any): number;

// export function CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(allocator: any, pixelBufferPool: any, auxAttributes: Map<any, any>, pixelBufferOut: any): number;

// export function CVPixelBufferPoolFlush(pool: any, options: CVPixelBufferPool.CVPixelBufferPoolFlushFlags): void;

// export function CVPixelBufferPoolGetAttributes(pool: any): Map<any, any>;

// export function CVPixelBufferPoolGetPixelBufferAttributes(pool: any): Map<any, any>;

// export function CVPixelBufferPoolGetTypeID(): number;

// export function CVPixelBufferPoolRelease(pixelBufferPool: any): void;

// export function CVPixelBufferPoolRetain(pixelBufferPool: any): any;

// export function CVPixelBufferRelease(texture: any): void;

// export function CVPixelBufferRetain(texture: any): any;

// export function CVPixelBufferUnlockBaseAddress(pixelBuffer: any, unlockFlags: CVPixelBuffer.CVPixelBufferLockFlags): number;

// export function CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(allocator: any): any[];

// export function CVPixelFormatDescriptionCreateWithPixelFormatType(allocator: any, pixelFormat: number): Map<any, any>;

// export function CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(description: Map<any, any>, pixelFormat: number): void;

// export function CVTransferFunctionGetIntegerCodePointForString(transferFunctionString: string): number;

// export function CVTransferFunctionGetStringForIntegerCodePoint(transferFunctionCodePoint: number): string;

// export function CVYCbCrMatrixGetIntegerCodePointForString(yCbCrMatrixString: string): number;

// export function CVYCbCrMatrixGetStringForIntegerCodePoint(yCbCrMatrixCodePoint: number): string;

export class CWChannel extends NSObject {
  channelBand: CoreWLANTypes.CWChannelBand;
  channelNumber: number;
  channelWidth: CoreWLANTypes.CWChannelWidth;
  isEqualToChannel(_: CWChannel): boolean;
}

export class CWConfiguration extends NSObject {
  static createWithConfiguration(): CWConfiguration;
  static createWithConfigurationWithConfiguration(_: CWConfiguration): CWConfiguration;
  networkProfiles: NSOrderedSet<any>;
  rememberJoinedNetworks: boolean;
  requireAdministratorForAssociation: boolean;
  requireAdministratorForIBSSMode: boolean;
  requireAdministratorForPower: boolean;
  static createWithConfiguration(_: CWConfiguration): CWConfiguration;
  isEqualToConfiguration(_: CWConfiguration): boolean;
}

interface CWEventDelegate {
  bssidDidChangeForWiFiInterfaceWithName(_: string): void;
  clientConnectionInterrupted(): void;
  clientConnectionInvalidated(): void;
  countryCodeDidChangeForWiFiInterfaceWithName(_: string): void;
  linkDidChangeForWiFiInterfaceWithName(_: string): void;
  linkQualityDidChangeForWiFiInterfaceWithName(_: string, rssi: number, transmitRate: number): void;
  modeDidChangeForWiFiInterfaceWithName(_: string): void;
  powerStateDidChangeForWiFiInterfaceWithName(_: string): void;
  scanCacheUpdatedForWiFiInterfaceWithName(_: string): void;
  ssidDidChangeForWiFiInterfaceWithName(_: string): void;
}

export class CWInterface extends NSObject {
  interfaceName: string;
  activePHYMode(): CoreWLANTypes.CWPHYMode;
  associateToEnterpriseNetwork(identity: CWNetwork, username?: any, password?: string, error?: string): boolean;
  associateToNetwork(password: CWNetwork, error?: string): boolean;
  bssid(): string;
  cachedScanResults(): Set<any>;
  commitConfiguration(authorization: CWConfiguration, error?: SFAuthorization): boolean;
  configuration(): CWConfiguration;
  countryCode(): string;
  disassociate(): void;
  hardwareAddress(): string;
  interfaceMode(): CoreWLANTypes.CWInterfaceMode;
  noiseMeasurement(): number;
  powerOn(): boolean;
  rssiValue(): number;
  scanForNetworksWithName(error?: string): Set<any>;
  scanForNetworksWithName(includeHidden?: string, error?: boolean): Set<any>;
  scanForNetworksWithSSID(error?: Data): Set<any>;
  scanForNetworksWithSSID(includeHidden?: Data, error?: boolean): Set<any>;
  security(): CoreWLANTypes.CWSecurity;
  serviceActive(): boolean;
  setPairwiseMasterKey(error?: Data): boolean;
  setPower(error: boolean): boolean;
  setWEPKey(flags?: Data, index?: CoreWLANTypes.CWCipherKeyFlags, error?: number): boolean;
  setWLANChannel(error: CWChannel): boolean;
  ssid(): string;
  ssidData(): Data;
  startIBSSModeWithSSID(security: Data, channel: CoreWLANTypes.CWIBSSModeSecurity, password: number, error?: string): boolean;
  supportedWLANChannels(): Set<any>;
  transmitPower(): number;
  transmitRate(): number;
  wlanChannel(): CWChannel;
}

// export function CWKeychainCopyEAPIdentityList(list: any[]): number;

// export function CWKeychainCopyWiFiEAPIdentity(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data, identity: any): number;

// export function CWKeychainDeleteWiFiEAPUsernameAndPassword(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data): number;

// export function CWKeychainDeleteWiFiPassword(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data): number;

// export function CWKeychainFindWiFiEAPUsernameAndPassword(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data, username: string, password: string): number;

// export function CWKeychainFindWiFiPassword(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data, password: string): number;

// export function CWKeychainSetWiFiEAPIdentity(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data, identity: any): number;

// export function CWKeychainSetWiFiEAPUsernameAndPassword(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data, username: string, password: string): number;

// export function CWKeychainSetWiFiPassword(domain: CoreWLANTypes.CWKeychainDomain, ssid: Data, password: string): number;

// export function CWMergeNetworks(networks: Set<any>): Set<any>;

export class CWMutableConfiguration extends CWConfiguration {
  //  static createWithConfiguration(): CWMutableConfiguration;
  //  static createWithConfigurationWithConfiguration(_: CWConfiguration): CWMutableConfiguration;
  networkProfiles: NSOrderedSet<any>;
  setNetworkProfiles(_: NSOrderedSet<any>);
  rememberJoinedNetworks: boolean;
  setRememberJoinedNetworks(_: boolean);
  requireAdministratorForAssociation: boolean;
  setRequireAdministratorForAssociation(_: boolean);
  requireAdministratorForIBSSMode: boolean;
  setRequireAdministratorForIBSSMode(_: boolean);
  requireAdministratorForPower: boolean;
  setRequireAdministratorForPower(_: boolean);
}

export class CWMutableNetworkProfile extends CWNetworkProfile {
  //  static createWithNetworkProfile(): CWMutableNetworkProfile;
  //  static createWithNetworkProfileWithNetworkProfile(_: CWNetworkProfile): CWMutableNetworkProfile;
  security: CoreWLANTypes.CWSecurity;
  setSecurity(_: CoreWLANTypes.CWSecurity);
  ssidData: Data;
  setSsidData(_: Data);
}

export class CWNetwork extends NSObject {
  beaconInterval: number;
  bssid: string;
  countryCode: string;
  ibss: boolean;
  informationElementData: Data;
  noiseMeasurement: number;
  rssiValue: number;
  ssid: string;
  ssidData: Data;
  wlanChannel: CWChannel;
  isEqualToNetwork(_: CWNetwork): boolean;
  supportsPHYMode(_: CoreWLANTypes.CWPHYMode): boolean;
  supportsSecurity(_: CoreWLANTypes.CWSecurity): boolean;
}

export class CWNetworkProfile extends NSObject {
  static createWithNetworkProfile(): CWNetworkProfile;
  static createWithNetworkProfileWithNetworkProfile(_: CWNetworkProfile): CWNetworkProfile;
  security: CoreWLANTypes.CWSecurity;
  ssid: string;
  ssidData: Data;
  static createWithNetworkProfile(_: CWNetworkProfile): CWNetworkProfile;
  isEqualToNetworkProfile(_: CWNetworkProfile): boolean;
}

export class CWWiFiClient extends NSObject {
  static interfaceNames(): string[];
  static sharedWiFiClient(): CWWiFiClient;
  delegate: any;
  setDelegate(_: any);
  interface(): CWInterface;
  interfaceWithName(_?: string): CWInterface;
  interfaces(): CWInterface[];
  startMonitoringEventWithType(error: CoreWLANTypes.CWEventType): boolean;
  stopMonitoringAllEventsAndReturnError(): boolean;
  stopMonitoringEventWithType(error: CoreWLANTypes.CWEventType): boolean;
}

export class AffineTransform extends NSObject {
  static transform(): AffineTransform;
  transformStruct: NSAffineTransformStruct;
  setTransformStruct(_: NSAffineTransformStruct);
  appendTransform(_: AffineTransform): void;
  concat(): void;
  static createWithTransform(_: AffineTransform): AffineTransform;
  invert(): void;
  prependTransform(_: AffineTransform): void;
  rotateByDegrees(_: number): void;
  rotateByRadians(_: number): void;
  scaleBy(_: number): void;
  scaleXBy(_: number, yBy: number): void;
  set(): void;
  transformBezierPath(_: NSBezierPath): NSBezierPath;
  transformPoint(_: CGPoint): CGPoint;
  transformSize(_: CGSize): CGSize;
  translateXBy(_: number, yBy: number): void;
}

// @ts-ignore
export class Array<ObjectType> extends NSObject {
  static createWithArray<ObjectType>(): Array<ObjectType>;
  static createWithArrayWithArray<ObjectType>(_: ObjectType[]): Array<ObjectType>;
  static arrayWithContentsOfFile<ObjectType>(_: string): ObjectType[];
  static arrayWithContentsOfURL<ObjectType>(_: URL): ObjectType[];
  static createWithArrayWithObject<ObjectType>(_: ObjectType): Array<ObjectType>;
  static createWithArrayWithObjects<ObjectType>(_: ObjectType): Array<ObjectType>;
  static createWithArrayWithObjectsCount<ObjectType>(_: ObjectType, count: number): Array<ObjectType>;
  count: number;
  firstObject: ObjectType;
  lastObject: ObjectType;
  sortedArrayHint: Data;
  // @ts-ignore 
  addObserver(_: NSObject, toObjectsAtIndexes: IndexSet, forKeyPath: string, options: NSKeyValueObserving.NSKeyValueObservingOptions, context?: any): void;
  arrayByAddingObject(_: ObjectType): ObjectType[];
  arrayByAddingObjectsFromArray(_: ObjectType[]): ObjectType[];
  arrayByApplyingDifference(_: CollectionDifference<any>): ObjectType[];
  componentsJoinedByString(_: string): string;
  containsObject(_: ObjectType): boolean;
  descriptionWithLocale(_?: any): string;
  descriptionWithLocale(_?: any, indent?: number): string;
  differenceFromArray(_: ObjectType[]): CollectionDifference<any>;
  differenceFromArray(_: ObjectType[], withOptions: CollectionDifference.NSOrderedCollectionDifferenceCalculationOptions): CollectionDifference<any>;
  differenceFromArray(_: ObjectType[], withOptions: CollectionDifference.NSOrderedCollectionDifferenceCalculationOptions, usingEquivalenceTest: (p1: ObjectType, p2: ObjectType) => boolean): CollectionDifference<any>;
  enumerateObjectsAtIndexes(_: IndexSet, options: NSObjCRuntime.NSEnumerationOptions, usingBlock: (p1: ObjectType, p2: number, p3: boolean) => void): void;
  enumerateObjectsUsingBlock(_: (p1: ObjectType, p2: number, p3: boolean) => void): void;
  enumerateObjectsWithOptions(_: NSObjCRuntime.NSEnumerationOptions, usingBlock: (p1: ObjectType, p2: number, p3: boolean) => void): void;
  filteredArrayUsingPredicate(_: NSPredicate): ObjectType[];
  firstObjectCommonWithArray(_: ObjectType[]): ObjectType;
  indexOfObject(_: ObjectType): number;
  indexOfObject(_: ObjectType, inRange: NSRange): number;
  indexOfObject(_: ObjectType, inSortedRange: NSRange, options: Array.NSBinarySearchingOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): number;
  indexOfObjectAtIndexes(_: IndexSet, options: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
  indexOfObjectIdenticalTo(_: ObjectType): number;
  indexOfObjectIdenticalTo(_: ObjectType, inRange: NSRange): number;
  indexOfObjectPassingTest(_: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
  indexOfObjectWithOptions(_: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
  indexesOfObjectsAtIndexes(_: IndexSet, options: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): IndexSet;
  indexesOfObjectsPassingTest(_: (p1: ObjectType, p2: number, p3: boolean) => boolean): IndexSet;
  indexesOfObjectsWithOptions(_: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): IndexSet;
  // static createWithArray(_: ObjectType[]): Array<ObjectType>;
  // static createWithArrayWithCopyItems(_: ObjectType[], copyItems: boolean): Array<ObjectType>;
  // static createWithContentsOfFile(_: string): Array<ObjectType>;
  // static createWithContentsOf(_: URL): Array<ObjectType>;
  // static createWith(error: URL): Array<ObjectType>;
  // static createWithObjects(_: ObjectType): Array<ObjectType>;
  // static createWithObjectsWithCount(_?: ObjectType, count?: number): Array<ObjectType>;
  isEqualToArray(_: ObjectType[]): boolean;
  objectAtIndex(_: number): ObjectType;
  objectAtIndexedSubscript(_: number): ObjectType;
  objectEnumerator(): NSEnumerator<any>;
  objectsAtIndexes(_: IndexSet): ObjectType[];
  pathsMatchingExtensions(_: string[]): string[];
  // @ts-ignore 
  removeObserver(_: NSObject, fromObjectsAtIndexes: IndexSet, forKeyPath: string): void;
  // @ts-ignore 
  removeObserver(_: NSObject, fromObjectsAtIndexes: IndexSet, forKeyPath: string, context?: any): void;
  reverseObjectEnumerator(): NSEnumerator<any>;
  sortedArrayUsingComparator(_: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): ObjectType[];
  sortedArrayUsingDescriptors(_: NSSortDescriptor[]): ObjectType[];
  sortedArrayUsingFunction(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any): ObjectType[];
  sortedArrayUsingFunction(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any, hint?: Data): ObjectType[];
  sortedArrayUsingSelector(_: string): ObjectType[];
  sortedArrayWithOptions(_: NSObjCRuntime.NSSortOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): ObjectType[];
  subarrayWithRange(_: NSRange): ObjectType[];
  writeToFile(_: string, atomically: boolean): boolean;
  writeToURL(_: URL, atomically: boolean): boolean;
  writeToURL(error: URL): boolean;
}

export class BlockOperation extends Operation {
  executionBlocks: () => void[];
  addExecutionBlock(_: () => void): void;
}

export class Bundle extends NSObject {
  static url(forResource?: string, withExtension?: string, subdirectory?: string, in_?: URL): URL;
  static urls(forResourcesWithExtension?: string, subdirectory?: string, in_?: URL): URL[];
  //  static path(forResource?: string, ofType?: string, inDirectory?: string): string;
  //  static paths(forResourcesOfType?: string, inDirectory?: string): string[];
  //  static preferredLocalizations(from: string[]): string[];
  //  static preferredLocalizations(from: string[], forPreferences?: string[]): string[];
  appStoreReceiptURL: URL;
  builtInPlugInsPath: string;
  builtInPlugInsURL: URL;
  bundleIdentifier: string;
  bundlePath: string;
  bundleURL: URL;
  developmentLocalization: string;
  executableArchitectures: number[];
  executablePath: string;
  executableURL: URL;
  infoDictionary: Map<string, any>;
  isLoaded: boolean;
  localizations: string[];
  localizedInfoDictionary: Map<string, any>;
  preferredLocalizations: string[];
  principalClass: typeof NSObject;
  privateFrameworksPath: string;
  privateFrameworksURL: URL;
  resourcePath: string;
  resourceURL: URL;
  sharedFrameworksPath: string;
  sharedFrameworksURL: URL;
  sharedSupportPath: string;
  sharedSupportURL: URL;
  static allBundles: Bundle[];
  static allFrameworks: Bundle[];
  static mainBundle: Bundle;
  url(forAuxiliaryExecutable: string): URL;
  urlForImageResource(_: string): URL;
  url(forResource?: string, withExtension?: string): URL;
  url(forResource?: string, withExtension?: string, subdirectory?: string): URL;
  url(forResource?: string, withExtension?: string, subdirectory?: string, localization?: string): URL;
  urls(forResourcesWithExtension?: string, subdirectory?: string): URL[];
  urls(forResourcesWithExtension?: string, subdirectory?: string, localization?: string): URL[];
  classNamed(_: string): typeof NSObject;
  contextHelp(forKey: string): NSAttributedString;
  image(forResource: string): NSImage;
  static createWithPath(_: string): Bundle;
  static createWithUrl(_: URL): Bundle;
  // @ts-ignore 
  // dupe name w inherited static method  load(): boolean;
  loadAndReturnError(): boolean;
  loadNibNamed(_: string, owner?: any, topLevelObjects?: any[]): boolean;
  localizedString(forKey: string, value?: string, table?: string): string;
  object(forInfoDictionaryKey: string): any;
  path(forAuxiliaryExecutable: string): string;
  pathForImageResource(_: string): string;
  path(forResource?: string, ofType?: string): string;
  path(forResource?: string, ofType?: string, inDirectory?: string): string;
  path(forResource?: string, ofType?: string, inDirectory?: string, forLocalization?: string): string;
  path(forSoundResource: string): string;
  paths(forResourcesOfType?: string, inDirectory?: string): string[];
  paths(forResourcesOfType?: string, inDirectory?: string, forLocalization?: string): string[];
  preflightAndReturnError(): boolean;
  unload(): boolean;
}

export class ByteCountFormatter extends Formatter {
  isAdaptive: boolean;
  setAdaptive(_: boolean);
  allowedUnits: ByteCountFormatter.Units;
  setAllowedUnits(_: ByteCountFormatter.Units);
  allowsNonnumericFormatting: boolean;
  setAllowsNonnumericFormatting(_: boolean);
  countStyle: ByteCountFormatter.CountStyle;
  setCountStyle(_: ByteCountFormatter.CountStyle);
  formattingContext: Formatter.Context;
  setFormattingContext(_: Formatter.Context);
  includesActualByteCount: boolean;
  setIncludesActualByteCount(_: boolean);
  includesCount: boolean;
  setIncludesCount(_: boolean);
  includesUnit: boolean;
  setIncludesUnit(_: boolean);
  zeroPadsFractionDigits: boolean;
  setZeroPadsFractionDigits(_: boolean);
}

export class CachedURLResponse extends NSObject {
  data: Data;
  response: URLResponse;
  storagePolicy: URLCache.StoragePolicy;
  userInfo: Map<any, any>;
  static createWithResponseWithData(_: URLResponse, data: Data): CachedURLResponse;
  static createWithResponseWithDataWithUserInfoWithStoragePolicy(_: URLResponse, data: Data, userInfo?: Map<any, any>, storagePolicy?: URLCache.StoragePolicy): CachedURLResponse;
}

export class Calendar extends NSObject {
  static calendarWithIdentifier(_: string): Calendar;
  AMSymbol: string;
  PMSymbol: string;
  calendarIdentifier: string;
  eraSymbols: string[];
  firstWeekday: number;
  setFirstWeekday(_: number);
  locale: Locale;
  setLocale(_: Locale);
  longEraSymbols: string[];
  minimumDaysInFirstWeek: number;
  setMinimumDaysInFirstWeek(_: number);
  monthSymbols: string[];
  quarterSymbols: string[];
  shortMonthSymbols: string[];
  shortQuarterSymbols: string[];
  shortStandaloneMonthSymbols: string[];
  shortStandaloneQuarterSymbols: string[];
  shortStandaloneWeekdaySymbols: string[];
  shortWeekdaySymbols: string[];
  standaloneMonthSymbols: string[];
  standaloneQuarterSymbols: string[];
  standaloneWeekdaySymbols: string[];
  timeZone: TimeZone;
  setTimeZone(_: TimeZone);
  veryShortMonthSymbols: string[];
  veryShortStandaloneMonthSymbols: string[];
  veryShortStandaloneWeekdaySymbols: string[];
  veryShortWeekdaySymbols: string[];
  weekdaySymbols: string[];
  static autoupdatingCurrentCalendar: Calendar;
  static currentCalendar: Calendar;
  compareDate(_: Date, toDate: Date, toUnitGranularity: Calendar.Unit): NSObjCRuntime.ComparisonResult;
  component(_: Calendar.Unit, fromDate: Date): number;
  components(_: Calendar.Unit, fromDate: Date): DateComponents;
  components(_: Calendar.Unit, fromDate: Date, toDate: Date, options: Calendar.Options): DateComponents;
  components(_: Calendar.Unit, fromDateComponents: DateComponents, toDateComponents: DateComponents, options: Calendar.Options): DateComponents;
  componentsInTimeZone(_: TimeZone, fromDate: Date): DateComponents;
  date(_: Date, matchesComponents: DateComponents): boolean;
  dateByAddingComponents(_: DateComponents, toDate: Date, options: Calendar.Options): Date;
  dateByAddingUnit(_: Calendar.Unit, value: number, toDate: Date, options: Calendar.Options): Date;
  dateBySettingHour(_: number, minute: number, second: number, ofDate: Date, options: Calendar.Options): Date;
  dateBySettingUnit(_: Calendar.Unit, value: number, ofDate: Date, options: Calendar.Options): Date;
  dateFromComponents(_: DateComponents): Date;
  dateWithEra(_: number, year: number, month: number, day: number, hour: number, minute: number, second: number, nanosecond: number): Date;
  dateWithEra(_: number, yearForWeekOfYear: number, weekOfYear: number, weekday: number, hour: number, minute: number, second: number, nanosecond: number): Date;
  enumerateDatesStartingAfterDate(_: Date, matchingComponents: DateComponents, options: Calendar.Options, usingBlock?: (p1: Date, p2: boolean, p3: boolean) => void): void;
  getEra(_?: number, year?: number, month?: number, day?: number, fromDate?: Date): void;
  getEra(_?: number, yearForWeekOfYear?: number, weekOfYear?: number, weekday?: number, fromDate?: Date): void;
  getHour(_?: number, minute?: number, second?: number, nanosecond?: number, fromDate?: Date): void;
  static createWithCalendarIdentifier(_: string): Calendar;
  isDate(_: Date, equalToDate: Date, toUnitGranularity: Calendar.Unit): boolean;
  isDate(_: Date, inSameDayAsDate: Date): boolean;
  isDateInToday(_: Date): boolean;
  isDateInTomorrow(_: Date): boolean;
  isDateInWeekend(_: Date): boolean;
  isDateInYesterday(_: Date): boolean;
  maximumRangeOfUnit(_: Calendar.Unit): NSRange;
  minimumRangeOfUnit(_: Calendar.Unit): NSRange;
  nextDateAfterDate(_: Date, matchingComponents: DateComponents, options: Calendar.Options): Date;
  nextDateAfterDate(_: Date, matchingHour: number, minute: number, second: number, options: Calendar.Options): Date;
  nextDateAfterDate(_: Date, matchingUnit: Calendar.Unit, value: number, options: Calendar.Options): Date;
  nextWeekendStartDate(_?: Date, interval?: number, options?: Calendar.Options, afterDate?: Date): boolean;
  ordinalityOfUnit(_: Calendar.Unit, inUnit: Calendar.Unit, forDate: Date): number;
  rangeOfUnit(_: Calendar.Unit, inUnit: Calendar.Unit, forDate: Date): NSRange;
  rangeOfUnit(_: Calendar.Unit, startDate?: Date, interval?: number, forDate?: Date): boolean;
  rangeOfWeekendStartDate(_?: Date, interval?: number, containingDate?: Date): boolean;
  startOfDayForDate(_: Date): Date;
}

export class CharacterSet extends NSObject {
  static characterSetWithBitmapRepresentation(_: Data): CharacterSet;
  static characterSetWithCharactersInString(_: string): CharacterSet;
  static characterSetWithContentsOfFile(_: string): CharacterSet;
  static characterSetWithRange(_: NSRange): CharacterSet;
  bitmapRepresentation: Data;
  invertedSet: CharacterSet;
  static URLFragmentAllowedCharacterSet: CharacterSet;
  static URLHostAllowedCharacterSet: CharacterSet;
  static URLPasswordAllowedCharacterSet: CharacterSet;
  static URLPathAllowedCharacterSet: CharacterSet;
  static URLQueryAllowedCharacterSet: CharacterSet;
  static URLUserAllowedCharacterSet: CharacterSet;
  static alphanumericCharacterSet: CharacterSet;
  static capitalizedLetterCharacterSet: CharacterSet;
  static controlCharacterSet: CharacterSet;
  static decimalDigitCharacterSet: CharacterSet;
  static decomposableCharacterSet: CharacterSet;
  static illegalCharacterSet: CharacterSet;
  static letterCharacterSet: CharacterSet;
  static lowercaseLetterCharacterSet: CharacterSet;
  static newlineCharacterSet: CharacterSet;
  static nonBaseCharacterSet: CharacterSet;
  static punctuationCharacterSet: CharacterSet;
  static symbolCharacterSet: CharacterSet;
  static uppercaseLetterCharacterSet: CharacterSet;
  static whitespaceAndNewlineCharacterSet: CharacterSet;
  static whitespaceCharacterSet: CharacterSet;
  characterIsMember(_: string): boolean;
  hasMemberInPlane(_: number): boolean;
  isSupersetOfSet(_: CharacterSet): boolean;
  longCharacterIsMember(_: number): boolean;
}

export class CollectionDifference<ObjectType> extends NSObject {
  hasChanges: boolean;
  insertions: NSOrderedCollectionChange<any>[];
  removals: NSOrderedCollectionChange<any>[];
  differenceByTransformingChangesWithBlock(_: (p1: NSOrderedCollectionChange<any>) => NSOrderedCollectionChange<any>): CollectionDifference<any>;
  // static createWithChanges(_: NSOrderedCollectionChange<any>[]): CollectionDifference<ObjectType>;
  // static createWithInsertIndexesWithInsertedObjectsWithRemoveIndexesWithRemovedObjects(_: IndexSet, insertedObjects?: ObjectType[], removeIndexes?: IndexSet, removedObjects?: ObjectType[]): CollectionDifference<ObjectType>;
  // static createWithInsertIndexesWithInsertedObjectsWithRemoveIndexesWithRemovedObjectsWithAdditionalChanges(_: IndexSet, insertedObjects?: ObjectType[], removeIndexes?: IndexSet, removedObjects?: ObjectType[], additionalChanges?: NSOrderedCollectionChange<any>[]): CollectionDifference<ObjectType>;
  createWithInverseDifference(): CollectionDifference<ObjectType>;
}

export class Data extends NSObject {
  static createWithData(): Data;
  static createWithDataWithBytesLength(_?: any, length?: number): Data;
  static createWithDataWithBytesNoCopyLength(_: any, length: number): Data;
  static createWithDataWithBytesNoCopyLengthWithFreeWhenDone(_: any, length: number, freeWhenDone: boolean): Data;
  static createWithDataWithContentsOfFile(_: string): Data;
  static createWithDataWithContentsOfFileOptions(options: string, error: Data.ReadingOptions): Data;
  static createWithDataWithContentsOfURL(_: URL): Data;
  static createWithDataWithContentsOfURLOptions(options: URL, error: Data.ReadingOptions): Data;
  static createWithDataWithData(_: Data): Data;
  bytes: any;
  length: number;
  base64EncodedDataWithOptions(_: Data.Base64EncodingOptions): Data;
  base64EncodedStringWithOptions(_: Data.Base64EncodingOptions): string;
  createWithCompressedDataUsingAlgorithm(error: Data.CompressionAlgorithm): Data;
  createWithDecompressedDataUsingAlgorithm(error: Data.CompressionAlgorithm): Data;
  enumerateByteRangesUsingBlock(_: (p1: any, p2: NSRange, p3: boolean) => void): void;
  static createWithBase64EncodedDataWithOptions(_: Data, options: Data.Base64DecodingOptions): Data;
  static createWithBase64EncodedStringWithOptions(_: string, options: Data.Base64DecodingOptions): Data;
  static createWithBytesWithLength(_?: any, length?: number): Data;
  static createWithBytesNoCopyWithLength(_: any, length: number): Data;
  static createWithBytesNoCopyWithLengthWithDeallocator(_: any, length: number, deallocator?: (p1: any, p2: number) => void): Data;
  static createWithBytesNoCopyWithLengthWithFreeWhenDone(_: any, length: number, freeWhenDone: boolean): Data;
  static createWithContentsOfFile(_: string): Data;
  static createWithContentsOfFile(options: string, error: Data.ReadingOptions): Data;
  static createWithContentsOf(_: URL): Data;
  static createWithContentsOf(options: URL, error: Data.ReadingOptions): Data;
  static createWithData(_: Data): Data;
  isEqualToData(_: Data): boolean;
  rangeOfData(_: Data, options: Data.SearchOptions, range: NSRange): NSRange;
  subdataWithRange(_: NSRange): Data;
  writeToFile(_: string, atomically: boolean): boolean;
  writeToFile(options: string, error: Data.WritingOptions): boolean;
  writeToURL(_: URL, atomically: boolean): boolean;
  writeToURL(options: URL, error: Data.WritingOptions): boolean;
}

// @ts-ignore
type Date = NSDate
export class NSDate extends NSObject {
  static createWithDate(): Date;
  static createWithDateWithTimeIntervalSinceDate(_: number, sinceDate: Date): Date;
  static createWithDateWithTimeIntervalSince1970(_: number): Date;
  static createWithDateWithTimeIntervalSinceNow(_: number): Date;
  static createWithDateWithTimeIntervalSinceReferenceDate(_: number): Date;
  timeIntervalSince1970: number;
  timeIntervalSinceNow: number;
  timeIntervalSinceReferenceDate: number;
  static distantFuture: Date;
  static distantPast: Date;
  static now: Date;
  //   static timeIntervalSinceReferenceDate: number;
  compare(_: Date): NSObjCRuntime.ComparisonResult;
  createWithDateByAddingTimeInterval(_: number): Date;
  descriptionWithLocale(_?: any): string;
  earlierDate(_: Date): Date;
  static createWithTimeIntervalWithSinceDate(_: number, sinceDate: Date): Date;
  static createWithTimeIntervalSince1970(_: number): Date;
  static createWithTimeIntervalSinceNow(_: number): Date;
  static createWithTimeIntervalSinceReferenceDate(_: number): Date;
  isEqualToDate(_: Date): boolean;
  laterDate(_: Date): Date;
  timeIntervalSinceDate(_: Date): number;
}

export class DateComponents extends NSObject {
  calendar: Calendar;
  setCalendar(_: Calendar);
  date: Date;
  day: number;
  setDay(_: number);
  era: number;
  setEra(_: number);
  hour: number;
  setHour(_: number);
  isLeapMonth: boolean;
  setLeapMonth(_: boolean);
  minute: number;
  setMinute(_: number);
  month: number;
  setMonth(_: number);
  nanosecond: number;
  setNanosecond(_: number);
  quarter: number;
  setQuarter(_: number);
  second: number;
  setSecond(_: number);
  timeZone: TimeZone;
  setTimeZone(_: TimeZone);
  isValidDate: boolean;
  weekOfMonth: number;
  setWeekOfMonth(_: number);
  weekOfYear: number;
  setWeekOfYear(_: number);
  weekday: number;
  setWeekday(_: number);
  weekdayOrdinal: number;
  setWeekdayOrdinal(_: number);
  year: number;
  setYear(_: number);
  yearForWeekOfYear: number;
  setYearForWeekOfYear(_: number);
  isValidDateInCalendar(_: Calendar): boolean;
  // @ts-ignore 
  setValue(_: number, forComponent: Calendar.Unit): void;
  valueForComponent(_: Calendar.Unit): number;
}

export class DateComponentsFormatter extends Formatter {
  static localizedString(from: DateComponents, unitsStyle: DateComponentsFormatter.UnitsStyle): string;
  allowedUnits: Calendar.Unit;
  setAllowedUnits(_: Calendar.Unit);
  allowsFractionalUnits: boolean;
  setAllowsFractionalUnits(_: boolean);
  calendar: Calendar;
  setCalendar(_: Calendar);
  collapsesLargestUnit: boolean;
  setCollapsesLargestUnit(_: boolean);
  formattingContext: Formatter.Context;
  setFormattingContext(_: Formatter.Context);
  includesApproximationPhrase: boolean;
  setIncludesApproximationPhrase(_: boolean);
  includesTimeRemainingPhrase: boolean;
  setIncludesTimeRemainingPhrase(_: boolean);
  maximumUnitCount: number;
  setMaximumUnitCount(_: number);
  referenceDate: Date;
  setReferenceDate(_: Date);
  unitsStyle: DateComponentsFormatter.UnitsStyle;
  setUnitsStyle(_: DateComponentsFormatter.UnitsStyle);
  zeroFormattingBehavior: DateComponentsFormatter.ZeroFormattingBehavior;
  setZeroFormattingBehavior(_: DateComponentsFormatter.ZeroFormattingBehavior);
}

export class DateFormatter extends Formatter {
  //  static dateFormat(fromTemplate: string, options: number, locale?: Locale): string;
  static localizedString(from: Date, dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style): string;
  AMSymbol: string;
  setAMSymbol(_: string);
  PMSymbol: string;
  setPMSymbol(_: string);
  calendar: Calendar;
  setCalendar(_: Calendar);
  dateFormat: string;
  setDateFormat(_: string);
  dateStyle: DateFormatter.Style;
  setDateStyle(_: DateFormatter.Style);
  defaultDate: Date;
  setDefaultDate(_: Date);
  doesRelativeDateFormatting: boolean;
  setDoesRelativeDateFormatting(_: boolean);
  eraSymbols: string[];
  setEraSymbols(_: string[]);
  formatterBehavior: DateFormatter.Behavior;
  setFormatterBehavior(_: DateFormatter.Behavior);
  formattingContext: Formatter.Context;
  setFormattingContext(_: Formatter.Context);
  generatesCalendarDates: boolean;
  setGeneratesCalendarDates(_: boolean);
  gregorianStartDate: Date;
  setGregorianStartDate(_: Date);
  isLenient: boolean;
  setLenient(_: boolean);
  locale: Locale;
  setLocale(_: Locale);
  longEraSymbols: string[];
  setLongEraSymbols(_: string[]);
  monthSymbols: string[];
  setMonthSymbols(_: string[]);
  quarterSymbols: string[];
  setQuarterSymbols(_: string[]);
  shortMonthSymbols: string[];
  setShortMonthSymbols(_: string[]);
  shortQuarterSymbols: string[];
  setShortQuarterSymbols(_: string[]);
  shortStandaloneMonthSymbols: string[];
  setShortStandaloneMonthSymbols(_: string[]);
  shortStandaloneQuarterSymbols: string[];
  setShortStandaloneQuarterSymbols(_: string[]);
  shortStandaloneWeekdaySymbols: string[];
  setShortStandaloneWeekdaySymbols(_: string[]);
  shortWeekdaySymbols: string[];
  setShortWeekdaySymbols(_: string[]);
  standaloneMonthSymbols: string[];
  setStandaloneMonthSymbols(_: string[]);
  standaloneQuarterSymbols: string[];
  setStandaloneQuarterSymbols(_: string[]);
  standaloneWeekdaySymbols: string[];
  setStandaloneWeekdaySymbols(_: string[]);
  timeStyle: DateFormatter.Style;
  setTimeStyle(_: DateFormatter.Style);
  timeZone: TimeZone;
  setTimeZone(_: TimeZone);
  twoDigitStartDate: Date;
  setTwoDigitStartDate(_: Date);
  veryShortMonthSymbols: string[];
  setVeryShortMonthSymbols(_: string[]);
  veryShortStandaloneMonthSymbols: string[];
  setVeryShortStandaloneMonthSymbols(_: string[]);
  veryShortStandaloneWeekdaySymbols: string[];
  setVeryShortStandaloneWeekdaySymbols(_: string[]);
  veryShortWeekdaySymbols: string[];
  setVeryShortWeekdaySymbols(_: string[]);
  weekdaySymbols: string[];
  setWeekdaySymbols(_: string[]);
  static defaultFormatterBehavior: DateFormatter.Behavior;
  setDefaultFormatterBehavior(_: DateFormatter.Behavior);
  date(from: string): Date;
  // @ts-ignore 
  getObjectValue(forString?: any, range?: string, error?: NSRange): boolean;
  setLocalizedDateFormatFromTemplate(_: string): void;
}

export class DateInterval extends NSObject {
  duration: number;
  endDate: Date;
  startDate: Date;
  compare(_: DateInterval): NSObjCRuntime.ComparisonResult;
  containsDate(_: Date): boolean;
  static createWithStartDateWithDuration(_: Date, duration: number): DateInterval;
  static createWithStartDateWithEndDate(_: Date, endDate: Date): DateInterval;
  intersectionWithDateInterval(_: DateInterval): DateInterval;
  intersectsDateInterval(_: DateInterval): boolean;
  isEqualToDateInterval(_: DateInterval): boolean;
}

export class DateIntervalFormatter extends Formatter {
  calendar: Calendar;
  setCalendar(_: Calendar);
  dateStyle: DateIntervalFormatter.Style;
  setDateStyle(_: DateIntervalFormatter.Style);
  dateTemplate: string;
  setDateTemplate(_: string);
  locale: Locale;
  setLocale(_: Locale);
  timeStyle: DateIntervalFormatter.Style;
  setTimeStyle(_: DateIntervalFormatter.Style);
  timeZone: TimeZone;
  setTimeZone(_: TimeZone);
}

export class Dictionary<KeyType, ObjectType> extends NSObject {
  static createWithDictionary<KeyType, ObjectType>(): Dictionary<KeyType, ObjectType>;
  static dictionaryWithContentsOfFile<KeyType, ObjectType>(_: string): Map<KeyType, ObjectType>;
  static dictionaryWithContentsOfURL<KeyType, ObjectType>(_: URL): Map<KeyType, ObjectType>;
  static createWithDictionaryWithDictionary<KeyType, ObjectType>(_: Map<KeyType, ObjectType>): Dictionary<KeyType, ObjectType>;
  static createWithDictionaryWithObjectForKey<KeyType, ObjectType>(_: ObjectType, forKey: KeyType): Dictionary<KeyType, ObjectType>;
  static createWithDictionaryWithObjectsForKeys<KeyType, ObjectType>(_: ObjectType[], forKeys: KeyType[]): Dictionary<KeyType, ObjectType>;
  static createWithDictionaryWithObjectsForKeysWithCount<KeyType, ObjectType>(_?: ObjectType, forKeys?: KeyType, count?: number): Dictionary<KeyType, ObjectType>;
  static sharedKeySetForKeys<KeyType>(_: KeyType[]): any;
  allKeys: KeyType[];
  allValues: ObjectType[];
  count: number;
  descriptionInStringsFileFormat: string;
  allKeysForObject(_: ObjectType): KeyType[];
  countByEnumeratingWithState(_: NSFastEnumerationState, objects?: K, count?: number): number;
  descriptionWithLocale(_?: any): string;
  descriptionWithLocale(_?: any, indent?: number): string;
  enumerateKeysAndObjectsUsingBlock(_: (p1: KeyType, p2: ObjectType, p3: boolean) => void): void;
  enumerateKeysAndObjectsWithOptions(_: NSObjCRuntime.NSEnumerationOptions, usingBlock: (p1: KeyType, p2: ObjectType, p3: boolean) => void): void;
  fileCreationDate(): Date;
  fileExtensionHidden(): boolean;
  fileGroupOwnerAccountID(): number;
  fileGroupOwnerAccountName(): string;
  fileHFSCreatorCode(): number;
  fileHFSTypeCode(): number;
  fileIsAppendOnly(): boolean;
  fileIsImmutable(): boolean;
  fileModificationDate(): Date;
  fileOwnerAccountID(): number;
  fileOwnerAccountName(): string;
  filePosixPermissions(): number;
  fileSize(): number;
  fileSystemFileNumber(): number;
  fileSystemNumber(): number;
  fileType(): string;
  // static createWithContentsOfFile(_: string): Dictionary<KeyType, ObjectType>;
  // static createWithContentsOf(_: URL): Dictionary<KeyType, ObjectType>;
  // static createWith(error: URL): Dictionary<KeyType, ObjectType>;
  // static createWithDictionary(_: Map<KeyType, ObjectType>): Dictionary<KeyType, ObjectType>;
  // static createWithDictionaryWithCopyItems(_: Map<KeyType, ObjectType>, copyItems: boolean): Dictionary<KeyType, ObjectType>;
  // static createWithObjectsWithForKeys(_: ObjectType[], forKeys: KeyType[]): Dictionary<KeyType, ObjectType>;
  // static createWithObjectsWithForKeysWithCount(_?: ObjectType, forKeys?: KeyType, count?: number): Dictionary<KeyType, ObjectType>;
  // static createWithObjectsAndKeys(_: any): Dictionary<KeyType, ObjectType>;
  isEqualToDictionary(_: Map<KeyType, ObjectType>): boolean;
  keyEnumerator(): NSEnumerator<any>;
  keysOfEntriesPassingTest(_: (p1: KeyType, p2: ObjectType, p3: boolean) => boolean): Set<any>;
  keysOfEntriesWithOptions(_: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: KeyType, p2: ObjectType, p3: boolean) => boolean): Set<any>;
  keysSortedByValueUsingComparator(_: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): KeyType[];
  keysSortedByValueUsingSelector(_: string): KeyType[];
  keysSortedByValueWithOptions(_: NSObjCRuntime.NSSortOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): KeyType[];
  objectEnumerator(): NSEnumerator<any>;
  objectForKey(_: KeyType): ObjectType;
  objectForKeyedSubscript(_: KeyType): ObjectType;
  objectsForKeys(_: KeyType[], notFoundMarker: ObjectType): ObjectType[];
  valueForKey(_: string): ObjectType;
  writeToFile(_: string, atomically: boolean): boolean;
  writeToURL(_: URL, atomically: boolean): boolean;
  writeToURL(error: URL): boolean;
}

export class Dimension extends Unit {
  static createWithBaseUnit(): Dimension;
  converter: UnitConverter;
  // @ts-ignore 
  static createWithSymbolWithConverter(_: string, converter: UnitConverter): Dimension;
}

export class DistributedNotificationCenter extends NotificationCenter {
  suspended: boolean;
  setSuspended(_: boolean);
  // @ts-ignore 
  addObserver(_: any, selector: string, name?: string, object_?: string): void;
  // @ts-ignore 
  addObserver(_: any, selector: string, name?: string, object_?: string, suspensionBehavior?: DistributedNotificationCenter.SuspensionBehavior): void;
  // @ts-ignore 
  post(name: string, object_?: string): void;
  // @ts-ignore 
  post(name: string, object_?: string, userInfo?: Map<any, any>): void;
  postNotificationName(_: string, object_?: string, userInfo?: Map<any, any>, deliverImmediately?: boolean): void;
  postNotificationName(_: string, object_?: string, userInfo?: Map<any, any>, options?: DistributedNotificationCenter.Options): void;
  // @ts-ignore 
  removeObserver(_: any, name?: string, object_?: string): void;
}

export class EnergyFormatter extends Formatter {
  isForFoodEnergyUse: boolean;
  setForFoodEnergyUse(_: boolean);
  numberFormatter: NumberFormatter;
  setNumberFormatter(_: NumberFormatter);
  unitStyle: Formatter.UnitStyle;
  setUnitStyle(_: Formatter.UnitStyle);
  unitString(fromJoules: number, usedUnit?: EnergyFormatter.Unit): string;
  unitString(fromValue: number, unit: EnergyFormatter.Unit): string;
}

// @ts-ignore
type Error = NSError
export class NSError extends NSObject {
  static createWithErrorWithDomainCodeWithUserInfo(_: string, code: number, userInfo?: Map<string, any>): Error;
  static setUserInfoValueProviderForDomain(_: string, provider?: (p1: Error, p2: string) => any): void;
  static userInfoValueProviderForDomain(_: string): (p1: Error, p2: string) => any;
  code: number;
  domain: string;
  helpAnchor: string;
  localizedDescription: string;
  localizedFailureReason: string;
  localizedRecoveryOptions: string[];
  localizedRecoverySuggestion: string;
  recoveryAttempter: any;
  userInfo: Map<string, any>;
  static createWithDomainWithCodeWithUserInfo(_: string, code: number, userInfo?: Map<string, any>): Error;
}

export class FileHandle extends NSObject {
  static createWithFileHandleForReadingFromURL(error: URL): FileHandle;
  static createWithFileHandleForUpdatingURL(error: URL): FileHandle;
  static createWithFileHandleForWritingToURL(error: URL): FileHandle;
  availableData: Data;
  fileDescriptor: number;
  offsetInFile: number;
  readabilityHandler: (p1: FileHandle) => void;
  setReadabilityHandler(_: (p1: FileHandle) => void);
  writeabilityHandler: (p1: FileHandle) => void;
  setWriteabilityHandler(_: (p1: FileHandle) => void);
  static fileHandleWithNullDevice: FileHandle;
  static fileHandleWithStandardError: FileHandle;
  static fileHandleWithStandardInput: FileHandle;
  static fileHandleWithStandardOutput: FileHandle;
  acceptConnectionInBackgroundAndNotify(): void;
  acceptConnectionInBackgroundAndNotify(forModes?: string[]): void;
  closeAndReturnError(): boolean;
  closeFile(): void;
  getOffset(error: number): boolean;
  static createWithFileDescriptor(_: number): FileHandle;
  static createWithFileDescriptorWithCloseOnDealloc(_: number, closeOnDealloc: boolean): FileHandle;
  readData(ofLength: number): Data;
  readDataToEndOfFile(): Data;
  readDataToEndOfFileAndReturnError(): Data;
  readDataUpToLength(error: number): Data;
  readInBackgroundAndNotify(): void;
  readInBackgroundAndNotify(forModes?: string[]): void;
  readToEndOfFileInBackgroundAndNotify(): void;
  readToEndOfFileInBackgroundAndNotify(forModes?: string[]): void;
  seekToEndOfFile(): number;
  seekToEndReturningOffset(error?: number): boolean;
  seek(toFileOffset: number): void;
  seekToOffset(error: number): boolean;
  synchronizeAndReturnError(): boolean;
  synchronizeFile(): void;
  truncateAtOffset(error: number): boolean;
  truncateFile(atOffset: number): void;
  waitForDataInBackgroundAndNotify(): void;
  waitForDataInBackgroundAndNotify(forModes?: string[]): void;
  write(_: Data): void;
  writeData(error: Data): boolean;
}

export class FileManager extends NSObject {
  currentDirectoryPath: string;
  delegate: any;
  setDelegate(_: any);
  homeDirectoryForCurrentUser: URL;
  temporaryDirectory: URL;
  ubiquityIdentityToken: any;
  static defaultManager: FileManager;
  URLForDirectory(inDomain: NSPathUtilities.FileManager.SearchPathDirectory, appropriateForURL: NSPathUtilities.FileManager.SearchPathDomainMask, create?: URL, error?: boolean): URL;
  URLForPublishingUbiquitousItemAtURL(expirationDate: URL, error?: Date): URL;
  url(forUbiquityContainerIdentifier?: string): URL;
  urls(for_: NSPathUtilities.FileManager.SearchPathDirectory, in_: NSPathUtilities.FileManager.SearchPathDomainMask): URL[];
  attributesOfFileSystemForPath(error: string): Map<string, any>;
  attributesOfItemAtPath(error: string): Map<string, any>;
  changeCurrentDirectoryPath(_: string): boolean;
  componentsToDisplay(forPath: string): string[];
  containerURL(forSecurityApplicationGroupIdentifier: string): URL;
  contents(atPath: string): Data;
  contentsEqual(atPath: string, andPath: string): boolean;
  contentsOfDirectoryAtPath(error: string): string[];
  contentsOfDirectoryAtURL(includingPropertiesForKeys: URL, options?: string[], error?: FileManager.DirectoryEnumerationOptions): URL[];
  copyItemAtPath(toPath: string, error: string): boolean;
  copyItemAtURL(toURL: URL, error: URL): boolean;
  createDirectoryAtPath(withIntermediateDirectories: string, attributes: boolean, error?: Map<string, any>): boolean;
  createDirectoryAtURL(withIntermediateDirectories: URL, attributes: boolean, error?: Map<string, any>): boolean;
  createFile(atPath: string, contents?: Data, attributes?: Map<string, any>): boolean;
  createSymbolicLinkAtPath(withDestinationPath: string, error: string): boolean;
  createSymbolicLinkAtURL(withDestinationURL: URL, error: URL): boolean;
  destinationOfSymbolicLinkAtPath(error: string): string;
  displayName(atPath: string): string;
  enumerator(atPath: string): FileManager.DirectoryEnumerator<any>;
  enumeratorAtURL(_: URL, includingPropertiesForKeys?: string[], options?: FileManager.DirectoryEnumerationOptions, errorHandler?: (p1: URL, p2: Error) => boolean): FileManager.DirectoryEnumerator<any>;
  evictUbiquitousItemAtURL(error: URL): boolean;
  fileExists(atPath: string): boolean;
  fileExists(atPath: string, isDirectory?: boolean): boolean;
  fileSystemRepresentation(withPath: string): string;
  getFileProviderServicesForItem(at: URL, completionHandler?: (p1: Map<string, NSFileProviderService>, p2: Error) => void): void;
  getRelationship(ofDirectory: FileManager.URLRelationship, inDomain: NSPathUtilities.FileManager.SearchPathDirectory, toItemAtURL: NSPathUtilities.FileManager.SearchPathDomainMask, error: URL): boolean;
  getRelationship(ofDirectoryAtURL: FileManager.URLRelationship, toItemAtURL: URL, error: URL): boolean;
  homeDirectory(forUser: string): URL;
  isDeletableFile(atPath: string): boolean;
  isExecutableFile(atPath: string): boolean;
  isReadableFile(atPath: string): boolean;
  isUbiquitousItem(at: URL): boolean;
  isWritableFile(atPath: string): boolean;
  linkItemAtPath(toPath: string, error: string): boolean;
  linkItemAtURL(toURL: URL, error: URL): boolean;
  mountedVolumeURLs(includingResourceValuesForKeys?: string[], options?: FileManager.VolumeEnumerationOptions): URL[];
  moveItemAtPath(toPath: string, error: string): boolean;
  moveItemAtURL(toURL: URL, error: URL): boolean;
  removeItemAtPath(error: string): boolean;
  removeItemAtURL(error: URL): boolean;
  replaceItemAtURL(withItemAtURL: URL, backupItemName: URL, options?: string, resultingItemURL?: FileManager.ItemReplacementOptions, error?: URL): boolean;
  setAttributes(ofItemAtPath: Map<string, any>, error: string): boolean;
  setUbiquitous(itemAtURL: boolean, destinationURL: URL, error: URL): boolean;
  startDownloadingUbiquitousItemAtURL(error: URL): boolean;
  subpaths(atPath: string): string[];
  subpathsOfDirectoryAtPath(error: string): string[];
  trashItemAtURL(resultingItemURL: URL, error?: URL): boolean;
  unmountVolume(at: URL, options: FileManager.UnmountOptions, completionHandler?: (p1: Error) => void): void;
}

interface FileManagerDelegate {
  fileManager(_: FileManager, shouldCopyItemAtPath: string, toPath: string): boolean;
  fileManager(_: FileManager, shouldCopyItemAt: URL, to: URL): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, copyingItemAtPath: string, toPath: string): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, copyingItemAt: URL, to: URL): boolean;
  fileManager(_: FileManager, shouldMoveItemAtPath: string, toPath: string): boolean;
  fileManager(_: FileManager, shouldMoveItemAt: URL, to: URL): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, movingItemAtPath: string, toPath: string): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, movingItemAt: URL, to: URL): boolean;
  fileManager(_: FileManager, shouldLinkItemAtPath: string, toPath: string): boolean;
  fileManager(_: FileManager, shouldLinkItemAt: URL, to: URL): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, linkingItemAtPath: string, toPath: string): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, linkingItemAt: URL, to: URL): boolean;
  fileManager(_: FileManager, shouldRemoveItemAtPath: string): boolean;
  fileManager(_: FileManager, shouldRemoveItemAt: URL): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, removingItemAtPath: string): boolean;
  fileManager(_: FileManager, shouldProceedAfterError: Error, removingItemAt: URL): boolean;
}

export class FileWrapper extends NSObject {
  isDirectory: boolean;
  fileAttributes: Map<string, any>;
  setFileAttributes(_: Map<string, any>);
  fileWrappers: Map<string, FileWrapper>;
  filename: string;
  setFilename(_: string);
  icon: NSImage;
  setIcon(_: NSImage);
  preferredFilename: string;
  setPreferredFilename(_: string);
  isRegularFile: boolean;
  regularFileContents: Data;
  serializedRepresentation: Data;
  isSymbolicLink: boolean;
  symbolicLinkDestinationURL: URL;
  addFileWrapper(_: FileWrapper): string;
  addRegularFile(withContents: Data, preferredFilename: string): string;
  static createWithDirectoryWithFileWrappers(_: Map<string, FileWrapper>): FileWrapper;
  static createWithRegularFileWithContents(_: Data): FileWrapper;
  static createWithSymbolicLinkWithDestinationURL(_: URL): FileWrapper;
  static createWithSerializedRepresentation(_: Data): FileWrapper;
  static createWithUrl(options: URL, error: FileWrapper.ReadingOptions): FileWrapper;
  keyForChildFileWrapper(_: FileWrapper): string;
  matchesContents(of: URL): boolean;
  readFromURL(options: URL, error: FileWrapper.ReadingOptions): boolean;
  removeFileWrapper(_: FileWrapper): void;
  writeToURL(options: URL, originalContentsURL: FileWrapper.WritingOptions, error?: URL): boolean;
}

export class Formatter extends NSObject {
  attributedString(for_: any, withDefaultAttributes?: Map<string, any>): NSAttributedString;
  editingString(for_: any): string;
  getObjectValue(_?: any, for_?: string, errorDescription?: string): boolean;
  isPartialStringValid(_: string, newEditingString?: string, errorDescription?: string): boolean;
  isPartialStringValid(_: string, proposedSelectedRange?: NSRange, originalString?: string, originalSelectedRange?: NSRange, errorDescription?: string): boolean;
}

export class HTTPCookie extends NSObject {
  static cookies(withResponseHeaderFields: Map<string, string>, for_: URL): HTTPCookie[];
  static requestHeaderFields(with_: HTTPCookie[]): Map<string, string>;
  isHTTPOnly: boolean;
  comment: string;
  commentURL: URL;
  domain: string;
  expiresDate: Date;
  name: string;
  path: string;
  portList: number[];
  properties: Map<string, any>;
  sameSitePolicy: string;
  isSecure: boolean;
  isSessionOnly: boolean;
  static createWithProperties(_: Map<string, any>): HTTPCookie;
}

export class HTTPCookieStorage extends NSObject {
  static sharedCookieStorage(forGroupContainerIdentifier: string): HTTPCookieStorage;
  cookieAcceptPolicy: HTTPCookieStorage.HTTPCookie.AcceptPolicy;
  setCookieAcceptPolicy(_: HTTPCookieStorage.HTTPCookie.AcceptPolicy);
  cookies: HTTPCookie[];
  static sharedHTTPCookieStorage: HTTPCookieStorage;
  // dupe name w instance property   cookies(for_: URL): HTTPCookie[];
  deleteCookie(_: HTTPCookie): void;
  getCookiesFor(_: URLSessionTask, completionHandler?: (p1: HTTPCookie[]) => void): void;
  removeCookies(since: Date): void;
  setCookie(_: HTTPCookie): void;
  setCookies(_: HTTPCookie[], for_?: URL, mainDocumentURL?: URL): void;
  sortedCookies(using: NSSortDescriptor[]): HTTPCookie[];
  storeCookies(_: HTTPCookie[], for_: URLSessionTask): void;
}

export class HTTPURLResponse extends URLResponse {
  static localizedString(forStatusCode: number): string;
  allHeaderFields: Map<any, any>;
  statusCode: number;
  // @ts-ignore 
  static createWithUrlWithStatusCodeWithHttpVersionWithHeaderFields(_: URL, statusCode: number, HTTPVersion?: string, headerFields?: Map<string, string>): HTTPURLResponse;
  // @ts-ignore 
  value(forHTTPHeaderField: string): string;
}

export class Host extends NSObject {
  static createWithCurrentHost(): Host;
  address: string;
  addresses: string[];
  localizedName: string;
  name: string;
  names: string[];
  // @ts-ignore 
  isEqual(to: Host): boolean;
}

export class ISO8601DateFormatter extends Formatter {
  formatOptions: ISO8601DateFormatter.Options;
  setFormatOptions(_: ISO8601DateFormatter.Options);
  timeZone: TimeZone;
  setTimeZone(_: TimeZone);
  date(from: string): Date;
}

export class IndexPath extends NSObject {
  static indexPathForItem(_: number, inSection: number): IndexPath;
  static createWithIndexPathWithIndex(_: number): IndexPath;
  static createWithIndexPathWithIndexesLength(_?: number, length?: number): IndexPath;
  item: number;
  length: number;
  section: number;
  compare(_: IndexPath): NSObjCRuntime.ComparisonResult;
  getIndexes(_: number): void;
  getIndexes(_: number, range: NSRange): void;
  indexAtPosition(_: number): number;
  indexPathByAddingIndex(_: number): IndexPath;
  indexPathByRemovingLastIndex(): IndexPath;
  static createWithIndex(_: number): IndexPath;
  static createWithIndexesWithLength(_?: number, length?: number): IndexPath;
}

export class IndexSet extends NSObject {
  static createWithIndexSet(): IndexSet;
  static createWithIndexSetWithIndex(_: number): IndexSet;
  static createWithIndexSetWithIndexesInRange(_: NSRange): IndexSet;
  count: number;
  firstIndex: number;
  lastIndex: number;
  containsIndex(_: number): boolean;
  containsIndexes(_: IndexSet): boolean;
  containsIndexesInRange(_: NSRange): boolean;
  countOfIndexesInRange(_: NSRange): number;
  enumerateIndexesInRange(_: NSRange, options: NSObjCRuntime.NSEnumerationOptions, usingBlock: (p1: number, p2: boolean) => void): void;
  enumerateIndexesUsingBlock(_: (p1: number, p2: boolean) => void): void;
  enumerateIndexesWithOptions(_: NSObjCRuntime.NSEnumerationOptions, usingBlock: (p1: number, p2: boolean) => void): void;
  enumerateRangesInRange(_: NSRange, options: NSObjCRuntime.NSEnumerationOptions, usingBlock: (p1: NSRange, p2: boolean) => void): void;
  enumerateRangesUsingBlock(_: (p1: NSRange, p2: boolean) => void): void;
  enumerateRangesWithOptions(_: NSObjCRuntime.NSEnumerationOptions, usingBlock: (p1: NSRange, p2: boolean) => void): void;
  getIndexes(_: number, maxCount: number, inIndexRange?: NSRange): number;
  indexGreaterThanIndex(_: number): number;
  indexGreaterThanOrEqualToIndex(_: number): number;
  indexInRange(_: NSRange, options: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): number;
  indexLessThanIndex(_: number): number;
  indexLessThanOrEqualToIndex(_: number): number;
  indexPassingTest(_: (p1: number, p2: boolean) => boolean): number;
  indexWithOptions(_: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): number;
  indexesInRange(_: NSRange, options: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): IndexSet;
  indexesPassingTest(_: (p1: number, p2: boolean) => boolean): IndexSet;
  indexesWithOptions(_: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): IndexSet;
  static createWithIndex(_: number): IndexSet;
  static createWithIndexSet(_: IndexSet): IndexSet;
  static createWithIndexesInRange(_: NSRange): IndexSet;
  intersectsIndexesInRange(_: NSRange): boolean;
  isEqualToIndexSet(_: IndexSet): boolean;
}

export class InputStream extends Stream {
  hasBytesAvailable: boolean;
  getBuffer(_?: string, length?: number): boolean;
  static createWithData(_: Data): InputStream;
  static createWithFileAtPath(_: string): InputStream;
  static createWithUrl(_: URL): InputStream;
  read(_: string, maxLength: number): number;
}

export class JSONSerialization extends NSObject {
  static JSONObjectWithData(options: Data, error: JSONSerialization.ReadingOptions): any;
  static JSONObjectWithStream(options: InputStream, error: JSONSerialization.ReadingOptions): any;
  static dataWithJSONObject(options: any, error: JSONSerialization.WritingOptions): Data;
  static isValidJSONObject(_: any): boolean;
  static writeJSONObject(_: any, to: OutputStream, options: JSONSerialization.WritingOptions): number;
}

export class LengthFormatter extends Formatter {
  isForPersonHeightUse: boolean;
  setForPersonHeightUse(_: boolean);
  numberFormatter: NumberFormatter;
  setNumberFormatter(_: NumberFormatter);
  unitStyle: Formatter.UnitStyle;
  setUnitStyle(_: Formatter.UnitStyle);
  unitString(fromMeters: number, usedUnit?: LengthFormatter.Unit): string;
  unitString(fromValue: number, unit: LengthFormatter.Unit): string;
}

export class ListFormatter extends Formatter {
  static localizedString(byJoining: string[]): string;
  itemFormatter: Formatter;
  setItemFormatter(_: Formatter);
  locale: Locale;
  setLocale(_: Locale);
}

export class Locale extends NSObject {
  static canonicalLanguageIdentifierFromString(_: string): string;
  static canonicalLocaleIdentifierFromString(_: string): string;
  static characterDirectionForLanguage(_: string): Locale.LanguageDirection;
  static componentsFromLocaleIdentifier(_: string): Map<string, string>;
  static lineDirectionForLanguage(_: string): Locale.LanguageDirection;
  static localeIdentifierFromComponents(_: Map<string, string>): string;
  static localeIdentifierFromWindowsLocaleCode(_: number): string;
  static createWithLocaleWithLocaleIdentifier(_: string): Locale;
  static windowsLocaleCodeFromLocaleIdentifier(_: string): number;
  alternateQuotationBeginDelimiter: string;
  alternateQuotationEndDelimiter: string;
  calendarIdentifier: string;
  collationIdentifier: string;
  collatorIdentifier: string;
  countryCode: string;
  currencyCode: string;
  currencySymbol: string;
  decimalSeparator: string;
  exemplarCharacterSet: CharacterSet;
  groupingSeparator: string;
  languageCode: string;
  localeIdentifier: string;
  quotationBeginDelimiter: string;
  quotationEndDelimiter: string;
  scriptCode: string;
  usesMetricSystem: boolean;
  variantCode: string;
  static ISOCountryCodes: string[];
  static ISOCurrencyCodes: string[];
  static ISOLanguageCodes: string[];
  static autoupdatingCurrentLocale: Locale;
  static availableLocaleIdentifiers: string[];
  static commonISOCurrencyCodes: string[];
  static currentLocale: Locale;
  static preferredLanguages: string[];
  static systemLocale: Locale;
  displayNameForKey(_: string, value: any): string;
  static createWithLocaleIdentifier(_: string): Locale;
  localizedStringForCalendarIdentifier(_: string): string;
  localizedStringForCollationIdentifier(_: string): string;
  localizedStringForCollatorIdentifier(_: string): string;
  localizedStringForCountryCode(_: string): string;
  localizedStringForCurrencyCode(_: string): string;
  localizedStringForLanguageCode(_: string): string;
  localizedStringForLocaleIdentifier(_: string): string;
  localizedStringForScriptCode(_: string): string;
  localizedStringForVariantCode(_: string): string;
  objectForKey(_: string): any;
}

export class MassFormatter extends Formatter {
  isForPersonMassUse: boolean;
  setForPersonMassUse(_: boolean);
  numberFormatter: NumberFormatter;
  setNumberFormatter(_: NumberFormatter);
  unitStyle: Formatter.UnitStyle;
  setUnitStyle(_: Formatter.UnitStyle);
  unitString(fromKilograms: number, usedUnit?: MassFormatter.Unit): string;
  unitString(fromValue: number, unit: MassFormatter.Unit): string;
}

export class Measurement<UnitType> extends NSObject {
  doubleValue: number;
  unit: UnitType;
  canBeConvertedToUnit(_: Unit): boolean;
  // static createWithDoubleValueWithUnit(_: number, unit: UnitType): Measurement<UnitType>;
  measurementByAddingMeasurement(_: Measurement<any>): Measurement<any>;
  measurementByConvertingToUnit(_: Unit): Measurement<any>;
  measurementBySubtractingMeasurement(_: Measurement<any>): Measurement<any>;
}

export class MeasurementFormatter extends Formatter {
  locale: Locale;
  setLocale(_: Locale);
  numberFormatter: NumberFormatter;
  setNumberFormatter(_: NumberFormatter);
  unitOptions: MeasurementFormatter.UnitOptions;
  setUnitOptions(_: MeasurementFormatter.UnitOptions);
  unitStyle: Formatter.UnitStyle;
  setUnitStyle(_: Formatter.UnitStyle);
}

export class MessagePort extends Port {
}

// export function NSAllHashTableObjects(table: NSHashTable<any>): any[];

// export function NSAllMapTableKeys(table: NSMapTable<any, any>): any[];

// export function NSAllMapTableValues(table: NSMapTable<any, any>): any[];

// export function NSAllocateCollectable(size: number, options: number): any;

// export function NSAllocateMemoryPages(bytes: number): any;

// export function NSAllocateObject(aClass: typeof NSObject, extraBytes: number, zone: any): any;

export class NSAppleEventDescriptor extends NSObject {
  static appleEvent(withEventClass: number, eventID: number, targetDescriptor?: NSAppleEventDescriptor, returnID?: number, transactionID?: number): NSAppleEventDescriptor;
  static currentProcess(): NSAppleEventDescriptor;
  static list(): NSAppleEventDescriptor;
  static null(): NSAppleEventDescriptor;
  static record(): NSAppleEventDescriptor;
  aeDesc: AEDesc;
  booleanValue: boolean;
  data: Data;
  dateValue: Date;
  descriptorType: number;
  doubleValue: number;
  enumCodeValue: number;
  eventClass: number;
  eventID: number;
  fileURLValue: URL;
  int32Value: number;
  isRecordDescriptor: boolean;
  numberOfItems: number;
  returnID: number;
  stringValue: string;
  transactionID: number;
  typeCodeValue: number;
  attributeDescriptor(forKeyword: number): NSAppleEventDescriptor;
  coerce(toDescriptorType: number): NSAppleEventDescriptor;
  atIndex(_: number): NSAppleEventDescriptor;
  forKeyword(_: number): NSAppleEventDescriptor;
  static createWithListDescriptor(): NSAppleEventDescriptor;
  static createWithRecordDescriptor(): NSAppleEventDescriptor;
  static createWithAeDescNoCopy(_: AEDesc): NSAppleEventDescriptor;
  static createWithDescriptorTypeWithBytesWithLength(_: number, bytes?: any, length?: number): NSAppleEventDescriptor;
  static createWithDescriptorTypeWithData(_: number, data?: Data): NSAppleEventDescriptor;
  static createWithEventClassWithEventIDWithTargetDescriptorWithReturnIDWithTransactionID(_: number, eventID: number, targetDescriptor?: NSAppleEventDescriptor, returnID?: number, transactionID?: number): NSAppleEventDescriptor;
  insert(_: NSAppleEventDescriptor, at: number): void;
  keywordForDescriptor(at: number): number;
  paramDescriptor(forKeyword: number): NSAppleEventDescriptor;
  remove(at: number): void;
  remove(withKeyword: number): void;
  removeParamDescriptor(withKeyword: number): void;
  sendEventWithOptions(timeout: NSAppleEventDescriptor.SendOptions, error: number): NSAppleEventDescriptor;
  setAttribute(_: NSAppleEventDescriptor, forKeyword: number): void;
  setDescriptor(_: NSAppleEventDescriptor, forKeyword: number): void;
  setParam(_: NSAppleEventDescriptor, forKeyword: number): void;
}

export class NSAppleEventManager extends NSObject {
  static shared(): NSAppleEventManager;
  currentAppleEvent: NSAppleEventDescriptor;
  currentReplyAppleEvent: NSAppleEventDescriptor;
  appleEvent(forSuspensionID: any): NSAppleEventDescriptor;
  dispatchRawAppleEvent(_: AEDesc, withRawReply: AEDesc, handlerRefCon: any): number;
  removeEventHandler(forEventClass: number, andEventID: number): void;
  replyAppleEvent(forSuspensionID: any): NSAppleEventDescriptor;
  resume(withSuspensionID: any): void;
  setCurrentAppleEventAndReplyEventWithSuspensionID(_: any): void;
  setEventHandler(_: any, andSelector: string, forEventClass: number, andEventID: number): void;
  suspendCurrentAppleEvent(): any;
}

export class NSAppleScript extends NSObject {
  isCompiled: boolean;
  richTextSource: NSAttributedString;
  source: string;
  compileAndReturnError(_?: Map<string, any>): boolean;
  executeAndReturnError(_?: Map<string, any>): NSAppleEventDescriptor;
  executeAppleEvent(_: NSAppleEventDescriptor, error?: Map<string, any>): NSAppleEventDescriptor;
  static createWithContentsOfWithError(_: URL, error?: Map<string, any>): NSAppleScript;
  static createWithSource(_: string): NSAppleScript;
}

export class NSAssertionHandler extends NSObject {
  static currentHandler: NSAssertionHandler;
}

export class NSAttributedString extends NSObject {
  containsAttachments: boolean;
  length: number;
  static textTypes: string[];
  static textUnfilteredTypes: string[];
  rtfdFileWrapper(from: NSRange, documentAttributes: Map<string, any>): FileWrapper;
  rtfd(from: NSRange, documentAttributes: Map<string, any>): Data;
  rtf(from: NSRange, documentAttributes: Map<string, any>): Data;
  attribute(_: string, at: number, effectiveRange?: NSRange): any;
  attribute(_: string, at: number, longestEffectiveRange?: NSRange, in_?: NSRange): any;
  attributedSubstring(from: NSRange): NSAttributedString;
  attributes(at: number, effectiveRange?: NSRange): Map<string, any>;
  attributes(at: number, longestEffectiveRange?: NSRange, in_?: NSRange): Map<string, any>;
  boundingRect(with_: CGSize, options: NSStringDrawing.String.DrawingOptions): CGRect;
  boundingRect(with_: CGSize, options: NSStringDrawing.String.DrawingOptions, context?: NSStringDrawingContext): CGRect;
  // dupe name w instance property   containsAttachments(in_: NSRange): boolean;
  dataFromRange(documentAttributes: NSRange, error: Map<string, any>): Data;
  docFormat(from: NSRange, documentAttributes: Map<string, any>): Data;
  doubleClick(at: number): NSRange;
  draw(at: CGPoint): void;
  draw(in_: CGRect): void;
  draw(with_: CGRect, options: NSStringDrawing.String.DrawingOptions): void;
  draw(with_: CGRect, options: NSStringDrawing.String.DrawingOptions, context?: NSStringDrawingContext): void;
  enumerateAttribute(_: string, in_: NSRange, options: NSAttributedString.EnumerationOptions, using?: (p1: any, p2: NSRange, p3: boolean) => void): void;
  enumerateAttributes(in_: NSRange, options: NSAttributedString.EnumerationOptions, using: (p1: Map<string, any>, p2: NSRange, p3: boolean) => void): void;
  fileWrapperFromRange(documentAttributes: NSRange, error: Map<string, any>): FileWrapper;
  fontAttributes(in_: NSRange): Map<string, any>;
  static createWithAttributedString(_: NSAttributedString): NSAttributedString;
  static createWithDataWithOptions(options: Data, documentAttributes: Map<string, any>, error?: Map<string, any>): NSAttributedString;
  static createWithDocFormatWithDocumentAttributes(_: Data, documentAttributes?: Map<string, any>): NSAttributedString;
  static createWithHtmlWithBaseURLWithDocumentAttributes(_: Data, baseURL: URL, documentAttributes?: Map<string, any>): NSAttributedString;
  static createWithHtmlWithDocumentAttributes(_: Data, documentAttributes?: Map<string, any>): NSAttributedString;
  static createWithHtmlWithOptionsWithDocumentAttributes(_: Data, options: Map<string, any>, documentAttributes?: Map<string, any>): NSAttributedString;
  static createWithRtfWithDocumentAttributes(_: Data, documentAttributes?: Map<string, any>): NSAttributedString;
  static createWithRtfdWithDocumentAttributes(_: Data, documentAttributes?: Map<string, any>): NSAttributedString;
  static createWithRtfdFileWrapperWithDocumentAttributes(_: FileWrapper, documentAttributes?: Map<string, any>): NSAttributedString;
  static createWithString(_: string): NSAttributedString;
  static createWithStringWithAttributes(_: string, attributes?: Map<string, any>): NSAttributedString;
  static createWithUrlWithOptions(options: URL, documentAttributes: Map<string, any>, error?: Map<string, any>): NSAttributedString;
  // @ts-ignore 
  isEqual(to: NSAttributedString): boolean;
  itemNumber(in_: NSTextList, at: number): number;
  lineBreak(before: number, within: NSRange): number;
  lineBreakByHyphenating(before: number, within: NSRange): number;
  nextWord(from: number, forward: boolean): number;
  range(of: NSTextBlock, at: number): NSRange;
  range(of: NSTextList, at: number): NSRange;
  range(of: NSTextTable, at: number): NSRange;
  rulerAttributes(in_: NSRange): Map<string, any>;
  size(): CGSize;
}

export class NSAutoreleasePool extends NSObject {
  //  static add(_: any): void;
  static showPools(): void;
  add(_: any): void;
  drain(): void;
}

export class NSBackgroundActivityScheduler extends NSObject {
  identifier: string;
  interval: number;
  setInterval(_: number);
  qualityOfService: NSObjCRuntime.QualityOfService;
  setQualityOfService(_: NSObjCRuntime.QualityOfService);
  repeats: boolean;
  setRepeats(_: boolean);
  shouldDefer: boolean;
  tolerance: number;
  setTolerance(_: number);
  static createWithIdentifier(_: string): NSBackgroundActivityScheduler;
  invalidate(): void;
  schedule(_: (p1: (p1: NSBackgroundActivityScheduler.Result) => void) => void): void;
}

export class NSBundleResourceRequest extends NSObject {
  bundle: Bundle;
  loadingPriority: number;
  setLoadingPriority(_: number);
  tags: Set<any>;
  beginAccessingResources(completionHandler?: (p1: Error) => void): void;
  conditionallyBeginAccessingResources(completionHandler: (p1: boolean) => void): void;
  endAccessingResources(): void;
  static createWithTags(_: Set<any>): NSBundleResourceRequest;
  static createWithTagsWithBundle(_: Set<any>, bundle: Bundle): NSBundleResourceRequest;
}

export class NSCache<KeyType, ObjectType> extends NSObject {
  countLimit: number;
  setCountLimit(_: number);
  delegate: any;
  setDelegate(_: any);
  evictsObjectsWithDiscardedContent: boolean;
  setEvictsObjectsWithDiscardedContent(_: boolean);
  name: string;
  setName(_: string);
  totalCostLimit: number;
  setTotalCostLimit(_: number);
  object(forKey: KeyType): ObjectType;
  removeAllObjects(): void;
  removeObject(forKey: KeyType): void;
  setObject(_: ObjectType, forKey: KeyType): void;
  setObject(_: ObjectType, forKey: KeyType, cost: number): void;
}

interface NSCacheDelegate {
  cache(_: NSCache<any, any>, willEvictObject: any): void;
}

export class NSCalendarDate extends Date {
  //  static createWithDate(): NSCalendarDate;
  //  static createWithDateWithTimeIntervalSinceDate(_: number, sinceDate: Date): NSCalendarDate;
  //  static createWithDateWithTimeIntervalSince1970(_: number): NSCalendarDate;
  //  static createWithDateWithTimeIntervalSinceNow(_: number): NSCalendarDate;
  //  static createWithDateWithTimeIntervalSinceReferenceDate(_: number): NSCalendarDate;
}

export class NSClassDescription extends NSObject {
  static invalidateClassDescriptionCache(): void;
  static register(_: NSClassDescription, for_: typeof NSObject): void;
}

// export function NSClassFromString(aClassName: string): typeof NSObject;

export class NSCloneCommand extends NSScriptCommand {
  keySpecifier: NSScriptObjectSpecifier;
  setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
}

export class NSCloseCommand extends NSScriptCommand {
}

export class NSCoder extends NSObject {
  allowedClasses: Set<any>;
  allowsKeyedCoding: boolean;
  decodingFailurePolicy: NSCoder.DecodingFailurePolicy;
  error: Error;
  requiresSecureCoding: boolean;
  systemVersion: number;
  containsValue(forKey: string): boolean;
  decodeArray(ofObjCType: string, count: number, at: any): void;
  decodeBool(forKey: string): boolean;
  decodeBytes(forKey: string, returnedLength?: number): string;
  decodeBytes(withReturnedLength: number): any;
  decodeTime(forKey: string): CMTime;
  decodeTimeMapping(forKey: string): CMTimeMapping;
  decodeTimeRange(forKey: string): CMTimeRange;
  decodeData(): Data;
  decodeDouble(forKey: string): number;
  decodeFloat(forKey: string): number;
  decodeInt32(forKey: string): number;
  decodeInt64(forKey: string): number;
  decodeCInt(forKey: string): number;
  decodeInteger(forKey: string): number;
  decodeObject(): any;
  decodeObject(forKey: string): any;
  decodePoint(): CGPoint;
  decodePoint(forKey: string): CGPoint;
  decodePropertyList(): any;
  decodePropertyList(forKey: string): any;
  decodeRect(): CGRect;
  decodeRect(forKey: string): CGRect;
  decodeSize(): CGSize;
  decodeSize(forKey: string): CGSize;
  decodeValue(ofObjCType: string, at: any): void;
  decodeValue(ofObjCType: string, at: any, size: number): void;
  encodeArray(ofObjCType: string, count: number, at: any): void;
  encode(_: boolean, forKey: string): void;
  encodeBycopyObject(_?: any): void;
  encodeByrefObject(_?: any): void;
  encodeBytes(_?: any, length?: number): void;
  encodeBytes(_?: string, length?: number, forKey?: string): void;
  encodeCMTime(_: CMTime, forKey: string): void;
  encodeCMTimeMapping(_: CMTimeMapping, forKey: string): void;
  encodeCMTimeRange(_: CMTimeRange, forKey: string): void;
  encodeConditionalObject(_?: any): void;
  encodeConditionalObject(_?: any, forKey?: string): void;
  encode(_: Data): void;
  encode(_: number, forKey: string): void;
  encode(_: number, forKey: string): void;
  encode(_: number, forKey: string): void;
  encode(_: number, forKey: string): void;
  encodeCInt(_: number, forKey: string): void;
  encode(_: number, forKey: string): void;
  encode(_?: any): void;
  encode(_?: any, forKey?: string): void;
  encode(_: CGPoint): void;
  encode(_: CGPoint, forKey: string): void;
  encodePropertyList(_: any): void;
  encode(_: CGRect): void;
  encode(_: CGRect, forKey: string): void;
  encodeRootObject(_: any): void;
  encode(_: CGSize): void;
  encode(_: CGSize, forKey: string): void;
  encodeValue(ofObjCType: string, at: any): void;
  failWithError(_: Error): void;
  // @ts-ignore 
  // dupe name w inherited static method  version(forClassName: string): number;
}

interface NSCoding {
  encode(with_: NSCoder): void;
}

// export function NSCompareHashTables(table1: NSHashTable<any>, table2: NSHashTable<any>): boolean;

// export function NSCompareMapTables(table1: NSMapTable<any, any>, table2: NSMapTable<any, any>): boolean;

export class NSComparisonPredicate extends NSPredicate {
  comparisonPredicateModifier: NSComparisonPredicate.Modifier;
  customSelector: string;
  leftExpression: NSExpression;
  options: NSComparisonPredicate.Options;
  predicateOperatorType: NSComparisonPredicate.Operator;
  rightExpression: NSExpression;
  static createWithLeftExpressionWithRightExpressionWithCustomSelector(_: NSExpression, rightExpression: NSExpression, customSelector: string): NSComparisonPredicate;
  static createWithLeftExpressionWithRightExpressionWithModifierWithTypeWithOptions(_: NSExpression, rightExpression: NSExpression, modifier: NSComparisonPredicate.Modifier, type: NSComparisonPredicate.Operator, options: NSComparisonPredicate.Options): NSComparisonPredicate;
}

export class NSCompoundPredicate extends NSPredicate {
  compoundPredicateType: NSCompoundPredicate.LogicalType;
  subpredicates: any[];
  static createWithTypeWithSubpredicates(_: NSCompoundPredicate.LogicalType, subpredicates: NSPredicate[]): NSCompoundPredicate;
}

export class NSCondition extends NSObject {
  name: string;
  setName(_: string);
  broadcast(): void;
  signal(): void;
  wait(): void;
  wait(until: Date): boolean;
}

export class NSConditionLock extends NSObject {
  condition: number;
  name: string;
  setName(_: string);
  static createWithCondition(_: number): NSConditionLock;
  lock(before: Date): boolean;
  lock(whenCondition: number): void;
  lock(whenCondition: number, before: Date): boolean;
  try(): boolean;
  tryLock(whenCondition: number): boolean;
  unlock(withCondition: number): void;
}

export class NSConnection extends NSObject {
  static allConnections(): NSConnection[];
  static currentConversation(): any;
  static rootProxyForConnection(withRegisteredName: string, host?: string): NSDistantObject;
  static rootProxyForConnection(withRegisteredName: string, host?: string, using?: NSPortNameServer): NSDistantObject;
  static createWithServiceConnectionWithNameWithRootObject(withName: string, rootObject: any): NSConnection;
  static createWithServiceConnectionWithNameWithRootObjectWithUsingNameServer(withName: string, rootObject: any, using: NSPortNameServer): NSConnection;
  delegate: any;
  setDelegate(_: any);
  independentConversationQueueing: boolean;
  setIndependentConversationQueueing(_: boolean);
  localObjects: any[];
  multipleThreadsEnabled: boolean;
  receivePort: Port;
  remoteObjects: any[];
  replyTimeout: number;
  setReplyTimeout(_: number);
  requestModes: string[];
  requestTimeout: number;
  setRequestTimeout(_: number);
  rootObject: any;
  setRootObject(_: any);
  rootProxy: NSDistantObject;
  sendPort: Port;
  statistics: Map<string, number>;
  isValid: boolean;
  addRequestMode(_: string): void;
  add(_: RunLoop): void;
  dispatch(withComponents: any[]): void;
  enableMultipleThreads(): void;
  static createWithReceivePortWithSendPort(_?: Port, sendPort?: Port): NSConnection;
  invalidate(): void;
  registerName(_?: string): boolean;
  registerName(_?: string, with_?: NSPortNameServer): boolean;
  removeRequestMode(_: string): void;
  remove(_: RunLoop): void;
  runInNewThread(): void;
}

interface NSConnectionDelegate {
  authenticateComponents(_: any[], with_: Data): boolean;
  authenticationData(forComponents: any[]): Data;
  connection(_: NSConnection, shouldMakeNewConnection: NSConnection): boolean;
  connection(_: NSConnection, handle: NSDistantObjectRequest): boolean;
  createConversation(for_: NSConnection): any;
  makeNewConnection(_: NSConnection, sender: NSConnection): boolean;
}

export class NSConstantString extends NSSimpleCString {
  //  static createWithObjectWithItemProviderDataTypeIdentifier(typeIdentifier: Data, error: string): NSConstantString;
  //  static createWithStringWithCStringEncoding(_: string, encoding: number): NSConstantString;
  //  static createWithStringWithCharactersLength(_: string, length: number): NSConstantString;
  //  static createWithStringWithContentsOfFileEncoding(encoding: string, error: number): NSConstantString;
  //  static createWithStringWithContentsOfFileUsedEncoding(usedEncoding: string, error?: number): NSConstantString;
  //  static createWithStringWithContentsOfURLEncoding(encoding: URL, error: number): NSConstantString;
  //  static createWithStringWithContentsOfURLUsedEncoding(usedEncoding: URL, error?: number): NSConstantString;
  //  static createWithStringWithString(_: string): NSConstantString;
  //  static createWithStringWithUTF8String(_: string): NSConstantString;
}

// export function NSContainsRect(aRect: CGRect, bRect: CGRect): boolean;

// export function NSCopyHashTableWithZone(table: NSHashTable<any>, zone: any): NSHashTable<any>;

// export function NSCopyMapTableWithZone(table: NSMapTable<any, any>, zone: any): NSMapTable<any, any>;

// export function NSCopyMemoryPages(source: any, dest: any, bytes: number): void;

interface NSCopying {
  copy(with_?: any): any;
}

export class NSCountCommand extends NSScriptCommand {
}

// export function NSCountFrames(): number;

// export function NSCountHashTable(table: NSHashTable<any>): number;

// export function NSCountMapTable(table: NSMapTable<any, any>): number;

export class NSCountedSet<ObjectType> extends NSMutableSet<ObjectType> {
  //  static createWithSet<ObjectType>(): NSCountedSet<ObjectType>;
  //  static createWithSetWithArray<ObjectType>(_: ObjectType[]): NSCountedSet<ObjectType>;
  //  static createWithSetWithCollectionViewIndexPath<ObjectType>(_: IndexPath): NSCountedSet<ObjectType>;
  //  static createWithSetWithCollectionViewIndexPaths<ObjectType>(_: IndexPath[]): NSCountedSet<ObjectType>;
  //  static createWithSetWithObject<ObjectType>(_: ObjectType): NSCountedSet<ObjectType>;
  //  static createWithSetWithObjects<ObjectType>(_: ObjectType): NSCountedSet<ObjectType>;
  //  static createWithSetWithObjectsCount<ObjectType>(_: ObjectType, count: number): NSCountedSet<ObjectType>;
  //  static createWithSetWithSet<ObjectType>(_: Set<any>): NSCountedSet<ObjectType>;
  // @ts-ignore 
  count(for_: ObjectType): number;
}

export class NSCreateCommand extends NSScriptCommand {
  createClassDescription: NSScriptClassDescription;
  resolvedKeyDictionary: Map<string, any>;
}

// export function NSCreateHashTable(callBacks: NSHashTableCallBacks, capacity: number): NSHashTable<any>;

// export function NSCreateHashTableWithZone(callBacks: NSHashTableCallBacks, capacity: number, zone: any): NSHashTable<any>;

// export function NSCreateMapTable(keyCallBacks: NSMapTableKeyCallBacks, valueCallBacks: NSMapTableValueCallBacks, capacity: number): NSMapTable<any, any>;

// export function NSCreateMapTableWithZone(keyCallBacks: NSMapTableKeyCallBacks, valueCallBacks: NSMapTableValueCallBacks, capacity: number, zone: any): NSMapTable<any, any>;

// export function NSCreateZone(startSize: number, granularity: number, canFree: boolean): any;

export class NSDataDetector extends NSRegularExpression {
  static dataDetectorWithTypes(error: number): NSDataDetector;
  checkingTypes: number;
  static createWith(error: number): NSDataDetector;
}

// export function NSDeallocateMemoryPages(ptr: any, bytes: number): void;

// export function NSDeallocateObject(object_: any): void;

// export function NSDecimalAdd(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): NSDecimal.NSDecimalNumber.CalculationError;

// export function NSDecimalCompact(number: number): void;

// export function NSDecimalCompare(leftOperand: number, rightOperand: number): NSObjCRuntime.ComparisonResult;

// export function NSDecimalCopy(destination: number, source: number): void;

// export function NSDecimalDivide(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): NSDecimal.NSDecimalNumber.CalculationError;

// export function NSDecimalMultiply(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): NSDecimal.NSDecimalNumber.CalculationError;

// export function NSDecimalMultiplyByPowerOf10(result: number, number: number, power: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): NSDecimal.NSDecimalNumber.CalculationError;

// export function NSDecimalNormalize(number1: number, number2: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): NSDecimal.NSDecimalNumber.CalculationError;

export class NSDecimalNumber extends NSNumber {
  static defaultBehavior: any;
  setDefaultBehavior(_: any);
  static maximumDecimalNumber: NSDecimalNumber;
  static minimumDecimalNumber: NSDecimalNumber;
  static notANumber: NSDecimalNumber;
  static one: NSDecimalNumber;
  static zero: NSDecimalNumber;
  adding(_: NSDecimalNumber): NSDecimalNumber;
  adding(_: NSDecimalNumber, withBehavior?: any): NSDecimalNumber;
  dividing(by: NSDecimalNumber): NSDecimalNumber;
  dividing(by: NSDecimalNumber, withBehavior?: any): NSDecimalNumber;
  multiplying(by: NSDecimalNumber): NSDecimalNumber;
  multiplying(by: NSDecimalNumber, withBehavior?: any): NSDecimalNumber;
  multiplying(byPowerOf10: number): NSDecimalNumber;
  multiplying(byPowerOf10: number, withBehavior?: any): NSDecimalNumber;
  raising(toPower: number): NSDecimalNumber;
  raising(toPower: number, withBehavior?: any): NSDecimalNumber;
  rounding(accordingToBehavior?: any): NSDecimalNumber;
  subtracting(_: NSDecimalNumber): NSDecimalNumber;
  subtracting(_: NSDecimalNumber, withBehavior?: any): NSDecimalNumber;
  static createWithDecimal(_: NSDecimal): NSDecimalNumber;
  static createWithMantissaWithExponentWithIsNegative(_: number, exponent: number, isNegative: boolean): NSDecimalNumber;
  static createWithString(_?: string): NSDecimalNumber;
  static createWithStringWithLocale(_?: string, locale?: any): NSDecimalNumber;
}

interface NSDecimalNumberBehaviors {
  exceptionDuringOperation(_: string, error: NSDecimal.NSDecimalNumber.CalculationError, leftOperand: NSDecimalNumber, rightOperand?: NSDecimalNumber): NSDecimalNumber;
  roundingMode(): NSDecimal.NSDecimalNumber.RoundingMode;
  scale(): number;
}

export class NSDecimalNumberHandler extends NSObject {
  static defaultDecimalNumberHandler: NSDecimalNumberHandler;
  static createWithRoundingModeWithScaleWithRaiseOnExactnessWithRaiseOnOverflowWithRaiseOnUnderflowWithRaiseOnDivideByZero(_: NSDecimal.NSDecimalNumber.RoundingMode, scale: number, raiseOnExactness: boolean, raiseOnOverflow: boolean, raiseOnUnderflow: boolean, raiseOnDivideByZero: boolean): NSDecimalNumberHandler;
}

// export function NSDecimalPower(result: number, number: number, power: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): NSDecimal.NSDecimalNumber.CalculationError;

// export function NSDecimalRound(result: number, number: number, scale: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): void;

// export function NSDecimalString(dcm: number, locale: any): string;

// export function NSDecimalSubtract(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimal.NSDecimalNumber.RoundingMode): NSDecimal.NSDecimalNumber.CalculationError;

// export function NSDecrementExtraRefCountWasZero(object_: any): boolean;

// export function NSDefaultMallocZone(): any;

export class NSDeleteCommand extends NSScriptCommand {
  keySpecifier: NSScriptObjectSpecifier;
  setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
}

interface NSDiscardableContent {
  beginContentAccess(): boolean;
  discardContentIfPossible(): void;
  endContentAccess(): void;
  isContentDiscarded(): boolean;
}

export class NSDistantObject extends NSProxy {
  //  static createWithAlloc(): NSDistantObject;
  //  static createWithAllocWithZone(with_?: any): NSDistantObject;
  static proxy(withLocal: any, connection: NSConnection): any;
  static proxy(withTarget: any, connection: NSConnection): any;
  connectionForProxy: NSConnection;
  static createWithLocalWithConnection(_: any, connection: NSConnection): NSDistantObject;
  static createWithTargetWithConnection(_: any, connection: NSConnection): NSDistantObject;
  setProtocolForProxy(_?: any /* Protocol */): void;
}

export class NSDistantObjectRequest extends NSObject {
  connection: NSConnection;
  conversation: any;
  invocation: NSInvocation;
  reply(with_?: NSException): void;
}

export class NSDistributedLock extends NSObject {
  lockDate: Date;
  break(): void;
  static createWithPath(_: string): NSDistributedLock;
  try(): boolean;
  unlock(): void;
}

// export function NSDivideRect(inRect: CGRect, slice: CGRect, rem: CGRect, amount: number, edge: NSGeometry.NSRectEdge): void;

// export function NSEdgeInsetsEqual(aInsets: NSEdgeInsets, bInsets: NSEdgeInsets): boolean;

// export function NSEndHashTableEnumeration(enumerator: NSHashEnumerator): void;

// export function NSEndMapTableEnumeration(enumerator: NSMapEnumerator): void;

// export function NSEnumerateHashTable(table: NSHashTable<any>): NSHashEnumerator;

// export function NSEnumerateMapTable(table: NSMapTable<any, any>): NSMapEnumerator;

export class NSEnumerator<ObjectType> extends NSObject {
  allObjects: ObjectType[];
  nextObject(): ObjectType;
}

// export function NSEqualPoints(aPoint: CGPoint, bPoint: CGPoint): boolean;

// export function NSEqualRects(aRect: CGRect, bRect: CGRect): boolean;

// export function NSEqualSizes(aSize: CGSize, bSize: CGSize): boolean;

export class NSException extends NSObject {
  callStackReturnAddresses: number[];
  callStackSymbols: string[];
  name: string;
  reason: string;
  userInfo: Map<any, any>;
  static createWithNameWithReasonWithUserInfo(_: string, reason?: string, userInfo?: Map<any, any>): NSException;
  raise(): void;
}

export class NSExistsCommand extends NSScriptCommand {
}

export class NSExpression extends NSObject {
  static expressionForAnyKey(): NSExpression;
  static expressionForEvaluatedObject(): NSExpression;
  arguments: NSExpression[];
  collection: any;
  constantValue: any;
  expressionBlock: (p1: any, p2: NSExpression[], p3: Map<any, any>) => any;
  expressionType: NSExpression.ExpressionType;
  falseExpression: NSExpression;
  function: string;
  keyPath: string;
  leftExpression: NSExpression;
  operand: NSExpression;
  predicate: NSPredicate;
  rightExpression: NSExpression;
  trueExpression: NSExpression;
  variable: string;
  allowEvaluation(): void;
  expressionValue(with_?: any, context?: Map<any, any>): any;
  static createWithExpressionType(_: NSExpression.ExpressionType): NSExpression;
}

export class NSExtensionContext extends NSObject {
  inputItems: any[];
  cancelRequest(withError: Error): void;
  completeRequest(returningItems?: any[], completionHandler?: (p1: boolean) => void): void;
  open(_: URL, completionHandler?: (p1: boolean) => void): void;
}

export class NSExtensionItem extends NSObject {
  attachments: NSItemProvider[];
  setAttachments(_: NSItemProvider[]);
  attributedContentText: NSAttributedString;
  setAttributedContentText(_: NSAttributedString);
  attributedTitle: NSAttributedString;
  setAttributedTitle(_: NSAttributedString);
  userInfo: Map<any, any>;
  setUserInfo(_: Map<any, any>);
}

interface NSExtensionRequestHandling {
  beginRequest(with_: NSExtensionContext): void;
}

// export function NSExtraRefCount(object_: any): number;

interface NSFastEnumeration {
  countByEnumerating(with_: NSFastEnumerationState, objects?: any, count?: number): number;
}

export class NSFileAccessIntent extends NSObject {
  static createWithReadingIntentWithURLWithOptions(with_: URL, options: NSFileCoordinator.ReadingOptions): NSFileAccessIntent;
  static createWithWritingIntentWithURLWithOptions(with_: URL, options: NSFileCoordinator.WritingOptions): NSFileAccessIntent;
  URL: URL;
}

export class NSFileCoordinator extends NSObject {
  static addFilePresenter(_: any): void;
  static removeFilePresenter(_: any): void;
  purposeIdentifier: string;
  setPurposeIdentifier(_: string);
  static filePresenters: any[];
  cancel(): void;
  coordinate(with_: NSFileAccessIntent[], queue: OperationQueue, byAccessor?: (p1: Error) => void): void;
  coordinate(readingItemAt: URL, options: NSFileCoordinator.ReadingOptions, error?: Error, byAccessor?: (p1: URL) => void): void;
  coordinate(readingItemAt: URL, options: NSFileCoordinator.ReadingOptions, writingItemAt: URL, options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: URL, p2: URL) => void): void;
  coordinate(writingItemAt: URL, options: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: URL) => void): void;
  coordinate(writingItemAt: URL, options: NSFileCoordinator.WritingOptions, writingItemAt2: URL, options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: URL, p2: URL) => void): void;
  static createWithFilePresenter(_?: any): NSFileCoordinator;
  item(at: URL, didChangeUbiquityAttributes: Set<any>): void;
  item(at: URL, didMoveTo: URL): void;
  item(at: URL, willMoveTo: URL): void;
  prepare(forReadingItemsAt: URL[], options: NSFileCoordinator.ReadingOptions, writingItemsAt: URL[], options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: () => void) => void): void;
}

interface NSFilePresenter {
  observedPresentedItemUbiquityAttributes?: Set<any>;
  presentedItemOperationQueue: OperationQueue;
  presentedItemURL: URL;
  primaryPresentedItemURL?: URL;
  accommodatePresentedItemDeletion(completionHandler?: (p1: Error) => void): void;
  accommodatePresentedSubitemDeletion(at: URL, completionHandler?: (p1: Error) => void): void;
  presentedItemDidChange(): void;
  presentedItemDidChangeUbiquityAttributes(_: Set<any>): void;
  presentedItemDidGain(_: NSFileVersion): void;
  presentedItemDidLose(_: NSFileVersion): void;
  presentedItemDidMove(to: URL): void;
  presentedItemDidResolveConflict(_: NSFileVersion): void;
  presentedSubitem(at: URL, didMoveTo: URL): void;
  presentedSubitem(at: URL, didGain: NSFileVersion): void;
  presentedSubitem(at: URL, didLose: NSFileVersion): void;
  presentedSubitem(at: URL, didResolve: NSFileVersion): void;
  presentedSubitemDidAppear(at: URL): void;
  presentedSubitemDidChange(at: URL): void;
  relinquishPresentedItem(toReader?: (p1: () => void) => void): void;
  relinquishPresentedItem(toWriter?: (p1: () => void) => void): void;
  savePresentedItemChanges(completionHandler?: (p1: Error) => void): void;
}

export class NSFileProviderService extends NSObject {
  name: string;
  getFileProviderConnection(completionHandler?: (p1: NSXPCConnection, p2: Error) => void): void;
}

export class NSFileSecurity extends NSObject {
}

// export function NSFileTypeForHFSTypeCode(hfsFileTypeCode: number): string;

export class NSFileVersion extends NSObject {
  static addVersionOfItemAtURL(withContentsOfURL: URL, options: URL, error: NSFileVersion.AddingOptions): NSFileVersion;
  static currentVersionOfItem(at: URL): NSFileVersion;
  static getNonlocalVersionsOfItem(at: URL, completionHandler?: (p1: NSFileVersion[], p2: Error) => void): void;
  static otherVersionsOfItem(at: URL): NSFileVersion[];
  static removeOtherVersionsOfItemAtURL(error: URL): boolean;
  static temporaryDirectoryURLForNewVersionOfItem(at: URL): URL;
  static unresolvedConflictVersionsOfItem(at: URL): NSFileVersion[];
  URL: URL;
  isConflict: boolean;
  isDiscardable: boolean;
  setDiscardable(_: boolean);
  hasLocalContents: boolean;
  hasThumbnail: boolean;
  localizedName: string;
  localizedNameOfSavingComputer: string;
  modificationDate: Date;
  originatorNameComponents: PersonNameComponents;
  persistentIdentifier: any;
  isResolved: boolean;
  setResolved(_: boolean);
  removeAndReturnError(): boolean;
  replaceItemAtURL(options: URL, error: NSFileVersion.ReplacingOptions): URL;
}

// export function NSFrameAddress(frame: number): any;

// export function NSFreeHashTable(table: NSHashTable<any>): void;

// export function NSFreeMapTable(table: NSMapTable<any, any>): void;

// export function NSFullUserName(): string;

export class NSGarbageCollector extends NSObject {
  static defaultCollector(): any;
  collectExhaustively(): void;
  collectIfNeeded(): void;
  disable(): void;
  disableCollector(forPointer: any): void;
  enable(): void;
  enable(forPointer: any): void;
  // @ts-ignore 
  isEnabled(): boolean;
}

export class NSGetCommand extends NSScriptCommand {
}

// export function NSGetSizeAndAlignment(typePtr: string | any, sizep: number, alignp: number): string;

// export function NSGetUncaughtExceptionHandler(): (p1: NSException) => void;

// export function NSHFSTypeCodeFromFileType(fileTypeString: string): number;

// export function NSHFSTypeOfFile(fullFilePath: string): string;

// export function NSHashGet(table: NSHashTable<any>, pointer: any): any;

// export function NSHashInsert(table: NSHashTable<any>, pointer: any): void;

// export function NSHashInsertIfAbsent(table: NSHashTable<any>, pointer: any): any;

// export function NSHashInsertKnownAbsent(table: NSHashTable<any>, pointer: any): void;

// export function NSHashRemove(table: NSHashTable<any>, pointer: any): void;

export class NSHashTable<ObjectType> extends NSObject {
  static weakObjects<ObjectType>(): NSHashTable<any>;
  allObjects: ObjectType[];
  anyObject: ObjectType;
  count: number;
  pointerFunctions: NSPointerFunctions;
  setRepresentation: Set<any>;
  add(_?: ObjectType): void;
  contains(_?: ObjectType): boolean;
  // static createWithOptionsWithCapacity(_: NSPointerFunctions.Options, capacity: number): NSHashTable<ObjectType>;
  // static createWithPointerFunctionsWithCapacity(_: NSPointerFunctions, capacity: number): NSHashTable<ObjectType>;
  intersect(_: NSHashTable<any>): void;
  intersects(_: NSHashTable<any>): boolean;
  // @ts-ignore 
  isEqual(to: NSHashTable<any>): boolean;
  isSubset(of: NSHashTable<any>): boolean;
  member(_?: ObjectType): ObjectType;
  minus(_: NSHashTable<any>): void;
  objectEnumerator(): NSEnumerator<any>;
  removeAllObjects(): void;
  remove(_?: ObjectType): void;
  union(_: NSHashTable<any>): void;
}

// export function NSHomeDirectory(): string;

// export function NSHomeDirectoryForUser(userName: string): string;

// export function NSIncrementExtraRefCount(object_: any): void;

export class NSIndexSpecifier extends NSScriptObjectSpecifier {
  index: number;
  setIndex(_: number);
  // @ts-ignore 
  static createWithContainerClassDescriptionWithContainerSpecifierWithKeyWithIndex(_: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, index?: number): NSIndexSpecifier;
}

// export function NSInsetRect(aRect: CGRect, dX: number, dY: number): CGRect;

// export function NSIntegralRect(aRect: CGRect): CGRect;

// export function NSIntegralRectWithOptions(aRect: CGRect, opts: NSGeometry.AlignmentOptions): CGRect;

// export function NSIntersectionRange(range1: NSRange, range2: NSRange): NSRange;

// export function NSIntersectionRect(aRect: CGRect, bRect: CGRect): CGRect;

// export function NSIntersectsRect(aRect: CGRect, bRect: CGRect): boolean;

export class NSInvocation extends NSObject {
  argumentsRetained: boolean;
  methodSignature: NSMethodSignature;
  selector: string;
  setSelector(_: string);
  target: any;
  setTarget(_: any);
  getArgument(_: any, at: number): void;
  getReturnValue(_: any): void;
  invoke(): void;
  invoke(withTarget: any): void;
  retainArguments(): void;
  setArgument(_: any, at: number): void;
  setReturnValue(_: any): void;
}

export class NSInvocationOperation extends Operation {
  invocation: NSInvocation;
  result: any;
  static createWithInvocation(_: NSInvocation): NSInvocationOperation;
  static createWithTargetWithSelectorWithObject(_: any, selector: string, object_?: any): NSInvocationOperation;
}

// export function NSIsEmptyRect(aRect: CGRect): boolean;

// export function NSIsFreedObject(anObject: any): boolean;

export class NSItemProvider extends NSObject {
  containerFrame: CGRect;
  preferredPresentationSize: CGSize;
  previewImageHandler: (p1: (p1: any, p2: Error) => void, p2: typeof NSObject, p3: Map<any, any>) => void;
  setPreviewImageHandler(_: (p1: (p1: any, p2: Error) => void, p2: typeof NSObject, p3: Map<any, any>) => void);
  registeredTypeIdentifiers: string[];
  sourceFrame: CGRect;
  suggestedName: string;
  setSuggestedName(_: string);
  canLoadObject(ofClass: typeof NSObject): boolean;
  hasItemConformingToTypeIdentifier(_: string): boolean;
  hasRepresentationConforming(toTypeIdentifier: string, fileOptions: NSItemProvider.NSItemProviderFileOptions): boolean;
  static createWithContentsOf(_: URL): NSItemProvider;
  static createWithItemWithTypeIdentifier(_?: any, typeIdentifier?: string): NSItemProvider;
  static createWithObject(_: any): NSItemProvider;
  loadDataRepresentation(forTypeIdentifier: string, completionHandler?: (p1: Data, p2: Error) => void): Progress;
  loadFileRepresentation(forTypeIdentifier: string, completionHandler?: (p1: URL, p2: Error) => void): Progress;
  loadInPlaceFileRepresentation(forTypeIdentifier: string, completionHandler?: (p1: URL, p2: boolean, p3: Error) => void): Progress;
  loadItem(forTypeIdentifier: string, options?: Map<any, any>, completionHandler?: (p1: any, p2: Error) => void): void;
  loadObject(ofClass: typeof NSObject, completionHandler?: (p1: any, p2: Error) => void): Progress;
  loadPreviewImage(options: Map<any, any>, completionHandler: (p1: any, p2: Error) => void): void;
  registerCloudKitShare(_: CKShare, container: CKContainer): void;
  registerCloudKitShare(preparationHandler?: (p1: (p1: CKShare, p2: CKContainer, p3: Error) => void) => void): void;
  registerDataRepresentation(forTypeIdentifier: string, visibility: NSItemProvider.NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: Data, p2: Error) => void) => Progress): void;
  registerFileRepresentation(forTypeIdentifier: string, fileOptions: NSItemProvider.NSItemProviderFileOptions, visibility: NSItemProvider.NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: URL, p2: boolean, p3: Error) => void) => Progress): void;
  registerItem(forTypeIdentifier: string, loadHandler: (p1: (p1: any, p2: Error) => void, p2: typeof NSObject, p3: Map<any, any>) => void): void;
  registerObject(_: any, visibility: NSItemProvider.NSItemProviderRepresentationVisibility): void;
  registerObject(ofClass: typeof NSObject, visibility: NSItemProvider.NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: any, p2: Error) => void) => Progress): void;
  // dupe name w instance property   registeredTypeIdentifiers(fileOptions: NSItemProvider.NSItemProviderFileOptions): string[];
}

interface NSItemProviderReading {
}

interface NSItemProviderWriting {
  writableTypeIdentifiersForItemProvider?: string[];
  itemProviderVisibilityForRepresentation(withTypeIdentifier: string): NSItemProvider.NSItemProviderRepresentationVisibility;
  loadData(withTypeIdentifier: string, forItemProviderCompletionHandler?: (p1: Data, p2: Error) => void): Progress;
}

export class NSKeyedArchiver extends NSCoder {
  static archivedDataWithRootObject(requiringSecureCoding: any, error: boolean): Data;
  //  static className(for_: typeof NSObject): string;
  //  static setClassName(_?: string, for_?: typeof NSObject): void;
  delegate: any;
  setDelegate(_: any);
  encodedData: Data;
  outputFormat: NSPropertyList.PropertyListSerialization.PropertyListFormat;
  setOutputFormat(_: NSPropertyList.PropertyListSerialization.PropertyListFormat);
  requiresSecureCoding: boolean;
  setRequiresSecureCoding(_: boolean);
  // @ts-ignore 
  className(for_: typeof NSObject): string;
  finishEncoding(): void;
  static createWithRequiringSecureCoding(_: boolean): NSKeyedArchiver;
  setClassName(_?: string, for_?: typeof NSObject): void;
}

interface NSKeyedArchiverDelegate {
  archiver(_: NSKeyedArchiver, willEncode: any): any;
  archiver(_: NSKeyedArchiver, didEncode?: any): void;
  archiver(_: NSKeyedArchiver, willReplace?: any, with_?: any): void;
  archiverDidFinish(_: NSKeyedArchiver): void;
  archiverWillFinish(_: NSKeyedArchiver): void;
}

export class NSKeyedUnarchiver extends NSCoder {
  //  static class(forClassName: string): typeof NSObject;
  //  static setClass(_?: typeof NSObject, forClassName?: string): void;
  static unarchivedObjectOfClass(fromData: typeof NSObject, error: Data): any;
  static unarchivedObjectOfClasses(fromData: Set<any>, error: Data): any;
  decodingFailurePolicy: NSCoder.DecodingFailurePolicy;
  setDecodingFailurePolicy(_: NSCoder.DecodingFailurePolicy);
  delegate: any;
  setDelegate(_: any);
  requiresSecureCoding: boolean;
  setRequiresSecureCoding(_: boolean);
  class(forClassName: string): typeof NSObject;
  finishDecoding(): void;
  static createWith(error: Data): NSKeyedUnarchiver;
  setClass(_?: typeof NSObject, forClassName?: string): void;
}

interface NSKeyedUnarchiverDelegate {
  unarchiver(_: NSKeyedUnarchiver, cannotDecodeObjectOfClassName: string, originalClasses: string[]): typeof NSObject;
  unarchiver(_: NSKeyedUnarchiver, didDecode?: any): any;
  unarchiver(_: NSKeyedUnarchiver, willReplace: any, with_: any): void;
  unarchiverDidFinish(_: NSKeyedUnarchiver): void;
  unarchiverWillFinish(_: NSKeyedUnarchiver): void;
}

export class NSLinguisticTagger extends NSObject {
  static availableTagSchemes(forLanguage: string): string[];
  static availableTagSchemes(for_: NSLinguisticTagger.NSLinguisticTaggerUnit, language: string): string[];
  //  static dominantLanguage(for_: string): string;
  static enumerateTags(for_: string, range: NSRange, unit: NSLinguisticTagger.NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, using?: (p1: string, p2: NSRange, p3: boolean) => void): void;
  static tag(for_: string, at: number, unit: NSLinguisticTagger.NSLinguisticTaggerUnit, scheme: string, orthography?: NSOrthography, tokenRange?: NSRange): string;
  static tags(for_: string, range: NSRange, unit: NSLinguisticTagger.NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, tokenRanges?: NSValue[]): string[];
  dominantLanguage: string;
  tagSchemes: string[];
  enumerateTags(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, using?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
  enumerateTags(in_: NSRange, unit: NSLinguisticTagger.NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, using?: (p1: string, p2: NSRange, p3: boolean) => void): void;
  static createWithTagSchemesWithOptions(_: string[], options: number): NSLinguisticTagger;
  orthography(at: number, effectiveRange?: NSRange): NSOrthography;
  possibleTags(at: number, scheme: string, tokenRange?: NSRange, sentenceRange?: NSRange, scores?: NSValue[]): string[];
  sentenceRange(for_: NSRange): NSRange;
  setOrthography(_?: NSOrthography, range?: NSRange): void;
  stringEdited(in_: NSRange, changeInLength: number): void;
  tag(at: number, scheme: string, tokenRange?: NSRange, sentenceRange?: NSRange): string;
  tag(at: number, unit: NSLinguisticTagger.NSLinguisticTaggerUnit, scheme: string, tokenRange?: NSRange): string;
  tags(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, tokenRanges?: NSValue[]): string[];
  tags(in_: NSRange, unit: NSLinguisticTagger.NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, tokenRanges?: NSValue[]): string[];
  tokenRange(at: number, unit: NSLinguisticTagger.NSLinguisticTaggerUnit): NSRange;
}

export class NSLock extends NSObject {
  name: string;
  setName(_: string);
  lock(before: Date): boolean;
  try(): boolean;
}

interface NSLocking {
  lock(): void;
  unlock(): void;
}

// export function NSLogPageSize(): number;

export class NSLogicalTest extends NSScriptWhoseTest {
  static createWithAndTestWith(_: NSSpecifierTest[]): NSLogicalTest;
  static createWithNotTestWith(_: NSScriptWhoseTest): NSLogicalTest;
  static createWithOrTestWith(_: NSSpecifierTest[]): NSLogicalTest;
}

export class NSMachBootstrapServer extends NSPortNameServer {
  static sharedInstance(): any;
  servicePort(withName: string): Port;
}

export class NSMachPort extends Port {
  static port(withMachPort: number): Port;
  static port(withMachPort: number, options: Port.NSMachPort.Options): Port;
  machPort: number;
  // @ts-ignore 
  delegate(): any;
  static createWithMachPort(_: number): NSMachPort;
  static createWithMachPortWithOptions(_: number, options: Port.NSMachPort.Options): NSMachPort;
  // @ts-ignore 
  setDelegate(_?: any): void;
}

interface NSMachPortDelegate {
  handleMachMessage(_: any): void;
}

// export function NSMakeCollectable(cf: any): any;

// export function NSMapGet(table: NSMapTable<any, any>, key: any): any;

// export function NSMapInsert(table: NSMapTable<any, any>, key: any, value: any): void;

// export function NSMapInsertIfAbsent(table: NSMapTable<any, any>, key: any, value: any): any;

// export function NSMapInsertKnownAbsent(table: NSMapTable<any, any>, key: any, value: any): void;

// export function NSMapMember(table: NSMapTable<any, any>, key: any, originalKey: any, value: any): boolean;

// export function NSMapRemove(table: NSMapTable<any, any>, key: any): void;

export class NSMapTable<KeyType, ObjectType> extends NSObject {
  static strongToStrongObjects<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
  static strongToWeakObjects<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
  static weakToStrongObjects<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
  static weakToWeakObjects<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
  count: number;
  keyPointerFunctions: NSPointerFunctions;
  valuePointerFunctions: NSPointerFunctions;
  dictionaryRepresentation(): Map<KeyType, ObjectType>;
  // static createWithKeyOptionsWithValueOptionsWithCapacity(_: NSPointerFunctions.Options, valueOptions: NSPointerFunctions.Options, capacity: number): NSMapTable<KeyType, ObjectType>;
  // static createWithKeyPointerFunctionsWithValuePointerFunctionsWithCapacity(_: NSPointerFunctions, valuePointerFunctions: NSPointerFunctions, capacity: number): NSMapTable<KeyType, ObjectType>;
  keyEnumerator(): NSEnumerator<any>;
  objectEnumerator(): NSEnumerator<any>;
  object(forKey?: KeyType): ObjectType;
  removeAllObjects(): void;
  removeObject(forKey?: KeyType): void;
  setObject(_?: ObjectType, forKey?: KeyType): void;
}

export class NSMessagePortNameServer extends NSPortNameServer {
  static sharedInstance(): any;
}

export class NSMetadataItem extends NSObject {
  attributes: string[];
  static createWithUrl(_: URL): NSMetadataItem;
  // @ts-ignore 
  value(forAttribute: string): any;
  values(forAttributes: string[]): Map<string, any>;
}

export class NSMetadataQuery extends NSObject {
  delegate: any;
  setDelegate(_: any);
  isGathering: boolean;
  groupedResults: NSMetadataQueryResultGroup[];
  groupingAttributes: string[];
  setGroupingAttributes(_: string[]);
  notificationBatchingInterval: number;
  setNotificationBatchingInterval(_: number);
  operationQueue: OperationQueue;
  setOperationQueue(_: OperationQueue);
  predicate: NSPredicate;
  setPredicate(_: NSPredicate);
  resultCount: number;
  results: any[];
  searchItems: any[];
  setSearchItems(_: any[]);
  searchScopes: any[];
  setSearchScopes(_: any[]);
  sortDescriptors: NSSortDescriptor[];
  setSortDescriptors(_: NSSortDescriptor[]);
  isStarted: boolean;
  isStopped: boolean;
  valueListAttributes: string[];
  setValueListAttributes(_: string[]);
  valueLists: Map<string, NSMetadataQueryAttributeValueTuple[]>;
  disableUpdates(): void;
  enableUpdates(): void;
  enumerateResults(_: (p1: any, p2: number, p3: boolean) => void): void;
  enumerateResults(options: NSObjCRuntime.NSEnumerationOptions, using: (p1: any, p2: number, p3: boolean) => void): void;
  index(ofResult: any): number;
  result(at: number): any;
  start(): boolean;
  stop(): void;
  // @ts-ignore 
  value(ofAttribute: string, forResultAt: number): any;
}

export class NSMetadataQueryAttributeValueTuple extends NSObject {
  attribute: string;
  count: number;
}

interface NSMetadataQueryDelegate {
  metadataQuery(_: NSMetadataQuery, replacementObjectForResultObject: NSMetadataItem): any;
  metadataQuery(_: NSMetadataQuery, replacementValueForAttribute: string, value: any): any;
}

export class NSMetadataQueryResultGroup extends NSObject {
  attribute: string;
  resultCount: number;
  results: any[];
  subgroups: NSMetadataQueryResultGroup[];
  result(at: number): any;
}

export class NSMethodSignature extends NSObject {
  frameLength: number;
  methodReturnLength: number;
  methodReturnType: string;
  numberOfArguments: number;
  getArgumentType(at: number): string;
  isOneway(): boolean;
}

export class NSMiddleSpecifier extends NSScriptObjectSpecifier {
}

// export function NSMouseInRect(aPoint: CGPoint, aRect: CGRect, flipped: boolean): boolean;

export class NSMoveCommand extends NSScriptCommand {
  keySpecifier: NSScriptObjectSpecifier;
  setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
}

export class NSMutableArray<ObjectType> extends Array<ObjectType> {
  //  static createWithArray<ObjectType>(): NSMutableArray<ObjectType>;
  //  static createWithArrayWithArray<ObjectType>(_: ObjectType[]): NSMutableArray<ObjectType>;
  //  static createWithArrayWithObject<ObjectType>(_: ObjectType): NSMutableArray<ObjectType>;
  //  static createWithArrayWithObjects<ObjectType>(_: ObjectType): NSMutableArray<ObjectType>;
  //  static createWithArrayWithObjectsCount<ObjectType>(_: ObjectType, count: number): NSMutableArray<ObjectType>;
  add(_: ObjectType): void;
  addObjects(from: ObjectType[]): void;
  apply(_: CollectionDifference<any>): void;
  exchangeObject(at: number, withObjectAt: number): void;
  filter(using: NSPredicate): void;
  // static createWithCapacity(_: number): NSMutableArray<ObjectType>;
  insert(_: ObjectType, at: number): void;
  insert(_: ObjectType[], at: IndexSet): void;
  removeAllObjects(): void;
  removeLastObject(): void;
  remove(_: ObjectType): void;
  remove(_: ObjectType, in_: NSRange): void;
  removeObject(at: number): void;
  removeObject(identicalTo: ObjectType): void;
  removeObject(identicalTo: ObjectType, in_: NSRange): void;
  removeObjects(at: IndexSet): void;
  removeObjects(in_: ObjectType[]): void;
  removeObjects(in_: NSRange): void;
  replaceObject(at: number, with_: ObjectType): void;
  replaceObjects(at: IndexSet, with_: ObjectType[]): void;
  replaceObjects(in_: NSRange, withObjectsFrom: ObjectType[]): void;
  replaceObjects(in_: NSRange, withObjectsFrom: ObjectType[], range: NSRange): void;
  setArray(_: ObjectType[]): void;
  sort(comparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): void;
  sort(using: NSSortDescriptor[]): void;
  sort(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any): void;
  sort(using: string): void;
  sort(options: NSObjCRuntime.NSSortOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): void;
}

export class NSMutableAttributedString extends NSAttributedString {
  mutableString: NSMutableString;
  addAttribute(_: string, value: any, range: NSRange): void;
  addAttributes(_: Map<string, any>, range: NSRange): void;
  append(_: NSAttributedString): void;
  applyFontTraits(_: NSFontManager.NSFontTraitMask, range: NSRange): void;
  beginEditing(): void;
  deleteCharacters(in_: NSRange): void;
  endEditing(): void;
  fixAttachmentAttribute(in_: NSRange): void;
  fixAttributes(in_: NSRange): void;
  fixFontAttribute(in_: NSRange): void;
  fixParagraphStyleAttribute(in_: NSRange): void;
  insert(_: NSAttributedString, at: number): void;
  read(from: Data, options: Map<string, any>, documentAttributes?: Map<string, any>): boolean;
  read(from: URL, options: Map<string, any>, documentAttributes?: Map<string, any>): boolean;
  removeAttribute(_: string, range: NSRange): void;
  replaceCharacters(in_: NSRange, with_: NSAttributedString): void;
  replaceCharacters(in_: NSRange, with_: string): void;
  setAlignment(_: NSText.NSTextAlignment, range: NSRange): void;
  setAttributedString(_: NSAttributedString): void;
  setAttributes(_?: Map<string, any>, range?: NSRange): void;
  setBaseWritingDirection(_: NSText.NSWritingDirection, range: NSRange): void;
  subscriptRange(_: NSRange): void;
  superscriptRange(_: NSRange): void;
  unscriptRange(_: NSRange): void;
  updateAttachments(fromPath: string): void;
}

export class NSMutableCharacterSet extends CharacterSet {
  addCharacters(in_: NSRange): void;
  addCharacters(in_: string): void;
  formIntersection(with_: CharacterSet): void;
  formUnion(with_: CharacterSet): void;
  invert(): void;
  removeCharacters(in_: NSRange): void;
  removeCharacters(in_: string): void;
}

interface NSMutableCopying {
  mutableCopy(with_?: any): any;
}

export class NSMutableData extends Data {
  //  static createWithData(): NSMutableData;
  //  static createWithDataWithBytesLength(_?: any, length?: number): NSMutableData;
  //  static createWithDataWithBytesNoCopyLength(_: any, length: number): NSMutableData;
  //  static createWithDataWithBytesNoCopyLengthWithFreeWhenDone(_: any, length: number, freeWhenDone: boolean): NSMutableData;
  //  static createWithDataWithContentsOfFile(_: string): NSMutableData;
  //  static createWithDataWithContentsOfFileOptions(options: string, error: Data.ReadingOptions): NSMutableData;
  //  static createWithDataWithContentsOfURL(_: URL): NSMutableData;
  //  static createWithDataWithContentsOfURLOptions(options: URL, error: Data.ReadingOptions): NSMutableData;
  //  static createWithDataWithData(_: Data): NSMutableData;
  length: number;
  setLength(_: number);
  mutableBytes: any;
  append(_: any, length: number): void;
  append(_: Data): void;
  compressUsingAlgorithm(error: Data.CompressionAlgorithm): boolean;
  decompressUsingAlgorithm(error: Data.CompressionAlgorithm): boolean;
  increaseLength(by: number): void;
  static createWithCapacity(_: number): NSMutableData;
  static createWithLength(_: number): NSMutableData;
  replaceBytes(in_: NSRange, withBytes: any): void;
  replaceBytes(in_: NSRange, withBytes?: any, length?: number): void;
  resetBytes(in_: NSRange): void;
  setData(_: Data): void;
}

export class NSMutableDictionary<KeyType, ObjectType> extends Dictionary<KeyType, ObjectType> {
  //  static createWithDictionary<KeyType, ObjectType>(): NSMutableDictionary<KeyType, ObjectType>;
  //  static createWithDictionaryWithDictionary<KeyType, ObjectType>(_: Map<KeyType, ObjectType>): NSMutableDictionary<KeyType, ObjectType>;
  //  static createWithDictionaryWithObjectForKey<KeyType, ObjectType>(_: ObjectType, forKey: KeyType): NSMutableDictionary<KeyType, ObjectType>;
  //  static createWithDictionaryWithObjectsForKeys<KeyType, ObjectType>(_: ObjectType[], forKeys: KeyType[]): NSMutableDictionary<KeyType, ObjectType>;
  //  static createWithDictionaryWithObjectsForKeysWithCount<KeyType, ObjectType>(_?: ObjectType, forKeys?: KeyType, count?: number): NSMutableDictionary<KeyType, ObjectType>;
  addEntries(from: Map<KeyType, ObjectType>): void;
  // static createWithCapacity(_: number): NSMutableDictionary<KeyType, ObjectType>;
  removeAllObjects(): void;
  removeObject(forKey: KeyType): void;
  removeObjects(forKeys: KeyType[]): void;
  setDictionary(_: Map<KeyType, ObjectType>): void;
  setObject(_: ObjectType, forKey: KeyType): void;
  // @ts-ignore 
  setValue(_?: ObjectType, forKey?: string): void;
}

export class NSMutableIndexSet extends IndexSet {
  //  static createWithIndexSet(): NSMutableIndexSet;
  //  static createWithIndexSetWithIndex(_: number): NSMutableIndexSet;
  //  static createWithIndexSetWithIndexesInRange(_: NSRange): NSMutableIndexSet;
  add(_: number): void;
  add(_: IndexSet): void;
  add(in_: NSRange): void;
  removeAllIndexes(): void;
  remove(_: number): void;
  remove(_: IndexSet): void;
  remove(in_: NSRange): void;
  shiftIndexesStarting(at: number, by: number): void;
}

export class NSMutableOrderedSet<ObjectType> extends NSOrderedSet<ObjectType> {
  //  static createWithOrderedSetWithObjects<ObjectType>(_: ObjectType): NSMutableOrderedSet<ObjectType>;
  add(_: ObjectType): void;
  add(_?: ObjectType, count?: number): void;
  addObjects(from: ObjectType[]): void;
  apply(_: CollectionDifference<any>): void;
  exchangeObject(at: number, withObjectAt: number): void;
  filter(using: NSPredicate): void;
  // static createWithCapacity(_: number): NSMutableOrderedSet<ObjectType>;
  insert(_: ObjectType, at: number): void;
  insert(_: ObjectType[], at: IndexSet): void;
  intersect(_: NSOrderedSet<any>): void;
  intersectSet(_: Set<any>): void;
  minus(_: NSOrderedSet<any>): void;
  minusSet(_: Set<any>): void;
  moveObjects(at: IndexSet, to: number): void;
  removeAllObjects(): void;
  remove(_: ObjectType): void;
  removeObject(at: number): void;
  removeObjects(at: IndexSet): void;
  removeObjects(in_: ObjectType[]): void;
  removeObjects(in_: NSRange): void;
  replaceObject(at: number, with_: ObjectType): void;
  replaceObjects(at: IndexSet, with_: ObjectType[]): void;
  replaceObjects(in_: NSRange, with_?: ObjectType, count?: number): void;
  setObject(_: ObjectType, at: number): void;
  sortRange(_: NSRange, options: NSObjCRuntime.NSSortOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): void;
  sort(comparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): void;
  sort(using: NSSortDescriptor[]): void;
  sort(options: NSObjCRuntime.NSSortOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): void;
  union(_: NSOrderedSet<any>): void;
  unionSet(_: Set<any>): void;
}

export class NSMutableSet<ObjectType> extends Set<ObjectType> {
  //  static createWithSet<ObjectType>(): NSMutableSet<ObjectType>;
  //  static createWithSetWithArray<ObjectType>(_: ObjectType[]): NSMutableSet<ObjectType>;
  //  static createWithSetWithCollectionViewIndexPath<ObjectType>(_: IndexPath): NSMutableSet<ObjectType>;
  //  static createWithSetWithCollectionViewIndexPaths<ObjectType>(_: IndexPath[]): NSMutableSet<ObjectType>;
  //  static createWithSetWithObject<ObjectType>(_: ObjectType): NSMutableSet<ObjectType>;
  //  static createWithSetWithObjects<ObjectType>(_: ObjectType): NSMutableSet<ObjectType>;
  //  static createWithSetWithObjectsCount<ObjectType>(_: ObjectType, count: number): NSMutableSet<ObjectType>;
  //  static createWithSetWithSet<ObjectType>(_: Set<any>): NSMutableSet<ObjectType>;
  // @ts-ignore 
  add(_: ObjectType): void;
  addObjects(from: ObjectType[]): void;
  filter(using: NSPredicate): void;
  // static createWithCapacity(_: number): NSMutableSet<ObjectType>;
  intersect(_: Set<any>): void;
  minus(_: Set<any>): void;
  removeAllObjects(): void;
  remove(_: ObjectType): void;
  setSet(_: Set<any>): void;
  union(_: Set<any>): void;
}

// @ts-ignore
export class NSMutableString extends NSString {
  //  static createWithObjectWithItemProviderDataTypeIdentifier(typeIdentifier: Data, error: string): NSMutableString;
  //  static createWithStringWithCStringEncoding(_: string, encoding: number): NSMutableString;
  //  static createWithStringWithCharactersLength(_: string, length: number): NSMutableString;
  //  static createWithStringWithContentsOfFileEncoding(encoding: string, error: number): NSMutableString;
  //  static createWithStringWithContentsOfFileUsedEncoding(usedEncoding: string, error?: number): NSMutableString;
  //  static createWithStringWithContentsOfURLEncoding(encoding: URL, error: number): NSMutableString;
  //  static createWithStringWithContentsOfURLUsedEncoding(usedEncoding: URL, error?: number): NSMutableString;
  //  static createWithStringWithString(_: string): NSMutableString;
  //  static createWithStringWithUTF8String(_: string): NSMutableString;
  append(_: string): void;
  applyTransform(_: string, reverse: boolean, range: NSRange, updatedRange?: NSRange): boolean;
  deleteCharacters(in_: NSRange): void;
  static createWithCapacity(_: number): NSMutableString;
  insert(_: string, at: number): void;
  replaceCharacters(in_: NSRange, with_: string): void;
  replaceOccurrences(of: string, with_: string, options: String.CompareOptions, range: NSRange): number;
  setString(_: string): void;
}

export class NSMutableURLRequest extends URLRequest {
  //  static createWithRequestWithURL(_: URL): NSMutableURLRequest;
  //  static createWithRequestWithURLCachePolicyWithTimeoutInterval(_: URL, cachePolicy: URLRequest.CachePolicy, timeoutInterval: number): NSMutableURLRequest;
  HTTPBody: Data;
  setHTTPBody(_: Data);
  HTTPBodyStream: InputStream;
  setHTTPBodyStream(_: InputStream);
  HTTPMethod: string;
  setHTTPMethod(_: string);
  HTTPShouldHandleCookies: boolean;
  setHTTPShouldHandleCookies(_: boolean);
  HTTPShouldUsePipelining: boolean;
  setHTTPShouldUsePipelining(_: boolean);
  URL: URL;
  setURL(_: URL);
  allHTTPHeaderFields: Map<string, string>;
  setAllHTTPHeaderFields(_: Map<string, string>);
  allowsCellularAccess: boolean;
  setAllowsCellularAccess(_: boolean);
  allowsConstrainedNetworkAccess: boolean;
  setAllowsConstrainedNetworkAccess(_: boolean);
  allowsExpensiveNetworkAccess: boolean;
  setAllowsExpensiveNetworkAccess(_: boolean);
  cachePolicy: URLRequest.CachePolicy;
  setCachePolicy(_: URLRequest.CachePolicy);
  mainDocumentURL: URL;
  setMainDocumentURL(_: URL);
  networkServiceType: URLRequest.NetworkServiceType;
  setNetworkServiceType(_: URLRequest.NetworkServiceType);
  timeoutInterval: number;
  setTimeoutInterval(_: number);
  addValue(_: string, forHTTPHeaderField: string): void;
  // @ts-ignore 
  setValue(_?: string, forHTTPHeaderField?: string): void;
}

export class NSNameSpecifier extends NSScriptObjectSpecifier {
  name: string;
  setName(_: string);
  // @ts-ignore 
  static createWithContainerClassDescriptionWithContainerSpecifierWithKeyWithName(_: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, name?: string): NSNameSpecifier;
}

// export function NSNextHashEnumeratorItem(enumerator: NSHashEnumerator): any;

// export function NSNextMapEnumeratorPair(enumerator: NSMapEnumerator, key: any, value: any): boolean;

export class NSNull extends NSObject {
}

export class NSNumber extends NSValue {
  boolValue: boolean;
  charValue: number;
  decimalValue: NSDecimal;
  doubleValue: number;
  floatValue: number;
  intValue: number;
  integerValue: number;
  longLongValue: number;
  shortValue: number;
  stringValue: string;
  unsignedCharValue: number;
  unsignedIntValue: number;
  unsignedIntegerValue: number;
  unsignedLongLongValue: number;
  unsignedShortValue: number;
  compare(_: number): NSObjCRuntime.ComparisonResult;
  // @ts-ignore 
  // dupe name w inherited static method  description(withLocale?: any): string;
  static createWithLong(_: number): NSNumber;
  static createWithUnsignedLong(_: number): NSNumber;
  // @ts-ignore 
  isEqual(to: number): boolean;
}

// export function NSOffsetRect(aRect: CGRect, dX: number, dY: number): CGRect;

// export function NSOpenStepRootDirectory(): string;

export class NSOrderedCollectionChange<ObjectType> extends NSObject {
  associatedIndex: number;
  changeType: NSOrderedCollectionChange.NSCollectionChangeType;
  index: number;
  object: ObjectType;
  // static createWithObjectWithTypeWithIndex(_?: ObjectType, type?: NSOrderedCollectionChange.NSCollectionChangeType, index?: number): NSOrderedCollectionChange<ObjectType>;
  // static createWithObjectWithTypeWithIndexWithAssociatedIndex(_?: ObjectType, type?: NSOrderedCollectionChange.NSCollectionChangeType, index?: number, associatedIndex?: number): NSOrderedCollectionChange<ObjectType>;
}

export class NSOrderedSet<ObjectType> extends NSObject {
  static createWithOrderedSetWithObjects<ObjectType>(_: ObjectType): NSOrderedSet<ObjectType>;
  array: ObjectType[];
  count: number;
  firstObject: ObjectType;
  lastObject: ObjectType;
  reversedOrderedSet: NSOrderedSet<any>;
  set: Set<any>;
  contains(_: ObjectType): boolean;
  // @ts-ignore 
  // dupe name w inherited static method  description(withLocale?: any): string;
  // @ts-ignore 
  // dupe name w inherited static method  description(withLocale?: any, indent?: number): string;
  difference(from: NSOrderedSet<any>): CollectionDifference<any>;
  difference(from: NSOrderedSet<any>, with_: CollectionDifference.NSOrderedCollectionDifferenceCalculationOptions): CollectionDifference<any>;
  difference(from: NSOrderedSet<any>, with_: CollectionDifference.NSOrderedCollectionDifferenceCalculationOptions, usingEquivalenceTest: (p1: ObjectType, p2: ObjectType) => boolean): CollectionDifference<any>;
  enumerateObjects(at: IndexSet, options: NSObjCRuntime.NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
  enumerateObjects(_: (p1: ObjectType, p2: number, p3: boolean) => void): void;
  enumerateObjects(options: NSObjCRuntime.NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
  filtered(using: NSPredicate): NSOrderedSet<any>;
  index(of: ObjectType): number;
  index(of: ObjectType, inSortedRange: NSRange, options: Array.NSBinarySearchingOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): number;
  index(ofObjectAt: IndexSet, options: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
  index(ofObjectPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
  index(_: NSObjCRuntime.NSEnumerationOptions, ofObjectPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
  indexes(ofObjectsAt: IndexSet, options: NSObjCRuntime.NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): IndexSet;
  indexes(ofObjectsPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): IndexSet;
  indexes(options: NSObjCRuntime.NSEnumerationOptions, ofObjectsPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): IndexSet;
  // static createWithArray(_: ObjectType[]): NSOrderedSet<ObjectType>;
  // static createWithArrayWithCopyItems(_: ObjectType[], copyItems: boolean): NSOrderedSet<ObjectType>;
  // static createWithArrayWithRangeWithCopyItems(_: ObjectType[], range: NSRange, copyItems: boolean): NSOrderedSet<ObjectType>;
  // static createWithObject(_: ObjectType): NSOrderedSet<ObjectType>;
  // static createWithObjects(_: ObjectType): NSOrderedSet<ObjectType>;
  // static createWithObjectsWithCount(_?: ObjectType, count?: number): NSOrderedSet<ObjectType>;
  // static createWithOrderedSet(_: NSOrderedSet<any>): NSOrderedSet<ObjectType>;
  // static createWithOrderedSetWithCopyItems(_: NSOrderedSet<any>, copyItems: boolean): NSOrderedSet<ObjectType>;
  // static createWithOrderedSetWithRangeWithCopyItems(_: NSOrderedSet<any>, range: NSRange, copyItems: boolean): NSOrderedSet<ObjectType>;
  // static createWithSet(_: Set<any>): NSOrderedSet<ObjectType>;
  // static createWithSetWithCopyItems(_: Set<any>, copyItems: boolean): NSOrderedSet<ObjectType>;
  intersects(_: NSOrderedSet<any>): boolean;
  intersectsSet(_: Set<any>): boolean;
  // @ts-ignore 
  isEqual(to: NSOrderedSet<any>): boolean;
  isSubset(of: NSOrderedSet<any>): boolean;
  isSubset(of: Set<any>): boolean;
  object(at: number): ObjectType;
  objectEnumerator(): NSEnumerator<any>;
  objects(at: IndexSet): ObjectType[];
  applying(_: CollectionDifference<any>): NSOrderedSet<any>;
  reverseObjectEnumerator(): NSEnumerator<any>;
  sortedArray(comparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): ObjectType[];
  sortedArray(using: NSSortDescriptor[]): ObjectType[];
  sortedArray(options: NSObjCRuntime.NSSortOptions, usingComparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): ObjectType[];
}

export class NSOrthography extends NSObject {
  static createWithDefaultOrthographyForLanguage(forLanguage: string): NSOrthography;
  allLanguages: string[];
  allScripts: string[];
  dominantLanguage: string;
  dominantScript: string;
  languageMap: Map<string, string[]>;
  // dupe name w instance property   dominantLanguage(forScript: string): string;
  static createWithDominantScriptWithLanguageMap(_: string, languageMap: Map<string, string[]>): NSOrthography;
  languages(forScript: string): string[];
}

// export function NSPageSize(): number;

// export function NSPointFromString(aString: string): CGPoint;

// export function NSPointInRect(aPoint: CGPoint, aRect: CGRect): boolean;

export class NSPointerArray extends NSObject {
  static strongObjects(): NSPointerArray;
  static weakObjects(): NSPointerArray;
  allObjects: any[];
  count: number;
  setCount(_: number);
  pointerFunctions: NSPointerFunctions;
  addPointer(_?: any): void;
  compact(): void;
  static createWithOptions(_: NSPointerFunctions.Options): NSPointerArray;
  static createWithPointerFunctions(_: NSPointerFunctions): NSPointerArray;
  insertPointer(_?: any, at?: number): void;
  pointer(at: number): any;
  removePointer(at: number): void;
  replacePointer(at: number, withPointer?: any): void;
}

export class NSPointerFunctions extends NSObject {
  acquireFunction: (p1: any, p2: (p1: any) => number, p3: boolean) => any;
  setAcquireFunction(_: (p1: any, p2: (p1: any) => number, p3: boolean) => any);
  descriptionFunction: (p1: any) => string;
  setDescriptionFunction(_: (p1: any) => string);
  hashFunction: (p1: any, p2: (p1: any) => number) => number;
  setHashFunction(_: (p1: any, p2: (p1: any) => number) => number);
  isEqualFunction: (p1: any, p2: any, p3: (p1: any) => number) => boolean;
  setIsEqualFunction(_: (p1: any, p2: any, p3: (p1: any) => number) => boolean);
  relinquishFunction: (p1: any, p2: (p1: any) => number) => void;
  setRelinquishFunction(_: (p1: any, p2: (p1: any) => number) => void);
  sizeFunction: (p1: any) => number;
  setSizeFunction(_: (p1: any) => number);
  static createWithOptions(_: NSPointerFunctions.Options): NSPointerFunctions;
}

export class NSPortCoder extends NSCoder {
  decodePortObject(): Port;
  encodePortObject(_: Port): void;
  isBycopy(): boolean;
  isByref(): boolean;
}

export class NSPortNameServer extends NSObject {
  static systemDefault(): NSPortNameServer;
  port(forName: string): Port;
  port(forName: string, host?: string): Port;
  register(_: Port, name: string): boolean;
  removePort(forName: string): boolean;
}

export class NSPositionalSpecifier extends NSObject {
  insertionContainer: any;
  insertionIndex: number;
  insertionKey: string;
  insertionReplaces: boolean;
  position: NSScriptObjectSpecifiers.NSPositionalSpecifier.InsertionPosition;
  evaluate(): void;
  static createWithPositionWithObjectSpecifier(_: NSScriptObjectSpecifiers.NSPositionalSpecifier.InsertionPosition, objectSpecifier: NSScriptObjectSpecifier): NSPositionalSpecifier;
  setInsertionClassDescription(_: NSScriptClassDescription): void;
}

export class NSPredicate extends NSObject {
  predicateFormat: string;
  allowEvaluation(): void;
  evaluate(with_?: any): boolean;
  evaluate(with_?: any, substitutionVariables?: Map<string, any>): boolean;
  createWithPredicateWithSubstitutionVariables(_: Map<string, any>): NSPredicate;
}

export class NSPropertySpecifier extends NSScriptObjectSpecifier {
}

export class NSProtocolChecker extends NSProxy {
  //  static createWithAlloc(): NSProtocolChecker;
  //  static createWithAllocWithZone(with_?: any): NSProtocolChecker;
  protocol: any /* Protocol */;
  target: NSObject;
  static createWithTargetWithProtocol(_: NSObject, protocol: any /* Protocol */): NSProtocolChecker;
}

// export function NSProtocolFromString(namestr: string): any /* Protocol */;

export class NSProxy {
  static createWithAlloc(): NSProxy;
  static class(): typeof NSObject;
  static responds(to: string): boolean;
  dealloc(): void;
  finalize(): void;
  forwardInvocation(_: NSInvocation): void;
}

export class NSPurgeableData extends NSMutableData {
  //  static createWithData(): NSPurgeableData;
  //  static createWithDataWithBytesLength(_?: any, length?: number): NSPurgeableData;
  //  static createWithDataWithBytesNoCopyLength(_: any, length: number): NSPurgeableData;
  //  static createWithDataWithBytesNoCopyLengthWithFreeWhenDone(_: any, length: number, freeWhenDone: boolean): NSPurgeableData;
  //  static createWithDataWithContentsOfFile(_: string): NSPurgeableData;
  //  static createWithDataWithContentsOfFileOptions(options: string, error: Data.ReadingOptions): NSPurgeableData;
  //  static createWithDataWithContentsOfURL(_: URL): NSPurgeableData;
  //  static createWithDataWithContentsOfURLOptions(options: URL, error: Data.ReadingOptions): NSPurgeableData;
  //  static createWithDataWithData(_: Data): NSPurgeableData;
}

export class NSQuitCommand extends NSScriptCommand {
}

export class NSRandomSpecifier extends NSScriptObjectSpecifier {
}

// export function NSRangeFromString(aString: string): NSRange;

export class NSRangeSpecifier extends NSScriptObjectSpecifier {
  endSpecifier: NSScriptObjectSpecifier;
  setEndSpecifier(_: NSScriptObjectSpecifier);
  startSpecifier: NSScriptObjectSpecifier;
  setStartSpecifier(_: NSScriptObjectSpecifier);
  // @ts-ignore 
  static createWithContainerClassDescriptionWithContainerSpecifierWithKeyWithStartSpecifierWithEndSpecifier(_: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, startSpecifier?: NSScriptObjectSpecifier, endSpecifier?: NSScriptObjectSpecifier): NSRangeSpecifier;
}

// export function NSReallocateCollectable(ptr: any, size: number, options: number): any;

// export function NSRecordAllocationEvent(eventType: number, object_: any): void;

// export function NSRectFromString(aString: string): CGRect;

export class NSRecursiveLock extends NSObject {
  name: string;
  setName(_: string);
  lock(before: Date): boolean;
  try(): boolean;
}

// export function NSRecycleZone(zone: any): void;

export class NSRegularExpression extends NSObject {
  static escapedPattern(for_: string): string;
  static escapedTemplate(for_: string): string;
  static regularExpressionWithPattern(options: string, error: NSRegularExpression.Options): NSRegularExpression;
  numberOfCaptureGroups: number;
  options: NSRegularExpression.Options;
  pattern: string;
  enumerateMatches(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange, using?: (p1: NSTextCheckingResult, p2: NSRegularExpression.MatchingFlags, p3: boolean) => void): void;
  firstMatch(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSTextCheckingResult;
  static createWithPattern(options: string, error: NSRegularExpression.Options): NSRegularExpression;
  matches(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSTextCheckingResult[];
  numberOfMatches(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): number;
  rangeOfFirstMatch(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSRange;
  replaceMatches(in_: NSMutableString, options: NSRegularExpression.MatchingOptions, range: NSRange, withTemplate: string): number;
  replacementString(for_: NSTextCheckingResult, in_: string, offset: number, template: string): string;
  stringByReplacingMatches(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange, withTemplate: string): string;
}

export class NSRelativeSpecifier extends NSScriptObjectSpecifier {
  baseSpecifier: NSScriptObjectSpecifier;
  setBaseSpecifier(_: NSScriptObjectSpecifier);
  relativePosition: NSScriptObjectSpecifiers.NSRelativeSpecifier.RelativePosition;
  setRelativePosition(_: NSScriptObjectSpecifiers.NSRelativeSpecifier.RelativePosition);
  // @ts-ignore 
  static createWithContainerClassDescriptionWithContainerSpecifierWithKeyWithRelativePositionWithBaseSpecifier(_: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, relativePosition?: NSScriptObjectSpecifiers.NSRelativeSpecifier.RelativePosition, baseSpecifier?: NSScriptObjectSpecifier): NSRelativeSpecifier;
}

// export function NSResetHashTable(table: NSHashTable<any>): void;

// export function NSResetMapTable(table: NSMapTable<any, any>): void;

// export function NSReturnAddress(frame: number): any;

// export function NSRoundDownToMultipleOfPageSize(bytes: number): number;

// export function NSRoundUpToMultipleOfPageSize(bytes: number): number;

export class NSScriptClassDescription extends NSClassDescription {
  appleEventCode: number;
  defaultSubcontainerAttributeKey: string;
  implementationClassName: string;
  suiteName: string;
  superclassDescription: NSScriptClassDescription;
  // dupe name w instance property   appleEventCode(forKey: string): number;
  forKey(_: string): NSScriptClassDescription;
  hasOrderedToManyRelationship(forKey: string): boolean;
  hasProperty(forKey: string): boolean;
  hasReadableProperty(forKey: string): boolean;
  hasWritableProperty(forKey: string): boolean;
  static createWithSuiteNameWithClassNameWithDictionary(_: string, className: string, dictionary?: Map<any, any>): NSScriptClassDescription;
  isLocationRequiredToCreate(forKey: string): boolean;
  key(withAppleEventCode: number): string;
  matchesAppleEventCode(_: number): boolean;
  selector(forCommand: NSScriptCommandDescription): string;
  supportsCommand(_: NSScriptCommandDescription): boolean;
  type(forKey: string): string;
}

export class NSScriptCoercionHandler extends NSObject {
  static shared(): NSScriptCoercionHandler;
  // @ts-ignore 
  coerceValue(_: any, to: typeof NSObject): any;
  registerCoercer(_: any, selector: string, toConvertFrom: typeof NSObject, to: typeof NSObject): void;
}

export class NSScriptCommand extends NSObject {
  static current(): NSScriptCommand;
  appleEvent: NSAppleEventDescriptor;
  arguments: Map<string, any>;
  setArguments(_: Map<string, any>);
  commandDescription: NSScriptCommandDescription;
  directParameter: any;
  setDirectParameter(_: any);
  evaluatedArguments: Map<string, any>;
  evaluatedReceivers: any;
  receiversSpecifier: NSScriptObjectSpecifier;
  setReceiversSpecifier(_: NSScriptObjectSpecifier);
  scriptErrorExpectedTypeDescriptor: NSAppleEventDescriptor;
  setScriptErrorExpectedTypeDescriptor(_: NSAppleEventDescriptor);
  scriptErrorNumber: number;
  setScriptErrorNumber(_: number);
  scriptErrorOffendingObjectDescriptor: NSAppleEventDescriptor;
  setScriptErrorOffendingObjectDescriptor(_: NSAppleEventDescriptor);
  scriptErrorString: string;
  setScriptErrorString(_: string);
  isWellFormed: boolean;
  execute(): any;
  static createWithCommandDescription(_: NSScriptCommandDescription): NSScriptCommand;
  performDefaultImplementation(): any;
  resumeExecution(withResult?: any): void;
  suspendExecution(): void;
}

export class NSScriptCommandDescription extends NSObject {
  appleEventClassCode: number;
  appleEventCode: number;
  appleEventCodeForReturnType: number;
  argumentNames: string[];
  commandClassName: string;
  commandName: string;
  returnType: string;
  suiteName: string;
  appleEventCodeForArgument(withName: string): number;
  createCommandInstance(): NSScriptCommand;
  createCommandInstance(with_?: any): NSScriptCommand;
  static createWithSuiteNameWithCommandNameWithDictionary(_: string, commandName: string, dictionary?: Map<any, any>): NSScriptCommandDescription;
  isOptionalArgument(withName: string): boolean;
  typeForArgument(withName: string): string;
}

export class NSScriptExecutionContext extends NSObject {
  static shared(): NSScriptExecutionContext;
  objectBeingTested: any;
  setObjectBeingTested(_: any);
  rangeContainerObject: any;
  setRangeContainerObject(_: any);
  topLevelObject: any;
  setTopLevelObject(_: any);
}

export class NSScriptObjectSpecifier extends NSObject {
  childSpecifier: NSScriptObjectSpecifier;
  setChildSpecifier(_: NSScriptObjectSpecifier);
  containerClassDescription: NSScriptClassDescription;
  setContainerClassDescription(_: NSScriptClassDescription);
  containerIsObjectBeingTested: boolean;
  setContainerIsObjectBeingTested(_: boolean);
  containerIsRangeContainerObject: boolean;
  setContainerIsRangeContainerObject(_: boolean);
  containerSpecifier: NSScriptObjectSpecifier;
  setContainerSpecifier(_: NSScriptObjectSpecifier);
  descriptor: NSAppleEventDescriptor;
  evaluationErrorNumber: number;
  setEvaluationErrorNumber(_: number);
  evaluationErrorSpecifier: NSScriptObjectSpecifier;
  key: string;
  setKey(_: string);
  keyClassDescription: NSScriptClassDescription;
  objectsByEvaluatingSpecifier: any;
  indicesOfObjectsByEvaluating(withContainer: any, count: number): number;
  static createWithContainerClassDescriptionWithContainerSpecifierWithKey(_: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string): NSScriptObjectSpecifier;
  static createWithContainerSpecifierWithKey(_: NSScriptObjectSpecifier, key: string): NSScriptObjectSpecifier;
  objectsByEvaluating(withContainers: any): any;
}

export class NSScriptSuiteRegistry extends NSObject {
  static setShared(_: NSScriptSuiteRegistry): void;
  static shared(): NSScriptSuiteRegistry;
  suiteNames: string[];
  aeteResource(_: string): Data;
  appleEventCode(forSuite: string): number;
  bundle(forSuite: string): Bundle;
  // @ts-ignore 
  classDescription(withAppleEventCode: number): NSScriptClassDescription;
  classDescriptions(inSuite: string): Map<string, NSScriptClassDescription>;
  commandDescription(withAppleEventClass: number, andAppleEventCode: number): NSScriptCommandDescription;
  commandDescriptions(inSuite: string): Map<string, NSScriptCommandDescription>;
  loadSuite(with_: Map<any, any>, from: Bundle): void;
  loadSuites(from: Bundle): void;
  register(_: NSScriptClassDescription): void;
  register(_: NSScriptCommandDescription): void;
  suite(forAppleEventCode: number): string;
}

export class NSScriptWhoseTest extends NSObject {
  isTrue(): boolean;
}

// export function NSSearchPathForDirectoriesInDomains(directory: NSPathUtilities.FileManager.SearchPathDirectory, domainMask: NSPathUtilities.FileManager.SearchPathDomainMask, expandTilde: boolean): string[];

interface NSSecureCoding {
}

export class NSSecureUnarchiveFromDataTransformer extends ValueTransformer {
  static allowedTopLevelClasses: typeof NSObject[];
}

// export function NSSelectorFromString(aSelectorName: string): string;

export class NSSetCommand extends NSScriptCommand {
  keySpecifier: NSScriptObjectSpecifier;
  setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
}

// export function NSSetUncaughtExceptionHandler(p1: (p1: NSException) => void): void;

// export function NSSetZoneName(zone: any, name: string): void;

// export function NSShouldRetainWithZone(anObject: any, requestedZone: any): boolean;

// @ts-ignore
export class NSSimpleCString extends NSString {
  //  static createWithObjectWithItemProviderDataTypeIdentifier(typeIdentifier: Data, error: string): NSSimpleCString;
  //  static createWithStringWithCStringEncoding(_: string, encoding: number): NSSimpleCString;
  //  static createWithStringWithCharactersLength(_: string, length: number): NSSimpleCString;
  //  static createWithStringWithContentsOfFileEncoding(encoding: string, error: number): NSSimpleCString;
  //  static createWithStringWithContentsOfFileUsedEncoding(usedEncoding: string, error?: number): NSSimpleCString;
  //  static createWithStringWithContentsOfURLEncoding(encoding: URL, error: number): NSSimpleCString;
  //  static createWithStringWithContentsOfURLUsedEncoding(usedEncoding: URL, error?: number): NSSimpleCString;
  //  static createWithStringWithString(_: string): NSSimpleCString;
  //  static createWithStringWithUTF8String(_: string): NSSimpleCString;
}

// export function NSSizeFromString(aString: string): CGSize;

export class NSSocketPortNameServer extends NSPortNameServer {
  static sharedInstance(): any;
  defaultNameServerPortNumber: number;
  setDefaultNameServerPortNumber(_: number);
  // @ts-ignore 
  port(forName: string, host?: string, nameServerPortNumber?: number): Port;
  // @ts-ignore 
  register(_: Port, name: string, nameServerPortNumber: number): boolean;
}

export class NSSortDescriptor extends NSObject {
  ascending: boolean;
  comparator: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult;
  key: string;
  reversedSortDescriptor: any;
  selector: string;
  allowEvaluation(): void;
  compare(_: any, to: any): NSObjCRuntime.ComparisonResult;
  static createWithKeyWithAscending(_?: string, ascending?: boolean): NSSortDescriptor;
  static createWithKeyWithAscendingWithComparator(_?: string, ascending?: boolean, comparator?: (p1: any, p2: any) => NSObjCRuntime.ComparisonResult): NSSortDescriptor;
  static createWithKeyWithAscendingWithSelector(_?: string, ascending?: boolean, selector?: string): NSSortDescriptor;
}

export class NSSpecifierTest extends NSScriptWhoseTest {
  static createWithObjectSpecifierWithComparisonOperatorWithTestObject(_?: NSScriptObjectSpecifier, comparisonOperator?: NSScriptWhoseTests.NSSpecifierTest.TestComparisonOperation, testObject?: any): NSSpecifierTest;
}

export class NSSpellServer extends NSObject {
  delegate: any;
  setDelegate(_: any);
  isWord(inUserDictionaries: string, caseSensitive: boolean): boolean;
  registerLanguage(_?: string, byVendor?: string): boolean;
  run(): void;
}

interface NSSpellServerDelegate {
  spellServer(_: NSSpellServer, findMisspelledWordIn: string, language: string, wordCount: number, countOnly: boolean): NSRange;
  spellServer(_: NSSpellServer, suggestGuessesForWord: string, inLanguage: string): string[];
  spellServer(_: NSSpellServer, didLearnWord: string, inLanguage: string): void;
  spellServer(_: NSSpellServer, didForgetWord: string, inLanguage: string): void;
  spellServer(_: NSSpellServer, suggestCompletionsForPartialWordRange: NSRange, in_: string, language: string): string[];
  spellServer(_: NSSpellServer, checkGrammarIn: string, language?: string, details?: Map<string, any>[]): NSRange;
  spellServer(_: NSSpellServer, check: string, offset: number, types: number, options?: Map<string, any>, orthography?: NSOrthography, wordCount?: number): NSTextCheckingResult[];
  spellServer(_: NSSpellServer, recordResponse: number, toCorrection: string, forWord: string, language: string): void;
}

export class NSString extends NSObject {
  static localizedName(of: number): string;
  static pathWithComponents(_: string[]): string;
  static stringEncodingForData(_: Data, encodingOptions?: Map<string, any>, convertedString?: string, usedLossyConversion?: boolean): number;
  static createWithStringWithContentsOfFileEncoding(encoding: string, error: number): NSString;
  static createWithStringWithContentsOfFileUsedEncoding(usedEncoding: string, error?: number): NSString;
  static createWithStringWithContentsOfURLEncoding(encoding: URL, error: number): NSString;
  static createWithStringWithContentsOfURLUsedEncoding(usedEncoding: URL, error?: number): NSString;
  UTF8String: string;
  isAbsolutePath: boolean;
  boolValue: boolean;
  capitalizedString: string;
  decomposedStringWithCanonicalMapping: string;
  decomposedStringWithCompatibilityMapping: string;
  doubleValue: number;
  fastestEncoding: number;
  fileSystemRepresentation: string;
  floatValue: number;
  intValue: number;
  integerValue: number;
  lastPathComponent: string;
  length: number;
  localizedCapitalizedString: string;
  localizedLowercaseString: string;
  localizedUppercaseString: string;
  longLongValue: number;
  lowercaseString: string;
  pathComponents: string[];
  pathExtension: string;
  precomposedStringWithCanonicalMapping: string;
  precomposedStringWithCompatibilityMapping: string;
  smallestEncoding: number;
  stringByAbbreviatingWithTildeInPath: string;
  stringByDeletingLastPathComponent: string;
  stringByDeletingPathExtension: string;
  stringByExpandingTildeInPath: string;
  stringByRemovingPercentEncoding: string;
  stringByResolvingSymlinksInPath: string;
  stringByStandardizingPath: string;
  uppercaseString: string;
  static availableStringEncodings: number;
  static defaultCStringEncoding: number;
  boundingRectWithSize(_: CGSize, options: NSStringDrawing.String.DrawingOptions, attributes?: Map<string, any>): CGRect;
  boundingRectWithSize(_: CGSize, options: NSStringDrawing.String.DrawingOptions, attributes?: Map<string, any>, context?: NSStringDrawingContext): CGRect;
  cStringUsingEncoding(_: number): string;
  canBeConvertedToEncoding(_: number): boolean;
  capitalizedStringWithLocale(_?: Locale): string;
  caseInsensitiveCompare(_: string): NSObjCRuntime.ComparisonResult;
  characterAtIndex(_: number): string;
  commonPrefixWithString(_: string, options: String.CompareOptions): string;
  compare(_: string): NSObjCRuntime.ComparisonResult;
  compare(_: string, options: String.CompareOptions): NSObjCRuntime.ComparisonResult;
  compare(_: string, options: String.CompareOptions, range: NSRange): NSObjCRuntime.ComparisonResult;
  compare(_: string, options: String.CompareOptions, range: NSRange, locale?: any): NSObjCRuntime.ComparisonResult;
  completePathIntoString(_?: string, caseSensitive?: boolean, matchesIntoArray?: string[], filterTypes?: string[]): number;
  componentsSeparatedByCharactersInSet(_: CharacterSet): string[];
  componentsSeparatedByString(_: string): string[];
  containsString(_: string): boolean;
  dataUsingEncoding(_: number): Data;
  dataUsingEncoding(_: number, allowLossyConversion: boolean): Data;
  drawAtPoint(_: CGPoint, withAttributes?: Map<string, any>): void;
  drawInRect(_: CGRect, withAttributes?: Map<string, any>): void;
  drawWithRect(_: CGRect, options: NSStringDrawing.String.DrawingOptions, attributes?: Map<string, any>): void;
  drawWithRect(_: CGRect, options: NSStringDrawing.String.DrawingOptions, attributes?: Map<string, any>, context?: NSStringDrawingContext): void;
  enumerateLinesUsingBlock(_: (p1: string, p2: boolean) => void): void;
  enumerateLinguisticTagsInRange(_: NSRange, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, usingBlock?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
  enumerateSubstringsInRange(_: NSRange, options: String.EnumerationOptions, usingBlock?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
  getBytes(_?: any, maxLength?: number, usedLength?: number, encoding?: number, options?: String.EncodingConversionOptions, range?: NSRange, remainingRange?: NSRange): boolean;
  getCString(_: string, maxLength: number, encoding: number): boolean;
  getCharacters(_: string): void;
  getCharacters(_: string, range: NSRange): void;
  getFileSystemRepresentation(_: string, maxLength: number): boolean;
  getLineStart(_?: number, end?: number, contentsEnd?: number, forRange?: NSRange): void;
  getParagraphStart(_?: number, end?: number, contentsEnd?: number, forRange?: NSRange): void;
  hasPrefix(_: string): boolean;
  hasSuffix(_: string): boolean;
  static createWithBytesWithLengthWithEncoding(_: any, length: number, encoding: number): NSString;
  static createWithBytesNoCopyWithLengthWithEncodingWithFreeWhenDone(_: any, length: number, encoding: number, freeWhenDone: boolean): NSString;
  static createWithCStringWithEncoding(_: string, encoding: number): NSString;
  static createWithCharactersWithLength(_: string, length: number): NSString;
  static createWithCharactersNoCopyWithLengthWithFreeWhenDone(_: string, length: number, freeWhenDone: boolean): NSString;
  static createWithContentsOfFile(encoding: string, error: number): NSString;
  static createWithContentsOfFile(usedEncoding: string, error?: number): NSString;
  static createWithContentsOf(encoding: URL, error: number): NSString;
  static createWithContentsOf(usedEncoding: URL, error?: number): NSString;
  static createWithDataWithEncoding(_: Data, encoding: number): NSString;
  static createWithString(_: string): NSString;
  static createWithUtF8String(_: string): NSString;
  isEqualToString(_: string): boolean;
  lengthOfBytesUsingEncoding(_: number): number;
  lineRangeForRange(_: NSRange): NSRange;
  linguisticTagsInRange(_: NSRange, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, tokenRanges?: NSValue[]): string[];
  localizedCaseInsensitiveCompare(_: string): NSObjCRuntime.ComparisonResult;
  localizedCaseInsensitiveContainsString(_: string): boolean;
  localizedCompare(_: string): NSObjCRuntime.ComparisonResult;
  localizedStandardCompare(_: string): NSObjCRuntime.ComparisonResult;
  localizedStandardContainsString(_: string): boolean;
  localizedStandardRangeOfString(_: string): NSRange;
  lowercaseStringWithLocale(_?: Locale): string;
  maximumLengthOfBytesUsingEncoding(_: number): number;
  paragraphRangeForRange(_: NSRange): NSRange;
  propertyList(): any;
  propertyListFromStringsFileFormat(): Map<any, any>;
  rangeOfCharacterFromSet(_: CharacterSet): NSRange;
  rangeOfCharacterFromSet(_: CharacterSet, options: String.CompareOptions): NSRange;
  rangeOfCharacterFromSet(_: CharacterSet, options: String.CompareOptions, range: NSRange): NSRange;
  rangeOfComposedCharacterSequenceAtIndex(_: number): NSRange;
  rangeOfComposedCharacterSequencesForRange(_: NSRange): NSRange;
  rangeOfString(_: string): NSRange;
  rangeOfString(_: string, options: String.CompareOptions): NSRange;
  rangeOfString(_: string, options: String.CompareOptions, range: NSRange): NSRange;
  rangeOfString(_: string, options: String.CompareOptions, range: NSRange, locale?: Locale): NSRange;
  sizeWithAttributes(_?: Map<string, any>): CGSize;
  stringByAddingPercentEncodingWithAllowedCharacters(_: CharacterSet): string;
  stringByAppendingPathComponent(_: string): string;
  stringByAppendingPathExtension(_: string): string;
  stringByAppendingString(_: string): string;
  stringByApplyingTransform(_: string, reverse: boolean): string;
  stringByFoldingWithOptions(_: String.CompareOptions, locale?: Locale): string;
  stringByPaddingToLength(_: number, withString: string, startingAtIndex: number): string;
  stringByReplacingCharactersInRange(_: NSRange, withString: string): string;
  stringByReplacingOccurrencesOfString(_: string, withString: string): string;
  stringByReplacingOccurrencesOfString(_: string, withString: string, options: String.CompareOptions, range: NSRange): string;
  stringByTrimmingCharactersInSet(_: CharacterSet): string;
  stringsByAppendingPaths(_: string[]): string[];
  substringFromIndex(_: number): string;
  substringToIndex(_: number): string;
  substringWithRange(_: NSRange): string;
  uppercaseStringWithLocale(_?: Locale): string;
  variantFittingPresentationWidth(_: number): string;
  writeToFile(atomically: string, encoding: boolean, error: number): boolean;
  writeToURL(atomically: URL, encoding: boolean, error: number): boolean;
}

// export function NSStringFromClass(aClass: typeof NSObject): string;

// export function NSStringFromHashTable(table: NSHashTable<any>): string;

// export function NSStringFromMapTable(table: NSMapTable<any, any>): string;

// export function NSStringFromPoint(aPoint: CGPoint): string;

// export function NSStringFromProtocol(proto: any /* Protocol */): string;

// export function NSStringFromRange(range: NSRange): string;

// export function NSStringFromRect(aRect: CGRect): string;

// export function NSStringFromSelector(aSelector: string): string;

// export function NSStringFromSize(aSize: CGSize): string;

// export function NSTemporaryDirectory(): string;

export class NSTextCheckingResult extends NSObject {
  static addressCheckingResult(range: NSRange, components: Map<string, string>): NSTextCheckingResult;
  static correctionCheckingResult(range: NSRange, replacementString: string): NSTextCheckingResult;
  static correctionCheckingResult(range: NSRange, replacementString: string, alternativeStrings: string[]): NSTextCheckingResult;
  static dashCheckingResult(range: NSRange, replacementString: string): NSTextCheckingResult;
  static dateCheckingResult(range: NSRange, date: Date): NSTextCheckingResult;
  static dateCheckingResult(range: NSRange, date: Date, timeZone: TimeZone, duration: number): NSTextCheckingResult;
  static grammarCheckingResult(range: NSRange, details: Map<string, any>[]): NSTextCheckingResult;
  static linkCheckingResult(range: NSRange, url: URL): NSTextCheckingResult;
  static orthographyCheckingResult(range: NSRange, orthography: NSOrthography): NSTextCheckingResult;
  static phoneNumberCheckingResult(range: NSRange, phoneNumber: string): NSTextCheckingResult;
  static quoteCheckingResult(range: NSRange, replacementString: string): NSTextCheckingResult;
  static regularExpressionCheckingResult(ranges: NSRange, count: number, regularExpression: NSRegularExpression): NSTextCheckingResult;
  static replacementCheckingResult(range: NSRange, replacementString: string): NSTextCheckingResult;
  static spellCheckingResult(range: NSRange): NSTextCheckingResult;
  static transitInformationCheckingResult(range: NSRange, components: Map<string, string>): NSTextCheckingResult;
  URL: URL;
  addressComponents: Map<string, string>;
  alternativeStrings: string[];
  components: Map<string, string>;
  date: Date;
  duration: number;
  grammarDetails: Map<string, any>[];
  numberOfRanges: number;
  orthography: NSOrthography;
  phoneNumber: string;
  range: NSRange;
  regularExpression: NSRegularExpression;
  replacementString: string;
  resultType: NSTextCheckingResult.CheckingType;
  timeZone: TimeZone;
  // dupe name w instance property   range(at: number): NSRange;
  // dupe name w instance property   range(withName: string): NSRange;
  adjustingRanges(offset: number): NSTextCheckingResult;
}

export class NSURLConnection extends NSObject {
  static canHandle(_: URLRequest): boolean;
  currentRequest: URLRequest;
  originalRequest: URLRequest;
  cancel(): void;
  schedule(in_: RunLoop, forMode: string): void;
  setDelegateQueue(_?: OperationQueue): void;
  start(): void;
  unschedule(from: RunLoop, forMode: string): void;
}

interface NSURLConnectionDataDelegate {
  connection(_: NSURLConnection, willSend: URLRequest, redirectResponse?: URLResponse): URLRequest;
  connection(_: NSURLConnection, didReceive: URLResponse): void;
  connection(_: NSURLConnection, didReceive: Data): void;
  connection(_: NSURLConnection, needNewBodyStream: URLRequest): InputStream;
  connection(_: NSURLConnection, didSendBodyData: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  connection(_: NSURLConnection, willCacheResponse: CachedURLResponse): CachedURLResponse;
  connectionDidFinishLoading(_: NSURLConnection): void;
}

interface NSURLConnectionDelegate {
  connection(_: NSURLConnection, didFailWithError: Error): void;
  connection(_: NSURLConnection, willSendRequestFor: URLAuthenticationChallenge): void;
  connectionShouldUseCredentialStorage(_: NSURLConnection): boolean;
}

interface NSURLConnectionDownloadDelegate {
  connection(_: NSURLConnection, didWriteData: number, totalBytesWritten: number, expectedTotalBytes: number): void;
  connectionDidFinishDownloading(_: NSURLConnection, destinationURL: URL): void;
  connectionDidResumeDownloading(_: NSURLConnection, totalBytesWritten: number, expectedTotalBytes: number): void;
}

export class NSURLDownload extends NSObject {
  static canResumeDownloadDecoded(withEncodingMIMEType: string): boolean;
  deletesFileUponFailure: boolean;
  setDeletesFileUponFailure(_: boolean);
  request: URLRequest;
  resumeData: Data;
  cancel(): void;
  setDestination(_: string, allowOverwrite: boolean): void;
}

interface NSURLDownloadDelegate {
  download(_: NSURLDownload, willSend: URLRequest, redirectResponse?: URLResponse): URLRequest;
  download(_: NSURLDownload, canAuthenticateAgainstProtectionSpace: URLProtectionSpace): boolean;
  download(_: NSURLDownload, didReceive: URLAuthenticationChallenge): void;
  download(_: NSURLDownload, didCancel: URLAuthenticationChallenge): void;
  download(_: NSURLDownload, didReceive: URLResponse): void;
  download(_: NSURLDownload, willResumeWith: URLResponse, fromByte: number): void;
  download(_: NSURLDownload, didReceiveDataOfLength: number): void;
  download(_: NSURLDownload, shouldDecodeSourceDataOfMIMEType: string): boolean;
  download(_: NSURLDownload, decideDestinationWithSuggestedFilename: string): void;
  download(_: NSURLDownload, didCreateDestination: string): void;
  download(_: NSURLDownload, didFailWithError: Error): void;
  downloadDidBegin(_: NSURLDownload): void;
  downloadDidFinish(_: NSURLDownload): void;
  downloadShouldUseCredentialStorage(_: NSURLDownload): boolean;
}

export class NSURLHandle extends NSObject {
}

export class NSURLSessionWebSocketMessage extends NSObject {
  data: Data;
  type: URLSession.NSURLSessionWebSocketMessageType;
  static createWithData(_: Data): NSURLSessionWebSocketMessage;
  static createWithString(_: string): NSURLSessionWebSocketMessage;
}

export class NSUbiquitousKeyValueStore extends NSObject {
  dictionaryRepresentation: Map<string, any>;
  static defaultStore: NSUbiquitousKeyValueStore;
  array(forKey: string): any[];
  bool(forKey: string): boolean;
  data(forKey: string): Data;
  dictionary(forKey: string): Map<string, any>;
  double(forKey: string): number;
  longLong(forKey: string): number;
  object(forKey: string): any;
  removeObject(forKey: string): void;
  set(_?: any[], forKey?: string): void;
  set(_: boolean, forKey: string): void;
  set(_?: Data, forKey?: string): void;
  set(_?: Map<string, any>, forKey?: string): void;
  set(_: number, forKey: string): void;
  set(_: number, forKey: string): void;
  set(_?: any, forKey?: string): void;
  set(_?: string, forKey?: string): void;
  synchronize(): boolean;
}

// export function NSUnionRange(range1: NSRange, range2: NSRange): NSRange;

// export function NSUnionRect(aRect: CGRect, bRect: CGRect): CGRect;

export class NSUniqueIDSpecifier extends NSScriptObjectSpecifier {
  uniqueID: any;
  setUniqueID(_: any);
  // @ts-ignore 
  static createWithContainerClassDescriptionWithContainerSpecifierWithKeyWithUniqueID(_: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, uniqueID?: any): NSUniqueIDSpecifier;
}

export class NSUnitInformationStorage extends Dimension {
  //  static createWithBaseUnit(): NSUnitInformationStorage;
  static bits: NSUnitInformationStorage;
  static bytes: NSUnitInformationStorage;
  static exabits: NSUnitInformationStorage;
  static exabytes: NSUnitInformationStorage;
  static exbibits: NSUnitInformationStorage;
  static exbibytes: NSUnitInformationStorage;
  static gibibits: NSUnitInformationStorage;
  static gibibytes: NSUnitInformationStorage;
  static gigabits: NSUnitInformationStorage;
  static gigabytes: NSUnitInformationStorage;
  static kibibits: NSUnitInformationStorage;
  static kibibytes: NSUnitInformationStorage;
  static kilobits: NSUnitInformationStorage;
  static kilobytes: NSUnitInformationStorage;
  static mebibits: NSUnitInformationStorage;
  static mebibytes: NSUnitInformationStorage;
  static megabits: NSUnitInformationStorage;
  static megabytes: NSUnitInformationStorage;
  static nibbles: NSUnitInformationStorage;
  static pebibits: NSUnitInformationStorage;
  static pebibytes: NSUnitInformationStorage;
  static petabits: NSUnitInformationStorage;
  static petabytes: NSUnitInformationStorage;
  static tebibits: NSUnitInformationStorage;
  static tebibytes: NSUnitInformationStorage;
  static terabits: NSUnitInformationStorage;
  static terabytes: NSUnitInformationStorage;
  static yobibits: NSUnitInformationStorage;
  static yobibytes: NSUnitInformationStorage;
  static yottabits: NSUnitInformationStorage;
  static yottabytes: NSUnitInformationStorage;
  static zebibits: NSUnitInformationStorage;
  static zebibytes: NSUnitInformationStorage;
  static zettabits: NSUnitInformationStorage;
  static zettabytes: NSUnitInformationStorage;
}

export class NSUserActivity extends NSObject {
  activityType: string;
  contentAttributeSet: CSSearchableItemAttributeSet;
  setContentAttributeSet(_: CSSearchableItemAttributeSet);
  delegate: any;
  setDelegate(_: any);
  detectedBarcodeDescriptor: CIBarcodeDescriptor;
  isEligibleForHandoff: boolean;
  setEligibleForHandoff(_: boolean);
  isEligibleForPublicIndexing: boolean;
  setEligibleForPublicIndexing(_: boolean);
  isEligibleForSearch: boolean;
  setEligibleForSearch(_: boolean);
  expirationDate: Date;
  setExpirationDate(_: Date);
  keywords: Set<any>;
  setKeywords(_: Set<any>);
  needsSave: boolean;
  setNeedsSave(_: boolean);
  referrerURL: URL;
  setReferrerURL(_: URL);
  requiredUserInfoKeys: Set<any>;
  setRequiredUserInfoKeys(_: Set<any>);
  supportsContinuationStreams: boolean;
  setSupportsContinuationStreams(_: boolean);
  targetContentIdentifier: string;
  setTargetContentIdentifier(_: string);
  title: string;
  setTitle(_: string);
  userInfo: Map<any, any>;
  setUserInfo(_: Map<any, any>);
  webpageURL: URL;
  setWebpageURL(_: URL);
  addUserInfoEntries(from: Map<any, any>): void;
  becomeCurrent(): void;
  getContinuationStreams(completionHandler?: (p1: InputStream, p2: OutputStream, p3: Error) => void): void;
  static createWithActivityType(_: string): NSUserActivity;
  invalidate(): void;
  resignCurrent(): void;
}

interface NSUserActivityDelegate {
  userActivity(_: NSUserActivity, didReceive: InputStream, outputStream: OutputStream): void;
  userActivityWasContinued(_: NSUserActivity): void;
  userActivityWillSave(_: NSUserActivity): void;
}

export class NSUserAppleScriptTask extends NSUserScriptTask {
  // @ts-ignore 
  execute(withAppleEvent?: NSAppleEventDescriptor, completionHandler?: (p1: NSAppleEventDescriptor, p2: Error) => void): void;
}

export class NSUserAutomatorTask extends NSUserScriptTask {
  variables: Map<string, any>;
  setVariables(_: Map<string, any>);
  // @ts-ignore 
  execute(withInput?: any, completionHandler?: (p1: any, p2: Error) => void): void;
}

// export function NSUserName(): string;

export class NSUserNotification extends NSObject {
  actionButtonTitle: string;
  setActionButtonTitle(_: string);
  activationType: NSUserNotification.ActivationType;
  actualDeliveryDate: Date;
  additionalActions: NSUserNotificationAction[];
  setAdditionalActions(_: NSUserNotificationAction[]);
  additionalActivationAction: NSUserNotificationAction;
  contentImage: NSImage;
  setContentImage(_: NSImage);
  deliveryDate: Date;
  setDeliveryDate(_: Date);
  deliveryRepeatInterval: DateComponents;
  setDeliveryRepeatInterval(_: DateComponents);
  deliveryTimeZone: TimeZone;
  setDeliveryTimeZone(_: TimeZone);
  hasActionButton: boolean;
  setHasActionButton(_: boolean);
  hasReplyButton: boolean;
  setHasReplyButton(_: boolean);
  identifier: string;
  setIdentifier(_: string);
  informativeText: string;
  setInformativeText(_: string);
  otherButtonTitle: string;
  setOtherButtonTitle(_: string);
  isPresented: boolean;
  isRemote: boolean;
  response: NSAttributedString;
  responsePlaceholder: string;
  setResponsePlaceholder(_: string);
  soundName: string;
  setSoundName(_: string);
  subtitle: string;
  setSubtitle(_: string);
  title: string;
  setTitle(_: string);
  userInfo: Map<string, any>;
  setUserInfo(_: Map<string, any>);
}

export class NSUserNotificationAction extends NSObject {
  identifier: string;
  title: string;
}

export class NSUserNotificationCenter extends NSObject {
  delegate: any;
  setDelegate(_: any);
  deliveredNotifications: NSUserNotification[];
  scheduledNotifications: NSUserNotification[];
  setScheduledNotifications(_: NSUserNotification[]);
  static defaultUserNotificationCenter: NSUserNotificationCenter;
  deliver(_: NSUserNotification): void;
  removeAllDeliveredNotifications(): void;
  removeDeliveredNotification(_: NSUserNotification): void;
  removeScheduledNotification(_: NSUserNotification): void;
  scheduleNotification(_: NSUserNotification): void;
}

interface NSUserNotificationCenterDelegate {
  userNotificationCenter(_: NSUserNotificationCenter, didDeliver: NSUserNotification): void;
  userNotificationCenter(_: NSUserNotificationCenter, didActivate: NSUserNotification): void;
  userNotificationCenter(_: NSUserNotificationCenter, shouldPresent: NSUserNotification): boolean;
}

export class NSUserScriptTask extends NSObject {
  scriptURL: URL;
  execute(completionHandler?: (p1: Error) => void): void;
  static createWith(error: URL): NSUserScriptTask;
}

export class NSUserUnixTask extends NSUserScriptTask {
  standardError: FileHandle;
  setStandardError(_: FileHandle);
  standardInput: FileHandle;
  setStandardInput(_: FileHandle);
  standardOutput: FileHandle;
  setStandardOutput(_: FileHandle);
  // @ts-ignore 
  execute(withArguments?: string[], completionHandler?: (p1: Error) => void): void;
}

export class NSValue extends NSObject {
  CATransform3DValue: CATransform3D;
  CMTimeMappingValue: CMTimeMapping;
  CMTimeRangeValue: CMTimeRange;
  CMTimeValue: CMTime;
  edgeInsetsValue: NSEdgeInsets;
  nonretainedObjectValue: any;
  objCType: string;
  pointValue: CGPoint;
  pointerValue: any;
  rangeValue: NSRange;
  rectValue: CGRect;
  sizeValue: CGSize;
  getValue(_: any): void;
  getValue(_: any, size: number): void;
  static createWithBytesWithObjCType(_: any, objCType: string): NSValue;
  // @ts-ignore 
  isEqual(to: NSValue): boolean;
}

export class NSWhoseSpecifier extends NSScriptObjectSpecifier {
  endSubelementIdentifier: NSScriptObjectSpecifiers.NSWhoseSpecifier.SubelementIdentifier;
  setEndSubelementIdentifier(_: NSScriptObjectSpecifiers.NSWhoseSpecifier.SubelementIdentifier);
  endSubelementIndex: number;
  setEndSubelementIndex(_: number);
  startSubelementIdentifier: NSScriptObjectSpecifiers.NSWhoseSpecifier.SubelementIdentifier;
  setStartSubelementIdentifier(_: NSScriptObjectSpecifiers.NSWhoseSpecifier.SubelementIdentifier);
  startSubelementIndex: number;
  setStartSubelementIndex(_: number);
  test: NSScriptWhoseTest;
  setTest(_: NSScriptWhoseTest);
  // @ts-ignore 
  static createWithContainerClassDescriptionWithContainerSpecifierWithKeyWithTest(_: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, test?: NSScriptWhoseTest): NSWhoseSpecifier;
}

export class NSXPCCoder extends NSCoder {
  connection: NSXPCConnection;
  userInfo: any;
  setUserInfo(_: any);
  decodeXPCObject(ofType: any, forKey: string): NSObject;
  encodeXPCObject(_: NSObject, forKey: string): void;
}

export class NSXPCConnection extends NSObject {
  static current(): NSXPCConnection;
  auditSessionIdentifier: number;
  effectiveGroupIdentifier: number;
  effectiveUserIdentifier: number;
  endpoint: NSXPCListenerEndpoint;
  exportedInterface: NSXPCInterface;
  setExportedInterface(_: NSXPCInterface);
  exportedObject: any;
  setExportedObject(_: any);
  interruptionHandler: () => void;
  setInterruptionHandler(_: () => void);
  invalidationHandler: () => void;
  setInvalidationHandler(_: () => void);
  processIdentifier: number;
  remoteObjectInterface: NSXPCInterface;
  setRemoteObjectInterface(_: NSXPCInterface);
  remoteObjectProxy: any;
  serviceName: string;
  static createWithListenerEndpoint(_: NSXPCListenerEndpoint): NSXPCConnection;
  static createWithMachServiceNameWithOptions(_: string, options: NSXPCConnection.Options): NSXPCConnection;
  static createWithServiceName(_: string): NSXPCConnection;
  invalidate(): void;
  resume(): void;
  scheduleSendBarrierBlock(_: () => void): void;
  suspend(): void;
}

export class NSXPCInterface extends NSObject {
  protocol: any /* Protocol */;
  setProtocol(_: any /* Protocol */);
  xpcType(for_: string, argumentIndex: number, ofReply: boolean): any;
  classes(for_: string, argumentIndex: number, ofReply: boolean): Set<any>;
  forSelector(_: string, argumentIndex: number, ofReply: boolean): NSXPCInterface;
  setClasses(_: Set<any>, for_: string, argumentIndex: number, ofReply: boolean): void;
  setInterface(_: NSXPCInterface, for_: string, argumentIndex: number, ofReply: boolean): void;
  setXPCType(_: any, for_: string, argumentIndex: number, ofReply: boolean): void;
}

export class NSXPCListener extends NSObject {
  static anonymous(): NSXPCListener;
  static service(): NSXPCListener;
  delegate: any;
  setDelegate(_: any);
  endpoint: NSXPCListenerEndpoint;
  static createWithMachServiceName(_: string): NSXPCListener;
  invalidate(): void;
  resume(): void;
  suspend(): void;
}

interface NSXPCListenerDelegate {
  listener(_: NSXPCListener, shouldAcceptNewConnection: NSXPCConnection): boolean;
}

export class NSXPCListenerEndpoint extends NSObject {
}

interface NSXPCProxyCreating {
  remoteObjectProxy: any;
  remoteObjectProxyWithErrorHandler(_: (p1: Error) => void): any;
  synchronousRemoteObjectProxyWithErrorHandler(_: (p1: Error) => void): any;
}

// export function NSZoneCalloc(zone: any, numElems: number, byteSize: number): any;

// export function NSZoneFree(zone: any, ptr: any): void;

// export function NSZoneFromPointer(ptr: any): any;

// export function NSZoneMalloc(zone: any, size: number): any;

// export function NSZoneName(zone: any): string;

// export function NSZoneRealloc(zone: any, ptr: any, size: number): any;

export class NetService extends NSObject {
  static data(fromTXTRecord: Map<string, Data>): Data;
  static dictionary(fromTXTRecord: Data): Map<string, Data>;
  addresses: Data[];
  delegate: any;
  setDelegate(_: any);
  domain: string;
  hostName: string;
  includesPeerToPeer: boolean;
  setIncludesPeerToPeer(_: boolean);
  name: string;
  port: number;
  type: string;
  txtRecordData(): Data;
  getInputStream(_?: InputStream, outputStream?: OutputStream): boolean;
  static createWithDomainWithTypeWithName(_: string, type: string, name: string): NetService;
  static createWithDomainWithTypeWithNameWithPort(_: string, type: string, name: string, port: number): NetService;
  publish(): void;
  publish(options: NSNetServices.NetService.Options): void;
  remove(from: RunLoop, forMode: string): void;
  resolve(withTimeout: number): void;
  schedule(in_: RunLoop, forMode: string): void;
  setTXTRecord(_?: Data): boolean;
  startMonitoring(): void;
  stop(): void;
  stopMonitoring(): void;
}

export class NetServiceBrowser extends NSObject {
  delegate: any;
  setDelegate(_: any);
  includesPeerToPeer: boolean;
  setIncludesPeerToPeer(_: boolean);
  remove(from: RunLoop, forMode: string): void;
  schedule(in_: RunLoop, forMode: string): void;
  searchForBrowsableDomains(): void;
  searchForRegistrationDomains(): void;
  searchForServices(ofType: string, inDomain: string): void;
  stop(): void;
}

interface NetServiceBrowserDelegate {
  netServiceBrowser(_: NetServiceBrowser, didNotSearch: Map<string, number>): void;
  netServiceBrowser(_: NetServiceBrowser, didFindDomain: string, moreComing: boolean): void;
  netServiceBrowser(_: NetServiceBrowser, didFind: NetService, moreComing: boolean): void;
  netServiceBrowser(_: NetServiceBrowser, didRemoveDomain: string, moreComing: boolean): void;
  netServiceBrowser(_: NetServiceBrowser, didRemove: NetService, moreComing: boolean): void;
  netServiceBrowserDidStopSearch(_: NetServiceBrowser): void;
  netServiceBrowserWillSearch(_: NetServiceBrowser): void;
}

interface NetServiceDelegate {
  netService(_: NetService, didNotPublish: Map<string, number>): void;
  netService(_: NetService, didNotResolve: Map<string, number>): void;
  netService(_: NetService, didUpdateTXTRecord: Data): void;
  netService(_: NetService, didAcceptConnectionWith: InputStream, outputStream: OutputStream): void;
  netServiceDidPublish(_: NetService): void;
  netServiceDidResolveAddress(_: NetService): void;
  netServiceDidStop(_: NetService): void;
  netServiceWillPublish(_: NetService): void;
  netServiceWillResolve(_: NetService): void;
}

export class Notification extends NSObject {
  static createWithNotificationWithNameObject(_: string, object_?: any): Notification;
  static createWithNotificationWithNameObjectWithUserInfo(_: string, object_?: any, userInfo?: Map<any, any>): Notification;
  name: string;
  object: any;
  userInfo: Map<any, any>;
  static createWithNameWithObjectWithUserInfo(_: string, object_?: any, userInfo?: Map<any, any>): Notification;
}

export class NotificationCenter extends NSObject {
  static defaultCenter: NotificationCenter;
  // @ts-ignore 
  addObserver(_: any, selector: string, name?: string, object_?: any): void;
  // @ts-ignore 
  addObserver(forName?: string, object_?: any, queue?: OperationQueue, using?: (p1: Notification) => void): any;
  post(_: Notification): void;
  post(name: string, object_?: any): void;
  post(name: string, object_?: any, userInfo?: Map<any, any>): void;
  // @ts-ignore 
  removeObserver(_: any): void;
  // @ts-ignore 
  removeObserver(_: any, name?: string, object_?: any): void;
}

export class NotificationQueue extends NSObject {
  static defaultQueue: NotificationQueue;
  dequeueNotifications(matching: Notification, coalesceMask: number): void;
  enqueue(_: Notification, postingStyle: NotificationQueue.PostingStyle): void;
  enqueue(_: Notification, postingStyle: NotificationQueue.PostingStyle, coalesceMask: NotificationQueue.NotificationCoalescing, forModes?: string[]): void;
  static createWithNotificationCenter(_: NotificationCenter): NotificationQueue;
}

export class NumberFormatter extends Formatter {
  static defaultFormatterBehavior(): NumberFormatter.Behavior;
  static localizedString(from: number, number: NumberFormatter.Style): string;
  static setDefaultFormatterBehavior(_: NumberFormatter.Behavior): void;
  allowsFloats: boolean;
  setAllowsFloats(_: boolean);
  alwaysShowsDecimalSeparator: boolean;
  setAlwaysShowsDecimalSeparator(_: boolean);
  attributedStringForNil: NSAttributedString;
  setAttributedStringForNil(_: NSAttributedString);
  attributedStringForNotANumber: NSAttributedString;
  setAttributedStringForNotANumber(_: NSAttributedString);
  attributedStringForZero: NSAttributedString;
  setAttributedStringForZero(_: NSAttributedString);
  currencyCode: string;
  setCurrencyCode(_: string);
  currencyDecimalSeparator: string;
  setCurrencyDecimalSeparator(_: string);
  currencyGroupingSeparator: string;
  setCurrencyGroupingSeparator(_: string);
  currencySymbol: string;
  setCurrencySymbol(_: string);
  decimalSeparator: string;
  setDecimalSeparator(_: string);
  exponentSymbol: string;
  setExponentSymbol(_: string);
  format: string;
  setFormat(_: string);
  formatWidth: number;
  setFormatWidth(_: number);
  formatterBehavior: NumberFormatter.Behavior;
  setFormatterBehavior(_: NumberFormatter.Behavior);
  formattingContext: Formatter.Context;
  setFormattingContext(_: Formatter.Context);
  generatesDecimalNumbers: boolean;
  setGeneratesDecimalNumbers(_: boolean);
  groupingSeparator: string;
  setGroupingSeparator(_: string);
  groupingSize: number;
  setGroupingSize(_: number);
  hasThousandSeparators: boolean;
  setHasThousandSeparators(_: boolean);
  internationalCurrencySymbol: string;
  setInternationalCurrencySymbol(_: string);
  isLenient: boolean;
  setLenient(_: boolean);
  locale: Locale;
  setLocale(_: Locale);
  localizesFormat: boolean;
  setLocalizesFormat(_: boolean);
  maximum: number;
  setMaximum(_: number);
  maximumFractionDigits: number;
  setMaximumFractionDigits(_: number);
  maximumIntegerDigits: number;
  setMaximumIntegerDigits(_: number);
  maximumSignificantDigits: number;
  setMaximumSignificantDigits(_: number);
  minimum: number;
  setMinimum(_: number);
  minimumFractionDigits: number;
  setMinimumFractionDigits(_: number);
  minimumIntegerDigits: number;
  setMinimumIntegerDigits(_: number);
  minimumSignificantDigits: number;
  setMinimumSignificantDigits(_: number);
  minusSign: string;
  setMinusSign(_: string);
  multiplier: number;
  setMultiplier(_: number);
  negativeFormat: string;
  setNegativeFormat(_: string);
  negativeInfinitySymbol: string;
  setNegativeInfinitySymbol(_: string);
  negativePrefix: string;
  setNegativePrefix(_: string);
  negativeSuffix: string;
  setNegativeSuffix(_: string);
  nilSymbol: string;
  setNilSymbol(_: string);
  notANumberSymbol: string;
  setNotANumberSymbol(_: string);
  numberStyle: NumberFormatter.Style;
  setNumberStyle(_: NumberFormatter.Style);
  paddingCharacter: string;
  setPaddingCharacter(_: string);
  paddingPosition: NumberFormatter.PadPosition;
  setPaddingPosition(_: NumberFormatter.PadPosition);
  isPartialStringValidationEnabled: boolean;
  setPartialStringValidationEnabled(_: boolean);
  perMillSymbol: string;
  setPerMillSymbol(_: string);
  percentSymbol: string;
  setPercentSymbol(_: string);
  plusSign: string;
  setPlusSign(_: string);
  positiveFormat: string;
  setPositiveFormat(_: string);
  positiveInfinitySymbol: string;
  setPositiveInfinitySymbol(_: string);
  positivePrefix: string;
  setPositivePrefix(_: string);
  positiveSuffix: string;
  setPositiveSuffix(_: string);
  roundingBehavior: NSDecimalNumberHandler;
  setRoundingBehavior(_: NSDecimalNumberHandler);
  roundingIncrement: number;
  setRoundingIncrement(_: number);
  roundingMode: NumberFormatter.RoundingMode;
  setRoundingMode(_: NumberFormatter.RoundingMode);
  secondaryGroupingSize: number;
  setSecondaryGroupingSize(_: number);
  textAttributesForNegativeInfinity: Map<string, any>;
  setTextAttributesForNegativeInfinity(_: Map<string, any>);
  textAttributesForNegativeValues: Map<string, any>;
  setTextAttributesForNegativeValues(_: Map<string, any>);
  textAttributesForNil: Map<string, any>;
  setTextAttributesForNil(_: Map<string, any>);
  textAttributesForNotANumber: Map<string, any>;
  setTextAttributesForNotANumber(_: Map<string, any>);
  textAttributesForPositiveInfinity: Map<string, any>;
  setTextAttributesForPositiveInfinity(_: Map<string, any>);
  textAttributesForPositiveValues: Map<string, any>;
  setTextAttributesForPositiveValues(_: Map<string, any>);
  textAttributesForZero: Map<string, any>;
  setTextAttributesForZero(_: Map<string, any>);
  thousandSeparator: string;
  setThousandSeparator(_: string);
  usesGroupingSeparator: boolean;
  setUsesGroupingSeparator(_: boolean);
  usesSignificantDigits: boolean;
  setUsesSignificantDigits(_: boolean);
  zeroSymbol: string;
  setZeroSymbol(_: string);
  // @ts-ignore 
  getObjectValue(forString?: any, range?: string, error?: NSRange): boolean;
  number(from: string): number;
}

export class Operation extends NSObject {
  isAsynchronous: boolean;
  isCancelled: boolean;
  completionBlock: () => void;
  setCompletionBlock(_: () => void);
  isConcurrent: boolean;
  dependencies: Operation[];
  isExecuting: boolean;
  isFinished: boolean;
  name: string;
  setName(_: string);
  qualityOfService: NSObjCRuntime.QualityOfService;
  setQualityOfService(_: NSObjCRuntime.QualityOfService);
  queuePriority: Operation.QueuePriority;
  setQueuePriority(_: Operation.QueuePriority);
  isReady: boolean;
  addDependency(_: Operation): void;
  cancel(): void;
  main(): void;
  removeDependency(_: Operation): void;
  start(): void;
  waitUntilFinished(): void;
}

export class OperationQueue extends NSObject {
  maxConcurrentOperationCount: number;
  setMaxConcurrentOperationCount(_: number);
  name: string;
  setName(_: string);
  operationCount: number;
  operations: Operation[];
  qualityOfService: NSObjCRuntime.QualityOfService;
  setQualityOfService(_: NSObjCRuntime.QualityOfService);
  isSuspended: boolean;
  setSuspended(_: boolean);
  underlyingQueue: NSObject;
  setUnderlyingQueue(_: NSObject);
  static currentQueue: OperationQueue;
  static mainQueue: OperationQueue;
  addBarrierBlock(_: () => void): void;
  addOperation(_: Operation): void;
  addOperation(_: () => void): void;
  addOperations(_: Operation[], waitUntilFinished: boolean): void;
  cancelAllOperations(): void;
  waitUntilAllOperationsAreFinished(): void;
}

export class OutputStream extends Stream {
  static createWithOutputStreamToMemory(): OutputStream;
  hasSpaceAvailable: boolean;
  static createWithToBufferWithCapacity(_: string, capacity: number): OutputStream;
  static createWithToFileAtPathWithAppend(_: string, append: boolean): OutputStream;
  static createWithToMemory(): OutputStream;
  static createWithUrlWithAppend(_: URL, append: boolean): OutputStream;
  write(_: string, maxLength: number): number;
}

export class PersonNameComponents extends NSObject {
  familyName: string;
  setFamilyName(_: string);
  givenName: string;
  setGivenName(_: string);
  middleName: string;
  setMiddleName(_: string);
  namePrefix: string;
  setNamePrefix(_: string);
  nameSuffix: string;
  setNameSuffix(_: string);
  nickname: string;
  setNickname(_: string);
  phoneticRepresentation: PersonNameComponents;
  setPhoneticRepresentation(_: PersonNameComponents);
}

export class PersonNameComponentsFormatter extends Formatter {
  static localizedString(from: PersonNameComponents, style: PersonNameComponentsFormatter.Style, options: PersonNameComponentsFormatter.Options): string;
  isPhonetic: boolean;
  setPhonetic(_: boolean);
  style: PersonNameComponentsFormatter.Style;
  setStyle(_: PersonNameComponentsFormatter.Style);
  annotatedString(from: PersonNameComponents): NSAttributedString;
  personNameComponents(from: string): PersonNameComponents;
}

export class Pipe extends NSObject {
  fileHandleForReading: FileHandle;
  fileHandleForWriting: FileHandle;
}

export class Port extends NSObject {
  reservedSpaceLength: number;
  isValid: boolean;
  delegate(): any;
  invalidate(): void;
  remove(from: RunLoop, forMode: string): void;
  schedule(in_: RunLoop, forMode: string): void;
  send(before: Date, components?: any[], from?: Port, reserved?: number): boolean;
  send(before: Date, msgid: number, components?: any[], from?: Port, reserved?: number): boolean;
  setDelegate(_?: any): void;
}

interface PortDelegate {
  handle(_: PortMessage): void;
}

export class PortMessage extends NSObject {
  components: any[];
  msgid: number;
  setMsgid(_: number);
  receivePort: Port;
  sendPort: Port;
  static createWithSendPortWithReceivePortWithComponents(_?: Port, receivePort?: Port, components?: any[]): PortMessage;
  send(before: Date): boolean;
}

export class Process extends NSObject {
  static launchedTaskWithExecutableURL(_: URL, arguments_: string[], error?: Error, terminationHandler?: (p1: Process) => void): Process;
  static launchedProcess(launchPath: string, arguments_: string[]): Process;
  arguments: string[];
  setArguments(_: string[]);
  currentDirectoryPath: string;
  setCurrentDirectoryPath(_: string);
  currentDirectoryURL: URL;
  setCurrentDirectoryURL(_: URL);
  environment: Map<string, string>;
  setEnvironment(_: Map<string, string>);
  executableURL: URL;
  setExecutableURL(_: URL);
  launchPath: string;
  setLaunchPath(_: string);
  processIdentifier: number;
  qualityOfService: NSObjCRuntime.QualityOfService;
  setQualityOfService(_: NSObjCRuntime.QualityOfService);
  isRunning: boolean;
  standardError: any;
  setStandardError(_: any);
  standardInput: any;
  setStandardInput(_: any);
  standardOutput: any;
  setStandardOutput(_: any);
  terminationHandler: (p1: Process) => void;
  setTerminationHandler(_: (p1: Process) => void);
  terminationReason: Process.TerminationReason;
  terminationStatus: number;
  interrupt(): void;
  launch(): void;
  resume(): boolean;
  suspend(): boolean;
  terminate(): void;
  waitUntilExit(): void;
}

export class ProcessInfo extends NSObject {
  activeProcessorCount: number;
  arguments: string[];
  automaticTerminationSupportEnabled: boolean;
  setAutomaticTerminationSupportEnabled(_: boolean);
  environment: Map<string, string>;
  fullUserName: string;
  globallyUniqueString: string;
  hostName: string;
  isMacCatalystApp: boolean;
  operatingSystemVersion: OperatingSystemVersion;
  operatingSystemVersionString: string;
  physicalMemory: number;
  processIdentifier: number;
  processName: string;
  setProcessName(_: string);
  processorCount: number;
  systemUptime: number;
  thermalState: ProcessInfo.ThermalState;
  userName: string;
  static processInfo: ProcessInfo;
  beginActivity(options: ProcessInfo.ActivityOptions, reason: string): any;
  disableAutomaticTermination(_: string): void;
  disableSuddenTermination(): void;
  enableAutomaticTermination(_: string): void;
  enableSuddenTermination(): void;
  endActivity(_: any): void;
  isOperatingSystemAtLeast(_: OperatingSystemVersion): boolean;
  performActivity(options: ProcessInfo.ActivityOptions, reason: string, using: () => void): void;
}

export class Progress extends NSObject {
  static addSubscriber(forFileURL: URL, withPublishingHandler: (p1: Progress) => () => void): any;
  static current(): Progress;
  static discreteProgress(totalUnitCount: number): Progress;
  static removeSubscriber(_: any): void;
  isCancellable: boolean;
  setCancellable(_: boolean);
  cancellationHandler: () => void;
  setCancellationHandler(_: () => void);
  isCancelled: boolean;
  completedUnitCount: number;
  setCompletedUnitCount(_: number);
  estimatedTimeRemaining: number;
  setEstimatedTimeRemaining(_: number);
  fileCompletedCount: number;
  setFileCompletedCount(_: number);
  fileOperationKind: string;
  setFileOperationKind(_: string);
  fileTotalCount: number;
  setFileTotalCount(_: number);
  fileURL: URL;
  setFileURL(_: URL);
  isFinished: boolean;
  fractionCompleted: number;
  isIndeterminate: boolean;
  kind: string;
  setKind(_: string);
  localizedAdditionalDescription: string;
  setLocalizedAdditionalDescription(_: string);
  localizedDescription: string;
  setLocalizedDescription(_: string);
  isOld: boolean;
  isPausable: boolean;
  setPausable(_: boolean);
  isPaused: boolean;
  pausingHandler: () => void;
  setPausingHandler(_: () => void);
  resumingHandler: () => void;
  setResumingHandler(_: () => void);
  throughput: number;
  setThroughput(_: number);
  totalUnitCount: number;
  setTotalUnitCount(_: number);
  userInfo: Map<string, any>;
  addChild(_: Progress, withPendingUnitCount: number): void;
  becomeCurrent(withPendingUnitCount: number): void;
  cancel(): void;
  static createWithParentWithUserInfo(_?: Progress, userInfo?: Map<string, any>): Progress;
  pause(): void;
  performAsCurrentWithPendingUnitCount(_: number, usingBlock: () => void): void;
  publish(): void;
  resignCurrent(): void;
  resume(): void;
  setUserInfoObject(_?: any, forKey?: string): void;
  unpublish(): void;
}

interface ProgressReporting {
  progress: Progress;
}

export class PropertyListSerialization extends NSObject {
  static dataWithPropertyList(format: any, options: NSPropertyList.PropertyListSerialization.PropertyListFormat, error: number): Data;
  static propertyList(_: any, isValidFor: NSPropertyList.PropertyListSerialization.PropertyListFormat): boolean;
  static propertyListWithData(options: Data, format: NSPropertyList.PropertyListSerialization.MutabilityOptions, error?: NSPropertyList.PropertyListSerialization.PropertyListFormat): any;
  static propertyListWithStream(options: InputStream, format: NSPropertyList.PropertyListSerialization.MutabilityOptions, error?: NSPropertyList.PropertyListSerialization.PropertyListFormat): any;
  static writePropertyList(_: any, to: OutputStream, format: NSPropertyList.PropertyListSerialization.PropertyListFormat, options: number): number;
}

export class RelativeDateTimeFormatter extends Formatter {
  calendar: Calendar;
  setCalendar(_: Calendar);
  dateTimeStyle: RelativeDateTimeFormatter.DateTimeStyle;
  setDateTimeStyle(_: RelativeDateTimeFormatter.DateTimeStyle);
  formattingContext: Formatter.Context;
  setFormattingContext(_: Formatter.Context);
  locale: Locale;
  setLocale(_: Locale);
  unitsStyle: RelativeDateTimeFormatter.UnitsStyle;
  setUnitsStyle(_: RelativeDateTimeFormatter.UnitsStyle);
  localizedString(for_: Date, relativeTo: Date): string;
  localizedString(from: DateComponents): string;
  localizedString(fromTimeInterval: number): string;
}

export class RunLoop extends NSObject {
  currentMode: string;
  static currentRunLoop: RunLoop;
  static mainRunLoop: RunLoop;
  acceptInput(forMode: string, before: Date): void;
  add(_: Port, forMode: string): void;
  add(_: Timer, forMode: string): void;
  cancelPerform(_: string, target: any, argument?: any): void;
  cancelPerformSelectors(withTarget: any): void;
  getCFRunLoop(): any;
  limitDate(forMode: string): Date;
  // @ts-ignore 
  perform(_: () => void): void;
  // @ts-ignore 
  perform(inModes: string[], block: () => void): void;
  // @ts-ignore 
  perform(_: string, target: any, argument?: any, order?: number, modes?: string[]): void;
  remove(_: Port, forMode: string): void;
  run(): void;
  run(mode: string, before: Date): boolean;
  run(until: Date): void;
}

export class Scanner extends NSObject {
  static localizedScanner(with_: string): any;
  isAtEnd: boolean;
  caseSensitive: boolean;
  setCaseSensitive(_: boolean);
  charactersToBeSkipped: CharacterSet;
  setCharactersToBeSkipped(_: CharacterSet);
  locale: any;
  setLocale(_: any);
  static createWithString(_: string): Scanner;
  scanHexDouble(_?: number): boolean;
  scanHexFloat(_?: number): boolean;
  scanHexInt64(_?: number): boolean;
  scanInt(_?: number): boolean;
  scanInt(_?: number): boolean;
  scanInt64(_?: number): boolean;
  scanUnsignedLongLong(_?: number): boolean;
}

export class SocketPort extends Port {
  address: Data;
  protocol: number;
  protocolFamily: number;
  socket: number;
  socketType: number;
  static createWithRemoteWithProtocolFamilyWithSocketTypeWithProtocolWithAddress(_: number, socketType: number, protocol: number, address: Data): SocketPort;
  static createWithRemoteWithtcpPortWithHost(_: number, host?: string): SocketPort;
  static createWithProtocolFamilyWithSocketTypeWithProtocolWithAddress(_: number, socketType: number, protocol: number, address: Data): SocketPort;
  static createWithProtocolFamilyWithSocketTypeWithProtocolWithSocket(_: number, socketType: number, protocol: number, socket: number): SocketPort;
  static createWithTcpPort(_: number): SocketPort;
}

export class Stream extends NSObject {
  static getBoundStreams(withBufferSize: number, inputStream?: InputStream, outputStream?: OutputStream): void;
  static getStreamsToHost(withName: string, port: number, inputStream?: InputStream, outputStream?: OutputStream): void;
  delegate: any;
  setDelegate(_: any);
  streamError: Error;
  streamStatus: Stream.Status;
  close(): void;
  open(): void;
  property(forKey: string): any;
  remove(from: RunLoop, forMode: string): void;
  schedule(in_: RunLoop, forMode: string): void;
  setProperty(_?: any, forKey?: string): boolean;
}

interface StreamDelegate {
  stream(_: Stream, handle: Stream.Event): void;
}

export class Thread extends NSObject {
  static detachNewThreadSelector(_: string, toTarget: any, with_?: any): void;
  static detachNewThread(_: () => void): void;
  static exit(): void;
  static isMultiThreaded(): boolean;
  static setThreadPriority(_: number): boolean;
  static sleep(forTimeInterval: number): void;
  static sleep(until: Date): void;
  //  static threadPriority(): number;
  isCancelled: boolean;
  isExecuting: boolean;
  isFinished: boolean;
  isMainThread: boolean;
  name: string;
  setName(_: string);
  qualityOfService: NSObjCRuntime.QualityOfService;
  setQualityOfService(_: NSObjCRuntime.QualityOfService);
  stackSize: number;
  setStackSize(_: number);
  threadDictionary: Map<any, any>;
  //   threadPriority: number;
  setThreadPriority(_: number);
  static callStackReturnAddresses: number[];
  static callStackSymbols: string[];
  static currentThread: Thread;
  //   static isMainThread: boolean;
  static mainThread: Thread;
  cancel(): void;
  static createWithBlock(_: () => void): Thread;
  static createWithTargetWithSelectorWithObject(_: any, selector: string, object_?: any): Thread;
  main(): void;
  start(): void;
}

export class TimeZone extends NSObject {
  //  static abbreviationDictionary(): Map<string, string>;
  static resetSystemTimeZone(): void;
  static createWithTimeZoneForSecondsFromGMT(_: number): TimeZone;
  static createWithTimeZoneWithAbbreviation(_: string): TimeZone;
  static createWithTimeZoneWithName(_: string): TimeZone;
  static createWithTimeZoneWithNameData(_: string, data?: Data): TimeZone;
  abbreviation: string;
  data: Data;
  isDaylightSavingTime: boolean;
  daylightSavingTimeOffset: number;
  name: string;
  nextDaylightSavingTimeTransition: Date;
  secondsFromGMT: number;
  //   static abbreviationDictionary: Map<string, string>;
  setAbbreviationDictionary(_: Map<string, string>);
  static defaultTimeZone: TimeZone;
  setDefaultTimeZone(_: TimeZone);
  static knownTimeZoneNames: string[];
  static localTimeZone: TimeZone;
  static systemTimeZone: TimeZone;
  static timeZoneDataVersion: string;
  abbreviationForDate(_: Date): string;
  daylightSavingTimeOffsetForDate(_: Date): number;
  static createWithName(_: string): TimeZone;
  static createWithNameWithData(_: string, data?: Data): TimeZone;
  isDaylightSavingTimeForDate(_: Date): boolean;
  isEqualToTimeZone(_: TimeZone): boolean;
  localizedName(_: TimeZone.NameStyle, locale?: Locale): string;
  nextDaylightSavingTimeTransitionAfterDate(_: Date): Date;
  secondsFromGMTForDate(_: Date): number;
}

export class Timer extends NSObject {
  static scheduledTimer(timeInterval: number, invocation: NSInvocation, repeats: boolean): Timer;
  static scheduledTimer(withTimeInterval: number, repeats: boolean, block: (p1: Timer) => void): Timer;
  static scheduledTimer(timeInterval: number, target: any, selector: string, userInfo?: any, repeats?: boolean): Timer;
  fireDate: Date;
  setFireDate(_: Date);
  timeInterval: number;
  tolerance: number;
  setTolerance(_: number);
  userInfo: any;
  isValid: boolean;
  fire(): void;
  static createWithFireDateWithIntervalWithRepeatsWithBlock(_: Date, interval: number, repeats: boolean, block: (p1: Timer) => void): Timer;
  static createWithFireDateWithIntervalWithTargetWithSelectorWithUserInfoWithRepeats(_: Date, interval: number, target: any, selector: string, userInfo?: any, repeats?: boolean): Timer;
  invalidate(): void;
}

export class URL extends NSObject {
  static createWithURLByResolvingAliasFileAtURLOptions(options: URL, error: URL.BookmarkResolutionOptions): URL;
  static createWithURLByResolvingBookmarkDataOptionsWithRelativeToURLWithBookmarkDataIsStale(options: Data, relativeToURL: URL.BookmarkResolutionOptions, bookmarkDataIsStale?: URL, error?: boolean): URL;
  static URLFromPasteboard(_: NSPasteboard): URL;
  static URLWithDataRepresentation(_: Data, relativeToURL?: URL): URL;
  static createWithURLWithString(_: string): URL;
  static createWithURLWithStringRelativeToURL(_: string, relativeToURL?: URL): URL;
  static absoluteURLWithDataRepresentation(_: Data, relativeToURL?: URL): URL;
  static bookmarkDataWithContentsOfURL(error: URL): Data;
  static fileURLWithFileSystemRepresentation(_: string, isDirectory: boolean, relativeToURL?: URL): URL;
  static fileURLWithPath(_: string): URL;
  static fileURLWithPath(_: string, isDirectory: boolean): URL;
  static fileURLWithPath(_: string, isDirectory: boolean, relativeToURL?: URL): URL;
  static fileURLWithPath(_: string, relativeToURL?: URL): URL;
  static fileURLWithPathComponents(_: string[]): URL;
  static resourceValuesForKeys(_: string[], fromBookmarkData: Data): Map<string, any>;
  static writeBookmarkData(toURL: Data, options: URL, error: number): boolean;
  URLByDeletingLastPathComponent: URL;
  URLByDeletingPathExtension: URL;
  URLByResolvingSymlinksInPath: URL;
  URLByStandardizingPath: URL;
  absoluteString: string;
  absoluteURL: URL;
  baseURL: URL;
  dataRepresentation: Data;
  filePathURL: URL;
  fileSystemRepresentation: string;
  isFileURL: boolean;
  fragment: string;
  hasDirectoryPath: boolean;
  host: string;
  lastPathComponent: string;
  password: string;
  path: string;
  pathComponents: string[];
  pathExtension: string;
  port: number;
  query: string;
  relativePath: string;
  relativeString: string;
  resourceSpecifier: string;
  scheme: string;
  standardizedURL: URL;
  user: string;
  URLByAppendingPathComponent(_: string): URL;
  URLByAppendingPathComponent(_: string, isDirectory: boolean): URL;
  URLByAppendingPathExtension(_: string): URL;
  bookmarkDataWithOptions(includingResourceValuesForKeys: URL.BookmarkCreationOptions, relativeToURL?: string[], error?: URL): Data;
  checkPromisedItemIsReachableAndReturnError(): boolean;
  checkResourceIsReachableAndReturnError(): boolean;
  fileReferenceURL(): URL;
  getFileSystemRepresentation(_: string, maxLength: number): boolean;
  getPromisedItemResourceValue(forKey?: any, error?: string): boolean;
  getResourceValue(forKey?: any, error?: string): boolean;
  static createWithAbsoluteurlWithDataRepresentationWithRelativeToURL(_: Data, relativeToURL?: URL): URL;
  static createWithByResolvingBookmarkDataWithOptionsWithRelativeToURL(options: Data, relativeToURL: URL.BookmarkResolutionOptions, bookmarkDataIsStale?: URL, error?: boolean): URL;
  static createWithFileurlWithFileSystemRepresentationWithIsDirectoryWithRelativeToURL(_: string, isDirectory: boolean, relativeToURL?: URL): URL;
  static createWithFileurlWithPath(_: string): URL;
  static createWithFileurlWithPathWithIsDirectory(_: string, isDirectory: boolean): URL;
  static createWithFileurlWithPathWithIsDirectoryWithRelativeToURL(_: string, isDirectory: boolean, relativeToURL?: URL): URL;
  static createWithFileurlWithPathWithRelativeToURL(_: string, relativeToURL?: URL): URL;
  static createWithDataRepresentationWithRelativeToURL(_: Data, relativeToURL?: URL): URL;
  static createWithString(_: string): URL;
  static createWithStringWithRelativeToURL(_: string, relativeToURL?: URL): URL;
  isFileReferenceURL(): boolean;
  promisedItemResourceValuesForKeys(error: string[]): Map<string, any>;
  removeAllCachedResourceValues(): void;
  removeCachedResourceValueForKey(_: string): void;
  resourceValuesForKeys(error: string[]): Map<string, any>;
  setResourceValue(forKey?: any, error?: string): boolean;
  setResourceValues(error: Map<string, any>): boolean;
  setTemporaryResourceValue(_?: any, forKey?: string): void;
  startAccessingSecurityScopedResource(): boolean;
  stopAccessingSecurityScopedResource(): void;
  writeToPasteboard(_: NSPasteboard): void;
}

export class URLAuthenticationChallenge extends NSObject {
  error: Error;
  failureResponse: URLResponse;
  previousFailureCount: number;
  proposedCredential: URLCredential;
  protectionSpace: URLProtectionSpace;
  sender: any;
  static createWithAuthenticationChallengeWithSender(_: URLAuthenticationChallenge, sender: any): URLAuthenticationChallenge;
  static createWithProtectionSpaceWithProposedCredentialWithPreviousFailureCountWithFailureResponseWithErrorWithSender(_: URLProtectionSpace, proposedCredential?: URLCredential, previousFailureCount?: number, failureResponse?: URLResponse, error?: Error, sender?: any): URLAuthenticationChallenge;
}

interface URLAuthenticationChallengeSender {
  cancel(_: URLAuthenticationChallenge): void;
  continueWithoutCredential(for_: URLAuthenticationChallenge): void;
  performDefaultHandling(for_: URLAuthenticationChallenge): void;
  rejectProtectionSpaceAndContinue(with_: URLAuthenticationChallenge): void;
  use(_: URLCredential, for_: URLAuthenticationChallenge): void;
}

export class URLCache extends NSObject {
  currentDiskUsage: number;
  currentMemoryUsage: number;
  diskCapacity: number;
  setDiskCapacity(_: number);
  memoryCapacity: number;
  setMemoryCapacity(_: number);
  static sharedURLCache: URLCache;
  setSharedURLCache(_: URLCache);
  cachedResponse(for_: URLRequest): CachedURLResponse;
  getCachedResponse(for_: URLSessionDataTask, completionHandler?: (p1: CachedURLResponse) => void): void;
  static createWithMemoryCapacityWithDiskCapacityWithDirectoryURL(_: number, diskCapacity: number, directoryURL?: URL): URLCache;
  static createWithMemoryCapacityWithDiskCapacityWithDiskPath(_: number, diskCapacity: number, diskPath?: string): URLCache;
  removeAllCachedResponses(): void;
  removeCachedResponse(for_: URLSessionDataTask): void;
  removeCachedResponse(for_: URLRequest): void;
  removeCachedResponses(since: Date): void;
  storeCachedResponse(_: CachedURLResponse, for_: URLSessionDataTask): void;
  storeCachedResponse(_: CachedURLResponse, for_: URLRequest): void;
}

export class URLComponents extends NSObject {
  static createWithComponentsWithString(_: string): URLComponents;
  static createWithComponentsWithURLResolvingAgainstBaseURL(_: URL, resolvingAgainstBaseURL: boolean): URLComponents;
  URL: URL;
  fragment: string;
  setFragment(_: string);
  host: string;
  setHost(_: string);
  password: string;
  setPassword(_: string);
  path: string;
  setPath(_: string);
  percentEncodedFragment: string;
  setPercentEncodedFragment(_: string);
  percentEncodedHost: string;
  setPercentEncodedHost(_: string);
  percentEncodedPassword: string;
  setPercentEncodedPassword(_: string);
  percentEncodedPath: string;
  setPercentEncodedPath(_: string);
  percentEncodedQuery: string;
  setPercentEncodedQuery(_: string);
  percentEncodedQueryItems: URLQueryItem[];
  setPercentEncodedQueryItems(_: URLQueryItem[]);
  percentEncodedUser: string;
  setPercentEncodedUser(_: string);
  port: number;
  setPort(_: number);
  query: string;
  setQuery(_: string);
  queryItems: URLQueryItem[];
  setQueryItems(_: URLQueryItem[]);
  rangeOfFragment: NSRange;
  rangeOfHost: NSRange;
  rangeOfPassword: NSRange;
  rangeOfPath: NSRange;
  rangeOfPort: NSRange;
  rangeOfQuery: NSRange;
  rangeOfScheme: NSRange;
  rangeOfUser: NSRange;
  scheme: string;
  setScheme(_: string);
  user: string;
  setUser(_: string);
  URLRelativeToURL(_?: URL): URL;
  static createWithString(_: string): URLComponents;
  static createWithUrlWithResolvingAgainstBaseURL(_: URL, resolvingAgainstBaseURL: boolean): URLComponents;
}

export class URLCredential extends NSObject {
  certificates: any[];
  hasPassword: boolean;
  identity: any;
  password: string;
  persistence: URLCredential.Persistence;
  user: string;
  static createWithIdentityWithCertificatesWithPersistence(_: any, certificates?: any[], persistence?: URLCredential.Persistence): URLCredential;
  static createWithTrust(_: any): URLCredential;
  static createWithUserWithPasswordWithPersistence(_: string, password: string, persistence: URLCredential.Persistence): URLCredential;
}

export class URLCredentialStorage extends NSObject {
  allCredentials: Map<URLProtectionSpace, Map<string, URLCredential>>;
  static sharedCredentialStorage: URLCredentialStorage;
  credentials(for_: URLProtectionSpace): Map<string, URLCredential>;
  defaultCredential(for_: URLProtectionSpace): URLCredential;
  getCredentials(for_: URLProtectionSpace, task: URLSessionTask, completionHandler?: (p1: Map<string, URLCredential>) => void): void;
  getDefaultCredential(for_: URLProtectionSpace, task: URLSessionTask, completionHandler?: (p1: URLCredential) => void): void;
  remove(_: URLCredential, for_: URLProtectionSpace): void;
  remove(_: URLCredential, for_: URLProtectionSpace, options?: Map<string, any>): void;
  remove(_: URLCredential, for_: URLProtectionSpace, options?: Map<string, any>, task?: URLSessionTask): void;
  set(_: URLCredential, for_: URLProtectionSpace): void;
  set(_: URLCredential, for_: URLProtectionSpace, task: URLSessionTask): void;
  setDefaultCredential(_: URLCredential, for_: URLProtectionSpace): void;
  setDefaultCredential(_: URLCredential, for_: URLProtectionSpace, task: URLSessionTask): void;
}

export class URLProtectionSpace extends NSObject {
  authenticationMethod: string;
  distinguishedNames: Data[];
  host: string;
  isProxy: boolean;
  port: number;
  protocol: string;
  proxyType: string;
  realm: string;
  receivesCredentialSecurely: boolean;
  serverTrust: any;
  static createWithHostWithPortWithProtocolWithRealmWithAuthenticationMethod(_: string, port: number, protocol?: string, realm?: string, authenticationMethod?: string): URLProtectionSpace;
  static createWithProxyHostWithPortWithTypeWithRealmWithAuthenticationMethod(_: string, port: number, type?: string, realm?: string, authenticationMethod?: string): URLProtectionSpace;
}

export class URLProtocol extends NSObject {
  static canInit(with_: URLRequest): boolean;
  static canInit(with_: URLSessionTask): boolean;
  static canonicalRequest(for_: URLRequest): URLRequest;
  static property(forKey: string, in_: URLRequest): any;
  static registerClass(_: typeof NSObject): boolean;
  static removeProperty(forKey: string, in_: NSMutableURLRequest): void;
  static requestIsCacheEquivalent(_: URLRequest, to: URLRequest): boolean;
  static setProperty(_: any, forKey: string, in_: NSMutableURLRequest): void;
  static unregisterClass(_: typeof NSObject): void;
  cachedResponse: CachedURLResponse;
  client: any;
  request: URLRequest;
  task: URLSessionTask;
  static createWithRequestWithCachedResponseWithClient(_: URLRequest, cachedResponse?: CachedURLResponse, client?: any): URLProtocol;
  static createWithTaskWithCachedResponseWithClient(_: URLSessionTask, cachedResponse?: CachedURLResponse, client?: any): URLProtocol;
  startLoading(): void;
  stopLoading(): void;
}

interface URLProtocolClient {
  urlProtocol(_: URLProtocol, wasRedirectedTo: URLRequest, redirectResponse: URLResponse): void;
  urlProtocol(_: URLProtocol, cachedResponseIsValid: CachedURLResponse): void;
  urlProtocol(_: URLProtocol, didReceive: URLResponse, cacheStoragePolicy: URLCache.StoragePolicy): void;
  urlProtocol(_: URLProtocol, didLoad: Data): void;
  urlProtocol(_: URLProtocol, didFailWithError: Error): void;
  urlProtocol(_: URLProtocol, didReceive: URLAuthenticationChallenge): void;
  urlProtocol(_: URLProtocol, didCancel: URLAuthenticationChallenge): void;
  urlProtocolDidFinishLoading(_: URLProtocol): void;
}

export class URLQueryItem extends NSObject {
  static createWithQueryItemWithNameValue(_: string, value?: string): URLQueryItem;
  name: string;
  static createWithNameWithValue(_: string, value?: string): URLQueryItem;
}

export class URLRequest extends NSObject {
  static createWithRequestWithURL(_: URL): URLRequest;
  static createWithRequestWithURLCachePolicyWithTimeoutInterval(_: URL, cachePolicy: URLRequest.CachePolicy, timeoutInterval: number): URLRequest;
  HTTPBody: Data;
  HTTPBodyStream: InputStream;
  HTTPMethod: string;
  HTTPShouldHandleCookies: boolean;
  HTTPShouldUsePipelining: boolean;
  URL: URL;
  allHTTPHeaderFields: Map<string, string>;
  allowsCellularAccess: boolean;
  allowsConstrainedNetworkAccess: boolean;
  allowsExpensiveNetworkAccess: boolean;
  cachePolicy: URLRequest.CachePolicy;
  mainDocumentURL: URL;
  networkServiceType: URLRequest.NetworkServiceType;
  timeoutInterval: number;
  static createWithUrl(_: URL): URLRequest;
  static createWithUrlWithCachePolicyWithTimeoutInterval(_: URL, cachePolicy: URLRequest.CachePolicy, timeoutInterval: number): URLRequest;
  valueForHTTPHeaderField(_: string): string;
}

export class URLResponse extends NSObject {
  MIMEType: string;
  URL: URL;
  expectedContentLength: number;
  suggestedFilename: string;
  textEncodingName: string;
  static createWithUrlWithMimeTypeWithExpectedContentLengthWithTextEncodingName(_: URL, MIMEType?: string, expectedContentLength?: number, textEncodingName?: string): URLResponse;
}

export class URLSession extends NSObject {
  configuration: URLSessionConfiguration;
  delegate: any;
  delegateQueue: OperationQueue;
  sessionDescription: string;
  setSessionDescription(_: string);
  static sharedSession: URLSession;
  dataTask(with_: URLRequest): URLSessionDataTask;
  dataTask(with_: URLRequest, completionHandler?: (p1: Data, p2: URLResponse, p3: Error) => void): URLSessionDataTask;
  dataTask(with_: URL): URLSessionDataTask;
  dataTask(with_: URL, completionHandler?: (p1: Data, p2: URLResponse, p3: Error) => void): URLSessionDataTask;
  downloadTask(with_: URLRequest): URLSessionDownloadTask;
  downloadTask(with_: URLRequest, completionHandler?: (p1: URL, p2: URLResponse, p3: Error) => void): URLSessionDownloadTask;
  downloadTask(withResumeData: Data): URLSessionDownloadTask;
  downloadTask(withResumeData: Data, completionHandler?: (p1: URL, p2: URLResponse, p3: Error) => void): URLSessionDownloadTask;
  downloadTask(with_: URL): URLSessionDownloadTask;
  downloadTask(with_: URL, completionHandler?: (p1: URL, p2: URLResponse, p3: Error) => void): URLSessionDownloadTask;
  finishTasksAndInvalidate(): void;
  flush(completionHandler: () => void): void;
  getAllTasks(completionHandler: (p1: URLSessionTask[]) => void): void;
  getTasksWithCompletionHandler(_: (p1: URLSessionDataTask[], p2: URLSessionUploadTask[], p3: URLSessionDownloadTask[]) => void): void;
  invalidateAndCancel(): void;
  reset(completionHandler: () => void): void;
  streamTask(withHostName: string, port: number): URLSessionStreamTask;
  streamTask(with_: NetService): URLSessionStreamTask;
  uploadTask(with_: URLRequest, from: Data): URLSessionUploadTask;
  uploadTask(with_: URLRequest, from?: Data, completionHandler?: (p1: Data, p2: URLResponse, p3: Error) => void): URLSessionUploadTask;
  uploadTask(with_: URLRequest, fromFile: URL): URLSessionUploadTask;
  uploadTask(with_: URLRequest, fromFile: URL, completionHandler?: (p1: Data, p2: URLResponse, p3: Error) => void): URLSessionUploadTask;
  uploadTask(withStreamedRequest: URLRequest): URLSessionUploadTask;
  webSocketTask(with_: URLRequest): URLSessionWebSocketTask;
  webSocketTask(with_: URL): URLSessionWebSocketTask;
  webSocketTask(with_: URL, protocols: string[]): URLSessionWebSocketTask;
}

export class URLSessionConfiguration extends NSObject {
  static background(withIdentifier: string): URLSessionConfiguration;
  HTTPAdditionalHeaders: Map<any, any>;
  setHTTPAdditionalHeaders(_: Map<any, any>);
  HTTPCookieAcceptPolicy: HTTPCookieStorage.HTTPCookie.AcceptPolicy;
  setHTTPCookieAcceptPolicy(_: HTTPCookieStorage.HTTPCookie.AcceptPolicy);
  HTTPCookieStorage: HTTPCookieStorage;
  setHTTPCookieStorage(_: HTTPCookieStorage);
  HTTPMaximumConnectionsPerHost: number;
  setHTTPMaximumConnectionsPerHost(_: number);
  HTTPShouldSetCookies: boolean;
  setHTTPShouldSetCookies(_: boolean);
  HTTPShouldUsePipelining: boolean;
  setHTTPShouldUsePipelining(_: boolean);
  TLSMaximumSupportedProtocol: SecProtocolTypes.SSLProtocol;
  setTLSMaximumSupportedProtocol(_: SecProtocolTypes.SSLProtocol);
  TLSMaximumSupportedProtocolVersion: SecProtocolTypes.tls_protocol_version_t;
  setTLSMaximumSupportedProtocolVersion(_: SecProtocolTypes.tls_protocol_version_t);
  TLSMinimumSupportedProtocol: SecProtocolTypes.SSLProtocol;
  setTLSMinimumSupportedProtocol(_: SecProtocolTypes.SSLProtocol);
  TLSMinimumSupportedProtocolVersion: SecProtocolTypes.tls_protocol_version_t;
  setTLSMinimumSupportedProtocolVersion(_: SecProtocolTypes.tls_protocol_version_t);
  URLCache: URLCache;
  setURLCache(_: URLCache);
  URLCredentialStorage: URLCredentialStorage;
  setURLCredentialStorage(_: URLCredentialStorage);
  allowsCellularAccess: boolean;
  setAllowsCellularAccess(_: boolean);
  allowsConstrainedNetworkAccess: boolean;
  setAllowsConstrainedNetworkAccess(_: boolean);
  allowsExpensiveNetworkAccess: boolean;
  setAllowsExpensiveNetworkAccess(_: boolean);
  connectionProxyDictionary: Map<any, any>;
  setConnectionProxyDictionary(_: Map<any, any>);
  isDiscretionary: boolean;
  setDiscretionary(_: boolean);
  identifier: string;
  networkServiceType: URLRequest.NetworkServiceType;
  setNetworkServiceType(_: URLRequest.NetworkServiceType);
  protocolClasses: typeof NSObject[];
  setProtocolClasses(_: typeof NSObject[]);
  requestCachePolicy: URLRequest.CachePolicy;
  setRequestCachePolicy(_: URLRequest.CachePolicy);
  sharedContainerIdentifier: string;
  setSharedContainerIdentifier(_: string);
  shouldUseExtendedBackgroundIdleMode: boolean;
  setShouldUseExtendedBackgroundIdleMode(_: boolean);
  timeoutIntervalForRequest: number;
  setTimeoutIntervalForRequest(_: number);
  timeoutIntervalForResource: number;
  setTimeoutIntervalForResource(_: number);
  waitsForConnectivity: boolean;
  setWaitsForConnectivity(_: boolean);
  static defaultSessionConfiguration: URLSessionConfiguration;
  static ephemeralSessionConfiguration: URLSessionConfiguration;
}

interface URLSessionDataDelegate {
  urlSession(_: URLSession, dataTask: URLSessionDataTask, didReceive: URLResponse, completionHandler: (p1: URLSession.ResponseDisposition) => void): void;
  urlSession(_: URLSession, dataTask: URLSessionDataTask, didBecome: URLSessionDownloadTask): void;
  urlSession(_: URLSession, dataTask: URLSessionDataTask, didBecome: URLSessionStreamTask): void;
  urlSession(_: URLSession, dataTask: URLSessionDataTask, didReceive: Data): void;
  urlSession(_: URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse, completionHandler?: (p1: CachedURLResponse) => void): void;
}

export class URLSessionDataTask extends URLSessionTask {
}

interface URLSessionDelegate {
  urlSession(_: URLSession, didBecomeInvalidWithError?: Error): void;
  urlSession(_: URLSession, didReceive: URLAuthenticationChallenge, completionHandler?: (p1: URLSession.AuthChallengeDisposition, p2: URLCredential) => void): void;
}

interface URLSessionDownloadDelegate {
  urlSession(_: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo: URL): void;
  urlSession(_: URLSession, downloadTask: URLSessionDownloadTask, didWriteData: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  urlSession(_: URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: number, expectedTotalBytes: number): void;
}

export class URLSessionDownloadTask extends URLSessionTask {
  // @ts-ignore 
  cancel(byProducingResumeData?: (p1: Data) => void): void;
}

interface URLSessionStreamDelegate {
  urlSession(_: URLSession, readClosedFor: URLSessionStreamTask): void;
  urlSession(_: URLSession, writeClosedFor: URLSessionStreamTask): void;
  urlSession(_: URLSession, betterRouteDiscoveredFor: URLSessionStreamTask): void;
  urlSession(_: URLSession, streamTask: URLSessionStreamTask, didBecome: InputStream, outputStream: OutputStream): void;
}

export class URLSessionStreamTask extends URLSessionTask {
  captureStreams(): void;
  closeRead(): void;
  closeWrite(): void;
  readData(ofMinLength: number, maxLength: number, timeout: number, completionHandler?: (p1: Data, p2: boolean, p3: Error) => void): void;
  startSecureConnection(): void;
  write(_: Data, timeout: number, completionHandler?: (p1: Error) => void): void;
}

export class URLSessionTask extends NSObject {
  countOfBytesClientExpectsToReceive: number;
  setCountOfBytesClientExpectsToReceive(_: number);
  countOfBytesClientExpectsToSend: number;
  setCountOfBytesClientExpectsToSend(_: number);
  countOfBytesExpectedToReceive: number;
  countOfBytesExpectedToSend: number;
  countOfBytesReceived: number;
  countOfBytesSent: number;
  currentRequest: URLRequest;
  earliestBeginDate: Date;
  setEarliestBeginDate(_: Date);
  error: Error;
  originalRequest: URLRequest;
  priority: number;
  setPriority(_: number);
  response: URLResponse;
  state: URLSession.URLSessionTask.State;
  taskDescription: string;
  setTaskDescription(_: string);
  taskIdentifier: number;
  cancel(): void;
  resume(): void;
  suspend(): void;
}

interface URLSessionTaskDelegate {
  urlSession(_: URLSession, task: URLSessionTask, willBeginDelayedRequest: URLRequest, completionHandler?: (p1: URLSession.NSURLSessionDelayedRequestDisposition, p2: URLRequest) => void): void;
  urlSession(_: URLSession, taskIsWaitingForConnectivity: URLSessionTask): void;
  urlSession(_: URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: URLRequest, completionHandler?: (p1: URLRequest) => void): void;
  urlSession(_: URLSession, task: URLSessionTask, didReceive: URLAuthenticationChallenge, completionHandler?: (p1: URLSession.AuthChallengeDisposition, p2: URLCredential) => void): void;
  urlSession(_: URLSession, task: URLSessionTask, needNewBodyStream?: (p1: InputStream) => void): void;
  urlSession(_: URLSession, task: URLSessionTask, didSendBodyData: number, totalBytesSent: number, totalBytesExpectedToSend: number): void;
  urlSession(_: URLSession, task: URLSessionTask, didFinishCollecting: URLSessionTaskMetrics): void;
  urlSession(_: URLSession, task: URLSessionTask, didCompleteWithError?: Error): void;
}

export class URLSessionTaskMetrics extends NSObject {
  redirectCount: number;
  taskInterval: DateInterval;
  transactionMetrics: URLSessionTaskTransactionMetrics[];
}

export class URLSessionTaskTransactionMetrics extends NSObject {
  isCellular: boolean;
  connectEndDate: Date;
  connectStartDate: Date;
  isConstrained: boolean;
  countOfRequestBodyBytesBeforeEncoding: number;
  countOfRequestBodyBytesSent: number;
  countOfRequestHeaderBytesSent: number;
  countOfResponseBodyBytesAfterDecoding: number;
  countOfResponseBodyBytesReceived: number;
  countOfResponseHeaderBytesReceived: number;
  domainLookupEndDate: Date;
  domainLookupStartDate: Date;
  isExpensive: boolean;
  fetchStartDate: Date;
  localAddress: string;
  localPort: number;
  isMultipath: boolean;
  negotiatedTLSCipherSuite: number;
  negotiatedTLSProtocolVersion: number;
  networkProtocolName: string;
  isProxyConnection: boolean;
  remoteAddress: string;
  remotePort: number;
  request: URLRequest;
  requestEndDate: Date;
  requestStartDate: Date;
  resourceFetchType: URLSession.URLSessionTaskMetrics.ResourceFetchType;
  response: URLResponse;
  responseEndDate: Date;
  responseStartDate: Date;
  isReusedConnection: boolean;
  secureConnectionEndDate: Date;
  secureConnectionStartDate: Date;
}

export class URLSessionUploadTask extends URLSessionDataTask {
}

interface URLSessionWebSocketDelegate {
  urlSession(_: URLSession, webSocketTask: URLSessionWebSocketTask, didOpenWithProtocol?: string): void;
  urlSession(_: URLSession, webSocketTask: URLSessionWebSocketTask, didCloseWith: URLSession.URLSessionWebSocketTask.CloseCode, reason?: Data): void;
}

export class URLSessionWebSocketTask extends URLSessionTask {
  closeCode: URLSession.URLSessionWebSocketTask.CloseCode;
  closeReason: Data;
  maximumMessageSize: number;
  setMaximumMessageSize(_: number);
  // @ts-ignore 
  cancel(with_: URLSession.URLSessionWebSocketTask.CloseCode, reason?: Data): void;
  receiveMessageWithCompletionHandler(_?: (p1: NSURLSessionWebSocketMessage, p2: Error) => void): void;
  sendMessage(_: NSURLSessionWebSocketMessage, completionHandler?: (p1: Error) => void): void;
  sendPing(pongReceiveHandler?: (p1: Error) => void): void;
}

export class UUID extends NSObject {
  static createWithUUID(): UUID;
  UUIDString: string;
  getUUIDBytes(_: number): void;
  static createWithUuidBytes(_?: number): UUID;
  static createWithUuidString(_: string): UUID;
}

export class UndoManager extends NSObject {
  canRedo: boolean;
  canUndo: boolean;
  groupingLevel: number;
  groupsByEvent: boolean;
  setGroupsByEvent(_: boolean);
  levelsOfUndo: number;
  setLevelsOfUndo(_: number);
  redoActionIsDiscardable: boolean;
  redoActionName: string;
  redoMenuItemTitle: string;
  isRedoing: boolean;
  runLoopModes: string[];
  setRunLoopModes(_: string[]);
  undoActionIsDiscardable: boolean;
  undoActionName: string;
  undoMenuItemTitle: string;
  isUndoRegistrationEnabled: boolean;
  isUndoing: boolean;
  beginUndoGrouping(): void;
  disableUndoRegistration(): void;
  enableUndoRegistration(): void;
  endUndoGrouping(): void;
  prepare(withInvocationTarget: any): any;
  redo(): void;
  redoMenuTitle(forUndoActionName: string): string;
  registerUndo(withTarget: any, selector: string, object_?: any): void;
  removeAllActions(): void;
  removeAllActions(withTarget: any): void;
  setActionIsDiscardable(_: boolean): void;
  setActionName(_: string): void;
  undo(): void;
  undoMenuTitle(forUndoActionName: string): string;
  undoNestedGroup(): void;
}

export class Unit extends NSObject {
  symbol: string;
  static createWithSymbol(_: string): Unit;
}

export class UnitAcceleration extends Dimension {
  //  static createWithBaseUnit(): UnitAcceleration;
  static gravity: UnitAcceleration;
  static metersPerSecondSquared: UnitAcceleration;
}

export class UnitAngle extends Dimension {
  //  static createWithBaseUnit(): UnitAngle;
  static arcMinutes: UnitAngle;
  static arcSeconds: UnitAngle;
  static degrees: UnitAngle;
  static gradians: UnitAngle;
  static radians: UnitAngle;
  static revolutions: UnitAngle;
}

export class UnitArea extends Dimension {
  //  static createWithBaseUnit(): UnitArea;
  static acres: UnitArea;
  static ares: UnitArea;
  static hectares: UnitArea;
  static squareCentimeters: UnitArea;
  static squareFeet: UnitArea;
  static squareInches: UnitArea;
  static squareKilometers: UnitArea;
  static squareMegameters: UnitArea;
  static squareMeters: UnitArea;
  static squareMicrometers: UnitArea;
  static squareMiles: UnitArea;
  static squareMillimeters: UnitArea;
  static squareNanometers: UnitArea;
  static squareYards: UnitArea;
}

export class UnitConcentrationMass extends Dimension {
  //  static createWithBaseUnit(): UnitConcentrationMass;
  static millimolesPerLiter(withGramsPerMole: number): UnitConcentrationMass;
  static gramsPerLiter: UnitConcentrationMass;
  static milligramsPerDeciliter: UnitConcentrationMass;
}

export class UnitConverter extends NSObject {
  baseUnitValue(fromValue: number): number;
  // @ts-ignore 
  value(fromBaseUnitValue: number): number;
}

export class UnitConverterLinear extends UnitConverter {
  coefficient: number;
  constant: number;
  static createWithCoefficient(_: number): UnitConverterLinear;
  static createWithCoefficientWithConstant(_: number, constant: number): UnitConverterLinear;
}

export class UnitDispersion extends Dimension {
  //  static createWithBaseUnit(): UnitDispersion;
  static partsPerMillion: UnitDispersion;
}

export class UnitDuration extends Dimension {
  //  static createWithBaseUnit(): UnitDuration;
  static hours: UnitDuration;
  static microseconds: UnitDuration;
  static milliseconds: UnitDuration;
  static minutes: UnitDuration;
  static nanoseconds: UnitDuration;
  static picoseconds: UnitDuration;
  static seconds: UnitDuration;
}

export class UnitElectricCharge extends Dimension {
  //  static createWithBaseUnit(): UnitElectricCharge;
  static ampereHours: UnitElectricCharge;
  static coulombs: UnitElectricCharge;
  static kiloampereHours: UnitElectricCharge;
  static megaampereHours: UnitElectricCharge;
  static microampereHours: UnitElectricCharge;
  static milliampereHours: UnitElectricCharge;
}

export class UnitElectricCurrent extends Dimension {
  //  static createWithBaseUnit(): UnitElectricCurrent;
  static amperes: UnitElectricCurrent;
  static kiloamperes: UnitElectricCurrent;
  static megaamperes: UnitElectricCurrent;
  static microamperes: UnitElectricCurrent;
  static milliamperes: UnitElectricCurrent;
}

export class UnitElectricPotentialDifference extends Dimension {
  //  static createWithBaseUnit(): UnitElectricPotentialDifference;
  static kilovolts: UnitElectricPotentialDifference;
  static megavolts: UnitElectricPotentialDifference;
  static microvolts: UnitElectricPotentialDifference;
  static millivolts: UnitElectricPotentialDifference;
  static volts: UnitElectricPotentialDifference;
}

export class UnitElectricResistance extends Dimension {
  //  static createWithBaseUnit(): UnitElectricResistance;
  static kiloohms: UnitElectricResistance;
  static megaohms: UnitElectricResistance;
  static microohms: UnitElectricResistance;
  static milliohms: UnitElectricResistance;
  static ohms: UnitElectricResistance;
}

export class UnitEnergy extends Dimension {
  //  static createWithBaseUnit(): UnitEnergy;
  static calories: UnitEnergy;
  static joules: UnitEnergy;
  static kilocalories: UnitEnergy;
  static kilojoules: UnitEnergy;
  static kilowattHours: UnitEnergy;
}

export class UnitFrequency extends Dimension {
  //  static createWithBaseUnit(): UnitFrequency;
  static framesPerSecond: UnitFrequency;
  static gigahertz: UnitFrequency;
  static hertz: UnitFrequency;
  static kilohertz: UnitFrequency;
  static megahertz: UnitFrequency;
  static microhertz: UnitFrequency;
  static millihertz: UnitFrequency;
  static nanohertz: UnitFrequency;
  static terahertz: UnitFrequency;
}

export class UnitFuelEfficiency extends Dimension {
  //  static createWithBaseUnit(): UnitFuelEfficiency;
  static litersPer100Kilometers: UnitFuelEfficiency;
  static milesPerGallon: UnitFuelEfficiency;
  static milesPerImperialGallon: UnitFuelEfficiency;
}

export class UnitIlluminance extends Dimension {
  //  static createWithBaseUnit(): UnitIlluminance;
  static lux: UnitIlluminance;
}

export class UnitLength extends Dimension {
  //  static createWithBaseUnit(): UnitLength;
  static astronomicalUnits: UnitLength;
  static centimeters: UnitLength;
  static decameters: UnitLength;
  static decimeters: UnitLength;
  static fathoms: UnitLength;
  static feet: UnitLength;
  static furlongs: UnitLength;
  static hectometers: UnitLength;
  static inches: UnitLength;
  static kilometers: UnitLength;
  static lightyears: UnitLength;
  static megameters: UnitLength;
  static meters: UnitLength;
  static micrometers: UnitLength;
  static miles: UnitLength;
  static millimeters: UnitLength;
  static nanometers: UnitLength;
  static nauticalMiles: UnitLength;
  static parsecs: UnitLength;
  static picometers: UnitLength;
  static scandinavianMiles: UnitLength;
  static yards: UnitLength;
}

export class UnitMass extends Dimension {
  //  static createWithBaseUnit(): UnitMass;
  static carats: UnitMass;
  static centigrams: UnitMass;
  static decigrams: UnitMass;
  static grams: UnitMass;
  static kilograms: UnitMass;
  static metricTons: UnitMass;
  static micrograms: UnitMass;
  static milligrams: UnitMass;
  static nanograms: UnitMass;
  static ounces: UnitMass;
  static ouncesTroy: UnitMass;
  static picograms: UnitMass;
  static poundsMass: UnitMass;
  static shortTons: UnitMass;
  static slugs: UnitMass;
  static stones: UnitMass;
}

export class UnitPower extends Dimension {
  //  static createWithBaseUnit(): UnitPower;
  static femtowatts: UnitPower;
  static gigawatts: UnitPower;
  static horsepower: UnitPower;
  static kilowatts: UnitPower;
  static megawatts: UnitPower;
  static microwatts: UnitPower;
  static milliwatts: UnitPower;
  static nanowatts: UnitPower;
  static picowatts: UnitPower;
  static terawatts: UnitPower;
  static watts: UnitPower;
}

export class UnitPressure extends Dimension {
  //  static createWithBaseUnit(): UnitPressure;
  static bars: UnitPressure;
  static gigapascals: UnitPressure;
  static hectopascals: UnitPressure;
  static inchesOfMercury: UnitPressure;
  static kilopascals: UnitPressure;
  static megapascals: UnitPressure;
  static millibars: UnitPressure;
  static millimetersOfMercury: UnitPressure;
  static newtonsPerMetersSquared: UnitPressure;
  static poundsForcePerSquareInch: UnitPressure;
}

export class UnitSpeed extends Dimension {
  //  static createWithBaseUnit(): UnitSpeed;
  static kilometersPerHour: UnitSpeed;
  static knots: UnitSpeed;
  static metersPerSecond: UnitSpeed;
  static milesPerHour: UnitSpeed;
}

export class UnitTemperature extends Dimension {
  //  static createWithBaseUnit(): UnitTemperature;
  static celsius: UnitTemperature;
  static fahrenheit: UnitTemperature;
  static kelvin: UnitTemperature;
}

export class UnitVolume extends Dimension {
  //  static createWithBaseUnit(): UnitVolume;
  static acreFeet: UnitVolume;
  static bushels: UnitVolume;
  static centiliters: UnitVolume;
  static cubicCentimeters: UnitVolume;
  static cubicDecimeters: UnitVolume;
  static cubicFeet: UnitVolume;
  static cubicInches: UnitVolume;
  static cubicKilometers: UnitVolume;
  static cubicMeters: UnitVolume;
  static cubicMiles: UnitVolume;
  static cubicMillimeters: UnitVolume;
  static cubicYards: UnitVolume;
  static cups: UnitVolume;
  static deciliters: UnitVolume;
  static fluidOunces: UnitVolume;
  static gallons: UnitVolume;
  static imperialFluidOunces: UnitVolume;
  static imperialGallons: UnitVolume;
  static imperialPints: UnitVolume;
  static imperialQuarts: UnitVolume;
  static imperialTablespoons: UnitVolume;
  static imperialTeaspoons: UnitVolume;
  static kiloliters: UnitVolume;
  static liters: UnitVolume;
  static megaliters: UnitVolume;
  static metricCups: UnitVolume;
  static milliliters: UnitVolume;
  static pints: UnitVolume;
  static quarts: UnitVolume;
  static tablespoons: UnitVolume;
  static teaspoons: UnitVolume;
}

export class UserDefaults extends NSObject {
  static resetStandardUserDefaults(): void;
  volatileDomainNames: string[];
  static standardUserDefaults: UserDefaults;
  url(forKey: string): URL;
  addSuite(named: string): void;
  array(forKey: string): any[];
  bool(forKey: string): boolean;
  data(forKey: string): Data;
  dictionary(forKey: string): Map<string, any>;
  dictionaryRepresentation(): Map<string, any>;
  double(forKey: string): number;
  float(forKey: string): number;
  static createWithSuiteName(_?: string): UserDefaults;
  integer(forKey: string): number;
  object(forKey: string): any;
  objectIsForced(forKey: string): boolean;
  objectIsForced(forKey: string, inDomain: string): boolean;
  persistentDomain(forName: string): Map<string, any>;
  register(defaults: Map<string, any>): void;
  removeObject(forKey: string): void;
  removePersistentDomain(forName: string): void;
  removeSuite(named: string): void;
  removeVolatileDomain(forName: string): void;
  set(_: boolean, forKey: string): void;
  set(_: number, forKey: string): void;
  set(_: number, forKey: string): void;
  set(_: number, forKey: string): void;
  set(_?: any, forKey?: string): void;
  setPersistentDomain(_: Map<string, any>, forName: string): void;
  set(_?: URL, forKey?: string): void;
  setVolatileDomain(_: Map<string, any>, forName: string): void;
  stringArray(forKey: string): string[];
  synchronize(): boolean;
  volatileDomain(forName: string): Map<string, any>;
}

export class ValueTransformer extends NSObject {
  static allowsReverseTransformation(): boolean;
  static setValueTransformer(_?: ValueTransformer, forName?: string): void;
  static transformedValueClass(): typeof NSObject;
  static valueTransformerNames(): string[];
  reverseTransformedValue(_?: any): any;
  transformedValue(_?: any): any;
}

export class XMLDTD extends XMLNode {
  static predefinedEntityDeclaration(forName: string): XMLDTDNode;
  publicID: string;
  setPublicID(_: string);
  systemID: string;
  setSystemID(_: string);
  addChild(_: XMLNode): void;
  attributeDeclaration(forName: string, elementName: string): XMLDTDNode;
  elementDeclaration(forName: string): XMLDTDNode;
  entityDeclaration(forName: string): XMLDTDNode;
  static createWithContentsOf(options: URL, error: XMLNode.Options): XMLDTD;
  static createWithData(options: Data, error: XMLNode.Options): XMLDTD;
  insertChild(_: XMLNode, at: number): void;
  insertChildren(_: XMLNode[], at: number): void;
  notationDeclaration(forName: string): XMLDTDNode;
  removeChild(at: number): void;
  replaceChild(at: number, with_: XMLNode): void;
  setChildren(_?: XMLNode[]): void;
}

export class XMLDTDNode extends XMLNode {
  DTDKind: XMLDTDNode.DTDKind;
  setDTDKind(_: XMLDTDNode.DTDKind);
  isExternal: boolean;
  notationName: string;
  setNotationName(_: string);
  publicID: string;
  setPublicID(_: string);
  systemID: string;
  setSystemID(_: string);
  static createWithXmlString(_: string): XMLDTDNode;
}

export class XMLDocument extends XMLNode {
  static replacementClass(for_: typeof NSObject): typeof NSObject;
  DTD: XMLDTD;
  setDTD(_: XMLDTD);
  MIMEType: string;
  setMIMEType(_: string);
  XMLData: Data;
  characterEncoding: string;
  setCharacterEncoding(_: string);
  documentContentKind: XMLDocument.ContentKind;
  setDocumentContentKind(_: XMLDocument.ContentKind);
  isStandalone: boolean;
  setStandalone(_: boolean);
  xmlData(options: XMLNode.Options): Data;
  addChild(_: XMLNode): void;
  static createWithContentsOf(options: URL, error: XMLNode.Options): XMLDocument;
  static createWithData(options: Data, error: XMLNode.Options): XMLDocument;
  static createWithRootElement(_?: XMLElement): XMLDocument;
  static createWithXmlString(options: string, error: XMLNode.Options): XMLDocument;
  insertChild(_: XMLNode, at: number): void;
  insertChildren(_: XMLNode[], at: number): void;
  objectByApplyingXSLT(arguments_: Data, error?: Map<string, string>): any;
  objectByApplyingXSLTAtURL(arguments_: URL, error?: Map<string, string>): any;
  objectByApplyingXSLTString(arguments_: string, error?: Map<string, string>): any;
  removeChild(at: number): void;
  replaceChild(at: number, with_: XMLNode): void;
  rootElement(): XMLElement;
  setChildren(_?: XMLNode[]): void;
  setRootElement(_: XMLElement): void;
  validateAndReturnError(): boolean;
}

export class XMLElement extends XMLNode {
  attributes: XMLNode[];
  setAttributes(_: XMLNode[]);
  namespaces: XMLNode[];
  setNamespaces(_: XMLNode[]);
  addAttribute(_: XMLNode): void;
  addChild(_: XMLNode): void;
  addNamespace(_: XMLNode): void;
  // @ts-ignore 
  attribute(forLocalName: string, uri?: string): XMLNode;
  // @ts-ignore 
  attribute(forName: string): XMLNode;
  elements(forLocalName: string, uri?: string): XMLElement[];
  elements(forName: string): XMLElement[];
  static createWithName(_: string): XMLElement;
  static createWithNameWithUri(_: string, URI?: string): XMLElement;
  static createWithNameWithStringValue(_: string, stringValue?: string): XMLElement;
  static createWith(error: string): XMLElement;
  insertChild(_: XMLNode, at: number): void;
  insertChildren(_: XMLNode[], at: number): void;
  // @ts-ignore 
  namespace(forPrefix: string): XMLNode;
  normalizeAdjacentTextNodesPreservingCDATA(_: boolean): void;
  removeAttribute(forName: string): void;
  removeChild(at: number): void;
  removeNamespace(forPrefix: string): void;
  replaceChild(at: number, with_: XMLNode): void;
  resolveNamespace(forName: string): XMLNode;
  resolvePrefix(forNamespaceURI: string): string;
  setAttributesAs(_: Map<any, any>): void;
  setAttributesWith(_: Map<string, string>): void;
  setChildren(_?: XMLNode[]): void;
}

export class XMLNode extends NSObject {
  static dtdNode(withXMLString: string): any;
  static attribute(withName: string, uri: string, stringValue: string): any;
  static attribute(withName: string, stringValue: string): any;
  static comment(withStringValue: string): any;
  static document(): any;
  static document(withRootElement: XMLElement): any;
  static element(withName: string): any;
  static element(withName: string, uri: string): any;
  static element(withName: string, children?: XMLNode[], attributes?: XMLNode[]): any;
  static element(withName: string, stringValue: string): any;
  //  static localName(forName: string): string;
  static namespace(withName: string, stringValue: string): any;
  static predefinedNamespace(forPrefix: string): XMLNode;
  //  static prefix(forName: string): string;
  static processingInstruction(withName: string, stringValue: string): any;
  static text(withStringValue: string): any;
  URI: string;
  setURI(_: string);
  XMLString: string;
  XPath: string;
  childCount: number;
  children: XMLNode[];
  index: number;
  kind: XMLNode.Kind;
  level: number;
  localName: string;
  name: string;
  setName(_: string);
  nextNode: XMLNode;
  nextSibling: XMLNode;
  objectValue: any;
  setObjectValue(_: any);
  parent: XMLNode;
  prefix: string;
  previousNode: XMLNode;
  previousSibling: XMLNode;
  rootDocument: XMLDocument;
  stringValue: string;
  setStringValue(_: string);
  xmlString(options: XMLNode.Options): string;
  canonicalXMLStringPreservingComments(_: boolean): string;
  child(at: number): XMLNode;
  detach(): void;
  static createWithKind(_: XMLNode.Kind): XMLNode;
  static createWithKindWithOptions(_: XMLNode.Kind, options: XMLNode.Options): XMLNode;
  nodesForXPath(error: string): XMLNode[];
  objectsForXQuery(constants: string, error?: Map<string, any>): any[];
  objectsForXQuery(error: string): any[];
  setStringValue(_: string, resolvingEntities: boolean): void;
}

export class XMLParser extends NSObject {
  allowedExternalEntityURLs: Set<any>;
  setAllowedExternalEntityURLs(_: Set<any>);
  columnNumber: number;
  delegate: any;
  setDelegate(_: any);
  externalEntityResolvingPolicy: XMLParser.ExternalEntityResolvingPolicy;
  setExternalEntityResolvingPolicy(_: XMLParser.ExternalEntityResolvingPolicy);
  lineNumber: number;
  parserError: Error;
  publicID: string;
  shouldProcessNamespaces: boolean;
  setShouldProcessNamespaces(_: boolean);
  shouldReportNamespacePrefixes: boolean;
  setShouldReportNamespacePrefixes(_: boolean);
  shouldResolveExternalEntities: boolean;
  setShouldResolveExternalEntities(_: boolean);
  systemID: string;
  abortParsing(): void;
  static createWithContentsOf(_: URL): XMLParser;
  static createWithData(_: Data): XMLParser;
  static createWithStream(_: InputStream): XMLParser;
  parse(): boolean;
}

interface XMLParserDelegate {
  parser(_: XMLParser, foundNotationDeclarationWithName: string, publicID?: string, systemID?: string): void;
  parser(_: XMLParser, foundUnparsedEntityDeclarationWithName: string, publicID?: string, systemID?: string, notationName?: string): void;
  parser(_: XMLParser, foundAttributeDeclarationWithName: string, forElement: string, type?: string, defaultValue?: string): void;
  parser(_: XMLParser, foundElementDeclarationWithName: string, model: string): void;
  parser(_: XMLParser, foundInternalEntityDeclarationWithName: string, value?: string): void;
  parser(_: XMLParser, foundExternalEntityDeclarationWithName: string, publicID?: string, systemID?: string): void;
  parser(_: XMLParser, didStartElement: string, namespaceURI?: string, qualifiedName?: string, attributes?: Map<string, string>): void;
  parser(_: XMLParser, didEndElement: string, namespaceURI?: string, qualifiedName?: string): void;
  parser(_: XMLParser, didStartMappingPrefix: string, toURI: string): void;
  parser(_: XMLParser, didEndMappingPrefix: string): void;
  parser(_: XMLParser, foundCharacters: string): void;
  parser(_: XMLParser, foundIgnorableWhitespace: string): void;
  parser(_: XMLParser, foundProcessingInstructionWithTarget: string, data?: string): void;
  parser(_: XMLParser, foundComment: string): void;
  parser(_: XMLParser, foundCDATA: Data): void;
  parser(_: XMLParser, resolveExternalEntityName: string, systemID?: string): Data;
  parser(_: XMLParser, parseErrorOccurred: Error): void;
  parser(_: XMLParser, validationErrorOccurred: Error): void;
  parserDidEndDocument(_: XMLParser): void;
  parserDidStartDocument(_: XMLParser): void;
}

interface NSObjectProtocol {
  debugDescription?: string;
  description: string;
  hash: number;
  superclass: typeof NSObject;
  isProxy: boolean;
  conforms(to: any /* Protocol */): boolean;
  isEqual(_: any): boolean;
  isKindOfClass(_: typeof NSObject): boolean;
  isMemberOfClass(_: typeof NSObject): boolean;
  performSelector(_: string): any;
  performSelector(_: string, withObject: any): any;
  performSelector(_: string, withObject: any, withObject2: any): any;
  respondsToSelector(_: string): boolean;
  retainCount(): number;
  createWithSelf(): NSObjectProtocol;
}

// export function _objc_msgForward(): void;

// export function _objc_msgForward_stret(): void;

// export function _objc_realizeClassFromSwift(cls: typeof NSObject, previously: any): typeof NSObject;

// export function _objc_resolve_categories_for_class(cls: typeof NSObject): void;

// export function class_addIvar(cls: typeof NSObject, name: string | any, size: number, alignment: number, types: string | any): boolean;

// export function class_addMethod(cls: typeof NSObject, name: string, imp: () => void, types: string | any): boolean;

// export function class_addMethods(p1: typeof NSObject, p2: any): void;

// export function class_addProperty(cls: typeof NSObject, name: string | any, attributes: objc_property_attribute_t, attributeCount: number): boolean;

// export function class_addProtocol(cls: typeof NSObject, protocol: any /* Protocol */): boolean;

// export function class_conformsToProtocol(cls: typeof NSObject, protocol: any /* Protocol */): boolean;

// export function class_copyIvarList(cls: typeof NSObject, outCount: number): any;

// export function class_copyMethodList(cls: typeof NSObject, outCount: number): any;

// export function class_copyPropertyList(cls: typeof NSObject, outCount: number): any;

// export function class_copyProtocolList(cls: typeof NSObject, outCount: number): any /* Protocol */;

// export function class_createInstance(cls: typeof NSObject, extraBytes: number): any;

// export function class_createInstanceFunction(cls: typeof NSObject, extraBytes: number): any;

// export function class_getClassMethod(cls: typeof NSObject, name: string): any;

// export function class_getClassVariable(cls: typeof NSObject, name: string | any): any;

// export function class_getImageName(cls: typeof NSObject): string;

// export function class_getInstanceMethod(cls: typeof NSObject, name: string): any;

// export function class_getInstanceSize(cls: typeof NSObject): number;

// export function class_getInstanceVariable(cls: typeof NSObject, name: string | any): any;

// export function class_getIvarLayout(cls: typeof NSObject): string;

// export function class_getMethodImplementation(cls: typeof NSObject, name: string): () => void;

// export function class_getMethodImplementation_stret(cls: typeof NSObject, name: string): () => void;

// export function class_getName(cls: typeof NSObject): string;

// export function class_getProperty(cls: typeof NSObject, name: string | any): any;

// export function class_getSuperclass(cls: typeof NSObject): typeof NSObject;

// export function class_getVersion(cls: typeof NSObject): number;

// export function class_getWeakIvarLayout(cls: typeof NSObject): string;

// export function class_isMetaClass(cls: typeof NSObject): boolean;

// export function class_nextMethodList(p1: typeof NSObject, p2: any): any;

// export function class_poseAs(imposter: typeof NSObject, original: typeof NSObject): typeof NSObject;

// export function class_removeMethods(p1: typeof NSObject, p2: any): void;

// export function class_replaceMethod(cls: typeof NSObject, name: string, imp: () => void, types: string | any): () => void;

// export function class_replaceProperty(cls: typeof NSObject, name: string | any, attributes: objc_property_attribute_t, attributeCount: number): void;

// export function class_respondsToSelector(cls: typeof NSObject, sel: string): boolean;

// export function class_setIvarLayout(cls: typeof NSObject, layout: string | any): void;

// export function class_setVersion(cls: typeof NSObject, version: number): void;

// export function class_setWeakIvarLayout(cls: typeof NSObject, layout: string | any): void;

// export function imp_getBlock(anImp: () => void): any;

// export function imp_implementationWithBlock(block: any): () => void;

// export function imp_removeBlock(anImp: () => void): boolean;

// export function ivar_getName(v: any): string;

// export function ivar_getOffset(v: any): number;

// export function ivar_getTypeEncoding(v: any): string;

// export function method_copyArgumentType(m: any, index: number): string;

// export function method_copyReturnType(m: any): string;

// export function method_exchangeImplementations(m1: any, m2: any): void;

// export function method_getArgumentInfo(m: any, arg: number, type: string, offset: number): number;

// export function method_getArgumentType(m: any, index: number, dst: string | any, dst_len: number): void;

// export function method_getDescription(m: any): objc_method_description;

// export function method_getImplementation(m: any): () => void;

// export function method_getName(m: any): string;

// export function method_getNumberOfArguments(m: any): number;

// export function method_getReturnType(m: any, dst: string | any, dst_len: number): void;

// export function method_getSizeOfArguments(m: any): number;

// export function method_getTypeEncoding(m: any): string;

// export function method_invoke(): void;

// export function method_invoke_stret(): void;

// export function method_setImplementation(m: any, imp: () => void): () => void;

// export function objc_addClass(myClass: typeof NSObject): void;

// export function objc_addExceptionHandler(fn: (p1: any, p2: any) => void, context: any): number;

// export function objc_addLoadImageFunc(func: (p1: mach_header) => void): void;

// export function objc_allocateClassPair(superclass: typeof NSObject, name: string | any, extraBytes: number): typeof NSObject;

// export function objc_allocateProtocol(name: string | any): any /* Protocol */;

// export function objc_begin_catch(exc_buf: any): any;

// export function objc_constructInstance(cls: typeof NSObject, bytes: any): any;

// export function objc_copyClassList(outCount: number): typeof NSObject;

// export function objc_copyClassNamesForImage(image: string | any, outCount: number): string;

// export function objc_copyImageNames(outCount: number): string;

// export function objc_copyProtocolList(outCount: number): any /* Protocol */;

// export function objc_destructInstance(obj: any): any;

// export function objc_disposeClassPair(cls: typeof NSObject): void;

// export function objc_duplicateClass(original: typeof NSObject, name: string | any, extraBytes: number): typeof NSObject;

// export function objc_end_catch(): void;

// export function objc_enumerationMutation(obj: any): void;

// export function objc_exception_rethrow(): void;

// export function objc_exception_throw(exception: any): void;

// export function objc_getAssociatedObject(object_: any, key: any): any;

// export function objc_getClass(name: string | any): any;

// export function objc_getClassList(buffer: typeof NSObject, bufferCount: number): number;

// export function objc_getClasses(): any;

// export function objc_getFutureClass(name: string | any): typeof NSObject;

// export function objc_getMetaClass(name: string | any): any;

// export function objc_getOrigClass(name: string | any): typeof NSObject;

// export function objc_getProtocol(name: string | any): any /* Protocol */;

// export function objc_getRequiredClass(name: string | any): typeof NSObject;

// export function objc_loadModule(moduleName: string | any, class_callback: (p1: typeof NSObject, p2: any) => void, errorCode: number): number;

// export function objc_loadModules(modlist: string, errStream: any, class_callback: (p1: typeof NSObject, p2: any) => void, hdr_addr: mach_header, debug_file: string | any): number;

// export function objc_loadWeak(location: any): any;

// export function objc_lookUpClass(name: string | any): typeof NSObject;

// export function objc_msgSend(): void;

// export function objc_msgSendSuper(): void;

// export function objc_msgSendSuper_stret(): void;

// export function objc_msgSend_fp2ret(): void;

// export function objc_msgSend_fpret(): void;

// export function objc_msgSend_stret(): void;

// export function objc_msgSendv(self: any, op: string, arg_size: number, arg_frame: any): any;

// export function objc_msgSendv_stret(stretAddr: any, self: any, op: string, arg_size: number, arg_frame: any): void;

// export function objc_registerClassPair(cls: typeof NSObject): void;

// export function objc_registerProtocol(proto: any /* Protocol */): void;

// export function objc_removeAssociatedObjects(object_: any): void;

// export function objc_removeExceptionHandler(token: number): void;

// export function objc_retainedObject(obj: any): any;

// export function objc_setAssociatedObject(object_: any, key: any, value: any, policy: runtime.objc_AssociationPolicy): void;

// export function objc_setClassHandler(p1: (p1: string) => number): void;

// export function objc_setEnumerationMutationHandler(handler: (p1: any) => void): void;

// export function objc_setExceptionMatcher(fn: (p1: typeof NSObject, p2: any) => number): (p1: typeof NSObject, p2: any) => number;

// export function objc_setExceptionPreprocessor(fn: (p1: any) => any): (p1: any) => any;

// export function objc_setForwardHandler(fwd: any, fwd_stret: any): void;

// export function objc_setHook_getClass(newValue: (p1: string, p2: typeof NSObject) => boolean, outOldValue: (p1: string, p2: typeof NSObject) => boolean): void;

// export function objc_setHook_getImageName(newValue: (p1: typeof NSObject, p2: string) => boolean, outOldValue: (p1: typeof NSObject, p2: string) => boolean): void;

// export function objc_setHook_setAssociatedObject(newValue: (p1: any, p2: any, p3: any, p4: runtime.objc_AssociationPolicy) => void, outOldValue: (p1: any, p2: any, p3: any, p4: runtime.objc_AssociationPolicy) => void): void;

// export function objc_setMultithreaded(flag: boolean): void;

// export function objc_setUncaughtExceptionHandler(fn: (p1: any) => void): (p1: any) => void;

// export function objc_storeWeak(location: any, obj: any): any;

// export function objc_sync_enter(obj: any): number;

// export function objc_sync_exit(obj: any): number;

// export function objc_terminate(): void;

// export function objc_unloadModules(errorStream: any, unloadCallback: (p1: typeof NSObject, p2: any) => void): number;

// export function objc_unretainedObject(obj: any): any;

// export function objc_unretainedPointer(obj: any): any;

// export function object_copy(obj: any, size: number): any;

// export function object_dispose(obj: any): any;

// export function object_getClass(obj: any): typeof NSObject;

// export function object_getClassName(obj: any): string;

// export function object_getIndexedIvars(obj: any): any;

// export function object_getInstanceVariable(obj: any, name: string | any, outValue: any): any;

// export function object_getIvar(obj: any, ivar: any): any;

// export function object_isClass(obj: any): boolean;

// export function object_realloc(anObject: any, nBytes: number): any;

// export function object_reallocFromZone(anObject: any, nBytes: number, z: any): any;

// export function object_setClass(obj: any, cls: typeof NSObject): typeof NSObject;

// export function object_setInstanceVariable(obj: any, name: string | any, value: any): any;

// export function object_setInstanceVariableWithStrongDefault(obj: any, name: string | any, value: any): any;

// export function object_setIvar(obj: any, ivar: any, value: any): void;

// export function object_setIvarWithStrongDefault(obj: any, ivar: any, value: any): void;

// export function property_copyAttributeList(property: any, outCount: number): objc_property_attribute_t;

// export function property_copyAttributeValue(property: any, attributeName: string | any): string;

// export function property_getAttributes(property: any): string;

// export function property_getName(property: any): string;

// export function protocol_addMethodDescription(proto: any /* Protocol */, name: string, types: string | any, isRequiredMethod: boolean, isInstanceMethod: boolean): void;

// export function protocol_addProperty(proto: any /* Protocol */, name: string | any, attributes: objc_property_attribute_t, attributeCount: number, isRequiredProperty: boolean, isInstanceProperty: boolean): void;

// export function protocol_addProtocol(proto: any /* Protocol */, addition: any /* Protocol */): void;

// export function protocol_conformsToProtocol(proto: any /* Protocol */, other: any /* Protocol */): boolean;

// export function protocol_copyMethodDescriptionList(proto: any /* Protocol */, isRequiredMethod: boolean, isInstanceMethod: boolean, outCount: number): objc_method_description;

// export function protocol_copyPropertyList(proto: any /* Protocol */, outCount: number): any;

// export function protocol_copyPropertyList2(proto: any /* Protocol */, outCount: number, isRequiredProperty: boolean, isInstanceProperty: boolean): any;

// export function protocol_copyProtocolList(proto: any /* Protocol */, outCount: number): any /* Protocol */;

// export function protocol_getMethodDescription(proto: any /* Protocol */, aSel: string, isRequiredMethod: boolean, isInstanceMethod: boolean): objc_method_description;

// export function protocol_getName(proto: any /* Protocol */): string;

// export function protocol_getProperty(proto: any /* Protocol */, name: string | any, isRequiredProperty: boolean, isInstanceProperty: boolean): any;

// export function protocol_isEqual(proto: any /* Protocol */, other: any /* Protocol */): boolean;

// export function sel_getName(sel: string): string;

// export function sel_getNameFunction(sel: string): string;

// export function sel_getUid(str: string | any): string;

// export function sel_isEqual(lhs: string, rhs: string): boolean;

// export function sel_isMapped(sel: string): boolean;

// export function sel_registerName(str: string | any): string;

// export function sel_registerNameFunction(str: string | any): string;

export class IKCameraDeviceView extends NSView {
  cameraDevice: ICCameraDevice;
  setCameraDevice(_: ICCameraDevice);
  canDeleteSelectedItems: boolean;
  canDownloadSelectedItems: boolean;
  canRotateSelectedItemsLeft: boolean;
  canRotateSelectedItemsRight: boolean;
  delegate: any;
  setDelegate(_: any);
  displaysDownloadsDirectoryControl: boolean;
  setDisplaysDownloadsDirectoryControl(_: boolean);
  displaysPostProcessApplicationControl: boolean;
  setDisplaysPostProcessApplicationControl(_: boolean);
  downloadAllControlLabel: string;
  setDownloadAllControlLabel(_: string);
  downloadSelectedControlLabel: string;
  setDownloadSelectedControlLabel(_: string);
  downloadsDirectory: URL;
  setDownloadsDirectory(_: URL);
  hasDisplayModeIcon: boolean;
  setHasDisplayModeIcon(_: boolean);
  hasDisplayModeTable: boolean;
  setHasDisplayModeTable(_: boolean);
  iconSize: number;
  setIconSize(_: number);
  mode: IKCameraDeviceView.IKCameraDeviceViewDisplayMode;
  setMode(_: IKCameraDeviceView.IKCameraDeviceViewDisplayMode);
  postProcessApplication: URL;
  setPostProcessApplication(_: URL);
  transferMode: IKCameraDeviceView.IKCameraDeviceViewTransferMode;
  setTransferMode(_: IKCameraDeviceView.IKCameraDeviceViewTransferMode);
  deleteSelectedItems(_: any): void;
  downloadAllItems(_: any): void;
  downloadSelectedItems(_: any): void;
  rotateLeft(_: any): void;
  rotateRight(_: any): void;
  select(_: IndexSet, byExtendingSelection: boolean): void;
  selectedIndexes(): IndexSet;
}

export type CameraDeviceView = IKCameraDeviceView

interface IKCameraDeviceViewDelegate {
  cameraDeviceView(_: IKCameraDeviceView, didDownloadFile: ICCameraFile, location: URL, fileData: Data, error: Error): void;
  cameraDeviceView(_: IKCameraDeviceView, didEncounterError: Error): void;
  cameraDeviceViewSelectionDidChange(_: IKCameraDeviceView): void;
}

export class IKDeviceBrowserView extends NSView {
  delegate: any;
  setDelegate(_: any);
  displaysLocalCameras: boolean;
  setDisplaysLocalCameras(_: boolean);
  displaysLocalScanners: boolean;
  setDisplaysLocalScanners(_: boolean);
  displaysNetworkCameras: boolean;
  setDisplaysNetworkCameras(_: boolean);
  displaysNetworkScanners: boolean;
  setDisplaysNetworkScanners(_: boolean);
  mode: IKDeviceBrowserView.IKDeviceBrowserViewDisplayMode;
  setMode(_: IKDeviceBrowserView.IKDeviceBrowserViewDisplayMode);
  selectedDevice: ICDevice;
}

export type DeviceBrowserView = IKDeviceBrowserView

interface IKDeviceBrowserViewDelegate {
  deviceBrowserView(_: IKDeviceBrowserView, selectionDidChange: ICDevice): void;
  deviceBrowserView(_: IKDeviceBrowserView, didEncounterError: Error): void;
}

export class IKFilterBrowserPanel extends NSPanel {
  static filterBrowserPanel(withStyleMask: number): any;
  // @ts-ignore 
  beginSheet(options: Map<any, any>, modalFor: NSWindow, modalDelegate: any, didEnd: string, contextInfo: any): void;
  begin(options: Map<any, any>, modelessDelegate: any, didEnd: string, contextInfo: any): void;
  filterBrowserView(options: Map<any, any>): IKFilterBrowserView;
  filterName(): string;
  finish(_: any): void;
  runModal(options: Map<any, any>): number;
}

export class IKFilterBrowserView extends NSView {
  filterName(): string;
  setPreviewState(_: boolean): void;
}

export type FilterBrowserView = IKFilterBrowserView

interface IKFilterCustomUIProvider {
  provideView(forUIConfiguration: Map<any, any>, excludedKeys: any[]): IKFilterUIView;
}

export class IKFilterUIView extends NSView {
  static view(withFrame: CGRect, filter: CIFilter): any;
  filter(): CIFilter;
  // @ts-ignore 
  static createWithFrameWithFilter(_: CGRect, filter: CIFilter): IKFilterUIView;
  objectController(): NSObjectController;
}

export type FilterUIView = IKFilterUIView

export class IKImageBrowserCell extends NSObject {
  cellState(): IKImageBrowserCell.IKImageBrowserCellState;
  frame(): CGRect;
  imageAlignment(): NSImageCell.NSImageAlignment;
  imageContainerFrame(): CGRect;
  imageFrame(): CGRect;
  indexOfRepresentedItem(): number;
  isSelected(): boolean;
  // @ts-ignore 
  layer(forType: string): CALayer;
  opacity(): number;
  representedItem(): any;
  selectionFrame(): CGRect;
  subtitleFrame(): CGRect;
  titleFrame(): CGRect;
}

export class IKImageEditPanel extends NSPanel {
  static shared(): IKImageEditPanel;
  dataSource: any;
  setDataSource(_: any);
  filterArray: any[];
  reloadData(): void;
}

interface IKImageEditPanelDataSource {
  hasAdjustMode(): boolean;
  hasDetailsMode(): boolean;
  hasEffectsMode(): boolean;
  image(): any;
  imageProperties(): Map<any, any>;
  setImage(_: any, imageProperties: Map<any, any>): void;
  thumbnail(withMaximumSize: CGSize): any;
}

export class IKImageView extends NSView {
  autohidesScrollers: boolean;
  setAutohidesScrollers(_: boolean);
  autoresizes: boolean;
  setAutoresizes(_: boolean);
  backgroundColor: NSColor;
  setBackgroundColor(_: NSColor);
  currentToolMode: string;
  setCurrentToolMode(_: string);
  delegate: any;
  setDelegate(_: any);
  doubleClickOpensImageEditPanel: boolean;
  setDoubleClickOpensImageEditPanel(_: boolean);
  editable: boolean;
  setEditable(_: boolean);
  hasHorizontalScroller: boolean;
  setHasHorizontalScroller(_: boolean);
  hasVerticalScroller: boolean;
  setHasVerticalScroller(_: boolean);
  imageCorrection: CIFilter;
  setImageCorrection(_: CIFilter);
  rotationAngle: number;
  setRotationAngle(_: number);
  supportsDragAndDrop: boolean;
  setSupportsDragAndDrop(_: boolean);
  zoomFactor: number;
  setZoomFactor(_: number);
  convertImagePoint(toViewPoint: CGPoint): CGPoint;
  convertImageRect(toViewRect: CGRect): CGRect;
  convertPoint(toImagePoint: CGPoint): CGPoint;
  convertRect(toImageRect: CGRect): CGRect;
  crop(_: any): void;
  flipImageHorizontal(_: any): void;
  flipImageVertical(_: any): void;
  image(): any;
  imageProperties(): Map<any, any>;
  imageSize(): CGSize;
  overlay(forType: string): CALayer;
  rotateImageLeft(_: any): void;
  rotateImageRight(_: any): void;
  // @ts-ignore 
  scroll(to: CGPoint): void;
  // @ts-ignore 
  scroll(to: CGRect): void;
  setImage(_: any, imageProperties: Map<any, any>): void;
  setImageWith(_: URL): void;
  setImageZoomFactor(_: number, center: CGPoint): void;
  setOverlay(_: CALayer, forType: string): void;
  setRotationAngle(_: number, center: CGPoint): void;
  zoomImageToActualSize(_: any): void;
  zoomImageToFit(_: any): void;
  zoomImage(to: CGRect): void;
  zoomIn(_: any): void;
  zoomOut(_: any): void;
}

export class IKPictureTaker extends NSPanel {
  static pictureTaker(): IKPictureTaker;
  // @ts-ignore 
  beginSheet(for_: NSWindow, withDelegate: any, didEnd: string, contextInfo: any): void;
  begin(withDelegate: any, didEnd: string, contextInfo: any): void;
  inputImage(): NSImage;
  mirroring(): boolean;
  outputImage(): NSImage;
  popUpRecentsMenu(for_: NSView, withDelegate: any, didEnd: string, contextInfo: any): void;
  runModal(): number;
  setInputImage(_: NSImage): void;
  setMirroring(_: boolean): void;
}

export class IKSaveOptions extends NSObject {
  delegate: any;
  setDelegate(_: any);
  imageProperties: Map<any, any>;
  imageUTType: string;
  userSelection: Map<any, any>;
  addAccessoryView(to: NSSavePanel): void;
  add(to: NSView): void;
  static createWithImagePropertiesWithImageutType(_: Map<any, any>, imageUTType: string): IKSaveOptions;
}

export class IKScannerDeviceView extends NSView {
  delegate: any;
  setDelegate(_: any);
  displaysDownloadsDirectoryControl: boolean;
  setDisplaysDownloadsDirectoryControl(_: boolean);
  displaysPostProcessApplicationControl: boolean;
  setDisplaysPostProcessApplicationControl(_: boolean);
  documentName: string;
  setDocumentName(_: string);
  downloadsDirectory: URL;
  setDownloadsDirectory(_: URL);
  hasDisplayModeAdvanced: boolean;
  setHasDisplayModeAdvanced(_: boolean);
  hasDisplayModeSimple: boolean;
  setHasDisplayModeSimple(_: boolean);
  mode: IKScannerDeviceView.IKScannerDeviceViewDisplayMode;
  setMode(_: IKScannerDeviceView.IKScannerDeviceViewDisplayMode);
  overviewControlLabel: string;
  setOverviewControlLabel(_: string);
  postProcessApplication: URL;
  setPostProcessApplication(_: URL);
  scanControlLabel: string;
  setScanControlLabel(_: string);
  scannerDevice: ICScannerDevice;
  setScannerDevice(_: ICScannerDevice);
  transferMode: IKScannerDeviceView.IKScannerDeviceViewTransferMode;
  setTransferMode(_: IKScannerDeviceView.IKScannerDeviceViewTransferMode);
}

export type ScannerDeviceView = IKScannerDeviceView

interface IKScannerDeviceViewDelegate {
  scannerDeviceView(_: IKScannerDeviceView, didScanTo: URL, fileData: Data, error: Error): void;
  scannerDeviceView(_: IKScannerDeviceView, didScanTo: URL, error: Error): void;
  scannerDeviceView(_: IKScannerDeviceView, didScanTo: ICScannerBandData, scanInfo: Map<any, any>, error: Error): void;
  scannerDeviceView(_: IKScannerDeviceView, didEncounterError: Error): void;
}

export class IKSlideshow extends NSObject {
  static canExport(toApplication: string): boolean;
  static exportItem(_: any, toApplication: string): void;
  static shared(): IKSlideshow;
  autoPlayDelay: number;
  setAutoPlayDelay(_: number);
  indexOfCurrentSlideshowItem(): number;
  reloadData(): void;
  reloadItem(at: number): void;
  run(with_: any, inMode: string, options: Map<any, any>): void;
  stop(_: any): void;
}

interface IKSlideshowDataSource {
  canExportSlideshowItem(at: number, toApplication: string): boolean;
  nameOfSlideshowItem(at: number): string;
  numberOfSlideshowItems(): number;
  slideshowDidChangeCurrentIndex(_: number): void;
  slideshowDidStop(): void;
  slideshowItem(at: number): any;
  slideshowWillStart(): void;
}

interface QLPreviewItem {
  previewItemDisplayState?: any;
  previewItemTitle?: string;
  previewItemURL: URL;
}

export class QLPreviewPanel extends NSPanel {
  static shared(): QLPreviewPanel;
  static sharedPreviewPanelExists(): boolean;
  currentController: any;
  currentPreviewItem: any;
  currentPreviewItemIndex: number;
  setCurrentPreviewItemIndex(_: number);
  dataSource: any;
  setDataSource(_: any);
  delegate: any;
  setDelegate(_: any);
  displayState: any;
  setDisplayState(_: any);
  isInFullScreenMode: boolean;
  enterFullScreenMode(_: NSScreen, withOptions: Map<any, any>): boolean;
  exitFullScreenMode(options: Map<any, any>): void;
  refreshCurrentPreviewItem(): void;
  reloadData(): void;
  updateController(): void;
}

interface QLPreviewPanelDataSource {
  numberOfPreviewItems(in_: QLPreviewPanel): number;
  previewPanel(_: QLPreviewPanel, previewItemAt: number): any;
}

interface QLPreviewPanelDelegate {
  previewPanel(_: QLPreviewPanel, handle: NSEvent): boolean;
  previewPanel(_: QLPreviewPanel, sourceFrameOnScreenFor: any): CGRect;
  previewPanel(_: QLPreviewPanel, transitionImageFor: any, contentRect: CGRect): any;
}

export class QLPreviewView extends NSView {
  autostarts: boolean;
  setAutostarts(_: boolean);
  displayState: any;
  setDisplayState(_: any);
  previewItem: any;
  setPreviewItem(_: any);
  shouldCloseWithWindow: boolean;
  setShouldCloseWithWindow(_: boolean);
  close(): void;
  // @ts-ignore 
  static createWithFrameWithStyle(_: CGRect, style: QLPreviewView.QLPreviewViewStyle): QLPreviewView;
  refreshPreviewItem(): void;
}

interface QLPreviewingController {
  preparePreviewOfFile(at: URL, completionHandler?: (p1: Error) => void): void;
  preparePreviewOfSearchableItem(identifier: string, queryString?: string, completionHandler?: (p1: Error) => void): void;
}

export class QuartzFilter extends NSObject {
  apply(to: any): boolean;
  localizedName(): string;
  properties(): Map<any, any>;
  remove(from: any): void;
  url(): URL;
}

export class QuartzFilterManager extends NSObject {
  static filters(inDomains: any[]): any[];
  delegate(): any;
  filterPanel(): NSPanel;
  filterView(): QuartzFilterView;
  importFilter(_: Map<any, any>): QuartzFilter;
  select(_: QuartzFilter): boolean;
  selectedFilter(): QuartzFilter;
  setDelegate(_: any): void;
}

export class QuartzFilterView extends NSView {
  sizeToFit(): void;
}

interface CAAction {
  run(forKey: string, object_: any, arguments_?: Map<any, any>): void;
}

export class CAAnimation extends NSObject {
  static defaultValue(forKey: string): any;
  delegate: any;
  setDelegate(_: any);
  isRemovedOnCompletion: boolean;
  setRemovedOnCompletion(_: boolean);
  timingFunction: CAMediaTimingFunction;
  setTimingFunction(_: CAMediaTimingFunction);
  shouldArchiveValue(forKey: string): boolean;
}

interface CAAnimationDelegate {
  animationDidStart(_: CAAnimation): void;
  animationDidStop(_: CAAnimation, finished: boolean): void;
}

export class CAAnimationGroup extends CAAnimation {
  animations: CAAnimation[];
  setAnimations(_: CAAnimation[]);
}

export class CABasicAnimation extends CAPropertyAnimation {
  byValue: any;
  setByValue(_: any);
  fromValue: any;
  setFromValue(_: any);
  toValue: any;
  setToValue(_: any);
}

export class CAConstraint extends NSObject {
  attribute: CAConstraintLayoutManager.CAConstraintAttribute;
  offset: number;
  scale: number;
  sourceAttribute: CAConstraintLayoutManager.CAConstraintAttribute;
  sourceName: string;
  static createWithAttributeWithRelativeToWithAttribute2WithScaleWithOffset(_: CAConstraintLayoutManager.CAConstraintAttribute, relativeTo: string, attribute: CAConstraintLayoutManager.CAConstraintAttribute, scale: number, offset: number): CAConstraint;
}

export class CAConstraintLayoutManager extends NSObject {
}

// export function CACurrentMediaTime(): number;

export class CADisplayLink extends NSObject {
  duration: number;
  frameInterval: number;
  setFrameInterval(_: number);
  isPaused: boolean;
  setPaused(_: boolean);
  preferredFramesPerSecond: number;
  setPreferredFramesPerSecond(_: number);
  targetTimestamp: number;
  timestamp: number;
  add(to: RunLoop, forMode: string): void;
  invalidate(): void;
  remove(from: RunLoop, forMode: string): void;
}

export class CAEDRMetadata extends NSObject {
  static hdr10(displayInfo?: Data, contentInfo?: Data, opticalOutputScale?: number): CAEDRMetadata;
  static hdr10(minLuminance: number, maxLuminance: number, opticalOutputScale: number): CAEDRMetadata;
  static HLGMetadata: CAEDRMetadata;
}

export class CAEmitterCell extends NSObject {
  static defaultValue(forKey: string): any;
  alphaRange: number;
  setAlphaRange(_: number);
  alphaSpeed: number;
  setAlphaSpeed(_: number);
  birthRate: number;
  setBirthRate(_: number);
  blueRange: number;
  setBlueRange(_: number);
  blueSpeed: number;
  setBlueSpeed(_: number);
  color: any;
  setColor(_: any);
  contents: any;
  setContents(_: any);
  contentsRect: CGRect;
  setContentsRect(_: CGRect);
  contentsScale: number;
  setContentsScale(_: number);
  emissionLatitude: number;
  setEmissionLatitude(_: number);
  emissionLongitude: number;
  setEmissionLongitude(_: number);
  emissionRange: number;
  setEmissionRange(_: number);
  emitterCells: CAEmitterCell[];
  setEmitterCells(_: CAEmitterCell[]);
  // @ts-ignore 
  isEnabled: boolean;
  setEnabled(_: boolean);
  greenRange: number;
  setGreenRange(_: number);
  greenSpeed: number;
  setGreenSpeed(_: number);
  lifetime: number;
  setLifetime(_: number);
  lifetimeRange: number;
  setLifetimeRange(_: number);
  magnificationFilter: string;
  setMagnificationFilter(_: string);
  minificationFilter: string;
  setMinificationFilter(_: string);
  minificationFilterBias: number;
  setMinificationFilterBias(_: number);
  name: string;
  setName(_: string);
  redRange: number;
  setRedRange(_: number);
  redSpeed: number;
  setRedSpeed(_: number);
  scale: number;
  setScale(_: number);
  scaleRange: number;
  setScaleRange(_: number);
  scaleSpeed: number;
  setScaleSpeed(_: number);
  spin: number;
  setSpin(_: number);
  spinRange: number;
  setSpinRange(_: number);
  style: Map<any, any>;
  setStyle(_: Map<any, any>);
  velocity: number;
  setVelocity(_: number);
  velocityRange: number;
  setVelocityRange(_: number);
  xAcceleration: number;
  setXAcceleration(_: number);
  yAcceleration: number;
  setYAcceleration(_: number);
  zAcceleration: number;
  setZAcceleration(_: number);
  shouldArchiveValue(forKey: string): boolean;
}

export class CAEmitterLayer extends CALayer {
  birthRate: number;
  setBirthRate(_: number);
  emitterCells: CAEmitterCell[];
  setEmitterCells(_: CAEmitterCell[]);
  emitterDepth: number;
  setEmitterDepth(_: number);
  emitterMode: string;
  setEmitterMode(_: string);
  emitterPosition: CGPoint;
  setEmitterPosition(_: CGPoint);
  emitterShape: string;
  setEmitterShape(_: string);
  emitterSize: CGSize;
  setEmitterSize(_: CGSize);
  emitterZPosition: number;
  setEmitterZPosition(_: number);
  lifetime: number;
  setLifetime(_: number);
  preservesDepth: boolean;
  setPreservesDepth(_: boolean);
  renderMode: string;
  setRenderMode(_: string);
  scale: number;
  setScale(_: number);
  seed: number;
  setSeed(_: number);
  spin: number;
  setSpin(_: number);
  velocity: number;
  setVelocity(_: number);
}

export class CAGradientLayer extends CALayer {
  colors: any[];
  setColors(_: any[]);
  endPoint: CGPoint;
  setEndPoint(_: CGPoint);
  locations: number[];
  setLocations(_: number[]);
  startPoint: CGPoint;
  setStartPoint(_: CGPoint);
  type: string;
  setType(_: string);
}

export class CAKeyframeAnimation extends CAPropertyAnimation {
  biasValues: number[];
  setBiasValues(_: number[]);
  calculationMode: string;
  setCalculationMode(_: string);
  continuityValues: number[];
  setContinuityValues(_: number[]);
  keyTimes: number[];
  setKeyTimes(_: number[]);
  path: any;
  setPath(_: any);
  rotationMode: string;
  setRotationMode(_: string);
  tensionValues: number[];
  setTensionValues(_: number[]);
  timingFunctions: CAMediaTimingFunction[];
  setTimingFunctions(_: CAMediaTimingFunction[]);
  values: any[];
  setValues(_: any[]);
}

export class CALayer extends NSObject {
  static cornerCurveExpansionFactor(_: string): number;
  static defaultAction(forKey: string): any;
  static defaultValue(forKey: string): any;
  static needsDisplay(forKey: string): boolean;
  actions: Map<string, any>;
  setActions(_: Map<string, any>);
  allowsEdgeAntialiasing: boolean;
  setAllowsEdgeAntialiasing(_: boolean);
  allowsGroupOpacity: boolean;
  setAllowsGroupOpacity(_: boolean);
  anchorPoint: CGPoint;
  setAnchorPoint(_: CGPoint);
  anchorPointZ: number;
  setAnchorPointZ(_: number);
  autoresizingMask: CALayer.CAAutoresizingMask;
  setAutoresizingMask(_: CALayer.CAAutoresizingMask);
  backgroundColor: any;
  setBackgroundColor(_: any);
  backgroundFilters: any[];
  setBackgroundFilters(_: any[]);
  borderColor: any;
  setBorderColor(_: any);
  borderWidth: number;
  setBorderWidth(_: number);
  bounds: CGRect;
  setBounds(_: CGRect);
  compositingFilter: any;
  setCompositingFilter(_: any);
  constraints: CAConstraint[];
  setConstraints(_: CAConstraint[]);
  contents: any;
  setContents(_: any);
  contentsCenter: CGRect;
  setContentsCenter(_: CGRect);
  contentsFormat: string;
  setContentsFormat(_: string);
  contentsGravity: string;
  setContentsGravity(_: string);
  contentsRect: CGRect;
  setContentsRect(_: CGRect);
  contentsScale: number;
  setContentsScale(_: number);
  cornerCurve: string;
  setCornerCurve(_: string);
  cornerRadius: number;
  setCornerRadius(_: number);
  delegate: any;
  setDelegate(_: any);
  isDoubleSided: boolean;
  setDoubleSided(_: boolean);
  drawsAsynchronously: boolean;
  setDrawsAsynchronously(_: boolean);
  edgeAntialiasingMask: CALayer.CAEdgeAntialiasingMask;
  setEdgeAntialiasingMask(_: CALayer.CAEdgeAntialiasingMask);
  filters: any[];
  setFilters(_: any[]);
  frame: CGRect;
  setFrame(_: CGRect);
  isGeometryFlipped: boolean;
  setGeometryFlipped(_: boolean);
  isHidden: boolean;
  setHidden(_: boolean);
  layoutManager: any;
  setLayoutManager(_: any);
  magnificationFilter: string;
  setMagnificationFilter(_: string);
  mask: CALayer;
  setMask(_: CALayer);
  maskedCorners: CALayer.CACornerMask;
  setMaskedCorners(_: CALayer.CACornerMask);
  masksToBounds: boolean;
  setMasksToBounds(_: boolean);
  minificationFilter: string;
  setMinificationFilter(_: string);
  minificationFilterBias: number;
  setMinificationFilterBias(_: number);
  name: string;
  setName(_: string);
  needsDisplayOnBoundsChange: boolean;
  setNeedsDisplayOnBoundsChange(_: boolean);
  opacity: number;
  setOpacity(_: number);
  isOpaque: boolean;
  setOpaque(_: boolean);
  position: CGPoint;
  setPosition(_: CGPoint);
  rasterizationScale: number;
  setRasterizationScale(_: number);
  shadowColor: any;
  setShadowColor(_: any);
  shadowOffset: CGSize;
  setShadowOffset(_: CGSize);
  shadowOpacity: number;
  setShadowOpacity(_: number);
  shadowPath: any;
  setShadowPath(_: any);
  shadowRadius: number;
  setShadowRadius(_: number);
  shouldRasterize: boolean;
  setShouldRasterize(_: boolean);
  style: Map<any, any>;
  setStyle(_: Map<any, any>);
  sublayerTransform: CATransform3D;
  setSublayerTransform(_: CATransform3D);
  sublayers: CALayer[];
  setSublayers(_: CALayer[]);
  superlayer: CALayer;
  transform: CATransform3D;
  setTransform(_: CATransform3D);
  visibleRect: CGRect;
  zPosition: number;
  setZPosition(_: number);
  action(forKey: string): any;
  add(_: CAAnimation, forKey?: string): void;
  addConstraint(_: CAConstraint): void;
  addSublayer(_: CALayer): void;
  affineTransform(): CGAffineTransform;
  animation(forKey: string): CAAnimation;
  animationKeys(): string[];
  contains(_: CGPoint): boolean;
  contentsAreFlipped(): boolean;
  convert(_: CGPoint, from?: CALayer): CGPoint;
  convert(_: CGPoint, to?: CALayer): CGPoint;
  convert(_: CGRect, from?: CALayer): CGRect;
  convert(_: CGRect, to?: CALayer): CGRect;
  convertTime(_: number, from?: CALayer): number;
  convertTime(_: number, to?: CALayer): number;
  display(): void;
  displayIfNeeded(): void;
  draw(in_: any): void;
  hitTest(_: CGPoint): CALayer;
  static createWithLayer(_: any): CALayer;
  insertSublayer(_: CALayer, above?: CALayer): void;
  insertSublayer(_: CALayer, at: number): void;
  insertSublayer(_: CALayer, below?: CALayer): void;
  layoutIfNeeded(): void;
  layoutSublayers(): void;
  createWithModelLayer(): CALayer;
  needsDisplay(): boolean;
  needsLayout(): boolean;
  preferredFrameSize(): CGSize;
  createWithPresentationLayer(): CALayer;
  removeAllAnimations(): void;
  removeAnimation(forKey: string): void;
  removeFromSuperlayer(): void;
  render(in_: any): void;
  replaceSublayer(_: CALayer, with_: CALayer): void;
  resizeSublayers(withOldSize: CGSize): void;
  resize(withOldSuperlayerSize: CGSize): void;
  scroll(_: CGPoint): void;
  scrollRectToVisible(_: CGRect): void;
  setAffineTransform(_: CGAffineTransform): void;
  setNeedsDisplay(): void;
  setNeedsDisplay(_: CGRect): void;
  setNeedsLayout(): void;
  shouldArchiveValue(forKey: string): boolean;
}

interface CALayerDelegate {
  action(for_: CALayer, forKey: string): any;
  display(_: CALayer): void;
  draw(_: CALayer, in_: any): void;
  layerWillDraw(_: CALayer): void;
  layoutSublayers(of: CALayer): void;
}

interface CALayoutManager {
  invalidateLayout(of: CALayer): void;
  layoutSublayers(of: CALayer): void;
  preferredSize(of: CALayer): CGSize;
}

interface CAMediaTiming {
  autoreverses: boolean;
  setAutoreverses(_: boolean);
  beginTime: number;
  setBeginTime(_: number);
  duration: number;
  setDuration(_: number);
  fillMode: string;
  setFillMode(_: string);
  repeatCount: number;
  setRepeatCount(_: number);
  repeatDuration: number;
  setRepeatDuration(_: number);
  speed: number;
  setSpeed(_: number);
  timeOffset: number;
  setTimeOffset(_: number);
}

export class CAMediaTimingFunction extends NSObject {
  static createWithFunctionWithControlPoints(_: number, _2: number, _3: number, _4: number): CAMediaTimingFunction;
  getControlPoint(at: number, values: number): void;
  static createWithControlPoints(_: number, _2: number, _3: number, _4: number): CAMediaTimingFunction;
}

interface CAMetalDrawable {
  layer: CAMetalLayer;
  texture: any;
}

export class CAMetalLayer extends CALayer {
  EDRMetadata: CAEDRMetadata;
  setEDRMetadata(_: CAEDRMetadata);
  allowsNextDrawableTimeout: boolean;
  setAllowsNextDrawableTimeout(_: boolean);
  colorspace: any;
  setColorspace(_: any);
  device: any;
  setDevice(_: any);
  displaySyncEnabled: boolean;
  setDisplaySyncEnabled(_: boolean);
  drawableSize: CGSize;
  setDrawableSize(_: CGSize);
  framebufferOnly: boolean;
  setFramebufferOnly(_: boolean);
  maximumDrawableCount: number;
  setMaximumDrawableCount(_: number);
  pixelFormat: MTLPixelFormat.MTLPixelFormat;
  setPixelFormat(_: MTLPixelFormat.MTLPixelFormat);
  preferredDevice: any;
  presentsWithTransaction: boolean;
  setPresentsWithTransaction(_: boolean);
  wantsExtendedDynamicRangeContent: boolean;
  setWantsExtendedDynamicRangeContent(_: boolean);
  nextDrawable(): any;
}

export class CAPropertyAnimation extends CAAnimation {
  isAdditive: boolean;
  setAdditive(_: boolean);
  isCumulative: boolean;
  setCumulative(_: boolean);
  keyPath: string;
  setKeyPath(_: string);
  valueFunction: CAValueFunction;
  setValueFunction(_: CAValueFunction);
}

export class CARemoteLayerClient extends NSObject {
  clientId: number;
  static createWithServerPort(_: number): CARemoteLayerClient;
  invalidate(): void;
}

export class CARemoteLayerServer extends NSObject {
  static shared(): CARemoteLayerServer;
  serverPort: number;
}

export class CARenderer extends NSObject {
  bounds: CGRect;
  setBounds(_: CGRect);
  addUpdate(_: CGRect): void;
  beginFrame(atTime: number, timeStamp?: CVTimeStamp): void;
  endFrame(): void;
  nextFrameTime(): number;
  render(): void;
  setDestination(_: any): void;
  updateBounds(): CGRect;
}

export class CAReplicatorLayer extends CALayer {
  instanceAlphaOffset: number;
  setInstanceAlphaOffset(_: number);
  instanceBlueOffset: number;
  setInstanceBlueOffset(_: number);
  instanceColor: any;
  setInstanceColor(_: any);
  instanceCount: number;
  setInstanceCount(_: number);
  instanceDelay: number;
  setInstanceDelay(_: number);
  instanceGreenOffset: number;
  setInstanceGreenOffset(_: number);
  instanceRedOffset: number;
  setInstanceRedOffset(_: number);
  instanceTransform: CATransform3D;
  setInstanceTransform(_: CATransform3D);
  preservesDepth: boolean;
  setPreservesDepth(_: boolean);
}

export class CAScrollLayer extends CALayer {
  scrollMode: string;
  setScrollMode(_: string);
  // @ts-ignore 
  scroll(to: CGPoint): void;
  // @ts-ignore 
  scroll(to: CGRect): void;
}

export class CAShapeLayer extends CALayer {
  fillColor: any;
  setFillColor(_: any);
  fillRule: string;
  setFillRule(_: string);
  lineCap: string;
  setLineCap(_: string);
  lineDashPattern: number[];
  setLineDashPattern(_: number[]);
  lineDashPhase: number;
  setLineDashPhase(_: number);
  lineJoin: string;
  setLineJoin(_: string);
  lineWidth: number;
  setLineWidth(_: number);
  miterLimit: number;
  setMiterLimit(_: number);
  path: any;
  setPath(_: any);
  strokeColor: any;
  setStrokeColor(_: any);
  strokeEnd: number;
  setStrokeEnd(_: number);
  strokeStart: number;
  setStrokeStart(_: number);
}

export class CASpringAnimation extends CABasicAnimation {
  damping: number;
  setDamping(_: number);
  initialVelocity: number;
  setInitialVelocity(_: number);
  mass: number;
  setMass(_: number);
  settlingDuration: number;
  stiffness: number;
  setStiffness(_: number);
}

export class CATextLayer extends CALayer {
  alignmentMode: string;
  setAlignmentMode(_: string);
  allowsFontSubpixelQuantization: boolean;
  setAllowsFontSubpixelQuantization(_: boolean);
  font: any;
  setFont(_: any);
  fontSize: number;
  setFontSize(_: number);
  foregroundColor: any;
  setForegroundColor(_: any);
  truncationMode: string;
  setTruncationMode(_: string);
  isWrapped: boolean;
  setWrapped(_: boolean);
}

export class CATiledLayer extends CALayer {
  static fadeDuration(): number;
  levelsOfDetail: number;
  setLevelsOfDetail(_: number);
  levelsOfDetailBias: number;
  setLevelsOfDetailBias(_: number);
  tileSize: CGSize;
  setTileSize(_: CGSize);
}

export class CATransaction extends NSObject {
  static animationDuration(): number;
  static animationTimingFunction(): CAMediaTimingFunction;
  static begin(): void;
  static commit(): void;
  static completionBlock(): () => void;
  static disableActions(): boolean;
  static flush(): void;
  static lock(): void;
  static setAnimationDuration(_: number): void;
  static setAnimationTimingFunction(_?: CAMediaTimingFunction): void;
  static setCompletionBlock(_?: () => void): void;
  static setDisableActions(_: boolean): void;
  static setValue(_?: any, forKey?: string): void;
  static unlock(): void;
  static value(forKey: string): any;
}

// export function CATransform3DConcat(a: CATransform3D, b: CATransform3D): CATransform3D;

// export function CATransform3DEqualToTransform(a: CATransform3D, b: CATransform3D): boolean;

// export function CATransform3DGetAffineTransform(t: CATransform3D): CGAffineTransform;

// export function CATransform3DInvert(t: CATransform3D): CATransform3D;

// export function CATransform3DIsAffine(t: CATransform3D): boolean;

// export function CATransform3DIsIdentity(t: CATransform3D): boolean;

// export function CATransform3DMakeAffineTransform(m: CGAffineTransform): CATransform3D;

// export function CATransform3DMakeRotation(angle: number, x: number, y: number, z: number): CATransform3D;

// export function CATransform3DMakeScale(sx: number, sy: number, sz: number): CATransform3D;

// export function CATransform3DMakeTranslation(tx: number, ty: number, tz: number): CATransform3D;

// export function CATransform3DRotate(t: CATransform3D, angle: number, x: number, y: number, z: number): CATransform3D;

// export function CATransform3DScale(t: CATransform3D, sx: number, sy: number, sz: number): CATransform3D;

// export function CATransform3DTranslate(t: CATransform3D, tx: number, ty: number, tz: number): CATransform3D;

export class CATransformLayer extends CALayer {
}

export class CATransition extends CAAnimation {
  endProgress: number;
  setEndProgress(_: number);
  filter: any;
  setFilter(_: any);
  startProgress: number;
  setStartProgress(_: number);
  subtype: string;
  setSubtype(_: string);
  type: string;
  setType(_: string);
}

export class CAValueFunction extends NSObject {
  name: string;
}

namespace AE {
      export enum AEDataModel { }
      }
export namespace AUGenericView {
  export enum AUGenericViewDisplayFlags {
    TitleDisplayFlag = 1,
    PropertiesDisplayFlag = 2,
    ParametersDisplayFlag = 4
  }

}

export namespace AUPannerView {
}

export namespace AVAsset {
  export enum AVAssetReferenceRestrictions {
    ForbidNone = 0,
    ForbidRemoteReferenceToLocal = 1,
    ForbidLocalReferenceToRemote = 2,
    ForbidCrossSiteReference = 4,
    ForbidLocalReferenceToLocal = 8,
    ForbidAll = 65535,
    DefaultPolicy = 2
  }

}

export namespace AVAssetCache {
}

export namespace AVAssetExportSession {
  export enum Status {
    Unknown = 0,
    Waiting = 1,
    Exporting = 2,
    Completed = 3,
    Failed = 4,
    Cancelled = 5
  }

}

export namespace AVAssetImageGenerator {
  export enum Result {
    Succeeded = 0,
    Failed = 1,
    Cancelled = 2
  }

}

export namespace AVAssetReader {
  export enum Status {
    Unknown = 0,
    Reading = 1,
    Completed = 2,
    Failed = 3,
    Cancelled = 4
  }

}

export namespace AVAssetReaderOutput {
}

export namespace AVAssetResourceLoader {
}

export namespace AVAssetTrack {
}

export namespace AVAssetTrackGroup {
}

export namespace AVAssetTrackSegment {
}

export namespace AVAssetWriter {
  export enum Status {
    Unknown = 0,
    Writing = 1,
    Completed = 2,
    Failed = 3,
    Cancelled = 4
  }

}

export namespace AVAssetWriterInput {
}

export namespace AVAsynchronousKeyValueLoading {
  export enum AVKeyValueStatus {
    Unknown = 0,
    Loading = 1,
    Loaded = 2,
    Failed = 3,
    Cancelled = 4
  }

}

export namespace AVAudioBuffer {
}

export namespace AVAudioChannelLayout {
}

export namespace AVAudioConnectionPoint {
}

export namespace AVAudioConverter {
  export enum AVAudioConverterInputStatus {
    _HaveData = 0,
    _NoDataNow = 1,
    _EndOfStream = 2
  }

  export enum AVAudioConverterOutputStatus {
    _HaveData = 0,
    _InputRanDry = 1,
    _EndOfStream = 2,
    _Error = 3
  }

  export enum AVAudioConverterPrimeMethod {
    _Pre = 0,
    _Normal = 1,
    _None = 2
  }

}

export namespace AVAudioEngine {
  export enum AVAudioEngineManualRenderingError {
    InvalidMode = -80800,
    Initialized = -80801,
    NotRunning = -80802
  }

  export enum AVAudioEngineManualRenderingMode {
    Offline = 0,
    Realtime = 1
  }

  export enum AVAudioEngineManualRenderingStatus {
    Error = -1,
    Success = 0,
    InsufficientDataFromInputNode = 1,
    CannotDoInCurrentContext = 2
  }

}

export namespace AVAudioEnvironmentNode {
  export enum AVAudioEnvironmentDistanceAttenuationModel {
    Exponential = 1,
    Inverse = 2,
    Linear = 3
  }

  export enum AVAudioEnvironmentOutputType {
    Auto = 0,
    Headphones = 1,
    BuiltInSpeakers = 2,
    ExternalSpeakers = 3
  }

}

export namespace AVAudioFile {
}

export namespace AVAudioFormat {
  export enum AVAudioCommonFormat {
    OtherFormat = 0,
    PCMFormatFloat32 = 1,
    PCMFormatFloat64 = 2,
    PCMFormatInt16 = 3,
    PCMFormatInt32 = 4
  }

}

export namespace AVAudioIONode {
}

export namespace AVAudioMix {
}

export namespace AVAudioMixerNode {
}

export namespace AVAudioMixing {
  export enum AVAudio3DMixingPointSourceInHeadMode {
    eMono = 0,
    eBypass = 1
  }

  export enum AVAudio3DMixingRenderingAlgorithm {
    mEqualPowerPanning = 0,
    mSphericalHead = 1,
    mHRTF = 2,
    mSoundField = 3,
    mStereoPassThrough = 5,
    mHRTFHQ = 6,
    mAuto = 7
  }

  export enum AVAudio3DMixingSourceMode {
    eSpatializeIfMono = 0,
    eBypass = 1,
    ePointSource = 2,
    eAmbienceBed = 3
  }

}

export namespace AVAudioNode {
}

export namespace AVAudioPlayer {
}

export namespace AVAudioPlayerNode {
  export enum AVAudioPlayerNodeBufferOptions {
    Loops = 1,
    Interrupts = 2,
    InterruptsAtLoop = 4
  }

  export enum AVAudioPlayerNodeCompletionCallbackType {
    Consumed = 0,
    Rendered = 1,
    PlayedBack = 2
  }

}

export namespace AVAudioRecorder {
}

export namespace AVAudioSequencer {
  export enum AVMusicSequenceLoadOptions {
    _PreserveTracks = 0,
    _ChannelsToTracks = 1
  }

  export enum AVMusicTrackLoopCount {
    AVMusicTrackLoopCountForever = -1
  }

}

export namespace AVAudioSession {
  export enum AVAudioSessionActivationOptions {
    AVAudioSessionActivationOptionNone = 0
  }

  export enum CategoryOptions {
    MixWithOthers = 1,
    DuckOthers = 2,
    AllowBluetooth = 4,
    DefaultToSpeaker = 8,
    InterruptSpokenAudioAndMixWithOthers = 17,
    AllowBluetoothA2DP = 32,
    AllowAirPlay = 64
  }

  export enum ErrorCode {
    None = 0,
    MediaServicesFailed = 1836282486,
    IsBusy = 560030580,
    IncompatibleCategory = 560161140,
    CannotInterruptOthers = 560557684,
    MissingEntitlement = 1701737535,
    SiriIsRecording = 1936290409,
    CannotStartPlaying = 561015905,
    CannotStartRecording = 561145187,
    BadParam = -50,
    InsufficientPriority = 561017449,
    ResourceNotAvailable = 561145203,
    Unspecified = 2003329396,
    ExpiredSession = 561210739,
    SessionNotActive = 1768841571
  }

  export enum IOType {
    NotSpecified = 0,
    Aggregated = 1
  }

  export enum InterruptionOptions {
    AVAudioSessionInterruptionOptionShouldResume = 1
  }

  export enum InterruptionType {
    Began = 1,
    Ended = 0
  }

  export enum PortOverride {
    None = 0,
    Speaker = 1936747378
  }

  export enum PromptStyle {
    None = 1852796517,
    Short = 1936224884,
    Normal = 1852992876
  }

  export enum RecordPermission {
    Undetermined = 1970168948,
    Denied = 1684369017,
    Granted = 1735552628
  }

  export enum RouteChangeReason {
    Unknown = 0,
    NewDeviceAvailable = 1,
    OldDeviceUnavailable = 2,
    CategoryChange = 3,
    Override = 4,
    WakeFromSleep = 6,
    NoSuitableRouteForCategory = 7,
    RouteConfigurationChange = 8
  }

  export enum RouteSharingPolicy {
    Default = 0,
    LongFormAudio = 1,
    LongForm = 1,
    Independent = 2,
    LongFormVideo = 3
  }

  export enum SetActiveOptions {
    AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation = 1
  }

  export enum SilenceSecondaryAudioHintType {
    Begin = 1,
    End = 0
  }

}

export namespace AVAudioSettings {
  export enum AVAudioQuality {
    Min = 0,
    Low = 32,
    Medium = 64,
    High = 96,
    Max = 127
  }

}

export namespace AVAudioTime {
}

export namespace AVAudioUnit {
}

export namespace AVAudioUnitComponent {
}

export namespace AVAudioUnitDelay {
}

export namespace AVAudioUnitDistortion {
  export enum AVAudioUnitDistortionPreset {
    DrumsBitBrush = 0,
    DrumsBufferBeats = 1,
    DrumsLoFi = 2,
    MultiBrokenSpeaker = 3,
    MultiCellphoneConcert = 4,
    MultiDecimated1 = 5,
    MultiDecimated2 = 6,
    MultiDecimated3 = 7,
    MultiDecimated4 = 8,
    MultiDistortedFunk = 9,
    MultiDistortedCubed = 10,
    MultiDistortedSquared = 11,
    MultiEcho1 = 12,
    MultiEcho2 = 13,
    MultiEchoTight1 = 14,
    MultiEchoTight2 = 15,
    MultiEverythingIsBroken = 16,
    SpeechAlienChatter = 17,
    SpeechCosmicInterference = 18,
    SpeechGoldenPi = 19,
    SpeechRadioTower = 20,
    SpeechWaves = 21
  }

}

export namespace AVAudioUnitEQ {
  export enum AVAudioUnitEQFilterType {
    Parametric = 0,
    LowPass = 1,
    HighPass = 2,
    ResonantLowPass = 3,
    ResonantHighPass = 4,
    BandPass = 5,
    BandStop = 6,
    LowShelf = 7,
    HighShelf = 8,
    ResonantLowShelf = 9,
    ResonantHighShelf = 10
  }

}

export namespace AVAudioUnitEffect {
}

export namespace AVAudioUnitGenerator {
}

export namespace AVAudioUnitMIDIInstrument {
}

export namespace AVAudioUnitReverb {
  export enum AVAudioUnitReverbPreset {
    SmallRoom = 0,
    MediumRoom = 1,
    LargeRoom = 2,
    MediumHall = 3,
    LargeHall = 4,
    Plate = 5,
    MediumChamber = 6,
    LargeChamber = 7,
    Cathedral = 8,
    LargeRoom2 = 9,
    MediumHall2 = 10,
    MediumHall3 = 11,
    LargeHall2 = 12
  }

}

export namespace AVAudioUnitSampler {
}

export namespace AVAudioUnitTimeEffect {
}

export namespace AVAudioUnitTimePitch {
}

export namespace AVAudioUnitVarispeed {
}

export namespace AVCameraCalibrationData {
}

export namespace AVCaptureAudioDataOutput {
}

export namespace AVCaptureAudioPreviewOutput {
}

export namespace AVCaptureDataOutputSynchronizer {
}

export namespace AVCaptureDepthDataOutput {
}

export namespace AVCaptureDevice {
  export class DiscoverySession extends NSObject {
    static createWithDiscoverySessionWithDeviceTypesMediaTypeWithPosition(_: string[], mediaType?: string, position?: AVCaptureDevice.Position): AVCaptureDevice.DiscoverySession;
    devices: AVCaptureDevice[];
  }
  
  export class Format extends NSObject {
    autoFocusSystem: AVCaptureDevice.Format.AutoFocusSystem;
    formatDescription: any;
    mediaType: string;
    supportedColorSpaces: number[];
    videoSupportedFrameRateRanges: AVFrameRateRange[];
  }
  
  export class InputSource extends NSObject {
    inputSourceID: string;
    localizedName: string;
  }
  
  export class SystemPressureState extends NSObject {
    factors: AVCaptureDevice.SystemPressureState.Factors;
    level: string;
  }
  
  export namespace Format {
    export enum AutoFocusSystem {
      None = 0,
      ContrastDetection = 1,
      PhaseDetection = 2
    }
  }

  export namespace SystemPressureState {
    export enum Factors {
      None = 0,
      SystemTemperature = 1,
      PeakPower = 2,
      DepthModuleTemperature = 4
    }
  }

  export enum AVAuthorizationStatus {
    NotDetermined = 0,
    Restricted = 1,
    Denied = 2,
    Authorized = 3
  }

  export enum AVCaptureColorSpace {
    _sRGB = 0,
    _P3_D65 = 1
  }

  export enum AVCaptureVideoStabilizationMode {
    Off = 0,
    Standard = 1,
    Cinematic = 2,
    CinematicExtended = 3,
    Auto = -1
  }

  export enum AutoFocusRangeRestriction {
    None = 0,
    Near = 1,
    Far = 2
  }

  export enum ExposureMode {
    Locked = 0,
    AutoExpose = 1,
    ContinuousAutoExposure = 2,
    Custom = 3
  }

  export enum FlashMode {
    Off = 0,
    On = 1,
    Auto = 2
  }

  export enum FocusMode {
    Locked = 0,
    AutoFocus = 1,
    ContinuousAutoFocus = 2
  }

  export enum LensStabilizationStatus {
    Unsupported = 0,
    Off = 1,
    Active = 2,
    OutOfRange = 3,
    Unavailable = 4
  }

  export enum Position {
    Unspecified = 0,
    Back = 1,
    Front = 2
  }

  export enum TorchMode {
    Off = 0,
    On = 1,
    Auto = 2
  }

  export enum TransportControlsPlaybackMode {
    NotPlayingMode = 0,
    PlayingMode = 1
  }

  export enum WhiteBalanceMode {
    Locked = 0,
    AutoWhiteBalance = 1,
    ContinuousAutoWhiteBalance = 2
  }

}

export namespace AVCaptureFileOutput {
}

export namespace AVCaptureInput {
  export class Port extends NSObject {
    clock: any;
    isEnabled: boolean;
    setEnabled(_: boolean);
    formatDescription: any;
    input: AVCaptureInput;
    mediaType: string;
  }
  
}

export namespace AVCaptureMetadataOutput {
}

export namespace AVCaptureOutputBase {
  export namespace AVCaptureOutput {
    export enum DataDroppedReason {
      None = 0,
      LateData = 1,
      OutOfBuffers = 2,
      Discontinuity = 3
    }
  }

}

export namespace AVCapturePhotoOutput {
  export namespace AVCaptureDevice {
    export enum AVAuthorizationStatus {
      NotDetermined = 0,
      Restricted = 1,
      Denied = 2,
      Authorized = 3
    }
    export enum AVCaptureColorSpace {
      _sRGB = 0,
      _P3_D65 = 1
    }
    export enum AVCaptureVideoStabilizationMode {
      Off = 0,
      Standard = 1,
      Cinematic = 2,
      CinematicExtended = 3,
      Auto = -1
    }
    export enum AutoFocusRangeRestriction {
      None = 0,
      Near = 1,
      Far = 2
    }
    export enum ExposureMode {
      Locked = 0,
      AutoExpose = 1,
      ContinuousAutoExposure = 2,
      Custom = 3
    }
    export enum FlashMode {
      Off = 0,
      On = 1,
      Auto = 2
    }
    export enum FocusMode {
      Locked = 0,
      AutoFocus = 1,
      ContinuousAutoFocus = 2
    }
    export enum LensStabilizationStatus {
      Unsupported = 0,
      Off = 1,
      Active = 2,
      OutOfRange = 3,
      Unavailable = 4
    }
    export enum Position {
      Unspecified = 0,
      Back = 1,
      Front = 2
    }
    export enum TorchMode {
      Off = 0,
      On = 1,
      Auto = 2
    }
    export enum TransportControlsPlaybackMode {
      NotPlayingMode = 0,
      PlayingMode = 1
    }
    export enum WhiteBalanceMode {
      Locked = 0,
      AutoWhiteBalance = 1,
      ContinuousAutoWhiteBalance = 2
    }
  }

  export enum QualityPrioritization {
    Speed = 1,
    Balanced = 2,
    Quality = 3
  }

}

export namespace AVCaptureSession {
  export enum AVCaptureVideoOrientation {
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeRight = 3,
    LandscapeLeft = 4
  }

  export enum AVVideoFieldMode {
    Both = 0,
    TopOnly = 1,
    BottomOnly = 2,
    Deinterlace = 3
  }

  export enum InterruptionReason {
    VideoDeviceNotAvailableInBackground = 1,
    AudioDeviceInUseByAnotherClient = 2,
    VideoDeviceInUseByAnotherClient = 3,
    VideoDeviceNotAvailableWithMultipleForegroundApps = 4,
    VideoDeviceNotAvailableDueToSystemPressure = 5
  }

}

export namespace AVCaptureVideoDataOutput {
}

export namespace AVCaptureVideoPreviewLayer {
}

export namespace AVCaptureView {
  export enum AVCaptureViewControlsStyle {
    Inline = 0,
    Floating = 1,
    InlineDeviceSelection = 2,
    Default = 0
  }

}

export namespace AVComposition {
}

export namespace AVCompositionTrack {
}

export namespace AVCompositionTrackSegment {
}

export namespace AVContentKeySession {
  export namespace AVContentKeyRequest {
    export enum Status {
      RequestingResponse = 0,
      ReceivedResponse = 1,
      Renewed = 2,
      Retried = 3,
      Cancelled = 4,
      Failed = 5
    }
  }

}

export namespace AVDepthData {
  export enum Accuracy {
    Relative = 0,
    Absolute = 1
  }

  export enum Quality {
    Low = 0,
    High = 1
  }

}

export namespace AVError {
  export enum AVError {
    Unknown = -11800,
    OutOfMemory = -11801,
    SessionNotRunning = -11803,
    DeviceAlreadyUsedByAnotherSession = -11804,
    NoDataCaptured = -11805,
    SessionConfigurationChanged = -11806,
    DiskFull = -11807,
    DeviceWasDisconnected = -11808,
    MediaChanged = -11809,
    MaximumDurationReached = -11810,
    MaximumFileSizeReached = -11811,
    MediaDiscontinuity = -11812,
    MaximumNumberOfSamplesForFileFormatReached = -11813,
    DeviceNotConnected = -11814,
    DeviceInUseByAnotherApplication = -11815,
    DeviceLockedForConfigurationByAnotherProcess = -11817,
    ExportFailed = -11820,
    DecodeFailed = -11821,
    InvalidSourceMedia = -11822,
    FileAlreadyExists = -11823,
    CompositionTrackSegmentsNotContiguous = -11824,
    InvalidCompositionTrackSegmentDuration = -11825,
    InvalidCompositionTrackSegmentSourceStartTime = -11826,
    InvalidCompositionTrackSegmentSourceDuration = -11827,
    FileFormatNotRecognized = -11828,
    FileFailedToParse = -11829,
    MaximumStillImageCaptureRequestsExceeded = -11830,
    ContentIsProtected = -11831,
    NoImageAtTime = -11832,
    DecoderNotFound = -11833,
    EncoderNotFound = -11834,
    ContentIsNotAuthorized = -11835,
    ApplicationIsNotAuthorized = -11836,
    OperationNotSupportedForAsset = -11838,
    DecoderTemporarilyUnavailable = -11839,
    EncoderTemporarilyUnavailable = -11840,
    InvalidVideoComposition = -11841,
    ReferenceForbiddenByReferencePolicy = -11842,
    InvalidOutputURLPathExtension = -11843,
    ScreenCaptureFailed = -11844,
    DisplayWasDisabled = -11845,
    TorchLevelUnavailable = -11846,
    IncompatibleAsset = -11848,
    FailedToLoadMediaData = -11849,
    ServerIncorrectlyConfigured = -11850,
    ApplicationIsNotAuthorizedToUseDevice = -11852,
    FailedToParse = -11853,
    FileTypeDoesNotSupportSampleReferences = -11854,
    UndecodableMediaData = -11855,
    AirPlayControllerRequiresInternet = -11856,
    AirPlayReceiverRequiresInternet = -11857,
    VideoCompositorFailed = -11858,
    CreateContentKeyRequestFailed = -11860,
    UnsupportedOutputSettings = -11861,
    OperationNotAllowed = -11862,
    ContentIsUnavailable = -11863,
    FormatUnsupported = -11864,
    MalformedDepth = -11865,
    ContentNotUpdated = -11866,
    NoLongerPlayable = -11867,
    NoCompatibleAlternatesForExternalDisplay = -11868,
    NoSourceTrack = -11869,
    ExternalPlaybackNotSupportedForAsset = -11870,
    OperationNotSupportedForPreset = -11871,
    SessionHardwareCostOverage = -11872,
    UnsupportedDeviceActiveFormat = -11873
  }

}

export namespace AVMIDIPlayer {
}

export namespace AVMediaSelection {
}

export namespace AVMediaSelectionGroup {
}

export namespace AVMetadataItem {
}

export namespace AVMetadataObject {
}

export namespace AVMovie {
  export enum AVMovieWritingOptions {
    AddMovieHeaderToDestination = 0,
    TruncateDestinationToMovieHeaderOnly = 1
  }

}

export namespace AVMovieTrack {
}

export namespace AVOutputSettingsAssistant {
}

export namespace AVPictureInPictureController {
}

export namespace AVPlayer {
  export enum ActionAtItemEnd {
    Advance = 0,
    Pause = 1,
    None = 2
  }

  export enum HDRMode {
    HLG = 1,
    HDR10 = 2,
    DolbyVision = 4
  }

  export enum Status {
    Unknown = 0,
    ReadyToPlay = 1,
    Failed = 2
  }

  export enum TimeControlStatus {
    Paused = 0,
    WaitingToPlayAtSpecifiedRate = 1,
    Playing = 2
  }

}

export namespace AVPlayerItem {
  export enum Status {
    Unknown = 0,
    ReadyToPlay = 1,
    Failed = 2
  }

}

export namespace AVPlayerItemOutput {
}

export namespace AVPlayerItemProtectedContentAdditions {
  export enum AVContentAuthorizationStatus {
    Unknown = 0,
    Completed = 1,
    Cancelled = 2,
    TimedOut = 3,
    Busy = 4,
    NotAvailable = 5,
    NotPossible = 6
  }

}

export namespace AVPlayerItemTrack {
}

export namespace AVPlayerLayer {
}

export namespace AVPlayerLooper {
  export enum Status {
    Unknown = 0,
    Ready = 1,
    Failed = 2,
    Cancelled = 3
  }

}

export namespace AVPlayerMediaSelectionCriteria {
}

export namespace AVPlayerView {
  export enum AVPlayerViewControlsStyle {
    None = 0,
    Inline = 1,
    Floating = 2,
    Minimal = 3,
    Default = 1
  }

  export enum AVPlayerViewTrimResult {
    OKButton = 0,
    CancelButton = 1
  }

}

export namespace AVPortraitEffectsMatte {
}

export namespace AVQueuedSampleBufferRendering {
  export enum AVQueuedSampleBufferRenderingStatus {
    Unknown = 0,
    Rendering = 1,
    Failed = 2
  }

}

export namespace AVRouteDetector {
}

export namespace AVRoutePickerView {
  export enum AVRoutePickerViewButtonState {
    Normal = 0,
    NormalHighlighted = 1,
    Active = 2,
    ActiveHighlighted = 3
  }

}

export namespace AVSampleBufferAudioRenderer {
}

export namespace AVSampleBufferDisplayLayer {
}

export namespace AVSampleBufferGenerator {
  export namespace AVSampleBufferRequest {
    export enum Direction {
      Forward = 1,
      None = 0,
      Reverse = -1
    }
    export enum Mode {
      Immediate = 0,
      Scheduled = 1,
      Opportunistic = 2
    }
  }

}

export namespace AVSampleBufferRenderSynchronizer {
}

export namespace AVSampleCursor {
}

export namespace AVSemanticSegmentationMatte {
}

export namespace AVSpeechSynthesis {
  export enum AVSpeechBoundary {
    Immediate = 0,
    Word = 1
  }

  export enum AVSpeechSynthesisVoiceGender {
    Unspecified = 0,
    Male = 1,
    Female = 2
  }

  export enum AVSpeechSynthesisVoiceQuality {
    Default = 1,
    Enhanced = 2
  }

}

export namespace AVSynchronizedLayer {
}

export namespace AVTextStyleRule {
}

export namespace AVTimedMetadataGroup {
}

export namespace AVVideoCompositing {
}

export namespace AVVideoComposition {
}

// @ts-ignore
export namespace Array {
  export enum NSBinarySearchingOptions {
    FirstEqual = 256,
    LastEqual = 512,
    InsertionIndex = 1024
  }

}

export namespace AudioHardware {
  export enum AudioHardwarePowerHint {
    None = 0,
    FavorSavingPower = 1
  }

}

export namespace AudioServerPlugIn {
  export enum AudioDeviceClockAlgorithmSelector {
    mRaw = 1918990199,
    mSimpleIIR = 1768518246,
    m12PtMovingWindowAverage = 1835103847
  }

  export enum AudioServerPlugInIOOperation {
    Thread = 1953002084,
    Cycle = 1668899692,
    ReadInput = 1919246692,
    ConvertInput = 1667853936,
    ProcessInput = 1885957744,
    ProcessOutput = 1886352756,
    MixOutput = 1835628655,
    ProcessMix = 1886218616,
    ConvertMix = 1668114808,
    WriteMix = 1919513701
  }

}

export namespace AudioSessionTypes {
  export namespace AVAudioSession {
    export enum AVAudioSessionActivationOptions {
      AVAudioSessionActivationOptionNone = 0
    }
    export enum CategoryOptions {
      MixWithOthers = 1,
      DuckOthers = 2,
      AllowBluetooth = 4,
      DefaultToSpeaker = 8,
      InterruptSpokenAudioAndMixWithOthers = 17,
      AllowBluetoothA2DP = 32,
      AllowAirPlay = 64
    }
    export enum ErrorCode {
      None = 0,
      MediaServicesFailed = 1836282486,
      IsBusy = 560030580,
      IncompatibleCategory = 560161140,
      CannotInterruptOthers = 560557684,
      MissingEntitlement = 1701737535,
      SiriIsRecording = 1936290409,
      CannotStartPlaying = 561015905,
      CannotStartRecording = 561145187,
      BadParam = -50,
      InsufficientPriority = 561017449,
      ResourceNotAvailable = 561145203,
      Unspecified = 2003329396,
      ExpiredSession = 561210739,
      SessionNotActive = 1768841571
    }
    export enum IOType {
      NotSpecified = 0,
      Aggregated = 1
    }
    export enum InterruptionOptions {
      AVAudioSessionInterruptionOptionShouldResume = 1
    }
    export enum InterruptionType {
      Began = 1,
      Ended = 0
    }
    export enum PortOverride {
      None = 0,
      Speaker = 1936747378
    }
    export enum PromptStyle {
      None = 1852796517,
      Short = 1936224884,
      Normal = 1852992876
    }
    export enum RecordPermission {
      Undetermined = 1970168948,
      Denied = 1684369017,
      Granted = 1735552628
    }
    export enum RouteChangeReason {
      Unknown = 0,
      NewDeviceAvailable = 1,
      OldDeviceUnavailable = 2,
      CategoryChange = 3,
      Override = 4,
      WakeFromSleep = 6,
      NoSuitableRouteForCategory = 7,
      RouteConfigurationChange = 8
    }
    export enum RouteSharingPolicy {
      Default = 0,
      LongFormAudio = 1,
      LongForm = 1,
      Independent = 2,
      LongFormVideo = 3
    }
    export enum SetActiveOptions {
      AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation = 1
    }
    export enum SilenceSecondaryAudioHintType {
      Begin = 1,
      End = 0
    }
  }

}

export namespace ByteCountFormatter {
  export enum CountStyle {
    File = 0,
    Memory = 1,
    Decimal = 2,
    Binary = 3
  }

  export enum Units {
    Default = 0,
    Bytes = 1,
    KB = 2,
    MB = 4,
    GB = 8,
    TB = 16,
    PB = 32,
    EB = 64,
    ZB = 128,
    YBOrHigher = 65280,
    All = 65535
  }

}

export namespace CAAnimation {
}

export namespace CAConstraintLayoutManager {
  export enum CAConstraintAttribute {
    MinX = 0,
    MidX = 1,
    MaxX = 2,
    Width = 3,
    MinY = 4,
    MidY = 5,
    MaxY = 6,
    Height = 7
  }

}

export namespace CADisplayLink {
}

export namespace CAEDRMetadata {
}

export namespace CAEmitterCell {
}

export namespace CAEmitterLayer {
}

export namespace CAGradientLayer {
}

export namespace CALayer {
  export enum CAAutoresizingMask {
    NotSizable = 0,
    MinXMargin = 1,
    WidthSizable = 2,
    MaxXMargin = 4,
    MinYMargin = 8,
    HeightSizable = 16,
    MaxYMargin = 32
  }

  export enum CACornerMask {
    inXMinYCorner = 1,
    axXMinYCorner = 2,
    inXMaxYCorner = 4,
    axXMaxYCorner = 8
  }

  export enum CAEdgeAntialiasingMask {
    LeftEdge = 1,
    RightEdge = 2,
    BottomEdge = 4,
    TopEdge = 8
  }

}

export namespace CAMediaTiming {
}

export namespace CAMediaTimingFunction {
}

export namespace CAMetalLayer {
}

export namespace CANetworkBrowserWindowController {
}

export namespace CARemoteLayerClient {
}

export namespace CARemoteLayerServer {
}

export namespace CARenderer {
}

export namespace CAReplicatorLayer {
}

export namespace CAScrollLayer {
}

export namespace CAShapeLayer {
}

export namespace CATextLayer {
}

export namespace CATiledLayer {
}

export namespace CATransaction {
}

export namespace CAValueFunction {
}

export namespace CBATTRequest {
}

export namespace CBAttribute {
}

export namespace CBCentral {
}

export namespace CBCentralManager {
  export enum CBCentralManagerFeature {
    CBCentralManagerFeatureExtendedScanAndConnect = 1
  }

  export enum CBConnectionEvent {
    Disconnected = 0,
    Connected = 1
  }

}

export namespace CBCharacteristic {
  export enum CBAttributePermissions {
    Readable = 1,
    Writeable = 2,
    ReadEncryptionRequired = 4,
    WriteEncryptionRequired = 8
  }

  export enum CBCharacteristicProperties {
    Broadcast = 1,
    Read = 2,
    WriteWithoutResponse = 4,
    Write = 8,
    Notify = 16,
    Indicate = 32,
    AuthenticatedSignedWrites = 64,
    ExtendedProperties = 128,
    NotifyEncryptionRequired = 256,
    IndicateEncryptionRequired = 512
  }

}

export namespace CBDescriptor {
}

export namespace CBError {
  export enum CBATTError {
    Success = 0,
    InvalidHandle = 1,
    ReadNotPermitted = 2,
    WriteNotPermitted = 3,
    InvalidPdu = 4,
    InsufficientAuthentication = 5,
    RequestNotSupported = 6,
    InvalidOffset = 7,
    InsufficientAuthorization = 8,
    PrepareQueueFull = 9,
    AttributeNotFound = 10,
    AttributeNotLong = 11,
    InsufficientEncryptionKeySize = 12,
    InvalidAttributeValueLength = 13,
    UnlikelyError = 14,
    InsufficientEncryption = 15,
    UnsupportedGroupType = 16,
    InsufficientResources = 17
  }

  export enum CBError {
    Unknown = 0,
    InvalidParameters = 1,
    InvalidHandle = 2,
    NotConnected = 3,
    OutOfSpace = 4,
    OperationCancelled = 5,
    ConnectionTimeout = 6,
    PeripheralDisconnected = 7,
    UUIDNotAllowed = 8,
    AlreadyAdvertising = 9,
    ConnectionFailed = 10,
    ConnectionLimitReached = 11,
    UnkownDevice = 12,
    UnknownDevice = 12,
    OperationNotSupported = 13,
    PeerRemovedPairingInformation = 14,
    EncryptionTimedOut = 15
  }

}

export namespace CBL2CAPChannel {
}

export namespace CBManager {
  export enum CBManagerAuthorization {
    NotDetermined = 0,
    Restricted = 1,
    Denied = 2,
    AllowedAlways = 3
  }

  export enum CBManagerState {
    Unknown = 0,
    Resetting = 1,
    Unsupported = 2,
    Unauthorized = 3,
    PoweredOff = 4,
    PoweredOn = 5
  }

}

export namespace CBPeer {
}

export namespace CBPeripheral {
  export enum CBCharacteristicWriteType {
    Response = 0,
    outResponse = 1
  }

  export enum CBPeripheralState {
    Disconnected = 0,
    Connecting = 1,
    Connected = 2,
    Disconnecting = 3
  }

}

export namespace CBPeripheralManager {
  export enum CBPeripheralManagerConnectionLatency {
    Low = 0,
    Medium = 1,
    High = 2
  }

}

export namespace CBService {
}

export namespace CBUUID {
}

export namespace CFBase {
  export enum CFComparisonResult {
    LessThan = -1,
    EqualTo = 0,
    GreaterThan = 1
  }

}

export namespace CFByteOrder {
  export enum __CFByteOrder {
    Unknown = 0,
    LittleEndian = 1,
    BigEndian = 2
  }

}

export namespace CFCalendar {
  export enum CFCalendarUnit {
    Era = 2,
    Year = 4,
    Month = 8,
    Day = 16,
    Hour = 32,
    Minute = 64,
    Second = 128,
    Week = 256,
    Weekday = 512,
    WeekdayOrdinal = 1024,
    Quarter = 2048,
    WeekOfMonth = 4096,
    WeekOfYear = 8192,
    YearForWeekOfYear = 16384
  }

}

export namespace CFCharacterSet {
  export enum CFCharacterSetPredefinedSet {
    Control = 1,
    Whitespace = 2,
    WhitespaceAndNewline = 3,
    DecimalDigit = 4,
    Letter = 5,
    LowercaseLetter = 6,
    UppercaseLetter = 7,
    NonBase = 8,
    Decomposable = 9,
    AlphaNumeric = 10,
    Punctuation = 11,
    CapitalizedLetter = 13,
    Symbol = 14,
    Newline = 15,
    Illegal = 12
  }

}

export namespace CFData {
  export enum CFDataSearchFlags {
    Backwards = 1,
    Anchored = 2
  }

}

export namespace CFDate {
  export enum CFGregorianUnitFlags {
    UnitsYears = 1,
    UnitsMonths = 2,
    UnitsDays = 4,
    UnitsHours = 8,
    UnitsMinutes = 16,
    UnitsSeconds = 32,
    AllUnits = 16777215
  }

}

export namespace CFDateFormatter {
  export enum CFDateFormatterStyle {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4
  }

  export enum CFISO8601DateFormatOptions {
    WithYear = 1,
    WithMonth = 2,
    WithWeekOfYear = 4,
    WithDay = 16,
    WithTime = 32,
    WithTimeZone = 64,
    WithSpaceBetweenDateAndTime = 128,
    WithDashSeparatorInDate = 256,
    WithColonSeparatorInTime = 512,
    WithColonSeparatorInTimeZone = 1024,
    WithFractionalSeconds = 2048,
    WithFullDate = 275,
    WithFullTime = 1632,
    WithInternetDateTime = 1907
  }

}

export namespace CFFileSecurity {
  export enum CFFileSecurityClearOptions {
    Owner = 1,
    Group = 2,
    Mode = 4,
    OwnerUUID = 8,
    GroupUUID = 16,
    AccessControlList = 32
  }

}

export namespace CFLocale {
  export enum CFLocaleLanguageDirection {
    Unknown = 0,
    LeftToRight = 1,
    RightToLeft = 2,
    TopToBottom = 3,
    BottomToTop = 4
  }

}

export namespace CFNotificationCenter {
  export enum CFNotificationSuspensionBehavior {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4
  }

}

export namespace CFNumber {
  export enum CFNumberType {
    SInt8Type = 1,
    SInt16Type = 2,
    SInt32Type = 3,
    SInt64Type = 4,
    Float32Type = 5,
    Float64Type = 6,
    CharType = 7,
    ShortType = 8,
    IntType = 9,
    LongType = 10,
    LongLongType = 11,
    FloatType = 12,
    DoubleType = 13,
    CFIndexType = 14,
    NSIntegerType = 15,
    CGFloatType = 16,
    MaxType = 16
  }

}

export namespace CFNumberFormatter {
  export enum CFNumberFormatterOptionFlags {
    kCFNumberFormatterParseIntegersOnly = 1
  }

  export enum CFNumberFormatterPadPosition {
    BeforePrefix = 0,
    AfterPrefix = 1,
    BeforeSuffix = 2,
    AfterSuffix = 3
  }

  export enum CFNumberFormatterRoundingMode {
    Ceiling = 0,
    Floor = 1,
    Down = 2,
    Up = 3,
    HalfEven = 4,
    HalfDown = 5,
    HalfUp = 6
  }

  export enum CFNumberFormatterStyle {
    NoStyle = 0,
    DecimalStyle = 1,
    CurrencyStyle = 2,
    PercentStyle = 3,
    ScientificStyle = 4,
    SpellOutStyle = 5,
    OrdinalStyle = 6,
    CurrencyISOCodeStyle = 8,
    CurrencyPluralStyle = 9,
    CurrencyAccountingStyle = 10
  }

}

export namespace CFPropertyList {
  export enum CFPropertyListFormat {
    OpenStepFormat = 1,
    XMLFormat_v1_0 = 100,
    BinaryFormat_v1_0 = 200
  }

  export enum CFPropertyListMutabilityOptions {
    Immutable = 0,
    MutableContainers = 1,
    MutableContainersAndLeaves = 2
  }

}

export namespace CFRunLoop {
  export enum CFRunLoopActivity {
    Entry = 1,
    BeforeTimers = 2,
    BeforeSources = 4,
    BeforeWaiting = 32,
    AfterWaiting = 64,
    Exit = 128,
    AllActivities = 268435455
  }

  export enum CFRunLoopRunResult {
    Finished = 1,
    Stopped = 2,
    TimedOut = 3,
    HandledSource = 4
  }

}

export namespace CFSocket {
  export enum CFSocketCallBackType {
    NoCallBack = 0,
    ReadCallBack = 1,
    AcceptCallBack = 2,
    DataCallBack = 3,
    ConnectCallBack = 4,
    WriteCallBack = 8
  }

  export enum CFSocketError {
    Success = 0,
    Error = -1,
    Timeout = -2
  }

}

export namespace CFStream {
  export enum CFStreamErrorDomain {
    Custom = -1,
    POSIX = 1,
    MacOSStatus = 2
  }

  export enum CFStreamEventType {
    None = 0,
    OpenCompleted = 1,
    HasBytesAvailable = 2,
    CanAcceptBytes = 4,
    ErrorOccurred = 8,
    EndEncountered = 16
  }

  export enum CFStreamStatus {
    NotOpen = 0,
    Opening = 1,
    Open = 2,
    Reading = 3,
    Writing = 4,
    AtEnd = 5,
    Closed = 6,
    Error = 7
  }

}

export namespace CFString {
  export enum CFStringBuiltInEncodings {
    MacRoman = 0,
    WindowsLatin1 = 1280,
    ISOLatin1 = 513,
    NextStepLatin = 2817,
    ASCII = 1536,
    Unicode = 256,
    UTF8 = 134217984,
    NonLossyASCII = 3071,
    UTF16 = 256,
    UTF16BE = 268435712,
    UTF16LE = 335544576,
    UTF32 = 201326848,
    UTF32BE = 402653440,
    UTF32LE = 469762304
  }

  export enum CFStringCompareFlags {
    CaseInsensitive = 1,
    Backwards = 4,
    Anchored = 8,
    Nonliteral = 16,
    Localized = 32,
    Numerically = 64,
    DiacriticInsensitive = 128,
    WidthInsensitive = 256,
    ForcedOrdering = 512
  }

  export enum CFStringNormalizationForm {
    D = 0,
    KD = 1,
    C = 2,
    KC = 3
  }

}

export namespace CFStringEncodingExt {
  export enum CFStringEncodings {
    MacJapanese = 1,
    MacChineseTrad = 2,
    MacKorean = 3,
    MacArabic = 4,
    MacHebrew = 5,
    MacGreek = 6,
    MacCyrillic = 7,
    MacDevanagari = 9,
    MacGurmukhi = 10,
    MacGujarati = 11,
    MacOriya = 12,
    MacBengali = 13,
    MacTamil = 14,
    MacTelugu = 15,
    MacKannada = 16,
    MacMalayalam = 17,
    MacSinhalese = 18,
    MacBurmese = 19,
    MacKhmer = 20,
    MacThai = 21,
    MacLaotian = 22,
    MacGeorgian = 23,
    MacArmenian = 24,
    MacChineseSimp = 25,
    MacTibetan = 26,
    MacMongolian = 27,
    MacEthiopic = 28,
    MacCentralEurRoman = 29,
    MacVietnamese = 30,
    MacExtArabic = 31,
    MacSymbol = 33,
    MacDingbats = 34,
    MacTurkish = 35,
    MacCroatian = 36,
    MacIcelandic = 37,
    MacRomanian = 38,
    MacCeltic = 39,
    MacGaelic = 40,
    MacFarsi = 140,
    MacUkrainian = 152,
    MacInuit = 236,
    MacVT100 = 252,
    MacHFS = 255,
    ISOLatin2 = 514,
    ISOLatin3 = 515,
    ISOLatin4 = 516,
    ISOLatinCyrillic = 517,
    ISOLatinArabic = 518,
    ISOLatinGreek = 519,
    ISOLatinHebrew = 520,
    ISOLatin5 = 521,
    ISOLatin6 = 522,
    ISOLatinThai = 523,
    ISOLatin7 = 525,
    ISOLatin8 = 526,
    ISOLatin9 = 527,
    ISOLatin10 = 528,
    DOSLatinUS = 1024,
    DOSGreek = 1029,
    DOSBalticRim = 1030,
    DOSLatin1 = 1040,
    DOSGreek1 = 1041,
    DOSLatin2 = 1042,
    DOSCyrillic = 1043,
    DOSTurkish = 1044,
    DOSPortuguese = 1045,
    DOSIcelandic = 1046,
    DOSHebrew = 1047,
    DOSCanadianFrench = 1048,
    DOSArabic = 1049,
    DOSNordic = 1050,
    DOSRussian = 1051,
    DOSGreek2 = 1052,
    DOSThai = 1053,
    DOSJapanese = 1056,
    DOSChineseSimplif = 1057,
    DOSKorean = 1058,
    DOSChineseTrad = 1059,
    WindowsLatin2 = 1281,
    WindowsCyrillic = 1282,
    WindowsGreek = 1283,
    WindowsLatin5 = 1284,
    WindowsHebrew = 1285,
    WindowsArabic = 1286,
    WindowsBalticRim = 1287,
    WindowsVietnamese = 1288,
    WindowsKoreanJohab = 1296,
    ANSEL = 1537,
    JIS_X0201_76 = 1568,
    JIS_X0208_83 = 1569,
    JIS_X0208_90 = 1570,
    JIS_X0212_90 = 1571,
    JIS_C6226_78 = 1572,
    ShiftJIS_X0213 = 1576,
    ShiftJIS_X0213_MenKuTen = 1577,
    GB_2312_80 = 1584,
    GBK_95 = 1585,
    GB_18030_2000 = 1586,
    KSC_5601_87 = 1600,
    KSC_5601_92_Johab = 1601,
    CNS_11643_92_P1 = 1617,
    CNS_11643_92_P2 = 1618,
    CNS_11643_92_P3 = 1619,
    ISO_2022_JP = 2080,
    ISO_2022_JP_2 = 2081,
    ISO_2022_JP_1 = 2082,
    ISO_2022_JP_3 = 2083,
    ISO_2022_CN = 2096,
    ISO_2022_CN_EXT = 2097,
    ISO_2022_KR = 2112,
    EUC_JP = 2336,
    EUC_CN = 2352,
    EUC_TW = 2353,
    EUC_KR = 2368,
    ShiftJIS = 2561,
    KOI8_R = 2562,
    Big5 = 2563,
    MacRomanLatin1 = 2564,
    HZ_GB_2312 = 2565,
    Big5_HKSCS_1999 = 2566,
    VISCII = 2567,
    KOI8_U = 2568,
    Big5_E = 2569,
    NextStepJapanese = 2818,
    EBCDIC_US = 3073,
    EBCDIC_CP037 = 3074,
    UTF7 = 67109120,
    UTF7_IMAP = 2576,
    ShiftJIS_X0213_00 = 1576
  }

}

export namespace CFStringTokenizer {
  export enum CFStringTokenizerTokenType {
    None = 0,
    Normal = 1,
    HasSubTokensMask = 2,
    HasDerivedSubTokensMask = 4,
    HasHasNumbersMask = 8,
    HasNonLettersMask = 16,
    IsCJWordMask = 32
  }

}

export namespace CFTimeZone {
  export enum CFTimeZoneNameStyle {
    Standard = 0,
    ShortStandard = 1,
    DaylightSaving = 2,
    ShortDaylightSaving = 3,
    Generic = 4,
    ShortGeneric = 5
  }

}

export namespace CFURL {
  export enum CFURLBookmarkCreationOptions {
    MinimalBookmarkMask = 512,
    SuitableForBookmarkFile = 1024,
    WithSecurityScope = 2048,
    SecurityScopeAllowOnlyReadAccess = 4096,
    PreferFileIDResolutionMask = 256
  }

  export enum CFURLBookmarkResolutionOptions {
    URLBookmarkResolutionWithoutUIMask = 256,
    URLBookmarkResolutionWithoutMountingMask = 512,
    URLBookmarkResolutionWithSecurityScope = 1024,
    BookmarkResolutionWithoutUIMask = 256,
    BookmarkResolutionWithoutMountingMask = 512
  }

  export enum CFURLComponentType {
    Scheme = 1,
    NetLocation = 2,
    Path = 3,
    ResourceSpecifier = 4,
    User = 5,
    Password = 6,
    UserInfo = 7,
    Host = 8,
    Port = 9,
    ParameterString = 10,
    Query = 11,
    Fragment = 12
  }

  export enum CFURLPathStyle {
    POSIXPathStyle = 0,
    HFSPathStyle = 1,
    WindowsPathStyle = 2
  }

}

export namespace CFURLEnumerator {
  export enum CFURLEnumeratorOptions {
    DefaultBehavior = 0,
    DescendRecursively = 1,
    SkipInvisibles = 2,
    GenerateFileReferenceURLs = 4,
    SkipPackageContents = 8,
    IncludeDirectoriesPreOrder = 16,
    IncludeDirectoriesPostOrder = 32,
    GenerateRelativePathURLs = 64
  }

  export enum CFURLEnumeratorResult {
    Success = 1,
    End = 2,
    Error = 3,
    DirectoryPostOrderSuccess = 4
  }

}

export namespace CFXMLNode {
  export enum CFXMLEntityTypeCode {
    Parameter = 0,
    ParsedInternal = 1,
    ParsedExternal = 2,
    Unparsed = 3,
    Character = 4
  }

  export enum CFXMLNodeTypeCode {
    Document = 1,
    Element = 2,
    Attribute = 3,
    ProcessingInstruction = 4,
    Comment = 5,
    Text = 6,
    CDATASection = 7,
    DocumentFragment = 8,
    Entity = 9,
    EntityReference = 10,
    DocumentType = 11,
    Whitespace = 12,
    Notation = 13,
    ElementTypeDeclaration = 14,
    AttributeListDeclaration = 15
  }

}

export namespace CFXMLParser {
  export enum CFXMLParserOptions {
    ValidateDocument = 1,
    SkipMetaData = 2,
    ReplacePhysicalEntities = 4,
    SkipWhitespace = 8,
    ResolveExternalEntities = 16,
    AddImpliedAttributes = 32,
    AllOptions = 16777215,
    NoOptions = 0
  }

  export enum CFXMLParserStatusCode {
    StatusParseNotBegun = -2,
    StatusParseInProgress = -1,
    StatusParseSuccessful = 0,
    ErrorUnexpectedEOF = 1,
    ErrorUnknownEncoding = 2,
    ErrorEncodingConversionFailure = 3,
    ErrorMalformedProcessingInstruction = 4,
    ErrorMalformedDTD = 5,
    ErrorMalformedName = 6,
    ErrorMalformedCDSect = 7,
    ErrorMalformedCloseTag = 8,
    ErrorMalformedStartTag = 9,
    ErrorMalformedDocument = 10,
    ErrorElementlessDocument = 11,
    ErrorMalformedComment = 12,
    ErrorMalformedCharacterReference = 13,
    ErrorMalformedParsedCharacterData = 14,
    ErrorNoData = 15
  }

}

export namespace CGColorConversionInfo {
  export enum CGColorConversionInfoTransformType {
    FromSpace = 0,
    ToSpace = 1,
    ApplySpace = 2
  }

}

export namespace CGColorSpace {
  export enum CGColorRenderingIntent {
    Default = 0,
    AbsoluteColorimetric = 1,
    RelativeColorimetric = 2,
    Perceptual = 3,
    Saturation = 4
  }

  export enum CGColorSpaceModel {
    Unknown = -1,
    Monochrome = 0,
    RGB = 1,
    CMYK = 2,
    Lab = 3,
    DeviceN = 4,
    Indexed = 5,
    Pattern = 6,
    XYZ = 7
  }

}

export namespace CGContext {
  export enum CGBlendMode {
    Normal = 0,
    Multiply = 1,
    Screen = 2,
    Overlay = 3,
    Darken = 4,
    Lighten = 5,
    ColorDodge = 6,
    ColorBurn = 7,
    SoftLight = 8,
    HardLight = 9,
    Difference = 10,
    Exclusion = 11,
    Hue = 12,
    Saturation = 13,
    Color = 14,
    Luminosity = 15,
    Clear = 16,
    Copy = 17,
    SourceIn = 18,
    SourceOut = 19,
    SourceAtop = 20,
    DestinationOver = 21,
    DestinationIn = 22,
    DestinationOut = 23,
    DestinationAtop = 24,
    XOR = 25,
    PlusDarker = 26,
    PlusLighter = 27
  }

  export enum CGInterpolationQuality {
    Default = 0,
    None = 1,
    Low = 2,
    Medium = 4,
    High = 3
  }

  export enum CGPathDrawingMode {
    Fill = 0,
    EOFill = 1,
    Stroke = 2,
    FillStroke = 3,
    EOFillStroke = 4
  }

  export enum CGTextDrawingMode {
    Fill = 0,
    Stroke = 1,
    FillStroke = 2,
    Invisible = 3,
    FillClip = 4,
    StrokeClip = 5,
    FillStrokeClip = 6,
    Clip = 7
  }

}

export namespace CGDirectDisplay {
  export enum CGCaptureOptions {
    Options = 0,
    Fill = 1
  }

}

export namespace CGDisplayConfiguration {
  export enum CGConfigureOption {
    ForAppOnly = 0,
    ForSession = 1,
    Permanently = 2
  }

  export enum CGDisplayChangeSummaryFlags {
    BeginConfigurationFlag = 1,
    MovedFlag = 2,
    SetMainFlag = 4,
    SetModeFlag = 8,
    AddFlag = 16,
    RemoveFlag = 32,
    EnabledFlag = 256,
    DisabledFlag = 512,
    MirrorFlag = 1024,
    UnMirrorFlag = 2048,
    DesktopShapeChangedFlag = 4096
  }

}

export namespace CGDisplayStream {
  export enum CGDisplayStreamFrameStatus {
    FrameComplete = 0,
    FrameIdle = 1,
    FrameBlank = 2,
    Stopped = 3
  }

  export enum CGDisplayStreamUpdateRectType {
    RefreshedRects = 0,
    MovedRects = 1,
    DirtyRects = 2,
    ReducedDirtyRects = 3
  }

}

export namespace CGError {
  export enum CGError {
    Success = 0,
    Failure = 1000,
    IllegalArgument = 1001,
    InvalidConnection = 1002,
    InvalidContext = 1003,
    CannotComplete = 1004,
    NotImplemented = 1006,
    RangeCheck = 1007,
    TypeCheck = 1008,
    InvalidOperation = 1010,
    NoneAvailable = 1011
  }

}

export namespace CGEventTypes {
  export enum CGEventField {
    MouseEventNumber = 0,
    MouseEventClickState = 1,
    MouseEventPressure = 2,
    MouseEventButtonNumber = 3,
    MouseEventDeltaX = 4,
    MouseEventDeltaY = 5,
    MouseEventInstantMouser = 6,
    MouseEventSubtype = 7,
    KeyboardEventAutorepeat = 8,
    KeyboardEventKeycode = 9,
    KeyboardEventKeyboardType = 10,
    ScrollWheelEventDeltaAxis1 = 11,
    ScrollWheelEventDeltaAxis2 = 12,
    ScrollWheelEventDeltaAxis3 = 13,
    ScrollWheelEventFixedPtDeltaAxis1 = 93,
    ScrollWheelEventFixedPtDeltaAxis2 = 94,
    ScrollWheelEventFixedPtDeltaAxis3 = 95,
    ScrollWheelEventPointDeltaAxis1 = 96,
    ScrollWheelEventPointDeltaAxis2 = 97,
    ScrollWheelEventPointDeltaAxis3 = 98,
    ScrollWheelEventScrollPhase = 99,
    ScrollWheelEventScrollCount = 100,
    ScrollWheelEventMomentumPhase = 123,
    ScrollWheelEventInstantMouser = 14,
    TabletEventPointX = 15,
    TabletEventPointY = 16,
    TabletEventPointZ = 17,
    TabletEventPointButtons = 18,
    TabletEventPointPressure = 19,
    TabletEventTiltX = 20,
    TabletEventTiltY = 21,
    TabletEventRotation = 22,
    TabletEventTangentialPressure = 23,
    TabletEventDeviceID = 24,
    TabletEventVendor1 = 25,
    TabletEventVendor2 = 26,
    TabletEventVendor3 = 27,
    TabletProximityEventVendorID = 28,
    TabletProximityEventTabletID = 29,
    TabletProximityEventPointerID = 30,
    TabletProximityEventDeviceID = 31,
    TabletProximityEventSystemTabletID = 32,
    TabletProximityEventVendorPointerType = 33,
    TabletProximityEventVendorPointerSerialNumber = 34,
    TabletProximityEventVendorUniqueID = 35,
    TabletProximityEventCapabilityMask = 36,
    TabletProximityEventPointerType = 37,
    TabletProximityEventEnterProximity = 38,
    EventTargetProcessSerialNumber = 39,
    EventTargetUnixProcessID = 40,
    EventSourceUnixProcessID = 41,
    EventSourceUserData = 42,
    EventSourceUserID = 43,
    EventSourceGroupID = 44,
    EventSourceStateID = 45,
    ScrollWheelEventIsContinuous = 88,
    MouseEventWindowUnderMousePointer = 91,
    MouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92,
    EventUnacceleratedPointerMovementX = 170,
    EventUnacceleratedPointerMovementY = 171
  }

  export enum CGEventFlags {
    AlphaShift = 65536,
    Shift = 131072,
    Control = 262144,
    Alternate = 524288,
    Command = 1048576,
    Help = 4194304,
    SecondaryFn = 8388608,
    NumericPad = 2097152,
    NonCoalesced = 256
  }

  export enum CGEventMouseSubtype {
    Default = 0,
    TabletPoint = 1,
    TabletProximity = 2
  }

  export enum CGEventSourceStateID {
    Private = -1,
    CombinedSessionState = 0,
    HIDSystemState = 1
  }

  export enum CGEventTapLocation {
    HIDEventTap = 0,
    SessionEventTap = 1,
    AnnotatedSessionEventTap = 2
  }

  export enum CGEventTapOptions {
    Default = 0,
    ListenOnly = 1
  }

  export enum CGEventTapPlacement {
    HeadInsertEventTap = 0,
    TailAppendEventTap = 1
  }

  export enum CGEventType {
    Null = 0,
    LeftMouseDown = 1,
    LeftMouseUp = 2,
    RightMouseDown = 3,
    RightMouseUp = 4,
    MouseMoved = 5,
    LeftMouseDragged = 6,
    RightMouseDragged = 7,
    KeyDown = 10,
    KeyUp = 11,
    FlagsChanged = 12,
    ScrollWheel = 22,
    TabletPointer = 23,
    TabletProximity = 24,
    OtherMouseDown = 25,
    OtherMouseUp = 26,
    OtherMouseDragged = 27,
    TapDisabledByTimeout = 4294967294,
    TapDisabledByUserInput = 4294967295
  }

  export enum CGGesturePhase {
    None = 0,
    Began = 1,
    Changed = 2,
    Ended = 4,
    Cancelled = 8,
    MayBegin = 128
  }

  export enum CGMomentumScrollPhase {
    None = 0,
    Begin = 1,
    Continue = 2,
    End = 3
  }

  export enum CGMouseButton {
    Left = 0,
    Right = 1,
    Center = 2
  }

  export enum CGScrollEventUnit {
    Pixel = 0,
    Line = 1
  }

  export enum CGScrollPhase {
    Began = 1,
    Changed = 2,
    Ended = 4,
    Cancelled = 8,
    MayBegin = 128
  }

}

export namespace CGFont {
  export enum CGFontPostScriptFormat {
    e1 = 1,
    e3 = 3,
    e42 = 42
  }

  export enum CGGlyphDeprecatedEnum {
    in = 0,
    ax = 1
  }

}

export namespace CGGeometry {
  export enum CGRectEdge {
    inXEdge = 0,
    inYEdge = 1,
    axXEdge = 2,
    axYEdge = 3
  }

}

export namespace CGGradient {
  export enum CGGradientDrawingOptions {
    BeforeStartLocation = 1,
    AfterEndLocation = 2
  }

}

export namespace CGImage {
  export enum CGBitmapInfo {
    AlphaInfoMask = 31,
    FloatInfoMask = 3840,
    FloatComponents = 256,
    ByteOrderMask = 28672,
    ByteOrderDefault = 0,
    ByteOrder16Little = 4096,
    ByteOrder32Little = 8192,
    ByteOrder16Big = 12288,
    ByteOrder32Big = 16384
  }

  export enum CGImageAlphaInfo {
    None = 0,
    PremultipliedLast = 1,
    PremultipliedFirst = 2,
    Last = 3,
    First = 4,
    NoneSkipLast = 5,
    NoneSkipFirst = 6,
    Only = 7
  }

  export enum CGImageByteOrderInfo {
    rMask = 28672,
    rDefault = 0,
    r16Little = 4096,
    r32Little = 8192,
    r16Big = 12288,
    r32Big = 16384
  }

  export enum CGImagePixelFormatInfo {
    Mask = 983040,
    Packed = 0,
    RGB555 = 65536,
    RGB565 = 131072,
    RGB101010 = 196608,
    RGBCIF10 = 262144
  }

}

export namespace CGPDFContext {
  export enum CGPDFTagType {
    Document = 100,
    Part = 101,
    Art = 102,
    Section = 103,
    Div = 104,
    BlockQuote = 105,
    Caption = 106,
    TOC = 107,
    TOCI = 108,
    Index = 109,
    NonStructure = 110,
    Private = 111,
    Paragraph = 200,
    Header = 201,
    Header1 = 202,
    Header2 = 203,
    Header3 = 204,
    Header4 = 205,
    Header5 = 206,
    Header6 = 207,
    List = 300,
    ListItem = 301,
    Label = 302,
    ListBody = 303,
    Table = 400,
    TableRow = 401,
    TableHeaderCell = 402,
    TableDataCell = 403,
    TableHeader = 404,
    TableBody = 405,
    TableFooter = 406,
    Span = 500,
    Quote = 501,
    Note = 502,
    Reference = 503,
    Bibliography = 504,
    Code = 505,
    Link = 506,
    Annotation = 507,
    Ruby = 600,
    RubyBaseText = 601,
    RubyAnnotationText = 602,
    RubyPunctuation = 603,
    Warichu = 604,
    WarichuText = 605,
    WarichuPunctiation = 606,
    Figure = 700,
    Formula = 701,
    Form = 702
  }

}

export namespace CGPDFDocument {
  export enum CGPDFAccessPermissions {
    LowQualityPrinting = 1,
    HighQualityPrinting = 2,
    DocumentChanges = 4,
    DocumentAssembly = 8,
    ContentCopying = 16,
    ContentAccessibility = 32,
    Commenting = 64,
    FormFieldEntry = 128
  }

}

export namespace CGPDFObject {
  export enum CGPDFObjectType {
    Null = 1,
    Boolean = 2,
    Integer = 3,
    Real = 4,
    Name = 5,
    String = 6,
    Array = 7,
    Dictionary = 8,
    Stream = 9
  }

}

export namespace CGPDFPage {
  export enum CGPDFBox {
    MediaBox = 0,
    CropBox = 1,
    BleedBox = 2,
    TrimBox = 3,
    ArtBox = 4
  }

}

export namespace CGPDFStream {
  export enum CGPDFDataFormat {
    Raw = 0,
    JPEGEncoded = 1,
    JPEG2000 = 2
  }

}

export namespace CGPath {
  export enum CGLineCap {
    Butt = 0,
    Round = 1,
    Square = 2
  }

  export enum CGLineJoin {
    Miter = 0,
    Round = 1,
    Bevel = 2
  }

  export enum CGPathElementType {
    MoveToPoint = 0,
    AddLineToPoint = 1,
    AddQuadCurveToPoint = 2,
    AddCurveToPoint = 3,
    CloseSubpath = 4
  }

}

export namespace CGPattern {
  export enum CGPatternTiling {
    NoDistortion = 0,
    ConstantSpacingMinimalDistortion = 1,
    ConstantSpacing = 2
  }

}

export namespace CGRemoteOperation {
  export enum CGEventFilterMask {
    LocalMouseEvents = 1,
    LocalKeyboardEvents = 2,
    SystemDefinedEvents = 4
  }

  export enum CGEventSuppressionState {
    EventSuppressionStateSuppressionInterval = 0,
    EventSuppressionStateRemoteMouseDrag = 1,
    NumberOfEventSuppressionStates = 2
  }

  export enum CGScreenUpdateOperation {
    Refresh = 0,
    Move = 1,
    ReducedDirtyRectangleCount = 2147483648
  }

}

export namespace CGWindow {
  export enum CGWindowBackingType {
    Retained = 0,
    Nonretained = 1,
    Buffered = 2
  }

  export enum CGWindowImageOption {
    Default = 0,
    BoundsIgnoreFraming = 1,
    ShouldBeOpaque = 2,
    OnlyShadows = 4,
    BestResolution = 8,
    NominalResolution = 16
  }

  export enum CGWindowListOption {
    OptionAll = 0,
    OptionOnScreenOnly = 1,
    OptionOnScreenAboveWindow = 2,
    OptionOnScreenBelowWindow = 4,
    OptionIncludingWindow = 8,
    ExcludeDesktopElements = 16
  }

  export enum CGWindowSharingType {
    None = 0,
    ReadOnly = 1,
    ReadWrite = 2
  }

}

export namespace CGWindowLevel {
  export enum CGWindowLevelKey {
    BaseWindowLevelKey = 0,
    MinimumWindowLevelKey = 1,
    DesktopWindowLevelKey = 2,
    BackstopMenuLevelKey = 3,
    NormalWindowLevelKey = 4,
    FloatingWindowLevelKey = 5,
    TornOffMenuWindowLevelKey = 6,
    DockWindowLevelKey = 7,
    MainMenuWindowLevelKey = 8,
    StatusWindowLevelKey = 9,
    ModalPanelWindowLevelKey = 10,
    PopUpMenuWindowLevelKey = 11,
    DraggingWindowLevelKey = 12,
    ScreenSaverWindowLevelKey = 13,
    MaximumWindowLevelKey = 14,
    OverlayWindowLevelKey = 15,
    HelpWindowLevelKey = 16,
    UtilityWindowLevelKey = 17,
    DesktopIconWindowLevelKey = 18,
    CursorWindowLevelKey = 19,
    AssistiveTechHighWindowLevelKey = 20,
    NumberOfWindowLevelKeys = 21
  }

}

export namespace CHHapticEngine {
  export enum FinishedAction {
    StopEngine = 1,
    LeaveEngineRunning = 2
  }

  export enum StoppedReason {
    AudioSessionInterrupt = 1,
    ApplicationSuspended = 2,
    IdleTimeout = 3,
    NotifyWhenFinished = 4,
    SystemError = -1
  }

}

export namespace CHHapticErrors {
  export enum CHHapticErrorCode {
    EngineNotRunning = -4805,
    OperationNotPermitted = -4806,
    EngineStartTimeout = -4808,
    NotSupported = -4809,
    ServerInitFailed = -4810,
    ServerInterrupted = -4811,
    InvalidPatternPlayer = -4812,
    InvalidPatternData = -4813,
    InvalidPatternDictionary = -4814,
    InvalidAudioSession = -4815,
    InvalidParameterType = -4820,
    InvalidEventType = -4821,
    InvalidEventTime = -4822,
    InvalidEventDuration = -4823,
    InvalidAudioResource = -4824,
    ResourceNotAvailable = -4825,
    BadEventEntry = -4830,
    BadParameterEntry = -4831,
    InvalidTime = -4840,
    UnknownError = -4898,
    MemoryError = -4899
  }

}

export namespace CHHapticEvent {
}

export namespace CHHapticPattern {
}

export namespace CIBarcodeDescriptor {
  export enum CIDataMatrixCodeECCVersion {
    n000 = 0,
    n050 = 50,
    n080 = 80,
    n100 = 100,
    n140 = 140,
    n200 = 200
  }

  export enum CIQRCodeErrorCorrectionLevel {
    L = 76,
    M = 77,
    Q = 81,
    H = 72
  }

}

export namespace CIColor {
}

export namespace CIContext {
}

export namespace CIDetector {
}

export namespace CIFeature {
}

export namespace CIFilter {
}

export namespace CIFilterGenerator {
}

export namespace CIFilterShape {
}

export namespace CIImage {
}

export namespace CIImageAccumulator {
}

export namespace CIKernel {
}

export namespace CIPlugIn {
}

export namespace CIRenderDestination {
  export enum CIRenderDestinationAlphaMode {
    None = 0,
    Premultiplied = 1,
    Unpremultiplied = 2
  }

}

export namespace CISampler {
}

export namespace CIVector {
}

export namespace CKAcceptSharesOperation {
}

export namespace CKAsset {
}

export namespace CKContainer {
  export enum CKAccountStatus {
    CouldNotDetermine = 0,
    Available = 1,
    Restricted = 2,
    NoAccount = 3
  }

  export enum CKContainer_Application_PermissionStatus {
    InitialState = 0,
    CouldNotComplete = 1,
    Denied = 2,
    Granted = 3
  }

  export enum CKContainer_Application_Permissions {
    CKApplicationPermissionUserDiscoverability = 1
  }

}

export namespace CKDatabase {
  export enum Scope {
    Public = 1,
    Private = 2,
    Shared = 3
  }

}

export namespace CKDatabaseOperation {
}

export namespace CKDiscoverAllUserIdentitiesOperation {
}

export namespace CKDiscoverUserIdentitiesOperation {
}

export namespace CKError {
  export enum CKErrorCode {
    InternalError = 1,
    PartialFailure = 2,
    NetworkUnavailable = 3,
    NetworkFailure = 4,
    BadContainer = 5,
    ServiceUnavailable = 6,
    RequestRateLimited = 7,
    MissingEntitlement = 8,
    NotAuthenticated = 9,
    PermissionFailure = 10,
    UnknownItem = 11,
    InvalidArguments = 12,
    ResultsTruncated = 13,
    ServerRecordChanged = 14,
    ServerRejectedRequest = 15,
    AssetFileNotFound = 16,
    AssetFileModified = 17,
    IncompatibleVersion = 18,
    ConstraintViolation = 19,
    OperationCancelled = 20,
    ChangeTokenExpired = 21,
    BatchRequestFailed = 22,
    ZoneBusy = 23,
    BadDatabase = 24,
    QuotaExceeded = 25,
    ZoneNotFound = 26,
    LimitExceeded = 27,
    UserDeletedZone = 28,
    TooManyParticipants = 29,
    AlreadyShared = 30,
    ReferenceViolation = 31,
    ManagedAccountRestricted = 32,
    ParticipantMayNeedVerification = 33,
    ServerResponseLost = 34,
    AssetNotAvailable = 35
  }

}

export namespace CKFetchDatabaseChangesOperation {
}

export namespace CKFetchRecordZoneChangesOperation {
  export class ZoneConfiguration extends NSObject {
    desiredKeys: string[];
    setDesiredKeys(_: string[]);
    previousServerChangeToken: CKServerChangeToken;
    setPreviousServerChangeToken(_: CKServerChangeToken);
    resultsLimit: number;
    setResultsLimit(_: number);
  }
  
}

export namespace CKFetchRecordZonesOperation {
}

export namespace CKFetchRecordsOperation {
}

export namespace CKFetchShareMetadataOperation {
}

export namespace CKFetchShareParticipantsOperation {
}

export namespace CKFetchSubscriptionsOperation {
}

export namespace CKFetchWebAuthTokenOperation {
}

export namespace CKLocationSortDescriptor {
}

export namespace CKModifyRecordZonesOperation {
}

export namespace CKModifyRecordsOperation {
  export enum RecordSavePolicy {
    IfServerRecordUnchanged = 0,
    ChangedKeys = 1,
    AllKeys = 2
  }

}

export namespace CKModifySubscriptionsOperation {
}

export namespace CKNotification {
  export class ID extends NSObject {
  }
  
  export namespace CKQueryNotification {
    export enum Reason {
      Created = 1,
      Updated = 2,
      Deleted = 3
    }
  }

  export enum NotificationType {
    Query = 1,
    RecordZone = 2,
    ReadNotification = 3,
    Database = 4
  }

}

export namespace CKOperation {
  export class Configuration extends NSObject {
    allowsCellularAccess: boolean;
    setAllowsCellularAccess(_: boolean);
    container: CKContainer;
    setContainer(_: CKContainer);
    isLongLived: boolean;
    setLongLived(_: boolean);
    qualityOfService: NSObjCRuntime.QualityOfService;
    setQualityOfService(_: NSObjCRuntime.QualityOfService);
    timeoutIntervalForRequest: number;
    setTimeoutIntervalForRequest(_: number);
    timeoutIntervalForResource: number;
    setTimeoutIntervalForResource(_: number);
  }
  
}

export namespace CKOperationGroup {
  export enum TransferSize {
    Unknown = 0,
    Kilobytes = 1,
    Megabytes = 2,
    TensOfMegabytes = 3,
    HundredsOfMegabytes = 4,
    Gigabytes = 5,
    TensOfGigabytes = 6,
    HundredsOfGigabytes = 7
  }

}

export namespace CKQuery {
}

export namespace CKQueryOperation {
  export class Cursor extends NSObject {
  }
  
}

export namespace CKRecord {
  export class ID extends NSObject {
    recordName: string;
    zoneID: CKRecordZone.ID;
    static createWithRecordName(_: string): CKRecord.ID;
    static createWithRecordNameWithZoneID(_: string, zoneID: CKRecordZone.ID): CKRecord.ID;
  }
  
  export class Reference extends NSObject {
    recordID: CKRecord.ID;
    referenceAction: CKRecord.Reference.CKRecord_Reference_Action;
    static createWithRecordWithAction(_: CKRecord, action: CKRecord.Reference.CKRecord_Reference_Action): CKRecord.Reference;
    static createWithRecordIDWithAction(_: CKRecord.ID, action: CKRecord.Reference.CKRecord_Reference_Action): CKRecord.Reference;
  }
  
}

export namespace CKRecordZone {
  export class ID extends NSObject {
    ownerName: string;
    zoneName: string;
    static createWithZoneNameWithOwnerName(_: string, ownerName: string): CKRecordZone.ID;
  }
  
  export enum Capabilities {
    FetchChanges = 1,
    Atomic = 2,
    Sharing = 4
  }

}

export namespace CKShare {
  export class Metadata extends NSObject {
    containerIdentifier: string;
    ownerIdentity: CKUserIdentity;
    participantPermission: CKShare.Participant.CKShare_Participant_Permission;
    participantRole: CKShare.Participant.CKShare_Participant_Role;
    participantStatus: CKShare.Participant.CKShare_Participant_AcceptanceStatus;
    rootRecord: CKRecord;
    rootRecordID: CKRecord.ID;
    share: CKShare;
  }
  
  export class Participant extends NSObject {
    acceptanceStatus: CKShare.Participant.CKShare_Participant_AcceptanceStatus;
    permission: CKShare.Participant.CKShare_Participant_Permission;
    setPermission(_: CKShare.Participant.CKShare_Participant_Permission);
    role: CKShare.Participant.CKShare_Participant_Role;
    setRole(_: CKShare.Participant.CKShare_Participant_Role);
    userIdentity: CKUserIdentity;
  }
  
}

export namespace CKSubscription {
  export class NotificationInfo extends NSObject {
    alertActionLocalizationKey: string;
    setAlertActionLocalizationKey(_: string);
    alertBody: string;
    setAlertBody(_: string);
    alertLaunchImage: string;
    setAlertLaunchImage(_: string);
    alertLocalizationKey: string;
    setAlertLocalizationKey(_: string);
    category: string;
    setCategory(_: string);
    collapseIDKey: string;
    setCollapseIDKey(_: string);
    desiredKeys: string[];
    setDesiredKeys(_: string[]);
    shouldBadge: boolean;
    setShouldBadge(_: boolean);
    shouldSendContentAvailable: boolean;
    setShouldSendContentAvailable(_: boolean);
    shouldSendMutableContent: boolean;
    setShouldSendMutableContent(_: boolean);
    soundName: string;
    setSoundName(_: string);
    subtitle: string;
    setSubtitle(_: string);
    subtitleLocalizationKey: string;
    setSubtitleLocalizationKey(_: string);
    title: string;
    setTitle(_: string);
    titleLocalizationKey: string;
    setTitleLocalizationKey(_: string);
  }
  
  export namespace CKQuerySubscription {
    export enum Options {
      RecordCreation = 1,
      RecordUpdate = 2,
      RecordDeletion = 4,
      ce = 8
    }
  }

  export enum SubscriptionType {
    Query = 1,
    RecordZone = 2,
    Database = 3
  }

}

export namespace CKUserIdentity {
  export class LookupInfo extends NSObject {
    static lookupInfosWithEmails(_: string[]): CKUserIdentity.LookupInfo[];
    static lookupInfosWithPhoneNumbers(_: string[]): CKUserIdentity.LookupInfo[];
    static lookupInfosWithRecordIDs(_: CKRecord.ID[]): CKUserIdentity.LookupInfo[];
    emailAddress: string;
    phoneNumber: string;
    userRecordID: CKRecord.ID;
    static createWithEmailAddress(_: string): CKUserIdentity.LookupInfo;
    static createWithPhoneNumber(_: string): CKUserIdentity.LookupInfo;
    static createWithUserRecordID(_: CKRecord.ID): CKUserIdentity.LookupInfo;
  }
  
}

export namespace CLBeaconIdentityConstraint {
}

export namespace CLBeaconRegion {
}

export namespace CLCircularRegion {
}

export namespace CLError {
  export enum CLError {
    LocationUnknown = 0,
    Denied = 1,
    Network = 2,
    HeadingFailure = 3,
    RegionMonitoringDenied = 4,
    RegionMonitoringFailure = 5,
    RegionMonitoringSetupDelayed = 6,
    RegionMonitoringResponseDelayed = 7,
    GeocodeFoundNoResult = 8,
    GeocodeFoundPartialResult = 9,
    GeocodeCanceled = 10,
    DeferredFailed = 11,
    DeferredNotUpdatingLocation = 12,
    DeferredAccuracyTooLow = 13,
    DeferredDistanceFiltered = 14,
    DeferredCanceled = 15,
    RangingUnavailable = 16,
    RangingFailure = 17
  }

}

export namespace CLGeocoder {
}

export namespace CLHeading {
}

export namespace CLLocation {
}

export namespace CLLocationManager {
  export enum CLActivityType {
    Other = 1,
    AutomotiveNavigation = 2,
    Fitness = 3,
    OtherNavigation = 4,
    Airborne = 5
  }

  export enum CLAuthorizationStatus {
    NotDetermined = 0,
    Restricted = 1,
    Denied = 2,
    AuthorizedAlways = 3,
    AuthorizedWhenInUse = 4,
    Authorized = 3
  }

  export enum CLDeviceOrientation {
    Unknown = 0,
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeLeft = 3,
    LandscapeRight = 4,
    FaceUp = 5,
    FaceDown = 6
  }

}

export namespace CLPlacemark {
}

export namespace CLRegion {
  export enum CLProximity {
    Unknown = 0,
    Immediate = 1,
    Near = 2,
    Far = 3
  }

  export enum CLRegionState {
    Unknown = 0,
    Inside = 1,
    Outside = 2
  }

}

export namespace CLVisit {
}

export namespace CMAltimeter {
}

export namespace CMAttitude {
  export enum CMAttitudeReferenceFrame {
    ArbitraryZVertical = 1,
    ArbitraryCorrectedZVertical = 2,
    MagneticNorthZVertical = 4,
    TrueNorthZVertical = 8
  }

}

export namespace CMAuthorization {
  export enum CMAuthorizationStatus {
    NotDetermined = 0,
    Restricted = 1,
    Denied = 2,
    Authorized = 3
  }

}

export namespace CMDeviceMotion {
  export enum CMMagneticFieldCalibrationAccuracy {
    Uncalibrated = -1,
    Low = 0,
    Medium = 1,
    High = 2
  }

}

export namespace CMError {
  export enum CMError {
    NULL = 100,
    DeviceRequiresMovement = 101,
    TrueNorthNotAvailable = 102,
    Unknown = 103,
    MotionActivityNotAvailable = 104,
    MotionActivityNotAuthorized = 105,
    MotionActivityNotEntitled = 106,
    InvalidParameter = 107,
    InvalidAction = 108,
    NotAvailable = 109,
    NotEntitled = 110,
    NotAuthorized = 111
  }

}

export namespace CMLogItem {
}

export namespace CMMotionActivity {
  export enum CMMotionActivityConfidence {
    Low = 0,
    Medium = 1,
    High = 2
  }

}

export namespace CMMotionActivityManager {
}

export namespace CMMotionManager {
}

export namespace CMMovementDisorderManager {
}

export namespace CMPedometer {
  export enum CMPedometerEventType {
    Pause = 0,
    Resume = 1
  }

}

export namespace CMSensorRecorder {
}

export namespace CMStepCounter {
}

export namespace CMTime {
  export enum CMTimeFlags {
    _Valid = 1,
    _HasBeenRounded = 2,
    _PositiveInfinity = 4,
    _NegativeInfinity = 8,
    _Indefinite = 16,
    _ImpliedValueFlagsMask = 28
  }

  export enum CMTimeRoundingMethod {
    _RoundHalfAwayFromZero = 1,
    _RoundTowardZero = 2,
    _RoundAwayFromZero = 3,
    _QuickTime = 4,
    _RoundTowardPositiveInfinity = 5,
    _RoundTowardNegativeInfinity = 6,
    _Default = 1
  }

}

export namespace CSPerson {
}

export namespace CSSearchQuery {
  export enum CSSearchQueryErrorCode {
    Unknown = -2000,
    IndexUnreachable = -2001,
    InvalidQuery = -2002,
    Cancelled = -2003
  }

}

export namespace CSSearchableIndex {
  export enum CSIndexErrorCode {
    UnknownError = -1,
    IndexUnavailableError = -1000,
    InvalidItemError = -1001,
    InvalidClientStateError = -1002,
    RemoteConnectionError = -1003,
    QuotaExceeded = -1004,
    IndexingUnsupported = -1005
  }

}

export namespace CSSearchableItem {
}

export namespace CSSearchableItemAttributeSet {
}

export namespace CTFont {
  export enum CTFontOptions {
    Default = 0,
    PreventAutoActivation = 1,
    PreferSystemFont = 4
  }

  export enum CTFontTableOptions {
    NoOptions = 0,
    ExcludeSynthetic = 1
  }

  export enum CTFontUIFontType {
    UIFontNone = 4294967295,
    UIFontUser = 0,
    UIFontUserFixedPitch = 1,
    UIFontSystem = 2,
    UIFontEmphasizedSystem = 3,
    UIFontSmallSystem = 4,
    UIFontSmallEmphasizedSystem = 5,
    UIFontMiniSystem = 6,
    UIFontMiniEmphasizedSystem = 7,
    UIFontViews = 8,
    UIFontApplication = 9,
    UIFontLabel = 10,
    UIFontMenuTitle = 11,
    UIFontMenuItem = 12,
    UIFontMenuItemMark = 13,
    UIFontMenuItemCmdKey = 14,
    UIFontWindowTitle = 15,
    UIFontPushButton = 16,
    UIFontUtilityWindowTitle = 17,
    UIFontAlertHeader = 18,
    UIFontSystemDetail = 19,
    UIFontEmphasizedSystemDetail = 20,
    UIFontToolbar = 21,
    UIFontSmallToolbar = 22,
    UIFontMessage = 23,
    UIFontPalette = 24,
    UIFontToolTip = 25,
    UIFontControlContent = 26,
    NoFontType = 4294967295,
    UserFontType = 0,
    UserFixedPitchFontType = 1,
    SystemFontType = 2,
    EmphasizedSystemFontType = 3,
    SmallSystemFontType = 4,
    SmallEmphasizedSystemFontType = 5,
    MiniSystemFontType = 6,
    MiniEmphasizedSystemFontType = 7,
    ViewsFontType = 8,
    ApplicationFontType = 9,
    LabelFontType = 10,
    MenuTitleFontType = 11,
    MenuItemFontType = 12,
    MenuItemMarkFontType = 13,
    MenuItemCmdKeyFontType = 14,
    WindowTitleFontType = 15,
    PushButtonFontType = 16,
    UtilityWindowTitleFontType = 17,
    AlertHeaderFontType = 18,
    SystemDetailFontType = 19,
    EmphasizedSystemDetailFontType = 20,
    ToolbarFontType = 21,
    SmallToolbarFontType = 22,
    MessageFontType = 23,
    PaletteFontType = 24,
    ToolTipFontType = 25,
    ControlContentFontType = 26
  }

}

export namespace CTFontCollection {
  export enum CTFontCollectionCopyOptions {
    DefaultOptions = 0,
    Unique = 1,
    StandardSort = 2
  }

}

export namespace CTFontDescriptor {
  export enum CTFontDescriptorMatchingState {
    DidBegin = 0,
    DidFinish = 1,
    WillBeginQuerying = 2,
    Stalled = 3,
    WillBeginDownloading = 4,
    Downloading = 5,
    DidFinishDownloading = 6,
    DidMatch = 7,
    DidFailWithError = 8
  }

  export enum CTFontFormat {
    Unrecognized = 0,
    OpenTypePostScript = 1,
    OpenTypeTrueType = 2,
    TrueType = 3,
    PostScript = 4,
    Bitmap = 5
  }

  export enum CTFontOrientation {
    OrientationDefault = 0,
    OrientationHorizontal = 1,
    OrientationVertical = 2,
    DefaultOrientation = 0,
    HorizontalOrientation = 1,
    VerticalOrientation = 2
  }

}

export namespace CTFontManager {
  export enum CTFontManagerAutoActivationSetting {
    Default = 0,
    Disabled = 1,
    Enabled = 2,
    PromptUser = 3
  }

  export enum CTFontManagerScope {
    None = 0,
    Process = 1,
    Persistent = 2,
    Session = 3,
    User = 2
  }

}

export namespace CTFontManagerErrors {
  export enum CTFontManagerError {
    FileNotFound = 101,
    InsufficientPermissions = 102,
    UnrecognizedFormat = 103,
    InvalidFontData = 104,
    AlreadyRegistered = 105,
    ExceededResourceLimit = 106,
    AssetNotFound = 107,
    NotRegistered = 201,
    InUse = 202,
    SystemRequired = 203,
    RegistrationFailed = 301,
    MissingEntitlement = 302,
    InsufficientInfo = 303,
    CancelledByUser = 304,
    DuplicatedName = 305,
    InvalidFilePath = 306
  }

}

export namespace CTFontTraits {
  export enum CTFontStylisticClass {
    ClassUnknown = 0,
    ClassOldStyleSerifs = 268435456,
    ClassTransitionalSerifs = 536870912,
    ClassModernSerifs = 805306368,
    ClassClarendonSerifs = 1073741824,
    ClassSlabSerifs = 1342177280,
    ClassFreeformSerifs = 1879048192,
    ClassSansSerif = 2147483648,
    ClassOrnamentals = 2415919104,
    ClassScripts = 2684354560,
    ClassSymbolic = 3221225472,
    UnknownClass = 0,
    OldStyleSerifsClass = 268435456,
    TransitionalSerifsClass = 536870912,
    ModernSerifsClass = 805306368,
    ClarendonSerifsClass = 1073741824,
    SlabSerifsClass = 1342177280,
    FreeformSerifsClass = 1879048192,
    SansSerifClass = 2147483648,
    OrnamentalsClass = 2415919104,
    ScriptsClass = 2684354560,
    SymbolicClass = 3221225472
  }

  export enum CTFontSymbolicTraits {
    TraitItalic = 1,
    TraitBold = 2,
    TraitExpanded = 32,
    TraitCondensed = 64,
    TraitMonoSpace = 1024,
    TraitVertical = 2048,
    TraitUIOptimized = 4096,
    TraitColorGlyphs = 8192,
    TraitComposite = 16384,
    TraitClassMask = 4026531840,
    ItalicTrait = 1,
    BoldTrait = 2,
    ExpandedTrait = 32,
    CondensedTrait = 64,
    MonoSpaceTrait = 1024,
    VerticalTrait = 2048,
    UIOptimizedTrait = 4096,
    ColorGlyphsTrait = 8192,
    CompositeTrait = 16384,
    ClassMaskTrait = 4026531840
  }

}

export namespace CTFrame {
  export enum CTFramePathFillRule {
    EvenOdd = 0,
    WindingNumber = 1
  }

  export enum CTFrameProgression {
    TopToBottom = 0,
    RightToLeft = 1,
    LeftToRight = 2
  }

}

export namespace CTGlyphInfo {
  export enum CTCharacterCollection {
    CharacterCollectionIdentityMapping = 0,
    CharacterCollectionAdobeCNS1 = 1,
    CharacterCollectionAdobeGB1 = 2,
    CharacterCollectionAdobeJapan1 = 3,
    CharacterCollectionAdobeJapan2 = 4,
    CharacterCollectionAdobeKorea1 = 5,
    IdentityMappingCharacterCollection = 0,
    AdobeCNS1CharacterCollection = 1,
    AdobeGB1CharacterCollection = 2,
    AdobeJapan1CharacterCollection = 3,
    AdobeJapan2CharacterCollection = 4,
    AdobeKorea1CharacterCollection = 5
  }

}

export namespace CTLine {
  export enum CTLineBoundsOptions {
    ExcludeTypographicLeading = 1,
    ExcludeTypographicShifts = 2,
    UseHangingPunctuation = 4,
    UseGlyphPathBounds = 8,
    UseOpticalBounds = 16,
    IncludeLanguageExtents = 32
  }

  export enum CTLineTruncationType {
    Start = 0,
    End = 1,
    Middle = 2
  }

}

export namespace CTParagraphStyle {
  export enum CTLineBreakMode {
    WordWrapping = 0,
    CharWrapping = 1,
    Clipping = 2,
    TruncatingHead = 3,
    TruncatingTail = 4,
    TruncatingMiddle = 5
  }

  export enum CTParagraphStyleSpecifier {
    Alignment = 0,
    FirstLineHeadIndent = 1,
    HeadIndent = 2,
    TailIndent = 3,
    TabStops = 4,
    DefaultTabInterval = 5,
    LineBreakMode = 6,
    LineHeightMultiple = 7,
    MaximumLineHeight = 8,
    MinimumLineHeight = 9,
    LineSpacing = 10,
    ParagraphSpacing = 11,
    ParagraphSpacingBefore = 12,
    BaseWritingDirection = 13,
    MaximumLineSpacing = 14,
    MinimumLineSpacing = 15,
    LineSpacingAdjustment = 16,
    LineBoundsOptions = 17,
    Count = 18
  }

  export enum CTTextAlignment {
    TextAlignmentLeft = 0,
    TextAlignmentRight = 1,
    TextAlignmentCenter = 2,
    TextAlignmentJustified = 3,
    TextAlignmentNatural = 4,
    LeftTextAlignment = 0,
    RightTextAlignment = 1,
    CenterTextAlignment = 2,
    JustifiedTextAlignment = 3,
    NaturalTextAlignment = 4
  }

  export enum CTWritingDirection {
    Natural = -1,
    LeftToRight = 0,
    RightToLeft = 1
  }

}

export namespace CTRubyAnnotation {
  export enum CTRubyAlignment {
    Invalid = 255,
    Auto = 0,
    Start = 1,
    Center = 2,
    End = 3,
    DistributeLetter = 4,
    DistributeSpace = 5,
    LineEdge = 6
  }

  export enum CTRubyOverhang {
    Invalid = 255,
    Auto = 0,
    Start = 1,
    End = 2,
    None = 3
  }

  export enum CTRubyPosition {
    Before = 0,
    After = 1,
    InterCharacter = 2,
    Inline = 3,
    Count = 4
  }

}

export namespace CTRun {
  export enum CTRunStatus {
    NoStatus = 0,
    RightToLeft = 1,
    NonMonotonic = 2,
    HasNonIdentityMatrix = 4
  }

}

export namespace CTStringAttributes {
  export enum CTUnderlineStyle {
    None = 0,
    Single = 1,
    Thick = 2,
    Double = 9
  }

  export enum CTUnderlineStyleModifiers {
    Solid = 0,
    Dot = 256,
    Dash = 512,
    DashDot = 768,
    DashDotDot = 1024
  }

}

export namespace CVBase {
  export enum CVSMPTETimeFlags {
    Valid = 1,
    Running = 2
  }

  export enum CVSMPTETimeType {
    e24 = 0,
    e25 = 1,
    e30Drop = 2,
    e30 = 3,
    e2997 = 4,
    e2997Drop = 5,
    e60 = 6,
    e5994 = 7
  }

  export enum CVTimeFlags {
    kCVTimeIsIndefinite = 1
  }

  export enum CVTimeStampFlags {
    VideoTimeValid = 1,
    HostTimeValid = 2,
    SMPTETimeValid = 4,
    VideoRefreshPeriodValid = 8,
    RateScalarValid = 16,
    TopField = 65536,
    BottomField = 131072,
    VideoHostTimeValid = 3,
    IsInterlaced = 196608
  }

}

export namespace CVBuffer {
  export enum CVAttachmentMode {
    dNotPropagate = 0,
    dPropagate = 1
  }

}

export namespace CVPixelBuffer {
  export enum CVPixelBufferLockFlags {
    kCVPixelBufferLock_ReadOnly = 1
  }

}

export namespace CVPixelBufferPool {
  export enum CVPixelBufferPoolFlushFlags {
    kCVPixelBufferPoolFlushExcessBuffers = 1
  }

}

export namespace CWChannel {
}

export namespace CWConfiguration {
}

export namespace CWInterface {
}

export namespace CWNetwork {
}

export namespace CWNetworkProfile {
}

export namespace CWWiFiClient {
}

export namespace Calendar {
  export enum Options {
    WrapComponents = 1,
    MatchStrictly = 2,
    SearchBackwards = 4,
    MatchPreviousTimePreservingSmallerUnits = 256,
    MatchNextTimePreservingSmallerUnits = 512,
    MatchNextTime = 1024,
    MatchFirst = 4096,
    MatchLast = 8192
  }

  export enum Unit {
    CalendarUnitEra = 2,
    CalendarUnitYear = 4,
    CalendarUnitMonth = 8,
    CalendarUnitDay = 16,
    CalendarUnitHour = 32,
    CalendarUnitMinute = 64,
    CalendarUnitSecond = 128,
    CalendarUnitWeekday = 512,
    CalendarUnitWeekdayOrdinal = 1024,
    CalendarUnitQuarter = 2048,
    CalendarUnitWeekOfMonth = 4096,
    CalendarUnitWeekOfYear = 8192,
    CalendarUnitYearForWeekOfYear = 16384,
    CalendarUnitNanosecond = 32768,
    CalendarUnitCalendar = 1048576,
    CalendarUnitTimeZone = 2097152,
    EraCalendarUnit = 2,
    YearCalendarUnit = 4,
    MonthCalendarUnit = 8,
    DayCalendarUnit = 16,
    HourCalendarUnit = 32,
    MinuteCalendarUnit = 64,
    SecondCalendarUnit = 128,
    WeekCalendarUnit = 256,
    WeekdayCalendarUnit = 512,
    WeekdayOrdinalCalendarUnit = 1024,
    QuarterCalendarUnit = 2048,
    WeekOfMonthCalendarUnit = 4096,
    WeekOfYearCalendarUnit = 8192,
    YearForWeekOfYearCalendarUnit = 16384,
    CalendarCalendarUnit = 1048576,
    TimeZoneCalendarUnit = 2097152
  }

}

export namespace CollectionDifference {
  export enum NSOrderedCollectionDifferenceCalculationOptions {
    OmitInsertedObjects = 1,
    OmitRemovedObjects = 2,
    InferMoves = 4
  }

}

export namespace CoreAudioBaseTypes {
  export enum AudioChannelBitmap {
    _Left = 1,
    _Right = 2,
    _Center = 4,
    _LFEScreen = 8,
    _LeftSurround = 16,
    _RightSurround = 32,
    _LeftCenter = 64,
    _RightCenter = 128,
    _CenterSurround = 256,
    _LeftSurroundDirect = 512,
    _RightSurroundDirect = 1024,
    _TopCenterSurround = 2048,
    _VerticalHeightLeft = 4096,
    _VerticalHeightCenter = 8192,
    _VerticalHeightRight = 16384,
    _TopBackLeft = 32768,
    _TopBackCenter = 65536,
    _TopBackRight = 131072,
    _LeftTopFront = 4096,
    _CenterTopFront = 8192,
    _RightTopFront = 16384,
    _LeftTopMiddle = 2097152,
    _CenterTopMiddle = 2048,
    _RightTopMiddle = 8388608,
    _LeftTopRear = 16777216,
    _CenterTopRear = 33554432,
    _RightTopRear = 67108864
  }

  export enum AudioChannelCoordinateIndex {
    _LeftRight = 0,
    _BackFront = 1,
    _DownUp = 2,
    _Azimuth = 0,
    _Elevation = 1,
    _Distance = 2
  }

  export enum AudioChannelFlags {
    _AllOff = 0,
    _RectangularCoordinates = 1,
    _SphericalCoordinates = 2,
    _Meters = 4
  }

  export enum AudioTimeStampFlags {
    NothingValid = 0,
    SampleTimeValid = 1,
    HostTimeValid = 2,
    RateScalarValid = 4,
    WordClockTimeValid = 8,
    SMPTETimeValid = 16,
    SampleHostTimeValid = 3
  }

  export enum MPEG4ObjectID {
    t_AAC_Main = 1,
    t_AAC_LC = 2,
    t_AAC_SSR = 3,
    t_AAC_LTP = 4,
    t_AAC_SBR = 5,
    t_AAC_Scalable = 6,
    t_TwinVQ = 7,
    t_CELP = 8,
    t_HVXC = 9
  }

  export enum SMPTETimeFlags {
    Unknown = 0,
    Valid = 1,
    Running = 2
  }

  export enum SMPTETimeType {
    e24 = 0,
    e25 = 1,
    e30Drop = 2,
    e30 = 3,
    e2997 = 4,
    e2997Drop = 5,
    e60 = 6,
    e5994 = 7,
    e60Drop = 8,
    e5994Drop = 9,
    e50 = 10,
    e2398 = 11
  }

}

export namespace CoreWLANTypes {
  export enum CWChannelBand {
    dUnknown = 0,
    d2GHz = 1,
    d5GHz = 2
  }

  export enum CWChannelWidth {
    hUnknown = 0,
    h20MHz = 1,
    h40MHz = 2,
    h80MHz = 3,
    h160MHz = 4
  }

  export enum CWCipherKeyFlags {
    None = 0,
    Unicast = 2,
    Multicast = 4,
    Tx = 8,
    Rx = 16
  }

  export enum CWErr {
    NoErr = 0,
    EAPOLErr = 1,
    InvalidParameterErr = -3900,
    NoMemoryErr = -3901,
    UnknownErr = -3902,
    NotSupportedErr = -3903,
    InvalidFormatErr = -3904,
    TimeoutErr = -3905,
    UnspecifiedFailureErr = -3906,
    UnsupportedCapabilitiesErr = -3907,
    ReassociationDeniedErr = -3908,
    AssociationDeniedErr = -3909,
    AuthenticationAlgorithmUnsupportedErr = -3910,
    InvalidAuthenticationSequenceNumberErr = -3911,
    ChallengeFailureErr = -3912,
    APFullErr = -3913,
    UnsupportedRateSetErr = -3914,
    ShortSlotUnsupportedErr = -3915,
    DSSSOFDMUnsupportedErr = -3916,
    InvalidInformationElementErr = -3917,
    InvalidGroupCipherErr = -3918,
    InvalidPairwiseCipherErr = -3919,
    InvalidAKMPErr = -3920,
    UnsupportedRSNVersionErr = -3921,
    InvalidRSNCapabilitiesErr = -3922,
    CipherSuiteRejectedErr = -3923,
    InvalidPMKErr = -3924,
    SupplicantTimeoutErr = -3925,
    HTFeaturesNotSupportedErr = -3926,
    PCOTransitionTimeNotSupportedErr = -3927,
    ReferenceNotBoundErr = -3928,
    IPCFailureErr = -3929,
    OperationNotPermittedErr = -3930,
    Err = -3931
  }

  export enum CWEventType {
    None = 0,
    PowerDidChange = 1,
    SSIDDidChange = 2,
    BSSIDDidChange = 3,
    CountryCodeDidChange = 4,
    LinkDidChange = 5,
    LinkQualityDidChange = 6,
    ModeDidChange = 7,
    ScanCacheUpdated = 8,
    VirtualInterfaceStateChanged = 9,
    RangingReportEvent = 10,
    Unknown = 9223372036854775807
  }

  export enum CWIBSSModeSecurity {
    None = 0,
    WEP40 = 1,
    WEP104 = 2
  }

  export enum CWInterfaceMode {
    None = 0,
    Station = 1,
    IBSS = 2,
    HostAP = 3
  }

  export enum CWKeychainDomain {
    None = 0,
    User = 1,
    System = 2
  }

  export enum CWPHYMode {
    eNone = 0,
    e11a = 1,
    e11b = 2,
    e11g = 3,
    e11n = 4,
    e11ac = 5
  }

  export enum CWSecurity {
    None = 0,
    WEP = 1,
    WPAPersonal = 2,
    WPAPersonalMixed = 3,
    WPA2Personal = 4,
    Personal = 5,
    DynamicWEP = 6,
    WPAEnterprise = 7,
    WPAEnterpriseMixed = 8,
    WPA2Enterprise = 9,
    Enterprise = 10,
    WPA3Personal = 11,
    WPA3Enterprise = 12,
    WPA3Transition = 13,
    Unknown = 9223372036854775807
  }

}

export namespace Data {
  export enum Base64DecodingOptions {
    NSDataBase64DecodingIgnoreUnknownCharacters = 1
  }

  export enum Base64EncodingOptions {
    ing64CharacterLineLength = 1,
    ing76CharacterLineLength = 2,
    ingEndLineWithCarriageReturn = 16,
    ingEndLineWithLineFeed = 32
  }

  export enum CompressionAlgorithm {
    LZFSE = 0,
    LZ4 = 1,
    LZMA = 2,
    Zlib = 3
  }

  export enum ReadingOptions {
    DataReadingMappedIfSafe = 1,
    DataReadingUncached = 2,
    DataReadingMappedAlways = 8,
    DataReadingMapped = 1,
    MappedRead = 1,
    UncachedRead = 2
  }

  export enum SearchOptions {
    Backwards = 1,
    Anchored = 2
  }

  export enum WritingOptions {
    DataWritingAtomic = 1,
    DataWritingWithoutOverwriting = 2,
    DataWritingFileProtectionNone = 268435456,
    DataWritingFileProtectionComplete = 536870912,
    DataWritingFileProtectionCompleteUnlessOpen = 805306368,
    DataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824,
    DataWritingFileProtectionMask = 4026531840,
    AtomicWrite = 1
  }

}

export namespace DateComponentsFormatter {
  export enum UnitsStyle {
    Positional = 0,
    Abbreviated = 1,
    Short = 2,
    Full = 3,
    SpellOut = 4,
    Brief = 5
  }

  export enum ZeroFormattingBehavior {
    None = 0,
    Default = 1,
    DropLeading = 2,
    DropMiddle = 4,
    DropTrailing = 8,
    DropAll = 14,
    Pad = 65536
  }

}

export namespace DateFormatter {
  export enum Behavior {
    rDefault = 0,
    r10_0 = 1000,
    r10_4 = 1040
  }

  export enum Style {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4
  }

}

export namespace DateIntervalFormatter {
  export enum Style {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4
  }

}

export namespace DistributedNotificationCenter {
  export enum Options {
    DeliverImmediately = 1,
    PostToAllSessions = 2
  }

  export enum SuspensionBehavior {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4
  }

}

export namespace EnergyFormatter {
  export enum Unit {
    Joule = 11,
    Kilojoule = 14,
    Calorie = 1793,
    Kilocalorie = 1794
  }

}

export namespace FileManager {
  export class DirectoryEnumerator<ObjectType> extends NSEnumerator<ObjectType> {
    directoryAttributes: Map<string, any>;
    fileAttributes: Map<string, any>;
    isEnumeratingDirectoryPostOrder: boolean;
    level: number;
    skipDescendants(): void;
    skipDescendents(): void;
  }
  
  export enum DirectoryEnumerationOptions {
    SkipsSubdirectoryDescendants = 1,
    SkipsPackageDescendants = 2,
    SkipsHiddenFiles = 4,
    IncludesDirectoriesPostOrder = 8,
    ProducesRelativePathURLs = 16
  }

  export enum ItemReplacementOptions {
    UsingNewMetadataOnly = 1,
    WithoutDeletingBackupItem = 2
  }

  export enum SearchPathDirectory {
    ApplicationDirectory = 1,
    DemoApplicationDirectory = 2,
    DeveloperApplicationDirectory = 3,
    AdminApplicationDirectory = 4,
    LibraryDirectory = 5,
    DeveloperDirectory = 6,
    UserDirectory = 7,
    DocumentationDirectory = 8,
    DocumentDirectory = 9,
    CoreServiceDirectory = 10,
    AutosavedInformationDirectory = 11,
    DesktopDirectory = 12,
    CachesDirectory = 13,
    ApplicationSupportDirectory = 14,
    DownloadsDirectory = 15,
    InputMethodsDirectory = 16,
    MoviesDirectory = 17,
    MusicDirectory = 18,
    PicturesDirectory = 19,
    PrinterDescriptionDirectory = 20,
    SharedPublicDirectory = 21,
    PreferencePanesDirectory = 22,
    ApplicationScriptsDirectory = 23,
    ItemReplacementDirectory = 99,
    AllApplicationsDirectory = 100,
    AllLibrariesDirectory = 101,
    TrashDirectory = 102
  }

  export enum SearchPathDomainMask {
    UserDomainMask = 1,
    LocalDomainMask = 2,
    NetworkDomainMask = 4,
    SystemDomainMask = 8,
    AllDomainsMask = 65535
  }

  export enum URLRelationship {
    Contains = 0,
    Same = 1,
    Other = 2
  }

  export enum UnmountOptions {
    AllPartitionsAndEjectDisk = 1,
    WithoutUI = 2
  }

  export enum VolumeEnumerationOptions {
    SkipHiddenVolumes = 2,
    ProduceFileReferenceURLs = 4
  }

}

export namespace FileWrapper {
  export enum ReadingOptions {
    Immediate = 1,
    WithoutMapping = 2
  }

  export enum WritingOptions {
    Atomic = 1,
    WithNameUpdating = 2
  }

}

export namespace Formatter {
  export enum Context {
    Unknown = 0,
    Dynamic = 1,
    Standalone = 2,
    ListItem = 3,
    BeginningOfSentence = 4,
    MiddleOfSentence = 5
  }

  export enum UnitStyle {
    Short = 1,
    Medium = 2,
    Long = 3
  }

}

export namespace HTTPCookieStorage {
  export namespace HTTPCookie {
    export enum AcceptPolicy {
      Always = 0,
      Never = 1,
      OnlyFromMainDocumentDomain = 2
    }
  }

}

export namespace IKCameraDeviceView {
  export enum IKCameraDeviceViewDisplayMode {
    None = -1,
    Table = 0,
    Icon = 1
  }

  export enum IKCameraDeviceViewTransferMode {
    FileBased = 0,
    MemoryBased = 1
  }

}

export namespace IKDeviceBrowserView {
  export enum IKDeviceBrowserViewDisplayMode {
    Table = 0,
    Outline = 1,
    Icon = 2
  }

}

export namespace IKFilterBrowserPanel {
}

export namespace IKFilterBrowserView {
}

export namespace IKFilterUIView {
}

export namespace IKImageBrowserCell {
  export enum IKImageBrowserCellState {
    NoImage = 0,
    Invalid = 1,
    Ready = 2
  }

}

export namespace IKImageBrowserView {
  export enum IKImageBrowserDropOperation {
    On = 0,
    Before = 1
  }

}

export namespace IKImageEditPanel {
}

export namespace IKImageView {
}

export namespace IKPictureTaker {
}

export namespace IKSaveOptions {
}

export namespace IKScannerDeviceView {
  export enum IKScannerDeviceViewDisplayMode {
    None = -1,
    Simple = 0,
    Advanced = 1
  }

  export enum IKScannerDeviceViewTransferMode {
    FileBased = 0,
    MemoryBased = 1
  }

}

export namespace IKSlideshow {
}

export namespace ISO8601DateFormatter {
  export enum Options {
    WithYear = 1,
    WithMonth = 2,
    WithWeekOfYear = 4,
    WithDay = 16,
    WithTime = 32,
    WithTimeZone = 64,
    WithSpaceBetweenDateAndTime = 128,
    WithDashSeparatorInDate = 256,
    WithColonSeparatorInTime = 512,
    WithColonSeparatorInTimeZone = 1024,
    WithFractionalSeconds = 2048,
    WithFullDate = 275,
    WithFullTime = 1632,
    WithInternetDateTime = 1907
  }

}

export namespace JSONSerialization {
  export enum ReadingOptions {
    MutableContainers = 1,
    MutableLeaves = 2,
    FragmentsAllowed = 4,
    AllowFragments = 4
  }

  export enum WritingOptions {
    PrettyPrinted = 1,
    SortedKeys = 2,
    FragmentsAllowed = 4,
    WithoutEscapingSlashes = 8
  }

}

export namespace LSInfo {
  export enum LSAcceptanceFlags {
    Default = 1,
    AllowLoginUI = 2
  }

  export enum LSRolesMask {
    None = 1,
    Viewer = 2,
    Editor = 4,
    Shell = 8,
    All = 4294967295
  }

}

export namespace LSInfoDeprecated {
  export enum LSHandlerOptions {
    Default = 0,
    IgnoreCreator = 1
  }

  export enum LSItemInfoFlags {
    IsPlainFile = 1,
    IsPackage = 2,
    IsApplication = 4,
    IsContainer = 8,
    IsAliasFile = 16,
    IsSymlink = 32,
    IsInvisible = 64,
    IsNativeApp = 128,
    IsClassicApp = 256,
    AppPrefersNative = 512,
    AppPrefersClassic = 1024,
    AppIsScriptable = 2048,
    IsVolume = 4096,
    ExtensionIsHidden = 1048576
  }

  export enum LSRequestedInfo {
    Extension = 1,
    TypeCreator = 2,
    BasicFlagsOnly = 4,
    AppTypeFlags = 8,
    AllFlags = 16,
    IconAndKind = 32,
    ExtensionFlagsOnly = 64,
    AllInfo = 4294967295
  }

}

export namespace LSOpen {
  export enum LSLaunchFlags {
    Defaults = 1,
    AndPrint = 2,
    AndDisplayErrors = 64,
    DontAddToRecents = 256,
    DontSwitch = 512,
    Async = 65536,
    NewInstance = 524288,
    AndHide = 1048576,
    AndHideOthers = 2097152
  }

}

export namespace LengthFormatter {
  export enum Unit {
    Millimeter = 8,
    Centimeter = 9,
    Meter = 11,
    Kilometer = 14,
    Inch = 1281,
    Foot = 1282,
    Yard = 1283,
    Mile = 1284
  }

}

export namespace Locale {
  export enum LanguageDirection {
    Unknown = 0,
    LeftToRight = 1,
    RightToLeft = 2,
    TopToBottom = 3,
    BottomToTop = 4
  }

}

export namespace MDLabel {
  export enum MDLabelDomain {
    UserDomain = 0,
    LocalDomain = 1
  }

}

export namespace MDQuery {
  export enum MDQueryOptionFlags {
    Synchronous = 1,
    WantsUpdates = 4,
    AllowFSTranslation = 8
  }

  export enum MDQuerySortOptionFlags {
    kMDQueryReverseSortOrderFlag = 1
  }

}

export namespace MIDIServices {
  export enum MIDINotificationMessageID {
    SetupChanged = 1,
    ObjectAdded = 2,
    ObjectRemoved = 3,
    PropertyChanged = 4,
    ThruConnectionsChanged = 5,
    SerialPortOwnerChanged = 6,
    IOError = 7
  }

  export enum MIDIObjectType {
    _Other = -1,
    _Device = 0,
    _Entity = 1,
    _Source = 2,
    _Destination = 3,
    _ExternalDevice = 16,
    _ExternalEntity = 17,
    _ExternalSource = 18,
    _ExternalDestination = 19
  }

}

export namespace MIDIThruConnection {
  export enum MIDITransformControlType {
    e_7Bit = 0,
    e_14Bit = 1,
    e_7BitRPN = 2,
    e_14BitRPN = 3,
    e_7BitNRPN = 4,
    e_14BitNRPN = 5
  }

  export enum MIDITransformType {
    _None = 0,
    _FilterOut = 1,
    _MapControl = 2,
    _Add = 8,
    _Scale = 9,
    _MinValue = 10,
    _MaxValue = 11,
    _MapValue = 12
  }

}

export namespace MLArrayBatchProvider {
}

export namespace MLDictionaryConstraint {
}

export namespace MLDictionaryFeatureProvider {
}

export namespace MLFeatureDescription {
}

export namespace MLFeatureType {
  export enum MLFeatureType {
    Invalid = 0,
    Int64 = 1,
    Double = 2,
    String = 3,
    Image = 4,
    MultiArray = 5,
    Dictionary = 6,
    Sequence = 7
  }

}

export namespace MLFeatureValue {
}

export namespace MLImageConstraint {
}

export namespace MLImageSize {
}

export namespace MLImageSizeConstraint {
}

export namespace MLImageSizeConstraintType {
  export enum MLImageSizeConstraintType {
    Unspecified = 0,
    Enumerated = 2,
    Range = 3
  }

}

export namespace MLKey {
}

export namespace MLMetricKey {
}

export namespace MLModel {
}

export namespace MLModelConfiguration {
  export enum MLComputeUnits {
    CPUOnly = 0,
    CPUAndGPU = 1,
    All = 2
  }

}

export namespace MLModelDescription {
}

export namespace MLModelError {
  export enum MLModelError {
    Generic = 0,
    FeatureType = 1,
    IO = 3,
    CustomLayer = 4,
    CustomModel = 5,
    Update = 6,
    Parameters = 7
  }

}

export namespace MLMultiArray {
  export enum MLMultiArrayDataType {
    Double = 65600,
    Float32 = 65568,
    Int32 = 131104
  }

}

export namespace MLMultiArrayConstraint {
}

export namespace MLMultiArrayShapeConstraint {
}

export namespace MLMultiArrayShapeConstraintType {
  export enum MLMultiArrayShapeConstraintType {
    Unspecified = 1,
    Enumerated = 2,
    Range = 3
  }

}

export namespace MLNumericConstraint {
}

export namespace MLParameterDescription {
}

export namespace MLParameterKey {
}

export namespace MLPredictionOptions {
}

export namespace MLSequence {
}

export namespace MLSequenceConstraint {
}

export namespace MLTask {
  export enum MLTaskState {
    Suspended = 1,
    Running = 2,
    Cancelling = 3,
    Completed = 4,
    Failed = 5
  }

}

export namespace MLUpdateContext {
}

export namespace MLUpdateProgressEvent {
  export enum MLUpdateProgressEvent {
    TrainingBegin = 1,
    EpochEnd = 2,
    MiniBatchEnd = 4
  }

}

export namespace MLUpdateTask {
}

export namespace MassFormatter {
  export enum Unit {
    Gram = 11,
    Kilogram = 14,
    Ounce = 1537,
    Pound = 1538,
    Stone = 1539
  }

}

export namespace MeasurementFormatter {
  export enum UnitOptions {
    ProvidedUnit = 1,
    NaturalScale = 2,
    TemperatureWithoutUnit = 4
  }

}

export namespace NSATSTypesetter {
}

export namespace NSAccessibility {
  export enum AnnotationPosition {
    FullRange = 0,
    Start = 1,
    End = 2
  }

  export enum Orientation {
    Unknown = 0,
    Vertical = 1,
    Horizontal = 2
  }

  export enum RulerMarkerType {
    Unknown = 0,
    TabStopLeft = 1,
    TabStopRight = 2,
    TabStopCenter = 3,
    TabStopDecimal = 4,
    IndentHead = 5,
    IndentTail = 6,
    IndentFirstLine = 7
  }

  export enum SortDirection {
    Unknown = 0,
    Ascending = 1,
    Descending = 2
  }

  export enum Units {
    Unknown = 0,
    Inches = 1,
    Centimeters = 2,
    Points = 3,
    Picas = 4
  }

}

export namespace NSAccessibilityConstants {
  export namespace NSAccessibility {
    export enum AnnotationPosition {
      FullRange = 0,
      Start = 1,
      End = 2
    }
    export enum Orientation {
      Unknown = 0,
      Vertical = 1,
      Horizontal = 2
    }
    export enum RulerMarkerType {
      Unknown = 0,
      TabStopLeft = 1,
      TabStopRight = 2,
      TabStopCenter = 3,
      TabStopDecimal = 4,
      IndentHead = 5,
      IndentTail = 6,
      IndentFirstLine = 7
    }
    export enum SortDirection {
      Unknown = 0,
      Ascending = 1,
      Descending = 2
    }
    export enum Units {
      Unknown = 0,
      Inches = 1,
      Centimeters = 2,
      Points = 3,
      Picas = 4
    }
  }

  export enum NSAccessibilityPriorityLevel {
    Low = 10,
    Medium = 50,
    High = 90
  }

}

export namespace NSAccessibilityCustomAction {
}

export namespace NSAccessibilityCustomRotor {
  export class ItemResult extends NSObject {
    customLabel: string;
    setCustomLabel(_: string);
    itemLoadingToken: any;
    targetElement: any;
    targetRange: NSRange;
    setTargetRange(_: NSRange);
    static createWithItemLoadingTokenWithCustomLabel(_: any, customLabel: string): NSAccessibilityCustomRotor.ItemResult;
    static createWithTargetElement(_: any): NSAccessibilityCustomRotor.ItemResult;
  }
  
  export class SearchParameters extends NSObject {
    currentItem: NSAccessibilityCustomRotor.ItemResult;
    setCurrentItem(_: NSAccessibilityCustomRotor.ItemResult);
    filterString: string;
    setFilterString(_: string);
    searchDirection: NSAccessibilityCustomRotor.SearchDirection;
    setSearchDirection(_: NSAccessibilityCustomRotor.SearchDirection);
  }
  
  export enum RotorType {
    Custom = 0,
    Any = 1,
    Annotation = 2,
    BoldText = 3,
    Heading = 4,
    HeadingLevel1 = 5,
    HeadingLevel2 = 6,
    HeadingLevel3 = 7,
    HeadingLevel4 = 8,
    HeadingLevel5 = 9,
    HeadingLevel6 = 10,
    Image = 11,
    ItalicText = 12,
    Landmark = 13,
    Link = 14,
    List = 15,
    MisspelledWord = 16,
    Table = 17,
    TextField = 18,
    UnderlinedText = 19,
    VisitedLink = 20
  }

  export enum SearchDirection {
    Previous = 0,
    Next = 1
  }

}

export namespace NSAccessibilityElement {
}

export namespace AffineTransform {
}

export namespace NSAlert {
  export enum Style {
    Warning = 0,
    Informational = 1,
    Critical = 2
  }

}

export namespace NSAlignmentFeedbackFilter {
}

export namespace NSAnimation {
  export enum BlockingMode {
    Blocking = 0,
    Nonblocking = 1,
    NonblockingThreaded = 2
  }

  export enum Curve {
    EaseInOut = 0,
    EaseIn = 1,
    EaseOut = 2,
    Linear = 3
  }

}

export namespace NSAnimationContext {
}

export namespace NSAppearance {
}

export namespace NSAppleEventDescriptor {
  export enum SendOptions {
    NoReply = 1,
    QueueReply = 2,
    WaitForReply = 3,
    NeverInteract = 16,
    CanInteract = 32,
    AlwaysInteract = 48,
    CanSwitchLayer = 64,
    DontRecord = 4096,
    DontExecute = 8192,
    DontAnnotate = 65536,
    DefaultOptions = 35
  }

}

export namespace NSAppleEventManager {
}

export namespace NSAppleScript {
}

export namespace NSApplication {
  export enum ActivationOptions {
    AllWindows = 1,
    IgnoringOtherApps = 2
  }

  export enum ActivationPolicy {
    Regular = 0,
    Accessory = 1,
    Prohibited = 2
  }

  export enum DelegateReply {
    Success = 0,
    Cancel = 1,
    Failure = 2
  }

  export enum OcclusionState {
    NSApplicationOcclusionStateVisible = 2
  }

  export enum PresentationOptions {
    Default = 0,
    AutoHideDock = 1,
    HideDock = 2,
    AutoHideMenuBar = 4,
    HideMenuBar = 8,
    DisableAppleMenu = 16,
    DisableProcessSwitching = 32,
    DisableForceQuit = 64,
    DisableSessionTermination = 128,
    DisableHideApplication = 256,
    DisableMenuBarTransparency = 512,
    FullScreen = 1024,
    AutoHideToolbar = 2048,
    DisableCursorLocationAssistance = 4096
  }

  export enum PrintReply {
    Cancelled = 0,
    Success = 1,
    Failure = 3,
    ReplyLater = 2
  }

  export enum RemoteNotificationType {
    None = 0,
    Badge = 1,
    Sound = 2,
    Alert = 4
  }

  export enum RequestUserAttentionType {
    CriticalRequest = 0,
    InformationalRequest = 10
  }

  export enum TerminateReply {
    Cancel = 0,
    Now = 1,
    Later = 2
  }

  export enum WindowListOptions {
    NSWindowListOrderedFrontToBack = 1
  }

}

export namespace NSArrayController {
}

export namespace NSAtomicStore {
}

export namespace NSAtomicStoreCacheNode {
}

export namespace NSAttributeDescription {
  export enum NSAttributeType {
    UndefinedAttributeType = 0,
    Integer16AttributeType = 100,
    Integer32AttributeType = 200,
    Integer64AttributeType = 300,
    DecimalAttributeType = 400,
    DoubleAttributeType = 500,
    FloatAttributeType = 600,
    StringAttributeType = 700,
    BooleanAttributeType = 800,
    DateAttributeType = 900,
    BinaryDataAttributeType = 1000,
    UUIDAttributeType = 1100,
    URIAttributeType = 1200,
    TransformableAttributeType = 1800,
    ObjectIDAttributeType = 2000
  }

}

export namespace NSAttributedString {
  export enum EnumerationOptions {
    Reverse = 2,
    LongestEffectiveRangeNotRequired = 1048576
  }

  export enum NSTextScalingType {
    Standard = 0,
    iOS = 1
  }

  export enum NSUnderlineStyle {
    None = 0,
    Single = 1,
    Thick = 2,
    Double = 9,
    PatternSolid = 0,
    PatternDot = 256,
    PatternDash = 512,
    PatternDashDot = 768,
    PatternDashDotDot = 1024,
    ByWord = 32768
  }

  export enum NSWritingDirectionFormatType {
    Embedding = 0,
    Override = 2
  }

  export enum SpellingState {
    SpellingFlag = 1,
    GrammarFlag = 2
  }

}

export namespace NSAutoreleasePool {
}

export namespace NSBackgroundActivityScheduler {
  export enum Result {
    Finished = 1,
    Deferred = 2
  }

}

export namespace NSBatchDeleteRequest {
}

export namespace NSBatchInsertRequest {
}

export namespace NSBatchUpdateRequest {
}

export namespace NSBezierPath {
  export enum ElementType {
    MoveTo = 0,
    LineTo = 1,
    CurveTo = 2,
    ClosePath = 3
  }

  export enum LineCapStyle {
    Butt = 0,
    Round = 1,
    Square = 2
  }

  export enum LineJoinStyle {
    Miter = 0,
    Round = 1,
    Bevel = 2
  }

  export enum WindingRule {
    NonZero = 0,
    EvenOdd = 1
  }

}

export namespace NSBitmapImageRep {
  export enum FileType {
    TIFF = 0,
    BMP = 1,
    GIF = 2,
    JPEG = 3,
    PNG = 4,
    JPEG2000 = 5
  }

  export enum Format {
    AlphaFirst = 1,
    AlphaNonpremultiplied = 2,
    FloatingPointSamples = 4,
    SixteenBitLittleEndian = 256,
    ThirtyTwoBitLittleEndian = 512,
    SixteenBitBigEndian = 1024,
    ThirtyTwoBitBigEndian = 2048
  }

  export enum LoadStatus {
    UnknownType = -1,
    ReadingHeader = -2,
    WillNeedAllData = -3,
    InvalidData = -4,
    UnexpectedEOF = -5,
    Completed = -6
  }

  export enum TIFFCompression {
    None = 1,
    CCITTFAX3 = 3,
    CCITTFAX4 = 4,
    LZW = 5,
    JPEG = 6,
    NEXT = 32766,
    PackBits = 32773,
    OldJPEG = 32865
  }

}

export namespace NSBox {
  export enum BoxType {
    Primary = 0,
    Separator = 2,
    Custom = 4
  }

  export enum TitlePosition {
    NoTitle = 0,
    AboveTop = 1,
    AtTop = 2,
    BelowTop = 3,
    AboveBottom = 4,
    AtBottom = 5,
    BelowBottom = 6
  }

}

export namespace NSBrowser {
  export enum ColumnResizingType {
    NoColumnResizing = 0,
    AutoColumnResizing = 1,
    UserColumnResizing = 2
  }

  export enum DropOperation {
    On = 0,
    Above = 1
  }

}

export namespace NSBrowserCell {
}

export namespace Bundle {
}

export namespace NSButton {
  export enum BezelStyle {
    Rounded = 1,
    RegularSquare = 2,
    Disclosure = 5,
    ShadowlessSquare = 6,
    Circular = 7,
    TexturedSquare = 8,
    HelpButton = 9,
    SmallSquare = 10,
    TexturedRounded = 11,
    RoundRect = 12,
    Recessed = 13,
    RoundedDisclosure = 14,
    Inline = 15
  }

  export enum ButtonType {
    MomentaryLight = 0,
    PushOnPushOff = 1,
    Toggle = 2,
    Switch = 3,
    Radio = 4,
    MomentaryChange = 5,
    OnOff = 6,
    MomentaryPushIn = 7,
    Accelerator = 8,
    MultiLevelAccelerator = 9
  }

}

export namespace NSButtonCell {
  export namespace NSButton {
    export enum BezelStyle {
      Rounded = 1,
      RegularSquare = 2,
      Disclosure = 5,
      ShadowlessSquare = 6,
      Circular = 7,
      TexturedSquare = 8,
      HelpButton = 9,
      SmallSquare = 10,
      TexturedRounded = 11,
      RoundRect = 12,
      Recessed = 13,
      RoundedDisclosure = 14,
      Inline = 15
    }
    export enum ButtonType {
      MomentaryLight = 0,
      PushOnPushOff = 1,
      Toggle = 2,
      Switch = 3,
      Radio = 4,
      MomentaryChange = 5,
      OnOff = 6,
      MomentaryPushIn = 7,
      Accelerator = 8,
      MultiLevelAccelerator = 9
    }
  }

}

export namespace NSButtonTouchBarItem {
}

export namespace NSCIImageRep {
}

export namespace NSCache {
}

export namespace NSCandidateListTouchBarItem {
}

export namespace NSCell {
  export namespace NSControl {
    export enum ControlSize {
      Regular = 0,
      Small = 1,
      Mini = 2
    }
    export enum ImagePosition {
      NoImage = 0,
      ImageOnly = 1,
      ImageLeft = 2,
      ImageRight = 3,
      ImageBelow = 4,
      ImageAbove = 5,
      ImageOverlaps = 6,
      ImageLeading = 7,
      ImageTrailing = 8
    }
  }

  export namespace NSView {
    export enum AutoresizingMask {
      NotSizable = 0,
      MinXMargin = 1,
      WidthSizable = 2,
      MaxXMargin = 4,
      MinYMargin = 8,
      HeightSizable = 16,
      MaxYMargin = 32
    }
    export enum BackgroundStyle {
      Normal = 0,
      Emphasized = 1,
      Raised = 2,
      Lowered = 3
    }
    export enum LayerContentsPlacement {
      ScaleAxesIndependently = 0,
      ScaleProportionallyToFit = 1,
      ScaleProportionallyToFill = 2,
      Center = 3,
      Top = 4,
      TopRight = 5,
      Right = 6,
      BottomRight = 7,
      Bottom = 8,
      BottomLeft = 9,
      Left = 10,
      TopLeft = 11
    }
    export enum LayerContentsRedrawPolicy {
      Never = 0,
      OnSetNeedsDisplay = 1,
      DuringViewResize = 2,
      BeforeViewResize = 3,
      Crossfade = 4
    }
    export enum NSBorderType {
      NoBorder = 0,
      LineBorder = 1,
      BezelBorder = 2,
      GrooveBorder = 3
    }
  }

  export enum Attribute {
    CellDisabled = 0,
    CellState = 1,
    PushInCell = 2,
    CellEditable = 3,
    ChangeGrayCell = 4,
    CellHighlighted = 5,
    CellLightsByContents = 6,
    CellLightsByGray = 7,
    ChangeBackgroundCell = 8,
    CellLightsByBackground = 9,
    CellIsBordered = 10,
    CellHasOverlappingImage = 11,
    CellHasImageHorizontal = 12,
    CellHasImageOnLeftOrBottom = 13,
    CellChangesContents = 14,
    CellIsInsetButton = 15,
    CellAllowsMixedState = 16
  }

  export enum CellType {
    NullCellType = 0,
    TextCellType = 1,
    ImageCellType = 2
  }

  export enum HitResult {
    None = 0,
    ContentArea = 1,
    EditableTextArea = 2,
    TrackableArea = 4
  }

  export enum NSControlTint {
    DefaultControlTint = 0,
    BlueControlTint = 1,
    GraphiteControlTint = 6,
    ClearControlTint = 7
  }

  export enum NSImageScaling {
    ImageScaleProportionallyDown = 0,
    ImageScaleAxesIndependently = 1,
    ImageScaleNone = 2,
    ImageScaleProportionallyUpOrDown = 3,
    ScaleProportionally = 0,
    ScaleToFit = 1,
    ScaleNone = 2
  }

  export enum StyleMask {
    NoCellMask = 0,
    ContentsCellMask = 1,
    PushInCellMask = 2,
    ChangeGrayCellMask = 4,
    ChangeBackgroundCellMask = 8
  }

}

export namespace CharacterSet {
}

export namespace NSClassDescription {
}

export namespace NSClickGestureRecognizer {
}

export namespace NSClipView {
}

export namespace NSCoder {
  export enum DecodingFailurePolicy {
    RaiseException = 0,
    SetErrorAndReturn = 1
  }

}

export namespace NSCollectionView {
  export namespace NSCollectionViewItem {
    export enum HighlightState {
      None = 0,
      ForSelection = 1,
      ForDeselection = 2,
      AsDropTarget = 3
    }
  }

  export enum DropOperation {
    On = 0,
    Before = 1
  }

  export enum ScrollDirection {
    Vertical = 0,
    Horizontal = 1
  }

  export enum ScrollPosition {
    None = 0,
    Top = 1,
    CenteredVertically = 2,
    Bottom = 4,
    NearestHorizontalEdge = 512,
    Left = 8,
    CenteredHorizontally = 16,
    Right = 32,
    LeadingEdge = 64,
    TrailingEdge = 128,
    NearestVerticalEdge = 256
  }

  export enum UpdateAction {
    Insert = 0,
    Delete = 1,
    Reload = 2,
    Move = 3,
    None = 4
  }

}

export namespace NSCollectionViewCompositionalLayout {
  export enum NSCollectionLayoutSectionOrthogonalScrollingBehavior {
    None = 0,
    Continuous = 1,
    ContinuousGroupLeadingBoundary = 2,
    Paging = 3,
    GroupPaging = 4,
    GroupPagingCentered = 5
  }

  export enum NSDirectionalRectEdge {
    None = 0,
    Top = 1,
    Leading = 2,
    Bottom = 4,
    Trailing = 8,
    All = 15
  }

  export enum NSRectAlignment {
    None = 0,
    Top = 1,
    TopLeading = 2,
    Leading = 3,
    BottomLeading = 4,
    Bottom = 5,
    BottomTrailing = 6,
    Trailing = 7,
    TopTrailing = 8
  }

}

export namespace NSCollectionViewFlowLayout {
  export namespace NSCollectionView {
    export enum DropOperation {
      On = 0,
      Before = 1
    }
    export enum ScrollDirection {
      Vertical = 0,
      Horizontal = 1
    }
    export enum ScrollPosition {
      None = 0,
      Top = 1,
      CenteredVertically = 2,
      Bottom = 4,
      NearestHorizontalEdge = 512,
      Left = 8,
      CenteredHorizontally = 16,
      Right = 32,
      LeadingEdge = 64,
      TrailingEdge = 128,
      NearestVerticalEdge = 256
    }
    export enum UpdateAction {
      Insert = 0,
      Delete = 1,
      Reload = 2,
      Move = 3,
      None = 4
    }
  }

}

export namespace NSCollectionViewGridLayout {
}

export namespace NSCollectionViewLayout {
  export namespace NSCollectionView {
    export enum DropOperation {
      On = 0,
      Before = 1
    }
    export enum ScrollDirection {
      Vertical = 0,
      Horizontal = 1
    }
    export enum ScrollPosition {
      None = 0,
      Top = 1,
      CenteredVertically = 2,
      Bottom = 4,
      NearestHorizontalEdge = 512,
      Left = 8,
      CenteredHorizontally = 16,
      Right = 32,
      LeadingEdge = 64,
      TrailingEdge = 128,
      NearestVerticalEdge = 256
    }
    export enum UpdateAction {
      Insert = 0,
      Delete = 1,
      Reload = 2,
      Move = 3,
      None = 4
    }
  }

  export enum NSCollectionElementCategory {
    Item = 0,
    SupplementaryView = 1,
    DecorationView = 2,
    InterItemGap = 3
  }

}

export namespace NSCollectionViewTransitionLayout {
}

export namespace NSColor {
  export enum ColorType {
    ComponentBased = 0,
    Pattern = 1,
    Catalog = 2
  }

  export enum SystemEffect {
    None = 0,
    Pressed = 1,
    DeepPressed = 2,
    Disabled = 3,
    Rollover = 4
  }

}

export namespace NSColorList {
}

export namespace NSColorPanel {
  export enum Mode {
    None = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    HSB = 3,
    CustomPalette = 4,
    ColorList = 5,
    Wheel = 6,
    Crayon = 7
  }

  export enum Options {
    GrayModeMask = 1,
    RGBModeMask = 2,
    CMYKModeMask = 4,
    HSBModeMask = 8,
    CustomPaletteModeMask = 16,
    ColorListModeMask = 32,
    WheelModeMask = 64,
    CrayonModeMask = 128,
    AllModesMask = 65535
  }

}

export namespace NSColorPicker {
}

export namespace NSColorPickerTouchBarItem {
}

export namespace NSColorSampler {
}

export namespace NSColorSpace {
  export enum Model {
    Unknown = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    LAB = 3,
    DeviceN = 4,
    Indexed = 5,
    Patterned = 6
  }

}

export namespace NSColorWell {
}

export namespace NSComboBox {
}

export namespace NSComboBoxCell {
}

export namespace NSComparisonPredicate {
  export enum Modifier {
    DirectPredicateModifier = 0,
    AllPredicateModifier = 1,
    AnyPredicateModifier = 2
  }

  export enum Operator {
    LessThanPredicateOperatorType = 0,
    LessThanOrEqualToPredicateOperatorType = 1,
    GreaterThanPredicateOperatorType = 2,
    GreaterThanOrEqualToPredicateOperatorType = 3,
    EqualToPredicateOperatorType = 4,
    NotEqualToPredicateOperatorType = 5,
    MatchesPredicateOperatorType = 6,
    LikePredicateOperatorType = 7,
    BeginsWithPredicateOperatorType = 8,
    EndsWithPredicateOperatorType = 9,
    InPredicateOperatorType = 10,
    CustomSelectorPredicateOperatorType = 11,
    ContainsPredicateOperatorType = 99,
    BetweenPredicateOperatorType = 100
  }

  export enum Options {
    CaseInsensitivePredicateOption = 1,
    DiacriticInsensitivePredicateOption = 2,
    NormalizedPredicateOption = 4
  }

}

export namespace NSCompoundPredicate {
  export enum LogicalType {
    NotPredicateType = 0,
    AndPredicateType = 1,
    OrPredicateType = 2
  }

}

export namespace NSConnection {
}

export namespace NSControl {
  export enum ControlSize {
    Regular = 0,
    Small = 1,
    Mini = 2
  }

  export enum ImagePosition {
    NoImage = 0,
    ImageOnly = 1,
    ImageLeft = 2,
    ImageRight = 3,
    ImageBelow = 4,
    ImageAbove = 5,
    ImageOverlaps = 6,
    ImageLeading = 7,
    ImageTrailing = 8
  }

}

export namespace NSController {
}

export namespace NSCoreDataCoreSpotlightDelegate {
}

export namespace NSCursor {
}

export namespace NSCustomImageRep {
}

export namespace NSCustomTouchBarItem {
}

export namespace NSDataAsset {
}

// @ts-ignore
export namespace Date {
}

export namespace DateInterval {
}

export namespace NSDatePicker {
  export enum ElementFlags {
    HourMinute = 12,
    HourMinuteSecond = 14,
    TimeZone = 16,
    YearMonth = 192,
    YearMonthDay = 224,
    Era = 256
  }

  export enum Mode {
    Single = 0,
    Range = 1
  }

  export enum Style {
    TextFieldAndStepper = 0,
    ClockAndCalendar = 1,
    TextField = 2
  }

}

export namespace NSDatePickerCell {
  export namespace NSDatePicker {
    export enum ElementFlags {
      HourMinute = 12,
      HourMinuteSecond = 14,
      TimeZone = 16,
      YearMonth = 192,
      YearMonthDay = 224,
      Era = 256
    }
    export enum Mode {
      Single = 0,
      Range = 1
    }
    export enum Style {
      TextFieldAndStepper = 0,
      ClockAndCalendar = 1,
      TextField = 2
    }
  }

}

export namespace NSDecimal {
  export namespace NSDecimalNumber {
    export enum CalculationError {
      NoError = 0,
      LossOfPrecision = 1,
      Underflow = 2,
      Overflow = 3,
      DivideByZero = 4
    }
    export enum RoundingMode {
      Plain = 0,
      Down = 1,
      Up = 2,
      Bankers = 3
    }
  }

}

export namespace NSDecimalNumber {
  export enum CalculationError {
    NoError = 0,
    LossOfPrecision = 1,
    Underflow = 2,
    Overflow = 3,
    DivideByZero = 4
  }

  export enum RoundingMode {
    Plain = 0,
    Down = 1,
    Up = 2,
    Bankers = 3
  }

}

export namespace NSDerivedAttributeDescription {
}

// @ts-ignore
export namespace Dictionary {
}

export namespace NSDictionaryController {
}

export namespace NSDistantObject {
}

export namespace NSDistributedLock {
}

export namespace NSDockTile {
}

export namespace NSDocument {
  export enum ChangeType {
    Done = 0,
    Undone = 1,
    Redone = 5,
    Cleared = 2,
    ReadOtherContents = 3,
    Autosaved = 4,
    Discardable = 256
  }

  export enum SaveOperationType {
    SaveOperation = 0,
    SaveAsOperation = 1,
    SaveToOperation = 2,
    AutosaveInPlaceOperation = 4,
    AutosaveElsewhereOperation = 3,
    AutosaveAsOperation = 5,
    AutosaveOperation = 3
  }

}

export namespace NSDocumentController {
}

export namespace NSDragging {
  export enum NSDragOperation {
    None = 0,
    Copy = 1,
    Link = 2,
    Generic = 4,
    Private = 8,
    Move = 16,
    Delete = 32,
    Every = -1,
    All_Obsolete = 15,
    All = 15
  }

  export enum NSDraggingContext {
    OutsideApplication = 0,
    WithinApplication = 1
  }

  export enum NSDraggingFormation {
    Default = 0,
    None = 1,
    Pile = 2,
    List = 3,
    Stack = 4
  }

  export enum NSDraggingItemEnumerationOptions {
    oncurrent = 1,
    learNonenumeratedImages = 65536
  }

  export enum NSSpringLoadingHighlight {
    None = 0,
    Standard = 1,
    Emphasized = 2
  }

  export enum NSSpringLoadingOptions {
    Disabled = 0,
    Enabled = 1,
    ContinuousActivation = 2,
    NoHover = 8
  }

}

export namespace NSDraggingItem {
}

export namespace NSDraggingSession {
}

export namespace NSDrawer {
  export enum State {
    ClosedState = 0,
    OpeningState = 1,
    OpenState = 2,
    ClosingState = 3
  }

}

export namespace NSEPSImageRep {
}

export namespace NSEntityDescription {
}

export namespace NSEntityMapping {
  export enum NSEntityMappingType {
    UndefinedEntityMappingType = 0,
    CustomEntityMappingType = 1,
    AddEntityMappingType = 2,
    RemoveEntityMappingType = 3,
    CopyEntityMappingType = 4,
    TransformEntityMappingType = 5
  }

}

export namespace NSEntityMigrationPolicy {
}

export namespace NSEnumerator {
}

// @ts-ignore
export namespace Error {
}

export namespace NSEvent {
  export enum ButtonMask {
    Tip = 1,
    LowerSide = 2,
    UpperSide = 4
  }

  export enum EventSubtype {
    WindowExposed = 0,
    ApplicationActivated = 1,
    ApplicationDeactivated = 2,
    WindowMoved = 4,
    ScreenChanged = 8,
    PowerOff = 1,
    MouseEvent = 0,
    TabletPoint = 1,
    TabletProximity = 2,
    Touch = 3
  }

  export enum EventType {
    LeftMouseDown = 1,
    LeftMouseUp = 2,
    RightMouseDown = 3,
    RightMouseUp = 4,
    MouseMoved = 5,
    LeftMouseDragged = 6,
    RightMouseDragged = 7,
    MouseEntered = 8,
    MouseExited = 9,
    KeyDown = 10,
    KeyUp = 11,
    FlagsChanged = 12,
    AppKitDefined = 13,
    SystemDefined = 14,
    ApplicationDefined = 15,
    Periodic = 16,
    CursorUpdate = 17,
    ScrollWheel = 22,
    TabletPoint = 23,
    TabletProximity = 24,
    OtherMouseDown = 25,
    OtherMouseUp = 26,
    OtherMouseDragged = 27,
    Gesture = 29,
    Magnify = 30,
    Swipe = 31,
    Rotate = 18,
    BeginGesture = 19,
    EndGesture = 20,
    SmartMagnify = 32,
    QuickLook = 33,
    Pressure = 34,
    DirectTouch = 37,
    ChangeMode = 38
  }

  export enum EventTypeMask {
    LeftMouseDown = 2,
    LeftMouseUp = 4,
    RightMouseDown = 8,
    RightMouseUp = 16,
    MouseMoved = 32,
    LeftMouseDragged = 64,
    RightMouseDragged = 128,
    MouseEntered = 256,
    MouseExited = 512,
    KeyDown = 1024,
    KeyUp = 2048,
    FlagsChanged = 4096,
    AppKitDefined = 8192,
    SystemDefined = 16384,
    ApplicationDefined = 32768,
    Periodic = 65536,
    CursorUpdate = 131072,
    ScrollWheel = 4194304,
    TabletPoint = 8388608,
    TabletProximity = 16777216,
    OtherMouseDown = 33554432,
    OtherMouseUp = 67108864,
    OtherMouseDragged = 134217728,
    Gesture = 536870912,
    Magnify = 1073741824,
    Swipe = 2147483648,
    Rotate = 262144,
    BeginGesture = 524288,
    EndGesture = 1048576,
    SmartMagnify = 4294967296,
    Pressure = 17179869184,
    DirectTouch = 137438953472,
    ChangeMode = 274877906944,
    Any = -1
  }

  export enum GestureAxis {
    None = 0,
    Horizontal = 1,
    Vertical = 2
  }

  export enum ModifierFlags {
    CapsLock = 65536,
    Shift = 131072,
    Control = 262144,
    Option = 524288,
    Command = 1048576,
    NumericPad = 2097152,
    Help = 4194304,
    Function = 8388608,
    DeviceIndependentFlagsMask = 4294901760
  }

  export enum Phase {
    None = 0,
    Began = 1,
    Stationary = 2,
    Changed = 4,
    Ended = 8,
    Cancelled = 16,
    MayBegin = 32
  }

  export enum PointingDeviceType {
    Unknown = 0,
    Pen = 1,
    Cursor = 2,
    Eraser = 3
  }

  export enum PressureBehavior {
    Unknown = -1,
    PrimaryDefault = 0,
    PrimaryClick = 1,
    PrimaryGeneric = 2,
    PrimaryAccelerator = 3,
    PrimaryDeepClick = 5,
    PrimaryDeepDrag = 6
  }

  export enum SwipeTrackingOptions {
    LockDirection = 1,
    ClampGestureAmount = 2
  }

}

export namespace NSException {
}

export namespace NSExpression {
  export enum ExpressionType {
    ConstantValueExpressionType = 0,
    EvaluatedObjectExpressionType = 1,
    VariableExpressionType = 2,
    KeyPathExpressionType = 3,
    FunctionExpressionType = 4,
    UnionSetExpressionType = 5,
    IntersectSetExpressionType = 6,
    MinusSetExpressionType = 7,
    SubqueryExpressionType = 13,
    AggregateExpressionType = 14,
    AnyKeyExpressionType = 15,
    BlockExpressionType = 19,
    ConditionalExpressionType = 20
  }

}

export namespace NSExpressionDescription {
}

export namespace NSExtensionContext {
}

export namespace NSExtensionItem {
}

export namespace NSFetchIndexDescription {
}

export namespace NSFetchIndexElementDescription {
  export enum NSFetchIndexElementType {
    Binary = 0,
    RTree = 1
  }

}

export namespace NSFetchRequest {
  export enum NSFetchRequestResultType {
    ManagedObjectResultType = 0,
    ManagedObjectIDResultType = 1,
    DictionaryResultType = 2,
    CountResultType = 4
  }

}

export namespace NSFetchRequestExpression {
}

export namespace NSFetchedPropertyDescription {
}

export namespace NSFetchedResultsController {
  export enum NSFetchedResultsChangeType {
    Insert = 1,
    Delete = 2,
    Move = 3,
    Update = 4
  }

}

export namespace NSFileCoordinator {
  export enum ReadingOptions {
    WithoutChanges = 1,
    ResolvesSymbolicLink = 2,
    ImmediatelyAvailableMetadataOnly = 4,
    ForUploading = 8
  }

  export enum WritingOptions {
    ForDeleting = 1,
    ForMoving = 2,
    ForMerging = 4,
    ForReplacing = 8,
    ContentIndependentMetadataOnly = 16
  }

}

export namespace FileHandle {
}

export namespace NSFilePromiseProvider {
}

export namespace NSFilePromiseReceiver {
}

export namespace NSFileVersion {
  export enum AddingOptions {
    NSFileVersionAddingByMoving = 1
  }

  export enum ReplacingOptions {
    NSFileVersionReplacingByMoving = 1
  }

}

export namespace NSFont {
  export enum NSFontRenderingMode {
    DefaultRenderingMode = 0,
    AntialiasedRenderingMode = 1,
    IntegerAdvancementsRenderingMode = 2,
    AntialiasedIntegerAdvancementsRenderingMode = 3
  }

}

export namespace NSFontAssetRequest {
  export enum Options {
    NSFontAssetRequestOptionUsesStandardUI = 1
  }

}

export namespace NSFontCollection {
  export enum Visibility {
    Process = 1,
    User = 2,
    Computer = 4
  }

}

export namespace NSFontDescriptor {
  export enum SymbolicTraits {
    TraitItalic = 1,
    TraitBold = 2,
    TraitExpanded = 32,
    TraitCondensed = 64,
    TraitMonoSpace = 1024,
    TraitVertical = 2048,
    TraitUIOptimized = 4096,
    TraitTightLeading = 32768,
    TraitLooseLeading = 65536,
    ClassMask = 4026531840,
    ClassUnknown = 0,
    ClassOldStyleSerifs = 268435456,
    ClassTransitionalSerifs = 536870912,
    ClassModernSerifs = 805306368,
    ClassClarendonSerifs = 1073741824,
    ClassSlabSerifs = 1342177280,
    ClassFreeformSerifs = 1879048192,
    ClassSansSerif = 2147483648,
    ClassOrnamentals = 2415919104,
    ClassScripts = 2684354560,
    ClassSymbolic = 3221225472
  }

}

export namespace NSFontManager {
  export enum NSFontAction {
    NoFontChangeAction = 0,
    ViaPanelFontAction = 1,
    AddTraitFontAction = 2,
    SizeUpFontAction = 3,
    SizeDownFontAction = 4,
    HeavierFontAction = 5,
    LighterFontAction = 6,
    RemoveTraitFontAction = 7
  }

  export enum NSFontCollectionOptions {
    NSFontCollectionApplicationOnlyMask = 1
  }

  export enum NSFontTraitMask {
    ItalicFontMask = 1,
    BoldFontMask = 2,
    UnboldFontMask = 4,
    NonStandardCharacterSetFontMask = 8,
    NarrowFontMask = 16,
    ExpandedFontMask = 32,
    CondensedFontMask = 64,
    SmallCapsFontMask = 128,
    PosterFontMask = 256,
    CompressedFontMask = 512,
    FixedPitchFontMask = 1024,
    UnitalicFontMask = 16777216
  }

}

export namespace NSFontPanel {
  export enum ModeMask {
    MaskFace = 1,
    MaskSize = 2,
    MaskCollection = 4,
    MaskUnderlineEffect = 256,
    MaskStrikethroughEffect = 512,
    MaskTextColorEffect = 1024,
    MaskDocumentColorEffect = 2048,
    MaskShadowEffect = 4096,
    MaskAllEffects = 1048320,
    sMaskStandardModes = 65535,
    sMaskAllModes = 4294967295
  }

}

export namespace NSFormCell {
}

export namespace NSGarbageCollector {
}

export namespace NSGeometry {
  export enum AlignmentOptions {
    MinXInward = 1,
    MinYInward = 2,
    MaxXInward = 4,
    MaxYInward = 8,
    WidthInward = 16,
    HeightInward = 32,
    MinXOutward = 256,
    MinYOutward = 512,
    MaxXOutward = 1024,
    MaxYOutward = 2048,
    WidthOutward = 4096,
    HeightOutward = 8192,
    MinXNearest = 65536,
    MinYNearest = 131072,
    MaxXNearest = 262144,
    MaxYNearest = 524288,
    WidthNearest = 1048576,
    HeightNearest = 2097152,
    RectFlipped = -9223372036854775808,
    AllEdgesInward = 15,
    AllEdgesOutward = 3840,
    AllEdgesNearest = 983040
  }

  export enum NSRectEdge {
    RectEdgeMinX = 0,
    RectEdgeMinY = 1,
    RectEdgeMaxX = 2,
    RectEdgeMaxY = 3,
    MinXEdge = 0,
    MinYEdge = 1,
    MaxXEdge = 2,
    MaxYEdge = 3
  }

}

export namespace NSGestureRecognizer {
  export enum State {
    Possible = 0,
    Began = 1,
    Changed = 2,
    Ended = 3,
    Cancelled = 4,
    Failed = 5,
    Recognized = 3
  }

}

export namespace NSGlyphGenerator {
}

export namespace NSGlyphInfo {
  export enum NSCharacterCollection {
    IdentityMappingCharacterCollection = 0,
    AdobeCNS1CharacterCollection = 1,
    AdobeGB1CharacterCollection = 2,
    AdobeJapan1CharacterCollection = 3,
    AdobeJapan2CharacterCollection = 4,
    AdobeKorea1CharacterCollection = 5
  }

}

export namespace NSGradient {
  export enum DrawingOptions {
    BeforeStartingLocation = 1,
    AfterEndingLocation = 2
  }

}

export namespace NSGraphics {
  export namespace NSWindow {
    export enum AnimationBehavior {
      Default = 0,
      None = 2,
      DocumentWindow = 3,
      UtilityWindow = 4,
      AlertPanel = 5
    }
    export enum BackingStoreType {
      Retained = 0,
      Nonretained = 1,
      Buffered = 2
    }
    export enum ButtonType {
      CloseButton = 0,
      MiniaturizeButton = 1,
      ZoomButton = 2,
      ToolbarButton = 3,
      DocumentIconButton = 4,
      DocumentVersionsButton = 6
    }
    export enum CollectionBehavior {
      Default = 0,
      CanJoinAllSpaces = 1,
      MoveToActiveSpace = 2,
      Managed = 4,
      Transient = 8,
      Stationary = 16,
      ParticipatesInCycle = 32,
      IgnoresCycle = 64,
      FullScreenPrimary = 128,
      FullScreenAuxiliary = 256,
      FullScreenNone = 512,
      FullScreenAllowsTiling = 2048,
      FullScreenDisallowsTiling = 4096
    }
    export enum Depth {
      TwentyfourBitRGB = 520,
      SixtyfourBitRGB = 528,
      OnehundredtwentyeightBitRGB = 544
    }
    export enum NumberListOptions {
      Applications = 1,
      Spaces = 16
    }
    export enum OcclusionState {
      NSWindowOcclusionStateVisible = 2
    }
    export enum OrderingMode {
      Above = 1,
      Below = -1,
      Out = 0
    }
    export enum SelectionDirection {
      DirectSelection = 0,
      SelectingNext = 1,
      SelectingPrevious = 2
    }
    export enum SharingType {
      None = 0,
      ReadOnly = 1,
      ReadWrite = 2
    }
    export enum StyleMask {
      Borderless = 0,
      Titled = 1,
      Closable = 2,
      Miniaturizable = 4,
      Resizable = 8,
      TexturedBackground = 256,
      UnifiedTitleAndToolbar = 4096,
      FullScreen = 16384,
      FullSizeContentView = 32768,
      UtilityWindow = 16,
      DocModalWindow = 64,
      NonactivatingPanel = 128,
      HUDWindow = 8192
    }
    export enum TabbingMode {
      Automatic = 0,
      Preferred = 1,
      Disallowed = 2
    }
    export enum TitleVisibility {
      Visible = 0,
      Hidden = 1
    }
    export enum UserTabbingPreference {
      Manual = 0,
      Always = 1,
      InFullScreen = 2
    }
  }

  export enum NSAnimationEffect {
    DisappearingItemDefault = 0,
    Poof = 10
  }

  export enum NSColorRenderingIntent {
    Default = 0,
    AbsoluteColorimetric = 1,
    RelativeColorimetric = 2,
    Perceptual = 3,
    Saturation = 4
  }

  export enum NSCompositingOperation {
    Clear = 0,
    Copy = 1,
    SourceOver = 2,
    SourceIn = 3,
    SourceOut = 4,
    SourceAtop = 5,
    DestinationOver = 6,
    DestinationIn = 7,
    DestinationOut = 8,
    DestinationAtop = 9,
    XOR = 10,
    PlusDarker = 11,
    Highlight = 12,
    PlusLighter = 13,
    Multiply = 14,
    Screen = 15,
    Overlay = 16,
    Darken = 17,
    Lighten = 18,
    ColorDodge = 19,
    ColorBurn = 20,
    SoftLight = 21,
    HardLight = 22,
    Difference = 23,
    Exclusion = 24,
    Hue = 25,
    Saturation = 26,
    Color = 27,
    Luminosity = 28
  }

  export enum NSDisplayGamut {
    SRGB = 1,
    P3 = 2
  }

  export enum NSFocusRingPlacement {
    Only = 0,
    Below = 1,
    Above = 2
  }

  export enum NSFocusRingType {
    Default = 0,
    None = 1,
    Exterior = 2
  }

}

export namespace NSGraphicsContext {
  export enum NSImageInterpolation {
    Default = 0,
    None = 1,
    Low = 2,
    Medium = 4,
    High = 3
  }

}

export namespace NSGridView {
  export namespace NSGridCell {
    export enum Placement {
      Inherited = 0,
      None = 1,
      Leading = 2,
      Top = 2,
      Trailing = 3,
      Bottom = 3,
      Center = 4,
      Fill = 5
    }
  }

  export namespace NSGridRow {
    export enum Alignment {
      Inherited = 0,
      None = 1,
      FirstBaseline = 2,
      LastBaseline = 3
    }
  }

}

export namespace NSGroupTouchBarItem {
}

export namespace HTTPCookie {
  export enum AcceptPolicy {
    Always = 0,
    Never = 1,
    OnlyFromMainDocumentDomain = 2
  }

}

export namespace NSHapticFeedback {
  export namespace NSHapticFeedbackManager {
    export enum FeedbackPattern {
      Generic = 0,
      Alignment = 1,
      LevelChange = 2
    }
    export enum PerformanceTime {
      Default = 0,
      Now = 1,
      DrawCompleted = 2
    }
  }

}

export namespace NSHashTable {
}

export namespace NSHelpManager {
}

export namespace Host {
}

export namespace NSImage {
  export enum CacheMode {
    Default = 0,
    Always = 1,
    BySize = 2,
    Never = 3
  }

  export enum LayoutDirection {
    Unspecified = -1,
    LeftToRight = 2,
    RightToLeft = 3
  }

  export enum LoadStatus {
    Completed = 0,
    Cancelled = 1,
    InvalidData = 2,
    UnexpectedEOF = 3,
    ReadError = 4
  }

  export enum ResizingMode {
    Stretch = 0,
    Tile = 1
  }

}

export namespace NSImageCell {
  export namespace NSImageView {
    export enum FrameStyle {
      None = 0,
      Photo = 1,
      GrayBezel = 2,
      Groove = 3,
      Button = 4
    }
  }

  export enum NSImageAlignment {
    Center = 0,
    Top = 1,
    TopLeft = 2,
    TopRight = 3,
    Left = 4,
    Bottom = 5,
    BottomLeft = 6,
    BottomRight = 7,
    Right = 8
  }

}

export namespace NSImageRep {
  export namespace NSImage {
    export enum CacheMode {
      Default = 0,
      Always = 1,
      BySize = 2,
      Never = 3
    }
    export enum LayoutDirection {
      Unspecified = -1,
      LeftToRight = 2,
      RightToLeft = 3
    }
    export enum LoadStatus {
      Completed = 0,
      Cancelled = 1,
      InvalidData = 2,
      UnexpectedEOF = 3,
      ReadError = 4
    }
    export enum ResizingMode {
      Stretch = 0,
      Tile = 1
    }
  }

}

export namespace NSImageView {
  export enum FrameStyle {
    None = 0,
    Photo = 1,
    GrayBezel = 2,
    Groove = 3,
    Button = 4
  }

}

export namespace NSIncrementalStore {
}

export namespace NSIncrementalStoreNode {
}

export namespace IndexPath {
}

export namespace IndexSet {
}

export namespace NSInvocation {
}

export namespace NSItemProvider {
  export enum ErrorCode {
    UnknownError = -1,
    ItemUnavailableError = -1000,
    UnexpectedValueClassError = -1100,
    UnavailableCoercionError = -1200
  }

  export enum NSItemProviderFileOptions {
    NSItemProviderFileOptionOpenInPlace = 1
  }

  export enum NSItemProviderRepresentationVisibility {
    All = 0,
    Team = 1,
    Group = 2,
    OwnProcess = 3
  }

}

export namespace NSKeyValueObserving {
  export enum NSKeyValueChange {
    Setting = 1,
    Insertion = 2,
    Removal = 3,
    Replacement = 4
  }

  export enum NSKeyValueObservingOptions {
    New = 1,
    Old = 2,
    Initial = 4,
    Prior = 8
  }

  export enum NSKeyValueSetMutationKind {
    UnionSetMutation = 1,
    MinusSetMutation = 2,
    IntersectSetMutation = 3,
    SetSetMutation = 4
  }

}

export namespace NSKeyedArchiver {
}

export namespace NSLayoutAnchor {
}

export namespace NSLayoutConstraint {
  export enum Attribute {
    Left = 1,
    Right = 2,
    Top = 3,
    Bottom = 4,
    Leading = 5,
    Trailing = 6,
    Width = 7,
    Height = 8,
    CenterX = 9,
    CenterY = 10,
    LastBaseline = 11,
    Baseline = 11,
    FirstBaseline = 12,
    NotAnAttribute = 0
  }

  export enum FormatOptions {
    AlignAllLeft = 2,
    AlignAllRight = 4,
    AlignAllTop = 8,
    AlignAllBottom = 16,
    AlignAllLeading = 32,
    AlignAllTrailing = 64,
    AlignAllCenterX = 512,
    AlignAllCenterY = 1024,
    AlignAllLastBaseline = 2048,
    AlignAllFirstBaseline = 4096,
    AlignAllBaseline = 2048,
    AlignmentMask = 65535,
    DirectionLeadingToTrailing = 0,
    DirectionLeftToRight = 65536,
    DirectionRightToLeft = 131072,
    DirectionMask = 196608
  }

  export enum Orientation {
    Horizontal = 0,
    Vertical = 1
  }

  export enum Relation {
    LessThanOrEqual = -1,
    Equal = 0,
    GreaterThanOrEqual = 1
  }

}

export namespace NSLayoutGuide {
}

export namespace NSLayoutManager {
  export enum ControlCharacterAction {
    ZeroAdvancement = 1,
    Whitespace = 2,
    HorizontalTab = 4,
    LineBreak = 8,
    ParagraphBreak = 16,
    ContainerBreak = 32
  }

  export enum GlyphProperty {
    Null = 1,
    ControlCharacter = 2,
    Elastic = 4,
    NonBaseCharacter = 8
  }

  export enum TextLayoutOrientation {
    Horizontal = 0,
    Vertical = 1
  }

  export enum TypesetterBehavior {
    LatestBehavior = -1,
    OriginalBehavior = 0,
    Behavior_10_2_WithCompatibility = 1,
    Behavior_10_2 = 2,
    Behavior_10_3 = 3,
    Behavior_10_4 = 4
  }

}

export namespace NSLevelIndicator {
  export enum PlaceholderVisibility {
    Automatic = 0,
    Always = 1,
    WhileEditing = 2
  }

  export enum Style {
    Relevancy = 0,
    ContinuousCapacity = 1,
    DiscreteCapacity = 2,
    Rating = 3
  }

}

export namespace NSLevelIndicatorCell {
  export namespace NSLevelIndicator {
    export enum PlaceholderVisibility {
      Automatic = 0,
      Always = 1,
      WhileEditing = 2
    }
    export enum Style {
      Relevancy = 0,
      ContinuousCapacity = 1,
      DiscreteCapacity = 2,
      Rating = 3
    }
  }

}

export namespace NSLinguisticTagger {
  export enum NSLinguisticTaggerUnit {
    Word = 0,
    Sentence = 1,
    Paragraph = 2,
    Document = 3
  }

  export enum Options {
    OmitWords = 1,
    OmitPunctuation = 2,
    OmitWhitespace = 4,
    OmitOther = 8,
    JoinNames = 16
  }

}

export namespace ListFormatter {
}

export namespace NSLock {
}

export namespace NSMagnificationGestureRecognizer {
}

export namespace NSManagedObject {
  export enum NSSnapshotEventType {
    UndoInsertion = 2,
    UndoDeletion = 4,
    UndoUpdate = 8,
    Rollback = 16,
    Refresh = 32,
    MergePolicy = 64
  }

}

export namespace NSManagedObjectContext {
  export enum NSManagedObjectContextConcurrencyType {
    ConfinementConcurrencyType = 0,
    PrivateQueueConcurrencyType = 1,
    MainQueueConcurrencyType = 2
  }

}

export namespace NSManagedObjectID {
}

export namespace NSManagedObjectModel {
}

export namespace NSMapTable {
}

export namespace NSMappingModel {
}

export namespace NSMatrix {
  export enum Mode {
    RadioModeMatrix = 0,
    HighlightModeMatrix = 1,
    ListModeMatrix = 2,
    TrackModeMatrix = 3
  }

}

export namespace Measurement {
}

export namespace NSMediaLibraryBrowserController {
  export enum Library {
    Audio = 1,
    Image = 2,
    Movie = 4
  }

}

export namespace NSMenu {
  export enum Properties {
    Title = 1,
    AttributedTitle = 2,
    KeyEquivalent = 4,
    Image = 8,
    Enabled = 16,
    AccessibilityDescription = 32
  }

}

export namespace NSMenuItem {
}

export namespace NSMenuItemCell {
}

export namespace NSMenuToolbarItem {
}

export namespace NSMergePolicy {
  export enum NSMergePolicyType {
    ErrorMergePolicyType = 0,
    MergeByPropertyStoreTrumpMergePolicyType = 1,
    MergeByPropertyObjectTrumpMergePolicyType = 2,
    OverwriteMergePolicyType = 3,
    RollbackMergePolicyType = 4
  }

}

export namespace NSMethodSignature {
}

export namespace NSMigrationManager {
}

export namespace NSNetServices {
  export namespace NetService {
    export enum ErrorCode {
      UnknownError = -72000,
      CollisionError = -72001,
      NotFoundError = -72002,
      ActivityInProgress = -72003,
      BadArgumentError = -72004,
      CancelledError = -72005,
      InvalidError = -72006,
      TimeoutError = -72007
    }
    export enum Options {
      NoAutoRename = 1,
      ListenForConnections = 2
    }
  }

}

export namespace NSNib {
}

export namespace Notification {
}

export namespace NotificationQueue {
  export enum NotificationCoalescing {
    NoCoalescing = 0,
    CoalescingOnName = 1,
    CoalescingOnSender = 2
  }

  export enum PostingStyle {
    WhenIdle = 1,
    ASAP = 2,
    Now = 3
  }

}

export namespace NumberFormatter {
  export enum Behavior {
    rDefault = 0,
    r10_0 = 1000,
    r10_4 = 1040
  }

  export enum PadPosition {
    BeforePrefix = 0,
    AfterPrefix = 1,
    BeforeSuffix = 2,
    AfterSuffix = 3
  }

  export enum RoundingMode {
    Ceiling = 0,
    Floor = 1,
    Down = 2,
    Up = 3,
    HalfEven = 4,
    HalfDown = 5,
    HalfUp = 6
  }

  export enum Style {
    NoStyle = 0,
    DecimalStyle = 1,
    CurrencyStyle = 2,
    PercentStyle = 3,
    ScientificStyle = 4,
    SpellOutStyle = 5,
    OrdinalStyle = 6,
    CurrencyISOCodeStyle = 8,
    CurrencyPluralStyle = 9,
    CurrencyAccountingStyle = 10
  }

}

export namespace NSObjCRuntime {
  export enum ComparisonResult {
    Ascending = -1,
    Same = 0,
    Descending = 1
  }

  export enum NSEnumerationOptions {
    Concurrent = 1,
    Reverse = 2
  }

  export enum NSSortOptions {
    Concurrent = 1,
    Stable = 16
  }

  export enum QualityOfService {
    UserInteractive = 33,
    UserInitiated = 25,
    Utility = 17,
    Background = 9,
    Default = -1
  }

}

export namespace NSObjectController {
}

export namespace NSOpenPanel {
}

export namespace Operation {
  export enum QueuePriority {
    VeryLow = -8,
    Low = -4,
    Normal = 0,
    High = 4,
    VeryHigh = 8
  }

}

export namespace NSOrderedCollectionChange {
  export enum NSCollectionChangeType {
    Insert = 0,
    Remove = 1
  }

}

export namespace NSOrderedSet {
}

export namespace NSOrthography {
}

export namespace NSOutlineView {
}

export namespace NSPDFImageRep {
}

export namespace NSPDFInfo {
}

export namespace NSPDFPanel {
  export enum Options {
    ShowsPaperSize = 4,
    ShowsOrientation = 8,
    RequestsParentDirectory = 16777216
  }

}

export namespace NSPICTImageRep {
}

export namespace NSPageController {
  export enum TransitionStyle {
    StackHistory = 0,
    StackBook = 1,
    HorizontalStrip = 2
  }

}

export namespace NSPageLayout {
}

export namespace NSPanGestureRecognizer {
}

export namespace NSPanel {
}

export namespace NSParagraphStyle {
  export enum NSLineBreakMode {
    WordWrapping = 0,
    CharWrapping = 1,
    Clipping = 2,
    TruncatingHead = 3,
    TruncatingTail = 4,
    TruncatingMiddle = 5
  }

  export enum TextTabType {
    LeftTabStopType = 0,
    RightTabStopType = 1,
    CenterTabStopType = 2,
    DecimalTabStopType = 3
  }

}

export namespace NSPasteboard {
  export enum ContentsOptions {
    NSPasteboardContentsCurrentHostOnly = 1
  }

  export enum ReadingOptions {
    Data = 0,
    String = 1,
    PropertyList = 2,
    KeyedArchive = 4
  }

  export enum WritingOptions {
    NSPasteboardWritingPromised = 512
  }

}

export namespace NSPasteboardItem {
}

export namespace NSPathCell {
  export namespace NSPathControl {
    export enum Style {
      Standard = 0,
      PopUp = 2,
      NavigationBar = 1
    }
  }

}

export namespace NSPathComponentCell {
}

export namespace NSPathControl {
  export enum Style {
    Standard = 0,
    PopUp = 2,
    NavigationBar = 1
  }

}

export namespace NSPathControlItem {
}

export namespace NSPathUtilities {
  export namespace FileManager {
    export enum DirectoryEnumerationOptions {
      SkipsSubdirectoryDescendants = 1,
      SkipsPackageDescendants = 2,
      SkipsHiddenFiles = 4,
      IncludesDirectoriesPostOrder = 8,
      ProducesRelativePathURLs = 16
    }
    export enum ItemReplacementOptions {
      UsingNewMetadataOnly = 1,
      WithoutDeletingBackupItem = 2
    }
    export enum SearchPathDirectory {
      ApplicationDirectory = 1,
      DemoApplicationDirectory = 2,
      DeveloperApplicationDirectory = 3,
      AdminApplicationDirectory = 4,
      LibraryDirectory = 5,
      DeveloperDirectory = 6,
      UserDirectory = 7,
      DocumentationDirectory = 8,
      DocumentDirectory = 9,
      CoreServiceDirectory = 10,
      AutosavedInformationDirectory = 11,
      DesktopDirectory = 12,
      CachesDirectory = 13,
      ApplicationSupportDirectory = 14,
      DownloadsDirectory = 15,
      InputMethodsDirectory = 16,
      MoviesDirectory = 17,
      MusicDirectory = 18,
      PicturesDirectory = 19,
      PrinterDescriptionDirectory = 20,
      SharedPublicDirectory = 21,
      PreferencePanesDirectory = 22,
      ApplicationScriptsDirectory = 23,
      ItemReplacementDirectory = 99,
      AllApplicationsDirectory = 100,
      AllLibrariesDirectory = 101,
      TrashDirectory = 102
    }
    export enum SearchPathDomainMask {
      UserDomainMask = 1,
      LocalDomainMask = 2,
      NetworkDomainMask = 4,
      SystemDomainMask = 8,
      AllDomainsMask = 65535
    }
    export enum URLRelationship {
      Contains = 0,
      Same = 1,
      Other = 2
    }
    export enum UnmountOptions {
      AllPartitionsAndEjectDisk = 1,
      WithoutUI = 2
    }
    export enum VolumeEnumerationOptions {
      SkipHiddenVolumes = 2,
      ProduceFileReferenceURLs = 4
    }
  }

}

export namespace NSPersistentCloudKitContainer {
  export enum NSPersistentCloudKitContainerSchemaInitializationOptions {
    None = 0,
    DryRun = 2,
    PrintSchema = 4
  }

}

export namespace NSPersistentCloudKitContainerOptions {
}

export namespace NSPersistentContainer {
}

export namespace NSPersistentDocument {
}

export namespace NSPersistentHistoryChange {
  export enum NSPersistentHistoryChangeType {
    Insert = 0,
    Update = 1,
    Delete = 2
  }

}

export namespace NSPersistentHistoryChangeRequest {
}

export namespace NSPersistentHistoryTransaction {
}

export namespace NSPersistentStore {
}

export namespace NSPersistentStoreCoordinator {
}

export namespace NSPersistentStoreDescription {
}

export namespace NSPersistentStoreRequest {
  export enum NSPersistentStoreRequestType {
    FetchRequestType = 1,
    SaveRequestType = 2,
    BatchInsertRequestType = 5,
    BatchUpdateRequestType = 6,
    BatchDeleteRequestType = 7
  }

}

export namespace NSPersistentStoreResult {
  export enum NSBatchDeleteRequestResultType {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2
  }

  export enum NSBatchInsertRequestResultType {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2
  }

  export enum NSBatchUpdateRequestResultType {
    StatusOnlyResultType = 0,
    UpdatedObjectIDsResultType = 1,
    UpdatedObjectsCountResultType = 2
  }

  export enum NSPersistentHistoryResultType {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2,
    TransactionsOnly = 3,
    ChangesOnly = 4,
    TransactionsAndChanges = 5
  }

}

export namespace PersonNameComponents {
}

export namespace PersonNameComponentsFormatter {
  export enum Options {
    NSPersonNameComponentsFormatterPhonetic = 2
  }

  export enum Style {
    Default = 0,
    Short = 1,
    Medium = 2,
    Long = 3,
    Abbreviated = 4
  }

}

export namespace NSPickerTouchBarItem {
  export enum ControlRepresentation {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2
  }

  export enum SelectionMode {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2
  }

}

export namespace NSPointerArray {
}

export namespace NSPointerFunctions {
  export enum Options {
    StrongMemory = 0,
    ZeroingWeakMemory = 1,
    OpaqueMemory = 2,
    MallocMemory = 3,
    MachVirtualMemory = 4,
    WeakMemory = 5,
    ObjectPersonality = 0,
    OpaquePersonality = 256,
    ObjectPointerPersonality = 512,
    CStringPersonality = 768,
    StructPersonality = 1024,
    IntegerPersonality = 1280,
    CopyIn = 65536
  }

}

export namespace NSPopUpButton {
  export enum ArrowPosition {
    NoArrow = 0,
    ArrowAtCenter = 1,
    ArrowAtBottom = 2
  }

}

export namespace NSPopUpButtonCell {
  export namespace NSPopUpButton {
    export enum ArrowPosition {
      NoArrow = 0,
      ArrowAtCenter = 1,
      ArrowAtBottom = 2
    }
  }

}

export namespace NSPopover {
  export enum Behavior {
    ApplicationDefined = 0,
    Transient = 1,
    Semitransient = 2
  }

}

export namespace NSPopoverTouchBarItem {
}

export namespace Port {
  export namespace NSMachPort {
    export enum Options {
      None = 0,
      SendRight = 1,
      ReceiveRight = 2
    }
  }

}

export namespace NSPortCoder {
}

export namespace PortMessage {
}

export namespace NSPortNameServer {
}

export namespace NSPredicate {
}

export namespace NSPredicateEditor {
}

export namespace NSPredicateEditorRowTemplate {
}

export namespace NSPressGestureRecognizer {
}

export namespace NSPressureConfiguration {
}

export namespace NSPrintInfo {
  export enum PaginationMode {
    Automatic = 0,
    Fit = 1,
    Clip = 2
  }

  export enum PaperOrientation {
    Portrait = 0,
    Landscape = 1
  }

}

export namespace NSPrintOperation {
  export enum PageOrder {
    DescendingPageOrder = -1,
    SpecialPageOrder = 0,
    AscendingPageOrder = 1,
    UnknownPageOrder = 2
  }

  export enum RenderingQuality {
    Best = 0,
    Responsive = 1
  }

}

export namespace NSPrintPanel {
  export enum Options {
    Copies = 1,
    PageRange = 2,
    PaperSize = 4,
    Orientation = 8,
    Scaling = 16,
    PrintSelection = 32,
    PageSetupAccessory = 256,
    Preview = 131072
  }

}

export namespace NSPrinter {
  export enum TableStatus {
    OK = 0,
    NotFound = 1,
    Error = 2
  }

}

export namespace ProcessInfo {
  export enum ActivityOptions {
    IdleDisplaySleepDisabled = 1099511627776,
    IdleSystemSleepDisabled = 1048576,
    SuddenTerminationDisabled = 16384,
    AutomaticTerminationDisabled = 32768,
    UserInitiated = 16777215,
    UserInitiatedAllowingIdleSystemSleep = 15728639,
    Background = 255,
    LatencyCritical = 1095216660480
  }

  export enum ThermalState {
    Nominal = 0,
    Fair = 1,
    Serious = 2,
    Critical = 3
  }

}

export namespace Progress {
}

export namespace NSProgressIndicator {
  export enum Style {
    Bar = 0,
    Spinning = 1
  }

}

export namespace NSPropertyDescription {
}

export namespace NSPropertyList {
  export namespace PropertyListSerialization {
    export enum MutabilityOptions {
      Immutable = 0,
      MutableContainers = 1,
      MutableContainersAndLeaves = 2
    }
    export enum PropertyListFormat {
      OpenStepFormat = 1,
      XMLFormat_v1_0 = 100,
      BinaryFormat_v1_0 = 200
    }
  }

}

export namespace NSPropertyMapping {
}

export namespace NSProtocolChecker {
}

export namespace NSProxy {
}

export namespace NSQueryGenerationToken {
}

export namespace NSRegularExpression {
  export enum MatchingFlags {
    Progress = 1,
    Completed = 2,
    HitEnd = 4,
    RequiredEnd = 8,
    InternalError = 16
  }

  export enum MatchingOptions {
    ReportProgress = 1,
    ReportCompletion = 2,
    Anchored = 4,
    WithTransparentBounds = 8,
    WithoutAnchoringBounds = 16
  }

  export enum Options {
    CaseInsensitive = 1,
    AllowCommentsAndWhitespace = 2,
    IgnoreMetacharacters = 4,
    DotMatchesLineSeparators = 8,
    AnchorsMatchLines = 16,
    UseUnixLineSeparators = 32,
    UseUnicodeWordBoundaries = 64
  }

}

export namespace NSRelationshipDescription {
  export enum NSDeleteRule {
    NoActionDeleteRule = 0,
    NullifyDeleteRule = 1,
    CascadeDeleteRule = 2,
    DenyDeleteRule = 3
  }

}

export namespace RelativeDateTimeFormatter {
  export enum DateTimeStyle {
    umeric = 0,
    amed = 1
  }

  export enum UnitsStyle {
    Full = 0,
    SpellOut = 1,
    Short = 2,
    Abbreviated = 3
  }

}

export namespace NSResponder {
}

export namespace NSRotationGestureRecognizer {
}

export namespace NSRuleEditor {
  export enum NestingMode {
    Single = 0,
    List = 1,
    Compound = 2,
    Simple = 3
  }

  export enum RowType {
    Simple = 0,
    Compound = 1
  }

}

export namespace NSRulerMarker {
}

export namespace NSRulerView {
  export enum Orientation {
    HorizontalRuler = 0,
    VerticalRuler = 1
  }

}

export namespace RunLoop {
}

export namespace NSRunningApplication {
  export namespace NSApplication {
    export enum ActivationOptions {
      AllWindows = 1,
      IgnoringOtherApps = 2
    }
    export enum ActivationPolicy {
      Regular = 0,
      Accessory = 1,
      Prohibited = 2
    }
    export enum DelegateReply {
      Success = 0,
      Cancel = 1,
      Failure = 2
    }
    export enum OcclusionState {
      NSApplicationOcclusionStateVisible = 2
    }
    export enum PresentationOptions {
      Default = 0,
      AutoHideDock = 1,
      HideDock = 2,
      AutoHideMenuBar = 4,
      HideMenuBar = 8,
      DisableAppleMenu = 16,
      DisableProcessSwitching = 32,
      DisableForceQuit = 64,
      DisableSessionTermination = 128,
      DisableHideApplication = 256,
      DisableMenuBarTransparency = 512,
      FullScreen = 1024,
      AutoHideToolbar = 2048,
      DisableCursorLocationAssistance = 4096
    }
    export enum PrintReply {
      Cancelled = 0,
      Success = 1,
      Failure = 3,
      ReplyLater = 2
    }
    export enum RemoteNotificationType {
      None = 0,
      Badge = 1,
      Sound = 2,
      Alert = 4
    }
    export enum RequestUserAttentionType {
      CriticalRequest = 0,
      InformationalRequest = 10
    }
    export enum TerminateReply {
      Cancel = 0,
      Now = 1,
      Later = 2
    }
    export enum WindowListOptions {
      NSWindowListOrderedFrontToBack = 1
    }
  }

}

export namespace NSSaveChangesRequest {
}

export namespace NSSavePanel {
}

export namespace Scanner {
}

export namespace NSScreen {
}

export namespace NSScriptClassDescription {
}

export namespace NSScriptCoercionHandler {
}

export namespace NSScriptCommand {
}

export namespace NSScriptCommandDescription {
}

export namespace NSScriptExecutionContext {
}

export namespace NSScriptObjectSpecifiers {
  export namespace NSPositionalSpecifier {
    export enum InsertionPosition {
      After = 0,
      Before = 1,
      Beginning = 2,
      End = 3,
      Replace = 4
    }
  }

  export namespace NSRelativeSpecifier {
    export enum RelativePosition {
      After = 0,
      Before = 1
    }
  }

  export namespace NSWhoseSpecifier {
    export enum SubelementIdentifier {
      IndexSubelement = 0,
      EverySubelement = 1,
      MiddleSubelement = 2,
      RandomSubelement = 3,
      NoSubelement = 4
    }
  }

}

export namespace NSScriptStandardSuiteCommands {
  export enum NSSaveOptions {
    Yes = 0,
    No = 1,
    Ask = 2
  }

}

export namespace NSScriptSuiteRegistry {
}

export namespace NSScriptWhoseTests {
  export namespace NSSpecifierTest {
    export enum TestComparisonOperation {
      EqualToComparison = 0,
      LessThanOrEqualToComparison = 1,
      LessThanComparison = 2,
      GreaterThanOrEqualToComparison = 3,
      GreaterThanComparison = 4,
      BeginsWithComparison = 5,
      EndsWithComparison = 6,
      ContainsComparison = 7
    }
  }

}

export namespace NSScrollView {
  export enum Elasticity {
    Automatic = 0,
    None = 1,
    Allowed = 2
  }

  export enum FindBarPosition {
    AboveHorizontalRuler = 0,
    AboveContent = 1,
    BelowContent = 2
  }

}

export namespace NSScroller {
  export enum KnobStyle {
    Default = 0,
    Dark = 1,
    Light = 2
  }

  export enum Part {
    NoPart = 0,
    DecrementPage = 1,
    Knob = 2,
    IncrementPage = 3,
    DecrementLine = 4,
    IncrementLine = 5,
    KnobSlot = 6
  }

  export enum Style {
    Legacy = 0,
    Overlay = 1
  }

  export enum UsableParts {
    NoScrollerParts = 0,
    OnlyScrollerArrows = 1,
    AllScrollerParts = 2
  }

}

export namespace NSScrubber {
  export enum Alignment {
    None = 0,
    Leading = 1,
    Trailing = 2,
    Center = 3
  }

  export enum Mode {
    ixed = 0,
    ree = 1
  }

}

export namespace NSScrubberLayout {
}

export namespace NSSearchField {
}

export namespace NSSearchFieldCell {
}

export namespace NSSegmentedCell {
}

export namespace NSSegmentedControl {
  export enum Distribution {
    t = 0,
    ll = 1,
    llEqually = 2,
    llProportionally = 3
  }

  export enum Style {
    Automatic = 0,
    Rounded = 1,
    RoundRect = 3,
    TexturedSquare = 4,
    SmallSquare = 6,
    Separated = 8,
    TexturedRounded = 2,
    Capsule = 5
  }

  export enum SwitchTracking {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2,
    MomentaryAccelerator = 3
  }

}

export namespace NSShadow {
}

export namespace NSSharingService {
  export enum CloudKitOptions {
    Standard = 0,
    AllowPublic = 1,
    AllowPrivate = 2,
    AllowReadOnly = 16,
    AllowReadWrite = 32
  }

  export enum SharingContentScope {
    Item = 0,
    Partial = 1,
    Full = 2
  }

}

export namespace NSSharingServicePickerToolbarItem {
}

export namespace NSSharingServicePickerTouchBarItem {
}

export namespace NSSlider {
  export enum SliderType {
    Linear = 0,
    Circular = 1
  }

  export enum TickMarkPosition {
    Below = 0,
    Above = 1,
    Leading = 1,
    Trailing = 0
  }

}

export namespace NSSliderAccessory {
}

export namespace NSSliderCell {
  export namespace NSSlider {
    export enum SliderType {
      Linear = 0,
      Circular = 1
    }
    export enum TickMarkPosition {
      Below = 0,
      Above = 1,
      Leading = 1,
      Trailing = 0
    }
  }

}

export namespace NSSliderTouchBarItem {
}

export namespace NSSortDescriptor {
}

export namespace NSSound {
}

export namespace NSSpeechRecognizer {
}

export namespace NSSpeechSynthesizer {
  export enum Boundary {
    ImmediateBoundary = 0,
    WordBoundary = 1,
    SentenceBoundary = 2
  }

}

export namespace NSSpellChecker {
  export enum CorrectionIndicatorType {
    Default = 0,
    Reversion = 1,
    Guesses = 2
  }

  export enum CorrectionResponse {
    None = 0,
    Accepted = 1,
    Rejected = 2,
    Ignored = 3,
    Edited = 4,
    Reverted = 5
  }

}

export namespace NSSpellServer {
}

export namespace NSSplitView {
  export enum DividerStyle {
    Thick = 1,
    Thin = 2,
    PaneSplitter = 3
  }

}

export namespace NSSplitViewController {
}

export namespace NSSplitViewItem {
  export enum Behavior {
    Default = 0,
    Sidebar = 1,
    ContentList = 2
  }

  export enum CollapseBehavior {
    Default = 0,
    PreferResizingSplitViewWithFixedSiblings = 1,
    PreferResizingSiblingsWithFixedSplitView = 2,
    UseConstraints = 3
  }

}

export namespace NSStackView {
  export enum Distribution {
    GravityAreas = -1,
    Fill = 0,
    FillEqually = 1,
    FillProportionally = 2,
    EqualSpacing = 3,
    EqualCentering = 4
  }

  export enum Gravity {
    Top = 1,
    Leading = 1,
    Center = 2,
    Bottom = 3,
    Trailing = 3
  }

}

export namespace NSStatusBar {
}

export namespace NSStatusBarButton {
}

export namespace NSStatusItem {
  export enum Behavior {
    RemovalAllowed = 2,
    TerminationOnRemoval = 4
  }

}

export namespace NSStepper {
}

export namespace NSStepperCell {
}

export namespace NSStepperTouchBarItem {
}

export namespace NSStoryboard {
}

export namespace NSStoryboardSegue {
}

export namespace Stream {
  export enum Event {
    None = 0,
    OpenCompleted = 1,
    HasBytesAvailable = 2,
    HasSpaceAvailable = 4,
    ErrorOccurred = 8,
    EndEncountered = 16
  }

  export enum Status {
    NotOpen = 0,
    Opening = 1,
    Open = 2,
    Reading = 3,
    Writing = 4,
    AtEnd = 5,
    Closed = 6,
    Error = 7
  }

}

// @ts-ignore
export namespace String {
  export enum CompareOptions {
    CaseInsensitiveSearch = 1,
    LiteralSearch = 2,
    BackwardsSearch = 4,
    AnchoredSearch = 8,
    NumericSearch = 64,
    DiacriticInsensitiveSearch = 128,
    WidthInsensitiveSearch = 256,
    ForcedOrderingSearch = 512,
    RegularExpressionSearch = 1024
  }

  export enum DrawingOptions {
    UsesLineFragmentOrigin = 1,
    UsesFontLeading = 2,
    UsesDeviceMetrics = 8,
    TruncatesLastVisibleLine = 32,
    DisableScreenFontSubstitution = 4,
    OneShot = 16
  }

  export enum EncodingConversionOptions {
    AllowLossy = 1,
    ExternalRepresentation = 2
  }

  export enum EnumerationOptions {
    ByLines = 0,
    ByParagraphs = 1,
    ByComposedCharacterSequences = 2,
    ByWords = 3,
    BySentences = 4,
    Reverse = 256,
    SubstringNotRequired = 512,
    Localized = 1024
  }

}

export namespace NSStringDrawing {
  export namespace String {
    export enum DrawingOptions {
      UsesLineFragmentOrigin = 1,
      UsesFontLeading = 2,
      UsesDeviceMetrics = 8,
      TruncatesLastVisibleLine = 32,
      DisableScreenFontSubstitution = 4,
      OneShot = 16
    }
  }

}

export namespace NSSwitch {
}

export namespace NSTabView {
  export enum TabPosition {
    None = 0,
    Top = 1,
    Left = 2,
    Bottom = 3,
    Right = 4
  }

  export enum TabType {
    TopTabsBezelBorder = 0,
    LeftTabsBezelBorder = 1,
    BottomTabsBezelBorder = 2,
    RightTabsBezelBorder = 3,
    NoTabsBezelBorder = 4,
    NoTabsLineBorder = 5,
    NoTabsNoBorder = 6
  }

  export enum TabViewBorderType {
    None = 0,
    Line = 1,
    Bezel = 2
  }

}

export namespace NSTabViewController {
  export enum TabStyle {
    SegmentedControlOnTop = 0,
    SegmentedControlOnBottom = 1,
    Toolbar = 2,
    Unspecified = -1
  }

}

export namespace NSTabViewItem {
  export enum State {
    SelectedTab = 0,
    BackgroundTab = 1,
    PressedTab = 2
  }

}

export namespace NSTableCellView {
}

export namespace NSTableColumn {
  export enum ResizingOptions {
    NoResizing = 0,
    AutoresizingMask = 1,
    UserResizingMask = 2
  }

}

export namespace NSTableHeaderCell {
}

export namespace NSTableHeaderView {
}

export namespace NSTableRowView {
}

export namespace NSTableView {
  export enum AnimationOptions {
    EffectNone = 0,
    EffectFade = 1,
    EffectGap = 2,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 48,
    SlideRight = 64
  }

  export enum ColumnAutoresizingStyle {
    NoColumnAutoresizing = 0,
    UniformColumnAutoresizingStyle = 1,
    SequentialColumnAutoresizingStyle = 2,
    ReverseSequentialColumnAutoresizingStyle = 3,
    LastColumnOnlyAutoresizingStyle = 4,
    FirstColumnOnlyAutoresizingStyle = 5
  }

  export enum DraggingDestinationFeedbackStyle {
    None = -1,
    Regular = 0,
    SourceList = 1,
    Gap = 2
  }

  export enum DropOperation {
    On = 0,
    Above = 1
  }

  export enum GridLineStyle {
    GridNone = 0,
    SolidVerticalGridLineMask = 1,
    SolidHorizontalGridLineMask = 2,
    DashedHorizontalGridLineMask = 8
  }

  export enum RowActionEdge {
    Leading = 0,
    Trailing = 1
  }

  export enum RowSizeStyle {
    Default = -1,
    Custom = 0,
    Small = 1,
    Medium = 2,
    Large = 3
  }

  export enum SelectionHighlightStyle {
    None = -1,
    Regular = 0,
    SourceList = 1
  }

}

export namespace NSTableViewRowAction {
  export enum Style {
    Regular = 0,
    Destructive = 1
  }

}

export namespace Process {
  export enum TerminationReason {
    Exit = 1,
    UncaughtSignal = 2
  }

}

export namespace NSText {
  export enum NSTextAlignment {
    Left = 0,
    Right = 1,
    Center = 2,
    Justified = 3,
    Natural = 4
  }

  export enum NSTextMovement {
    Return = 16,
    Tab = 17,
    Backtab = 18,
    Left = 19,
    Right = 20,
    Up = 21,
    Down = 22,
    Cancel = 23,
    Other = 0
  }

  export enum NSWritingDirection {
    Natural = -1,
    LeftToRight = 0,
    RightToLeft = 1
  }

}

export namespace NSTextAlternatives {
}

export namespace NSTextAttachment {
}

export namespace NSTextCheckingClient {
  export enum NSTextInputTraitType {
    Default = 0,
    No = 1,
    Yes = 2
  }

}

export namespace NSTextCheckingController {
}

export namespace NSTextCheckingResult {
  export enum CheckingType {
    Orthography = 1,
    Spelling = 2,
    Grammar = 4,
    Date = 8,
    Address = 16,
    Link = 32,
    Quote = 64,
    Dash = 128,
    Replacement = 256,
    Correction = 512,
    RegularExpression = 1024,
    PhoneNumber = 2048,
    TransitInformation = 4096
  }

}

export namespace NSTextContainer {
  export enum NSLineMovementDirection {
    DoesntMove = 0,
    MovesLeft = 1,
    MovesRight = 2,
    MovesDown = 3,
    MovesUp = 4
  }

  export enum NSLineSweepDirection {
    Left = 0,
    Right = 1,
    Down = 2,
    Up = 3
  }

}

export namespace NSTextField {
  export enum BezelStyle {
    SquareBezel = 0,
    RoundedBezel = 1
  }

}

export namespace NSTextFieldCell {
  export namespace NSTextField {
    export enum BezelStyle {
      SquareBezel = 0,
      RoundedBezel = 1
    }
  }

}

export namespace NSTextFinder {
  export enum Action {
    ShowFindInterface = 1,
    NextMatch = 2,
    PreviousMatch = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetSearchString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10,
    HideFindInterface = 11,
    ShowReplaceInterface = 12,
    HideReplaceInterface = 13
  }

  export enum MatchingType {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3
  }

}

export namespace NSTextInputContext {
}

export namespace NSTextList {
  export enum Options {
    NSTextListPrependEnclosingMarker = 1
  }

}

export namespace NSTextStorage {
  export enum NSTextStorageEditActions {
    Attributes = 1,
    Characters = 2
  }

}

export namespace NSTextTable {
  export namespace NSTextBlock {
    export enum Dimension {
      Width = 0,
      MinimumWidth = 1,
      MaximumWidth = 2,
      Height = 4,
      MinimumHeight = 5,
      MaximumHeight = 6
    }
    export enum Layer {
      Padding = -1,
      Border = 0,
      Margin = 1
    }
    export enum ValueType {
      AbsoluteValueType = 0,
      PercentageValueType = 1
    }
    export enum VerticalAlignment {
      TopAlignment = 0,
      MiddleAlignment = 1,
      BottomAlignment = 2,
      BaselineAlignment = 3
    }
  }

  export enum LayoutAlgorithm {
    AutomaticLayoutAlgorithm = 0,
    FixedLayoutAlgorithm = 1
  }

}

export namespace NSTextView {
  export enum NSFindPanelAction {
    ShowFindPanel = 1,
    Next = 2,
    Previous = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetFindString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10
  }

  export enum NSFindPanelSubstringMatchType {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3
  }

  export enum NSSelectionAffinity {
    Upstream = 0,
    Downstream = 1
  }

  export enum NSSelectionGranularity {
    Character = 0,
    Word = 1,
    Paragraph = 2
  }

}

export namespace Thread {
}

export namespace TimeZone {
  export enum NameStyle {
    Standard = 0,
    ShortStandard = 1,
    DaylightSaving = 2,
    ShortDaylightSaving = 3,
    Generic = 4,
    ShortGeneric = 5
  }

}

export namespace Timer {
}

export namespace NSTitlebarAccessoryViewController {
}

export namespace NSTokenField {
  export enum TokenStyle {
    Default = 0,
    None = 1,
    Rounded = 2,
    Squared = 3,
    PlainSquared = 4
  }

}

export namespace NSTokenFieldCell {
  export namespace NSTokenField {
    export enum TokenStyle {
      Default = 0,
      None = 1,
      Rounded = 2,
      Squared = 3,
      PlainSquared = 4
    }
  }

}

export namespace NSToolbar {
  export enum DisplayMode {
    Default = 0,
    IconAndLabel = 1,
    IconOnly = 2,
    LabelOnly = 3
  }

  export enum SizeMode {
    Default = 0,
    Regular = 1,
    Small = 2
  }

}

export namespace NSToolbarItem {
}

export namespace NSToolbarItemGroup {
  export enum ControlRepresentation {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2
  }

  export enum SelectionMode {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2
  }

}

export namespace NSTouch {
  export enum Phase {
    Began = 1,
    Moved = 2,
    Stationary = 4,
    Ended = 8,
    Cancelled = 16,
    Touching = 7,
    Any = -1
  }

  export enum TouchType {
    Direct = 0,
    Indirect = 1
  }

  export enum TouchTypeMask {
    Direct = 1,
    Indirect = 2
  }

}

export namespace NSTouchBar {
}

export namespace NSTouchBarItem {
}

export namespace NSTrackingArea {
  export enum Options {
    MouseEnteredAndExited = 1,
    MouseMoved = 2,
    CursorUpdate = 4,
    ActiveWhenFirstResponder = 16,
    ActiveInKeyWindow = 32,
    ActiveInActiveApp = 64,
    ActiveAlways = 128,
    AssumeInside = 256,
    InVisibleRect = 512,
    EnabledDuringMouseDrag = 1024
  }

}

export namespace NSTreeController {
}

export namespace NSTreeNode {
}

export namespace NSTypesetter {
  export enum NSTypesetterControlCharacterAction {
    ZeroAdvancementAction = 1,
    WhitespaceAction = 2,
    HorizontalTabAction = 4,
    LineBreakAction = 8,
    ParagraphBreakAction = 16,
    ContainerBreakAction = 32
  }

}

export namespace URL {
  export enum BookmarkCreationOptions {
    PreferFileIDResolution = 256,
    MinimalBookmark = 512,
    SuitableForBookmarkFile = 1024,
    WithSecurityScope = 2048,
    SecurityScopeAllowOnlyReadAccess = 4096
  }

  export enum BookmarkResolutionOptions {
    outUI = 256,
    outMounting = 512,
    SecurityScope = 1024
  }

}

export namespace URLAuthenticationChallenge {
}

export namespace URLCache {
  export enum StoragePolicy {
    Allowed = 0,
    AllowedInMemoryOnly = 1,
    NotAllowed = 2
  }

}

export namespace NSURLConnection {
}

export namespace URLCredential {
  export enum Persistence {
    None = 0,
    ForSession = 1,
    Permanent = 2,
    Synchronizable = 3
  }

}

export namespace URLCredentialStorage {
}

export namespace NSURLDownload {
}

export namespace NSURLError {
  export enum NSURLErrorNetworkUnavailableReason {
    Cellular = 0,
    Expensive = 1,
    Constrained = 2
  }

}

export namespace NSURLHandle {
  export enum Status {
    NotLoaded = 0,
    LoadSucceeded = 1,
    LoadInProgress = 2,
    LoadFailed = 3
  }

}

export namespace URLProtectionSpace {
}

export namespace URLProtocol {
}

export namespace URLRequest {
  export enum CachePolicy {
    UseProtocolCachePolicy = 0,
    ReloadIgnoringLocalCacheData = 1,
    ReloadIgnoringLocalAndRemoteCacheData = 4,
    ReloadIgnoringCacheData = 1,
    ReturnCacheDataElseLoad = 2,
    ReturnCacheDataDontLoad = 3,
    ReloadRevalidatingCacheData = 5
  }

  export enum NetworkServiceType {
    Default = 0,
    VoIP = 1,
    Video = 2,
    Background = 3,
    Voice = 4,
    ResponsiveData = 6,
    AVStreaming = 8,
    ResponsiveAV = 9,
    CallSignaling = 11
  }

}

export namespace URLResponse {
}

export namespace URLSession {
  export namespace URLSessionTask {
    export enum State {
      Running = 0,
      Suspended = 1,
      Canceling = 2,
      Completed = 3
    }
  }

  export namespace URLSessionTaskMetrics {
    export enum ResourceFetchType {
      Unknown = 0,
      NetworkLoad = 1,
      ServerPush = 2,
      LocalCache = 3
    }
  }

  export namespace URLSessionWebSocketTask {
    export enum CloseCode {
      Invalid = 0,
      NormalClosure = 1000,
      GoingAway = 1001,
      ProtocolError = 1002,
      UnsupportedData = 1003,
      NoStatusReceived = 1005,
      AbnormalClosure = 1006,
      InvalidFramePayloadData = 1007,
      PolicyViolation = 1008,
      MessageTooBig = 1009,
      MandatoryExtensionMissing = 1010,
      InternalServerError = 1011,
      TLSHandshakeFailure = 1015
    }
  }

  export enum AuthChallengeDisposition {
    UseCredential = 0,
    PerformDefaultHandling = 1,
    CancelAuthenticationChallenge = 2,
    RejectProtectionSpace = 3
  }

  export enum NSURLSessionDelayedRequestDisposition {
    ContinueLoading = 0,
    UseNewRequest = 1,
    Cancel = 2
  }

  export enum NSURLSessionMultipathServiceType {
    None = 0,
    Handover = 1,
    Interactive = 2,
    Aggregate = 3
  }

  export enum NSURLSessionWebSocketMessageType {
    Data = 0,
    String = 1
  }

  export enum ResponseDisposition {
    Cancel = 0,
    Allow = 1,
    BecomeDownload = 2,
    BecomeStream = 3
  }

}

export namespace UUID {
}

export namespace NSUbiquitousKeyValueStore {
}

export namespace UndoManager {
}

export namespace Unit {
}

export namespace NSUserActivity {
}

export namespace UserDefaults {
}

export namespace NSUserDefaultsController {
}

export namespace NSUserInterfaceCompression {
}

export namespace NSUserInterfaceLayout {
  export enum NSUserInterfaceLayoutDirection {
    LeftToRight = 0,
    RightToLeft = 1
  }

  export enum NSUserInterfaceLayoutOrientation {
    Horizontal = 0,
    Vertical = 1
  }

}

export namespace NSUserNotification {
  export enum ActivationType {
    None = 0,
    ContentsClicked = 1,
    ActionButtonClicked = 2,
    Replied = 3,
    AdditionalActionClicked = 4
  }

}

export namespace NSUserScriptTask {
}

export namespace NSValue {
}

export namespace ValueTransformer {
}

export namespace NSView {
  export enum AutoresizingMask {
    NotSizable = 0,
    MinXMargin = 1,
    WidthSizable = 2,
    MaxXMargin = 4,
    MinYMargin = 8,
    HeightSizable = 16,
    MaxYMargin = 32
  }

  export enum BackgroundStyle {
    Normal = 0,
    Emphasized = 1,
    Raised = 2,
    Lowered = 3
  }

  export enum LayerContentsPlacement {
    ScaleAxesIndependently = 0,
    ScaleProportionallyToFit = 1,
    ScaleProportionallyToFill = 2,
    Center = 3,
    Top = 4,
    TopRight = 5,
    Right = 6,
    BottomRight = 7,
    Bottom = 8,
    BottomLeft = 9,
    Left = 10,
    TopLeft = 11
  }

  export enum LayerContentsRedrawPolicy {
    Never = 0,
    OnSetNeedsDisplay = 1,
    DuringViewResize = 2,
    BeforeViewResize = 3,
    Crossfade = 4
  }

  export enum NSBorderType {
    NoBorder = 0,
    LineBorder = 1,
    BezelBorder = 2,
    GrooveBorder = 3
  }

}

export namespace NSViewController {
  export enum TransitionOptions {
    None = 0,
    Crossfade = 1,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 64,
    SlideRight = 128,
    SlideForward = 320,
    SlideBackward = 384,
    AllowUserInteraction = 4096
  }

}

export namespace NSVisualEffectView {
  export enum BlendingMode {
    BehindWindow = 0,
    WithinWindow = 1
  }

  export enum Material {
    Titlebar = 3,
    Selection = 4,
    Menu = 5,
    Popover = 6,
    Sidebar = 7,
    HeaderView = 10,
    Sheet = 11,
    WindowBackground = 12,
    HUDWindow = 13,
    FullScreenUI = 15,
    ToolTip = 17,
    ContentBackground = 18,
    UnderWindowBackground = 21,
    UnderPageBackground = 22,
    AppearanceBased = 0,
    Light = 1,
    Dark = 2,
    MediumLight = 8,
    UltraDark = 9
  }

  export enum State {
    FollowsWindowActiveState = 0,
    Active = 1,
    Inactive = 2
  }

}

export namespace NSWindow {
  export enum AnimationBehavior {
    Default = 0,
    None = 2,
    DocumentWindow = 3,
    UtilityWindow = 4,
    AlertPanel = 5
  }

  export enum BackingStoreType {
    Retained = 0,
    Nonretained = 1,
    Buffered = 2
  }

  export enum ButtonType {
    CloseButton = 0,
    MiniaturizeButton = 1,
    ZoomButton = 2,
    ToolbarButton = 3,
    DocumentIconButton = 4,
    DocumentVersionsButton = 6
  }

  export enum CollectionBehavior {
    Default = 0,
    CanJoinAllSpaces = 1,
    MoveToActiveSpace = 2,
    Managed = 4,
    Transient = 8,
    Stationary = 16,
    ParticipatesInCycle = 32,
    IgnoresCycle = 64,
    FullScreenPrimary = 128,
    FullScreenAuxiliary = 256,
    FullScreenNone = 512,
    FullScreenAllowsTiling = 2048,
    FullScreenDisallowsTiling = 4096
  }

  export enum Depth {
    TwentyfourBitRGB = 520,
    SixtyfourBitRGB = 528,
    OnehundredtwentyeightBitRGB = 544
  }

  export enum NumberListOptions {
    Applications = 1,
    Spaces = 16
  }

  export enum OcclusionState {
    NSWindowOcclusionStateVisible = 2
  }

  export enum OrderingMode {
    Above = 1,
    Below = -1,
    Out = 0
  }

  export enum SelectionDirection {
    DirectSelection = 0,
    SelectingNext = 1,
    SelectingPrevious = 2
  }

  export enum SharingType {
    None = 0,
    ReadOnly = 1,
    ReadWrite = 2
  }

  export enum StyleMask {
    Borderless = 0,
    Titled = 1,
    Closable = 2,
    Miniaturizable = 4,
    Resizable = 8,
    TexturedBackground = 256,
    UnifiedTitleAndToolbar = 4096,
    FullScreen = 16384,
    FullSizeContentView = 32768,
    UtilityWindow = 16,
    DocModalWindow = 64,
    NonactivatingPanel = 128,
    HUDWindow = 8192
  }

  export enum TabbingMode {
    Automatic = 0,
    Preferred = 1,
    Disallowed = 2
  }

  export enum TitleVisibility {
    Visible = 0,
    Hidden = 1
  }

  export enum UserTabbingPreference {
    Manual = 0,
    Always = 1,
    InFullScreen = 2
  }

}

export namespace NSWindowController {
}

export namespace NSWindowTab {
}

export namespace NSWindowTabGroup {
}

export namespace NSWorkspace {
  export class Authorization extends NSObject {
  }
  
  export class OpenConfiguration extends NSObject {
    static createWithConfiguration(): NSWorkspace.OpenConfiguration;
    activates: boolean;
    setActivates(_: boolean);
    addsToRecentItems: boolean;
    setAddsToRecentItems(_: boolean);
    allowsRunningApplicationSubstitution: boolean;
    setAllowsRunningApplicationSubstitution(_: boolean);
    appleEvent: NSAppleEventDescriptor;
    setAppleEvent(_: NSAppleEventDescriptor);
    architecture: number;
    setArchitecture(_: number);
    arguments: string[];
    setArguments(_: string[]);
    createsNewApplicationInstance: boolean;
    setCreatesNewApplicationInstance(_: boolean);
    environment: Map<string, string>;
    setEnvironment(_: Map<string, string>);
    isForPrinting: boolean;
    setForPrinting(_: boolean);
    hides: boolean;
    setHides(_: boolean);
    hidesOthers: boolean;
    setHidesOthers(_: boolean);
    promptsUserIfNeeded: boolean;
    setPromptsUserIfNeeded(_: boolean);
    requiresUniversalLinks: boolean;
    setRequiresUniversalLinks(_: boolean);
  }
  
  export enum AuthorizationType {
    CreateSymbolicLink = 0,
    SetAttributes = 1,
    ReplaceFile = 2
  }

  export enum IconCreationOptions {
    eQuickDrawElementsIconCreationOption = 2,
    e10_4ElementsIconCreationOption = 4
  }

  export enum LaunchOptions {
    AndPrint = 2,
    WithErrorPresentation = 64,
    InhibitingBackgroundOnly = 128,
    WithoutAddingToRecents = 256,
    WithoutActivation = 512,
    Async = 65536,
    NewInstance = 524288,
    AndHide = 1048576,
    AndHideOthers = 2097152,
    Default = 65536,
    AllowingClassicStartup = 131072,
    PreferringClassic = 262144
  }

}

export namespace XMLDTD {
}

export namespace XMLDTDNode {
  export enum DTDKind {
    EntityGeneralKind = 1,
    EntityParsedKind = 2,
    EntityUnparsedKind = 3,
    EntityParameterKind = 4,
    EntityPredefined = 5,
    AttributeCDATAKind = 6,
    AttributeIDKind = 7,
    AttributeIDRefKind = 8,
    AttributeIDRefsKind = 9,
    AttributeEntityKind = 10,
    AttributeEntitiesKind = 11,
    AttributeNMTokenKind = 12,
    AttributeNMTokensKind = 13,
    AttributeEnumerationKind = 14,
    AttributeNotationKind = 15,
    ElementDeclarationUndefinedKind = 16,
    ElementDeclarationEmptyKind = 17,
    ElementDeclarationAnyKind = 18,
    ElementDeclarationMixedKind = 19,
    ElementDeclarationElementKind = 20
  }

}

export namespace XMLDocument {
  export enum ContentKind {
    XMLKind = 0,
    XHTMLKind = 1,
    HTMLKind = 2,
    TextKind = 3
  }

}

export namespace XMLElement {
}

export namespace XMLNode {
  export enum Kind {
    InvalidKind = 0,
    DocumentKind = 1,
    ElementKind = 2,
    AttributeKind = 3,
    NamespaceKind = 4,
    ProcessingInstructionKind = 5,
    CommentKind = 6,
    TextKind = 7,
    DTDKind = 8,
    EntityDeclarationKind = 9,
    AttributeDeclarationKind = 10,
    ElementDeclarationKind = 11,
    NotationDeclarationKind = 12
  }

  export enum Options {
    NodeOptionsNone = 0,
    NodeIsCDATA = 1,
    NodeExpandEmptyElement = 2,
    NodeCompactEmptyElement = 4,
    NodeUseSingleQuotes = 8,
    NodeUseDoubleQuotes = 16,
    NodeNeverEscapeContents = 32,
    DocumentTidyHTML = 512,
    DocumentTidyXML = 1024,
    DocumentValidate = 8192,
    NodeLoadExternalEntitiesAlways = 16384,
    NodeLoadExternalEntitiesSameOriginOnly = 32768,
    NodeLoadExternalEntitiesNever = 524288,
    DocumentXInclude = 65536,
    NodePrettyPrint = 131072,
    DocumentIncludeContentTypeDeclaration = 262144,
    NodePreserveNamespaceOrder = 1048576,
    NodePreserveAttributeOrder = 2097152,
    NodePreserveEntities = 4194304,
    NodePreservePrefixes = 8388608,
    NodePreserveCDATA = 16777216,
    NodePreserveWhitespace = 33554432,
    NodePreserveDTD = 67108864,
    NodePreserveCharacterReferences = 134217728,
    NodePromoteSignificantWhitespace = 268435456,
    NodePreserveEmptyElements = 6,
    NodePreserveQuotes = 24,
    NodePreserveAll = 4293918750
  }

}

export namespace XMLParser {
  export enum ErrorCode {
    InternalError = 1,
    OutOfMemoryError = 2,
    DocumentStartError = 3,
    EmptyDocumentError = 4,
    PrematureDocumentEndError = 5,
    InvalidHexCharacterRefError = 6,
    InvalidDecimalCharacterRefError = 7,
    InvalidCharacterRefError = 8,
    InvalidCharacterError = 9,
    CharacterRefAtEOFError = 10,
    CharacterRefInPrologError = 11,
    CharacterRefInEpilogError = 12,
    CharacterRefInDTDError = 13,
    EntityRefAtEOFError = 14,
    EntityRefInPrologError = 15,
    EntityRefInEpilogError = 16,
    EntityRefInDTDError = 17,
    ParsedEntityRefAtEOFError = 18,
    ParsedEntityRefInPrologError = 19,
    ParsedEntityRefInEpilogError = 20,
    ParsedEntityRefInInternalSubsetError = 21,
    EntityReferenceWithoutNameError = 22,
    EntityReferenceMissingSemiError = 23,
    ParsedEntityRefNoNameError = 24,
    ParsedEntityRefMissingSemiError = 25,
    UndeclaredEntityError = 26,
    UnparsedEntityError = 28,
    EntityIsExternalError = 29,
    EntityIsParameterError = 30,
    UnknownEncodingError = 31,
    EncodingNotSupportedError = 32,
    StringNotStartedError = 33,
    StringNotClosedError = 34,
    NamespaceDeclarationError = 35,
    EntityNotStartedError = 36,
    EntityNotFinishedError = 37,
    LessThanSymbolInAttributeError = 38,
    AttributeNotStartedError = 39,
    AttributeNotFinishedError = 40,
    AttributeHasNoValueError = 41,
    AttributeRedefinedError = 42,
    LiteralNotStartedError = 43,
    LiteralNotFinishedError = 44,
    CommentNotFinishedError = 45,
    ProcessingInstructionNotStartedError = 46,
    ProcessingInstructionNotFinishedError = 47,
    NotationNotStartedError = 48,
    NotationNotFinishedError = 49,
    AttributeListNotStartedError = 50,
    AttributeListNotFinishedError = 51,
    MixedContentDeclNotStartedError = 52,
    MixedContentDeclNotFinishedError = 53,
    ElementContentDeclNotStartedError = 54,
    ElementContentDeclNotFinishedError = 55,
    XMLDeclNotStartedError = 56,
    XMLDeclNotFinishedError = 57,
    ConditionalSectionNotStartedError = 58,
    ConditionalSectionNotFinishedError = 59,
    ExternalSubsetNotFinishedError = 60,
    DOCTYPEDeclNotFinishedError = 61,
    MisplacedCDATAEndStringError = 62,
    CDATANotFinishedError = 63,
    MisplacedXMLDeclarationError = 64,
    SpaceRequiredError = 65,
    SeparatorRequiredError = 66,
    NMTOKENRequiredError = 67,
    NAMERequiredError = 68,
    PCDATARequiredError = 69,
    URIRequiredError = 70,
    PublicIdentifierRequiredError = 71,
    LTRequiredError = 72,
    GTRequiredError = 73,
    LTSlashRequiredError = 74,
    EqualExpectedError = 75,
    TagNameMismatchError = 76,
    UnfinishedTagError = 77,
    StandaloneValueError = 78,
    InvalidEncodingNameError = 79,
    CommentContainsDoubleHyphenError = 80,
    InvalidEncodingError = 81,
    ExternalStandaloneEntityError = 82,
    InvalidConditionalSectionError = 83,
    EntityValueRequiredError = 84,
    NotWellBalancedError = 85,
    ExtraContentError = 86,
    InvalidCharacterInEntityError = 87,
    ParsedEntityRefInInternalError = 88,
    EntityRefLoopError = 89,
    EntityBoundaryError = 90,
    InvalidURIError = 91,
    URIFragmentError = 92,
    NoDTDError = 94,
    DelegateAbortedParseError = 512
  }

  export enum ExternalEntityResolvingPolicy {
    Never = 0,
    NoNetwork = 1,
    SameOriginOnly = 2,
    Always = 3
  }

}

export namespace NSXPCConnection {
  export enum Options {
    NSXPCConnectionPrivileged = 4096
  }

}

export namespace QCPlugIn {
  export enum QCPlugInExecutionMode {
    Provider = 1,
    Processor = 2,
    Consumer = 3
  }

  export enum QCPlugInTimeMode {
    None = 0,
    Idle = 1,
    TimeBase = 2
  }

}

export namespace QLPreviewPanel {
}

export namespace QLPreviewView {
  export enum QLPreviewViewStyle {
    Normal = 0,
    Compact = 1
  }

}

export namespace QuartzFilter {
}

export namespace QuartzFilterManager {
}

export namespace SKIndex {
  export enum SKDocumentIndexState {
    NotIndexed = 0,
    Indexed = 1,
    AddPending = 2,
    DeletePending = 3
  }

  export enum SKIndexType {
    Unknown = 0,
    Inverted = 1,
    Vector = 2,
    InvertedVector = 3
  }

}

export namespace SKSearch {
  export enum SKSearchType {
    Ranked = 0,
    BooleanRanked = 1,
    RequiredRanked = 2,
    PrefixRanked = 3
  }

}

export namespace WSTypes {
  export enum WSTypeID {
    UnknownType = 0,
    NullType = 1,
    BooleanType = 2,
    IntegerType = 3,
    DoubleType = 4,
    StringType = 5,
    DateType = 6,
    DataType = 7,
    ArrayType = 8,
    DictionaryType = 9
  }

}

export namespace runtime {
  export enum objc_AssociationPolicy {
    N_ASSIGN = 0,
    N_RETAIN_NONATOMIC = 1,
    N_COPY_NONATOMIC = 3,
    N_RETAIN = 769,
    N_COPY = 771
  }

}

}

// Add enums to the already-existing bridged classes
//
// If we didn't do this, these would be duplicated
// (i.e. both NSButton and NSButton$1 would exist
// in global scope)

let global = globalThis as any;

(globalThis as any)['AUGenericView'] = (globalThis as any)['AUGenericView'] || {};
(globalThis as any)['AUGenericView']['AUGenericViewDisplayFlags'] = (globalThis as any)['AUGenericView']['AUGenericViewDisplayFlags'] || {};
(globalThis as any)['AUGenericView']['AUGenericViewDisplayFlags'] = {
  TitleDisplayFlag: 1,
  PropertiesDisplayFlag: 2,
  ParametersDisplayFlag: 4
};


(globalThis as any)['AUPannerView'] = (globalThis as any)['AUPannerView'] || {};

(globalThis as any)['AVAsset'] = (globalThis as any)['AVAsset'] || {};
(globalThis as any)['AVAsset']['AVAssetReferenceRestrictions'] = (globalThis as any)['AVAsset']['AVAssetReferenceRestrictions'] || {};
(globalThis as any)['AVAsset']['AVAssetReferenceRestrictions'] = {
  ForbidNone: 0,
  ForbidRemoteReferenceToLocal: 1,
  ForbidLocalReferenceToRemote: 2,
  ForbidCrossSiteReference: 4,
  ForbidLocalReferenceToLocal: 8,
  ForbidAll: 65535,
  DefaultPolicy: 2
};


(globalThis as any)['AVAssetCache'] = (globalThis as any)['AVAssetCache'] || {};

(globalThis as any)['AVAssetExportSession'] = (globalThis as any)['AVAssetExportSession'] || {};
(globalThis as any)['AVAssetExportSession']['Status'] = (globalThis as any)['AVAssetExportSession']['Status'] || {};
(globalThis as any)['AVAssetExportSession']['Status'] = {
  Unknown: 0,
  Waiting: 1,
  Exporting: 2,
  Completed: 3,
  Failed: 4,
  Cancelled: 5
};


(globalThis as any)['AVAssetImageGenerator'] = (globalThis as any)['AVAssetImageGenerator'] || {};
(globalThis as any)['AVAssetImageGenerator']['Result'] = (globalThis as any)['AVAssetImageGenerator']['Result'] || {};
(globalThis as any)['AVAssetImageGenerator']['Result'] = {
  Succeeded: 0,
  Failed: 1,
  Cancelled: 2
};


(globalThis as any)['AVAssetReader'] = (globalThis as any)['AVAssetReader'] || {};
(globalThis as any)['AVAssetReader']['Status'] = (globalThis as any)['AVAssetReader']['Status'] || {};
(globalThis as any)['AVAssetReader']['Status'] = {
  Unknown: 0,
  Reading: 1,
  Completed: 2,
  Failed: 3,
  Cancelled: 4
};


(globalThis as any)['AVAssetReaderOutput'] = (globalThis as any)['AVAssetReaderOutput'] || {};

(globalThis as any)['AVAssetResourceLoader'] = (globalThis as any)['AVAssetResourceLoader'] || {};

(globalThis as any)['AVAssetTrack'] = (globalThis as any)['AVAssetTrack'] || {};

(globalThis as any)['AVAssetTrackGroup'] = (globalThis as any)['AVAssetTrackGroup'] || {};

(globalThis as any)['AVAssetTrackSegment'] = (globalThis as any)['AVAssetTrackSegment'] || {};

(globalThis as any)['AVAssetWriter'] = (globalThis as any)['AVAssetWriter'] || {};
(globalThis as any)['AVAssetWriter']['Status'] = (globalThis as any)['AVAssetWriter']['Status'] || {};
(globalThis as any)['AVAssetWriter']['Status'] = {
  Unknown: 0,
  Writing: 1,
  Completed: 2,
  Failed: 3,
  Cancelled: 4
};


(globalThis as any)['AVAssetWriterInput'] = (globalThis as any)['AVAssetWriterInput'] || {};

(globalThis as any)['AVAsynchronousKeyValueLoading'] = (globalThis as any)['AVAsynchronousKeyValueLoading'] || {};
(globalThis as any)['AVAsynchronousKeyValueLoading']['AVKeyValueStatus'] = (globalThis as any)['AVAsynchronousKeyValueLoading']['AVKeyValueStatus'] || {};
(globalThis as any)['AVAsynchronousKeyValueLoading']['AVKeyValueStatus'] = {
  Unknown: 0,
  Loading: 1,
  Loaded: 2,
  Failed: 3,
  Cancelled: 4
};


(globalThis as any)['AVAudioBuffer'] = (globalThis as any)['AVAudioBuffer'] || {};

(globalThis as any)['AVAudioChannelLayout'] = (globalThis as any)['AVAudioChannelLayout'] || {};

(globalThis as any)['AVAudioConnectionPoint'] = (globalThis as any)['AVAudioConnectionPoint'] || {};

(globalThis as any)['AVAudioConverter'] = (globalThis as any)['AVAudioConverter'] || {};
(globalThis as any)['AVAudioConverter']['AVAudioConverterInputStatus'] = (globalThis as any)['AVAudioConverter']['AVAudioConverterInputStatus'] || {};
(globalThis as any)['AVAudioConverter']['AVAudioConverterInputStatus'] = {
  _HaveData: 0,
  _NoDataNow: 1,
  _EndOfStream: 2
};

(globalThis as any)['AVAudioConverter']['AVAudioConverterOutputStatus'] = (globalThis as any)['AVAudioConverter']['AVAudioConverterOutputStatus'] || {};
(globalThis as any)['AVAudioConverter']['AVAudioConverterOutputStatus'] = {
  _HaveData: 0,
  _InputRanDry: 1,
  _EndOfStream: 2,
  _Error: 3
};

(globalThis as any)['AVAudioConverter']['AVAudioConverterPrimeMethod'] = (globalThis as any)['AVAudioConverter']['AVAudioConverterPrimeMethod'] || {};
(globalThis as any)['AVAudioConverter']['AVAudioConverterPrimeMethod'] = {
  _Pre: 0,
  _Normal: 1,
  _None: 2
};


(globalThis as any)['AVAudioEngine'] = (globalThis as any)['AVAudioEngine'] || {};
(globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingError'] = (globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingError'] || {};
(globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingError'] = {
  InvalidMode: -80800,
  Initialized: -80801,
  NotRunning: -80802
};

(globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingMode'] = (globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingMode'] || {};
(globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingMode'] = {
  Offline: 0,
  Realtime: 1
};

(globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingStatus'] = (globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingStatus'] || {};
(globalThis as any)['AVAudioEngine']['AVAudioEngineManualRenderingStatus'] = {
  Error: -1,
  Success: 0,
  InsufficientDataFromInputNode: 1,
  CannotDoInCurrentContext: 2
};


(globalThis as any)['AVAudioEnvironmentNode'] = (globalThis as any)['AVAudioEnvironmentNode'] || {};
(globalThis as any)['AVAudioEnvironmentNode']['AVAudioEnvironmentDistanceAttenuationModel'] = (globalThis as any)['AVAudioEnvironmentNode']['AVAudioEnvironmentDistanceAttenuationModel'] || {};
(globalThis as any)['AVAudioEnvironmentNode']['AVAudioEnvironmentDistanceAttenuationModel'] = {
  Exponential: 1,
  Inverse: 2,
  Linear: 3
};

(globalThis as any)['AVAudioEnvironmentNode']['AVAudioEnvironmentOutputType'] = (globalThis as any)['AVAudioEnvironmentNode']['AVAudioEnvironmentOutputType'] || {};
(globalThis as any)['AVAudioEnvironmentNode']['AVAudioEnvironmentOutputType'] = {
  Auto: 0,
  Headphones: 1,
  BuiltInSpeakers: 2,
  ExternalSpeakers: 3
};


(globalThis as any)['AVAudioFile'] = (globalThis as any)['AVAudioFile'] || {};

(globalThis as any)['AVAudioFormat'] = (globalThis as any)['AVAudioFormat'] || {};
(globalThis as any)['AVAudioFormat']['AVAudioCommonFormat'] = (globalThis as any)['AVAudioFormat']['AVAudioCommonFormat'] || {};
(globalThis as any)['AVAudioFormat']['AVAudioCommonFormat'] = {
  OtherFormat: 0,
  PCMFormatFloat32: 1,
  PCMFormatFloat64: 2,
  PCMFormatInt16: 3,
  PCMFormatInt32: 4
};


(globalThis as any)['AVAudioIONode'] = (globalThis as any)['AVAudioIONode'] || {};

(globalThis as any)['AVAudioMix'] = (globalThis as any)['AVAudioMix'] || {};

(globalThis as any)['AVAudioMixerNode'] = (globalThis as any)['AVAudioMixerNode'] || {};

(globalThis as any)['AVAudioMixing'] = (globalThis as any)['AVAudioMixing'] || {};
(globalThis as any)['AVAudioMixing']['AVAudio3DMixingPointSourceInHeadMode'] = (globalThis as any)['AVAudioMixing']['AVAudio3DMixingPointSourceInHeadMode'] || {};
(globalThis as any)['AVAudioMixing']['AVAudio3DMixingPointSourceInHeadMode'] = {
  eMono: 0,
  eBypass: 1
};

(globalThis as any)['AVAudioMixing']['AVAudio3DMixingRenderingAlgorithm'] = (globalThis as any)['AVAudioMixing']['AVAudio3DMixingRenderingAlgorithm'] || {};
(globalThis as any)['AVAudioMixing']['AVAudio3DMixingRenderingAlgorithm'] = {
  mEqualPowerPanning: 0,
  mSphericalHead: 1,
  mHRTF: 2,
  mSoundField: 3,
  mStereoPassThrough: 5,
  mHRTFHQ: 6,
  mAuto: 7
};

(globalThis as any)['AVAudioMixing']['AVAudio3DMixingSourceMode'] = (globalThis as any)['AVAudioMixing']['AVAudio3DMixingSourceMode'] || {};
(globalThis as any)['AVAudioMixing']['AVAudio3DMixingSourceMode'] = {
  eSpatializeIfMono: 0,
  eBypass: 1,
  ePointSource: 2,
  eAmbienceBed: 3
};


(globalThis as any)['AVAudioNode'] = (globalThis as any)['AVAudioNode'] || {};

(globalThis as any)['AVAudioPlayer'] = (globalThis as any)['AVAudioPlayer'] || {};

(globalThis as any)['AVAudioPlayerNode'] = (globalThis as any)['AVAudioPlayerNode'] || {};
(globalThis as any)['AVAudioPlayerNode']['AVAudioPlayerNodeBufferOptions'] = (globalThis as any)['AVAudioPlayerNode']['AVAudioPlayerNodeBufferOptions'] || {};
(globalThis as any)['AVAudioPlayerNode']['AVAudioPlayerNodeBufferOptions'] = {
  Loops: 1,
  Interrupts: 2,
  InterruptsAtLoop: 4
};

(globalThis as any)['AVAudioPlayerNode']['AVAudioPlayerNodeCompletionCallbackType'] = (globalThis as any)['AVAudioPlayerNode']['AVAudioPlayerNodeCompletionCallbackType'] || {};
(globalThis as any)['AVAudioPlayerNode']['AVAudioPlayerNodeCompletionCallbackType'] = {
  Consumed: 0,
  Rendered: 1,
  PlayedBack: 2
};


(globalThis as any)['AVAudioRecorder'] = (globalThis as any)['AVAudioRecorder'] || {};

(globalThis as any)['AVAudioSequencer'] = (globalThis as any)['AVAudioSequencer'] || {};
(globalThis as any)['AVAudioSequencer']['AVMusicSequenceLoadOptions'] = (globalThis as any)['AVAudioSequencer']['AVMusicSequenceLoadOptions'] || {};
(globalThis as any)['AVAudioSequencer']['AVMusicSequenceLoadOptions'] = {
  _PreserveTracks: 0,
  _ChannelsToTracks: 1
};

(globalThis as any)['AVAudioSequencer']['AVMusicTrackLoopCount'] = (globalThis as any)['AVAudioSequencer']['AVMusicTrackLoopCount'] || {};
(globalThis as any)['AVAudioSequencer']['AVMusicTrackLoopCount'] = {
  AVMusicTrackLoopCountForever: -1
};


(globalThis as any)['AVAudioSession'] = (globalThis as any)['AVAudioSession'] || {};
(globalThis as any)['AVAudioSession']['AVAudioSessionActivationOptions'] = (globalThis as any)['AVAudioSession']['AVAudioSessionActivationOptions'] || {};
(globalThis as any)['AVAudioSession']['AVAudioSessionActivationOptions'] = {
  AVAudioSessionActivationOptionNone: 0
};

(globalThis as any)['AVAudioSession']['CategoryOptions'] = (globalThis as any)['AVAudioSession']['CategoryOptions'] || {};
(globalThis as any)['AVAudioSession']['CategoryOptions'] = {
  MixWithOthers: 1,
  DuckOthers: 2,
  AllowBluetooth: 4,
  DefaultToSpeaker: 8,
  InterruptSpokenAudioAndMixWithOthers: 17,
  AllowBluetoothA2DP: 32,
  AllowAirPlay: 64
};

(globalThis as any)['AVAudioSession']['ErrorCode'] = (globalThis as any)['AVAudioSession']['ErrorCode'] || {};
(globalThis as any)['AVAudioSession']['ErrorCode'] = {
  None: 0,
  MediaServicesFailed: 1836282486,
  IsBusy: 560030580,
  IncompatibleCategory: 560161140,
  CannotInterruptOthers: 560557684,
  MissingEntitlement: 1701737535,
  SiriIsRecording: 1936290409,
  CannotStartPlaying: 561015905,
  CannotStartRecording: 561145187,
  BadParam: -50,
  InsufficientPriority: 561017449,
  ResourceNotAvailable: 561145203,
  Unspecified: 2003329396,
  ExpiredSession: 561210739,
  SessionNotActive: 1768841571
};

(globalThis as any)['AVAudioSession']['IOType'] = (globalThis as any)['AVAudioSession']['IOType'] || {};
(globalThis as any)['AVAudioSession']['IOType'] = {
  NotSpecified: 0,
  Aggregated: 1
};

(globalThis as any)['AVAudioSession']['InterruptionOptions'] = (globalThis as any)['AVAudioSession']['InterruptionOptions'] || {};
(globalThis as any)['AVAudioSession']['InterruptionOptions'] = {
  AVAudioSessionInterruptionOptionShouldResume: 1
};

(globalThis as any)['AVAudioSession']['InterruptionType'] = (globalThis as any)['AVAudioSession']['InterruptionType'] || {};
(globalThis as any)['AVAudioSession']['InterruptionType'] = {
  Began: 1,
  Ended: 0
};

(globalThis as any)['AVAudioSession']['PortOverride'] = (globalThis as any)['AVAudioSession']['PortOverride'] || {};
(globalThis as any)['AVAudioSession']['PortOverride'] = {
  None: 0,
  Speaker: 1936747378
};

(globalThis as any)['AVAudioSession']['PromptStyle'] = (globalThis as any)['AVAudioSession']['PromptStyle'] || {};
(globalThis as any)['AVAudioSession']['PromptStyle'] = {
  None: 1852796517,
  Short: 1936224884,
  Normal: 1852992876
};

(globalThis as any)['AVAudioSession']['RecordPermission'] = (globalThis as any)['AVAudioSession']['RecordPermission'] || {};
(globalThis as any)['AVAudioSession']['RecordPermission'] = {
  Undetermined: 1970168948,
  Denied: 1684369017,
  Granted: 1735552628
};

(globalThis as any)['AVAudioSession']['RouteChangeReason'] = (globalThis as any)['AVAudioSession']['RouteChangeReason'] || {};
(globalThis as any)['AVAudioSession']['RouteChangeReason'] = {
  Unknown: 0,
  NewDeviceAvailable: 1,
  OldDeviceUnavailable: 2,
  CategoryChange: 3,
  Override: 4,
  WakeFromSleep: 6,
  NoSuitableRouteForCategory: 7,
  RouteConfigurationChange: 8
};

(globalThis as any)['AVAudioSession']['RouteSharingPolicy'] = (globalThis as any)['AVAudioSession']['RouteSharingPolicy'] || {};
(globalThis as any)['AVAudioSession']['RouteSharingPolicy'] = {
  Default: 0,
  LongFormAudio: 1,
  LongForm: 1,
  Independent: 2,
  LongFormVideo: 3
};

(globalThis as any)['AVAudioSession']['SetActiveOptions'] = (globalThis as any)['AVAudioSession']['SetActiveOptions'] || {};
(globalThis as any)['AVAudioSession']['SetActiveOptions'] = {
  AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation: 1
};

(globalThis as any)['AVAudioSession']['SilenceSecondaryAudioHintType'] = (globalThis as any)['AVAudioSession']['SilenceSecondaryAudioHintType'] || {};
(globalThis as any)['AVAudioSession']['SilenceSecondaryAudioHintType'] = {
  Begin: 1,
  End: 0
};


(globalThis as any)['AVAudioSettings'] = (globalThis as any)['AVAudioSettings'] || {};
(globalThis as any)['AVAudioSettings']['AVAudioQuality'] = (globalThis as any)['AVAudioSettings']['AVAudioQuality'] || {};
(globalThis as any)['AVAudioSettings']['AVAudioQuality'] = {
  Min: 0,
  Low: 32,
  Medium: 64,
  High: 96,
  Max: 127
};


(globalThis as any)['AVAudioTime'] = (globalThis as any)['AVAudioTime'] || {};

(globalThis as any)['AVAudioUnit'] = (globalThis as any)['AVAudioUnit'] || {};

(globalThis as any)['AVAudioUnitComponent'] = (globalThis as any)['AVAudioUnitComponent'] || {};

(globalThis as any)['AVAudioUnitDelay'] = (globalThis as any)['AVAudioUnitDelay'] || {};

(globalThis as any)['AVAudioUnitDistortion'] = (globalThis as any)['AVAudioUnitDistortion'] || {};
(globalThis as any)['AVAudioUnitDistortion']['AVAudioUnitDistortionPreset'] = (globalThis as any)['AVAudioUnitDistortion']['AVAudioUnitDistortionPreset'] || {};
(globalThis as any)['AVAudioUnitDistortion']['AVAudioUnitDistortionPreset'] = {
  DrumsBitBrush: 0,
  DrumsBufferBeats: 1,
  DrumsLoFi: 2,
  MultiBrokenSpeaker: 3,
  MultiCellphoneConcert: 4,
  MultiDecimated1: 5,
  MultiDecimated2: 6,
  MultiDecimated3: 7,
  MultiDecimated4: 8,
  MultiDistortedFunk: 9,
  MultiDistortedCubed: 10,
  MultiDistortedSquared: 11,
  MultiEcho1: 12,
  MultiEcho2: 13,
  MultiEchoTight1: 14,
  MultiEchoTight2: 15,
  MultiEverythingIsBroken: 16,
  SpeechAlienChatter: 17,
  SpeechCosmicInterference: 18,
  SpeechGoldenPi: 19,
  SpeechRadioTower: 20,
  SpeechWaves: 21
};


(globalThis as any)['AVAudioUnitEQ'] = (globalThis as any)['AVAudioUnitEQ'] || {};
(globalThis as any)['AVAudioUnitEQ']['AVAudioUnitEQFilterType'] = (globalThis as any)['AVAudioUnitEQ']['AVAudioUnitEQFilterType'] || {};
(globalThis as any)['AVAudioUnitEQ']['AVAudioUnitEQFilterType'] = {
  Parametric: 0,
  LowPass: 1,
  HighPass: 2,
  ResonantLowPass: 3,
  ResonantHighPass: 4,
  BandPass: 5,
  BandStop: 6,
  LowShelf: 7,
  HighShelf: 8,
  ResonantLowShelf: 9,
  ResonantHighShelf: 10
};


(globalThis as any)['AVAudioUnitEffect'] = (globalThis as any)['AVAudioUnitEffect'] || {};

(globalThis as any)['AVAudioUnitGenerator'] = (globalThis as any)['AVAudioUnitGenerator'] || {};

(globalThis as any)['AVAudioUnitMIDIInstrument'] = (globalThis as any)['AVAudioUnitMIDIInstrument'] || {};

(globalThis as any)['AVAudioUnitReverb'] = (globalThis as any)['AVAudioUnitReverb'] || {};
(globalThis as any)['AVAudioUnitReverb']['AVAudioUnitReverbPreset'] = (globalThis as any)['AVAudioUnitReverb']['AVAudioUnitReverbPreset'] || {};
(globalThis as any)['AVAudioUnitReverb']['AVAudioUnitReverbPreset'] = {
  SmallRoom: 0,
  MediumRoom: 1,
  LargeRoom: 2,
  MediumHall: 3,
  LargeHall: 4,
  Plate: 5,
  MediumChamber: 6,
  LargeChamber: 7,
  Cathedral: 8,
  LargeRoom2: 9,
  MediumHall2: 10,
  MediumHall3: 11,
  LargeHall2: 12
};


(globalThis as any)['AVAudioUnitSampler'] = (globalThis as any)['AVAudioUnitSampler'] || {};

(globalThis as any)['AVAudioUnitTimeEffect'] = (globalThis as any)['AVAudioUnitTimeEffect'] || {};

(globalThis as any)['AVAudioUnitTimePitch'] = (globalThis as any)['AVAudioUnitTimePitch'] || {};

(globalThis as any)['AVAudioUnitVarispeed'] = (globalThis as any)['AVAudioUnitVarispeed'] || {};

(globalThis as any)['AVCameraCalibrationData'] = (globalThis as any)['AVCameraCalibrationData'] || {};

(globalThis as any)['AVCaptureAudioDataOutput'] = (globalThis as any)['AVCaptureAudioDataOutput'] || {};

(globalThis as any)['AVCaptureAudioPreviewOutput'] = (globalThis as any)['AVCaptureAudioPreviewOutput'] || {};

(globalThis as any)['AVCaptureDataOutputSynchronizer'] = (globalThis as any)['AVCaptureDataOutputSynchronizer'] || {};

(globalThis as any)['AVCaptureDepthDataOutput'] = (globalThis as any)['AVCaptureDepthDataOutput'] || {};

(globalThis as any)['AVCaptureDevice'] = (globalThis as any)['AVCaptureDevice'] || {};
(globalThis as any)['AVCaptureDevice']['Format'] = (globalThis as any)['AVCaptureDevice']['Format'] || {};
(globalThis as any)['AVCaptureDevice']['Format']['AutoFocusSystem'] = (globalThis as any)['AVCaptureDevice']['Format']['AutoFocusSystem'] || {};
(globalThis as any)['AVCaptureDevice']['Format']['AutoFocusSystem'] = {
  None: 0,
  ContrastDetection: 1,
  PhaseDetection: 2
};

(globalThis as any)['AVCaptureDevice']['SystemPressureState'] = (globalThis as any)['AVCaptureDevice']['SystemPressureState'] || {};
(globalThis as any)['AVCaptureDevice']['SystemPressureState']['Factors'] = (globalThis as any)['AVCaptureDevice']['SystemPressureState']['Factors'] || {};
(globalThis as any)['AVCaptureDevice']['SystemPressureState']['Factors'] = {
  None: 0,
  SystemTemperature: 1,
  PeakPower: 2,
  DepthModuleTemperature: 4
};

(globalThis as any)['AVCaptureDevice']['AVAuthorizationStatus'] = (globalThis as any)['AVCaptureDevice']['AVAuthorizationStatus'] || {};
(globalThis as any)['AVCaptureDevice']['AVAuthorizationStatus'] = {
  NotDetermined: 0,
  Restricted: 1,
  Denied: 2,
  Authorized: 3
};

(globalThis as any)['AVCaptureDevice']['AVCaptureColorSpace'] = (globalThis as any)['AVCaptureDevice']['AVCaptureColorSpace'] || {};
(globalThis as any)['AVCaptureDevice']['AVCaptureColorSpace'] = {
  _sRGB: 0,
  _P3_D65: 1
};

(globalThis as any)['AVCaptureDevice']['AVCaptureVideoStabilizationMode'] = (globalThis as any)['AVCaptureDevice']['AVCaptureVideoStabilizationMode'] || {};
(globalThis as any)['AVCaptureDevice']['AVCaptureVideoStabilizationMode'] = {
  Off: 0,
  Standard: 1,
  Cinematic: 2,
  CinematicExtended: 3,
  Auto: -1
};

(globalThis as any)['AVCaptureDevice']['AutoFocusRangeRestriction'] = (globalThis as any)['AVCaptureDevice']['AutoFocusRangeRestriction'] || {};
(globalThis as any)['AVCaptureDevice']['AutoFocusRangeRestriction'] = {
  None: 0,
  Near: 1,
  Far: 2
};

(globalThis as any)['AVCaptureDevice']['ExposureMode'] = (globalThis as any)['AVCaptureDevice']['ExposureMode'] || {};
(globalThis as any)['AVCaptureDevice']['ExposureMode'] = {
  Locked: 0,
  AutoExpose: 1,
  ContinuousAutoExposure: 2,
  Custom: 3
};

(globalThis as any)['AVCaptureDevice']['FlashMode'] = (globalThis as any)['AVCaptureDevice']['FlashMode'] || {};
(globalThis as any)['AVCaptureDevice']['FlashMode'] = {
  Off: 0,
  On: 1,
  Auto: 2
};

(globalThis as any)['AVCaptureDevice']['FocusMode'] = (globalThis as any)['AVCaptureDevice']['FocusMode'] || {};
(globalThis as any)['AVCaptureDevice']['FocusMode'] = {
  Locked: 0,
  AutoFocus: 1,
  ContinuousAutoFocus: 2
};

(globalThis as any)['AVCaptureDevice']['LensStabilizationStatus'] = (globalThis as any)['AVCaptureDevice']['LensStabilizationStatus'] || {};
(globalThis as any)['AVCaptureDevice']['LensStabilizationStatus'] = {
  Unsupported: 0,
  Off: 1,
  Active: 2,
  OutOfRange: 3,
  Unavailable: 4
};

(globalThis as any)['AVCaptureDevice']['Position'] = (globalThis as any)['AVCaptureDevice']['Position'] || {};
(globalThis as any)['AVCaptureDevice']['Position'] = {
  Unspecified: 0,
  Back: 1,
  Front: 2
};

(globalThis as any)['AVCaptureDevice']['TorchMode'] = (globalThis as any)['AVCaptureDevice']['TorchMode'] || {};
(globalThis as any)['AVCaptureDevice']['TorchMode'] = {
  Off: 0,
  On: 1,
  Auto: 2
};

(globalThis as any)['AVCaptureDevice']['TransportControlsPlaybackMode'] = (globalThis as any)['AVCaptureDevice']['TransportControlsPlaybackMode'] || {};
(globalThis as any)['AVCaptureDevice']['TransportControlsPlaybackMode'] = {
  NotPlayingMode: 0,
  PlayingMode: 1
};

(globalThis as any)['AVCaptureDevice']['WhiteBalanceMode'] = (globalThis as any)['AVCaptureDevice']['WhiteBalanceMode'] || {};
(globalThis as any)['AVCaptureDevice']['WhiteBalanceMode'] = {
  Locked: 0,
  AutoWhiteBalance: 1,
  ContinuousAutoWhiteBalance: 2
};


(globalThis as any)['AVCaptureFileOutput'] = (globalThis as any)['AVCaptureFileOutput'] || {};

(globalThis as any)['AVCaptureInput'] = (globalThis as any)['AVCaptureInput'] || {};

(globalThis as any)['AVCaptureMetadataOutput'] = (globalThis as any)['AVCaptureMetadataOutput'] || {};

(globalThis as any)['AVCaptureOutputBase'] = (globalThis as any)['AVCaptureOutputBase'] || {};
(globalThis as any)['AVCaptureOutputBase']['AVCaptureOutput'] = (globalThis as any)['AVCaptureOutputBase']['AVCaptureOutput'] || {};
(globalThis as any)['AVCaptureOutputBase']['AVCaptureOutput']['DataDroppedReason'] = (globalThis as any)['AVCaptureOutputBase']['AVCaptureOutput']['DataDroppedReason'] || {};
(globalThis as any)['AVCaptureOutputBase']['AVCaptureOutput']['DataDroppedReason'] = {
  None: 0,
  LateData: 1,
  OutOfBuffers: 2,
  Discontinuity: 3
};


(globalThis as any)['AVCapturePhotoOutput'] = (globalThis as any)['AVCapturePhotoOutput'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVAuthorizationStatus'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVAuthorizationStatus'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVAuthorizationStatus'] = {
  NotDetermined: 0,
  Restricted: 1,
  Denied: 2,
  Authorized: 3
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVCaptureColorSpace'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVCaptureColorSpace'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVCaptureColorSpace'] = {
  _sRGB: 0,
  _P3_D65: 1
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVCaptureVideoStabilizationMode'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVCaptureVideoStabilizationMode'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AVCaptureVideoStabilizationMode'] = {
  Off: 0,
  Standard: 1,
  Cinematic: 2,
  CinematicExtended: 3,
  Auto: -1
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AutoFocusRangeRestriction'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AutoFocusRangeRestriction'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['AutoFocusRangeRestriction'] = {
  None: 0,
  Near: 1,
  Far: 2
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['ExposureMode'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['ExposureMode'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['ExposureMode'] = {
  Locked: 0,
  AutoExpose: 1,
  ContinuousAutoExposure: 2,
  Custom: 3
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['FlashMode'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['FlashMode'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['FlashMode'] = {
  Off: 0,
  On: 1,
  Auto: 2
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['FocusMode'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['FocusMode'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['FocusMode'] = {
  Locked: 0,
  AutoFocus: 1,
  ContinuousAutoFocus: 2
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['LensStabilizationStatus'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['LensStabilizationStatus'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['LensStabilizationStatus'] = {
  Unsupported: 0,
  Off: 1,
  Active: 2,
  OutOfRange: 3,
  Unavailable: 4
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['Position'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['Position'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['Position'] = {
  Unspecified: 0,
  Back: 1,
  Front: 2
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['TorchMode'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['TorchMode'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['TorchMode'] = {
  Off: 0,
  On: 1,
  Auto: 2
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['TransportControlsPlaybackMode'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['TransportControlsPlaybackMode'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['TransportControlsPlaybackMode'] = {
  NotPlayingMode: 0,
  PlayingMode: 1
};

(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['WhiteBalanceMode'] = (globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['WhiteBalanceMode'] || {};
(globalThis as any)['AVCapturePhotoOutput']['AVCaptureDevice']['WhiteBalanceMode'] = {
  Locked: 0,
  AutoWhiteBalance: 1,
  ContinuousAutoWhiteBalance: 2
};

(globalThis as any)['AVCapturePhotoOutput']['QualityPrioritization'] = (globalThis as any)['AVCapturePhotoOutput']['QualityPrioritization'] || {};
(globalThis as any)['AVCapturePhotoOutput']['QualityPrioritization'] = {
  Speed: 1,
  Balanced: 2,
  Quality: 3
};


(globalThis as any)['AVCaptureSession'] = (globalThis as any)['AVCaptureSession'] || {};
(globalThis as any)['AVCaptureSession']['AVCaptureVideoOrientation'] = (globalThis as any)['AVCaptureSession']['AVCaptureVideoOrientation'] || {};
(globalThis as any)['AVCaptureSession']['AVCaptureVideoOrientation'] = {
  Portrait: 1,
  PortraitUpsideDown: 2,
  LandscapeRight: 3,
  LandscapeLeft: 4
};

(globalThis as any)['AVCaptureSession']['AVVideoFieldMode'] = (globalThis as any)['AVCaptureSession']['AVVideoFieldMode'] || {};
(globalThis as any)['AVCaptureSession']['AVVideoFieldMode'] = {
  Both: 0,
  TopOnly: 1,
  BottomOnly: 2,
  Deinterlace: 3
};

(globalThis as any)['AVCaptureSession']['InterruptionReason'] = (globalThis as any)['AVCaptureSession']['InterruptionReason'] || {};
(globalThis as any)['AVCaptureSession']['InterruptionReason'] = {
  VideoDeviceNotAvailableInBackground: 1,
  AudioDeviceInUseByAnotherClient: 2,
  VideoDeviceInUseByAnotherClient: 3,
  VideoDeviceNotAvailableWithMultipleForegroundApps: 4,
  VideoDeviceNotAvailableDueToSystemPressure: 5
};


(globalThis as any)['AVCaptureVideoDataOutput'] = (globalThis as any)['AVCaptureVideoDataOutput'] || {};

(globalThis as any)['AVCaptureVideoPreviewLayer'] = (globalThis as any)['AVCaptureVideoPreviewLayer'] || {};

(globalThis as any)['AVCaptureView'] = (globalThis as any)['AVCaptureView'] || {};
(globalThis as any)['AVCaptureView']['AVCaptureViewControlsStyle'] = (globalThis as any)['AVCaptureView']['AVCaptureViewControlsStyle'] || {};
(globalThis as any)['AVCaptureView']['AVCaptureViewControlsStyle'] = {
  Inline: 0,
  Floating: 1,
  InlineDeviceSelection: 2,
  Default: 0
};


(globalThis as any)['AVComposition'] = (globalThis as any)['AVComposition'] || {};

(globalThis as any)['AVCompositionTrack'] = (globalThis as any)['AVCompositionTrack'] || {};

(globalThis as any)['AVCompositionTrackSegment'] = (globalThis as any)['AVCompositionTrackSegment'] || {};

(globalThis as any)['AVContentKeySession'] = (globalThis as any)['AVContentKeySession'] || {};
(globalThis as any)['AVContentKeySession']['AVContentKeyRequest'] = (globalThis as any)['AVContentKeySession']['AVContentKeyRequest'] || {};
(globalThis as any)['AVContentKeySession']['AVContentKeyRequest']['Status'] = (globalThis as any)['AVContentKeySession']['AVContentKeyRequest']['Status'] || {};
(globalThis as any)['AVContentKeySession']['AVContentKeyRequest']['Status'] = {
  RequestingResponse: 0,
  ReceivedResponse: 1,
  Renewed: 2,
  Retried: 3,
  Cancelled: 4,
  Failed: 5
};


(globalThis as any)['AVDepthData'] = (globalThis as any)['AVDepthData'] || {};
(globalThis as any)['AVDepthData']['Accuracy'] = (globalThis as any)['AVDepthData']['Accuracy'] || {};
(globalThis as any)['AVDepthData']['Accuracy'] = {
  Relative: 0,
  Absolute: 1
};

(globalThis as any)['AVDepthData']['Quality'] = (globalThis as any)['AVDepthData']['Quality'] || {};
(globalThis as any)['AVDepthData']['Quality'] = {
  Low: 0,
  High: 1
};


(globalThis as any)['AVError'] = (globalThis as any)['AVError'] || {};
(globalThis as any)['AVError']['AVError'] = (globalThis as any)['AVError']['AVError'] || {};
(globalThis as any)['AVError']['AVError'] = {
  Unknown: -11800,
  OutOfMemory: -11801,
  SessionNotRunning: -11803,
  DeviceAlreadyUsedByAnotherSession: -11804,
  NoDataCaptured: -11805,
  SessionConfigurationChanged: -11806,
  DiskFull: -11807,
  DeviceWasDisconnected: -11808,
  MediaChanged: -11809,
  MaximumDurationReached: -11810,
  MaximumFileSizeReached: -11811,
  MediaDiscontinuity: -11812,
  MaximumNumberOfSamplesForFileFormatReached: -11813,
  DeviceNotConnected: -11814,
  DeviceInUseByAnotherApplication: -11815,
  DeviceLockedForConfigurationByAnotherProcess: -11817,
  ExportFailed: -11820,
  DecodeFailed: -11821,
  InvalidSourceMedia: -11822,
  FileAlreadyExists: -11823,
  CompositionTrackSegmentsNotContiguous: -11824,
  InvalidCompositionTrackSegmentDuration: -11825,
  InvalidCompositionTrackSegmentSourceStartTime: -11826,
  InvalidCompositionTrackSegmentSourceDuration: -11827,
  FileFormatNotRecognized: -11828,
  FileFailedToParse: -11829,
  MaximumStillImageCaptureRequestsExceeded: -11830,
  ContentIsProtected: -11831,
  NoImageAtTime: -11832,
  DecoderNotFound: -11833,
  EncoderNotFound: -11834,
  ContentIsNotAuthorized: -11835,
  ApplicationIsNotAuthorized: -11836,
  OperationNotSupportedForAsset: -11838,
  DecoderTemporarilyUnavailable: -11839,
  EncoderTemporarilyUnavailable: -11840,
  InvalidVideoComposition: -11841,
  ReferenceForbiddenByReferencePolicy: -11842,
  InvalidOutputURLPathExtension: -11843,
  ScreenCaptureFailed: -11844,
  DisplayWasDisabled: -11845,
  TorchLevelUnavailable: -11846,
  IncompatibleAsset: -11848,
  FailedToLoadMediaData: -11849,
  ServerIncorrectlyConfigured: -11850,
  ApplicationIsNotAuthorizedToUseDevice: -11852,
  FailedToParse: -11853,
  FileTypeDoesNotSupportSampleReferences: -11854,
  UndecodableMediaData: -11855,
  AirPlayControllerRequiresInternet: -11856,
  AirPlayReceiverRequiresInternet: -11857,
  VideoCompositorFailed: -11858,
  CreateContentKeyRequestFailed: -11860,
  UnsupportedOutputSettings: -11861,
  OperationNotAllowed: -11862,
  ContentIsUnavailable: -11863,
  FormatUnsupported: -11864,
  MalformedDepth: -11865,
  ContentNotUpdated: -11866,
  NoLongerPlayable: -11867,
  NoCompatibleAlternatesForExternalDisplay: -11868,
  NoSourceTrack: -11869,
  ExternalPlaybackNotSupportedForAsset: -11870,
  OperationNotSupportedForPreset: -11871,
  SessionHardwareCostOverage: -11872,
  UnsupportedDeviceActiveFormat: -11873
};


(globalThis as any)['AVMIDIPlayer'] = (globalThis as any)['AVMIDIPlayer'] || {};

(globalThis as any)['AVMediaSelection'] = (globalThis as any)['AVMediaSelection'] || {};

(globalThis as any)['AVMediaSelectionGroup'] = (globalThis as any)['AVMediaSelectionGroup'] || {};

(globalThis as any)['AVMetadataItem'] = (globalThis as any)['AVMetadataItem'] || {};

(globalThis as any)['AVMetadataObject'] = (globalThis as any)['AVMetadataObject'] || {};

(globalThis as any)['AVMovie'] = (globalThis as any)['AVMovie'] || {};
(globalThis as any)['AVMovie']['AVMovieWritingOptions'] = (globalThis as any)['AVMovie']['AVMovieWritingOptions'] || {};
(globalThis as any)['AVMovie']['AVMovieWritingOptions'] = {
  AddMovieHeaderToDestination: 0,
  TruncateDestinationToMovieHeaderOnly: 1
};


(globalThis as any)['AVMovieTrack'] = (globalThis as any)['AVMovieTrack'] || {};

(globalThis as any)['AVOutputSettingsAssistant'] = (globalThis as any)['AVOutputSettingsAssistant'] || {};

(globalThis as any)['AVPictureInPictureController'] = (globalThis as any)['AVPictureInPictureController'] || {};

(globalThis as any)['AVPlayer'] = (globalThis as any)['AVPlayer'] || {};
(globalThis as any)['AVPlayer']['ActionAtItemEnd'] = (globalThis as any)['AVPlayer']['ActionAtItemEnd'] || {};
(globalThis as any)['AVPlayer']['ActionAtItemEnd'] = {
  Advance: 0,
  Pause: 1,
  None: 2
};

(globalThis as any)['AVPlayer']['HDRMode'] = (globalThis as any)['AVPlayer']['HDRMode'] || {};
(globalThis as any)['AVPlayer']['HDRMode'] = {
  HLG: 1,
  HDR10: 2,
  DolbyVision: 4
};

(globalThis as any)['AVPlayer']['Status'] = (globalThis as any)['AVPlayer']['Status'] || {};
(globalThis as any)['AVPlayer']['Status'] = {
  Unknown: 0,
  ReadyToPlay: 1,
  Failed: 2
};

(globalThis as any)['AVPlayer']['TimeControlStatus'] = (globalThis as any)['AVPlayer']['TimeControlStatus'] || {};
(globalThis as any)['AVPlayer']['TimeControlStatus'] = {
  Paused: 0,
  WaitingToPlayAtSpecifiedRate: 1,
  Playing: 2
};


(globalThis as any)['AVPlayerItem'] = (globalThis as any)['AVPlayerItem'] || {};
(globalThis as any)['AVPlayerItem']['Status'] = (globalThis as any)['AVPlayerItem']['Status'] || {};
(globalThis as any)['AVPlayerItem']['Status'] = {
  Unknown: 0,
  ReadyToPlay: 1,
  Failed: 2
};


(globalThis as any)['AVPlayerItemOutput'] = (globalThis as any)['AVPlayerItemOutput'] || {};

(globalThis as any)['AVPlayerItemProtectedContentAdditions'] = (globalThis as any)['AVPlayerItemProtectedContentAdditions'] || {};
(globalThis as any)['AVPlayerItemProtectedContentAdditions']['AVContentAuthorizationStatus'] = (globalThis as any)['AVPlayerItemProtectedContentAdditions']['AVContentAuthorizationStatus'] || {};
(globalThis as any)['AVPlayerItemProtectedContentAdditions']['AVContentAuthorizationStatus'] = {
  Unknown: 0,
  Completed: 1,
  Cancelled: 2,
  TimedOut: 3,
  Busy: 4,
  NotAvailable: 5,
  NotPossible: 6
};


(globalThis as any)['AVPlayerItemTrack'] = (globalThis as any)['AVPlayerItemTrack'] || {};

(globalThis as any)['AVPlayerLayer'] = (globalThis as any)['AVPlayerLayer'] || {};

(globalThis as any)['AVPlayerLooper'] = (globalThis as any)['AVPlayerLooper'] || {};
(globalThis as any)['AVPlayerLooper']['Status'] = (globalThis as any)['AVPlayerLooper']['Status'] || {};
(globalThis as any)['AVPlayerLooper']['Status'] = {
  Unknown: 0,
  Ready: 1,
  Failed: 2,
  Cancelled: 3
};


(globalThis as any)['AVPlayerMediaSelectionCriteria'] = (globalThis as any)['AVPlayerMediaSelectionCriteria'] || {};

(globalThis as any)['AVPlayerView'] = (globalThis as any)['AVPlayerView'] || {};
(globalThis as any)['AVPlayerView']['AVPlayerViewControlsStyle'] = (globalThis as any)['AVPlayerView']['AVPlayerViewControlsStyle'] || {};
(globalThis as any)['AVPlayerView']['AVPlayerViewControlsStyle'] = {
  None: 0,
  Inline: 1,
  Floating: 2,
  Minimal: 3,
  Default: 1
};

(globalThis as any)['AVPlayerView']['AVPlayerViewTrimResult'] = (globalThis as any)['AVPlayerView']['AVPlayerViewTrimResult'] || {};
(globalThis as any)['AVPlayerView']['AVPlayerViewTrimResult'] = {
  OKButton: 0,
  CancelButton: 1
};


(globalThis as any)['AVPortraitEffectsMatte'] = (globalThis as any)['AVPortraitEffectsMatte'] || {};

(globalThis as any)['AVQueuedSampleBufferRendering'] = (globalThis as any)['AVQueuedSampleBufferRendering'] || {};
(globalThis as any)['AVQueuedSampleBufferRendering']['AVQueuedSampleBufferRenderingStatus'] = (globalThis as any)['AVQueuedSampleBufferRendering']['AVQueuedSampleBufferRenderingStatus'] || {};
(globalThis as any)['AVQueuedSampleBufferRendering']['AVQueuedSampleBufferRenderingStatus'] = {
  Unknown: 0,
  Rendering: 1,
  Failed: 2
};


(globalThis as any)['AVRouteDetector'] = (globalThis as any)['AVRouteDetector'] || {};

(globalThis as any)['AVRoutePickerView'] = (globalThis as any)['AVRoutePickerView'] || {};
(globalThis as any)['AVRoutePickerView']['AVRoutePickerViewButtonState'] = (globalThis as any)['AVRoutePickerView']['AVRoutePickerViewButtonState'] || {};
(globalThis as any)['AVRoutePickerView']['AVRoutePickerViewButtonState'] = {
  Normal: 0,
  NormalHighlighted: 1,
  Active: 2,
  ActiveHighlighted: 3
};


(globalThis as any)['AVSampleBufferAudioRenderer'] = (globalThis as any)['AVSampleBufferAudioRenderer'] || {};

(globalThis as any)['AVSampleBufferDisplayLayer'] = (globalThis as any)['AVSampleBufferDisplayLayer'] || {};

(globalThis as any)['AVSampleBufferGenerator'] = (globalThis as any)['AVSampleBufferGenerator'] || {};
(globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest'] = (globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest'] || {};
(globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest']['Direction'] = (globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest']['Direction'] || {};
(globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest']['Direction'] = {
  Forward: 1,
  None: 0,
  Reverse: -1
};

(globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest'] = (globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest'] || {};
(globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest']['Mode'] = (globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest']['Mode'] || {};
(globalThis as any)['AVSampleBufferGenerator']['AVSampleBufferRequest']['Mode'] = {
  Immediate: 0,
  Scheduled: 1,
  Opportunistic: 2
};


(globalThis as any)['AVSampleBufferRenderSynchronizer'] = (globalThis as any)['AVSampleBufferRenderSynchronizer'] || {};

(globalThis as any)['AVSampleCursor'] = (globalThis as any)['AVSampleCursor'] || {};

(globalThis as any)['AVSemanticSegmentationMatte'] = (globalThis as any)['AVSemanticSegmentationMatte'] || {};

(globalThis as any)['AVSpeechSynthesis'] = (globalThis as any)['AVSpeechSynthesis'] || {};
(globalThis as any)['AVSpeechSynthesis']['AVSpeechBoundary'] = (globalThis as any)['AVSpeechSynthesis']['AVSpeechBoundary'] || {};
(globalThis as any)['AVSpeechSynthesis']['AVSpeechBoundary'] = {
  Immediate: 0,
  Word: 1
};

(globalThis as any)['AVSpeechSynthesis']['AVSpeechSynthesisVoiceGender'] = (globalThis as any)['AVSpeechSynthesis']['AVSpeechSynthesisVoiceGender'] || {};
(globalThis as any)['AVSpeechSynthesis']['AVSpeechSynthesisVoiceGender'] = {
  Unspecified: 0,
  Male: 1,
  Female: 2
};

(globalThis as any)['AVSpeechSynthesis']['AVSpeechSynthesisVoiceQuality'] = (globalThis as any)['AVSpeechSynthesis']['AVSpeechSynthesisVoiceQuality'] || {};
(globalThis as any)['AVSpeechSynthesis']['AVSpeechSynthesisVoiceQuality'] = {
  Default: 1,
  Enhanced: 2
};


(globalThis as any)['AVSynchronizedLayer'] = (globalThis as any)['AVSynchronizedLayer'] || {};

(globalThis as any)['AVTextStyleRule'] = (globalThis as any)['AVTextStyleRule'] || {};

(globalThis as any)['AVTimedMetadataGroup'] = (globalThis as any)['AVTimedMetadataGroup'] || {};

(globalThis as any)['AVVideoCompositing'] = (globalThis as any)['AVVideoCompositing'] || {};

(globalThis as any)['AVVideoComposition'] = (globalThis as any)['AVVideoComposition'] || {};

(globalThis as any)['Array'] = (globalThis as any)['Array'] || {};
(globalThis as any)['Array']['NSBinarySearchingOptions'] = (globalThis as any)['Array']['NSBinarySearchingOptions'] || {};
(globalThis as any)['Array']['NSBinarySearchingOptions'] = {
  FirstEqual: 256,
  LastEqual: 512,
  InsertionIndex: 1024
};


(globalThis as any)['AudioHardware'] = (globalThis as any)['AudioHardware'] || {};
(globalThis as any)['AudioHardware']['AudioHardwarePowerHint'] = (globalThis as any)['AudioHardware']['AudioHardwarePowerHint'] || {};
(globalThis as any)['AudioHardware']['AudioHardwarePowerHint'] = {
  None: 0,
  FavorSavingPower: 1
};


(globalThis as any)['AudioServerPlugIn'] = (globalThis as any)['AudioServerPlugIn'] || {};
(globalThis as any)['AudioServerPlugIn']['AudioDeviceClockAlgorithmSelector'] = (globalThis as any)['AudioServerPlugIn']['AudioDeviceClockAlgorithmSelector'] || {};
(globalThis as any)['AudioServerPlugIn']['AudioDeviceClockAlgorithmSelector'] = {
  mRaw: 1918990199,
  mSimpleIIR: 1768518246,
  m12PtMovingWindowAverage: 1835103847
};

(globalThis as any)['AudioServerPlugIn']['AudioServerPlugInIOOperation'] = (globalThis as any)['AudioServerPlugIn']['AudioServerPlugInIOOperation'] || {};
(globalThis as any)['AudioServerPlugIn']['AudioServerPlugInIOOperation'] = {
  Thread: 1953002084,
  Cycle: 1668899692,
  ReadInput: 1919246692,
  ConvertInput: 1667853936,
  ProcessInput: 1885957744,
  ProcessOutput: 1886352756,
  MixOutput: 1835628655,
  ProcessMix: 1886218616,
  ConvertMix: 1668114808,
  WriteMix: 1919513701
};


(globalThis as any)['AudioSessionTypes'] = (globalThis as any)['AudioSessionTypes'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['AVAudioSessionActivationOptions'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['AVAudioSessionActivationOptions'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['AVAudioSessionActivationOptions'] = {
  AVAudioSessionActivationOptionNone: 0
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['CategoryOptions'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['CategoryOptions'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['CategoryOptions'] = {
  MixWithOthers: 1,
  DuckOthers: 2,
  AllowBluetooth: 4,
  DefaultToSpeaker: 8,
  InterruptSpokenAudioAndMixWithOthers: 17,
  AllowBluetoothA2DP: 32,
  AllowAirPlay: 64
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['ErrorCode'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['ErrorCode'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['ErrorCode'] = {
  None: 0,
  MediaServicesFailed: 1836282486,
  IsBusy: 560030580,
  IncompatibleCategory: 560161140,
  CannotInterruptOthers: 560557684,
  MissingEntitlement: 1701737535,
  SiriIsRecording: 1936290409,
  CannotStartPlaying: 561015905,
  CannotStartRecording: 561145187,
  BadParam: -50,
  InsufficientPriority: 561017449,
  ResourceNotAvailable: 561145203,
  Unspecified: 2003329396,
  ExpiredSession: 561210739,
  SessionNotActive: 1768841571
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['IOType'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['IOType'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['IOType'] = {
  NotSpecified: 0,
  Aggregated: 1
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['InterruptionOptions'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['InterruptionOptions'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['InterruptionOptions'] = {
  AVAudioSessionInterruptionOptionShouldResume: 1
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['InterruptionType'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['InterruptionType'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['InterruptionType'] = {
  Began: 1,
  Ended: 0
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['PortOverride'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['PortOverride'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['PortOverride'] = {
  None: 0,
  Speaker: 1936747378
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['PromptStyle'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['PromptStyle'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['PromptStyle'] = {
  None: 1852796517,
  Short: 1936224884,
  Normal: 1852992876
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['RecordPermission'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['RecordPermission'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['RecordPermission'] = {
  Undetermined: 1970168948,
  Denied: 1684369017,
  Granted: 1735552628
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['RouteChangeReason'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['RouteChangeReason'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['RouteChangeReason'] = {
  Unknown: 0,
  NewDeviceAvailable: 1,
  OldDeviceUnavailable: 2,
  CategoryChange: 3,
  Override: 4,
  WakeFromSleep: 6,
  NoSuitableRouteForCategory: 7,
  RouteConfigurationChange: 8
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['RouteSharingPolicy'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['RouteSharingPolicy'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['RouteSharingPolicy'] = {
  Default: 0,
  LongFormAudio: 1,
  LongForm: 1,
  Independent: 2,
  LongFormVideo: 3
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['SetActiveOptions'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['SetActiveOptions'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['SetActiveOptions'] = {
  AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation: 1
};

(globalThis as any)['AudioSessionTypes']['AVAudioSession'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['SilenceSecondaryAudioHintType'] = (globalThis as any)['AudioSessionTypes']['AVAudioSession']['SilenceSecondaryAudioHintType'] || {};
(globalThis as any)['AudioSessionTypes']['AVAudioSession']['SilenceSecondaryAudioHintType'] = {
  Begin: 1,
  End: 0
};


(globalThis as any)['ByteCountFormatter'] = (globalThis as any)['ByteCountFormatter'] || {};
(globalThis as any)['ByteCountFormatter']['CountStyle'] = (globalThis as any)['ByteCountFormatter']['CountStyle'] || {};
(globalThis as any)['ByteCountFormatter']['CountStyle'] = {
  File: 0,
  Memory: 1,
  Decimal: 2,
  Binary: 3
};

(globalThis as any)['ByteCountFormatter']['Units'] = (globalThis as any)['ByteCountFormatter']['Units'] || {};
(globalThis as any)['ByteCountFormatter']['Units'] = {
  Default: 0,
  Bytes: 1,
  KB: 2,
  MB: 4,
  GB: 8,
  TB: 16,
  PB: 32,
  EB: 64,
  ZB: 128,
  YBOrHigher: 65280,
  All: 65535
};


(globalThis as any)['CAAnimation'] = (globalThis as any)['CAAnimation'] || {};

(globalThis as any)['CAConstraintLayoutManager'] = (globalThis as any)['CAConstraintLayoutManager'] || {};
(globalThis as any)['CAConstraintLayoutManager']['CAConstraintAttribute'] = (globalThis as any)['CAConstraintLayoutManager']['CAConstraintAttribute'] || {};
(globalThis as any)['CAConstraintLayoutManager']['CAConstraintAttribute'] = {
  MinX: 0,
  MidX: 1,
  MaxX: 2,
  Width: 3,
  MinY: 4,
  MidY: 5,
  MaxY: 6,
  Height: 7
};


(globalThis as any)['CADisplayLink'] = (globalThis as any)['CADisplayLink'] || {};

(globalThis as any)['CAEDRMetadata'] = (globalThis as any)['CAEDRMetadata'] || {};

(globalThis as any)['CAEmitterCell'] = (globalThis as any)['CAEmitterCell'] || {};

(globalThis as any)['CAEmitterLayer'] = (globalThis as any)['CAEmitterLayer'] || {};

(globalThis as any)['CAGradientLayer'] = (globalThis as any)['CAGradientLayer'] || {};

(globalThis as any)['CALayer'] = (globalThis as any)['CALayer'] || {};
(globalThis as any)['CALayer']['CAAutoresizingMask'] = (globalThis as any)['CALayer']['CAAutoresizingMask'] || {};
(globalThis as any)['CALayer']['CAAutoresizingMask'] = {
  NotSizable: 0,
  MinXMargin: 1,
  WidthSizable: 2,
  MaxXMargin: 4,
  MinYMargin: 8,
  HeightSizable: 16,
  MaxYMargin: 32
};

(globalThis as any)['CALayer']['CACornerMask'] = (globalThis as any)['CALayer']['CACornerMask'] || {};
(globalThis as any)['CALayer']['CACornerMask'] = {
  inXMinYCorner: 1,
  axXMinYCorner: 2,
  inXMaxYCorner: 4,
  axXMaxYCorner: 8
};

(globalThis as any)['CALayer']['CAEdgeAntialiasingMask'] = (globalThis as any)['CALayer']['CAEdgeAntialiasingMask'] || {};
(globalThis as any)['CALayer']['CAEdgeAntialiasingMask'] = {
  LeftEdge: 1,
  RightEdge: 2,
  BottomEdge: 4,
  TopEdge: 8
};


(globalThis as any)['CAMediaTiming'] = (globalThis as any)['CAMediaTiming'] || {};

(globalThis as any)['CAMediaTimingFunction'] = (globalThis as any)['CAMediaTimingFunction'] || {};

(globalThis as any)['CAMetalLayer'] = (globalThis as any)['CAMetalLayer'] || {};

(globalThis as any)['CANetworkBrowserWindowController'] = (globalThis as any)['CANetworkBrowserWindowController'] || {};

(globalThis as any)['CARemoteLayerClient'] = (globalThis as any)['CARemoteLayerClient'] || {};

(globalThis as any)['CARemoteLayerServer'] = (globalThis as any)['CARemoteLayerServer'] || {};

(globalThis as any)['CARenderer'] = (globalThis as any)['CARenderer'] || {};

(globalThis as any)['CAReplicatorLayer'] = (globalThis as any)['CAReplicatorLayer'] || {};

(globalThis as any)['CAScrollLayer'] = (globalThis as any)['CAScrollLayer'] || {};

(globalThis as any)['CAShapeLayer'] = (globalThis as any)['CAShapeLayer'] || {};

(globalThis as any)['CATextLayer'] = (globalThis as any)['CATextLayer'] || {};

(globalThis as any)['CATiledLayer'] = (globalThis as any)['CATiledLayer'] || {};

(globalThis as any)['CATransaction'] = (globalThis as any)['CATransaction'] || {};

(globalThis as any)['CAValueFunction'] = (globalThis as any)['CAValueFunction'] || {};

(globalThis as any)['CBATTRequest'] = (globalThis as any)['CBATTRequest'] || {};

(globalThis as any)['CBAttribute'] = (globalThis as any)['CBAttribute'] || {};

(globalThis as any)['CBCentral'] = (globalThis as any)['CBCentral'] || {};

(globalThis as any)['CBCentralManager'] = (globalThis as any)['CBCentralManager'] || {};
(globalThis as any)['CBCentralManager']['CBCentralManagerFeature'] = (globalThis as any)['CBCentralManager']['CBCentralManagerFeature'] || {};
(globalThis as any)['CBCentralManager']['CBCentralManagerFeature'] = {
  CBCentralManagerFeatureExtendedScanAndConnect: 1
};

(globalThis as any)['CBCentralManager']['CBConnectionEvent'] = (globalThis as any)['CBCentralManager']['CBConnectionEvent'] || {};
(globalThis as any)['CBCentralManager']['CBConnectionEvent'] = {
  Disconnected: 0,
  Connected: 1
};


(globalThis as any)['CBCharacteristic'] = (globalThis as any)['CBCharacteristic'] || {};
(globalThis as any)['CBCharacteristic']['CBAttributePermissions'] = (globalThis as any)['CBCharacteristic']['CBAttributePermissions'] || {};
(globalThis as any)['CBCharacteristic']['CBAttributePermissions'] = {
  Readable: 1,
  Writeable: 2,
  ReadEncryptionRequired: 4,
  WriteEncryptionRequired: 8
};

(globalThis as any)['CBCharacteristic']['CBCharacteristicProperties'] = (globalThis as any)['CBCharacteristic']['CBCharacteristicProperties'] || {};
(globalThis as any)['CBCharacteristic']['CBCharacteristicProperties'] = {
  Broadcast: 1,
  Read: 2,
  WriteWithoutResponse: 4,
  Write: 8,
  Notify: 16,
  Indicate: 32,
  AuthenticatedSignedWrites: 64,
  ExtendedProperties: 128,
  NotifyEncryptionRequired: 256,
  IndicateEncryptionRequired: 512
};


(globalThis as any)['CBDescriptor'] = (globalThis as any)['CBDescriptor'] || {};

(globalThis as any)['CBError'] = (globalThis as any)['CBError'] || {};
(globalThis as any)['CBError']['CBATTError'] = (globalThis as any)['CBError']['CBATTError'] || {};
(globalThis as any)['CBError']['CBATTError'] = {
  Success: 0,
  InvalidHandle: 1,
  ReadNotPermitted: 2,
  WriteNotPermitted: 3,
  InvalidPdu: 4,
  InsufficientAuthentication: 5,
  RequestNotSupported: 6,
  InvalidOffset: 7,
  InsufficientAuthorization: 8,
  PrepareQueueFull: 9,
  AttributeNotFound: 10,
  AttributeNotLong: 11,
  InsufficientEncryptionKeySize: 12,
  InvalidAttributeValueLength: 13,
  UnlikelyError: 14,
  InsufficientEncryption: 15,
  UnsupportedGroupType: 16,
  InsufficientResources: 17
};

(globalThis as any)['CBError']['CBError'] = (globalThis as any)['CBError']['CBError'] || {};
(globalThis as any)['CBError']['CBError'] = {
  Unknown: 0,
  InvalidParameters: 1,
  InvalidHandle: 2,
  NotConnected: 3,
  OutOfSpace: 4,
  OperationCancelled: 5,
  ConnectionTimeout: 6,
  PeripheralDisconnected: 7,
  UUIDNotAllowed: 8,
  AlreadyAdvertising: 9,
  ConnectionFailed: 10,
  ConnectionLimitReached: 11,
  UnkownDevice: 12,
  UnknownDevice: 12,
  OperationNotSupported: 13,
  PeerRemovedPairingInformation: 14,
  EncryptionTimedOut: 15
};


(globalThis as any)['CBL2CAPChannel'] = (globalThis as any)['CBL2CAPChannel'] || {};

(globalThis as any)['CBManager'] = (globalThis as any)['CBManager'] || {};
(globalThis as any)['CBManager']['CBManagerAuthorization'] = (globalThis as any)['CBManager']['CBManagerAuthorization'] || {};
(globalThis as any)['CBManager']['CBManagerAuthorization'] = {
  NotDetermined: 0,
  Restricted: 1,
  Denied: 2,
  AllowedAlways: 3
};

(globalThis as any)['CBManager']['CBManagerState'] = (globalThis as any)['CBManager']['CBManagerState'] || {};
(globalThis as any)['CBManager']['CBManagerState'] = {
  Unknown: 0,
  Resetting: 1,
  Unsupported: 2,
  Unauthorized: 3,
  PoweredOff: 4,
  PoweredOn: 5
};


(globalThis as any)['CBPeer'] = (globalThis as any)['CBPeer'] || {};

(globalThis as any)['CBPeripheral'] = (globalThis as any)['CBPeripheral'] || {};
(globalThis as any)['CBPeripheral']['CBCharacteristicWriteType'] = (globalThis as any)['CBPeripheral']['CBCharacteristicWriteType'] || {};
(globalThis as any)['CBPeripheral']['CBCharacteristicWriteType'] = {
  Response: 0,
  outResponse: 1
};

(globalThis as any)['CBPeripheral']['CBPeripheralState'] = (globalThis as any)['CBPeripheral']['CBPeripheralState'] || {};
(globalThis as any)['CBPeripheral']['CBPeripheralState'] = {
  Disconnected: 0,
  Connecting: 1,
  Connected: 2,
  Disconnecting: 3
};


(globalThis as any)['CBPeripheralManager'] = (globalThis as any)['CBPeripheralManager'] || {};
(globalThis as any)['CBPeripheralManager']['CBPeripheralManagerConnectionLatency'] = (globalThis as any)['CBPeripheralManager']['CBPeripheralManagerConnectionLatency'] || {};
(globalThis as any)['CBPeripheralManager']['CBPeripheralManagerConnectionLatency'] = {
  Low: 0,
  Medium: 1,
  High: 2
};


(globalThis as any)['CBService'] = (globalThis as any)['CBService'] || {};

(globalThis as any)['CBUUID'] = (globalThis as any)['CBUUID'] || {};

(globalThis as any)['CFBase'] = (globalThis as any)['CFBase'] || {};
(globalThis as any)['CFBase']['CFComparisonResult'] = (globalThis as any)['CFBase']['CFComparisonResult'] || {};
(globalThis as any)['CFBase']['CFComparisonResult'] = {
  LessThan: -1,
  EqualTo: 0,
  GreaterThan: 1
};


(globalThis as any)['CFByteOrder'] = (globalThis as any)['CFByteOrder'] || {};
(globalThis as any)['CFByteOrder']['__CFByteOrder'] = (globalThis as any)['CFByteOrder']['__CFByteOrder'] || {};
(globalThis as any)['CFByteOrder']['__CFByteOrder'] = {
  Unknown: 0,
  LittleEndian: 1,
  BigEndian: 2
};


(globalThis as any)['CFCalendar'] = (globalThis as any)['CFCalendar'] || {};
(globalThis as any)['CFCalendar']['CFCalendarUnit'] = (globalThis as any)['CFCalendar']['CFCalendarUnit'] || {};
(globalThis as any)['CFCalendar']['CFCalendarUnit'] = {
  Era: 2,
  Year: 4,
  Month: 8,
  Day: 16,
  Hour: 32,
  Minute: 64,
  Second: 128,
  Week: 256,
  Weekday: 512,
  WeekdayOrdinal: 1024,
  Quarter: 2048,
  WeekOfMonth: 4096,
  WeekOfYear: 8192,
  YearForWeekOfYear: 16384
};


(globalThis as any)['CFCharacterSet'] = (globalThis as any)['CFCharacterSet'] || {};
(globalThis as any)['CFCharacterSet']['CFCharacterSetPredefinedSet'] = (globalThis as any)['CFCharacterSet']['CFCharacterSetPredefinedSet'] || {};
(globalThis as any)['CFCharacterSet']['CFCharacterSetPredefinedSet'] = {
  Control: 1,
  Whitespace: 2,
  WhitespaceAndNewline: 3,
  DecimalDigit: 4,
  Letter: 5,
  LowercaseLetter: 6,
  UppercaseLetter: 7,
  NonBase: 8,
  Decomposable: 9,
  AlphaNumeric: 10,
  Punctuation: 11,
  CapitalizedLetter: 13,
  Symbol: 14,
  Newline: 15,
  Illegal: 12
};


(globalThis as any)['CFData'] = (globalThis as any)['CFData'] || {};
(globalThis as any)['CFData']['CFDataSearchFlags'] = (globalThis as any)['CFData']['CFDataSearchFlags'] || {};
(globalThis as any)['CFData']['CFDataSearchFlags'] = {
  Backwards: 1,
  Anchored: 2
};


(globalThis as any)['CFDate'] = (globalThis as any)['CFDate'] || {};
(globalThis as any)['CFDate']['CFGregorianUnitFlags'] = (globalThis as any)['CFDate']['CFGregorianUnitFlags'] || {};
(globalThis as any)['CFDate']['CFGregorianUnitFlags'] = {
  UnitsYears: 1,
  UnitsMonths: 2,
  UnitsDays: 4,
  UnitsHours: 8,
  UnitsMinutes: 16,
  UnitsSeconds: 32,
  AllUnits: 16777215
};


(globalThis as any)['CFDateFormatter'] = (globalThis as any)['CFDateFormatter'] || {};
(globalThis as any)['CFDateFormatter']['CFDateFormatterStyle'] = (globalThis as any)['CFDateFormatter']['CFDateFormatterStyle'] || {};
(globalThis as any)['CFDateFormatter']['CFDateFormatterStyle'] = {
  NoStyle: 0,
  ShortStyle: 1,
  MediumStyle: 2,
  LongStyle: 3,
  FullStyle: 4
};

(globalThis as any)['CFDateFormatter']['CFISO8601DateFormatOptions'] = (globalThis as any)['CFDateFormatter']['CFISO8601DateFormatOptions'] || {};
(globalThis as any)['CFDateFormatter']['CFISO8601DateFormatOptions'] = {
  WithYear: 1,
  WithMonth: 2,
  WithWeekOfYear: 4,
  WithDay: 16,
  WithTime: 32,
  WithTimeZone: 64,
  WithSpaceBetweenDateAndTime: 128,
  WithDashSeparatorInDate: 256,
  WithColonSeparatorInTime: 512,
  WithColonSeparatorInTimeZone: 1024,
  WithFractionalSeconds: 2048,
  WithFullDate: 275,
  WithFullTime: 1632,
  WithInternetDateTime: 1907
};


(globalThis as any)['CFFileSecurity'] = (globalThis as any)['CFFileSecurity'] || {};
(globalThis as any)['CFFileSecurity']['CFFileSecurityClearOptions'] = (globalThis as any)['CFFileSecurity']['CFFileSecurityClearOptions'] || {};
(globalThis as any)['CFFileSecurity']['CFFileSecurityClearOptions'] = {
  Owner: 1,
  Group: 2,
  Mode: 4,
  OwnerUUID: 8,
  GroupUUID: 16,
  AccessControlList: 32
};


(globalThis as any)['CFLocale'] = (globalThis as any)['CFLocale'] || {};
(globalThis as any)['CFLocale']['CFLocaleLanguageDirection'] = (globalThis as any)['CFLocale']['CFLocaleLanguageDirection'] || {};
(globalThis as any)['CFLocale']['CFLocaleLanguageDirection'] = {
  Unknown: 0,
  LeftToRight: 1,
  RightToLeft: 2,
  TopToBottom: 3,
  BottomToTop: 4
};


(globalThis as any)['CFNotificationCenter'] = (globalThis as any)['CFNotificationCenter'] || {};
(globalThis as any)['CFNotificationCenter']['CFNotificationSuspensionBehavior'] = (globalThis as any)['CFNotificationCenter']['CFNotificationSuspensionBehavior'] || {};
(globalThis as any)['CFNotificationCenter']['CFNotificationSuspensionBehavior'] = {
  Drop: 1,
  Coalesce: 2,
  Hold: 3,
  DeliverImmediately: 4
};


(globalThis as any)['CFNumber'] = (globalThis as any)['CFNumber'] || {};
(globalThis as any)['CFNumber']['CFNumberType'] = (globalThis as any)['CFNumber']['CFNumberType'] || {};
(globalThis as any)['CFNumber']['CFNumberType'] = {
  SInt8Type: 1,
  SInt16Type: 2,
  SInt32Type: 3,
  SInt64Type: 4,
  Float32Type: 5,
  Float64Type: 6,
  CharType: 7,
  ShortType: 8,
  IntType: 9,
  LongType: 10,
  LongLongType: 11,
  FloatType: 12,
  DoubleType: 13,
  CFIndexType: 14,
  NSIntegerType: 15,
  CGFloatType: 16,
  MaxType: 16
};


(globalThis as any)['CFNumberFormatter'] = (globalThis as any)['CFNumberFormatter'] || {};
(globalThis as any)['CFNumberFormatter']['CFNumberFormatterOptionFlags'] = (globalThis as any)['CFNumberFormatter']['CFNumberFormatterOptionFlags'] || {};
(globalThis as any)['CFNumberFormatter']['CFNumberFormatterOptionFlags'] = {
  kCFNumberFormatterParseIntegersOnly: 1
};

(globalThis as any)['CFNumberFormatter']['CFNumberFormatterPadPosition'] = (globalThis as any)['CFNumberFormatter']['CFNumberFormatterPadPosition'] || {};
(globalThis as any)['CFNumberFormatter']['CFNumberFormatterPadPosition'] = {
  BeforePrefix: 0,
  AfterPrefix: 1,
  BeforeSuffix: 2,
  AfterSuffix: 3
};

(globalThis as any)['CFNumberFormatter']['CFNumberFormatterRoundingMode'] = (globalThis as any)['CFNumberFormatter']['CFNumberFormatterRoundingMode'] || {};
(globalThis as any)['CFNumberFormatter']['CFNumberFormatterRoundingMode'] = {
  Ceiling: 0,
  Floor: 1,
  Down: 2,
  Up: 3,
  HalfEven: 4,
  HalfDown: 5,
  HalfUp: 6
};

(globalThis as any)['CFNumberFormatter']['CFNumberFormatterStyle'] = (globalThis as any)['CFNumberFormatter']['CFNumberFormatterStyle'] || {};
(globalThis as any)['CFNumberFormatter']['CFNumberFormatterStyle'] = {
  NoStyle: 0,
  DecimalStyle: 1,
  CurrencyStyle: 2,
  PercentStyle: 3,
  ScientificStyle: 4,
  SpellOutStyle: 5,
  OrdinalStyle: 6,
  CurrencyISOCodeStyle: 8,
  CurrencyPluralStyle: 9,
  CurrencyAccountingStyle: 10
};


(globalThis as any)['CFPropertyList'] = (globalThis as any)['CFPropertyList'] || {};
(globalThis as any)['CFPropertyList']['CFPropertyListFormat'] = (globalThis as any)['CFPropertyList']['CFPropertyListFormat'] || {};
(globalThis as any)['CFPropertyList']['CFPropertyListFormat'] = {
  OpenStepFormat: 1,
  XMLFormat_v1_0: 100,
  BinaryFormat_v1_0: 200
};

(globalThis as any)['CFPropertyList']['CFPropertyListMutabilityOptions'] = (globalThis as any)['CFPropertyList']['CFPropertyListMutabilityOptions'] || {};
(globalThis as any)['CFPropertyList']['CFPropertyListMutabilityOptions'] = {
  Immutable: 0,
  MutableContainers: 1,
  MutableContainersAndLeaves: 2
};


(globalThis as any)['CFRunLoop'] = (globalThis as any)['CFRunLoop'] || {};
(globalThis as any)['CFRunLoop']['CFRunLoopActivity'] = (globalThis as any)['CFRunLoop']['CFRunLoopActivity'] || {};
(globalThis as any)['CFRunLoop']['CFRunLoopActivity'] = {
  Entry: 1,
  BeforeTimers: 2,
  BeforeSources: 4,
  BeforeWaiting: 32,
  AfterWaiting: 64,
  Exit: 128,
  AllActivities: 268435455
};

(globalThis as any)['CFRunLoop']['CFRunLoopRunResult'] = (globalThis as any)['CFRunLoop']['CFRunLoopRunResult'] || {};
(globalThis as any)['CFRunLoop']['CFRunLoopRunResult'] = {
  Finished: 1,
  Stopped: 2,
  TimedOut: 3,
  HandledSource: 4
};


(globalThis as any)['CFSocket'] = (globalThis as any)['CFSocket'] || {};
(globalThis as any)['CFSocket']['CFSocketCallBackType'] = (globalThis as any)['CFSocket']['CFSocketCallBackType'] || {};
(globalThis as any)['CFSocket']['CFSocketCallBackType'] = {
  NoCallBack: 0,
  ReadCallBack: 1,
  AcceptCallBack: 2,
  DataCallBack: 3,
  ConnectCallBack: 4,
  WriteCallBack: 8
};

(globalThis as any)['CFSocket']['CFSocketError'] = (globalThis as any)['CFSocket']['CFSocketError'] || {};
(globalThis as any)['CFSocket']['CFSocketError'] = {
  Success: 0,
  Error: -1,
  Timeout: -2
};


(globalThis as any)['CFStream'] = (globalThis as any)['CFStream'] || {};
(globalThis as any)['CFStream']['CFStreamErrorDomain'] = (globalThis as any)['CFStream']['CFStreamErrorDomain'] || {};
(globalThis as any)['CFStream']['CFStreamErrorDomain'] = {
  Custom: -1,
  POSIX: 1,
  MacOSStatus: 2
};

(globalThis as any)['CFStream']['CFStreamEventType'] = (globalThis as any)['CFStream']['CFStreamEventType'] || {};
(globalThis as any)['CFStream']['CFStreamEventType'] = {
  None: 0,
  OpenCompleted: 1,
  HasBytesAvailable: 2,
  CanAcceptBytes: 4,
  ErrorOccurred: 8,
  EndEncountered: 16
};

(globalThis as any)['CFStream']['CFStreamStatus'] = (globalThis as any)['CFStream']['CFStreamStatus'] || {};
(globalThis as any)['CFStream']['CFStreamStatus'] = {
  NotOpen: 0,
  Opening: 1,
  Open: 2,
  Reading: 3,
  Writing: 4,
  AtEnd: 5,
  Closed: 6,
  Error: 7
};


(globalThis as any)['CFString'] = (globalThis as any)['CFString'] || {};
(globalThis as any)['CFString']['CFStringBuiltInEncodings'] = (globalThis as any)['CFString']['CFStringBuiltInEncodings'] || {};
(globalThis as any)['CFString']['CFStringBuiltInEncodings'] = {
  MacRoman: 0,
  WindowsLatin1: 1280,
  ISOLatin1: 513,
  NextStepLatin: 2817,
  ASCII: 1536,
  Unicode: 256,
  UTF8: 134217984,
  NonLossyASCII: 3071,
  UTF16: 256,
  UTF16BE: 268435712,
  UTF16LE: 335544576,
  UTF32: 201326848,
  UTF32BE: 402653440,
  UTF32LE: 469762304
};

(globalThis as any)['CFString']['CFStringCompareFlags'] = (globalThis as any)['CFString']['CFStringCompareFlags'] || {};
(globalThis as any)['CFString']['CFStringCompareFlags'] = {
  CaseInsensitive: 1,
  Backwards: 4,
  Anchored: 8,
  Nonliteral: 16,
  Localized: 32,
  Numerically: 64,
  DiacriticInsensitive: 128,
  WidthInsensitive: 256,
  ForcedOrdering: 512
};

(globalThis as any)['CFString']['CFStringNormalizationForm'] = (globalThis as any)['CFString']['CFStringNormalizationForm'] || {};
(globalThis as any)['CFString']['CFStringNormalizationForm'] = {
  D: 0,
  KD: 1,
  C: 2,
  KC: 3
};


(globalThis as any)['CFStringEncodingExt'] = (globalThis as any)['CFStringEncodingExt'] || {};
(globalThis as any)['CFStringEncodingExt']['CFStringEncodings'] = (globalThis as any)['CFStringEncodingExt']['CFStringEncodings'] || {};
(globalThis as any)['CFStringEncodingExt']['CFStringEncodings'] = {
  MacJapanese: 1,
  MacChineseTrad: 2,
  MacKorean: 3,
  MacArabic: 4,
  MacHebrew: 5,
  MacGreek: 6,
  MacCyrillic: 7,
  MacDevanagari: 9,
  MacGurmukhi: 10,
  MacGujarati: 11,
  MacOriya: 12,
  MacBengali: 13,
  MacTamil: 14,
  MacTelugu: 15,
  MacKannada: 16,
  MacMalayalam: 17,
  MacSinhalese: 18,
  MacBurmese: 19,
  MacKhmer: 20,
  MacThai: 21,
  MacLaotian: 22,
  MacGeorgian: 23,
  MacArmenian: 24,
  MacChineseSimp: 25,
  MacTibetan: 26,
  MacMongolian: 27,
  MacEthiopic: 28,
  MacCentralEurRoman: 29,
  MacVietnamese: 30,
  MacExtArabic: 31,
  MacSymbol: 33,
  MacDingbats: 34,
  MacTurkish: 35,
  MacCroatian: 36,
  MacIcelandic: 37,
  MacRomanian: 38,
  MacCeltic: 39,
  MacGaelic: 40,
  MacFarsi: 140,
  MacUkrainian: 152,
  MacInuit: 236,
  MacVT100: 252,
  MacHFS: 255,
  ISOLatin2: 514,
  ISOLatin3: 515,
  ISOLatin4: 516,
  ISOLatinCyrillic: 517,
  ISOLatinArabic: 518,
  ISOLatinGreek: 519,
  ISOLatinHebrew: 520,
  ISOLatin5: 521,
  ISOLatin6: 522,
  ISOLatinThai: 523,
  ISOLatin7: 525,
  ISOLatin8: 526,
  ISOLatin9: 527,
  ISOLatin10: 528,
  DOSLatinUS: 1024,
  DOSGreek: 1029,
  DOSBalticRim: 1030,
  DOSLatin1: 1040,
  DOSGreek1: 1041,
  DOSLatin2: 1042,
  DOSCyrillic: 1043,
  DOSTurkish: 1044,
  DOSPortuguese: 1045,
  DOSIcelandic: 1046,
  DOSHebrew: 1047,
  DOSCanadianFrench: 1048,
  DOSArabic: 1049,
  DOSNordic: 1050,
  DOSRussian: 1051,
  DOSGreek2: 1052,
  DOSThai: 1053,
  DOSJapanese: 1056,
  DOSChineseSimplif: 1057,
  DOSKorean: 1058,
  DOSChineseTrad: 1059,
  WindowsLatin2: 1281,
  WindowsCyrillic: 1282,
  WindowsGreek: 1283,
  WindowsLatin5: 1284,
  WindowsHebrew: 1285,
  WindowsArabic: 1286,
  WindowsBalticRim: 1287,
  WindowsVietnamese: 1288,
  WindowsKoreanJohab: 1296,
  ANSEL: 1537,
  JIS_X0201_76: 1568,
  JIS_X0208_83: 1569,
  JIS_X0208_90: 1570,
  JIS_X0212_90: 1571,
  JIS_C6226_78: 1572,
  ShiftJIS_X0213: 1576,
  ShiftJIS_X0213_MenKuTen: 1577,
  GB_2312_80: 1584,
  GBK_95: 1585,
  GB_18030_2000: 1586,
  KSC_5601_87: 1600,
  KSC_5601_92_Johab: 1601,
  CNS_11643_92_P1: 1617,
  CNS_11643_92_P2: 1618,
  CNS_11643_92_P3: 1619,
  ISO_2022_JP: 2080,
  ISO_2022_JP_2: 2081,
  ISO_2022_JP_1: 2082,
  ISO_2022_JP_3: 2083,
  ISO_2022_CN: 2096,
  ISO_2022_CN_EXT: 2097,
  ISO_2022_KR: 2112,
  EUC_JP: 2336,
  EUC_CN: 2352,
  EUC_TW: 2353,
  EUC_KR: 2368,
  ShiftJIS: 2561,
  KOI8_R: 2562,
  Big5: 2563,
  MacRomanLatin1: 2564,
  HZ_GB_2312: 2565,
  Big5_HKSCS_1999: 2566,
  VISCII: 2567,
  KOI8_U: 2568,
  Big5_E: 2569,
  NextStepJapanese: 2818,
  EBCDIC_US: 3073,
  EBCDIC_CP037: 3074,
  UTF7: 67109120,
  UTF7_IMAP: 2576,
  ShiftJIS_X0213_00: 1576
};


(globalThis as any)['CFStringTokenizer'] = (globalThis as any)['CFStringTokenizer'] || {};
(globalThis as any)['CFStringTokenizer']['CFStringTokenizerTokenType'] = (globalThis as any)['CFStringTokenizer']['CFStringTokenizerTokenType'] || {};
(globalThis as any)['CFStringTokenizer']['CFStringTokenizerTokenType'] = {
  None: 0,
  Normal: 1,
  HasSubTokensMask: 2,
  HasDerivedSubTokensMask: 4,
  HasHasNumbersMask: 8,
  HasNonLettersMask: 16,
  IsCJWordMask: 32
};


(globalThis as any)['CFTimeZone'] = (globalThis as any)['CFTimeZone'] || {};
(globalThis as any)['CFTimeZone']['CFTimeZoneNameStyle'] = (globalThis as any)['CFTimeZone']['CFTimeZoneNameStyle'] || {};
(globalThis as any)['CFTimeZone']['CFTimeZoneNameStyle'] = {
  Standard: 0,
  ShortStandard: 1,
  DaylightSaving: 2,
  ShortDaylightSaving: 3,
  Generic: 4,
  ShortGeneric: 5
};


(globalThis as any)['CFURL'] = (globalThis as any)['CFURL'] || {};
(globalThis as any)['CFURL']['CFURLBookmarkCreationOptions'] = (globalThis as any)['CFURL']['CFURLBookmarkCreationOptions'] || {};
(globalThis as any)['CFURL']['CFURLBookmarkCreationOptions'] = {
  MinimalBookmarkMask: 512,
  SuitableForBookmarkFile: 1024,
  WithSecurityScope: 2048,
  SecurityScopeAllowOnlyReadAccess: 4096,
  PreferFileIDResolutionMask: 256
};

(globalThis as any)['CFURL']['CFURLBookmarkResolutionOptions'] = (globalThis as any)['CFURL']['CFURLBookmarkResolutionOptions'] || {};
(globalThis as any)['CFURL']['CFURLBookmarkResolutionOptions'] = {
  URLBookmarkResolutionWithoutUIMask: 256,
  URLBookmarkResolutionWithoutMountingMask: 512,
  URLBookmarkResolutionWithSecurityScope: 1024,
  BookmarkResolutionWithoutUIMask: 256,
  BookmarkResolutionWithoutMountingMask: 512
};

(globalThis as any)['CFURL']['CFURLComponentType'] = (globalThis as any)['CFURL']['CFURLComponentType'] || {};
(globalThis as any)['CFURL']['CFURLComponentType'] = {
  Scheme: 1,
  NetLocation: 2,
  Path: 3,
  ResourceSpecifier: 4,
  User: 5,
  Password: 6,
  UserInfo: 7,
  Host: 8,
  Port: 9,
  ParameterString: 10,
  Query: 11,
  Fragment: 12
};

(globalThis as any)['CFURL']['CFURLPathStyle'] = (globalThis as any)['CFURL']['CFURLPathStyle'] || {};
(globalThis as any)['CFURL']['CFURLPathStyle'] = {
  POSIXPathStyle: 0,
  HFSPathStyle: 1,
  WindowsPathStyle: 2
};


(globalThis as any)['CFURLEnumerator'] = (globalThis as any)['CFURLEnumerator'] || {};
(globalThis as any)['CFURLEnumerator']['CFURLEnumeratorOptions'] = (globalThis as any)['CFURLEnumerator']['CFURLEnumeratorOptions'] || {};
(globalThis as any)['CFURLEnumerator']['CFURLEnumeratorOptions'] = {
  DefaultBehavior: 0,
  DescendRecursively: 1,
  SkipInvisibles: 2,
  GenerateFileReferenceURLs: 4,
  SkipPackageContents: 8,
  IncludeDirectoriesPreOrder: 16,
  IncludeDirectoriesPostOrder: 32,
  GenerateRelativePathURLs: 64
};

(globalThis as any)['CFURLEnumerator']['CFURLEnumeratorResult'] = (globalThis as any)['CFURLEnumerator']['CFURLEnumeratorResult'] || {};
(globalThis as any)['CFURLEnumerator']['CFURLEnumeratorResult'] = {
  Success: 1,
  End: 2,
  Error: 3,
  DirectoryPostOrderSuccess: 4
};


(globalThis as any)['CFXMLNode'] = (globalThis as any)['CFXMLNode'] || {};
(globalThis as any)['CFXMLNode']['CFXMLEntityTypeCode'] = (globalThis as any)['CFXMLNode']['CFXMLEntityTypeCode'] || {};
(globalThis as any)['CFXMLNode']['CFXMLEntityTypeCode'] = {
  Parameter: 0,
  ParsedInternal: 1,
  ParsedExternal: 2,
  Unparsed: 3,
  Character: 4
};

(globalThis as any)['CFXMLNode']['CFXMLNodeTypeCode'] = (globalThis as any)['CFXMLNode']['CFXMLNodeTypeCode'] || {};
(globalThis as any)['CFXMLNode']['CFXMLNodeTypeCode'] = {
  Document: 1,
  Element: 2,
  Attribute: 3,
  ProcessingInstruction: 4,
  Comment: 5,
  Text: 6,
  CDATASection: 7,
  DocumentFragment: 8,
  Entity: 9,
  EntityReference: 10,
  DocumentType: 11,
  Whitespace: 12,
  Notation: 13,
  ElementTypeDeclaration: 14,
  AttributeListDeclaration: 15
};


(globalThis as any)['CFXMLParser'] = (globalThis as any)['CFXMLParser'] || {};
(globalThis as any)['CFXMLParser']['CFXMLParserOptions'] = (globalThis as any)['CFXMLParser']['CFXMLParserOptions'] || {};
(globalThis as any)['CFXMLParser']['CFXMLParserOptions'] = {
  ValidateDocument: 1,
  SkipMetaData: 2,
  ReplacePhysicalEntities: 4,
  SkipWhitespace: 8,
  ResolveExternalEntities: 16,
  AddImpliedAttributes: 32,
  AllOptions: 16777215,
  NoOptions: 0
};

(globalThis as any)['CFXMLParser']['CFXMLParserStatusCode'] = (globalThis as any)['CFXMLParser']['CFXMLParserStatusCode'] || {};
(globalThis as any)['CFXMLParser']['CFXMLParserStatusCode'] = {
  StatusParseNotBegun: -2,
  StatusParseInProgress: -1,
  StatusParseSuccessful: 0,
  ErrorUnexpectedEOF: 1,
  ErrorUnknownEncoding: 2,
  ErrorEncodingConversionFailure: 3,
  ErrorMalformedProcessingInstruction: 4,
  ErrorMalformedDTD: 5,
  ErrorMalformedName: 6,
  ErrorMalformedCDSect: 7,
  ErrorMalformedCloseTag: 8,
  ErrorMalformedStartTag: 9,
  ErrorMalformedDocument: 10,
  ErrorElementlessDocument: 11,
  ErrorMalformedComment: 12,
  ErrorMalformedCharacterReference: 13,
  ErrorMalformedParsedCharacterData: 14,
  ErrorNoData: 15
};


(globalThis as any)['CGColorConversionInfo'] = (globalThis as any)['CGColorConversionInfo'] || {};
(globalThis as any)['CGColorConversionInfo']['CGColorConversionInfoTransformType'] = (globalThis as any)['CGColorConversionInfo']['CGColorConversionInfoTransformType'] || {};
(globalThis as any)['CGColorConversionInfo']['CGColorConversionInfoTransformType'] = {
  FromSpace: 0,
  ToSpace: 1,
  ApplySpace: 2
};


(globalThis as any)['CGColorSpace'] = (globalThis as any)['CGColorSpace'] || {};
(globalThis as any)['CGColorSpace']['CGColorRenderingIntent'] = (globalThis as any)['CGColorSpace']['CGColorRenderingIntent'] || {};
(globalThis as any)['CGColorSpace']['CGColorRenderingIntent'] = {
  Default: 0,
  AbsoluteColorimetric: 1,
  RelativeColorimetric: 2,
  Perceptual: 3,
  Saturation: 4
};

(globalThis as any)['CGColorSpace']['CGColorSpaceModel'] = (globalThis as any)['CGColorSpace']['CGColorSpaceModel'] || {};
(globalThis as any)['CGColorSpace']['CGColorSpaceModel'] = {
  Unknown: -1,
  Monochrome: 0,
  RGB: 1,
  CMYK: 2,
  Lab: 3,
  DeviceN: 4,
  Indexed: 5,
  Pattern: 6,
  XYZ: 7
};


(globalThis as any)['CGContext'] = (globalThis as any)['CGContext'] || {};
(globalThis as any)['CGContext']['CGBlendMode'] = (globalThis as any)['CGContext']['CGBlendMode'] || {};
(globalThis as any)['CGContext']['CGBlendMode'] = {
  Normal: 0,
  Multiply: 1,
  Screen: 2,
  Overlay: 3,
  Darken: 4,
  Lighten: 5,
  ColorDodge: 6,
  ColorBurn: 7,
  SoftLight: 8,
  HardLight: 9,
  Difference: 10,
  Exclusion: 11,
  Hue: 12,
  Saturation: 13,
  Color: 14,
  Luminosity: 15,
  Clear: 16,
  Copy: 17,
  SourceIn: 18,
  SourceOut: 19,
  SourceAtop: 20,
  DestinationOver: 21,
  DestinationIn: 22,
  DestinationOut: 23,
  DestinationAtop: 24,
  XOR: 25,
  PlusDarker: 26,
  PlusLighter: 27
};

(globalThis as any)['CGContext']['CGInterpolationQuality'] = (globalThis as any)['CGContext']['CGInterpolationQuality'] || {};
(globalThis as any)['CGContext']['CGInterpolationQuality'] = {
  Default: 0,
  None: 1,
  Low: 2,
  Medium: 4,
  High: 3
};

(globalThis as any)['CGContext']['CGPathDrawingMode'] = (globalThis as any)['CGContext']['CGPathDrawingMode'] || {};
(globalThis as any)['CGContext']['CGPathDrawingMode'] = {
  Fill: 0,
  EOFill: 1,
  Stroke: 2,
  FillStroke: 3,
  EOFillStroke: 4
};

(globalThis as any)['CGContext']['CGTextDrawingMode'] = (globalThis as any)['CGContext']['CGTextDrawingMode'] || {};
(globalThis as any)['CGContext']['CGTextDrawingMode'] = {
  Fill: 0,
  Stroke: 1,
  FillStroke: 2,
  Invisible: 3,
  FillClip: 4,
  StrokeClip: 5,
  FillStrokeClip: 6,
  Clip: 7
};


(globalThis as any)['CGDirectDisplay'] = (globalThis as any)['CGDirectDisplay'] || {};
(globalThis as any)['CGDirectDisplay']['CGCaptureOptions'] = (globalThis as any)['CGDirectDisplay']['CGCaptureOptions'] || {};
(globalThis as any)['CGDirectDisplay']['CGCaptureOptions'] = {
  Options: 0,
  Fill: 1
};


(globalThis as any)['CGDisplayConfiguration'] = (globalThis as any)['CGDisplayConfiguration'] || {};
(globalThis as any)['CGDisplayConfiguration']['CGConfigureOption'] = (globalThis as any)['CGDisplayConfiguration']['CGConfigureOption'] || {};
(globalThis as any)['CGDisplayConfiguration']['CGConfigureOption'] = {
  ForAppOnly: 0,
  ForSession: 1,
  Permanently: 2
};

(globalThis as any)['CGDisplayConfiguration']['CGDisplayChangeSummaryFlags'] = (globalThis as any)['CGDisplayConfiguration']['CGDisplayChangeSummaryFlags'] || {};
(globalThis as any)['CGDisplayConfiguration']['CGDisplayChangeSummaryFlags'] = {
  BeginConfigurationFlag: 1,
  MovedFlag: 2,
  SetMainFlag: 4,
  SetModeFlag: 8,
  AddFlag: 16,
  RemoveFlag: 32,
  EnabledFlag: 256,
  DisabledFlag: 512,
  MirrorFlag: 1024,
  UnMirrorFlag: 2048,
  DesktopShapeChangedFlag: 4096
};


(globalThis as any)['CGDisplayStream'] = (globalThis as any)['CGDisplayStream'] || {};
(globalThis as any)['CGDisplayStream']['CGDisplayStreamFrameStatus'] = (globalThis as any)['CGDisplayStream']['CGDisplayStreamFrameStatus'] || {};
(globalThis as any)['CGDisplayStream']['CGDisplayStreamFrameStatus'] = {
  FrameComplete: 0,
  FrameIdle: 1,
  FrameBlank: 2,
  Stopped: 3
};

(globalThis as any)['CGDisplayStream']['CGDisplayStreamUpdateRectType'] = (globalThis as any)['CGDisplayStream']['CGDisplayStreamUpdateRectType'] || {};
(globalThis as any)['CGDisplayStream']['CGDisplayStreamUpdateRectType'] = {
  RefreshedRects: 0,
  MovedRects: 1,
  DirtyRects: 2,
  ReducedDirtyRects: 3
};


(globalThis as any)['CGError'] = (globalThis as any)['CGError'] || {};
(globalThis as any)['CGError']['CGError'] = (globalThis as any)['CGError']['CGError'] || {};
(globalThis as any)['CGError']['CGError'] = {
  Success: 0,
  Failure: 1000,
  IllegalArgument: 1001,
  InvalidConnection: 1002,
  InvalidContext: 1003,
  CannotComplete: 1004,
  NotImplemented: 1006,
  RangeCheck: 1007,
  TypeCheck: 1008,
  InvalidOperation: 1010,
  NoneAvailable: 1011
};


(globalThis as any)['CGEventTypes'] = (globalThis as any)['CGEventTypes'] || {};
(globalThis as any)['CGEventTypes']['CGEventField'] = (globalThis as any)['CGEventTypes']['CGEventField'] || {};
(globalThis as any)['CGEventTypes']['CGEventField'] = {
  MouseEventNumber: 0,
  MouseEventClickState: 1,
  MouseEventPressure: 2,
  MouseEventButtonNumber: 3,
  MouseEventDeltaX: 4,
  MouseEventDeltaY: 5,
  MouseEventInstantMouser: 6,
  MouseEventSubtype: 7,
  KeyboardEventAutorepeat: 8,
  KeyboardEventKeycode: 9,
  KeyboardEventKeyboardType: 10,
  ScrollWheelEventDeltaAxis1: 11,
  ScrollWheelEventDeltaAxis2: 12,
  ScrollWheelEventDeltaAxis3: 13,
  ScrollWheelEventFixedPtDeltaAxis1: 93,
  ScrollWheelEventFixedPtDeltaAxis2: 94,
  ScrollWheelEventFixedPtDeltaAxis3: 95,
  ScrollWheelEventPointDeltaAxis1: 96,
  ScrollWheelEventPointDeltaAxis2: 97,
  ScrollWheelEventPointDeltaAxis3: 98,
  ScrollWheelEventScrollPhase: 99,
  ScrollWheelEventScrollCount: 100,
  ScrollWheelEventMomentumPhase: 123,
  ScrollWheelEventInstantMouser: 14,
  TabletEventPointX: 15,
  TabletEventPointY: 16,
  TabletEventPointZ: 17,
  TabletEventPointButtons: 18,
  TabletEventPointPressure: 19,
  TabletEventTiltX: 20,
  TabletEventTiltY: 21,
  TabletEventRotation: 22,
  TabletEventTangentialPressure: 23,
  TabletEventDeviceID: 24,
  TabletEventVendor1: 25,
  TabletEventVendor2: 26,
  TabletEventVendor3: 27,
  TabletProximityEventVendorID: 28,
  TabletProximityEventTabletID: 29,
  TabletProximityEventPointerID: 30,
  TabletProximityEventDeviceID: 31,
  TabletProximityEventSystemTabletID: 32,
  TabletProximityEventVendorPointerType: 33,
  TabletProximityEventVendorPointerSerialNumber: 34,
  TabletProximityEventVendorUniqueID: 35,
  TabletProximityEventCapabilityMask: 36,
  TabletProximityEventPointerType: 37,
  TabletProximityEventEnterProximity: 38,
  EventTargetProcessSerialNumber: 39,
  EventTargetUnixProcessID: 40,
  EventSourceUnixProcessID: 41,
  EventSourceUserData: 42,
  EventSourceUserID: 43,
  EventSourceGroupID: 44,
  EventSourceStateID: 45,
  ScrollWheelEventIsContinuous: 88,
  MouseEventWindowUnderMousePointer: 91,
  MouseEventWindowUnderMousePointerThatCanHandleThisEvent: 92,
  EventUnacceleratedPointerMovementX: 170,
  EventUnacceleratedPointerMovementY: 171
};

(globalThis as any)['CGEventTypes']['CGEventFlags'] = (globalThis as any)['CGEventTypes']['CGEventFlags'] || {};
(globalThis as any)['CGEventTypes']['CGEventFlags'] = {
  AlphaShift: 65536,
  Shift: 131072,
  Control: 262144,
  Alternate: 524288,
  Command: 1048576,
  Help: 4194304,
  SecondaryFn: 8388608,
  NumericPad: 2097152,
  NonCoalesced: 256
};

(globalThis as any)['CGEventTypes']['CGEventMouseSubtype'] = (globalThis as any)['CGEventTypes']['CGEventMouseSubtype'] || {};
(globalThis as any)['CGEventTypes']['CGEventMouseSubtype'] = {
  Default: 0,
  TabletPoint: 1,
  TabletProximity: 2
};

(globalThis as any)['CGEventTypes']['CGEventSourceStateID'] = (globalThis as any)['CGEventTypes']['CGEventSourceStateID'] || {};
(globalThis as any)['CGEventTypes']['CGEventSourceStateID'] = {
  Private: -1,
  CombinedSessionState: 0,
  HIDSystemState: 1
};

(globalThis as any)['CGEventTypes']['CGEventTapLocation'] = (globalThis as any)['CGEventTypes']['CGEventTapLocation'] || {};
(globalThis as any)['CGEventTypes']['CGEventTapLocation'] = {
  HIDEventTap: 0,
  SessionEventTap: 1,
  AnnotatedSessionEventTap: 2
};

(globalThis as any)['CGEventTypes']['CGEventTapOptions'] = (globalThis as any)['CGEventTypes']['CGEventTapOptions'] || {};
(globalThis as any)['CGEventTypes']['CGEventTapOptions'] = {
  Default: 0,
  ListenOnly: 1
};

(globalThis as any)['CGEventTypes']['CGEventTapPlacement'] = (globalThis as any)['CGEventTypes']['CGEventTapPlacement'] || {};
(globalThis as any)['CGEventTypes']['CGEventTapPlacement'] = {
  HeadInsertEventTap: 0,
  TailAppendEventTap: 1
};

(globalThis as any)['CGEventTypes']['CGEventType'] = (globalThis as any)['CGEventTypes']['CGEventType'] || {};
(globalThis as any)['CGEventTypes']['CGEventType'] = {
  Null: 0,
  LeftMouseDown: 1,
  LeftMouseUp: 2,
  RightMouseDown: 3,
  RightMouseUp: 4,
  MouseMoved: 5,
  LeftMouseDragged: 6,
  RightMouseDragged: 7,
  KeyDown: 10,
  KeyUp: 11,
  FlagsChanged: 12,
  ScrollWheel: 22,
  TabletPointer: 23,
  TabletProximity: 24,
  OtherMouseDown: 25,
  OtherMouseUp: 26,
  OtherMouseDragged: 27,
  TapDisabledByTimeout: 4294967294,
  TapDisabledByUserInput: 4294967295
};

(globalThis as any)['CGEventTypes']['CGGesturePhase'] = (globalThis as any)['CGEventTypes']['CGGesturePhase'] || {};
(globalThis as any)['CGEventTypes']['CGGesturePhase'] = {
  None: 0,
  Began: 1,
  Changed: 2,
  Ended: 4,
  Cancelled: 8,
  MayBegin: 128
};

(globalThis as any)['CGEventTypes']['CGMomentumScrollPhase'] = (globalThis as any)['CGEventTypes']['CGMomentumScrollPhase'] || {};
(globalThis as any)['CGEventTypes']['CGMomentumScrollPhase'] = {
  None: 0,
  Begin: 1,
  Continue: 2,
  End: 3
};

(globalThis as any)['CGEventTypes']['CGMouseButton'] = (globalThis as any)['CGEventTypes']['CGMouseButton'] || {};
(globalThis as any)['CGEventTypes']['CGMouseButton'] = {
  Left: 0,
  Right: 1,
  Center: 2
};

(globalThis as any)['CGEventTypes']['CGScrollEventUnit'] = (globalThis as any)['CGEventTypes']['CGScrollEventUnit'] || {};
(globalThis as any)['CGEventTypes']['CGScrollEventUnit'] = {
  Pixel: 0,
  Line: 1
};

(globalThis as any)['CGEventTypes']['CGScrollPhase'] = (globalThis as any)['CGEventTypes']['CGScrollPhase'] || {};
(globalThis as any)['CGEventTypes']['CGScrollPhase'] = {
  Began: 1,
  Changed: 2,
  Ended: 4,
  Cancelled: 8,
  MayBegin: 128
};


(globalThis as any)['CGFont'] = (globalThis as any)['CGFont'] || {};
(globalThis as any)['CGFont']['CGFontPostScriptFormat'] = (globalThis as any)['CGFont']['CGFontPostScriptFormat'] || {};
(globalThis as any)['CGFont']['CGFontPostScriptFormat'] = {
  e1: 1,
  e3: 3,
  e42: 42
};

(globalThis as any)['CGFont']['CGGlyphDeprecatedEnum'] = (globalThis as any)['CGFont']['CGGlyphDeprecatedEnum'] || {};
(globalThis as any)['CGFont']['CGGlyphDeprecatedEnum'] = {
  in: 0,
  ax: 1
};


(globalThis as any)['CGGeometry'] = (globalThis as any)['CGGeometry'] || {};
(globalThis as any)['CGGeometry']['CGRectEdge'] = (globalThis as any)['CGGeometry']['CGRectEdge'] || {};
(globalThis as any)['CGGeometry']['CGRectEdge'] = {
  inXEdge: 0,
  inYEdge: 1,
  axXEdge: 2,
  axYEdge: 3
};


(globalThis as any)['CGGradient'] = (globalThis as any)['CGGradient'] || {};
(globalThis as any)['CGGradient']['CGGradientDrawingOptions'] = (globalThis as any)['CGGradient']['CGGradientDrawingOptions'] || {};
(globalThis as any)['CGGradient']['CGGradientDrawingOptions'] = {
  BeforeStartLocation: 1,
  AfterEndLocation: 2
};


(globalThis as any)['CGImage'] = (globalThis as any)['CGImage'] || {};
(globalThis as any)['CGImage']['CGBitmapInfo'] = (globalThis as any)['CGImage']['CGBitmapInfo'] || {};
(globalThis as any)['CGImage']['CGBitmapInfo'] = {
  AlphaInfoMask: 31,
  FloatInfoMask: 3840,
  FloatComponents: 256,
  ByteOrderMask: 28672,
  ByteOrderDefault: 0,
  ByteOrder16Little: 4096,
  ByteOrder32Little: 8192,
  ByteOrder16Big: 12288,
  ByteOrder32Big: 16384
};

(globalThis as any)['CGImage']['CGImageAlphaInfo'] = (globalThis as any)['CGImage']['CGImageAlphaInfo'] || {};
(globalThis as any)['CGImage']['CGImageAlphaInfo'] = {
  None: 0,
  PremultipliedLast: 1,
  PremultipliedFirst: 2,
  Last: 3,
  First: 4,
  NoneSkipLast: 5,
  NoneSkipFirst: 6,
  Only: 7
};

(globalThis as any)['CGImage']['CGImageByteOrderInfo'] = (globalThis as any)['CGImage']['CGImageByteOrderInfo'] || {};
(globalThis as any)['CGImage']['CGImageByteOrderInfo'] = {
  rMask: 28672,
  rDefault: 0,
  r16Little: 4096,
  r32Little: 8192,
  r16Big: 12288,
  r32Big: 16384
};

(globalThis as any)['CGImage']['CGImagePixelFormatInfo'] = (globalThis as any)['CGImage']['CGImagePixelFormatInfo'] || {};
(globalThis as any)['CGImage']['CGImagePixelFormatInfo'] = {
  Mask: 983040,
  Packed: 0,
  RGB555: 65536,
  RGB565: 131072,
  RGB101010: 196608,
  RGBCIF10: 262144
};


(globalThis as any)['CGPDFContext'] = (globalThis as any)['CGPDFContext'] || {};
(globalThis as any)['CGPDFContext']['CGPDFTagType'] = (globalThis as any)['CGPDFContext']['CGPDFTagType'] || {};
(globalThis as any)['CGPDFContext']['CGPDFTagType'] = {
  Document: 100,
  Part: 101,
  Art: 102,
  Section: 103,
  Div: 104,
  BlockQuote: 105,
  Caption: 106,
  TOC: 107,
  TOCI: 108,
  Index: 109,
  NonStructure: 110,
  Private: 111,
  Paragraph: 200,
  Header: 201,
  Header1: 202,
  Header2: 203,
  Header3: 204,
  Header4: 205,
  Header5: 206,
  Header6: 207,
  List: 300,
  ListItem: 301,
  Label: 302,
  ListBody: 303,
  Table: 400,
  TableRow: 401,
  TableHeaderCell: 402,
  TableDataCell: 403,
  TableHeader: 404,
  TableBody: 405,
  TableFooter: 406,
  Span: 500,
  Quote: 501,
  Note: 502,
  Reference: 503,
  Bibliography: 504,
  Code: 505,
  Link: 506,
  Annotation: 507,
  Ruby: 600,
  RubyBaseText: 601,
  RubyAnnotationText: 602,
  RubyPunctuation: 603,
  Warichu: 604,
  WarichuText: 605,
  WarichuPunctiation: 606,
  Figure: 700,
  Formula: 701,
  Form: 702
};


(globalThis as any)['CGPDFDocument'] = (globalThis as any)['CGPDFDocument'] || {};
(globalThis as any)['CGPDFDocument']['CGPDFAccessPermissions'] = (globalThis as any)['CGPDFDocument']['CGPDFAccessPermissions'] || {};
(globalThis as any)['CGPDFDocument']['CGPDFAccessPermissions'] = {
  LowQualityPrinting: 1,
  HighQualityPrinting: 2,
  DocumentChanges: 4,
  DocumentAssembly: 8,
  ContentCopying: 16,
  ContentAccessibility: 32,
  Commenting: 64,
  FormFieldEntry: 128
};


(globalThis as any)['CGPDFObject'] = (globalThis as any)['CGPDFObject'] || {};
(globalThis as any)['CGPDFObject']['CGPDFObjectType'] = (globalThis as any)['CGPDFObject']['CGPDFObjectType'] || {};
(globalThis as any)['CGPDFObject']['CGPDFObjectType'] = {
  Null: 1,
  Boolean: 2,
  Integer: 3,
  Real: 4,
  Name: 5,
  String: 6,
  Array: 7,
  Dictionary: 8,
  Stream: 9
};


(globalThis as any)['CGPDFPage'] = (globalThis as any)['CGPDFPage'] || {};
(globalThis as any)['CGPDFPage']['CGPDFBox'] = (globalThis as any)['CGPDFPage']['CGPDFBox'] || {};
(globalThis as any)['CGPDFPage']['CGPDFBox'] = {
  MediaBox: 0,
  CropBox: 1,
  BleedBox: 2,
  TrimBox: 3,
  ArtBox: 4
};


(globalThis as any)['CGPDFStream'] = (globalThis as any)['CGPDFStream'] || {};
(globalThis as any)['CGPDFStream']['CGPDFDataFormat'] = (globalThis as any)['CGPDFStream']['CGPDFDataFormat'] || {};
(globalThis as any)['CGPDFStream']['CGPDFDataFormat'] = {
  Raw: 0,
  JPEGEncoded: 1,
  JPEG2000: 2
};


(globalThis as any)['CGPath'] = (globalThis as any)['CGPath'] || {};
(globalThis as any)['CGPath']['CGLineCap'] = (globalThis as any)['CGPath']['CGLineCap'] || {};
(globalThis as any)['CGPath']['CGLineCap'] = {
  Butt: 0,
  Round: 1,
  Square: 2
};

(globalThis as any)['CGPath']['CGLineJoin'] = (globalThis as any)['CGPath']['CGLineJoin'] || {};
(globalThis as any)['CGPath']['CGLineJoin'] = {
  Miter: 0,
  Round: 1,
  Bevel: 2
};

(globalThis as any)['CGPath']['CGPathElementType'] = (globalThis as any)['CGPath']['CGPathElementType'] || {};
(globalThis as any)['CGPath']['CGPathElementType'] = {
  MoveToPoint: 0,
  AddLineToPoint: 1,
  AddQuadCurveToPoint: 2,
  AddCurveToPoint: 3,
  CloseSubpath: 4
};


(globalThis as any)['CGPattern'] = (globalThis as any)['CGPattern'] || {};
(globalThis as any)['CGPattern']['CGPatternTiling'] = (globalThis as any)['CGPattern']['CGPatternTiling'] || {};
(globalThis as any)['CGPattern']['CGPatternTiling'] = {
  NoDistortion: 0,
  ConstantSpacingMinimalDistortion: 1,
  ConstantSpacing: 2
};


(globalThis as any)['CGRemoteOperation'] = (globalThis as any)['CGRemoteOperation'] || {};
(globalThis as any)['CGRemoteOperation']['CGEventFilterMask'] = (globalThis as any)['CGRemoteOperation']['CGEventFilterMask'] || {};
(globalThis as any)['CGRemoteOperation']['CGEventFilterMask'] = {
  LocalMouseEvents: 1,
  LocalKeyboardEvents: 2,
  SystemDefinedEvents: 4
};

(globalThis as any)['CGRemoteOperation']['CGEventSuppressionState'] = (globalThis as any)['CGRemoteOperation']['CGEventSuppressionState'] || {};
(globalThis as any)['CGRemoteOperation']['CGEventSuppressionState'] = {
  EventSuppressionStateSuppressionInterval: 0,
  EventSuppressionStateRemoteMouseDrag: 1,
  NumberOfEventSuppressionStates: 2
};

(globalThis as any)['CGRemoteOperation']['CGScreenUpdateOperation'] = (globalThis as any)['CGRemoteOperation']['CGScreenUpdateOperation'] || {};
(globalThis as any)['CGRemoteOperation']['CGScreenUpdateOperation'] = {
  Refresh: 0,
  Move: 1,
  ReducedDirtyRectangleCount: 2147483648
};


(globalThis as any)['CGWindow'] = (globalThis as any)['CGWindow'] || {};
(globalThis as any)['CGWindow']['CGWindowBackingType'] = (globalThis as any)['CGWindow']['CGWindowBackingType'] || {};
(globalThis as any)['CGWindow']['CGWindowBackingType'] = {
  Retained: 0,
  Nonretained: 1,
  Buffered: 2
};

(globalThis as any)['CGWindow']['CGWindowImageOption'] = (globalThis as any)['CGWindow']['CGWindowImageOption'] || {};
(globalThis as any)['CGWindow']['CGWindowImageOption'] = {
  Default: 0,
  BoundsIgnoreFraming: 1,
  ShouldBeOpaque: 2,
  OnlyShadows: 4,
  BestResolution: 8,
  NominalResolution: 16
};

(globalThis as any)['CGWindow']['CGWindowListOption'] = (globalThis as any)['CGWindow']['CGWindowListOption'] || {};
(globalThis as any)['CGWindow']['CGWindowListOption'] = {
  OptionAll: 0,
  OptionOnScreenOnly: 1,
  OptionOnScreenAboveWindow: 2,
  OptionOnScreenBelowWindow: 4,
  OptionIncludingWindow: 8,
  ExcludeDesktopElements: 16
};

(globalThis as any)['CGWindow']['CGWindowSharingType'] = (globalThis as any)['CGWindow']['CGWindowSharingType'] || {};
(globalThis as any)['CGWindow']['CGWindowSharingType'] = {
  None: 0,
  ReadOnly: 1,
  ReadWrite: 2
};


(globalThis as any)['CGWindowLevel'] = (globalThis as any)['CGWindowLevel'] || {};
(globalThis as any)['CGWindowLevel']['CGWindowLevelKey'] = (globalThis as any)['CGWindowLevel']['CGWindowLevelKey'] || {};
(globalThis as any)['CGWindowLevel']['CGWindowLevelKey'] = {
  BaseWindowLevelKey: 0,
  MinimumWindowLevelKey: 1,
  DesktopWindowLevelKey: 2,
  BackstopMenuLevelKey: 3,
  NormalWindowLevelKey: 4,
  FloatingWindowLevelKey: 5,
  TornOffMenuWindowLevelKey: 6,
  DockWindowLevelKey: 7,
  MainMenuWindowLevelKey: 8,
  StatusWindowLevelKey: 9,
  ModalPanelWindowLevelKey: 10,
  PopUpMenuWindowLevelKey: 11,
  DraggingWindowLevelKey: 12,
  ScreenSaverWindowLevelKey: 13,
  MaximumWindowLevelKey: 14,
  OverlayWindowLevelKey: 15,
  HelpWindowLevelKey: 16,
  UtilityWindowLevelKey: 17,
  DesktopIconWindowLevelKey: 18,
  CursorWindowLevelKey: 19,
  AssistiveTechHighWindowLevelKey: 20,
  NumberOfWindowLevelKeys: 21
};


(globalThis as any)['CHHapticEngine'] = (globalThis as any)['CHHapticEngine'] || {};
(globalThis as any)['CHHapticEngine']['FinishedAction'] = (globalThis as any)['CHHapticEngine']['FinishedAction'] || {};
(globalThis as any)['CHHapticEngine']['FinishedAction'] = {
  StopEngine: 1,
  LeaveEngineRunning: 2
};

(globalThis as any)['CHHapticEngine']['StoppedReason'] = (globalThis as any)['CHHapticEngine']['StoppedReason'] || {};
(globalThis as any)['CHHapticEngine']['StoppedReason'] = {
  AudioSessionInterrupt: 1,
  ApplicationSuspended: 2,
  IdleTimeout: 3,
  NotifyWhenFinished: 4,
  SystemError: -1
};


(globalThis as any)['CHHapticErrors'] = (globalThis as any)['CHHapticErrors'] || {};
(globalThis as any)['CHHapticErrors']['CHHapticErrorCode'] = (globalThis as any)['CHHapticErrors']['CHHapticErrorCode'] || {};
(globalThis as any)['CHHapticErrors']['CHHapticErrorCode'] = {
  EngineNotRunning: -4805,
  OperationNotPermitted: -4806,
  EngineStartTimeout: -4808,
  NotSupported: -4809,
  ServerInitFailed: -4810,
  ServerInterrupted: -4811,
  InvalidPatternPlayer: -4812,
  InvalidPatternData: -4813,
  InvalidPatternDictionary: -4814,
  InvalidAudioSession: -4815,
  InvalidParameterType: -4820,
  InvalidEventType: -4821,
  InvalidEventTime: -4822,
  InvalidEventDuration: -4823,
  InvalidAudioResource: -4824,
  ResourceNotAvailable: -4825,
  BadEventEntry: -4830,
  BadParameterEntry: -4831,
  InvalidTime: -4840,
  UnknownError: -4898,
  MemoryError: -4899
};


(globalThis as any)['CHHapticEvent'] = (globalThis as any)['CHHapticEvent'] || {};

(globalThis as any)['CHHapticPattern'] = (globalThis as any)['CHHapticPattern'] || {};

(globalThis as any)['CIBarcodeDescriptor'] = (globalThis as any)['CIBarcodeDescriptor'] || {};
(globalThis as any)['CIBarcodeDescriptor']['CIDataMatrixCodeECCVersion'] = (globalThis as any)['CIBarcodeDescriptor']['CIDataMatrixCodeECCVersion'] || {};
(globalThis as any)['CIBarcodeDescriptor']['CIDataMatrixCodeECCVersion'] = {
  n000: 0,
  n050: 50,
  n080: 80,
  n100: 100,
  n140: 140,
  n200: 200
};

(globalThis as any)['CIBarcodeDescriptor']['CIQRCodeErrorCorrectionLevel'] = (globalThis as any)['CIBarcodeDescriptor']['CIQRCodeErrorCorrectionLevel'] || {};
(globalThis as any)['CIBarcodeDescriptor']['CIQRCodeErrorCorrectionLevel'] = {
  L: 76,
  M: 77,
  Q: 81,
  H: 72
};


(globalThis as any)['CIColor'] = (globalThis as any)['CIColor'] || {};

(globalThis as any)['CIContext'] = (globalThis as any)['CIContext'] || {};

(globalThis as any)['CIDetector'] = (globalThis as any)['CIDetector'] || {};

(globalThis as any)['CIFeature'] = (globalThis as any)['CIFeature'] || {};

(globalThis as any)['CIFilter'] = (globalThis as any)['CIFilter'] || {};

(globalThis as any)['CIFilterGenerator'] = (globalThis as any)['CIFilterGenerator'] || {};

(globalThis as any)['CIFilterShape'] = (globalThis as any)['CIFilterShape'] || {};

(globalThis as any)['CIImage'] = (globalThis as any)['CIImage'] || {};

(globalThis as any)['CIImageAccumulator'] = (globalThis as any)['CIImageAccumulator'] || {};

(globalThis as any)['CIKernel'] = (globalThis as any)['CIKernel'] || {};

(globalThis as any)['CIPlugIn'] = (globalThis as any)['CIPlugIn'] || {};

(globalThis as any)['CIRenderDestination'] = (globalThis as any)['CIRenderDestination'] || {};
(globalThis as any)['CIRenderDestination']['CIRenderDestinationAlphaMode'] = (globalThis as any)['CIRenderDestination']['CIRenderDestinationAlphaMode'] || {};
(globalThis as any)['CIRenderDestination']['CIRenderDestinationAlphaMode'] = {
  None: 0,
  Premultiplied: 1,
  Unpremultiplied: 2
};


(globalThis as any)['CISampler'] = (globalThis as any)['CISampler'] || {};

(globalThis as any)['CIVector'] = (globalThis as any)['CIVector'] || {};

(globalThis as any)['CKAcceptSharesOperation'] = (globalThis as any)['CKAcceptSharesOperation'] || {};

(globalThis as any)['CKAsset'] = (globalThis as any)['CKAsset'] || {};

(globalThis as any)['CKContainer'] = (globalThis as any)['CKContainer'] || {};
(globalThis as any)['CKContainer']['CKAccountStatus'] = (globalThis as any)['CKContainer']['CKAccountStatus'] || {};
(globalThis as any)['CKContainer']['CKAccountStatus'] = {
  CouldNotDetermine: 0,
  Available: 1,
  Restricted: 2,
  NoAccount: 3
};

(globalThis as any)['CKContainer']['CKContainer_Application_PermissionStatus'] = (globalThis as any)['CKContainer']['CKContainer_Application_PermissionStatus'] || {};
(globalThis as any)['CKContainer']['CKContainer_Application_PermissionStatus'] = {
  InitialState: 0,
  CouldNotComplete: 1,
  Denied: 2,
  Granted: 3
};

(globalThis as any)['CKContainer']['CKContainer_Application_Permissions'] = (globalThis as any)['CKContainer']['CKContainer_Application_Permissions'] || {};
(globalThis as any)['CKContainer']['CKContainer_Application_Permissions'] = {
  CKApplicationPermissionUserDiscoverability: 1
};


(globalThis as any)['CKDatabase'] = (globalThis as any)['CKDatabase'] || {};
(globalThis as any)['CKDatabase']['Scope'] = (globalThis as any)['CKDatabase']['Scope'] || {};
(globalThis as any)['CKDatabase']['Scope'] = {
  Public: 1,
  Private: 2,
  Shared: 3
};


(globalThis as any)['CKDatabaseOperation'] = (globalThis as any)['CKDatabaseOperation'] || {};

(globalThis as any)['CKDiscoverAllUserIdentitiesOperation'] = (globalThis as any)['CKDiscoverAllUserIdentitiesOperation'] || {};

(globalThis as any)['CKDiscoverUserIdentitiesOperation'] = (globalThis as any)['CKDiscoverUserIdentitiesOperation'] || {};

(globalThis as any)['CKError'] = (globalThis as any)['CKError'] || {};
(globalThis as any)['CKError']['CKErrorCode'] = (globalThis as any)['CKError']['CKErrorCode'] || {};
(globalThis as any)['CKError']['CKErrorCode'] = {
  InternalError: 1,
  PartialFailure: 2,
  NetworkUnavailable: 3,
  NetworkFailure: 4,
  BadContainer: 5,
  ServiceUnavailable: 6,
  RequestRateLimited: 7,
  MissingEntitlement: 8,
  NotAuthenticated: 9,
  PermissionFailure: 10,
  UnknownItem: 11,
  InvalidArguments: 12,
  ResultsTruncated: 13,
  ServerRecordChanged: 14,
  ServerRejectedRequest: 15,
  AssetFileNotFound: 16,
  AssetFileModified: 17,
  IncompatibleVersion: 18,
  ConstraintViolation: 19,
  OperationCancelled: 20,
  ChangeTokenExpired: 21,
  BatchRequestFailed: 22,
  ZoneBusy: 23,
  BadDatabase: 24,
  QuotaExceeded: 25,
  ZoneNotFound: 26,
  LimitExceeded: 27,
  UserDeletedZone: 28,
  TooManyParticipants: 29,
  AlreadyShared: 30,
  ReferenceViolation: 31,
  ManagedAccountRestricted: 32,
  ParticipantMayNeedVerification: 33,
  ServerResponseLost: 34,
  AssetNotAvailable: 35
};


(globalThis as any)['CKFetchDatabaseChangesOperation'] = (globalThis as any)['CKFetchDatabaseChangesOperation'] || {};

(globalThis as any)['CKFetchRecordZoneChangesOperation'] = (globalThis as any)['CKFetchRecordZoneChangesOperation'] || {};

(globalThis as any)['CKFetchRecordZonesOperation'] = (globalThis as any)['CKFetchRecordZonesOperation'] || {};

(globalThis as any)['CKFetchRecordsOperation'] = (globalThis as any)['CKFetchRecordsOperation'] || {};

(globalThis as any)['CKFetchShareMetadataOperation'] = (globalThis as any)['CKFetchShareMetadataOperation'] || {};

(globalThis as any)['CKFetchShareParticipantsOperation'] = (globalThis as any)['CKFetchShareParticipantsOperation'] || {};

(globalThis as any)['CKFetchSubscriptionsOperation'] = (globalThis as any)['CKFetchSubscriptionsOperation'] || {};

(globalThis as any)['CKFetchWebAuthTokenOperation'] = (globalThis as any)['CKFetchWebAuthTokenOperation'] || {};

(globalThis as any)['CKLocationSortDescriptor'] = (globalThis as any)['CKLocationSortDescriptor'] || {};

(globalThis as any)['CKModifyRecordZonesOperation'] = (globalThis as any)['CKModifyRecordZonesOperation'] || {};

(globalThis as any)['CKModifyRecordsOperation'] = (globalThis as any)['CKModifyRecordsOperation'] || {};
(globalThis as any)['CKModifyRecordsOperation']['RecordSavePolicy'] = (globalThis as any)['CKModifyRecordsOperation']['RecordSavePolicy'] || {};
(globalThis as any)['CKModifyRecordsOperation']['RecordSavePolicy'] = {
  IfServerRecordUnchanged: 0,
  ChangedKeys: 1,
  AllKeys: 2
};


(globalThis as any)['CKModifySubscriptionsOperation'] = (globalThis as any)['CKModifySubscriptionsOperation'] || {};

(globalThis as any)['CKNotification'] = (globalThis as any)['CKNotification'] || {};
(globalThis as any)['CKNotification']['CKQueryNotification'] = (globalThis as any)['CKNotification']['CKQueryNotification'] || {};
(globalThis as any)['CKNotification']['CKQueryNotification']['Reason'] = (globalThis as any)['CKNotification']['CKQueryNotification']['Reason'] || {};
(globalThis as any)['CKNotification']['CKQueryNotification']['Reason'] = {
  Created: 1,
  Updated: 2,
  Deleted: 3
};

(globalThis as any)['CKNotification']['NotificationType'] = (globalThis as any)['CKNotification']['NotificationType'] || {};
(globalThis as any)['CKNotification']['NotificationType'] = {
  Query: 1,
  RecordZone: 2,
  ReadNotification: 3,
  Database: 4
};


(globalThis as any)['CKOperation'] = (globalThis as any)['CKOperation'] || {};

(globalThis as any)['CKOperationGroup'] = (globalThis as any)['CKOperationGroup'] || {};
(globalThis as any)['CKOperationGroup']['TransferSize'] = (globalThis as any)['CKOperationGroup']['TransferSize'] || {};
(globalThis as any)['CKOperationGroup']['TransferSize'] = {
  Unknown: 0,
  Kilobytes: 1,
  Megabytes: 2,
  TensOfMegabytes: 3,
  HundredsOfMegabytes: 4,
  Gigabytes: 5,
  TensOfGigabytes: 6,
  HundredsOfGigabytes: 7
};


(globalThis as any)['CKQuery'] = (globalThis as any)['CKQuery'] || {};

(globalThis as any)['CKQueryOperation'] = (globalThis as any)['CKQueryOperation'] || {};

(globalThis as any)['CKRecord'] = (globalThis as any)['CKRecord'] || {};

(globalThis as any)['CKRecordZone'] = (globalThis as any)['CKRecordZone'] || {};
(globalThis as any)['CKRecordZone']['Capabilities'] = (globalThis as any)['CKRecordZone']['Capabilities'] || {};
(globalThis as any)['CKRecordZone']['Capabilities'] = {
  FetchChanges: 1,
  Atomic: 2,
  Sharing: 4
};


(globalThis as any)['CKShare'] = (globalThis as any)['CKShare'] || {};

(globalThis as any)['CKSubscription'] = (globalThis as any)['CKSubscription'] || {};
(globalThis as any)['CKSubscription']['CKQuerySubscription'] = (globalThis as any)['CKSubscription']['CKQuerySubscription'] || {};
(globalThis as any)['CKSubscription']['CKQuerySubscription']['Options'] = (globalThis as any)['CKSubscription']['CKQuerySubscription']['Options'] || {};
(globalThis as any)['CKSubscription']['CKQuerySubscription']['Options'] = {
  RecordCreation: 1,
  RecordUpdate: 2,
  RecordDeletion: 4,
  ce: 8
};

(globalThis as any)['CKSubscription']['SubscriptionType'] = (globalThis as any)['CKSubscription']['SubscriptionType'] || {};
(globalThis as any)['CKSubscription']['SubscriptionType'] = {
  Query: 1,
  RecordZone: 2,
  Database: 3
};


(globalThis as any)['CKUserIdentity'] = (globalThis as any)['CKUserIdentity'] || {};

(globalThis as any)['CLBeaconIdentityConstraint'] = (globalThis as any)['CLBeaconIdentityConstraint'] || {};

(globalThis as any)['CLBeaconRegion'] = (globalThis as any)['CLBeaconRegion'] || {};

(globalThis as any)['CLCircularRegion'] = (globalThis as any)['CLCircularRegion'] || {};

(globalThis as any)['CLError'] = (globalThis as any)['CLError'] || {};
(globalThis as any)['CLError']['CLError'] = (globalThis as any)['CLError']['CLError'] || {};
(globalThis as any)['CLError']['CLError'] = {
  LocationUnknown: 0,
  Denied: 1,
  Network: 2,
  HeadingFailure: 3,
  RegionMonitoringDenied: 4,
  RegionMonitoringFailure: 5,
  RegionMonitoringSetupDelayed: 6,
  RegionMonitoringResponseDelayed: 7,
  GeocodeFoundNoResult: 8,
  GeocodeFoundPartialResult: 9,
  GeocodeCanceled: 10,
  DeferredFailed: 11,
  DeferredNotUpdatingLocation: 12,
  DeferredAccuracyTooLow: 13,
  DeferredDistanceFiltered: 14,
  DeferredCanceled: 15,
  RangingUnavailable: 16,
  RangingFailure: 17
};


(globalThis as any)['CLGeocoder'] = (globalThis as any)['CLGeocoder'] || {};

(globalThis as any)['CLHeading'] = (globalThis as any)['CLHeading'] || {};

(globalThis as any)['CLLocation'] = (globalThis as any)['CLLocation'] || {};

(globalThis as any)['CLLocationManager'] = (globalThis as any)['CLLocationManager'] || {};
(globalThis as any)['CLLocationManager']['CLActivityType'] = (globalThis as any)['CLLocationManager']['CLActivityType'] || {};
(globalThis as any)['CLLocationManager']['CLActivityType'] = {
  Other: 1,
  AutomotiveNavigation: 2,
  Fitness: 3,
  OtherNavigation: 4,
  Airborne: 5
};

(globalThis as any)['CLLocationManager']['CLAuthorizationStatus'] = (globalThis as any)['CLLocationManager']['CLAuthorizationStatus'] || {};
(globalThis as any)['CLLocationManager']['CLAuthorizationStatus'] = {
  NotDetermined: 0,
  Restricted: 1,
  Denied: 2,
  AuthorizedAlways: 3,
  AuthorizedWhenInUse: 4,
  Authorized: 3
};

(globalThis as any)['CLLocationManager']['CLDeviceOrientation'] = (globalThis as any)['CLLocationManager']['CLDeviceOrientation'] || {};
(globalThis as any)['CLLocationManager']['CLDeviceOrientation'] = {
  Unknown: 0,
  Portrait: 1,
  PortraitUpsideDown: 2,
  LandscapeLeft: 3,
  LandscapeRight: 4,
  FaceUp: 5,
  FaceDown: 6
};


(globalThis as any)['CLPlacemark'] = (globalThis as any)['CLPlacemark'] || {};

(globalThis as any)['CLRegion'] = (globalThis as any)['CLRegion'] || {};
(globalThis as any)['CLRegion']['CLProximity'] = (globalThis as any)['CLRegion']['CLProximity'] || {};
(globalThis as any)['CLRegion']['CLProximity'] = {
  Unknown: 0,
  Immediate: 1,
  Near: 2,
  Far: 3
};

(globalThis as any)['CLRegion']['CLRegionState'] = (globalThis as any)['CLRegion']['CLRegionState'] || {};
(globalThis as any)['CLRegion']['CLRegionState'] = {
  Unknown: 0,
  Inside: 1,
  Outside: 2
};


(globalThis as any)['CLVisit'] = (globalThis as any)['CLVisit'] || {};

(globalThis as any)['CMAltimeter'] = (globalThis as any)['CMAltimeter'] || {};

(globalThis as any)['CMAttitude'] = (globalThis as any)['CMAttitude'] || {};
(globalThis as any)['CMAttitude']['CMAttitudeReferenceFrame'] = (globalThis as any)['CMAttitude']['CMAttitudeReferenceFrame'] || {};
(globalThis as any)['CMAttitude']['CMAttitudeReferenceFrame'] = {
  ArbitraryZVertical: 1,
  ArbitraryCorrectedZVertical: 2,
  MagneticNorthZVertical: 4,
  TrueNorthZVertical: 8
};


(globalThis as any)['CMAuthorization'] = (globalThis as any)['CMAuthorization'] || {};
(globalThis as any)['CMAuthorization']['CMAuthorizationStatus'] = (globalThis as any)['CMAuthorization']['CMAuthorizationStatus'] || {};
(globalThis as any)['CMAuthorization']['CMAuthorizationStatus'] = {
  NotDetermined: 0,
  Restricted: 1,
  Denied: 2,
  Authorized: 3
};


(globalThis as any)['CMDeviceMotion'] = (globalThis as any)['CMDeviceMotion'] || {};
(globalThis as any)['CMDeviceMotion']['CMMagneticFieldCalibrationAccuracy'] = (globalThis as any)['CMDeviceMotion']['CMMagneticFieldCalibrationAccuracy'] || {};
(globalThis as any)['CMDeviceMotion']['CMMagneticFieldCalibrationAccuracy'] = {
  Uncalibrated: -1,
  Low: 0,
  Medium: 1,
  High: 2
};


(globalThis as any)['CMError'] = (globalThis as any)['CMError'] || {};
(globalThis as any)['CMError']['CMError'] = (globalThis as any)['CMError']['CMError'] || {};
(globalThis as any)['CMError']['CMError'] = {
  NULL: 100,
  DeviceRequiresMovement: 101,
  TrueNorthNotAvailable: 102,
  Unknown: 103,
  MotionActivityNotAvailable: 104,
  MotionActivityNotAuthorized: 105,
  MotionActivityNotEntitled: 106,
  InvalidParameter: 107,
  InvalidAction: 108,
  NotAvailable: 109,
  NotEntitled: 110,
  NotAuthorized: 111
};


(globalThis as any)['CMLogItem'] = (globalThis as any)['CMLogItem'] || {};

(globalThis as any)['CMMotionActivity'] = (globalThis as any)['CMMotionActivity'] || {};
(globalThis as any)['CMMotionActivity']['CMMotionActivityConfidence'] = (globalThis as any)['CMMotionActivity']['CMMotionActivityConfidence'] || {};
(globalThis as any)['CMMotionActivity']['CMMotionActivityConfidence'] = {
  Low: 0,
  Medium: 1,
  High: 2
};


(globalThis as any)['CMMotionActivityManager'] = (globalThis as any)['CMMotionActivityManager'] || {};

(globalThis as any)['CMMotionManager'] = (globalThis as any)['CMMotionManager'] || {};

(globalThis as any)['CMMovementDisorderManager'] = (globalThis as any)['CMMovementDisorderManager'] || {};

(globalThis as any)['CMPedometer'] = (globalThis as any)['CMPedometer'] || {};
(globalThis as any)['CMPedometer']['CMPedometerEventType'] = (globalThis as any)['CMPedometer']['CMPedometerEventType'] || {};
(globalThis as any)['CMPedometer']['CMPedometerEventType'] = {
  Pause: 0,
  Resume: 1
};


(globalThis as any)['CMSensorRecorder'] = (globalThis as any)['CMSensorRecorder'] || {};

(globalThis as any)['CMStepCounter'] = (globalThis as any)['CMStepCounter'] || {};

(globalThis as any)['CMTime'] = (globalThis as any)['CMTime'] || {};
(globalThis as any)['CMTime']['CMTimeFlags'] = (globalThis as any)['CMTime']['CMTimeFlags'] || {};
(globalThis as any)['CMTime']['CMTimeFlags'] = {
  _Valid: 1,
  _HasBeenRounded: 2,
  _PositiveInfinity: 4,
  _NegativeInfinity: 8,
  _Indefinite: 16,
  _ImpliedValueFlagsMask: 28
};

(globalThis as any)['CMTime']['CMTimeRoundingMethod'] = (globalThis as any)['CMTime']['CMTimeRoundingMethod'] || {};
(globalThis as any)['CMTime']['CMTimeRoundingMethod'] = {
  _RoundHalfAwayFromZero: 1,
  _RoundTowardZero: 2,
  _RoundAwayFromZero: 3,
  _QuickTime: 4,
  _RoundTowardPositiveInfinity: 5,
  _RoundTowardNegativeInfinity: 6,
  _Default: 1
};


(globalThis as any)['CSPerson'] = (globalThis as any)['CSPerson'] || {};

(globalThis as any)['CSSearchQuery'] = (globalThis as any)['CSSearchQuery'] || {};
(globalThis as any)['CSSearchQuery']['CSSearchQueryErrorCode'] = (globalThis as any)['CSSearchQuery']['CSSearchQueryErrorCode'] || {};
(globalThis as any)['CSSearchQuery']['CSSearchQueryErrorCode'] = {
  Unknown: -2000,
  IndexUnreachable: -2001,
  InvalidQuery: -2002,
  Cancelled: -2003
};


(globalThis as any)['CSSearchableIndex'] = (globalThis as any)['CSSearchableIndex'] || {};
(globalThis as any)['CSSearchableIndex']['CSIndexErrorCode'] = (globalThis as any)['CSSearchableIndex']['CSIndexErrorCode'] || {};
(globalThis as any)['CSSearchableIndex']['CSIndexErrorCode'] = {
  UnknownError: -1,
  IndexUnavailableError: -1000,
  InvalidItemError: -1001,
  InvalidClientStateError: -1002,
  RemoteConnectionError: -1003,
  QuotaExceeded: -1004,
  IndexingUnsupported: -1005
};


(globalThis as any)['CSSearchableItem'] = (globalThis as any)['CSSearchableItem'] || {};

(globalThis as any)['CSSearchableItemAttributeSet'] = (globalThis as any)['CSSearchableItemAttributeSet'] || {};

(globalThis as any)['CTFont'] = (globalThis as any)['CTFont'] || {};
(globalThis as any)['CTFont']['CTFontOptions'] = (globalThis as any)['CTFont']['CTFontOptions'] || {};
(globalThis as any)['CTFont']['CTFontOptions'] = {
  Default: 0,
  PreventAutoActivation: 1,
  PreferSystemFont: 4
};

(globalThis as any)['CTFont']['CTFontTableOptions'] = (globalThis as any)['CTFont']['CTFontTableOptions'] || {};
(globalThis as any)['CTFont']['CTFontTableOptions'] = {
  NoOptions: 0,
  ExcludeSynthetic: 1
};

(globalThis as any)['CTFont']['CTFontUIFontType'] = (globalThis as any)['CTFont']['CTFontUIFontType'] || {};
(globalThis as any)['CTFont']['CTFontUIFontType'] = {
  UIFontNone: 4294967295,
  UIFontUser: 0,
  UIFontUserFixedPitch: 1,
  UIFontSystem: 2,
  UIFontEmphasizedSystem: 3,
  UIFontSmallSystem: 4,
  UIFontSmallEmphasizedSystem: 5,
  UIFontMiniSystem: 6,
  UIFontMiniEmphasizedSystem: 7,
  UIFontViews: 8,
  UIFontApplication: 9,
  UIFontLabel: 10,
  UIFontMenuTitle: 11,
  UIFontMenuItem: 12,
  UIFontMenuItemMark: 13,
  UIFontMenuItemCmdKey: 14,
  UIFontWindowTitle: 15,
  UIFontPushButton: 16,
  UIFontUtilityWindowTitle: 17,
  UIFontAlertHeader: 18,
  UIFontSystemDetail: 19,
  UIFontEmphasizedSystemDetail: 20,
  UIFontToolbar: 21,
  UIFontSmallToolbar: 22,
  UIFontMessage: 23,
  UIFontPalette: 24,
  UIFontToolTip: 25,
  UIFontControlContent: 26,
  NoFontType: 4294967295,
  UserFontType: 0,
  UserFixedPitchFontType: 1,
  SystemFontType: 2,
  EmphasizedSystemFontType: 3,
  SmallSystemFontType: 4,
  SmallEmphasizedSystemFontType: 5,
  MiniSystemFontType: 6,
  MiniEmphasizedSystemFontType: 7,
  ViewsFontType: 8,
  ApplicationFontType: 9,
  LabelFontType: 10,
  MenuTitleFontType: 11,
  MenuItemFontType: 12,
  MenuItemMarkFontType: 13,
  MenuItemCmdKeyFontType: 14,
  WindowTitleFontType: 15,
  PushButtonFontType: 16,
  UtilityWindowTitleFontType: 17,
  AlertHeaderFontType: 18,
  SystemDetailFontType: 19,
  EmphasizedSystemDetailFontType: 20,
  ToolbarFontType: 21,
  SmallToolbarFontType: 22,
  MessageFontType: 23,
  PaletteFontType: 24,
  ToolTipFontType: 25,
  ControlContentFontType: 26
};


(globalThis as any)['CTFontCollection'] = (globalThis as any)['CTFontCollection'] || {};
(globalThis as any)['CTFontCollection']['CTFontCollectionCopyOptions'] = (globalThis as any)['CTFontCollection']['CTFontCollectionCopyOptions'] || {};
(globalThis as any)['CTFontCollection']['CTFontCollectionCopyOptions'] = {
  DefaultOptions: 0,
  Unique: 1,
  StandardSort: 2
};


(globalThis as any)['CTFontDescriptor'] = (globalThis as any)['CTFontDescriptor'] || {};
(globalThis as any)['CTFontDescriptor']['CTFontDescriptorMatchingState'] = (globalThis as any)['CTFontDescriptor']['CTFontDescriptorMatchingState'] || {};
(globalThis as any)['CTFontDescriptor']['CTFontDescriptorMatchingState'] = {
  DidBegin: 0,
  DidFinish: 1,
  WillBeginQuerying: 2,
  Stalled: 3,
  WillBeginDownloading: 4,
  Downloading: 5,
  DidFinishDownloading: 6,
  DidMatch: 7,
  DidFailWithError: 8
};

(globalThis as any)['CTFontDescriptor']['CTFontFormat'] = (globalThis as any)['CTFontDescriptor']['CTFontFormat'] || {};
(globalThis as any)['CTFontDescriptor']['CTFontFormat'] = {
  Unrecognized: 0,
  OpenTypePostScript: 1,
  OpenTypeTrueType: 2,
  TrueType: 3,
  PostScript: 4,
  Bitmap: 5
};

(globalThis as any)['CTFontDescriptor']['CTFontOrientation'] = (globalThis as any)['CTFontDescriptor']['CTFontOrientation'] || {};
(globalThis as any)['CTFontDescriptor']['CTFontOrientation'] = {
  OrientationDefault: 0,
  OrientationHorizontal: 1,
  OrientationVertical: 2,
  DefaultOrientation: 0,
  HorizontalOrientation: 1,
  VerticalOrientation: 2
};


(globalThis as any)['CTFontManager'] = (globalThis as any)['CTFontManager'] || {};
(globalThis as any)['CTFontManager']['CTFontManagerAutoActivationSetting'] = (globalThis as any)['CTFontManager']['CTFontManagerAutoActivationSetting'] || {};
(globalThis as any)['CTFontManager']['CTFontManagerAutoActivationSetting'] = {
  Default: 0,
  Disabled: 1,
  Enabled: 2,
  PromptUser: 3
};

(globalThis as any)['CTFontManager']['CTFontManagerScope'] = (globalThis as any)['CTFontManager']['CTFontManagerScope'] || {};
(globalThis as any)['CTFontManager']['CTFontManagerScope'] = {
  None: 0,
  Process: 1,
  Persistent: 2,
  Session: 3,
  User: 2
};


(globalThis as any)['CTFontManagerErrors'] = (globalThis as any)['CTFontManagerErrors'] || {};
(globalThis as any)['CTFontManagerErrors']['CTFontManagerError'] = (globalThis as any)['CTFontManagerErrors']['CTFontManagerError'] || {};
(globalThis as any)['CTFontManagerErrors']['CTFontManagerError'] = {
  FileNotFound: 101,
  InsufficientPermissions: 102,
  UnrecognizedFormat: 103,
  InvalidFontData: 104,
  AlreadyRegistered: 105,
  ExceededResourceLimit: 106,
  AssetNotFound: 107,
  NotRegistered: 201,
  InUse: 202,
  SystemRequired: 203,
  RegistrationFailed: 301,
  MissingEntitlement: 302,
  InsufficientInfo: 303,
  CancelledByUser: 304,
  DuplicatedName: 305,
  InvalidFilePath: 306
};


(globalThis as any)['CTFontTraits'] = (globalThis as any)['CTFontTraits'] || {};
(globalThis as any)['CTFontTraits']['CTFontStylisticClass'] = (globalThis as any)['CTFontTraits']['CTFontStylisticClass'] || {};
(globalThis as any)['CTFontTraits']['CTFontStylisticClass'] = {
  ClassUnknown: 0,
  ClassOldStyleSerifs: 268435456,
  ClassTransitionalSerifs: 536870912,
  ClassModernSerifs: 805306368,
  ClassClarendonSerifs: 1073741824,
  ClassSlabSerifs: 1342177280,
  ClassFreeformSerifs: 1879048192,
  ClassSansSerif: 2147483648,
  ClassOrnamentals: 2415919104,
  ClassScripts: 2684354560,
  ClassSymbolic: 3221225472,
  UnknownClass: 0,
  OldStyleSerifsClass: 268435456,
  TransitionalSerifsClass: 536870912,
  ModernSerifsClass: 805306368,
  ClarendonSerifsClass: 1073741824,
  SlabSerifsClass: 1342177280,
  FreeformSerifsClass: 1879048192,
  SansSerifClass: 2147483648,
  OrnamentalsClass: 2415919104,
  ScriptsClass: 2684354560,
  SymbolicClass: 3221225472
};

(globalThis as any)['CTFontTraits']['CTFontSymbolicTraits'] = (globalThis as any)['CTFontTraits']['CTFontSymbolicTraits'] || {};
(globalThis as any)['CTFontTraits']['CTFontSymbolicTraits'] = {
  TraitItalic: 1,
  TraitBold: 2,
  TraitExpanded: 32,
  TraitCondensed: 64,
  TraitMonoSpace: 1024,
  TraitVertical: 2048,
  TraitUIOptimized: 4096,
  TraitColorGlyphs: 8192,
  TraitComposite: 16384,
  TraitClassMask: 4026531840,
  ItalicTrait: 1,
  BoldTrait: 2,
  ExpandedTrait: 32,
  CondensedTrait: 64,
  MonoSpaceTrait: 1024,
  VerticalTrait: 2048,
  UIOptimizedTrait: 4096,
  ColorGlyphsTrait: 8192,
  CompositeTrait: 16384,
  ClassMaskTrait: 4026531840
};


(globalThis as any)['CTFrame'] = (globalThis as any)['CTFrame'] || {};
(globalThis as any)['CTFrame']['CTFramePathFillRule'] = (globalThis as any)['CTFrame']['CTFramePathFillRule'] || {};
(globalThis as any)['CTFrame']['CTFramePathFillRule'] = {
  EvenOdd: 0,
  WindingNumber: 1
};

(globalThis as any)['CTFrame']['CTFrameProgression'] = (globalThis as any)['CTFrame']['CTFrameProgression'] || {};
(globalThis as any)['CTFrame']['CTFrameProgression'] = {
  TopToBottom: 0,
  RightToLeft: 1,
  LeftToRight: 2
};


(globalThis as any)['CTGlyphInfo'] = (globalThis as any)['CTGlyphInfo'] || {};
(globalThis as any)['CTGlyphInfo']['CTCharacterCollection'] = (globalThis as any)['CTGlyphInfo']['CTCharacterCollection'] || {};
(globalThis as any)['CTGlyphInfo']['CTCharacterCollection'] = {
  CharacterCollectionIdentityMapping: 0,
  CharacterCollectionAdobeCNS1: 1,
  CharacterCollectionAdobeGB1: 2,
  CharacterCollectionAdobeJapan1: 3,
  CharacterCollectionAdobeJapan2: 4,
  CharacterCollectionAdobeKorea1: 5,
  IdentityMappingCharacterCollection: 0,
  AdobeCNS1CharacterCollection: 1,
  AdobeGB1CharacterCollection: 2,
  AdobeJapan1CharacterCollection: 3,
  AdobeJapan2CharacterCollection: 4,
  AdobeKorea1CharacterCollection: 5
};


(globalThis as any)['CTLine'] = (globalThis as any)['CTLine'] || {};
(globalThis as any)['CTLine']['CTLineBoundsOptions'] = (globalThis as any)['CTLine']['CTLineBoundsOptions'] || {};
(globalThis as any)['CTLine']['CTLineBoundsOptions'] = {
  ExcludeTypographicLeading: 1,
  ExcludeTypographicShifts: 2,
  UseHangingPunctuation: 4,
  UseGlyphPathBounds: 8,
  UseOpticalBounds: 16,
  IncludeLanguageExtents: 32
};

(globalThis as any)['CTLine']['CTLineTruncationType'] = (globalThis as any)['CTLine']['CTLineTruncationType'] || {};
(globalThis as any)['CTLine']['CTLineTruncationType'] = {
  Start: 0,
  End: 1,
  Middle: 2
};


(globalThis as any)['CTParagraphStyle'] = (globalThis as any)['CTParagraphStyle'] || {};
(globalThis as any)['CTParagraphStyle']['CTLineBreakMode'] = (globalThis as any)['CTParagraphStyle']['CTLineBreakMode'] || {};
(globalThis as any)['CTParagraphStyle']['CTLineBreakMode'] = {
  WordWrapping: 0,
  CharWrapping: 1,
  Clipping: 2,
  TruncatingHead: 3,
  TruncatingTail: 4,
  TruncatingMiddle: 5
};

(globalThis as any)['CTParagraphStyle']['CTParagraphStyleSpecifier'] = (globalThis as any)['CTParagraphStyle']['CTParagraphStyleSpecifier'] || {};
(globalThis as any)['CTParagraphStyle']['CTParagraphStyleSpecifier'] = {
  Alignment: 0,
  FirstLineHeadIndent: 1,
  HeadIndent: 2,
  TailIndent: 3,
  TabStops: 4,
  DefaultTabInterval: 5,
  LineBreakMode: 6,
  LineHeightMultiple: 7,
  MaximumLineHeight: 8,
  MinimumLineHeight: 9,
  LineSpacing: 10,
  ParagraphSpacing: 11,
  ParagraphSpacingBefore: 12,
  BaseWritingDirection: 13,
  MaximumLineSpacing: 14,
  MinimumLineSpacing: 15,
  LineSpacingAdjustment: 16,
  LineBoundsOptions: 17,
  Count: 18
};

(globalThis as any)['CTParagraphStyle']['CTTextAlignment'] = (globalThis as any)['CTParagraphStyle']['CTTextAlignment'] || {};
(globalThis as any)['CTParagraphStyle']['CTTextAlignment'] = {
  TextAlignmentLeft: 0,
  TextAlignmentRight: 1,
  TextAlignmentCenter: 2,
  TextAlignmentJustified: 3,
  TextAlignmentNatural: 4,
  LeftTextAlignment: 0,
  RightTextAlignment: 1,
  CenterTextAlignment: 2,
  JustifiedTextAlignment: 3,
  NaturalTextAlignment: 4
};

(globalThis as any)['CTParagraphStyle']['CTWritingDirection'] = (globalThis as any)['CTParagraphStyle']['CTWritingDirection'] || {};
(globalThis as any)['CTParagraphStyle']['CTWritingDirection'] = {
  Natural: -1,
  LeftToRight: 0,
  RightToLeft: 1
};


(globalThis as any)['CTRubyAnnotation'] = (globalThis as any)['CTRubyAnnotation'] || {};
(globalThis as any)['CTRubyAnnotation']['CTRubyAlignment'] = (globalThis as any)['CTRubyAnnotation']['CTRubyAlignment'] || {};
(globalThis as any)['CTRubyAnnotation']['CTRubyAlignment'] = {
  Invalid: 255,
  Auto: 0,
  Start: 1,
  Center: 2,
  End: 3,
  DistributeLetter: 4,
  DistributeSpace: 5,
  LineEdge: 6
};

(globalThis as any)['CTRubyAnnotation']['CTRubyOverhang'] = (globalThis as any)['CTRubyAnnotation']['CTRubyOverhang'] || {};
(globalThis as any)['CTRubyAnnotation']['CTRubyOverhang'] = {
  Invalid: 255,
  Auto: 0,
  Start: 1,
  End: 2,
  None: 3
};

(globalThis as any)['CTRubyAnnotation']['CTRubyPosition'] = (globalThis as any)['CTRubyAnnotation']['CTRubyPosition'] || {};
(globalThis as any)['CTRubyAnnotation']['CTRubyPosition'] = {
  Before: 0,
  After: 1,
  InterCharacter: 2,
  Inline: 3,
  Count: 4
};


(globalThis as any)['CTRun'] = (globalThis as any)['CTRun'] || {};
(globalThis as any)['CTRun']['CTRunStatus'] = (globalThis as any)['CTRun']['CTRunStatus'] || {};
(globalThis as any)['CTRun']['CTRunStatus'] = {
  NoStatus: 0,
  RightToLeft: 1,
  NonMonotonic: 2,
  HasNonIdentityMatrix: 4
};


(globalThis as any)['CTStringAttributes'] = (globalThis as any)['CTStringAttributes'] || {};
(globalThis as any)['CTStringAttributes']['CTUnderlineStyle'] = (globalThis as any)['CTStringAttributes']['CTUnderlineStyle'] || {};
(globalThis as any)['CTStringAttributes']['CTUnderlineStyle'] = {
  None: 0,
  Single: 1,
  Thick: 2,
  Double: 9
};

(globalThis as any)['CTStringAttributes']['CTUnderlineStyleModifiers'] = (globalThis as any)['CTStringAttributes']['CTUnderlineStyleModifiers'] || {};
(globalThis as any)['CTStringAttributes']['CTUnderlineStyleModifiers'] = {
  Solid: 0,
  Dot: 256,
  Dash: 512,
  DashDot: 768,
  DashDotDot: 1024
};


(globalThis as any)['CVBase'] = (globalThis as any)['CVBase'] || {};
(globalThis as any)['CVBase']['CVSMPTETimeFlags'] = (globalThis as any)['CVBase']['CVSMPTETimeFlags'] || {};
(globalThis as any)['CVBase']['CVSMPTETimeFlags'] = {
  Valid: 1,
  Running: 2
};

(globalThis as any)['CVBase']['CVSMPTETimeType'] = (globalThis as any)['CVBase']['CVSMPTETimeType'] || {};
(globalThis as any)['CVBase']['CVSMPTETimeType'] = {
  e24: 0,
  e25: 1,
  e30Drop: 2,
  e30: 3,
  e2997: 4,
  e2997Drop: 5,
  e60: 6,
  e5994: 7
};

(globalThis as any)['CVBase']['CVTimeFlags'] = (globalThis as any)['CVBase']['CVTimeFlags'] || {};
(globalThis as any)['CVBase']['CVTimeFlags'] = {
  kCVTimeIsIndefinite: 1
};

(globalThis as any)['CVBase']['CVTimeStampFlags'] = (globalThis as any)['CVBase']['CVTimeStampFlags'] || {};
(globalThis as any)['CVBase']['CVTimeStampFlags'] = {
  VideoTimeValid: 1,
  HostTimeValid: 2,
  SMPTETimeValid: 4,
  VideoRefreshPeriodValid: 8,
  RateScalarValid: 16,
  TopField: 65536,
  BottomField: 131072,
  VideoHostTimeValid: 3,
  IsInterlaced: 196608
};


(globalThis as any)['CVBuffer'] = (globalThis as any)['CVBuffer'] || {};
(globalThis as any)['CVBuffer']['CVAttachmentMode'] = (globalThis as any)['CVBuffer']['CVAttachmentMode'] || {};
(globalThis as any)['CVBuffer']['CVAttachmentMode'] = {
  dNotPropagate: 0,
  dPropagate: 1
};


(globalThis as any)['CVPixelBuffer'] = (globalThis as any)['CVPixelBuffer'] || {};
(globalThis as any)['CVPixelBuffer']['CVPixelBufferLockFlags'] = (globalThis as any)['CVPixelBuffer']['CVPixelBufferLockFlags'] || {};
(globalThis as any)['CVPixelBuffer']['CVPixelBufferLockFlags'] = {
  kCVPixelBufferLock_ReadOnly: 1
};


(globalThis as any)['CVPixelBufferPool'] = (globalThis as any)['CVPixelBufferPool'] || {};
(globalThis as any)['CVPixelBufferPool']['CVPixelBufferPoolFlushFlags'] = (globalThis as any)['CVPixelBufferPool']['CVPixelBufferPoolFlushFlags'] || {};
(globalThis as any)['CVPixelBufferPool']['CVPixelBufferPoolFlushFlags'] = {
  kCVPixelBufferPoolFlushExcessBuffers: 1
};


(globalThis as any)['CWChannel'] = (globalThis as any)['CWChannel'] || {};

(globalThis as any)['CWConfiguration'] = (globalThis as any)['CWConfiguration'] || {};

(globalThis as any)['CWInterface'] = (globalThis as any)['CWInterface'] || {};

(globalThis as any)['CWNetwork'] = (globalThis as any)['CWNetwork'] || {};

(globalThis as any)['CWNetworkProfile'] = (globalThis as any)['CWNetworkProfile'] || {};

(globalThis as any)['CWWiFiClient'] = (globalThis as any)['CWWiFiClient'] || {};

(globalThis as any)['Calendar'] = (globalThis as any)['Calendar'] || {};
(globalThis as any)['Calendar']['Options'] = (globalThis as any)['Calendar']['Options'] || {};
(globalThis as any)['Calendar']['Options'] = {
  WrapComponents: 1,
  MatchStrictly: 2,
  SearchBackwards: 4,
  MatchPreviousTimePreservingSmallerUnits: 256,
  MatchNextTimePreservingSmallerUnits: 512,
  MatchNextTime: 1024,
  MatchFirst: 4096,
  MatchLast: 8192
};

(globalThis as any)['Calendar']['Unit'] = (globalThis as any)['Calendar']['Unit'] || {};
(globalThis as any)['Calendar']['Unit'] = {
  CalendarUnitEra: 2,
  CalendarUnitYear: 4,
  CalendarUnitMonth: 8,
  CalendarUnitDay: 16,
  CalendarUnitHour: 32,
  CalendarUnitMinute: 64,
  CalendarUnitSecond: 128,
  CalendarUnitWeekday: 512,
  CalendarUnitWeekdayOrdinal: 1024,
  CalendarUnitQuarter: 2048,
  CalendarUnitWeekOfMonth: 4096,
  CalendarUnitWeekOfYear: 8192,
  CalendarUnitYearForWeekOfYear: 16384,
  CalendarUnitNanosecond: 32768,
  CalendarUnitCalendar: 1048576,
  CalendarUnitTimeZone: 2097152,
  EraCalendarUnit: 2,
  YearCalendarUnit: 4,
  MonthCalendarUnit: 8,
  DayCalendarUnit: 16,
  HourCalendarUnit: 32,
  MinuteCalendarUnit: 64,
  SecondCalendarUnit: 128,
  WeekCalendarUnit: 256,
  WeekdayCalendarUnit: 512,
  WeekdayOrdinalCalendarUnit: 1024,
  QuarterCalendarUnit: 2048,
  WeekOfMonthCalendarUnit: 4096,
  WeekOfYearCalendarUnit: 8192,
  YearForWeekOfYearCalendarUnit: 16384,
  CalendarCalendarUnit: 1048576,
  TimeZoneCalendarUnit: 2097152
};


(globalThis as any)['CollectionDifference'] = (globalThis as any)['CollectionDifference'] || {};
(globalThis as any)['CollectionDifference']['NSOrderedCollectionDifferenceCalculationOptions'] = (globalThis as any)['CollectionDifference']['NSOrderedCollectionDifferenceCalculationOptions'] || {};
(globalThis as any)['CollectionDifference']['NSOrderedCollectionDifferenceCalculationOptions'] = {
  OmitInsertedObjects: 1,
  OmitRemovedObjects: 2,
  InferMoves: 4
};


(globalThis as any)['CoreAudioBaseTypes'] = (globalThis as any)['CoreAudioBaseTypes'] || {};
(globalThis as any)['CoreAudioBaseTypes']['AudioChannelBitmap'] = (globalThis as any)['CoreAudioBaseTypes']['AudioChannelBitmap'] || {};
(globalThis as any)['CoreAudioBaseTypes']['AudioChannelBitmap'] = {
  _Left: 1,
  _Right: 2,
  _Center: 4,
  _LFEScreen: 8,
  _LeftSurround: 16,
  _RightSurround: 32,
  _LeftCenter: 64,
  _RightCenter: 128,
  _CenterSurround: 256,
  _LeftSurroundDirect: 512,
  _RightSurroundDirect: 1024,
  _TopCenterSurround: 2048,
  _VerticalHeightLeft: 4096,
  _VerticalHeightCenter: 8192,
  _VerticalHeightRight: 16384,
  _TopBackLeft: 32768,
  _TopBackCenter: 65536,
  _TopBackRight: 131072,
  _LeftTopFront: 4096,
  _CenterTopFront: 8192,
  _RightTopFront: 16384,
  _LeftTopMiddle: 2097152,
  _CenterTopMiddle: 2048,
  _RightTopMiddle: 8388608,
  _LeftTopRear: 16777216,
  _CenterTopRear: 33554432,
  _RightTopRear: 67108864
};

(globalThis as any)['CoreAudioBaseTypes']['AudioChannelCoordinateIndex'] = (globalThis as any)['CoreAudioBaseTypes']['AudioChannelCoordinateIndex'] || {};
(globalThis as any)['CoreAudioBaseTypes']['AudioChannelCoordinateIndex'] = {
  _LeftRight: 0,
  _BackFront: 1,
  _DownUp: 2,
  _Azimuth: 0,
  _Elevation: 1,
  _Distance: 2
};

(globalThis as any)['CoreAudioBaseTypes']['AudioChannelFlags'] = (globalThis as any)['CoreAudioBaseTypes']['AudioChannelFlags'] || {};
(globalThis as any)['CoreAudioBaseTypes']['AudioChannelFlags'] = {
  _AllOff: 0,
  _RectangularCoordinates: 1,
  _SphericalCoordinates: 2,
  _Meters: 4
};

(globalThis as any)['CoreAudioBaseTypes']['AudioTimeStampFlags'] = (globalThis as any)['CoreAudioBaseTypes']['AudioTimeStampFlags'] || {};
(globalThis as any)['CoreAudioBaseTypes']['AudioTimeStampFlags'] = {
  NothingValid: 0,
  SampleTimeValid: 1,
  HostTimeValid: 2,
  RateScalarValid: 4,
  WordClockTimeValid: 8,
  SMPTETimeValid: 16,
  SampleHostTimeValid: 3
};

(globalThis as any)['CoreAudioBaseTypes']['MPEG4ObjectID'] = (globalThis as any)['CoreAudioBaseTypes']['MPEG4ObjectID'] || {};
(globalThis as any)['CoreAudioBaseTypes']['MPEG4ObjectID'] = {
  t_AAC_Main: 1,
  t_AAC_LC: 2,
  t_AAC_SSR: 3,
  t_AAC_LTP: 4,
  t_AAC_SBR: 5,
  t_AAC_Scalable: 6,
  t_TwinVQ: 7,
  t_CELP: 8,
  t_HVXC: 9
};

(globalThis as any)['CoreAudioBaseTypes']['SMPTETimeFlags'] = (globalThis as any)['CoreAudioBaseTypes']['SMPTETimeFlags'] || {};
(globalThis as any)['CoreAudioBaseTypes']['SMPTETimeFlags'] = {
  Unknown: 0,
  Valid: 1,
  Running: 2
};

(globalThis as any)['CoreAudioBaseTypes']['SMPTETimeType'] = (globalThis as any)['CoreAudioBaseTypes']['SMPTETimeType'] || {};
(globalThis as any)['CoreAudioBaseTypes']['SMPTETimeType'] = {
  e24: 0,
  e25: 1,
  e30Drop: 2,
  e30: 3,
  e2997: 4,
  e2997Drop: 5,
  e60: 6,
  e5994: 7,
  e60Drop: 8,
  e5994Drop: 9,
  e50: 10,
  e2398: 11
};


(globalThis as any)['CoreWLANTypes'] = (globalThis as any)['CoreWLANTypes'] || {};
(globalThis as any)['CoreWLANTypes']['CWChannelBand'] = (globalThis as any)['CoreWLANTypes']['CWChannelBand'] || {};
(globalThis as any)['CoreWLANTypes']['CWChannelBand'] = {
  dUnknown: 0,
  d2GHz: 1,
  d5GHz: 2
};

(globalThis as any)['CoreWLANTypes']['CWChannelWidth'] = (globalThis as any)['CoreWLANTypes']['CWChannelWidth'] || {};
(globalThis as any)['CoreWLANTypes']['CWChannelWidth'] = {
  hUnknown: 0,
  h20MHz: 1,
  h40MHz: 2,
  h80MHz: 3,
  h160MHz: 4
};

(globalThis as any)['CoreWLANTypes']['CWCipherKeyFlags'] = (globalThis as any)['CoreWLANTypes']['CWCipherKeyFlags'] || {};
(globalThis as any)['CoreWLANTypes']['CWCipherKeyFlags'] = {
  None: 0,
  Unicast: 2,
  Multicast: 4,
  Tx: 8,
  Rx: 16
};

(globalThis as any)['CoreWLANTypes']['CWErr'] = (globalThis as any)['CoreWLANTypes']['CWErr'] || {};
(globalThis as any)['CoreWLANTypes']['CWErr'] = {
  NoErr: 0,
  EAPOLErr: 1,
  InvalidParameterErr: -3900,
  NoMemoryErr: -3901,
  UnknownErr: -3902,
  NotSupportedErr: -3903,
  InvalidFormatErr: -3904,
  TimeoutErr: -3905,
  UnspecifiedFailureErr: -3906,
  UnsupportedCapabilitiesErr: -3907,
  ReassociationDeniedErr: -3908,
  AssociationDeniedErr: -3909,
  AuthenticationAlgorithmUnsupportedErr: -3910,
  InvalidAuthenticationSequenceNumberErr: -3911,
  ChallengeFailureErr: -3912,
  APFullErr: -3913,
  UnsupportedRateSetErr: -3914,
  ShortSlotUnsupportedErr: -3915,
  DSSSOFDMUnsupportedErr: -3916,
  InvalidInformationElementErr: -3917,
  InvalidGroupCipherErr: -3918,
  InvalidPairwiseCipherErr: -3919,
  InvalidAKMPErr: -3920,
  UnsupportedRSNVersionErr: -3921,
  InvalidRSNCapabilitiesErr: -3922,
  CipherSuiteRejectedErr: -3923,
  InvalidPMKErr: -3924,
  SupplicantTimeoutErr: -3925,
  HTFeaturesNotSupportedErr: -3926,
  PCOTransitionTimeNotSupportedErr: -3927,
  ReferenceNotBoundErr: -3928,
  IPCFailureErr: -3929,
  OperationNotPermittedErr: -3930,
  Err: -3931
};

(globalThis as any)['CoreWLANTypes']['CWEventType'] = (globalThis as any)['CoreWLANTypes']['CWEventType'] || {};
(globalThis as any)['CoreWLANTypes']['CWEventType'] = {
  None: 0,
  PowerDidChange: 1,
  SSIDDidChange: 2,
  BSSIDDidChange: 3,
  CountryCodeDidChange: 4,
  LinkDidChange: 5,
  LinkQualityDidChange: 6,
  ModeDidChange: 7,
  ScanCacheUpdated: 8,
  VirtualInterfaceStateChanged: 9,
  RangingReportEvent: 10,
  Unknown: 9223372036854775807
};

(globalThis as any)['CoreWLANTypes']['CWIBSSModeSecurity'] = (globalThis as any)['CoreWLANTypes']['CWIBSSModeSecurity'] || {};
(globalThis as any)['CoreWLANTypes']['CWIBSSModeSecurity'] = {
  None: 0,
  WEP40: 1,
  WEP104: 2
};

(globalThis as any)['CoreWLANTypes']['CWInterfaceMode'] = (globalThis as any)['CoreWLANTypes']['CWInterfaceMode'] || {};
(globalThis as any)['CoreWLANTypes']['CWInterfaceMode'] = {
  None: 0,
  Station: 1,
  IBSS: 2,
  HostAP: 3
};

(globalThis as any)['CoreWLANTypes']['CWKeychainDomain'] = (globalThis as any)['CoreWLANTypes']['CWKeychainDomain'] || {};
(globalThis as any)['CoreWLANTypes']['CWKeychainDomain'] = {
  None: 0,
  User: 1,
  System: 2
};

(globalThis as any)['CoreWLANTypes']['CWPHYMode'] = (globalThis as any)['CoreWLANTypes']['CWPHYMode'] || {};
(globalThis as any)['CoreWLANTypes']['CWPHYMode'] = {
  eNone: 0,
  e11a: 1,
  e11b: 2,
  e11g: 3,
  e11n: 4,
  e11ac: 5
};

(globalThis as any)['CoreWLANTypes']['CWSecurity'] = (globalThis as any)['CoreWLANTypes']['CWSecurity'] || {};
(globalThis as any)['CoreWLANTypes']['CWSecurity'] = {
  None: 0,
  WEP: 1,
  WPAPersonal: 2,
  WPAPersonalMixed: 3,
  WPA2Personal: 4,
  Personal: 5,
  DynamicWEP: 6,
  WPAEnterprise: 7,
  WPAEnterpriseMixed: 8,
  WPA2Enterprise: 9,
  Enterprise: 10,
  WPA3Personal: 11,
  WPA3Enterprise: 12,
  WPA3Transition: 13,
  Unknown: 9223372036854775807
};


(globalThis as any)['Data'] = (globalThis as any)['Data'] || {};
(globalThis as any)['Data']['Base64DecodingOptions'] = (globalThis as any)['Data']['Base64DecodingOptions'] || {};
(globalThis as any)['Data']['Base64DecodingOptions'] = {
  NSDataBase64DecodingIgnoreUnknownCharacters: 1
};

(globalThis as any)['Data']['Base64EncodingOptions'] = (globalThis as any)['Data']['Base64EncodingOptions'] || {};
(globalThis as any)['Data']['Base64EncodingOptions'] = {
  ing64CharacterLineLength: 1,
  ing76CharacterLineLength: 2,
  ingEndLineWithCarriageReturn: 16,
  ingEndLineWithLineFeed: 32
};

(globalThis as any)['Data']['CompressionAlgorithm'] = (globalThis as any)['Data']['CompressionAlgorithm'] || {};
(globalThis as any)['Data']['CompressionAlgorithm'] = {
  LZFSE: 0,
  LZ4: 1,
  LZMA: 2,
  Zlib: 3
};

(globalThis as any)['Data']['ReadingOptions'] = (globalThis as any)['Data']['ReadingOptions'] || {};
(globalThis as any)['Data']['ReadingOptions'] = {
  DataReadingMappedIfSafe: 1,
  DataReadingUncached: 2,
  DataReadingMappedAlways: 8,
  DataReadingMapped: 1,
  MappedRead: 1,
  UncachedRead: 2
};

(globalThis as any)['Data']['SearchOptions'] = (globalThis as any)['Data']['SearchOptions'] || {};
(globalThis as any)['Data']['SearchOptions'] = {
  Backwards: 1,
  Anchored: 2
};

(globalThis as any)['Data']['WritingOptions'] = (globalThis as any)['Data']['WritingOptions'] || {};
(globalThis as any)['Data']['WritingOptions'] = {
  DataWritingAtomic: 1,
  DataWritingWithoutOverwriting: 2,
  DataWritingFileProtectionNone: 268435456,
  DataWritingFileProtectionComplete: 536870912,
  DataWritingFileProtectionCompleteUnlessOpen: 805306368,
  DataWritingFileProtectionCompleteUntilFirstUserAuthentication: 1073741824,
  DataWritingFileProtectionMask: 4026531840,
  AtomicWrite: 1
};


(globalThis as any)['DateComponentsFormatter'] = (globalThis as any)['DateComponentsFormatter'] || {};
(globalThis as any)['DateComponentsFormatter']['UnitsStyle'] = (globalThis as any)['DateComponentsFormatter']['UnitsStyle'] || {};
(globalThis as any)['DateComponentsFormatter']['UnitsStyle'] = {
  Positional: 0,
  Abbreviated: 1,
  Short: 2,
  Full: 3,
  SpellOut: 4,
  Brief: 5
};

(globalThis as any)['DateComponentsFormatter']['ZeroFormattingBehavior'] = (globalThis as any)['DateComponentsFormatter']['ZeroFormattingBehavior'] || {};
(globalThis as any)['DateComponentsFormatter']['ZeroFormattingBehavior'] = {
  None: 0,
  Default: 1,
  DropLeading: 2,
  DropMiddle: 4,
  DropTrailing: 8,
  DropAll: 14,
  Pad: 65536
};


(globalThis as any)['DateFormatter'] = (globalThis as any)['DateFormatter'] || {};
(globalThis as any)['DateFormatter']['Behavior'] = (globalThis as any)['DateFormatter']['Behavior'] || {};
(globalThis as any)['DateFormatter']['Behavior'] = {
  rDefault: 0,
  r10_0: 1000,
  r10_4: 1040
};

(globalThis as any)['DateFormatter']['Style'] = (globalThis as any)['DateFormatter']['Style'] || {};
(globalThis as any)['DateFormatter']['Style'] = {
  NoStyle: 0,
  ShortStyle: 1,
  MediumStyle: 2,
  LongStyle: 3,
  FullStyle: 4
};


(globalThis as any)['DateIntervalFormatter'] = (globalThis as any)['DateIntervalFormatter'] || {};
(globalThis as any)['DateIntervalFormatter']['Style'] = (globalThis as any)['DateIntervalFormatter']['Style'] || {};
(globalThis as any)['DateIntervalFormatter']['Style'] = {
  NoStyle: 0,
  ShortStyle: 1,
  MediumStyle: 2,
  LongStyle: 3,
  FullStyle: 4
};


(globalThis as any)['DistributedNotificationCenter'] = (globalThis as any)['DistributedNotificationCenter'] || {};
(globalThis as any)['DistributedNotificationCenter']['Options'] = (globalThis as any)['DistributedNotificationCenter']['Options'] || {};
(globalThis as any)['DistributedNotificationCenter']['Options'] = {
  DeliverImmediately: 1,
  PostToAllSessions: 2
};

(globalThis as any)['DistributedNotificationCenter']['SuspensionBehavior'] = (globalThis as any)['DistributedNotificationCenter']['SuspensionBehavior'] || {};
(globalThis as any)['DistributedNotificationCenter']['SuspensionBehavior'] = {
  Drop: 1,
  Coalesce: 2,
  Hold: 3,
  DeliverImmediately: 4
};


(globalThis as any)['EnergyFormatter'] = (globalThis as any)['EnergyFormatter'] || {};
(globalThis as any)['EnergyFormatter']['Unit'] = (globalThis as any)['EnergyFormatter']['Unit'] || {};
(globalThis as any)['EnergyFormatter']['Unit'] = {
  Joule: 11,
  Kilojoule: 14,
  Calorie: 1793,
  Kilocalorie: 1794
};


(globalThis as any)['FileManager'] = (globalThis as any)['FileManager'] || {};
(globalThis as any)['FileManager']['DirectoryEnumerationOptions'] = (globalThis as any)['FileManager']['DirectoryEnumerationOptions'] || {};
(globalThis as any)['FileManager']['DirectoryEnumerationOptions'] = {
  SkipsSubdirectoryDescendants: 1,
  SkipsPackageDescendants: 2,
  SkipsHiddenFiles: 4,
  IncludesDirectoriesPostOrder: 8,
  ProducesRelativePathURLs: 16
};

(globalThis as any)['FileManager']['ItemReplacementOptions'] = (globalThis as any)['FileManager']['ItemReplacementOptions'] || {};
(globalThis as any)['FileManager']['ItemReplacementOptions'] = {
  UsingNewMetadataOnly: 1,
  WithoutDeletingBackupItem: 2
};

(globalThis as any)['FileManager']['SearchPathDirectory'] = (globalThis as any)['FileManager']['SearchPathDirectory'] || {};
(globalThis as any)['FileManager']['SearchPathDirectory'] = {
  ApplicationDirectory: 1,
  DemoApplicationDirectory: 2,
  DeveloperApplicationDirectory: 3,
  AdminApplicationDirectory: 4,
  LibraryDirectory: 5,
  DeveloperDirectory: 6,
  UserDirectory: 7,
  DocumentationDirectory: 8,
  DocumentDirectory: 9,
  CoreServiceDirectory: 10,
  AutosavedInformationDirectory: 11,
  DesktopDirectory: 12,
  CachesDirectory: 13,
  ApplicationSupportDirectory: 14,
  DownloadsDirectory: 15,
  InputMethodsDirectory: 16,
  MoviesDirectory: 17,
  MusicDirectory: 18,
  PicturesDirectory: 19,
  PrinterDescriptionDirectory: 20,
  SharedPublicDirectory: 21,
  PreferencePanesDirectory: 22,
  ApplicationScriptsDirectory: 23,
  ItemReplacementDirectory: 99,
  AllApplicationsDirectory: 100,
  AllLibrariesDirectory: 101,
  TrashDirectory: 102
};

(globalThis as any)['FileManager']['SearchPathDomainMask'] = (globalThis as any)['FileManager']['SearchPathDomainMask'] || {};
(globalThis as any)['FileManager']['SearchPathDomainMask'] = {
  UserDomainMask: 1,
  LocalDomainMask: 2,
  NetworkDomainMask: 4,
  SystemDomainMask: 8,
  AllDomainsMask: 65535
};

(globalThis as any)['FileManager']['URLRelationship'] = (globalThis as any)['FileManager']['URLRelationship'] || {};
(globalThis as any)['FileManager']['URLRelationship'] = {
  Contains: 0,
  Same: 1,
  Other: 2
};

(globalThis as any)['FileManager']['UnmountOptions'] = (globalThis as any)['FileManager']['UnmountOptions'] || {};
(globalThis as any)['FileManager']['UnmountOptions'] = {
  AllPartitionsAndEjectDisk: 1,
  WithoutUI: 2
};

(globalThis as any)['FileManager']['VolumeEnumerationOptions'] = (globalThis as any)['FileManager']['VolumeEnumerationOptions'] || {};
(globalThis as any)['FileManager']['VolumeEnumerationOptions'] = {
  SkipHiddenVolumes: 2,
  ProduceFileReferenceURLs: 4
};


(globalThis as any)['FileWrapper'] = (globalThis as any)['FileWrapper'] || {};
(globalThis as any)['FileWrapper']['ReadingOptions'] = (globalThis as any)['FileWrapper']['ReadingOptions'] || {};
(globalThis as any)['FileWrapper']['ReadingOptions'] = {
  Immediate: 1,
  WithoutMapping: 2
};

(globalThis as any)['FileWrapper']['WritingOptions'] = (globalThis as any)['FileWrapper']['WritingOptions'] || {};
(globalThis as any)['FileWrapper']['WritingOptions'] = {
  Atomic: 1,
  WithNameUpdating: 2
};


(globalThis as any)['Formatter'] = (globalThis as any)['Formatter'] || {};
(globalThis as any)['Formatter']['Context'] = (globalThis as any)['Formatter']['Context'] || {};
(globalThis as any)['Formatter']['Context'] = {
  Unknown: 0,
  Dynamic: 1,
  Standalone: 2,
  ListItem: 3,
  BeginningOfSentence: 4,
  MiddleOfSentence: 5
};

(globalThis as any)['Formatter']['UnitStyle'] = (globalThis as any)['Formatter']['UnitStyle'] || {};
(globalThis as any)['Formatter']['UnitStyle'] = {
  Short: 1,
  Medium: 2,
  Long: 3
};


(globalThis as any)['HTTPCookieStorage'] = (globalThis as any)['HTTPCookieStorage'] || {};
(globalThis as any)['HTTPCookieStorage']['HTTPCookie'] = (globalThis as any)['HTTPCookieStorage']['HTTPCookie'] || {};
(globalThis as any)['HTTPCookieStorage']['HTTPCookie']['AcceptPolicy'] = (globalThis as any)['HTTPCookieStorage']['HTTPCookie']['AcceptPolicy'] || {};
(globalThis as any)['HTTPCookieStorage']['HTTPCookie']['AcceptPolicy'] = {
  Always: 0,
  Never: 1,
  OnlyFromMainDocumentDomain: 2
};


(globalThis as any)['IKCameraDeviceView'] = (globalThis as any)['IKCameraDeviceView'] || {};
(globalThis as any)['IKCameraDeviceView']['IKCameraDeviceViewDisplayMode'] = (globalThis as any)['IKCameraDeviceView']['IKCameraDeviceViewDisplayMode'] || {};
(globalThis as any)['IKCameraDeviceView']['IKCameraDeviceViewDisplayMode'] = {
  None: -1,
  Table: 0,
  Icon: 1
};

(globalThis as any)['IKCameraDeviceView']['IKCameraDeviceViewTransferMode'] = (globalThis as any)['IKCameraDeviceView']['IKCameraDeviceViewTransferMode'] || {};
(globalThis as any)['IKCameraDeviceView']['IKCameraDeviceViewTransferMode'] = {
  FileBased: 0,
  MemoryBased: 1
};


(globalThis as any)['IKDeviceBrowserView'] = (globalThis as any)['IKDeviceBrowserView'] || {};
(globalThis as any)['IKDeviceBrowserView']['IKDeviceBrowserViewDisplayMode'] = (globalThis as any)['IKDeviceBrowserView']['IKDeviceBrowserViewDisplayMode'] || {};
(globalThis as any)['IKDeviceBrowserView']['IKDeviceBrowserViewDisplayMode'] = {
  Table: 0,
  Outline: 1,
  Icon: 2
};


(globalThis as any)['IKFilterBrowserPanel'] = (globalThis as any)['IKFilterBrowserPanel'] || {};

(globalThis as any)['IKFilterBrowserView'] = (globalThis as any)['IKFilterBrowserView'] || {};

(globalThis as any)['IKFilterUIView'] = (globalThis as any)['IKFilterUIView'] || {};

(globalThis as any)['IKImageBrowserCell'] = (globalThis as any)['IKImageBrowserCell'] || {};
(globalThis as any)['IKImageBrowserCell']['IKImageBrowserCellState'] = (globalThis as any)['IKImageBrowserCell']['IKImageBrowserCellState'] || {};
(globalThis as any)['IKImageBrowserCell']['IKImageBrowserCellState'] = {
  NoImage: 0,
  Invalid: 1,
  Ready: 2
};


(globalThis as any)['IKImageBrowserView'] = (globalThis as any)['IKImageBrowserView'] || {};
(globalThis as any)['IKImageBrowserView']['IKImageBrowserDropOperation'] = (globalThis as any)['IKImageBrowserView']['IKImageBrowserDropOperation'] || {};
(globalThis as any)['IKImageBrowserView']['IKImageBrowserDropOperation'] = {
  On: 0,
  Before: 1
};


(globalThis as any)['IKImageEditPanel'] = (globalThis as any)['IKImageEditPanel'] || {};

(globalThis as any)['IKImageView'] = (globalThis as any)['IKImageView'] || {};

(globalThis as any)['IKPictureTaker'] = (globalThis as any)['IKPictureTaker'] || {};

(globalThis as any)['IKSaveOptions'] = (globalThis as any)['IKSaveOptions'] || {};

(globalThis as any)['IKScannerDeviceView'] = (globalThis as any)['IKScannerDeviceView'] || {};
(globalThis as any)['IKScannerDeviceView']['IKScannerDeviceViewDisplayMode'] = (globalThis as any)['IKScannerDeviceView']['IKScannerDeviceViewDisplayMode'] || {};
(globalThis as any)['IKScannerDeviceView']['IKScannerDeviceViewDisplayMode'] = {
  None: -1,
  Simple: 0,
  Advanced: 1
};

(globalThis as any)['IKScannerDeviceView']['IKScannerDeviceViewTransferMode'] = (globalThis as any)['IKScannerDeviceView']['IKScannerDeviceViewTransferMode'] || {};
(globalThis as any)['IKScannerDeviceView']['IKScannerDeviceViewTransferMode'] = {
  FileBased: 0,
  MemoryBased: 1
};


(globalThis as any)['IKSlideshow'] = (globalThis as any)['IKSlideshow'] || {};

(globalThis as any)['ISO8601DateFormatter'] = (globalThis as any)['ISO8601DateFormatter'] || {};
(globalThis as any)['ISO8601DateFormatter']['Options'] = (globalThis as any)['ISO8601DateFormatter']['Options'] || {};
(globalThis as any)['ISO8601DateFormatter']['Options'] = {
  WithYear: 1,
  WithMonth: 2,
  WithWeekOfYear: 4,
  WithDay: 16,
  WithTime: 32,
  WithTimeZone: 64,
  WithSpaceBetweenDateAndTime: 128,
  WithDashSeparatorInDate: 256,
  WithColonSeparatorInTime: 512,
  WithColonSeparatorInTimeZone: 1024,
  WithFractionalSeconds: 2048,
  WithFullDate: 275,
  WithFullTime: 1632,
  WithInternetDateTime: 1907
};


(globalThis as any)['JSONSerialization'] = (globalThis as any)['JSONSerialization'] || {};
(globalThis as any)['JSONSerialization']['ReadingOptions'] = (globalThis as any)['JSONSerialization']['ReadingOptions'] || {};
(globalThis as any)['JSONSerialization']['ReadingOptions'] = {
  MutableContainers: 1,
  MutableLeaves: 2,
  FragmentsAllowed: 4,
  AllowFragments: 4
};

(globalThis as any)['JSONSerialization']['WritingOptions'] = (globalThis as any)['JSONSerialization']['WritingOptions'] || {};
(globalThis as any)['JSONSerialization']['WritingOptions'] = {
  PrettyPrinted: 1,
  SortedKeys: 2,
  FragmentsAllowed: 4,
  WithoutEscapingSlashes: 8
};


(globalThis as any)['LSInfo'] = (globalThis as any)['LSInfo'] || {};
(globalThis as any)['LSInfo']['LSAcceptanceFlags'] = (globalThis as any)['LSInfo']['LSAcceptanceFlags'] || {};
(globalThis as any)['LSInfo']['LSAcceptanceFlags'] = {
  Default: 1,
  AllowLoginUI: 2
};

(globalThis as any)['LSInfo']['LSRolesMask'] = (globalThis as any)['LSInfo']['LSRolesMask'] || {};
(globalThis as any)['LSInfo']['LSRolesMask'] = {
  None: 1,
  Viewer: 2,
  Editor: 4,
  Shell: 8,
  All: 4294967295
};


(globalThis as any)['LSInfoDeprecated'] = (globalThis as any)['LSInfoDeprecated'] || {};
(globalThis as any)['LSInfoDeprecated']['LSHandlerOptions'] = (globalThis as any)['LSInfoDeprecated']['LSHandlerOptions'] || {};
(globalThis as any)['LSInfoDeprecated']['LSHandlerOptions'] = {
  Default: 0,
  IgnoreCreator: 1
};

(globalThis as any)['LSInfoDeprecated']['LSItemInfoFlags'] = (globalThis as any)['LSInfoDeprecated']['LSItemInfoFlags'] || {};
(globalThis as any)['LSInfoDeprecated']['LSItemInfoFlags'] = {
  IsPlainFile: 1,
  IsPackage: 2,
  IsApplication: 4,
  IsContainer: 8,
  IsAliasFile: 16,
  IsSymlink: 32,
  IsInvisible: 64,
  IsNativeApp: 128,
  IsClassicApp: 256,
  AppPrefersNative: 512,
  AppPrefersClassic: 1024,
  AppIsScriptable: 2048,
  IsVolume: 4096,
  ExtensionIsHidden: 1048576
};

(globalThis as any)['LSInfoDeprecated']['LSRequestedInfo'] = (globalThis as any)['LSInfoDeprecated']['LSRequestedInfo'] || {};
(globalThis as any)['LSInfoDeprecated']['LSRequestedInfo'] = {
  Extension: 1,
  TypeCreator: 2,
  BasicFlagsOnly: 4,
  AppTypeFlags: 8,
  AllFlags: 16,
  IconAndKind: 32,
  ExtensionFlagsOnly: 64,
  AllInfo: 4294967295
};


(globalThis as any)['LSOpen'] = (globalThis as any)['LSOpen'] || {};
(globalThis as any)['LSOpen']['LSLaunchFlags'] = (globalThis as any)['LSOpen']['LSLaunchFlags'] || {};
(globalThis as any)['LSOpen']['LSLaunchFlags'] = {
  Defaults: 1,
  AndPrint: 2,
  AndDisplayErrors: 64,
  DontAddToRecents: 256,
  DontSwitch: 512,
  Async: 65536,
  NewInstance: 524288,
  AndHide: 1048576,
  AndHideOthers: 2097152
};


(globalThis as any)['LengthFormatter'] = (globalThis as any)['LengthFormatter'] || {};
(globalThis as any)['LengthFormatter']['Unit'] = (globalThis as any)['LengthFormatter']['Unit'] || {};
(globalThis as any)['LengthFormatter']['Unit'] = {
  Millimeter: 8,
  Centimeter: 9,
  Meter: 11,
  Kilometer: 14,
  Inch: 1281,
  Foot: 1282,
  Yard: 1283,
  Mile: 1284
};


(globalThis as any)['Locale'] = (globalThis as any)['Locale'] || {};
(globalThis as any)['Locale']['LanguageDirection'] = (globalThis as any)['Locale']['LanguageDirection'] || {};
(globalThis as any)['Locale']['LanguageDirection'] = {
  Unknown: 0,
  LeftToRight: 1,
  RightToLeft: 2,
  TopToBottom: 3,
  BottomToTop: 4
};


(globalThis as any)['MDLabel'] = (globalThis as any)['MDLabel'] || {};
(globalThis as any)['MDLabel']['MDLabelDomain'] = (globalThis as any)['MDLabel']['MDLabelDomain'] || {};
(globalThis as any)['MDLabel']['MDLabelDomain'] = {
  UserDomain: 0,
  LocalDomain: 1
};


(globalThis as any)['MDQuery'] = (globalThis as any)['MDQuery'] || {};
(globalThis as any)['MDQuery']['MDQueryOptionFlags'] = (globalThis as any)['MDQuery']['MDQueryOptionFlags'] || {};
(globalThis as any)['MDQuery']['MDQueryOptionFlags'] = {
  Synchronous: 1,
  WantsUpdates: 4,
  AllowFSTranslation: 8
};

(globalThis as any)['MDQuery']['MDQuerySortOptionFlags'] = (globalThis as any)['MDQuery']['MDQuerySortOptionFlags'] || {};
(globalThis as any)['MDQuery']['MDQuerySortOptionFlags'] = {
  kMDQueryReverseSortOrderFlag: 1
};


(globalThis as any)['MIDIServices'] = (globalThis as any)['MIDIServices'] || {};
(globalThis as any)['MIDIServices']['MIDINotificationMessageID'] = (globalThis as any)['MIDIServices']['MIDINotificationMessageID'] || {};
(globalThis as any)['MIDIServices']['MIDINotificationMessageID'] = {
  SetupChanged: 1,
  ObjectAdded: 2,
  ObjectRemoved: 3,
  PropertyChanged: 4,
  ThruConnectionsChanged: 5,
  SerialPortOwnerChanged: 6,
  IOError: 7
};

(globalThis as any)['MIDIServices']['MIDIObjectType'] = (globalThis as any)['MIDIServices']['MIDIObjectType'] || {};
(globalThis as any)['MIDIServices']['MIDIObjectType'] = {
  _Other: -1,
  _Device: 0,
  _Entity: 1,
  _Source: 2,
  _Destination: 3,
  _ExternalDevice: 16,
  _ExternalEntity: 17,
  _ExternalSource: 18,
  _ExternalDestination: 19
};


(globalThis as any)['MIDIThruConnection'] = (globalThis as any)['MIDIThruConnection'] || {};
(globalThis as any)['MIDIThruConnection']['MIDITransformControlType'] = (globalThis as any)['MIDIThruConnection']['MIDITransformControlType'] || {};
(globalThis as any)['MIDIThruConnection']['MIDITransformControlType'] = {
  e_7Bit: 0,
  e_14Bit: 1,
  e_7BitRPN: 2,
  e_14BitRPN: 3,
  e_7BitNRPN: 4,
  e_14BitNRPN: 5
};

(globalThis as any)['MIDIThruConnection']['MIDITransformType'] = (globalThis as any)['MIDIThruConnection']['MIDITransformType'] || {};
(globalThis as any)['MIDIThruConnection']['MIDITransformType'] = {
  _None: 0,
  _FilterOut: 1,
  _MapControl: 2,
  _Add: 8,
  _Scale: 9,
  _MinValue: 10,
  _MaxValue: 11,
  _MapValue: 12
};


(globalThis as any)['MLArrayBatchProvider'] = (globalThis as any)['MLArrayBatchProvider'] || {};

(globalThis as any)['MLDictionaryConstraint'] = (globalThis as any)['MLDictionaryConstraint'] || {};

(globalThis as any)['MLDictionaryFeatureProvider'] = (globalThis as any)['MLDictionaryFeatureProvider'] || {};

(globalThis as any)['MLFeatureDescription'] = (globalThis as any)['MLFeatureDescription'] || {};

(globalThis as any)['MLFeatureType'] = (globalThis as any)['MLFeatureType'] || {};
(globalThis as any)['MLFeatureType']['MLFeatureType'] = (globalThis as any)['MLFeatureType']['MLFeatureType'] || {};
(globalThis as any)['MLFeatureType']['MLFeatureType'] = {
  Invalid: 0,
  Int64: 1,
  Double: 2,
  String: 3,
  Image: 4,
  MultiArray: 5,
  Dictionary: 6,
  Sequence: 7
};


(globalThis as any)['MLFeatureValue'] = (globalThis as any)['MLFeatureValue'] || {};

(globalThis as any)['MLImageConstraint'] = (globalThis as any)['MLImageConstraint'] || {};

(globalThis as any)['MLImageSize'] = (globalThis as any)['MLImageSize'] || {};

(globalThis as any)['MLImageSizeConstraint'] = (globalThis as any)['MLImageSizeConstraint'] || {};

(globalThis as any)['MLImageSizeConstraintType'] = (globalThis as any)['MLImageSizeConstraintType'] || {};
(globalThis as any)['MLImageSizeConstraintType']['MLImageSizeConstraintType'] = (globalThis as any)['MLImageSizeConstraintType']['MLImageSizeConstraintType'] || {};
(globalThis as any)['MLImageSizeConstraintType']['MLImageSizeConstraintType'] = {
  Unspecified: 0,
  Enumerated: 2,
  Range: 3
};


(globalThis as any)['MLKey'] = (globalThis as any)['MLKey'] || {};

(globalThis as any)['MLMetricKey'] = (globalThis as any)['MLMetricKey'] || {};

(globalThis as any)['MLModel'] = (globalThis as any)['MLModel'] || {};

(globalThis as any)['MLModelConfiguration'] = (globalThis as any)['MLModelConfiguration'] || {};
(globalThis as any)['MLModelConfiguration']['MLComputeUnits'] = (globalThis as any)['MLModelConfiguration']['MLComputeUnits'] || {};
(globalThis as any)['MLModelConfiguration']['MLComputeUnits'] = {
  CPUOnly: 0,
  CPUAndGPU: 1,
  All: 2
};


(globalThis as any)['MLModelDescription'] = (globalThis as any)['MLModelDescription'] || {};

(globalThis as any)['MLModelError'] = (globalThis as any)['MLModelError'] || {};
(globalThis as any)['MLModelError']['MLModelError'] = (globalThis as any)['MLModelError']['MLModelError'] || {};
(globalThis as any)['MLModelError']['MLModelError'] = {
  Generic: 0,
  FeatureType: 1,
  IO: 3,
  CustomLayer: 4,
  CustomModel: 5,
  Update: 6,
  Parameters: 7
};


(globalThis as any)['MLMultiArray'] = (globalThis as any)['MLMultiArray'] || {};
(globalThis as any)['MLMultiArray']['MLMultiArrayDataType'] = (globalThis as any)['MLMultiArray']['MLMultiArrayDataType'] || {};
(globalThis as any)['MLMultiArray']['MLMultiArrayDataType'] = {
  Double: 65600,
  Float32: 65568,
  Int32: 131104
};


(globalThis as any)['MLMultiArrayConstraint'] = (globalThis as any)['MLMultiArrayConstraint'] || {};

(globalThis as any)['MLMultiArrayShapeConstraint'] = (globalThis as any)['MLMultiArrayShapeConstraint'] || {};

(globalThis as any)['MLMultiArrayShapeConstraintType'] = (globalThis as any)['MLMultiArrayShapeConstraintType'] || {};
(globalThis as any)['MLMultiArrayShapeConstraintType']['MLMultiArrayShapeConstraintType'] = (globalThis as any)['MLMultiArrayShapeConstraintType']['MLMultiArrayShapeConstraintType'] || {};
(globalThis as any)['MLMultiArrayShapeConstraintType']['MLMultiArrayShapeConstraintType'] = {
  Unspecified: 1,
  Enumerated: 2,
  Range: 3
};


(globalThis as any)['MLNumericConstraint'] = (globalThis as any)['MLNumericConstraint'] || {};

(globalThis as any)['MLParameterDescription'] = (globalThis as any)['MLParameterDescription'] || {};

(globalThis as any)['MLParameterKey'] = (globalThis as any)['MLParameterKey'] || {};

(globalThis as any)['MLPredictionOptions'] = (globalThis as any)['MLPredictionOptions'] || {};

(globalThis as any)['MLSequence'] = (globalThis as any)['MLSequence'] || {};

(globalThis as any)['MLSequenceConstraint'] = (globalThis as any)['MLSequenceConstraint'] || {};

(globalThis as any)['MLTask'] = (globalThis as any)['MLTask'] || {};
(globalThis as any)['MLTask']['MLTaskState'] = (globalThis as any)['MLTask']['MLTaskState'] || {};
(globalThis as any)['MLTask']['MLTaskState'] = {
  Suspended: 1,
  Running: 2,
  Cancelling: 3,
  Completed: 4,
  Failed: 5
};


(globalThis as any)['MLUpdateContext'] = (globalThis as any)['MLUpdateContext'] || {};

(globalThis as any)['MLUpdateProgressEvent'] = (globalThis as any)['MLUpdateProgressEvent'] || {};
(globalThis as any)['MLUpdateProgressEvent']['MLUpdateProgressEvent'] = (globalThis as any)['MLUpdateProgressEvent']['MLUpdateProgressEvent'] || {};
(globalThis as any)['MLUpdateProgressEvent']['MLUpdateProgressEvent'] = {
  TrainingBegin: 1,
  EpochEnd: 2,
  MiniBatchEnd: 4
};


(globalThis as any)['MLUpdateTask'] = (globalThis as any)['MLUpdateTask'] || {};

(globalThis as any)['MassFormatter'] = (globalThis as any)['MassFormatter'] || {};
(globalThis as any)['MassFormatter']['Unit'] = (globalThis as any)['MassFormatter']['Unit'] || {};
(globalThis as any)['MassFormatter']['Unit'] = {
  Gram: 11,
  Kilogram: 14,
  Ounce: 1537,
  Pound: 1538,
  Stone: 1539
};


(globalThis as any)['MeasurementFormatter'] = (globalThis as any)['MeasurementFormatter'] || {};
(globalThis as any)['MeasurementFormatter']['UnitOptions'] = (globalThis as any)['MeasurementFormatter']['UnitOptions'] || {};
(globalThis as any)['MeasurementFormatter']['UnitOptions'] = {
  ProvidedUnit: 1,
  NaturalScale: 2,
  TemperatureWithoutUnit: 4
};


(globalThis as any)['NSATSTypesetter'] = (globalThis as any)['NSATSTypesetter'] || {};

(globalThis as any)['NSAccessibility'] = (globalThis as any)['NSAccessibility'] || {};
(globalThis as any)['NSAccessibility']['AnnotationPosition'] = (globalThis as any)['NSAccessibility']['AnnotationPosition'] || {};
(globalThis as any)['NSAccessibility']['AnnotationPosition'] = {
  FullRange: 0,
  Start: 1,
  End: 2
};

(globalThis as any)['NSAccessibility']['Orientation'] = (globalThis as any)['NSAccessibility']['Orientation'] || {};
(globalThis as any)['NSAccessibility']['Orientation'] = {
  Unknown: 0,
  Vertical: 1,
  Horizontal: 2
};

(globalThis as any)['NSAccessibility']['RulerMarkerType'] = (globalThis as any)['NSAccessibility']['RulerMarkerType'] || {};
(globalThis as any)['NSAccessibility']['RulerMarkerType'] = {
  Unknown: 0,
  TabStopLeft: 1,
  TabStopRight: 2,
  TabStopCenter: 3,
  TabStopDecimal: 4,
  IndentHead: 5,
  IndentTail: 6,
  IndentFirstLine: 7
};

(globalThis as any)['NSAccessibility']['SortDirection'] = (globalThis as any)['NSAccessibility']['SortDirection'] || {};
(globalThis as any)['NSAccessibility']['SortDirection'] = {
  Unknown: 0,
  Ascending: 1,
  Descending: 2
};

(globalThis as any)['NSAccessibility']['Units'] = (globalThis as any)['NSAccessibility']['Units'] || {};
(globalThis as any)['NSAccessibility']['Units'] = {
  Unknown: 0,
  Inches: 1,
  Centimeters: 2,
  Points: 3,
  Picas: 4
};


(globalThis as any)['NSAccessibilityConstants'] = (globalThis as any)['NSAccessibilityConstants'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['AnnotationPosition'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['AnnotationPosition'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['AnnotationPosition'] = {
  FullRange: 0,
  Start: 1,
  End: 2
};

(globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['Orientation'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['Orientation'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['Orientation'] = {
  Unknown: 0,
  Vertical: 1,
  Horizontal: 2
};

(globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['RulerMarkerType'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['RulerMarkerType'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['RulerMarkerType'] = {
  Unknown: 0,
  TabStopLeft: 1,
  TabStopRight: 2,
  TabStopCenter: 3,
  TabStopDecimal: 4,
  IndentHead: 5,
  IndentTail: 6,
  IndentFirstLine: 7
};

(globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['SortDirection'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['SortDirection'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['SortDirection'] = {
  Unknown: 0,
  Ascending: 1,
  Descending: 2
};

(globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['Units'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['Units'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibility']['Units'] = {
  Unknown: 0,
  Inches: 1,
  Centimeters: 2,
  Points: 3,
  Picas: 4
};

(globalThis as any)['NSAccessibilityConstants']['NSAccessibilityPriorityLevel'] = (globalThis as any)['NSAccessibilityConstants']['NSAccessibilityPriorityLevel'] || {};
(globalThis as any)['NSAccessibilityConstants']['NSAccessibilityPriorityLevel'] = {
  Low: 10,
  Medium: 50,
  High: 90
};


(globalThis as any)['NSAccessibilityCustomAction'] = (globalThis as any)['NSAccessibilityCustomAction'] || {};

(globalThis as any)['NSAccessibilityCustomRotor'] = (globalThis as any)['NSAccessibilityCustomRotor'] || {};
(globalThis as any)['NSAccessibilityCustomRotor']['RotorType'] = (globalThis as any)['NSAccessibilityCustomRotor']['RotorType'] || {};
(globalThis as any)['NSAccessibilityCustomRotor']['RotorType'] = {
  Custom: 0,
  Any: 1,
  Annotation: 2,
  BoldText: 3,
  Heading: 4,
  HeadingLevel1: 5,
  HeadingLevel2: 6,
  HeadingLevel3: 7,
  HeadingLevel4: 8,
  HeadingLevel5: 9,
  HeadingLevel6: 10,
  Image: 11,
  ItalicText: 12,
  Landmark: 13,
  Link: 14,
  List: 15,
  MisspelledWord: 16,
  Table: 17,
  TextField: 18,
  UnderlinedText: 19,
  VisitedLink: 20
};

(globalThis as any)['NSAccessibilityCustomRotor']['SearchDirection'] = (globalThis as any)['NSAccessibilityCustomRotor']['SearchDirection'] || {};
(globalThis as any)['NSAccessibilityCustomRotor']['SearchDirection'] = {
  Previous: 0,
  Next: 1
};


(globalThis as any)['NSAccessibilityElement'] = (globalThis as any)['NSAccessibilityElement'] || {};

(globalThis as any)['AffineTransform'] = (globalThis as any)['AffineTransform'] || {};

(globalThis as any)['NSAlert'] = (globalThis as any)['NSAlert'] || {};
(globalThis as any)['NSAlert']['Style'] = (globalThis as any)['NSAlert']['Style'] || {};
(globalThis as any)['NSAlert']['Style'] = {
  Warning: 0,
  Informational: 1,
  Critical: 2
};


(globalThis as any)['NSAlignmentFeedbackFilter'] = (globalThis as any)['NSAlignmentFeedbackFilter'] || {};

(globalThis as any)['NSAnimation'] = (globalThis as any)['NSAnimation'] || {};
(globalThis as any)['NSAnimation']['BlockingMode'] = (globalThis as any)['NSAnimation']['BlockingMode'] || {};
(globalThis as any)['NSAnimation']['BlockingMode'] = {
  Blocking: 0,
  Nonblocking: 1,
  NonblockingThreaded: 2
};

(globalThis as any)['NSAnimation']['Curve'] = (globalThis as any)['NSAnimation']['Curve'] || {};
(globalThis as any)['NSAnimation']['Curve'] = {
  EaseInOut: 0,
  EaseIn: 1,
  EaseOut: 2,
  Linear: 3
};


(globalThis as any)['NSAnimationContext'] = (globalThis as any)['NSAnimationContext'] || {};

(globalThis as any)['NSAppearance'] = (globalThis as any)['NSAppearance'] || {};

(globalThis as any)['NSAppleEventDescriptor'] = (globalThis as any)['NSAppleEventDescriptor'] || {};
(globalThis as any)['NSAppleEventDescriptor']['SendOptions'] = (globalThis as any)['NSAppleEventDescriptor']['SendOptions'] || {};
(globalThis as any)['NSAppleEventDescriptor']['SendOptions'] = {
  NoReply: 1,
  QueueReply: 2,
  WaitForReply: 3,
  NeverInteract: 16,
  CanInteract: 32,
  AlwaysInteract: 48,
  CanSwitchLayer: 64,
  DontRecord: 4096,
  DontExecute: 8192,
  DontAnnotate: 65536,
  DefaultOptions: 35
};


(globalThis as any)['NSAppleEventManager'] = (globalThis as any)['NSAppleEventManager'] || {};

(globalThis as any)['NSAppleScript'] = (globalThis as any)['NSAppleScript'] || {};

(globalThis as any)['NSApplication'] = (globalThis as any)['NSApplication'] || {};
(globalThis as any)['NSApplication']['ActivationOptions'] = (globalThis as any)['NSApplication']['ActivationOptions'] || {};
(globalThis as any)['NSApplication']['ActivationOptions'] = {
  AllWindows: 1,
  IgnoringOtherApps: 2
};

(globalThis as any)['NSApplication']['ActivationPolicy'] = (globalThis as any)['NSApplication']['ActivationPolicy'] || {};
(globalThis as any)['NSApplication']['ActivationPolicy'] = {
  Regular: 0,
  Accessory: 1,
  Prohibited: 2
};

(globalThis as any)['NSApplication']['DelegateReply'] = (globalThis as any)['NSApplication']['DelegateReply'] || {};
(globalThis as any)['NSApplication']['DelegateReply'] = {
  Success: 0,
  Cancel: 1,
  Failure: 2
};

(globalThis as any)['NSApplication']['OcclusionState'] = (globalThis as any)['NSApplication']['OcclusionState'] || {};
(globalThis as any)['NSApplication']['OcclusionState'] = {
  NSApplicationOcclusionStateVisible: 2
};

(globalThis as any)['NSApplication']['PresentationOptions'] = (globalThis as any)['NSApplication']['PresentationOptions'] || {};
(globalThis as any)['NSApplication']['PresentationOptions'] = {
  Default: 0,
  AutoHideDock: 1,
  HideDock: 2,
  AutoHideMenuBar: 4,
  HideMenuBar: 8,
  DisableAppleMenu: 16,
  DisableProcessSwitching: 32,
  DisableForceQuit: 64,
  DisableSessionTermination: 128,
  DisableHideApplication: 256,
  DisableMenuBarTransparency: 512,
  FullScreen: 1024,
  AutoHideToolbar: 2048,
  DisableCursorLocationAssistance: 4096
};

(globalThis as any)['NSApplication']['PrintReply'] = (globalThis as any)['NSApplication']['PrintReply'] || {};
(globalThis as any)['NSApplication']['PrintReply'] = {
  Cancelled: 0,
  Success: 1,
  Failure: 3,
  ReplyLater: 2
};

(globalThis as any)['NSApplication']['RemoteNotificationType'] = (globalThis as any)['NSApplication']['RemoteNotificationType'] || {};
(globalThis as any)['NSApplication']['RemoteNotificationType'] = {
  None: 0,
  Badge: 1,
  Sound: 2,
  Alert: 4
};

(globalThis as any)['NSApplication']['RequestUserAttentionType'] = (globalThis as any)['NSApplication']['RequestUserAttentionType'] || {};
(globalThis as any)['NSApplication']['RequestUserAttentionType'] = {
  CriticalRequest: 0,
  InformationalRequest: 10
};

(globalThis as any)['NSApplication']['TerminateReply'] = (globalThis as any)['NSApplication']['TerminateReply'] || {};
(globalThis as any)['NSApplication']['TerminateReply'] = {
  Cancel: 0,
  Now: 1,
  Later: 2
};

(globalThis as any)['NSApplication']['WindowListOptions'] = (globalThis as any)['NSApplication']['WindowListOptions'] || {};
(globalThis as any)['NSApplication']['WindowListOptions'] = {
  NSWindowListOrderedFrontToBack: 1
};


(globalThis as any)['NSArrayController'] = (globalThis as any)['NSArrayController'] || {};

(globalThis as any)['NSAtomicStore'] = (globalThis as any)['NSAtomicStore'] || {};

(globalThis as any)['NSAtomicStoreCacheNode'] = (globalThis as any)['NSAtomicStoreCacheNode'] || {};

(globalThis as any)['NSAttributeDescription'] = (globalThis as any)['NSAttributeDescription'] || {};
(globalThis as any)['NSAttributeDescription']['NSAttributeType'] = (globalThis as any)['NSAttributeDescription']['NSAttributeType'] || {};
(globalThis as any)['NSAttributeDescription']['NSAttributeType'] = {
  UndefinedAttributeType: 0,
  Integer16AttributeType: 100,
  Integer32AttributeType: 200,
  Integer64AttributeType: 300,
  DecimalAttributeType: 400,
  DoubleAttributeType: 500,
  FloatAttributeType: 600,
  StringAttributeType: 700,
  BooleanAttributeType: 800,
  DateAttributeType: 900,
  BinaryDataAttributeType: 1000,
  UUIDAttributeType: 1100,
  URIAttributeType: 1200,
  TransformableAttributeType: 1800,
  ObjectIDAttributeType: 2000
};


(globalThis as any)['NSAttributedString'] = (globalThis as any)['NSAttributedString'] || {};
(globalThis as any)['NSAttributedString']['EnumerationOptions'] = (globalThis as any)['NSAttributedString']['EnumerationOptions'] || {};
(globalThis as any)['NSAttributedString']['EnumerationOptions'] = {
  Reverse: 2,
  LongestEffectiveRangeNotRequired: 1048576
};

(globalThis as any)['NSAttributedString']['NSTextScalingType'] = (globalThis as any)['NSAttributedString']['NSTextScalingType'] || {};
(globalThis as any)['NSAttributedString']['NSTextScalingType'] = {
  Standard: 0,
  iOS: 1
};

(globalThis as any)['NSAttributedString']['NSUnderlineStyle'] = (globalThis as any)['NSAttributedString']['NSUnderlineStyle'] || {};
(globalThis as any)['NSAttributedString']['NSUnderlineStyle'] = {
  None: 0,
  Single: 1,
  Thick: 2,
  Double: 9,
  PatternSolid: 0,
  PatternDot: 256,
  PatternDash: 512,
  PatternDashDot: 768,
  PatternDashDotDot: 1024,
  ByWord: 32768
};

(globalThis as any)['NSAttributedString']['NSWritingDirectionFormatType'] = (globalThis as any)['NSAttributedString']['NSWritingDirectionFormatType'] || {};
(globalThis as any)['NSAttributedString']['NSWritingDirectionFormatType'] = {
  Embedding: 0,
  Override: 2
};

(globalThis as any)['NSAttributedString']['SpellingState'] = (globalThis as any)['NSAttributedString']['SpellingState'] || {};
(globalThis as any)['NSAttributedString']['SpellingState'] = {
  SpellingFlag: 1,
  GrammarFlag: 2
};


(globalThis as any)['NSAutoreleasePool'] = (globalThis as any)['NSAutoreleasePool'] || {};

(globalThis as any)['NSBackgroundActivityScheduler'] = (globalThis as any)['NSBackgroundActivityScheduler'] || {};
(globalThis as any)['NSBackgroundActivityScheduler']['Result'] = (globalThis as any)['NSBackgroundActivityScheduler']['Result'] || {};
(globalThis as any)['NSBackgroundActivityScheduler']['Result'] = {
  Finished: 1,
  Deferred: 2
};


(globalThis as any)['NSBatchDeleteRequest'] = (globalThis as any)['NSBatchDeleteRequest'] || {};

(globalThis as any)['NSBatchInsertRequest'] = (globalThis as any)['NSBatchInsertRequest'] || {};

(globalThis as any)['NSBatchUpdateRequest'] = (globalThis as any)['NSBatchUpdateRequest'] || {};

(globalThis as any)['NSBezierPath'] = (globalThis as any)['NSBezierPath'] || {};
(globalThis as any)['NSBezierPath']['ElementType'] = (globalThis as any)['NSBezierPath']['ElementType'] || {};
(globalThis as any)['NSBezierPath']['ElementType'] = {
  MoveTo: 0,
  LineTo: 1,
  CurveTo: 2,
  ClosePath: 3
};

(globalThis as any)['NSBezierPath']['LineCapStyle'] = (globalThis as any)['NSBezierPath']['LineCapStyle'] || {};
(globalThis as any)['NSBezierPath']['LineCapStyle'] = {
  Butt: 0,
  Round: 1,
  Square: 2
};

(globalThis as any)['NSBezierPath']['LineJoinStyle'] = (globalThis as any)['NSBezierPath']['LineJoinStyle'] || {};
(globalThis as any)['NSBezierPath']['LineJoinStyle'] = {
  Miter: 0,
  Round: 1,
  Bevel: 2
};

(globalThis as any)['NSBezierPath']['WindingRule'] = (globalThis as any)['NSBezierPath']['WindingRule'] || {};
(globalThis as any)['NSBezierPath']['WindingRule'] = {
  NonZero: 0,
  EvenOdd: 1
};


(globalThis as any)['NSBitmapImageRep'] = (globalThis as any)['NSBitmapImageRep'] || {};
(globalThis as any)['NSBitmapImageRep']['FileType'] = (globalThis as any)['NSBitmapImageRep']['FileType'] || {};
(globalThis as any)['NSBitmapImageRep']['FileType'] = {
  TIFF: 0,
  BMP: 1,
  GIF: 2,
  JPEG: 3,
  PNG: 4,
  JPEG2000: 5
};

(globalThis as any)['NSBitmapImageRep']['Format'] = (globalThis as any)['NSBitmapImageRep']['Format'] || {};
(globalThis as any)['NSBitmapImageRep']['Format'] = {
  AlphaFirst: 1,
  AlphaNonpremultiplied: 2,
  FloatingPointSamples: 4,
  SixteenBitLittleEndian: 256,
  ThirtyTwoBitLittleEndian: 512,
  SixteenBitBigEndian: 1024,
  ThirtyTwoBitBigEndian: 2048
};

(globalThis as any)['NSBitmapImageRep']['LoadStatus'] = (globalThis as any)['NSBitmapImageRep']['LoadStatus'] || {};
(globalThis as any)['NSBitmapImageRep']['LoadStatus'] = {
  UnknownType: -1,
  ReadingHeader: -2,
  WillNeedAllData: -3,
  InvalidData: -4,
  UnexpectedEOF: -5,
  Completed: -6
};

(globalThis as any)['NSBitmapImageRep']['TIFFCompression'] = (globalThis as any)['NSBitmapImageRep']['TIFFCompression'] || {};
(globalThis as any)['NSBitmapImageRep']['TIFFCompression'] = {
  None: 1,
  CCITTFAX3: 3,
  CCITTFAX4: 4,
  LZW: 5,
  JPEG: 6,
  NEXT: 32766,
  PackBits: 32773,
  OldJPEG: 32865
};


(globalThis as any)['NSBox'] = (globalThis as any)['NSBox'] || {};
(globalThis as any)['NSBox']['BoxType'] = (globalThis as any)['NSBox']['BoxType'] || {};
(globalThis as any)['NSBox']['BoxType'] = {
  Primary: 0,
  Separator: 2,
  Custom: 4
};

(globalThis as any)['NSBox']['TitlePosition'] = (globalThis as any)['NSBox']['TitlePosition'] || {};
(globalThis as any)['NSBox']['TitlePosition'] = {
  NoTitle: 0,
  AboveTop: 1,
  AtTop: 2,
  BelowTop: 3,
  AboveBottom: 4,
  AtBottom: 5,
  BelowBottom: 6
};


(globalThis as any)['NSBrowser'] = (globalThis as any)['NSBrowser'] || {};
(globalThis as any)['NSBrowser']['ColumnResizingType'] = (globalThis as any)['NSBrowser']['ColumnResizingType'] || {};
(globalThis as any)['NSBrowser']['ColumnResizingType'] = {
  NoColumnResizing: 0,
  AutoColumnResizing: 1,
  UserColumnResizing: 2
};

(globalThis as any)['NSBrowser']['DropOperation'] = (globalThis as any)['NSBrowser']['DropOperation'] || {};
(globalThis as any)['NSBrowser']['DropOperation'] = {
  On: 0,
  Above: 1
};


(globalThis as any)['NSBrowserCell'] = (globalThis as any)['NSBrowserCell'] || {};

(globalThis as any)['Bundle'] = (globalThis as any)['Bundle'] || {};

(globalThis as any)['NSButton'] = (globalThis as any)['NSButton'] || {};
(globalThis as any)['NSButton']['BezelStyle'] = (globalThis as any)['NSButton']['BezelStyle'] || {};
(globalThis as any)['NSButton']['BezelStyle'] = {
  Rounded: 1,
  RegularSquare: 2,
  Disclosure: 5,
  ShadowlessSquare: 6,
  Circular: 7,
  TexturedSquare: 8,
  HelpButton: 9,
  SmallSquare: 10,
  TexturedRounded: 11,
  RoundRect: 12,
  Recessed: 13,
  RoundedDisclosure: 14,
  Inline: 15
};

(globalThis as any)['NSButton']['ButtonType'] = (globalThis as any)['NSButton']['ButtonType'] || {};
(globalThis as any)['NSButton']['ButtonType'] = {
  MomentaryLight: 0,
  PushOnPushOff: 1,
  Toggle: 2,
  Switch: 3,
  Radio: 4,
  MomentaryChange: 5,
  OnOff: 6,
  MomentaryPushIn: 7,
  Accelerator: 8,
  MultiLevelAccelerator: 9
};


(globalThis as any)['NSButtonCell'] = (globalThis as any)['NSButtonCell'] || {};
(globalThis as any)['NSButtonCell']['NSButton'] = (globalThis as any)['NSButtonCell']['NSButton'] || {};
(globalThis as any)['NSButtonCell']['NSButton']['BezelStyle'] = (globalThis as any)['NSButtonCell']['NSButton']['BezelStyle'] || {};
(globalThis as any)['NSButtonCell']['NSButton']['BezelStyle'] = {
  Rounded: 1,
  RegularSquare: 2,
  Disclosure: 5,
  ShadowlessSquare: 6,
  Circular: 7,
  TexturedSquare: 8,
  HelpButton: 9,
  SmallSquare: 10,
  TexturedRounded: 11,
  RoundRect: 12,
  Recessed: 13,
  RoundedDisclosure: 14,
  Inline: 15
};

(globalThis as any)['NSButtonCell']['NSButton'] = (globalThis as any)['NSButtonCell']['NSButton'] || {};
(globalThis as any)['NSButtonCell']['NSButton']['ButtonType'] = (globalThis as any)['NSButtonCell']['NSButton']['ButtonType'] || {};
(globalThis as any)['NSButtonCell']['NSButton']['ButtonType'] = {
  MomentaryLight: 0,
  PushOnPushOff: 1,
  Toggle: 2,
  Switch: 3,
  Radio: 4,
  MomentaryChange: 5,
  OnOff: 6,
  MomentaryPushIn: 7,
  Accelerator: 8,
  MultiLevelAccelerator: 9
};


(globalThis as any)['NSButtonTouchBarItem'] = (globalThis as any)['NSButtonTouchBarItem'] || {};

(globalThis as any)['NSCIImageRep'] = (globalThis as any)['NSCIImageRep'] || {};

(globalThis as any)['NSCache'] = (globalThis as any)['NSCache'] || {};

(globalThis as any)['NSCandidateListTouchBarItem'] = (globalThis as any)['NSCandidateListTouchBarItem'] || {};

(globalThis as any)['NSCell'] = (globalThis as any)['NSCell'] || {};
(globalThis as any)['NSCell']['NSControl'] = (globalThis as any)['NSCell']['NSControl'] || {};
(globalThis as any)['NSCell']['NSControl']['ControlSize'] = (globalThis as any)['NSCell']['NSControl']['ControlSize'] || {};
(globalThis as any)['NSCell']['NSControl']['ControlSize'] = {
  Regular: 0,
  Small: 1,
  Mini: 2
};

(globalThis as any)['NSCell']['NSControl'] = (globalThis as any)['NSCell']['NSControl'] || {};
(globalThis as any)['NSCell']['NSControl']['ImagePosition'] = (globalThis as any)['NSCell']['NSControl']['ImagePosition'] || {};
(globalThis as any)['NSCell']['NSControl']['ImagePosition'] = {
  NoImage: 0,
  ImageOnly: 1,
  ImageLeft: 2,
  ImageRight: 3,
  ImageBelow: 4,
  ImageAbove: 5,
  ImageOverlaps: 6,
  ImageLeading: 7,
  ImageTrailing: 8
};

(globalThis as any)['NSCell']['NSView'] = (globalThis as any)['NSCell']['NSView'] || {};
(globalThis as any)['NSCell']['NSView']['AutoresizingMask'] = (globalThis as any)['NSCell']['NSView']['AutoresizingMask'] || {};
(globalThis as any)['NSCell']['NSView']['AutoresizingMask'] = {
  NotSizable: 0,
  MinXMargin: 1,
  WidthSizable: 2,
  MaxXMargin: 4,
  MinYMargin: 8,
  HeightSizable: 16,
  MaxYMargin: 32
};

(globalThis as any)['NSCell']['NSView'] = (globalThis as any)['NSCell']['NSView'] || {};
(globalThis as any)['NSCell']['NSView']['BackgroundStyle'] = (globalThis as any)['NSCell']['NSView']['BackgroundStyle'] || {};
(globalThis as any)['NSCell']['NSView']['BackgroundStyle'] = {
  Normal: 0,
  Emphasized: 1,
  Raised: 2,
  Lowered: 3
};

(globalThis as any)['NSCell']['NSView'] = (globalThis as any)['NSCell']['NSView'] || {};
(globalThis as any)['NSCell']['NSView']['LayerContentsPlacement'] = (globalThis as any)['NSCell']['NSView']['LayerContentsPlacement'] || {};
(globalThis as any)['NSCell']['NSView']['LayerContentsPlacement'] = {
  ScaleAxesIndependently: 0,
  ScaleProportionallyToFit: 1,
  ScaleProportionallyToFill: 2,
  Center: 3,
  Top: 4,
  TopRight: 5,
  Right: 6,
  BottomRight: 7,
  Bottom: 8,
  BottomLeft: 9,
  Left: 10,
  TopLeft: 11
};

(globalThis as any)['NSCell']['NSView'] = (globalThis as any)['NSCell']['NSView'] || {};
(globalThis as any)['NSCell']['NSView']['LayerContentsRedrawPolicy'] = (globalThis as any)['NSCell']['NSView']['LayerContentsRedrawPolicy'] || {};
(globalThis as any)['NSCell']['NSView']['LayerContentsRedrawPolicy'] = {
  Never: 0,
  OnSetNeedsDisplay: 1,
  DuringViewResize: 2,
  BeforeViewResize: 3,
  Crossfade: 4
};

(globalThis as any)['NSCell']['NSView'] = (globalThis as any)['NSCell']['NSView'] || {};
(globalThis as any)['NSCell']['NSView']['NSBorderType'] = (globalThis as any)['NSCell']['NSView']['NSBorderType'] || {};
(globalThis as any)['NSCell']['NSView']['NSBorderType'] = {
  NoBorder: 0,
  LineBorder: 1,
  BezelBorder: 2,
  GrooveBorder: 3
};

(globalThis as any)['NSCell']['Attribute'] = (globalThis as any)['NSCell']['Attribute'] || {};
(globalThis as any)['NSCell']['Attribute'] = {
  CellDisabled: 0,
  CellState: 1,
  PushInCell: 2,
  CellEditable: 3,
  ChangeGrayCell: 4,
  CellHighlighted: 5,
  CellLightsByContents: 6,
  CellLightsByGray: 7,
  ChangeBackgroundCell: 8,
  CellLightsByBackground: 9,
  CellIsBordered: 10,
  CellHasOverlappingImage: 11,
  CellHasImageHorizontal: 12,
  CellHasImageOnLeftOrBottom: 13,
  CellChangesContents: 14,
  CellIsInsetButton: 15,
  CellAllowsMixedState: 16
};

(globalThis as any)['NSCell']['CellType'] = (globalThis as any)['NSCell']['CellType'] || {};
(globalThis as any)['NSCell']['CellType'] = {
  NullCellType: 0,
  TextCellType: 1,
  ImageCellType: 2
};

(globalThis as any)['NSCell']['HitResult'] = (globalThis as any)['NSCell']['HitResult'] || {};
(globalThis as any)['NSCell']['HitResult'] = {
  None: 0,
  ContentArea: 1,
  EditableTextArea: 2,
  TrackableArea: 4
};

(globalThis as any)['NSCell']['NSControlTint'] = (globalThis as any)['NSCell']['NSControlTint'] || {};
(globalThis as any)['NSCell']['NSControlTint'] = {
  DefaultControlTint: 0,
  BlueControlTint: 1,
  GraphiteControlTint: 6,
  ClearControlTint: 7
};

(globalThis as any)['NSCell']['NSImageScaling'] = (globalThis as any)['NSCell']['NSImageScaling'] || {};
(globalThis as any)['NSCell']['NSImageScaling'] = {
  ImageScaleProportionallyDown: 0,
  ImageScaleAxesIndependently: 1,
  ImageScaleNone: 2,
  ImageScaleProportionallyUpOrDown: 3,
  ScaleProportionally: 0,
  ScaleToFit: 1,
  ScaleNone: 2
};

(globalThis as any)['NSCell']['StyleMask'] = (globalThis as any)['NSCell']['StyleMask'] || {};
(globalThis as any)['NSCell']['StyleMask'] = {
  NoCellMask: 0,
  ContentsCellMask: 1,
  PushInCellMask: 2,
  ChangeGrayCellMask: 4,
  ChangeBackgroundCellMask: 8
};


(globalThis as any)['CharacterSet'] = (globalThis as any)['CharacterSet'] || {};

(globalThis as any)['NSClassDescription'] = (globalThis as any)['NSClassDescription'] || {};

(globalThis as any)['NSClickGestureRecognizer'] = (globalThis as any)['NSClickGestureRecognizer'] || {};

(globalThis as any)['NSClipView'] = (globalThis as any)['NSClipView'] || {};

(globalThis as any)['NSCoder'] = (globalThis as any)['NSCoder'] || {};
(globalThis as any)['NSCoder']['DecodingFailurePolicy'] = (globalThis as any)['NSCoder']['DecodingFailurePolicy'] || {};
(globalThis as any)['NSCoder']['DecodingFailurePolicy'] = {
  RaiseException: 0,
  SetErrorAndReturn: 1
};


(globalThis as any)['NSCollectionView'] = (globalThis as any)['NSCollectionView'] || {};
(globalThis as any)['NSCollectionView']['NSCollectionViewItem'] = (globalThis as any)['NSCollectionView']['NSCollectionViewItem'] || {};
(globalThis as any)['NSCollectionView']['NSCollectionViewItem']['HighlightState'] = (globalThis as any)['NSCollectionView']['NSCollectionViewItem']['HighlightState'] || {};
(globalThis as any)['NSCollectionView']['NSCollectionViewItem']['HighlightState'] = {
  None: 0,
  ForSelection: 1,
  ForDeselection: 2,
  AsDropTarget: 3
};

(globalThis as any)['NSCollectionView']['DropOperation'] = (globalThis as any)['NSCollectionView']['DropOperation'] || {};
(globalThis as any)['NSCollectionView']['DropOperation'] = {
  On: 0,
  Before: 1
};

(globalThis as any)['NSCollectionView']['ScrollDirection'] = (globalThis as any)['NSCollectionView']['ScrollDirection'] || {};
(globalThis as any)['NSCollectionView']['ScrollDirection'] = {
  Vertical: 0,
  Horizontal: 1
};

(globalThis as any)['NSCollectionView']['ScrollPosition'] = (globalThis as any)['NSCollectionView']['ScrollPosition'] || {};
(globalThis as any)['NSCollectionView']['ScrollPosition'] = {
  None: 0,
  Top: 1,
  CenteredVertically: 2,
  Bottom: 4,
  NearestHorizontalEdge: 512,
  Left: 8,
  CenteredHorizontally: 16,
  Right: 32,
  LeadingEdge: 64,
  TrailingEdge: 128,
  NearestVerticalEdge: 256
};

(globalThis as any)['NSCollectionView']['UpdateAction'] = (globalThis as any)['NSCollectionView']['UpdateAction'] || {};
(globalThis as any)['NSCollectionView']['UpdateAction'] = {
  Insert: 0,
  Delete: 1,
  Reload: 2,
  Move: 3,
  None: 4
};


(globalThis as any)['NSCollectionViewCompositionalLayout'] = (globalThis as any)['NSCollectionViewCompositionalLayout'] || {};
(globalThis as any)['NSCollectionViewCompositionalLayout']['NSCollectionLayoutSectionOrthogonalScrollingBehavior'] = (globalThis as any)['NSCollectionViewCompositionalLayout']['NSCollectionLayoutSectionOrthogonalScrollingBehavior'] || {};
(globalThis as any)['NSCollectionViewCompositionalLayout']['NSCollectionLayoutSectionOrthogonalScrollingBehavior'] = {
  None: 0,
  Continuous: 1,
  ContinuousGroupLeadingBoundary: 2,
  Paging: 3,
  GroupPaging: 4,
  GroupPagingCentered: 5
};

(globalThis as any)['NSCollectionViewCompositionalLayout']['NSDirectionalRectEdge'] = (globalThis as any)['NSCollectionViewCompositionalLayout']['NSDirectionalRectEdge'] || {};
(globalThis as any)['NSCollectionViewCompositionalLayout']['NSDirectionalRectEdge'] = {
  None: 0,
  Top: 1,
  Leading: 2,
  Bottom: 4,
  Trailing: 8,
  All: 15
};

(globalThis as any)['NSCollectionViewCompositionalLayout']['NSRectAlignment'] = (globalThis as any)['NSCollectionViewCompositionalLayout']['NSRectAlignment'] || {};
(globalThis as any)['NSCollectionViewCompositionalLayout']['NSRectAlignment'] = {
  None: 0,
  Top: 1,
  TopLeading: 2,
  Leading: 3,
  BottomLeading: 4,
  Bottom: 5,
  BottomTrailing: 6,
  Trailing: 7,
  TopTrailing: 8
};


(globalThis as any)['NSCollectionViewFlowLayout'] = (globalThis as any)['NSCollectionViewFlowLayout'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['DropOperation'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['DropOperation'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['DropOperation'] = {
  On: 0,
  Before: 1
};

(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['ScrollDirection'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['ScrollDirection'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['ScrollDirection'] = {
  Vertical: 0,
  Horizontal: 1
};

(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['ScrollPosition'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['ScrollPosition'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['ScrollPosition'] = {
  None: 0,
  Top: 1,
  CenteredVertically: 2,
  Bottom: 4,
  NearestHorizontalEdge: 512,
  Left: 8,
  CenteredHorizontally: 16,
  Right: 32,
  LeadingEdge: 64,
  TrailingEdge: 128,
  NearestVerticalEdge: 256
};

(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['UpdateAction'] = (globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['UpdateAction'] || {};
(globalThis as any)['NSCollectionViewFlowLayout']['NSCollectionView']['UpdateAction'] = {
  Insert: 0,
  Delete: 1,
  Reload: 2,
  Move: 3,
  None: 4
};


(globalThis as any)['NSCollectionViewGridLayout'] = (globalThis as any)['NSCollectionViewGridLayout'] || {};

(globalThis as any)['NSCollectionViewLayout'] = (globalThis as any)['NSCollectionViewLayout'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['DropOperation'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['DropOperation'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['DropOperation'] = {
  On: 0,
  Before: 1
};

(globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['ScrollDirection'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['ScrollDirection'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['ScrollDirection'] = {
  Vertical: 0,
  Horizontal: 1
};

(globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['ScrollPosition'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['ScrollPosition'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['ScrollPosition'] = {
  None: 0,
  Top: 1,
  CenteredVertically: 2,
  Bottom: 4,
  NearestHorizontalEdge: 512,
  Left: 8,
  CenteredHorizontally: 16,
  Right: 32,
  LeadingEdge: 64,
  TrailingEdge: 128,
  NearestVerticalEdge: 256
};

(globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['UpdateAction'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['UpdateAction'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionView']['UpdateAction'] = {
  Insert: 0,
  Delete: 1,
  Reload: 2,
  Move: 3,
  None: 4
};

(globalThis as any)['NSCollectionViewLayout']['NSCollectionElementCategory'] = (globalThis as any)['NSCollectionViewLayout']['NSCollectionElementCategory'] || {};
(globalThis as any)['NSCollectionViewLayout']['NSCollectionElementCategory'] = {
  Item: 0,
  SupplementaryView: 1,
  DecorationView: 2,
  InterItemGap: 3
};


(globalThis as any)['NSCollectionViewTransitionLayout'] = (globalThis as any)['NSCollectionViewTransitionLayout'] || {};

(globalThis as any)['NSColor'] = (globalThis as any)['NSColor'] || {};
(globalThis as any)['NSColor']['ColorType'] = (globalThis as any)['NSColor']['ColorType'] || {};
(globalThis as any)['NSColor']['ColorType'] = {
  ComponentBased: 0,
  Pattern: 1,
  Catalog: 2
};

(globalThis as any)['NSColor']['SystemEffect'] = (globalThis as any)['NSColor']['SystemEffect'] || {};
(globalThis as any)['NSColor']['SystemEffect'] = {
  None: 0,
  Pressed: 1,
  DeepPressed: 2,
  Disabled: 3,
  Rollover: 4
};


(globalThis as any)['NSColorList'] = (globalThis as any)['NSColorList'] || {};

(globalThis as any)['NSColorPanel'] = (globalThis as any)['NSColorPanel'] || {};
(globalThis as any)['NSColorPanel']['Mode'] = (globalThis as any)['NSColorPanel']['Mode'] || {};
(globalThis as any)['NSColorPanel']['Mode'] = {
  None: -1,
  Gray: 0,
  RGB: 1,
  CMYK: 2,
  HSB: 3,
  CustomPalette: 4,
  ColorList: 5,
  Wheel: 6,
  Crayon: 7
};

(globalThis as any)['NSColorPanel']['Options'] = (globalThis as any)['NSColorPanel']['Options'] || {};
(globalThis as any)['NSColorPanel']['Options'] = {
  GrayModeMask: 1,
  RGBModeMask: 2,
  CMYKModeMask: 4,
  HSBModeMask: 8,
  CustomPaletteModeMask: 16,
  ColorListModeMask: 32,
  WheelModeMask: 64,
  CrayonModeMask: 128,
  AllModesMask: 65535
};


(globalThis as any)['NSColorPicker'] = (globalThis as any)['NSColorPicker'] || {};

(globalThis as any)['NSColorPickerTouchBarItem'] = (globalThis as any)['NSColorPickerTouchBarItem'] || {};

(globalThis as any)['NSColorSampler'] = (globalThis as any)['NSColorSampler'] || {};

(globalThis as any)['NSColorSpace'] = (globalThis as any)['NSColorSpace'] || {};
(globalThis as any)['NSColorSpace']['Model'] = (globalThis as any)['NSColorSpace']['Model'] || {};
(globalThis as any)['NSColorSpace']['Model'] = {
  Unknown: -1,
  Gray: 0,
  RGB: 1,
  CMYK: 2,
  LAB: 3,
  DeviceN: 4,
  Indexed: 5,
  Patterned: 6
};


(globalThis as any)['NSColorWell'] = (globalThis as any)['NSColorWell'] || {};

(globalThis as any)['NSComboBox'] = (globalThis as any)['NSComboBox'] || {};

(globalThis as any)['NSComboBoxCell'] = (globalThis as any)['NSComboBoxCell'] || {};

(globalThis as any)['NSComparisonPredicate'] = (globalThis as any)['NSComparisonPredicate'] || {};
(globalThis as any)['NSComparisonPredicate']['Modifier'] = (globalThis as any)['NSComparisonPredicate']['Modifier'] || {};
(globalThis as any)['NSComparisonPredicate']['Modifier'] = {
  DirectPredicateModifier: 0,
  AllPredicateModifier: 1,
  AnyPredicateModifier: 2
};

(globalThis as any)['NSComparisonPredicate']['Operator'] = (globalThis as any)['NSComparisonPredicate']['Operator'] || {};
(globalThis as any)['NSComparisonPredicate']['Operator'] = {
  LessThanPredicateOperatorType: 0,
  LessThanOrEqualToPredicateOperatorType: 1,
  GreaterThanPredicateOperatorType: 2,
  GreaterThanOrEqualToPredicateOperatorType: 3,
  EqualToPredicateOperatorType: 4,
  NotEqualToPredicateOperatorType: 5,
  MatchesPredicateOperatorType: 6,
  LikePredicateOperatorType: 7,
  BeginsWithPredicateOperatorType: 8,
  EndsWithPredicateOperatorType: 9,
  InPredicateOperatorType: 10,
  CustomSelectorPredicateOperatorType: 11,
  ContainsPredicateOperatorType: 99,
  BetweenPredicateOperatorType: 100
};

(globalThis as any)['NSComparisonPredicate']['Options'] = (globalThis as any)['NSComparisonPredicate']['Options'] || {};
(globalThis as any)['NSComparisonPredicate']['Options'] = {
  CaseInsensitivePredicateOption: 1,
  DiacriticInsensitivePredicateOption: 2,
  NormalizedPredicateOption: 4
};


(globalThis as any)['NSCompoundPredicate'] = (globalThis as any)['NSCompoundPredicate'] || {};
(globalThis as any)['NSCompoundPredicate']['LogicalType'] = (globalThis as any)['NSCompoundPredicate']['LogicalType'] || {};
(globalThis as any)['NSCompoundPredicate']['LogicalType'] = {
  NotPredicateType: 0,
  AndPredicateType: 1,
  OrPredicateType: 2
};


(globalThis as any)['NSConnection'] = (globalThis as any)['NSConnection'] || {};

(globalThis as any)['NSControl'] = (globalThis as any)['NSControl'] || {};
(globalThis as any)['NSControl']['ControlSize'] = (globalThis as any)['NSControl']['ControlSize'] || {};
(globalThis as any)['NSControl']['ControlSize'] = {
  Regular: 0,
  Small: 1,
  Mini: 2
};

(globalThis as any)['NSControl']['ImagePosition'] = (globalThis as any)['NSControl']['ImagePosition'] || {};
(globalThis as any)['NSControl']['ImagePosition'] = {
  NoImage: 0,
  ImageOnly: 1,
  ImageLeft: 2,
  ImageRight: 3,
  ImageBelow: 4,
  ImageAbove: 5,
  ImageOverlaps: 6,
  ImageLeading: 7,
  ImageTrailing: 8
};


(globalThis as any)['NSController'] = (globalThis as any)['NSController'] || {};

(globalThis as any)['NSCoreDataCoreSpotlightDelegate'] = (globalThis as any)['NSCoreDataCoreSpotlightDelegate'] || {};

(globalThis as any)['NSCursor'] = (globalThis as any)['NSCursor'] || {};

(globalThis as any)['NSCustomImageRep'] = (globalThis as any)['NSCustomImageRep'] || {};

(globalThis as any)['NSCustomTouchBarItem'] = (globalThis as any)['NSCustomTouchBarItem'] || {};

(globalThis as any)['NSDataAsset'] = (globalThis as any)['NSDataAsset'] || {};

(globalThis as any)['Date'] = (globalThis as any)['Date'] || {};

(globalThis as any)['DateInterval'] = (globalThis as any)['DateInterval'] || {};

(globalThis as any)['NSDatePicker'] = (globalThis as any)['NSDatePicker'] || {};
(globalThis as any)['NSDatePicker']['ElementFlags'] = (globalThis as any)['NSDatePicker']['ElementFlags'] || {};
(globalThis as any)['NSDatePicker']['ElementFlags'] = {
  HourMinute: 12,
  HourMinuteSecond: 14,
  TimeZone: 16,
  YearMonth: 192,
  YearMonthDay: 224,
  Era: 256
};

(globalThis as any)['NSDatePicker']['Mode'] = (globalThis as any)['NSDatePicker']['Mode'] || {};
(globalThis as any)['NSDatePicker']['Mode'] = {
  Single: 0,
  Range: 1
};

(globalThis as any)['NSDatePicker']['Style'] = (globalThis as any)['NSDatePicker']['Style'] || {};
(globalThis as any)['NSDatePicker']['Style'] = {
  TextFieldAndStepper: 0,
  ClockAndCalendar: 1,
  TextField: 2
};


(globalThis as any)['NSDatePickerCell'] = (globalThis as any)['NSDatePickerCell'] || {};
(globalThis as any)['NSDatePickerCell']['NSDatePicker'] = (globalThis as any)['NSDatePickerCell']['NSDatePicker'] || {};
(globalThis as any)['NSDatePickerCell']['NSDatePicker']['ElementFlags'] = (globalThis as any)['NSDatePickerCell']['NSDatePicker']['ElementFlags'] || {};
(globalThis as any)['NSDatePickerCell']['NSDatePicker']['ElementFlags'] = {
  HourMinute: 12,
  HourMinuteSecond: 14,
  TimeZone: 16,
  YearMonth: 192,
  YearMonthDay: 224,
  Era: 256
};

(globalThis as any)['NSDatePickerCell']['NSDatePicker'] = (globalThis as any)['NSDatePickerCell']['NSDatePicker'] || {};
(globalThis as any)['NSDatePickerCell']['NSDatePicker']['Mode'] = (globalThis as any)['NSDatePickerCell']['NSDatePicker']['Mode'] || {};
(globalThis as any)['NSDatePickerCell']['NSDatePicker']['Mode'] = {
  Single: 0,
  Range: 1
};

(globalThis as any)['NSDatePickerCell']['NSDatePicker'] = (globalThis as any)['NSDatePickerCell']['NSDatePicker'] || {};
(globalThis as any)['NSDatePickerCell']['NSDatePicker']['Style'] = (globalThis as any)['NSDatePickerCell']['NSDatePicker']['Style'] || {};
(globalThis as any)['NSDatePickerCell']['NSDatePicker']['Style'] = {
  TextFieldAndStepper: 0,
  ClockAndCalendar: 1,
  TextField: 2
};


(globalThis as any)['NSDecimal'] = (globalThis as any)['NSDecimal'] || {};
(globalThis as any)['NSDecimal']['NSDecimalNumber'] = (globalThis as any)['NSDecimal']['NSDecimalNumber'] || {};
(globalThis as any)['NSDecimal']['NSDecimalNumber']['CalculationError'] = (globalThis as any)['NSDecimal']['NSDecimalNumber']['CalculationError'] || {};
(globalThis as any)['NSDecimal']['NSDecimalNumber']['CalculationError'] = {
  NoError: 0,
  LossOfPrecision: 1,
  Underflow: 2,
  Overflow: 3,
  DivideByZero: 4
};

(globalThis as any)['NSDecimal']['NSDecimalNumber'] = (globalThis as any)['NSDecimal']['NSDecimalNumber'] || {};
(globalThis as any)['NSDecimal']['NSDecimalNumber']['RoundingMode'] = (globalThis as any)['NSDecimal']['NSDecimalNumber']['RoundingMode'] || {};
(globalThis as any)['NSDecimal']['NSDecimalNumber']['RoundingMode'] = {
  Plain: 0,
  Down: 1,
  Up: 2,
  Bankers: 3
};


(globalThis as any)['NSDecimalNumber'] = (globalThis as any)['NSDecimalNumber'] || {};
(globalThis as any)['NSDecimalNumber']['CalculationError'] = (globalThis as any)['NSDecimalNumber']['CalculationError'] || {};
(globalThis as any)['NSDecimalNumber']['CalculationError'] = {
  NoError: 0,
  LossOfPrecision: 1,
  Underflow: 2,
  Overflow: 3,
  DivideByZero: 4
};

(globalThis as any)['NSDecimalNumber']['RoundingMode'] = (globalThis as any)['NSDecimalNumber']['RoundingMode'] || {};
(globalThis as any)['NSDecimalNumber']['RoundingMode'] = {
  Plain: 0,
  Down: 1,
  Up: 2,
  Bankers: 3
};


(globalThis as any)['NSDerivedAttributeDescription'] = (globalThis as any)['NSDerivedAttributeDescription'] || {};

(globalThis as any)['Dictionary'] = (globalThis as any)['Dictionary'] || {};

(globalThis as any)['NSDictionaryController'] = (globalThis as any)['NSDictionaryController'] || {};

(globalThis as any)['NSDistantObject'] = (globalThis as any)['NSDistantObject'] || {};

(globalThis as any)['NSDistributedLock'] = (globalThis as any)['NSDistributedLock'] || {};

(globalThis as any)['NSDockTile'] = (globalThis as any)['NSDockTile'] || {};

(globalThis as any)['NSDocument'] = (globalThis as any)['NSDocument'] || {};
(globalThis as any)['NSDocument']['ChangeType'] = (globalThis as any)['NSDocument']['ChangeType'] || {};
(globalThis as any)['NSDocument']['ChangeType'] = {
  Done: 0,
  Undone: 1,
  Redone: 5,
  Cleared: 2,
  ReadOtherContents: 3,
  Autosaved: 4,
  Discardable: 256
};

(globalThis as any)['NSDocument']['SaveOperationType'] = (globalThis as any)['NSDocument']['SaveOperationType'] || {};
(globalThis as any)['NSDocument']['SaveOperationType'] = {
  SaveOperation: 0,
  SaveAsOperation: 1,
  SaveToOperation: 2,
  AutosaveInPlaceOperation: 4,
  AutosaveElsewhereOperation: 3,
  AutosaveAsOperation: 5,
  AutosaveOperation: 3
};


(globalThis as any)['NSDocumentController'] = (globalThis as any)['NSDocumentController'] || {};

(globalThis as any)['NSDragging'] = (globalThis as any)['NSDragging'] || {};
(globalThis as any)['NSDragging']['NSDragOperation'] = (globalThis as any)['NSDragging']['NSDragOperation'] || {};
(globalThis as any)['NSDragging']['NSDragOperation'] = {
  None: 0,
  Copy: 1,
  Link: 2,
  Generic: 4,
  Private: 8,
  Move: 16,
  Delete: 32,
  Every: -1,
  All_Obsolete: 15,
  All: 15
};

(globalThis as any)['NSDragging']['NSDraggingContext'] = (globalThis as any)['NSDragging']['NSDraggingContext'] || {};
(globalThis as any)['NSDragging']['NSDraggingContext'] = {
  OutsideApplication: 0,
  WithinApplication: 1
};

(globalThis as any)['NSDragging']['NSDraggingFormation'] = (globalThis as any)['NSDragging']['NSDraggingFormation'] || {};
(globalThis as any)['NSDragging']['NSDraggingFormation'] = {
  Default: 0,
  None: 1,
  Pile: 2,
  List: 3,
  Stack: 4
};

(globalThis as any)['NSDragging']['NSDraggingItemEnumerationOptions'] = (globalThis as any)['NSDragging']['NSDraggingItemEnumerationOptions'] || {};
(globalThis as any)['NSDragging']['NSDraggingItemEnumerationOptions'] = {
  oncurrent: 1,
  learNonenumeratedImages: 65536
};

(globalThis as any)['NSDragging']['NSSpringLoadingHighlight'] = (globalThis as any)['NSDragging']['NSSpringLoadingHighlight'] || {};
(globalThis as any)['NSDragging']['NSSpringLoadingHighlight'] = {
  None: 0,
  Standard: 1,
  Emphasized: 2
};

(globalThis as any)['NSDragging']['NSSpringLoadingOptions'] = (globalThis as any)['NSDragging']['NSSpringLoadingOptions'] || {};
(globalThis as any)['NSDragging']['NSSpringLoadingOptions'] = {
  Disabled: 0,
  Enabled: 1,
  ContinuousActivation: 2,
  NoHover: 8
};


(globalThis as any)['NSDraggingItem'] = (globalThis as any)['NSDraggingItem'] || {};

(globalThis as any)['NSDraggingSession'] = (globalThis as any)['NSDraggingSession'] || {};

(globalThis as any)['NSDrawer'] = (globalThis as any)['NSDrawer'] || {};
(globalThis as any)['NSDrawer']['State'] = (globalThis as any)['NSDrawer']['State'] || {};
(globalThis as any)['NSDrawer']['State'] = {
  ClosedState: 0,
  OpeningState: 1,
  OpenState: 2,
  ClosingState: 3
};


(globalThis as any)['NSEPSImageRep'] = (globalThis as any)['NSEPSImageRep'] || {};

(globalThis as any)['NSEntityDescription'] = (globalThis as any)['NSEntityDescription'] || {};

(globalThis as any)['NSEntityMapping'] = (globalThis as any)['NSEntityMapping'] || {};
(globalThis as any)['NSEntityMapping']['NSEntityMappingType'] = (globalThis as any)['NSEntityMapping']['NSEntityMappingType'] || {};
(globalThis as any)['NSEntityMapping']['NSEntityMappingType'] = {
  UndefinedEntityMappingType: 0,
  CustomEntityMappingType: 1,
  AddEntityMappingType: 2,
  RemoveEntityMappingType: 3,
  CopyEntityMappingType: 4,
  TransformEntityMappingType: 5
};


(globalThis as any)['NSEntityMigrationPolicy'] = (globalThis as any)['NSEntityMigrationPolicy'] || {};

(globalThis as any)['NSEnumerator'] = (globalThis as any)['NSEnumerator'] || {};

(globalThis as any)['Error'] = (globalThis as any)['Error'] || {};

(globalThis as any)['NSEvent'] = (globalThis as any)['NSEvent'] || {};
(globalThis as any)['NSEvent']['ButtonMask'] = (globalThis as any)['NSEvent']['ButtonMask'] || {};
(globalThis as any)['NSEvent']['ButtonMask'] = {
  Tip: 1,
  LowerSide: 2,
  UpperSide: 4
};

(globalThis as any)['NSEvent']['EventSubtype'] = (globalThis as any)['NSEvent']['EventSubtype'] || {};
(globalThis as any)['NSEvent']['EventSubtype'] = {
  WindowExposed: 0,
  ApplicationActivated: 1,
  ApplicationDeactivated: 2,
  WindowMoved: 4,
  ScreenChanged: 8,
  PowerOff: 1,
  MouseEvent: 0,
  TabletPoint: 1,
  TabletProximity: 2,
  Touch: 3
};

(globalThis as any)['NSEvent']['EventType'] = (globalThis as any)['NSEvent']['EventType'] || {};
(globalThis as any)['NSEvent']['EventType'] = {
  LeftMouseDown: 1,
  LeftMouseUp: 2,
  RightMouseDown: 3,
  RightMouseUp: 4,
  MouseMoved: 5,
  LeftMouseDragged: 6,
  RightMouseDragged: 7,
  MouseEntered: 8,
  MouseExited: 9,
  KeyDown: 10,
  KeyUp: 11,
  FlagsChanged: 12,
  AppKitDefined: 13,
  SystemDefined: 14,
  ApplicationDefined: 15,
  Periodic: 16,
  CursorUpdate: 17,
  ScrollWheel: 22,
  TabletPoint: 23,
  TabletProximity: 24,
  OtherMouseDown: 25,
  OtherMouseUp: 26,
  OtherMouseDragged: 27,
  Gesture: 29,
  Magnify: 30,
  Swipe: 31,
  Rotate: 18,
  BeginGesture: 19,
  EndGesture: 20,
  SmartMagnify: 32,
  QuickLook: 33,
  Pressure: 34,
  DirectTouch: 37,
  ChangeMode: 38
};

(globalThis as any)['NSEvent']['EventTypeMask'] = (globalThis as any)['NSEvent']['EventTypeMask'] || {};
(globalThis as any)['NSEvent']['EventTypeMask'] = {
  LeftMouseDown: 2,
  LeftMouseUp: 4,
  RightMouseDown: 8,
  RightMouseUp: 16,
  MouseMoved: 32,
  LeftMouseDragged: 64,
  RightMouseDragged: 128,
  MouseEntered: 256,
  MouseExited: 512,
  KeyDown: 1024,
  KeyUp: 2048,
  FlagsChanged: 4096,
  AppKitDefined: 8192,
  SystemDefined: 16384,
  ApplicationDefined: 32768,
  Periodic: 65536,
  CursorUpdate: 131072,
  ScrollWheel: 4194304,
  TabletPoint: 8388608,
  TabletProximity: 16777216,
  OtherMouseDown: 33554432,
  OtherMouseUp: 67108864,
  OtherMouseDragged: 134217728,
  Gesture: 536870912,
  Magnify: 1073741824,
  Swipe: 2147483648,
  Rotate: 262144,
  BeginGesture: 524288,
  EndGesture: 1048576,
  SmartMagnify: 4294967296,
  Pressure: 17179869184,
  DirectTouch: 137438953472,
  ChangeMode: 274877906944,
  Any: -1
};

(globalThis as any)['NSEvent']['GestureAxis'] = (globalThis as any)['NSEvent']['GestureAxis'] || {};
(globalThis as any)['NSEvent']['GestureAxis'] = {
  None: 0,
  Horizontal: 1,
  Vertical: 2
};

(globalThis as any)['NSEvent']['ModifierFlags'] = (globalThis as any)['NSEvent']['ModifierFlags'] || {};
(globalThis as any)['NSEvent']['ModifierFlags'] = {
  CapsLock: 65536,
  Shift: 131072,
  Control: 262144,
  Option: 524288,
  Command: 1048576,
  NumericPad: 2097152,
  Help: 4194304,
  Function: 8388608,
  DeviceIndependentFlagsMask: 4294901760
};

(globalThis as any)['NSEvent']['Phase'] = (globalThis as any)['NSEvent']['Phase'] || {};
(globalThis as any)['NSEvent']['Phase'] = {
  None: 0,
  Began: 1,
  Stationary: 2,
  Changed: 4,
  Ended: 8,
  Cancelled: 16,
  MayBegin: 32
};

(globalThis as any)['NSEvent']['PointingDeviceType'] = (globalThis as any)['NSEvent']['PointingDeviceType'] || {};
(globalThis as any)['NSEvent']['PointingDeviceType'] = {
  Unknown: 0,
  Pen: 1,
  Cursor: 2,
  Eraser: 3
};

(globalThis as any)['NSEvent']['PressureBehavior'] = (globalThis as any)['NSEvent']['PressureBehavior'] || {};
(globalThis as any)['NSEvent']['PressureBehavior'] = {
  Unknown: -1,
  PrimaryDefault: 0,
  PrimaryClick: 1,
  PrimaryGeneric: 2,
  PrimaryAccelerator: 3,
  PrimaryDeepClick: 5,
  PrimaryDeepDrag: 6
};

(globalThis as any)['NSEvent']['SwipeTrackingOptions'] = (globalThis as any)['NSEvent']['SwipeTrackingOptions'] || {};
(globalThis as any)['NSEvent']['SwipeTrackingOptions'] = {
  LockDirection: 1,
  ClampGestureAmount: 2
};


(globalThis as any)['NSException'] = (globalThis as any)['NSException'] || {};

(globalThis as any)['NSExpression'] = (globalThis as any)['NSExpression'] || {};
(globalThis as any)['NSExpression']['ExpressionType'] = (globalThis as any)['NSExpression']['ExpressionType'] || {};
(globalThis as any)['NSExpression']['ExpressionType'] = {
  ConstantValueExpressionType: 0,
  EvaluatedObjectExpressionType: 1,
  VariableExpressionType: 2,
  KeyPathExpressionType: 3,
  FunctionExpressionType: 4,
  UnionSetExpressionType: 5,
  IntersectSetExpressionType: 6,
  MinusSetExpressionType: 7,
  SubqueryExpressionType: 13,
  AggregateExpressionType: 14,
  AnyKeyExpressionType: 15,
  BlockExpressionType: 19,
  ConditionalExpressionType: 20
};


(globalThis as any)['NSExpressionDescription'] = (globalThis as any)['NSExpressionDescription'] || {};

(globalThis as any)['NSExtensionContext'] = (globalThis as any)['NSExtensionContext'] || {};

(globalThis as any)['NSExtensionItem'] = (globalThis as any)['NSExtensionItem'] || {};

(globalThis as any)['NSFetchIndexDescription'] = (globalThis as any)['NSFetchIndexDescription'] || {};

(globalThis as any)['NSFetchIndexElementDescription'] = (globalThis as any)['NSFetchIndexElementDescription'] || {};
(globalThis as any)['NSFetchIndexElementDescription']['NSFetchIndexElementType'] = (globalThis as any)['NSFetchIndexElementDescription']['NSFetchIndexElementType'] || {};
(globalThis as any)['NSFetchIndexElementDescription']['NSFetchIndexElementType'] = {
  Binary: 0,
  RTree: 1
};


(globalThis as any)['NSFetchRequest'] = (globalThis as any)['NSFetchRequest'] || {};
(globalThis as any)['NSFetchRequest']['NSFetchRequestResultType'] = (globalThis as any)['NSFetchRequest']['NSFetchRequestResultType'] || {};
(globalThis as any)['NSFetchRequest']['NSFetchRequestResultType'] = {
  ManagedObjectResultType: 0,
  ManagedObjectIDResultType: 1,
  DictionaryResultType: 2,
  CountResultType: 4
};


(globalThis as any)['NSFetchRequestExpression'] = (globalThis as any)['NSFetchRequestExpression'] || {};

(globalThis as any)['NSFetchedPropertyDescription'] = (globalThis as any)['NSFetchedPropertyDescription'] || {};

(globalThis as any)['NSFetchedResultsController'] = (globalThis as any)['NSFetchedResultsController'] || {};
(globalThis as any)['NSFetchedResultsController']['NSFetchedResultsChangeType'] = (globalThis as any)['NSFetchedResultsController']['NSFetchedResultsChangeType'] || {};
(globalThis as any)['NSFetchedResultsController']['NSFetchedResultsChangeType'] = {
  Insert: 1,
  Delete: 2,
  Move: 3,
  Update: 4
};


(globalThis as any)['NSFileCoordinator'] = (globalThis as any)['NSFileCoordinator'] || {};
(globalThis as any)['NSFileCoordinator']['ReadingOptions'] = (globalThis as any)['NSFileCoordinator']['ReadingOptions'] || {};
(globalThis as any)['NSFileCoordinator']['ReadingOptions'] = {
  WithoutChanges: 1,
  ResolvesSymbolicLink: 2,
  ImmediatelyAvailableMetadataOnly: 4,
  ForUploading: 8
};

(globalThis as any)['NSFileCoordinator']['WritingOptions'] = (globalThis as any)['NSFileCoordinator']['WritingOptions'] || {};
(globalThis as any)['NSFileCoordinator']['WritingOptions'] = {
  ForDeleting: 1,
  ForMoving: 2,
  ForMerging: 4,
  ForReplacing: 8,
  ContentIndependentMetadataOnly: 16
};


(globalThis as any)['FileHandle'] = (globalThis as any)['FileHandle'] || {};

(globalThis as any)['NSFilePromiseProvider'] = (globalThis as any)['NSFilePromiseProvider'] || {};

(globalThis as any)['NSFilePromiseReceiver'] = (globalThis as any)['NSFilePromiseReceiver'] || {};

(globalThis as any)['NSFileVersion'] = (globalThis as any)['NSFileVersion'] || {};
(globalThis as any)['NSFileVersion']['AddingOptions'] = (globalThis as any)['NSFileVersion']['AddingOptions'] || {};
(globalThis as any)['NSFileVersion']['AddingOptions'] = {
  NSFileVersionAddingByMoving: 1
};

(globalThis as any)['NSFileVersion']['ReplacingOptions'] = (globalThis as any)['NSFileVersion']['ReplacingOptions'] || {};
(globalThis as any)['NSFileVersion']['ReplacingOptions'] = {
  NSFileVersionReplacingByMoving: 1
};


(globalThis as any)['NSFont'] = (globalThis as any)['NSFont'] || {};
(globalThis as any)['NSFont']['NSFontRenderingMode'] = (globalThis as any)['NSFont']['NSFontRenderingMode'] || {};
(globalThis as any)['NSFont']['NSFontRenderingMode'] = {
  DefaultRenderingMode: 0,
  AntialiasedRenderingMode: 1,
  IntegerAdvancementsRenderingMode: 2,
  AntialiasedIntegerAdvancementsRenderingMode: 3
};


(globalThis as any)['NSFontAssetRequest'] = (globalThis as any)['NSFontAssetRequest'] || {};
(globalThis as any)['NSFontAssetRequest']['Options'] = (globalThis as any)['NSFontAssetRequest']['Options'] || {};
(globalThis as any)['NSFontAssetRequest']['Options'] = {
  NSFontAssetRequestOptionUsesStandardUI: 1
};


(globalThis as any)['NSFontCollection'] = (globalThis as any)['NSFontCollection'] || {};
(globalThis as any)['NSFontCollection']['Visibility'] = (globalThis as any)['NSFontCollection']['Visibility'] || {};
(globalThis as any)['NSFontCollection']['Visibility'] = {
  Process: 1,
  User: 2,
  Computer: 4
};


(globalThis as any)['NSFontDescriptor'] = (globalThis as any)['NSFontDescriptor'] || {};
(globalThis as any)['NSFontDescriptor']['SymbolicTraits'] = (globalThis as any)['NSFontDescriptor']['SymbolicTraits'] || {};
(globalThis as any)['NSFontDescriptor']['SymbolicTraits'] = {
  TraitItalic: 1,
  TraitBold: 2,
  TraitExpanded: 32,
  TraitCondensed: 64,
  TraitMonoSpace: 1024,
  TraitVertical: 2048,
  TraitUIOptimized: 4096,
  TraitTightLeading: 32768,
  TraitLooseLeading: 65536,
  ClassMask: 4026531840,
  ClassUnknown: 0,
  ClassOldStyleSerifs: 268435456,
  ClassTransitionalSerifs: 536870912,
  ClassModernSerifs: 805306368,
  ClassClarendonSerifs: 1073741824,
  ClassSlabSerifs: 1342177280,
  ClassFreeformSerifs: 1879048192,
  ClassSansSerif: 2147483648,
  ClassOrnamentals: 2415919104,
  ClassScripts: 2684354560,
  ClassSymbolic: 3221225472
};


(globalThis as any)['NSFontManager'] = (globalThis as any)['NSFontManager'] || {};
(globalThis as any)['NSFontManager']['NSFontAction'] = (globalThis as any)['NSFontManager']['NSFontAction'] || {};
(globalThis as any)['NSFontManager']['NSFontAction'] = {
  NoFontChangeAction: 0,
  ViaPanelFontAction: 1,
  AddTraitFontAction: 2,
  SizeUpFontAction: 3,
  SizeDownFontAction: 4,
  HeavierFontAction: 5,
  LighterFontAction: 6,
  RemoveTraitFontAction: 7
};

(globalThis as any)['NSFontManager']['NSFontCollectionOptions'] = (globalThis as any)['NSFontManager']['NSFontCollectionOptions'] || {};
(globalThis as any)['NSFontManager']['NSFontCollectionOptions'] = {
  NSFontCollectionApplicationOnlyMask: 1
};

(globalThis as any)['NSFontManager']['NSFontTraitMask'] = (globalThis as any)['NSFontManager']['NSFontTraitMask'] || {};
(globalThis as any)['NSFontManager']['NSFontTraitMask'] = {
  ItalicFontMask: 1,
  BoldFontMask: 2,
  UnboldFontMask: 4,
  NonStandardCharacterSetFontMask: 8,
  NarrowFontMask: 16,
  ExpandedFontMask: 32,
  CondensedFontMask: 64,
  SmallCapsFontMask: 128,
  PosterFontMask: 256,
  CompressedFontMask: 512,
  FixedPitchFontMask: 1024,
  UnitalicFontMask: 16777216
};


(globalThis as any)['NSFontPanel'] = (globalThis as any)['NSFontPanel'] || {};
(globalThis as any)['NSFontPanel']['ModeMask'] = (globalThis as any)['NSFontPanel']['ModeMask'] || {};
(globalThis as any)['NSFontPanel']['ModeMask'] = {
  MaskFace: 1,
  MaskSize: 2,
  MaskCollection: 4,
  MaskUnderlineEffect: 256,
  MaskStrikethroughEffect: 512,
  MaskTextColorEffect: 1024,
  MaskDocumentColorEffect: 2048,
  MaskShadowEffect: 4096,
  MaskAllEffects: 1048320,
  sMaskStandardModes: 65535,
  sMaskAllModes: 4294967295
};


(globalThis as any)['NSFormCell'] = (globalThis as any)['NSFormCell'] || {};

(globalThis as any)['NSGarbageCollector'] = (globalThis as any)['NSGarbageCollector'] || {};

(globalThis as any)['NSGeometry'] = (globalThis as any)['NSGeometry'] || {};
(globalThis as any)['NSGeometry']['AlignmentOptions'] = (globalThis as any)['NSGeometry']['AlignmentOptions'] || {};
(globalThis as any)['NSGeometry']['AlignmentOptions'] = {
  MinXInward: 1,
  MinYInward: 2,
  MaxXInward: 4,
  MaxYInward: 8,
  WidthInward: 16,
  HeightInward: 32,
  MinXOutward: 256,
  MinYOutward: 512,
  MaxXOutward: 1024,
  MaxYOutward: 2048,
  WidthOutward: 4096,
  HeightOutward: 8192,
  MinXNearest: 65536,
  MinYNearest: 131072,
  MaxXNearest: 262144,
  MaxYNearest: 524288,
  WidthNearest: 1048576,
  HeightNearest: 2097152,
  RectFlipped: -9223372036854775808,
  AllEdgesInward: 15,
  AllEdgesOutward: 3840,
  AllEdgesNearest: 983040
};

(globalThis as any)['NSGeometry']['NSRectEdge'] = (globalThis as any)['NSGeometry']['NSRectEdge'] || {};
(globalThis as any)['NSGeometry']['NSRectEdge'] = {
  RectEdgeMinX: 0,
  RectEdgeMinY: 1,
  RectEdgeMaxX: 2,
  RectEdgeMaxY: 3,
  MinXEdge: 0,
  MinYEdge: 1,
  MaxXEdge: 2,
  MaxYEdge: 3
};


(globalThis as any)['NSGestureRecognizer'] = (globalThis as any)['NSGestureRecognizer'] || {};
(globalThis as any)['NSGestureRecognizer']['State'] = (globalThis as any)['NSGestureRecognizer']['State'] || {};
(globalThis as any)['NSGestureRecognizer']['State'] = {
  Possible: 0,
  Began: 1,
  Changed: 2,
  Ended: 3,
  Cancelled: 4,
  Failed: 5,
  Recognized: 3
};


(globalThis as any)['NSGlyphGenerator'] = (globalThis as any)['NSGlyphGenerator'] || {};

(globalThis as any)['NSGlyphInfo'] = (globalThis as any)['NSGlyphInfo'] || {};
(globalThis as any)['NSGlyphInfo']['NSCharacterCollection'] = (globalThis as any)['NSGlyphInfo']['NSCharacterCollection'] || {};
(globalThis as any)['NSGlyphInfo']['NSCharacterCollection'] = {
  IdentityMappingCharacterCollection: 0,
  AdobeCNS1CharacterCollection: 1,
  AdobeGB1CharacterCollection: 2,
  AdobeJapan1CharacterCollection: 3,
  AdobeJapan2CharacterCollection: 4,
  AdobeKorea1CharacterCollection: 5
};


(globalThis as any)['NSGradient'] = (globalThis as any)['NSGradient'] || {};
(globalThis as any)['NSGradient']['DrawingOptions'] = (globalThis as any)['NSGradient']['DrawingOptions'] || {};
(globalThis as any)['NSGradient']['DrawingOptions'] = {
  BeforeStartingLocation: 1,
  AfterEndingLocation: 2
};


(globalThis as any)['NSGraphics'] = (globalThis as any)['NSGraphics'] || {};
(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['AnimationBehavior'] = (globalThis as any)['NSGraphics']['NSWindow']['AnimationBehavior'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['AnimationBehavior'] = {
  Default: 0,
  None: 2,
  DocumentWindow: 3,
  UtilityWindow: 4,
  AlertPanel: 5
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['BackingStoreType'] = (globalThis as any)['NSGraphics']['NSWindow']['BackingStoreType'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['BackingStoreType'] = {
  Retained: 0,
  Nonretained: 1,
  Buffered: 2
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['ButtonType'] = (globalThis as any)['NSGraphics']['NSWindow']['ButtonType'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['ButtonType'] = {
  CloseButton: 0,
  MiniaturizeButton: 1,
  ZoomButton: 2,
  ToolbarButton: 3,
  DocumentIconButton: 4,
  DocumentVersionsButton: 6
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['CollectionBehavior'] = (globalThis as any)['NSGraphics']['NSWindow']['CollectionBehavior'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['CollectionBehavior'] = {
  Default: 0,
  CanJoinAllSpaces: 1,
  MoveToActiveSpace: 2,
  Managed: 4,
  Transient: 8,
  Stationary: 16,
  ParticipatesInCycle: 32,
  IgnoresCycle: 64,
  FullScreenPrimary: 128,
  FullScreenAuxiliary: 256,
  FullScreenNone: 512,
  FullScreenAllowsTiling: 2048,
  FullScreenDisallowsTiling: 4096
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['Depth'] = (globalThis as any)['NSGraphics']['NSWindow']['Depth'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['Depth'] = {
  TwentyfourBitRGB: 520,
  SixtyfourBitRGB: 528,
  OnehundredtwentyeightBitRGB: 544
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['NumberListOptions'] = (globalThis as any)['NSGraphics']['NSWindow']['NumberListOptions'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['NumberListOptions'] = {
  Applications: 1,
  Spaces: 16
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['OcclusionState'] = (globalThis as any)['NSGraphics']['NSWindow']['OcclusionState'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['OcclusionState'] = {
  NSWindowOcclusionStateVisible: 2
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['OrderingMode'] = (globalThis as any)['NSGraphics']['NSWindow']['OrderingMode'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['OrderingMode'] = {
  Above: 1,
  Below: -1,
  Out: 0
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['SelectionDirection'] = (globalThis as any)['NSGraphics']['NSWindow']['SelectionDirection'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['SelectionDirection'] = {
  DirectSelection: 0,
  SelectingNext: 1,
  SelectingPrevious: 2
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['SharingType'] = (globalThis as any)['NSGraphics']['NSWindow']['SharingType'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['SharingType'] = {
  None: 0,
  ReadOnly: 1,
  ReadWrite: 2
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['StyleMask'] = (globalThis as any)['NSGraphics']['NSWindow']['StyleMask'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['StyleMask'] = {
  Borderless: 0,
  Titled: 1,
  Closable: 2,
  Miniaturizable: 4,
  Resizable: 8,
  TexturedBackground: 256,
  UnifiedTitleAndToolbar: 4096,
  FullScreen: 16384,
  FullSizeContentView: 32768,
  UtilityWindow: 16,
  DocModalWindow: 64,
  NonactivatingPanel: 128,
  HUDWindow: 8192
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['TabbingMode'] = (globalThis as any)['NSGraphics']['NSWindow']['TabbingMode'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['TabbingMode'] = {
  Automatic: 0,
  Preferred: 1,
  Disallowed: 2
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['TitleVisibility'] = (globalThis as any)['NSGraphics']['NSWindow']['TitleVisibility'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['TitleVisibility'] = {
  Visible: 0,
  Hidden: 1
};

(globalThis as any)['NSGraphics']['NSWindow'] = (globalThis as any)['NSGraphics']['NSWindow'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['UserTabbingPreference'] = (globalThis as any)['NSGraphics']['NSWindow']['UserTabbingPreference'] || {};
(globalThis as any)['NSGraphics']['NSWindow']['UserTabbingPreference'] = {
  Manual: 0,
  Always: 1,
  InFullScreen: 2
};

(globalThis as any)['NSGraphics']['NSAnimationEffect'] = (globalThis as any)['NSGraphics']['NSAnimationEffect'] || {};
(globalThis as any)['NSGraphics']['NSAnimationEffect'] = {
  DisappearingItemDefault: 0,
  Poof: 10
};

(globalThis as any)['NSGraphics']['NSColorRenderingIntent'] = (globalThis as any)['NSGraphics']['NSColorRenderingIntent'] || {};
(globalThis as any)['NSGraphics']['NSColorRenderingIntent'] = {
  Default: 0,
  AbsoluteColorimetric: 1,
  RelativeColorimetric: 2,
  Perceptual: 3,
  Saturation: 4
};

(globalThis as any)['NSGraphics']['NSCompositingOperation'] = (globalThis as any)['NSGraphics']['NSCompositingOperation'] || {};
(globalThis as any)['NSGraphics']['NSCompositingOperation'] = {
  Clear: 0,
  Copy: 1,
  SourceOver: 2,
  SourceIn: 3,
  SourceOut: 4,
  SourceAtop: 5,
  DestinationOver: 6,
  DestinationIn: 7,
  DestinationOut: 8,
  DestinationAtop: 9,
  XOR: 10,
  PlusDarker: 11,
  Highlight: 12,
  PlusLighter: 13,
  Multiply: 14,
  Screen: 15,
  Overlay: 16,
  Darken: 17,
  Lighten: 18,
  ColorDodge: 19,
  ColorBurn: 20,
  SoftLight: 21,
  HardLight: 22,
  Difference: 23,
  Exclusion: 24,
  Hue: 25,
  Saturation: 26,
  Color: 27,
  Luminosity: 28
};

(globalThis as any)['NSGraphics']['NSDisplayGamut'] = (globalThis as any)['NSGraphics']['NSDisplayGamut'] || {};
(globalThis as any)['NSGraphics']['NSDisplayGamut'] = {
  SRGB: 1,
  P3: 2
};

(globalThis as any)['NSGraphics']['NSFocusRingPlacement'] = (globalThis as any)['NSGraphics']['NSFocusRingPlacement'] || {};
(globalThis as any)['NSGraphics']['NSFocusRingPlacement'] = {
  Only: 0,
  Below: 1,
  Above: 2
};

(globalThis as any)['NSGraphics']['NSFocusRingType'] = (globalThis as any)['NSGraphics']['NSFocusRingType'] || {};
(globalThis as any)['NSGraphics']['NSFocusRingType'] = {
  Default: 0,
  None: 1,
  Exterior: 2
};


(globalThis as any)['NSGraphicsContext'] = (globalThis as any)['NSGraphicsContext'] || {};
(globalThis as any)['NSGraphicsContext']['NSImageInterpolation'] = (globalThis as any)['NSGraphicsContext']['NSImageInterpolation'] || {};
(globalThis as any)['NSGraphicsContext']['NSImageInterpolation'] = {
  Default: 0,
  None: 1,
  Low: 2,
  Medium: 4,
  High: 3
};


(globalThis as any)['NSGridView'] = (globalThis as any)['NSGridView'] || {};
(globalThis as any)['NSGridView']['NSGridCell'] = (globalThis as any)['NSGridView']['NSGridCell'] || {};
(globalThis as any)['NSGridView']['NSGridCell']['Placement'] = (globalThis as any)['NSGridView']['NSGridCell']['Placement'] || {};
(globalThis as any)['NSGridView']['NSGridCell']['Placement'] = {
  Inherited: 0,
  None: 1,
  Leading: 2,
  Top: 2,
  Trailing: 3,
  Bottom: 3,
  Center: 4,
  Fill: 5
};

(globalThis as any)['NSGridView']['NSGridRow'] = (globalThis as any)['NSGridView']['NSGridRow'] || {};
(globalThis as any)['NSGridView']['NSGridRow']['Alignment'] = (globalThis as any)['NSGridView']['NSGridRow']['Alignment'] || {};
(globalThis as any)['NSGridView']['NSGridRow']['Alignment'] = {
  Inherited: 0,
  None: 1,
  FirstBaseline: 2,
  LastBaseline: 3
};


(globalThis as any)['NSGroupTouchBarItem'] = (globalThis as any)['NSGroupTouchBarItem'] || {};

(globalThis as any)['HTTPCookie'] = (globalThis as any)['HTTPCookie'] || {};
(globalThis as any)['HTTPCookie']['AcceptPolicy'] = (globalThis as any)['HTTPCookie']['AcceptPolicy'] || {};
(globalThis as any)['HTTPCookie']['AcceptPolicy'] = {
  Always: 0,
  Never: 1,
  OnlyFromMainDocumentDomain: 2
};


(globalThis as any)['NSHapticFeedback'] = (globalThis as any)['NSHapticFeedback'] || {};
(globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager'] = (globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager'] || {};
(globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager']['FeedbackPattern'] = (globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager']['FeedbackPattern'] || {};
(globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager']['FeedbackPattern'] = {
  Generic: 0,
  Alignment: 1,
  LevelChange: 2
};

(globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager'] = (globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager'] || {};
(globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager']['PerformanceTime'] = (globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager']['PerformanceTime'] || {};
(globalThis as any)['NSHapticFeedback']['NSHapticFeedbackManager']['PerformanceTime'] = {
  Default: 0,
  Now: 1,
  DrawCompleted: 2
};


(globalThis as any)['NSHashTable'] = (globalThis as any)['NSHashTable'] || {};

(globalThis as any)['NSHelpManager'] = (globalThis as any)['NSHelpManager'] || {};

(globalThis as any)['Host'] = (globalThis as any)['Host'] || {};

(globalThis as any)['NSImage'] = (globalThis as any)['NSImage'] || {};
(globalThis as any)['NSImage']['CacheMode'] = (globalThis as any)['NSImage']['CacheMode'] || {};
(globalThis as any)['NSImage']['CacheMode'] = {
  Default: 0,
  Always: 1,
  BySize: 2,
  Never: 3
};

(globalThis as any)['NSImage']['LayoutDirection'] = (globalThis as any)['NSImage']['LayoutDirection'] || {};
(globalThis as any)['NSImage']['LayoutDirection'] = {
  Unspecified: -1,
  LeftToRight: 2,
  RightToLeft: 3
};

(globalThis as any)['NSImage']['LoadStatus'] = (globalThis as any)['NSImage']['LoadStatus'] || {};
(globalThis as any)['NSImage']['LoadStatus'] = {
  Completed: 0,
  Cancelled: 1,
  InvalidData: 2,
  UnexpectedEOF: 3,
  ReadError: 4
};

(globalThis as any)['NSImage']['ResizingMode'] = (globalThis as any)['NSImage']['ResizingMode'] || {};
(globalThis as any)['NSImage']['ResizingMode'] = {
  Stretch: 0,
  Tile: 1
};


(globalThis as any)['NSImageCell'] = (globalThis as any)['NSImageCell'] || {};
(globalThis as any)['NSImageCell']['NSImageView'] = (globalThis as any)['NSImageCell']['NSImageView'] || {};
(globalThis as any)['NSImageCell']['NSImageView']['FrameStyle'] = (globalThis as any)['NSImageCell']['NSImageView']['FrameStyle'] || {};
(globalThis as any)['NSImageCell']['NSImageView']['FrameStyle'] = {
  None: 0,
  Photo: 1,
  GrayBezel: 2,
  Groove: 3,
  Button: 4
};

(globalThis as any)['NSImageCell']['NSImageAlignment'] = (globalThis as any)['NSImageCell']['NSImageAlignment'] || {};
(globalThis as any)['NSImageCell']['NSImageAlignment'] = {
  Center: 0,
  Top: 1,
  TopLeft: 2,
  TopRight: 3,
  Left: 4,
  Bottom: 5,
  BottomLeft: 6,
  BottomRight: 7,
  Right: 8
};


(globalThis as any)['NSImageRep'] = (globalThis as any)['NSImageRep'] || {};
(globalThis as any)['NSImageRep']['NSImage'] = (globalThis as any)['NSImageRep']['NSImage'] || {};
(globalThis as any)['NSImageRep']['NSImage']['CacheMode'] = (globalThis as any)['NSImageRep']['NSImage']['CacheMode'] || {};
(globalThis as any)['NSImageRep']['NSImage']['CacheMode'] = {
  Default: 0,
  Always: 1,
  BySize: 2,
  Never: 3
};

(globalThis as any)['NSImageRep']['NSImage'] = (globalThis as any)['NSImageRep']['NSImage'] || {};
(globalThis as any)['NSImageRep']['NSImage']['LayoutDirection'] = (globalThis as any)['NSImageRep']['NSImage']['LayoutDirection'] || {};
(globalThis as any)['NSImageRep']['NSImage']['LayoutDirection'] = {
  Unspecified: -1,
  LeftToRight: 2,
  RightToLeft: 3
};

(globalThis as any)['NSImageRep']['NSImage'] = (globalThis as any)['NSImageRep']['NSImage'] || {};
(globalThis as any)['NSImageRep']['NSImage']['LoadStatus'] = (globalThis as any)['NSImageRep']['NSImage']['LoadStatus'] || {};
(globalThis as any)['NSImageRep']['NSImage']['LoadStatus'] = {
  Completed: 0,
  Cancelled: 1,
  InvalidData: 2,
  UnexpectedEOF: 3,
  ReadError: 4
};

(globalThis as any)['NSImageRep']['NSImage'] = (globalThis as any)['NSImageRep']['NSImage'] || {};
(globalThis as any)['NSImageRep']['NSImage']['ResizingMode'] = (globalThis as any)['NSImageRep']['NSImage']['ResizingMode'] || {};
(globalThis as any)['NSImageRep']['NSImage']['ResizingMode'] = {
  Stretch: 0,
  Tile: 1
};


(globalThis as any)['NSImageView'] = (globalThis as any)['NSImageView'] || {};
(globalThis as any)['NSImageView']['FrameStyle'] = (globalThis as any)['NSImageView']['FrameStyle'] || {};
(globalThis as any)['NSImageView']['FrameStyle'] = {
  None: 0,
  Photo: 1,
  GrayBezel: 2,
  Groove: 3,
  Button: 4
};


(globalThis as any)['NSIncrementalStore'] = (globalThis as any)['NSIncrementalStore'] || {};

(globalThis as any)['NSIncrementalStoreNode'] = (globalThis as any)['NSIncrementalStoreNode'] || {};

(globalThis as any)['IndexPath'] = (globalThis as any)['IndexPath'] || {};

(globalThis as any)['IndexSet'] = (globalThis as any)['IndexSet'] || {};

(globalThis as any)['NSInvocation'] = (globalThis as any)['NSInvocation'] || {};

(globalThis as any)['NSItemProvider'] = (globalThis as any)['NSItemProvider'] || {};
(globalThis as any)['NSItemProvider']['ErrorCode'] = (globalThis as any)['NSItemProvider']['ErrorCode'] || {};
(globalThis as any)['NSItemProvider']['ErrorCode'] = {
  UnknownError: -1,
  ItemUnavailableError: -1000,
  UnexpectedValueClassError: -1100,
  UnavailableCoercionError: -1200
};

(globalThis as any)['NSItemProvider']['NSItemProviderFileOptions'] = (globalThis as any)['NSItemProvider']['NSItemProviderFileOptions'] || {};
(globalThis as any)['NSItemProvider']['NSItemProviderFileOptions'] = {
  NSItemProviderFileOptionOpenInPlace: 1
};

(globalThis as any)['NSItemProvider']['NSItemProviderRepresentationVisibility'] = (globalThis as any)['NSItemProvider']['NSItemProviderRepresentationVisibility'] || {};
(globalThis as any)['NSItemProvider']['NSItemProviderRepresentationVisibility'] = {
  All: 0,
  Team: 1,
  Group: 2,
  OwnProcess: 3
};


(globalThis as any)['NSKeyValueObserving'] = (globalThis as any)['NSKeyValueObserving'] || {};
(globalThis as any)['NSKeyValueObserving']['NSKeyValueChange'] = (globalThis as any)['NSKeyValueObserving']['NSKeyValueChange'] || {};
(globalThis as any)['NSKeyValueObserving']['NSKeyValueChange'] = {
  Setting: 1,
  Insertion: 2,
  Removal: 3,
  Replacement: 4
};

(globalThis as any)['NSKeyValueObserving']['NSKeyValueObservingOptions'] = (globalThis as any)['NSKeyValueObserving']['NSKeyValueObservingOptions'] || {};
(globalThis as any)['NSKeyValueObserving']['NSKeyValueObservingOptions'] = {
  New: 1,
  Old: 2,
  Initial: 4,
  Prior: 8
};

(globalThis as any)['NSKeyValueObserving']['NSKeyValueSetMutationKind'] = (globalThis as any)['NSKeyValueObserving']['NSKeyValueSetMutationKind'] || {};
(globalThis as any)['NSKeyValueObserving']['NSKeyValueSetMutationKind'] = {
  UnionSetMutation: 1,
  MinusSetMutation: 2,
  IntersectSetMutation: 3,
  SetSetMutation: 4
};


(globalThis as any)['NSKeyedArchiver'] = (globalThis as any)['NSKeyedArchiver'] || {};

(globalThis as any)['NSLayoutAnchor'] = (globalThis as any)['NSLayoutAnchor'] || {};

(globalThis as any)['NSLayoutConstraint'] = (globalThis as any)['NSLayoutConstraint'] || {};
(globalThis as any)['NSLayoutConstraint']['Attribute'] = (globalThis as any)['NSLayoutConstraint']['Attribute'] || {};
(globalThis as any)['NSLayoutConstraint']['Attribute'] = {
  Left: 1,
  Right: 2,
  Top: 3,
  Bottom: 4,
  Leading: 5,
  Trailing: 6,
  Width: 7,
  Height: 8,
  CenterX: 9,
  CenterY: 10,
  LastBaseline: 11,
  Baseline: 11,
  FirstBaseline: 12,
  NotAnAttribute: 0
};

(globalThis as any)['NSLayoutConstraint']['FormatOptions'] = (globalThis as any)['NSLayoutConstraint']['FormatOptions'] || {};
(globalThis as any)['NSLayoutConstraint']['FormatOptions'] = {
  AlignAllLeft: 2,
  AlignAllRight: 4,
  AlignAllTop: 8,
  AlignAllBottom: 16,
  AlignAllLeading: 32,
  AlignAllTrailing: 64,
  AlignAllCenterX: 512,
  AlignAllCenterY: 1024,
  AlignAllLastBaseline: 2048,
  AlignAllFirstBaseline: 4096,
  AlignAllBaseline: 2048,
  AlignmentMask: 65535,
  DirectionLeadingToTrailing: 0,
  DirectionLeftToRight: 65536,
  DirectionRightToLeft: 131072,
  DirectionMask: 196608
};

(globalThis as any)['NSLayoutConstraint']['Orientation'] = (globalThis as any)['NSLayoutConstraint']['Orientation'] || {};
(globalThis as any)['NSLayoutConstraint']['Orientation'] = {
  Horizontal: 0,
  Vertical: 1
};

(globalThis as any)['NSLayoutConstraint']['Relation'] = (globalThis as any)['NSLayoutConstraint']['Relation'] || {};
(globalThis as any)['NSLayoutConstraint']['Relation'] = {
  LessThanOrEqual: -1,
  Equal: 0,
  GreaterThanOrEqual: 1
};


(globalThis as any)['NSLayoutGuide'] = (globalThis as any)['NSLayoutGuide'] || {};

(globalThis as any)['NSLayoutManager'] = (globalThis as any)['NSLayoutManager'] || {};
(globalThis as any)['NSLayoutManager']['ControlCharacterAction'] = (globalThis as any)['NSLayoutManager']['ControlCharacterAction'] || {};
(globalThis as any)['NSLayoutManager']['ControlCharacterAction'] = {
  ZeroAdvancement: 1,
  Whitespace: 2,
  HorizontalTab: 4,
  LineBreak: 8,
  ParagraphBreak: 16,
  ContainerBreak: 32
};

(globalThis as any)['NSLayoutManager']['GlyphProperty'] = (globalThis as any)['NSLayoutManager']['GlyphProperty'] || {};
(globalThis as any)['NSLayoutManager']['GlyphProperty'] = {
  Null: 1,
  ControlCharacter: 2,
  Elastic: 4,
  NonBaseCharacter: 8
};

(globalThis as any)['NSLayoutManager']['TextLayoutOrientation'] = (globalThis as any)['NSLayoutManager']['TextLayoutOrientation'] || {};
(globalThis as any)['NSLayoutManager']['TextLayoutOrientation'] = {
  Horizontal: 0,
  Vertical: 1
};

(globalThis as any)['NSLayoutManager']['TypesetterBehavior'] = (globalThis as any)['NSLayoutManager']['TypesetterBehavior'] || {};
(globalThis as any)['NSLayoutManager']['TypesetterBehavior'] = {
  LatestBehavior: -1,
  OriginalBehavior: 0,
  Behavior_10_2_WithCompatibility: 1,
  Behavior_10_2: 2,
  Behavior_10_3: 3,
  Behavior_10_4: 4
};


(globalThis as any)['NSLevelIndicator'] = (globalThis as any)['NSLevelIndicator'] || {};
(globalThis as any)['NSLevelIndicator']['PlaceholderVisibility'] = (globalThis as any)['NSLevelIndicator']['PlaceholderVisibility'] || {};
(globalThis as any)['NSLevelIndicator']['PlaceholderVisibility'] = {
  Automatic: 0,
  Always: 1,
  WhileEditing: 2
};

(globalThis as any)['NSLevelIndicator']['Style'] = (globalThis as any)['NSLevelIndicator']['Style'] || {};
(globalThis as any)['NSLevelIndicator']['Style'] = {
  Relevancy: 0,
  ContinuousCapacity: 1,
  DiscreteCapacity: 2,
  Rating: 3
};


(globalThis as any)['NSLevelIndicatorCell'] = (globalThis as any)['NSLevelIndicatorCell'] || {};
(globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator'] = (globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator'] || {};
(globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator']['PlaceholderVisibility'] = (globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator']['PlaceholderVisibility'] || {};
(globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator']['PlaceholderVisibility'] = {
  Automatic: 0,
  Always: 1,
  WhileEditing: 2
};

(globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator'] = (globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator'] || {};
(globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator']['Style'] = (globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator']['Style'] || {};
(globalThis as any)['NSLevelIndicatorCell']['NSLevelIndicator']['Style'] = {
  Relevancy: 0,
  ContinuousCapacity: 1,
  DiscreteCapacity: 2,
  Rating: 3
};


(globalThis as any)['NSLinguisticTagger'] = (globalThis as any)['NSLinguisticTagger'] || {};
(globalThis as any)['NSLinguisticTagger']['NSLinguisticTaggerUnit'] = (globalThis as any)['NSLinguisticTagger']['NSLinguisticTaggerUnit'] || {};
(globalThis as any)['NSLinguisticTagger']['NSLinguisticTaggerUnit'] = {
  Word: 0,
  Sentence: 1,
  Paragraph: 2,
  Document: 3
};

(globalThis as any)['NSLinguisticTagger']['Options'] = (globalThis as any)['NSLinguisticTagger']['Options'] || {};
(globalThis as any)['NSLinguisticTagger']['Options'] = {
  OmitWords: 1,
  OmitPunctuation: 2,
  OmitWhitespace: 4,
  OmitOther: 8,
  JoinNames: 16
};


(globalThis as any)['ListFormatter'] = (globalThis as any)['ListFormatter'] || {};

(globalThis as any)['NSLock'] = (globalThis as any)['NSLock'] || {};

(globalThis as any)['NSMagnificationGestureRecognizer'] = (globalThis as any)['NSMagnificationGestureRecognizer'] || {};

(globalThis as any)['NSManagedObject'] = (globalThis as any)['NSManagedObject'] || {};
(globalThis as any)['NSManagedObject']['NSSnapshotEventType'] = (globalThis as any)['NSManagedObject']['NSSnapshotEventType'] || {};
(globalThis as any)['NSManagedObject']['NSSnapshotEventType'] = {
  UndoInsertion: 2,
  UndoDeletion: 4,
  UndoUpdate: 8,
  Rollback: 16,
  Refresh: 32,
  MergePolicy: 64
};


(globalThis as any)['NSManagedObjectContext'] = (globalThis as any)['NSManagedObjectContext'] || {};
(globalThis as any)['NSManagedObjectContext']['NSManagedObjectContextConcurrencyType'] = (globalThis as any)['NSManagedObjectContext']['NSManagedObjectContextConcurrencyType'] || {};
(globalThis as any)['NSManagedObjectContext']['NSManagedObjectContextConcurrencyType'] = {
  ConfinementConcurrencyType: 0,
  PrivateQueueConcurrencyType: 1,
  MainQueueConcurrencyType: 2
};


(globalThis as any)['NSManagedObjectID'] = (globalThis as any)['NSManagedObjectID'] || {};

(globalThis as any)['NSManagedObjectModel'] = (globalThis as any)['NSManagedObjectModel'] || {};

(globalThis as any)['NSMapTable'] = (globalThis as any)['NSMapTable'] || {};

(globalThis as any)['NSMappingModel'] = (globalThis as any)['NSMappingModel'] || {};

(globalThis as any)['NSMatrix'] = (globalThis as any)['NSMatrix'] || {};
(globalThis as any)['NSMatrix']['Mode'] = (globalThis as any)['NSMatrix']['Mode'] || {};
(globalThis as any)['NSMatrix']['Mode'] = {
  RadioModeMatrix: 0,
  HighlightModeMatrix: 1,
  ListModeMatrix: 2,
  TrackModeMatrix: 3
};


(globalThis as any)['Measurement'] = (globalThis as any)['Measurement'] || {};

(globalThis as any)['NSMediaLibraryBrowserController'] = (globalThis as any)['NSMediaLibraryBrowserController'] || {};
(globalThis as any)['NSMediaLibraryBrowserController']['Library'] = (globalThis as any)['NSMediaLibraryBrowserController']['Library'] || {};
(globalThis as any)['NSMediaLibraryBrowserController']['Library'] = {
  Audio: 1,
  Image: 2,
  Movie: 4
};


(globalThis as any)['NSMenu'] = (globalThis as any)['NSMenu'] || {};
(globalThis as any)['NSMenu']['Properties'] = (globalThis as any)['NSMenu']['Properties'] || {};
(globalThis as any)['NSMenu']['Properties'] = {
  Title: 1,
  AttributedTitle: 2,
  KeyEquivalent: 4,
  Image: 8,
  Enabled: 16,
  AccessibilityDescription: 32
};


(globalThis as any)['NSMenuItem'] = (globalThis as any)['NSMenuItem'] || {};

(globalThis as any)['NSMenuItemCell'] = (globalThis as any)['NSMenuItemCell'] || {};

(globalThis as any)['NSMenuToolbarItem'] = (globalThis as any)['NSMenuToolbarItem'] || {};

(globalThis as any)['NSMergePolicy'] = (globalThis as any)['NSMergePolicy'] || {};
(globalThis as any)['NSMergePolicy']['NSMergePolicyType'] = (globalThis as any)['NSMergePolicy']['NSMergePolicyType'] || {};
(globalThis as any)['NSMergePolicy']['NSMergePolicyType'] = {
  ErrorMergePolicyType: 0,
  MergeByPropertyStoreTrumpMergePolicyType: 1,
  MergeByPropertyObjectTrumpMergePolicyType: 2,
  OverwriteMergePolicyType: 3,
  RollbackMergePolicyType: 4
};


(globalThis as any)['NSMethodSignature'] = (globalThis as any)['NSMethodSignature'] || {};

(globalThis as any)['NSMigrationManager'] = (globalThis as any)['NSMigrationManager'] || {};

(globalThis as any)['NSNetServices'] = (globalThis as any)['NSNetServices'] || {};
(globalThis as any)['NSNetServices']['NetService'] = (globalThis as any)['NSNetServices']['NetService'] || {};
(globalThis as any)['NSNetServices']['NetService']['ErrorCode'] = (globalThis as any)['NSNetServices']['NetService']['ErrorCode'] || {};
(globalThis as any)['NSNetServices']['NetService']['ErrorCode'] = {
  UnknownError: -72000,
  CollisionError: -72001,
  NotFoundError: -72002,
  ActivityInProgress: -72003,
  BadArgumentError: -72004,
  CancelledError: -72005,
  InvalidError: -72006,
  TimeoutError: -72007
};

(globalThis as any)['NSNetServices']['NetService'] = (globalThis as any)['NSNetServices']['NetService'] || {};
(globalThis as any)['NSNetServices']['NetService']['Options'] = (globalThis as any)['NSNetServices']['NetService']['Options'] || {};
(globalThis as any)['NSNetServices']['NetService']['Options'] = {
  NoAutoRename: 1,
  ListenForConnections: 2
};


(globalThis as any)['NSNib'] = (globalThis as any)['NSNib'] || {};

(globalThis as any)['Notification'] = (globalThis as any)['Notification'] || {};

(globalThis as any)['NotificationQueue'] = (globalThis as any)['NotificationQueue'] || {};
(globalThis as any)['NotificationQueue']['NotificationCoalescing'] = (globalThis as any)['NotificationQueue']['NotificationCoalescing'] || {};
(globalThis as any)['NotificationQueue']['NotificationCoalescing'] = {
  NoCoalescing: 0,
  CoalescingOnName: 1,
  CoalescingOnSender: 2
};

(globalThis as any)['NotificationQueue']['PostingStyle'] = (globalThis as any)['NotificationQueue']['PostingStyle'] || {};
(globalThis as any)['NotificationQueue']['PostingStyle'] = {
  WhenIdle: 1,
  ASAP: 2,
  Now: 3
};


(globalThis as any)['NumberFormatter'] = (globalThis as any)['NumberFormatter'] || {};
(globalThis as any)['NumberFormatter']['Behavior'] = (globalThis as any)['NumberFormatter']['Behavior'] || {};
(globalThis as any)['NumberFormatter']['Behavior'] = {
  rDefault: 0,
  r10_0: 1000,
  r10_4: 1040
};

(globalThis as any)['NumberFormatter']['PadPosition'] = (globalThis as any)['NumberFormatter']['PadPosition'] || {};
(globalThis as any)['NumberFormatter']['PadPosition'] = {
  BeforePrefix: 0,
  AfterPrefix: 1,
  BeforeSuffix: 2,
  AfterSuffix: 3
};

(globalThis as any)['NumberFormatter']['RoundingMode'] = (globalThis as any)['NumberFormatter']['RoundingMode'] || {};
(globalThis as any)['NumberFormatter']['RoundingMode'] = {
  Ceiling: 0,
  Floor: 1,
  Down: 2,
  Up: 3,
  HalfEven: 4,
  HalfDown: 5,
  HalfUp: 6
};

(globalThis as any)['NumberFormatter']['Style'] = (globalThis as any)['NumberFormatter']['Style'] || {};
(globalThis as any)['NumberFormatter']['Style'] = {
  NoStyle: 0,
  DecimalStyle: 1,
  CurrencyStyle: 2,
  PercentStyle: 3,
  ScientificStyle: 4,
  SpellOutStyle: 5,
  OrdinalStyle: 6,
  CurrencyISOCodeStyle: 8,
  CurrencyPluralStyle: 9,
  CurrencyAccountingStyle: 10
};


(globalThis as any)['NSObjCRuntime'] = (globalThis as any)['NSObjCRuntime'] || {};
(globalThis as any)['NSObjCRuntime']['ComparisonResult'] = (globalThis as any)['NSObjCRuntime']['ComparisonResult'] || {};
(globalThis as any)['NSObjCRuntime']['ComparisonResult'] = {
  Ascending: -1,
  Same: 0,
  Descending: 1
};

(globalThis as any)['NSObjCRuntime']['NSEnumerationOptions'] = (globalThis as any)['NSObjCRuntime']['NSEnumerationOptions'] || {};
(globalThis as any)['NSObjCRuntime']['NSEnumerationOptions'] = {
  Concurrent: 1,
  Reverse: 2
};

(globalThis as any)['NSObjCRuntime']['NSSortOptions'] = (globalThis as any)['NSObjCRuntime']['NSSortOptions'] || {};
(globalThis as any)['NSObjCRuntime']['NSSortOptions'] = {
  Concurrent: 1,
  Stable: 16
};

(globalThis as any)['NSObjCRuntime']['QualityOfService'] = (globalThis as any)['NSObjCRuntime']['QualityOfService'] || {};
(globalThis as any)['NSObjCRuntime']['QualityOfService'] = {
  UserInteractive: 33,
  UserInitiated: 25,
  Utility: 17,
  Background: 9,
  Default: -1
};


(globalThis as any)['NSObjectController'] = (globalThis as any)['NSObjectController'] || {};

(globalThis as any)['NSOpenPanel'] = (globalThis as any)['NSOpenPanel'] || {};

(globalThis as any)['Operation'] = (globalThis as any)['Operation'] || {};
(globalThis as any)['Operation']['QueuePriority'] = (globalThis as any)['Operation']['QueuePriority'] || {};
(globalThis as any)['Operation']['QueuePriority'] = {
  VeryLow: -8,
  Low: -4,
  Normal: 0,
  High: 4,
  VeryHigh: 8
};


(globalThis as any)['NSOrderedCollectionChange'] = (globalThis as any)['NSOrderedCollectionChange'] || {};
(globalThis as any)['NSOrderedCollectionChange']['NSCollectionChangeType'] = (globalThis as any)['NSOrderedCollectionChange']['NSCollectionChangeType'] || {};
(globalThis as any)['NSOrderedCollectionChange']['NSCollectionChangeType'] = {
  Insert: 0,
  Remove: 1
};


(globalThis as any)['NSOrderedSet'] = (globalThis as any)['NSOrderedSet'] || {};

(globalThis as any)['NSOrthography'] = (globalThis as any)['NSOrthography'] || {};

(globalThis as any)['NSOutlineView'] = (globalThis as any)['NSOutlineView'] || {};

(globalThis as any)['NSPDFImageRep'] = (globalThis as any)['NSPDFImageRep'] || {};

(globalThis as any)['NSPDFInfo'] = (globalThis as any)['NSPDFInfo'] || {};

(globalThis as any)['NSPDFPanel'] = (globalThis as any)['NSPDFPanel'] || {};
(globalThis as any)['NSPDFPanel']['Options'] = (globalThis as any)['NSPDFPanel']['Options'] || {};
(globalThis as any)['NSPDFPanel']['Options'] = {
  ShowsPaperSize: 4,
  ShowsOrientation: 8,
  RequestsParentDirectory: 16777216
};


(globalThis as any)['NSPICTImageRep'] = (globalThis as any)['NSPICTImageRep'] || {};

(globalThis as any)['NSPageController'] = (globalThis as any)['NSPageController'] || {};
(globalThis as any)['NSPageController']['TransitionStyle'] = (globalThis as any)['NSPageController']['TransitionStyle'] || {};
(globalThis as any)['NSPageController']['TransitionStyle'] = {
  StackHistory: 0,
  StackBook: 1,
  HorizontalStrip: 2
};


(globalThis as any)['NSPageLayout'] = (globalThis as any)['NSPageLayout'] || {};

(globalThis as any)['NSPanGestureRecognizer'] = (globalThis as any)['NSPanGestureRecognizer'] || {};

(globalThis as any)['NSPanel'] = (globalThis as any)['NSPanel'] || {};

(globalThis as any)['NSParagraphStyle'] = (globalThis as any)['NSParagraphStyle'] || {};
(globalThis as any)['NSParagraphStyle']['NSLineBreakMode'] = (globalThis as any)['NSParagraphStyle']['NSLineBreakMode'] || {};
(globalThis as any)['NSParagraphStyle']['NSLineBreakMode'] = {
  WordWrapping: 0,
  CharWrapping: 1,
  Clipping: 2,
  TruncatingHead: 3,
  TruncatingTail: 4,
  TruncatingMiddle: 5
};

(globalThis as any)['NSParagraphStyle']['TextTabType'] = (globalThis as any)['NSParagraphStyle']['TextTabType'] || {};
(globalThis as any)['NSParagraphStyle']['TextTabType'] = {
  LeftTabStopType: 0,
  RightTabStopType: 1,
  CenterTabStopType: 2,
  DecimalTabStopType: 3
};


(globalThis as any)['NSPasteboard'] = (globalThis as any)['NSPasteboard'] || {};
(globalThis as any)['NSPasteboard']['ContentsOptions'] = (globalThis as any)['NSPasteboard']['ContentsOptions'] || {};
(globalThis as any)['NSPasteboard']['ContentsOptions'] = {
  NSPasteboardContentsCurrentHostOnly: 1
};

(globalThis as any)['NSPasteboard']['ReadingOptions'] = (globalThis as any)['NSPasteboard']['ReadingOptions'] || {};
(globalThis as any)['NSPasteboard']['ReadingOptions'] = {
  Data: 0,
  String: 1,
  PropertyList: 2,
  KeyedArchive: 4
};

(globalThis as any)['NSPasteboard']['WritingOptions'] = (globalThis as any)['NSPasteboard']['WritingOptions'] || {};
(globalThis as any)['NSPasteboard']['WritingOptions'] = {
  NSPasteboardWritingPromised: 512
};


(globalThis as any)['NSPasteboardItem'] = (globalThis as any)['NSPasteboardItem'] || {};

(globalThis as any)['NSPathCell'] = (globalThis as any)['NSPathCell'] || {};
(globalThis as any)['NSPathCell']['NSPathControl'] = (globalThis as any)['NSPathCell']['NSPathControl'] || {};
(globalThis as any)['NSPathCell']['NSPathControl']['Style'] = (globalThis as any)['NSPathCell']['NSPathControl']['Style'] || {};
(globalThis as any)['NSPathCell']['NSPathControl']['Style'] = {
  Standard: 0,
  PopUp: 2,
  NavigationBar: 1
};


(globalThis as any)['NSPathComponentCell'] = (globalThis as any)['NSPathComponentCell'] || {};

(globalThis as any)['NSPathControl'] = (globalThis as any)['NSPathControl'] || {};
(globalThis as any)['NSPathControl']['Style'] = (globalThis as any)['NSPathControl']['Style'] || {};
(globalThis as any)['NSPathControl']['Style'] = {
  Standard: 0,
  PopUp: 2,
  NavigationBar: 1
};


(globalThis as any)['NSPathControlItem'] = (globalThis as any)['NSPathControlItem'] || {};

(globalThis as any)['NSPathUtilities'] = (globalThis as any)['NSPathUtilities'] || {};
(globalThis as any)['NSPathUtilities']['FileManager'] = (globalThis as any)['NSPathUtilities']['FileManager'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['DirectoryEnumerationOptions'] = (globalThis as any)['NSPathUtilities']['FileManager']['DirectoryEnumerationOptions'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['DirectoryEnumerationOptions'] = {
  SkipsSubdirectoryDescendants: 1,
  SkipsPackageDescendants: 2,
  SkipsHiddenFiles: 4,
  IncludesDirectoriesPostOrder: 8,
  ProducesRelativePathURLs: 16
};

(globalThis as any)['NSPathUtilities']['FileManager'] = (globalThis as any)['NSPathUtilities']['FileManager'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['ItemReplacementOptions'] = (globalThis as any)['NSPathUtilities']['FileManager']['ItemReplacementOptions'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['ItemReplacementOptions'] = {
  UsingNewMetadataOnly: 1,
  WithoutDeletingBackupItem: 2
};

(globalThis as any)['NSPathUtilities']['FileManager'] = (globalThis as any)['NSPathUtilities']['FileManager'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['SearchPathDirectory'] = (globalThis as any)['NSPathUtilities']['FileManager']['SearchPathDirectory'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['SearchPathDirectory'] = {
  ApplicationDirectory: 1,
  DemoApplicationDirectory: 2,
  DeveloperApplicationDirectory: 3,
  AdminApplicationDirectory: 4,
  LibraryDirectory: 5,
  DeveloperDirectory: 6,
  UserDirectory: 7,
  DocumentationDirectory: 8,
  DocumentDirectory: 9,
  CoreServiceDirectory: 10,
  AutosavedInformationDirectory: 11,
  DesktopDirectory: 12,
  CachesDirectory: 13,
  ApplicationSupportDirectory: 14,
  DownloadsDirectory: 15,
  InputMethodsDirectory: 16,
  MoviesDirectory: 17,
  MusicDirectory: 18,
  PicturesDirectory: 19,
  PrinterDescriptionDirectory: 20,
  SharedPublicDirectory: 21,
  PreferencePanesDirectory: 22,
  ApplicationScriptsDirectory: 23,
  ItemReplacementDirectory: 99,
  AllApplicationsDirectory: 100,
  AllLibrariesDirectory: 101,
  TrashDirectory: 102
};

(globalThis as any)['NSPathUtilities']['FileManager'] = (globalThis as any)['NSPathUtilities']['FileManager'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['SearchPathDomainMask'] = (globalThis as any)['NSPathUtilities']['FileManager']['SearchPathDomainMask'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['SearchPathDomainMask'] = {
  UserDomainMask: 1,
  LocalDomainMask: 2,
  NetworkDomainMask: 4,
  SystemDomainMask: 8,
  AllDomainsMask: 65535
};

(globalThis as any)['NSPathUtilities']['FileManager'] = (globalThis as any)['NSPathUtilities']['FileManager'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['URLRelationship'] = (globalThis as any)['NSPathUtilities']['FileManager']['URLRelationship'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['URLRelationship'] = {
  Contains: 0,
  Same: 1,
  Other: 2
};

(globalThis as any)['NSPathUtilities']['FileManager'] = (globalThis as any)['NSPathUtilities']['FileManager'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['UnmountOptions'] = (globalThis as any)['NSPathUtilities']['FileManager']['UnmountOptions'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['UnmountOptions'] = {
  AllPartitionsAndEjectDisk: 1,
  WithoutUI: 2
};

(globalThis as any)['NSPathUtilities']['FileManager'] = (globalThis as any)['NSPathUtilities']['FileManager'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['VolumeEnumerationOptions'] = (globalThis as any)['NSPathUtilities']['FileManager']['VolumeEnumerationOptions'] || {};
(globalThis as any)['NSPathUtilities']['FileManager']['VolumeEnumerationOptions'] = {
  SkipHiddenVolumes: 2,
  ProduceFileReferenceURLs: 4
};


(globalThis as any)['NSPersistentCloudKitContainer'] = (globalThis as any)['NSPersistentCloudKitContainer'] || {};
(globalThis as any)['NSPersistentCloudKitContainer']['NSPersistentCloudKitContainerSchemaInitializationOptions'] = (globalThis as any)['NSPersistentCloudKitContainer']['NSPersistentCloudKitContainerSchemaInitializationOptions'] || {};
(globalThis as any)['NSPersistentCloudKitContainer']['NSPersistentCloudKitContainerSchemaInitializationOptions'] = {
  None: 0,
  DryRun: 2,
  PrintSchema: 4
};


(globalThis as any)['NSPersistentCloudKitContainerOptions'] = (globalThis as any)['NSPersistentCloudKitContainerOptions'] || {};

(globalThis as any)['NSPersistentContainer'] = (globalThis as any)['NSPersistentContainer'] || {};

(globalThis as any)['NSPersistentDocument'] = (globalThis as any)['NSPersistentDocument'] || {};

(globalThis as any)['NSPersistentHistoryChange'] = (globalThis as any)['NSPersistentHistoryChange'] || {};
(globalThis as any)['NSPersistentHistoryChange']['NSPersistentHistoryChangeType'] = (globalThis as any)['NSPersistentHistoryChange']['NSPersistentHistoryChangeType'] || {};
(globalThis as any)['NSPersistentHistoryChange']['NSPersistentHistoryChangeType'] = {
  Insert: 0,
  Update: 1,
  Delete: 2
};


(globalThis as any)['NSPersistentHistoryChangeRequest'] = (globalThis as any)['NSPersistentHistoryChangeRequest'] || {};

(globalThis as any)['NSPersistentHistoryTransaction'] = (globalThis as any)['NSPersistentHistoryTransaction'] || {};

(globalThis as any)['NSPersistentStore'] = (globalThis as any)['NSPersistentStore'] || {};

(globalThis as any)['NSPersistentStoreCoordinator'] = (globalThis as any)['NSPersistentStoreCoordinator'] || {};

(globalThis as any)['NSPersistentStoreDescription'] = (globalThis as any)['NSPersistentStoreDescription'] || {};

(globalThis as any)['NSPersistentStoreRequest'] = (globalThis as any)['NSPersistentStoreRequest'] || {};
(globalThis as any)['NSPersistentStoreRequest']['NSPersistentStoreRequestType'] = (globalThis as any)['NSPersistentStoreRequest']['NSPersistentStoreRequestType'] || {};
(globalThis as any)['NSPersistentStoreRequest']['NSPersistentStoreRequestType'] = {
  FetchRequestType: 1,
  SaveRequestType: 2,
  BatchInsertRequestType: 5,
  BatchUpdateRequestType: 6,
  BatchDeleteRequestType: 7
};


(globalThis as any)['NSPersistentStoreResult'] = (globalThis as any)['NSPersistentStoreResult'] || {};
(globalThis as any)['NSPersistentStoreResult']['NSBatchDeleteRequestResultType'] = (globalThis as any)['NSPersistentStoreResult']['NSBatchDeleteRequestResultType'] || {};
(globalThis as any)['NSPersistentStoreResult']['NSBatchDeleteRequestResultType'] = {
  StatusOnly: 0,
  ObjectIDs: 1,
  Count: 2
};

(globalThis as any)['NSPersistentStoreResult']['NSBatchInsertRequestResultType'] = (globalThis as any)['NSPersistentStoreResult']['NSBatchInsertRequestResultType'] || {};
(globalThis as any)['NSPersistentStoreResult']['NSBatchInsertRequestResultType'] = {
  StatusOnly: 0,
  ObjectIDs: 1,
  Count: 2
};

(globalThis as any)['NSPersistentStoreResult']['NSBatchUpdateRequestResultType'] = (globalThis as any)['NSPersistentStoreResult']['NSBatchUpdateRequestResultType'] || {};
(globalThis as any)['NSPersistentStoreResult']['NSBatchUpdateRequestResultType'] = {
  StatusOnlyResultType: 0,
  UpdatedObjectIDsResultType: 1,
  UpdatedObjectsCountResultType: 2
};

(globalThis as any)['NSPersistentStoreResult']['NSPersistentHistoryResultType'] = (globalThis as any)['NSPersistentStoreResult']['NSPersistentHistoryResultType'] || {};
(globalThis as any)['NSPersistentStoreResult']['NSPersistentHistoryResultType'] = {
  StatusOnly: 0,
  ObjectIDs: 1,
  Count: 2,
  TransactionsOnly: 3,
  ChangesOnly: 4,
  TransactionsAndChanges: 5
};


(globalThis as any)['PersonNameComponents'] = (globalThis as any)['PersonNameComponents'] || {};

(globalThis as any)['PersonNameComponentsFormatter'] = (globalThis as any)['PersonNameComponentsFormatter'] || {};
(globalThis as any)['PersonNameComponentsFormatter']['Options'] = (globalThis as any)['PersonNameComponentsFormatter']['Options'] || {};
(globalThis as any)['PersonNameComponentsFormatter']['Options'] = {
  NSPersonNameComponentsFormatterPhonetic: 2
};

(globalThis as any)['PersonNameComponentsFormatter']['Style'] = (globalThis as any)['PersonNameComponentsFormatter']['Style'] || {};
(globalThis as any)['PersonNameComponentsFormatter']['Style'] = {
  Default: 0,
  Short: 1,
  Medium: 2,
  Long: 3,
  Abbreviated: 4
};


(globalThis as any)['NSPickerTouchBarItem'] = (globalThis as any)['NSPickerTouchBarItem'] || {};
(globalThis as any)['NSPickerTouchBarItem']['ControlRepresentation'] = (globalThis as any)['NSPickerTouchBarItem']['ControlRepresentation'] || {};
(globalThis as any)['NSPickerTouchBarItem']['ControlRepresentation'] = {
  Automatic: 0,
  Expanded: 1,
  Collapsed: 2
};

(globalThis as any)['NSPickerTouchBarItem']['SelectionMode'] = (globalThis as any)['NSPickerTouchBarItem']['SelectionMode'] || {};
(globalThis as any)['NSPickerTouchBarItem']['SelectionMode'] = {
  SelectOne: 0,
  SelectAny: 1,
  Momentary: 2
};


(globalThis as any)['NSPointerArray'] = (globalThis as any)['NSPointerArray'] || {};

(globalThis as any)['NSPointerFunctions'] = (globalThis as any)['NSPointerFunctions'] || {};
(globalThis as any)['NSPointerFunctions']['Options'] = (globalThis as any)['NSPointerFunctions']['Options'] || {};
(globalThis as any)['NSPointerFunctions']['Options'] = {
  StrongMemory: 0,
  ZeroingWeakMemory: 1,
  OpaqueMemory: 2,
  MallocMemory: 3,
  MachVirtualMemory: 4,
  WeakMemory: 5,
  ObjectPersonality: 0,
  OpaquePersonality: 256,
  ObjectPointerPersonality: 512,
  CStringPersonality: 768,
  StructPersonality: 1024,
  IntegerPersonality: 1280,
  CopyIn: 65536
};


(globalThis as any)['NSPopUpButton'] = (globalThis as any)['NSPopUpButton'] || {};
(globalThis as any)['NSPopUpButton']['ArrowPosition'] = (globalThis as any)['NSPopUpButton']['ArrowPosition'] || {};
(globalThis as any)['NSPopUpButton']['ArrowPosition'] = {
  NoArrow: 0,
  ArrowAtCenter: 1,
  ArrowAtBottom: 2
};


(globalThis as any)['NSPopUpButtonCell'] = (globalThis as any)['NSPopUpButtonCell'] || {};
(globalThis as any)['NSPopUpButtonCell']['NSPopUpButton'] = (globalThis as any)['NSPopUpButtonCell']['NSPopUpButton'] || {};
(globalThis as any)['NSPopUpButtonCell']['NSPopUpButton']['ArrowPosition'] = (globalThis as any)['NSPopUpButtonCell']['NSPopUpButton']['ArrowPosition'] || {};
(globalThis as any)['NSPopUpButtonCell']['NSPopUpButton']['ArrowPosition'] = {
  NoArrow: 0,
  ArrowAtCenter: 1,
  ArrowAtBottom: 2
};


(globalThis as any)['NSPopover'] = (globalThis as any)['NSPopover'] || {};
(globalThis as any)['NSPopover']['Behavior'] = (globalThis as any)['NSPopover']['Behavior'] || {};
(globalThis as any)['NSPopover']['Behavior'] = {
  ApplicationDefined: 0,
  Transient: 1,
  Semitransient: 2
};


(globalThis as any)['NSPopoverTouchBarItem'] = (globalThis as any)['NSPopoverTouchBarItem'] || {};

(globalThis as any)['Port'] = (globalThis as any)['Port'] || {};
(globalThis as any)['Port']['NSMachPort'] = (globalThis as any)['Port']['NSMachPort'] || {};
(globalThis as any)['Port']['NSMachPort']['Options'] = (globalThis as any)['Port']['NSMachPort']['Options'] || {};
(globalThis as any)['Port']['NSMachPort']['Options'] = {
  None: 0,
  SendRight: 1,
  ReceiveRight: 2
};


(globalThis as any)['NSPortCoder'] = (globalThis as any)['NSPortCoder'] || {};

(globalThis as any)['PortMessage'] = (globalThis as any)['PortMessage'] || {};

(globalThis as any)['NSPortNameServer'] = (globalThis as any)['NSPortNameServer'] || {};

(globalThis as any)['NSPredicate'] = (globalThis as any)['NSPredicate'] || {};

(globalThis as any)['NSPredicateEditor'] = (globalThis as any)['NSPredicateEditor'] || {};

(globalThis as any)['NSPredicateEditorRowTemplate'] = (globalThis as any)['NSPredicateEditorRowTemplate'] || {};

(globalThis as any)['NSPressGestureRecognizer'] = (globalThis as any)['NSPressGestureRecognizer'] || {};

(globalThis as any)['NSPressureConfiguration'] = (globalThis as any)['NSPressureConfiguration'] || {};

(globalThis as any)['NSPrintInfo'] = (globalThis as any)['NSPrintInfo'] || {};
(globalThis as any)['NSPrintInfo']['PaginationMode'] = (globalThis as any)['NSPrintInfo']['PaginationMode'] || {};
(globalThis as any)['NSPrintInfo']['PaginationMode'] = {
  Automatic: 0,
  Fit: 1,
  Clip: 2
};

(globalThis as any)['NSPrintInfo']['PaperOrientation'] = (globalThis as any)['NSPrintInfo']['PaperOrientation'] || {};
(globalThis as any)['NSPrintInfo']['PaperOrientation'] = {
  Portrait: 0,
  Landscape: 1
};


(globalThis as any)['NSPrintOperation'] = (globalThis as any)['NSPrintOperation'] || {};
(globalThis as any)['NSPrintOperation']['PageOrder'] = (globalThis as any)['NSPrintOperation']['PageOrder'] || {};
(globalThis as any)['NSPrintOperation']['PageOrder'] = {
  DescendingPageOrder: -1,
  SpecialPageOrder: 0,
  AscendingPageOrder: 1,
  UnknownPageOrder: 2
};

(globalThis as any)['NSPrintOperation']['RenderingQuality'] = (globalThis as any)['NSPrintOperation']['RenderingQuality'] || {};
(globalThis as any)['NSPrintOperation']['RenderingQuality'] = {
  Best: 0,
  Responsive: 1
};


(globalThis as any)['NSPrintPanel'] = (globalThis as any)['NSPrintPanel'] || {};
(globalThis as any)['NSPrintPanel']['Options'] = (globalThis as any)['NSPrintPanel']['Options'] || {};
(globalThis as any)['NSPrintPanel']['Options'] = {
  Copies: 1,
  PageRange: 2,
  PaperSize: 4,
  Orientation: 8,
  Scaling: 16,
  PrintSelection: 32,
  PageSetupAccessory: 256,
  Preview: 131072
};


(globalThis as any)['NSPrinter'] = (globalThis as any)['NSPrinter'] || {};
(globalThis as any)['NSPrinter']['TableStatus'] = (globalThis as any)['NSPrinter']['TableStatus'] || {};
(globalThis as any)['NSPrinter']['TableStatus'] = {
  OK: 0,
  NotFound: 1,
  Error: 2
};


(globalThis as any)['ProcessInfo'] = (globalThis as any)['ProcessInfo'] || {};
(globalThis as any)['ProcessInfo']['ActivityOptions'] = (globalThis as any)['ProcessInfo']['ActivityOptions'] || {};
(globalThis as any)['ProcessInfo']['ActivityOptions'] = {
  IdleDisplaySleepDisabled: 1099511627776,
  IdleSystemSleepDisabled: 1048576,
  SuddenTerminationDisabled: 16384,
  AutomaticTerminationDisabled: 32768,
  UserInitiated: 16777215,
  UserInitiatedAllowingIdleSystemSleep: 15728639,
  Background: 255,
  LatencyCritical: 1095216660480
};

(globalThis as any)['ProcessInfo']['ThermalState'] = (globalThis as any)['ProcessInfo']['ThermalState'] || {};
(globalThis as any)['ProcessInfo']['ThermalState'] = {
  Nominal: 0,
  Fair: 1,
  Serious: 2,
  Critical: 3
};


(globalThis as any)['Progress'] = (globalThis as any)['Progress'] || {};

(globalThis as any)['NSProgressIndicator'] = (globalThis as any)['NSProgressIndicator'] || {};
(globalThis as any)['NSProgressIndicator']['Style'] = (globalThis as any)['NSProgressIndicator']['Style'] || {};
(globalThis as any)['NSProgressIndicator']['Style'] = {
  Bar: 0,
  Spinning: 1
};


(globalThis as any)['NSPropertyDescription'] = (globalThis as any)['NSPropertyDescription'] || {};

(globalThis as any)['NSPropertyList'] = (globalThis as any)['NSPropertyList'] || {};
(globalThis as any)['NSPropertyList']['PropertyListSerialization'] = (globalThis as any)['NSPropertyList']['PropertyListSerialization'] || {};
(globalThis as any)['NSPropertyList']['PropertyListSerialization']['MutabilityOptions'] = (globalThis as any)['NSPropertyList']['PropertyListSerialization']['MutabilityOptions'] || {};
(globalThis as any)['NSPropertyList']['PropertyListSerialization']['MutabilityOptions'] = {
  Immutable: 0,
  MutableContainers: 1,
  MutableContainersAndLeaves: 2
};

(globalThis as any)['NSPropertyList']['PropertyListSerialization'] = (globalThis as any)['NSPropertyList']['PropertyListSerialization'] || {};
(globalThis as any)['NSPropertyList']['PropertyListSerialization']['PropertyListFormat'] = (globalThis as any)['NSPropertyList']['PropertyListSerialization']['PropertyListFormat'] || {};
(globalThis as any)['NSPropertyList']['PropertyListSerialization']['PropertyListFormat'] = {
  OpenStepFormat: 1,
  XMLFormat_v1_0: 100,
  BinaryFormat_v1_0: 200
};


(globalThis as any)['NSPropertyMapping'] = (globalThis as any)['NSPropertyMapping'] || {};

(globalThis as any)['NSProtocolChecker'] = (globalThis as any)['NSProtocolChecker'] || {};

(globalThis as any)['NSProxy'] = (globalThis as any)['NSProxy'] || {};

(globalThis as any)['NSQueryGenerationToken'] = (globalThis as any)['NSQueryGenerationToken'] || {};

(globalThis as any)['NSRegularExpression'] = (globalThis as any)['NSRegularExpression'] || {};
(globalThis as any)['NSRegularExpression']['MatchingFlags'] = (globalThis as any)['NSRegularExpression']['MatchingFlags'] || {};
(globalThis as any)['NSRegularExpression']['MatchingFlags'] = {
  Progress: 1,
  Completed: 2,
  HitEnd: 4,
  RequiredEnd: 8,
  InternalError: 16
};

(globalThis as any)['NSRegularExpression']['MatchingOptions'] = (globalThis as any)['NSRegularExpression']['MatchingOptions'] || {};
(globalThis as any)['NSRegularExpression']['MatchingOptions'] = {
  ReportProgress: 1,
  ReportCompletion: 2,
  Anchored: 4,
  WithTransparentBounds: 8,
  WithoutAnchoringBounds: 16
};

(globalThis as any)['NSRegularExpression']['Options'] = (globalThis as any)['NSRegularExpression']['Options'] || {};
(globalThis as any)['NSRegularExpression']['Options'] = {
  CaseInsensitive: 1,
  AllowCommentsAndWhitespace: 2,
  IgnoreMetacharacters: 4,
  DotMatchesLineSeparators: 8,
  AnchorsMatchLines: 16,
  UseUnixLineSeparators: 32,
  UseUnicodeWordBoundaries: 64
};


(globalThis as any)['NSRelationshipDescription'] = (globalThis as any)['NSRelationshipDescription'] || {};
(globalThis as any)['NSRelationshipDescription']['NSDeleteRule'] = (globalThis as any)['NSRelationshipDescription']['NSDeleteRule'] || {};
(globalThis as any)['NSRelationshipDescription']['NSDeleteRule'] = {
  NoActionDeleteRule: 0,
  NullifyDeleteRule: 1,
  CascadeDeleteRule: 2,
  DenyDeleteRule: 3
};


(globalThis as any)['RelativeDateTimeFormatter'] = (globalThis as any)['RelativeDateTimeFormatter'] || {};
(globalThis as any)['RelativeDateTimeFormatter']['DateTimeStyle'] = (globalThis as any)['RelativeDateTimeFormatter']['DateTimeStyle'] || {};
(globalThis as any)['RelativeDateTimeFormatter']['DateTimeStyle'] = {
  umeric: 0,
  amed: 1
};

(globalThis as any)['RelativeDateTimeFormatter']['UnitsStyle'] = (globalThis as any)['RelativeDateTimeFormatter']['UnitsStyle'] || {};
(globalThis as any)['RelativeDateTimeFormatter']['UnitsStyle'] = {
  Full: 0,
  SpellOut: 1,
  Short: 2,
  Abbreviated: 3
};


(globalThis as any)['NSResponder'] = (globalThis as any)['NSResponder'] || {};

(globalThis as any)['NSRotationGestureRecognizer'] = (globalThis as any)['NSRotationGestureRecognizer'] || {};

(globalThis as any)['NSRuleEditor'] = (globalThis as any)['NSRuleEditor'] || {};
(globalThis as any)['NSRuleEditor']['NestingMode'] = (globalThis as any)['NSRuleEditor']['NestingMode'] || {};
(globalThis as any)['NSRuleEditor']['NestingMode'] = {
  Single: 0,
  List: 1,
  Compound: 2,
  Simple: 3
};

(globalThis as any)['NSRuleEditor']['RowType'] = (globalThis as any)['NSRuleEditor']['RowType'] || {};
(globalThis as any)['NSRuleEditor']['RowType'] = {
  Simple: 0,
  Compound: 1
};


(globalThis as any)['NSRulerMarker'] = (globalThis as any)['NSRulerMarker'] || {};

(globalThis as any)['NSRulerView'] = (globalThis as any)['NSRulerView'] || {};
(globalThis as any)['NSRulerView']['Orientation'] = (globalThis as any)['NSRulerView']['Orientation'] || {};
(globalThis as any)['NSRulerView']['Orientation'] = {
  HorizontalRuler: 0,
  VerticalRuler: 1
};


(globalThis as any)['RunLoop'] = (globalThis as any)['RunLoop'] || {};

(globalThis as any)['NSRunningApplication'] = (globalThis as any)['NSRunningApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['ActivationOptions'] = (globalThis as any)['NSRunningApplication']['NSApplication']['ActivationOptions'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['ActivationOptions'] = {
  AllWindows: 1,
  IgnoringOtherApps: 2
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['ActivationPolicy'] = (globalThis as any)['NSRunningApplication']['NSApplication']['ActivationPolicy'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['ActivationPolicy'] = {
  Regular: 0,
  Accessory: 1,
  Prohibited: 2
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['DelegateReply'] = (globalThis as any)['NSRunningApplication']['NSApplication']['DelegateReply'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['DelegateReply'] = {
  Success: 0,
  Cancel: 1,
  Failure: 2
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['OcclusionState'] = (globalThis as any)['NSRunningApplication']['NSApplication']['OcclusionState'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['OcclusionState'] = {
  NSApplicationOcclusionStateVisible: 2
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['PresentationOptions'] = (globalThis as any)['NSRunningApplication']['NSApplication']['PresentationOptions'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['PresentationOptions'] = {
  Default: 0,
  AutoHideDock: 1,
  HideDock: 2,
  AutoHideMenuBar: 4,
  HideMenuBar: 8,
  DisableAppleMenu: 16,
  DisableProcessSwitching: 32,
  DisableForceQuit: 64,
  DisableSessionTermination: 128,
  DisableHideApplication: 256,
  DisableMenuBarTransparency: 512,
  FullScreen: 1024,
  AutoHideToolbar: 2048,
  DisableCursorLocationAssistance: 4096
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['PrintReply'] = (globalThis as any)['NSRunningApplication']['NSApplication']['PrintReply'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['PrintReply'] = {
  Cancelled: 0,
  Success: 1,
  Failure: 3,
  ReplyLater: 2
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['RemoteNotificationType'] = (globalThis as any)['NSRunningApplication']['NSApplication']['RemoteNotificationType'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['RemoteNotificationType'] = {
  None: 0,
  Badge: 1,
  Sound: 2,
  Alert: 4
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['RequestUserAttentionType'] = (globalThis as any)['NSRunningApplication']['NSApplication']['RequestUserAttentionType'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['RequestUserAttentionType'] = {
  CriticalRequest: 0,
  InformationalRequest: 10
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['TerminateReply'] = (globalThis as any)['NSRunningApplication']['NSApplication']['TerminateReply'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['TerminateReply'] = {
  Cancel: 0,
  Now: 1,
  Later: 2
};

(globalThis as any)['NSRunningApplication']['NSApplication'] = (globalThis as any)['NSRunningApplication']['NSApplication'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['WindowListOptions'] = (globalThis as any)['NSRunningApplication']['NSApplication']['WindowListOptions'] || {};
(globalThis as any)['NSRunningApplication']['NSApplication']['WindowListOptions'] = {
  NSWindowListOrderedFrontToBack: 1
};


(globalThis as any)['NSSaveChangesRequest'] = (globalThis as any)['NSSaveChangesRequest'] || {};

(globalThis as any)['NSSavePanel'] = (globalThis as any)['NSSavePanel'] || {};

(globalThis as any)['Scanner'] = (globalThis as any)['Scanner'] || {};

(globalThis as any)['NSScreen'] = (globalThis as any)['NSScreen'] || {};

(globalThis as any)['NSScriptClassDescription'] = (globalThis as any)['NSScriptClassDescription'] || {};

(globalThis as any)['NSScriptCoercionHandler'] = (globalThis as any)['NSScriptCoercionHandler'] || {};

(globalThis as any)['NSScriptCommand'] = (globalThis as any)['NSScriptCommand'] || {};

(globalThis as any)['NSScriptCommandDescription'] = (globalThis as any)['NSScriptCommandDescription'] || {};

(globalThis as any)['NSScriptExecutionContext'] = (globalThis as any)['NSScriptExecutionContext'] || {};

(globalThis as any)['NSScriptObjectSpecifiers'] = (globalThis as any)['NSScriptObjectSpecifiers'] || {};
(globalThis as any)['NSScriptObjectSpecifiers']['NSPositionalSpecifier'] = (globalThis as any)['NSScriptObjectSpecifiers']['NSPositionalSpecifier'] || {};
(globalThis as any)['NSScriptObjectSpecifiers']['NSPositionalSpecifier']['InsertionPosition'] = (globalThis as any)['NSScriptObjectSpecifiers']['NSPositionalSpecifier']['InsertionPosition'] || {};
(globalThis as any)['NSScriptObjectSpecifiers']['NSPositionalSpecifier']['InsertionPosition'] = {
  After: 0,
  Before: 1,
  Beginning: 2,
  End: 3,
  Replace: 4
};

(globalThis as any)['NSScriptObjectSpecifiers']['NSRelativeSpecifier'] = (globalThis as any)['NSScriptObjectSpecifiers']['NSRelativeSpecifier'] || {};
(globalThis as any)['NSScriptObjectSpecifiers']['NSRelativeSpecifier']['RelativePosition'] = (globalThis as any)['NSScriptObjectSpecifiers']['NSRelativeSpecifier']['RelativePosition'] || {};
(globalThis as any)['NSScriptObjectSpecifiers']['NSRelativeSpecifier']['RelativePosition'] = {
  After: 0,
  Before: 1
};

(globalThis as any)['NSScriptObjectSpecifiers']['NSWhoseSpecifier'] = (globalThis as any)['NSScriptObjectSpecifiers']['NSWhoseSpecifier'] || {};
(globalThis as any)['NSScriptObjectSpecifiers']['NSWhoseSpecifier']['SubelementIdentifier'] = (globalThis as any)['NSScriptObjectSpecifiers']['NSWhoseSpecifier']['SubelementIdentifier'] || {};
(globalThis as any)['NSScriptObjectSpecifiers']['NSWhoseSpecifier']['SubelementIdentifier'] = {
  IndexSubelement: 0,
  EverySubelement: 1,
  MiddleSubelement: 2,
  RandomSubelement: 3,
  NoSubelement: 4
};


(globalThis as any)['NSScriptStandardSuiteCommands'] = (globalThis as any)['NSScriptStandardSuiteCommands'] || {};
(globalThis as any)['NSScriptStandardSuiteCommands']['NSSaveOptions'] = (globalThis as any)['NSScriptStandardSuiteCommands']['NSSaveOptions'] || {};
(globalThis as any)['NSScriptStandardSuiteCommands']['NSSaveOptions'] = {
  Yes: 0,
  No: 1,
  Ask: 2
};


(globalThis as any)['NSScriptSuiteRegistry'] = (globalThis as any)['NSScriptSuiteRegistry'] || {};

(globalThis as any)['NSScriptWhoseTests'] = (globalThis as any)['NSScriptWhoseTests'] || {};
(globalThis as any)['NSScriptWhoseTests']['NSSpecifierTest'] = (globalThis as any)['NSScriptWhoseTests']['NSSpecifierTest'] || {};
(globalThis as any)['NSScriptWhoseTests']['NSSpecifierTest']['TestComparisonOperation'] = (globalThis as any)['NSScriptWhoseTests']['NSSpecifierTest']['TestComparisonOperation'] || {};
(globalThis as any)['NSScriptWhoseTests']['NSSpecifierTest']['TestComparisonOperation'] = {
  EqualToComparison: 0,
  LessThanOrEqualToComparison: 1,
  LessThanComparison: 2,
  GreaterThanOrEqualToComparison: 3,
  GreaterThanComparison: 4,
  BeginsWithComparison: 5,
  EndsWithComparison: 6,
  ContainsComparison: 7
};


(globalThis as any)['NSScrollView'] = (globalThis as any)['NSScrollView'] || {};
(globalThis as any)['NSScrollView']['Elasticity'] = (globalThis as any)['NSScrollView']['Elasticity'] || {};
(globalThis as any)['NSScrollView']['Elasticity'] = {
  Automatic: 0,
  None: 1,
  Allowed: 2
};

(globalThis as any)['NSScrollView']['FindBarPosition'] = (globalThis as any)['NSScrollView']['FindBarPosition'] || {};
(globalThis as any)['NSScrollView']['FindBarPosition'] = {
  AboveHorizontalRuler: 0,
  AboveContent: 1,
  BelowContent: 2
};


(globalThis as any)['NSScroller'] = (globalThis as any)['NSScroller'] || {};
(globalThis as any)['NSScroller']['KnobStyle'] = (globalThis as any)['NSScroller']['KnobStyle'] || {};
(globalThis as any)['NSScroller']['KnobStyle'] = {
  Default: 0,
  Dark: 1,
  Light: 2
};

(globalThis as any)['NSScroller']['Part'] = (globalThis as any)['NSScroller']['Part'] || {};
(globalThis as any)['NSScroller']['Part'] = {
  NoPart: 0,
  DecrementPage: 1,
  Knob: 2,
  IncrementPage: 3,
  DecrementLine: 4,
  IncrementLine: 5,
  KnobSlot: 6
};

(globalThis as any)['NSScroller']['Style'] = (globalThis as any)['NSScroller']['Style'] || {};
(globalThis as any)['NSScroller']['Style'] = {
  Legacy: 0,
  Overlay: 1
};

(globalThis as any)['NSScroller']['UsableParts'] = (globalThis as any)['NSScroller']['UsableParts'] || {};
(globalThis as any)['NSScroller']['UsableParts'] = {
  NoScrollerParts: 0,
  OnlyScrollerArrows: 1,
  AllScrollerParts: 2
};


(globalThis as any)['NSScrubber'] = (globalThis as any)['NSScrubber'] || {};
(globalThis as any)['NSScrubber']['Alignment'] = (globalThis as any)['NSScrubber']['Alignment'] || {};
(globalThis as any)['NSScrubber']['Alignment'] = {
  None: 0,
  Leading: 1,
  Trailing: 2,
  Center: 3
};

(globalThis as any)['NSScrubber']['Mode'] = (globalThis as any)['NSScrubber']['Mode'] || {};
(globalThis as any)['NSScrubber']['Mode'] = {
  ixed: 0,
  ree: 1
};


(globalThis as any)['NSScrubberLayout'] = (globalThis as any)['NSScrubberLayout'] || {};

(globalThis as any)['NSSearchField'] = (globalThis as any)['NSSearchField'] || {};

(globalThis as any)['NSSearchFieldCell'] = (globalThis as any)['NSSearchFieldCell'] || {};

(globalThis as any)['NSSegmentedCell'] = (globalThis as any)['NSSegmentedCell'] || {};

(globalThis as any)['NSSegmentedControl'] = (globalThis as any)['NSSegmentedControl'] || {};
(globalThis as any)['NSSegmentedControl']['Distribution'] = (globalThis as any)['NSSegmentedControl']['Distribution'] || {};
(globalThis as any)['NSSegmentedControl']['Distribution'] = {
  t: 0,
  ll: 1,
  llEqually: 2,
  llProportionally: 3
};

(globalThis as any)['NSSegmentedControl']['Style'] = (globalThis as any)['NSSegmentedControl']['Style'] || {};
(globalThis as any)['NSSegmentedControl']['Style'] = {
  Automatic: 0,
  Rounded: 1,
  RoundRect: 3,
  TexturedSquare: 4,
  SmallSquare: 6,
  Separated: 8,
  TexturedRounded: 2,
  Capsule: 5
};

(globalThis as any)['NSSegmentedControl']['SwitchTracking'] = (globalThis as any)['NSSegmentedControl']['SwitchTracking'] || {};
(globalThis as any)['NSSegmentedControl']['SwitchTracking'] = {
  SelectOne: 0,
  SelectAny: 1,
  Momentary: 2,
  MomentaryAccelerator: 3
};


(globalThis as any)['NSShadow'] = (globalThis as any)['NSShadow'] || {};

(globalThis as any)['NSSharingService'] = (globalThis as any)['NSSharingService'] || {};
(globalThis as any)['NSSharingService']['CloudKitOptions'] = (globalThis as any)['NSSharingService']['CloudKitOptions'] || {};
(globalThis as any)['NSSharingService']['CloudKitOptions'] = {
  Standard: 0,
  AllowPublic: 1,
  AllowPrivate: 2,
  AllowReadOnly: 16,
  AllowReadWrite: 32
};

(globalThis as any)['NSSharingService']['SharingContentScope'] = (globalThis as any)['NSSharingService']['SharingContentScope'] || {};
(globalThis as any)['NSSharingService']['SharingContentScope'] = {
  Item: 0,
  Partial: 1,
  Full: 2
};


(globalThis as any)['NSSharingServicePickerToolbarItem'] = (globalThis as any)['NSSharingServicePickerToolbarItem'] || {};

(globalThis as any)['NSSharingServicePickerTouchBarItem'] = (globalThis as any)['NSSharingServicePickerTouchBarItem'] || {};

(globalThis as any)['NSSlider'] = (globalThis as any)['NSSlider'] || {};
(globalThis as any)['NSSlider']['SliderType'] = (globalThis as any)['NSSlider']['SliderType'] || {};
(globalThis as any)['NSSlider']['SliderType'] = {
  Linear: 0,
  Circular: 1
};

(globalThis as any)['NSSlider']['TickMarkPosition'] = (globalThis as any)['NSSlider']['TickMarkPosition'] || {};
(globalThis as any)['NSSlider']['TickMarkPosition'] = {
  Below: 0,
  Above: 1,
  Leading: 1,
  Trailing: 0
};


(globalThis as any)['NSSliderAccessory'] = (globalThis as any)['NSSliderAccessory'] || {};

(globalThis as any)['NSSliderCell'] = (globalThis as any)['NSSliderCell'] || {};
(globalThis as any)['NSSliderCell']['NSSlider'] = (globalThis as any)['NSSliderCell']['NSSlider'] || {};
(globalThis as any)['NSSliderCell']['NSSlider']['SliderType'] = (globalThis as any)['NSSliderCell']['NSSlider']['SliderType'] || {};
(globalThis as any)['NSSliderCell']['NSSlider']['SliderType'] = {
  Linear: 0,
  Circular: 1
};

(globalThis as any)['NSSliderCell']['NSSlider'] = (globalThis as any)['NSSliderCell']['NSSlider'] || {};
(globalThis as any)['NSSliderCell']['NSSlider']['TickMarkPosition'] = (globalThis as any)['NSSliderCell']['NSSlider']['TickMarkPosition'] || {};
(globalThis as any)['NSSliderCell']['NSSlider']['TickMarkPosition'] = {
  Below: 0,
  Above: 1,
  Leading: 1,
  Trailing: 0
};


(globalThis as any)['NSSliderTouchBarItem'] = (globalThis as any)['NSSliderTouchBarItem'] || {};

(globalThis as any)['NSSortDescriptor'] = (globalThis as any)['NSSortDescriptor'] || {};

(globalThis as any)['NSSound'] = (globalThis as any)['NSSound'] || {};

(globalThis as any)['NSSpeechRecognizer'] = (globalThis as any)['NSSpeechRecognizer'] || {};

(globalThis as any)['NSSpeechSynthesizer'] = (globalThis as any)['NSSpeechSynthesizer'] || {};
(globalThis as any)['NSSpeechSynthesizer']['Boundary'] = (globalThis as any)['NSSpeechSynthesizer']['Boundary'] || {};
(globalThis as any)['NSSpeechSynthesizer']['Boundary'] = {
  ImmediateBoundary: 0,
  WordBoundary: 1,
  SentenceBoundary: 2
};


(globalThis as any)['NSSpellChecker'] = (globalThis as any)['NSSpellChecker'] || {};
(globalThis as any)['NSSpellChecker']['CorrectionIndicatorType'] = (globalThis as any)['NSSpellChecker']['CorrectionIndicatorType'] || {};
(globalThis as any)['NSSpellChecker']['CorrectionIndicatorType'] = {
  Default: 0,
  Reversion: 1,
  Guesses: 2
};

(globalThis as any)['NSSpellChecker']['CorrectionResponse'] = (globalThis as any)['NSSpellChecker']['CorrectionResponse'] || {};
(globalThis as any)['NSSpellChecker']['CorrectionResponse'] = {
  None: 0,
  Accepted: 1,
  Rejected: 2,
  Ignored: 3,
  Edited: 4,
  Reverted: 5
};


(globalThis as any)['NSSpellServer'] = (globalThis as any)['NSSpellServer'] || {};

(globalThis as any)['NSSplitView'] = (globalThis as any)['NSSplitView'] || {};
(globalThis as any)['NSSplitView']['DividerStyle'] = (globalThis as any)['NSSplitView']['DividerStyle'] || {};
(globalThis as any)['NSSplitView']['DividerStyle'] = {
  Thick: 1,
  Thin: 2,
  PaneSplitter: 3
};


(globalThis as any)['NSSplitViewController'] = (globalThis as any)['NSSplitViewController'] || {};

(globalThis as any)['NSSplitViewItem'] = (globalThis as any)['NSSplitViewItem'] || {};
(globalThis as any)['NSSplitViewItem']['Behavior'] = (globalThis as any)['NSSplitViewItem']['Behavior'] || {};
(globalThis as any)['NSSplitViewItem']['Behavior'] = {
  Default: 0,
  Sidebar: 1,
  ContentList: 2
};

(globalThis as any)['NSSplitViewItem']['CollapseBehavior'] = (globalThis as any)['NSSplitViewItem']['CollapseBehavior'] || {};
(globalThis as any)['NSSplitViewItem']['CollapseBehavior'] = {
  Default: 0,
  PreferResizingSplitViewWithFixedSiblings: 1,
  PreferResizingSiblingsWithFixedSplitView: 2,
  UseConstraints: 3
};


(globalThis as any)['NSStackView'] = (globalThis as any)['NSStackView'] || {};
(globalThis as any)['NSStackView']['Distribution'] = (globalThis as any)['NSStackView']['Distribution'] || {};
(globalThis as any)['NSStackView']['Distribution'] = {
  GravityAreas: -1,
  Fill: 0,
  FillEqually: 1,
  FillProportionally: 2,
  EqualSpacing: 3,
  EqualCentering: 4
};

(globalThis as any)['NSStackView']['Gravity'] = (globalThis as any)['NSStackView']['Gravity'] || {};
(globalThis as any)['NSStackView']['Gravity'] = {
  Top: 1,
  Leading: 1,
  Center: 2,
  Bottom: 3,
  Trailing: 3
};


(globalThis as any)['NSStatusBar'] = (globalThis as any)['NSStatusBar'] || {};

(globalThis as any)['NSStatusBarButton'] = (globalThis as any)['NSStatusBarButton'] || {};

(globalThis as any)['NSStatusItem'] = (globalThis as any)['NSStatusItem'] || {};
(globalThis as any)['NSStatusItem']['Behavior'] = (globalThis as any)['NSStatusItem']['Behavior'] || {};
(globalThis as any)['NSStatusItem']['Behavior'] = {
  RemovalAllowed: 2,
  TerminationOnRemoval: 4
};


(globalThis as any)['NSStepper'] = (globalThis as any)['NSStepper'] || {};

(globalThis as any)['NSStepperCell'] = (globalThis as any)['NSStepperCell'] || {};

(globalThis as any)['NSStepperTouchBarItem'] = (globalThis as any)['NSStepperTouchBarItem'] || {};

(globalThis as any)['NSStoryboard'] = (globalThis as any)['NSStoryboard'] || {};

(globalThis as any)['NSStoryboardSegue'] = (globalThis as any)['NSStoryboardSegue'] || {};

(globalThis as any)['Stream'] = (globalThis as any)['Stream'] || {};
(globalThis as any)['Stream']['Event'] = (globalThis as any)['Stream']['Event'] || {};
(globalThis as any)['Stream']['Event'] = {
  None: 0,
  OpenCompleted: 1,
  HasBytesAvailable: 2,
  HasSpaceAvailable: 4,
  ErrorOccurred: 8,
  EndEncountered: 16
};

(globalThis as any)['Stream']['Status'] = (globalThis as any)['Stream']['Status'] || {};
(globalThis as any)['Stream']['Status'] = {
  NotOpen: 0,
  Opening: 1,
  Open: 2,
  Reading: 3,
  Writing: 4,
  AtEnd: 5,
  Closed: 6,
  Error: 7
};


(globalThis as any)['String'] = (globalThis as any)['String'] || {};
(globalThis as any)['String']['CompareOptions'] = (globalThis as any)['String']['CompareOptions'] || {};
(globalThis as any)['String']['CompareOptions'] = {
  CaseInsensitiveSearch: 1,
  LiteralSearch: 2,
  BackwardsSearch: 4,
  AnchoredSearch: 8,
  NumericSearch: 64,
  DiacriticInsensitiveSearch: 128,
  WidthInsensitiveSearch: 256,
  ForcedOrderingSearch: 512,
  RegularExpressionSearch: 1024
};

(globalThis as any)['String']['DrawingOptions'] = (globalThis as any)['String']['DrawingOptions'] || {};
(globalThis as any)['String']['DrawingOptions'] = {
  UsesLineFragmentOrigin: 1,
  UsesFontLeading: 2,
  UsesDeviceMetrics: 8,
  TruncatesLastVisibleLine: 32,
  DisableScreenFontSubstitution: 4,
  OneShot: 16
};

(globalThis as any)['String']['EncodingConversionOptions'] = (globalThis as any)['String']['EncodingConversionOptions'] || {};
(globalThis as any)['String']['EncodingConversionOptions'] = {
  AllowLossy: 1,
  ExternalRepresentation: 2
};

(globalThis as any)['String']['EnumerationOptions'] = (globalThis as any)['String']['EnumerationOptions'] || {};
(globalThis as any)['String']['EnumerationOptions'] = {
  ByLines: 0,
  ByParagraphs: 1,
  ByComposedCharacterSequences: 2,
  ByWords: 3,
  BySentences: 4,
  Reverse: 256,
  SubstringNotRequired: 512,
  Localized: 1024
};


(globalThis as any)['NSStringDrawing'] = (globalThis as any)['NSStringDrawing'] || {};
(globalThis as any)['NSStringDrawing']['String'] = (globalThis as any)['NSStringDrawing']['String'] || {};
(globalThis as any)['NSStringDrawing']['String']['DrawingOptions'] = (globalThis as any)['NSStringDrawing']['String']['DrawingOptions'] || {};
(globalThis as any)['NSStringDrawing']['String']['DrawingOptions'] = {
  UsesLineFragmentOrigin: 1,
  UsesFontLeading: 2,
  UsesDeviceMetrics: 8,
  TruncatesLastVisibleLine: 32,
  DisableScreenFontSubstitution: 4,
  OneShot: 16
};


(globalThis as any)['NSSwitch'] = (globalThis as any)['NSSwitch'] || {};

(globalThis as any)['NSTabView'] = (globalThis as any)['NSTabView'] || {};
(globalThis as any)['NSTabView']['TabPosition'] = (globalThis as any)['NSTabView']['TabPosition'] || {};
(globalThis as any)['NSTabView']['TabPosition'] = {
  None: 0,
  Top: 1,
  Left: 2,
  Bottom: 3,
  Right: 4
};

(globalThis as any)['NSTabView']['TabType'] = (globalThis as any)['NSTabView']['TabType'] || {};
(globalThis as any)['NSTabView']['TabType'] = {
  TopTabsBezelBorder: 0,
  LeftTabsBezelBorder: 1,
  BottomTabsBezelBorder: 2,
  RightTabsBezelBorder: 3,
  NoTabsBezelBorder: 4,
  NoTabsLineBorder: 5,
  NoTabsNoBorder: 6
};

(globalThis as any)['NSTabView']['TabViewBorderType'] = (globalThis as any)['NSTabView']['TabViewBorderType'] || {};
(globalThis as any)['NSTabView']['TabViewBorderType'] = {
  None: 0,
  Line: 1,
  Bezel: 2
};


(globalThis as any)['NSTabViewController'] = (globalThis as any)['NSTabViewController'] || {};
(globalThis as any)['NSTabViewController']['TabStyle'] = (globalThis as any)['NSTabViewController']['TabStyle'] || {};
(globalThis as any)['NSTabViewController']['TabStyle'] = {
  SegmentedControlOnTop: 0,
  SegmentedControlOnBottom: 1,
  Toolbar: 2,
  Unspecified: -1
};


(globalThis as any)['NSTabViewItem'] = (globalThis as any)['NSTabViewItem'] || {};
(globalThis as any)['NSTabViewItem']['State'] = (globalThis as any)['NSTabViewItem']['State'] || {};
(globalThis as any)['NSTabViewItem']['State'] = {
  SelectedTab: 0,
  BackgroundTab: 1,
  PressedTab: 2
};


(globalThis as any)['NSTableCellView'] = (globalThis as any)['NSTableCellView'] || {};

(globalThis as any)['NSTableColumn'] = (globalThis as any)['NSTableColumn'] || {};
(globalThis as any)['NSTableColumn']['ResizingOptions'] = (globalThis as any)['NSTableColumn']['ResizingOptions'] || {};
(globalThis as any)['NSTableColumn']['ResizingOptions'] = {
  NoResizing: 0,
  AutoresizingMask: 1,
  UserResizingMask: 2
};


(globalThis as any)['NSTableHeaderCell'] = (globalThis as any)['NSTableHeaderCell'] || {};

(globalThis as any)['NSTableHeaderView'] = (globalThis as any)['NSTableHeaderView'] || {};

(globalThis as any)['NSTableRowView'] = (globalThis as any)['NSTableRowView'] || {};

(globalThis as any)['NSTableView'] = (globalThis as any)['NSTableView'] || {};
(globalThis as any)['NSTableView']['AnimationOptions'] = (globalThis as any)['NSTableView']['AnimationOptions'] || {};
(globalThis as any)['NSTableView']['AnimationOptions'] = {
  EffectNone: 0,
  EffectFade: 1,
  EffectGap: 2,
  SlideUp: 16,
  SlideDown: 32,
  SlideLeft: 48,
  SlideRight: 64
};

(globalThis as any)['NSTableView']['ColumnAutoresizingStyle'] = (globalThis as any)['NSTableView']['ColumnAutoresizingStyle'] || {};
(globalThis as any)['NSTableView']['ColumnAutoresizingStyle'] = {
  NoColumnAutoresizing: 0,
  UniformColumnAutoresizingStyle: 1,
  SequentialColumnAutoresizingStyle: 2,
  ReverseSequentialColumnAutoresizingStyle: 3,
  LastColumnOnlyAutoresizingStyle: 4,
  FirstColumnOnlyAutoresizingStyle: 5
};

(globalThis as any)['NSTableView']['DraggingDestinationFeedbackStyle'] = (globalThis as any)['NSTableView']['DraggingDestinationFeedbackStyle'] || {};
(globalThis as any)['NSTableView']['DraggingDestinationFeedbackStyle'] = {
  None: -1,
  Regular: 0,
  SourceList: 1,
  Gap: 2
};

(globalThis as any)['NSTableView']['DropOperation'] = (globalThis as any)['NSTableView']['DropOperation'] || {};
(globalThis as any)['NSTableView']['DropOperation'] = {
  On: 0,
  Above: 1
};

(globalThis as any)['NSTableView']['GridLineStyle'] = (globalThis as any)['NSTableView']['GridLineStyle'] || {};
(globalThis as any)['NSTableView']['GridLineStyle'] = {
  GridNone: 0,
  SolidVerticalGridLineMask: 1,
  SolidHorizontalGridLineMask: 2,
  DashedHorizontalGridLineMask: 8
};

(globalThis as any)['NSTableView']['RowActionEdge'] = (globalThis as any)['NSTableView']['RowActionEdge'] || {};
(globalThis as any)['NSTableView']['RowActionEdge'] = {
  Leading: 0,
  Trailing: 1
};

(globalThis as any)['NSTableView']['RowSizeStyle'] = (globalThis as any)['NSTableView']['RowSizeStyle'] || {};
(globalThis as any)['NSTableView']['RowSizeStyle'] = {
  Default: -1,
  Custom: 0,
  Small: 1,
  Medium: 2,
  Large: 3
};

(globalThis as any)['NSTableView']['SelectionHighlightStyle'] = (globalThis as any)['NSTableView']['SelectionHighlightStyle'] || {};
(globalThis as any)['NSTableView']['SelectionHighlightStyle'] = {
  None: -1,
  Regular: 0,
  SourceList: 1
};


(globalThis as any)['NSTableViewRowAction'] = (globalThis as any)['NSTableViewRowAction'] || {};
(globalThis as any)['NSTableViewRowAction']['Style'] = (globalThis as any)['NSTableViewRowAction']['Style'] || {};
(globalThis as any)['NSTableViewRowAction']['Style'] = {
  Regular: 0,
  Destructive: 1
};


(globalThis as any)['Process'] = (globalThis as any)['Process'] || {};
(globalThis as any)['Process']['TerminationReason'] = (globalThis as any)['Process']['TerminationReason'] || {};
(globalThis as any)['Process']['TerminationReason'] = {
  Exit: 1,
  UncaughtSignal: 2
};


(globalThis as any)['NSText'] = (globalThis as any)['NSText'] || {};
(globalThis as any)['NSText']['NSTextAlignment'] = (globalThis as any)['NSText']['NSTextAlignment'] || {};
(globalThis as any)['NSText']['NSTextAlignment'] = {
  Left: 0,
  Right: 1,
  Center: 2,
  Justified: 3,
  Natural: 4
};

(globalThis as any)['NSText']['NSTextMovement'] = (globalThis as any)['NSText']['NSTextMovement'] || {};
(globalThis as any)['NSText']['NSTextMovement'] = {
  Return: 16,
  Tab: 17,
  Backtab: 18,
  Left: 19,
  Right: 20,
  Up: 21,
  Down: 22,
  Cancel: 23,
  Other: 0
};

(globalThis as any)['NSText']['NSWritingDirection'] = (globalThis as any)['NSText']['NSWritingDirection'] || {};
(globalThis as any)['NSText']['NSWritingDirection'] = {
  Natural: -1,
  LeftToRight: 0,
  RightToLeft: 1
};


(globalThis as any)['NSTextAlternatives'] = (globalThis as any)['NSTextAlternatives'] || {};

(globalThis as any)['NSTextAttachment'] = (globalThis as any)['NSTextAttachment'] || {};

(globalThis as any)['NSTextCheckingClient'] = (globalThis as any)['NSTextCheckingClient'] || {};
(globalThis as any)['NSTextCheckingClient']['NSTextInputTraitType'] = (globalThis as any)['NSTextCheckingClient']['NSTextInputTraitType'] || {};
(globalThis as any)['NSTextCheckingClient']['NSTextInputTraitType'] = {
  Default: 0,
  No: 1,
  Yes: 2
};


(globalThis as any)['NSTextCheckingController'] = (globalThis as any)['NSTextCheckingController'] || {};

(globalThis as any)['NSTextCheckingResult'] = (globalThis as any)['NSTextCheckingResult'] || {};
(globalThis as any)['NSTextCheckingResult']['CheckingType'] = (globalThis as any)['NSTextCheckingResult']['CheckingType'] || {};
(globalThis as any)['NSTextCheckingResult']['CheckingType'] = {
  Orthography: 1,
  Spelling: 2,
  Grammar: 4,
  Date: 8,
  Address: 16,
  Link: 32,
  Quote: 64,
  Dash: 128,
  Replacement: 256,
  Correction: 512,
  RegularExpression: 1024,
  PhoneNumber: 2048,
  TransitInformation: 4096
};


(globalThis as any)['NSTextContainer'] = (globalThis as any)['NSTextContainer'] || {};
(globalThis as any)['NSTextContainer']['NSLineMovementDirection'] = (globalThis as any)['NSTextContainer']['NSLineMovementDirection'] || {};
(globalThis as any)['NSTextContainer']['NSLineMovementDirection'] = {
  DoesntMove: 0,
  MovesLeft: 1,
  MovesRight: 2,
  MovesDown: 3,
  MovesUp: 4
};

(globalThis as any)['NSTextContainer']['NSLineSweepDirection'] = (globalThis as any)['NSTextContainer']['NSLineSweepDirection'] || {};
(globalThis as any)['NSTextContainer']['NSLineSweepDirection'] = {
  Left: 0,
  Right: 1,
  Down: 2,
  Up: 3
};


(globalThis as any)['NSTextField'] = (globalThis as any)['NSTextField'] || {};
(globalThis as any)['NSTextField']['BezelStyle'] = (globalThis as any)['NSTextField']['BezelStyle'] || {};
(globalThis as any)['NSTextField']['BezelStyle'] = {
  SquareBezel: 0,
  RoundedBezel: 1
};


(globalThis as any)['NSTextFieldCell'] = (globalThis as any)['NSTextFieldCell'] || {};
(globalThis as any)['NSTextFieldCell']['NSTextField'] = (globalThis as any)['NSTextFieldCell']['NSTextField'] || {};
(globalThis as any)['NSTextFieldCell']['NSTextField']['BezelStyle'] = (globalThis as any)['NSTextFieldCell']['NSTextField']['BezelStyle'] || {};
(globalThis as any)['NSTextFieldCell']['NSTextField']['BezelStyle'] = {
  SquareBezel: 0,
  RoundedBezel: 1
};


(globalThis as any)['NSTextFinder'] = (globalThis as any)['NSTextFinder'] || {};
(globalThis as any)['NSTextFinder']['Action'] = (globalThis as any)['NSTextFinder']['Action'] || {};
(globalThis as any)['NSTextFinder']['Action'] = {
  ShowFindInterface: 1,
  NextMatch: 2,
  PreviousMatch: 3,
  ReplaceAll: 4,
  Replace: 5,
  ReplaceAndFind: 6,
  SetSearchString: 7,
  ReplaceAllInSelection: 8,
  SelectAll: 9,
  SelectAllInSelection: 10,
  HideFindInterface: 11,
  ShowReplaceInterface: 12,
  HideReplaceInterface: 13
};

(globalThis as any)['NSTextFinder']['MatchingType'] = (globalThis as any)['NSTextFinder']['MatchingType'] || {};
(globalThis as any)['NSTextFinder']['MatchingType'] = {
  Contains: 0,
  StartsWith: 1,
  FullWord: 2,
  EndsWith: 3
};


(globalThis as any)['NSTextInputContext'] = (globalThis as any)['NSTextInputContext'] || {};

(globalThis as any)['NSTextList'] = (globalThis as any)['NSTextList'] || {};
(globalThis as any)['NSTextList']['Options'] = (globalThis as any)['NSTextList']['Options'] || {};
(globalThis as any)['NSTextList']['Options'] = {
  NSTextListPrependEnclosingMarker: 1
};


(globalThis as any)['NSTextStorage'] = (globalThis as any)['NSTextStorage'] || {};
(globalThis as any)['NSTextStorage']['NSTextStorageEditActions'] = (globalThis as any)['NSTextStorage']['NSTextStorageEditActions'] || {};
(globalThis as any)['NSTextStorage']['NSTextStorageEditActions'] = {
  Attributes: 1,
  Characters: 2
};


(globalThis as any)['NSTextTable'] = (globalThis as any)['NSTextTable'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock'] = (globalThis as any)['NSTextTable']['NSTextBlock'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['Dimension'] = (globalThis as any)['NSTextTable']['NSTextBlock']['Dimension'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['Dimension'] = {
  Width: 0,
  MinimumWidth: 1,
  MaximumWidth: 2,
  Height: 4,
  MinimumHeight: 5,
  MaximumHeight: 6
};

(globalThis as any)['NSTextTable']['NSTextBlock'] = (globalThis as any)['NSTextTable']['NSTextBlock'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['Layer'] = (globalThis as any)['NSTextTable']['NSTextBlock']['Layer'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['Layer'] = {
  Padding: -1,
  Border: 0,
  Margin: 1
};

(globalThis as any)['NSTextTable']['NSTextBlock'] = (globalThis as any)['NSTextTable']['NSTextBlock'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['ValueType'] = (globalThis as any)['NSTextTable']['NSTextBlock']['ValueType'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['ValueType'] = {
  AbsoluteValueType: 0,
  PercentageValueType: 1
};

(globalThis as any)['NSTextTable']['NSTextBlock'] = (globalThis as any)['NSTextTable']['NSTextBlock'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['VerticalAlignment'] = (globalThis as any)['NSTextTable']['NSTextBlock']['VerticalAlignment'] || {};
(globalThis as any)['NSTextTable']['NSTextBlock']['VerticalAlignment'] = {
  TopAlignment: 0,
  MiddleAlignment: 1,
  BottomAlignment: 2,
  BaselineAlignment: 3
};

(globalThis as any)['NSTextTable']['LayoutAlgorithm'] = (globalThis as any)['NSTextTable']['LayoutAlgorithm'] || {};
(globalThis as any)['NSTextTable']['LayoutAlgorithm'] = {
  AutomaticLayoutAlgorithm: 0,
  FixedLayoutAlgorithm: 1
};


(globalThis as any)['NSTextView'] = (globalThis as any)['NSTextView'] || {};
(globalThis as any)['NSTextView']['NSFindPanelAction'] = (globalThis as any)['NSTextView']['NSFindPanelAction'] || {};
(globalThis as any)['NSTextView']['NSFindPanelAction'] = {
  ShowFindPanel: 1,
  Next: 2,
  Previous: 3,
  ReplaceAll: 4,
  Replace: 5,
  ReplaceAndFind: 6,
  SetFindString: 7,
  ReplaceAllInSelection: 8,
  SelectAll: 9,
  SelectAllInSelection: 10
};

(globalThis as any)['NSTextView']['NSFindPanelSubstringMatchType'] = (globalThis as any)['NSTextView']['NSFindPanelSubstringMatchType'] || {};
(globalThis as any)['NSTextView']['NSFindPanelSubstringMatchType'] = {
  Contains: 0,
  StartsWith: 1,
  FullWord: 2,
  EndsWith: 3
};

(globalThis as any)['NSTextView']['NSSelectionAffinity'] = (globalThis as any)['NSTextView']['NSSelectionAffinity'] || {};
(globalThis as any)['NSTextView']['NSSelectionAffinity'] = {
  Upstream: 0,
  Downstream: 1
};

(globalThis as any)['NSTextView']['NSSelectionGranularity'] = (globalThis as any)['NSTextView']['NSSelectionGranularity'] || {};
(globalThis as any)['NSTextView']['NSSelectionGranularity'] = {
  Character: 0,
  Word: 1,
  Paragraph: 2
};


(globalThis as any)['Thread'] = (globalThis as any)['Thread'] || {};

(globalThis as any)['TimeZone'] = (globalThis as any)['TimeZone'] || {};
(globalThis as any)['TimeZone']['NameStyle'] = (globalThis as any)['TimeZone']['NameStyle'] || {};
(globalThis as any)['TimeZone']['NameStyle'] = {
  Standard: 0,
  ShortStandard: 1,
  DaylightSaving: 2,
  ShortDaylightSaving: 3,
  Generic: 4,
  ShortGeneric: 5
};


(globalThis as any)['Timer'] = (globalThis as any)['Timer'] || {};

(globalThis as any)['NSTitlebarAccessoryViewController'] = (globalThis as any)['NSTitlebarAccessoryViewController'] || {};

(globalThis as any)['NSTokenField'] = (globalThis as any)['NSTokenField'] || {};
(globalThis as any)['NSTokenField']['TokenStyle'] = (globalThis as any)['NSTokenField']['TokenStyle'] || {};
(globalThis as any)['NSTokenField']['TokenStyle'] = {
  Default: 0,
  None: 1,
  Rounded: 2,
  Squared: 3,
  PlainSquared: 4
};


(globalThis as any)['NSTokenFieldCell'] = (globalThis as any)['NSTokenFieldCell'] || {};
(globalThis as any)['NSTokenFieldCell']['NSTokenField'] = (globalThis as any)['NSTokenFieldCell']['NSTokenField'] || {};
(globalThis as any)['NSTokenFieldCell']['NSTokenField']['TokenStyle'] = (globalThis as any)['NSTokenFieldCell']['NSTokenField']['TokenStyle'] || {};
(globalThis as any)['NSTokenFieldCell']['NSTokenField']['TokenStyle'] = {
  Default: 0,
  None: 1,
  Rounded: 2,
  Squared: 3,
  PlainSquared: 4
};


(globalThis as any)['NSToolbar'] = (globalThis as any)['NSToolbar'] || {};
(globalThis as any)['NSToolbar']['DisplayMode'] = (globalThis as any)['NSToolbar']['DisplayMode'] || {};
(globalThis as any)['NSToolbar']['DisplayMode'] = {
  Default: 0,
  IconAndLabel: 1,
  IconOnly: 2,
  LabelOnly: 3
};

(globalThis as any)['NSToolbar']['SizeMode'] = (globalThis as any)['NSToolbar']['SizeMode'] || {};
(globalThis as any)['NSToolbar']['SizeMode'] = {
  Default: 0,
  Regular: 1,
  Small: 2
};


(globalThis as any)['NSToolbarItem'] = (globalThis as any)['NSToolbarItem'] || {};

(globalThis as any)['NSToolbarItemGroup'] = (globalThis as any)['NSToolbarItemGroup'] || {};
(globalThis as any)['NSToolbarItemGroup']['ControlRepresentation'] = (globalThis as any)['NSToolbarItemGroup']['ControlRepresentation'] || {};
(globalThis as any)['NSToolbarItemGroup']['ControlRepresentation'] = {
  Automatic: 0,
  Expanded: 1,
  Collapsed: 2
};

(globalThis as any)['NSToolbarItemGroup']['SelectionMode'] = (globalThis as any)['NSToolbarItemGroup']['SelectionMode'] || {};
(globalThis as any)['NSToolbarItemGroup']['SelectionMode'] = {
  SelectOne: 0,
  SelectAny: 1,
  Momentary: 2
};


(globalThis as any)['NSTouch'] = (globalThis as any)['NSTouch'] || {};
(globalThis as any)['NSTouch']['Phase'] = (globalThis as any)['NSTouch']['Phase'] || {};
(globalThis as any)['NSTouch']['Phase'] = {
  Began: 1,
  Moved: 2,
  Stationary: 4,
  Ended: 8,
  Cancelled: 16,
  Touching: 7,
  Any: -1
};

(globalThis as any)['NSTouch']['TouchType'] = (globalThis as any)['NSTouch']['TouchType'] || {};
(globalThis as any)['NSTouch']['TouchType'] = {
  Direct: 0,
  Indirect: 1
};

(globalThis as any)['NSTouch']['TouchTypeMask'] = (globalThis as any)['NSTouch']['TouchTypeMask'] || {};
(globalThis as any)['NSTouch']['TouchTypeMask'] = {
  Direct: 1,
  Indirect: 2
};


(globalThis as any)['NSTouchBar'] = (globalThis as any)['NSTouchBar'] || {};

(globalThis as any)['NSTouchBarItem'] = (globalThis as any)['NSTouchBarItem'] || {};

(globalThis as any)['NSTrackingArea'] = (globalThis as any)['NSTrackingArea'] || {};
(globalThis as any)['NSTrackingArea']['Options'] = (globalThis as any)['NSTrackingArea']['Options'] || {};
(globalThis as any)['NSTrackingArea']['Options'] = {
  MouseEnteredAndExited: 1,
  MouseMoved: 2,
  CursorUpdate: 4,
  ActiveWhenFirstResponder: 16,
  ActiveInKeyWindow: 32,
  ActiveInActiveApp: 64,
  ActiveAlways: 128,
  AssumeInside: 256,
  InVisibleRect: 512,
  EnabledDuringMouseDrag: 1024
};


(globalThis as any)['NSTreeController'] = (globalThis as any)['NSTreeController'] || {};

(globalThis as any)['NSTreeNode'] = (globalThis as any)['NSTreeNode'] || {};

(globalThis as any)['NSTypesetter'] = (globalThis as any)['NSTypesetter'] || {};
(globalThis as any)['NSTypesetter']['NSTypesetterControlCharacterAction'] = (globalThis as any)['NSTypesetter']['NSTypesetterControlCharacterAction'] || {};
(globalThis as any)['NSTypesetter']['NSTypesetterControlCharacterAction'] = {
  ZeroAdvancementAction: 1,
  WhitespaceAction: 2,
  HorizontalTabAction: 4,
  LineBreakAction: 8,
  ParagraphBreakAction: 16,
  ContainerBreakAction: 32
};


(globalThis as any)['URL'] = (globalThis as any)['URL'] || {};
(globalThis as any)['URL']['BookmarkCreationOptions'] = (globalThis as any)['URL']['BookmarkCreationOptions'] || {};
(globalThis as any)['URL']['BookmarkCreationOptions'] = {
  PreferFileIDResolution: 256,
  MinimalBookmark: 512,
  SuitableForBookmarkFile: 1024,
  WithSecurityScope: 2048,
  SecurityScopeAllowOnlyReadAccess: 4096
};

(globalThis as any)['URL']['BookmarkResolutionOptions'] = (globalThis as any)['URL']['BookmarkResolutionOptions'] || {};
(globalThis as any)['URL']['BookmarkResolutionOptions'] = {
  outUI: 256,
  outMounting: 512,
  SecurityScope: 1024
};


(globalThis as any)['URLAuthenticationChallenge'] = (globalThis as any)['URLAuthenticationChallenge'] || {};

(globalThis as any)['URLCache'] = (globalThis as any)['URLCache'] || {};
(globalThis as any)['URLCache']['StoragePolicy'] = (globalThis as any)['URLCache']['StoragePolicy'] || {};
(globalThis as any)['URLCache']['StoragePolicy'] = {
  Allowed: 0,
  AllowedInMemoryOnly: 1,
  NotAllowed: 2
};


(globalThis as any)['NSURLConnection'] = (globalThis as any)['NSURLConnection'] || {};

(globalThis as any)['URLCredential'] = (globalThis as any)['URLCredential'] || {};
(globalThis as any)['URLCredential']['Persistence'] = (globalThis as any)['URLCredential']['Persistence'] || {};
(globalThis as any)['URLCredential']['Persistence'] = {
  None: 0,
  ForSession: 1,
  Permanent: 2,
  Synchronizable: 3
};


(globalThis as any)['URLCredentialStorage'] = (globalThis as any)['URLCredentialStorage'] || {};

(globalThis as any)['NSURLDownload'] = (globalThis as any)['NSURLDownload'] || {};

(globalThis as any)['NSURLError'] = (globalThis as any)['NSURLError'] || {};
(globalThis as any)['NSURLError']['NSURLErrorNetworkUnavailableReason'] = (globalThis as any)['NSURLError']['NSURLErrorNetworkUnavailableReason'] || {};
(globalThis as any)['NSURLError']['NSURLErrorNetworkUnavailableReason'] = {
  Cellular: 0,
  Expensive: 1,
  Constrained: 2
};


(globalThis as any)['NSURLHandle'] = (globalThis as any)['NSURLHandle'] || {};
(globalThis as any)['NSURLHandle']['Status'] = (globalThis as any)['NSURLHandle']['Status'] || {};
(globalThis as any)['NSURLHandle']['Status'] = {
  NotLoaded: 0,
  LoadSucceeded: 1,
  LoadInProgress: 2,
  LoadFailed: 3
};


(globalThis as any)['URLProtectionSpace'] = (globalThis as any)['URLProtectionSpace'] || {};

(globalThis as any)['URLProtocol'] = (globalThis as any)['URLProtocol'] || {};

(globalThis as any)['URLRequest'] = (globalThis as any)['URLRequest'] || {};
(globalThis as any)['URLRequest']['CachePolicy'] = (globalThis as any)['URLRequest']['CachePolicy'] || {};
(globalThis as any)['URLRequest']['CachePolicy'] = {
  UseProtocolCachePolicy: 0,
  ReloadIgnoringLocalCacheData: 1,
  ReloadIgnoringLocalAndRemoteCacheData: 4,
  ReloadIgnoringCacheData: 1,
  ReturnCacheDataElseLoad: 2,
  ReturnCacheDataDontLoad: 3,
  ReloadRevalidatingCacheData: 5
};

(globalThis as any)['URLRequest']['NetworkServiceType'] = (globalThis as any)['URLRequest']['NetworkServiceType'] || {};
(globalThis as any)['URLRequest']['NetworkServiceType'] = {
  Default: 0,
  VoIP: 1,
  Video: 2,
  Background: 3,
  Voice: 4,
  ResponsiveData: 6,
  AVStreaming: 8,
  ResponsiveAV: 9,
  CallSignaling: 11
};


(globalThis as any)['URLResponse'] = (globalThis as any)['URLResponse'] || {};

(globalThis as any)['URLSession'] = (globalThis as any)['URLSession'] || {};
(globalThis as any)['URLSession']['URLSessionTask'] = (globalThis as any)['URLSession']['URLSessionTask'] || {};
(globalThis as any)['URLSession']['URLSessionTask']['State'] = (globalThis as any)['URLSession']['URLSessionTask']['State'] || {};
(globalThis as any)['URLSession']['URLSessionTask']['State'] = {
  Running: 0,
  Suspended: 1,
  Canceling: 2,
  Completed: 3
};

(globalThis as any)['URLSession']['URLSessionTaskMetrics'] = (globalThis as any)['URLSession']['URLSessionTaskMetrics'] || {};
(globalThis as any)['URLSession']['URLSessionTaskMetrics']['ResourceFetchType'] = (globalThis as any)['URLSession']['URLSessionTaskMetrics']['ResourceFetchType'] || {};
(globalThis as any)['URLSession']['URLSessionTaskMetrics']['ResourceFetchType'] = {
  Unknown: 0,
  NetworkLoad: 1,
  ServerPush: 2,
  LocalCache: 3
};

(globalThis as any)['URLSession']['URLSessionWebSocketTask'] = (globalThis as any)['URLSession']['URLSessionWebSocketTask'] || {};
(globalThis as any)['URLSession']['URLSessionWebSocketTask']['CloseCode'] = (globalThis as any)['URLSession']['URLSessionWebSocketTask']['CloseCode'] || {};
(globalThis as any)['URLSession']['URLSessionWebSocketTask']['CloseCode'] = {
  Invalid: 0,
  NormalClosure: 1000,
  GoingAway: 1001,
  ProtocolError: 1002,
  UnsupportedData: 1003,
  NoStatusReceived: 1005,
  AbnormalClosure: 1006,
  InvalidFramePayloadData: 1007,
  PolicyViolation: 1008,
  MessageTooBig: 1009,
  MandatoryExtensionMissing: 1010,
  InternalServerError: 1011,
  TLSHandshakeFailure: 1015
};

(globalThis as any)['URLSession']['AuthChallengeDisposition'] = (globalThis as any)['URLSession']['AuthChallengeDisposition'] || {};
(globalThis as any)['URLSession']['AuthChallengeDisposition'] = {
  UseCredential: 0,
  PerformDefaultHandling: 1,
  CancelAuthenticationChallenge: 2,
  RejectProtectionSpace: 3
};

(globalThis as any)['URLSession']['NSURLSessionDelayedRequestDisposition'] = (globalThis as any)['URLSession']['NSURLSessionDelayedRequestDisposition'] || {};
(globalThis as any)['URLSession']['NSURLSessionDelayedRequestDisposition'] = {
  ContinueLoading: 0,
  UseNewRequest: 1,
  Cancel: 2
};

(globalThis as any)['URLSession']['NSURLSessionMultipathServiceType'] = (globalThis as any)['URLSession']['NSURLSessionMultipathServiceType'] || {};
(globalThis as any)['URLSession']['NSURLSessionMultipathServiceType'] = {
  None: 0,
  Handover: 1,
  Interactive: 2,
  Aggregate: 3
};

(globalThis as any)['URLSession']['NSURLSessionWebSocketMessageType'] = (globalThis as any)['URLSession']['NSURLSessionWebSocketMessageType'] || {};
(globalThis as any)['URLSession']['NSURLSessionWebSocketMessageType'] = {
  Data: 0,
  String: 1
};

(globalThis as any)['URLSession']['ResponseDisposition'] = (globalThis as any)['URLSession']['ResponseDisposition'] || {};
(globalThis as any)['URLSession']['ResponseDisposition'] = {
  Cancel: 0,
  Allow: 1,
  BecomeDownload: 2,
  BecomeStream: 3
};


(globalThis as any)['UUID'] = (globalThis as any)['UUID'] || {};

(globalThis as any)['NSUbiquitousKeyValueStore'] = (globalThis as any)['NSUbiquitousKeyValueStore'] || {};

(globalThis as any)['UndoManager'] = (globalThis as any)['UndoManager'] || {};

(globalThis as any)['Unit'] = (globalThis as any)['Unit'] || {};

(globalThis as any)['NSUserActivity'] = (globalThis as any)['NSUserActivity'] || {};

(globalThis as any)['UserDefaults'] = (globalThis as any)['UserDefaults'] || {};

(globalThis as any)['NSUserDefaultsController'] = (globalThis as any)['NSUserDefaultsController'] || {};

(globalThis as any)['NSUserInterfaceCompression'] = (globalThis as any)['NSUserInterfaceCompression'] || {};

(globalThis as any)['NSUserInterfaceLayout'] = (globalThis as any)['NSUserInterfaceLayout'] || {};
(globalThis as any)['NSUserInterfaceLayout']['NSUserInterfaceLayoutDirection'] = (globalThis as any)['NSUserInterfaceLayout']['NSUserInterfaceLayoutDirection'] || {};
(globalThis as any)['NSUserInterfaceLayout']['NSUserInterfaceLayoutDirection'] = {
  LeftToRight: 0,
  RightToLeft: 1
};

(globalThis as any)['NSUserInterfaceLayout']['NSUserInterfaceLayoutOrientation'] = (globalThis as any)['NSUserInterfaceLayout']['NSUserInterfaceLayoutOrientation'] || {};
(globalThis as any)['NSUserInterfaceLayout']['NSUserInterfaceLayoutOrientation'] = {
  Horizontal: 0,
  Vertical: 1
};


(globalThis as any)['NSUserNotification'] = (globalThis as any)['NSUserNotification'] || {};
(globalThis as any)['NSUserNotification']['ActivationType'] = (globalThis as any)['NSUserNotification']['ActivationType'] || {};
(globalThis as any)['NSUserNotification']['ActivationType'] = {
  None: 0,
  ContentsClicked: 1,
  ActionButtonClicked: 2,
  Replied: 3,
  AdditionalActionClicked: 4
};


(globalThis as any)['NSUserScriptTask'] = (globalThis as any)['NSUserScriptTask'] || {};

(globalThis as any)['NSValue'] = (globalThis as any)['NSValue'] || {};

(globalThis as any)['ValueTransformer'] = (globalThis as any)['ValueTransformer'] || {};

(globalThis as any)['NSView'] = (globalThis as any)['NSView'] || {};
(globalThis as any)['NSView']['AutoresizingMask'] = (globalThis as any)['NSView']['AutoresizingMask'] || {};
(globalThis as any)['NSView']['AutoresizingMask'] = {
  NotSizable: 0,
  MinXMargin: 1,
  WidthSizable: 2,
  MaxXMargin: 4,
  MinYMargin: 8,
  HeightSizable: 16,
  MaxYMargin: 32
};

(globalThis as any)['NSView']['BackgroundStyle'] = (globalThis as any)['NSView']['BackgroundStyle'] || {};
(globalThis as any)['NSView']['BackgroundStyle'] = {
  Normal: 0,
  Emphasized: 1,
  Raised: 2,
  Lowered: 3
};

(globalThis as any)['NSView']['LayerContentsPlacement'] = (globalThis as any)['NSView']['LayerContentsPlacement'] || {};
(globalThis as any)['NSView']['LayerContentsPlacement'] = {
  ScaleAxesIndependently: 0,
  ScaleProportionallyToFit: 1,
  ScaleProportionallyToFill: 2,
  Center: 3,
  Top: 4,
  TopRight: 5,
  Right: 6,
  BottomRight: 7,
  Bottom: 8,
  BottomLeft: 9,
  Left: 10,
  TopLeft: 11
};

(globalThis as any)['NSView']['LayerContentsRedrawPolicy'] = (globalThis as any)['NSView']['LayerContentsRedrawPolicy'] || {};
(globalThis as any)['NSView']['LayerContentsRedrawPolicy'] = {
  Never: 0,
  OnSetNeedsDisplay: 1,
  DuringViewResize: 2,
  BeforeViewResize: 3,
  Crossfade: 4
};

(globalThis as any)['NSView']['NSBorderType'] = (globalThis as any)['NSView']['NSBorderType'] || {};
(globalThis as any)['NSView']['NSBorderType'] = {
  NoBorder: 0,
  LineBorder: 1,
  BezelBorder: 2,
  GrooveBorder: 3
};


(globalThis as any)['NSViewController'] = (globalThis as any)['NSViewController'] || {};
(globalThis as any)['NSViewController']['TransitionOptions'] = (globalThis as any)['NSViewController']['TransitionOptions'] || {};
(globalThis as any)['NSViewController']['TransitionOptions'] = {
  None: 0,
  Crossfade: 1,
  SlideUp: 16,
  SlideDown: 32,
  SlideLeft: 64,
  SlideRight: 128,
  SlideForward: 320,
  SlideBackward: 384,
  AllowUserInteraction: 4096
};


(globalThis as any)['NSVisualEffectView'] = (globalThis as any)['NSVisualEffectView'] || {};
(globalThis as any)['NSVisualEffectView']['BlendingMode'] = (globalThis as any)['NSVisualEffectView']['BlendingMode'] || {};
(globalThis as any)['NSVisualEffectView']['BlendingMode'] = {
  BehindWindow: 0,
  WithinWindow: 1
};

(globalThis as any)['NSVisualEffectView']['Material'] = (globalThis as any)['NSVisualEffectView']['Material'] || {};
(globalThis as any)['NSVisualEffectView']['Material'] = {
  Titlebar: 3,
  Selection: 4,
  Menu: 5,
  Popover: 6,
  Sidebar: 7,
  HeaderView: 10,
  Sheet: 11,
  WindowBackground: 12,
  HUDWindow: 13,
  FullScreenUI: 15,
  ToolTip: 17,
  ContentBackground: 18,
  UnderWindowBackground: 21,
  UnderPageBackground: 22,
  AppearanceBased: 0,
  Light: 1,
  Dark: 2,
  MediumLight: 8,
  UltraDark: 9
};

(globalThis as any)['NSVisualEffectView']['State'] = (globalThis as any)['NSVisualEffectView']['State'] || {};
(globalThis as any)['NSVisualEffectView']['State'] = {
  FollowsWindowActiveState: 0,
  Active: 1,
  Inactive: 2
};


(globalThis as any)['NSWindow'] = (globalThis as any)['NSWindow'] || {};
(globalThis as any)['NSWindow']['AnimationBehavior'] = (globalThis as any)['NSWindow']['AnimationBehavior'] || {};
(globalThis as any)['NSWindow']['AnimationBehavior'] = {
  Default: 0,
  None: 2,
  DocumentWindow: 3,
  UtilityWindow: 4,
  AlertPanel: 5
};

(globalThis as any)['NSWindow']['BackingStoreType'] = (globalThis as any)['NSWindow']['BackingStoreType'] || {};
(globalThis as any)['NSWindow']['BackingStoreType'] = {
  Retained: 0,
  Nonretained: 1,
  Buffered: 2
};

(globalThis as any)['NSWindow']['ButtonType'] = (globalThis as any)['NSWindow']['ButtonType'] || {};
(globalThis as any)['NSWindow']['ButtonType'] = {
  CloseButton: 0,
  MiniaturizeButton: 1,
  ZoomButton: 2,
  ToolbarButton: 3,
  DocumentIconButton: 4,
  DocumentVersionsButton: 6
};

(globalThis as any)['NSWindow']['CollectionBehavior'] = (globalThis as any)['NSWindow']['CollectionBehavior'] || {};
(globalThis as any)['NSWindow']['CollectionBehavior'] = {
  Default: 0,
  CanJoinAllSpaces: 1,
  MoveToActiveSpace: 2,
  Managed: 4,
  Transient: 8,
  Stationary: 16,
  ParticipatesInCycle: 32,
  IgnoresCycle: 64,
  FullScreenPrimary: 128,
  FullScreenAuxiliary: 256,
  FullScreenNone: 512,
  FullScreenAllowsTiling: 2048,
  FullScreenDisallowsTiling: 4096
};

(globalThis as any)['NSWindow']['Depth'] = (globalThis as any)['NSWindow']['Depth'] || {};
(globalThis as any)['NSWindow']['Depth'] = {
  TwentyfourBitRGB: 520,
  SixtyfourBitRGB: 528,
  OnehundredtwentyeightBitRGB: 544
};

(globalThis as any)['NSWindow']['NumberListOptions'] = (globalThis as any)['NSWindow']['NumberListOptions'] || {};
(globalThis as any)['NSWindow']['NumberListOptions'] = {
  Applications: 1,
  Spaces: 16
};

(globalThis as any)['NSWindow']['OcclusionState'] = (globalThis as any)['NSWindow']['OcclusionState'] || {};
(globalThis as any)['NSWindow']['OcclusionState'] = {
  NSWindowOcclusionStateVisible: 2
};

(globalThis as any)['NSWindow']['OrderingMode'] = (globalThis as any)['NSWindow']['OrderingMode'] || {};
(globalThis as any)['NSWindow']['OrderingMode'] = {
  Above: 1,
  Below: -1,
  Out: 0
};

(globalThis as any)['NSWindow']['SelectionDirection'] = (globalThis as any)['NSWindow']['SelectionDirection'] || {};
(globalThis as any)['NSWindow']['SelectionDirection'] = {
  DirectSelection: 0,
  SelectingNext: 1,
  SelectingPrevious: 2
};

(globalThis as any)['NSWindow']['SharingType'] = (globalThis as any)['NSWindow']['SharingType'] || {};
(globalThis as any)['NSWindow']['SharingType'] = {
  None: 0,
  ReadOnly: 1,
  ReadWrite: 2
};

(globalThis as any)['NSWindow']['StyleMask'] = (globalThis as any)['NSWindow']['StyleMask'] || {};
(globalThis as any)['NSWindow']['StyleMask'] = {
  Borderless: 0,
  Titled: 1,
  Closable: 2,
  Miniaturizable: 4,
  Resizable: 8,
  TexturedBackground: 256,
  UnifiedTitleAndToolbar: 4096,
  FullScreen: 16384,
  FullSizeContentView: 32768,
  UtilityWindow: 16,
  DocModalWindow: 64,
  NonactivatingPanel: 128,
  HUDWindow: 8192
};

(globalThis as any)['NSWindow']['TabbingMode'] = (globalThis as any)['NSWindow']['TabbingMode'] || {};
(globalThis as any)['NSWindow']['TabbingMode'] = {
  Automatic: 0,
  Preferred: 1,
  Disallowed: 2
};

(globalThis as any)['NSWindow']['TitleVisibility'] = (globalThis as any)['NSWindow']['TitleVisibility'] || {};
(globalThis as any)['NSWindow']['TitleVisibility'] = {
  Visible: 0,
  Hidden: 1
};

(globalThis as any)['NSWindow']['UserTabbingPreference'] = (globalThis as any)['NSWindow']['UserTabbingPreference'] || {};
(globalThis as any)['NSWindow']['UserTabbingPreference'] = {
  Manual: 0,
  Always: 1,
  InFullScreen: 2
};


(globalThis as any)['NSWindowController'] = (globalThis as any)['NSWindowController'] || {};

(globalThis as any)['NSWindowTab'] = (globalThis as any)['NSWindowTab'] || {};

(globalThis as any)['NSWindowTabGroup'] = (globalThis as any)['NSWindowTabGroup'] || {};

(globalThis as any)['NSWorkspace'] = (globalThis as any)['NSWorkspace'] || {};
(globalThis as any)['NSWorkspace']['AuthorizationType'] = (globalThis as any)['NSWorkspace']['AuthorizationType'] || {};
(globalThis as any)['NSWorkspace']['AuthorizationType'] = {
  CreateSymbolicLink: 0,
  SetAttributes: 1,
  ReplaceFile: 2
};

(globalThis as any)['NSWorkspace']['IconCreationOptions'] = (globalThis as any)['NSWorkspace']['IconCreationOptions'] || {};
(globalThis as any)['NSWorkspace']['IconCreationOptions'] = {
  eQuickDrawElementsIconCreationOption: 2,
  e10_4ElementsIconCreationOption: 4
};

(globalThis as any)['NSWorkspace']['LaunchOptions'] = (globalThis as any)['NSWorkspace']['LaunchOptions'] || {};
(globalThis as any)['NSWorkspace']['LaunchOptions'] = {
  AndPrint: 2,
  WithErrorPresentation: 64,
  InhibitingBackgroundOnly: 128,
  WithoutAddingToRecents: 256,
  WithoutActivation: 512,
  Async: 65536,
  NewInstance: 524288,
  AndHide: 1048576,
  AndHideOthers: 2097152,
  Default: 65536,
  AllowingClassicStartup: 131072,
  PreferringClassic: 262144
};


(globalThis as any)['XMLDTD'] = (globalThis as any)['XMLDTD'] || {};

(globalThis as any)['XMLDTDNode'] = (globalThis as any)['XMLDTDNode'] || {};
(globalThis as any)['XMLDTDNode']['dtdKind'] = (globalThis as any)['XMLDTDNode']['dtdKind'] || {};
(globalThis as any)['XMLDTDNode']['dtdKind'] = {
  EntityGeneralKind: 1,
  EntityParsedKind: 2,
  EntityUnparsedKind: 3,
  EntityParameterKind: 4,
  EntityPredefined: 5,
  AttributeCDATAKind: 6,
  AttributeIDKind: 7,
  AttributeIDRefKind: 8,
  AttributeIDRefsKind: 9,
  AttributeEntityKind: 10,
  AttributeEntitiesKind: 11,
  AttributeNMTokenKind: 12,
  AttributeNMTokensKind: 13,
  AttributeEnumerationKind: 14,
  AttributeNotationKind: 15,
  ElementDeclarationUndefinedKind: 16,
  ElementDeclarationEmptyKind: 17,
  ElementDeclarationAnyKind: 18,
  ElementDeclarationMixedKind: 19,
  ElementDeclarationElementKind: 20
};


(globalThis as any)['XMLDocument'] = (globalThis as any)['XMLDocument'] || {};
(globalThis as any)['XMLDocument']['ContentKind'] = (globalThis as any)['XMLDocument']['ContentKind'] || {};
(globalThis as any)['XMLDocument']['ContentKind'] = {
  XMLKind: 0,
  XHTMLKind: 1,
  HTMLKind: 2,
  TextKind: 3
};


(globalThis as any)['XMLElement'] = (globalThis as any)['XMLElement'] || {};

(globalThis as any)['XMLNode'] = (globalThis as any)['XMLNode'] || {};
(globalThis as any)['XMLNode']['Kind'] = (globalThis as any)['XMLNode']['Kind'] || {};
(globalThis as any)['XMLNode']['Kind'] = {
  InvalidKind: 0,
  DocumentKind: 1,
  ElementKind: 2,
  AttributeKind: 3,
  NamespaceKind: 4,
  ProcessingInstructionKind: 5,
  CommentKind: 6,
  TextKind: 7,
  DTDKind: 8,
  EntityDeclarationKind: 9,
  AttributeDeclarationKind: 10,
  ElementDeclarationKind: 11,
  NotationDeclarationKind: 12
};

(globalThis as any)['XMLNode']['Options'] = (globalThis as any)['XMLNode']['Options'] || {};
(globalThis as any)['XMLNode']['Options'] = {
  NodeOptionsNone: 0,
  NodeIsCDATA: 1,
  NodeExpandEmptyElement: 2,
  NodeCompactEmptyElement: 4,
  NodeUseSingleQuotes: 8,
  NodeUseDoubleQuotes: 16,
  NodeNeverEscapeContents: 32,
  DocumentTidyHTML: 512,
  DocumentTidyXML: 1024,
  DocumentValidate: 8192,
  NodeLoadExternalEntitiesAlways: 16384,
  NodeLoadExternalEntitiesSameOriginOnly: 32768,
  NodeLoadExternalEntitiesNever: 524288,
  DocumentXInclude: 65536,
  NodePrettyPrint: 131072,
  DocumentIncludeContentTypeDeclaration: 262144,
  NodePreserveNamespaceOrder: 1048576,
  NodePreserveAttributeOrder: 2097152,
  NodePreserveEntities: 4194304,
  NodePreservePrefixes: 8388608,
  NodePreserveCDATA: 16777216,
  NodePreserveWhitespace: 33554432,
  NodePreserveDTD: 67108864,
  NodePreserveCharacterReferences: 134217728,
  NodePromoteSignificantWhitespace: 268435456,
  NodePreserveEmptyElements: 6,
  NodePreserveQuotes: 24,
  NodePreserveAll: 4293918750
};


(globalThis as any)['XMLParser'] = (globalThis as any)['XMLParser'] || {};
(globalThis as any)['XMLParser']['ErrorCode'] = (globalThis as any)['XMLParser']['ErrorCode'] || {};
(globalThis as any)['XMLParser']['ErrorCode'] = {
  InternalError: 1,
  OutOfMemoryError: 2,
  DocumentStartError: 3,
  EmptyDocumentError: 4,
  PrematureDocumentEndError: 5,
  InvalidHexCharacterRefError: 6,
  InvalidDecimalCharacterRefError: 7,
  InvalidCharacterRefError: 8,
  InvalidCharacterError: 9,
  CharacterRefAtEOFError: 10,
  CharacterRefInPrologError: 11,
  CharacterRefInEpilogError: 12,
  CharacterRefInDTDError: 13,
  EntityRefAtEOFError: 14,
  EntityRefInPrologError: 15,
  EntityRefInEpilogError: 16,
  EntityRefInDTDError: 17,
  ParsedEntityRefAtEOFError: 18,
  ParsedEntityRefInPrologError: 19,
  ParsedEntityRefInEpilogError: 20,
  ParsedEntityRefInInternalSubsetError: 21,
  EntityReferenceWithoutNameError: 22,
  EntityReferenceMissingSemiError: 23,
  ParsedEntityRefNoNameError: 24,
  ParsedEntityRefMissingSemiError: 25,
  UndeclaredEntityError: 26,
  UnparsedEntityError: 28,
  EntityIsExternalError: 29,
  EntityIsParameterError: 30,
  UnknownEncodingError: 31,
  EncodingNotSupportedError: 32,
  StringNotStartedError: 33,
  StringNotClosedError: 34,
  NamespaceDeclarationError: 35,
  EntityNotStartedError: 36,
  EntityNotFinishedError: 37,
  LessThanSymbolInAttributeError: 38,
  AttributeNotStartedError: 39,
  AttributeNotFinishedError: 40,
  AttributeHasNoValueError: 41,
  AttributeRedefinedError: 42,
  LiteralNotStartedError: 43,
  LiteralNotFinishedError: 44,
  CommentNotFinishedError: 45,
  ProcessingInstructionNotStartedError: 46,
  ProcessingInstructionNotFinishedError: 47,
  NotationNotStartedError: 48,
  NotationNotFinishedError: 49,
  AttributeListNotStartedError: 50,
  AttributeListNotFinishedError: 51,
  MixedContentDeclNotStartedError: 52,
  MixedContentDeclNotFinishedError: 53,
  ElementContentDeclNotStartedError: 54,
  ElementContentDeclNotFinishedError: 55,
  XMLDeclNotStartedError: 56,
  XMLDeclNotFinishedError: 57,
  ConditionalSectionNotStartedError: 58,
  ConditionalSectionNotFinishedError: 59,
  ExternalSubsetNotFinishedError: 60,
  DOCTYPEDeclNotFinishedError: 61,
  MisplacedCDATAEndStringError: 62,
  CDATANotFinishedError: 63,
  MisplacedXMLDeclarationError: 64,
  SpaceRequiredError: 65,
  SeparatorRequiredError: 66,
  NMTOKENRequiredError: 67,
  NAMERequiredError: 68,
  PCDATARequiredError: 69,
  URIRequiredError: 70,
  PublicIdentifierRequiredError: 71,
  LTRequiredError: 72,
  GTRequiredError: 73,
  LTSlashRequiredError: 74,
  EqualExpectedError: 75,
  TagNameMismatchError: 76,
  UnfinishedTagError: 77,
  StandaloneValueError: 78,
  InvalidEncodingNameError: 79,
  CommentContainsDoubleHyphenError: 80,
  InvalidEncodingError: 81,
  ExternalStandaloneEntityError: 82,
  InvalidConditionalSectionError: 83,
  EntityValueRequiredError: 84,
  NotWellBalancedError: 85,
  ExtraContentError: 86,
  InvalidCharacterInEntityError: 87,
  ParsedEntityRefInInternalError: 88,
  EntityRefLoopError: 89,
  EntityBoundaryError: 90,
  InvalidURIError: 91,
  URIFragmentError: 92,
  NoDTDError: 94,
  DelegateAbortedParseError: 512
};

(globalThis as any)['XMLParser']['ExternalEntityResolvingPolicy'] = (globalThis as any)['XMLParser']['ExternalEntityResolvingPolicy'] || {};
(globalThis as any)['XMLParser']['ExternalEntityResolvingPolicy'] = {
  Never: 0,
  NoNetwork: 1,
  SameOriginOnly: 2,
  Always: 3
};


(globalThis as any)['NSXPCConnection'] = (globalThis as any)['NSXPCConnection'] || {};
(globalThis as any)['NSXPCConnection']['Options'] = (globalThis as any)['NSXPCConnection']['Options'] || {};
(globalThis as any)['NSXPCConnection']['Options'] = {
  NSXPCConnectionPrivileged: 4096
};


(globalThis as any)['QCPlugIn'] = (globalThis as any)['QCPlugIn'] || {};
(globalThis as any)['QCPlugIn']['QCPlugInExecutionMode'] = (globalThis as any)['QCPlugIn']['QCPlugInExecutionMode'] || {};
(globalThis as any)['QCPlugIn']['QCPlugInExecutionMode'] = {
  Provider: 1,
  Processor: 2,
  Consumer: 3
};

(globalThis as any)['QCPlugIn']['QCPlugInTimeMode'] = (globalThis as any)['QCPlugIn']['QCPlugInTimeMode'] || {};
(globalThis as any)['QCPlugIn']['QCPlugInTimeMode'] = {
  None: 0,
  Idle: 1,
  TimeBase: 2
};


(globalThis as any)['QLPreviewPanel'] = (globalThis as any)['QLPreviewPanel'] || {};

(globalThis as any)['QLPreviewView'] = (globalThis as any)['QLPreviewView'] || {};
(globalThis as any)['QLPreviewView']['QLPreviewViewStyle'] = (globalThis as any)['QLPreviewView']['QLPreviewViewStyle'] || {};
(globalThis as any)['QLPreviewView']['QLPreviewViewStyle'] = {
  Normal: 0,
  Compact: 1
};


(globalThis as any)['QuartzFilter'] = (globalThis as any)['QuartzFilter'] || {};

(globalThis as any)['QuartzFilterManager'] = (globalThis as any)['QuartzFilterManager'] || {};

(globalThis as any)['SKIndex'] = (globalThis as any)['SKIndex'] || {};
(globalThis as any)['SKIndex']['SKDocumentIndexState'] = (globalThis as any)['SKIndex']['SKDocumentIndexState'] || {};
(globalThis as any)['SKIndex']['SKDocumentIndexState'] = {
  NotIndexed: 0,
  Indexed: 1,
  AddPending: 2,
  DeletePending: 3
};

(globalThis as any)['SKIndex']['SKIndexType'] = (globalThis as any)['SKIndex']['SKIndexType'] || {};
(globalThis as any)['SKIndex']['SKIndexType'] = {
  Unknown: 0,
  Inverted: 1,
  Vector: 2,
  InvertedVector: 3
};


(globalThis as any)['SKSearch'] = (globalThis as any)['SKSearch'] || {};
(globalThis as any)['SKSearch']['SKSearchType'] = (globalThis as any)['SKSearch']['SKSearchType'] || {};
(globalThis as any)['SKSearch']['SKSearchType'] = {
  Ranked: 0,
  BooleanRanked: 1,
  RequiredRanked: 2,
  PrefixRanked: 3
};


(globalThis as any)['WSTypes'] = (globalThis as any)['WSTypes'] || {};
(globalThis as any)['WSTypes']['WSTypeID'] = (globalThis as any)['WSTypes']['WSTypeID'] || {};
(globalThis as any)['WSTypes']['WSTypeID'] = {
  UnknownType: 0,
  NullType: 1,
  BooleanType: 2,
  IntegerType: 3,
  DoubleType: 4,
  StringType: 5,
  DateType: 6,
  DataType: 7,
  ArrayType: 8,
  DictionaryType: 9
};


(globalThis as any)['runtime'] = (globalThis as any)['runtime'] || {};
(globalThis as any)['runtime']['objc_AssociationPolicy'] = (globalThis as any)['runtime']['objc_AssociationPolicy'] || {};
(globalThis as any)['runtime']['objc_AssociationPolicy'] = {
  N_ASSIGN: 0,
  N_RETAIN_NONATOMIC: 1,
  N_COPY_NONATOMIC: 3,
  N_RETAIN: 769,
  N_COPY: 771
};


export var CaptureView = AVCaptureView

export var PlayerView = AVPlayerView

export var RoutePickerView = AVRoutePickerView

export var Box = NSBox

export var Browser = NSBrowser

export var Button = NSButton

export var ClipView = NSClipView

export var CollectionView = NSCollectionView

export var ColorWell = NSColorWell

export var ComboBox = NSComboBox

export var Control = NSControl

export var DatePicker = NSDatePicker

export var GridView = NSGridView

export var ImageView = NSImageView

export var LevelIndicator = NSLevelIndicator

export var Matrix = NSMatrix

export var OutlineView = NSOutlineView

export var PathControl = NSPathControl

export var PopUpButton = NSPopUpButton

export var PredicateEditor = NSPredicateEditor

export var ProgressIndicator = NSProgressIndicator

export var RuleEditor = NSRuleEditor

export var RulerView = NSRulerView

export var ScrollView = NSScrollView

export var Scroller = NSScroller

export var Scrubber = NSScrubber

export var ScrubberArrangedView = NSScrubberArrangedView

export var ScrubberImageItemView = NSScrubberImageItemView

export var ScrubberItemView = NSScrubberItemView

export var ScrubberSelectionView = NSScrubberSelectionView

export var ScrubberTextItemView = NSScrubberTextItemView

export var SearchField = NSSearchField

export var SecureTextField = NSSecureTextField

export var SegmentedControl = NSSegmentedControl

export var Slider = NSSlider

export var SplitView = NSSplitView

export var StackView = NSStackView

export var StatusBarButton = NSStatusBarButton

export var Stepper = NSStepper

export var Switch = NSSwitch

export var TabView = NSTabView

export var TableCellView = NSTableCellView

export var TableHeaderView = NSTableHeaderView

export var TableRowView = NSTableRowView

export var TableView = NSTableView

export var Text = NSText

export var TextField = NSTextField

export var TextView = NSTextView

export var TokenField = NSTokenField

export var VisualEffectView = NSVisualEffectView

export var CameraDeviceView = IKCameraDeviceView

export var DeviceBrowserView = IKDeviceBrowserView

export var FilterBrowserView = IKFilterBrowserView

export var FilterUIView = IKFilterUIView

export var ScannerDeviceView = IKScannerDeviceView

export {
  AUGenericView,
  AUPannerView,
  AVAsset,
  AVAssetCache,
  AVAssetExportSession,
  AVAssetImageGenerator,
  AVAssetReader,
  AVAssetReaderOutput,
  AVAssetResourceLoader,
  AVAssetTrack,
  AVAssetTrackGroup,
  AVAssetTrackSegment,
  AVAssetWriter,
  AVAssetWriterInput,
  AVAsynchronousKeyValueLoading,
  AVAudioBuffer,
  AVAudioChannelLayout,
  AVAudioConnectionPoint,
  AVAudioConverter,
  AVAudioEngine,
  AVAudioEnvironmentNode,
  AVAudioFile,
  AVAudioFormat,
  AVAudioIONode,
  AVAudioMix,
  AVAudioMixerNode,
  AVAudioMixing,
  AVAudioNode,
  AVAudioPlayer,
  AVAudioPlayerNode,
  AVAudioRecorder,
  AVAudioSequencer,
  AVAudioSession,
  AVAudioSettings,
  AVAudioTime,
  AVAudioUnit,
  AVAudioUnitComponent,
  AVAudioUnitDelay,
  AVAudioUnitDistortion,
  AVAudioUnitEQ,
  AVAudioUnitEffect,
  AVAudioUnitGenerator,
  AVAudioUnitMIDIInstrument,
  AVAudioUnitReverb,
  AVAudioUnitSampler,
  AVAudioUnitTimeEffect,
  AVAudioUnitTimePitch,
  AVAudioUnitVarispeed,
  AVCameraCalibrationData,
  AVCaptureAudioDataOutput,
  AVCaptureAudioPreviewOutput,
  AVCaptureDataOutputSynchronizer,
  AVCaptureDepthDataOutput,
  AVCaptureDevice,
  AVCaptureFileOutput,
  AVCaptureInput,
  AVCaptureMetadataOutput,
  AVCaptureOutputBase,
  AVCapturePhotoOutput,
  AVCaptureSession,
  AVCaptureVideoDataOutput,
  AVCaptureVideoPreviewLayer,
  AVCaptureView,
  AVComposition,
  AVCompositionTrack,
  AVCompositionTrackSegment,
  AVContentKeySession,
  AVDepthData,
  AVError,
  AVMIDIPlayer,
  AVMediaSelection,
  AVMediaSelectionGroup,
  AVMetadataItem,
  AVMetadataObject,
  AVMovie,
  AVMovieTrack,
  AVOutputSettingsAssistant,
  AVPictureInPictureController,
  AVPlayer,
  AVPlayerItem,
  AVPlayerItemOutput,
  AVPlayerItemProtectedContentAdditions,
  AVPlayerItemTrack,
  AVPlayerLayer,
  AVPlayerLooper,
  AVPlayerMediaSelectionCriteria,
  AVPlayerView,
  AVPortraitEffectsMatte,
  AVQueuedSampleBufferRendering,
  AVRouteDetector,
  AVRoutePickerView,
  AVSampleBufferAudioRenderer,
  AVSampleBufferDisplayLayer,
  AVSampleBufferGenerator,
  AVSampleBufferRenderSynchronizer,
  AVSampleCursor,
  AVSemanticSegmentationMatte,
  AVSpeechSynthesis,
  AVSynchronizedLayer,
  AVTextStyleRule,
  AVTimedMetadataGroup,
  AVVideoCompositing,
  AVVideoComposition,
  AudioHardware,
  AudioServerPlugIn,
  AudioSessionTypes,
  ByteCountFormatter,
  CAAnimation,
  CAConstraintLayoutManager,
  CADisplayLink,
  CAEDRMetadata,
  CAEmitterCell,
  CAEmitterLayer,
  CAGradientLayer,
  CALayer,
  CAMediaTiming,
  CAMediaTimingFunction,
  CAMetalLayer,
  CANetworkBrowserWindowController,
  CARemoteLayerClient,
  CARemoteLayerServer,
  CARenderer,
  CAReplicatorLayer,
  CAScrollLayer,
  CAShapeLayer,
  CATextLayer,
  CATiledLayer,
  CATransaction,
  CAValueFunction,
  CBATTRequest,
  CBAttribute,
  CBCentral,
  CBCentralManager,
  CBCharacteristic,
  CBDescriptor,
  CBError,
  CBL2CAPChannel,
  CBManager,
  CBPeer,
  CBPeripheral,
  CBPeripheralManager,
  CBService,
  CBUUID,
  CFBase,
  CFByteOrder,
  CFCalendar,
  CFCharacterSet,
  CFData,
  CFDate,
  CFDateFormatter,
  CFFileSecurity,
  CFLocale,
  CFNotificationCenter,
  CFNumber,
  CFNumberFormatter,
  CFPropertyList,
  CFRunLoop,
  CFSocket,
  CFStream,
  CFString,
  CFStringEncodingExt,
  CFStringTokenizer,
  CFTimeZone,
  CFURL,
  CFURLEnumerator,
  CFXMLNode,
  CFXMLParser,
  CGColorConversionInfo,
  CGColorSpace,
  CGContext,
  CGDirectDisplay,
  CGDisplayConfiguration,
  CGDisplayStream,
  CGError,
  CGEventTypes,
  CGFont,
  CGGeometry,
  CGGradient,
  CGImage,
  CGPDFContext,
  CGPDFDocument,
  CGPDFObject,
  CGPDFPage,
  CGPDFStream,
  CGPath,
  CGPattern,
  CGRemoteOperation,
  CGWindow,
  CGWindowLevel,
  CHHapticEngine,
  CHHapticErrors,
  CHHapticEvent,
  CHHapticPattern,
  CIBarcodeDescriptor,
  CIColor,
  CIContext,
  CIDetector,
  CIFeature,
  CIFilter,
  CIFilterGenerator,
  CIFilterShape,
  CIImage,
  CIImageAccumulator,
  CIKernel,
  CIPlugIn,
  CIRenderDestination,
  CISampler,
  CIVector,
  CKAcceptSharesOperation,
  CKAsset,
  CKContainer,
  CKDatabase,
  CKDatabaseOperation,
  CKDiscoverAllUserIdentitiesOperation,
  CKDiscoverUserIdentitiesOperation,
  CKError,
  CKFetchDatabaseChangesOperation,
  CKFetchRecordZoneChangesOperation,
  CKFetchRecordZonesOperation,
  CKFetchRecordsOperation,
  CKFetchShareMetadataOperation,
  CKFetchShareParticipantsOperation,
  CKFetchSubscriptionsOperation,
  CKFetchWebAuthTokenOperation,
  CKLocationSortDescriptor,
  CKModifyRecordZonesOperation,
  CKModifyRecordsOperation,
  CKModifySubscriptionsOperation,
  CKNotification,
  CKOperation,
  CKOperationGroup,
  CKQuery,
  CKQueryOperation,
  CKRecord,
  CKRecordZone,
  CKShare,
  CKSubscription,
  CKUserIdentity,
  CLBeaconIdentityConstraint,
  CLBeaconRegion,
  CLCircularRegion,
  CLError,
  CLGeocoder,
  CLHeading,
  CLLocation,
  CLLocationManager,
  CLPlacemark,
  CLRegion,
  CLVisit,
  CMAltimeter,
  CMAttitude,
  CMAuthorization,
  CMDeviceMotion,
  CMError,
  CMLogItem,
  CMMotionActivity,
  CMMotionActivityManager,
  CMMotionManager,
  CMMovementDisorderManager,
  CMPedometer,
  CMSensorRecorder,
  CMStepCounter,
  CMTime,
  CSPerson,
  CSSearchQuery,
  CSSearchableIndex,
  CSSearchableItem,
  CSSearchableItemAttributeSet,
  CTFont,
  CTFontCollection,
  CTFontDescriptor,
  CTFontManager,
  CTFontManagerErrors,
  CTFontTraits,
  CTFrame,
  CTGlyphInfo,
  CTLine,
  CTParagraphStyle,
  CTRubyAnnotation,
  CTRun,
  CTStringAttributes,
  CVBase,
  CVBuffer,
  CVPixelBuffer,
  CVPixelBufferPool,
  CWChannel,
  CWConfiguration,
  CWInterface,
  CWNetwork,
  CWNetworkProfile,
  CWWiFiClient,
  Calendar,
  CollectionDifference,
  CoreAudioBaseTypes,
  CoreWLANTypes,
  Data,
  DateComponentsFormatter,
  DateFormatter,
  DateIntervalFormatter,
  DistributedNotificationCenter,
  EnergyFormatter,
  FileManager,
  FileWrapper,
  Formatter,
  HTTPCookieStorage,
  IKCameraDeviceView,
  IKDeviceBrowserView,
  IKFilterBrowserPanel,
  IKFilterBrowserView,
  IKFilterUIView,
  IKImageBrowserCell,
  IKImageBrowserView,
  IKImageEditPanel,
  IKImageView,
  IKPictureTaker,
  IKSaveOptions,
  IKScannerDeviceView,
  IKSlideshow,
  ISO8601DateFormatter,
  JSONSerialization,
  LSInfo,
  LSInfoDeprecated,
  LSOpen,
  LengthFormatter,
  Locale,
  MDLabel,
  MDQuery,
  MIDIServices,
  MIDIThruConnection,
  MLArrayBatchProvider,
  MLDictionaryConstraint,
  MLDictionaryFeatureProvider,
  MLFeatureDescription,
  MLFeatureType,
  MLFeatureValue,
  MLImageConstraint,
  MLImageSize,
  MLImageSizeConstraint,
  MLImageSizeConstraintType,
  MLKey,
  MLMetricKey,
  MLModel,
  MLModelConfiguration,
  MLModelDescription,
  MLModelError,
  MLMultiArray,
  MLMultiArrayConstraint,
  MLMultiArrayShapeConstraint,
  MLMultiArrayShapeConstraintType,
  MLNumericConstraint,
  MLParameterDescription,
  MLParameterKey,
  MLPredictionOptions,
  MLSequence,
  MLSequenceConstraint,
  MLTask,
  MLUpdateContext,
  MLUpdateProgressEvent,
  MLUpdateTask,
  MassFormatter,
  MeasurementFormatter,
  NSATSTypesetter,
  NSAccessibility,
  NSAccessibilityConstants,
  NSAccessibilityCustomAction,
  NSAccessibilityCustomRotor,
  NSAccessibilityElement,
  AffineTransform,
  NSAlert,
  NSAlignmentFeedbackFilter,
  NSAnimation,
  NSAnimationContext,
  NSAppearance,
  NSAppleEventDescriptor,
  NSAppleEventManager,
  NSAppleScript,
  NSApplication,
  NSArrayController,
  NSAtomicStore,
  NSAtomicStoreCacheNode,
  NSAttributeDescription,
  NSAttributedString,
  NSAutoreleasePool,
  NSBackgroundActivityScheduler,
  NSBatchDeleteRequest,
  NSBatchInsertRequest,
  NSBatchUpdateRequest,
  NSBezierPath,
  NSBitmapImageRep,
  NSBox,
  NSBrowser,
  NSBrowserCell,
  Bundle,
  NSButton,
  NSButtonCell,
  NSButtonTouchBarItem,
  NSCIImageRep,
  NSCache,
  NSCandidateListTouchBarItem,
  NSCell,
  CharacterSet,
  NSClassDescription,
  NSClickGestureRecognizer,
  NSClipView,
  NSCoder,
  NSCollectionView,
  NSCollectionViewCompositionalLayout,
  NSCollectionViewFlowLayout,
  NSCollectionViewGridLayout,
  NSCollectionViewLayout,
  NSCollectionViewTransitionLayout,
  NSColor,
  NSColorList,
  NSColorPanel,
  NSColorPicker,
  NSColorPickerTouchBarItem,
  NSColorSampler,
  NSColorSpace,
  NSColorWell,
  NSComboBox,
  NSComboBoxCell,
  NSComparisonPredicate,
  NSCompoundPredicate,
  NSConnection,
  NSControl,
  NSController,
  NSCoreDataCoreSpotlightDelegate,
  NSCursor,
  NSCustomImageRep,
  NSCustomTouchBarItem,
  NSDataAsset,
  NSDate as Date,
  DateInterval,
  NSDatePicker,
  NSDatePickerCell,
  NSDecimal,
  NSDecimalNumber,
  NSDerivedAttributeDescription,
  Dictionary,
  NSDictionaryController,
  NSDistantObject,
  NSDistributedLock,
  NSDockTile,
  NSDocument,
  NSDocumentController,
  NSDragging,
  NSDraggingItem,
  NSDraggingSession,
  NSDrawer,
  NSEPSImageRep,
  NSEntityDescription,
  NSEntityMapping,
  NSEntityMigrationPolicy,
  NSEnumerator,
  NSError as Error,
  NSEvent,
  NSException,
  NSExpression,
  NSExpressionDescription,
  NSExtensionContext,
  NSExtensionItem,
  NSFetchIndexDescription,
  NSFetchIndexElementDescription,
  NSFetchRequest,
  NSFetchRequestExpression,
  NSFetchedPropertyDescription,
  NSFetchedResultsController,
  NSFileCoordinator,
  FileHandle,
  NSFilePromiseProvider,
  NSFilePromiseReceiver,
  NSFileVersion,
  NSFont,
  NSFontAssetRequest,
  NSFontCollection,
  NSFontDescriptor,
  NSFontManager,
  NSFontPanel,
  NSFormCell,
  NSGarbageCollector,
  NSGeometry,
  NSGestureRecognizer,
  NSGlyphGenerator,
  NSGlyphInfo,
  NSGradient,
  NSGraphics,
  NSGraphicsContext,
  NSGridView,
  NSGroupTouchBarItem,
  HTTPCookie,
  NSHapticFeedback,
  NSHashTable,
  NSHelpManager,
  Host,
  NSImage,
  NSImageCell,
  NSImageRep,
  NSImageView,
  NSIncrementalStore,
  NSIncrementalStoreNode,
  IndexPath,
  IndexSet,
  NSInvocation,
  NSItemProvider,
  NSKeyValueObserving,
  NSKeyedArchiver,
  NSLayoutAnchor,
  NSLayoutConstraint,
  NSLayoutGuide,
  NSLayoutManager,
  NSLevelIndicator,
  NSLevelIndicatorCell,
  NSLinguisticTagger,
  ListFormatter,
  NSLock,
  NSMagnificationGestureRecognizer,
  NSManagedObject,
  NSManagedObjectContext,
  NSManagedObjectID,
  NSManagedObjectModel,
  NSMapTable,
  NSMappingModel,
  NSMatrix,
  Measurement,
  NSMediaLibraryBrowserController,
  NSMenu,
  NSMenuItem,
  NSMenuItemCell,
  NSMenuToolbarItem,
  NSMergePolicy,
  NSMethodSignature,
  NSMigrationManager,
  NSNetServices,
  NSNib,
  Notification,
  NotificationQueue,
  NumberFormatter,
  NSObjCRuntime,
  NSObjectController,
  NSOpenPanel,
  Operation,
  NSOrderedCollectionChange,
  NSOrderedSet,
  NSOrthography,
  NSOutlineView,
  NSPDFImageRep,
  NSPDFInfo,
  NSPDFPanel,
  NSPICTImageRep,
  NSPageController,
  NSPageLayout,
  NSPanGestureRecognizer,
  NSPanel,
  NSParagraphStyle,
  NSPasteboard,
  NSPasteboardItem,
  NSPathCell,
  NSPathComponentCell,
  NSPathControl,
  NSPathControlItem,
  NSPathUtilities,
  NSPersistentCloudKitContainer,
  NSPersistentCloudKitContainerOptions,
  NSPersistentContainer,
  NSPersistentDocument,
  NSPersistentHistoryChange,
  NSPersistentHistoryChangeRequest,
  NSPersistentHistoryTransaction,
  NSPersistentStore,
  NSPersistentStoreCoordinator,
  NSPersistentStoreDescription,
  NSPersistentStoreRequest,
  NSPersistentStoreResult,
  PersonNameComponents,
  PersonNameComponentsFormatter,
  NSPickerTouchBarItem,
  NSPointerArray,
  NSPointerFunctions,
  NSPopUpButton,
  NSPopUpButtonCell,
  NSPopover,
  NSPopoverTouchBarItem,
  Port,
  NSPortCoder,
  PortMessage,
  NSPortNameServer,
  NSPredicate,
  NSPredicateEditor,
  NSPredicateEditorRowTemplate,
  NSPressGestureRecognizer,
  NSPressureConfiguration,
  NSPrintInfo,
  NSPrintOperation,
  NSPrintPanel,
  NSPrinter,
  ProcessInfo,
  Progress,
  NSProgressIndicator,
  NSPropertyDescription,
  NSPropertyList,
  NSPropertyMapping,
  NSProtocolChecker,
  NSProxy,
  NSQueryGenerationToken,
  NSRegularExpression,
  NSRelationshipDescription,
  RelativeDateTimeFormatter,
  NSResponder,
  NSRotationGestureRecognizer,
  NSRuleEditor,
  NSRulerMarker,
  NSRulerView,
  RunLoop,
  NSRunningApplication,
  NSSaveChangesRequest,
  NSSavePanel,
  Scanner,
  NSScreen,
  NSScriptClassDescription,
  NSScriptCoercionHandler,
  NSScriptCommand,
  NSScriptCommandDescription,
  NSScriptExecutionContext,
  NSScriptObjectSpecifiers,
  NSScriptStandardSuiteCommands,
  NSScriptSuiteRegistry,
  NSScriptWhoseTests,
  NSScrollView,
  NSScroller,
  NSScrubber,
  NSScrubberLayout,
  NSSearchField,
  NSSearchFieldCell,
  NSSegmentedCell,
  NSSegmentedControl,
  NSShadow,
  NSSharingService,
  NSSharingServicePickerToolbarItem,
  NSSharingServicePickerTouchBarItem,
  NSSlider,
  NSSliderAccessory,
  NSSliderCell,
  NSSliderTouchBarItem,
  NSSortDescriptor,
  NSSound,
  NSSpeechRecognizer,
  NSSpeechSynthesizer,
  NSSpellChecker,
  NSSpellServer,
  NSSplitView,
  NSSplitViewController,
  NSSplitViewItem,
  NSStackView,
  NSStatusBar,
  NSStatusBarButton,
  NSStatusItem,
  NSStepper,
  NSStepperCell,
  NSStepperTouchBarItem,
  NSStoryboard,
  NSStoryboardSegue,
  Stream,
  NSStringDrawing,
  NSSwitch,
  NSTabView,
  NSTabViewController,
  NSTabViewItem,
  NSTableCellView,
  NSTableColumn,
  NSTableHeaderCell,
  NSTableHeaderView,
  NSTableRowView,
  NSTableView,
  NSTableViewRowAction,
  Process,
  NSText,
  NSTextAlternatives,
  NSTextAttachment,
  NSTextCheckingClient,
  NSTextCheckingController,
  NSTextCheckingResult,
  NSTextContainer,
  NSTextField,
  NSTextFieldCell,
  NSTextFinder,
  NSTextInputContext,
  NSTextList,
  NSTextStorage,
  NSTextTable,
  NSTextView,
  Thread,
  TimeZone,
  Timer,
  NSTitlebarAccessoryViewController,
  NSTokenField,
  NSTokenFieldCell,
  NSToolbar,
  NSToolbarItem,
  NSToolbarItemGroup,
  NSTouch,
  NSTouchBar,
  NSTouchBarItem,
  NSTrackingArea,
  NSTreeController,
  NSTreeNode,
  NSTypesetter,
  URL,
  URLAuthenticationChallenge,
  URLCache,
  NSURLConnection,
  URLCredential,
  URLCredentialStorage,
  NSURLDownload,
  NSURLError,
  NSURLHandle,
  URLProtectionSpace,
  URLProtocol,
  URLRequest,
  URLResponse,
  URLSession,
  UUID,
  NSUbiquitousKeyValueStore,
  UndoManager,
  Unit,
  NSUserActivity,
  UserDefaults,
  NSUserDefaultsController,
  NSUserInterfaceCompression,
  NSUserInterfaceLayout,
  NSUserNotification,
  NSUserScriptTask,
  NSValue,
  ValueTransformer,
  NSView,
  NSViewController,
  NSVisualEffectView,
  NSWindow,
  NSWindowController,
  NSWindowTab,
  NSWindowTabGroup,
  NSWorkspace,
  XMLDTD,
  XMLDTDNode,
  XMLDocument,
  XMLElement,
  XMLNode,
  XMLParser,
  NSXPCConnection,
  QCPlugIn,
  QLPreviewPanel,
  QLPreviewView,
  QuartzFilter,
  QuartzFilterManager,
  SKIndex,
  SKSearch,
  WSTypes,
};
