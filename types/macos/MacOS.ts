/* eslint-disable no-shadow, no-use-before-define, max-classes-per-file */

declare global {

  // interface
  class AVAsset extends NSObject /* implements AVAsynchronousKeyValueLoading, NSCopying */ {
    allMediaSelections: AVMediaSelection[]; // property
    availableChapterLocales: NSLocale[]; // property
    availableMediaCharacteristicsWithMediaSelectionOptions: string[]; // property
    availableMetadataFormats: string[]; // property
    canContainFragments: boolean; // property
    commonMetadata: AVMetadataItem[]; // property
    isCompatibleWithAirPlayVideo: boolean; // property
    isComposable: boolean; // property
    containsFragments: boolean; // property
    creationDate: AVMetadataItem; // property
    duration: CMTime; // property
    isExportable: boolean; // property
    hasProtectedContent: boolean; // property
    lyrics: string; // property
    metadata: AVMetadataItem[]; // property
    minimumTimeOffsetFromLive: CMTime; // property
    overallDurationHint: CMTime; // property
    isPlayable: boolean; // property
    preferredMediaSelection: AVMediaSelection; // property
    preferredRate: number; // property
    preferredTransform: CGAffineTransform; // property
    preferredVolume: number; // property
    providesPreciseDurationAndTiming: boolean; // property
    isReadable: boolean; // property
    referenceRestrictions: AVAssetReferenceRestrictions; // property
    trackGroups: AVAssetTrackGroup[]; // property
    tracks: AVAssetTrack[]; // property
    cancelLoading(): void;
    chapterMetadataGroupsBestMatchingPreferredLanguages(bestMatchingPreferredLanguages: string[]): AVTimedMetadataGroup[];
    chapterMetadataGroupsWithTitleLocaleContainingItemsWithCommonKeys(withTitleLocale: NSLocale, containingItemsWithCommonKeys?: string[]): AVTimedMetadataGroup[];
    mediaSelectionGroupForMediaCharacteristic(forMediaCharacteristic: string): AVMediaSelectionGroup;
    metadataForFormat(forFormat: string): AVMetadataItem[];
    trackWithTrackID(withTrackID: number): AVAssetTrack;
    tracksWithMediaCharacteristic(withMediaCharacteristic: string): AVAssetTrack[];
    tracksWithMediaType(withMediaType: string): AVAssetTrack[];
    unusedTrackID(): number;
  }

  // interface
  class AVAssetCache extends NSObject {
    isPlayableOffline: boolean; // property
    mediaSelectionOptionsInMediaSelectionGroup(in_: AVMediaSelectionGroup): AVMediaSelectionOption[];
  }

  // interface
  class AVAssetExportSession extends NSObject {
    static allExportPresets(): string[];
    static determineCompatibilityWithOfExportPresetWithOutputFileTypeCompletionHandler(ofExportPreset: string, with_: AVAsset, outputFileType?: string, completionHandler?: (p1: boolean) => void): void;
    static exportPresetsCompatibleWithAsset(compatibleWith: AVAsset): string[];
    asset: AVAsset; // property
    audioMix: AVAudioMix;
    setAudioMix(_: AVAudioMix) // property
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string) // property
    canPerformMultiplePassesOverSourceMediaData: boolean;
    setCanPerformMultiplePassesOverSourceMediaData(_: boolean) // property
    customVideoCompositor: AVVideoCompositing; // property
    directoryForTemporaryFiles: NSURL;
    setDirectoryForTemporaryFiles(_: NSURL) // property
    error: NSError; // property
    estimatedOutputFileLength: number; // property
    fileLengthLimit: number;
    setFileLengthLimit(_: number) // property
    maxDuration: CMTime; // property
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[]) // property
    metadataItemFilter: AVMetadataItemFilter;
    setMetadataItemFilter(_: AVMetadataItemFilter) // property
    outputFileType: string;
    setOutputFileType(_: string) // property
    outputURL: NSURL;
    setOutputURL(_: NSURL) // property
    presetName: string; // property
    progress: number; // property
    shouldOptimizeForNetworkUse: boolean;
    setShouldOptimizeForNetworkUse(_: boolean) // property
    status: AVAssetExportSession.Status; // property
    supportedFileTypes: string[]; // property
    timeRange: CMTimeRange;
    setTimeRange(_: CMTimeRange) // property
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition) // property
    cancelExport(): void;
    determineCompatibleFileTypesWithCompletionHandler(completionHandler: (p1: string[]) => void): void;
    estimateMaximumDurationWithCompletionHandler(completionHandler?: (p1: CMTime, p2: NSError) => void): void;
    estimateOutputFileLengthWithCompletionHandler(completionHandler?: (p1: number, p2: NSError) => void): void;
    exportAsynchronouslyWithCompletionHandler(completionHandler: () => void): void;
    static createWithAssetPresetName(asset: AVAsset, presetName: string): AVAssetExportSession;
  }

  // interface
  class AVAssetImageGenerator extends NSObject {
    apertureMode: string;
    setApertureMode(_: string) // property
    appliesPreferredTrackTransform: boolean;
    setAppliesPreferredTrackTransform(_: boolean) // property
    asset: AVAsset; // property
    customVideoCompositor: AVVideoCompositing; // property
    maximumSize: CGSize;
    setMaximumSize(_: CGSize) // property
    requestedTimeToleranceAfter: CMTime;
    setRequestedTimeToleranceAfter(_: CMTime) // property
    requestedTimeToleranceBefore: CMTime;
    setRequestedTimeToleranceBefore(_: CMTime) // property
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition) // property
    cancelAllCGImageGeneration(): void;
    copyCGImageAtTimeActualTimeError(actualTime: CMTime, error?: CMTime): any;
    generateCGImagesAsynchronouslyWithForTimesCompletionHandler(forTimes: NSValue[], completionHandler: (p1: CMTime, p2: any, p3: CMTime, p4: AVAssetImageGenerator.Result, p5: NSError) => void): void;
    static createWithAsset(asset: AVAsset): AVAssetImageGenerator;
  }

  // interface
  class AVAssetReader extends NSObject {
    static assetReaderWithAssetError(error: AVAsset): AVAssetReader;
    asset: AVAsset; // property
    error: NSError; // property
    outputs: AVAssetReaderOutput[]; // property
    status: AVAssetReader.Status; // property
    timeRange: CMTimeRange;
    setTimeRange(_: CMTimeRange) // property
    addOutput(_: AVAssetReaderOutput): void;
    canAddOutput(_: AVAssetReaderOutput): boolean;
    cancelReading(): void;
    static createWithAsset(asset: AVAsset): AVAssetReader;
    startReading(): boolean;
  }

  // interface
  class AVAssetReaderAudioMixOutput extends AVAssetReaderOutput {
    static assetReaderAudioMixOutputWithAudioTracksAudioSettings(audioTracks: AVAssetTrack[], audioSettings?: Map<string, any>): AVAssetReaderAudioMixOutput;
    audioMix: AVAudioMix;
    setAudioMix(_: AVAudioMix) // property
    audioSettings: Map<string, any>; // property
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string) // property
    audioTracks: AVAssetTrack[]; // property
    static createWithAudioTracksAudioSettings(audioTracks: AVAssetTrack[], audioSettings?: Map<string, any>): AVAssetReaderAudioMixOutput;
  }

  // interface
  class AVAssetReaderOutput extends NSObject {
    alwaysCopiesSampleData: boolean;
    setAlwaysCopiesSampleData(_: boolean) // property
    mediaType: string; // property
    supportsRandomAccess: boolean;
    setSupportsRandomAccess(_: boolean) // property
    copyNextSampleBuffer(): any;
    markConfigurationAsFinal(): void;
    resetForReadingTimeRanges(forReadingTimeRanges: NSValue[]): void;
  }

  // interface
  class AVAssetReaderOutputMetadataAdaptor extends NSObject {
    static assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput(assetReaderTrackOutput: AVAssetReaderTrackOutput): AVAssetReaderOutputMetadataAdaptor;
    assetReaderTrackOutput: AVAssetReaderTrackOutput; // property
    static createWithAssetReaderTrackOutput(assetReaderTrackOutput: AVAssetReaderTrackOutput): AVAssetReaderOutputMetadataAdaptor;
    nextTimedMetadataGroup(): AVTimedMetadataGroup;
  }

  // interface
  class AVAssetReaderSampleReferenceOutput extends AVAssetReaderOutput {
    static assetReaderSampleReferenceOutputWithTrack(track: AVAssetTrack): AVAssetReaderSampleReferenceOutput;
    track: AVAssetTrack; // property
    static createWithTrack(track: AVAssetTrack): AVAssetReaderSampleReferenceOutput;
  }

  // interface
  class AVAssetReaderTrackOutput extends AVAssetReaderOutput {
    static assetReaderTrackOutputWithTrackOutputSettings(track: AVAssetTrack, outputSettings?: Map<string, any>): AVAssetReaderTrackOutput;
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string) // property
    outputSettings: Map<string, any>; // property
    track: AVAssetTrack; // property
    static createWithTrackOutputSettings(track: AVAssetTrack, outputSettings?: Map<string, any>): AVAssetReaderTrackOutput;
  }

  // interface
  class AVAssetReaderVideoCompositionOutput extends AVAssetReaderOutput {
    static assetReaderVideoCompositionOutputWithVideoTracksVideoSettings(videoTracks: AVAssetTrack[], videoSettings?: Map<string, any>): AVAssetReaderVideoCompositionOutput;
    customVideoCompositor: AVVideoCompositing; // property
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition) // property
    videoSettings: Map<string, any>; // property
    videoTracks: AVAssetTrack[]; // property
    static createWithVideoTracksVideoSettings(videoTracks: AVAssetTrack[], videoSettings?: Map<string, any>): AVAssetReaderVideoCompositionOutput;
  }

  // interface
  class AVAssetResourceLoader extends NSObject {
    delegate: AVAssetResourceLoaderDelegate; // property
    delegateQueue: NSObject; // property
    preloadsEligibleContentKeys: boolean;
    setPreloadsEligibleContentKeys(_: boolean) // property
    setDelegateQueue(_?: AVAssetResourceLoaderDelegate, queue?: NSObject): void;
  }

  interface AVAssetResourceLoaderDelegate extends NSObject {
    // instance method
    resourceLoaderDidCancelLoadingRequest?(_: AVAssetResourceLoader, didCancel: AVAssetResourceLoadingRequest): void;
    // instance method
    resourceLoaderShouldWaitForResponseToAuthenticationChallenge?(_: AVAssetResourceLoader, shouldWaitForResponseTo: URLAuthenticationChallenge): boolean;
    // instance method
    resourceLoaderDidCancelAuthenticationChallenge?(_: AVAssetResourceLoader, didCancel: URLAuthenticationChallenge): void;
    // instance method
    resourceLoaderShouldWaitForLoadingOfRequestedResource?(_: AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource: AVAssetResourceLoadingRequest): boolean;
    // instance method
    resourceLoaderShouldWaitForRenewalOfRequestedResource?(_: AVAssetResourceLoader, shouldWaitForRenewalOfRequestedResource: AVAssetResourceRenewalRequest): boolean;
  }

  // interface
  class AVAssetResourceLoadingContentInformationRequest extends NSObject {
    allowedContentTypes: string[]; // property
    isByteRangeAccessSupported: boolean;
    setByteRangeAccessSupported(_: boolean) // property
    contentLength: number;
    setContentLength(_: number) // property
    contentType: string;
    setContentType(_: string) // property
    renewalDate: Date;
    setRenewalDate(_: Date) // property
  }

  // interface
  class AVAssetResourceLoadingDataRequest extends NSObject {
    currentOffset: number; // property
    requestedLength: number; // property
    requestedOffset: number; // property
    requestsAllDataToEndOfResource: boolean; // property
    respondWithData(with_: NSData): void;
  }

  // interface
  class AVAssetResourceLoadingRequest extends NSObject {
    isCancelled: boolean; // property
    contentInformationRequest: AVAssetResourceLoadingContentInformationRequest; // property
    dataRequest: AVAssetResourceLoadingDataRequest; // property
    isFinished: boolean; // property
    redirect: NSURLRequest;
    setRedirect(_: NSURLRequest) // property
    request: NSURLRequest; // property
    requestor: AVAssetResourceLoadingRequestor; // property
    response: URLResponse;
    setResponse(_: URLResponse) // property
    finishLoading(): void;
    finishLoadingWithError(with_?: NSError): void;
    persistentContentKeyFromKeyVendorResponseOptionsError(options: NSData, error?: Map<string, any>): NSData;
    streamingContentKeyRequestDataForAppContentIdentifierOptionsError(contentIdentifier: NSData, options: NSData, error?: Map<string, any>): NSData;
  }

  // interface
  class AVAssetResourceLoadingRequestor extends NSObject {
    providesExpiredSessionReports: boolean; // property
  }

  // interface
  class AVAssetResourceRenewalRequest extends AVAssetResourceLoadingRequest {
  }

  // interface
  class AVAssetTrack extends NSObject /* implements AVAsynchronousKeyValueLoading, NSCopying */ {
    asset: AVAsset; // property
    availableMetadataFormats: string[]; // property
    availableTrackAssociationTypes: string[]; // property
    canProvideSampleCursors: boolean; // property
    commonMetadata: AVMetadataItem[]; // property
    isDecodable: boolean; // property
    isEnabled: boolean; // property
    estimatedDataRate: number; // property
    extendedLanguageTag: string; // property
    formatDescriptions: any[]; // property
    hasAudioSampleDependencies: boolean; // property
    languageCode: string; // property
    mediaType: string; // property
    metadata: AVMetadataItem[]; // property
    minFrameDuration: CMTime; // property
    naturalSize: CGSize; // property
    naturalTimeScale: number; // property
    nominalFrameRate: number; // property
    isPlayable: boolean; // property
    preferredTransform: CGAffineTransform; // property
    preferredVolume: number; // property
    requiresFrameReordering: boolean; // property
    segments: AVAssetTrackSegment[]; // property
    isSelfContained: boolean; // property
    timeRange: CMTimeRange; // property
    totalSampleDataLength: number; // property
    trackID: number; // property
    associatedTracksOfType(ofType: string): AVAssetTrack[];
    hasMediaCharacteristic(_: string): boolean;
    makeSampleCursorAtFirstSampleInDecodeOrder(): AVSampleCursor;
    makeSampleCursorAtLastSampleInDecodeOrder(): AVSampleCursor;
    makeSampleCursorWithPresentationTimeStamp(presentationTimeStamp: CMTime): AVSampleCursor;
    metadataForFormat(forFormat: string): AVMetadataItem[];
    samplePresentationTimeForTrackTime(forTrackTime: CMTime): CMTime;
    segmentForTrackTime(forTrackTime: CMTime): AVAssetTrackSegment;
  }

  // interface
  class AVAssetTrackGroup extends NSObject /* implements NSCopying */ {
    trackIDs: number[]; // property
  }

  // interface
  class AVAssetTrackSegment extends NSObject {
    isEmpty: boolean; // property
    timeMapping: CMTimeMapping; // property
  }

  // interface
  class AVAssetWriter extends NSObject {
    static assetWriterWithURLFileTypeError(fileType: NSURL, error: string): AVAssetWriter;
    availableMediaTypes: string[]; // property
    directoryForTemporaryFiles: NSURL;
    setDirectoryForTemporaryFiles(_: NSURL) // property
    error: NSError; // property
    inputGroups: AVAssetWriterInputGroup[]; // property
    inputs: AVAssetWriterInput[]; // property
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[]) // property
    movieFragmentInterval: CMTime;
    setMovieFragmentInterval(_: CMTime) // property
    movieTimeScale: number;
    setMovieTimeScale(_: number) // property
    outputFileType: string; // property
    outputURL: NSURL; // property
    overallDurationHint: CMTime;
    setOverallDurationHint(_: CMTime) // property
    shouldOptimizeForNetworkUse: boolean;
    setShouldOptimizeForNetworkUse(_: boolean) // property
    status: AVAssetWriter.Status; // property
    addInput(_: AVAssetWriterInput): void;
    addInputGroup(_: AVAssetWriterInputGroup): void;
    canAddInput(_: AVAssetWriterInput): boolean;
    canAddInputGroup(_: AVAssetWriterInputGroup): boolean;
    canApplyOutputSettingsForMediaType(outputSettings?: Map<string, any>, forMediaType?: string): boolean;
    cancelWriting(): void;
    endSessionAtSourceTime(atSourceTime: CMTime): void;
    finishWritingWithCompletionHandler(completionHandler: () => void): void;
    static createWithUrlFileType(URL: NSURL, fileType: string): AVAssetWriter;
    startSessionAtSourceTime(atSourceTime: CMTime): void;
    startWriting(): boolean;
  }

  // interface
  class AVAssetWriterInput extends NSObject {
    canPerformMultiplePasses: boolean; // property
    currentPassDescription: AVAssetWriterInputPassDescription; // property
    expectsMediaDataInRealTime: boolean;
    setExpectsMediaDataInRealTime(_: boolean) // property
    extendedLanguageTag: string;
    setExtendedLanguageTag(_: string) // property
    languageCode: string;
    setLanguageCode(_: string) // property
    marksOutputTrackAsEnabled: boolean;
    setMarksOutputTrackAsEnabled(_: boolean) // property
    mediaDataLocation: string;
    setMediaDataLocation(_: string) // property
    mediaTimeScale: number;
    setMediaTimeScale(_: number) // property
    mediaType: string; // property
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[]) // property
    naturalSize: CGSize;
    setNaturalSize(_: CGSize) // property
    outputSettings: Map<string, any>; // property
    performsMultiPassEncodingIfSupported: boolean;
    setPerformsMultiPassEncodingIfSupported(_: boolean) // property
    preferredMediaChunkAlignment: number;
    setPreferredMediaChunkAlignment(_: number) // property
    preferredMediaChunkDuration: CMTime;
    setPreferredMediaChunkDuration(_: CMTime) // property
    preferredVolume: number;
    setPreferredVolume(_: number) // property
    isReadyForMoreMediaData: boolean; // property
    sampleReferenceBaseURL: NSURL;
    setSampleReferenceBaseURL(_: NSURL) // property
    sourceFormatHint: any; // property
    transform: CGAffineTransform;
    setTransform(_: CGAffineTransform) // property
    addTrackAssociationWithTrackOfInputType(withTrackOf: AVAssetWriterInput, type: string): void;
    appendSampleBuffer(_: any): boolean;
    canAddTrackAssociationWithTrackOfInputType(withTrackOf: AVAssetWriterInput, type: string): boolean;
    static createWithMediaTypeOutputSettings(mediaType: string, outputSettings?: Map<string, any>): AVAssetWriterInput;
    static createWithMediaTypeOutputSettingsSourceFormatHint(mediaType: string, outputSettings?: Map<string, any>, sourceFormatHint?: any): AVAssetWriterInput;
    markAsFinished(): void;
    markCurrentPassAsFinished(): void;
    requestMediaDataWhenReadyWithOnUsing(on: NSObject, using: () => void): void;
    respondToEachPassDescriptionWithOnUsing(on: NSObject, using: () => void): void;
  }

  // interface
  class AVAssetWriterInputGroup extends AVMediaSelectionGroup {
    static assetWriterInputGroupWithInputsDefaultInput(inputs: AVAssetWriterInput[], defaultInput?: AVAssetWriterInput): AVAssetWriterInputGroup;
    defaultInput: AVAssetWriterInput; // property
    inputs: AVAssetWriterInput[]; // property
    static createWithInputsDefaultInput(inputs: AVAssetWriterInput[], defaultInput?: AVAssetWriterInput): AVAssetWriterInputGroup;
  }

  // interface
  class AVAssetWriterInputMetadataAdaptor extends NSObject {
    static assetWriterInputMetadataAdaptorWithAssetWriterInput(assetWriterInput: AVAssetWriterInput): AVAssetWriterInputMetadataAdaptor;
    assetWriterInput: AVAssetWriterInput; // property
    appendTimedMetadataGroup(_: AVTimedMetadataGroup): boolean;
    static createWithAssetWriterInput(assetWriterInput: AVAssetWriterInput): AVAssetWriterInputMetadataAdaptor;
  }

  // interface
  class AVAssetWriterInputPassDescription extends NSObject {
    sourceTimeRanges: NSValue[]; // property
  }

  // interface
  class AVAssetWriterInputPixelBufferAdaptor extends NSObject {
    static assetWriterInputPixelBufferAdaptorWithAssetWriterInputSourcePixelBufferAttributes(assetWriterInput: AVAssetWriterInput, sourcePixelBufferAttributes?: Map<string, any>): AVAssetWriterInputPixelBufferAdaptor;
    assetWriterInput: AVAssetWriterInput; // property
    pixelBufferPool: any; // property
    sourcePixelBufferAttributes: Map<string, any>; // property
    appendPixelBufferWithPresentationTime(_: any, withPresentationTime: CMTime): boolean;
    static createWithAssetWriterInputSourcePixelBufferAttributes(assetWriterInput: AVAssetWriterInput, sourcePixelBufferAttributes?: Map<string, any>): AVAssetWriterInputPixelBufferAdaptor;
  }

  // interface
  class AVAsynchronousCIImageFilteringRequest extends NSObject /* implements NSCopying */ {
    compositionTime: CMTime; // property
    renderSize: CGSize; // property
    sourceImage: CIImage; // property
    finishWithError(with_: NSError): void;
    finishWithImageContext(with_: CIImage, context?: CIContext): void;
  }

  interface AVAsynchronousKeyValueLoading {
    // instance method
    loadValuesAsynchronouslyWithForKeysCompletionHandler(forKeys: string[], completionHandler?: () => void): void;
    // instance method
    statusOfValueForKeyError(forKey: string): AVKeyValueStatus;
  }

  // interface
  class AVAsynchronousVideoCompositionRequest extends NSObject /* implements NSCopying */ {
    compositionTime: CMTime; // property
    renderContext: AVVideoCompositionRenderContext; // property
    sourceTrackIDs: number[]; // property
    videoCompositionInstruction: AVVideoCompositionInstruction; // property
    finishCancelledRequest(): void;
    finishWithComposedVideoFrame(withComposedVideoFrame: any): void;
    finishWithError(with_: NSError): void;
    sourceFrameByTrackID(byTrackID: number): any;
  }

  // struct
  interface AVAudioTypes {
    yaw: number;
    pitch: number;
    roll: number;
  }

  interface AVAudio3DMixing extends NSObject {
    obstruction: number;
    setObstruction(_: number) // property
    occlusion: number;
    setOcclusion(_: number) // property
    pointSourceInHeadMode: AVAudio3DMixingPointSourceInHeadMode;
    setPointSourceInHeadMode(_: AVAudio3DMixingPointSourceInHeadMode) // property
    position: AVAudioTypes;
    setPosition(_: AVAudioTypes) // property
    rate: number;
    setRate(_: number) // property
    renderingAlgorithm: AVAudio3DMixingRenderingAlgorithm;
    setRenderingAlgorithm(_: AVAudio3DMixingRenderingAlgorithm) // property
    reverbBlend: number;
    setReverbBlend(_: number) // property
    sourceMode: AVAudio3DMixingSourceMode;
    setSourceMode(_: AVAudio3DMixingSourceMode) // property
  }

  // struct
  interface AVAudioTypes {
    x: number;
    y: number;
    z: number;
  }

  // struct
  interface AVAudioTypes {
    forward: AVAudioTypes;
    up: AVAudioTypes;
  }

  // interface
  class AVAudioBuffer extends NSObject /* implements NSCopying, NSMutableCopying */ {
    audioBufferList: AudioBufferList; // property
    format: AVAudioFormat; // property
    mutableAudioBufferList: AudioBufferList; // property
  }

  // interface
  class AVAudioChannelLayout extends NSObject /* implements NSSecureCoding */ {
    channelCount: number; // property
    layout: AudioChannelLayout; // property
    layoutTag: number; // property
    static createWithLayout(layout: AudioChannelLayout): AVAudioChannelLayout;
    static createWithLayoutTag(layoutTag: number): AVAudioChannelLayout;
  }

  // interface
  class AVAudioCompressedBuffer extends AVAudioBuffer {
    byteCapacity: number; // property
    byteLength: number;
    setByteLength(_: number) // property
    data: any; // property
    maximumPacketSize: number; // property
    packetCapacity: number; // property
    packetCount: number;
    setPacketCount(_: number) // property
    packetDescriptions: AudioStreamPacketDescription; // property
    static createWithFormatPacketCapacity(format: AVAudioFormat, packetCapacity: number): AVAudioCompressedBuffer;
    static createWithFormatPacketCapacityMaximumPacketSize(format: AVAudioFormat, packetCapacity: number, maximumPacketSize: number): AVAudioCompressedBuffer;
  }

  // interface
  class AVAudioConnectionPoint extends NSObject {
    bus: number; // property
    node: AVAudioNode; // property
    static createWithNodeBus(node: AVAudioNode, bus: number): AVAudioConnectionPoint;
  }

  // interface
  class AVAudioConverter extends NSObject {
    applicableEncodeBitRates: number[]; // property
    applicableEncodeSampleRates: number[]; // property
    availableEncodeBitRates: number[]; // property
    availableEncodeChannelLayoutTags: number[]; // property
    availableEncodeSampleRates: number[]; // property
    bitRate: number;
    setBitRate(_: number) // property
    bitRateStrategy: string;
    setBitRateStrategy(_: string) // property
    channelMap: number[];
    setChannelMap(_: number[]) // property
    dither: boolean;
    setDither(_: boolean) // property
    downmix: boolean;
    setDownmix(_: boolean) // property
    inputFormat: AVAudioFormat; // property
    magicCookie: NSData;
    setMagicCookie(_: NSData) // property
    maximumOutputPacketSize: number; // property
    outputFormat: AVAudioFormat; // property
    primeInfo: AVAudioConverter;
    setPrimeInfo(_: AVAudioConverter) // property
    primeMethod: AVAudioConverterPrimeMethod;
    setPrimeMethod(_: AVAudioConverterPrimeMethod) // property
    sampleRateConverterAlgorithm: string;
    setSampleRateConverterAlgorithm(_: string) // property
    sampleRateConverterQuality: number;
    setSampleRateConverterQuality(_: number) // property
    convertWithToErrorWithInputFrom(to: AVAudioBuffer, error?: Error, withInputFrom?: (p1: number, p2: AVAudioConverterInputStatus) => AVAudioBuffer): AVAudioConverterOutputStatus;
    convertToBufferFromBufferError(fromBuffer: AVAudioPCMBuffer, error: AVAudioPCMBuffer): boolean;
    static createWithFromFormatToFormat(fromFormat: AVAudioFormat, toFormat: AVAudioFormat): AVAudioConverter;
    reset(): void;
  }

  // struct
  interface AVAudioConverter {
    leadingFrames: number;
    trailingFrames: number;
  }

  // interface
  class AVAudioEngine extends NSObject {
    attachedNodes: NSSet<AVAudioNode>; // property
    isAutoShutdownEnabled: boolean;
    setAutoShutdownEnabled(_: boolean) // property
    inputNode: AVAudioInputNode; // property
    isInManualRenderingMode: boolean; // property
    mainMixerNode: AVAudioMixerNode; // property
    manualRenderingBlock: (p1: number, p2: AudioBufferList, p3: number) => AVAudioEngineManualRenderingStatus; // property
    manualRenderingFormat: AVAudioFormat; // property
    manualRenderingMaximumFrameCount: number; // property
    manualRenderingMode: AVAudioEngineManualRenderingMode; // property
    manualRenderingSampleTime: number; // property
    musicSequence: any;
    setMusicSequence(_: any) // property
    outputNode: AVAudioOutputNode; // property
    isRunning: boolean; // property
    attachNode(_: AVAudioNode): void;
    connectToFormat(_: AVAudioNode, to: AVAudioNode, format?: AVAudioFormat): void;
    connectToFromBusToBusFormat(_: AVAudioNode, to: AVAudioNode, fromBus: number, toBus: number, format?: AVAudioFormat): void;
    connectToConnectionPointsFromBusFormat(_: AVAudioNode, to: AVAudioConnectionPoint[], fromBus: number, format?: AVAudioFormat): void;
    connectMIDIWithToFormatBlock(_: AVAudioNode, to: AVAudioNode, format?: AVAudioFormat, block?: (p1: number, p2: number, p3: number, p4: string) => number): void;
    connectMIDIToFormatBlock(_: AVAudioNode, to: AVAudioNode[], format?: AVAudioFormat, block?: (p1: number, p2: number, p3: number, p4: string) => number): void;
    detachNode(_: AVAudioNode): void;
    disableManualRenderingMode(): void;
    disconnectMIDIFrom(_: AVAudioNode, from: AVAudioNode): void;
    disconnectMIDIFromNodes(_: AVAudioNode, from: AVAudioNode[]): void;
    disconnectMIDIInput(_: AVAudioNode): void;
    disconnectMIDIOutput(_: AVAudioNode): void;
    disconnectNodeInput(_: AVAudioNode): void;
    disconnectNodeInputBus(_: AVAudioNode, bus: number): void;
    disconnectNodeOutput(_: AVAudioNode): void;
    disconnectNodeOutputBus(_: AVAudioNode, bus: number): void;
    enableManualRenderingModeFormatMaximumFrameCountError(format: AVAudioEngineManualRenderingMode, maximumFrameCount: AVAudioFormat, error: number): boolean;
    inputConnectionPointForNodeInputBus(for_: AVAudioNode, inputBus: number): AVAudioConnectionPoint;
    outputConnectionPointsForNodeOutputBus(for_: AVAudioNode, outputBus: number): AVAudioConnectionPoint[];
    pause(): void;
    prepare(): void;
    renderOfflineToBufferError(toBuffer: number, error: AVAudioPCMBuffer): AVAudioEngineManualRenderingStatus;
    reset(): void;
    startAndReturnError(): boolean;
    stop(): void;
  }

  // interface
  class AVAudioEnvironmentDistanceAttenuationParameters extends NSObject {
    distanceAttenuationModel: AVAudioEnvironmentDistanceAttenuationModel;
    setDistanceAttenuationModel(_: AVAudioEnvironmentDistanceAttenuationModel) // property
    maximumDistance: number;
    setMaximumDistance(_: number) // property
    referenceDistance: number;
    setReferenceDistance(_: number) // property
    rolloffFactor: number;
    setRolloffFactor(_: number) // property
  }

  // interface
  class AVAudioEnvironmentNode extends AVAudioNode /* implements AVAudioMixing */ {
    applicableRenderingAlgorithms: number[]; // property
    distanceAttenuationParameters: AVAudioEnvironmentDistanceAttenuationParameters; // property
    listenerAngularOrientation: AVAudioTypes;
    setListenerAngularOrientation(_: AVAudioTypes) // property
    listenerPosition: AVAudioTypes;
    setListenerPosition(_: AVAudioTypes) // property
    listenerVectorOrientation: AVAudioTypes;
    setListenerVectorOrientation(_: AVAudioTypes) // property
    nextAvailableInputBus: number; // property
    outputType: AVAudioEnvironmentOutputType;
    setOutputType(_: AVAudioEnvironmentOutputType) // property
    outputVolume: number;
    setOutputVolume(_: number) // property
    reverbParameters: AVAudioEnvironmentReverbParameters; // property
  }

  // interface
  class AVAudioEnvironmentReverbParameters extends NSObject {
    enable: boolean;
    setEnable(_: boolean) // property
    filterParameters: AVAudioUnitEQFilterParameters; // property
    level: number;
    setLevel(_: number) // property
    loadFactoryReverbPreset(_: AVAudioUnitReverbPreset): void;
  }

  // interface
  class AVAudioFile extends NSObject {
    fileFormat: AVAudioFormat; // property
    framePosition: number;
    setFramePosition(_: number) // property
    length: number; // property
    processingFormat: AVAudioFormat; // property
    url: NSURL; // property
    static createWithForReadingCommonFormatInterleaved(forReading: NSURL, commonFormat: AVAudioCommonFormat, interleaved: boolean): AVAudioFile;
    static createWithForReading(forReading: NSURL): AVAudioFile;
    static createWithForWritingSettingsCommonFormatInterleaved(forWriting: NSURL, settings: Map<string, any>, commonFormat: AVAudioCommonFormat, interleaved: boolean): AVAudioFile;
    static createWithForWritingSettings(forWriting: NSURL, settings: Map<string, any>): AVAudioFile;
    readIntoBufferError(error: AVAudioPCMBuffer): boolean;
    readIntoBufferFrameCountError(frameCount: AVAudioPCMBuffer, error: number): boolean;
    writeFromBufferError(error: AVAudioPCMBuffer): boolean;
  }

  // interface
  class AVAudioFormat extends NSObject /* implements NSSecureCoding */ {
    channelCount: number; // property
    channelLayout: AVAudioChannelLayout; // property
    commonFormat: AVAudioCommonFormat; // property
    formatDescription: any; // property
    isInterleaved: boolean; // property
    magicCookie: NSData;
    setMagicCookie(_: NSData) // property
    sampleRate: number; // property
    settings: Map<string, any>; // property
    isStandard: boolean; // property
    streamDescription: AudioStreamBasicDescription; // property
    static createWithStandardFormatWithSampleRateChannelLayout(standardFormatWithSampleRate: number, channelLayout: AVAudioChannelLayout): AVAudioFormat;
    static createWithStandardFormatWithSampleRateChannels(standardFormatWithSampleRate: number, channels: number): AVAudioFormat;
    static createWithCMAudioFormatDescription(CMAudioFormatDescription: any): AVAudioFormat;
    static createWithCommonFormatSampleRateChannelsInterleaved(commonFormat: AVAudioCommonFormat, sampleRate: number, channels: number, interleaved: boolean): AVAudioFormat;
    static createWithCommonFormatSampleRateInterleavedChannelLayout(commonFormat: AVAudioCommonFormat, sampleRate: number, interleaved: boolean, channelLayout: AVAudioChannelLayout): AVAudioFormat;
    static createWithSettings(settings: Map<string, any>): AVAudioFormat;
    static createWithStreamDescription(streamDescription: AudioStreamBasicDescription): AVAudioFormat;
    static createWithStreamDescriptionChannelLayout(streamDescription: AudioStreamBasicDescription, channelLayout?: AVAudioChannelLayout): AVAudioFormat;
  }

  // interface
  class AVAudioIONode extends AVAudioNode {
    // audioUnit: CarbonCore.Components; // property
    presentationLatency: number; // property
    isVoiceProcessingEnabled: boolean; // property
    setVoiceProcessingEnabledError(error: boolean): boolean;
  }

  // interface
  class AVAudioInputNode extends AVAudioIONode /* implements AVAudioMixing */ {
    isVoiceProcessingAGCEnabled: boolean;
    setVoiceProcessingAGCEnabled(_: boolean) // property
    isVoiceProcessingBypassed: boolean;
    setVoiceProcessingBypassed(_: boolean) // property
    isVoiceProcessingInputMuted: boolean;
    setVoiceProcessingInputMuted(_: boolean) // property
    setManualRenderingInputPCMFormatWithInputBlock(_: AVAudioFormat, inputBlock: (p1: number) => AudioBufferList): boolean;
  }

  // interface
  class AVAudioMix extends NSObject /* implements NSCopying, NSMutableCopying */ {
    inputParameters: AVAudioMixInputParameters[]; // property
  }

  // interface
  class AVAudioMixInputParameters extends NSObject /* implements NSCopying, NSMutableCopying */ {
    audioTapProcessor: any; // property
    audioTimePitchAlgorithm: string; // property
    trackID: number; // property
    getVolumeRampForTimeStartVolumeEndVolumeTimeRange(for_: CMTime, startVolume?: number, endVolume?: number, timeRange?: CMTimeRange): boolean;
  }

  // interface
  class AVAudioMixerNode extends AVAudioNode /* implements AVAudioMixing */ {
    nextAvailableInputBus: number; // property
    outputVolume: number;
    setOutputVolume(_: number) // property
  }

  interface AVAudioMixing extends AVAudio3DMixing, AVAudioStereoMixing {
    volume: number;
    setVolume(_: number) // property
    // instance method
    destinationForMixerBus(forMixer: AVAudioNode, bus: number): AVAudioMixingDestination;
  }

  // interface
  class AVAudioMixingDestination extends NSObject /* implements AVAudioMixing */ {
    connectionPoint: AVAudioConnectionPoint; // property
  }

  // interface
  class AVAudioNode extends NSObject {
    AUAudioUnit: AUAudioUnit; // property
    engine: AVAudioEngine; // property
    lastRenderTime: AVAudioTime; // property
    latency: number; // property
    numberOfInputs: number; // property
    numberOfOutputs: number; // property
    outputPresentationLatency: number; // property
    inputFormatForBus(forBus: number): AVAudioFormat;
    installTapWithOnBusBufferSizeFormatBlock(onBus: number, bufferSize: number, format?: AVAudioFormat, block?: (p1: AVAudioPCMBuffer, p2: AVAudioTime) => void): void;
    nameForInputBus(forInputBus: number): string;
    nameForOutputBus(forOutputBus: number): string;
    outputFormatForBus(forBus: number): AVAudioFormat;
    removeTapOnBus(onBus: number): void;
    reset(): void;
  }

  // interface
  class AVAudioOutputNode extends AVAudioIONode {
  }

  // interface
  class AVAudioPCMBuffer extends AVAudioBuffer {
    floatChannelData: number; // property
    frameCapacity: number; // property
    frameLength: number;
    setFrameLength(_: number) // property
    int16ChannelData: number; // property
    int32ChannelData: number; // property
    stride: number; // property
    static createWithPCMFormatFrameCapacity(PCMFormat: AVAudioFormat, frameCapacity: number): AVAudioPCMBuffer;
  }

  // interface
  class AVAudioPlayer extends NSObject {
    currentDevice: string;
    setCurrentDevice(_: string) // property
    currentTime: number;
    setCurrentTime(_: number) // property
    data: NSData; // property
    delegate: AVAudioPlayerDelegate;
    setDelegate(_: AVAudioPlayerDelegate) // property
    deviceCurrentTime: number; // property
    duration: number; // property
    enableRate: boolean;
    setEnableRate(_: boolean) // property
    format: AVAudioFormat; // property
    isMeteringEnabled: boolean;
    setMeteringEnabled(_: boolean) // property
    numberOfChannels: number; // property
    numberOfLoops: number;
    setNumberOfLoops(_: number) // property
    pan: number;
    setPan(_: number) // property
    isPlaying: boolean; // property
    rate: number;
    setRate(_: number) // property
    settings: Map<string, any>; // property
    url: NSURL; // property
    volume: number;
    setVolume(_: number) // property
    averagePowerForChannel(forChannel: number): number;
    static createWithContentsOfURL(contentsOfURL: NSURL): AVAudioPlayer;
    static createWithContentsOfURLFileTypeHint(contentsOfURL: NSURL, fileTypeHint?: string): AVAudioPlayer;
    static createWithData(data: NSData): AVAudioPlayer;
    static createWithDataFileTypeHint(data: NSData, fileTypeHint?: string): AVAudioPlayer;
    pause(): void;
    peakPowerForChannel(forChannel: number): number;
    play(): boolean;
    playAtTime(atTime: number): boolean;
    prepareToPlay(): boolean;
    setVolumeFadeDuration(_: number, fadeDuration: number): void;
    stop(): void;
    updateMeters(): void;
  }

  interface AVAudioPlayerDelegate extends NSObject {
    // instance method
    audioPlayerDecodeErrorDidOccurError?(_: AVAudioPlayer, error?: NSError): void;
    // instance method
    audioPlayerDidFinishPlayingSuccessfully?(_: AVAudioPlayer, successfully: boolean): void;
  }

  // interface
  class AVAudioPlayerNode extends AVAudioNode /* implements AVAudioMixing */ {
    isPlaying: boolean; // property
    nodeTimeForPlayerTime(forPlayerTime: AVAudioTime): AVAudioTime;
    pause(): void;
    play(): void;
    playAtTime(at?: AVAudioTime): void;
    playerTimeForNodeTime(forNodeTime: AVAudioTime): AVAudioTime;
    prepareWithFrameCount(withFrameCount: number): void;
    scheduleBufferAtOptionsCompletionCallbackTypeCompletionHandler(_: AVAudioPCMBuffer, at?: AVAudioTime, options?: AVAudioPlayerNodeBufferOptions, completionCallbackType?: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    scheduleBufferAtOptionsCompletionHandler(_: AVAudioPCMBuffer, at?: AVAudioTime, options?: AVAudioPlayerNodeBufferOptions, completionHandler?: () => void): void;
    scheduleBufferWithCompletionCallbackTypeCompletionHandler(_: AVAudioPCMBuffer, completionCallbackType: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    scheduleBufferWithCompletionHandler(_: AVAudioPCMBuffer, completionHandler?: () => void): void;
    scheduleFileAtCompletionCallbackTypeCompletionHandler(_: AVAudioFile, at?: AVAudioTime, completionCallbackType?: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    scheduleFileAtCompletionHandler(_: AVAudioFile, at?: AVAudioTime, completionHandler?: () => void): void;
    scheduleSegmentStartingFrameFrameCountAtCompletionCallbackTypeCompletionHandler(_: AVAudioFile, startingFrame: number, frameCount: number, at?: AVAudioTime, completionCallbackType?: AVAudioPlayerNodeCompletionCallbackType, completionHandler?: (p1: AVAudioPlayerNodeCompletionCallbackType) => void): void;
    scheduleSegmentStartingFrameFrameCountAtCompletionHandler(_: AVAudioFile, startingFrame: number, frameCount: number, at?: AVAudioTime, completionHandler?: () => void): void;
    stop(): void;
  }

  // interface
  class AVAudioRecorder extends NSObject {
    currentTime: number; // property
    delegate: AVAudioRecorderDelegate;
    setDelegate(_: AVAudioRecorderDelegate) // property
    deviceCurrentTime: number; // property
    format: AVAudioFormat; // property
    isMeteringEnabled: boolean;
    setMeteringEnabled(_: boolean) // property
    isRecording: boolean; // property
    settings: Map<string, any>; // property
    url: NSURL; // property
    averagePowerForChannel(forChannel: number): number;
    deleteRecording(): boolean;
    static createWithUrlFormat(URL: NSURL, format: AVAudioFormat): AVAudioRecorder;
    static createWithUrlSettings(URL: NSURL, settings: Map<string, any>): AVAudioRecorder;
    pause(): void;
    peakPowerForChannel(forChannel: number): number;
    prepareToRecord(): boolean;
    record(): boolean;
    recordAtTime(atTime: number): boolean;
    recordAtTimeForDuration(atTime: number, forDuration: number): boolean;
    recordForDuration(forDuration: number): boolean;
    stop(): void;
    updateMeters(): void;
  }

  interface AVAudioRecorderDelegate extends NSObject {
    // instance method
    audioRecorderDidFinishRecordingSuccessfully?(_: AVAudioRecorder, successfully: boolean): void;
    // instance method
    audioRecorderEncodeErrorDidOccurError?(_: AVAudioRecorder, error?: NSError): void;
  }

  // interface
  class AVAudioSequencer extends NSObject {
    currentPositionInBeats: number;
    setCurrentPositionInBeats(_: number) // property
    currentPositionInSeconds: number;
    setCurrentPositionInSeconds(_: number) // property
    isPlaying: boolean; // property
    rate: number;
    setRate(_: number) // property
    tempoTrack: AVMusicTrack; // property
    tracks: AVMusicTrack[]; // property
    userInfo: Map<string, any>; // property
    beatsForHostTimeError(forHostTime: number): number;
    beatsForSeconds(forSeconds: number): number;
    dataWithSMPTEResolutionError(withSMPTEResolution: number): NSData;
    hostTimeForBeatsError(forBeats: number): number;
    static createWithAudioEngine(audioEngine: AVAudioEngine): AVAudioSequencer;
    loadFromDataOptionsError(options: NSData, error: AVMusicSequenceLoadOptions): boolean;
    loadFromURLOptionsError(options: NSURL, error: AVMusicSequenceLoadOptions): boolean;
    prepareToPlay(): void;
    secondsForBeats(forBeats: number): number;
    startAndReturnError(): boolean;
    stop(): void;
    writeToURLSMPTEResolutionReplaceExistingError(SMPTEResolution: NSURL, replaceExisting: number, error: boolean): boolean;
  }

  // interface
  class AVAudioSinkNode extends AVAudioNode {
    static createWithReceiverBlock(receiverBlock: (p1: AudioTimeStamp, p2: number, p3: AudioBufferList) => number): AVAudioSinkNode;
  }

  // interface
  class AVAudioSourceNode extends AVAudioNode /* implements AVAudioMixing */ {
    static createWithFormatRenderBlock(format: AVAudioFormat, renderBlock: (p1: boolean, p2: AudioTimeStamp, p3: number, p4: AudioBufferList) => number): AVAudioSourceNode;
    static createWithRenderBlock(renderBlock: (p1: boolean, p2: AudioTimeStamp, p3: number, p4: AudioBufferList) => number): AVAudioSourceNode;
  }

  interface AVAudioStereoMixing extends NSObject {
    pan: number;
    setPan(_: number) // property
  }

  // interface
  class AVAudioTime extends NSObject {
    static hostTimeForSeconds(forSeconds: number): number;
    static secondsForHostTime(forHostTime: number): number;
    audioTimeStamp: AudioTimeStamp; // property
    hostTime: number; // property
    isHostTimeValid: boolean; // property
    sampleRate: number; // property
    sampleTime: number; // property
    isSampleTimeValid: boolean; // property
    extrapolateTimeFromAnchor(fromAnchor: AVAudioTime): AVAudioTime;
    static createWithAudioTimeStampSampleRate(audioTimeStamp: AudioTimeStamp, sampleRate: number): AVAudioTime;
    static createWithHostTime(hostTime: number): AVAudioTime;
    static createWithHostTimeSampleTimeAtRate(hostTime: number, sampleTime: number, atRate: number): AVAudioTime;
    static createWithSampleTimeAtRate(sampleTime: number, atRate: number): AVAudioTime;
  }

  // interface
  class AVAudioUnit extends AVAudioNode {
    static instantiateWithWithOptionsCompletionHandler(with_: AudioComponentDescription, options: AudioComponentInstantiationOptions, completionHandler?: (p1: AVAudioUnit, p2: NSError) => void): void;
    audioComponentDescription: AudioComponentDescription; // property
    // audioUnit: CarbonCore.Components; // property
    manufacturerName: string; // property
    name: string; // property
    loadAudioUnitPresetAtURLError(error: NSURL): boolean;
  }

  // interface
  class AVAudioUnitComponent extends NSObject {
    allTagNames: string[]; // property
    audioComponent: any; // property
    audioComponentDescription: AudioComponentDescription; // property
    availableArchitectures: number[]; // property
    configurationDictionary: Map<string, any>; // property
    hasCustomView: boolean; // property
    hasMIDIInput: boolean; // property
    hasMIDIOutput: boolean; // property
    icon: NSImage; // property
    iconURL: NSURL; // property
    localizedTypeName: string; // property
    manufacturerName: string; // property
    name: string; // property
    passesAUVal: boolean; // property
    isSandboxSafe: boolean; // property
    typeName: string; // property
    userTagNames: string[];
    setUserTagNames(_: string[]) // property
    versionString: string; // property
    supportsNumberInputChannelsOutputChannels(_: number, outputChannels: number): boolean;
  }

  // interface
  class AVAudioUnitComponentManager extends NSObject {
    static sharedAudioUnitComponentManager(): AVAudioUnitComponentManager;
    standardLocalizedTagNames: string[]; // property
    tagNames: string[]; // property
    componentsMatchingDescription(matching: AudioComponentDescription): AVAudioUnitComponent[];
    componentsMatchingPredicate(matching: NSPredicate): AVAudioUnitComponent[];
    componentsWithPassingTest(passingTest: (p1: AVAudioUnitComponent, p2: boolean) => boolean): AVAudioUnitComponent[];
  }

  // interface
  class AVAudioUnitDelay extends AVAudioUnitEffect {
    delayTime: number;
    setDelayTime(_: number) // property
    feedback: number;
    setFeedback(_: number) // property
    lowPassCutoff: number;
    setLowPassCutoff(_: number) // property
    wetDryMix: number;
    setWetDryMix(_: number) // property
  }

  // interface
  class AVAudioUnitDistortion extends AVAudioUnitEffect {
    preGain: number;
    setPreGain(_: number) // property
    wetDryMix: number;
    setWetDryMix(_: number) // property
    loadFactoryPreset(_: AVAudioUnitDistortionPreset): void;
  }

  // interface
  class AVAudioUnitEQ extends AVAudioUnitEffect {
    bands: AVAudioUnitEQFilterParameters[]; // property
    globalGain: number;
    setGlobalGain(_: number) // property
    static createWithNumberOfBands(numberOfBands: number): AVAudioUnitEQ;
  }

  // interface
  class AVAudioUnitEQFilterParameters extends NSObject {
    bandwidth: number;
    setBandwidth(_: number) // property
    bypass: boolean;
    setBypass(_: boolean) // property
    filterType: AVAudioUnitEQFilterType;
    setFilterType(_: AVAudioUnitEQFilterType) // property
    frequency: number;
    setFrequency(_: number) // property
    gain: number;
    setGain(_: number) // property
  }

  // interface
  class AVAudioUnitEffect extends AVAudioUnit {
    bypass: boolean;
    setBypass(_: boolean) // property
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitEffect;
  }

  // interface
  class AVAudioUnitGenerator extends AVAudioUnit /* implements AVAudioMixing */ {
    bypass: boolean;
    setBypass(_: boolean) // property
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitGenerator;
  }

  // interface
  class AVAudioUnitMIDIInstrument extends AVAudioUnit /* implements AVAudioMixing */ {
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitMIDIInstrument;
    sendControllerWithValueOnChannel(_: number, withValue: number, onChannel: number): void;
    sendMIDIEventData1(_: number, data1: number): void;
    sendMIDIEventData1Data2(_: number, data1: number, data2: number): void;
    sendMIDISysExEvent(_: NSData): void;
    sendPitchBendOnChannel(_: number, onChannel: number): void;
    sendPressureOnChannel(_: number, onChannel: number): void;
    sendPressureForKeyWithValueOnChannel(forKey: number, withValue: number, onChannel: number): void;
    sendProgramChangeBankMSBBankLSBOnChannel(_: number, bankMSB: number, bankLSB: number, onChannel: number): void;
    sendProgramChangeOnChannel(_: number, onChannel: number): void;
    startNoteWithVelocityOnChannel(_: number, withVelocity: number, onChannel: number): void;
    stopNoteOnChannel(_: number, onChannel: number): void;
  }

  // interface
  class AVAudioUnitReverb extends AVAudioUnitEffect {
    wetDryMix: number;
    setWetDryMix(_: number) // property
    loadFactoryPreset(_: AVAudioUnitReverbPreset): void;
  }

  // interface
  class AVAudioUnitSampler extends AVAudioUnitMIDIInstrument {
    globalTuning: number;
    setGlobalTuning(_: number) // property
    masterGain: number;
    setMasterGain(_: number) // property
    stereoPan: number;
    setStereoPan(_: number) // property
    loadAudioFilesAtURLsError(error: NSURL[]): boolean;
    loadInstrumentAtURLError(error: NSURL): boolean;
    loadSoundBankInstrumentAtURLProgramBankMSBBankLSBError(program: NSURL, bankMSB: number, bankLSB: number, error: number): boolean;
  }

  // interface
  class AVAudioUnitTimeEffect extends AVAudioUnit {
    bypass: boolean;
    setBypass(_: boolean) // property
    static createWithAudioComponentDescription(audioComponentDescription: AudioComponentDescription): AVAudioUnitTimeEffect;
  }

  // interface
  class AVAudioUnitTimePitch extends AVAudioUnitTimeEffect {
    overlap: number;
    setOverlap(_: number) // property
    pitch: number;
    setPitch(_: number) // property
    rate: number;
    setRate(_: number) // property
  }

  // interface
  class AVAudioUnitVarispeed extends AVAudioUnitTimeEffect {
    rate: number;
    setRate(_: number) // property
  }

  // struct
  interface AVAudioSequencer {
    start: number;
    length: number;
  }

  // interface
  class AVCameraCalibrationData extends NSObject {
    extrinsicMatrix: simd_float4x3; // property
    intrinsicMatrix: simd_float3x3; // property
    intrinsicMatrixReferenceDimensions: CGSize; // property
    inverseLensDistortionLookupTable: NSData; // property
    lensDistortionCenter: CGPoint; // property
    lensDistortionLookupTable: NSData; // property
    pixelSize: number; // property
  }

  // interface
  class AVCaptureAudioChannel extends NSObject {
    averagePowerLevel: number; // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    peakHoldLevel: number; // property
    volume: number;
    setVolume(_: number) // property
  }

  // interface
  class AVCaptureAudioDataOutput extends AVCaptureOutput {
    audioSettings: Map<string, any>;
    setAudioSettings(_: Map<string, any>) // property
    sampleBufferCallbackQueue: NSObject; // property
    sampleBufferDelegate: AVCaptureAudioDataOutputSampleBufferDelegate; // property
    recommendedAudioSettingsForAssetWriterWithOutputFileType(writingTo: string): Map<any, any>;
    setSampleBufferDelegateQueue(_?: AVCaptureAudioDataOutputSampleBufferDelegate, queue?: NSObject): void;
  }

  interface AVCaptureAudioDataOutputSampleBufferDelegate extends NSObject {
    // instance method
    captureOutputDidOutputSampleBufferFromConnection?(_: AVCaptureOutput, didOutput: any, from: AVCaptureConnection): void;
  }

  // interface
  class AVCaptureAudioFileOutput extends AVCaptureFileOutput {
    static availableOutputFileTypes(): string[];
    audioSettings: Map<string, any>;
    setAudioSettings(_: Map<string, any>) // property
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[]) // property
    startRecordingToOutputFileURLOutputFileTypeRecordingDelegate(to: NSURL, outputFileType: string, recordingDelegate: AVCaptureFileOutputRecordingDelegate): void;
  }

  // interface
  class AVCaptureAudioPreviewOutput extends AVCaptureOutput {
    outputDeviceUniqueID: string;
    setOutputDeviceUniqueID(_: string) // property
    volume: number;
    setVolume(_: number) // property
  }

  // interface
  class AVCaptureConnection extends NSObject {
    static connectionWithInputPortVideoPreviewLayer(inputPort: Port, videoPreviewLayer: AVCaptureVideoPreviewLayer): AVCaptureConnection;
    static connectionWithInputPortsOutput(inputPorts: Port[], output: AVCaptureOutput): AVCaptureConnection;
    isActive: boolean; // property
    audioChannels: AVCaptureAudioChannel[]; // property
    automaticallyAdjustsVideoMirroring: boolean;
    setAutomaticallyAdjustsVideoMirroring(_: boolean) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    inputPorts: Port[]; // property
    output: AVCaptureOutput; // property
    isVideoFieldModeSupported: boolean; // property
    isVideoMaxFrameDurationSupported: boolean; // property
    isVideoMinFrameDurationSupported: boolean; // property
    isVideoMirroringSupported: boolean; // property
    isVideoOrientationSupported: boolean; // property
    videoFieldMode: AVVideoFieldMode;
    setVideoFieldMode(_: AVVideoFieldMode) // property
    videoMaxFrameDuration: CMTime;
    setVideoMaxFrameDuration(_: CMTime) // property
    videoMinFrameDuration: CMTime;
    setVideoMinFrameDuration(_: CMTime) // property
    isVideoMirrored: boolean;
    setVideoMirrored(_: boolean) // property
    videoOrientation: AVCaptureVideoOrientation;
    setVideoOrientation(_: AVCaptureVideoOrientation) // property
    videoPreviewLayer: AVCaptureVideoPreviewLayer; // property
    static createWithInputPortVideoPreviewLayer(inputPort: Port, videoPreviewLayer: AVCaptureVideoPreviewLayer): AVCaptureConnection;
    static createWithInputPortsOutput(inputPorts: Port[], output: AVCaptureOutput): AVCaptureConnection;
  }

  // interface
  class AVCaptureDevice extends NSObject {
    static authorizationStatusForMediaType(for_: string): AVAuthorizationStatus;
    static defaultDeviceWithDeviceTypeMediaTypePosition(_: string, for_?: string, position?: AVCaptureDevice.Position): AVCaptureDevice;
    static defaultDeviceWithMediaType(for_: string): AVCaptureDevice;
    static requestAccessForCompletionHandler(for_: string, completionHandler: (p1: boolean) => void): void;
    activeColorSpace: AVCaptureColorSpace;
    setActiveColorSpace(_: AVCaptureColorSpace) // property
    activeFormat: Format;
    setActiveFormat(_: Format) // property
    activeInputSource: InputSource;
    setActiveInputSource(_: InputSource) // property
    activeVideoMaxFrameDuration: CMTime;
    setActiveVideoMaxFrameDuration(_: CMTime) // property
    activeVideoMinFrameDuration: CMTime;
    setActiveVideoMinFrameDuration(_: CMTime) // property
    isAdjustingExposure: boolean; // property
    isAdjustingFocus: boolean; // property
    isAdjustingWhiteBalance: boolean; // property
    isConnected: boolean; // property
    deviceType: string; // property
    exposureMode: AVCaptureDevice.ExposureMode;
    setExposureMode(_: AVCaptureDevice.ExposureMode) // property
    exposurePointOfInterest: CGPoint;
    setExposurePointOfInterest(_: CGPoint) // property
    isExposurePointOfInterestSupported: boolean; // property
    isFlashAvailable: boolean; // property
    flashMode: AVCaptureDevice.FlashMode;
    setFlashMode(_: AVCaptureDevice.FlashMode) // property
    focusMode: AVCaptureDevice.FocusMode;
    setFocusMode(_: AVCaptureDevice.FocusMode) // property
    focusPointOfInterest: CGPoint;
    setFocusPointOfInterest(_: CGPoint) // property
    isFocusPointOfInterestSupported: boolean; // property
    formats: Format[]; // property
    hasFlash: boolean; // property
    hasTorch: boolean; // property
    isInUseByAnotherApplication: boolean; // property
    inputSources: InputSource[]; // property
    linkedDevices: AVCaptureDevice[]; // property
    localizedName: string; // property
    manufacturer: string; // property
    modelID: string; // property
    position: AVCaptureDevice.Position; // property
    isSuspended: boolean; // property
    isTorchActive: boolean; // property
    isTorchAvailable: boolean; // property
    torchLevel: number; // property
    torchMode: AVCaptureDevice.TorchMode;
    setTorchMode(_: AVCaptureDevice.TorchMode) // property
    transportControlsPlaybackMode: AVCaptureDevice.TransportControlsPlaybackMode; // property
    transportControlsSpeed: number; // property
    transportControlsSupported: boolean; // property
    transportType: number; // property
    uniqueID: string; // property
    whiteBalanceMode: AVCaptureDevice.WhiteBalanceMode;
    setWhiteBalanceMode(_: AVCaptureDevice.WhiteBalanceMode) // property
    hasMediaType(_: string): boolean;
    isExposureModeSupported(_: AVCaptureDevice.ExposureMode): boolean;
    isFlashModeSupported(_: AVCaptureDevice.FlashMode): boolean;
    isFocusModeSupported(_: AVCaptureDevice.FocusMode): boolean;
    isTorchModeSupported(_: AVCaptureDevice.TorchMode): boolean;
    isWhiteBalanceModeSupported(_: AVCaptureDevice.WhiteBalanceMode): boolean;
    lockForConfiguration(): boolean;
    setTorchModeOnWithLevelError(level: number): boolean;
    setTransportControlsPlaybackModeSpeed(_: AVCaptureDevice.TransportControlsPlaybackMode, speed: number): void;
    supportsAVCaptureSessionPreset(_: string): boolean;
    unlockForConfiguration(): void;
  }

  // interface
  class DiscoverySession extends NSObject {
    static discoverySessionWithDeviceTypesMediaTypePosition(_: string[], mediaType?: string, position?: AVCaptureDevice.Position): DiscoverySession;
  }

  // interface
  class Format extends NSObject {
    // autoFocusSystem: AVCaptureDeviceFormat.AutoFocusSystem; // property
    formatDescription: any; // property
    mediaType: string; // property
    supportedColorSpaces: number[]; // property
    videoSupportedFrameRateRanges: AVFrameRateRange[]; // property
  }

  // interface
  class AVCaptureDeviceInput extends AVCaptureInput {
    static deviceInputWithDeviceError(error: AVCaptureDevice): AVCaptureDeviceInput;
    device: AVCaptureDevice; // property
    static createWithDevice(device: AVCaptureDevice): AVCaptureDeviceInput;
  }

  // interface
  class InputSource extends NSObject {
    inputSourceID: string; // property
    localizedName: string; // property
  }

  // interface
  class AVCaptureFileOutput extends AVCaptureOutput {
    delegate: AVCaptureFileOutputDelegate;
    setDelegate(_: AVCaptureFileOutputDelegate) // property
    maxRecordedDuration: CMTime;
    setMaxRecordedDuration(_: CMTime) // property
    maxRecordedFileSize: number;
    setMaxRecordedFileSize(_: number) // property
    minFreeDiskSpaceLimit: number;
    setMinFreeDiskSpaceLimit(_: number) // property
    outputFileURL: NSURL; // property
    recordedDuration: CMTime; // property
    recordedFileSize: number; // property
    isRecording: boolean; // property
    isRecordingPaused: boolean; // property
    pauseRecording(): void;
    resumeRecording(): void;
    startRecordingToOutputFileURLRecordingDelegate(to: NSURL, recordingDelegate: AVCaptureFileOutputRecordingDelegate): void;
    stopRecording(): void;
  }

  interface AVCaptureFileOutputDelegate extends NSObject {
    // instance method
    captureOutputDidOutputSampleBufferFromConnection?(_: AVCaptureFileOutput, didOutputSampleBuffer: any, from: AVCaptureConnection): void;
    // instance method
    captureOutputShouldProvideSampleAccurateRecordingStart(_: AVCaptureOutput): boolean;
  }

  interface AVCaptureFileOutputRecordingDelegate extends NSObject {
    // instance method
    captureOutputDidStartRecordingToOutputFileAtURLFromConnections?(_: AVCaptureFileOutput, didStartRecordingTo: NSURL, from: AVCaptureConnection[]): void;
    // instance method
    captureOutputDidPauseRecordingToOutputFileAtURLFromConnections?(_: AVCaptureFileOutput, didPauseRecordingTo: NSURL, from: AVCaptureConnection[]): void;
    // instance method
    captureOutputDidResumeRecordingToOutputFileAtURLFromConnections?(_: AVCaptureFileOutput, didResumeRecordingTo: NSURL, from: AVCaptureConnection[]): void;
    // instance method
    captureOutputWillFinishRecordingToOutputFileAtURLFromConnectionsError?(_: AVCaptureFileOutput, willFinishRecordingTo: NSURL, from: AVCaptureConnection[], error?: NSError): void;
    // instance method
    captureOutputDidFinishRecordingToOutputFileAtURLFromConnectionsError(_: AVCaptureFileOutput, didFinishRecordingTo: NSURL, from: AVCaptureConnection[], error?: NSError): void;
  }

  // interface
  class AVCaptureInput extends NSObject {
    ports: Port[]; // property
  }

  // interface
  class AVCaptureMovieFileOutput extends AVCaptureFileOutput {
    metadata: AVMetadataItem[];
    setMetadata(_: AVMetadataItem[]) // property
    movieFragmentInterval: CMTime;
    setMovieFragmentInterval(_: CMTime) // property
    outputSettingsForConnection(for_: AVCaptureConnection): Map<string, any>;
    setOutputSettingsForConnection(_?: Map<string, any>, for_?: AVCaptureConnection): void;
  }

  // interface
  class AVCaptureOutput extends NSObject {
    connections: AVCaptureConnection[]; // property
    connectionWithMediaType(with_: string): AVCaptureConnection;
    metadataOutputRectOfInterestForRect(fromOutputRect: CGRect): CGRect;
    rectForMetadataOutputRectOfInterest(fromMetadataOutputRect: CGRect): CGRect;
    transformedMetadataObjectForMetadataObjectConnection(for_: AVMetadataObject, connection: AVCaptureConnection): AVMetadataObject;
  }

  // interface
  class AVCapturePhoto extends NSObject {
    photoCount: number; // property
    pixelBuffer: any; // property
    resolvedSettings: AVCaptureResolvedPhotoSettings; // property
    timestamp: CMTime; // property
    CGImageRepresentation(): any;
    fileDataRepresentation(): NSData;
  }

  interface AVCapturePhotoCaptureDelegate extends NSObject {
    // instance method
    captureOutputWillBeginCaptureForResolvedSettings?(_: AVCapturePhotoOutput, willBeginCaptureFor: AVCaptureResolvedPhotoSettings): void;
    // instance method
    captureOutputWillCapturePhotoForResolvedSettings?(_: AVCapturePhotoOutput, willCapturePhotoFor: AVCaptureResolvedPhotoSettings): void;
    // instance method
    captureOutputDidCapturePhotoForResolvedSettings?(_: AVCapturePhotoOutput, didCapturePhotoFor: AVCaptureResolvedPhotoSettings): void;
    // instance method
    captureOutputDidFinishProcessingPhotoError?(_: AVCapturePhotoOutput, didFinishProcessingPhoto: AVCapturePhoto, error?: NSError): void;
    // instance method
    captureOutputDidFinishCaptureForResolvedSettingsError?(_: AVCapturePhotoOutput, didFinishCaptureFor: AVCaptureResolvedPhotoSettings, error?: NSError): void;
  }

  // interface
  class AVCapturePhotoOutput extends AVCaptureOutput {
    availablePhotoCodecTypes: string[]; // property
    availablePhotoFileTypes: string[]; // property
    availablePhotoPixelFormatTypes: number[]; // property
    capturePhotoWithSettingsDelegate(with_: AVCapturePhotoSettings, delegate: AVCapturePhotoCaptureDelegate): void;
    supportedPhotoCodecTypesForFileType(for_: string): string[];
    supportedPhotoPixelFormatTypesForFileType(for_: string): number[];
  }

  // interface
  class AVCapturePhotoSettings extends NSObject /* implements NSCopying */ {
    static photoSettings(): AVCapturePhotoSettings;
    static photoSettingsFromPhotoSettings(from: AVCapturePhotoSettings): AVCapturePhotoSettings;
    static photoSettingsWithFormat(format?: Map<string, any>): AVCapturePhotoSettings;
    format: Map<string, any>; // property
    processedFileType: string; // property
    uniqueID: number; // property
  }

  // interface
  class AVCaptureResolvedPhotoSettings extends NSObject {
    expectedPhotoCount: number; // property
    photoDimensions: CMVideoDimensions; // property
    uniqueID: number; // property
  }

  // interface
  class AVCaptureScreenInput extends AVCaptureInput {
    capturesCursor: boolean;
    setCapturesCursor(_: boolean) // property
    capturesMouseClicks: boolean;
    setCapturesMouseClicks(_: boolean) // property
    cropRect: CGRect;
    setCropRect(_: CGRect) // property
    minFrameDuration: CMTime;
    setMinFrameDuration(_: CMTime) // property
    scaleFactor: number;
    setScaleFactor(_: number) // property
    static createWithDisplayID(displayID: number): AVCaptureScreenInput;
  }

  // interface
  class AVCaptureSession extends NSObject {
    connections: AVCaptureConnection[]; // property
    inputs: AVCaptureInput[]; // property
    masterClock: any; // property
    outputs: AVCaptureOutput[]; // property
    isRunning: boolean; // property
    sessionPreset: string;
    setSessionPreset(_: string) // property
    addConnection(_: AVCaptureConnection): void;
    addInput(_: AVCaptureInput): void;
    addInputWithNoConnections(_: AVCaptureInput): void;
    addOutput(_: AVCaptureOutput): void;
    addOutputWithNoConnections(_: AVCaptureOutput): void;
    beginConfiguration(): void;
    canAddConnection(_: AVCaptureConnection): boolean;
    canAddInput(_: AVCaptureInput): boolean;
    canAddOutput(_: AVCaptureOutput): boolean;
    canSetSessionPreset(_: string): boolean;
    commitConfiguration(): void;
    removeConnection(_: AVCaptureConnection): void;
    removeInput(_: AVCaptureInput): void;
    removeOutput(_: AVCaptureOutput): void;
    startRunning(): void;
    stopRunning(): void;
  }

  // interface
  class SystemPressureState extends NSObject {
    // factors: AVCaptureSystemPressureState.Factors; // property
    level: string; // property
  }

  // interface
  class AVCaptureVideoDataOutput extends AVCaptureOutput {
    alwaysDiscardsLateVideoFrames: boolean;
    setAlwaysDiscardsLateVideoFrames(_: boolean) // property
    availableVideoCVPixelFormatTypes: number[]; // property
    availableVideoCodecTypes: string[]; // property
    sampleBufferCallbackQueue: NSObject; // property
    sampleBufferDelegate: AVCaptureVideoDataOutputSampleBufferDelegate; // property
    videoSettings: Map<string, any>;
    setVideoSettings(_: Map<string, any>) // property
    availableVideoCodecTypesForAssetWriterWithOutputFileType(writingTo: string): string[];
    recommendedVideoSettingsForAssetWriterWithOutputFileType(writingTo: string): Map<string, any>;
    recommendedVideoSettingsForVideoCodecTypeAssetWriterOutputFileType(forVideoCodecType: string, assetWriterOutputFileType: string): Map<any, any>;
    setSampleBufferDelegateQueue(_?: AVCaptureVideoDataOutputSampleBufferDelegate, queue?: NSObject): void;
  }

  interface AVCaptureVideoDataOutputSampleBufferDelegate extends NSObject {
    // instance method
    captureOutputDidOutputSampleBufferFromConnection?(_: AVCaptureOutput, didOutput: any, from: AVCaptureConnection): void;
    // instance method
    captureOutputDidDropSampleBufferFromConnection?(_: AVCaptureOutput, didDrop: any, from: AVCaptureConnection): void;
  }

  // interface
  class AVCaptureVideoPreviewLayer extends CALayer {
    connection: AVCaptureConnection; // property
    session: AVCaptureSession;
    setSession(_: AVCaptureSession) // property
    videoGravity: string;
    setVideoGravity(_: string) // property
    captureDevicePointOfInterestForPoint(fromLayerPoint: CGPoint): CGPoint;
    static createWithSession(session: AVCaptureSession): AVCaptureVideoPreviewLayer;
    static createWithSessionWithNoConnection(sessionWithNoConnection: AVCaptureSession): AVCaptureVideoPreviewLayer;
    metadataOutputRectOfInterestForRect(fromLayerRect: CGRect): CGRect;
    pointForCaptureDevicePointOfInterest(fromCaptureDevicePoint: CGPoint): CGPoint;
    rectForMetadataOutputRectOfInterest(fromMetadataOutputRect: CGRect): CGRect;
    setSessionWithNoConnection(_: AVCaptureSession): void;
    transformedMetadataObjectForMetadataObject(for_: AVMetadataObject): AVMetadataObject;
  }

  // struct
  interface WhiteBalanceChromaticityValues {
    x: number;
    y: number;
  }

  // struct
  interface WhiteBalanceGains {
    redGain: number;
    greenGain: number;
    blueGain: number;
  }

  // struct
  interface WhiteBalanceTemperatureAndTintValues {
    temperature: number;
    tint: number;
  }

  // interface
  class AVComposition extends AVAsset /* implements NSMutableCopying */ {
    URLAssetInitializationOptions: Map<string, any>; // property
    naturalSize: CGSize; // property
  }

  // interface
  class AVCompositionTrack extends AVAssetTrack {
    formatDescriptionReplacements: AVCompositionTrackFormatDescriptionReplacement[]; // property
  }

  // interface
  class AVCompositionTrackFormatDescriptionReplacement extends NSObject /* implements NSSecureCoding */ {
    originalFormatDescription: any; // property
    replacementFormatDescription: any; // property
  }

  // interface
  class AVCompositionTrackSegment extends AVAssetTrackSegment {
    sourceTrackID: number; // property
    sourceURL: NSURL; // property
    static createWithTimeRange(timeRange: CMTimeRange): AVCompositionTrackSegment;
    static createWithUrlTrackIDSourceTimeRangeTargetTimeRange(URL: NSURL, trackID: number, sourceTimeRange: CMTimeRange, targetTimeRange: CMTimeRange): AVCompositionTrackSegment;
  }

  interface AVContentKeyRecipient {
    mayRequireContentKeysForMediaDataProcessing: boolean; // property
  }

  // interface
  class AVContentKeyRequest extends NSObject {
    canProvidePersistableContentKey: boolean; // property
    error: NSError; // property
    identifier: any; // property
    initializationData: NSData; // property
    options: Map<string, any>; // property
    renewsExpiringResponseData: boolean; // property
    status: AVContentKeyRequest.Status; // property
    makeStreamingContentKeyRequestDataWithForAppContentIdentifierOptionsCompletionHandler(forApp: NSData, contentIdentifier?: NSData, options?: Map<string, any>, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    processContentKeyResponse(_: AVContentKeyResponse): void;
    processContentKeyResponseError(_: NSError): void;
    respondByRequestingPersistableContentKeyRequestAndReturnError(): boolean;
  }

  // interface
  class AVContentKeyResponse extends NSObject {
    static contentKeyResponseWithAuthorizationTokenData(authorizationTokenData: NSData): AVContentKeyResponse;
    static contentKeyResponseWithClearKeyDataInitializationVector(clearKeyData: NSData, initializationVector?: NSData): AVContentKeyResponse;
    static contentKeyResponseWithFairPlayStreamingKeyResponseData(fairPlayStreamingKeyResponseData: NSData): AVContentKeyResponse;
  }

  // interface
  class AVContentKeySession extends NSObject {
    static pendingExpiredSessionReportsWithAppIdentifierStorageDirectoryAtURL(withAppIdentifier: NSData, storageDirectoryAt: NSURL): NSData[];
    static removePendingExpiredSessionReportsWithAppIdentifierStorageDirectoryAtURL(_: NSData[], withAppIdentifier: NSData, storageDirectoryAt: NSURL): void;
    contentKeyRecipients: AVContentKeyRecipient[]; // property
    contentProtectionSessionIdentifier: NSData; // property
    delegate: AVContentKeySessionDelegate; // property
    delegateQueue: NSObject; // property
    keySystem: string; // property
    storageURL: NSURL; // property
    addContentKeyRecipient(_: AVContentKeyRecipient): void;
    expire(): void;
    invalidateAllPersistableContentKeysWithForAppOptionsCompletionHandler(forApp: NSData, options?: Map<string, any>, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    invalidatePersistableContentKeyWithOptionsCompletionHandler(_: NSData, options?: Map<string, any>, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    makeSecureTokenForExpirationDateWithOfPersistableContentKeyCompletionHandler(ofPersistableContentKey: NSData, completionHandler?: (p1: NSData, p2: NSError) => void): void;
    processContentKeyRequestWithIdentifierInitializationDataOptions(withIdentifier?: any, initializationData?: NSData, options?: Map<string, any>): void;
    removeContentKeyRecipient(_: AVContentKeyRecipient): void;
    renewExpiringResponseDataForContentKeyRequest(for_: AVContentKeyRequest): void;
    setDelegateQueue(_?: AVContentKeySessionDelegate, queue?: NSObject): void;
  }

  interface AVContentKeySessionDelegate extends NSObject {
    // instance method
    contentKeySessionDidProvideContentKeyRequest(_: AVContentKeySession, didProvide: AVContentKeyRequest): void;
    // instance method
    contentKeySessionDidProvidePersistableContentKeyRequest?(_: AVContentKeySession, didProvide: AVPersistableContentKeyRequest): void;
    // instance method
    contentKeySessionShouldRetryContentKeyRequestReason?(_: AVContentKeySession, shouldRetry: AVContentKeyRequest, reason: string): boolean;
    // instance method
    contentKeySessionContentKeyRequestDidFailWithError?(_: AVContentKeySession, contentKeyRequest: AVContentKeyRequest, didFailWithError: NSError): void;
    // instance method
    contentKeySessionContentKeyRequestDidSucceed?(_: AVContentKeySession, contentKeyRequestDidSucceed: AVContentKeyRequest): void;
    // instance method
    contentKeySessionDidProvideRenewingContentKeyRequest?(_: AVContentKeySession, didProvideRenewingContentKeyRequest: AVContentKeyRequest): void;
    // instance method
    contentKeySessionDidUpdatePersistableContentKeyForContentKeyIdentifier?(_: AVContentKeySession, didUpdatePersistableContentKey: NSData, forContentKeyIdentifier: any): void;
    // instance method
    contentKeySessionContentProtectionSessionIdentifierDidChange?(_: AVContentKeySession): void;
    // instance method
    contentKeySessionDidGenerateExpiredSessionReport?(_: AVContentKeySession): void;
  }

  // interface
  class AVDateRangeMetadataGroup extends AVMetadataGroup /* implements NSCopying, NSMutableCopying */ {
    endDate: Date; // property
    startDate: Date; // property
    static createWithItemsStartDateEndDate(items: AVMetadataItem[], startDate: Date, endDate?: Date): AVDateRangeMetadataGroup;
  }

  // interface
  class AVDepthData extends NSObject {
    static depthDataFromDictionaryRepresentationError(error: Map<any, any>): AVDepthData;
    availableDepthDataTypes: number[]; // property
    cameraCalibrationData: AVCameraCalibrationData; // property
    depthDataAccuracy: AVDepthData.Accuracy; // property
    isDepthDataFiltered: boolean; // property
    depthDataMap: any; // property
    depthDataQuality: AVDepthData.Quality; // property
    depthDataType: number; // property
    depthDataByApplyingExifOrientation(_: CGImagePropertyOrientation): AVDepthData;
    depthDataByConvertingToDepthDataType(toDepthDataType: number): AVDepthData;
    depthDataByReplacingDepthDataMapWithPixelBufferError(error: any): AVDepthData;
    dictionaryRepresentationForAuxiliaryDataType(forAuxiliaryDataType?: string): Map<any, any>;
  }

  // struct
  interface AVEdgeWidths {
    left: number;
    top: number;
    right: number;
    bottom: number;
  }

  interface AVFragmentMinding {
    isAssociatedWithFragmentMinder: boolean; // property
  }

  // interface
  class AVFragmentedAsset extends AVURLAsset /* implements AVFragmentMinding */ {
    static fragmentedAssetWithURLOptions(url: NSURL, options?: Map<string, any>): AVFragmentedAsset;
  }

  // interface
  class AVFragmentedAssetMinder extends NSObject {
    static fragmentedAssetMinderWithAssetMindingInterval(asset: AVAsset, mindingInterval: number): AVFragmentedAssetMinder;
    assets: AVAsset[]; // property
    mindingInterval: number;
    setMindingInterval(_: number) // property
    addFragmentedAsset(_: AVAsset): void;
    static createWithAssetMindingInterval(asset: AVAsset, mindingInterval: number): AVFragmentedAssetMinder;
    removeFragmentedAsset(_: AVAsset): void;
  }

  // interface
  class AVFragmentedAssetTrack extends AVAssetTrack {
  }

  // interface
  class AVFragmentedMovie extends AVMovie /* implements AVFragmentMinding */ {
  }

  // interface
  class AVFragmentedMovieMinder extends AVFragmentedAssetMinder {
    static fragmentedMovieMinderWithMovieMindingInterval(movie: AVFragmentedMovie, mindingInterval: number): AVFragmentedMovieMinder;
    movies: AVFragmentedMovie[]; // property
    addFragmentedMovie(_: AVFragmentedMovie): void;
    static createWithMovieMindingInterval(movie: AVFragmentedMovie, mindingInterval: number): AVFragmentedMovieMinder;
    removeFragmentedMovie(_: AVFragmentedMovie): void;
  }

  // interface
  class AVFragmentedMovieTrack extends AVMovieTrack {
  }

  // interface
  class AVFrameRateRange extends NSObject {
    maxFrameDuration: CMTime; // property
    maxFrameRate: number; // property
    minFrameDuration: CMTime; // property
    minFrameRate: number; // property
  }

  // interface
  class AVMIDIPlayer extends NSObject {
    currentPosition: number;
    setCurrentPosition(_: number) // property
    duration: number; // property
    isPlaying: boolean; // property
    rate: number;
    setRate(_: number) // property
    static createWithContentsOfURLSoundBankURL(contentsOfURL: NSURL, soundBankURL?: NSURL): AVMIDIPlayer;
    static createWithDataSoundBankURL(data: NSData, soundBankURL?: NSURL): AVMIDIPlayer;
    play(_?: () => void): void;
    prepareToPlay(): void;
    stop(): void;
  }

  // export declare function AVMakeRectWithAspectRatioInsideRect(aspectRatio: CGSize, boundingRect: CGRect): CGRect;

  // interface
  class AVMediaDataStorage extends NSObject {
    URL(): NSURL;
    static createWithUrlOptions(URL: NSURL, options?: Map<string, any>): AVMediaDataStorage;
  }

  // interface
  class AVMediaSelection extends NSObject /* implements NSCopying, NSMutableCopying */ {
    asset: AVAsset; // property
    mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup(to: AVMediaSelectionGroup): boolean;
    selectedMediaOptionInMediaSelectionGroup(in_: AVMediaSelectionGroup): AVMediaSelectionOption;
  }

  // interface
  class AVMediaSelectionGroup extends NSObject /* implements NSCopying */ {
    static mediaSelectionOptionsFromArrayFilteredAndSortedAccordingToPreferredLanguages(from: AVMediaSelectionOption[], filteredAndSortedAccordingToPreferredLanguages: string[]): AVMediaSelectionOption[];
    static mediaSelectionOptionsFromArrayWithLocale(from: AVMediaSelectionOption[], with_: NSLocale): AVMediaSelectionOption[];
    static mediaSelectionOptionsFromArrayWithMediaCharacteristics(from: AVMediaSelectionOption[], withMediaCharacteristics: string[]): AVMediaSelectionOption[];
    static mediaSelectionOptionsFromArrayWithoutMediaCharacteristics(from: AVMediaSelectionOption[], withoutMediaCharacteristics: string[]): AVMediaSelectionOption[];
    static playableMediaSelectionOptionsFromArray(from: AVMediaSelectionOption[]): AVMediaSelectionOption[];
    allowsEmptySelection: boolean; // property
    defaultOption: AVMediaSelectionOption; // property
    options: AVMediaSelectionOption[]; // property
    mediaSelectionOptionWithPropertyList(withPropertyList: any): AVMediaSelectionOption;
  }

  // interface
  class AVMediaSelectionOption extends NSObject /* implements NSCopying */ {
    availableMetadataFormats: string[]; // property
    commonMetadata: AVMetadataItem[]; // property
    displayName: string; // property
    extendedLanguageTag: string; // property
    locale: NSLocale; // property
    mediaSubTypes: number[]; // property
    mediaType: string; // property
    isPlayable: boolean; // property
    associatedMediaSelectionOptionInMediaSelectionGroup(in_: AVMediaSelectionGroup): AVMediaSelectionOption;
    displayNameWithLocale(with_: NSLocale): string;
    hasMediaCharacteristic(_: string): boolean;
    metadataForFormat(forFormat: string): AVMetadataItem[];
    propertyList(): any;
  }

  // interface
  class AVMetadataBodyObject extends AVMetadataObject /* implements NSCopying */ {
    bodyID: number; // property
  }

  // interface
  class AVMetadataCatBodyObject extends AVMetadataBodyObject /* implements NSCopying */ {
  }

  // interface
  class AVMetadataDogBodyObject extends AVMetadataBodyObject /* implements NSCopying */ {
  }

  // interface
  class AVMetadataFaceObject extends AVMetadataObject /* implements NSCopying */ {
    faceID: number; // property
    hasRollAngle: boolean; // property
    hasYawAngle: boolean; // property
    rollAngle: number; // property
    yawAngle: number; // property
  }

  // interface
  class AVMetadataGroup extends NSObject {
    classifyingLabel: string; // property
    items: AVMetadataItem[]; // property
    uniqueID: string; // property
  }

  // interface
  class AVMetadataHumanBodyObject extends AVMetadataBodyObject /* implements NSCopying */ {
  }

  // interface
  class AVMetadataItem extends NSObject /* implements AVAsynchronousKeyValueLoading, NSCopying, NSMutableCopying */ {
    static identifierForKeyKeySpace(forKey: any, keySpace: string): string;
    static keyForIdentifier(forIdentifier: string): any;
    static keySpaceForIdentifier(forIdentifier: string): string;
    static metadataItemsFromArrayFilteredAndSortedAccordingToPreferredLanguages(from: AVMetadataItem[], filteredAndSortedAccordingToPreferredLanguages: string[]): AVMetadataItem[];
    static metadataItemsFromArrayFilteredByIdentifier(from: AVMetadataItem[], filteredByIdentifier: string): AVMetadataItem[];
    static metadataItemsFromArrayFilteredByMetadataItemFilter(from: AVMetadataItem[], filteredBy: AVMetadataItemFilter): AVMetadataItem[];
    static metadataItemsFromArrayWithKeyKeySpace(from: AVMetadataItem[], withKey?: any, keySpace?: string): AVMetadataItem[];
    static metadataItemsFromArrayWithLocale(from: AVMetadataItem[], with_: NSLocale): AVMetadataItem[];
    commonKey: string; // property
    dataType: string; // property
    dataValue: NSData; // property
    dateValue: Date; // property
    duration: CMTime; // property
    extendedLanguageTag: string; // property
    extraAttributes: Map<string, any>; // property
    identifier: string; // property
    key: any; // property
    keySpace: string; // property
    locale: NSLocale; // property
    numberValue: number; // property
    startDate: Date; // property
    stringValue: string; // property
    time: CMTime; // property
    value: any; // property
  }

  // interface
  class AVMetadataItemFilter extends NSObject {
    static metadataItemFilterForSharing(): AVMetadataItemFilter;
  }

  // interface
  class AVMetadataItemValueRequest extends NSObject {
    metadataItem: AVMetadataItem; // property
    respondWithError(error: NSError): void;
    respondWithValue(value: any): void;
  }

  // interface
  class AVMetadataMachineReadableCodeObject extends AVMetadataObject {
    corners: Map<any, any>[]; // property
    descriptor: CIBarcodeDescriptor; // property
    stringValue: string; // property
  }

  // interface
  class AVMetadataObject extends NSObject {
    bounds: CGRect; // property
    duration: CMTime; // property
    time: CMTime; // property
    type: string; // property
  }

  // interface
  class AVMetadataSalientObject extends AVMetadataObject /* implements NSCopying */ {
    objectID: number; // property
  }

  // interface
  class AVMovie extends AVAsset /* implements NSCopying, NSMutableCopying */ {
    static movieTypes(): string[];
    URL: NSURL; // property
    canContainMovieFragments: boolean; // property
    containsMovieFragments: boolean; // property
    data: NSData; // property
    defaultMediaDataStorage: AVMediaDataStorage; // property
    static createWithDataOptions(data: NSData, options?: Map<string, any>): AVMovie;
    static createWithUrlOptions(URL: NSURL, options?: Map<string, any>): AVMovie;
    isCompatibleWithFileType(compatibleWithFileType: string): boolean;
    movieHeaderWithFileTypeError(fileType: string): NSData;
    writeMovieHeaderToURLFileTypeOptionsError(fileType: NSURL, options: string, error: AVMovieWritingOptions): boolean;
  }

  // interface
  class AVMovieTrack extends AVAssetTrack {
    alternateGroupID: number; // property
    mediaDataStorage: AVMediaDataStorage; // property
    mediaDecodeTimeRange: CMTimeRange; // property
    mediaPresentationTimeRange: CMTimeRange; // property
  }

  // interface
  class AVMusicTrack extends NSObject {
    destinationAudioUnit: AVAudioUnit;
    setDestinationAudioUnit(_: AVAudioUnit) // property
    destinationMIDIEndpoint: number;
    setDestinationMIDIEndpoint(_: number) // property
    lengthInBeats: number;
    setLengthInBeats(_: number) // property
    lengthInSeconds: number;
    setLengthInSeconds(_: number) // property
    loopRange: AVAudioSequencer;
    setLoopRange(_: AVAudioSequencer) // property
    isLoopingEnabled: boolean;
    setLoopingEnabled(_: boolean) // property
    isMuted: boolean;
    setMuted(_: boolean) // property
    numberOfLoops: number;
    setNumberOfLoops(_: number) // property
    offsetTime: number;
    setOffsetTime(_: number) // property
    isSoloed: boolean;
    setSoloed(_: boolean) // property
    timeResolution: number; // property
  }

  // interface
  class AVMutableAudioMix extends AVAudioMix {
    static audioMix(): AVMutableAudioMix;
  }

  // interface
  class AVMutableAudioMixInputParameters extends AVAudioMixInputParameters {
    static audioMixInputParameters(): AVMutableAudioMixInputParameters;
    static audioMixInputParametersWithTrack(track?: AVAssetTrack): AVMutableAudioMixInputParameters;
    setVolumeAtTime(_: number, at: CMTime): void;
    setVolumeRampFromStartVolumeToEndVolumeTimeRange(fromStartVolume: number, toEndVolume: number, timeRange: CMTimeRange): void;
  }

  // interface
  class AVMutableComposition extends AVComposition {
    static composition(): AVMutableComposition;
    static compositionWithURLAssetInitializationOptions(urlAssetInitializationOptions?: Map<string, any>): AVMutableComposition;
    addMutableTrackWithMediaTypePreferredTrackID(withMediaType: string, preferredTrackID: number): AVMutableCompositionTrack;
    insertEmptyTimeRange(_: CMTimeRange): void;
    insertTimeRangeOfAssetAtTimeError(_: CMTimeRange, of: AVAsset, at: CMTime): boolean;
    mutableTrackCompatibleWithTrack(compatibleWith: AVAssetTrack): AVMutableCompositionTrack;
    removeTimeRange(_: CMTimeRange): void;
    removeTrack(_: AVCompositionTrack): void;
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
  }

  // interface
  class AVMutableCompositionTrack extends AVCompositionTrack {
    addTrackAssociationToTrackType(to: AVCompositionTrack, type: string): void;
    insertEmptyTimeRange(_: CMTimeRange): void;
    insertTimeRangeOfTrackAtTimeError(ofTrack: CMTimeRange, atTime: AVAssetTrack, error: CMTime): boolean;
    insertTimeRangesOfTracksAtTimeError(ofTracks: NSValue[], atTime: AVAssetTrack[], error: CMTime): boolean;
    removeTimeRange(_: CMTimeRange): void;
    removeTrackAssociationToTrackType(to: AVCompositionTrack, type: string): void;
    replaceFormatDescriptionWithFormatDescription(_: any, with_?: any): void;
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
    validateTrackSegmentsError(error: AVCompositionTrackSegment[]): boolean;
  }

  // interface
  class AVMutableDateRangeMetadataGroup extends AVDateRangeMetadataGroup {
  }

  // interface
  class AVMutableMediaSelection extends AVMediaSelection {
    selectMediaOptionInMediaSelectionGroup(_?: AVMediaSelectionOption, in_?: AVMediaSelectionGroup): void;
  }

  // interface
  class AVMutableMetadataItem extends AVMetadataItem {
    static metadataItem(): AVMutableMetadataItem;
  }

  // interface
  class AVMutableMovie extends AVMovie {
    static movieWithDataOptionsError(data: NSData, options?: Map<string, any>): AVMutableMovie;
    static movieWithSettingsFromMovieOptionsError(options?: AVMovie, error?: Map<string, any>): AVMutableMovie;
    static movieWithURLOptionsError(url: NSURL, options?: Map<string, any>): AVMutableMovie;
    interleavingPeriod: CMTime;
    setInterleavingPeriod(_: CMTime) // property
    isModified: boolean;
    setModified(_: boolean) // property
    timescale: number;
    setTimescale(_: number) // property
    addMutableTrackWithMediaTypeCopySettingsFromTrackOptions(withMediaType: string, copySettingsFrom?: AVAssetTrack, options?: Map<string, any>): AVMutableMovieTrack;
    addMutableTracksCopyingSettingsFromTracksOptions(from: AVAssetTrack[], options?: Map<string, any>): AVMutableMovieTrack[];
    static createWithSettingsFromMovieOptions(settingsFromMovie?: AVMovie, options?: Map<string, any>): AVMutableMovie;
    insertEmptyTimeRange(_: CMTimeRange): void;
    insertTimeRangeOfAssetAtTimeCopySampleDataError(_: CMTimeRange, of: AVAsset, at: CMTime, copySampleData: boolean): boolean;
    mutableTrackCompatibleWithTrack(compatibleWith: AVAssetTrack): AVMutableMovieTrack;
    removeTimeRange(_: CMTimeRange): void;
    removeTrack(_: AVMovieTrack): void;
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
  }

  // interface
  class AVMutableMovieTrack extends AVMovieTrack {
    cleanApertureDimensions: CGSize;
    setCleanApertureDimensions(_: CGSize) // property
    encodedPixelsDimensions: CGSize;
    setEncodedPixelsDimensions(_: CGSize) // property
    hasProtectedContent: boolean; // property
    layer: number;
    setLayer(_: number) // property
    isModified: boolean;
    setModified(_: boolean) // property
    preferredMediaChunkAlignment: number;
    setPreferredMediaChunkAlignment(_: number) // property
    preferredMediaChunkDuration: CMTime;
    setPreferredMediaChunkDuration(_: CMTime) // property
    preferredMediaChunkSize: number;
    setPreferredMediaChunkSize(_: number) // property
    productionApertureDimensions: CGSize;
    setProductionApertureDimensions(_: CGSize) // property
    sampleReferenceBaseURL: NSURL;
    setSampleReferenceBaseURL(_: NSURL) // property
    timescale: number;
    setTimescale(_: number) // property
    addTrackAssociationToTrackType(to: AVMovieTrack, type: string): void;
    appendSampleBufferDecodeTimePresentationTimeError(_: any, decodeTime?: CMTime, presentationTime?: CMTime): boolean;
    insertEmptyTimeRange(_: CMTimeRange): void;
    insertMediaTimeRangeIntoTimeRange(_: CMTimeRange, into: CMTimeRange): boolean;
    insertTimeRangeOfTrackAtTimeCopySampleDataError(ofTrack: CMTimeRange, atTime: AVAssetTrack, copySampleData: CMTime, error: boolean): boolean;
    removeTimeRange(_: CMTimeRange): void;
    removeTrackAssociationToTrackType(to: AVMovieTrack, type: string): void;
    replaceFormatDescriptionWithFormatDescription(_: any, with_: any): void;
    scaleTimeRangeToDuration(_: CMTimeRange, toDuration: CMTime): void;
  }

  // interface
  class AVMutableTimedMetadataGroup extends AVTimedMetadataGroup {
  }

  // interface
  class AVMutableVideoComposition extends AVVideoComposition {
    static videoComposition(): AVMutableVideoComposition;
    static videoCompositionWithPropertiesOfAssetPrototypeInstruction(propertiesOf: AVAsset, prototypeInstruction: AVVideoCompositionInstruction): AVMutableVideoComposition;
  }

  // interface
  class AVMutableVideoCompositionInstruction extends AVVideoCompositionInstruction {
    static videoCompositionInstruction(): AVMutableVideoCompositionInstruction;
    enablePostProcessing: boolean;
    setEnablePostProcessing(_: boolean) // property
    timeRange: CMTimeRange;
    setTimeRange(_: CMTimeRange) // property
  }

  // interface
  class AVMutableVideoCompositionLayerInstruction extends AVVideoCompositionLayerInstruction {
    static videoCompositionLayerInstruction(): AVMutableVideoCompositionLayerInstruction;
    static videoCompositionLayerInstructionWithAssetTrack(assetTrack: AVAssetTrack): AVMutableVideoCompositionLayerInstruction;
    setCropRectangleAtTime(_: CGRect, at: CMTime): void;
    setCropRectangleRampFromStartCropRectangleToEndCropRectangleTimeRange(fromStartCropRectangle: CGRect, toEndCropRectangle: CGRect, timeRange: CMTimeRange): void;
    setOpacityAtTime(_: number, at: CMTime): void;
    setOpacityRampFromStartOpacityToEndOpacityTimeRange(fromStartOpacity: number, toEndOpacity: number, timeRange: CMTimeRange): void;
    setTransformAtTime(_: CGAffineTransform, at: CMTime): void;
    setTransformRampFromStartTransformToEndTransformTimeRange(fromStart: CGAffineTransform, toEnd: CGAffineTransform, timeRange: CMTimeRange): void;
  }

  // interface
  class AVOutputSettingsAssistant extends NSObject {
    static availableOutputSettingsPresets(): string[];
    audioSettings: Map<string, any>; // property
    outputFileType: string; // property
    sourceAudioFormat: any;
    setSourceAudioFormat(_: any) // property
    sourceVideoAverageFrameDuration: CMTime;
    setSourceVideoAverageFrameDuration(_: CMTime) // property
    sourceVideoFormat: any;
    setSourceVideoFormat(_: any) // property
    sourceVideoMinFrameDuration: CMTime;
    setSourceVideoMinFrameDuration(_: CMTime) // property
    videoSettings: Map<string, any>; // property
  }

  // interface
  class AVPersistableContentKeyRequest extends AVContentKeyRequest {
    persistableContentKeyFromKeyVendorResponseOptionsError(options: NSData, error?: Map<string, any>): NSData;
  }

  // struct
  interface AVPixelAspectRatio {
    horizontalSpacing: number;
    verticalSpacing: number;
  }

  // interface
  class AVPlayer extends NSObject {
    actionAtItemEnd: AVPlayer.ActionAtItemEnd;
    setActionAtItemEnd(_: AVPlayer.ActionAtItemEnd) // property
    allowsExternalPlayback: boolean;
    setAllowsExternalPlayback(_: boolean) // property
    appliesMediaSelectionCriteriaAutomatically: boolean;
    setAppliesMediaSelectionCriteriaAutomatically(_: boolean) // property
    audioOutputDeviceUniqueID: string;
    setAudioOutputDeviceUniqueID(_: string) // property
    automaticallyWaitsToMinimizeStalling: boolean;
    setAutomaticallyWaitsToMinimizeStalling(_: boolean) // property
    currentItem: AVPlayerItem; // property
    error: NSError; // property
    isExternalPlaybackActive: boolean; // property
    masterClock: any;
    setMasterClock(_: any) // property
    isMuted: boolean;
    setMuted(_: boolean) // property
    outputObscuredDueToInsufficientExternalProtection: boolean; // property
    preferredVideoDecoderGPURegistryID: number;
    setPreferredVideoDecoderGPURegistryID(_: number) // property
    preventsDisplaySleepDuringVideoPlayback: boolean;
    setPreventsDisplaySleepDuringVideoPlayback(_: boolean) // property
    rate: number;
    setRate(_: number) // property
    reasonForWaitingToPlay: string; // property
    status: AVPlayer.Status; // property
    timeControlStatus: AVPlayer.TimeControlStatus; // property
    volume: number;
    setVolume(_: number) // property
    static eligibleForHDRPlayback: boolean; // property
    addBoundaryTimeObserverWithForTimesQueueUsing(forTimes: NSValue[], queue?: NSObject, using?: () => void): any;
    addPeriodicTimeObserverWithForIntervalQueueUsing(forInterval: CMTime, queue?: NSObject, using?: (p1: CMTime) => void): any;
    cancelPendingPrerolls(): void;
    currentTime(): CMTime;
    static createWithPlayerItem(playerItem?: AVPlayerItem): AVPlayer;
    static createWithUrl(URL: NSURL): AVPlayer;
    mediaSelectionCriteriaForMediaCharacteristic(forMediaCharacteristic: string): AVPlayerMediaSelectionCriteria;
    pause(): void;
    play(): void;
    playImmediatelyAtRate(atRate: number): void;
    prerollWithAtRateCompletionHandler(atRate: number, completionHandler?: (p1: boolean) => void): void;
    removeTimeObserver(_: any): void;
    replaceCurrentItemWithPlayerItem(with_?: AVPlayerItem): void;
    seekToDate(to: Date): void;
    seekWithToCompletionHandler(to: Date, completionHandler: (p1: boolean) => void): void;
    seekToTime(to: CMTime): void;
    seekWithToCompletionHandler(to: CMTime, completionHandler: (p1: boolean) => void): void;
    seekToTimeToleranceBeforeToleranceAfter(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime): void;
    seekWithToToleranceBeforeToleranceAfterCompletionHandler(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime, completionHandler: (p1: boolean) => void): void;
    setMediaSelectionCriteriaForMediaCharacteristic(_?: AVPlayerMediaSelectionCriteria, forMediaCharacteristic?: string): void;
    setRateTimeAtHostTime(_: number, time: CMTime, atHostTime: CMTime): void;
  }

  // interface
  class AVPlayerItem extends NSObject /* implements NSCopying */ {
    isApplicationAuthorizedForPlayback: boolean; // property
    asset: AVAsset; // property
    audioMix: AVAudioMix;
    setAudioMix(_: AVAudioMix) // property
    isAudioSpatializationAllowed: boolean;
    setAudioSpatializationAllowed(_: boolean) // property
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string) // property
    isAuthorizationRequiredForPlayback: boolean; // property
    automaticallyLoadedAssetKeys: string[]; // property
    automaticallyPreservesTimeOffsetFromLive: boolean;
    setAutomaticallyPreservesTimeOffsetFromLive(_: boolean) // property
    canPlayFastForward: boolean; // property
    canPlayFastReverse: boolean; // property
    canPlayReverse: boolean; // property
    canPlaySlowForward: boolean; // property
    canPlaySlowReverse: boolean; // property
    canStepBackward: boolean; // property
    canStepForward: boolean; // property
    canUseNetworkResourcesForLiveStreamingWhilePaused: boolean;
    setCanUseNetworkResourcesForLiveStreamingWhilePaused(_: boolean) // property
    configuredTimeOffsetFromLive: CMTime;
    setConfiguredTimeOffsetFromLive(_: CMTime) // property
    contentAuthorizationRequestStatus: AVContentAuthorizationStatus; // property
    isContentAuthorizedForPlayback: boolean; // property
    currentMediaSelection: AVMediaSelection; // property
    customVideoCompositor: AVVideoCompositing; // property
    duration: CMTime; // property
    error: NSError; // property
    forwardPlaybackEndTime: CMTime;
    setForwardPlaybackEndTime(_: CMTime) // property
    loadedTimeRanges: NSValue[]; // property
    mediaDataCollectors: AVPlayerItemMediaDataCollector[]; // property
    outputs: AVPlayerItemOutput[]; // property
    isPlaybackBufferEmpty: boolean; // property
    isPlaybackBufferFull: boolean; // property
    isPlaybackLikelyToKeepUp: boolean; // property
    preferredForwardBufferDuration: number;
    setPreferredForwardBufferDuration(_: number) // property
    preferredMaximumResolution: CGSize;
    setPreferredMaximumResolution(_: CGSize) // property
    preferredPeakBitRate: number;
    setPreferredPeakBitRate(_: number) // property
    presentationSize: CGSize; // property
    recommendedTimeOffsetFromLive: CMTime; // property
    reversePlaybackEndTime: CMTime;
    setReversePlaybackEndTime(_: CMTime) // property
    seekableTimeRanges: NSValue[]; // property
    seekingWaitsForVideoCompositionRendering: boolean;
    setSeekingWaitsForVideoCompositionRendering(_: boolean) // property
    status: AVPlayerItem.Status; // property
    textStyleRules: AVTextStyleRule[];
    setTextStyleRules(_: AVTextStyleRule[]) // property
    timebase: any; // property
    tracks: AVPlayerItemTrack[]; // property
    videoApertureMode: string;
    setVideoApertureMode(_: string) // property
    videoComposition: AVVideoComposition;
    setVideoComposition(_: AVVideoComposition) // property
    accessLog(): AVPlayerItemAccessLog;
    addMediaDataCollector(_: AVPlayerItemMediaDataCollector): void;
    addOutput(_: AVPlayerItemOutput): void;
    cancelContentAuthorizationRequest(): void;
    cancelPendingSeeks(): void;
    currentDate(): Date;
    currentTime(): CMTime;
    errorLog(): AVPlayerItemErrorLog;
    static createWithAsset(asset: AVAsset): AVPlayerItem;
    static createWithAssetAutomaticallyLoadedAssetKeys(asset: AVAsset, automaticallyLoadedAssetKeys?: string[]): AVPlayerItem;
    static createWithUrl(URL: NSURL): AVPlayerItem;
    removeMediaDataCollector(_: AVPlayerItemMediaDataCollector): void;
    removeOutput(_: AVPlayerItemOutput): void;
    requestContentAuthorizationAsynchronouslyWithWithTimeoutIntervalCompletionHandler(withTimeoutInterval: number, completionHandler: () => void): void;
    seekWithToCompletionHandler(to: Date, completionHandler?: (p1: boolean) => void): boolean;
    seekWithToCompletionHandler(to: CMTime, completionHandler?: (p1: boolean) => void): void;
    seekWithToToleranceBeforeToleranceAfterCompletionHandler(to: CMTime, toleranceBefore: CMTime, toleranceAfter: CMTime, completionHandler?: (p1: boolean) => void): void;
    selectMediaOptionInMediaSelectionGroup(_?: AVMediaSelectionOption, in_?: AVMediaSelectionGroup): void;
    selectMediaOptionAutomaticallyInMediaSelectionGroup(in_: AVMediaSelectionGroup): void;
    stepByCount(byCount: number): void;
  }

  // interface
  class AVPlayerItemAccessLog extends NSObject /* implements NSCopying */ {
    events: AVPlayerItemAccessLogEvent[]; // property
    extendedLogDataStringEncoding: number; // property
    extendedLogData(): NSData;
  }

  // interface
  class AVPlayerItemAccessLogEvent extends NSObject /* implements NSCopying */ {
    URI: string; // property
    averageAudioBitrate: number; // property
    averageVideoBitrate: number; // property
    downloadOverdue: number; // property
    durationWatched: number; // property
    indicatedAverageBitrate: number; // property
    indicatedBitrate: number; // property
    mediaRequestsWWAN: number; // property
    numberOfBytesTransferred: number; // property
    numberOfDroppedVideoFrames: number; // property
    numberOfMediaRequests: number; // property
    numberOfServerAddressChanges: number; // property
    numberOfStalls: number; // property
    observedBitrate: number; // property
    observedBitrateStandardDeviation: number; // property
    observedMaxBitrate: number; // property
    observedMinBitrate: number; // property
    playbackSessionID: string; // property
    playbackStartDate: Date; // property
    playbackStartOffset: number; // property
    playbackType: string; // property
    segmentsDownloadedDuration: number; // property
    serverAddress: string; // property
    startupTime: number; // property
    switchBitrate: number; // property
    transferDuration: number; // property
  }

  // interface
  class AVPlayerItemErrorLog extends NSObject /* implements NSCopying */ {
    events: AVPlayerItemErrorLogEvent[]; // property
    extendedLogDataStringEncoding: number; // property
    extendedLogData(): NSData;
  }

  // interface
  class AVPlayerItemErrorLogEvent extends NSObject /* implements NSCopying */ {
    URI: string; // property
    date: Date; // property
    errorComment: string; // property
    errorDomain: string; // property
    errorStatusCode: number; // property
    playbackSessionID: string; // property
    serverAddress: string; // property
  }

  // interface
  class AVPlayerItemLegibleOutput extends AVPlayerItemOutput {
    advanceIntervalForDelegateInvocation: number;
    setAdvanceIntervalForDelegateInvocation(_: number) // property
    delegate: AVPlayerItemLegibleOutputPushDelegate; // property
    delegateQueue: NSObject; // property
    textStylingResolution: string;
    setTextStylingResolution(_: string) // property
    static createWithMediaSubtypesForNativeRepresentation(mediaSubtypesForNativeRepresentation: number[]): AVPlayerItemLegibleOutput;
    setDelegateQueue(_?: AVPlayerItemLegibleOutputPushDelegate, queue?: NSObject): void;
  }

  interface AVPlayerItemLegibleOutputPushDelegate extends AVPlayerItemOutputPushDelegate {
    // instance method
    legibleOutputDidOutputAttributedStringsNativeSampleBuffersForItemTime?(_: AVPlayerItemLegibleOutput, didOutputAttributedStrings: NSAttributedString[], nativeSampleBuffers: any[], forItemTime: CMTime): void;
  }

  // interface
  class AVPlayerItemMediaDataCollector extends NSObject {
  }

  // interface
  class AVPlayerItemMetadataCollector extends AVPlayerItemMediaDataCollector {
    delegate: AVPlayerItemMetadataCollectorPushDelegate; // property
    delegateQueue: NSObject; // property
    static createWithIdentifiersClassifyingLabels(identifiers?: string[], classifyingLabels?: string[]): AVPlayerItemMetadataCollector;
    setDelegateQueue(_?: AVPlayerItemMetadataCollectorPushDelegate, queue?: NSObject): void;
  }

  interface AVPlayerItemMetadataCollectorPushDelegate extends NSObject {
    // instance method
    metadataCollectorDidCollectDateRangeMetadataGroupsIndexesOfNewGroupsIndexesOfModifiedGroups(_: AVPlayerItemMetadataCollector, didCollect: AVDateRangeMetadataGroup[], indexesOfNewGroups: NSIndexSet, indexesOfModifiedGroups: NSIndexSet): void;
  }

  // interface
  class AVPlayerItemMetadataOutput extends AVPlayerItemOutput {
    advanceIntervalForDelegateInvocation: number;
    setAdvanceIntervalForDelegateInvocation(_: number) // property
    delegate: AVPlayerItemMetadataOutputPushDelegate; // property
    delegateQueue: NSObject; // property
    static createWithIdentifiers(identifiers?: string[]): AVPlayerItemMetadataOutput;
    setDelegateQueue(_?: AVPlayerItemMetadataOutputPushDelegate, queue?: NSObject): void;
  }

  interface AVPlayerItemMetadataOutputPushDelegate extends AVPlayerItemOutputPushDelegate {
    // instance method
    metadataOutputDidOutputTimedMetadataGroupsFromPlayerItemTrack?(_: AVPlayerItemMetadataOutput, didOutputTimedMetadataGroups: AVTimedMetadataGroup[], from?: AVPlayerItemTrack): void;
  }

  // interface
  class AVPlayerItemOutput extends NSObject {
    suppressesPlayerRendering: boolean;
    setSuppressesPlayerRendering(_: boolean) // property
    itemTimeForCVTimeStamp(for_: CVTimeStamp): CMTime;
    itemTimeForHostTime(forHostTime: number): CMTime;
    itemTimeForMachAbsoluteTime(forMachAbsoluteTime: number): CMTime;
  }

  interface AVPlayerItemOutputPullDelegate extends NSObject {
    // instance method
    outputMediaDataWillChange?(_: AVPlayerItemOutput): void;
    // instance method
    outputSequenceWasFlushed?(_: AVPlayerItemOutput): void;
  }

  interface AVPlayerItemOutputPushDelegate extends NSObject {
    // instance method
    outputSequenceWasFlushed?(_: AVPlayerItemOutput): void;
  }

  // interface
  class AVPlayerItemTrack extends NSObject {
    assetTrack: AVAssetTrack; // property
    currentVideoFrameRate: number; // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    videoFieldMode: string;
    setVideoFieldMode(_: string) // property
  }

  // interface
  class AVPlayerItemVideoOutput extends AVPlayerItemOutput {
    delegate: AVPlayerItemOutputPullDelegate; // property
    delegateQueue: NSObject; // property
    copyPixelBufferForItemTimeItemTimeForDisplay(forItemTime: CMTime, itemTimeForDisplay?: CMTime): any;
    hasNewPixelBufferForItemTime(forItemTime: CMTime): boolean;
    static createWithOutputSettings(outputSettings?: Map<string, any>): AVPlayerItemVideoOutput;
    static createWithPixelBufferAttributes(pixelBufferAttributes?: Map<string, any>): AVPlayerItemVideoOutput;
    requestNotificationOfMediaDataChangeWithAdvanceInterval(withAdvanceInterval: number): void;
    setDelegateQueue(_?: AVPlayerItemOutputPullDelegate, queue?: NSObject): void;
  }

  // interface
  class AVPlayerLayer extends CALayer {
    pixelBufferAttributes: Map<string, any>;
    setPixelBufferAttributes(_: Map<string, any>) // property
    player: AVPlayer;
    setPlayer(_: AVPlayer) // property
    isReadyForDisplay: boolean; // property
    videoGravity: string;
    setVideoGravity(_: string) // property
    videoRect: CGRect; // property
  }

  // interface
  class AVPlayerLooper extends NSObject {
    error: NSError; // property
    loopCount: number; // property
    loopingPlayerItems: AVPlayerItem[]; // property
    status: AVPlayerLooper.Status; // property
    disableLooping(): void;
    static createWithPlayerTemplateItemTimeRange(player: AVQueuePlayer, templateItem: AVPlayerItem, timeRange: CMTimeRange): AVPlayerLooper;
  }

  // interface
  class AVPlayerMediaSelectionCriteria extends NSObject {
    preferredLanguages: string[]; // property
    preferredMediaCharacteristics: string[]; // property
    principalMediaCharacteristics: string[]; // property
    static createWithPreferredLanguagesPreferredMediaCharacteristics(preferredLanguages?: string[], preferredMediaCharacteristics?: string[]): AVPlayerMediaSelectionCriteria;
    static createWithPrincipalMediaCharacteristicsPreferredLanguagesPreferredMediaCharacteristics(principalMediaCharacteristics?: string[], preferredLanguages?: string[], preferredMediaCharacteristics?: string[]): AVPlayerMediaSelectionCriteria;
  }

  // interface
  class AVPortraitEffectsMatte extends NSObject {
    static portraitEffectsMatteFromDictionaryRepresentationError(error: Map<any, any>): AVPortraitEffectsMatte;
    mattingImage: any; // property
    pixelFormatType: number; // property
    dictionaryRepresentationForAuxiliaryDataType(forAuxiliaryDataType?: string): Map<any, any>;
    portraitEffectsMatteByApplyingExifOrientation(_: CGImagePropertyOrientation): AVPortraitEffectsMatte;
    portraitEffectsMatteByReplacingPortraitEffectsMatteWithPixelBufferError(error: any): AVPortraitEffectsMatte;
  }

  // interface
  class AVQueuePlayer extends AVPlayer {
    static queuePlayerWithItems(items: AVPlayerItem[]): AVQueuePlayer;
    advanceToNextItem(): void;
    canInsertItemAfterItem(_: AVPlayerItem, after?: AVPlayerItem): boolean;
    static createWithItems(items: AVPlayerItem[]): AVQueuePlayer;
    insertItemAfterItem(_: AVPlayerItem, after?: AVPlayerItem): void;
    items(): AVPlayerItem[];
    removeAllItems(): void;
    removeItem(_: AVPlayerItem): void;
  }

  interface AVQueuedSampleBufferRendering extends NSObject {
    isReadyForMoreMediaData: boolean; // property
    timebase: any; // property
    // instance method
    enqueueSampleBuffer(_: any): void;
    // instance method
    flush(): void;
    // instance method
    requestMediaDataWhenReadyWithOnUsing(on: NSObject, using: () => void): void;
    // instance method
    stopRequestingMediaData(): void;
  }

  // interface
  class AVRouteDetector extends NSObject {
    multipleRoutesDetected: boolean; // property
    isRouteDetectionEnabled: boolean;
    setRouteDetectionEnabled(_: boolean) // property
  }

  // interface
  class AVSampleBufferAudioRenderer extends NSObject /* implements AVQueuedSampleBufferRendering */ {
    audioOutputDeviceUniqueID: string;
    setAudioOutputDeviceUniqueID(_: string) // property
    audioTimePitchAlgorithm: string;
    setAudioTimePitchAlgorithm(_: string) // property
    error: NSError; // property
    isMuted: boolean;
    setMuted(_: boolean) // property
    status: AVQueuedSampleBufferRenderingStatus; // property
    volume: number;
    setVolume(_: number) // property
    flushWithFromSourceTimeCompletionHandler(fromSourceTime: CMTime, completionHandler: (p1: boolean) => void): void;
  }

  // interface
  class AVSampleBufferDisplayLayer extends CALayer /* implements AVQueuedSampleBufferRendering */ {
    controlTimebase: any;
    setControlTimebase(_: any) // property
    error: NSError; // property
    preventsCapture: boolean;
    setPreventsCapture(_: boolean) // property
    preventsDisplaySleepDuringVideoPlayback: boolean;
    setPreventsDisplaySleepDuringVideoPlayback(_: boolean) // property
    status: AVQueuedSampleBufferRenderingStatus; // property
    videoGravity: string;
    setVideoGravity(_: string) // property
    flushAndRemoveImage(): void;
  }

  // interface
  class AVSampleBufferGenerator extends NSObject {
    static notifyOfDataReadyForCompletionHandler(for_: any, completionHandler: (p1: boolean, p2: NSError) => void): void;
    createSampleBufferForRequest(for_: AVSampleBufferRequest): any;
    static createWithAssetTimebase(asset: AVAsset, timebase?: any): AVSampleBufferGenerator;
  }

  // interface
  class AVSampleBufferRenderSynchronizer extends NSObject {
    rate: number;
    setRate(_: number) // property
    renderers: AVQueuedSampleBufferRendering[]; // property
    timebase: any; // property
    addBoundaryTimeObserverWithForTimesQueueUsing(forTimes: NSValue[], queue?: NSObject, using?: () => void): any;
    addPeriodicTimeObserverWithForIntervalQueueUsing(forInterval: CMTime, queue?: NSObject, using?: (p1: CMTime) => void): any;
    addRenderer(_: AVQueuedSampleBufferRendering): void;
    currentTime(): CMTime;
    removeRendererAtCompletionHandler(_: AVQueuedSampleBufferRendering, at: CMTime, completionHandler?: (p1: boolean) => void): void;
    removeTimeObserver(_: any): void;
    setRateTime(_: number, time: CMTime): void;
  }

  // interface
  class AVSampleBufferRequest extends NSObject {
    direction: AVSampleBufferRequest.Direction;
    setDirection(_: AVSampleBufferRequest.Direction) // property
    limitCursor: AVSampleCursor;
    setLimitCursor(_: AVSampleCursor) // property
    maxSampleCount: number;
    setMaxSampleCount(_: number) // property
    mode: AVSampleBufferRequest.Mode;
    setMode(_: AVSampleBufferRequest.Mode) // property
    overrideTime: CMTime;
    setOverrideTime(_: CMTime) // property
    preferredMinSampleCount: number;
    setPreferredMinSampleCount(_: number) // property
    startCursor: AVSampleCursor; // property
    static createWithStartCursor(startCursor: AVSampleCursor): AVSampleBufferRequest;
  }

  // interface
  class AVSampleCursor extends NSObject /* implements NSCopying */ {
    currentChunkInfo: AVSampleCursorChunkInfo; // property
    currentChunkStorageRange: AVSampleCursorStorageRange; // property
    currentChunkStorageURL: NSURL; // property
    currentSampleAudioDependencyInfo: AVSampleCursorAudioDependencyInfo; // property
    currentSampleDependencyInfo: AVSampleCursorDependencyInfo; // property
    currentSampleDuration: CMTime; // property
    currentSampleIndexInChunk: number; // property
    currentSampleStorageRange: AVSampleCursorStorageRange; // property
    currentSampleSyncInfo: AVSampleCursorSyncInfo; // property
    decodeTimeStamp: CMTime; // property
    presentationTimeStamp: CMTime; // property
    samplesRequiredForDecoderRefresh: number; // property
    comparePositionInDecodeOrderWithPositionOfCursor(withPositionOf: AVSampleCursor): ComparisonResult;
    copyCurrentSampleFormatDescription(): any;
    samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor(laterThan: AVSampleCursor): boolean;
    samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor(earlierThan: AVSampleCursor): boolean;
    stepByDecodeTimeWasPinned(byDecodeTime: CMTime, wasPinned?: boolean): CMTime;
    stepByPresentationTimeWasPinned(byPresentationTime: CMTime, wasPinned?: boolean): CMTime;
    stepInDecodeOrderByCount(byCount: number): number;
    stepInPresentationOrderByCount(byCount: number): number;
  }

  // struct
  interface AVSampleCursorAudioDependencyInfo {
    audioSampleIsIndependentlyDecodable: boolean;
    audioSamplePacketRefreshCount: number;
  }

  // struct
  interface AVSampleCursorChunkInfo {
    chunkSampleCount: number;
    chunkHasUniformSampleSizes: boolean;
    chunkHasUniformSampleDurations: boolean;
    chunkHasUniformFormatDescriptions: boolean;
  }

  // struct
  interface AVSampleCursorDependencyInfo {
    sampleIndicatesWhetherItHasDependentSamples: boolean;
    sampleHasDependentSamples: boolean;
    sampleIndicatesWhetherItDependsOnOthers: boolean;
    sampleDependsOnOthers: boolean;
    sampleIndicatesWhetherItHasRedundantCoding: boolean;
    sampleHasRedundantCoding: boolean;
  }

  // struct
  interface AVSampleCursorStorageRange {
    offset: number;
    length: number;
  }

  // struct
  interface AVSampleCursorSyncInfo {
    sampleIsFullSync: boolean;
    sampleIsPartialSync: boolean;
    sampleIsDroppable: boolean;
  }

  // interface
  class AVSemanticSegmentationMatte extends NSObject {
    static semanticSegmentationMatteFromImageSourceAuxiliaryDataTypeDictionaryRepresentationError(dictionaryRepresentation: string, error: Map<any, any>): AVSemanticSegmentationMatte;
    matteType: string; // property
    mattingImage: any; // property
    pixelFormatType: number; // property
    dictionaryRepresentationForAuxiliaryDataType(forAuxiliaryDataType?: string): Map<any, any>;
    semanticSegmentationMatteByApplyingExifOrientation(_: CGImagePropertyOrientation): AVSemanticSegmentationMatte;
    semanticSegmentationMatteByReplacingSemanticSegmentationMatteWithPixelBufferError(error: any): AVSemanticSegmentationMatte;
  }

  // interface
  class AVSpeechSynthesisVoice extends NSObject /* implements NSSecureCoding */ {
    static currentLanguageCode(): string;
    static speechVoices(): AVSpeechSynthesisVoice[];
    static voiceWithIdentifier(identifier: string): AVSpeechSynthesisVoice;
    static voiceWithLanguage(language?: string): AVSpeechSynthesisVoice;
    audioFileSettings: Map<string, any>; // property
    gender: AVSpeechSynthesisVoiceGender; // property
    identifier: string; // property
    language: string; // property
    name: string; // property
    quality: AVSpeechSynthesisVoiceQuality; // property
  }

  // interface
  class AVSpeechSynthesizer extends NSObject {
    delegate: AVSpeechSynthesizerDelegate;
    setDelegate(_: AVSpeechSynthesizerDelegate) // property
    isPaused: boolean; // property
    isSpeaking: boolean; // property
    continueSpeaking(): boolean;
    pauseSpeakingAtBoundary(at: AVSpeechBoundary): boolean;
    speakUtterance(_: AVSpeechUtterance): void;
    stopSpeakingAtBoundary(at: AVSpeechBoundary): boolean;
    writeToBufferCallback(_: AVSpeechUtterance, toBufferCallback: (p1: AVAudioBuffer) => void): void;
  }

  interface AVSpeechSynthesizerDelegate extends NSObject {
    // instance method
    speechSynthesizerDidStartSpeechUtterance?(_: AVSpeechSynthesizer, didStart: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidFinishSpeechUtterance?(_: AVSpeechSynthesizer, didFinish: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidPauseSpeechUtterance?(_: AVSpeechSynthesizer, didPause: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidContinueSpeechUtterance?(_: AVSpeechSynthesizer, didContinue: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerDidCancelSpeechUtterance?(_: AVSpeechSynthesizer, didCancel: AVSpeechUtterance): void;
    // instance method
    speechSynthesizerWillSpeakRangeOfSpeechStringUtterance?(_: AVSpeechSynthesizer, willSpeakRangeOfSpeechString: NSRange, utterance: AVSpeechUtterance): void;
  }

  // interface
  class AVSpeechUtterance extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static speechUtteranceWithAttributedString(attributedString: NSAttributedString): AVSpeechUtterance;
    static speechUtteranceWithString(string: string): AVSpeechUtterance;
    attributedSpeechString: NSAttributedString; // property
    pitchMultiplier: number;
    setPitchMultiplier(_: number) // property
    postUtteranceDelay: number;
    setPostUtteranceDelay(_: number) // property
    preUtteranceDelay: number;
    setPreUtteranceDelay(_: number) // property
    rate: number;
    setRate(_: number) // property
    speechString: string; // property
    voice: AVSpeechSynthesisVoice;
    setVoice(_: AVSpeechSynthesisVoice) // property
    volume: number;
    setVolume(_: number) // property
    static createWithAttributedString(attributedString: NSAttributedString): AVSpeechUtterance;
    static createWithString(string: string): AVSpeechUtterance;
  }

  // interface
  class AVSynchronizedLayer extends CALayer {
    playerItem: AVPlayerItem;
    setPlayerItem(_: AVPlayerItem) // property
  }

  // interface
  class AVTextStyleRule extends NSObject /* implements NSCopying */ {
    static propertyListForTextStyleRules(for_: AVTextStyleRule[]): any;
    static textStyleRulesFromPropertyList(fromPropertyList: any): AVTextStyleRule[];
    textMarkupAttributes: Map<string, any>; // property
    textSelector: string; // property
    static createWithTextMarkupAttributes(textMarkupAttributes: Map<string, any>): AVTextStyleRule;
    static createWithTextMarkupAttributesTextSelector(textMarkupAttributes: Map<string, any>, textSelector?: string): AVTextStyleRule;
  }

  // interface
  class AVTimedMetadataGroup extends AVMetadataGroup /* implements NSCopying, NSMutableCopying */ {
    timeRange: CMTimeRange; // property
    copyFormatDescription(): any;
    static createWithItemsTimeRange(items: AVMetadataItem[], timeRange: CMTimeRange): AVTimedMetadataGroup;
    static createWithSampleBuffer(sampleBuffer: any): AVTimedMetadataGroup;
  }

  // interface
  class AVURLAsset extends AVAsset /* implements AVContentKeyRecipient */ {
    static URLAssetWithURLOptions(url: NSURL, options?: Map<string, any>): AVURLAsset;
    static audiovisualMIMETypes(): string[];
    static audiovisualTypes(): string[];
    static isPlayableExtendedMIMEType(_: string): boolean;
    URL: NSURL; // property
    assetCache: AVAssetCache; // property
    resourceLoader: AVAssetResourceLoader; // property
    compatibleTrackForCompositionTrack(for_: AVCompositionTrack): AVAssetTrack;
    static createWithUrlOptions(URL: NSURL, options?: Map<string, any>): AVURLAsset;
  }

  interface AVVideoCompositing extends NSObject {
    requiredPixelBufferAttributesForRenderContext: Map<string, any>; // property
    sourcePixelBufferAttributes: Map<string, any>; // property
    supportsWideColorSourceFrames?: boolean; // property
    // instance method
    anticipateRenderingUsingHint?(using: AVVideoCompositionRenderHint): void;
    // instance method
    cancelAllPendingVideoCompositionRequests?(): void;
    // instance method
    prerollForRenderingUsingHint?(using: AVVideoCompositionRenderHint): void;
    // instance method
    renderContextChanged(_: AVVideoCompositionRenderContext): void;
    // instance method
    startVideoCompositionRequest(_: AVAsynchronousVideoCompositionRequest): void;
  }

  // interface
  class AVVideoComposition extends NSObject /* implements NSCopying, NSMutableCopying */ {
    animationTool: AVVideoCompositionCoreAnimationTool; // property
    colorPrimaries: string; // property
    colorTransferFunction: string; // property
    colorYCbCrMatrix: string; // property
    customVideoCompositorClass: typeof NSObject; // property
    frameDuration: CMTime; // property
    instructions: AVVideoCompositionInstruction[]; // property
    renderScale: number; // property
    renderSize: CGSize; // property
    sourceTrackIDForFrameTiming: number; // property
    isValidForAssetTimeRangeValidationDelegate(for_?: AVAsset, timeRange?: CMTimeRange, validationDelegate?: AVVideoCompositionValidationHandling): boolean;
  }

  // interface
  class AVVideoCompositionCoreAnimationTool extends NSObject {
    static videoCompositionCoreAnimationToolWithAdditionalLayerAsTrackID(additionalLayer: CALayer, asTrackID: number): AVVideoCompositionCoreAnimationTool;
    static videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayerInLayer(postProcessingAsVideoLayer: CALayer, in_: CALayer): AVVideoCompositionCoreAnimationTool;
    static videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayersInLayer(postProcessingAsVideoLayers: CALayer[], in_: CALayer): AVVideoCompositionCoreAnimationTool;
  }

  // interface
  class AVVideoCompositionInstruction extends NSObject /* implements AVVideoCompositionInstruction, NSCopying, NSMutableCopying, NSSecureCoding */ {
    backgroundColor: any; // property
    layerInstructions: AVVideoCompositionLayerInstruction[]; // property
  }

  interface AVVideoCompositionInstruction extends NSObject {
    containsTweening: boolean; // property
    enablePostProcessing: boolean; // property
    passthroughTrackID: number; // property
    requiredSourceTrackIDs: NSValue[]; // property
    timeRange: CMTimeRange; // property
  }

  // interface
  class AVVideoCompositionLayerInstruction extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding */ {
    trackID: number; // property
    getCropRectangleRampForTimeStartCropRectangleEndCropRectangleTimeRange(for_: CMTime, startCropRectangle?: NSRect, endCropRectangle?: NSRect, timeRange?: CMTimeRange): boolean;
    getOpacityRampForTimeStartOpacityEndOpacityTimeRange(for_: CMTime, startOpacity?: number, endOpacity?: number, timeRange?: CMTimeRange): boolean;
    getTransformRampForTimeStartTransformEndTransformTimeRange(for_: CMTime, start?: CGAffineTransform, end?: CGAffineTransform, timeRange?: CMTimeRange): boolean;
  }

  // interface
  class AVVideoCompositionRenderContext extends NSObject {
    edgeWidths: AVEdgeWidths; // property
    highQualityRendering: boolean; // property
    pixelAspectRatio: AVPixelAspectRatio; // property
    renderScale: number; // property
    renderTransform: CGAffineTransform; // property
    size: CGSize; // property
    videoComposition: AVVideoComposition; // property
    newPixelBuffer(): any;
  }

  // interface
  class AVVideoCompositionRenderHint extends NSObject {
    endCompositionTime: CMTime; // property
    startCompositionTime: CMTime; // property
  }

  interface AVVideoCompositionValidationHandling extends NSObject {
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction?(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidTimeRangeIn: AVVideoCompositionInstruction): boolean;
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingInvalidTrackIDInInstructionLayerInstructionAsset?(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidTrackIDIn: AVVideoCompositionInstruction, layerInstruction: AVVideoCompositionLayerInstruction, asset: AVAsset): boolean;
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingEmptyTimeRange?(_: AVVideoComposition, shouldContinueValidatingAfterFindingEmptyTimeRange: CMTimeRange): boolean;
    // instance method
    videoCompositionShouldContinueValidatingAfterFindingInvalidValueForKey?(_: AVVideoComposition, shouldContinueValidatingAfterFindingInvalidValueForKey: string): boolean;
  }

  // interface
  class AVCaptureView extends NSView {
    controlsStyle: AVCaptureViewControlsStyle;
    setControlsStyle(_: AVCaptureViewControlsStyle) // property
    delegate: AVCaptureViewDelegate;
    setDelegate(_: AVCaptureViewDelegate) // property
    fileOutput: AVCaptureFileOutput; // property
    session: AVCaptureSession; // property
    videoGravity: string;
    setVideoGravity(_: string) // property
    setSessionShowVideoPreviewShowAudioPreview(_?: AVCaptureSession, showVideoPreview?: boolean, showAudioPreview?: boolean): void;
  }

  interface AVCaptureViewDelegate extends NSObject {
    // instance method
    captureViewStartRecordingToFileOutput(_: AVCaptureView, startRecordingTo: AVCaptureFileOutput): void;
  }

  // interface
  class AVPictureInPictureController extends NSObject {
    static isPictureInPictureSupported(): boolean;
    delegate: AVPictureInPictureControllerDelegate;
    setDelegate(_: AVPictureInPictureControllerDelegate) // property
    isPictureInPictureActive: boolean; // property
    isPictureInPicturePossible: boolean; // property
    isPictureInPictureSuspended: boolean; // property
    playerLayer: AVPlayerLayer; // property
    static pictureInPictureButtonStartImage: NSImage; // property
    static pictureInPictureButtonStopImage: NSImage; // property
    static createWithPlayerLayer(playerLayer: AVPlayerLayer): AVPictureInPictureController;
    startPictureInPicture(): void;
    stopPictureInPicture(): void;
  }

  interface AVPictureInPictureControllerDelegate extends NSObject {
    // instance method
    pictureInPictureControllerFailedToStartPictureInPictureWithError?(_: AVPictureInPictureController, failedToStartPictureInPictureWithError: NSError): void;
    // instance method
    pictureInPictureControllerWithRestoreUserInterfaceForPictureInPictureStopWithCompletionHandler?(_: AVPictureInPictureController, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (p1: boolean) => void): void;
    // instance method
    pictureInPictureControllerDidStartPictureInPicture?(_: AVPictureInPictureController): void;
    // instance method
    pictureInPictureControllerDidStopPictureInPicture?(_: AVPictureInPictureController): void;
    // instance method
    pictureInPictureControllerWillStartPictureInPicture?(_: AVPictureInPictureController): void;
    // instance method
    pictureInPictureControllerWillStopPictureInPicture?(_: AVPictureInPictureController): void;
  }

  // interface
  class AVPlayerView extends NSView {
    actionPopUpButtonMenu: NSMenu;
    setActionPopUpButtonMenu(_: NSMenu) // property
    allowsPictureInPicturePlayback: boolean;
    setAllowsPictureInPicturePlayback(_: boolean) // property
    canBeginTrimming: boolean; // property
    contentOverlayView: NSView; // property
    controlsStyle: AVPlayerViewControlsStyle;
    setControlsStyle(_: AVPlayerViewControlsStyle) // property
    pictureInPictureDelegate: AVPlayerViewPictureInPictureDelegate;
    setPictureInPictureDelegate(_: AVPlayerViewPictureInPictureDelegate) // property
    player: AVPlayer;
    setPlayer(_: AVPlayer) // property
    isReadyForDisplay: boolean; // property
    showsFrameSteppingButtons: boolean;
    setShowsFrameSteppingButtons(_: boolean) // property
    showsFullScreenToggleButton: boolean;
    setShowsFullScreenToggleButton(_: boolean) // property
    showsSharingServiceButton: boolean;
    setShowsSharingServiceButton(_: boolean) // property
    showsTimecodes: boolean;
    setShowsTimecodes(_: boolean) // property
    updatesNowPlayingInfoCenter: boolean;
    setUpdatesNowPlayingInfoCenter(_: boolean) // property
    videoBounds: CGRect; // property
    videoGravity: string;
    setVideoGravity(_: string) // property
    beginTrimmingWithCompletionHandler(completionHandler?: (p1: AVPlayerViewTrimResult) => void): void;
    flashChapterNumberChapterTitle(_: number, chapterTitle?: string): void;
  }

  interface AVPlayerViewPictureInPictureDelegate extends NSObject {
    // instance method
    playerViewFailedToStartPictureInPictureWithError?(_: AVPlayerView, failedToStartPictureInPictureWithError: NSError): void;
    // instance method
    playerViewWithRestoreUserInterfaceForPictureInPictureStopWithCompletionHandler?(_: AVPlayerView, restoreUserInterfaceForPictureInPictureStopWithCompletionHandler: (p1: boolean) => void): void;
    // instance method
    playerViewDidStartPictureInPicture?(inPicture: AVPlayerView): void;
    // instance method
    playerViewDidStopPictureInPicture?(inPicture: AVPlayerView): void;
    // instance method
    playerViewShouldAutomaticallyDismissAtPictureInPictureStart?(inPictureStart: AVPlayerView): boolean;
    // instance method
    playerViewWillStartPictureInPicture?(inPicture: AVPlayerView): void;
    // instance method
    playerViewWillStopPictureInPicture?(inPicture: AVPlayerView): void;
  }

  // interface
  class AVRoutePickerView extends NSView {
    delegate: AVRoutePickerViewDelegate;
    setDelegate(_: AVRoutePickerViewDelegate) // property
    player: AVPlayer;
    setPlayer(_: AVPlayer) // property
    isRoutePickerButtonBordered: boolean;
    setRoutePickerButtonBordered(_: boolean) // property
    routePickerButtonColorForState(for_: AVRoutePickerViewButtonState): NSColor;
    setRoutePickerButtonColorForState(_?: NSColor, for_?: AVRoutePickerViewButtonState): void;
  }

  interface AVRoutePickerViewDelegate extends NSObject {
    // instance method
    routePickerViewDidEndPresentingRoutes?(_: AVRoutePickerView): void;
    // instance method
    routePickerViewWillBeginPresentingRoutes?(_: AVRoutePickerView): void;
  }

  // interface
  class NSATSTypesetter extends NSTypesetter {
    static sharedTypesetter: NSATSTypesetter; // property
  }

  interface NSAccessibility extends NSObject {
    accessibilityActivationPoint: CGPoint;
    setAccessibilityActivationPoint(_: CGPoint) // property
    accessibilityAllowedValues: number[];
    setAccessibilityAllowedValues(_: number[]) // property
    isAccessibilityAlternateUIVisible: boolean;
    setAccessibilityAlternateUIVisible(_: boolean) // property
    accessibilityApplicationFocusedUIElement: any;
    setAccessibilityApplicationFocusedUIElement(_: any) // property
    accessibilityCancelButton: any;
    setAccessibilityCancelButton(_: any) // property
    accessibilityChildren: any[];
    setAccessibilityChildren(_: any[]) // property
    accessibilityChildrenInNavigationOrder: NSAccessibilityElement[];
    setAccessibilityChildrenInNavigationOrder(_: NSAccessibilityElement[]) // property
    accessibilityClearButton: any;
    setAccessibilityClearButton(_: any) // property
    accessibilityCloseButton: any;
    setAccessibilityCloseButton(_: any) // property
    accessibilityColumnCount: number;
    setAccessibilityColumnCount(_: number) // property
    accessibilityColumnHeaderUIElements: any[];
    setAccessibilityColumnHeaderUIElements(_: any[]) // property
    accessibilityColumnIndexRange: NSRange;
    setAccessibilityColumnIndexRange(_: NSRange) // property
    accessibilityColumns: any[];
    setAccessibilityColumns(_: any[]) // property
    accessibilityColumnTitles: any[];
    setAccessibilityColumnTitles(_: any[]) // property
    accessibilityContents: any[];
    setAccessibilityContents(_: any[]) // property
    accessibilityCriticalValue: any;
    setAccessibilityCriticalValue(_: any) // property
    accessibilityCustomActions: NSAccessibilityCustomAction[];
    setAccessibilityCustomActions(_: NSAccessibilityCustomAction[]) // property
    accessibilityCustomRotors: NSAccessibilityCustomRotor[];
    setAccessibilityCustomRotors(_: NSAccessibilityCustomRotor[]) // property
    accessibilityDecrementButton: any;
    setAccessibilityDecrementButton(_: any) // property
    accessibilityDefaultButton: any;
    setAccessibilityDefaultButton(_: any) // property
    isAccessibilityDisclosed: boolean;
    setAccessibilityDisclosed(_: boolean) // property
    accessibilityDisclosedByRow: any;
    setAccessibilityDisclosedByRow(_: any) // property
    accessibilityDisclosedRows: any;
    setAccessibilityDisclosedRows(_: any) // property
    accessibilityDisclosureLevel: number;
    setAccessibilityDisclosureLevel(_: number) // property
    accessibilityDocument: string;
    setAccessibilityDocument(_: string) // property
    isAccessibilityEdited: boolean;
    setAccessibilityEdited(_: boolean) // property
    isAccessibilityElement: boolean;
    setAccessibilityElement(_: boolean) // property
    isAccessibilityEnabled: boolean;
    setAccessibilityEnabled(_: boolean) // property
    isAccessibilityExpanded: boolean;
    setAccessibilityExpanded(_: boolean) // property
    accessibilityExtrasMenuBar: any;
    setAccessibilityExtrasMenuBar(_: any) // property
    accessibilityFilename: string;
    setAccessibilityFilename(_: string) // property
    isAccessibilityFocused: boolean;
    setAccessibilityFocused(_: boolean) // property
    accessibilityFocusedWindow: any;
    setAccessibilityFocusedWindow(_: any) // property
    accessibilityFrame: CGRect;
    setAccessibilityFrame(_: CGRect) // property
    isAccessibilityFrontmost: boolean;
    setAccessibilityFrontmost(_: boolean) // property
    accessibilityFullScreenButton: any;
    setAccessibilityFullScreenButton(_: any) // property
    accessibilityGrowArea: any;
    setAccessibilityGrowArea(_: any) // property
    accessibilityHandles: any[];
    setAccessibilityHandles(_: any[]) // property
    accessibilityHeader: any;
    setAccessibilityHeader(_: any) // property
    accessibilityHelp: string;
    setAccessibilityHelp(_: string) // property
    isAccessibilityHidden: boolean;
    setAccessibilityHidden(_: boolean) // property
    accessibilityHorizontalScrollBar: any;
    setAccessibilityHorizontalScrollBar(_: any) // property
    accessibilityHorizontalUnitDescription: string;
    setAccessibilityHorizontalUnitDescription(_: string) // property
    accessibilityHorizontalUnits: NSAccessibility.Units;
    setAccessibilityHorizontalUnits(_: NSAccessibility.Units) // property
    accessibilityIdentifier: string;
    setAccessibilityIdentifier(_: string) // property
    accessibilityIncrementButton: any;
    setAccessibilityIncrementButton(_: any) // property
    accessibilityIndex: number;
    setAccessibilityIndex(_: number) // property
    accessibilityInsertionPointLineNumber: number;
    setAccessibilityInsertionPointLineNumber(_: number) // property
    accessibilityLabel: string;
    setAccessibilityLabel(_: string) // property
    accessibilityLabelUIElements: any[];
    setAccessibilityLabelUIElements(_: any[]) // property
    accessibilityLabelValue: number;
    setAccessibilityLabelValue(_: number) // property
    accessibilityLinkedUIElements: any[];
    setAccessibilityLinkedUIElements(_: any[]) // property
    isAccessibilityMain: boolean;
    setAccessibilityMain(_: boolean) // property
    accessibilityMainWindow: any;
    setAccessibilityMainWindow(_: any) // property
    accessibilityMarkerGroupUIElement: any;
    setAccessibilityMarkerGroupUIElement(_: any) // property
    accessibilityMarkerTypeDescription: string;
    setAccessibilityMarkerTypeDescription(_: string) // property
    accessibilityMarkerUIElements: any[];
    setAccessibilityMarkerUIElements(_: any[]) // property
    accessibilityMarkerValues: any;
    setAccessibilityMarkerValues(_: any) // property
    accessibilityMaxValue: any;
    setAccessibilityMaxValue(_: any) // property
    accessibilityMenuBar: any;
    setAccessibilityMenuBar(_: any) // property
    accessibilityMinimizeButton: any;
    setAccessibilityMinimizeButton(_: any) // property
    isAccessibilityMinimized: boolean;
    setAccessibilityMinimized(_: boolean) // property
    accessibilityMinValue: any;
    setAccessibilityMinValue(_: any) // property
    isAccessibilityModal: boolean;
    setAccessibilityModal(_: boolean) // property
    accessibilityNextContents: any[];
    setAccessibilityNextContents(_: any[]) // property
    accessibilityNumberOfCharacters: number;
    setAccessibilityNumberOfCharacters(_: number) // property
    isAccessibilityOrderedByRow: boolean;
    setAccessibilityOrderedByRow(_: boolean) // property
    accessibilityOrientation: NSAccessibility.Orientation;
    setAccessibilityOrientation(_: NSAccessibility.Orientation) // property
    accessibilityOverflowButton: any;
    setAccessibilityOverflowButton(_: any) // property
    accessibilityParent: any;
    setAccessibilityParent(_: any) // property
    accessibilityPlaceholderValue: string;
    setAccessibilityPlaceholderValue(_: string) // property
    accessibilityPreviousContents: any[];
    setAccessibilityPreviousContents(_: any[]) // property
    isAccessibilityProtectedContent: boolean;
    setAccessibilityProtectedContent(_: boolean) // property
    accessibilityProxy: any;
    setAccessibilityProxy(_: any) // property
    isAccessibilityRequired: boolean;
    setAccessibilityRequired(_: boolean) // property
    accessibilityRole: string;
    setAccessibilityRole(_: string) // property
    accessibilityRoleDescription: string;
    setAccessibilityRoleDescription(_: string) // property
    accessibilityRowCount: number;
    setAccessibilityRowCount(_: number) // property
    accessibilityRowHeaderUIElements: any[];
    setAccessibilityRowHeaderUIElements(_: any[]) // property
    accessibilityRowIndexRange: NSRange;
    setAccessibilityRowIndexRange(_: NSRange) // property
    accessibilityRows: any[];
    setAccessibilityRows(_: any[]) // property
    accessibilityRulerMarkerType: NSAccessibility.RulerMarkerType;
    setAccessibilityRulerMarkerType(_: NSAccessibility.RulerMarkerType) // property
    accessibilitySearchButton: any;
    setAccessibilitySearchButton(_: any) // property
    accessibilitySearchMenu: any;
    setAccessibilitySearchMenu(_: any) // property
    isAccessibilitySelected: boolean;
    setAccessibilitySelected(_: boolean) // property
    accessibilitySelectedCells: any[];
    setAccessibilitySelectedCells(_: any[]) // property
    accessibilitySelectedChildren: any[];
    setAccessibilitySelectedChildren(_: any[]) // property
    accessibilitySelectedColumns: any[];
    setAccessibilitySelectedColumns(_: any[]) // property
    accessibilitySelectedRows: any[];
    setAccessibilitySelectedRows(_: any[]) // property
    accessibilitySelectedText: string;
    setAccessibilitySelectedText(_: string) // property
    accessibilitySelectedTextRange: NSRange;
    setAccessibilitySelectedTextRange(_: NSRange) // property
    accessibilitySelectedTextRanges: NSValue[];
    setAccessibilitySelectedTextRanges(_: NSValue[]) // property
    accessibilityServesAsTitleForUIElements: any[];
    setAccessibilityServesAsTitleForUIElements(_: any[]) // property
    accessibilitySharedCharacterRange: NSRange;
    setAccessibilitySharedCharacterRange(_: NSRange) // property
    accessibilitySharedFocusElements: any[];
    setAccessibilitySharedFocusElements(_: any[]) // property
    accessibilitySharedTextUIElements: any[];
    setAccessibilitySharedTextUIElements(_: any[]) // property
    accessibilityShownMenu: any;
    setAccessibilityShownMenu(_: any) // property
    accessibilitySortDirection: NSAccessibility.SortDirection;
    setAccessibilitySortDirection(_: NSAccessibility.SortDirection) // property
    accessibilitySplitters: any[];
    setAccessibilitySplitters(_: any[]) // property
    accessibilitySubrole: string;
    setAccessibilitySubrole(_: string) // property
    accessibilityTabs: any[];
    setAccessibilityTabs(_: any[]) // property
    accessibilityTitle: string;
    setAccessibilityTitle(_: string) // property
    accessibilityTitleUIElement: any;
    setAccessibilityTitleUIElement(_: any) // property
    accessibilityToolbarButton: any;
    setAccessibilityToolbarButton(_: any) // property
    accessibilityTopLevelUIElement: any;
    setAccessibilityTopLevelUIElement(_: any) // property
    accessibilityUnitDescription: string;
    setAccessibilityUnitDescription(_: string) // property
    accessibilityUnits: NSAccessibility.Units;
    setAccessibilityUnits(_: NSAccessibility.Units) // property
    accessibilityURL: NSURL;
    setAccessibilityURL(_: NSURL) // property
    accessibilityValue: any;
    setAccessibilityValue(_: any) // property
    accessibilityValueDescription: string;
    setAccessibilityValueDescription(_: string) // property
    accessibilityVerticalScrollBar: any;
    setAccessibilityVerticalScrollBar(_: any) // property
    accessibilityVerticalUnitDescription: string;
    setAccessibilityVerticalUnitDescription(_: string) // property
    accessibilityVerticalUnits: NSAccessibility.Units;
    setAccessibilityVerticalUnits(_: NSAccessibility.Units) // property
    accessibilityVisibleCells: any[];
    setAccessibilityVisibleCells(_: any[]) // property
    accessibilityVisibleCharacterRange: NSRange;
    setAccessibilityVisibleCharacterRange(_: NSRange) // property
    accessibilityVisibleChildren: any[];
    setAccessibilityVisibleChildren(_: any[]) // property
    accessibilityVisibleColumns: any[];
    setAccessibilityVisibleColumns(_: any[]) // property
    accessibilityVisibleRows: any[];
    setAccessibilityVisibleRows(_: any[]) // property
    accessibilityWarningValue: any;
    setAccessibilityWarningValue(_: any) // property
    accessibilityWindow: any;
    setAccessibilityWindow(_: any) // property
    accessibilityWindows: any[];
    setAccessibilityWindows(_: any[]) // property
    accessibilityZoomButton: any;
    setAccessibilityZoomButton(_: any) // property
    // instance method
    accessibilityAttributedStringForRange(_: NSRange): NSAttributedString;
    // instance method
    accessibilityCellForColumnRow(_: number, row: number): any;
    // instance method
    accessibilityFrameForRange(_: NSRange): CGRect;
    // instance method
    accessibilityLayoutPointForScreenPoint(_: CGPoint): CGPoint;
    // instance method
    accessibilityLayoutSizeForScreenSize(_: CGSize): CGSize;
    // instance method
    accessibilityLineForIndex(_: number): number;
    // instance method
    accessibilityPerformCancel(): boolean;
    // instance method
    accessibilityPerformConfirm(): boolean;
    // instance method
    accessibilityPerformDecrement(): boolean;
    // instance method
    accessibilityPerformDelete(): boolean;
    // instance method
    accessibilityPerformIncrement(): boolean;
    // instance method
    accessibilityPerformPick(): boolean;
    // instance method
    accessibilityPerformPress(): boolean;
    // instance method
    accessibilityPerformRaise(): boolean;
    // instance method
    accessibilityPerformShowAlternateUI(): boolean;
    // instance method
    accessibilityPerformShowDefaultUI(): boolean;
    // instance method
    accessibilityPerformShowMenu(): boolean;
    // instance method
    accessibilityRangeForIndex(_: number): NSRange;
    // instance method
    accessibilityRangeForLine(_: number): NSRange;
    // instance method
    accessibilityRangeForPosition(_: CGPoint): NSRange;
    // instance method
    accessibilityRTFForRange(_: NSRange): NSData;
    // instance method
    accessibilityScreenPointForLayoutPoint(_: CGPoint): CGPoint;
    // instance method
    accessibilityScreenSizeForLayoutSize(_: CGSize): CGSize;
    // instance method
    accessibilityStringForRange(_: NSRange): string;
    // instance method
    accessibilityStyleRangeForIndex(_: number): NSRange;
    // instance method
    isAccessibilitySelectorAllowed(_: string): boolean;
  }

  // export declare function NSAccessibilityActionDescription(action: string): string;

  interface NSAccessibilityButton extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityPerformPress(): boolean;
  }

  interface NSAccessibilityCheckBox extends NSAccessibilityButton {
    // instance method
    accessibilityValue(): number;
  }

  interface NSAccessibilityContainsTransientUI extends NSAccessibilityElement {
    // instance method
    accessibilityPerformShowAlternateUI(): boolean;
    // instance method
    accessibilityPerformShowDefaultUI(): boolean;
    // instance method
    isAccessibilityAlternateUIVisible(): boolean;
  }

  // interface
  class NSAccessibilityCustomAction extends NSObject {
    handler: () => boolean;
    setHandler(_: () => boolean) // property
    name: string;
    setName(_: string) // property
    selector: string;
    setSelector(_: string) // property
    target: NSObject;
    setTarget(_: NSObject) // property
    static createWithNameHandler(name: string, handler?: () => boolean): NSAccessibilityCustomAction;
    static createWithNameTargetSelector(name: string, target: NSObject, selector: string): NSAccessibilityCustomAction;
  }

  // interface
  class NSAccessibilityCustomRotor extends NSObject {
    itemLoadingDelegate: NSAccessibilityElementLoading;
    setItemLoadingDelegate(_: NSAccessibilityElementLoading) // property
    itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate;
    setItemSearchDelegate(_: NSAccessibilityCustomRotorItemSearchDelegate) // property
    label: string;
    setLabel(_: string) // property
    type: NSAccessibilityCustomRotor.RotorType;
    setType(_: NSAccessibilityCustomRotor.RotorType) // property
    static createWithLabelItemSearchDelegate(label: string, itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate): NSAccessibilityCustomRotor;
    static createWithRotorTypeItemSearchDelegate(rotorType: NSAccessibilityCustomRotor.RotorType, itemSearchDelegate: NSAccessibilityCustomRotorItemSearchDelegate): NSAccessibilityCustomRotor;
  }

  // interface
  class ItemResult extends NSObject {
    customLabel: string;
    setCustomLabel(_: string) // property
    itemLoadingToken: any; // property
    targetElement: NSAccessibilityElement; // property
    targetRange: NSRange;
    setTargetRange(_: NSRange) // property
    static createWithItemLoadingTokenCustomLabel(itemLoadingToken: any, customLabel: string): ItemResult;
    static createWithTargetElement(targetElement: NSAccessibilityElement): ItemResult;
  }

  interface NSAccessibilityCustomRotorItemSearchDelegate extends NSObject {
    // instance method
    rotorResultForSearchParameters(_: NSAccessibilityCustomRotor, resultFor: SearchParameters): ItemResult;
  }

  // interface
  class SearchParameters extends NSObject {
    currentItem: ItemResult;
    setCurrentItem(_: ItemResult) // property
    filterString: string;
    setFilterString(_: string) // property
    searchDirection: NSAccessibilityCustomRotor.SearchDirection;
    setSearchDirection(_: NSAccessibilityCustomRotor.SearchDirection) // property
  }

  // interface
  class NSAccessibilityElement extends NSObject /* implements NSAccessibility */ {
    static accessibilityElementWithRoleFrameLabelParent(withRole: string, frame: CGRect, label?: string, parent?: any): any;
    accessibilityFrameInParentSpace: CGRect;
    setAccessibilityFrameInParentSpace(_: CGRect) // property
    accessibilityAddChildElement(_: NSAccessibilityElement): void;
  }

  interface NSAccessibilityElementLoading extends NSObject {
    // instance method
    accessibilityElementWithToken(withToken: any): NSAccessibilityElement;
    // instance method
    accessibilityRangeInTargetElementWithToken?(withToken: any): NSRange;
  }

  interface NSAccessibilityElement extends NSObject {
    // instance method
    accessibilityFrame(): CGRect;
    // instance method
    accessibilityIdentifier?(): string;
    // instance method
    accessibilityParent(): any;
    // instance method
    isAccessibilityFocused?(): boolean;
  }

  // export declare function NSAccessibilityFrameInView(parentView: NSView, frame: CGRect): CGRect;

  interface NSAccessibilityGroup extends NSAccessibilityElement {
  }

  interface NSAccessibilityImage extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
  }

  interface NSAccessibilityLayoutArea extends NSAccessibilityGroup {
    accessibilityFocusedUIElement: any; // property
    // instance method
    accessibilityChildren(): any[];
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilitySelectedChildren(): any[];
  }

  interface NSAccessibilityLayoutItem extends NSAccessibilityGroup {
    // instance method
    setAccessibilityFrame?(_: CGRect): void;
  }

  interface NSAccessibilityList extends NSAccessibilityTable {
  }

  interface NSAccessibilityNavigableStaticText extends NSAccessibilityStaticText {
    // instance method
    accessibilityFrameForRange(for_: NSRange): CGRect;
    // instance method
    accessibilityLineForIndex(for_: number): number;
    // instance method
    accessibilityRangeForLine(forLine: number): NSRange;
    // instance method
    accessibilityStringForRange(for_: NSRange): string;
  }

  interface NSAccessibilityOutline extends NSAccessibilityTable {
  }

  // export declare function NSAccessibilityPointInView(parentView: NSView, point: CGPoint): CGPoint;

  // export declare function NSAccessibilityPostNotification(element: any, notification: string): void;

  // export declare function NSAccessibilityPostNotificationWithUserInfo(element: any, notification: string, userInfo: Map<string, any>): void;

  interface NSAccessibilityProgressIndicator extends NSAccessibilityGroup {
    // instance method
    accessibilityValue(): number;
  }

  interface NSAccessibilityRadioButton extends NSAccessibilityButton {
    // instance method
    accessibilityValue(): number;
  }

  // export declare function NSAccessibilityRoleDescription(role: string, subrole: string): string;

  // export declare function NSAccessibilityRoleDescriptionForUIElement(element: any): string;

  interface NSAccessibilityRow extends NSAccessibilityGroup {
    // instance method
    accessibilityDisclosureLevel?(): number;
    // instance method
    accessibilityIndex(): number;
  }

  // export declare function NSAccessibilitySetMayContainProtectedContent(flag: boolean): boolean;

  interface NSAccessibilitySlider extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityPerformDecrement(): boolean;
    // instance method
    accessibilityPerformIncrement(): boolean;
    // instance method
    accessibilityValue(): any;
  }

  interface NSAccessibilityStaticText extends NSAccessibilityElement {
    // instance method
    accessibilityAttributedStringForRange?(for_: NSRange): NSAttributedString;
    // instance method
    accessibilityValue(): string;
    // instance method
    accessibilityVisibleCharacterRange?(): NSRange;
  }

  interface NSAccessibilityStepper extends NSAccessibilityElement {
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityPerformDecrement(): boolean;
    // instance method
    accessibilityPerformIncrement(): boolean;
    // instance method
    accessibilityValue?(): any;
  }

  interface NSAccessibilitySwitch extends NSAccessibilityButton {
    // instance method
    accessibilityPerformDecrement?(): boolean;
    // instance method
    accessibilityPerformIncrement?(): boolean;
    // instance method
    accessibilityValue(): string;
  }

  interface NSAccessibilityTable extends NSAccessibilityGroup {
    // instance method
    accessibilityColumnHeaderUIElements?(): any[];
    // instance method
    accessibilityColumns?(): any[];
    // instance method
    accessibilityLabel(): string;
    // instance method
    accessibilityRowHeaderUIElements?(): any[];
    // instance method
    accessibilityRows(): NSAccessibilityRow[];
    // instance method
    accessibilitySelectedCells?(): any[];
    // instance method
    accessibilitySelectedColumns?(): any[];
    // instance method
    accessibilitySelectedRows?(): NSAccessibilityRow[];
    // instance method
    accessibilityVisibleCells?(): any[];
    // instance method
    accessibilityVisibleColumns?(): any[];
    // instance method
    accessibilityVisibleRows?(): NSAccessibilityRow[];
    // instance method
    setAccessibilitySelectedRows?(_: NSAccessibilityRow[]): void;
  }

  // export declare function NSAccessibilityUnignoredAncestor(element: any): any;

  // export declare function NSAccessibilityUnignoredChildren(originalChildren: any[]): any[];

  // export declare function NSAccessibilityUnignoredChildrenForOnlyChild(originalChild: any): any[];

  // export declare function NSAccessibilityUnignoredDescendant(element: any): any;

  // interface
  class NSActionCell extends NSCell {
  }

  // interface
  class NSAlert extends NSObject {
    accessoryView: NSView;
    setAccessoryView(_: NSView) // property
    alertStyle: NSAlert.Style;
    setAlertStyle(_: NSAlert.Style) // property
    buttons: NSButton[]; // property
    delegate: NSAlertDelegate;
    setDelegate(_: NSAlertDelegate) // property
    helpAnchor: string;
    setHelpAnchor(_: string) // property
    icon: NSImage;
    setIcon(_: NSImage) // property
    informativeText: string;
    setInformativeText(_: string) // property
    messageText: string;
    setMessageText(_: string) // property
    showsHelp: boolean;
    setShowsHelp(_: boolean) // property
    showsSuppressionButton: boolean;
    setShowsSuppressionButton(_: boolean) // property
    suppressionButton: NSButton; // property
    window: NSWindow; // property
    addButtonWithTitle(withTitle: string): NSButton;
    beginSheetModalForCompletionHandler(for_: NSWindow, completionHandler?: (p1: number) => void): void;
    layout(): void;
    runModal(): number;
  }

  interface NSAlertDelegate extends NSObject {
    // instance method
    alertShowHelp?(_: NSAlert): boolean;
  }

  // interface
  class NSAlignmentFeedbackFilter extends NSObject {
    static inputEventMask: NSEvent.EventTypeMask; // property
    alignmentFeedbackTokenForHorizontalMovementInViewPreviousXAlignedXDefaultX(in_?: NSView, previousX?: number, alignedX?: number, defaultX?: number): NSAlignmentFeedbackToken;
    alignmentFeedbackTokenForMovementInViewPreviousPointAlignedPointDefaultPoint(in_?: NSView, previousPoint?: CGPoint, alignedPoint?: CGPoint, defaultPoint?: CGPoint): NSAlignmentFeedbackToken;
    alignmentFeedbackTokenForVerticalMovementInViewPreviousYAlignedYDefaultY(in_?: NSView, previousY?: number, alignedY?: number, defaultY?: number): NSAlignmentFeedbackToken;
    performFeedbackWithPerformanceTime(_: NSAlignmentFeedbackToken[], performanceTime: NSHapticFeedbackManager.PerformanceTime): void;
    updateWithEvent(with_: NSEvent): void;
    updateWithPanRecognizer(withPanRecognizer: NSPanGestureRecognizer): void;
  }

  interface NSAlignmentFeedbackToken extends NSObject {
  }

  interface NSAnimatablePropertyContainer {
    animations: Map<string, any>;
    setAnimations(_: Map<string, any>) // property
    // instance method
    animationForKey(forKey: string): any;
    // instance method
    animator(): NSAnimatablePropertyContainer;
  }

  // interface
  class NSAnimation extends NSObject /* implements NSCoding, NSCopying */ {
    isAnimating: boolean; // property
    animationBlockingMode: NSAnimation.BlockingMode;
    setAnimationBlockingMode(_: NSAnimation.BlockingMode) // property
    animationCurve: NSAnimation.Curve;
    setAnimationCurve(_: NSAnimation.Curve) // property
    currentProgress: number;
    setCurrentProgress(_: number) // property
    currentValue: number; // property
    delegate: NSAnimationDelegate;
    setDelegate(_: NSAnimationDelegate) // property
    duration: number;
    setDuration(_: number) // property
    frameRate: number;
    setFrameRate(_: number) // property
    progressMarks: number[];
    setProgressMarks(_: number[]) // property
    runLoopModesForAnimating: string[]; // property
    addProgressMark(_: number): void;
    clearStartAnimation(): void;
    clearStopAnimation(): void;
    static createWithDurationAnimationCurve(duration: number, animationCurve: NSAnimation.Curve): NSAnimation;
    removeProgressMark(_: number): void;
    startAnimation(): void;
    startWhenAnimationReachesProgress(when: NSAnimation, reachesProgress: number): void;
    stopAnimation(): void;
    stopWhenAnimationReachesProgress(when: NSAnimation, reachesProgress: number): void;
  }

  // interface
  class NSAnimationContext extends NSObject {
    static beginGrouping(): void;
    static endGrouping(): void;
    static runAnimationGroup(_: (p1: NSAnimationContext) => void): void;
    static runAnimationGroupWithCompletionHandler(_: (p1: NSAnimationContext) => void, completionHandler?: () => void): void;
    allowsImplicitAnimation: boolean;
    setAllowsImplicitAnimation(_: boolean) // property
    completionHandler: () => void;
    setCompletionHandler(_: () => void) // property
    duration: number;
    setDuration(_: number) // property
    timingFunction: CAMediaTimingFunction;
    setTimingFunction(_: CAMediaTimingFunction) // property
    static currentContext: NSAnimationContext; // property
  }

  interface NSAnimationDelegate extends NSObject {
    // instance method
    animationDidReachProgressMark?(_: NSAnimation, didReachProgressMark: number): void;
    // instance method
    animationValueForProgress?(_: NSAnimation, valueForProgress: number): number;
    // instance method
    animationDidEnd?(_: NSAnimation): void;
    // instance method
    animationDidStop?(_: NSAnimation): void;
    // instance method
    animationShouldStart?(_: NSAnimation): boolean;
  }

  // interface
  class NSAppearance extends NSObject /* implements NSSecureCoding */ {
    allowsVibrancy: boolean; // property
    name: string; // property
    static currentAppearance: NSAppearance;
    setCurrentAppearance(_: NSAppearance) // property
    bestMatchFromAppearancesWithNames(from: string[]): string;
    static createWithAppearanceNamedBundle(appearanceNamed: string, bundle?: Bundle): NSAppearance;
  }

  interface NSAppearanceCustomization extends NSObject {
    appearance: NSAppearance;
    setAppearance(_: NSAppearance) // property
    effectiveAppearance: NSAppearance; // property
  }

  // interface
  class NSApplication extends NSResponder /* implements NSAccessibility, NSAccessibilityElement, NSMenuItemValidation, NSUserInterfaceValidations, NSAppearanceCustomization */ {
    static detachDrawingThreadToTargetWithObject(_: string, toTarget: any, with_?: any): void;
    isActive: boolean; // property
    applicationIconImage: NSImage;
    setApplicationIconImage(_: NSImage) // property
    isAutomaticCustomizeTouchBarMenuItemEnabled: boolean;
    setAutomaticCustomizeTouchBarMenuItemEnabled(_: boolean) // property
    currentEvent: NSEvent; // property
    currentSystemPresentationOptions: NSApplication.PresentationOptions; // property
    delegate: NSApplicationDelegate;
    setDelegate(_: NSApplicationDelegate) // property
    dockTile: NSDockTile; // property
    enabledRemoteNotificationTypes: NSApplication.RemoteNotificationType; // property
    isFullKeyboardAccessEnabled: boolean; // property
    helpMenu: NSMenu;
    setHelpMenu(_: NSMenu) // property
    isHidden: boolean; // property
    keyWindow: NSWindow; // property
    mainMenu: NSMenu;
    setMainMenu(_: NSMenu) // property
    mainWindow: NSWindow; // property
    modalWindow: NSWindow; // property
    occlusionState: NSApplication.OcclusionState; // property
    orderedDocuments: NSDocument[]; // property
    orderedWindows: NSWindow[]; // property
    presentationOptions: NSApplication.PresentationOptions;
    setPresentationOptions(_: NSApplication.PresentationOptions) // property
    isRegisteredForRemoteNotifications: boolean; // property
    isRunning: boolean; // property
    servicesMenu: NSMenu;
    setServicesMenu(_: NSMenu) // property
    servicesProvider: any;
    setServicesProvider(_: any) // property
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection; // property
    windows: NSWindow[]; // property
    windowsMenu: NSMenu;
    setWindowsMenu(_: NSMenu) // property
    static sharedApplication: NSApplication; // property
    abortModal(): void;
    activateContextHelpMode(_?: any): void;
    activateIgnoringOtherApps(ignoringOtherApps: boolean): void;
    activationPolicy(): NSApplication.ActivationPolicy;
    addWindowsItemTitleFilename(_: NSWindow, title: string, filename: boolean): void;
    arrangeInFront(_?: any): void;
    beginModalSessionForWindow(for_: NSWindow): any;
    cancelUserAttentionRequest(_: number): void;
    changeWindowsItemTitleFilename(_: NSWindow, title: string, filename: boolean): void;
    completeStateRestoration(): void;
    deactivate(): void;
    disableRelaunchOnLogin(): void;
    discardEventsMatchingMaskBeforeEvent(matching: NSEvent.EventTypeMask, before?: NSEvent): void;
    enableRelaunchOnLogin(): void;
    endModalSession(_: any): void;
    enumerateWindowsWithOptionsUsing(options: NSApplication.WindowListOptions, using: (p1: NSWindow, p2: boolean) => void): void;
    extendStateRestoration(): void;
    finishLaunching(): void;
    hide(_?: any): void;
    hideOtherApplications(_?: any): void;
    miniaturizeAll(_?: any): void;
    nextEventMatchingMaskUntilDateInModeDequeue(matching: NSEvent.EventTypeMask, until?: Date, inMode?: string, dequeue?: boolean): NSEvent;
    orderFrontCharacterPalette(_?: any): void;
    orderFrontColorPanel(_?: any): void;
    orderFrontStandardAboutPanel(_?: any): void;
    orderFrontStandardAboutPanelWithOptions(options: Map<string, any>): void;
    postEventAtStart(_: NSEvent, atStart: boolean): void;
    preventWindowOrdering(): void;
    registerForRemoteNotificationTypes(matching: NSApplication.RemoteNotificationType): void;
    registerForRemoteNotifications(): void;
    registerServicesMenuSendTypesReturnTypes(_: string[], returnTypes: string[]): void;
    registerUserInterfaceItemSearchHandler(_: NSUserInterfaceItemSearching): void;
    removeWindowsItem(_: NSWindow): void;
    replyToApplicationShouldTerminate(toApplicationShouldTerminate: boolean): void;
    replyToOpenOrPrint(toOpenOrPrint: NSApplication.DelegateReply): void;
    reportException(_: NSException): void;
    requestUserAttention(_: NSApplication.RequestUserAttentionType): number;
    restoreWindowWithWithIdentifierStateCompletionHandler(withIdentifier: string, state: NSCoder, completionHandler?: (p1: NSWindow, p2: NSError) => void): boolean;
    run(): void;
    runModalForWindow(for_: NSWindow): number;
    runModalSession(_: any): number;
    runPageLayout(_?: any): void;
    searchStringInUserInterfaceItemStringSearchRangeFoundRange(_: string, inUserInterfaceItemString: string, range: NSRange, found?: NSRange): boolean;
    sendActionToFrom(_: string, to?: any, from?: any): boolean;
    sendEvent(_: NSEvent): void;
    setActivationPolicy(_: NSApplication.ActivationPolicy): boolean;
    setWindowsNeedUpdate(_: boolean): void;
    showHelp(_?: any): void;
    stop(_?: any): void;
    stopModal(): void;
    stopModalWithCode(withCode: number): void;
    targetForAction(forAction: string): any;
    targetForActionToFrom(forAction: string, to?: any, from?: any): any;
    terminate(_?: any): void;
    toggleTouchBarCustomizationPalette(_?: any): void;
    unhide(_?: any): void;
    unhideAllApplications(_?: any): void;
    unhideWithoutActivation(): void;
    unregisterForRemoteNotifications(): void;
    unregisterUserInterfaceItemSearchHandler(_: NSUserInterfaceItemSearching): void;
    updateWindows(): void;
    updateWindowsItem(_: NSWindow): void;
    windowWithWindowNumber(withWindowNumber: number): NSWindow;
  }

  interface NSApplicationDelegate extends NSObject {
    // instance method
    applicationContinueRestorationHandler?(_: NSApplication, continue_: NSUserActivity, restorationHandler: (p1: NSUserActivityRestoring[]) => void): boolean;
    // instance method
    applicationOpenURLs?(_: NSApplication, open: NSURL[]): void;
    // instance method
    applicationUserDidAcceptCloudKitShareWithMetadata?(_: NSApplication, userDidAcceptCloudKitShareWith: Metadata): void;
    // instance method
    applicationDidUpdateUserActivity?(_: NSApplication, didUpdate: NSUserActivity): void;
    // instance method
    applicationDelegateHandlesKey?(_: NSApplication, delegateHandlesKey: string): boolean;
    // instance method
    applicationDidDecodeRestorableState?(_: NSApplication, didDecodeRestorableState: NSCoder): void;
    // instance method
    applicationDidFailToContinueUserActivityWithTypeError?(_: NSApplication, didFailToContinueUserActivityWithType: string, error: NSError): void;
    // instance method
    applicationDidFailToRegisterForRemoteNotificationsWithError?(_: NSApplication, didFailToRegisterForRemoteNotificationsWithError: NSError): void;
    // instance method
    applicationDidReceiveRemoteNotification?(_: NSApplication, didReceiveRemoteNotification: Map<string, any>): void;
    // instance method
    applicationDidRegisterForRemoteNotificationsWithDeviceToken?(_: NSApplication, didRegisterForRemoteNotificationsWithDeviceToken: NSData): void;
    // instance method
    applicationOpenFile?(_: NSApplication, openFile: string): boolean;
    // instance method
    applicationOpenFiles?(_: NSApplication, openFiles: string[]): void;
    // instance method
    applicationOpenFileWithoutUI?(_: any, openFileWithoutUI: string): boolean;
    // instance method
    applicationOpenTempFile?(_: NSApplication, openTempFile: string): boolean;
    // instance method
    applicationPrintFile?(_: NSApplication, printFile: string): boolean;
    // instance method
    applicationPrintFilesWithSettingsShowPrintPanels?(_: NSApplication, printFiles: string[], withSettings: Map<string, any>, showPrintPanels: boolean): NSApplication.PrintReply;
    // instance method
    applicationWillContinueUserActivityWithType?(_: NSApplication, willContinueUserActivityWithType: string): boolean;
    // instance method
    applicationWillEncodeRestorableState?(_: NSApplication, willEncodeRestorableState: NSCoder): void;
    // instance method
    applicationWillPresentError?(_: NSApplication, willPresentError: NSError): NSError;
    // instance method
    applicationDidBecomeActive?(_: NSNotification): void;
    // instance method
    applicationDidChangeOcclusionState?(_: NSNotification): void;
    // instance method
    applicationDidChangeScreenParameters?(_: NSNotification): void;
    // instance method
    applicationDidFinishLaunching?(_: NSNotification): void;
    // instance method
    applicationDidHide?(_: NSNotification): void;
    // instance method
    applicationDidResignActive?(_: NSNotification): void;
    // instance method
    applicationDidUnhide?(_: NSNotification): void;
    // instance method
    applicationDidUpdate?(_: NSNotification): void;
    // instance method
    applicationDockMenu?(_: NSApplication): NSMenu;
    // instance method
    applicationOpenUntitledFile?(_: NSApplication): boolean;
    // instance method
    applicationShouldHandleReopenHasVisibleWindows?(_: NSApplication, hasVisibleWindows: boolean): boolean;
    // instance method
    applicationShouldOpenUntitledFile?(_: NSApplication): boolean;
    // instance method
    applicationShouldTerminate?(_: NSApplication): NSApplication.TerminateReply;
    // instance method
    applicationShouldTerminateAfterLastWindowClosed?(_: NSApplication): boolean;
    // instance method
    applicationWillBecomeActive?(_: NSNotification): void;
    // instance method
    applicationWillFinishLaunching?(_: NSNotification): void;
    // instance method
    applicationWillHide?(_: NSNotification): void;
    // instance method
    applicationWillResignActive?(_: NSNotification): void;
    // instance method
    applicationWillTerminate?(_: NSNotification): void;
    // instance method
    applicationWillUnhide?(_: NSNotification): void;
    // instance method
    applicationWillUpdate?(_: NSNotification): void;
  }

  // export declare function NSApplicationLoad(): boolean;

  // export declare function NSApplicationMain(argc: number, argv: string): never;

  // interface
  class NSArrayController extends NSObjectController {
    alwaysUsesMultipleValuesMarker: boolean;
    setAlwaysUsesMultipleValuesMarker(_: boolean) // property
    arrangedObjects: any; // property
    automaticRearrangementKeyPaths: string[]; // property
    automaticallyRearrangesObjects: boolean;
    setAutomaticallyRearrangesObjects(_: boolean) // property
    avoidsEmptySelection: boolean;
    setAvoidsEmptySelection(_: boolean) // property
    canInsert: boolean; // property
    canSelectNext: boolean; // property
    canSelectPrevious: boolean; // property
    clearsFilterPredicateOnInsertion: boolean;
    setClearsFilterPredicateOnInsertion(_: boolean) // property
    filterPredicate: NSPredicate;
    setFilterPredicate(_: NSPredicate) // property
    preservesSelection: boolean;
    setPreservesSelection(_: boolean) // property
    selectionIndex: number; // property
    selectionIndexes: NSIndexSet; // property
    selectsInsertedObjects: boolean;
    setSelectsInsertedObjects(_: boolean) // property
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[]) // property
    addObjects(contentsOf: any[]): void;
    addSelectedObjects(_: any[]): boolean;
    addSelectionIndexes(_: NSIndexSet): boolean;
    arrangeObjects(_: any[]): any[];
    didChangeArrangementCriteria(): void;
    insert(_?: any): void;
    insertObjectAtArrangedObjectIndex(_: any, atArrangedObjectIndex: number): void;
    insertObjectsAtArrangedObjectIndexes(contentsOf: any[], atArrangedObjectIndexes: NSIndexSet): void;
    rearrangeObjects(): void;
    removeObjectAtArrangedObjectIndex(atArrangedObjectIndex: number): void;
    removeObjects(contentsOf: any[]): void;
    removeObjectsAtArrangedObjectIndexes(atArrangedObjectIndexes: NSIndexSet): void;
    removeSelectedObjects(_: any[]): boolean;
    removeSelectionIndexes(_: NSIndexSet): boolean;
    selectNext(_?: any): void;
    selectPrevious(_?: any): void;
    setSelectedObjects(_: any[]): boolean;
    setSelectionIndex(_: number): boolean;
    setSelectionIndexes(_: NSIndexSet): boolean;
  }

  // export declare function NSAvailableWindowDepths(): NSWindow.Depth;

  // export declare function NSBeep(): void;

  // export declare function NSBestDepth(colorSpace: string, bps: number, bpp: number, planar: boolean, exactMatch: boolean): NSWindow.Depth;

  // interface
  class NSBezierPath extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static clipRect(_: CGRect): void;
    static drawPackedGlyphsAtPoint(_: string, at: CGPoint): void;
    static fillRect(_: CGRect): void;
    static strokeLineFromPointToPoint(from: CGPoint, to: CGPoint): void;
    static strokeRect(_: CGRect): void;
    bezierPathByFlatteningPath: NSBezierPath; // property
    bezierPathByReversingPath: NSBezierPath; // property
    bounds: CGRect; // property
    controlPointBounds: CGRect; // property
    currentPoint: CGPoint; // property
    elementCount: number; // property
    isEmpty: boolean; // property
    flatness: number;
    setFlatness(_: number) // property
    lineCapStyle: NSBezierPath.LineCapStyle;
    setLineCapStyle(_: NSBezierPath.LineCapStyle) // property
    lineJoinStyle: NSBezierPath.LineJoinStyle;
    setLineJoinStyle(_: NSBezierPath.LineJoinStyle) // property
    lineWidth: number;
    setLineWidth(_: number) // property
    miterLimit: number;
    setMiterLimit(_: number) // property
    windingRule: NSBezierPath.WindingRule;
    setWindingRule(_: NSBezierPath.WindingRule) // property
    static defaultFlatness: number;
    setDefaultFlatness(_: number) // property
    static defaultLineCapStyle: NSBezierPath.LineCapStyle;
    setDefaultLineCapStyle(_: NSBezierPath.LineCapStyle) // property
    static defaultLineJoinStyle: NSBezierPath.LineJoinStyle;
    setDefaultLineJoinStyle(_: NSBezierPath.LineJoinStyle) // property
    static defaultLineWidth: number;
    setDefaultLineWidth(_: number) // property
    static defaultMiterLimit: number;
    setDefaultMiterLimit(_: number) // property
    static defaultWindingRule: NSBezierPath.WindingRule;
    setDefaultWindingRule(_: NSBezierPath.WindingRule) // property
    addClip(): void;
    appendBezierPath(_: NSBezierPath): void;
    appendBezierPathWithArcFromPointToPointRadius(from: CGPoint, to: CGPoint, radius: number): void;
    appendBezierPathWithArcWithCenterRadiusStartAngleEndAngle(withCenter: CGPoint, radius: number, startAngle: number, endAngle: number): void;
    appendBezierPathWithArcWithCenterRadiusStartAngleEndAngleClockwise(withCenter: CGPoint, radius: number, startAngle: number, endAngle: number, clockwise: boolean): void;
    appendBezierPathWithCGGlyphInFont(withCGGlyph: number, in_: NSFont): void;
    appendBezierPathWithCGGlyphsCountInFont(withCGGlyphs: number, count: number, in_: NSFont): void;
    appendBezierPathWithOvalInRect(in_: CGRect): void;
    appendBezierPathWithPointsCount(_: NSPoint, count: number): void;
    appendBezierPathWithRect(_: CGRect): void;
    appendBezierPathWithRoundedRectXRadiusYRadius(_: CGRect, xRadius: number, yRadius: number): void;
    closePath(): void;
    containsPoint(_: CGPoint): boolean;
    curveToPointControlPoint1ControlPoint2(to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): void;
    elementAtIndex(at: number): NSBezierPath.ElementType;
    elementAtIndexAssociatedPoints(at: number, associatedPoints?: NSPoint): NSBezierPath.ElementType;
    fill(): void;
    getLineDashCountPhase(_?: number, count?: number, phase?: number): void;
    lineToPoint(to: CGPoint): void;
    moveToPoint(to: CGPoint): void;
    relativeCurveToPointControlPoint1ControlPoint2(to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): void;
    relativeLineToPoint(to: CGPoint): void;
    relativeMoveToPoint(to: CGPoint): void;
    removeAllPoints(): void;
    setAssociatedPointsAtIndex(_?: NSPoint, at?: number): void;
    setClip(): void;
    setLineDashCountPhase(_?: number, count?: number, phase?: number): void;
    stroke(): void;
    transformUsingAffineTransform(using: NSAffineTransform): void;
  }

  // interface
  class NSBindingSelectionMarker extends NSObject /* implements NSCopying */ {
    static defaultPlaceholderForMarkerOnClassWithBinding(for_?: NSBindingSelectionMarker, on?: typeof NSObject, withBinding?: string): any;
    static setDefaultPlaceholderForMarkerOnClassWithBinding(_?: any, for_?: NSBindingSelectionMarker, on?: typeof NSObject, withBinding?: string): void;
    static multipleValuesSelectionMarker: NSBindingSelectionMarker; // property
    static noSelectionMarker: NSBindingSelectionMarker; // property
    static notApplicableSelectionMarker: NSBindingSelectionMarker; // property
  }

  // interface
  class NSBitmapImageRep extends NSImageRep /* implements NSSecureCoding */ {
    static TIFFRepresentationOfImageRepsInArray(in_: NSImageRep[]): NSData;
    static TIFFRepresentationOfImageRepsInArrayUsingCompressionFactor(in_: NSImageRep[], using: NSBitmapImageRep.TIFFCompression, factor: number): NSData;
    static getTIFFCompressionTypesCount(_?: NSBitmapImageRep.TIFFCompression, count?: number): void;
    static imageRepsWithData(with_: NSData): NSImageRep[];
    static localizedNameForTIFFCompressionType(forTIFFCompressionType: NSBitmapImageRep.TIFFCompression): string;
    static representationOfImageRepsInArrayUsingTypeProperties(in_: NSImageRep[], using: NSBitmapImageRep.FileType, properties: Map<string, any>): NSData;
    CGImage: any; // property
    TIFFRepresentation: NSData; // property
    bitmapData: string; // property
    bitmapFormat: NSBitmapImageRep.Format; // property
    bitsPerPixel: number; // property
    bytesPerPlane: number; // property
    bytesPerRow: number; // property
    colorSpace: NSColorSpace; // property
    numberOfPlanes: number; // property
    isPlanar: boolean; // property
    samplesPerPixel: number; // property
    TIFFRepresentationUsingCompressionFactor(using: NSBitmapImageRep.TIFFCompression, factor: number): NSData;
    bitmapImageRepByConvertingToColorSpaceRenderingIntent(to: NSColorSpace, renderingIntent: NSColorRenderingIntent): NSBitmapImageRep;
    bitmapImageRepByRetaggingWithColorSpace(with_: NSColorSpace): NSBitmapImageRep;
    canBeCompressedUsing(using: NSBitmapImageRep.TIFFCompression): boolean;
    colorAtXY(x: number, y: number): NSColor;
    colorizeByMappingGrayToColorBlackMappingWhiteMapping(byMappingGray: number, to?: NSColor, blackMapping?: NSColor, whiteMapping?: NSColor): void;
    getBitmapDataPlanes(_?: string): void;
    getCompressionFactor(_?: NSBitmapImageRep.TIFFCompression, factor?: number): void;
    getPixelAtXY(_: number, atX: number, y: number): void;
    incrementalLoadFromDataComplete(from: NSData, complete: boolean): number;
    static createWithForIncrementalLoad(): NSBitmapImageRep;
    static createWithBitmapDataPlanesPixelsWidePixelsHighBitsPerSampleSamplesPerPixelHasAlphaIsPlanarColorSpaceNameBitmapFormatBytesPerRowBitsPerPixel(bitmapDataPlanes?: string, pixelsWide?: number, pixelsHigh?: number, bitsPerSample?: number, samplesPerPixel?: number, hasAlpha?: boolean, isPlanar?: boolean, colorSpaceName?: string, bitmapFormat?: NSBitmapImageRep.Format, bytesPerRow?: number, bitsPerPixel?: number): NSBitmapImageRep;
    static createWithBitmapDataPlanesPixelsWidePixelsHighBitsPerSampleSamplesPerPixelHasAlphaIsPlanarColorSpaceNameBytesPerRowBitsPerPixel(bitmapDataPlanes?: string, pixelsWide?: number, pixelsHigh?: number, bitsPerSample?: number, samplesPerPixel?: number, hasAlpha?: boolean, isPlanar?: boolean, colorSpaceName?: string, bytesPerRow?: number, bitsPerPixel?: number): NSBitmapImageRep;
    static createWithCGImage(CGImage: any): NSBitmapImageRep;
    static createWithCIImage(CIImage: CIImage): NSBitmapImageRep;
    static createWithData(data: NSData): NSBitmapImageRep;
    representationUsingTypeProperties(using: NSBitmapImageRep.FileType, properties: Map<string, any>): NSData;
    setColorAtXY(_: NSColor, atX: number, y: number): void;
    setCompressionFactor(_: NSBitmapImageRep.TIFFCompression, factor: number): void;
    setPixelAtXY(_: number, atX: number, y: number): void;
    setPropertyWithValue(_: string, withValue?: any): void;
    valueForProperty(forProperty: string): any;
  }

  // export declare function NSBitsPerPixelFromDepth(depth: NSWindow.Depth): number;

  // export declare function NSBitsPerSampleFromDepth(depth: NSWindow.Depth): number;

  // interface
  class NSBox extends NSView {
    borderColor: NSColor;
    setBorderColor(_: NSColor) // property
    borderRect: CGRect; // property
    borderWidth: number;
    setBorderWidth(_: number) // property
    boxType: NSBox.BoxType;
    setBoxType(_: NSBox.BoxType) // property
    contentView: NSView;
    setContentView(_: NSView) // property
    contentViewMargins: CGSize;
    setContentViewMargins(_: CGSize) // property
    cornerRadius: number;
    setCornerRadius(_: number) // property
    fillColor: NSColor;
    setFillColor(_: NSColor) // property
    title: string;
    setTitle(_: string) // property
    titleCell: any; // property
    titleFont: NSFont;
    setTitleFont(_: NSFont) // property
    titlePosition: NSBox.TitlePosition;
    setTitlePosition(_: NSBox.TitlePosition) // property
    titleRect: CGRect; // property
    isTransparent: boolean;
    setTransparent(_: boolean) // property
    setFrameFromContentFrame(_: CGRect): void;
    sizeToFit(): void;
  }

  // interface
  class NSBrowser extends NSControl {
    static removeSavedColumnsWithAutosaveName(withAutosaveName: string): void;
    allowsBranchSelection: boolean;
    setAllowsBranchSelection(_: boolean) // property
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean) // property
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean) // property
    allowsTypeSelect: boolean;
    setAllowsTypeSelect(_: boolean) // property
    autohidesScroller: boolean;
    setAutohidesScroller(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    cellPrototype: any;
    setCellPrototype(_: any) // property
    clickedColumn: number; // property
    clickedRow: number; // property
    columnResizingType: NSBrowser.ColumnResizingType;
    setColumnResizingType(_: NSBrowser.ColumnResizingType) // property
    columnsAutosaveName: string;
    setColumnsAutosaveName(_: string) // property
    delegate: NSBrowserDelegate;
    setDelegate(_: NSBrowserDelegate) // property
    doubleAction: string;
    setDoubleAction(_: string) // property
    firstVisibleColumn: number; // property
    hasHorizontalScroller: boolean;
    setHasHorizontalScroller(_: boolean) // property
    lastColumn: number;
    setLastColumn(_: number) // property
    lastVisibleColumn: number; // property
    isLoaded: boolean; // property
    maxVisibleColumns: number;
    setMaxVisibleColumns(_: number) // property
    minColumnWidth: number;
    setMinColumnWidth(_: number) // property
    numberOfVisibleColumns: number; // property
    pathSeparator: string;
    setPathSeparator(_: string) // property
    prefersAllColumnUserResizing: boolean;
    setPrefersAllColumnUserResizing(_: boolean) // property
    reusesColumns: boolean;
    setReusesColumns(_: boolean) // property
    rowHeight: number;
    setRowHeight(_: number) // property
    selectedCells: NSCell[]; // property
    selectedColumn: number; // property
    selectionIndexPath: NSIndexPath;
    setSelectionIndexPath(_: NSIndexPath) // property
    selectionIndexPaths: NSIndexPath[];
    setSelectionIndexPaths(_: NSIndexPath[]) // property
    sendsActionOnArrowKeys: boolean;
    setSendsActionOnArrowKeys(_: boolean) // property
    separatesColumns: boolean;
    setSeparatesColumns(_: boolean) // property
    takesTitleFromPreviousColumn: boolean;
    setTakesTitleFromPreviousColumn(_: boolean) // property
    titleHeight: number; // property
    isTitled: boolean;
    setTitled(_: boolean) // property
    static cellClass: typeof NSObject; // property
    addColumn(): void;
    canDragRowsWithIndexesInColumnWithEvent(with_: NSIndexSet, inColumn: number, with_2: NSEvent): boolean;
    columnContentWidthForColumnWidth(forColumnWidth: number): number;
    columnWidthForColumnContentWidth(forColumnContentWidth: number): number;
    defaultColumnWidth(): number;
    doClick(_?: any): void;
    doDoubleClick(_?: any): void;
    draggingImageForRowsWithIndexesInColumnWithEventOffset(with_: NSIndexSet, inColumn: number, with_2: NSEvent, offset?: NSPoint): NSImage;
    drawTitleOfColumnInRect(ofColumn: number, in_: CGRect): void;
    editItemAtIndexPathWithEventSelect(at: NSIndexPath, with_?: NSEvent, select?: boolean): void;
    frameOfColumn(ofColumn: number): CGRect;
    frameOfInsideOfColumn(ofInsideOfColumn: number): CGRect;
    frameOfRowInColumn(ofRow: number, inColumn: number): CGRect;
    getRowColumnForPoint(_?: number, column?: number, for_?: CGPoint): boolean;
    indexPathForColumn(forColumn: number): NSIndexPath;
    isLeafItem(_?: any): boolean;
    itemAtIndexPath(at: NSIndexPath): any;
    itemAtRowInColumn(atRow: number, inColumn: number): any;
    loadColumnZero(): void;
    loadedCellAtRowColumn(atRow: number, column: number): any;
    noteHeightOfRowsWithIndexesChangedInColumn(_: NSIndexSet, inColumn: number): void;
    parentForItemsInColumn(inColumn: number): any;
    path(): string;
    pathToColumn(toColumn: number): string;
    reloadColumn(_: number): void;
    reloadDataForRowIndexesInColumn(forRowIndexes: NSIndexSet, inColumn: number): void;
    scrollColumnToVisible(_: number): void;
    scrollColumnsLeftBy(by: number): void;
    scrollColumnsRightBy(by: number): void;
    scrollRowToVisibleInColumn(_: number, inColumn: number): void;
    selectRowInColumn(_: number, inColumn: number): void;
    selectRowIndexesInColumn(_: NSIndexSet, inColumn: number): void;
    selectedCellInColumn(inColumn: number): any;
    selectedRowInColumn(inColumn: number): number;
    selectedRowIndexesInColumn(inColumn: number): NSIndexSet;
    sendAction(): boolean;
    setCellClass(_: typeof NSObject): void;
    setDefaultColumnWidth(_: number): void;
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
    setPath(_: string): boolean;
    setTitleOfColumn(_: string, ofColumn: number): void;
    setWidthOfColumn(_: number, ofColumn: number): void;
    tile(): void;
    titleFrameOfColumn(ofColumn: number): CGRect;
    titleOfColumn(ofColumn: number): string;
    validateVisibleColumns(): void;
    widthOfColumn(ofColumn: number): number;
  }

  // interface
  class NSBrowserCell extends NSCell {
    alternateImage: NSImage;
    setAlternateImage(_: NSImage) // property
    isLeaf: boolean;
    setLeaf(_: boolean) // property
    isLoaded: boolean;
    setLoaded(_: boolean) // property
    static branchImage: NSImage; // property
    static highlightedBranchImage: NSImage; // property
    highlightColorInView(in_: NSView): NSColor;
    reset(): void;
    set(): void;
  }

  interface NSBrowserDelegate extends NSObject {
    // instance method
    browserCreateRowsForColumnInMatrix?(_: NSBrowser, createRowsForColumn: number, in_: NSMatrix): void;
    // instance method
    browserNextTypeSelectMatchFromRowToRowInColumnForString?(_: NSBrowser, nextTypeSelectMatchFromRow: number, toRow: number, inColumn: number, for_?: string): number;
    // instance method
    browserShouldTypeSelectForEventWithCurrentSearchString?(_: NSBrowser, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
    // instance method
    browserSelectCellWithStringInColumn?(_: NSBrowser, selectCellWith: string, inColumn: number): boolean;
    // instance method
    browserDraggingImageForRowsWithIndexesInColumnWithEventOffset?(_: NSBrowser, draggingImageForRowsWith: NSIndexSet, inColumn: number, with_: NSEvent, offset: NSPoint): NSImage;
    // instance method
    browserCanDragRowsWithIndexesInColumnWithEvent?(_: NSBrowser, canDragRowsWith: NSIndexSet, inColumn: number, with_: NSEvent): boolean;
    // instance method
    browserWriteRowsWithIndexesInColumnToPasteboard?(_: NSBrowser, writeRowsWith: NSIndexSet, inColumn: number, to: NSPasteboard): boolean;
    // instance method
    browserAcceptDropAtRowColumnDropOperation?(_: NSBrowser, acceptDrop: NSDraggingInfo, atRow: number, column: number, dropOperation: NSBrowser.DropOperation): boolean;
    // instance method
    browserChildOfItem?(_: NSBrowser, child: number, ofItem?: any): any;
    // instance method
    browserDidChangeLastColumnToColumn?(_: NSBrowser, didChangeLastColumn: number, toColumn: number): void;
    // instance method
    browserHeaderViewControllerForItem?(_: NSBrowser, headerViewControllerForItem?: any): NSViewController;
    // instance method
    browserHeightOfRowInColumn?(_: NSBrowser, heightOfRow: number, inColumn: number): number;
    // instance method
    browserIsColumnValid?(_: NSBrowser, isColumnValid: number): boolean;
    // instance method
    browserIsLeafItem?(_: NSBrowser, isLeafItem?: any): boolean;
    // instance method
    browserNumberOfChildrenOfItem?(_: NSBrowser, numberOfChildrenOfItem?: any): number;
    // instance method
    browserNumberOfRowsInColumn?(_: NSBrowser, numberOfRowsInColumn: number): number;
    // instance method
    browserObjectValueForItem?(_: NSBrowser, objectValueForItem?: any): any;
    // instance method
    browserPreviewViewControllerForLeafItem?(_: NSBrowser, previewViewControllerForLeafItem: any): NSViewController;
    // instance method
    browserSelectionIndexesForProposedSelectionInColumn?(_: NSBrowser, selectionIndexesForProposedSelection: NSIndexSet, inColumn: number): NSIndexSet;
    // instance method
    browserSelectRowInColumn?(_: NSBrowser, selectRow: number, inColumn: number): boolean;
    // instance method
    browserSetObjectValueForItem?(_: NSBrowser, setObjectValue?: any, forItem?: any): void;
    // instance method
    browserShouldEditItem?(_: NSBrowser, shouldEditItem?: any): boolean;
    // instance method
    browserShouldShowCellExpansionForRowColumn?(_: NSBrowser, shouldShowCellExpansionForRow: number, column: number): boolean;
    // instance method
    browserShouldSizeColumnForUserResizeToWidth?(_: NSBrowser, shouldSizeColumn: number, forUserResize: boolean, toWidth: number): number;
    // instance method
    browserSizeToFitWidthOfColumn?(_: NSBrowser, sizeToFitWidthOfColumn: number): number;
    // instance method
    browserTitleOfColumn?(_: NSBrowser, titleOfColumn: number): string;
    // instance method
    browserTypeSelectStringForRowInColumn?(_: NSBrowser, typeSelectStringForRow: number, inColumn: number): string;
    // instance method
    browserValidateDropProposedRowColumnDropOperation?(_: NSBrowser, validateDrop: NSDraggingInfo, proposedRow: number, column: number, dropOperation: NSBrowser.DropOperation): NSDragOperation;
    // instance method
    browserWillDisplayCellAtRowColumn?(_: NSBrowser, willDisplayCell: any, atRow: number, column: number): void;
    // instance method
    browserColumnConfigurationDidChange?(_: NSNotification): void;
    // instance method
    browserDidScroll?(_: NSBrowser): void;
    // instance method
    browserWillScroll?(_: NSBrowser): void;
    // instance method
    rootItemForBrowser?(for_: NSBrowser): any;
  }

  // interface
  class NSButton extends NSControl /* implements NSAccessibilityButton, NSUserInterfaceCompression, NSUserInterfaceValidations */ {
    static checkboxWithTitleTargetAction(checkboxWithTitle: string, target?: any, action?: string): NSButton;
    static radioButtonWithTitleTargetAction(radioButtonWithTitle: string, target?: any, action?: string): NSButton;
    allowsMixedState: boolean;
    setAllowsMixedState(_: boolean) // property
    alternateImage: NSImage;
    setAlternateImage(_: NSImage) // property
    alternateTitle: string;
    setAlternateTitle(_: string) // property
    attributedAlternateTitle: NSAttributedString;
    setAttributedAlternateTitle(_: NSAttributedString) // property
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString) // property
    bezelColor: NSColor;
    setBezelColor(_: NSColor) // property
    bezelStyle: NSButton.BezelStyle;
    setBezelStyle(_: NSButton.BezelStyle) // property
    isBordered: boolean;
    setBordered(_: boolean) // property
    contentTintColor: NSColor;
    setContentTintColor(_: NSColor) // property
    image: NSImage;
    setImage(_: NSImage) // property
    imageHugsTitle: boolean;
    setImageHugsTitle(_: boolean) // property
    imagePosition: NSControl.ImagePosition;
    setImagePosition(_: NSControl.ImagePosition) // property
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling) // property
    keyEquivalent: string;
    setKeyEquivalent(_: string) // property
    keyEquivalentModifierMask: NSEvent.ModifierFlags;
    setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags) // property
    maxAcceleratorLevel: number;
    setMaxAcceleratorLevel(_: number) // property
    showsBorderOnlyWhileMouseInside: boolean;
    setShowsBorderOnlyWhileMouseInside(_: boolean) // property
    sound: NSSound;
    setSound(_: NSSound) // property
    isSpringLoaded: boolean;
    setSpringLoaded(_: boolean) // property
    state: number;
    setState(_: number) // property
    title: string;
    setTitle(_: string) // property
    isTransparent: boolean;
    setTransparent(_: boolean) // property
    getPeriodicDelayInterval(_: number, interval: number): void;
    highlight(_: boolean): void;
    setButtonType(_: NSButton.ButtonType): void;
    setNextState(): void;
    setPeriodicDelayInterval(_: number, interval: number): void;
  }

  // interface
  class NSButtonCell extends NSActionCell {
    alternateImage: NSImage;
    setAlternateImage(_: NSImage) // property
    alternateTitle: string;
    setAlternateTitle(_: string) // property
    attributedAlternateTitle: NSAttributedString;
    setAttributedAlternateTitle(_: NSAttributedString) // property
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    bezelStyle: NSButton.BezelStyle;
    setBezelStyle(_: NSButton.BezelStyle) // property
    highlightsBy: NSCell.StyleMask;
    setHighlightsBy(_: NSCell.StyleMask) // property
    imageDimsWhenDisabled: boolean;
    setImageDimsWhenDisabled(_: boolean) // property
    imagePosition: NSControl.ImagePosition;
    setImagePosition(_: NSControl.ImagePosition) // property
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling) // property
    keyEquivalentModifierMask: NSEvent.ModifierFlags;
    setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags) // property
    showsBorderOnlyWhileMouseInside: boolean;
    setShowsBorderOnlyWhileMouseInside(_: boolean) // property
    showsStateBy: NSCell.StyleMask;
    setShowsStateBy(_: NSCell.StyleMask) // property
    sound: NSSound;
    setSound(_: NSSound) // property
    isTransparent: boolean;
    setTransparent(_: boolean) // property
    drawBezelWithFrameInView(withFrame: CGRect, in_: NSView): void;
    drawImageWithFrameInView(_: NSImage, withFrame: CGRect, in_: NSView): void;
    drawTitleWithFrameInView(_: NSAttributedString, withFrame: CGRect, in_: NSView): CGRect;
    mouseEntered(with_: NSEvent): void;
    mouseExited(with_: NSEvent): void;
    setButtonType(_: NSButton.ButtonType): void;
    setPeriodicDelayInterval(_: number, interval: number): void;
  }

  // interface
  class NSButtonTouchBarItem extends NSTouchBarItem {
    action: string;
    setAction(_: string) // property
    bezelColor: NSColor;
    setBezelColor(_: NSColor) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    image: NSImage;
    setImage(_: NSImage) // property
    target: any;
    setTarget(_: any) // property
    title: string;
    setTitle(_: string) // property
  }

  // interface
  class NSCIImageRep extends NSImageRep {
    CIImage: CIImage; // property
    static createWithCIImage(CIImage: CIImage): NSCIImageRep;
  }

  // interface
  class NSCandidateListTouchBarItem<CandidateType> extends NSTouchBarItem {
    allowsCollapsing: boolean;
    setAllowsCollapsing(_: boolean) // property
    allowsTextInputContextCandidates: boolean;
    setAllowsTextInputContextCandidates(_: boolean) // property
    attributedStringForCandidate: (p1: CandidateType, p2: number) => NSAttributedString;
    setAttributedStringForCandidate(_: (p1: CandidateType, p2: number) => NSAttributedString) // property
    isCandidateListVisible: boolean; // property
    candidates: CandidateType[]; // property
    client: NSView;
    setClient(_: NSView) // property
    isCollapsed: boolean;
    setCollapsed(_: boolean) // property
    delegate: NSCandidateListTouchBarItemDelegate;
    setDelegate(_: NSCandidateListTouchBarItemDelegate) // property
    setCandidatesForSelectedRangeInString(_: CandidateType[], forSelectedRange: NSRange, in_?: string): void;
    updateWithInsertionPointVisibility(withInsertionPointVisibility: boolean): void;
  }

  interface NSCandidateListTouchBarItemDelegate extends NSObject {
    // instance method
    candidateListTouchBarItemBeginSelectingCandidateAtIndex?(_: NSCandidateListTouchBarItem<any>, beginSelectingCandidateAt: number): void;
    // instance method
    candidateListTouchBarItemChangeSelectionFromCandidateAtIndexToIndex?(_: NSCandidateListTouchBarItem<any>, changeSelectionFromCandidateAt: number, to: number): void;
    // instance method
    candidateListTouchBarItemEndSelectingCandidateAtIndex?(_: NSCandidateListTouchBarItem<any>, endSelectingCandidateAt: number): void;
    // instance method
    candidateListTouchBarItemChangedCandidateListVisibility?(_: NSCandidateListTouchBarItem<any>, changedCandidateListVisibility: boolean): void;
  }

  // interface
  class NSCell extends NSObject /* implements NSAccessibility, NSAccessibilityElement, NSCoding, NSCopying, NSUserInterfaceItemIdentification */ {
    acceptsFirstResponder: boolean; // property
    action: string;
    setAction(_: string) // property
    alignment: NSTextAlignment;
    setAlignment(_: NSTextAlignment) // property
    allowsEditingTextAttributes: boolean;
    setAllowsEditingTextAttributes(_: boolean) // property
    allowsMixedState: boolean;
    setAllowsMixedState(_: boolean) // property
    allowsUndo: boolean;
    setAllowsUndo(_: boolean) // property
    attributedStringValue: NSAttributedString;
    setAttributedStringValue(_: NSAttributedString) // property
    backgroundStyle: NSView.BackgroundStyle;
    setBackgroundStyle(_: NSView.BackgroundStyle) // property
    baseWritingDirection: NSWritingDirection;
    setBaseWritingDirection(_: NSWritingDirection) // property
    isBezeled: boolean;
    setBezeled(_: boolean) // property
    isBordered: boolean;
    setBordered(_: boolean) // property
    cellSize: CGSize; // property
    isContinuous: boolean;
    setContinuous(_: boolean) // property
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize) // property
    controlView: NSView;
    setControlView(_: NSView) // property
    doubleValue: number;
    setDoubleValue(_: number) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    floatValue: number;
    setFloatValue(_: number) // property
    focusRingType: NSFocusRingType;
    setFocusRingType(_: NSFocusRingType) // property
    font: NSFont;
    setFont(_: NSFont) // property
    formatter: Formatter;
    setFormatter(_: Formatter) // property
    hasValidObjectValue: boolean; // property
    isHighlighted: boolean;
    setHighlighted(_: boolean) // property
    image: NSImage;
    setImage(_: NSImage) // property
    importsGraphics: boolean;
    setImportsGraphics(_: boolean) // property
    intValue: number;
    setIntValue(_: number) // property
    integerValue: number;
    setIntegerValue(_: number) // property
    interiorBackgroundStyle: NSView.BackgroundStyle; // property
    keyEquivalent: string; // property
    lineBreakMode: NSLineBreakMode;
    setLineBreakMode(_: NSLineBreakMode) // property
    menu: NSMenu;
    setMenu(_: NSMenu) // property
    mouseDownFlags: number; // property
    nextState: number; // property
    objectValue: any;
    setObjectValue(_: any) // property
    isOpaque: boolean; // property
    refusesFirstResponder: boolean;
    setRefusesFirstResponder(_: boolean) // property
    representedObject: any;
    setRepresentedObject(_: any) // property
    isScrollable: boolean;
    setScrollable(_: boolean) // property
    isSelectable: boolean;
    setSelectable(_: boolean) // property
    sendsActionOnEndEditing: boolean;
    setSendsActionOnEndEditing(_: boolean) // property
    showsFirstResponder: boolean;
    setShowsFirstResponder(_: boolean) // property
    state: number;
    setState(_: number) // property
    stringValue: string;
    setStringValue(_: string) // property
    tag: number;
    setTag(_: number) // property
    target: any;
    setTarget(_: any) // property
    title: string;
    setTitle(_: string) // property
    truncatesLastVisibleLine: boolean;
    setTruncatesLastVisibleLine(_: boolean) // property
    type: NSCell.CellType;
    setType(_: NSCell.CellType) // property
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection) // property
    usesSingleLineMode: boolean;
    setUsesSingleLineMode(_: boolean) // property
    wantsNotificationForMarkedText: boolean; // property
    wraps: boolean;
    setWraps(_: boolean) // property
    static defaultFocusRingType: NSFocusRingType; // property
    static defaultMenu: NSMenu; // property
    static prefersTrackingUntilMouseUp: boolean; // property
    calcDrawInfo(_: CGRect): void;
    cellAttribute(_: NSCell.Attribute): number;
    cellSizeForBounds(forBounds: CGRect): CGSize;
    compare(_: any): ComparisonResult;
    continueTrackingAtInView(last: CGPoint, current: CGPoint, in_: NSView): boolean;
    draggingImageComponentsWithFrameInView(withFrame: CGRect, in_: NSView): NSDraggingImageComponent[];
    drawFocusRingMaskWithFrameInView(withFrame: CGRect, in_: NSView): void;
    drawInteriorWithFrameInView(withFrame: CGRect, in_: NSView): void;
    drawWithExpansionFrameInView(withExpansionFrame: CGRect, in_: NSView): void;
    drawWithFrameInView(withFrame: CGRect, in_: NSView): void;
    drawingRectForBounds(forBounds: CGRect): CGRect;
    editWithFrameInViewEditorDelegateEvent(withFrame: CGRect, in_: NSView, editor: NSText, delegate?: any, event?: NSEvent): void;
    endEditing(_: NSText): void;
    expansionFrameWithFrameInView(withFrame: CGRect, in_: NSView): CGRect;
    fieldEditorForView(for_: NSView): NSTextView;
    focusRingMaskBoundsForFrameInView(forFrame: CGRect, in_: NSView): CGRect;
    getPeriodicDelayInterval(_: number, interval: number): void;
    highlightWithFrameInView(_: boolean, withFrame: CGRect, in_: NSView): void;
    highlightColorWithFrameInView(withFrame: CGRect, in_: NSView): NSColor;
    hitTestForEventInRectOfView(for_: NSEvent, in_: CGRect, of: NSView): NSCell.HitResult;
    imageRectForBounds(forBounds: CGRect): CGRect;
    static createWithImageCell(imageCell?: NSImage): NSCell;
    static createWithTextCell(textCell: string): NSCell;
    menuForEventInRectOfView(for_: NSEvent, in_: CGRect, of: NSView): NSMenu;
    performClick(_?: any): void;
    resetCursorRectInView(_: CGRect, in_: NSView): void;
    selectWithFrameInViewEditorDelegateStartLength(withFrame: CGRect, in_: NSView, editor: NSText, delegate?: any, start?: number, length?: number): void;
    sendActionOn(on: NSEvent.EventTypeMask): number;
    setCellAttributeTo(_: NSCell.Attribute, to: number): void;
    setNextState(): void;
    setUpFieldEditorAttributes(_: NSText): NSText;
    startTrackingAtInView(at: CGPoint, in_: NSView): boolean;
    stopTrackingAtInViewMouseIsUp(last: CGPoint, current: CGPoint, in_: NSView, mouseIsUp: boolean): void;
    takeDoubleValueFrom(_?: any): void;
    takeFloatValueFrom(_?: any): void;
    takeIntValueFrom(_?: any): void;
    takeIntegerValueFrom(_?: any): void;
    takeObjectValueFrom(_?: any): void;
    takeStringValueFrom(_?: any): void;
    titleRectForBounds(forBounds: CGRect): CGRect;
    trackMouseInRectOfViewUntilMouseUp(with_: NSEvent, in_: CGRect, of: NSView, untilMouseUp: boolean): boolean;
  }

  interface NSChangeSpelling {
    // instance method
    changeSpelling(_?: any): void;
  }

  // interface
  class NSClickGestureRecognizer extends NSGestureRecognizer /* implements NSCoding */ {
    buttonMask: number;
    setButtonMask(_: number) // property
    numberOfClicksRequired: number;
    setNumberOfClicksRequired(_: number) // property
    numberOfTouchesRequired: number;
    setNumberOfTouchesRequired(_: number) // property
  }

  // interface
  class NSClipView extends NSView {
    automaticallyAdjustsContentInsets: boolean;
    setAutomaticallyAdjustsContentInsets(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    contentInsets: NSEdgeInsets;
    setContentInsets(_: NSEdgeInsets) // property
    documentCursor: NSCursor;
    setDocumentCursor(_: NSCursor) // property
    documentRect: CGRect; // property
    documentView: NSView;
    setDocumentView(_: NSView) // property
    documentVisibleRect: CGRect; // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    constrainBoundsRect(_: CGRect): CGRect;
    scrollToPoint(to: CGPoint): void;
    viewBoundsChanged(_: NSNotification): void;
    viewFrameChanged(_: NSNotification): void;
  }

  interface NSCloudSharingServiceDelegate extends NSSharingServiceDelegate {
    // instance method
    optionsForSharingServiceShareProvider?(for_: NSSharingService, share: NSItemProvider): NSSharingService.CloudKitOptions;
    // instance method
    sharingServiceDidSaveShare?(_: NSSharingService, didSave: CKShare): void;
    // instance method
    sharingServiceDidCompleteForItemsError?(_: NSSharingService, didCompleteForItems: any[], error?: NSError): void;
    // instance method
    sharingServiceDidStopSharing?(_: NSSharingService, didStopSharing: CKShare): void;
  }

  interface NSCloudSharingValidation extends NSObject {
    // instance method
    cloudShareForUserInterfaceItem(for_: NSValidatedUserInterfaceItem): CKShare;
  }

  // interface
  class NSCollectionLayoutAnchor extends NSObject /* implements NSCopying */ {
    static layoutAnchorWithEdges(edges: NSDirectionalRectEdge): NSCollectionLayoutAnchor;
    static layoutAnchorWithEdgesAbsoluteOffset(edges: NSDirectionalRectEdge, absoluteOffset: CGPoint): NSCollectionLayoutAnchor;
    static layoutAnchorWithEdgesFractionalOffset(edges: NSDirectionalRectEdge, fractionalOffset: CGPoint): NSCollectionLayoutAnchor;
    edges: NSDirectionalRectEdge; // property
    isAbsoluteOffset: boolean; // property
    isFractionalOffset: boolean; // property
    offset: CGPoint; // property
  }

  // interface
  class NSCollectionLayoutBoundarySupplementaryItem extends NSCollectionLayoutSupplementaryItem /* implements NSCopying */ {
    static boundarySupplementaryItemWithLayoutSizeElementKindAlignment(layoutSize: NSCollectionLayoutSize, elementKind: string, alignment: NSRectAlignment): NSCollectionLayoutBoundarySupplementaryItem;
    static boundarySupplementaryItemWithLayoutSizeElementKindAlignmentAbsoluteOffset(layoutSize: NSCollectionLayoutSize, elementKind: string, alignment: NSRectAlignment, absoluteOffset: CGPoint): NSCollectionLayoutBoundarySupplementaryItem;
    alignment: NSRectAlignment; // property
    extendsBoundary: boolean;
    setExtendsBoundary(_: boolean) // property
    offset: CGPoint; // property
    pinToVisibleBounds: boolean;
    setPinToVisibleBounds(_: boolean) // property
  }

  interface NSCollectionLayoutContainer extends NSObject {
    contentInsets: NSDirectionalEdgeInsets; // property
    contentSize: CGSize; // property
    effectiveContentInsets: NSDirectionalEdgeInsets; // property
    effectiveContentSize: CGSize; // property
  }

  // interface
  class NSCollectionLayoutDecorationItem extends NSCollectionLayoutItem /* implements NSCopying */ {
    static backgroundDecorationItemWithElementKind(elementKind: string): NSCollectionLayoutDecorationItem;
    elementKind: string; // property
    zIndex: number;
    setZIndex(_: number) // property
  }

  // interface
  class NSCollectionLayoutDimension extends NSObject /* implements NSCopying */ {
    static absoluteDimension(_: number): NSCollectionLayoutDimension;
    static estimatedDimension(_: number): NSCollectionLayoutDimension;
    static fractionalHeightDimension(_: number): NSCollectionLayoutDimension;
    static fractionalWidthDimension(_: number): NSCollectionLayoutDimension;
    dimension: number; // property
    isAbsolute: boolean; // property
    isEstimated: boolean; // property
    isFractionalHeight: boolean; // property
    isFractionalWidth: boolean; // property
  }

  // interface
  class NSCollectionLayoutEdgeSpacing extends NSObject /* implements NSCopying */ {
    static spacingForLeadingTopTrailingBottom(leading?: NSCollectionLayoutSpacing, top?: NSCollectionLayoutSpacing, trailing?: NSCollectionLayoutSpacing, bottom?: NSCollectionLayoutSpacing): NSCollectionLayoutEdgeSpacing;
    bottom: NSCollectionLayoutSpacing; // property
    leading: NSCollectionLayoutSpacing; // property
    top: NSCollectionLayoutSpacing; // property
    trailing: NSCollectionLayoutSpacing; // property
  }

  interface NSCollectionLayoutEnvironment extends NSObject {
    container: NSCollectionLayoutContainer; // property
  }

  // interface
  class NSCollectionLayoutGroup extends NSCollectionLayoutItem /* implements NSCopying */ {
    static customWithLayoutSizeItemProvider(layoutSize: NSCollectionLayoutSize, itemProvider: (p1: NSCollectionLayoutEnvironment) => NSCollectionLayoutGroupCustomItem[]): NSCollectionLayoutGroup;
    static horizontalGroupWithLayoutSizeSubitemCount(layoutSize: NSCollectionLayoutSize, subitem: NSCollectionLayoutItem, count: number): NSCollectionLayoutGroup;
    static horizontalGroupWithLayoutSizeSubitems(layoutSize: NSCollectionLayoutSize, subitems: NSCollectionLayoutItem[]): NSCollectionLayoutGroup;
    static verticalGroupWithLayoutSizeSubitemCount(layoutSize: NSCollectionLayoutSize, subitem: NSCollectionLayoutItem, count: number): NSCollectionLayoutGroup;
    static verticalGroupWithLayoutSizeSubitems(layoutSize: NSCollectionLayoutSize, subitems: NSCollectionLayoutItem[]): NSCollectionLayoutGroup;
    interItemSpacing: NSCollectionLayoutSpacing;
    setInterItemSpacing(_: NSCollectionLayoutSpacing) // property
    subitems: NSCollectionLayoutItem[]; // property
    visualDescription(): string;
  }

  // interface
  class NSCollectionLayoutGroupCustomItem extends NSObject /* implements NSCopying */ {
    static customItemWithFrame(frame: CGRect): NSCollectionLayoutGroupCustomItem;
    static customItemWithFrameZIndex(frame: CGRect, zIndex: number): NSCollectionLayoutGroupCustomItem;
    frame: CGRect; // property
    zIndex: number; // property
  }

  // interface
  class NSCollectionLayoutItem extends NSObject /* implements NSCopying */ {
    static itemWithLayoutSize(layoutSize: NSCollectionLayoutSize): NSCollectionLayoutItem;
    static itemWithLayoutSizeSupplementaryItems(layoutSize: NSCollectionLayoutSize, supplementaryItems: NSCollectionLayoutSupplementaryItem[]): NSCollectionLayoutItem;
    contentInsets: NSDirectionalEdgeInsets;
    setContentInsets(_: NSDirectionalEdgeInsets) // property
    edgeSpacing: NSCollectionLayoutEdgeSpacing;
    setEdgeSpacing(_: NSCollectionLayoutEdgeSpacing) // property
    layoutSize: NSCollectionLayoutSize; // property
    supplementaryItems: NSCollectionLayoutSupplementaryItem[]; // property
  }

  // interface
  class NSCollectionLayoutSection extends NSObject /* implements NSCopying */ {
    static sectionWithGroup(group: NSCollectionLayoutGroup): NSCollectionLayoutSection;
    boundarySupplementaryItems: NSCollectionLayoutBoundarySupplementaryItem[];
    setBoundarySupplementaryItems(_: NSCollectionLayoutBoundarySupplementaryItem[]) // property
    contentInsets: NSDirectionalEdgeInsets;
    setContentInsets(_: NSDirectionalEdgeInsets) // property
    decorationItems: NSCollectionLayoutDecorationItem[];
    setDecorationItems(_: NSCollectionLayoutDecorationItem[]) // property
    interGroupSpacing: number;
    setInterGroupSpacing(_: number) // property
    orthogonalScrollingBehavior: NSCollectionLayoutSectionOrthogonalScrollingBehavior;
    setOrthogonalScrollingBehavior(_: NSCollectionLayoutSectionOrthogonalScrollingBehavior) // property
    supplementariesFollowContentInsets: boolean;
    setSupplementariesFollowContentInsets(_: boolean) // property
    visibleItemsInvalidationHandler: (p1: NSCollectionLayoutVisibleItem[], p2: CGPoint, p3: NSCollectionLayoutEnvironment) => void;
    setVisibleItemsInvalidationHandler(_: (p1: NSCollectionLayoutVisibleItem[], p2: CGPoint, p3: NSCollectionLayoutEnvironment) => void) // property
  }

  // interface
  class NSCollectionLayoutSize extends NSObject /* implements NSCopying */ {
    static sizeWithWidthDimensionHeightDimension(widthDimension: NSCollectionLayoutDimension, heightDimension: NSCollectionLayoutDimension): NSCollectionLayoutSize;
    heightDimension: NSCollectionLayoutDimension; // property
    widthDimension: NSCollectionLayoutDimension; // property
  }

  // interface
  class NSCollectionLayoutSpacing extends NSObject /* implements NSCopying */ {
    static fixedSpacing(_: number): NSCollectionLayoutSpacing;
    static flexibleSpacing(_: number): NSCollectionLayoutSpacing;
    isFixedSpacing: boolean; // property
    isFlexibleSpacing: boolean; // property
    spacing: number; // property
  }

  // interface
  class NSCollectionLayoutSupplementaryItem extends NSCollectionLayoutItem /* implements NSCopying */ {
    static supplementaryItemWithLayoutSizeElementKindContainerAnchor(layoutSize: NSCollectionLayoutSize, elementKind: string, containerAnchor: NSCollectionLayoutAnchor): NSCollectionLayoutSupplementaryItem;
    static supplementaryItemWithLayoutSizeElementKindContainerAnchorItemAnchor(layoutSize: NSCollectionLayoutSize, elementKind: string, containerAnchor: NSCollectionLayoutAnchor, itemAnchor: NSCollectionLayoutAnchor): NSCollectionLayoutSupplementaryItem;
    containerAnchor: NSCollectionLayoutAnchor; // property
    elementKind: string; // property
    itemAnchor: NSCollectionLayoutAnchor; // property
    zIndex: number;
    setZIndex(_: number) // property
  }

  interface NSCollectionLayoutVisibleItem extends NSObject {
    alpha: number;
    setAlpha(_: number) // property
    bounds: CGRect; // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    frame: CGRect; // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    indexPath: NSIndexPath; // property
    name: string; // property
    representedElementCategory: NSCollectionElementCategory; // property
    representedElementKind: string; // property
    zIndex: number;
    setZIndex(_: number) // property
  }

  // interface
  class NSCollectionView extends NSView /* implements NSDraggingDestination, NSDraggingSource */ {
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean) // property
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean) // property
    backgroundColors: NSColor[];
    setBackgroundColors(_: NSColor[]) // property
    backgroundView: NSView;
    setBackgroundView(_: NSView) // property
    backgroundViewScrollsWithContent: boolean;
    setBackgroundViewScrollsWithContent(_: boolean) // property
    collectionViewLayout: NSCollectionViewLayout;
    setCollectionViewLayout(_: NSCollectionViewLayout) // property
    content: any[];
    setContent(_: any[]) // property
    dataSource: NSCollectionViewDataSource;
    setDataSource(_: NSCollectionViewDataSource) // property
    delegate: NSCollectionViewDelegate;
    setDelegate(_: NSCollectionViewDelegate) // property
    isFirstResponder: boolean; // property
    numberOfSections: number; // property
    prefetchDataSource: NSCollectionViewPrefetching;
    setPrefetchDataSource(_: NSCollectionViewPrefetching) // property
    isSelectable: boolean;
    setSelectable(_: boolean) // property
    selectionIndexPaths: NSSet<IndexPath>;
    setSelectionIndexPaths(_: NSSet<IndexPath>) // property
    selectionIndexes: NSIndexSet;
    setSelectionIndexes(_: NSIndexSet) // property
    deleteItemsWithAt(at: NSSet<IndexPath>): void;
    deleteSections(_: NSIndexSet): void;
    deselectAll(_?: any): void;
    deselectItemsWithAt(at: NSSet<IndexPath>): void;
    draggingImageForItemsWithAtWithOffset(at: NSSet<IndexPath>, with_: NSEvent, offset: NSPoint): NSImage;
    draggingImageForItemsAtIndexesWithEventOffset(at: NSIndexSet, with_: NSEvent, offset: NSPoint): NSImage;
    frameForItemAtIndex(at: number): CGRect;
    frameForItemAtIndexWithNumberOfItems(at: number, withNumberOfItems: number): CGRect;
    indexPathForItem(for_: NSCollectionViewItem): NSIndexPath;
    indexPathForItemAtPoint(at: CGPoint): NSIndexPath;
    indexPathsForVisibleItems(): NSSet<IndexPath>;
    indexPathsForVisibleSupplementaryElementsOfKind(ofKind: string): NSSet<IndexPath>;
    insertItemsWithAt(at: NSSet<IndexPath>): void;
    insertSections(_: NSIndexSet): void;
    itemAtIndex(at: number): NSCollectionViewItem;
    itemAtIndexPath(at: NSIndexPath): NSCollectionViewItem;
    layoutAttributesForItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    layoutAttributesForSupplementaryElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    makeItemWithIdentifierForIndexPath(withIdentifier: string, for_: NSIndexPath): NSCollectionViewItem;
    makeSupplementaryViewOfKindWithIdentifierForIndexPath(ofKind: string, withIdentifier: string, for_: NSIndexPath): NSView;
    moveItemAtIndexPathToIndexPath(at: NSIndexPath, to: NSIndexPath): void;
    moveSectionToSection(_: number, toSection: number): void;
    numberOfItemsInSection(inSection: number): number;
    performBatchUpdatesWithCompletionHandler(_?: () => void, completionHandler?: (p1: boolean) => void): void;
    registerClassForItemWithIdentifier(_?: typeof NSObject, forItemWithIdentifier?: string): void;
    registerClassForSupplementaryViewOfKindWithIdentifier(_?: typeof NSObject, forSupplementaryViewOfKind?: string, withIdentifier?: string): void;
    registerNibForItemWithIdentifier(_?: NSNib, forItemWithIdentifier?: string): void;
    registerNibForSupplementaryViewOfKindWithIdentifier(_?: NSNib, forSupplementaryViewOfKind?: string, withIdentifier?: string): void;
    reloadData(): void;
    reloadItemsWithAt(at: NSSet<IndexPath>): void;
    reloadSections(_: NSIndexSet): void;
    scrollToItemsWithAtScrollPosition(at: NSSet<IndexPath>, scrollPosition: NSCollectionView.ScrollPosition): void;
    selectItemsWithAtScrollPosition(at: NSSet<IndexPath>, scrollPosition: NSCollectionView.ScrollPosition): void;
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
    supplementaryViewForElementKindAtIndexPath(forElementKind: string, at: NSIndexPath): NSView;
    toggleSectionCollapse(_: any): void;
    visibleItems(): NSCollectionViewItem[];
    visibleSupplementaryViewsOfKind(ofKind: string): NSView[];
  }

  // interface
  class NSCollectionViewCompositionalLayout extends NSCollectionViewLayout {
    configuration: NSCollectionViewCompositionalLayoutConfiguration;
    setConfiguration(_: NSCollectionViewCompositionalLayoutConfiguration) // property
    static createWithSection(section: NSCollectionLayoutSection): NSCollectionViewCompositionalLayout;
    static createWithSectionConfiguration(section: NSCollectionLayoutSection, configuration: NSCollectionViewCompositionalLayoutConfiguration): NSCollectionViewCompositionalLayout;
    static createWithSectionProvider(sectionProvider: (p1: number, p2: NSCollectionLayoutEnvironment) => NSCollectionLayoutSection): NSCollectionViewCompositionalLayout;
    static createWithSectionProviderConfiguration(sectionProvider: (p1: number, p2: NSCollectionLayoutEnvironment) => NSCollectionLayoutSection, configuration: NSCollectionViewCompositionalLayoutConfiguration): NSCollectionViewCompositionalLayout;
  }

  // interface
  class NSCollectionViewCompositionalLayoutConfiguration extends NSObject /* implements NSCopying */ {
    boundarySupplementaryItems: NSCollectionLayoutBoundarySupplementaryItem[];
    setBoundarySupplementaryItems(_: NSCollectionLayoutBoundarySupplementaryItem[]) // property
    interSectionSpacing: number;
    setInterSectionSpacing(_: number) // property
    scrollDirection: NSCollectionView.ScrollDirection;
    setScrollDirection(_: NSCollectionView.ScrollDirection) // property
  }

  interface NSCollectionViewDataSource extends NSObject {
    // instance method
    collectionViewItemForRepresentedObjectAtIndexPath(_: NSCollectionView, itemForRepresentedObjectAt: NSIndexPath): NSCollectionViewItem;
    // instance method
    collectionViewViewForSupplementaryElementOfKindAtIndexPath?(_: NSCollectionView, viewForSupplementaryElementOfKind: string, at: NSIndexPath): NSView;
    // instance method
    collectionViewNumberOfItemsInSection(_: NSCollectionView, numberOfItemsInSection: number): number;
    // instance method
    numberOfSectionsInCollectionView?(in_: NSCollectionView): number;
  }

  interface NSCollectionViewDelegate extends NSObject {
    // instance method
    collectionViewCanDragItemsAtWith?(_: NSCollectionView, canDragItemsAt: NSSet<IndexPath>, with_: NSEvent): boolean;
    // instance method
    collectionViewCanDragItemsAtIndexesWithEvent?(_: NSCollectionView, canDragItemsAt: NSIndexSet, with_: NSEvent): boolean;
    // instance method
    collectionViewWriteItemsAtTo?(_: NSCollectionView, writeItemsAt: NSSet<IndexPath>, to: NSPasteboard): boolean;
    // instance method
    collectionViewWriteItemsAtIndexesToPasteboard?(_: NSCollectionView, writeItemsAt: NSIndexSet, to: NSPasteboard): boolean;
    // instance method
    collectionViewDraggingImageForItemsAtWithOffset?(_: NSCollectionView, draggingImageForItemsAt: NSSet<IndexPath>, with_: NSEvent, offset: NSPoint): NSImage;
    // instance method
    collectionViewDraggingImageForItemsAtIndexesWithEventOffset?(_: NSCollectionView, draggingImageForItemsAt: NSIndexSet, with_: NSEvent, offset: NSPoint): NSImage;
    // instance method
    collectionViewPasteboardWriterForItemAtIndexPath?(_: NSCollectionView, pasteboardWriterForItemAt: NSIndexPath): NSPasteboardWriting;
    // instance method
    collectionViewPasteboardWriterForItemAtIndex?(_: NSCollectionView, pasteboardWriterForItemAt: number): NSPasteboardWriting;
    // instance method
    collectionViewDraggingSessionWillBeginAtForItemsAt?(_: NSCollectionView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItemsAt: NSSet<IndexPath>): void;
    // instance method
    collectionViewDraggingSessionWillBeginAtPointForItemsAtIndexes?(_: NSCollectionView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItemsAt: NSIndexSet): void;
    // instance method
    collectionViewDraggingSessionEndedAtPointDragOperation?(_: NSCollectionView, draggingSession: NSDraggingSession, endedAt: CGPoint, dragOperation: NSDragOperation): void;
    // instance method
    collectionViewShouldChangeItemsAtTo?(_: NSCollectionView, shouldChangeItemsAt: NSSet<IndexPath>, to: NSCollectionViewItem.HighlightState): NSSet<IndexPath>;
    // instance method
    collectionViewDidChangeItemsAtTo?(_: NSCollectionView, didChangeItemsAt: NSSet<IndexPath>, to: NSCollectionViewItem.HighlightState): void;
    // instance method
    collectionViewShouldSelectItemsAt?(_: NSCollectionView, shouldSelectItemsAt: NSSet<IndexPath>): NSSet<IndexPath>;
    // instance method
    collectionViewShouldDeselectItemsAt?(_: NSCollectionView, shouldDeselectItemsAt: NSSet<IndexPath>): NSSet<IndexPath>;
    // instance method
    collectionViewDidSelectItemsAt?(_: NSCollectionView, didSelectItemsAt: NSSet<IndexPath>): void;
    // instance method
    collectionViewDidDeselectItemsAt?(_: NSCollectionView, didDeselectItemsAt: NSSet<IndexPath>): void;
    // instance method
    collectionViewWillDisplayItemForRepresentedObjectAtIndexPath?(_: NSCollectionView, willDisplay: NSCollectionViewItem, forRepresentedObjectAt: NSIndexPath): void;
    // instance method
    collectionViewWillDisplaySupplementaryViewForElementKindAtIndexPath?(_: NSCollectionView, willDisplaySupplementaryView: NSView, forElementKind: string, at: NSIndexPath): void;
    // instance method
    collectionViewDidEndDisplayingItemForRepresentedObjectAtIndexPath?(_: NSCollectionView, didEndDisplaying: NSCollectionViewItem, forRepresentedObjectAt: NSIndexPath): void;
    // instance method
    collectionViewDidEndDisplayingSupplementaryViewForElementOfKindAtIndexPath?(_: NSCollectionView, didEndDisplayingSupplementaryView: NSView, forElementOfKind: string, at: NSIndexPath): void;
    // instance method
    collectionViewAcceptDropIndexDropOperation?(_: NSCollectionView, acceptDrop: NSDraggingInfo, index: number, dropOperation: NSCollectionView.DropOperation): boolean;
    // instance method
    collectionViewAcceptDropIndexPathDropOperation?(_: NSCollectionView, acceptDrop: NSDraggingInfo, indexPath: NSIndexPath, dropOperation: NSCollectionView.DropOperation): boolean;
    // instance method
    collectionViewTransitionLayoutForOldLayoutNewLayout?(_: NSCollectionView, transitionLayoutForOldLayout: NSCollectionViewLayout, newLayout: NSCollectionViewLayout): NSCollectionViewTransitionLayout;
    // instance method
    collectionViewUpdateDraggingItemsForDrag?(_: NSCollectionView, updateDraggingItemsForDrag: NSDraggingInfo): void;
    // instance method
    collectionViewValidateDropProposedIndexDropOperation?(_: NSCollectionView, validateDrop: NSDraggingInfo, proposedIndex: number, dropOperation: NSCollectionView.DropOperation): NSDragOperation;
    // instance method
    collectionViewValidateDropProposedIndexPathDropOperation?(_: NSCollectionView, validateDrop: NSDraggingInfo, proposedIndexPath: IndexPath, dropOperation: NSCollectionView.DropOperation): NSDragOperation;
  }

  interface NSCollectionViewDelegateFlowLayout extends NSCollectionViewDelegate {
    // instance method
    collectionViewLayoutSizeForItemAtIndexPath?(_: NSCollectionView, layout: NSCollectionViewLayout, sizeForItemAt: NSIndexPath): CGSize;
    // instance method
    collectionViewLayoutInsetForSectionAtIndex?(_: NSCollectionView, layout: NSCollectionViewLayout, insetForSectionAt: number): NSEdgeInsets;
    // instance method
    collectionViewLayoutMinimumLineSpacingForSectionAtIndex?(_: NSCollectionView, layout: NSCollectionViewLayout, minimumLineSpacingForSectionAt: number): number;
    // instance method
    collectionViewLayoutMinimumInteritemSpacingForSectionAtIndex?(_: NSCollectionView, layout: NSCollectionViewLayout, minimumInteritemSpacingForSectionAt: number): number;
    // instance method
    collectionViewLayoutReferenceSizeForFooterInSection?(_: NSCollectionView, layout: NSCollectionViewLayout, referenceSizeForFooterInSection: number): CGSize;
    // instance method
    collectionViewLayoutReferenceSizeForHeaderInSection?(_: NSCollectionView, layout: NSCollectionViewLayout, referenceSizeForHeaderInSection: number): CGSize;
  }

  // interface
  class NSCollectionViewDiffableDataSourceReference<SectionIdentifierType, ItemIdentifierType> extends NSObject /* implements NSCollectionViewDataSource */ {
    supplementaryViewProvider: (p1: NSCollectionView, p2: string, p3: NSIndexPath) => NSView;
    setSupplementaryViewProvider(_: (p1: NSCollectionView, p2: string, p3: NSIndexPath) => NSView) // property
    applySnapshotWithAnimatingDifferences(_: NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType>, animatingDifferences: boolean): void;
    indexPathForItemIdentifier(_: ItemIdentifierType): NSIndexPath;
    itemIdentifierForIndexPath(_: NSIndexPath): ItemIdentifierType;
    snapshot(): NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType>;
  }

  interface NSCollectionViewElement extends NSObject, NSUserInterfaceItemIdentification {
    // instance method
    applyLayoutAttributes?(_: NSCollectionViewLayoutAttributes): void;
    // instance method
    didTransitionFromLayoutToLayout?(from: NSCollectionViewLayout, to: NSCollectionViewLayout): void;
    // instance method
    preferredLayoutAttributesFittingAttributes?(_: NSCollectionViewLayoutAttributes): NSCollectionViewLayoutAttributes;
    // instance method
    prepareForReuse?(): void;
    // instance method
    willTransitionFromLayoutToLayout?(from: NSCollectionViewLayout, to: NSCollectionViewLayout): void;
  }

  // interface
  class NSCollectionViewFlowLayout extends NSCollectionViewLayout {
    estimatedItemSize: CGSize;
    setEstimatedItemSize(_: CGSize) // property
    footerReferenceSize: CGSize;
    setFooterReferenceSize(_: CGSize) // property
    headerReferenceSize: CGSize;
    setHeaderReferenceSize(_: CGSize) // property
    itemSize: CGSize;
    setItemSize(_: CGSize) // property
    minimumInteritemSpacing: number;
    setMinimumInteritemSpacing(_: number) // property
    minimumLineSpacing: number;
    setMinimumLineSpacing(_: number) // property
    scrollDirection: NSCollectionView.ScrollDirection;
    setScrollDirection(_: NSCollectionView.ScrollDirection) // property
    sectionFootersPinToVisibleBounds: boolean;
    setSectionFootersPinToVisibleBounds(_: boolean) // property
    sectionHeadersPinToVisibleBounds: boolean;
    setSectionHeadersPinToVisibleBounds(_: boolean) // property
    sectionInset: NSEdgeInsets;
    setSectionInset(_: NSEdgeInsets) // property
    collapseSectionAtIndex(at: number): void;
    expandSectionAtIndex(at: number): void;
    sectionAtIndexIsCollapsed(atIndexIsCollapsed: number): boolean;
  }

  // interface
  class NSCollectionViewFlowLayoutInvalidationContext extends NSCollectionViewLayoutInvalidationContext {
    invalidateFlowLayoutAttributes: boolean;
    setInvalidateFlowLayoutAttributes(_: boolean) // property
    invalidateFlowLayoutDelegateMetrics: boolean;
    setInvalidateFlowLayoutDelegateMetrics(_: boolean) // property
  }

  // interface
  class NSCollectionViewGridLayout extends NSCollectionViewLayout {
    backgroundColors: NSColor[];
    setBackgroundColors(_: NSColor[]) // property
    margins: NSEdgeInsets;
    setMargins(_: NSEdgeInsets) // property
    maximumItemSize: CGSize;
    setMaximumItemSize(_: CGSize) // property
    maximumNumberOfColumns: number;
    setMaximumNumberOfColumns(_: number) // property
    maximumNumberOfRows: number;
    setMaximumNumberOfRows(_: number) // property
    minimumInteritemSpacing: number;
    setMinimumInteritemSpacing(_: number) // property
    minimumItemSize: CGSize;
    setMinimumItemSize(_: CGSize) // property
    minimumLineSpacing: number;
    setMinimumLineSpacing(_: number) // property
  }

  // interface
  class NSCollectionViewItem extends NSViewController /* implements NSCollectionViewElement, NSCopying */ {
    collectionView: NSCollectionView; // property
    draggingImageComponents: NSDraggingImageComponent[]; // property
    highlightState: NSCollectionViewItem.HighlightState;
    setHighlightState(_: NSCollectionViewItem.HighlightState) // property
    imageView: NSImageView;
    setImageView(_: NSImageView) // property
    isSelected: boolean;
    setSelected(_: boolean) // property
    textField: NSTextField;
    setTextField(_: NSTextField) // property
  }

  // interface
  class NSCollectionViewLayout extends NSObject /* implements NSCoding */ {
    collectionView: NSCollectionView; // property
    collectionViewContentSize: CGSize; // property
    static invalidationContextClass: typeof NSObject; // property
    static layoutAttributesClass: typeof NSObject; // property
    finalLayoutAttributesForDisappearingDecorationElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    finalLayoutAttributesForDisappearingItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    finalLayoutAttributesForDisappearingSupplementaryElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    finalizeAnimatedBoundsChange(): void;
    finalizeCollectionViewUpdates(): void;
    finalizeLayoutTransition(): void;
    indexPathsToDeleteForDecorationViewOfKind(ofKind: string): NSSet<IndexPath>;
    indexPathsToDeleteForSupplementaryViewOfKind(ofKind: string): NSSet<IndexPath>;
    indexPathsToInsertForDecorationViewOfKind(ofKind: string): NSSet<IndexPath>;
    indexPathsToInsertForSupplementaryViewOfKind(ofKind: string): NSSet<IndexPath>;
    initialLayoutAttributesForAppearingDecorationElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    initialLayoutAttributesForAppearingItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    initialLayoutAttributesForAppearingSupplementaryElementOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    invalidateLayout(): void;
    invalidateLayoutWithContext(with_: NSCollectionViewLayoutInvalidationContext): void;
    invalidationContextForBoundsChange(forBoundsChange: CGRect): NSCollectionViewLayoutInvalidationContext;
    invalidationContextForPreferredLayoutAttributesWithOriginalAttributes(forPreferredLayoutAttributes: NSCollectionViewLayoutAttributes, withOriginalAttributes: NSCollectionViewLayoutAttributes): NSCollectionViewLayoutInvalidationContext;
    layoutAttributesForDecorationViewOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    layoutAttributesForDropTargetAtPoint(at: CGPoint): NSCollectionViewLayoutAttributes;
    layoutAttributesForElementsInRect(in_: CGRect): NSCollectionViewLayoutAttributes[];
    layoutAttributesForInterItemGapBeforeIndexPath(before: NSIndexPath): NSCollectionViewLayoutAttributes;
    layoutAttributesForItemAtIndexPath(at: NSIndexPath): NSCollectionViewLayoutAttributes;
    layoutAttributesForSupplementaryViewOfKindAtIndexPath(ofKind: string, at: NSIndexPath): NSCollectionViewLayoutAttributes;
    prepareForAnimatedBoundsChange(forAnimatedBoundsChange: CGRect): void;
    prepareForCollectionViewUpdates(forCollectionViewUpdates: NSCollectionViewUpdateItem[]): void;
    prepareForTransitionFromLayout(from: NSCollectionViewLayout): void;
    prepareForTransitionToLayout(to: NSCollectionViewLayout): void;
    prepareLayout(): void;
    registerClassForDecorationViewOfKind(_?: typeof NSObject, forDecorationViewOfKind?: string): void;
    registerNibForDecorationViewOfKind(_?: NSNib, forDecorationViewOfKind?: string): void;
    shouldInvalidateLayoutForBoundsChange(forBoundsChange: CGRect): boolean;
    shouldInvalidateLayoutForPreferredLayoutAttributesWithOriginalAttributes(forPreferredLayoutAttributes: NSCollectionViewLayoutAttributes, withOriginalAttributes: NSCollectionViewLayoutAttributes): boolean;
    targetContentOffsetForProposedContentOffset(forProposedContentOffset: CGPoint): CGPoint;
    targetContentOffsetForProposedContentOffsetWithScrollingVelocity(forProposedContentOffset: CGPoint, withScrollingVelocity: CGPoint): CGPoint;
  }

  // interface
  class NSCollectionViewLayoutAttributes extends NSObject /* implements NSCopying */ {
    static layoutAttributesForDecorationViewOfKindWithIndexPath(forDecorationViewOfKind: string, with_: NSIndexPath): NSCollectionViewLayoutAttributes;
    static layoutAttributesForInterItemGapBeforeIndexPath(forInterItemGapBefore: NSIndexPath): NSCollectionViewLayoutAttributes;
    static layoutAttributesForItemWithIndexPath(forItemWith: NSIndexPath): NSCollectionViewLayoutAttributes;
    static layoutAttributesForSupplementaryViewOfKindWithIndexPath(forSupplementaryViewOfKind: string, with_: NSIndexPath): NSCollectionViewLayoutAttributes;
    alpha: number;
    setAlpha(_: number) // property
    frame: CGRect;
    setFrame(_: CGRect) // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    indexPath: NSIndexPath;
    setIndexPath(_: NSIndexPath) // property
    representedElementCategory: NSCollectionElementCategory; // property
    representedElementKind: string; // property
    size: CGSize;
    setSize(_: CGSize) // property
    zIndex: number;
    setZIndex(_: number) // property
  }

  // interface
  class NSCollectionViewLayoutInvalidationContext extends NSObject {
    contentOffsetAdjustment: CGPoint;
    setContentOffsetAdjustment(_: CGPoint) // property
    contentSizeAdjustment: CGSize;
    setContentSizeAdjustment(_: CGSize) // property
    invalidateDataSourceCounts: boolean; // property
    invalidateEverything: boolean; // property
    invalidatedDecorationIndexPaths: Map<string, NSSet<IndexPath>>; // property
    invalidatedItemIndexPaths: NSSet<IndexPath>; // property
    invalidatedSupplementaryIndexPaths: Map<string, NSSet<IndexPath>>; // property
    invalidateDecorationElementsWithOfKindAt(ofKind: string, at: NSSet<IndexPath>): void;
    invalidateItemsWithAt(at: NSSet<IndexPath>): void;
    invalidateSupplementaryElementsWithOfKindAt(ofKind: string, at: NSSet<IndexPath>): void;
  }

  interface NSCollectionViewPrefetching extends NSObject {
    // instance method
    collectionViewPrefetchItemsAtIndexPaths(_: NSCollectionView, prefetchItemsAt: NSIndexPath[]): void;
    // instance method
    collectionViewCancelPrefetchingForItemsAtIndexPaths?(_: NSCollectionView, cancelPrefetchingForItemsAt: NSIndexPath[]): void;
  }

  interface NSCollectionViewSectionHeaderView extends NSCollectionViewElement {
    sectionCollapseButton?: NSButton;
    setSectionCollapseButton(_: NSButton) // property
  }

  // interface
  class NSCollectionViewTransitionLayout extends NSCollectionViewLayout {
    currentLayout: NSCollectionViewLayout; // property
    nextLayout: NSCollectionViewLayout; // property
    transitionProgress: number;
    setTransitionProgress(_: number) // property
    static createWithCurrentLayoutNextLayout(currentLayout: NSCollectionViewLayout, nextLayout: NSCollectionViewLayout): NSCollectionViewTransitionLayout;
    updateValueForAnimatedKey(_: number, forAnimatedKey: string): void;
    valueForAnimatedKey(forAnimatedKey: string): number;
  }

  // interface
  class NSCollectionViewUpdateItem extends NSObject {
    indexPathAfterUpdate: NSIndexPath; // property
    indexPathBeforeUpdate: NSIndexPath; // property
    updateAction: NSCollectionView.UpdateAction; // property
  }

  // interface
  class NSColor extends NSObject /* implements NSCopying, NSPasteboardReading, NSPasteboardWriting, NSSecureCoding */ {
    CGColor: any; // property
    alphaComponent: number; // property
    blackComponent: number; // property
    blueComponent: number; // property
    brightnessComponent: number; // property
    catalogNameComponent: string; // property
    colorNameComponent: string; // property
    colorSpace: NSColorSpace; // property
    cyanComponent: number; // property
    greenComponent: number; // property
    hueComponent: number; // property
    localizedCatalogNameComponent: string; // property
    localizedColorNameComponent: string; // property
    magentaComponent: number; // property
    numberOfComponents: number; // property
    patternImage: NSImage; // property
    redComponent: number; // property
    saturationComponent: number; // property
    type: NSColor.ColorType; // property
    whiteComponent: number; // property
    yellowComponent: number; // property
    static alternateSelectedControlTextColor: NSColor; // property
    static alternatingContentBackgroundColors: NSColor[]; // property
    static blackColor: NSColor; // property
    static blueColor: NSColor; // property
    static brownColor: NSColor; // property
    static clearColor: NSColor; // property
    static controlAccentColor: NSColor; // property
    static controlBackgroundColor: NSColor; // property
    static controlColor: NSColor; // property
    static controlTextColor: NSColor; // property
    static currentControlTint: NSControlTint; // property
    static cyanColor: NSColor; // property
    static darkGrayColor: NSColor; // property
    static disabledControlTextColor: NSColor; // property
    static findHighlightColor: NSColor; // property
    static grayColor: NSColor; // property
    static greenColor: NSColor; // property
    static gridColor: NSColor; // property
    static headerTextColor: NSColor; // property
    static highlightColor: NSColor; // property
    static ignoresAlpha: boolean;
    setIgnoresAlpha(_: boolean) // property
    static keyboardFocusIndicatorColor: NSColor; // property
    static labelColor: NSColor; // property
    static lightGrayColor: NSColor; // property
    static linkColor: NSColor; // property
    static magentaColor: NSColor; // property
    static orangeColor: NSColor; // property
    static placeholderTextColor: NSColor; // property
    static purpleColor: NSColor; // property
    static quaternaryLabelColor: NSColor; // property
    static redColor: NSColor; // property
    static scrubberTexturedBackgroundColor: NSColor; // property
    static secondaryLabelColor: NSColor; // property
    static selectedContentBackgroundColor: NSColor; // property
    static selectedControlColor: NSColor; // property
    static selectedControlTextColor: NSColor; // property
    static selectedMenuItemTextColor: NSColor; // property
    static selectedTextBackgroundColor: NSColor; // property
    static selectedTextColor: NSColor; // property
    static separatorColor: NSColor; // property
    static shadowColor: NSColor; // property
    static systemBlueColor: NSColor; // property
    static systemBrownColor: NSColor; // property
    static systemGrayColor: NSColor; // property
    static systemGreenColor: NSColor; // property
    static systemIndigoColor: NSColor; // property
    static systemOrangeColor: NSColor; // property
    static systemPinkColor: NSColor; // property
    static systemPurpleColor: NSColor; // property
    static systemRedColor: NSColor; // property
    static systemTealColor: NSColor; // property
    static systemYellowColor: NSColor; // property
    static tertiaryLabelColor: NSColor; // property
    static textBackgroundColor: NSColor; // property
    static textColor: NSColor; // property
    static underPageBackgroundColor: NSColor; // property
    static unemphasizedSelectedContentBackgroundColor: NSColor; // property
    static unemphasizedSelectedTextBackgroundColor: NSColor; // property
    static unemphasizedSelectedTextColor: NSColor; // property
    static whiteColor: NSColor; // property
    static windowBackgroundColor: NSColor; // property
    static windowFrameTextColor: NSColor; // property
    static yellowColor: NSColor; // property
    blendedColorWithFractionOfColor(withFraction: number, of: NSColor): NSColor;
    colorUsingColorSpace(_: NSColorSpace): NSColor;
    colorUsingType(_: NSColor.ColorType): NSColor;
    colorWithAlphaComponent(_: number): NSColor;
    colorWithSystemEffect(_: NSColor.SystemEffect): NSColor;
    drawSwatchInRect(in_: CGRect): void;
    getComponents(_: number): void;
    getCyanMagentaYellowBlackAlpha(_?: number, magenta?: number, yellow?: number, black?: number, alpha?: number): void;
    getHueSaturationBrightnessAlpha(_?: number, saturation?: number, brightness?: number, alpha?: number): void;
    getRedGreenBlueAlpha(_?: number, green?: number, blue?: number, alpha?: number): void;
    getWhiteAlpha(_?: number, alpha?: number): void;
    highlightWithLevel(withLevel: number): NSColor;
    set(): void;
    setFill(): void;
    setStroke(): void;
    shadowWithLevel(withLevel: number): NSColor;
    writeToPasteboard(to: NSPasteboard): void;
  }

  interface NSColorChanging extends NSObject {
    // instance method
    changeColor(_?: NSColorPanel): void;
  }

  // interface
  class NSColorList extends NSObject /* implements NSSecureCoding */ {
    allKeys: string[]; // property
    isEditable: boolean; // property
    name: string; // property
    static availableColorLists: NSColorList[]; // property
    colorWithKey(withKey: string): NSColor;
    static createWithName(name: string): NSColorList;
    static createWithNameFromFile(name: string, fromFile?: string): NSColorList;
    insertColorKeyAtIndex(_: NSColor, key: string, at: number): void;
    removeColorWithKey(withKey: string): void;
    removeFile(): void;
    setColorForKey(_: NSColor, forKey: string): void;
    writeToURLError(error?: NSURL): boolean;
  }

  // interface
  class NSColorPanel extends NSPanel {
    static dragColorWithEventFromView(_: NSColor, with_: NSEvent, from: NSView): boolean;
    static setPickerMask(_: NSColorPanel.Options): void;
    static setPickerMode(_: NSColorPanel.Mode): void;
    accessoryView: NSView;
    setAccessoryView(_: NSView) // property
    alpha: number; // property
    color: NSColor;
    setColor(_: NSColor) // property
    isContinuous: boolean;
    setContinuous(_: boolean) // property
    mode: NSColorPanel.Mode;
    setMode(_: NSColorPanel.Mode) // property
    showsAlpha: boolean;
    setShowsAlpha(_: boolean) // property
    static sharedColorPanel: NSColorPanel; // property
    static sharedColorPanelExists: boolean; // property
    attachColorList(_: NSColorList): void;
    detachColorList(_: NSColorList): void;
    setAction(_?: string): void;
    setTarget(_?: any): void;
  }

  // interface
  class NSColorPicker extends NSObject /* implements NSColorPickingDefault */ {
    buttonToolTip: string; // property
    colorPanel: NSColorPanel; // property
    minContentSize: CGSize; // property
    provideNewButtonImage: NSImage; // property
  }

  // interface
  class NSColorPickerTouchBarItem extends NSTouchBarItem {
    static colorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
    static colorPickerWithIdentifierButtonImage(withIdentifier: string, buttonImage: NSImage): NSColorPickerTouchBarItem;
    static strokeColorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
    static textColorPickerWithIdentifier(withIdentifier: string): NSColorPickerTouchBarItem;
    action: string;
    setAction(_: string) // property
    allowedColorSpaces: NSColorSpace[];
    setAllowedColorSpaces(_: NSColorSpace[]) // property
    color: NSColor;
    setColor(_: NSColor) // property
    colorList: NSColorList;
    setColorList(_: NSColorList) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    showsAlpha: boolean;
    setShowsAlpha(_: boolean) // property
    target: any;
    setTarget(_: any) // property
  }

  interface NSColorPickingCustom extends NSColorPickingDefault {
    // instance method
    currentMode(): NSColorPanel.Mode;
    // instance method
    provideNewView(_: boolean): NSView;
    // instance method
    setColor(_: NSColor): void;
    // instance method
    supportsMode(_: NSColorPanel.Mode): boolean;
  }

  interface NSColorPickingDefault {
    provideNewButtonImage: NSImage; // property
    buttonToolTip: string; // property
    minContentSize: CGSize; // property
    // instance method
    alphaControlAddedOrRemoved(_?: any): void;
    // instance method
    attachColorList(_: NSColorList): void;
    // instance method
    detachColorList(_: NSColorList): void;
    // instance method
    insertNewButtonImageIn(_: NSImage, in_: NSButtonCell): void;
    // instance method
    setMode(_: NSColorPanel.Mode): void;
    // instance method
    viewSizeChanged(_?: any): void;
  }

  // interface
  class NSColorSampler extends NSObject {
    showWithSelectionHandler(selectionHandler?: (p1: NSColor) => void): void;
  }

  // interface
  class NSColorSpace extends NSObject /* implements NSSecureCoding */ {
    static availableColorSpacesWithModel(with_: NSColorSpace.Model): NSColorSpace[];
    CGColorSpace: any; // property
    ICCProfileData: NSData; // property
    colorSpaceModel: NSColorSpace.Model; // property
    colorSyncProfile: any; // property
    localizedName: string; // property
    numberOfColorComponents: number; // property
    static adobeRGB1998ColorSpace: NSColorSpace; // property
    static deviceCMYKColorSpace: NSColorSpace; // property
    static deviceGrayColorSpace: NSColorSpace; // property
    static deviceRGBColorSpace: NSColorSpace; // property
    static displayP3ColorSpace: NSColorSpace; // property
    static extendedGenericGamma22GrayColorSpace: NSColorSpace; // property
    static extendedSRGBColorSpace: NSColorSpace; // property
    static genericCMYKColorSpace: NSColorSpace; // property
    static genericGamma22GrayColorSpace: NSColorSpace; // property
    static genericGrayColorSpace: NSColorSpace; // property
    static genericRGBColorSpace: NSColorSpace; // property
    static sRGBColorSpace: NSColorSpace; // property
    static createWithCGColorSpace(CGColorSpace: any): NSColorSpace;
    static createWithColorSyncProfile(colorSyncProfile: any): NSColorSpace;
    static createWithICCProfileData(ICCProfileData: NSData): NSColorSpace;
  }

  // export declare function NSColorSpaceFromDepth(depth: NSWindow.Depth): string;

  // interface
  class NSColorWell extends NSControl {
    isActive: boolean; // property
    isBordered: boolean;
    setBordered(_: boolean) // property
    color: NSColor;
    setColor(_: NSColor) // property
    activate(_: boolean): void;
    deactivate(): void;
    drawWellInside(inside: CGRect): void;
    takeColorFrom(_?: any): void;
  }

  // interface
  class NSComboBox extends NSTextField {
    isButtonBordered: boolean;
    setButtonBordered(_: boolean) // property
    completes: boolean;
    setCompletes(_: boolean) // property
    dataSource: NSComboBoxDataSource;
    setDataSource(_: NSComboBoxDataSource) // property
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean) // property
    indexOfSelectedItem: number; // property
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize) // property
    itemHeight: number;
    setItemHeight(_: number) // property
    numberOfItems: number; // property
    numberOfVisibleItems: number;
    setNumberOfVisibleItems(_: number) // property
    objectValueOfSelectedItem: any; // property
    objectValues: any[]; // property
    usesDataSource: boolean;
    setUsesDataSource(_: boolean) // property
    addItemWithObjectValue(withObjectValue: any): void;
    addItemsWithObjectValues(withObjectValues: any[]): void;
    deselectItemAtIndex(at: number): void;
    indexOfItemWithObjectValue(withObjectValue: any): number;
    insertItemWithObjectValueAtIndex(withObjectValue: any, at: number): void;
    itemObjectValueAtIndex(at: number): any;
    noteNumberOfItemsChanged(): void;
    reloadData(): void;
    removeAllItems(): void;
    removeItemAtIndex(at: number): void;
    removeItemWithObjectValue(withObjectValue: any): void;
    scrollItemAtIndexToTop(_: number): void;
    scrollItemAtIndexToVisible(_: number): void;
    selectItemAtIndex(at: number): void;
    selectItemWithObjectValue(withObjectValue?: any): void;
  }

  // interface
  class NSComboBoxCell extends NSTextFieldCell {
    isButtonBordered: boolean;
    setButtonBordered(_: boolean) // property
    completes: boolean;
    setCompletes(_: boolean) // property
    dataSource: NSComboBoxCellDataSource;
    setDataSource(_: NSComboBoxCellDataSource) // property
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean) // property
    indexOfSelectedItem: number; // property
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize) // property
    itemHeight: number;
    setItemHeight(_: number) // property
    numberOfItems: number; // property
    numberOfVisibleItems: number;
    setNumberOfVisibleItems(_: number) // property
    objectValueOfSelectedItem: any; // property
    objectValues: any[]; // property
    usesDataSource: boolean;
    setUsesDataSource(_: boolean) // property
    addItemWithObjectValue(withObjectValue: any): void;
    addItemsWithObjectValues(withObjectValues: any[]): void;
    completedString(_: string): string;
    deselectItemAtIndex(at: number): void;
    indexOfItemWithObjectValue(withObjectValue: any): number;
    insertItemWithObjectValueAtIndex(withObjectValue: any, at: number): void;
    itemObjectValueAtIndex(at: number): any;
    noteNumberOfItemsChanged(): void;
    reloadData(): void;
    removeAllItems(): void;
    removeItemAtIndex(at: number): void;
    removeItemWithObjectValue(withObjectValue: any): void;
    scrollItemAtIndexToTop(_: number): void;
    scrollItemAtIndexToVisible(_: number): void;
    selectItemAtIndex(at: number): void;
    selectItemWithObjectValue(withObjectValue?: any): void;
  }

  interface NSComboBoxCellDataSource extends NSObject {
    // instance method
    comboBoxCellObjectValueForItemAtIndex?(_: NSComboBoxCell, objectValueForItemAt: number): any;
    // instance method
    comboBoxCellCompletedString?(_: NSComboBoxCell, completedString: string): string;
    // instance method
    comboBoxCellIndexOfItemWithStringValue?(_: NSComboBoxCell, indexOfItemWithStringValue: string): number;
    // instance method
    numberOfItemsInComboBoxCell?(in_: NSComboBoxCell): number;
  }

  interface NSComboBoxDataSource extends NSObject {
    // instance method
    comboBoxObjectValueForItemAtIndex?(_: NSComboBox, objectValueForItemAt: number): any;
    // instance method
    comboBoxCompletedString?(_: NSComboBox, completedString: string): string;
    // instance method
    comboBoxIndexOfItemWithStringValue?(_: NSComboBox, indexOfItemWithStringValue: string): number;
    // instance method
    numberOfItemsInComboBox?(in_: NSComboBox): number;
  }

  interface NSComboBoxDelegate extends NSTextFieldDelegate {
    // instance method
    comboBoxSelectionDidChange?(_: NSNotification): void;
    // instance method
    comboBoxSelectionIsChanging?(_: NSNotification): void;
    // instance method
    comboBoxWillDismiss?(_: NSNotification): void;
    // instance method
    comboBoxWillPopUp?(_: NSNotification): void;
  }

  // interface
  class NSControl extends NSView {
    action: string;
    setAction(_: string) // property
    alignment: NSTextAlignment;
    setAlignment(_: NSTextAlignment) // property
    allowsExpansionToolTips: boolean;
    setAllowsExpansionToolTips(_: boolean) // property
    attributedStringValue: NSAttributedString;
    setAttributedStringValue(_: NSAttributedString) // property
    baseWritingDirection: NSWritingDirection;
    setBaseWritingDirection(_: NSWritingDirection) // property
    cell: NSCell;
    setCell(_: NSCell) // property
    isContinuous: boolean;
    setContinuous(_: boolean) // property
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize) // property
    doubleValue: number;
    setDoubleValue(_: number) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    floatValue: number;
    setFloatValue(_: number) // property
    font: NSFont;
    setFont(_: NSFont) // property
    formatter: Formatter;
    setFormatter(_: Formatter) // property
    isHighlighted: boolean;
    setHighlighted(_: boolean) // property
    ignoresMultiClick: boolean;
    setIgnoresMultiClick(_: boolean) // property
    intValue: number;
    setIntValue(_: number) // property
    integerValue: number;
    setIntegerValue(_: number) // property
    lineBreakMode: NSLineBreakMode;
    setLineBreakMode(_: NSLineBreakMode) // property
    objectValue: any;
    setObjectValue(_: any) // property
    refusesFirstResponder: boolean;
    setRefusesFirstResponder(_: boolean) // property
    stringValue: string;
    setStringValue(_: string) // property
    target: any;
    setTarget(_: any) // property
    usesSingleLineMode: boolean;
    setUsesSingleLineMode(_: boolean) // property
    static cellClass: typeof NSObject;
    setCellClass(_: typeof NSObject) // property
    abortEditing(): boolean;
    currentEditor(): NSText;
    drawCell(_: NSCell): void;
    drawCellInside(_: NSCell): void;
    drawWithExpansionFrameInView(withExpansionFrame: CGRect, in_: NSView): void;
    editWithFrameEditorDelegateEvent(withFrame: CGRect, editor: NSText, delegate?: any, event?: NSEvent): void;
    endEditing(_: NSText): void;
    expansionFrameWithFrame(withFrame: CGRect): CGRect;
    invalidateIntrinsicContentSizeForCell(for_: NSCell): void;
    performClick(_?: any): void;
    selectCell(_: NSCell): void;
    selectWithFrameEditorDelegateStartLength(withFrame: CGRect, editor: NSText, delegate?: any, start?: number, length?: number): void;
    selectedCell(): NSCell;
    selectedTag(): number;
    sendActionTo(_?: string, to?: any): boolean;
    sendActionOn(on: NSEvent.EventTypeMask): number;
    sizeThatFits(_: CGSize): CGSize;
    sizeToFit(): void;
    takeDoubleValueFrom(_?: any): void;
    takeFloatValueFrom(_?: any): void;
    takeIntValueFrom(_?: any): void;
    takeIntegerValueFrom(_?: any): void;
    takeObjectValueFrom(_?: any): void;
    takeStringValueFrom(_?: any): void;
    updateCell(_: NSCell): void;
    updateCellInside(_: NSCell): void;
    validateEditing(): void;
  }

  interface NSControlTextEditingDelegate extends NSObject {
    // instance method
    controlTextViewDoCommandBySelector?(_: NSControl, textView: NSTextView, doCommandBy: string): boolean;
    // instance method
    controlDidFailToFormatStringErrorDescription?(_: NSControl, didFailToFormatString: string, errorDescription?: string): boolean;
    // instance method
    controlDidFailToValidatePartialStringErrorDescription?(_: NSControl, didFailToValidatePartialString: string, errorDescription?: string): void;
    // instance method
    controlIsValidObject?(_: NSControl, isValidObject?: any): boolean;
    // instance method
    controlTextShouldBeginEditing?(_: NSControl, textShouldBeginEditing: NSText): boolean;
    // instance method
    controlTextShouldEndEditing?(_: NSControl, textShouldEndEditing: NSText): boolean;
    // instance method
    controlTextViewCompletionsForPartialWordRangeIndexOfSelectedItem?(_: NSControl, textView: NSTextView, completions: string[], forPartialWordRange: NSRange, indexOfSelectedItem: number): string[];
    // instance method
    controlTextDidBeginEditing?(_: NSNotification): void;
    // instance method
    controlTextDidChange?(_: NSNotification): void;
    // instance method
    controlTextDidEndEditing?(_: NSNotification): void;
  }

  // interface
  class NSController extends NSObject /* implements NSCoding, NSEditor, NSEditorRegistration */ {
    isEditing: boolean; // property
  }

  // export declare function NSCreateFileContentsPboardType(fileType: string): string;

  // export declare function NSCreateFilenamePboardType(fileType: string): string;

  // interface
  class NSCursor extends NSObject /* implements NSCoding */ {
    static hide(): void;
    static pop(): void;
    static setHiddenUntilMouseMoves(_: boolean): void;
    static unhide(): void;
    hotSpot: CGPoint; // property
    image: NSImage; // property
    static IBeamCursor: NSCursor; // property
    static IBeamCursorForVerticalLayout: NSCursor; // property
    static arrowCursor: NSCursor; // property
    static closedHandCursor: NSCursor; // property
    static contextualMenuCursor: NSCursor; // property
    static crosshairCursor: NSCursor; // property
    static currentCursor: NSCursor; // property
    static currentSystemCursor: NSCursor; // property
    static disappearingItemCursor: NSCursor; // property
    static dragCopyCursor: NSCursor; // property
    static dragLinkCursor: NSCursor; // property
    static openHandCursor: NSCursor; // property
    static operationNotAllowedCursor: NSCursor; // property
    static pointingHandCursor: NSCursor; // property
    static resizeDownCursor: NSCursor; // property
    static resizeLeftCursor: NSCursor; // property
    static resizeLeftRightCursor: NSCursor; // property
    static resizeRightCursor: NSCursor; // property
    static resizeUpCursor: NSCursor; // property
    static resizeUpDownCursor: NSCursor; // property
    static createWithImageHotSpot(image: NSImage, hotSpot: CGPoint): NSCursor;
    pop(): void;
    push(): void;
    set(): void;
  }

  // interface
  class NSCustomImageRep extends NSImageRep {
    delegate: any; // property
    drawSelector: string; // property
    drawingHandler: (p1: CGRect) => boolean; // property
    static createWithDrawSelectorDelegate(drawSelector: string, delegate: any): NSCustomImageRep;
    static createWithSizeFlippedDrawingHandler(size: CGSize, flipped: boolean, drawingHandler: (p1: CGRect) => boolean): NSCustomImageRep;
  }

  // interface
  class NSCustomTouchBarItem extends NSTouchBarItem {
  }

  // interface
  class NSDataAsset extends NSObject /* implements NSCopying */ {
    data: NSData; // property
    name: string; // property
    typeIdentifier: string; // property
    static createWithName(name: string): NSDataAsset;
    static createWithNameBundle(name: string, bundle: Bundle): NSDataAsset;
  }

  // interface
  class NSDatePicker extends NSControl {
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    isBezeled: boolean;
    setBezeled(_: boolean) // property
    isBordered: boolean;
    setBordered(_: boolean) // property
    calendar: NSCalendar;
    setCalendar(_: NSCalendar) // property
    datePickerElements: NSDatePicker.ElementFlags;
    setDatePickerElements(_: NSDatePicker.ElementFlags) // property
    datePickerMode: NSDatePicker.Mode;
    setDatePickerMode(_: NSDatePicker.Mode) // property
    datePickerStyle: NSDatePicker.Style;
    setDatePickerStyle(_: NSDatePicker.Style) // property
    dateValue: Date;
    setDateValue(_: Date) // property
    delegate: NSDatePickerCellDelegate;
    setDelegate(_: NSDatePickerCellDelegate) // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    maxDate: Date;
    setMaxDate(_: Date) // property
    minDate: Date;
    setMinDate(_: Date) // property
    presentsCalendarOverlay: boolean;
    setPresentsCalendarOverlay(_: boolean) // property
    textColor: NSColor;
    setTextColor(_: NSColor) // property
    timeInterval: number;
    setTimeInterval(_: number) // property
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone) // property
  }

  // interface
  class NSDatePickerCell extends NSActionCell {
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    calendar: NSCalendar;
    setCalendar(_: NSCalendar) // property
    datePickerElements: NSDatePicker.ElementFlags;
    setDatePickerElements(_: NSDatePicker.ElementFlags) // property
    datePickerMode: NSDatePicker.Mode;
    setDatePickerMode(_: NSDatePicker.Mode) // property
    datePickerStyle: NSDatePicker.Style;
    setDatePickerStyle(_: NSDatePicker.Style) // property
    dateValue: Date;
    setDateValue(_: Date) // property
    delegate: NSDatePickerCellDelegate;
    setDelegate(_: NSDatePickerCellDelegate) // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    maxDate: Date;
    setMaxDate(_: Date) // property
    minDate: Date;
    setMinDate(_: Date) // property
    textColor: NSColor;
    setTextColor(_: NSColor) // property
    timeInterval: number;
    setTimeInterval(_: number) // property
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone) // property
  }

  interface NSDatePickerCellDelegate extends NSObject {
    // instance method
    datePickerCellValidateProposedDateValueTimeInterval?(_: NSDatePickerCell, validateProposedDateValue: Date, timeInterval?: number): void;
  }

  // interface
  class NSDictionaryController extends NSArrayController {
    excludedKeys: string[];
    setExcludedKeys(_: string[]) // property
    includedKeys: string[];
    setIncludedKeys(_: string[]) // property
    initialKey: string;
    setInitialKey(_: string) // property
    initialValue: any;
    setInitialValue(_: any) // property
    localizedKeyDictionary: Map<string, string>;
    setLocalizedKeyDictionary(_: Map<string, string>) // property
    localizedKeyTable: string;
    setLocalizedKeyTable(_: string) // property
  }

  // interface
  class NSDictionaryControllerKeyValuePair extends NSObject {
    isExplicitlyIncluded: boolean; // property
    key: string;
    setKey(_: string) // property
    localizedKey: string;
    setLocalizedKey(_: string) // property
    value: any;
    setValue(_: any) // property
  }

  // interface
  class NSDiffableDataSourceSnapshotReference<SectionIdentifierType, ItemIdentifierType> extends NSObject /* implements NSCopying */ {
    itemIdentifiers: ItemIdentifierType[]; // property
    numberOfItems: number; // property
    numberOfSections: number; // property
    sectionIdentifiers: SectionIdentifierType[]; // property
    appendItemsWithIdentifiers(_: ItemIdentifierType[]): void;
    appendItemsWithIdentifiersIntoSectionWithIdentifier(_: ItemIdentifierType[], intoSectionWithIdentifier: SectionIdentifierType): void;
    appendSectionsWithIdentifiers(_: any[]): void;
    deleteAllItems(): void;
    deleteItemsWithIdentifiers(_: ItemIdentifierType[]): void;
    deleteSectionsWithIdentifiers(_: SectionIdentifierType[]): void;
    indexOfItemIdentifier(_: ItemIdentifierType): number;
    indexOfSectionIdentifier(_: SectionIdentifierType): number;
    insertItemsWithIdentifiersAfterItemWithIdentifier(_: ItemIdentifierType[], afterItemWithIdentifier: ItemIdentifierType): void;
    insertItemsWithIdentifiersBeforeItemWithIdentifier(_: ItemIdentifierType[], beforeItemWithIdentifier: ItemIdentifierType): void;
    insertSectionsWithIdentifiersAfterSectionWithIdentifier(_: SectionIdentifierType[], afterSectionWithIdentifier: SectionIdentifierType): void;
    insertSectionsWithIdentifiersBeforeSectionWithIdentifier(_: SectionIdentifierType[], beforeSectionWithIdentifier: SectionIdentifierType): void;
    itemIdentifiersInSectionWithIdentifier(_: SectionIdentifierType): ItemIdentifierType[];
    moveItemWithIdentifierAfterItemWithIdentifier(_: ItemIdentifierType, afterItemWithIdentifier: ItemIdentifierType): void;
    moveItemWithIdentifierBeforeItemWithIdentifier(_: ItemIdentifierType, beforeItemWithIdentifier: ItemIdentifierType): void;
    moveSectionWithIdentifierAfterSectionWithIdentifier(_: SectionIdentifierType, afterSectionWithIdentifier: SectionIdentifierType): void;
    moveSectionWithIdentifierBeforeSectionWithIdentifier(_: SectionIdentifierType, beforeSectionWithIdentifier: SectionIdentifierType): void;
    numberOfItemsInSection(_: SectionIdentifierType): number;
    reloadItemsWithIdentifiers(_: ItemIdentifierType[]): void;
    reloadSectionsWithIdentifiers(_: SectionIdentifierType[]): void;
    sectionIdentifierForSectionContainingItemIdentifier(_: ItemIdentifierType): SectionIdentifierType;
  }

  // struct
  interface NSDirectionalEdgeInsets {
    top: number;
    leading: number;
    bottom: number;
    trailing: number;
  }

  // interface
  class NSDockTile extends NSObject {
    badgeLabel: string;
    setBadgeLabel(_: string) // property
    contentView: NSView;
    setContentView(_: NSView) // property
    owner: any; // property
    showsApplicationBadge: boolean;
    setShowsApplicationBadge(_: boolean) // property
    size: CGSize; // property
    display(): void;
  }

  interface NSDockTilePlugIn extends NSObject {
    // instance method
    dockMenu?(): NSMenu;
    // instance method
    setDockTile(_?: NSDockTile): void;
  }

  // interface
  class NSDocument extends NSObject /* implements NSEditorRegistration, NSFilePresenter, NSMenuItemValidation, NSUserInterfaceValidations, NSUserActivityRestoring */ {
    static canConcurrentlyReadDocumentsOfType(ofType: string): boolean;
    static isNativeType(_: string): boolean;
    PDFPrintOperation: NSPrintOperation; // property
    allowsDocumentSharing: boolean; // property
    autosavedContentsFileURL: NSURL;
    setAutosavedContentsFileURL(_: NSURL) // property
    autosavingFileType: string; // property
    autosavingIsImplicitlyCancellable: boolean; // property
    backupFileURL: NSURL; // property
    isBrowsingVersions: boolean; // property
    displayName: string;
    setDisplayName(_: string) // property
    isDocumentEdited: boolean; // property
    isDraft: boolean;
    setDraft(_: boolean) // property
    isEntireFileLoaded: boolean; // property
    fileModificationDate: Date;
    setFileModificationDate(_: Date) // property
    fileNameExtensionWasHiddenInLastRunSavePanel: boolean; // property
    fileType: string;
    setFileType(_: string) // property
    fileTypeFromLastRunSavePanel: string; // property
    fileURL: NSURL;
    setFileURL(_: NSURL) // property
    hasUnautosavedChanges: boolean; // property
    hasUndoManager: boolean;
    setHasUndoManager(_: boolean) // property
    isInViewingMode: boolean; // property
    keepBackupFile: boolean; // property
    lastComponentOfFileName: string;
    setLastComponentOfFileName(_: string) // property
    isLocked: boolean; // property
    printInfo: NSPrintInfo;
    setPrintInfo(_: NSPrintInfo) // property
    shouldRunSavePanelWithAccessoryView: boolean; // property
    undoManager: UndoManager;
    setUndoManager(_: UndoManager) // property
    userActivity: NSUserActivity;
    setUserActivity(_: NSUserActivity) // property
    windowControllers: NSWindowController[]; // property
    windowForSheet: NSWindow; // property
    windowNibName: string; // property
    static autosavesDrafts: boolean; // property
    static autosavesInPlace: boolean; // property
    static preservesVersions: boolean; // property
    static readableTypes: string[]; // property
    static restorableStateKeyPaths: string[]; // property
    static usesUbiquitousStorage: boolean; // property
    static writableTypes: string[]; // property
    addWindowController(_: NSWindowController): void;
    autosaveDocumentWithDelegateDidAutosaveSelectorContextInfo(withDelegate?: any, didAutosave?: string, contextInfo?: any): void;
    autosaveWithWithImplicitCancellabilityCompletionHandler(withImplicitCancellability: boolean, completionHandler?: (p1: NSError) => void): void;
    browseDocumentVersions(_?: any): void;
    canAsynchronouslyWriteToURLOfTypeForSaveOperation(to: NSURL, ofType: string, for_: NSDocument.SaveOperationType): boolean;
    canCloseDocumentWithDelegateShouldCloseSelectorContextInfo(withDelegate: any, shouldClose?: string, contextInfo?: any): void;
    changeCountTokenForSaveOperation(for_: NSDocument.SaveOperationType): any;
    checkAutosavingSafetyAndReturnError(): boolean;
    close(): void;
    continueActivity(_: () => void): void;
    continueAsynchronousWorkOnMainThread(_: () => void): void;
    dataOfTypeError(error: string): NSData;
    defaultDraftName(): string;
    duplicateAndReturnError(): NSDocument;
    duplicateDocument(_?: any): void;
    duplicateDocumentWithDelegateDidDuplicateSelectorContextInfo(withDelegate?: any, didDuplicate?: string, contextInfo?: any): void;
    encodeRestorableStateWithCoder(with_: NSCoder): void;
    encodeRestorableStateWithCoderBackgroundQueue(with_: NSCoder, backgroundQueue: OperationQueue): void;
    fileAttributesToWriteToURLOfTypeForSaveOperationOriginalContentsURLError(ofType: NSURL, forSaveOperation: string, originalContentsURL: NSDocument.SaveOperationType, error?: NSURL): Map<string, any>;
    fileNameExtensionForTypeSaveOperation(forType: string, saveOperation: NSDocument.SaveOperationType): string;
    fileWrapperOfTypeError(error: string): FileWrapper;
    handleCloseScriptCommand(_: NSCloseCommand): any;
    handlePrintScriptCommand(_: NSScriptCommand): any;
    handleSaveScriptCommand(_: NSScriptCommand): any;
    static createWithForURLWithContentsOfURLOfType(forURL?: NSURL, withContentsOfURL?: NSURL, ofType?: string): NSDocument;
    static createWithContentsOfURLOfType(contentsOfURL: NSURL, ofType: string): NSDocument;
    static createWithType(type: string): NSDocument;
    invalidateRestorableState(): void;
    lockDocument(_?: any): void;
    lockWithCompletionHandler(completionHandler?: (p1: boolean) => void): void;
    lockWithCompletionHandler(completionHandler?: (p1: NSError) => void): void;
    makeWindowControllers(): void;
    moveDocument(_?: any): void;
    moveDocumentToUbiquityContainer(_?: any): void;
    moveWithCompletionHandler(completionHandler?: (p1: boolean) => void): void;
    moveWithToCompletionHandler(to: NSURL, completionHandler?: (p1: NSError) => void): void;
    performActivityWithWithSynchronousWaitingUsing(withSynchronousWaiting: boolean, using: (p1: () => void) => void): void;
    performAsynchronousFileAccess(_: (p1: () => void) => void): void;
    performSynchronousFileAccess(_: () => void): void;
    preparePageLayout(_: NSPageLayout): boolean;
    prepareSavePanel(_: NSSavePanel): boolean;
    prepareSharingServicePicker(_: NSSharingServicePicker): void;
    presentError(_: NSError): boolean;
    presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(_: NSError, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
    printDocument(_?: any): void;
    printDocumentWithSettingsShowPrintPanelDelegateDidPrintSelectorContextInfo(withSettings: Map<string, any>, showPrintPanel: boolean, delegate?: any, didPrint?: string, contextInfo?: any): void;
    printOperationWithSettingsError(error: Map<string, any>): NSPrintOperation;
    readFromDataOfTypeError(ofType: NSData, error: string): boolean;
    readFromFileWrapperOfTypeError(ofType: FileWrapper, error: string): boolean;
    readFromURLOfTypeError(ofType: NSURL, error: string): boolean;
    removeWindowController(_: NSWindowController): void;
    renameDocument(_?: any): void;
    restoreWindowWithWithIdentifierStateCompletionHandler(withIdentifier: string, state: NSCoder, completionHandler?: (p1: NSWindow, p2: NSError) => void): void;
    restoreStateWithCoder(with_: NSCoder): void;
    revertDocumentToSaved(_?: any): void;
    revertToContentsOfURLOfTypeError(ofType: NSURL, error: string): boolean;
    runModalPageLayoutWithPrintInfoDelegateDidRunSelectorContextInfo(with_: NSPrintInfo, delegate?: any, didRun?: string, contextInfo?: any): void;
    runModalPrintOperationDelegateDidRunSelectorContextInfo(_: NSPrintOperation, delegate?: any, didRun?: string, contextInfo?: any): void;
    runModalSavePanelForSaveOperationDelegateDidSaveSelectorContextInfo(for_: NSDocument.SaveOperationType, delegate?: any, didSave?: string, contextInfo?: any): void;
    runPageLayout(_?: any): void;
    saveDocument(_?: any): void;
    saveDocumentAs(_?: any): void;
    saveDocumentTo(_?: any): void;
    saveDocumentToPDF(_?: any): void;
    saveDocumentWithDelegateDidSaveSelectorContextInfo(withDelegate?: any, didSave?: string, contextInfo?: any): void;
    saveWithToOfTypeForCompletionHandler(to: NSURL, ofType: string, for_: NSDocument.SaveOperationType, completionHandler?: (p1: NSError) => void): void;
    saveToURLOfTypeForSaveOperationDelegateDidSaveSelectorContextInfo(to: NSURL, ofType: string, for_: NSDocument.SaveOperationType, delegate?: any, didSave?: string, contextInfo?: any): void;
    scheduleAutosaving(): void;
    setDisplayName(_?: string): void;
    setWindow(_?: NSWindow): void;
    shareWithWithCompletionHandler(with_: NSSharingService, completionHandler?: (p1: boolean) => void): void;
    shouldChangePrintInfo(_: NSPrintInfo): boolean;
    shouldCloseWindowControllerDelegateShouldCloseSelectorContextInfo(_: NSWindowController, delegate?: any, shouldClose?: string, contextInfo?: any): void;
    showWindows(): void;
    stopBrowsingVersionsWithCompletionHandler(completionHandler?: () => void): void;
    unblockUserInteraction(): void;
    unlockDocument(_?: any): void;
    unlockWithCompletionHandler(completionHandler?: (p1: boolean) => void): void;
    unlockWithCompletionHandler(completionHandler?: (p1: NSError) => void): void;
    updateChangeCount(_: NSDocument.ChangeType): void;
    updateChangeCountWithTokenForSaveOperation(withToken: any, for_: NSDocument.SaveOperationType): void;
    updateUserActivityState(_: NSUserActivity): void;
    willNotPresentError(_: NSError): void;
    willPresentError(_: NSError): NSError;
    windowControllerDidLoadNib(_: NSWindowController): void;
    windowControllerWillLoadNib(_: NSWindowController): void;
    writableTypesForSaveOperation(for_: NSDocument.SaveOperationType): string[];
    writeSafelyToURLOfTypeForSaveOperationError(ofType: NSURL, forSaveOperation: string, error: NSDocument.SaveOperationType): boolean;
    writeToURLOfTypeError(ofType: NSURL, error: string): boolean;
    writeToURLOfTypeForSaveOperationOriginalContentsURLError(ofType: NSURL, forSaveOperation: string, originalContentsURL: NSDocument.SaveOperationType, error?: NSURL): boolean;
  }

  // interface
  class NSDocumentController extends NSObject /* implements NSCoding, NSMenuItemValidation, NSUserInterfaceValidations, NSWindowRestoration */ {
    allowsAutomaticShareMenu: boolean; // property
    autosavingDelay: number;
    setAutosavingDelay(_: number) // property
    currentDirectory: string; // property
    currentDocument: NSDocument; // property
    defaultType: string; // property
    documentClassNames: string[]; // property
    documents: NSDocument[]; // property
    hasEditedDocuments: boolean; // property
    maximumRecentDocumentCount: number; // property
    recentDocumentURLs: NSURL[]; // property
    static sharedDocumentController: NSDocumentController; // property
    URLsFromRunningOpenPanel(): NSURL[];
    addDocument(_: NSDocument): void;
    beginOpenPanelForTypesCompletionHandler(_: NSOpenPanel, forTypes?: string[], completionHandler?: (p1: number) => void): void;
    beginOpenPanelWithCompletionHandler(completionHandler?: (p1: NSURL[]) => void): void;
    clearRecentDocuments(_?: any): void;
    closeAllDocumentsWithDelegateDidCloseAllSelectorContextInfo(withDelegate?: any, didCloseAllSelector?: string, contextInfo?: any): void;
    displayNameForType(forType: string): string;
    documentClassForType(forType: string): typeof NSObject;
    documentForURL(for_: NSURL): NSDocument;
    documentForWindow(for_: NSWindow): NSDocument;
    duplicateDocumentWithContentsOfURLCopyingDisplayNameError(copying: NSURL, displayName: boolean, error?: string): NSDocument;
    makeDocumentForURLWithContentsOfURLOfTypeError(withContentsOfURL?: NSURL, ofType?: NSURL, error?: string): NSDocument;
    makeDocumentWithContentsOfURLOfTypeError(ofType: NSURL, error: string): NSDocument;
    makeUntitledDocumentOfTypeError(error: string): NSDocument;
    newDocument(_?: any): void;
    noteNewRecentDocument(_: NSDocument): void;
    noteNewRecentDocumentURL(_: NSURL): void;
    openDocument(_?: any): void;
    openDocumentWithWithContentsOfDisplayCompletionHandler(withContentsOf: NSURL, display: boolean, completionHandler?: (p1: NSDocument, p2: boolean, p3: NSError) => void): void;
    openUntitledDocumentAndDisplayError(error: boolean): NSDocument;
    presentError(_: NSError): boolean;
    presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(_: NSError, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
    removeDocument(_: NSDocument): void;
    reopenDocumentForWithContentsOfDisplayCompletionHandler(for_?: NSURL, withContentsOf?: NSURL, display?: boolean, completionHandler?: (p1: NSDocument, p2: boolean, p3: NSError) => void): void;
    reviewUnsavedDocumentsWithAlertTitleCancellableDelegateDidReviewAllSelectorContextInfo(withAlertTitle?: string, cancellable?: boolean, delegate?: any, didReviewAllSelector?: string, contextInfo?: any): void;
    runModalOpenPanelForTypes(_: NSOpenPanel, forTypes?: string[]): number;
    saveAllDocuments(_?: any): void;
    standardShareMenuItem(): NSMenuItem;
    typeForContentsOfURLError(error: NSURL): string;
    willPresentError(_: NSError): NSError;
  }

  // export declare function NSDottedFrameRect(rect: CGRect): void;

  interface NSDraggingDestination extends NSObject {
    // instance method
    concludeDragOperation?(_?: NSDraggingInfo): void;
    // instance method
    draggingEnded?(_: NSDraggingInfo): void;
    // instance method
    draggingEntered?(_: NSDraggingInfo): NSDragOperation;
    // instance method
    draggingExited?(_?: NSDraggingInfo): void;
    // instance method
    draggingUpdated?(_: NSDraggingInfo): NSDragOperation;
    // instance method
    performDragOperation?(_: NSDraggingInfo): boolean;
    // instance method
    prepareForDragOperation?(_: NSDraggingInfo): boolean;
    // instance method
    updateDraggingItemsForDrag?(_?: NSDraggingInfo): void;
    // instance method
    wantsPeriodicDraggingUpdates?(): boolean;
  }

  // interface
  class NSDraggingImageComponent extends NSObject {
    static draggingImageComponentWithKey(key: string): NSDraggingImageComponent;
    contents: any;
    setContents(_: any) // property
    frame: CGRect;
    setFrame(_: CGRect) // property
    key: string;
    setKey(_: string) // property
    static createWithKey(key: string): NSDraggingImageComponent;
  }

  interface NSDraggingInfo extends NSObject {
    animatesToDestination: boolean;
    setAnimatesToDestination(_: boolean) // property
    draggedImage: NSImage; // property
    draggedImageLocation: CGPoint; // property
    draggingDestinationWindow: NSWindow; // property
    draggingFormation: NSDraggingFormation;
    setDraggingFormation(_: NSDraggingFormation) // property
    draggingLocation: CGPoint; // property
    draggingPasteboard: NSPasteboard; // property
    draggingSequenceNumber: number; // property
    draggingSource: any; // property
    draggingSourceOperationMask: NSDragOperation; // property
    numberOfValidItemsForDrop: number;
    setNumberOfValidItemsForDrop(_: number) // property
    springLoadingHighlight: NSSpringLoadingHighlight; // property
    // instance method
    enumerateDraggingItemsWithOptionsForClassesSearchOptionsUsing(options: NSDraggingItemEnumerationOptions, for_?: NSView, classes?: typeof NSObject[], searchOptions?: Map<string, any>, using?: (p1: NSDraggingItem, p2: number, p3: boolean) => void): void;
    // instance method
    resetSpringLoading(): void;
    // instance method
    slideDraggedImageTo(to: CGPoint): void;
  }

  // interface
  class NSDraggingItem extends NSObject {
    draggingFrame: CGRect;
    setDraggingFrame(_: CGRect) // property
    imageComponents: NSDraggingImageComponent[]; // property
    imageComponentsProvider: () => NSDraggingImageComponent[];
    setImageComponentsProvider(_: () => NSDraggingImageComponent[]) // property
    item: any; // property
    static createWithPasteboardWriter(pasteboardWriter: NSPasteboardWriting): NSDraggingItem;
    setDraggingFrameContents(_: CGRect, contents?: any): void;
  }

  // interface
  class NSDraggingSession extends NSObject {
    animatesToStartingPositionsOnCancelOrFail: boolean;
    setAnimatesToStartingPositionsOnCancelOrFail(_: boolean) // property
    draggingFormation: NSDraggingFormation;
    setDraggingFormation(_: NSDraggingFormation) // property
    draggingLeaderIndex: number;
    setDraggingLeaderIndex(_: number) // property
    draggingLocation: CGPoint; // property
    draggingPasteboard: NSPasteboard; // property
    draggingSequenceNumber: number; // property
    enumerateDraggingItemsWithOptionsForClassesSearchOptionsUsing(options: NSDraggingItemEnumerationOptions, for_?: NSView, classes?: typeof NSObject[], searchOptions?: Map<string, any>, using?: (p1: NSDraggingItem, p2: number, p3: boolean) => void): void;
  }

  interface NSDraggingSource extends NSObject {
    // instance method
    draggingSessionSourceOperationMaskForDraggingContext(_: NSDraggingSession, sourceOperationMaskFor: NSDraggingContext): NSDragOperation;
    // instance method
    draggingSessionWillBeginAtPoint?(_: NSDraggingSession, willBeginAt: CGPoint): void;
    // instance method
    draggingSessionMovedToPoint?(_: NSDraggingSession, movedTo: CGPoint): void;
    // instance method
    draggingSessionEndedAtPointOperation?(_: NSDraggingSession, endedAt: CGPoint, operation: NSDragOperation): void;
    // instance method
    ignoreModifierKeysForDraggingSession?(for_: NSDraggingSession): boolean;
  }

  // export declare function NSDrawBitmap(rect: CGRect, width: number, height: number, bps: number, spp: number, bpp: number, bpr: number, isPlanar: boolean, hasAlpha: boolean, colorSpaceName: string, data: string): void;

  // export declare function NSDrawButton(rect: CGRect, clipRect: CGRect): void;

  // export declare function NSDrawColorTiledRects(boundsRect: CGRect, clipRect: CGRect, sides: NSRectEdge, colors: NSColor, count: number): CGRect;

  // export declare function NSDrawDarkBezel(rect: CGRect, clipRect: CGRect): void;

  // export declare function NSDrawGrayBezel(rect: CGRect, clipRect: CGRect): void;

  // export declare function NSDrawGroove(rect: CGRect, clipRect: CGRect): void;

  // export declare function NSDrawLightBezel(rect: CGRect, clipRect: CGRect): void;

  // export declare function NSDrawNinePartImage(frame: CGRect, topLeftCorner: NSImage, topEdgeFill: NSImage, topRightCorner: NSImage, leftEdgeFill: NSImage, centerFill: NSImage, rightEdgeFill: NSImage, bottomLeftCorner: NSImage, bottomEdgeFill: NSImage, bottomRightCorner: NSImage, op: NSCompositingOperation, alphaFraction: number, flipped: boolean): void;

  // export declare function NSDrawThreePartImage(frame: CGRect, startCap: NSImage, centerFill: NSImage, endCap: NSImage, vertical: boolean, op: NSCompositingOperation, alphaFraction: number, flipped: boolean): void;

  // export declare function NSDrawTiledRects(boundsRect: CGRect, clipRect: CGRect, sides: NSRectEdge, grays: number, count: number): CGRect;

  // export declare function NSDrawWhiteBezel(rect: CGRect, clipRect: CGRect): void;

  // export declare function NSDrawWindowBackground(rect: CGRect): void;

  interface NSDrawerDelegate extends NSObject {
  }

  // interface
  class NSEPSImageRep extends NSImageRep {
    EPSRepresentation: NSData; // property
    boundingBox: CGRect; // property
    static createWithData(data: NSData): NSEPSImageRep;
  }

  interface NSEditor extends NSObject {
    // instance method
    commitEditing(): boolean;
    // instance method
    commitEditingWithDelegateDidCommitSelectorContextInfo(withDelegate?: any, didCommit?: string, contextInfo?: any): void;
    // instance method
    commitEditingAndReturnError(): boolean;
    // instance method
    discardEditing(): void;
  }

  interface NSEditorRegistration extends NSObject {
    // instance method
    objectDidBeginEditing?(_: NSEditor): void;
    // instance method
    objectDidEndEditing?(_: NSEditor): void;
  }

  // export declare function NSEraseRect(rect: CGRect): void;

  // interface
  class NSFilePromiseProvider extends NSObject /* implements NSPasteboardWriting */ {
    delegate: NSFilePromiseProviderDelegate;
    setDelegate(_: NSFilePromiseProviderDelegate) // property
    fileType: string;
    setFileType(_: string) // property
    userInfo: any;
    setUserInfo(_: any) // property
    static createWithFileTypeDelegate(fileType: string, delegate: NSFilePromiseProviderDelegate): NSFilePromiseProvider;
  }

  interface NSFilePromiseProviderDelegate extends NSObject {
    // instance method
    filePromiseProviderWritePromiseToCompletionHandler(_: NSFilePromiseProvider, writePromiseTo: NSURL, completionHandler?: (p1: NSError) => void): void;
    // instance method
    filePromiseProviderFileNameForType(_: NSFilePromiseProvider, fileNameForType: string): string;
    // instance method
    operationQueueForFilePromiseProvider?(for_: NSFilePromiseProvider): OperationQueue;
  }

  // interface
  class NSFilePromiseReceiver extends NSObject /* implements NSPasteboardReading */ {
    fileNames: string[]; // property
    fileTypes: string[]; // property
    static readableDraggedTypes: string[]; // property
    receivePromisedFilesWithAtDestinationOptionsOperationQueueReader(atDestination: NSURL, options: Map<any, any>, operationQueue: OperationQueue, reader?: (p1: NSURL, p2: NSError) => void): void;
  }

  // interface
  class NSFont extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static boldSystemFontOfSize(ofSize: number): NSFont;
    static controlContentFontOfSize(ofSize: number): NSFont;
    static labelFontOfSize(ofSize: number): NSFont;
    static menuBarFontOfSize(ofSize: number): NSFont;
    static menuFontOfSize(ofSize: number): NSFont;
    static messageFontOfSize(ofSize: number): NSFont;
    static monospacedDigitSystemFontOfSizeWeight(ofSize: number, weight: number): NSFont;
    static monospacedSystemFontOfSizeWeight(ofSize: number, weight: number): NSFont;
    static paletteFontOfSize(ofSize: number): NSFont;
    static setUserFixedPitchFont(_?: NSFont): void;
    static setUserFont(_?: NSFont): void;
    static systemFontOfSize(ofSize: number): NSFont;
    static systemFontOfSizeWeight(ofSize: number, weight: number): NSFont;
    static systemFontSizeForControlSize(for_: NSControl.ControlSize): number;
    static titleBarFontOfSize(ofSize: number): NSFont;
    static toolTipsFontOfSize(ofSize: number): NSFont;
    static userFixedPitchFontOfSize(ofSize: number): NSFont;
    static userFontOfSize(ofSize: number): NSFont;
    ascender: number; // property
    boundingRectForFont: CGRect; // property
    capHeight: number; // property
    coveredCharacterSet: NSCharacterSet; // property
    descender: number; // property
    displayName: string; // property
    familyName: string; // property
    isFixedPitch: boolean; // property
    fontDescriptor: NSFontDescriptor; // property
    fontName: string; // property
    italicAngle: number; // property
    leading: number; // property
    matrix: number; // property
    maximumAdvancement: CGSize; // property
    mostCompatibleStringEncoding: number; // property
    numberOfGlyphs: number; // property
    pointSize: number; // property
    printerFont: NSFont; // property
    renderingMode: NSFontRenderingMode; // property
    screenFont: NSFont; // property
    textTransform: NSAffineTransform; // property
    underlinePosition: number; // property
    underlineThickness: number; // property
    isVertical: boolean; // property
    verticalFont: NSFont; // property
    xHeight: number; // property
    static labelFontSize: number; // property
    static smallSystemFontSize: number; // property
    static systemFontSize: number; // property
    advancementForCGGlyph(forCGGlyph: number): CGSize;
    advancementForGlyph(forGlyph: number): CGSize;
    boundingRectForCGGlyph(forCGGlyph: number): CGRect;
    boundingRectForGlyph(forGlyph: number): CGRect;
    getAdvancementsForCGGlyphsCount(_: NSSize, forCGGlyphs: number, count: number): void;
    getAdvancementsForGlyphsCount(_: NSSize, forGlyphs: number, count: number): void;
    getAdvancementsForPackedGlyphsLength(_: NSSize, forPackedGlyphs: any, length: number): void;
    getBoundingRectsForCGGlyphsCount(_: NSRect, forCGGlyphs: number, count: number): void;
    getBoundingRectsForGlyphsCount(_: NSRect, forGlyphs: number, count: number): void;
    glyphWithName(withName: string): number;
    screenFontWithRenderingMode(with_: NSFontRenderingMode): NSFont;
    set(): void;
    setInContext(in_: NSGraphicsContext): void;
  }

  // interface
  class NSFontAssetRequest extends NSObject /* implements ProgressReporting */ {
    downloadedFontDescriptors: NSFontDescriptor[]; // property
    downloadWithWithCompletionHandler(withCompletionHandler?: (p1: NSError) => boolean): void;
    static createWithFontDescriptorsOptions(fontDescriptors: NSFontDescriptor[], options: NSFontAssetRequest.Options): NSFontAssetRequest;
  }

  interface NSFontChanging extends NSObject {
    // instance method
    changeFont?(_?: NSFontManager): void;
    // instance method
    validModesForFontPanel?(_: NSFontPanel): NSFontPanel.ModeMask;
  }

  // interface
  class NSFontCollection extends NSObject /* implements NSCoding, NSCopying, NSMutableCopying */ {
    static hideFontCollectionWithNameVisibilityError(visibility: string, error: NSFontCollection.Visibility): boolean;
    static renameFontCollectionWithNameVisibilityToNameError(fromName: string, visibility: NSFontCollection.Visibility, toName: string): boolean;
    static showFontCollectionWithNameVisibilityError(withName: NSFontCollection, visibility: string, error: NSFontCollection.Visibility): boolean;
    exclusionDescriptors: NSFontDescriptor[]; // property
    matchingDescriptors: NSFontDescriptor[]; // property
    queryDescriptors: NSFontDescriptor[]; // property
    static allFontCollectionNames: string[]; // property
    static fontCollectionWithAllAvailableDescriptors: NSFontCollection; // property
    matchingDescriptorsForFamily(forFamily: string): NSFontDescriptor[];
    matchingDescriptorsForFamilyOptions(forFamily: string, options?: Map<string, number>): NSFontDescriptor[];
    matchingDescriptorsWithOptions(options?: Map<string, number>): NSFontDescriptor[];
  }

  // interface
  class NSFontDescriptor extends NSObject /* implements NSCopying, NSSecureCoding */ {
    fontAttributes: Map<string, any>; // property
    matrix: NSAffineTransform; // property
    pointSize: number; // property
    postscriptName: string; // property
    requiresFontAssetRequest: boolean; // property
    symbolicTraits: NSFontDescriptor.SymbolicTraits; // property
    fontDescriptorByAddingAttributes(_: Map<string, any>): NSFontDescriptor;
    fontDescriptorWithDesign(_: string): NSFontDescriptor;
    fontDescriptorWithFace(_: string): NSFontDescriptor;
    fontDescriptorWithFamily(_: string): NSFontDescriptor;
    fontDescriptorWithMatrix(_: NSAffineTransform): NSFontDescriptor;
    fontDescriptorWithSize(_: number): NSFontDescriptor;
    fontDescriptorWithSymbolicTraits(_: NSFontDescriptor.SymbolicTraits): NSFontDescriptor;
    static createWithFontAttributes(fontAttributes?: Map<string, any>): NSFontDescriptor;
    matchingFontDescriptorWithWithMandatoryKeys(withMandatoryKeys?: NSSet<string>): NSFontDescriptor;
    matchingFontDescriptorsWithWithMandatoryKeys(withMandatoryKeys?: NSSet<string>): NSFontDescriptor[];
    objectForKey(forKey: string): any;
  }

  // interface
  class NSFontManager extends NSObject /* implements NSMenuItemValidation */ {
    static setFontManagerFactory(_?: typeof NSObject): void;
    static setFontPanelFactory(_?: typeof NSObject): void;
    action: string;
    setAction(_: string) // property
    availableFontFamilies: string[]; // property
    availableFonts: string[]; // property
    currentFontAction: NSFontAction; // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    isMultiple: boolean; // property
    selectedFont: NSFont; // property
    target: any;
    setTarget(_: any) // property
    static sharedFontManager: NSFontManager; // property
    addFontTrait(_?: any): void;
    availableFontNamesWithTraits(with_: NSFontTraitMask): string[];
    availableMembersOfFontFamily(ofFontFamily: string): any[][];
    convertAttributes(_: Map<string, any>): Map<string, any>;
    convertFont(_: NSFont): NSFont;
    convertFontToFace(_: NSFont, toFace: string): NSFont;
    convertFontToFamily(_: NSFont, toFamily: string): NSFont;
    convertFontToHaveTrait(_: NSFont, toHaveTrait: NSFontTraitMask): NSFont;
    convertFontToNotHaveTrait(_: NSFont, toNotHaveTrait: NSFontTraitMask): NSFont;
    convertFontToSize(_: NSFont, toSize: number): NSFont;
    convertFontTraits(_: NSFontTraitMask): NSFontTraitMask;
    convertWeightOfFont(_: boolean, of: NSFont): NSFont;
    fontMenu(_: boolean): NSMenu;
    fontNamedHasTraits(_: string, hasTraits: NSFontTraitMask): boolean;
    fontPanel(_: boolean): NSFontPanel;
    fontWithFamilyTraitsWeightSize(withFamily: string, traits: NSFontTraitMask, weight: number, size: number): NSFont;
    localizedNameForFamilyFace(forFamily: string, face?: string): string;
    modifyFont(_?: any): void;
    modifyFontViaPanel(_?: any): void;
    orderFrontFontPanel(_?: any): void;
    orderFrontStylesPanel(_?: any): void;
    removeFontTrait(_?: any): void;
    sendAction(): boolean;
    setFontMenu(_: NSMenu): void;
    setSelectedAttributesIsMultiple(_: Map<string, any>, isMultiple: boolean): void;
    setSelectedFontIsMultiple(_: NSFont, isMultiple: boolean): void;
    traitsOfFont(of: NSFont): NSFontTraitMask;
    weightOfFont(of: NSFont): number;
  }

  // interface
  class NSFontPanel extends NSPanel {
    accessoryView: NSView;
    setAccessoryView(_: NSView) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    static sharedFontPanel: NSFontPanel; // property
    static sharedFontPanelExists: boolean; // property
    panelConvertFont(_: NSFont): NSFont;
    reloadDefaultFontFamilies(): void;
    setPanelFontIsMultiple(_: NSFont, isMultiple: boolean): void;
  }

  // interface
  class NSFormCell extends NSActionCell {
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString) // property
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString) // property
    placeholderString: string;
    setPlaceholderString(_: string) // property
    preferredTextFieldWidth: number;
    setPreferredTextFieldWidth(_: number) // property
    titleAlignment: NSTextAlignment;
    setTitleAlignment(_: NSTextAlignment) // property
    titleBaseWritingDirection: NSWritingDirection;
    setTitleBaseWritingDirection(_: NSWritingDirection) // property
    titleFont: NSFont;
    setTitleFont(_: NSFont) // property
    titleWidth: number;
    setTitleWidth(_: number) // property
  }

  // export declare function NSFrameRect(rect: CGRect): void;

  // export declare function NSFrameRectWithWidth(rect: CGRect, frameWidth: number): void;

  // export declare function NSFrameRectWithWidthUsingOperation(rect: CGRect, frameWidth: number, op: NSCompositingOperation): void;

  // interface
  class NSGestureRecognizer extends NSObject /* implements NSCoding */ {
    action: string;
    setAction(_: string) // property
    allowedTouchTypes: NSTouch.TouchTypeMask;
    setAllowedTouchTypes(_: NSTouch.TouchTypeMask) // property
    delaysKeyEvents: boolean;
    setDelaysKeyEvents(_: boolean) // property
    delaysMagnificationEvents: boolean;
    setDelaysMagnificationEvents(_: boolean) // property
    delaysOtherMouseButtonEvents: boolean;
    setDelaysOtherMouseButtonEvents(_: boolean) // property
    delaysPrimaryMouseButtonEvents: boolean;
    setDelaysPrimaryMouseButtonEvents(_: boolean) // property
    delaysRotationEvents: boolean;
    setDelaysRotationEvents(_: boolean) // property
    delaysSecondaryMouseButtonEvents: boolean;
    setDelaysSecondaryMouseButtonEvents(_: boolean) // property
    delegate: NSGestureRecognizerDelegate;
    setDelegate(_: NSGestureRecognizerDelegate) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    pressureConfiguration: NSPressureConfiguration;
    setPressureConfiguration(_: NSPressureConfiguration) // property
    state: NSGestureRecognizer.State;
    setState(_: NSGestureRecognizer.State) // property
    target: any;
    setTarget(_: any) // property
    view: NSView; // property
    canBePreventedByGestureRecognizer(by: NSGestureRecognizer): boolean;
    canPreventGestureRecognizer(_: NSGestureRecognizer): boolean;
    flagsChanged(with_: NSEvent): void;
    static createWithTargetAction(target?: any, action?: string): NSGestureRecognizer;
    keyDown(with_: NSEvent): void;
    keyUp(with_: NSEvent): void;
    locationInView(in_?: NSView): CGPoint;
    magnifyWithEvent(with_: NSEvent): void;
    mouseDown(with_: NSEvent): void;
    mouseDragged(with_: NSEvent): void;
    mouseUp(with_: NSEvent): void;
    otherMouseDown(with_: NSEvent): void;
    otherMouseDragged(with_: NSEvent): void;
    otherMouseUp(with_: NSEvent): void;
    pressureChangeWithEvent(with_: NSEvent): void;
    reset(): void;
    rightMouseDown(with_: NSEvent): void;
    rightMouseDragged(with_: NSEvent): void;
    rightMouseUp(with_: NSEvent): void;
    rotateWithEvent(with_: NSEvent): void;
    shouldBeRequiredToFailByGestureRecognizer(by: NSGestureRecognizer): boolean;
    shouldRequireFailureOfGestureRecognizer(of: NSGestureRecognizer): boolean;
    tabletPoint(with_: NSEvent): void;
    touchesBeganWithEvent(with_: NSEvent): void;
    touchesCancelledWithEvent(with_: NSEvent): void;
    touchesEndedWithEvent(with_: NSEvent): void;
    touchesMovedWithEvent(with_: NSEvent): void;
  }

  interface NSGestureRecognizerDelegate extends NSObject {
    // instance method
    gestureRecognizerShouldAttemptToRecognizeWithEvent?(_: NSGestureRecognizer, shouldAttemptToRecognizeWith: NSEvent): boolean;
    // instance method
    gestureRecognizerShouldRecognizeSimultaneouslyWithGestureRecognizer?(_: NSGestureRecognizer, shouldRecognizeSimultaneouslyWith: NSGestureRecognizer): boolean;
    // instance method
    gestureRecognizerShouldRequireFailureOfGestureRecognizer?(_: NSGestureRecognizer, shouldRequireFailureOf: NSGestureRecognizer): boolean;
    // instance method
    gestureRecognizerShouldBeRequiredToFailByGestureRecognizer?(_: NSGestureRecognizer, shouldBeRequiredToFailBy: NSGestureRecognizer): boolean;
    // instance method
    gestureRecognizerShouldReceiveTouch?(_: NSGestureRecognizer, shouldReceive: NSTouch): boolean;
    // instance method
    gestureRecognizerShouldBegin?(_: NSGestureRecognizer): boolean;
  }

  // export declare function NSGetFileType(pboardType: string): string;

  // export declare function NSGetFileTypes(pboardTypes: string[]): string[];

  // interface
  class NSGlyphGenerator extends NSObject {
    static sharedGlyphGenerator: NSGlyphGenerator; // property
    generateGlyphsForGlyphStorageDesiredNumberOfCharactersGlyphIndexCharacterIndex(for_: NSGlyphStorage, desiredNumberOfCharacters: number, glyphIndex?: number, characterIndex?: number): void;
  }

  // interface
  class NSGlyphInfo extends NSObject /* implements NSCopying, NSSecureCoding */ {
    baseString: string; // property
    characterCollection: NSCharacterCollection; // property
    characterIdentifier: number; // property
    glyphID: number; // property
    glyphName: string; // property
  }

  interface NSGlyphStorage {
    // instance method
    attributedString(): NSAttributedString;
    // instance method
    insertGlyphsLengthForStartingGlyphAtIndexCharacterIndex(_: number, length: number, forStartingGlyphAt: number, characterIndex: number): void;
    // instance method
    layoutOptions(): number;
    // instance method
    setIntAttributeValueForGlyphAtIndex(_: number, value: number, forGlyphAt: number): void;
  }

  // interface
  class NSGradient extends NSObject /* implements NSCopying, NSSecureCoding */ {
    colorSpace: NSColorSpace; // property
    numberOfColorStops: number; // property
    drawFromCenterRadiusToCenterRadiusOptions(fromCenter: CGPoint, radius: number, toCenter: CGPoint, radius2: number, options: NSGradient.DrawingOptions): void;
    drawFromPointToPointOptions(from: CGPoint, to: CGPoint, options: NSGradient.DrawingOptions): void;
    drawInBezierPathAngle(in_: NSBezierPath, angle: number): void;
    drawInBezierPathRelativeCenterPosition(in_: NSBezierPath, relativeCenterPosition: CGPoint): void;
    drawInRectAngle(in_: CGRect, angle: number): void;
    drawInRectRelativeCenterPosition(in_: CGRect, relativeCenterPosition: CGPoint): void;
    getColorLocationAtIndex(_?: NSColor, location?: number, at?: number): void;
    static createWithColors(colors: NSColor[]): NSGradient;
    static createWithColorsAtLocationsColorSpace(colors: NSColor[], atLocations?: number, colorSpace?: NSColorSpace): NSGradient;
    static createWithColorsAndLocations(colorsAndLocations: NSColor): NSGradient;
    static createWithStartingColorEndingColor(startingColor: NSColor, endingColor: NSColor): NSGradient;
    interpolatedColorAtLocation(atLocation: number): NSColor;
  }

  // interface
  class NSGraphicsContext extends NSObject {
    static currentContextDrawingToScreen(): boolean;
    static restoreGraphicsState(): void;
    static saveGraphicsState(): void;
    CGContext: any; // property
    CIContext: CIContext; // property
    attributes: Map<string, any>; // property
    colorRenderingIntent: NSColorRenderingIntent;
    setColorRenderingIntent(_: NSColorRenderingIntent) // property
    compositingOperation: NSCompositingOperation;
    setCompositingOperation(_: NSCompositingOperation) // property
    isDrawingToScreen: boolean; // property
    isFlipped: boolean; // property
    imageInterpolation: NSImageInterpolation;
    setImageInterpolation(_: NSImageInterpolation) // property
    patternPhase: CGPoint;
    setPatternPhase(_: CGPoint) // property
    shouldAntialias: boolean;
    setShouldAntialias(_: boolean) // property
    static currentContext: NSGraphicsContext;
    setCurrentContext(_: NSGraphicsContext) // property
    flushGraphics(): void;
    restoreGraphicsState(): void;
    saveGraphicsState(): void;
  }

  // interface
  class NSGridCell extends NSObject /* implements NSCoding */ {
    column: NSGridColumn; // property
    contentView: NSView;
    setContentView(_: NSView) // property
    customPlacementConstraints: NSLayoutConstraint[];
    setCustomPlacementConstraints(_: NSLayoutConstraint[]) // property
    row: NSGridRow; // property
    rowAlignment: NSGridRow.Alignment;
    setRowAlignment(_: NSGridRow.Alignment) // property
    xPlacement: NSGridCell.Placement;
    setXPlacement(_: NSGridCell.Placement) // property
    yPlacement: NSGridCell.Placement;
    setYPlacement(_: NSGridCell.Placement) // property
    static emptyContentView: NSView; // property
  }

  // interface
  class NSGridColumn extends NSObject /* implements NSCoding */ {
    gridView: NSGridView; // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    leadingPadding: number;
    setLeadingPadding(_: number) // property
    numberOfCells: number; // property
    trailingPadding: number;
    setTrailingPadding(_: number) // property
    width: number;
    setWidth(_: number) // property
    xPlacement: NSGridCell.Placement;
    setXPlacement(_: NSGridCell.Placement) // property
    cellAtIndex(at: number): NSGridCell;
    mergeCellsInRange(in_: NSRange): void;
  }

  // interface
  class NSGridRow extends NSObject /* implements NSCoding */ {
    bottomPadding: number;
    setBottomPadding(_: number) // property
    gridView: NSGridView; // property
    height: number;
    setHeight(_: number) // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    numberOfCells: number; // property
    rowAlignment: NSGridRow.Alignment;
    setRowAlignment(_: NSGridRow.Alignment) // property
    topPadding: number;
    setTopPadding(_: number) // property
    yPlacement: NSGridCell.Placement;
    setYPlacement(_: NSGridCell.Placement) // property
    cellAtIndex(at: number): NSGridCell;
    mergeCellsInRange(in_: NSRange): void;
  }

  // interface
  class NSGridView extends NSView {
    columnSpacing: number;
    setColumnSpacing(_: number) // property
    numberOfColumns: number; // property
    numberOfRows: number; // property
    rowAlignment: NSGridRow.Alignment;
    setRowAlignment(_: NSGridRow.Alignment) // property
    rowSpacing: number;
    setRowSpacing(_: number) // property
    xPlacement: NSGridCell.Placement;
    setXPlacement(_: NSGridCell.Placement) // property
    yPlacement: NSGridCell.Placement;
    setYPlacement(_: NSGridCell.Placement) // property
    addColumnWithViews(with_: NSView[]): NSGridColumn;
    addRowWithViews(with_: NSView[]): NSGridRow;
    cellAtColumnIndexRowIndex(atColumnIndex: number, rowIndex: number): NSGridCell;
    cellForView(for_: NSView): NSGridCell;
    columnAtIndex(at: number): NSGridColumn;
    indexOfColumn(of: NSGridColumn): number;
    indexOfRow(of: NSGridRow): number;
    insertColumnAtIndexWithViews(at: number, with_: NSView[]): NSGridColumn;
    insertRowAtIndexWithViews(at: number, with_: NSView[]): NSGridRow;
    mergeCellsInHorizontalRangeVerticalRange(inHorizontalRange: NSRange, verticalRange: NSRange): void;
    moveColumnAtIndexToIndex(at: number, to: number): void;
    moveRowAtIndexToIndex(at: number, to: number): void;
    removeColumnAtIndex(at: number): void;
    removeRowAtIndex(at: number): void;
    rowAtIndex(at: number): NSGridRow;
  }

  // interface
  class NSGroupTouchBarItem extends NSTouchBarItem {
    static alertStyleGroupItemWithIdentifier(alertStyleWithIdentifier: string): NSGroupTouchBarItem;
    static groupItemWithIdentifierItems(identifier: string, items: NSTouchBarItem[]): NSGroupTouchBarItem;
    static groupItemWithIdentifierItemsAllowedCompressionOptions(identifier: string, items: NSTouchBarItem[], allowedCompressionOptions: NSUserInterfaceCompressionOptions): NSGroupTouchBarItem;
    effectiveCompressionOptions: NSUserInterfaceCompressionOptions; // property
    groupTouchBar: NSTouchBar;
    setGroupTouchBar(_: NSTouchBar) // property
    groupUserInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setGroupUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection) // property
    preferredItemWidth: number;
    setPreferredItemWidth(_: number) // property
    prefersEqualWidths: boolean;
    setPrefersEqualWidths(_: boolean) // property
    prioritizedCompressionOptions: NSUserInterfaceCompressionOptions[];
    setPrioritizedCompressionOptions(_: NSUserInterfaceCompressionOptions[]) // property
  }

  // interface
  class NSHapticFeedbackManager extends NSObject {
    static defaultPerformer: NSHapticFeedbackPerformer; // property
  }

  interface NSHapticFeedbackPerformer extends NSObject {
    // instance method
    performFeedbackPatternPerformanceTime(_: NSHapticFeedbackManager.FeedbackPattern, performanceTime: NSHapticFeedbackManager.PerformanceTime): void;
  }

  // interface
  class NSHelpManager extends NSObject {
    static isContextHelpModeActive: boolean;
    setContextHelpModeActive(_: boolean) // property
    static sharedHelpManager: NSHelpManager; // property
    contextHelpForObject(for_: any): NSAttributedString;
    findStringInBook(_: string, inBook?: string): void;
    openHelpAnchorInBook(_: string, inBook?: string): void;
    registerBooksInBundle(in_: Bundle): boolean;
    removeContextHelpForObject(for_: any): void;
    setContextHelpForObject(_: NSAttributedString, for_: any): void;
    showContextHelpForObjectLocationHint(for_: any, locationHint: CGPoint): boolean;
  }

  interface NSIgnoreMisspelledWords {
    // instance method
    ignoreSpelling(_?: any): void;
  }

  // interface
  class NSImage extends NSObject /* implements NSCopying, NSPasteboardReading, NSPasteboardWriting, NSSecureCoding */ {
    static canInitWithPasteboard(with_: NSPasteboard): boolean;
    TIFFRepresentation: NSData; // property
    accessibilityDescription: string;
    setAccessibilityDescription(_: string) // property
    alignmentRect: CGRect;
    setAlignmentRect(_: CGRect) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    cacheMode: NSImage.CacheMode;
    setCacheMode(_: NSImage.CacheMode) // property
    capInsets: NSEdgeInsets;
    setCapInsets(_: NSEdgeInsets) // property
    delegate: NSImageDelegate;
    setDelegate(_: NSImageDelegate) // property
    matchesOnMultipleResolution: boolean;
    setMatchesOnMultipleResolution(_: boolean) // property
    matchesOnlyOnBestFittingAxis: boolean;
    setMatchesOnlyOnBestFittingAxis(_: boolean) // property
    prefersColorMatch: boolean;
    setPrefersColorMatch(_: boolean) // property
    representations: NSImageRep[]; // property
    resizingMode: NSImage.ResizingMode;
    setResizingMode(_: NSImage.ResizingMode) // property
    size: CGSize;
    setSize(_: CGSize) // property
    isTemplate: boolean;
    setTemplate(_: boolean) // property
    usesEPSOnResolutionMismatch: boolean;
    setUsesEPSOnResolutionMismatch(_: boolean) // property
    isValid: boolean; // property
    static imageTypes: string[]; // property
    static imageUnfilteredTypes: string[]; // property
    CGImageForProposedRectContextHints(forProposedRect?: NSRect, context?: NSGraphicsContext, hints?: Map<string, any>): any;
    TIFFRepresentationUsingCompressionFactor(using: NSBitmapImageRep.TIFFCompression, factor: number): NSData;
    addRepresentation(_: NSImageRep): void;
    addRepresentations(_: NSImageRep[]): void;
    bestRepresentationForRectContextHints(for_: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>): NSImageRep;
    cancelIncrementalLoad(): void;
    drawAtPointFromRectOperationFraction(at: CGPoint, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    drawInRect(in_: CGRect): void;
    drawInRectFromRectOperationFraction(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    drawInRectFromRectOperationFractionRespectFlippedHints(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number, respectFlipped: boolean, hints?: Map<string, any>): void;
    drawRepresentationInRect(_: NSImageRep, in_: CGRect): boolean;
    hitTestRectWithImageDestinationRectContextHintsFlipped(_: CGRect, withDestinationRect: CGRect, context?: NSGraphicsContext, hints?: Map<string, any>, flipped?: boolean): boolean;
    static createWithByReferencingFile(byReferencingFile: string): NSImage;
    static createWithByReferencingURL(byReferencingURL: NSURL): NSImage;
    static createWithCGImageSize(CGImage: any, size: CGSize): NSImage;
    static createWithContentsOfFile(contentsOfFile: string): NSImage;
    static createWithContentsOfURL(contentsOfURL: NSURL): NSImage;
    static createWithData(data: NSData): NSImage;
    static createWithDataIgnoringOrientation(dataIgnoringOrientation: NSData): NSImage;
    static createWithIconRef(iconRef: any): NSImage;
    static createWithPasteboard(pasteboard: NSPasteboard): NSImage;
    static createWithSize(size: CGSize): NSImage;
    layerContentsForContentsScale(forContentsScale: number): any;
    lockFocus(): void;
    lockFocusFlipped(_: boolean): void;
    name(): string;
    recache(): void;
    recommendedLayerContentsScale(_: number): number;
    removeRepresentation(_: NSImageRep): void;
    setName(_?: string): boolean;
    unlockFocus(): void;
  }

  // interface
  class NSImageCell extends NSCell /* implements NSCoding, NSCopying */ {
    imageAlignment: NSImageAlignment;
    setImageAlignment(_: NSImageAlignment) // property
    imageFrameStyle: NSImageView.FrameStyle;
    setImageFrameStyle(_: NSImageView.FrameStyle) // property
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling) // property
  }

  interface NSImageDelegate extends NSObject {
    // instance method
    imageDidLoadRepresentationWithStatus?(_: NSImage, didLoadRepresentation: NSImageRep, with_: NSImage.LoadStatus): void;
    // instance method
    imageDidLoadPartOfRepresentationWithValidRows?(_: NSImage, didLoadPartOfRepresentation: NSImageRep, withValidRows: number): void;
    // instance method
    imageDidLoadRepresentationHeader?(_: NSImage, didLoadRepresentationHeader: NSImageRep): void;
    // instance method
    imageWillLoadRepresentation?(_: NSImage, willLoadRepresentation: NSImageRep): void;
    // instance method
    imageDidNotDrawInRect?(_: NSImage, in_: CGRect): NSImage;
  }

  // interface
  class NSImageRep extends NSObject /* implements NSCoding, NSCopying */ {
    static canInitWithData(with_: NSData): boolean;
    static canInitWithPasteboard(with_: NSPasteboard): boolean;
    static imageRepClassForData(for_: NSData): typeof NSObject;
    static imageRepClassForType(forType: string): typeof NSObject;
    static imageRepsWithContentsOfFile(withContentsOfFile: string): NSImageRep[];
    static imageRepsWithContentsOfURL(withContentsOf: NSURL): NSImageRep[];
    static imageRepsWithPasteboard(with_: NSPasteboard): NSImageRep[];
    static registerImageRepClass(_: typeof NSObject): void;
    static unregisterImageRepClass(_: typeof NSObject): void;
    hasAlpha: boolean;
    setAlpha(_: boolean) // property
    bitsPerSample: number;
    setBitsPerSample(_: number) // property
    colorSpaceName: string;
    setColorSpaceName(_: string) // property
    layoutDirection: NSImage.LayoutDirection;
    setLayoutDirection(_: NSImage.LayoutDirection) // property
    isOpaque: boolean;
    setOpaque(_: boolean) // property
    pixelsHigh: number;
    setPixelsHigh(_: number) // property
    pixelsWide: number;
    setPixelsWide(_: number) // property
    size: CGSize;
    setSize(_: CGSize) // property
    static imageTypes: string[]; // property
    static imageUnfilteredTypes: string[]; // property
    static registeredImageRepClasses: typeof NSObject[]; // property
    CGImageForProposedRectContextHints(forProposedRect?: NSRect, context?: NSGraphicsContext, hints?: Map<string, any>): any;
    draw(): boolean;
    drawAtPoint(at: CGPoint): boolean;
    drawInRect(in_: CGRect): boolean;
    drawInRectFromRectOperationFractionRespectFlippedHints(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number, respectFlipped: boolean, hints?: Map<string, any>): boolean;
  }

  // interface
  class NSImageView extends NSControl /* implements NSAccessibilityImage, NSMenuItemValidation */ {
    allowsCutCopyPaste: boolean;
    setAllowsCutCopyPaste(_: boolean) // property
    animates: boolean;
    setAnimates(_: boolean) // property
    contentTintColor: NSColor;
    setContentTintColor(_: NSColor) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    image: NSImage;
    setImage(_: NSImage) // property
    imageAlignment: NSImageAlignment;
    setImageAlignment(_: NSImageAlignment) // property
    imageFrameStyle: NSImageView.FrameStyle;
    setImageFrameStyle(_: NSImageView.FrameStyle) // property
    imageScaling: NSImageScaling;
    setImageScaling(_: NSImageScaling) // property
  }

  interface NSInputServerMouseTracker {
  }

  interface NSInputServiceProvider {
  }

  // export declare function NSIsControllerMarker(object_: any): boolean;

  // interface
  class NSLayoutAnchor<AnchorType> extends NSObject /* implements NSCoding, NSCopying */ {
    constraintsAffectingLayout: NSLayoutConstraint[]; // property
    hasAmbiguousLayout: boolean; // property
    item: any; // property
    name: string; // property
    constraintWithEqualTo(equalTo: NSLayoutAnchor<AnchorType>): NSLayoutConstraint;
    constraintWithEqualToConstant(equalTo: NSLayoutAnchor<AnchorType>, constant: number): NSLayoutConstraint;
    constraintWithGreaterThanOrEqualTo(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>): NSLayoutConstraint;
    constraintWithGreaterThanOrEqualToConstant(greaterThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: number): NSLayoutConstraint;
    constraintWithLessThanOrEqualTo(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>): NSLayoutConstraint;
    constraintWithLessThanOrEqualToConstant(lessThanOrEqualTo: NSLayoutAnchor<AnchorType>, constant: number): NSLayoutConstraint;
  }

  // interface
  class NSLayoutConstraint extends NSObject /* implements NSAnimatablePropertyContainer */ {
    static activateConstraints(_: NSLayoutConstraint[]): void;
    static constraintsWithVisualFormatOptionsMetricsViews(withVisualFormat: string, options: NSLayoutConstraint.FormatOptions, metrics?: Map<string, any>, views?: Map<string, any>): NSLayoutConstraint[];
    static deactivateConstraints(_: NSLayoutConstraint[]): void;
    isActive: boolean;
    setActive(_: boolean) // property
    constant: number;
    setConstant(_: number) // property
    firstAnchor: NSLayoutAnchor<any>; // property
    firstAttribute: NSLayoutConstraint.Attribute; // property
    firstItem: any; // property
    identifier: string;
    setIdentifier(_: string) // property
    multiplier: number; // property
    priority: number;
    setPriority(_: number) // property
    relation: NSLayoutConstraint.Relation; // property
    secondAnchor: NSLayoutAnchor<any>; // property
    secondAttribute: NSLayoutConstraint.Attribute; // property
    secondItem: any; // property
    shouldBeArchived: boolean;
    setShouldBeArchived(_: boolean) // property
  }

  // interface
  class NSLayoutDimension extends NSLayoutAnchor<NSLayoutDimension> {
    constraintEqualToAnchorMultiplier(equalTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
    constraintEqualToAnchorMultiplierConstant(equalTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
    constraintEqualToConstant(equalToConstant: number): NSLayoutConstraint;
    constraintGreaterThanOrEqualToAnchorMultiplier(greaterThanOrEqualTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
    constraintGreaterThanOrEqualToAnchorMultiplierConstant(greaterThanOrEqualTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
    constraintGreaterThanOrEqualToConstant(greaterThanOrEqualToConstant: number): NSLayoutConstraint;
    constraintLessThanOrEqualToAnchorMultiplier(lessThanOrEqualTo: NSLayoutDimension, multiplier: number): NSLayoutConstraint;
    constraintLessThanOrEqualToAnchorMultiplierConstant(lessThanOrEqualTo: NSLayoutDimension, multiplier: number, constant: number): NSLayoutConstraint;
    constraintLessThanOrEqualToConstant(lessThanOrEqualToConstant: number): NSLayoutConstraint;
  }

  // interface
  class NSLayoutGuide extends NSObject /* implements NSCoding, NSUserInterfaceItemIdentification */ {
    bottomAnchor: NSLayoutYAxisAnchor; // property
    centerXAnchor: NSLayoutXAxisAnchor; // property
    centerYAnchor: NSLayoutYAxisAnchor; // property
    frame: CGRect; // property
    hasAmbiguousLayout: boolean; // property
    heightAnchor: NSLayoutDimension; // property
    leadingAnchor: NSLayoutXAxisAnchor; // property
    leftAnchor: NSLayoutXAxisAnchor; // property
    owningView: NSView;
    setOwningView(_: NSView) // property
    rightAnchor: NSLayoutXAxisAnchor; // property
    topAnchor: NSLayoutYAxisAnchor; // property
    trailingAnchor: NSLayoutXAxisAnchor; // property
    widthAnchor: NSLayoutDimension; // property
    constraintsAffectingLayoutForOrientation(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint[];
  }

  // interface
  class NSLayoutManager extends NSObject /* implements NSSecureCoding, NSGlyphStorage */ {
    allowsNonContiguousLayout: boolean;
    setAllowsNonContiguousLayout(_: boolean) // property
    backgroundLayoutEnabled: boolean;
    setBackgroundLayoutEnabled(_: boolean) // property
    defaultAttachmentScaling: NSImageScaling;
    setDefaultAttachmentScaling(_: NSImageScaling) // property
    delegate: NSLayoutManagerDelegate;
    setDelegate(_: NSLayoutManagerDelegate) // property
    extraLineFragmentRect: CGRect; // property
    extraLineFragmentTextContainer: NSTextContainer; // property
    extraLineFragmentUsedRect: CGRect; // property
    firstTextView: NSTextView; // property
    glyphGenerator: NSGlyphGenerator;
    setGlyphGenerator(_: NSGlyphGenerator) // property
    hasNonContiguousLayout: boolean; // property
    limitsLayoutForSuspiciousContents: boolean;
    setLimitsLayoutForSuspiciousContents(_: boolean) // property
    numberOfGlyphs: number; // property
    showsControlCharacters: boolean;
    setShowsControlCharacters(_: boolean) // property
    showsInvisibleCharacters: boolean;
    setShowsInvisibleCharacters(_: boolean) // property
    textContainers: NSTextContainer[]; // property
    textStorage: NSTextStorage;
    setTextStorage(_: NSTextStorage) // property
    textViewForBeginningOfSelection: NSTextView; // property
    typesetter: NSTypesetter;
    setTypesetter(_: NSTypesetter) // property
    typesetterBehavior: NSLayoutManager.TypesetterBehavior;
    setTypesetterBehavior(_: NSLayoutManager.TypesetterBehavior) // property
    usesDefaultHyphenation: boolean;
    setUsesDefaultHyphenation(_: boolean) // property
    usesFontLeading: boolean;
    setUsesFontLeading(_: boolean) // property
    CGGlyphAtIndex(at: number): number;
    CGGlyphAtIndexIsValidIndex(at: number, isValidIndex?: boolean): number;
    addTemporaryAttributeValueForCharacterRange(_: string, value: any, forCharacterRange: NSRange): void;
    addTemporaryAttributesForCharacterRange(_: Map<string, any>, forCharacterRange: NSRange): void;
    addTextContainer(_: NSTextContainer): void;
    attachmentSizeForGlyphAtIndex(forGlyphAt: number): CGSize;
    boundingRectForGlyphRangeInTextContainer(forGlyphRange: NSRange, in_: NSTextContainer): CGRect;
    boundsRectForTextBlockAtIndexEffectiveRange(for_: NSTextBlock, at: number, effectiveRange?: NSRange): CGRect;
    boundsRectForTextBlockGlyphRange(for_: NSTextBlock, glyphRange: NSRange): CGRect;
    characterIndexForGlyphAtIndex(at: number): number;
    characterIndexForPointInTextContainerFractionOfDistanceBetweenInsertionPoints(for_: CGPoint, in_: NSTextContainer, fractionOfDistanceBetweenInsertionPoints?: number): number;
    characterRangeForGlyphRangeActualGlyphRange(forGlyphRange: NSRange, actualGlyphRange?: NSRange): NSRange;
    defaultBaselineOffsetForFont(for_: NSFont): number;
    defaultLineHeightForFont(for_: NSFont): number;
    drawBackgroundForGlyphRangeAtPoint(forGlyphRange: NSRange, at: CGPoint): void;
    drawGlyphsForGlyphRangeAtPoint(forGlyphRange: NSRange, at: CGPoint): void;
    drawStrikethroughForGlyphRangeStrikethroughTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(forGlyphRange: NSRange, strikethroughType: NSUnderlineStyle, baselineOffset: number, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    drawUnderlineForGlyphRangeUnderlineTypeBaselineOffsetLineFragmentRectLineFragmentGlyphRangeContainerOrigin(forGlyphRange: NSRange, underlineType: NSUnderlineStyle, baselineOffset: number, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    drawsOutsideLineFragmentForGlyphAtIndex(forGlyphAt: number): boolean;
    ensureGlyphsForCharacterRange(forCharacterRange: NSRange): void;
    ensureGlyphsForGlyphRange(forGlyphRange: NSRange): void;
    ensureLayoutForBoundingRectInTextContainer(forBoundingRect: CGRect, in_: NSTextContainer): void;
    ensureLayoutForCharacterRange(forCharacterRange: NSRange): void;
    ensureLayoutForGlyphRange(forGlyphRange: NSRange): void;
    ensureLayoutForTextContainer(for_: NSTextContainer): void;
    enumerateEnclosingRectsWithForGlyphRangeWithinSelectedGlyphRangeInUsing(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in_: NSTextContainer, using: (p1: CGRect, p2: boolean) => void): void;
    enumerateLineFragmentsWithForGlyphRangeUsing(forGlyphRange: NSRange, using: (p1: CGRect, p2: CGRect, p3: NSTextContainer, p4: NSRange, p5: boolean) => void): void;
    fillBackgroundRectArrayCountForCharacterRangeColor(_: NSRect, count: number, forCharacterRange: NSRange, color: NSColor): void;
    firstUnlaidCharacterIndex(): number;
    firstUnlaidGlyphIndex(): number;
    fractionOfDistanceThroughGlyphForPointInTextContainer(for_: CGPoint, in_: NSTextContainer): number;
    getFirstUnlaidCharacterIndexGlyphIndex(_?: number, glyphIndex?: number): void;
    getGlyphsInRangeGlyphsPropertiesCharacterIndexesBidiLevels(in_: NSRange, glyphs?: number, properties?: NSLayoutManager.GlyphProperty, characterIndexes?: number, bidiLevels?: string): number;
    getLineFragmentInsertionPointsForCharacterAtIndexAlternatePositionsInDisplayOrderPositionsCharacterIndexes(forCharacterAt: number, alternatePositions: boolean, inDisplayOrder: boolean, positions?: number, characterIndexes?: number): number;
    glyphAtIndex(at: number): number;
    glyphAtIndexIsValidIndex(at: number, isValidIndex?: boolean): number;
    glyphIndexForCharacterAtIndex(at: number): number;
    glyphIndexForPointInTextContainer(for_: CGPoint, in_: NSTextContainer): number;
    glyphIndexForPointInTextContainerFractionOfDistanceThroughGlyph(for_: CGPoint, in_: NSTextContainer, fractionOfDistanceThroughGlyph?: number): number;
    glyphRangeForBoundingRectInTextContainer(forBoundingRect: CGRect, in_: NSTextContainer): NSRange;
    glyphRangeForBoundingRectWithoutAdditionalLayoutInTextContainer(forBoundingRectWithoutAdditionalLayout: CGRect, in_: NSTextContainer): NSRange;
    glyphRangeForCharacterRangeActualCharacterRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): NSRange;
    glyphRangeForTextContainer(for_: NSTextContainer): NSRange;
    insertTextContainerAtIndex(_: NSTextContainer, at: number): void;
    invalidateDisplayForCharacterRange(forCharacterRange: NSRange): void;
    invalidateDisplayForGlyphRange(forGlyphRange: NSRange): void;
    invalidateGlyphsForCharacterRangeChangeInLengthActualCharacterRange(forCharacterRange: NSRange, changeInLength: number, actualCharacterRange?: NSRange): void;
    invalidateLayoutForCharacterRangeActualCharacterRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): void;
    isValidGlyphIndex(_: number): boolean;
    layoutManagerOwnsFirstResponderInWindow(in_: NSWindow): boolean;
    layoutRectForTextBlockAtIndexEffectiveRange(for_: NSTextBlock, at: number, effectiveRange?: NSRange): CGRect;
    layoutRectForTextBlockGlyphRange(for_: NSTextBlock, glyphRange: NSRange): CGRect;
    lineFragmentRectForGlyphAtIndexEffectiveRange(forGlyphAt: number, effectiveRange?: NSRange): CGRect;
    lineFragmentRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): CGRect;
    lineFragmentUsedRectForGlyphAtIndexEffectiveRange(forGlyphAt: number, effectiveRange?: NSRange): CGRect;
    lineFragmentUsedRectForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): CGRect;
    locationForGlyphAtIndex(forGlyphAt: number): CGPoint;
    notShownAttributeForGlyphAtIndex(forGlyphAt: number): boolean;
    processEditingForTextStorageEditedRangeChangeInLengthInvalidatedRange(for_: NSTextStorage, edited: NSTextStorageEditActions, range: NSRange, changeInLength: number, invalidatedRange: NSRange): void;
    propertyForGlyphAtIndex(at: number): NSLayoutManager.GlyphProperty;
    rangeOfNominallySpacedGlyphsContainingIndex(ofNominallySpacedGlyphsContaining: number): NSRange;
    rectArrayForCharacterRangeWithinSelectedCharacterRangeInTextContainerRectCount(forCharacterRange: NSRange, withinSelectedCharacterRange: NSRange, in_: NSTextContainer, rectCount: number): NSRect;
    rectArrayForGlyphRangeWithinSelectedGlyphRangeInTextContainerRectCount(forGlyphRange: NSRange, withinSelectedGlyphRange: NSRange, in_: NSTextContainer, rectCount: number): NSRect;
    removeTemporaryAttributeForCharacterRange(_: string, forCharacterRange: NSRange): void;
    removeTextContainerAtIndex(at: number): void;
    replaceTextStorage(_: NSTextStorage): void;
    rulerAccessoryViewForTextViewParagraphStyleRulerEnabled(for_: NSTextView, paragraphStyle: NSParagraphStyle, ruler: NSRulerView, enabled: boolean): NSView;
    rulerMarkersForTextViewParagraphStyleRuler(for_: NSTextView, paragraphStyle: NSParagraphStyle, ruler: NSRulerView): NSRulerMarker[];
    setAttachmentSizeForGlyphRange(_: CGSize, forGlyphRange: NSRange): void;
    setBoundsRectForTextBlockGlyphRange(_: CGRect, for_: NSTextBlock, glyphRange: NSRange): void;
    setDrawsOutsideLineFragmentForGlyphAtIndex(_: boolean, forGlyphAt: number): void;
    setExtraLineFragmentRectUsedRectTextContainer(_: CGRect, usedRect: CGRect, textContainer: NSTextContainer): void;
    setGlyphsPropertiesCharacterIndexesFontForGlyphRange(_: number, properties: NSLayoutManager.GlyphProperty, characterIndexes: number, font: NSFont, forGlyphRange: NSRange): void;
    setLayoutRectForTextBlockGlyphRange(_: CGRect, for_: NSTextBlock, glyphRange: NSRange): void;
    setLineFragmentRectForGlyphRangeUsedRect(_: CGRect, forGlyphRange: NSRange, usedRect: CGRect): void;
    setLocationForStartOfGlyphRange(_: CGPoint, forStartOfGlyphRange: NSRange): void;
    setNotShownAttributeForGlyphAtIndex(_: boolean, forGlyphAt: number): void;
    setTemporaryAttributesForCharacterRange(_: Map<string, any>, forCharacterRange: NSRange): void;
    setTextContainerForGlyphRange(_: NSTextContainer, forGlyphRange: NSRange): void;
    showAttachmentCellInRectCharacterIndex(_: NSCell, in_: CGRect, characterIndex: number): void;
    showCGGlyphsPositionsCountFontTextMatrixAttributesInContext(_: number, positions: NSPoint, count: number, font: NSFont, textMatrix: CGAffineTransform, attributes: Map<string, any>, in_: any): void;
    strikethroughGlyphRangeStrikethroughTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(_: NSRange, strikethroughType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    temporaryAttributeAtCharacterIndexEffectiveRange(_: string, atCharacterIndex: number, effectiveRange?: NSRange): any;
    temporaryAttributeAtCharacterIndexLongestEffectiveRangeInRange(_: string, atCharacterIndex: number, longestEffectiveRange?: NSRange, in_?: NSRange): any;
    temporaryAttributesAtCharacterIndexEffectiveRange(atCharacterIndex: number, effectiveRange?: NSRange): Map<string, any>;
    temporaryAttributesAtCharacterIndexLongestEffectiveRangeInRange(atCharacterIndex: number, longestEffectiveRange?: NSRange, in_?: NSRange): Map<string, any>;
    textContainerChangedGeometry(_: NSTextContainer): void;
    textContainerChangedTextView(_: NSTextContainer): void;
    textContainerForGlyphAtIndexEffectiveRange(forGlyphAt: number, effectiveRange?: NSRange): NSTextContainer;
    textContainerForGlyphAtIndexEffectiveRangeWithoutAdditionalLayout(forGlyphAt: number, effectiveRange?: NSRange, withoutAdditionalLayout?: boolean): NSTextContainer;
    truncatedGlyphRangeInLineFragmentForGlyphAtIndex(inLineFragmentForGlyphAt: number): NSRange;
    underlineGlyphRangeUnderlineTypeLineFragmentRectLineFragmentGlyphRangeContainerOrigin(_: NSRange, underlineType: NSUnderlineStyle, lineFragmentRect: CGRect, lineFragmentGlyphRange: NSRange, containerOrigin: CGPoint): void;
    usedRectForTextContainer(for_: NSTextContainer): CGRect;
  }

  interface NSLayoutManagerDelegate extends NSObject {
    // instance method
    layoutManagerLineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect?(_: NSLayoutManager, lineSpacingAfterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // instance method
    layoutManagerParagraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect?(_: NSLayoutManager, paragraphSpacingBeforeGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // instance method
    layoutManagerParagraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect?(_: NSLayoutManager, paragraphSpacingAfterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    // instance method
    layoutManagerShouldUseActionForControlCharacterAtIndex?(_: NSLayoutManager, shouldUse: NSLayoutManager.ControlCharacterAction, forControlCharacterAt: number): NSLayoutManager.ControlCharacterAction;
    // instance method
    layoutManagerShouldBreakLineByWordBeforeCharacterAtIndex?(_: NSLayoutManager, shouldBreakLineByWordBeforeCharacterAt: number): boolean;
    // instance method
    layoutManagerShouldBreakLineByHyphenatingBeforeCharacterAtIndex?(_: NSLayoutManager, shouldBreakLineByHyphenatingBeforeCharacterAt: number): boolean;
    // instance method
    layoutManagerBoundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex?(_: NSLayoutManager, boundingBoxForControlGlyphAt: number, for_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
    // instance method
    layoutManagerShouldSetLineFragmentRectLineFragmentUsedRectBaselineOffsetInTextContainerForGlyphRange?(_: NSLayoutManager, shouldSetLineFragmentRect: NSRect, lineFragmentUsedRect: NSRect, baselineOffset: number, in_: NSTextContainer, forGlyphRange: NSRange): boolean;
    // instance method
    layoutManagerDidCompleteLayoutForTextContainerAtEnd?(_: NSLayoutManager, didCompleteLayoutFor?: NSTextContainer, atEnd?: boolean): void;
    // instance method
    layoutManagerTextContainerDidChangeGeometryFromSize?(_: NSLayoutManager, textContainer: NSTextContainer, didChangeGeometryFrom: CGSize): void;
    // instance method
    layoutManagerShouldGenerateGlyphsPropertiesCharacterIndexesFontForGlyphRange?(_: NSLayoutManager, shouldGenerateGlyphs: number, properties: NSLayoutManager.GlyphProperty, characterIndexes: number, font: NSFont, forGlyphRange: NSRange): number;
    // instance method
    layoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange?(_: NSLayoutManager, shouldUseTemporaryAttributes: Map<string, any>, forDrawingToScreen: boolean, atCharacterIndex: number, effectiveRange?: NSRange): Map<string, any>;
    // instance method
    layoutManagerDidInvalidateLayout?(_: NSLayoutManager): void;
  }

  // interface
  class NSLayoutXAxisAnchor extends NSLayoutAnchor<NSLayoutXAxisAnchor> {
    anchorWithOffsetToAnchor(to: NSLayoutXAxisAnchor): NSLayoutDimension;
  }

  // interface
  class NSLayoutYAxisAnchor extends NSLayoutAnchor<NSLayoutYAxisAnchor> {
    anchorWithOffsetToAnchor(to: NSLayoutYAxisAnchor): NSLayoutDimension;
  }

  // interface
  class NSLevelIndicator extends NSControl {
    criticalFillColor: NSColor;
    setCriticalFillColor(_: NSColor) // property
    criticalValue: number;
    setCriticalValue(_: number) // property
    drawsTieredCapacityLevels: boolean;
    setDrawsTieredCapacityLevels(_: boolean) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    fillColor: NSColor;
    setFillColor(_: NSColor) // property
    levelIndicatorStyle: NSLevelIndicator.Style;
    setLevelIndicatorStyle(_: NSLevelIndicator.Style) // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    numberOfMajorTickMarks: number;
    setNumberOfMajorTickMarks(_: number) // property
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number) // property
    placeholderVisibility: NSLevelIndicator.PlaceholderVisibility;
    setPlaceholderVisibility(_: NSLevelIndicator.PlaceholderVisibility) // property
    ratingImage: NSImage;
    setRatingImage(_: NSImage) // property
    ratingPlaceholderImage: NSImage;
    setRatingPlaceholderImage(_: NSImage) // property
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition) // property
    warningFillColor: NSColor;
    setWarningFillColor(_: NSColor) // property
    warningValue: number;
    setWarningValue(_: number) // property
    rectOfTickMarkAtIndex(at: number): CGRect;
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSLevelIndicatorCell extends NSActionCell {
    criticalValue: number;
    setCriticalValue(_: number) // property
    levelIndicatorStyle: NSLevelIndicator.Style;
    setLevelIndicatorStyle(_: NSLevelIndicator.Style) // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    numberOfMajorTickMarks: number;
    setNumberOfMajorTickMarks(_: number) // property
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number) // property
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition) // property
    warningValue: number;
    setWarningValue(_: number) // property
    static createWithLevelIndicatorStyle(levelIndicatorStyle: NSLevelIndicator.Style): NSLevelIndicatorCell;
    rectOfTickMarkAtIndex(at: number): CGRect;
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSMagnificationGestureRecognizer extends NSGestureRecognizer {
    magnification: number;
    setMagnification(_: number) // property
  }

  // interface
  class NSMatrix extends NSControl /* implements NSUserInterfaceValidations, NSViewToolTipOwner */ {
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean) // property
    autorecalculatesCellSize: boolean;
    setAutorecalculatesCellSize(_: boolean) // property
    isAutoscroll: boolean;
    setAutoscroll(_: boolean) // property
    autosizesCells: boolean;
    setAutosizesCells(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    cellBackgroundColor: NSColor;
    setCellBackgroundColor(_: NSColor) // property
    cellClass: typeof NSObject;
    setCellClass(_: typeof NSObject) // property
    cellSize: CGSize;
    setCellSize(_: CGSize) // property
    cells: NSCell[]; // property
    delegate: NSMatrixDelegate;
    setDelegate(_: NSMatrixDelegate) // property
    doubleAction: string;
    setDoubleAction(_: string) // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    drawsCellBackground: boolean;
    setDrawsCellBackground(_: boolean) // property
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize) // property
    keyCell: NSCell;
    setKeyCell(_: NSCell) // property
    mode: NSMatrix.Mode;
    setMode(_: NSMatrix.Mode) // property
    mouseDownFlags: number; // property
    numberOfColumns: number; // property
    numberOfRows: number; // property
    prototype: NSCell;
    setPrototype(_: NSCell) // property
    selectedCells: NSCell[]; // property
    selectedColumn: number; // property
    selectedRow: number; // property
    isSelectionByRect: boolean;
    setSelectionByRect(_: boolean) // property
    tabKeyTraversesCells: boolean;
    setTabKeyTraversesCells(_: boolean) // property
    addColumn(): void;
    addColumnWithCells(with_: NSCell[]): void;
    addRow(): void;
    addRowWithCells(with_: NSCell[]): void;
    cellAtRowColumn(atRow: number, column: number): NSCell;
    cellFrameAtRowColumn(atRow: number, column: number): CGRect;
    cellWithTag(withTag: number): NSCell;
    deselectAllCells(): void;
    deselectSelectedCell(): void;
    drawCellAtRowColumn(atRow: number, column: number): void;
    getNumberOfRowsColumns(_?: number, columns?: number): void;
    getRowColumnForPoint(_: number, column: number, for_: CGPoint): boolean;
    getRowColumnOfCell(_: number, column: number, of: NSCell): boolean;
    highlightCellAtRowColumn(_: boolean, atRow: number, column: number): void;
    static createWithFrameModeCellClassNumberOfRowsNumberOfColumns(frame: CGRect, mode: NSMatrix.Mode, cellClass?: typeof NSObject, numberOfRows?: number, numberOfColumns?: number): NSMatrix;
    static createWithFrameModePrototypeNumberOfRowsNumberOfColumns(frame: CGRect, mode: NSMatrix.Mode, prototype: NSCell, numberOfRows: number, numberOfColumns: number): NSMatrix;
    insertColumn(_: number): void;
    insertColumnWithCells(_: number, with_?: NSCell[]): void;
    insertRow(_: number): void;
    insertRowWithCells(_: number, with_?: NSCell[]): void;
    makeCellAtRowColumn(atRow: number, column: number): NSCell;
    putCellAtRowColumn(_: NSCell, atRow: number, column: number): void;
    removeColumn(_: number): void;
    removeRow(_: number): void;
    renewRowsColumns(_: number, columns: number): void;
    scrollCellToVisibleAtRowColumn(atRow: number, column: number): void;
    selectCellAtRowColumn(atRow: number, column: number): void;
    selectCellWithTag(withTag: number): boolean;
    selectText(_?: any): void;
    selectTextAtRowColumn(atRow: number, column: number): NSCell;
    sendAction(): boolean;
    sendActionToForAllCells(_: string, to: any, forAllCells: boolean): void;
    sendDoubleAction(): void;
    setScrollable(_: boolean): void;
    setSelectionFromToAnchorHighlight(_: number, to: number, anchor: number, highlight: boolean): void;
    setStateAtRowColumn(_: number, atRow: number, column: number): void;
    setToolTipForCell(_?: string, for_?: NSCell): void;
    setValidateSize(_: boolean): void;
    sizeToCells(): void;
    sortWithUsingContext(using?: (p1: any, p2: any, p3: any) => number, context?: any): void;
    sortUsingSelector(using: string): void;
    textDidBeginEditing(_: NSNotification): void;
    textDidChange(_: NSNotification): void;
    textDidEndEditing(_: NSNotification): void;
    textShouldBeginEditing(_: NSText): boolean;
    textShouldEndEditing(_: NSText): boolean;
    toolTipForCell(for_: NSCell): string;
  }

  interface NSMatrixDelegate extends NSControlTextEditingDelegate {
  }

  // interface
  class NSMediaLibraryBrowserController extends NSObject {
    frame: CGRect;
    setFrame(_: CGRect) // property
    mediaLibraries: NSMediaLibraryBrowserController.Library;
    setMediaLibraries(_: NSMediaLibraryBrowserController.Library) // property
    isVisible: boolean;
    setVisible(_: boolean) // property
    static sharedMediaLibraryBrowserController: NSMediaLibraryBrowserController; // property
    togglePanel(_?: any): void;
  }

  // interface
  class NSMenu extends NSObject /* implements NSAccessibility, NSAccessibilityElement, NSCoding, NSCopying, NSUserInterfaceItemIdentification */ {
    static menuBarVisible(): boolean;
    static popUpContextMenuWithEventForView(_: NSMenu, with_: NSEvent, for_: NSView): void;
    static popUpContextMenuWithEventForViewWithFont(_: NSMenu, with_: NSEvent, for_: NSView, with_2?: NSFont): void;
    static setMenuBarVisible(_: boolean): void;
    allowsContextMenuPlugIns: boolean;
    setAllowsContextMenuPlugIns(_: boolean) // property
    autoenablesItems: boolean;
    setAutoenablesItems(_: boolean) // property
    delegate: NSMenuDelegate;
    setDelegate(_: NSMenuDelegate) // property
    font: NSFont;
    setFont(_: NSFont) // property
    highlightedItem: NSMenuItem; // property
    itemArray: NSMenuItem[];
    setItemArray(_: NSMenuItem[]) // property
    menuBarHeight: number; // property
    minimumWidth: number;
    setMinimumWidth(_: number) // property
    numberOfItems: number; // property
    propertiesToUpdate: NSMenu.Properties; // property
    showsStateColumn: boolean;
    setShowsStateColumn(_: boolean) // property
    size: CGSize; // property
    supermenu: NSMenu;
    setSupermenu(_: NSMenu) // property
    title: string;
    setTitle(_: string) // property
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection) // property
    addItem(_: NSMenuItem): void;
    addItemWithTitleActionKeyEquivalent(withTitle: string, action?: string, keyEquivalent?: string): NSMenuItem;
    cancelTracking(): void;
    cancelTrackingWithoutAnimation(): void;
    indexOfItem(of: NSMenuItem): number;
    indexOfItemWithRepresentedObject(withRepresentedObject?: any): number;
    indexOfItemWithSubmenu(withSubmenu?: NSMenu): number;
    indexOfItemWithTag(withTag: number): number;
    indexOfItemWithTargetAndAction(withTarget?: any, andAction?: string): number;
    indexOfItemWithTitle(withTitle: string): number;
    static createWithTitle(title: string): NSMenu;
    insertItemAtIndex(_: NSMenuItem, at: number): void;
    insertItemWithTitleActionKeyEquivalentAtIndex(withTitle: string, action?: string, keyEquivalent?: string, at?: number): NSMenuItem;
    itemAtIndex(at: number): NSMenuItem;
    itemChanged(_: NSMenuItem): void;
    itemWithTag(withTag: number): NSMenuItem;
    itemWithTitle(withTitle: string): NSMenuItem;
    performActionForItemAtIndex(at: number): void;
    performKeyEquivalent(with_: NSEvent): boolean;
    popUpMenuPositioningItemAtLocationInView(positioning?: NSMenuItem, at?: CGPoint, in_?: NSView): boolean;
    removeAllItems(): void;
    removeItem(_: NSMenuItem): void;
    removeItemAtIndex(at: number): void;
    setSubmenuForItem(_?: NSMenu, for_?: NSMenuItem): void;
    submenuAction(_?: any): void;
    update(): void;
  }

  interface NSMenuDelegate extends NSObject {
    // instance method
    confinementRectForMenuOnScreen?(for_: NSMenu, on?: NSScreen): CGRect;
    // instance method
    menuUpdateItemAtIndexShouldCancel?(_: NSMenu, update: NSMenuItem, at: number, shouldCancel: boolean): boolean;
    // instance method
    menuWillHighlightItem?(_: NSMenu, willHighlight?: NSMenuItem): void;
    // instance method
    menuDidClose?(_: NSMenu): void;
    // instance method
    menuHasKeyEquivalentForEventTargetAction?(_: NSMenu, for_: NSEvent, target?: any, action?: string): boolean;
    // instance method
    menuNeedsUpdate?(_: NSMenu): void;
    // instance method
    menuWillOpen?(_: NSMenu): void;
    // instance method
    numberOfItemsInMenu?(in_: NSMenu): number;
  }

  // interface
  class NSMenuItem extends NSObject /* implements NSAccessibility, NSAccessibilityElement, NSCoding, NSCopying, NSUserInterfaceItemIdentification, NSValidatedUserInterfaceItem */ {
    static separatorItem(): NSMenuItem;
    action: string;
    setAction(_: string) // property
    allowsKeyEquivalentWhenHidden: boolean;
    setAllowsKeyEquivalentWhenHidden(_: boolean) // property
    isAlternate: boolean;
    setAlternate(_: boolean) // property
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    hasSubmenu: boolean; // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    isHiddenOrHasHiddenAncestor: boolean; // property
    isHighlighted: boolean; // property
    image: NSImage;
    setImage(_: NSImage) // property
    indentationLevel: number;
    setIndentationLevel(_: number) // property
    keyEquivalent: string;
    setKeyEquivalent(_: string) // property
    keyEquivalentModifierMask: NSEvent.ModifierFlags;
    setKeyEquivalentModifierMask(_: NSEvent.ModifierFlags) // property
    menu: NSMenu;
    setMenu(_: NSMenu) // property
    mixedStateImage: NSImage;
    setMixedStateImage(_: NSImage) // property
    offStateImage: NSImage;
    setOffStateImage(_: NSImage) // property
    onStateImage: NSImage;
    setOnStateImage(_: NSImage) // property
    parentItem: NSMenuItem; // property
    representedObject: any;
    setRepresentedObject(_: any) // property
    isSeparatorItem: boolean; // property
    state: number;
    setState(_: number) // property
    submenu: NSMenu;
    setSubmenu(_: NSMenu) // property
    tag: number;
    setTag(_: number) // property
    target: any;
    setTarget(_: any) // property
    title: string;
    setTitle(_: string) // property
    toolTip: string;
    setToolTip(_: string) // property
    userKeyEquivalent: string; // property
    view: NSView;
    setView(_: NSView) // property
    static usesUserKeyEquivalents: boolean;
    setUsesUserKeyEquivalents(_: boolean) // property
    static createWithTitleActionKeyEquivalent(title: string, action?: string, keyEquivalent?: string): NSMenuItem;
  }

  // interface
  class NSMenuItemCell extends NSButtonCell {
    imageWidth: number; // property
    keyEquivalentWidth: number; // property
    menuItem: NSMenuItem;
    setMenuItem(_: NSMenuItem) // property
    needsDisplay: boolean;
    setNeedsDisplay(_: boolean) // property
    needsSizing: boolean;
    setNeedsSizing(_: boolean) // property
    stateImageWidth: number; // property
    titleWidth: number; // property
    calcSize(): void;
    drawBorderAndBackgroundWithFrameInView(withFrame: CGRect, in_: NSView): void;
    drawKeyEquivalentWithFrameInView(withFrame: CGRect, in_: NSView): void;
    drawSeparatorItemWithFrameInView(withFrame: CGRect, in_: NSView): void;
    drawStateImageWithFrameInView(withFrame: CGRect, in_: NSView): void;
    keyEquivalentRectForBounds(forBounds: CGRect): CGRect;
    stateImageRectForBounds(forBounds: CGRect): CGRect;
  }

  interface NSMenuItemValidation extends NSObject {
    // instance method
    validateMenuItem(_: NSMenuItem): boolean;
  }

  // interface
  class NSMenuToolbarItem extends NSToolbarItem {
    menu: NSMenu;
    setMenu(_: NSMenu) // property
    showsIndicator: boolean;
    setShowsIndicator(_: boolean) // property
  }

  // interface
  class NSMutableFontCollection extends NSFontCollection {
    static fontCollectionWithAllAvailableDescriptors: NSMutableFontCollection; // property
    addQueryForDescriptors(for_: NSFontDescriptor[]): void;
    removeQueryForDescriptors(for_: NSFontDescriptor[]): void;
  }

  // interface
  class NSMutableParagraphStyle extends NSParagraphStyle {
    addTabStop(_: NSTextTab): void;
    removeTabStop(_: NSTextTab): void;
    setParagraphStyle(_: NSParagraphStyle): void;
  }

  // interface
  class NSNib extends NSObject /* implements NSCoding */ {
    static createWithNibDataBundle(nibData: NSData, bundle?: Bundle): NSNib;
    static createWithNibNamedBundle(nibNamed: string, bundle?: Bundle): NSNib;
    instantiateWithOwnerTopLevelObjects(withOwner?: any, topLevelObjects?: any[]): boolean;
  }

  // export declare function NSNumberOfColorComponents(colorSpaceName: string): number;

  // interface
  class NSObjectController extends NSController {
    automaticallyPreparesContent: boolean;
    setAutomaticallyPreparesContent(_: boolean) // property
    canAdd: boolean; // property
    canRemove: boolean; // property
    content: any;
    setContent(_: any) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    entityName: string;
    setEntityName(_: string) // property
    fetchPredicate: NSPredicate;
    setFetchPredicate(_: NSPredicate) // property
    managedObjectContext: NSManagedObjectContext;
    setManagedObjectContext(_: NSManagedObjectContext) // property
    objectClass: typeof NSObject;
    setObjectClass(_: typeof NSObject) // property
    selectedObjects: any[]; // property
    selection: any; // property
    usesLazyFetching: boolean;
    setUsesLazyFetching(_: boolean) // property
    add(_?: any): void;
    addObject(_: any): void;
    defaultFetchRequest(): NSFetchRequest<any>;
    fetch(_?: any): void;
    fetchWithRequestMergeError(merge?: NSFetchRequest<any>, error?: boolean): boolean;
    static createWithContent(content?: any): NSObjectController;
    newObject(): any;
    prepareContent(): void;
    remove(_?: any): void;
    removeObject(_: any): void;
    validateUserInterfaceItem(_: NSValidatedUserInterfaceItem): boolean;
  }

  // interface
  class NSOpenPanel extends NSSavePanel {
    URLs: NSURL[]; // property
    isAccessoryViewDisclosed: boolean;
    setAccessoryViewDisclosed(_: boolean) // property
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean) // property
    canChooseDirectories: boolean;
    setCanChooseDirectories(_: boolean) // property
    canChooseFiles: boolean;
    setCanChooseFiles(_: boolean) // property
    canDownloadUbiquitousContents: boolean;
    setCanDownloadUbiquitousContents(_: boolean) // property
    canResolveUbiquitousConflicts: boolean;
    setCanResolveUbiquitousConflicts(_: boolean) // property
    resolvesAliases: boolean;
    setResolvesAliases(_: boolean) // property
  }

  interface NSOpenSavePanelDelegate extends NSObject {
    // instance method
    panelShouldEnableURL?(_: any, shouldEnable: NSURL): boolean;
    // instance method
    panelDidChangeToDirectoryURL?(_: any, didChangeToDirectoryURL?: NSURL): void;
    // instance method
    panelUserEnteredFilenameConfirmed?(_: any, userEnteredFilename: string, confirmed: boolean): string;
    // instance method
    panelValidateURLError?(validateURL: any, error: NSURL): boolean;
    // instance method
    panelWillExpand?(_: any, willExpand: boolean): void;
    // instance method
    panelSelectionDidChange?(_?: any): void;
  }

  // interface
  class NSOutlineView extends NSTableView /* implements NSAccessibilityOutline */ {
    autoresizesOutlineColumn: boolean;
    setAutoresizesOutlineColumn(_: boolean) // property
    autosaveExpandedItems: boolean;
    setAutosaveExpandedItems(_: boolean) // property
    indentationMarkerFollowsCell: boolean;
    setIndentationMarkerFollowsCell(_: boolean) // property
    indentationPerLevel: number;
    setIndentationPerLevel(_: number) // property
    outlineTableColumn: NSTableColumn;
    setOutlineTableColumn(_: NSTableColumn) // property
    stronglyReferencesItems: boolean;
    setStronglyReferencesItems(_: boolean) // property
    childOfItem(_: number, ofItem?: any): any;
    childIndexForItem(forItem: any): number;
    collapseItem(_?: any): void;
    collapseItemCollapseChildren(_?: any, collapseChildren?: boolean): void;
    expandItem(_?: any): void;
    expandItemExpandChildren(_?: any, expandChildren?: boolean): void;
    frameOfOutlineCellAtRow(atRow: number): CGRect;
    insertItemsAtIndexesInParentWithAnimation(at: NSIndexSet, inParent?: any, withAnimation?: NSTableView.AnimationOptions): void;
    isExpandable(_?: any): boolean;
    isItemExpanded(_?: any): boolean;
    itemAtRow(atRow: number): any;
    levelForItem(forItem?: any): number;
    levelForRow(forRow: number): number;
    moveItemAtIndexInParentToIndexInParent(at: number, inParent?: any, to?: number, inParent2?: any): void;
    numberOfChildrenOfItem(ofItem?: any): number;
    parentForItem(forItem?: any): any;
    reloadItem(_?: any): void;
    reloadItemReloadChildren(_?: any, reloadChildren?: boolean): void;
    removeItemsAtIndexesInParentWithAnimation(at: NSIndexSet, inParent?: any, withAnimation?: NSTableView.AnimationOptions): void;
    rowForItem(forItem?: any): number;
    setDropItemDropChildIndex(_?: any, dropChildIndex?: number): void;
    shouldCollapseAutoExpandedItemsForDeposited(forDeposited: boolean): boolean;
  }

  interface NSOutlineViewDataSource extends NSObject {
    // instance method
    outlineViewObjectValueForTableColumnByItem?(_: NSOutlineView, objectValueFor?: NSTableColumn, byItem?: any): any;
    // instance method
    outlineViewSetObjectValueForTableColumnByItem?(_: NSOutlineView, setObjectValue?: any, for_?: NSTableColumn, byItem?: any): void;
    // instance method
    outlineViewDraggingSessionWillBeginAtPointForItems?(_: NSOutlineView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forItems: any[]): void;
    // instance method
    outlineViewDraggingSessionEndedAtPointOperation?(_: NSOutlineView, draggingSession: NSDraggingSession, endedAt: CGPoint, operation: NSDragOperation): void;
    // instance method
    outlineViewWriteItemsToPasteboard?(_: NSOutlineView, writeItems: any[], to: NSPasteboard): boolean;
    // instance method
    outlineViewAcceptDropItemChildIndex?(_: NSOutlineView, acceptDrop: NSDraggingInfo, item?: any, childIndex?: number): boolean;
    // instance method
    outlineViewChildOfItem?(_: NSOutlineView, child: number, ofItem?: any): any;
    // instance method
    outlineViewIsItemExpandable?(_: NSOutlineView, isItemExpandable: any): boolean;
    // instance method
    outlineViewItemForPersistentObject?(_: NSOutlineView, itemForPersistentObject: any): any;
    // instance method
    outlineViewNumberOfChildrenOfItem?(_: NSOutlineView, numberOfChildrenOfItem?: any): number;
    // instance method
    outlineViewPasteboardWriterForItem?(_: NSOutlineView, pasteboardWriterForItem: any): NSPasteboardWriting;
    // instance method
    outlineViewPersistentObjectForItem?(_: NSOutlineView, persistentObjectForItem?: any): any;
    // instance method
    outlineViewSortDescriptorsDidChange?(_: NSOutlineView, sortDescriptorsDidChange: NSSortDescriptor[]): void;
    // instance method
    outlineViewUpdateDraggingItemsForDrag?(_: NSOutlineView, updateDraggingItemsForDrag: NSDraggingInfo): void;
    // instance method
    outlineViewValidateDropProposedItemProposedChildIndex?(_: NSOutlineView, validateDrop: NSDraggingInfo, proposedItem?: any, proposedChildIndex?: number): NSDragOperation;
  }

  interface NSOutlineViewDelegate extends NSControlTextEditingDelegate {
    // instance method
    outlineViewViewForTableColumnItem?(_: NSOutlineView, viewFor?: NSTableColumn, item?: any): NSView;
    // instance method
    outlineViewWillDisplayOutlineCellForTableColumnItem?(_: NSOutlineView, willDisplayOutlineCell: any, for_?: NSTableColumn, item?: any): void;
    // instance method
    outlineViewDidAddRowViewForRow?(_: NSOutlineView, didAdd: NSTableRowView, forRow: number): void;
    // instance method
    outlineViewDidRemoveRowViewForRow?(_: NSOutlineView, didRemove: NSTableRowView, forRow: number): void;
    // instance method
    outlineViewWillDisplayCellForTableColumnItem?(_: NSOutlineView, willDisplayCell: any, for_?: NSTableColumn, item?: any): void;
    // instance method
    outlineViewShouldEditTableColumnItem?(_: NSOutlineView, shouldEdit?: NSTableColumn, item?: any): boolean;
    // instance method
    outlineViewDataCellForTableColumnItem?(_: NSOutlineView, dataCellFor?: NSTableColumn, item?: any): NSCell;
    // instance method
    outlineViewShouldTrackCellForTableColumnItem?(_: NSOutlineView, shouldTrackCell: NSCell, for_?: NSTableColumn, item?: any): boolean;
    // instance method
    outlineViewShouldShowCellExpansionForTableColumnItem?(_: NSOutlineView, shouldShowCellExpansionFor?: NSTableColumn, item?: any): boolean;
    // instance method
    outlineViewShouldSelectTableColumn?(_: NSOutlineView, shouldSelect?: NSTableColumn): boolean;
    // instance method
    outlineViewMouseDownInHeaderOfTableColumn?(_: NSOutlineView, mouseDownInHeaderOf: NSTableColumn): void;
    // instance method
    outlineViewDidClickTableColumn?(_: NSOutlineView, didClick: NSTableColumn): void;
    // instance method
    outlineViewDidDragTableColumn?(_: NSOutlineView, didDrag: NSTableColumn): void;
    // instance method
    outlineViewToolTipForCellRectTableColumnItemMouseLocation?(_: NSOutlineView, toolTipFor: NSCell, rect: NSRect, tableColumn?: NSTableColumn, item?: any, mouseLocation?: CGPoint): string;
    // instance method
    outlineViewShouldTypeSelectForEventWithCurrentSearchString?(_: NSOutlineView, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
    // instance method
    outlineViewTypeSelectStringForTableColumnItem?(_: NSOutlineView, typeSelectStringFor?: NSTableColumn, item?: any): string;
    // instance method
    outlineViewNextTypeSelectMatchFromItemToItemForString?(_: NSOutlineView, nextTypeSelectMatchFromItem: any, toItem: any, for_: string): any;
    // instance method
    outlineViewHeightOfRowByItem?(_: NSOutlineView, heightOfRowByItem: any): number;
    // instance method
    outlineViewIsGroupItem?(_: NSOutlineView, isGroupItem: any): boolean;
    // instance method
    outlineViewRowViewForItem?(_: NSOutlineView, rowViewForItem: any): NSTableRowView;
    // instance method
    outlineViewSelectionIndexesForProposedSelection?(_: NSOutlineView, selectionIndexesForProposedSelection: NSIndexSet): NSIndexSet;
    // instance method
    outlineViewShouldCollapseItem?(_: NSOutlineView, shouldCollapseItem: any): boolean;
    // instance method
    outlineViewShouldExpandItem?(_: NSOutlineView, shouldExpandItem: any): boolean;
    // instance method
    outlineViewShouldReorderColumnToColumn?(_: NSOutlineView, shouldReorderColumn: number, toColumn: number): boolean;
    // instance method
    outlineViewShouldSelectItem?(_: NSOutlineView, shouldSelectItem: any): boolean;
    // instance method
    outlineViewShouldShowOutlineCellForItem?(_: NSOutlineView, shouldShowOutlineCellForItem: any): boolean;
    // instance method
    outlineViewSizeToFitWidthOfColumn?(_: NSOutlineView, sizeToFitWidthOfColumn: number): number;
    // instance method
    outlineViewColumnDidMove?(_: NSNotification): void;
    // instance method
    outlineViewColumnDidResize?(_: NSNotification): void;
    // instance method
    outlineViewItemDidCollapse?(_: NSNotification): void;
    // instance method
    outlineViewItemDidExpand?(_: NSNotification): void;
    // instance method
    outlineViewItemWillCollapse?(_: NSNotification): void;
    // instance method
    outlineViewItemWillExpand?(_: NSNotification): void;
    // instance method
    outlineViewSelectionDidChange?(_: NSNotification): void;
    // instance method
    outlineViewSelectionIsChanging?(_: NSNotification): void;
    // instance method
    selectionShouldChangeInOutlineView?(in_: NSOutlineView): boolean;
  }

  // interface
  class NSPDFImageRep extends NSImageRep {
    PDFRepresentation: NSData; // property
    bounds: CGRect; // property
    currentPage: number;
    setCurrentPage(_: number) // property
    pageCount: number; // property
    static createWithData(data: NSData): NSPDFImageRep;
  }

  // interface
  class NSPDFInfo extends NSObject /* implements NSCoding, NSCopying */ {
    URL: NSURL;
    setURL(_: NSURL) // property
    attributes: NSMutableDictionary<string, any>; // property
    isFileExtensionHidden: boolean;
    setFileExtensionHidden(_: boolean) // property
    orientation: NSPrintInfo.PaperOrientation;
    setOrientation(_: NSPrintInfo.PaperOrientation) // property
    paperSize: CGSize;
    setPaperSize(_: CGSize) // property
    tagNames: string[];
    setTagNames(_: string[]) // property
  }

  // interface
  class NSPDFPanel extends NSObject {
    accessoryController: NSViewController;
    setAccessoryController(_: NSViewController) // property
    defaultFileName: string;
    setDefaultFileName(_: string) // property
    options: NSPDFPanel.Options;
    setOptions(_: NSPDFPanel.Options) // property
    beginSheetWithWithModalForCompletionHandler(with_: NSPDFInfo, modalFor?: NSWindow, completionHandler?: (p1: number) => void): void;
  }

  // interface
  class NSPICTImageRep extends NSImageRep {
    PICTRepresentation: NSData; // property
    boundingBox: CGRect; // property
    static createWithData(data: NSData): NSPICTImageRep;
  }

  // interface
  class NSPageController extends NSViewController /* implements NSAnimatablePropertyContainer, NSCoding */ {
    arrangedObjects: any[];
    setArrangedObjects(_: any[]) // property
    delegate: NSPageControllerDelegate;
    setDelegate(_: NSPageControllerDelegate) // property
    selectedIndex: number;
    setSelectedIndex(_: number) // property
    selectedViewController: NSViewController; // property
    transitionStyle: NSPageController.TransitionStyle;
    setTransitionStyle(_: NSPageController.TransitionStyle) // property
    completeTransition(): void;
    navigateBack(_?: any): void;
    navigateForward(_?: any): void;
    navigateForwardToObject(to: any): void;
    takeSelectedIndexFrom(_?: any): void;
  }

  interface NSPageControllerDelegate extends NSObject {
    // instance method
    pageControllerIdentifierForObject?(_: NSPageController, identifierFor: any): string;
    // instance method
    pageControllerFrameForObject?(_: NSPageController, frameFor?: any): CGRect;
    // instance method
    pageControllerPrepareViewControllerWithObject?(_: NSPageController, prepare: NSViewController, with_?: any): void;
    // instance method
    pageControllerDidTransitionToObject?(_: NSPageController, didTransitionTo: any): void;
    // instance method
    pageControllerViewControllerForIdentifier?(_: NSPageController, viewControllerForIdentifier: string): NSViewController;
    // instance method
    pageControllerDidEndLiveTransition?(_: NSPageController): void;
    // instance method
    pageControllerWillStartLiveTransition?(_: NSPageController): void;
  }

  // interface
  class NSPageLayout extends NSObject {
    accessoryControllers: NSViewController[]; // property
    printInfo: NSPrintInfo; // property
    addAccessoryController(_: NSViewController): void;
    beginSheetWithPrintInfoModalForWindowDelegateDidEndSelectorContextInfo(with_: NSPrintInfo, modalFor: NSWindow, delegate?: any, didEnd?: string, contextInfo?: any): void;
    removeAccessoryController(_: NSViewController): void;
    runModal(): number;
    runModalWithPrintInfo(with_: NSPrintInfo): number;
  }

  // interface
  class NSPanGestureRecognizer extends NSGestureRecognizer /* implements NSCoding */ {
    buttonMask: number;
    setButtonMask(_: number) // property
    numberOfTouchesRequired: number;
    setNumberOfTouchesRequired(_: number) // property
    setTranslationInView(_: CGPoint, in_?: NSView): void;
    translationInView(in_?: NSView): CGPoint;
    velocityInView(in_?: NSView): CGPoint;
  }

  // interface
  class NSPanel extends NSWindow {
    becomesKeyOnlyIfNeeded: boolean;
    setBecomesKeyOnlyIfNeeded(_: boolean) // property
  }

  // interface
  class NSParagraphStyle extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding */ {
    static defaultWritingDirectionForLanguage(forLanguage?: string): NSWritingDirection;
    alignment: NSTextAlignment; // property
    allowsDefaultTighteningForTruncation: boolean; // property
    baseWritingDirection: NSWritingDirection; // property
    defaultTabInterval: number; // property
    firstLineHeadIndent: number; // property
    headIndent: number; // property
    headerLevel: number; // property
    hyphenationFactor: number; // property
    lineBreakMode: NSLineBreakMode; // property
    lineHeightMultiple: number; // property
    lineSpacing: number; // property
    maximumLineHeight: number; // property
    minimumLineHeight: number; // property
    paragraphSpacing: number; // property
    paragraphSpacingBefore: number; // property
    tabStops: NSTextTab[]; // property
    tailIndent: number; // property
    textBlocks: NSTextBlock[]; // property
    textLists: NSTextList[]; // property
    tighteningFactorForTruncation: number; // property
    static defaultParagraphStyle: NSParagraphStyle; // property
  }

  // interface
  class NSPasteboard extends NSObject {
    static pasteboardWithUniqueName(): NSPasteboard;
    static typesFilterableTo(filterableTo: string): string[];
    changeCount: number; // property
    name: string; // property
    pasteboardItems: NSPasteboardItem[]; // property
    types: string[]; // property
    static generalPasteboard: NSPasteboard; // property
    addTypesOwner(_: string[], owner?: any): number;
    availableTypeFromArray(from: string[]): string;
    canReadItemWithDataConformingToTypes(withDataConformingToTypes: string[]): boolean;
    canReadObjectForClassesOptions(forClasses: typeof NSObject[], options?: Map<string, any>): boolean;
    clearContents(): number;
    dataForType(forType: string): NSData;
    declareTypesOwner(_: string[], owner?: any): number;
    indexOfPasteboardItem(of: NSPasteboardItem): number;
    prepareForNewContentsWithOptions(with_: NSPasteboard.ContentsOptions): number;
    propertyListForType(forType: string): any;
    readFileContentsTypeToFile(_?: string, toFile?: string): string;
    readFileWrapper(): FileWrapper;
    readObjectsForClassesOptions(forClasses: typeof NSObject[], options?: Map<string, any>): any[];
    releaseGlobally(): void;
    setDataForType(_?: NSData, forType?: string): boolean;
    setPropertyListForType(_: any, forType: string): boolean;
    setStringForType(_: string, forType: string): boolean;
    stringForType(forType: string): string;
    writeFileContents(_: string): boolean;
    writeFileWrapper(_: FileWrapper): boolean;
    writeObjects(_: NSPasteboardWriting[]): boolean;
  }

  // interface
  class NSPasteboardItem extends NSObject /* implements NSPasteboardReading, NSPasteboardWriting */ {
    types: string[]; // property
    availableTypeFromArray(from: string[]): string;
    dataForType(forType: string): NSData;
    propertyListForType(forType: string): any;
    setDataForType(_: NSData, forType: string): boolean;
    setDataProviderForTypes(_: NSPasteboardItemDataProvider, forTypes: string[]): boolean;
    setPropertyListForType(_: any, forType: string): boolean;
    setStringForType(_: string, forType: string): boolean;
    stringForType(forType: string): string;
  }

  interface NSPasteboardItemDataProvider extends NSObject {
    // instance method
    pasteboardItemProvideDataForType(_?: NSPasteboard, item?: NSPasteboardItem, provideDataForType?: string): void;
    // instance method
    pasteboardFinishedWithDataProvider?(_: NSPasteboard): void;
  }

  interface NSPasteboardReading extends NSObject {
  }

  interface NSPasteboardTypeOwner extends NSObject {
    // instance method
    pasteboardProvideDataForType(_: NSPasteboard, provideDataForType: string): void;
    // instance method
    pasteboardChangedOwner?(_: NSPasteboard): void;
  }

  interface NSPasteboardWriting extends NSObject {
    // instance method
    pasteboardPropertyListForType(forType: string): any;
    // instance method
    writableTypesForPasteboard(for_: NSPasteboard): string[];
    // instance method
    writingOptionsForTypePasteboard?(forType: string, pasteboard: NSPasteboard): NSPasteboard.WritingOptions;
  }

  // interface
  class NSPathCell extends NSActionCell /* implements NSMenuItemValidation, NSOpenSavePanelDelegate */ {
    URL: NSURL;
    setURL(_: NSURL) // property
    allowedTypes: string[];
    setAllowedTypes(_: string[]) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    clickedPathComponentCell: NSPathComponentCell; // property
    delegate: NSPathCellDelegate;
    setDelegate(_: NSPathCellDelegate) // property
    doubleAction: string;
    setDoubleAction(_: string) // property
    pathComponentCells: NSPathComponentCell[];
    setPathComponentCells(_: NSPathComponentCell[]) // property
    pathStyle: NSPathControl.Style;
    setPathStyle(_: NSPathControl.Style) // property
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString) // property
    placeholderString: string;
    setPlaceholderString(_: string) // property
    static pathComponentCellClass: typeof NSObject; // property
    mouseEnteredWithFrameInView(with_: NSEvent, frame: CGRect, in_: NSView): void;
    mouseExitedWithFrameInView(with_: NSEvent, frame: CGRect, in_: NSView): void;
    pathComponentCellAtPointWithFrameInView(at: CGPoint, withFrame: CGRect, in_: NSView): NSPathComponentCell;
    rectOfPathComponentCellWithFrameInView(of: NSPathComponentCell, withFrame: CGRect, in_: NSView): CGRect;
    setObjectValue(_?: any): void;
  }

  interface NSPathCellDelegate extends NSObject {
    // instance method
    pathCellWillDisplayOpenPanel?(_: NSPathCell, willDisplay: NSOpenPanel): void;
    // instance method
    pathCellWillPopUpMenu?(_: NSPathCell, willPopUp: NSMenu): void;
  }

  // interface
  class NSPathComponentCell extends NSTextFieldCell {
    URL: NSURL;
    setURL(_: NSURL) // property
  }

  // interface
  class NSPathControl extends NSControl {
    URL: NSURL;
    setURL(_: NSURL) // property
    allowedTypes: string[];
    setAllowedTypes(_: string[]) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    clickedPathItem: NSPathControlItem; // property
    delegate: NSPathControlDelegate;
    setDelegate(_: NSPathControlDelegate) // property
    doubleAction: string;
    setDoubleAction(_: string) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    pathItems: NSPathControlItem[];
    setPathItems(_: NSPathControlItem[]) // property
    pathStyle: NSPathControl.Style;
    setPathStyle(_: NSPathControl.Style) // property
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString) // property
    placeholderString: string;
    setPlaceholderString(_: string) // property
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
  }

  interface NSPathControlDelegate extends NSObject {
    // instance method
    pathControlShouldDragItemWithPasteboard?(_: NSPathControl, shouldDrag: NSPathControlItem, with_: NSPasteboard): boolean;
    // instance method
    pathControlShouldDragPathComponentCellWithPasteboard?(_: NSPathControl, shouldDrag: NSPathComponentCell, with_: NSPasteboard): boolean;
    // instance method
    pathControlWillDisplayOpenPanel?(_: NSPathControl, willDisplay: NSOpenPanel): void;
    // instance method
    pathControlWillPopUpMenu?(_: NSPathControl, willPopUp: NSMenu): void;
    // instance method
    pathControlAcceptDrop?(_: NSPathControl, acceptDrop: NSDraggingInfo): boolean;
    // instance method
    pathControlValidateDrop?(_: NSPathControl, validateDrop: NSDraggingInfo): NSDragOperation;
  }

  // interface
  class NSPathControlItem extends NSObject {
    URL: NSURL; // property
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString) // property
    image: NSImage;
    setImage(_: NSImage) // property
    title: string;
    setTitle(_: string) // property
  }

  // export declare function NSPerformService(itemName: string, pboard: NSPasteboard): boolean;

  // interface
  class NSPersistentDocument extends NSDocument {
    managedObjectContext: NSManagedObjectContext;
    setManagedObjectContext(_: NSManagedObjectContext) // property
    managedObjectModel: NSManagedObjectModel; // property
    configurePersistentStoreCoordinatorForURLOfTypeModelConfigurationStoreOptionsError(ofType: NSURL, modelConfiguration: string, storeOptions?: string, error?: Map<string, any>): boolean;
    persistentStoreTypeForFileType(forFileType: string): string;
  }

  // interface
  class NSPickerTouchBarItem extends NSTouchBarItem {
    action: string;
    setAction(_: string) // property
    collapsedRepresentationImage: NSImage;
    setCollapsedRepresentationImage(_: NSImage) // property
    collapsedRepresentationLabel: string;
    setCollapsedRepresentationLabel(_: string) // property
    controlRepresentation: NSPickerTouchBarItem.ControlRepresentation;
    setControlRepresentation(_: NSPickerTouchBarItem.ControlRepresentation) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    numberOfOptions: number;
    setNumberOfOptions(_: number) // property
    selectedIndex: number;
    setSelectedIndex(_: number) // property
    selectionColor: NSColor;
    setSelectionColor(_: NSColor) // property
    selectionMode: NSPickerTouchBarItem.SelectionMode;
    setSelectionMode(_: NSPickerTouchBarItem.SelectionMode) // property
    target: any;
    setTarget(_: any) // property
    imageAtIndex(at: number): NSImage;
    isEnabledAtIndex(at: number): boolean;
    labelAtIndex(at: number): string;
    setEnabledAtIndex(_: boolean, at: number): void;
    setImageAtIndex(_?: NSImage, at?: number): void;
    setLabelAtIndex(_: string, at: number): void;
  }

  // export declare function NSPlanarFromDepth(depth: NSWindow.Depth): boolean;

  // interface
  class NSPopUpButton extends NSButton {
    autoenablesItems: boolean;
    setAutoenablesItems(_: boolean) // property
    indexOfSelectedItem: number; // property
    itemArray: NSMenuItem[]; // property
    itemTitles: string[]; // property
    lastItem: NSMenuItem; // property
    numberOfItems: number; // property
    preferredEdge: NSRectEdge;
    setPreferredEdge(_: NSRectEdge) // property
    pullsDown: boolean;
    setPullsDown(_: boolean) // property
    selectedItem: NSMenuItem; // property
    titleOfSelectedItem: string; // property
    addItemWithTitle(withTitle: string): void;
    addItemsWithTitles(withTitles: string[]): void;
    indexOfItem(of: NSMenuItem): number;
    indexOfItemWithRepresentedObject(withRepresentedObject?: any): number;
    indexOfItemWithTag(withTag: number): number;
    indexOfItemWithTargetAndAction(withTarget?: any, andAction?: string): number;
    indexOfItemWithTitle(withTitle: string): number;
    static createWithFramePullsDown(frame: CGRect, pullsDown: boolean): NSPopUpButton;
    insertItemWithTitleAtIndex(withTitle: string, at: number): void;
    itemAtIndex(at: number): NSMenuItem;
    itemTitleAtIndex(at: number): string;
    itemWithTitle(withTitle: string): NSMenuItem;
    removeAllItems(): void;
    removeItemAtIndex(at: number): void;
    removeItemWithTitle(withTitle: string): void;
    selectItem(_?: NSMenuItem): void;
    selectItemAtIndex(at: number): void;
    selectItemWithTag(withTag: number): boolean;
    selectItemWithTitle(withTitle: string): void;
    setTitle(_: string): void;
    synchronizeTitleAndSelectedItem(): void;
  }

  // interface
  class NSPopUpButtonCell extends NSMenuItemCell /* implements NSMenuItemValidation */ {
    altersStateOfSelectedItem: boolean;
    setAltersStateOfSelectedItem(_: boolean) // property
    arrowPosition: NSPopUpButton.ArrowPosition;
    setArrowPosition(_: NSPopUpButton.ArrowPosition) // property
    autoenablesItems: boolean;
    setAutoenablesItems(_: boolean) // property
    indexOfSelectedItem: number; // property
    itemArray: NSMenuItem[]; // property
    itemTitles: string[]; // property
    lastItem: NSMenuItem; // property
    numberOfItems: number; // property
    preferredEdge: NSRectEdge;
    setPreferredEdge(_: NSRectEdge) // property
    pullsDown: boolean;
    setPullsDown(_: boolean) // property
    selectedItem: NSMenuItem; // property
    titleOfSelectedItem: string; // property
    usesItemFromMenu: boolean;
    setUsesItemFromMenu(_: boolean) // property
    addItemWithTitle(withTitle: string): void;
    addItemsWithTitles(withTitles: string[]): void;
    attachPopUpWithFrameInView(withFrame: CGRect, in_: NSView): void;
    dismissPopUp(): void;
    indexOfItem(of: NSMenuItem): number;
    indexOfItemWithRepresentedObject(withRepresentedObject?: any): number;
    indexOfItemWithTag(withTag: number): number;
    indexOfItemWithTargetAndAction(withTarget?: any, andAction?: string): number;
    indexOfItemWithTitle(withTitle: string): number;
    static createWithTextCellPullsDown(textCell: string, pullsDown: boolean): NSPopUpButtonCell;
    insertItemWithTitleAtIndex(withTitle: string, at: number): void;
    itemAtIndex(at: number): NSMenuItem;
    itemTitleAtIndex(at: number): string;
    itemWithTitle(withTitle: string): NSMenuItem;
    performClickWithFrameInView(withFrame: CGRect, in_: NSView): void;
    removeAllItems(): void;
    removeItemAtIndex(at: number): void;
    removeItemWithTitle(withTitle: string): void;
    selectItem(_?: NSMenuItem): void;
    selectItemAtIndex(at: number): void;
    selectItemWithTag(withTag: number): boolean;
    selectItemWithTitle(withTitle: string): void;
    setTitle(_?: string): void;
    synchronizeTitleAndSelectedItem(): void;
  }

  // interface
  class NSPopover extends NSResponder /* implements NSAccessibility, NSAccessibilityElement, NSAppearanceCustomization */ {
    animates: boolean;
    setAnimates(_: boolean) // property
    behavior: NSPopover.Behavior;
    setBehavior(_: NSPopover.Behavior) // property
    contentSize: CGSize;
    setContentSize(_: CGSize) // property
    contentViewController: NSViewController;
    setContentViewController(_: NSViewController) // property
    delegate: NSPopoverDelegate;
    setDelegate(_: NSPopoverDelegate) // property
    isDetached: boolean; // property
    positioningRect: CGRect;
    setPositioningRect(_: CGRect) // property
    isShown: boolean; // property
    close(): void;
    performClose(_?: any): void;
    showRelativeToRectOfViewPreferredEdge(relativeTo: CGRect, of: NSView, preferredEdge: NSRectEdge): void;
  }

  interface NSPopoverDelegate extends NSObject {
    // instance method
    detachableWindowForPopover?(for_: NSPopover): NSWindow;
    // instance method
    popoverDidClose?(_: NSNotification): void;
    // instance method
    popoverDidDetach?(_: NSPopover): void;
    // instance method
    popoverDidShow?(_: NSNotification): void;
    // instance method
    popoverShouldClose?(_: NSPopover): boolean;
    // instance method
    popoverShouldDetach?(_: NSPopover): boolean;
    // instance method
    popoverWillClose?(_: NSNotification): void;
    // instance method
    popoverWillShow?(_: NSNotification): void;
  }

  // interface
  class NSPopoverTouchBarItem extends NSTouchBarItem {
    collapsedRepresentation: NSView;
    setCollapsedRepresentation(_: NSView) // property
    collapsedRepresentationImage: NSImage;
    setCollapsedRepresentationImage(_: NSImage) // property
    collapsedRepresentationLabel: string;
    setCollapsedRepresentationLabel(_: string) // property
    popoverTouchBar: NSTouchBar;
    setPopoverTouchBar(_: NSTouchBar) // property
    pressAndHoldTouchBar: NSTouchBar;
    setPressAndHoldTouchBar(_: NSTouchBar) // property
    showsCloseButton: boolean;
    setShowsCloseButton(_: boolean) // property
    dismissPopover(_?: any): void;
    makeStandardActivatePopoverGestureRecognizer(): NSGestureRecognizer;
    showPopover(_?: any): void;
  }

  // interface
  class NSPredicateEditor extends NSRuleEditor {
    rowTemplates: NSPredicateEditorRowTemplate[];
    setRowTemplates(_: NSPredicateEditorRowTemplate[]) // property
  }

  // interface
  class NSPredicateEditorRowTemplate extends NSObject /* implements NSCoding, NSCopying */ {
    static templatesWithAttributeKeyPathsInEntityDescription(withAttributeKeyPaths: string[], in_: NSEntityDescription): NSPredicateEditorRowTemplate[];
    compoundTypes: number[]; // property
    leftExpressions: NSExpression[]; // property
    modifier: NSComparisonPredicate.Modifier; // property
    operators: number[]; // property
    options: number; // property
    rightExpressionAttributeType: NSAttributeType; // property
    rightExpressions: NSExpression[]; // property
    templateViews: NSView[]; // property
    displayableSubpredicatesOfPredicate(of: NSPredicate): NSPredicate[];
    static createWithCompoundTypes(compoundTypes: number[]): NSPredicateEditorRowTemplate;
    static createWithLeftExpressionsRightExpressionAttributeTypeModifierOperatorsOptions(leftExpressions: NSExpression[], rightExpressionAttributeType: NSAttributeType, modifier: NSComparisonPredicate.Modifier, operators: number[], options: number): NSPredicateEditorRowTemplate;
    static createWithLeftExpressionsRightExpressionsModifierOperatorsOptions(leftExpressions: NSExpression[], rightExpressions: NSExpression[], modifier: NSComparisonPredicate.Modifier, operators: number[], options: number): NSPredicateEditorRowTemplate;
    matchForPredicate(for_: NSPredicate): number;
    predicateWithSubpredicates(withSubpredicates?: NSPredicate[]): NSPredicate;
    setPredicate(_: NSPredicate): void;
  }

  // interface
  class NSPressGestureRecognizer extends NSGestureRecognizer /* implements NSCoding */ {
    allowableMovement: number;
    setAllowableMovement(_: number) // property
    buttonMask: number;
    setButtonMask(_: number) // property
    minimumPressDuration: number;
    setMinimumPressDuration(_: number) // property
    numberOfTouchesRequired: number;
    setNumberOfTouchesRequired(_: number) // property
  }

  // interface
  class NSPressureConfiguration extends NSObject {
    pressureBehavior: NSEvent.PressureBehavior; // property
    static createWithPressureBehavior(pressureBehavior: NSEvent.PressureBehavior): NSPressureConfiguration;
    set(): void;
  }

  // interface
  class NSPrintInfo extends NSObject /* implements NSCoding, NSCopying */ {
    bottomMargin: number;
    setBottomMargin(_: number) // property
    horizontalPagination: NSPrintInfo.PaginationMode;
    setHorizontalPagination(_: NSPrintInfo.PaginationMode) // property
    isHorizontallyCentered: boolean;
    setHorizontallyCentered(_: boolean) // property
    imageablePageBounds: CGRect; // property
    jobDisposition: string;
    setJobDisposition(_: string) // property
    leftMargin: number;
    setLeftMargin(_: number) // property
    localizedPaperName: string; // property
    orientation: NSPrintInfo.PaperOrientation;
    setOrientation(_: NSPrintInfo.PaperOrientation) // property
    paperName: string;
    setPaperName(_: string) // property
    paperSize: CGSize;
    setPaperSize(_: CGSize) // property
    printSettings: NSMutableDictionary<string, any>; // property
    printer: NSPrinter;
    setPrinter(_: NSPrinter) // property
    rightMargin: number;
    setRightMargin(_: number) // property
    scalingFactor: number;
    setScalingFactor(_: number) // property
    isSelectionOnly: boolean;
    setSelectionOnly(_: boolean) // property
    topMargin: number;
    setTopMargin(_: number) // property
    verticalPagination: NSPrintInfo.PaginationMode;
    setVerticalPagination(_: NSPrintInfo.PaginationMode) // property
    isVerticallyCentered: boolean;
    setVerticallyCentered(_: boolean) // property
    static defaultPrinter: NSPrinter; // property
    static sharedPrintInfo: NSPrintInfo;
    setSharedPrintInfo(_: NSPrintInfo) // property
    PMPageFormat(): any;
    PMPrintSession(): any;
    PMPrintSettings(): any;
    dictionary(): NSMutableDictionary<string, any>;
    static createWithDictionary(dictionary: Map<string, any>): NSPrintInfo;
    setUpPrintOperationDefaultValues(): void;
    takeSettingsFromPDFInfo(from: NSPDFInfo): void;
    updateFromPMPageFormat(): void;
    updateFromPMPrintSettings(): void;
  }

  // interface
  class NSPrintOperation extends NSObject {
    static EPSOperationWithViewInsideRectToData(with_: NSView, inside: CGRect, to?: NSMutableData): NSPrintOperation;
    static EPSOperationWithViewInsideRectToDataPrintInfo(with_: NSView, inside: CGRect, to: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
    static EPSOperationWithViewInsideRectToPathPrintInfo(with_: NSView, inside: CGRect, toPath: string, printInfo: NSPrintInfo): NSPrintOperation;
    static PDFOperationWithViewInsideRectToData(with_: NSView, inside: CGRect, to: NSMutableData): NSPrintOperation;
    static PDFOperationWithViewInsideRectToDataPrintInfo(with_: NSView, inside: CGRect, to: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
    static PDFOperationWithViewInsideRectToPathPrintInfo(with_: NSView, inside: CGRect, toPath: string, printInfo: NSPrintInfo): NSPrintOperation;
    PDFPanel: NSPDFPanel;
    setPDFPanel(_: NSPDFPanel) // property
    canSpawnSeparateThread: boolean;
    setCanSpawnSeparateThread(_: boolean) // property
    context: NSGraphicsContext; // property
    isCopyingOperation: boolean; // property
    currentPage: number; // property
    jobTitle: string;
    setJobTitle(_: string) // property
    pageOrder: NSPrintOperation.PageOrder;
    setPageOrder(_: NSPrintOperation.PageOrder) // property
    pageRange: NSRange; // property
    preferredRenderingQuality: NSPrintOperation.RenderingQuality; // property
    printInfo: NSPrintInfo;
    setPrintInfo(_: NSPrintInfo) // property
    printPanel: NSPrintPanel;
    setPrintPanel(_: NSPrintPanel) // property
    showsPrintPanel: boolean;
    setShowsPrintPanel(_: boolean) // property
    showsProgressPanel: boolean;
    setShowsProgressPanel(_: boolean) // property
    view: NSView; // property
    static currentOperation: NSPrintOperation;
    setCurrentOperation(_: NSPrintOperation) // property
    cleanUpOperation(): void;
    createContext(): NSGraphicsContext;
    deliverResult(): boolean;
    destroyContext(): void;
    runOperation(): boolean;
    runOperationModalForWindowDelegateDidRunSelectorContextInfo(for_: NSWindow, delegate?: any, didRun?: string, contextInfo?: any): void;
  }

  // interface
  class NSPrintPanel extends NSObject {
    accessoryControllers: NSViewController[]; // property
    helpAnchor: string;
    setHelpAnchor(_: string) // property
    jobStyleHint: string;
    setJobStyleHint(_: string) // property
    options: NSPrintPanel.Options;
    setOptions(_: NSPrintPanel.Options) // property
    printInfo: NSPrintInfo; // property
    addAccessoryController(_: NSViewController): void;
    beginSheetWithPrintInfoModalForWindowDelegateDidEndSelectorContextInfo(with_: NSPrintInfo, modalFor: NSWindow, delegate?: any, didEnd?: string, contextInfo?: any): void;
    defaultButtonTitle(): string;
    removeAccessoryController(_: NSViewController): void;
    runModal(): number;
    runModalWithPrintInfo(with_: NSPrintInfo): number;
    setDefaultButtonTitle(_?: string): void;
  }

  interface NSPrintPanelAccessorizing {
    // instance method
    keyPathsForValuesAffectingPreview?(): NSSet<string>;
    // instance method
    localizedSummaryItems(): Map<string, string>[];
  }

  // interface
  class NSPrinter extends NSObject /* implements NSCoding, NSCopying */ {
    deviceDescription: Map<string, any>; // property
    languageLevel: number; // property
    name: string; // property
    type: string; // property
    static printerNames: string[]; // property
    static printerTypes: string[]; // property
    pageSizeForPaper(forPaper: string): CGSize;
  }

  // interface
  class NSProgressIndicator extends NSView /* implements NSAccessibilityProgressIndicator */ {
    isBezeled: boolean;
    setBezeled(_: boolean) // property
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize) // property
    controlTint: NSControlTint;
    setControlTint(_: NSControlTint) // property
    isDisplayedWhenStopped: boolean;
    setDisplayedWhenStopped(_: boolean) // property
    doubleValue: number;
    setDoubleValue(_: number) // property
    isIndeterminate: boolean;
    setIndeterminate(_: boolean) // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    style: NSProgressIndicator.Style;
    setStyle(_: NSProgressIndicator.Style) // property
    usesThreadedAnimation: boolean;
    setUsesThreadedAnimation(_: boolean) // property
    incrementBy(by: number): void;
    sizeToFit(): void;
    startAnimation(_?: any): void;
    stopAnimation(_?: any): void;
  }

  // export declare function NSRectClip(rect: CGRect): void;

  // export declare function NSRectClipList(rects: NSRect, count: number): void;

  // export declare function NSRectFill(rect: CGRect): void;

  // export declare function NSRectFillList(rects: NSRect, count: number): void;

  // export declare function NSRectFillListUsingOperation(rects: NSRect, count: number, op: NSCompositingOperation): void;

  // export declare function NSRectFillListWithColors(rects: NSRect, colors: NSColor, num: number): void;

  // export declare function NSRectFillListWithColorsUsingOperation(rects: NSRect, colors: NSColor, num: number, op: NSCompositingOperation): void;

  // export declare function NSRectFillListWithGrays(rects: NSRect, grays: number, num: number): void;

  // export declare function NSRectFillUsingOperation(rect: CGRect, op: NSCompositingOperation): void;

  // export declare function NSRegisterServicesProvider(provider: any, name: string): void;

  // interface
  class NSResponder extends NSObject /* implements NSCoding, NSStandardKeyBindingResponding, NSUserActivityRestoring, NSTouchBarProvider */ {
    acceptsFirstResponder: boolean; // property
    menu: NSMenu;
    setMenu(_: NSMenu) // property
    nextResponder: NSResponder;
    setNextResponder(_: NSResponder) // property
    touchBar: NSTouchBar;
    setTouchBar(_: NSTouchBar) // property
    undoManager: UndoManager; // property
    userActivity: NSUserActivity;
    setUserActivity(_: NSUserActivity) // property
    static restorableStateKeyPaths: string[]; // property
    becomeFirstResponder(): boolean;
    beginGestureWithEvent(with_: NSEvent): void;
    changeModeWithEvent(with_: NSEvent): void;
    cursorUpdate(with_: NSEvent): void;
    encodeRestorableStateWithCoder(with_: NSCoder): void;
    encodeRestorableStateWithCoderBackgroundQueue(with_: NSCoder, backgroundQueue: OperationQueue): void;
    endGestureWithEvent(with_: NSEvent): void;
    flagsChanged(with_: NSEvent): void;
    flushBufferedKeyEvents(): void;
    helpRequested(_: NSEvent): void;
    interpretKeyEvents(_: NSEvent[]): void;
    invalidateRestorableState(): void;
    keyDown(with_: NSEvent): void;
    keyUp(with_: NSEvent): void;
    magnifyWithEvent(with_: NSEvent): void;
    makeTouchBar(): NSTouchBar;
    mouseDown(with_: NSEvent): void;
    mouseDragged(with_: NSEvent): void;
    mouseEntered(with_: NSEvent): void;
    mouseExited(with_: NSEvent): void;
    mouseMoved(with_: NSEvent): void;
    mouseUp(with_: NSEvent): void;
    newWindowForTab(_?: any): void;
    noResponderFor(for_: string): void;
    otherMouseDown(with_: NSEvent): void;
    otherMouseDragged(with_: NSEvent): void;
    otherMouseUp(with_: NSEvent): void;
    performKeyEquivalent(with_: NSEvent): boolean;
    performTextFinderAction(_?: any): void;
    presentError(_: NSError): boolean;
    presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(_: NSError, modalFor: NSWindow, delegate?: any, didPresent?: string, contextInfo?: any): void;
    pressureChangeWithEvent(with_: NSEvent): void;
    quickLookWithEvent(with_: NSEvent): void;
    resignFirstResponder(): boolean;
    restoreStateWithCoder(with_: NSCoder): void;
    rightMouseDown(with_: NSEvent): void;
    rightMouseDragged(with_: NSEvent): void;
    rightMouseUp(with_: NSEvent): void;
    rotateWithEvent(with_: NSEvent): void;
    scrollWheel(with_: NSEvent): void;
    shouldBeTreatedAsInkEvent(_: NSEvent): boolean;
    showContextHelp(_?: any): void;
    smartMagnifyWithEvent(with_: NSEvent): void;
    supplementalTargetForActionSender(forAction: string, sender?: any): any;
    swipeWithEvent(with_: NSEvent): void;
    tabletPoint(with_: NSEvent): void;
    tabletProximity(with_: NSEvent): void;
    touchesBeganWithEvent(with_: NSEvent): void;
    touchesCancelledWithEvent(with_: NSEvent): void;
    touchesEndedWithEvent(with_: NSEvent): void;
    touchesMovedWithEvent(with_: NSEvent): void;
    tryToPerformWith(_: string, with_?: any): boolean;
    updateUserActivityState(_: NSUserActivity): void;
    validRequestorForSendTypeReturnType(forSendType?: string, returnType?: string): any;
    validateProposedFirstResponderForEvent(_: NSResponder, for_?: NSEvent): boolean;
    wantsForwardedScrollEventsForAxis(for_: NSEvent.GestureAxis): boolean;
    wantsScrollEventsForSwipeTrackingOnAxis(on: NSEvent.GestureAxis): boolean;
    willPresentError(_: NSError): NSError;
  }

  // interface
  class NSRotationGestureRecognizer extends NSGestureRecognizer {
    rotation: number;
    setRotation(_: number) // property
    rotationInDegrees: number;
    setRotationInDegrees(_: number) // property
  }

  // interface
  class NSRuleEditor extends NSControl {
    canRemoveAllRows: boolean;
    setCanRemoveAllRows(_: boolean) // property
    criteriaKeyPath: string;
    setCriteriaKeyPath(_: string) // property
    delegate: NSRuleEditorDelegate;
    setDelegate(_: NSRuleEditorDelegate) // property
    displayValuesKeyPath: string;
    setDisplayValuesKeyPath(_: string) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    formattingDictionary: Map<string, string>;
    setFormattingDictionary(_: Map<string, string>) // property
    formattingStringsFilename: string;
    setFormattingStringsFilename(_: string) // property
    nestingMode: NSRuleEditor.NestingMode;
    setNestingMode(_: NSRuleEditor.NestingMode) // property
    numberOfRows: number; // property
    predicate: NSPredicate; // property
    rowClass: typeof NSObject;
    setRowClass(_: typeof NSObject) // property
    rowHeight: number;
    setRowHeight(_: number) // property
    rowTypeKeyPath: string;
    setRowTypeKeyPath(_: string) // property
    selectedRowIndexes: NSIndexSet; // property
    subrowsKeyPath: string;
    setSubrowsKeyPath(_: string) // property
    addRow(_?: any): void;
    criteriaForRow(forRow: number): any[];
    displayValuesForRow(forRow: number): any[];
    insertRowAtIndexWithTypeAsSubrowOfRowAnimate(at: number, with_: NSRuleEditor.RowType, asSubrowOfRow: number, animate: boolean): void;
    parentRowForRow(forRow: number): number;
    predicateForRow(forRow: number): NSPredicate;
    reloadCriteria(): void;
    reloadPredicate(): void;
    removeRowAtIndex(at: number): void;
    removeRowsAtIndexesIncludeSubrows(at: NSIndexSet, includeSubrows: boolean): void;
    rowForDisplayValue(forDisplayValue: any): number;
    rowTypeForRow(forRow: number): NSRuleEditor.RowType;
    selectRowIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    setCriteriaAndDisplayValuesForRowAtIndex(_: any[], andDisplayValues: any[], forRowAt: number): void;
    subrowIndexesForRow(forRow: number): NSIndexSet;
  }

  interface NSRuleEditorDelegate extends NSObject {
    // instance method
    ruleEditorNumberOfChildrenForCriterionWithRowType(_: NSRuleEditor, numberOfChildrenForCriterion?: any, with_?: NSRuleEditor.RowType): number;
    // instance method
    ruleEditorChildForCriterionWithRowType(_: NSRuleEditor, child: number, forCriterion?: any, with_?: NSRuleEditor.RowType): any;
    // instance method
    ruleEditorDisplayValueForCriterionInRow(_: NSRuleEditor, displayValueForCriterion: any, inRow: number): any;
    // instance method
    ruleEditorPredicatePartsForCriterionWithDisplayValueInRow?(_: NSRuleEditor, predicatePartsForCriterion: any, withDisplayValue: any, inRow: number): Map<string, any>;
    // instance method
    ruleEditorRowsDidChange?(_: NSNotification): void;
  }

  // interface
  class NSRulerMarker extends NSObject /* implements NSCoding, NSCopying */ {
    isDragging: boolean; // property
    image: NSImage;
    setImage(_: NSImage) // property
    imageOrigin: CGPoint;
    setImageOrigin(_: CGPoint) // property
    imageRectInRuler: CGRect; // property
    markerLocation: number;
    setMarkerLocation(_: number) // property
    isMovable: boolean;
    setMovable(_: boolean) // property
    isRemovable: boolean;
    setRemovable(_: boolean) // property
    representedObject: any;
    setRepresentedObject(_: any) // property
    ruler: NSRulerView; // property
    thicknessRequiredInRuler: number; // property
    drawRect(_: CGRect): void;
    static createWithRulerViewMarkerLocationImageImageOrigin(rulerView: NSRulerView, markerLocation: number, image: NSImage, imageOrigin: CGPoint): NSRulerMarker;
    trackMouseAdding(with_: NSEvent, adding: boolean): boolean;
  }

  // interface
  class NSRulerView extends NSView {
    static registerUnitWithNameAbbreviationUnitToPointsConversionFactorStepUpCycleStepDownCycle(withName: string, abbreviation: string, unitToPointsConversionFactor: number, stepUpCycle: number[], stepDownCycle: number[]): void;
    accessoryView: NSView;
    setAccessoryView(_: NSView) // property
    baselineLocation: number; // property
    clientView: NSView;
    setClientView(_: NSView) // property
    markers: NSRulerMarker[];
    setMarkers(_: NSRulerMarker[]) // property
    measurementUnits: string;
    setMeasurementUnits(_: string) // property
    orientation: NSRulerView.Orientation;
    setOrientation(_: NSRulerView.Orientation) // property
    originOffset: number;
    setOriginOffset(_: number) // property
    requiredThickness: number; // property
    reservedThicknessForAccessoryView: number;
    setReservedThicknessForAccessoryView(_: number) // property
    reservedThicknessForMarkers: number;
    setReservedThicknessForMarkers(_: number) // property
    ruleThickness: number;
    setRuleThickness(_: number) // property
    scrollView: NSScrollView;
    setScrollView(_: NSScrollView) // property
    addMarker(_: NSRulerMarker): void;
    drawHashMarksAndLabelsInRect(in_: CGRect): void;
    drawMarkersInRect(in_: CGRect): void;
    static createWithScrollViewOrientation(scrollView?: NSScrollView, orientation?: NSRulerView.Orientation): NSRulerView;
    invalidateHashMarks(): void;
    moveRulerlineFromLocationToLocation(fromLocation: number, toLocation: number): void;
    removeMarker(_: NSRulerMarker): void;
    trackMarkerWithMouseEvent(_: NSRulerMarker, withMouseEvent: NSEvent): boolean;
  }

  // interface
  class NSRunningApplication extends NSObject {
    static runningApplicationsWithBundleIdentifier(withBundleIdentifier: string): NSRunningApplication[];
    static terminateAutomaticallyTerminableApplications(): void;
    activationPolicy: NSApplication.ActivationPolicy; // property
    isActive: boolean; // property
    bundleIdentifier: string; // property
    bundleURL: NSURL; // property
    executableArchitecture: number; // property
    executableURL: NSURL; // property
    isFinishedLaunching: boolean; // property
    isHidden: boolean; // property
    icon: NSImage; // property
    launchDate: Date; // property
    localizedName: string; // property
    ownsMenuBar: boolean; // property
    processIdentifier: number; // property
    isTerminated: boolean; // property
    static currentApplication: NSRunningApplication; // property
    activateWithOptions(options: NSApplication.ActivationOptions): boolean;
    forceTerminate(): boolean;
    hide(): boolean;
    terminate(): boolean;
    unhide(): boolean;
  }

  // interface
  class NSSavePanel extends NSPanel {
    URL: NSURL; // property
    accessoryView: NSView;
    setAccessoryView(_: NSView) // property
    allowedFileTypes: string[];
    setAllowedFileTypes(_: string[]) // property
    allowsOtherFileTypes: boolean;
    setAllowsOtherFileTypes(_: boolean) // property
    canCreateDirectories: boolean;
    setCanCreateDirectories(_: boolean) // property
    canSelectHiddenExtension: boolean;
    setCanSelectHiddenExtension(_: boolean) // property
    directoryURL: NSURL;
    setDirectoryURL(_: NSURL) // property
    isExpanded: boolean; // property
    isExtensionHidden: boolean;
    setExtensionHidden(_: boolean) // property
    message: string;
    setMessage(_: string) // property
    nameFieldLabel: string;
    setNameFieldLabel(_: string) // property
    nameFieldStringValue: string;
    setNameFieldStringValue(_: string) // property
    prompt: string;
    setPrompt(_: string) // property
    showsHiddenFiles: boolean;
    setShowsHiddenFiles(_: boolean) // property
    showsTagField: boolean;
    setShowsTagField(_: boolean) // property
    tagNames: string[];
    setTagNames(_: string[]) // property
    treatsFilePackagesAsDirectories: boolean;
    setTreatsFilePackagesAsDirectories(_: boolean) // property
    beginSheetModalForCompletionHandler(for_: NSWindow, completionHandler: (p1: number) => void): void;
    beginWithCompletionHandler(completionHandler: (p1: number) => void): void;
    cancel(_?: any): void;
    ok(_?: any): void;
    runModal(): number;
    validateVisibleColumns(): void;
  }

  // interface
  class NSScreen extends NSObject {
    backingScaleFactor: number; // property
    colorSpace: NSColorSpace; // property
    depth: NSWindow.Depth; // property
    deviceDescription: Map<string, any>; // property
    frame: CGRect; // property
    localizedName: string; // property
    maximumExtendedDynamicRangeColorComponentValue: number; // property
    maximumPotentialExtendedDynamicRangeColorComponentValue: number; // property
    maximumReferenceExtendedDynamicRangeColorComponentValue: number; // property
    supportedWindowDepths: NSWindow.Depth; // property
    visibleFrame: CGRect; // property
    static deepestScreen: NSScreen; // property
    static mainScreen: NSScreen; // property
    static screens: NSScreen[]; // property
    static screensHaveSeparateSpaces: boolean; // property
    backingAlignedRectOptions(_: CGRect, options: AlignmentOptions): CGRect;
    canRepresentDisplayGamut(_: NSDisplayGamut): boolean;
    convertRectFromBacking(_: CGRect): CGRect;
    convertRectToBacking(_: CGRect): CGRect;
  }

  // interface
  class NSScrollView extends NSView /* implements NSTextFinderBarContainer */ {
    static contentSizeForFrameSizeHorizontalScrollerClassVerticalScrollerClassBorderTypeControlSizeScrollerStyle(forFrameSize: CGSize, horizontalScrollerClass?: typeof NSObject, verticalScrollerClass?: typeof NSObject, borderType?: NSBorderType, controlSize?: NSControl.ControlSize, scrollerStyle?: NSScroller.Style): CGSize;
    static frameSizeForContentSizeHorizontalScrollerClassVerticalScrollerClassBorderTypeControlSizeScrollerStyle(forContentSize: CGSize, horizontalScrollerClass?: typeof NSObject, verticalScrollerClass?: typeof NSObject, borderType?: NSBorderType, controlSize?: NSControl.ControlSize, scrollerStyle?: NSScroller.Style): CGSize;
    allowsMagnification: boolean;
    setAllowsMagnification(_: boolean) // property
    autohidesScrollers: boolean;
    setAutohidesScrollers(_: boolean) // property
    automaticallyAdjustsContentInsets: boolean;
    setAutomaticallyAdjustsContentInsets(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    borderType: NSBorderType;
    setBorderType(_: NSBorderType) // property
    contentInsets: NSEdgeInsets;
    setContentInsets(_: NSEdgeInsets) // property
    contentSize: CGSize; // property
    contentView: NSClipView;
    setContentView(_: NSClipView) // property
    documentCursor: NSCursor;
    setDocumentCursor(_: NSCursor) // property
    documentView: NSView;
    setDocumentView(_: NSView) // property
    documentVisibleRect: CGRect; // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    findBarPosition: NSScrollView.FindBarPosition;
    setFindBarPosition(_: NSScrollView.FindBarPosition) // property
    hasHorizontalRuler: boolean;
    setHasHorizontalRuler(_: boolean) // property
    hasHorizontalScroller: boolean;
    setHasHorizontalScroller(_: boolean) // property
    hasVerticalRuler: boolean;
    setHasVerticalRuler(_: boolean) // property
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean) // property
    horizontalLineScroll: number;
    setHorizontalLineScroll(_: number) // property
    horizontalPageScroll: number;
    setHorizontalPageScroll(_: number) // property
    horizontalRulerView: NSRulerView;
    setHorizontalRulerView(_: NSRulerView) // property
    horizontalScrollElasticity: NSScrollView.Elasticity;
    setHorizontalScrollElasticity(_: NSScrollView.Elasticity) // property
    horizontalScroller: NSScroller;
    setHorizontalScroller(_: NSScroller) // property
    lineScroll: number;
    setLineScroll(_: number) // property
    magnification: number;
    setMagnification(_: number) // property
    maxMagnification: number;
    setMaxMagnification(_: number) // property
    minMagnification: number;
    setMinMagnification(_: number) // property
    pageScroll: number;
    setPageScroll(_: number) // property
    rulersVisible: boolean;
    setRulersVisible(_: boolean) // property
    scrollerInsets: NSEdgeInsets;
    setScrollerInsets(_: NSEdgeInsets) // property
    scrollerKnobStyle: NSScroller.KnobStyle;
    setScrollerKnobStyle(_: NSScroller.KnobStyle) // property
    scrollerStyle: NSScroller.Style;
    setScrollerStyle(_: NSScroller.Style) // property
    scrollsDynamically: boolean;
    setScrollsDynamically(_: boolean) // property
    usesPredominantAxisScrolling: boolean;
    setUsesPredominantAxisScrolling(_: boolean) // property
    verticalLineScroll: number;
    setVerticalLineScroll(_: number) // property
    verticalPageScroll: number;
    setVerticalPageScroll(_: number) // property
    verticalRulerView: NSRulerView;
    setVerticalRulerView(_: NSRulerView) // property
    verticalScrollElasticity: NSScrollView.Elasticity;
    setVerticalScrollElasticity(_: NSScrollView.Elasticity) // property
    verticalScroller: NSScroller;
    setVerticalScroller(_: NSScroller) // property
    static rulerViewClass: typeof NSObject;
    setRulerViewClass(_: typeof NSObject) // property
    addFloatingSubviewForAxis(_: NSView, for_: NSEvent.GestureAxis): void;
    flashScrollers(): void;
    magnifyToFitRect(toFit: CGRect): void;
    setMagnificationCenteredAtPoint(_: number, centeredAt: CGPoint): void;
    tile(): void;
  }

  // interface
  class NSScroller extends NSControl {
    static scrollerWidthForControlSizeScrollerStyle(for_: NSControl.ControlSize, scrollerStyle: NSScroller.Style): number;
    hitPart: NSScroller.Part; // property
    knobProportion: number;
    setKnobProportion(_: number) // property
    knobStyle: NSScroller.KnobStyle;
    setKnobStyle(_: NSScroller.KnobStyle) // property
    scrollerStyle: NSScroller.Style;
    setScrollerStyle(_: NSScroller.Style) // property
    usableParts: NSScroller.UsableParts; // property
    static isCompatibleWithOverlayScrollers: boolean; // property
    static preferredScrollerStyle: NSScroller.Style; // property
    checkSpaceForParts(): void;
    drawKnob(): void;
    drawKnobSlotInRectHighlight(in_: CGRect, highlight: boolean): void;
    rectForPart(for_: NSScroller.Part): CGRect;
    setKnobProportion(_: number): void;
    testPart(_: CGPoint): NSScroller.Part;
    trackKnob(with_: NSEvent): void;
  }

  // interface
  class NSScrubber extends NSView {
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    backgroundView: NSView;
    setBackgroundView(_: NSView) // property
    isContinuous: boolean;
    setContinuous(_: boolean) // property
    dataSource: NSScrubberDataSource;
    setDataSource(_: NSScrubberDataSource) // property
    delegate: NSScrubberDelegate;
    setDelegate(_: NSScrubberDelegate) // property
    floatsSelectionViews: boolean;
    setFloatsSelectionViews(_: boolean) // property
    highlightedIndex: number; // property
    itemAlignment: NSScrubber.Alignment;
    setItemAlignment(_: NSScrubber.Alignment) // property
    mode: NSScrubber.Mode;
    setMode(_: NSScrubber.Mode) // property
    numberOfItems: number; // property
    scrubberLayout: NSScrubberLayout;
    setScrubberLayout(_: NSScrubberLayout) // property
    selectedIndex: number;
    setSelectedIndex(_: number) // property
    selectionBackgroundStyle: NSScrubberSelectionStyle;
    setSelectionBackgroundStyle(_: NSScrubberSelectionStyle) // property
    selectionOverlayStyle: NSScrubberSelectionStyle;
    setSelectionOverlayStyle(_: NSScrubberSelectionStyle) // property
    showsAdditionalContentIndicators: boolean;
    setShowsAdditionalContentIndicators(_: boolean) // property
    showsArrowButtons: boolean;
    setShowsArrowButtons(_: boolean) // property
    insertItemsAtIndexes(at: NSIndexSet): void;
    itemViewForItemAtIndex(at: number): NSScrubberItemView;
    makeItemWithIdentifierOwner(withIdentifier: string, owner?: any): NSScrubberItemView;
    moveItemAtIndexToIndex(at: number, to: number): void;
    performSequentialBatchUpdates(_: () => void): void;
    registerClassForItemIdentifier(_?: typeof NSObject, forItemIdentifier?: string): void;
    registerNibForItemIdentifier(_?: NSNib, forItemIdentifier?: string): void;
    reloadData(): void;
    reloadItemsAtIndexes(at: NSIndexSet): void;
    removeItemsAtIndexes(at: NSIndexSet): void;
    scrollItemAtIndexToAlignment(at: number, to: NSScrubber.Alignment): void;
  }

  // interface
  class NSScrubberArrangedView extends NSView {
    isHighlighted: boolean;
    setHighlighted(_: boolean) // property
    isSelected: boolean;
    setSelected(_: boolean) // property
    applyLayoutAttributes(_: NSScrubberLayoutAttributes): void;
  }

  interface NSScrubberDataSource extends NSObject {
    // instance method
    numberOfItemsForScrubber(for_: NSScrubber): number;
    // instance method
    scrubberViewForItemAtIndex(_: NSScrubber, viewForItemAt: number): NSScrubberItemView;
  }

  interface NSScrubberDelegate extends NSObject {
    // instance method
    didBeginInteractingWithScrubber?(with_: NSScrubber): void;
    // instance method
    didCancelInteractingWithScrubber?(with_: NSScrubber): void;
    // instance method
    didFinishInteractingWithScrubber?(with_: NSScrubber): void;
    // instance method
    scrubberDidSelectItemAtIndex?(_: NSScrubber, didSelectItemAt: number): void;
    // instance method
    scrubberDidHighlightItemAtIndex?(_: NSScrubber, didHighlightItemAt: number): void;
    // instance method
    scrubberDidChangeVisibleRange?(_: NSScrubber, didChangeVisibleRange: NSRange): void;
  }

  // interface
  class NSScrubberFlowLayout extends NSScrubberLayout {
    itemSize: CGSize;
    setItemSize(_: CGSize) // property
    itemSpacing: number;
    setItemSpacing(_: number) // property
    invalidateLayoutForItemsAtIndexes(at: NSIndexSet): void;
  }

  interface NSScrubberFlowLayoutDelegate extends NSScrubberDelegate {
    // instance method
    scrubberLayoutSizeForItemAtIndex?(_: NSScrubber, layout: NSScrubberFlowLayout, sizeForItemAt: number): CGSize;
  }

  // interface
  class NSScrubberImageItemView extends NSScrubberItemView {
    image: NSImage;
    setImage(_: NSImage) // property
    imageAlignment: NSImageAlignment;
    setImageAlignment(_: NSImageAlignment) // property
    imageView: NSImageView; // property
  }

  // interface
  class NSScrubberItemView extends NSScrubberArrangedView {
  }

  // interface
  class NSScrubberLayout extends NSObject /* implements NSCoding */ {
    automaticallyMirrorsInRightToLeftLayout: boolean; // property
    scrubber: NSScrubber; // property
    scrubberContentSize: CGSize; // property
    shouldInvalidateLayoutForHighlightChange: boolean; // property
    shouldInvalidateLayoutForSelectionChange: boolean; // property
    visibleRect: CGRect; // property
    static layoutAttributesClass: typeof NSObject; // property
    invalidateLayout(): void;
    layoutAttributesForItemAtIndex(at: number): NSScrubberLayoutAttributes;
    layoutAttributesForItemsInRect(in_: CGRect): NSSet<NSScrubberLayoutAttributes>;
    prepareLayout(): void;
    shouldInvalidateLayoutForChangeFromVisibleRectToVisibleRect(fromVisibleRect: CGRect, toVisibleRect: CGRect): boolean;
  }

  // interface
  class NSScrubberLayoutAttributes extends NSObject /* implements NSCopying */ {
    static layoutAttributesForItemAtIndex(forItemAt: number): NSScrubberLayoutAttributes;
    alpha: number;
    setAlpha(_: number) // property
    frame: CGRect;
    setFrame(_: CGRect) // property
    itemIndex: number;
    setItemIndex(_: number) // property
  }

  // interface
  class NSScrubberProportionalLayout extends NSScrubberLayout {
    numberOfVisibleItems: number;
    setNumberOfVisibleItems(_: number) // property
    static createWithNumberOfVisibleItems(numberOfVisibleItems: number): NSScrubberProportionalLayout;
  }

  // interface
  class NSScrubberSelectionStyle extends NSObject /* implements NSCoding */ {
    static outlineOverlayStyle: NSScrubberSelectionStyle; // property
    static roundedBackgroundStyle: NSScrubberSelectionStyle; // property
    makeSelectionView(): NSScrubberSelectionView;
  }

  // interface
  class NSScrubberSelectionView extends NSScrubberArrangedView {
  }

  // interface
  class NSScrubberTextItemView extends NSScrubberItemView {
    textField: NSTextField; // property
    title: string;
    setTitle(_: string) // property
  }

  // interface
  class NSSearchField extends NSTextField {
    centersPlaceholder: boolean;
    setCentersPlaceholder(_: boolean) // property
    maximumRecents: number;
    setMaximumRecents(_: number) // property
    recentSearches: string[];
    setRecentSearches(_: string[]) // property
    recentsAutosaveName: string;
    setRecentsAutosaveName(_: string) // property
    searchMenuTemplate: NSMenu;
    setSearchMenuTemplate(_: NSMenu) // property
    sendsSearchStringImmediately: boolean;
    setSendsSearchStringImmediately(_: boolean) // property
    sendsWholeSearchString: boolean;
    setSendsWholeSearchString(_: boolean) // property
    rectForCancelButtonWhenCentered(whenCentered: boolean): CGRect;
    rectForSearchButtonWhenCentered(whenCentered: boolean): CGRect;
    rectForSearchTextWhenCentered(whenCentered: boolean): CGRect;
  }

  // interface
  class NSSearchFieldCell extends NSTextFieldCell {
    cancelButtonCell: NSButtonCell;
    setCancelButtonCell(_: NSButtonCell) // property
    maximumRecents: number;
    setMaximumRecents(_: number) // property
    recentSearches: string[];
    setRecentSearches(_: string[]) // property
    recentsAutosaveName: string;
    setRecentsAutosaveName(_: string) // property
    searchButtonCell: NSButtonCell;
    setSearchButtonCell(_: NSButtonCell) // property
    searchMenuTemplate: NSMenu;
    setSearchMenuTemplate(_: NSMenu) // property
    sendsSearchStringImmediately: boolean;
    setSendsSearchStringImmediately(_: boolean) // property
    sendsWholeSearchString: boolean;
    setSendsWholeSearchString(_: boolean) // property
    cancelButtonRectForBounds(forBounds: CGRect): CGRect;
    resetCancelButtonCell(): void;
    resetSearchButtonCell(): void;
    searchButtonRectForBounds(forBounds: CGRect): CGRect;
    searchTextRectForBounds(forBounds: CGRect): CGRect;
  }

  interface NSSearchFieldDelegate extends NSTextFieldDelegate {
    // instance method
    searchFieldDidEndSearching?(_: NSSearchField): void;
    // instance method
    searchFieldDidStartSearching?(_: NSSearchField): void;
  }

  // interface
  class NSSecureTextField extends NSTextField {
  }

  // interface
  class NSSecureTextFieldCell extends NSTextFieldCell {
    echosBullets: boolean;
    setEchosBullets(_: boolean) // property
  }

  // interface
  class NSSegmentedCell extends NSActionCell {
    segmentCount: number;
    setSegmentCount(_: number) // property
    segmentStyle: NSSegmentedControl.Style;
    setSegmentStyle(_: NSSegmentedControl.Style) // property
    selectedSegment: number;
    setSelectedSegment(_: number) // property
    trackingMode: NSSegmentedControl.SwitchTracking;
    setTrackingMode(_: NSSegmentedControl.SwitchTracking) // property
    drawSegmentInFrameWithView(_: number, inFrame: CGRect, with_: NSView): void;
    imageForSegment(forSegment: number): NSImage;
    imageScalingForSegment(forSegment: number): NSImageScaling;
    interiorBackgroundStyleForSegment(forSegment: number): NSView.BackgroundStyle;
    isEnabledForSegment(forSegment: number): boolean;
    isSelectedForSegment(forSegment: number): boolean;
    labelForSegment(forSegment: number): string;
    makeNextSegmentKey(): void;
    makePreviousSegmentKey(): void;
    menuForSegment(forSegment: number): NSMenu;
    selectSegmentWithTag(withTag: number): boolean;
    setEnabledForSegment(_: boolean, forSegment: number): void;
    setImageForSegment(_?: NSImage, forSegment?: number): void;
    setImageScalingForSegment(_: NSImageScaling, forSegment: number): void;
    setLabelForSegment(_: string, forSegment: number): void;
    setMenuForSegment(_?: NSMenu, forSegment?: number): void;
    setSelectedForSegment(_: boolean, forSegment: number): void;
    setTagForSegment(_: number, forSegment: number): void;
    setToolTipForSegment(_?: string, forSegment?: number): void;
    setWidthForSegment(_: number, forSegment: number): void;
    tagForSegment(forSegment: number): number;
    toolTipForSegment(forSegment: number): string;
    widthForSegment(forSegment: number): number;
  }

  // interface
  class NSSegmentedControl extends NSControl /* implements NSUserInterfaceCompression */ {
    doubleValueForSelectedSegment: number; // property
    indexOfSelectedItem: number; // property
    segmentCount: number;
    setSegmentCount(_: number) // property
    segmentDistribution: NSSegmentedControl.Distribution;
    setSegmentDistribution(_: NSSegmentedControl.Distribution) // property
    segmentStyle: NSSegmentedControl.Style;
    setSegmentStyle(_: NSSegmentedControl.Style) // property
    selectedSegment: number;
    setSelectedSegment(_: number) // property
    selectedSegmentBezelColor: NSColor;
    setSelectedSegmentBezelColor(_: NSColor) // property
    isSpringLoaded: boolean;
    setSpringLoaded(_: boolean) // property
    trackingMode: NSSegmentedControl.SwitchTracking;
    setTrackingMode(_: NSSegmentedControl.SwitchTracking) // property
    alignmentForSegment(forSegment: number): NSTextAlignment;
    imageForSegment(forSegment: number): NSImage;
    imageScalingForSegment(forSegment: number): NSImageScaling;
    isEnabledForSegment(forSegment: number): boolean;
    isSelectedForSegment(forSegment: number): boolean;
    labelForSegment(forSegment: number): string;
    menuForSegment(forSegment: number): NSMenu;
    selectSegmentWithTag(withTag: number): boolean;
    setAlignmentForSegment(_: NSTextAlignment, forSegment: number): void;
    setEnabledForSegment(_: boolean, forSegment: number): void;
    setImageForSegment(_?: NSImage, forSegment?: number): void;
    setImageScalingForSegment(_: NSImageScaling, forSegment: number): void;
    setLabelForSegment(_: string, forSegment: number): void;
    setMenuForSegment(_?: NSMenu, forSegment?: number): void;
    setSelectedForSegment(_: boolean, forSegment: number): void;
    setShowsMenuIndicatorForSegment(_: boolean, forSegment: number): void;
    setTagForSegment(_: number, forSegment: number): void;
    setToolTipForSegment(_?: string, forSegment?: number): void;
    setWidthForSegment(_: number, forSegment: number): void;
    showsMenuIndicatorForSegment(forSegment: number): boolean;
    tagForSegment(forSegment: number): number;
    toolTipForSegment(forSegment: number): string;
    widthForSegment(forSegment: number): number;
  }

  interface NSSeguePerforming extends NSObject {
    // instance method
    performSegueWithIdentifierSender?(withIdentifier: string, sender?: any): void;
    // instance method
    prepareForSegueSender?(for_: NSStoryboardSegue, sender?: any): void;
    // instance method
    shouldPerformSegueWithIdentifierSender?(withIdentifier: string, sender?: any): boolean;
  }

  interface NSServicesMenuRequestor extends NSObject {
    // instance method
    readSelectionFromPasteboard?(from: NSPasteboard): boolean;
    // instance method
    writeSelectionToPasteboardTypes?(to: NSPasteboard, types: string[]): boolean;
  }

  // export declare function NSSetFocusRingStyle(placement: NSFocusRingPlacement): void;

  // export declare function NSSetShowsServicesMenuItem(itemName: string, enabled: boolean): number;

  // interface
  class NSShadow extends NSObject /* implements NSCopying, NSSecureCoding */ {
    shadowBlurRadius: number;
    setShadowBlurRadius(_: number) // property
    shadowColor: NSColor;
    setShadowColor(_: NSColor) // property
    shadowOffset: CGSize;
    setShadowOffset(_: CGSize) // property
    set(): void;
  }

  // interface
  class NSSharingService extends NSObject {
    static sharingServicesForItems(forItems: any[]): NSSharingService[];
    accountName: string; // property
    alternateImage: NSImage; // property
    attachmentFileURLs: NSURL[]; // property
    delegate: NSSharingServiceDelegate;
    setDelegate(_: NSSharingServiceDelegate) // property
    image: NSImage; // property
    menuItemTitle: string;
    setMenuItemTitle(_: string) // property
    messageBody: string; // property
    permanentLink: NSURL; // property
    recipients: string[];
    setRecipients(_: string[]) // property
    subject: string;
    setSubject(_: string) // property
    title: string; // property
    canPerformWithItems(withItems?: any[]): boolean;
    static createWithTitleImageAlternateImageHandler(title: string, image: NSImage, alternateImage?: NSImage, handler?: () => void): NSSharingService;
    performWithItems(withItems: any[]): void;
  }

  interface NSSharingServiceDelegate extends NSObject {
    // instance method
    anchoringViewForSharingServiceShowRelativeToRectPreferredEdge?(for_: NSSharingService, showRelativeTo: NSRect, preferredEdge: NSRectEdge): NSView;
    // instance method
    sharingServiceDidFailToShareItemsError?(_: NSSharingService, didFailToShareItems: any[], error: NSError): void;
    // instance method
    sharingServiceDidShareItems?(_: NSSharingService, didShareItems: any[]): void;
    // instance method
    sharingServiceSourceFrameOnScreenForShareItem?(_: NSSharingService, sourceFrameOnScreenForShareItem: any): CGRect;
    // instance method
    sharingServiceSourceWindowForShareItemsSharingContentScope?(_: NSSharingService, sourceWindowForShareItems: any[], sharingContentScope: NSSharingService.SharingContentScope): NSWindow;
    // instance method
    sharingServiceTransitionImageForShareItemContentRect?(_: NSSharingService, transitionImageForShareItem: any, contentRect: NSRect): NSImage;
    // instance method
    sharingServiceWillShareItems?(_: NSSharingService, willShareItems: any[]): void;
  }

  // interface
  class NSSharingServicePicker extends NSObject {
    delegate: NSSharingServicePickerDelegate;
    setDelegate(_: NSSharingServicePickerDelegate) // property
    static createWithItems(items: any[]): NSSharingServicePicker;
    showRelativeToRectOfViewPreferredEdge(relativeTo: CGRect, of: NSView, preferredEdge: NSRectEdge): void;
  }

  interface NSSharingServicePickerDelegate extends NSObject {
    // instance method
    sharingServicePickerDelegateForSharingService?(_: NSSharingServicePicker, delegateFor: NSSharingService): NSSharingServiceDelegate;
    // instance method
    sharingServicePickerDidChooseSharingService?(_: NSSharingServicePicker, didChoose?: NSSharingService): void;
    // instance method
    sharingServicePickerSharingServicesForItemsProposedSharingServices?(_: NSSharingServicePicker, sharingServicesForItems: any[], proposedSharingServices: NSSharingService[]): NSSharingService[];
  }

  // interface
  class NSSharingServicePickerToolbarItem extends NSToolbarItem {
    delegate: NSSharingServicePickerToolbarItemDelegate;
    setDelegate(_: NSSharingServicePickerToolbarItemDelegate) // property
  }

  interface NSSharingServicePickerToolbarItemDelegate extends NSSharingServicePickerDelegate {
    // instance method
    itemsForSharingServicePickerToolbarItem(for_: NSSharingServicePickerToolbarItem): any[];
  }

  // interface
  class NSSharingServicePickerTouchBarItem extends NSTouchBarItem {
    buttonImage: NSImage;
    setButtonImage(_: NSImage) // property
    buttonTitle: string;
    setButtonTitle(_: string) // property
    delegate: NSSharingServicePickerTouchBarItemDelegate;
    setDelegate(_: NSSharingServicePickerTouchBarItemDelegate) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
  }

  interface NSSharingServicePickerTouchBarItemDelegate extends NSSharingServicePickerDelegate {
    // instance method
    itemsForSharingServicePickerTouchBarItem(for_: NSSharingServicePickerTouchBarItem): any[];
  }

  // export declare function NSShowAnimationEffect(animationEffect: NSAnimationEffect, centerLocation: CGPoint, size: CGSize, animationDelegate: any, didEndSelector: string, contextInfo: any): void;

  // export declare function NSShowsServicesMenuItem(itemName: string): boolean;

  // interface
  class NSSlider extends NSControl /* implements NSAccessibilitySlider */ {
    allowsTickMarkValuesOnly: boolean;
    setAllowsTickMarkValuesOnly(_: boolean) // property
    altIncrementValue: number;
    setAltIncrementValue(_: number) // property
    knobThickness: number; // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number) // property
    sliderType: NSSlider.SliderType;
    setSliderType(_: NSSlider.SliderType) // property
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition) // property
    trackFillColor: NSColor;
    setTrackFillColor(_: NSColor) // property
    isVertical: boolean; // property
    closestTickMarkValueToValue(toValue: number): number;
    indexOfTickMarkAtPoint(at: CGPoint): number;
    rectOfTickMarkAtIndex(at: number): CGRect;
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSSliderAccessory extends NSObject /* implements NSCoding, NSAccessibility, NSAccessibilityElement */ {
    behavior: NSSliderAccessoryBehavior;
    setBehavior(_: NSSliderAccessoryBehavior) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
  }

  // interface
  class NSSliderAccessoryBehavior extends NSObject /* implements NSCoding, NSCopying */ {
    static initWithHandler(handler: (p1: NSSliderAccessory) => void): NSSliderAccessoryBehavior;
    static behaviorWithTargetAction(target?: any, action?: string): NSSliderAccessoryBehavior;
    static automaticBehavior: NSSliderAccessoryBehavior; // property
    static valueResetBehavior: NSSliderAccessoryBehavior; // property
    static valueStepBehavior: NSSliderAccessoryBehavior; // property
    handleAction(_: NSSliderAccessory): void;
  }

  // interface
  class NSSliderCell extends NSActionCell {
    allowsTickMarkValuesOnly: boolean;
    setAllowsTickMarkValuesOnly(_: boolean) // property
    altIncrementValue: number;
    setAltIncrementValue(_: number) // property
    knobThickness: number; // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    numberOfTickMarks: number;
    setNumberOfTickMarks(_: number) // property
    sliderType: NSSlider.SliderType;
    setSliderType(_: NSSlider.SliderType) // property
    tickMarkPosition: NSSlider.TickMarkPosition;
    setTickMarkPosition(_: NSSlider.TickMarkPosition) // property
    trackRect: CGRect; // property
    isVertical: boolean; // property
    barRectFlipped(flipped: boolean): CGRect;
    closestTickMarkValueToValue(toValue: number): number;
    drawBarInsideFlipped(inside: CGRect, flipped: boolean): void;
    drawKnob(): void;
    drawKnob(_: CGRect): void;
    drawTickMarks(): void;
    indexOfTickMarkAtPoint(at: CGPoint): number;
    knobRectFlipped(flipped: boolean): CGRect;
    rectOfTickMarkAtIndex(at: number): CGRect;
    tickMarkValueAtIndex(at: number): number;
  }

  // interface
  class NSSliderTouchBarItem extends NSTouchBarItem {
    action: string;
    setAction(_: string) // property
    doubleValue: number;
    setDoubleValue(_: number) // property
    label: string;
    setLabel(_: string) // property
    maximumSliderWidth: number;
    setMaximumSliderWidth(_: number) // property
    maximumValueAccessory: NSSliderAccessory;
    setMaximumValueAccessory(_: NSSliderAccessory) // property
    minimumSliderWidth: number;
    setMinimumSliderWidth(_: number) // property
    minimumValueAccessory: NSSliderAccessory;
    setMinimumValueAccessory(_: NSSliderAccessory) // property
    slider: NSSlider;
    setSlider(_: NSSlider) // property
    target: any;
    setTarget(_: any) // property
    valueAccessoryWidth: number;
    setValueAccessoryWidth(_: number) // property
  }

  // interface
  class NSSound extends NSObject /* implements NSCopying, NSPasteboardReading, NSPasteboardWriting, NSSecureCoding */ {
    static canInitWithPasteboard(with_: NSPasteboard): boolean;
    currentTime: number;
    setCurrentTime(_: number) // property
    delegate: NSSoundDelegate;
    setDelegate(_: NSSoundDelegate) // property
    duration: number; // property
    loops: boolean;
    setLoops(_: boolean) // property
    name: string; // property
    playbackDeviceIdentifier: string;
    setPlaybackDeviceIdentifier(_: string) // property
    isPlaying: boolean; // property
    volume: number;
    setVolume(_: number) // property
    static soundUnfilteredTypes: string[]; // property
    static createWithContentsOfFileByReference(contentsOfFile: string, byReference: boolean): NSSound;
    static createWithContentsOfURLByReference(contentsOfURL: NSURL, byReference: boolean): NSSound;
    static createWithData(data: NSData): NSSound;
    static createWithPasteboard(pasteboard: NSPasteboard): NSSound;
    pause(): boolean;
    play(): boolean;
    resume(): boolean;
    setName(_?: string): boolean;
    stop(): boolean;
    writeToPasteboard(to: NSPasteboard): void;
  }

  interface NSSoundDelegate extends NSObject {
    // instance method
    soundDidFinishPlaying?(_: NSSound, didFinishPlaying: boolean): void;
  }

  // interface
  class NSSpeechRecognizer extends NSObject {
    blocksOtherRecognizers: boolean;
    setBlocksOtherRecognizers(_: boolean) // property
    commands: string[];
    setCommands(_: string[]) // property
    delegate: NSSpeechRecognizerDelegate;
    setDelegate(_: NSSpeechRecognizerDelegate) // property
    displayedCommandsTitle: string;
    setDisplayedCommandsTitle(_: string) // property
    listensInForegroundOnly: boolean;
    setListensInForegroundOnly(_: boolean) // property
    startListening(): void;
    stopListening(): void;
  }

  interface NSSpeechRecognizerDelegate extends NSObject {
    // instance method
    speechRecognizerDidRecognizeCommand?(_: NSSpeechRecognizer, didRecognizeCommand: string): void;
  }

  // interface
  class NSSpeechSynthesizer extends NSObject {
    static attributesForVoice(forVoice: string): Map<string, any>;
    delegate: NSSpeechSynthesizerDelegate;
    setDelegate(_: NSSpeechSynthesizerDelegate) // property
    rate: number;
    setRate(_: number) // property
    isSpeaking: boolean; // property
    usesFeedbackWindow: boolean;
    setUsesFeedbackWindow(_: boolean) // property
    volume: number;
    setVolume(_: number) // property
    static isAnyApplicationSpeaking: boolean; // property
    static availableVoices: string[]; // property
    static defaultVoice: string; // property
    addSpeechDictionary(_: Map<string, any>): void;
    continueSpeaking(): void;
    static createWithVoice(voice?: string): NSSpeechSynthesizer;
    objectForPropertyError(error: string): any;
    pauseSpeakingAtBoundary(at: NSSpeechSynthesizer.Boundary): void;
    phonemesFromText(from: string): string;
    setObjectForPropertyError(forProperty?: any, error?: string): boolean;
    setVoice(_?: string): boolean;
    startSpeakingString(_: string): boolean;
    startSpeakingStringToURL(_: string, to: NSURL): boolean;
    stopSpeaking(): void;
    stopSpeakingAtBoundary(at: NSSpeechSynthesizer.Boundary): void;
    voice(): string;
  }

  interface NSSpeechSynthesizerDelegate extends NSObject {
    // instance method
    speechSynthesizerWillSpeakWordOfString?(_: NSSpeechSynthesizer, willSpeakWord: NSRange, of: string): void;
    // instance method
    speechSynthesizerDidEncounterErrorAtIndexOfStringMessage?(_: NSSpeechSynthesizer, didEncounterErrorAt: number, of: string, message: string): void;
    // instance method
    speechSynthesizerDidEncounterSyncMessage?(_: NSSpeechSynthesizer, didEncounterSyncMessage: string): void;
    // instance method
    speechSynthesizerDidFinishSpeaking?(_: NSSpeechSynthesizer, didFinishSpeaking: boolean): void;
    // instance method
    speechSynthesizerWillSpeakPhoneme?(_: NSSpeechSynthesizer, willSpeakPhoneme: number): void;
  }

  // interface
  class NSSpellChecker extends NSObject {
    static uniqueSpellDocumentTag(): number;
    accessoryView: NSView;
    setAccessoryView(_: NSView) // property
    automaticallyIdentifiesLanguages: boolean;
    setAutomaticallyIdentifiesLanguages(_: boolean) // property
    availableLanguages: string[]; // property
    spellingPanel: NSPanel; // property
    substitutionsPanel: NSPanel; // property
    substitutionsPanelAccessoryViewController: NSViewController;
    setSubstitutionsPanelAccessoryViewController(_: NSViewController) // property
    userPreferredLanguages: string[]; // property
    userReplacementsDictionary: Map<string, string>; // property
    static isAutomaticCapitalizationEnabled: boolean; // property
    static isAutomaticDashSubstitutionEnabled: boolean; // property
    static isAutomaticPeriodSubstitutionEnabled: boolean; // property
    static isAutomaticQuoteSubstitutionEnabled: boolean; // property
    static isAutomaticSpellingCorrectionEnabled: boolean; // property
    static isAutomaticTextCompletionEnabled: boolean; // property
    static isAutomaticTextReplacementEnabled: boolean; // property
    static sharedSpellChecker: NSSpellChecker; // property
    static sharedSpellCheckerExists: boolean; // property
    checkGrammarOfStringStartingAtLanguageWrapInSpellDocumentWithTagDetails(of: string, startingAt: number, language?: string, wrap?: boolean, inSpellDocumentWithTag?: number, details?: Map<string, any>[]): NSRange;
    checkSpellingOfStringStartingAt(of: string, startingAt: number): NSRange;
    checkSpellingOfStringStartingAtLanguageWrapInSpellDocumentWithTagWordCount(of: string, startingAt: number, language?: string, wrap?: boolean, inSpellDocumentWithTag?: number, wordCount?: number): NSRange;
    checkStringRangeTypesOptionsInSpellDocumentWithTagOrthographyWordCount(_: string, range: NSRange, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, orthography?: NSOrthography, wordCount?: number): NSTextCheckingResult[];
    closeSpellDocumentWithTag(withTag: number): void;
    completionsForPartialWordRangeInStringLanguageInSpellDocumentWithTag(forPartialWordRange: NSRange, in_: string, language?: string, inSpellDocumentWithTag?: number): string[];
    correctionForWordRangeInStringLanguageInSpellDocumentWithTag(forWordRange: NSRange, in_: string, language: string, inSpellDocumentWithTag: number): string;
    countWordsInStringLanguage(in_: string, language?: string): number;
    deletesAutospaceBetweenStringAndStringLanguage(_: string, andString: string, language?: string): boolean;
    dismissCorrectionIndicatorForView(for_: NSView): void;
    guessesForWordRangeInStringLanguageInSpellDocumentWithTag(forWordRange: NSRange, in_: string, language?: string, inSpellDocumentWithTag?: number): string[];
    hasLearnedWord(_: string): boolean;
    ignoreWordInSpellDocumentWithTag(_: string, inSpellDocumentWithTag: number): void;
    ignoredWordsInSpellDocumentWithTag(inSpellDocumentWithTag: number): string[];
    language(): string;
    languageForWordRangeInStringOrthography(forWordRange: NSRange, in_: string, orthography?: NSOrthography): string;
    learnWord(_: string): void;
    menuForResultStringOptionsAtLocationInView(for_: NSTextCheckingResult, string: string, options?: Map<string, any>, atLocation?: CGPoint, in_?: NSView): NSMenu;
    preventsAutocorrectionBeforeStringLanguage(before: string, language?: string): boolean;
    recordResponseToCorrectionForWordLanguageInSpellDocumentWithTag(_: NSSpellChecker.CorrectionResponse, toCorrection: string, forWord: string, language?: string, inSpellDocumentWithTag?: number): void;
    requestCandidatesWithForSelectedRangeInTypesOptionsInSpellDocumentWithTagCompletionHandler(forSelectedRange: NSRange, in_: string, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, completionHandler?: (p1: number, p2: NSTextCheckingResult[]) => void): number;
    requestCheckingOfRangeTypesOptionsInSpellDocumentWithTagCompletionHandler(of: string, range: NSRange, types: number, options?: Map<string, any>, inSpellDocumentWithTag?: number, completionHandler?: (p1: number, p2: NSTextCheckingResult[], p3: NSOrthography, p4: number) => void): number;
    setIgnoredWordsInSpellDocumentWithTag(_: string[], inSpellDocumentWithTag: number): void;
    setLanguage(_: string): boolean;
    setWordFieldStringValue(_: string): void;
    showCorrectionIndicatorOfPrimaryStringAlternativeStringsForStringInViewCompletionHandler(of: NSSpellChecker.CorrectionIndicatorType, primaryString: string, alternativeStrings: string[], forStringIn: CGRect, view: NSView, completionHandler?: (p1: string) => void): void;
    unlearnWord(_: string): void;
    updatePanels(): void;
    updateSpellingPanelWithGrammarStringDetail(withGrammarString: string, detail: Map<string, any>): void;
    updateSpellingPanelWithMisspelledWord(withMisspelledWord: string): void;
    userQuotesArrayForLanguage(forLanguage: string): string[];
  }

  // interface
  class NSSplitView extends NSView {
    arrangedSubviews: NSView[]; // property
    arrangesAllSubviews: boolean;
    setArrangesAllSubviews(_: boolean) // property
    autosaveName: string;
    setAutosaveName(_: string) // property
    delegate: NSSplitViewDelegate;
    setDelegate(_: NSSplitViewDelegate) // property
    dividerColor: NSColor; // property
    dividerStyle: NSSplitView.DividerStyle;
    setDividerStyle(_: NSSplitView.DividerStyle) // property
    dividerThickness: number; // property
    isVertical: boolean;
    setVertical(_: boolean) // property
    addArrangedSubview(_: NSView): void;
    adjustSubviews(): void;
    drawDividerInRect(in_: CGRect): void;
    holdingPriorityForSubviewAtIndex(at: number): number;
    insertArrangedSubviewAtIndex(_: NSView, at: number): void;
    isSubviewCollapsed(_: NSView): boolean;
    maxPossiblePositionOfDividerAtIndex(at: number): number;
    minPossiblePositionOfDividerAtIndex(at: number): number;
    removeArrangedSubview(_: NSView): void;
    setHoldingPriorityForSubviewAtIndex(_: number, forSubviewAt: number): void;
    setPositionOfDividerAtIndex(_: number, ofDividerAt: number): void;
  }

  // interface
  class NSSplitViewController extends NSViewController /* implements NSSplitViewDelegate, NSUserInterfaceValidations */ {
    minimumThicknessForInlineSidebars: number;
    setMinimumThicknessForInlineSidebars(_: number) // property
    splitView: NSSplitView;
    setSplitView(_: NSSplitView) // property
    splitViewItems: NSSplitViewItem[];
    setSplitViewItems(_: NSSplitViewItem[]) // property
    addSplitViewItem(_: NSSplitViewItem): void;
    insertSplitViewItemAtIndex(_: NSSplitViewItem, at: number): void;
    removeSplitViewItem(_: NSSplitViewItem): void;
    splitViewItemForViewController(for_: NSViewController): NSSplitViewItem;
    toggleSidebar(_?: any): void;
  }

  interface NSSplitViewDelegate extends NSObject {
    // instance method
    splitViewShouldHideDividerAtIndex?(_: NSSplitView, shouldHideDividerAt: number): boolean;
    // instance method
    splitViewEffectiveRectForDrawnRectOfDividerAtIndex?(_: NSSplitView, effectiveRect: CGRect, forDrawnRect: CGRect, ofDividerAt: number): CGRect;
    // instance method
    splitViewAdditionalEffectiveRectOfDividerAtIndex?(_: NSSplitView, additionalEffectiveRectOfDividerAt: number): CGRect;
    // instance method
    splitViewCanCollapseSubview?(_: NSSplitView, canCollapseSubview: NSView): boolean;
    // instance method
    splitViewConstrainMaxCoordinateOfSubviewAt?(_: NSSplitView, constrainMaxCoordinate: number, ofSubviewAt: number): number;
    // instance method
    splitViewConstrainMinCoordinateOfSubviewAt?(_: NSSplitView, constrainMinCoordinate: number, ofSubviewAt: number): number;
    // instance method
    splitViewConstrainSplitPositionOfSubviewAt?(_: NSSplitView, constrainSplitPosition: number, ofSubviewAt: number): number;
    // instance method
    splitViewResizeSubviewsWithOldSize?(_: NSSplitView, resizeSubviewsWithOldSize: CGSize): void;
    // instance method
    splitViewShouldAdjustSizeOfSubview?(_: NSSplitView, shouldAdjustSizeOfSubview: NSView): boolean;
    // instance method
    splitViewDidResizeSubviews?(_: NSNotification): void;
    // instance method
    splitViewWillResizeSubviews?(_: NSNotification): void;
  }

  // interface
  class NSSplitViewItem extends NSObject /* implements NSAnimatablePropertyContainer, NSCoding */ {
    static contentListWithViewController(contentListWithViewController: NSViewController): NSSplitViewItem;
    static sidebarWithViewController(sidebarWithViewController: NSViewController): NSSplitViewItem;
    automaticMaximumThickness: number;
    setAutomaticMaximumThickness(_: number) // property
    behavior: NSSplitViewItem.Behavior; // property
    canCollapse: boolean;
    setCanCollapse(_: boolean) // property
    collapseBehavior: NSSplitViewItem.CollapseBehavior;
    setCollapseBehavior(_: NSSplitViewItem.CollapseBehavior) // property
    isCollapsed: boolean;
    setCollapsed(_: boolean) // property
    holdingPriority: number;
    setHoldingPriority(_: number) // property
    maximumThickness: number;
    setMaximumThickness(_: number) // property
    minimumThickness: number;
    setMinimumThickness(_: number) // property
    preferredThicknessFraction: number;
    setPreferredThicknessFraction(_: number) // property
    isSpringLoaded: boolean;
    setSpringLoaded(_: boolean) // property
    viewController: NSViewController;
    setViewController(_: NSViewController) // property
  }

  interface NSSpringLoadingDestination extends NSObject {
    // instance method
    draggingEnded?(_: NSDraggingInfo): void;
    // instance method
    springLoadingActivatedDraggingInfo(_: boolean, draggingInfo: NSDraggingInfo): void;
    // instance method
    springLoadingEntered?(_: NSDraggingInfo): NSSpringLoadingOptions;
    // instance method
    springLoadingExited?(_: NSDraggingInfo): void;
    // instance method
    springLoadingHighlightChanged(_: NSDraggingInfo): void;
    // instance method
    springLoadingUpdated?(_: NSDraggingInfo): NSSpringLoadingOptions;
  }

  // interface
  class NSStackView extends NSView {
    alignment: NSLayoutConstraint.Attribute;
    setAlignment(_: NSLayoutConstraint.Attribute) // property
    arrangedSubviews: NSView[]; // property
    delegate: NSStackViewDelegate;
    setDelegate(_: NSStackViewDelegate) // property
    detachedViews: NSView[]; // property
    detachesHiddenViews: boolean;
    setDetachesHiddenViews(_: boolean) // property
    distribution: NSStackView.Distribution;
    setDistribution(_: NSStackView.Distribution) // property
    edgeInsets: NSEdgeInsets;
    setEdgeInsets(_: NSEdgeInsets) // property
    orientation: NSUserInterfaceLayoutOrientation;
    setOrientation(_: NSUserInterfaceLayoutOrientation) // property
    spacing: number;
    setSpacing(_: number) // property
    views: NSView[]; // property
    addArrangedSubview(_: NSView): void;
    addViewInGravity(_: NSView, in_: NSStackView.Gravity): void;
    clippingResistancePriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    customSpacingAfterView(after: NSView): number;
    huggingPriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    insertArrangedSubviewAtIndex(_: NSView, at: number): void;
    insertViewAtIndexInGravity(_: NSView, at: number, in_: NSStackView.Gravity): void;
    removeArrangedSubview(_: NSView): void;
    removeView(_: NSView): void;
    setClippingResistancePriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    setCustomSpacingAfterView(_: number, after: NSView): void;
    setHuggingPriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    setViewsInGravity(_: NSView[], in_: NSStackView.Gravity): void;
    setVisibilityPriorityForView(_: number, for_: NSView): void;
    viewsInGravity(in_: NSStackView.Gravity): NSView[];
    visibilityPriorityForView(for_: NSView): number;
  }

  interface NSStackViewDelegate extends NSObject {
    // instance method
    stackViewWillDetachViews?(_: NSStackView, willDetach: NSView[]): void;
    // instance method
    stackViewDidReattachViews?(_: NSStackView, didReattach: NSView[]): void;
  }

  interface NSStandardKeyBindingResponding extends NSObject {
    // instance method
    cancelOperation?(_?: any): void;
    // instance method
    capitalizeWord?(_?: any): void;
    // instance method
    centerSelectionInVisibleArea?(_?: any): void;
    // instance method
    changeCaseOfLetter?(_?: any): void;
    // instance method
    complete?(_?: any): void;
    // instance method
    deleteBackward?(_?: any): void;
    // instance method
    deleteBackwardByDecomposingPreviousCharacter?(_?: any): void;
    // instance method
    deleteForward?(_?: any): void;
    // instance method
    deleteToBeginningOfLine?(_?: any): void;
    // instance method
    deleteToBeginningOfParagraph?(_?: any): void;
    // instance method
    deleteToEndOfLine?(_?: any): void;
    // instance method
    deleteToEndOfParagraph?(_?: any): void;
    // instance method
    deleteToMark?(_?: any): void;
    // instance method
    deleteWordBackward?(_?: any): void;
    // instance method
    deleteWordForward?(_?: any): void;
    // instance method
    doCommandBySelector?(by: string): void;
    // instance method
    indent?(_?: any): void;
    // instance method
    insertBacktab?(_?: any): void;
    // instance method
    insertContainerBreak?(_?: any): void;
    // instance method
    insertDoubleQuoteIgnoringSubstitution?(_?: any): void;
    // instance method
    insertLineBreak?(_?: any): void;
    // instance method
    insertNewline?(_?: any): void;
    // instance method
    insertNewlineIgnoringFieldEditor?(_?: any): void;
    // instance method
    insertParagraphSeparator?(_?: any): void;
    // instance method
    insertSingleQuoteIgnoringSubstitution?(_?: any): void;
    // instance method
    insertTab?(_?: any): void;
    // instance method
    insertTabIgnoringFieldEditor?(_?: any): void;
    // instance method
    insertText?(_: any): void;
    // instance method
    lowercaseWord?(_?: any): void;
    // instance method
    makeBaseWritingDirectionLeftToRight?(_?: any): void;
    // instance method
    makeBaseWritingDirectionNatural?(_?: any): void;
    // instance method
    makeBaseWritingDirectionRightToLeft?(_?: any): void;
    // instance method
    makeTextWritingDirectionLeftToRight?(_?: any): void;
    // instance method
    makeTextWritingDirectionNatural?(_?: any): void;
    // instance method
    makeTextWritingDirectionRightToLeft?(_?: any): void;
    // instance method
    moveBackward?(_?: any): void;
    // instance method
    moveBackwardAndModifySelection?(_?: any): void;
    // instance method
    moveDown?(_?: any): void;
    // instance method
    moveDownAndModifySelection?(_?: any): void;
    // instance method
    moveForward?(_?: any): void;
    // instance method
    moveForwardAndModifySelection?(_?: any): void;
    // instance method
    moveLeft?(_?: any): void;
    // instance method
    moveLeftAndModifySelection?(_?: any): void;
    // instance method
    moveParagraphBackwardAndModifySelection?(_?: any): void;
    // instance method
    moveParagraphForwardAndModifySelection?(_?: any): void;
    // instance method
    moveRight?(_?: any): void;
    // instance method
    moveRightAndModifySelection?(_?: any): void;
    // instance method
    moveToBeginningOfDocument?(_?: any): void;
    // instance method
    moveToBeginningOfDocumentAndModifySelection?(_?: any): void;
    // instance method
    moveToBeginningOfLine?(_?: any): void;
    // instance method
    moveToBeginningOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveToBeginningOfParagraph?(_?: any): void;
    // instance method
    moveToBeginningOfParagraphAndModifySelection?(_?: any): void;
    // instance method
    moveToEndOfDocument?(_?: any): void;
    // instance method
    moveToEndOfDocumentAndModifySelection?(_?: any): void;
    // instance method
    moveToEndOfLine?(_?: any): void;
    // instance method
    moveToEndOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveToEndOfParagraph?(_?: any): void;
    // instance method
    moveToEndOfParagraphAndModifySelection?(_?: any): void;
    // instance method
    moveToLeftEndOfLine?(_?: any): void;
    // instance method
    moveToLeftEndOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveToRightEndOfLine?(_?: any): void;
    // instance method
    moveToRightEndOfLineAndModifySelection?(_?: any): void;
    // instance method
    moveUp?(_?: any): void;
    // instance method
    moveUpAndModifySelection?(_?: any): void;
    // instance method
    moveWordBackward?(_?: any): void;
    // instance method
    moveWordBackwardAndModifySelection?(_?: any): void;
    // instance method
    moveWordForward?(_?: any): void;
    // instance method
    moveWordForwardAndModifySelection?(_?: any): void;
    // instance method
    moveWordLeft?(_?: any): void;
    // instance method
    moveWordLeftAndModifySelection?(_?: any): void;
    // instance method
    moveWordRight?(_?: any): void;
    // instance method
    moveWordRightAndModifySelection?(_?: any): void;
    // instance method
    pageDown?(_?: any): void;
    // instance method
    pageDownAndModifySelection?(_?: any): void;
    // instance method
    pageUp?(_?: any): void;
    // instance method
    pageUpAndModifySelection?(_?: any): void;
    // instance method
    quickLookPreviewItems?(_?: any): void;
    // instance method
    scrollLineDown?(_?: any): void;
    // instance method
    scrollLineUp?(_?: any): void;
    // instance method
    scrollPageDown?(_?: any): void;
    // instance method
    scrollPageUp?(_?: any): void;
    // instance method
    scrollToBeginningOfDocument?(_?: any): void;
    // instance method
    scrollToEndOfDocument?(_?: any): void;
    // instance method
    selectAll?(_?: any): void;
    // instance method
    selectLine?(_?: any): void;
    // instance method
    selectParagraph?(_?: any): void;
    // instance method
    selectToMark?(_?: any): void;
    // instance method
    selectWord?(_?: any): void;
    // instance method
    setMark?(_?: any): void;
    // instance method
    swapWithMark?(_?: any): void;
    // instance method
    transpose?(_?: any): void;
    // instance method
    transposeWords?(_?: any): void;
    // instance method
    uppercaseWord?(_?: any): void;
    // instance method
    yank?(_?: any): void;
  }

  // interface
  class NSStatusBar extends NSObject {
    thickness: number; // property
    isVertical: boolean; // property
    static systemStatusBar: NSStatusBar; // property
    removeStatusItem(_: NSStatusItem): void;
    statusItemWithLength(withLength: number): NSStatusItem;
  }

  // interface
  class NSStatusBarButton extends NSButton {
    appearsDisabled: boolean;
    setAppearsDisabled(_: boolean) // property
  }

  // interface
  class NSStatusItem extends NSObject {
    autosaveName: string;
    setAutosaveName(_: string) // property
    behavior: NSStatusItem.Behavior;
    setBehavior(_: NSStatusItem.Behavior) // property
    button: NSStatusBarButton; // property
    length: number;
    setLength(_: number) // property
    menu: NSMenu;
    setMenu(_: NSMenu) // property
    statusBar: NSStatusBar; // property
    isVisible: boolean;
    setVisible(_: boolean) // property
  }

  // interface
  class NSStepper extends NSControl /* implements NSAccessibilityStepper */ {
    autorepeat: boolean;
    setAutorepeat(_: boolean) // property
    increment: number;
    setIncrement(_: number) // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    valueWraps: boolean;
    setValueWraps(_: boolean) // property
  }

  // interface
  class NSStepperCell extends NSActionCell {
    autorepeat: boolean;
    setAutorepeat(_: boolean) // property
    increment: number;
    setIncrement(_: number) // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    valueWraps: boolean;
    setValueWraps(_: boolean) // property
  }

  // interface
  class NSStepperTouchBarItem extends NSTouchBarItem {
    action: string;
    setAction(_: string) // property
    increment: number;
    setIncrement(_: number) // property
    maxValue: number;
    setMaxValue(_: number) // property
    minValue: number;
    setMinValue(_: number) // property
    target: any;
    setTarget(_: any) // property
    value: number;
    setValue(_: number) // property
  }

  // interface
  class NSStoryboard extends NSObject {
    static mainStoryboard: NSStoryboard; // property
    instantiateControllerWithIdentifier(withIdentifier: string): any;
    instantiateControllerWithIdentifierWithCreator(_: string, creator?: (p1: NSCoder) => any): any;
    instantiateInitialController(): any;
    instantiateInitialControllerWithCreator(_?: (p1: NSCoder) => any): any;
  }

  // interface
  class NSStoryboardSegue extends NSObject {
    destinationController: any; // property
    identifier: string; // property
    sourceController: any; // property
    static createWithIdentifierSourceDestination(identifier: string, source: any, destination: any): NSStoryboardSegue;
    perform(): void;
  }

  // interface
  class NSStringDrawingContext extends NSObject {
    actualScaleFactor: number; // property
    minimumScaleFactor: number;
    setMinimumScaleFactor(_: number) // property
    totalBounds: CGRect; // property
  }

  // interface
  class NSSwitch extends NSControl /* implements NSAccessibilitySwitch */ {
    state: number;
    setState(_: number) // property
  }

  // interface
  class NSTabView extends NSView {
    allowsTruncatedLabels: boolean;
    setAllowsTruncatedLabels(_: boolean) // property
    contentRect: CGRect; // property
    controlSize: NSControl.ControlSize;
    setControlSize(_: NSControl.ControlSize) // property
    delegate: NSTabViewDelegate;
    setDelegate(_: NSTabViewDelegate) // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    font: NSFont;
    setFont(_: NSFont) // property
    minimumSize: CGSize; // property
    numberOfTabViewItems: number; // property
    selectedTabViewItem: NSTabViewItem; // property
    tabPosition: NSTabView.TabPosition;
    setTabPosition(_: NSTabView.TabPosition) // property
    tabViewBorderType: NSTabView.TabViewBorderType;
    setTabViewBorderType(_: NSTabView.TabViewBorderType) // property
    tabViewItems: NSTabViewItem[];
    setTabViewItems(_: NSTabViewItem[]) // property
    tabViewType: NSTabView.TabType;
    setTabViewType(_: NSTabView.TabType) // property
    addTabViewItem(_: NSTabViewItem): void;
    indexOfTabViewItem(_: NSTabViewItem): number;
    indexOfTabViewItemWithIdentifier(withIdentifier: any): number;
    insertTabViewItemAtIndex(_: NSTabViewItem, at: number): void;
    removeTabViewItem(_: NSTabViewItem): void;
    selectFirstTabViewItem(_?: any): void;
    selectLastTabViewItem(_?: any): void;
    selectNextTabViewItem(_?: any): void;
    selectPreviousTabViewItem(_?: any): void;
    selectTabViewItem(_?: NSTabViewItem): void;
    selectTabViewItemAtIndex(at: number): void;
    selectTabViewItemWithIdentifier(withIdentifier: any): void;
    tabViewItemAtIndex(at: number): NSTabViewItem;
    tabViewItemAtPoint(at: CGPoint): NSTabViewItem;
    takeSelectedTabViewItemFromSender(_?: any): void;
  }

  // interface
  class NSTabViewController extends NSViewController /* implements NSTabViewDelegate, NSToolbarDelegate */ {
    canPropagateSelectedChildViewControllerTitle: boolean;
    setCanPropagateSelectedChildViewControllerTitle(_: boolean) // property
    selectedTabViewItemIndex: number;
    setSelectedTabViewItemIndex(_: number) // property
    tabStyle: NSTabViewController.TabStyle;
    setTabStyle(_: NSTabViewController.TabStyle) // property
    tabView: NSTabView;
    setTabView(_: NSTabView) // property
    tabViewItems: NSTabViewItem[];
    setTabViewItems(_: NSTabViewItem[]) // property
    transitionOptions: NSViewController.TransitionOptions;
    setTransitionOptions(_: NSViewController.TransitionOptions) // property
    addTabViewItem(_: NSTabViewItem): void;
    insertTabViewItemAtIndex(_: NSTabViewItem, at: number): void;
    removeTabViewItem(_: NSTabViewItem): void;
    tabViewItemForViewController(for_: NSViewController): NSTabViewItem;
  }

  interface NSTabViewDelegate extends NSObject {
    // instance method
    tabViewShouldSelectTabViewItem?(_: NSTabView, shouldSelect?: NSTabViewItem): boolean;
    // instance method
    tabViewWillSelectTabViewItem?(_: NSTabView, willSelect?: NSTabViewItem): void;
    // instance method
    tabViewDidSelectTabViewItem?(_: NSTabView, didSelect?: NSTabViewItem): void;
    // instance method
    tabViewDidChangeNumberOfTabViewItems?(_: NSTabView): void;
  }

  // interface
  class NSTabViewItem extends NSObject /* implements NSCoding */ {
    color: NSColor;
    setColor(_: NSColor) // property
    identifier: any;
    setIdentifier(_: any) // property
    image: NSImage;
    setImage(_: NSImage) // property
    initialFirstResponder: NSView;
    setInitialFirstResponder(_: NSView) // property
    label: string;
    setLabel(_: string) // property
    tabState: NSTabViewItem.State; // property
    tabView: NSTabView; // property
    toolTip: string;
    setToolTip(_: string) // property
    view: NSView;
    setView(_: NSView) // property
    viewController: NSViewController;
    setViewController(_: NSViewController) // property
    drawLabelInRect(_: boolean, in_: CGRect): void;
    static createWithIdentifier(identifier?: any): NSTabViewItem;
    sizeOfLabel(_: boolean): CGSize;
  }

  // interface
  class NSTableCellView extends NSView {
    backgroundStyle: NSView.BackgroundStyle;
    setBackgroundStyle(_: NSView.BackgroundStyle) // property
    draggingImageComponents: NSDraggingImageComponent[]; // property
    imageView: NSImageView;
    setImageView(_: NSImageView) // property
    objectValue: any;
    setObjectValue(_: any) // property
    rowSizeStyle: NSTableView.RowSizeStyle;
    setRowSizeStyle(_: NSTableView.RowSizeStyle) // property
    textField: NSTextField;
    setTextField(_: NSTextField) // property
  }

  // interface
  class NSTableColumn extends NSObject /* implements NSCoding, NSUserInterfaceItemIdentification */ {
    dataCell: any;
    setDataCell(_: any) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    headerCell: NSTableHeaderCell;
    setHeaderCell(_: NSTableHeaderCell) // property
    headerToolTip: string;
    setHeaderToolTip(_: string) // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    maxWidth: number;
    setMaxWidth(_: number) // property
    minWidth: number;
    setMinWidth(_: number) // property
    resizingMask: NSTableColumn.ResizingOptions;
    setResizingMask(_: NSTableColumn.ResizingOptions) // property
    sortDescriptorPrototype: NSSortDescriptor;
    setSortDescriptorPrototype(_: NSSortDescriptor) // property
    tableView: NSTableView;
    setTableView(_: NSTableView) // property
    title: string;
    setTitle(_: string) // property
    width: number;
    setWidth(_: number) // property
    dataCellForRow(forRow: number): any;
    static createWithIdentifier(identifier: string): NSTableColumn;
    sizeToFit(): void;
  }

  // interface
  class NSTableHeaderCell extends NSTextFieldCell {
    drawSortIndicatorWithFrameInViewAscendingPriority(withFrame: CGRect, in_: NSView, ascending: boolean, priority: number): void;
    sortIndicatorRectForBounds(forBounds: CGRect): CGRect;
  }

  // interface
  class NSTableHeaderView extends NSView /* implements NSViewToolTipOwner */ {
    draggedColumn: number; // property
    draggedDistance: number; // property
    resizedColumn: number; // property
    tableView: NSTableView;
    setTableView(_: NSTableView) // property
    columnAtPoint(at: CGPoint): number;
    headerRectOfColumn(ofColumn: number): CGRect;
  }

  // interface
  class NSTableRowView extends NSView /* implements NSAccessibilityRow */ {
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    draggingDestinationFeedbackStyle: NSTableView.DraggingDestinationFeedbackStyle;
    setDraggingDestinationFeedbackStyle(_: NSTableView.DraggingDestinationFeedbackStyle) // property
    isEmphasized: boolean;
    setEmphasized(_: boolean) // property
    isFloating: boolean;
    setFloating(_: boolean) // property
    isGroupRowStyle: boolean;
    setGroupRowStyle(_: boolean) // property
    indentationForDropOperation: number;
    setIndentationForDropOperation(_: number) // property
    interiorBackgroundStyle: NSView.BackgroundStyle; // property
    isNextRowSelected: boolean;
    setNextRowSelected(_: boolean) // property
    numberOfColumns: number; // property
    isPreviousRowSelected: boolean;
    setPreviousRowSelected(_: boolean) // property
    isSelected: boolean;
    setSelected(_: boolean) // property
    selectionHighlightStyle: NSTableView.SelectionHighlightStyle;
    setSelectionHighlightStyle(_: NSTableView.SelectionHighlightStyle) // property
    isTargetForDropOperation: boolean;
    setTargetForDropOperation(_: boolean) // property
    drawBackgroundInRect(in_: CGRect): void;
    drawDraggingDestinationFeedbackInRect(in_: CGRect): void;
    drawSelectionInRect(in_: CGRect): void;
    drawSeparatorInRect(in_: CGRect): void;
    viewAtColumn(atColumn: number): any;
  }

  // interface
  class NSTableView extends NSControl /* implements NSAccessibilityTable, NSDraggingSource, NSTextViewDelegate, NSUserInterfaceValidations */ {
    allowsColumnReordering: boolean;
    setAllowsColumnReordering(_: boolean) // property
    allowsColumnResizing: boolean;
    setAllowsColumnResizing(_: boolean) // property
    allowsColumnSelection: boolean;
    setAllowsColumnSelection(_: boolean) // property
    allowsEmptySelection: boolean;
    setAllowsEmptySelection(_: boolean) // property
    allowsMultipleSelection: boolean;
    setAllowsMultipleSelection(_: boolean) // property
    allowsTypeSelect: boolean;
    setAllowsTypeSelect(_: boolean) // property
    autosaveName: string;
    setAutosaveName(_: string) // property
    autosaveTableColumns: boolean;
    setAutosaveTableColumns(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    clickedColumn: number; // property
    clickedRow: number; // property
    columnAutoresizingStyle: NSTableView.ColumnAutoresizingStyle;
    setColumnAutoresizingStyle(_: NSTableView.ColumnAutoresizingStyle) // property
    cornerView: NSView;
    setCornerView(_: NSView) // property
    dataSource: NSTableViewDataSource;
    setDataSource(_: NSTableViewDataSource) // property
    delegate: NSTableViewDelegate;
    setDelegate(_: NSTableViewDelegate) // property
    doubleAction: string;
    setDoubleAction(_: string) // property
    draggingDestinationFeedbackStyle: NSTableView.DraggingDestinationFeedbackStyle;
    setDraggingDestinationFeedbackStyle(_: NSTableView.DraggingDestinationFeedbackStyle) // property
    editedColumn: number; // property
    editedRow: number; // property
    effectiveRowSizeStyle: NSTableView.RowSizeStyle; // property
    floatsGroupRows: boolean;
    setFloatsGroupRows(_: boolean) // property
    gridColor: NSColor;
    setGridColor(_: NSColor) // property
    gridStyleMask: NSTableView.GridLineStyle;
    setGridStyleMask(_: NSTableView.GridLineStyle) // property
    headerView: NSTableHeaderView;
    setHeaderView(_: NSTableHeaderView) // property
    hiddenRowIndexes: NSIndexSet; // property
    highlightedTableColumn: NSTableColumn;
    setHighlightedTableColumn(_: NSTableColumn) // property
    intercellSpacing: CGSize;
    setIntercellSpacing(_: CGSize) // property
    numberOfColumns: number; // property
    numberOfRows: number; // property
    numberOfSelectedColumns: number; // property
    numberOfSelectedRows: number; // property
    registeredNibsByIdentifier: Map<string, NSNib>; // property
    rowActionsVisible: boolean;
    setRowActionsVisible(_: boolean) // property
    rowHeight: number;
    setRowHeight(_: number) // property
    rowSizeStyle: NSTableView.RowSizeStyle;
    setRowSizeStyle(_: NSTableView.RowSizeStyle) // property
    selectedColumn: number; // property
    selectedColumnIndexes: NSIndexSet; // property
    selectedRow: number; // property
    selectedRowIndexes: NSIndexSet; // property
    selectionHighlightStyle: NSTableView.SelectionHighlightStyle;
    setSelectionHighlightStyle(_: NSTableView.SelectionHighlightStyle) // property
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[]) // property
    tableColumns: NSTableColumn[]; // property
    usesAlternatingRowBackgroundColors: boolean;
    setUsesAlternatingRowBackgroundColors(_: boolean) // property
    usesAutomaticRowHeights: boolean;
    setUsesAutomaticRowHeights(_: boolean) // property
    usesStaticContents: boolean;
    setUsesStaticContents(_: boolean) // property
    verticalMotionCanBeginDrag: boolean;
    setVerticalMotionCanBeginDrag(_: boolean) // property
    addTableColumn(_: NSTableColumn): void;
    beginUpdates(): void;
    canDragRowsWithIndexesAtPoint(with_: NSIndexSet, at: CGPoint): boolean;
    columnAtPoint(at: CGPoint): number;
    columnForView(for_: NSView): number;
    columnIndexesInRect(in_: CGRect): NSIndexSet;
    columnWithIdentifier(withIdentifier: string): number;
    deselectAll(_?: any): void;
    deselectColumn(_: number): void;
    deselectRow(_: number): void;
    didAddRowViewForRow(_: NSTableRowView, forRow: number): void;
    didRemoveRowViewForRow(_: NSTableRowView, forRow: number): void;
    dragImageForRowsWithIndexesTableColumnsEventOffset(with_: NSIndexSet, tableColumns: NSTableColumn[], event: NSEvent, offset: NSPoint): NSImage;
    drawBackgroundInClipRect(inClipRect: CGRect): void;
    drawGridInClipRect(inClipRect: CGRect): void;
    drawRowClipRect(_: number, clipRect: CGRect): void;
    editColumnRowWithEventSelect(_: number, row: number, with_?: NSEvent, select?: boolean): void;
    endUpdates(): void;
    enumerateAvailableRowViews(_: (p1: NSTableRowView, p2: number) => void): void;
    frameOfCellAtColumnRow(atColumn: number, row: number): CGRect;
    hideRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    highlightSelectionInClipRect(inClipRect: CGRect): void;
    indicatorImageInTableColumn(in_: NSTableColumn): NSImage;
    insertRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    isColumnSelected(_: number): boolean;
    isRowSelected(_: number): boolean;
    makeViewWithIdentifierOwner(withIdentifier: string, owner?: any): NSView;
    moveColumnToColumn(_: number, toColumn: number): void;
    moveRowAtIndexToIndex(at: number, to: number): void;
    noteHeightOfRowsWithIndexesChanged(withIndexesChanged: NSIndexSet): void;
    noteNumberOfRowsChanged(): void;
    rectOfColumn(ofColumn: number): CGRect;
    rectOfRow(ofRow: number): CGRect;
    registerNibForIdentifier(_?: NSNib, forIdentifier?: string): void;
    reloadData(): void;
    reloadDataForRowIndexesColumnIndexes(forRowIndexes: NSIndexSet, columnIndexes: NSIndexSet): void;
    removeRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    removeTableColumn(_: NSTableColumn): void;
    rowAtPoint(at: CGPoint): number;
    rowForView(for_: NSView): number;
    rowViewAtRowMakeIfNecessary(atRow: number, makeIfNecessary: boolean): NSTableRowView;
    rowsInRect(in_: CGRect): NSRange;
    scrollColumnToVisible(_: number): void;
    scrollRowToVisible(_: number): void;
    selectColumnIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    selectRowIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    setDraggingSourceOperationMaskForLocal(_: NSDragOperation, forLocal: boolean): void;
    setDropRowDropOperation(_: number, dropOperation: NSTableView.DropOperation): void;
    setIndicatorImageInTableColumn(_?: NSImage, in_?: NSTableColumn): void;
    sizeLastColumnToFit(): void;
    tableColumnWithIdentifier(withIdentifier: string): NSTableColumn;
    tile(): void;
    unhideRowsAtIndexesWithAnimation(at: NSIndexSet, withAnimation: NSTableView.AnimationOptions): void;
    viewAtColumnRowMakeIfNecessary(atColumn: number, row: number, makeIfNecessary: boolean): NSView;
  }

  interface NSTableViewDataSource extends NSObject {
    // instance method
    numberOfRowsInTableView?(in_: NSTableView): number;
    // instance method
    tableViewObjectValueForTableColumnRow?(_: NSTableView, objectValueFor?: NSTableColumn, row?: number): any;
    // instance method
    tableViewSetObjectValueForTableColumnRow?(_: NSTableView, setObjectValue?: any, for_?: NSTableColumn, row?: number): void;
    // instance method
    tableViewDraggingSessionWillBeginAtPointForRowIndexes?(_: NSTableView, draggingSession: NSDraggingSession, willBeginAt: CGPoint, forRowIndexes: NSIndexSet): void;
    // instance method
    tableViewDraggingSessionEndedAtPointOperation?(_: NSTableView, draggingSession: NSDraggingSession, endedAt: CGPoint, operation: NSDragOperation): void;
    // instance method
    tableViewWriteRowsWithIndexesToPasteboard?(_: NSTableView, writeRowsWith: NSIndexSet, to: NSPasteboard): boolean;
    // instance method
    tableViewAcceptDropRowDropOperation?(_: NSTableView, acceptDrop: NSDraggingInfo, row: number, dropOperation: NSTableView.DropOperation): boolean;
    // instance method
    tableViewPasteboardWriterForRow?(_: NSTableView, pasteboardWriterForRow: number): NSPasteboardWriting;
    // instance method
    tableViewSortDescriptorsDidChange?(_: NSTableView, sortDescriptorsDidChange: NSSortDescriptor[]): void;
    // instance method
    tableViewUpdateDraggingItemsForDrag?(_: NSTableView, updateDraggingItemsForDrag: NSDraggingInfo): void;
    // instance method
    tableViewValidateDropProposedRowProposedDropOperation?(_: NSTableView, validateDrop: NSDraggingInfo, proposedRow: number, proposedDropOperation: NSTableView.DropOperation): NSDragOperation;
  }

  interface NSTableViewDelegate extends NSControlTextEditingDelegate {
    // instance method
    selectionShouldChangeInTableView?(in_: NSTableView): boolean;
    // instance method
    tableViewViewForTableColumnRow?(_: NSTableView, viewFor?: NSTableColumn, row?: number): NSView;
    // instance method
    tableViewDidAddRowViewForRow?(_: NSTableView, didAdd: NSTableRowView, forRow: number): void;
    // instance method
    tableViewDidRemoveRowViewForRow?(_: NSTableView, didRemove: NSTableRowView, forRow: number): void;
    // instance method
    tableViewWillDisplayCellForTableColumnRow?(_: NSTableView, willDisplayCell: any, for_?: NSTableColumn, row?: number): void;
    // instance method
    tableViewShouldEditTableColumnRow?(_: NSTableView, shouldEdit?: NSTableColumn, row?: number): boolean;
    // instance method
    tableViewToolTipForCellRectTableColumnRowMouseLocation?(_: NSTableView, toolTipFor: NSCell, rect: NSRect, tableColumn?: NSTableColumn, row?: number, mouseLocation?: CGPoint): string;
    // instance method
    tableViewShouldShowCellExpansionForTableColumnRow?(_: NSTableView, shouldShowCellExpansionFor?: NSTableColumn, row?: number): boolean;
    // instance method
    tableViewShouldTrackCellForTableColumnRow?(_: NSTableView, shouldTrackCell: NSCell, for_?: NSTableColumn, row?: number): boolean;
    // instance method
    tableViewDataCellForTableColumnRow?(_: NSTableView, dataCellFor?: NSTableColumn, row?: number): NSCell;
    // instance method
    tableViewShouldSelectTableColumn?(_: NSTableView, shouldSelect?: NSTableColumn): boolean;
    // instance method
    tableViewMouseDownInHeaderOfTableColumn?(_: NSTableView, mouseDownInHeaderOf: NSTableColumn): void;
    // instance method
    tableViewDidClickTableColumn?(_: NSTableView, didClick: NSTableColumn): void;
    // instance method
    tableViewDidDragTableColumn?(_: NSTableView, didDrag: NSTableColumn): void;
    // instance method
    tableViewTypeSelectStringForTableColumnRow?(_: NSTableView, typeSelectStringFor?: NSTableColumn, row?: number): string;
    // instance method
    tableViewNextTypeSelectMatchFromRowToRowForString?(_: NSTableView, nextTypeSelectMatchFromRow: number, toRow: number, for_: string): number;
    // instance method
    tableViewShouldTypeSelectForEventWithCurrentSearchString?(_: NSTableView, shouldTypeSelectFor: NSEvent, withCurrentSearch?: string): boolean;
    // instance method
    tableViewHeightOfRow?(_: NSTableView, heightOfRow: number): number;
    // instance method
    tableViewIsGroupRow?(_: NSTableView, isGroupRow: number): boolean;
    // instance method
    tableViewRowActionsForRowEdge?(_: NSTableView, rowActionsForRow: number, edge: NSTableView.RowActionEdge): NSTableViewRowAction[];
    // instance method
    tableViewRowViewForRow?(_: NSTableView, rowViewForRow: number): NSTableRowView;
    // instance method
    tableViewSelectionIndexesForProposedSelection?(_: NSTableView, selectionIndexesForProposedSelection: NSIndexSet): NSIndexSet;
    // instance method
    tableViewShouldReorderColumnToColumn?(_: NSTableView, shouldReorderColumn: number, toColumn: number): boolean;
    // instance method
    tableViewShouldSelectRow?(_: NSTableView, shouldSelectRow: number): boolean;
    // instance method
    tableViewSizeToFitWidthOfColumn?(_: NSTableView, sizeToFitWidthOfColumn: number): number;
    // instance method
    tableViewColumnDidMove?(_: NSNotification): void;
    // instance method
    tableViewColumnDidResize?(_: NSNotification): void;
    // instance method
    tableViewSelectionDidChange?(_: NSNotification): void;
    // instance method
    tableViewSelectionIsChanging?(_: NSNotification): void;
  }

  // interface
  class NSTableViewRowAction extends NSObject /* implements NSCopying */ {
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    image: NSImage;
    setImage(_: NSImage) // property
    style: NSTableViewRowAction.Style; // property
    title: string;
    setTitle(_: string) // property
  }

  // interface
  class NSText extends NSView /* implements NSChangeSpelling, NSIgnoreMisspelledWords */ {
    alignment: NSTextAlignment;
    setAlignment(_: NSTextAlignment) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    baseWritingDirection: NSWritingDirection;
    setBaseWritingDirection(_: NSWritingDirection) // property
    delegate: NSTextDelegate;
    setDelegate(_: NSTextDelegate) // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    isFieldEditor: boolean;
    setFieldEditor(_: boolean) // property
    font: NSFont;
    setFont(_: NSFont) // property
    isHorizontallyResizable: boolean;
    setHorizontallyResizable(_: boolean) // property
    importsGraphics: boolean;
    setImportsGraphics(_: boolean) // property
    maxSize: CGSize;
    setMaxSize(_: CGSize) // property
    minSize: CGSize;
    setMinSize(_: CGSize) // property
    isRichText: boolean;
    setRichText(_: boolean) // property
    isRulerVisible: boolean; // property
    isSelectable: boolean;
    setSelectable(_: boolean) // property
    selectedRange: NSRange;
    setSelectedRange(_: NSRange) // property
    string: string;
    setString(_: string) // property
    textColor: NSColor;
    setTextColor(_: NSColor) // property
    usesFontPanel: boolean;
    setUsesFontPanel(_: boolean) // property
    isVerticallyResizable: boolean;
    setVerticallyResizable(_: boolean) // property
    RTFDFromRange(from: NSRange): NSData;
    RTFFromRange(from: NSRange): NSData;
    alignCenter(_?: any): void;
    alignLeft(_?: any): void;
    alignRight(_?: any): void;
    checkSpelling(_?: any): void;
    copyFont(_?: any): void;
    copyRuler(_?: any): void;
    cut(_?: any): void;
    delete(_?: any): void;
    paste(_?: any): void;
    pasteFont(_?: any): void;
    pasteRuler(_?: any): void;
    readRTFDFromFile(fromFile: string): boolean;
    replaceCharactersInRangeWithRTF(in_: NSRange, withRTF: NSData): void;
    replaceCharactersInRangeWithRTFD(in_: NSRange, withRTFD: NSData): void;
    replaceCharactersInRangeWithString(in_: NSRange, with_: string): void;
    scrollRangeToVisible(_: NSRange): void;
    setFontRange(_: NSFont, range: NSRange): void;
    setTextColorRange(_?: NSColor, range?: NSRange): void;
    showGuessPanel(_?: any): void;
    sizeToFit(): void;
    subscript(_?: any): void;
    superscript(_?: any): void;
    toggleRuler(_?: any): void;
    underline(_?: any): void;
    unscript(_?: any): void;
    writeRTFDToFileAtomically(toFile: string, atomically: boolean): boolean;
  }

  // interface
  class NSTextAlternatives extends NSObject /* implements NSSecureCoding */ {
    alternativeStrings: string[]; // property
    primaryString: string; // property
    static createWithPrimaryStringAlternativeStrings(primaryString: string, alternativeStrings: string[]): NSTextAlternatives;
    noteSelectedAlternativeString(_: string): void;
  }

  // interface
  class NSTextAttachment extends NSObject /* implements NSSecureCoding, NSTextAttachmentContainer */ {
    attachmentCell: NSTextAttachmentCell;
    setAttachmentCell(_: NSTextAttachmentCell) // property
    bounds: CGRect;
    setBounds(_: CGRect) // property
    contents: NSData;
    setContents(_: NSData) // property
    fileType: string;
    setFileType(_: string) // property
    fileWrapper: FileWrapper;
    setFileWrapper(_: FileWrapper) // property
    image: NSImage;
    setImage(_: NSImage) // property
    static createWithDataOfType(data?: NSData, ofType?: string): NSTextAttachment;
    static createWithFileWrapper(fileWrapper?: FileWrapper): NSTextAttachment;
  }

  // interface
  class NSTextAttachmentCell extends NSCell /* implements NSTextAttachmentCell */ {
  }

  interface NSTextAttachmentCell extends NSObject {
    attachment: NSTextAttachment;
    setAttachment(_: NSTextAttachment) // property
    // instance method
    cellBaselineOffset(): CGPoint;
    // instance method
    cellFrameForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
    // instance method
    cellSize_(): CGSize;
    // instance method
    drawWithFrameInView(_: CGRect, inView?: NSView): void;
    // instance method
    drawWithFrameInViewCharacterIndex(_: CGRect, inView?: NSView, characterIndex?: number): void;
    // instance method
    drawWithFrameInViewCharacterIndexLayoutManager(_: CGRect, inView?: NSView, characterIndex?: number, layoutManager?: NSLayoutManager): void;
    // instance method
    highlightWithFrameInView(_: boolean, withFrame: CGRect, inView?: NSView): void;
    // instance method
    trackMouseInRectOfViewAtCharacterIndexUntilMouseUp(_: NSEvent, inRect: CGRect, ofView?: NSView, atCharacterIndex?: number, untilMouseUp?: boolean): boolean;
    // instance method
    trackMouseInRectOfViewUntilMouseUp(_: NSEvent, inRect: CGRect, ofView?: NSView, untilMouseUp?: boolean): boolean;
    // instance method
    wantsToTrackMouse(): boolean;
    // instance method
    wantsToTrackMouseForEventInRectOfViewAtCharacterIndex(_: NSEvent, inRect: CGRect, ofView?: NSView, atCharacterIndex?: number): boolean;
  }

  interface NSTextAttachmentContainer extends NSObject {
    // instance method
    attachmentBoundsForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(for_?: NSTextContainer, proposedLineFragment?: CGRect, glyphPosition?: CGPoint, characterIndex?: number): CGRect;
    // instance method
    imageForBoundsTextContainerCharacterIndex(forBounds: CGRect, textContainer?: NSTextContainer, characterIndex?: number): NSImage;
  }

  // interface
  class NSTextBlock extends NSObject /* implements NSCopying, NSSecureCoding */ {
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    contentWidth: number; // property
    contentWidthValueType: NSTextBlock.ValueType; // property
    verticalAlignment: NSTextBlock.VerticalAlignment;
    setVerticalAlignment(_: NSTextBlock.VerticalAlignment) // property
    borderColorForEdge(for_: NSRectEdge): NSColor;
    boundsRectForContentRectInRectTextContainerCharacterRange(forContentRect: CGRect, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
    drawBackgroundWithFrameInViewCharacterRangeLayoutManager(withFrame: CGRect, in_: NSView, characterRange: NSRange, layoutManager: NSLayoutManager): void;
    rectForLayoutAtPointInRectTextContainerCharacterRange(at: CGPoint, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
    setBorderColor(_?: NSColor): void;
    setBorderColorForEdge(_?: NSColor, for_?: NSRectEdge): void;
    setContentWidthType(_: number, type: NSTextBlock.ValueType): void;
    setValueTypeForDimension(_: number, type: NSTextBlock.ValueType, for_: NSTextBlock.Dimension): void;
    setWidthTypeForLayer(_: number, type: NSTextBlock.ValueType, for_: NSTextBlock.Layer): void;
    setWidthTypeForLayerEdge(_: number, type: NSTextBlock.ValueType, for_: NSTextBlock.Layer, edge: NSRectEdge): void;
    valueForDimension(for_: NSTextBlock.Dimension): number;
    valueTypeForDimension(for_: NSTextBlock.Dimension): NSTextBlock.ValueType;
    widthForLayerEdge(for_: NSTextBlock.Layer, edge: NSRectEdge): number;
    widthValueTypeForLayerEdge(for_: NSTextBlock.Layer, edge: NSRectEdge): NSTextBlock.ValueType;
  }

  interface NSTextCheckingClient extends NSTextInputClient, NSTextInputTraits {
    // instance method
    addAnnotationsRange(_: Map<string, string>, range: NSRange): void;
    // instance method
    annotatedSubstringForProposedRangeActualRange(forProposedRange: NSRange, actualRange?: NSRange): NSAttributedString;
    // instance method
    candidateListTouchBarItem(): NSCandidateListTouchBarItem<any>;
    // instance method
    removeAnnotationRange(_: string, range: NSRange): void;
    // instance method
    replaceCharactersInRangeWithAnnotatedString(in_: NSRange, withAnnotatedString: NSAttributedString): void;
    // instance method
    selectAndShowRange(_: NSRange): void;
    // instance method
    setAnnotationsRange(_: Map<string, string>, range: NSRange): void;
    // instance method
    viewForRangeFirstRectActualRange(for_: NSRange, firstRect?: NSRect, actualRange?: NSRange): NSView;
  }

  // interface
  class NSTextCheckingController extends NSObject {
    client: NSTextCheckingClient; // property
    spellCheckerDocumentTag: number;
    setSpellCheckerDocumentTag(_: number) // property
    changeSpelling(_?: any): void;
    checkSpelling(_?: any): void;
    checkTextInDocument(_?: any): void;
    checkTextInRangeTypesOptions(in_: NSRange, types: number, options: Map<string, any>): void;
    checkTextInSelection(_?: any): void;
    considerTextCheckingForRange(for_: NSRange): void;
    didChangeSelectedRange(): void;
    didChangeTextInRange(in_: NSRange): void;
    ignoreSpelling(_?: any): void;
    static createWithClient(client: NSTextCheckingClient): NSTextCheckingController;
    insertedTextInRange(in_: NSRange): void;
    invalidate(): void;
    menuAtIndexClickedOnSelectionEffectiveRange(at: number, clickedOnSelection: boolean, effectiveRange: NSRange): NSMenu;
    orderFrontSubstitutionsPanel(_?: any): void;
    showGuessPanel(_?: any): void;
    updateCandidates(): void;
    validAnnotations(): string[];
  }

  // interface
  class NSTextContainer extends NSObject /* implements NSSecureCoding, NSTextLayoutOrientationProvider */ {
    containerSize: CGSize;
    setContainerSize(_: CGSize) // property
    exclusionPaths: NSBezierPath[];
    setExclusionPaths(_: NSBezierPath[]) // property
    heightTracksTextView: boolean;
    setHeightTracksTextView(_: boolean) // property
    layoutManager: NSLayoutManager;
    setLayoutManager(_: NSLayoutManager) // property
    lineBreakMode: NSLineBreakMode;
    setLineBreakMode(_: NSLineBreakMode) // property
    lineFragmentPadding: number;
    setLineFragmentPadding(_: number) // property
    maximumNumberOfLines: number;
    setMaximumNumberOfLines(_: number) // property
    isSimpleRectangularTextContainer: boolean; // property
    size: CGSize;
    setSize(_: CGSize) // property
    textView: NSTextView;
    setTextView(_: NSTextView) // property
    widthTracksTextView: boolean;
    setWidthTracksTextView(_: boolean) // property
    static createWithContainerSize(containerSize: CGSize): NSTextContainer;
    static createWithSize(size: CGSize): NSTextContainer;
    lineFragmentRectForProposedRectAtIndexWritingDirectionRemainingRect(forProposedRect: CGRect, at: number, writingDirection: NSWritingDirection, remaining?: NSRect): CGRect;
    lineFragmentRectForProposedRectSweepDirectionMovementDirectionRemainingRect(forProposedRect: CGRect, sweepDirection: NSLineSweepDirection, movementDirection: NSLineMovementDirection, remaining?: NSRect): CGRect;
    replaceLayoutManager(_: NSLayoutManager): void;
  }

  interface NSTextDelegate extends NSObject {
    // instance method
    textDidBeginEditing?(_: NSNotification): void;
    // instance method
    textDidChange?(_: NSNotification): void;
    // instance method
    textDidEndEditing?(_: NSNotification): void;
    // instance method
    textShouldBeginEditing?(_: NSText): boolean;
    // instance method
    textShouldEndEditing?(_: NSText): boolean;
  }

  // interface
  class NSTextField extends NSControl /* implements NSAccessibilityNavigableStaticText, NSUserInterfaceValidations */ {
    static labelWithAttributedString(labelWithAttributedString: NSAttributedString): NSTextField;
    static labelWithString(labelWithString: string): NSTextField;
    static wrappingLabelWithString(wrappingLabelWithString: string): NSTextField;
    allowsCharacterPickerTouchBarItem: boolean;
    setAllowsCharacterPickerTouchBarItem(_: boolean) // property
    allowsDefaultTighteningForTruncation: boolean;
    setAllowsDefaultTighteningForTruncation(_: boolean) // property
    allowsEditingTextAttributes: boolean;
    setAllowsEditingTextAttributes(_: boolean) // property
    isAutomaticTextCompletionEnabled: boolean;
    setAutomaticTextCompletionEnabled(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    bezelStyle: NSTextField.BezelStyle;
    setBezelStyle(_: NSTextField.BezelStyle) // property
    isBezeled: boolean;
    setBezeled(_: boolean) // property
    isBordered: boolean;
    setBordered(_: boolean) // property
    delegate: NSTextFieldDelegate;
    setDelegate(_: NSTextFieldDelegate) // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    isEditable: boolean;
    setEditable(_: boolean) // property
    importsGraphics: boolean;
    setImportsGraphics(_: boolean) // property
    maximumNumberOfLines: number;
    setMaximumNumberOfLines(_: number) // property
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString) // property
    placeholderString: string;
    setPlaceholderString(_: string) // property
    preferredMaxLayoutWidth: number;
    setPreferredMaxLayoutWidth(_: number) // property
    isSelectable: boolean;
    setSelectable(_: boolean) // property
    textColor: NSColor;
    setTextColor(_: NSColor) // property
    selectText(_?: any): void;
    textDidBeginEditing(_: NSNotification): void;
    textDidChange(_: NSNotification): void;
    textDidEndEditing(_: NSNotification): void;
    textShouldBeginEditing(_: NSText): boolean;
    textShouldEndEditing(_: NSText): boolean;
  }

  // interface
  class NSTextFieldCell extends NSActionCell {
    allowedInputSourceLocales: string[];
    setAllowedInputSourceLocales(_: string[]) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    bezelStyle: NSTextField.BezelStyle;
    setBezelStyle(_: NSTextField.BezelStyle) // property
    drawsBackground: boolean;
    setDrawsBackground(_: boolean) // property
    placeholderAttributedString: NSAttributedString;
    setPlaceholderAttributedString(_: NSAttributedString) // property
    placeholderString: string;
    setPlaceholderString(_: string) // property
    textColor: NSColor;
    setTextColor(_: NSColor) // property
    setWantsNotificationForMarkedText(_: boolean): void;
  }

  interface NSTextFieldDelegate extends NSControlTextEditingDelegate {
    // instance method
    textFieldTextViewShouldSelectCandidateAtIndex?(_: NSTextField, textView: NSTextView, shouldSelectCandidateAt: number): boolean;
    // instance method
    textFieldTextViewCandidatesForSelectedRange?(_: NSTextField, textView: NSTextView, candidates: NSTextCheckingResult[], forSelectedRange: NSRange): NSTextCheckingResult[];
    // instance method
    textFieldTextViewCandidatesForSelectedRange?(_: NSTextField, textView: NSTextView, candidatesForSelectedRange: NSRange): any[];
  }

  // interface
  class NSTextFinder extends NSObject /* implements NSCoding */ {
    static drawIncrementalMatchHighlightInRect(in_: CGRect): void;
    client: NSTextFinderClient;
    setClient(_: NSTextFinderClient) // property
    findBarContainer: NSTextFinderBarContainer;
    setFindBarContainer(_: NSTextFinderBarContainer) // property
    findIndicatorNeedsUpdate: boolean;
    setFindIndicatorNeedsUpdate(_: boolean) // property
    incrementalMatchRanges: NSValue[]; // property
    isIncrementalSearchingEnabled: boolean;
    setIncrementalSearchingEnabled(_: boolean) // property
    incrementalSearchingShouldDimContentView: boolean;
    setIncrementalSearchingShouldDimContentView(_: boolean) // property
    cancelFindIndicator(): void;
    noteClientStringWillChange(): void;
    performAction(_: NSTextFinder.Action): void;
    validateAction(_: NSTextFinder.Action): boolean;
  }

  interface NSTextFinderBarContainer extends NSObject {
    findBarView: NSView;
    setFindBarView(_: NSView) // property
    isFindBarVisible: boolean;
    setFindBarVisible(_: boolean) // property
    contentView: NSView; // property
    // instance method
    findBarViewDidChangeHeight(): void;
  }

  interface NSTextFinderClient extends NSObject {
    allowsMultipleSelection?: boolean; // property
    isEditable?: boolean; // property
    firstSelectedRange?: NSRange; // property
    isSelectable?: boolean; // property
    selectedRanges?: NSValue[];
    setSelectedRanges(_: NSValue[]) // property
    string?: string; // property
    visibleCharacterRanges?: NSValue[]; // property
    // instance method
    contentViewAtIndexEffectiveCharacterRange?(at: number, effectiveCharacterRange: NSRange): NSView;
    // instance method
    didReplaceCharacters?(): void;
    // instance method
    drawCharactersInRangeForContentView?(in_: NSRange, forContentView: NSView): void;
    // instance method
    rectsForCharacterRange?(forCharacterRange: NSRange): NSValue[];
    // instance method
    replaceCharactersInRangeWithString?(in_: NSRange, with_: string): void;
    // instance method
    scrollRangeToVisible?(_: NSRange): void;
    // instance method
    shouldReplaceCharactersInRangesWithStrings?(inRanges: NSValue[], with_: string[]): boolean;
    // instance method
    stringAtIndexEffectiveRangeEndsWithSearchBoundary?(at: number, effectiveRange: NSRange, endsWithSearchBoundary: boolean): string;
    // instance method
    stringLength?(): number;
  }

  interface NSTextInput {
  }

  interface NSTextInputClient {
    // instance method
    attributedString?(): NSAttributedString;
    // instance method
    attributedSubstringForProposedRangeActualRange(forProposedRange: NSRange, actualRange?: NSRange): NSAttributedString;
    // instance method
    baselineDeltaForCharacterAtIndex?(at: number): number;
    // instance method
    characterIndexForPoint(for_: CGPoint): number;
    // instance method
    doCommandBySelector(by: string): void;
    // instance method
    drawsVerticallyForCharacterAtIndex?(at: number): boolean;
    // instance method
    firstRectForCharacterRangeActualRange(forCharacterRange: NSRange, actualRange?: NSRange): CGRect;
    // instance method
    fractionOfDistanceThroughGlyphForPoint?(for_: CGPoint): number;
    // instance method
    hasMarkedText(): boolean;
    // instance method
    insertTextReplacementRange(_: any, replacementRange: NSRange): void;
    // instance method
    markedRange(): NSRange;
    // instance method
    selectedRange(): NSRange;
    // instance method
    setMarkedTextSelectedRangeReplacementRange(_: any, selectedRange: NSRange, replacementRange: NSRange): void;
    // instance method
    unmarkText(): void;
    // instance method
    validAttributesForMarkedText(): string[];
    // instance method
    windowLevel?(): number;
  }

  // interface
  class NSTextInputContext extends NSObject {
    static localizedNameForInputSource(forInputSource: string): string;
    acceptsGlyphInfo: boolean;
    setAcceptsGlyphInfo(_: boolean) // property
    allowedInputSourceLocales: string[];
    setAllowedInputSourceLocales(_: string[]) // property
    client: NSTextInputClient; // property
    keyboardInputSources: string[]; // property
    selectedKeyboardInputSource: string;
    setSelectedKeyboardInputSource(_: string) // property
    static currentInputContext: NSTextInputContext; // property
    activate(): void;
    deactivate(): void;
    discardMarkedText(): void;
    handleEvent(_: NSEvent): boolean;
    static createWithClient(client: NSTextInputClient): NSTextInputContext;
    invalidateCharacterCoordinates(): void;
  }

  interface NSTextInputTraits {
    autocorrectionType?: NSTextInputTraitType;
    setAutocorrectionType(_: NSTextInputTraitType) // property
    dataDetectionType?: NSTextInputTraitType;
    setDataDetectionType(_: NSTextInputTraitType) // property
    grammarCheckingType?: NSTextInputTraitType;
    setGrammarCheckingType(_: NSTextInputTraitType) // property
    linkDetectionType?: NSTextInputTraitType;
    setLinkDetectionType(_: NSTextInputTraitType) // property
    smartDashesType?: NSTextInputTraitType;
    setSmartDashesType(_: NSTextInputTraitType) // property
    smartInsertDeleteType?: NSTextInputTraitType;
    setSmartInsertDeleteType(_: NSTextInputTraitType) // property
    smartQuotesType?: NSTextInputTraitType;
    setSmartQuotesType(_: NSTextInputTraitType) // property
    spellCheckingType?: NSTextInputTraitType;
    setSpellCheckingType(_: NSTextInputTraitType) // property
    textCompletionType?: NSTextInputTraitType;
    setTextCompletionType(_: NSTextInputTraitType) // property
    textReplacementType?: NSTextInputTraitType;
    setTextReplacementType(_: NSTextInputTraitType) // property
  }

  interface NSTextLayoutOrientationProvider {
    layoutOrientation: NSLayoutManager.TextLayoutOrientation; // property
  }

  // interface
  class NSTextList extends NSObject /* implements NSCopying, NSSecureCoding */ {
    listOptions: NSTextList.Options; // property
    markerFormat: string; // property
    startingItemNumber: number;
    setStartingItemNumber(_: number) // property
    static createWithMarkerFormatOptions(markerFormat: string, options: number): NSTextList;
    markerForItemNumber(forItemNumber: number): string;
  }

  // interface
  class NSTextStorage extends NSMutableAttributedString /* implements NSSecureCoding */ {
    attributeRuns: NSTextStorage[];
    setAttributeRuns(_: NSTextStorage[]) // property
    changeInLength: number; // property
    characters: NSTextStorage[];
    setCharacters(_: NSTextStorage[]) // property
    delegate: NSTextStorageDelegate;
    setDelegate(_: NSTextStorageDelegate) // property
    editedMask: NSTextStorageEditActions; // property
    editedRange: NSRange; // property
    fixesAttributesLazily: boolean; // property
    font: NSFont;
    setFont(_: NSFont) // property
    foregroundColor: NSColor;
    setForegroundColor(_: NSColor) // property
    layoutManagers: NSLayoutManager[]; // property
    paragraphs: NSTextStorage[];
    setParagraphs(_: NSTextStorage[]) // property
    words: NSTextStorage[];
    setWords(_: NSTextStorage[]) // property
    addLayoutManager(_: NSLayoutManager): void;
    editedRangeChangeInLength(_: NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
    ensureAttributesAreFixedInRange(in_: NSRange): void;
    invalidateAttributesInRange(in_: NSRange): void;
    processEditing(): void;
    removeLayoutManager(_: NSLayoutManager): void;
  }

  interface NSTextStorageDelegate extends NSObject {
    // instance method
    textStorageDidProcessEditingRangeChangeInLength?(_: NSTextStorage, didProcessEditing: NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
    // instance method
    textStorageWillProcessEditingRangeChangeInLength?(_: NSTextStorage, willProcessEditing: NSTextStorageEditActions, range: NSRange, changeInLength: number): void;
  }

  // interface
  class NSTextTab extends NSObject /* implements NSCoding, NSCopying, NSSecureCoding */ {
    static columnTerminatorsForLocale(for_?: NSLocale): NSCharacterSet;
    alignment: NSTextAlignment; // property
    location: number; // property
    options: Map<string, any>; // property
    tabStopType: NSParagraphStyle.TextTabType; // property
    static createWithTextAlignmentLocationOptions(textAlignment: NSTextAlignment, location: number, options: Map<string, any>): NSTextTab;
    static createWithTypeLocation(type: NSParagraphStyle.TextTabType, location: number): NSTextTab;
  }

  // interface
  class NSTextTable extends NSTextBlock {
    collapsesBorders: boolean;
    setCollapsesBorders(_: boolean) // property
    hidesEmptyCells: boolean;
    setHidesEmptyCells(_: boolean) // property
    layoutAlgorithm: NSTextTable.LayoutAlgorithm;
    setLayoutAlgorithm(_: NSTextTable.LayoutAlgorithm) // property
    numberOfColumns: number;
    setNumberOfColumns(_: number) // property
    boundsRectForBlockContentRectInRectTextContainerCharacterRange(for_: NSTextTableBlock, contentRect: CGRect, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
    drawBackgroundForBlockWithFrameInViewCharacterRangeLayoutManager(for_: NSTextTableBlock, withFrame: CGRect, in_: NSView, characterRange: NSRange, layoutManager: NSLayoutManager): void;
    rectForBlockLayoutAtPointInRectTextContainerCharacterRange(for_: NSTextTableBlock, layoutAt: CGPoint, in_: CGRect, textContainer: NSTextContainer, characterRange: NSRange): CGRect;
  }

  // interface
  class NSTextTableBlock extends NSTextBlock {
    columnSpan: number; // property
    rowSpan: number; // property
    startingColumn: number; // property
    startingRow: number; // property
    table: NSTextTable; // property
    static createWithTableStartingRowRowSpanStartingColumnColumnSpan(table: NSTextTable, startingRow: number, rowSpan: number, startingColumn: number, columnSpan: number): NSTextTableBlock;
  }

  // interface
  class NSTextView extends NSText /* implements NSAccessibilityNavigableStaticText, NSColorChanging, NSDraggingSource, NSMenuItemValidation, NSStandardKeyBindingResponding, NSTextInput, NSTextInputClient, NSTextLayoutOrientationProvider, NSUserInterfaceValidations, NSCandidateListTouchBarItemDelegate, NSTouchBarDelegate */ {
    static fieldEditor(): NSTextView;
    static registerForServices(): void;
    static scrollableDocumentContentTextView(): NSScrollView;
    static scrollablePlainDocumentContentTextView(): NSScrollView;
    static scrollableTextView(): NSScrollView;
    acceptableDragTypes: string[]; // property
    acceptsGlyphInfo: boolean;
    setAcceptsGlyphInfo(_: boolean) // property
    allowedInputSourceLocales: string[];
    setAllowedInputSourceLocales(_: string[]) // property
    allowsCharacterPickerTouchBarItem: boolean;
    setAllowsCharacterPickerTouchBarItem(_: boolean) // property
    allowsDocumentBackgroundColorChange: boolean;
    setAllowsDocumentBackgroundColorChange(_: boolean) // property
    allowsImageEditing: boolean;
    setAllowsImageEditing(_: boolean) // property
    allowsUndo: boolean;
    setAllowsUndo(_: boolean) // property
    isAutomaticDashSubstitutionEnabled: boolean;
    setAutomaticDashSubstitutionEnabled(_: boolean) // property
    isAutomaticDataDetectionEnabled: boolean;
    setAutomaticDataDetectionEnabled(_: boolean) // property
    isAutomaticLinkDetectionEnabled: boolean;
    setAutomaticLinkDetectionEnabled(_: boolean) // property
    isAutomaticQuoteSubstitutionEnabled: boolean;
    setAutomaticQuoteSubstitutionEnabled(_: boolean) // property
    isAutomaticSpellingCorrectionEnabled: boolean;
    setAutomaticSpellingCorrectionEnabled(_: boolean) // property
    isAutomaticTextCompletionEnabled: boolean;
    setAutomaticTextCompletionEnabled(_: boolean) // property
    isAutomaticTextReplacementEnabled: boolean;
    setAutomaticTextReplacementEnabled(_: boolean) // property
    isCoalescingUndo: boolean; // property
    isContinuousSpellCheckingEnabled: boolean;
    setContinuousSpellCheckingEnabled(_: boolean) // property
    defaultParagraphStyle: NSParagraphStyle;
    setDefaultParagraphStyle(_: NSParagraphStyle) // property
    displaysLinkToolTips: boolean;
    setDisplaysLinkToolTips(_: boolean) // property
    enabledTextCheckingTypes: number;
    setEnabledTextCheckingTypes(_: number) // property
    isGrammarCheckingEnabled: boolean;
    setGrammarCheckingEnabled(_: boolean) // property
    isIncrementalSearchingEnabled: boolean;
    setIncrementalSearchingEnabled(_: boolean) // property
    insertionPointColor: NSColor;
    setInsertionPointColor(_: NSColor) // property
    layoutManager: NSLayoutManager; // property
    linkTextAttributes: Map<string, any>;
    setLinkTextAttributes(_: Map<string, any>) // property
    markedTextAttributes: Map<string, any>;
    setMarkedTextAttributes(_: Map<string, any>) // property
    rangeForUserCharacterAttributeChange: NSRange; // property
    rangeForUserCompletion: NSRange; // property
    rangeForUserParagraphAttributeChange: NSRange; // property
    rangeForUserTextChange: NSRange; // property
    rangesForUserCharacterAttributeChange: NSValue[]; // property
    rangesForUserParagraphAttributeChange: NSValue[]; // property
    rangesForUserTextChange: NSValue[]; // property
    readablePasteboardTypes: string[]; // property
    selectedRanges: NSValue[];
    setSelectedRanges(_: NSValue[]) // property
    selectedTextAttributes: Map<string, any>;
    setSelectedTextAttributes(_: Map<string, any>) // property
    selectionAffinity: NSSelectionAffinity; // property
    selectionGranularity: NSSelectionGranularity;
    setSelectionGranularity(_: NSSelectionGranularity) // property
    shouldDrawInsertionPoint: boolean; // property
    smartInsertDeleteEnabled: boolean;
    setSmartInsertDeleteEnabled(_: boolean) // property
    spellCheckerDocumentTag: number; // property
    textContainer: NSTextContainer;
    setTextContainer(_: NSTextContainer) // property
    textContainerInset: CGSize;
    setTextContainerInset(_: CGSize) // property
    textContainerOrigin: CGPoint; // property
    textStorage: NSTextStorage; // property
    typingAttributes: Map<string, any>;
    setTypingAttributes(_: Map<string, any>) // property
    usesAdaptiveColorMappingForDarkAppearance: boolean;
    setUsesAdaptiveColorMappingForDarkAppearance(_: boolean) // property
    usesFindBar: boolean;
    setUsesFindBar(_: boolean) // property
    usesFindPanel: boolean;
    setUsesFindPanel(_: boolean) // property
    usesInspectorBar: boolean;
    setUsesInspectorBar(_: boolean) // property
    usesRolloverButtonForSelection: boolean;
    setUsesRolloverButtonForSelection(_: boolean) // property
    usesRuler: boolean;
    setUsesRuler(_: boolean) // property
    writablePasteboardTypes: string[]; // property
    static stronglyReferencesTextStorage: boolean; // property
    alignJustified(_?: any): void;
    breakUndoCoalescing(): void;
    changeAttributes(_?: any): void;
    changeDocumentBackgroundColor(_?: any): void;
    changeLayoutOrientation(_?: any): void;
    characterIndexForInsertionAtPoint(at: CGPoint): number;
    checkTextInDocument(_?: any): void;
    checkTextInRangeTypesOptions(in_: NSRange, types: number, options: Map<string, any>): void;
    checkTextInSelection(_?: any): void;
    cleanUpAfterDragOperation(): void;
    clickedOnLinkAtIndex(onLink: any, at: number): void;
    completionsForPartialWordRangeIndexOfSelectedItem(forPartialWordRange: NSRange, indexOfSelectedItem: number): string[];
    didChangeText(): void;
    dragImageForSelectionWithEventOrigin(with_: NSEvent, origin?: NSPoint): NSImage;
    dragOperationForDraggingInfoType(for_: NSDraggingInfo, type: string): NSDragOperation;
    dragSelectionWithEventOffsetSlideBack(with_: NSEvent, offset: CGSize, slideBack: boolean): boolean;
    drawInsertionPointInRectColorTurnedOn(in_: CGRect, color: NSColor, turnedOn: boolean): void;
    drawViewBackgroundInRect(in_: CGRect): void;
    handleTextCheckingResultsForRangeTypesOptionsOrthographyWordCount(_: NSTextCheckingResult[], forRange: NSRange, types: number, options: Map<string, any>, orthography: NSOrthography, wordCount: number): void;
    static createWithFrameTextContainer(frame: CGRect, textContainer?: NSTextContainer): NSTextView;
    insertCompletionForPartialWordRangeMovementIsFinal(_: string, forPartialWordRange: NSRange, movement: number, isFinal: boolean): void;
    invalidateTextContainerOrigin(): void;
    loosenKerning(_?: any): void;
    lowerBaseline(_?: any): void;
    orderFrontLinkPanel(_?: any): void;
    orderFrontListPanel(_?: any): void;
    orderFrontSharingServicePicker(_?: any): void;
    orderFrontSpacingPanel(_?: any): void;
    orderFrontSubstitutionsPanel(_?: any): void;
    orderFrontTablePanel(_?: any): void;
    outline(_?: any): void;
    pasteAsPlainText(_?: any): void;
    pasteAsRichText(_?: any): void;
    performFindPanelAction(_?: any): void;
    performValidatedReplacementInRangeWithAttributedString(in_: NSRange, with_: NSAttributedString): boolean;
    preferredPasteboardTypeFromArrayRestrictedToTypesFromArray(from: string[], restrictedToTypesFrom?: string[]): string;
    quickLookPreviewableItemsInRanges(_: NSValue[]): QLPreviewItem[];
    raiseBaseline(_?: any): void;
    readSelectionFromPasteboard(from: NSPasteboard): boolean;
    readSelectionFromPasteboardType(from: NSPasteboard, type: string): boolean;
    replaceTextContainer(_: NSTextContainer): void;
    selectionRangeForProposedRangeGranularity(forProposedRange: NSRange, granularity: NSSelectionGranularity): NSRange;
    setAlignmentRange(_: NSTextAlignment, range: NSRange): void;
    setBaseWritingDirectionRange(_: NSWritingDirection, range: NSRange): void;
    setConstrainedFrameSize(_: CGSize): void;
    setLayoutOrientation(_: NSLayoutManager.TextLayoutOrientation): void;
    setNeedsDisplayInRectAvoidAdditionalLayout(_: CGRect, avoidAdditionalLayout: boolean): void;
    setSelectedRange(_: NSRange): void;
    setSelectedRangeAffinityStillSelecting(_: NSRange, affinity: NSSelectionAffinity, stillSelecting: boolean): void;
    setSelectedRangesAffinityStillSelecting(_: NSValue[], affinity: NSSelectionAffinity, stillSelecting: boolean): void;
    setSpellingStateRange(_: number, range: NSRange): void;
    shouldChangeTextInRangeReplacementString(in_: NSRange, replacementString?: string): boolean;
    shouldChangeTextInRangesReplacementStrings(inRanges: NSValue[], replacementStrings?: string[]): boolean;
    showFindIndicatorForRange(for_: NSRange): void;
    smartDeleteRangeForProposedRange(forProposedRange: NSRange): NSRange;
    smartInsertAfterStringForStringReplacingRange(afterStringFor: string, replacing: NSRange): string;
    smartInsertBeforeStringForStringReplacingRange(beforeStringFor: string, replacing: NSRange): string;
    smartInsertForStringReplacingRangeBeforeStringAfterString(for_: string, replacing: NSRange, before?: string, after?: string): void;
    startSpeaking(_?: any): void;
    stopSpeaking(_?: any): void;
    tightenKerning(_?: any): void;
    toggleAutomaticDashSubstitution(_?: any): void;
    toggleAutomaticDataDetection(_?: any): void;
    toggleAutomaticLinkDetection(_?: any): void;
    toggleAutomaticQuoteSubstitution(_?: any): void;
    toggleAutomaticSpellingCorrection(_?: any): void;
    toggleAutomaticTextCompletion(_?: any): void;
    toggleAutomaticTextReplacement(_?: any): void;
    toggleContinuousSpellChecking(_?: any): void;
    toggleGrammarChecking(_?: any): void;
    toggleQuickLookPreviewPanel(_?: any): void;
    toggleSmartInsertDelete(_?: any): void;
    turnOffKerning(_?: any): void;
    turnOffLigatures(_?: any): void;
    updateCandidates(): void;
    updateDragTypeRegistration(): void;
    updateFontPanel(): void;
    updateInsertionPointStateAndRestartTimer(_: boolean): void;
    updateQuickLookPreviewPanel(): void;
    updateRuler(): void;
    updateTextTouchBarItems(): void;
    updateTouchBarItemIdentifiers(): void;
    useAllLigatures(_?: any): void;
    useStandardKerning(_?: any): void;
    useStandardLigatures(_?: any): void;
    writeSelectionToPasteboardType(to: NSPasteboard, type: string): boolean;
    writeSelectionToPasteboardTypes(to: NSPasteboard, types: string[]): boolean;
  }

  interface NSTextViewDelegate extends NSTextDelegate {
    // instance method
    textViewClickedOnLinkAtIndex?(_: NSTextView, clickedOnLink: any, at: number): boolean;
    // instance method
    textViewClickedOnCellInRectAtIndex?(_: NSTextView, clickedOn: NSTextAttachmentCell, in_: CGRect, at: number): void;
    // instance method
    textViewDoubleClickedOnCellInRectAtIndex?(_: NSTextView, doubleClickedOn: NSTextAttachmentCell, in_: CGRect, at: number): void;
    // instance method
    textViewDraggedCellInRectEventAtIndex?(_: NSTextView, draggedCell: NSTextAttachmentCell, in_: CGRect, event: NSEvent, at: number): void;
    // instance method
    textViewWritablePasteboardTypesForCellAtIndex?(_: NSTextView, writablePasteboardTypesFor: NSTextAttachmentCell, at: number): string[];
    // instance method
    textViewWriteCellAtIndexToPasteboardType?(_: NSTextView, write: NSTextAttachmentCell, at: number, to: NSPasteboard, type: string): boolean;
    // instance method
    textViewWillDisplayToolTipForCharacterAtIndex?(_: NSTextView, willDisplayToolTip: string, forCharacterAt: number): string;
    // instance method
    textViewShouldChangeTextInRangeReplacementString?(_: NSTextView, shouldChangeTextIn: NSRange, replacementString?: string): boolean;
    // instance method
    textViewDoCommandBySelector?(_: NSTextView, doCommandBy: string): boolean;
    // instance method
    textViewMenuForEventAtIndex?(_: NSTextView, menu: NSMenu, for_: NSEvent, at: number): NSMenu;
    // instance method
    textViewWillCheckTextInRangeOptionsTypes?(_: NSTextView, willCheckTextIn: NSRange, options: Map<string, any>, types: number): Map<string, any>;
    // instance method
    textViewDidCheckTextInRangeTypesOptionsResultsOrthographyWordCount?(_: NSTextView, didCheckTextIn: NSRange, types: number, options: Map<string, any>, results: NSTextCheckingResult[], orthography: NSOrthography, wordCount: number): NSTextCheckingResult[];
    // instance method
    textViewURLForContentsOfTextAttachmentAtIndex?(_: NSTextView, urlForContentsOf: NSTextAttachment, at: number): NSURL;
    // instance method
    textViewWillShowSharingServicePickerForItems?(_: NSTextView, willShow: NSSharingServicePicker, forItems: any[]): NSSharingServicePicker;
    // instance method
    textViewShouldSelectCandidateAtIndex?(_: NSTextView, shouldSelectCandidateAt: number): boolean;
    // instance method
    textViewCandidatesForSelectedRange?(_: NSTextView, candidates: NSTextCheckingResult[], forSelectedRange: NSRange): NSTextCheckingResult[];
    // instance method
    textViewCandidatesForSelectedRange?(_: NSTextView, candidatesForSelectedRange: NSRange): any[];
    // instance method
    textViewCompletionsForPartialWordRangeIndexOfSelectedItem?(_: NSTextView, completions: string[], forPartialWordRange: NSRange, indexOfSelectedItem?: number): string[];
    // instance method
    textViewShouldChangeTextInRangesReplacementStrings?(_: NSTextView, shouldChangeTextInRanges: NSValue[], replacementStrings?: string[]): boolean;
    // instance method
    textViewShouldChangeTypingAttributesToAttributes?(_: NSTextView, shouldChangeTypingAttributes: Map<string, any>, toAttributes: Map<string, any>): Map<string, any>;
    // instance method
    textViewShouldSetSpellingStateRange?(_: NSTextView, shouldSetSpellingState: number, range: NSRange): number;
    // instance method
    textViewShouldUpdateTouchBarItemIdentifiers?(_: NSTextView, shouldUpdateTouchBarItemIdentifiers: string[]): string[];
    // instance method
    textViewWillChangeSelectionFromCharacterRangeToCharacterRange?(_: NSTextView, willChangeSelectionFromCharacterRange: NSRange, toCharacterRange: NSRange): NSRange;
    // instance method
    textViewWillChangeSelectionFromCharacterRangesToCharacterRanges?(_: NSTextView, willChangeSelectionFromCharacterRanges: NSValue[], toCharacterRanges: NSValue[]): NSValue[];
    // instance method
    textViewDidChangeSelection?(_: NSNotification): void;
    // instance method
    textViewDidChangeTypingAttributes?(_: NSNotification): void;
    // instance method
    undoManagerForTextView?(for_: NSTextView): UndoManager;
  }

  // interface
  class NSTitlebarAccessoryViewController extends NSViewController /* implements NSAnimatablePropertyContainer, NSAnimationDelegate */ {
    fullScreenMinHeight: number;
    setFullScreenMinHeight(_: number) // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    layoutAttribute: NSLayoutConstraint.Attribute;
    setLayoutAttribute(_: NSLayoutConstraint.Attribute) // property
  }

  // interface
  class NSTokenField extends NSTextField {
    completionDelay: number;
    setCompletionDelay(_: number) // property
    tokenStyle: NSTokenField.TokenStyle;
    setTokenStyle(_: NSTokenField.TokenStyle) // property
    tokenizingCharacterSet: NSCharacterSet;
    setTokenizingCharacterSet(_: NSCharacterSet) // property
    static defaultCompletionDelay: number; // property
    static defaultTokenizingCharacterSet: NSCharacterSet; // property
  }

  // interface
  class NSTokenFieldCell extends NSTextFieldCell {
    completionDelay: number;
    setCompletionDelay(_: number) // property
    delegate: NSTokenFieldCellDelegate;
    setDelegate(_: NSTokenFieldCellDelegate) // property
    tokenStyle: NSTokenField.TokenStyle;
    setTokenStyle(_: NSTokenField.TokenStyle) // property
    tokenizingCharacterSet: NSCharacterSet;
    setTokenizingCharacterSet(_: NSCharacterSet) // property
    static defaultCompletionDelay: number; // property
    static defaultTokenizingCharacterSet: NSCharacterSet; // property
  }

  interface NSTokenFieldCellDelegate extends NSObject {
    // instance method
    tokenFieldCellShouldAddObjectsAtIndex?(_: NSTokenFieldCell, shouldAdd: any[], at: number): any[];
    // instance method
    tokenFieldCellRepresentedObjectForEditingString?(_: NSTokenFieldCell, representedObjectForEditing: string): any;
    // instance method
    tokenFieldCellWriteRepresentedObjectsToPasteboard?(_: NSTokenFieldCell, writeRepresentedObjects: any[], to: NSPasteboard): boolean;
    // instance method
    tokenFieldCellReadFromPasteboard?(_: NSTokenFieldCell, readFrom: NSPasteboard): any[];
    // instance method
    tokenFieldCellCompletionsForSubstringIndexOfTokenIndexOfSelectedItem?(_: NSTokenFieldCell, completionsForSubstring: string, indexOfToken: number, indexOfSelectedItem: number): any[];
    // instance method
    tokenFieldCellDisplayStringForRepresentedObject?(_: NSTokenFieldCell, displayStringForRepresentedObject: any): string;
    // instance method
    tokenFieldCellEditingStringForRepresentedObject?(_: NSTokenFieldCell, editingStringForRepresentedObject: any): string;
    // instance method
    tokenFieldCellHasMenuForRepresentedObject?(_: NSTokenFieldCell, hasMenuForRepresentedObject: any): boolean;
    // instance method
    tokenFieldCellMenuForRepresentedObject?(_: NSTokenFieldCell, menuForRepresentedObject: any): NSMenu;
    // instance method
    tokenFieldCellStyleForRepresentedObject?(_: NSTokenFieldCell, styleForRepresentedObject: any): NSTokenField.TokenStyle;
  }

  interface NSTokenFieldDelegate extends NSTextFieldDelegate {
    // instance method
    tokenFieldShouldAddObjectsAtIndex?(_: NSTokenField, shouldAdd: any[], at: number): any[];
    // instance method
    tokenFieldRepresentedObjectForEditingString?(_: NSTokenField, representedObjectForEditing: string): any;
    // instance method
    tokenFieldWriteRepresentedObjectsToPasteboard?(_: NSTokenField, writeRepresentedObjects: any[], to: NSPasteboard): boolean;
    // instance method
    tokenFieldReadFromPasteboard?(_: NSTokenField, readFrom: NSPasteboard): any[];
    // instance method
    tokenFieldCompletionsForSubstringIndexOfTokenIndexOfSelectedItem?(_: NSTokenField, completionsForSubstring: string, indexOfToken: number, indexOfSelectedItem?: number): any[];
    // instance method
    tokenFieldDisplayStringForRepresentedObject?(_: NSTokenField, displayStringForRepresentedObject: any): string;
    // instance method
    tokenFieldEditingStringForRepresentedObject?(_: NSTokenField, editingStringForRepresentedObject: any): string;
    // instance method
    tokenFieldHasMenuForRepresentedObject?(_: NSTokenField, hasMenuForRepresentedObject: any): boolean;
    // instance method
    tokenFieldMenuForRepresentedObject?(_: NSTokenField, menuForRepresentedObject: any): NSMenu;
    // instance method
    tokenFieldStyleForRepresentedObject?(_: NSTokenField, styleForRepresentedObject: any): NSTokenField.TokenStyle;
  }

  // interface
  class NSToolbar extends NSObject {
    allowsExtensionItems: boolean;
    setAllowsExtensionItems(_: boolean) // property
    allowsUserCustomization: boolean;
    setAllowsUserCustomization(_: boolean) // property
    autosavesConfiguration: boolean;
    setAutosavesConfiguration(_: boolean) // property
    centeredItemIdentifier: string;
    setCenteredItemIdentifier(_: string) // property
    configurationDictionary: Map<string, any>; // property
    customizationPaletteIsRunning: boolean; // property
    delegate: NSToolbarDelegate;
    setDelegate(_: NSToolbarDelegate) // property
    displayMode: NSToolbar.DisplayMode;
    setDisplayMode(_: NSToolbar.DisplayMode) // property
    identifier: string; // property
    items: NSToolbarItem[]; // property
    selectedItemIdentifier: string;
    setSelectedItemIdentifier(_: string) // property
    showsBaselineSeparator: boolean;
    setShowsBaselineSeparator(_: boolean) // property
    sizeMode: NSToolbar.SizeMode;
    setSizeMode(_: NSToolbar.SizeMode) // property
    isVisible: boolean;
    setVisible(_: boolean) // property
    visibleItems: NSToolbarItem[]; // property
    static createWithIdentifier(identifier: string): NSToolbar;
    insertItemWithItemIdentifierAtIndex(withItemIdentifier: string, at: number): void;
    removeItemAtIndex(at: number): void;
    runCustomizationPalette(_?: any): void;
    setConfigurationFromDictionary(_: Map<string, any>): void;
    validateVisibleItems(): void;
  }

  interface NSToolbarDelegate extends NSObject {
    // instance method
    toolbarItemForItemIdentifierWillBeInsertedIntoToolbar?(_: NSToolbar, itemForItemIdentifier: string, willBeInsertedIntoToolbar: boolean): NSToolbarItem;
    // instance method
    toolbarAllowedItemIdentifiers?(_: NSToolbar): string[];
    // instance method
    toolbarDefaultItemIdentifiers?(_: NSToolbar): string[];
    // instance method
    toolbarDidRemoveItem?(_: NSNotification): void;
    // instance method
    toolbarSelectableItemIdentifiers?(_: NSToolbar): string[];
    // instance method
    toolbarWillAddItem?(_: NSNotification): void;
  }

  // interface
  class NSToolbarItem extends NSObject /* implements NSCopying, NSMenuItemValidation, NSValidatedUserInterfaceItem */ {
    action: string;
    setAction(_: string) // property
    allowsDuplicatesInToolbar: boolean; // property
    autovalidates: boolean;
    setAutovalidates(_: boolean) // property
    isBordered: boolean;
    setBordered(_: boolean) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    image: NSImage;
    setImage(_: NSImage) // property
    itemIdentifier: string; // property
    label: string;
    setLabel(_: string) // property
    maxSize: CGSize;
    setMaxSize(_: CGSize) // property
    menuFormRepresentation: NSMenuItem;
    setMenuFormRepresentation(_: NSMenuItem) // property
    minSize: CGSize;
    setMinSize(_: CGSize) // property
    paletteLabel: string;
    setPaletteLabel(_: string) // property
    tag: number;
    setTag(_: number) // property
    target: any;
    setTarget(_: any) // property
    title: string;
    setTitle(_: string) // property
    toolTip: string;
    setToolTip(_: string) // property
    toolbar: NSToolbar; // property
    view: NSView;
    setView(_: NSView) // property
    visibilityPriority: number;
    setVisibilityPriority(_: number) // property
    static createWithItemIdentifier(itemIdentifier: string): NSToolbarItem;
    validate(): void;
  }

  // interface
  class NSToolbarItemGroup extends NSToolbarItem {
    controlRepresentation: NSToolbarItemGroup.ControlRepresentation;
    setControlRepresentation(_: NSToolbarItemGroup.ControlRepresentation) // property
    selectedIndex: number;
    setSelectedIndex(_: number) // property
    selectionMode: NSToolbarItemGroup.SelectionMode;
    setSelectionMode(_: NSToolbarItemGroup.SelectionMode) // property
    subitems: NSToolbarItem[];
    setSubitems(_: NSToolbarItem[]) // property
    isSelectedAtIndex(at: number): boolean;
    setSelectedAtIndex(_: boolean, at: number): void;
  }

  interface NSToolbarItemValidation extends NSObject {
    // instance method
    validateToolbarItem(_: NSToolbarItem): boolean;
  }

  // interface
  class NSTouch extends NSObject /* implements NSCopying */ {
    device: any; // property
    deviceSize: CGSize; // property
    identity: any; // property
    normalizedPosition: CGPoint; // property
    phase: NSTouch.Phase; // property
    isResting: boolean; // property
    type: NSTouch.TouchType; // property
    locationInView(in_?: NSView): CGPoint;
    previousLocationInView(in_?: NSView): CGPoint;
  }

  // interface
  class NSTouchBar extends NSObject /* implements NSCoding */ {
    customizationAllowedItemIdentifiers: string[];
    setCustomizationAllowedItemIdentifiers(_: string[]) // property
    customizationIdentifier: string;
    setCustomizationIdentifier(_: string) // property
    customizationRequiredItemIdentifiers: string[];
    setCustomizationRequiredItemIdentifiers(_: string[]) // property
    defaultItemIdentifiers: string[];
    setDefaultItemIdentifiers(_: string[]) // property
    delegate: NSTouchBarDelegate;
    setDelegate(_: NSTouchBarDelegate) // property
    escapeKeyReplacementItemIdentifier: string;
    setEscapeKeyReplacementItemIdentifier(_: string) // property
    itemIdentifiers: string[]; // property
    principalItemIdentifier: string;
    setPrincipalItemIdentifier(_: string) // property
    templateItems: NSSet<NSTouchBarItem>;
    setTemplateItems(_: NSSet<NSTouchBarItem>) // property
    isVisible: boolean; // property
    static isAutomaticCustomizeTouchBarMenuItemEnabled: boolean;
    setAutomaticCustomizeTouchBarMenuItemEnabled(_: boolean) // property
    itemForIdentifier(forIdentifier: string): NSTouchBarItem;
  }

  interface NSTouchBarDelegate extends NSObject {
    // instance method
    touchBarMakeItemForIdentifier?(_: NSTouchBar, makeItemForIdentifier: string): NSTouchBarItem;
  }

  // interface
  class NSTouchBarItem extends NSObject /* implements NSCoding */ {
    customizationLabel: string; // property
    identifier: string; // property
    view: NSView; // property
    viewController: NSViewController; // property
    visibilityPriority: number;
    setVisibilityPriority(_: number) // property
    isVisible: boolean; // property
    static createWithIdentifier(identifier: string): NSTouchBarItem;
  }

  interface NSTouchBarProvider extends NSObject {
    touchBar: NSTouchBar; // property
  }

  // interface
  class NSTrackingArea extends NSObject /* implements NSCoding, NSCopying */ {
    options: NSTrackingArea.Options; // property
    owner: any; // property
    rect: CGRect; // property
    userInfo: Map<any, any>; // property
    static createWithRectOptionsOwnerUserInfo(rect: CGRect, options: NSTrackingArea.Options, owner?: any, userInfo?: Map<any, any>): NSTrackingArea;
  }

  // interface
  class NSTreeController extends NSObjectController {
    alwaysUsesMultipleValuesMarker: boolean;
    setAlwaysUsesMultipleValuesMarker(_: boolean) // property
    arrangedObjects: NSTreeNode; // property
    avoidsEmptySelection: boolean;
    setAvoidsEmptySelection(_: boolean) // property
    canAddChild: boolean; // property
    canInsert: boolean; // property
    canInsertChild: boolean; // property
    childrenKeyPath: string;
    setChildrenKeyPath(_: string) // property
    countKeyPath: string;
    setCountKeyPath(_: string) // property
    leafKeyPath: string;
    setLeafKeyPath(_: string) // property
    preservesSelection: boolean;
    setPreservesSelection(_: boolean) // property
    selectedNodes: NSTreeNode[]; // property
    selectionIndexPath: NSIndexPath; // property
    selectionIndexPaths: NSIndexPath[]; // property
    selectsInsertedObjects: boolean;
    setSelectsInsertedObjects(_: boolean) // property
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[]) // property
    addChild(_?: any): void;
    addSelectionIndexPaths(_: NSIndexPath[]): boolean;
    childrenKeyPathForNode(for_: NSTreeNode): string;
    countKeyPathForNode(for_: NSTreeNode): string;
    insert(_?: any): void;
    insertChild(_?: any): void;
    insertObjectAtArrangedObjectIndexPath(_?: any, atArrangedObjectIndexPath?: NSIndexPath): void;
    insertObjectsAtArrangedObjectIndexPaths(_: any[], atArrangedObjectIndexPaths: NSIndexPath[]): void;
    leafKeyPathForNode(for_: NSTreeNode): string;
    moveNodeToIndexPath(_: NSTreeNode, to: NSIndexPath): void;
    moveNodesToIndexPath(_: NSTreeNode[], to: NSIndexPath): void;
    rearrangeObjects(): void;
    removeObjectAtArrangedObjectIndexPath(atArrangedObjectIndexPath: NSIndexPath): void;
    removeObjectsAtArrangedObjectIndexPaths(atArrangedObjectIndexPaths: NSIndexPath[]): void;
    removeSelectionIndexPaths(_: NSIndexPath[]): boolean;
    setSelectionIndexPath(_?: NSIndexPath): boolean;
    setSelectionIndexPaths(_: NSIndexPath[]): boolean;
  }

  // interface
  class NSTreeNode extends NSObject {
    childNodes: NSTreeNode[]; // property
    indexPath: NSIndexPath; // property
    isLeaf: boolean; // property
    mutableChildNodes: NSMutableArray<NSTreeNode>; // property
    parentNode: NSTreeNode; // property
    representedObject: any; // property
    descendantNodeAtIndexPath(at: NSIndexPath): NSTreeNode;
    static createWithRepresentedObject(representedObject?: any): NSTreeNode;
    sortWithSortDescriptorsRecursively(with_: NSSortDescriptor[], recursively: boolean): void;
  }

  // interface
  class NSTypesetter extends NSObject {
    static printingAdjustmentInLayoutManagerForNominallySpacedGlyphRangePackedGlyphsCount(in_: NSLayoutManager, forNominallySpacedGlyphRange: NSRange, packedGlyphs: string, count: number): CGSize;
    static sharedSystemTypesetterForBehavior(for_: NSLayoutManager.TypesetterBehavior): any;
    attributedString: NSAttributedString;
    setAttributedString(_: NSAttributedString) // property
    attributesForExtraLineFragment: Map<string, any>; // property
    bidiProcessingEnabled: boolean;
    setBidiProcessingEnabled(_: boolean) // property
    currentParagraphStyle: NSParagraphStyle; // property
    currentTextContainer: NSTextContainer; // property
    hyphenationFactor: number;
    setHyphenationFactor(_: number) // property
    layoutManager: NSLayoutManager; // property
    lineFragmentPadding: number;
    setLineFragmentPadding(_: number) // property
    paragraphCharacterRange: NSRange; // property
    paragraphGlyphRange: NSRange; // property
    paragraphSeparatorCharacterRange: NSRange; // property
    paragraphSeparatorGlyphRange: NSRange; // property
    textContainers: NSTextContainer[]; // property
    typesetterBehavior: NSLayoutManager.TypesetterBehavior;
    setTypesetterBehavior(_: NSLayoutManager.TypesetterBehavior) // property
    usesFontLeading: boolean;
    setUsesFontLeading(_: boolean) // property
    static defaultTypesetterBehavior: NSLayoutManager.TypesetterBehavior; // property
    static sharedSystemTypesetter: NSTypesetter; // property
    actionForControlCharacterAtIndex(at: number): NSTypesetterControlCharacterAction;
    baselineOffsetInLayoutManagerGlyphIndex(in_: NSLayoutManager, glyphIndex: number): number;
    beginLineWithGlyphAtIndex(withGlyphAt: number): void;
    beginParagraph(): void;
    boundingBoxForControlGlyphAtIndexForTextContainerProposedLineFragmentGlyphPositionCharacterIndex(forControlGlyphAt: number, for_: NSTextContainer, proposedLineFragment: CGRect, glyphPosition: CGPoint, characterIndex: number): CGRect;
    characterRangeForGlyphRangeActualGlyphRange(forGlyphRange: NSRange, actualGlyphRange?: NSRange): NSRange;
    endLineWithGlyphRange(withGlyphRange: NSRange): void;
    endParagraph(): void;
    getLineFragmentRectUsedRectForParagraphSeparatorGlyphRangeAtProposedOrigin(_: NSRect, usedRect: NSRect, forParagraphSeparatorGlyphRange: NSRange, atProposedOrigin: CGPoint): void;
    getLineFragmentRectUsedRectRemainingRectForStartingGlyphAtIndexProposedRectLineSpacingParagraphSpacingBeforeParagraphSpacingAfter(_: NSRect, usedRect: NSRect, remaining: NSRect, forStartingGlyphAt: number, proposedRect: CGRect, lineSpacing: number, paragraphSpacingBefore: number, paragraphSpacingAfter: number): void;
    glyphRangeForCharacterRangeActualCharacterRange(forCharacterRange: NSRange, actualCharacterRange?: NSRange): NSRange;
    hyphenCharacterForGlyphAtIndex(forGlyphAt: number): number;
    hyphenationFactorForGlyphAtIndex(forGlyphAt: number): number;
    layoutCharactersInRangeForLayoutManagerMaximumNumberOfLineFragments(in_: NSRange, for_: NSLayoutManager, maximumNumberOfLineFragments: number): NSRange;
    layoutGlyphsInLayoutManagerStartingAtGlyphIndexMaxNumberOfLineFragmentsNextGlyphIndex(in_: NSLayoutManager, startingAtGlyphIndex: number, maxNumberOfLineFragments: number, nextGlyphIndex: number): void;
    layoutParagraphAtPoint(at: NSPoint): number;
    lineSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(afterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    paragraphSpacingAfterGlyphAtIndexWithProposedLineFragmentRect(afterGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    paragraphSpacingBeforeGlyphAtIndexWithProposedLineFragmentRect(beforeGlyphAt: number, withProposedLineFragmentRect: CGRect): number;
    setAttachmentSizeForGlyphRange(_: CGSize, forGlyphRange: NSRange): void;
    setBidiLevelsForGlyphRange(_: string, forGlyphRange: NSRange): void;
    setDrawsOutsideLineFragmentForGlyphRange(_: boolean, forGlyphRange: NSRange): void;
    setHardInvalidationForGlyphRange(_: boolean, forGlyphRange: NSRange): void;
    setLineFragmentRectForGlyphRangeUsedRectBaselineOffset(_: CGRect, forGlyphRange: NSRange, usedRect: CGRect, baselineOffset: number): void;
    setLocationWithAdvancementsForStartOfGlyphRange(_: CGPoint, withAdvancements: number, forStartOfGlyphRange: NSRange): void;
    setNotShownAttributeForGlyphRange(_: boolean, forGlyphRange: NSRange): void;
    setParagraphGlyphRangeSeparatorGlyphRange(_: NSRange, separatorGlyphRange: NSRange): void;
    shouldBreakLineByHyphenatingBeforeCharacterAtIndex(byHyphenatingBeforeCharacterAt: number): boolean;
    shouldBreakLineByWordBeforeCharacterAtIndex(byWordBeforeCharacterAt: number): boolean;
    substituteFontForFont(for_: NSFont): NSFont;
    textTabForGlyphLocationWritingDirectionMaxLocation(forGlyphLocation: number, writingDirection: NSWritingDirection, maxLocation: number): NSTextTab;
    willSetLineFragmentRectForGlyphRangeUsedRectBaselineOffset(_: NSRect, forGlyphRange: NSRange, usedRect: NSRect, baselineOffset: number): void;
  }

  // export declare function NSUnregisterServicesProvider(name: string): void;

  // export declare function NSUpdateDynamicServices(): void;

  interface NSUserActivityRestoring extends NSObject {
    // instance method
    restoreUserActivityState(_: NSUserActivity): void;
  }

  // interface
  class NSUserDefaultsController extends NSController {
    appliesImmediately: boolean;
    setAppliesImmediately(_: boolean) // property
    defaults: UserDefaults; // property
    hasUnappliedChanges: boolean; // property
    initialValues: Map<string, any>;
    setInitialValues(_: Map<string, any>) // property
    values: any; // property
    static sharedUserDefaultsController: NSUserDefaultsController; // property
    static createWithDefaultsInitialValues(defaults?: UserDefaults, initialValues?: Map<string, any>): NSUserDefaultsController;
    revert(_?: any): void;
    revertToInitialValues(_?: any): void;
    save(_?: any): void;
  }

  interface NSUserInterfaceCompression {
    activeCompressionOptions: NSUserInterfaceCompressionOptions; // property
    // instance method
    compressWithPrioritizedCompressionOptions(withPrioritizedCompressionOptions: NSUserInterfaceCompressionOptions[]): void;
    // instance method
    minimumSizeWithPrioritizedCompressionOptions(withPrioritizedCompressionOptions: NSUserInterfaceCompressionOptions[]): CGSize;
  }

  // interface
  class NSUserInterfaceCompressionOptions extends NSObject /* implements NSCoding, NSCopying */ {
    isEmpty: boolean; // property
    static breakEqualWidthsOption: NSUserInterfaceCompressionOptions; // property
    static hideImagesOption: NSUserInterfaceCompressionOptions; // property
    static hideTextOption: NSUserInterfaceCompressionOptions; // property
    static reduceMetricsOption: NSUserInterfaceCompressionOptions; // property
    static standardOptions: NSUserInterfaceCompressionOptions; // property
    containsOptions(_: NSUserInterfaceCompressionOptions): boolean;
    static createWithCompressionOptions(compressionOptions: NSSet<NSUserInterfaceCompressionOptions>): NSUserInterfaceCompressionOptions;
    static createWithIdentifier(identifier: string): NSUserInterfaceCompressionOptions;
    intersectsOptions(_: NSUserInterfaceCompressionOptions): boolean;
    optionsByAddingOptions(_: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
    optionsByRemovingOptions(_: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
  }

  interface NSUserInterfaceItemIdentification {
    identifier: string;
    setIdentifier(_: string) // property
  }

  interface NSUserInterfaceItemSearching extends NSObject {
    // instance method
    localizedTitlesForItem(forItem: any): string[];
    // instance method
    performActionForItem?(forItem: any): void;
    // instance method
    searchForItemsWithWithSearchResultLimitMatchedItemHandler(withSearch: string, resultLimit: number, matchedItemHandler: (p1: any[]) => void): void;
    // instance method
    showAllHelpTopicsForSearchString?(forSearch: string): void;
  }

  interface NSUserInterfaceValidations {
    // instance method
    validateUserInterfaceItem(_: NSValidatedUserInterfaceItem): boolean;
  }

  interface NSValidatedUserInterfaceItem {
    action: string; // property
    tag: number; // property
  }

  // interface
  class NSView extends NSResponder /* implements NSAccessibility, NSAccessibilityElement, NSAnimatablePropertyContainer, NSAppearanceCustomization, NSDraggingDestination, NSUserInterfaceItemIdentification */ {
    alignmentRectInsets: NSEdgeInsets; // property
    allowedTouchTypes: NSTouch.TouchTypeMask;
    setAllowedTouchTypes(_: NSTouch.TouchTypeMask) // property
    allowsVibrancy: boolean; // property
    alphaValue: number;
    setAlphaValue(_: number) // property
    autoresizesSubviews: boolean;
    setAutoresizesSubviews(_: boolean) // property
    autoresizingMask: NSView.AutoresizingMask;
    setAutoresizingMask(_: NSView.AutoresizingMask) // property
    backgroundFilters: CIFilter[];
    setBackgroundFilters(_: CIFilter[]) // property
    baselineOffsetFromBottom: number; // property
    bottomAnchor: NSLayoutYAxisAnchor; // property
    bounds: CGRect;
    setBounds(_: CGRect) // property
    boundsRotation: number;
    setBoundsRotation(_: number) // property
    canBecomeKeyView: boolean; // property
    canDrawConcurrently: boolean;
    setCanDrawConcurrently(_: boolean) // property
    canDrawSubviewsIntoLayer: boolean;
    setCanDrawSubviewsIntoLayer(_: boolean) // property
    candidateListTouchBarItem: NSCandidateListTouchBarItem<any>; // property
    centerXAnchor: NSLayoutXAxisAnchor; // property
    centerYAnchor: NSLayoutYAxisAnchor; // property
    compositingFilter: CIFilter;
    setCompositingFilter(_: CIFilter) // property
    constraints: NSLayoutConstraint[]; // property
    contentFilters: CIFilter[];
    setContentFilters(_: CIFilter[]) // property
    isDrawingFindIndicator: boolean; // property
    enclosingMenuItem: NSMenuItem; // property
    enclosingScrollView: NSScrollView; // property
    firstBaselineAnchor: NSLayoutYAxisAnchor; // property
    firstBaselineOffsetFromTop: number; // property
    fittingSize: CGSize; // property
    isFlipped: boolean; // property
    focusRingMaskBounds: CGRect; // property
    focusRingType: NSFocusRingType;
    setFocusRingType(_: NSFocusRingType) // property
    frame: CGRect;
    setFrame(_: CGRect) // property
    frameCenterRotation: number;
    setFrameCenterRotation(_: number) // property
    frameRotation: number;
    setFrameRotation(_: number) // property
    gestureRecognizers: NSGestureRecognizer[];
    setGestureRecognizers(_: NSGestureRecognizer[]) // property
    hasAmbiguousLayout: boolean; // property
    heightAdjustLimit: number; // property
    heightAnchor: NSLayoutDimension; // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    isHiddenOrHasHiddenAncestor: boolean; // property
    isHorizontalContentSizeConstraintActive: boolean;
    setHorizontalContentSizeConstraintActive(_: boolean) // property
    isInFullScreenMode: boolean; // property
    inLiveResize: boolean; // property
    inputContext: NSTextInputContext; // property
    intrinsicContentSize: CGSize; // property
    lastBaselineAnchor: NSLayoutYAxisAnchor; // property
    lastBaselineOffsetFromBottom: number; // property
    layer: CALayer;
    setLayer(_: CALayer) // property
    layerContentsPlacement: NSView.LayerContentsPlacement;
    setLayerContentsPlacement(_: NSView.LayerContentsPlacement) // property
    layerContentsRedrawPolicy: NSView.LayerContentsRedrawPolicy;
    setLayerContentsRedrawPolicy(_: NSView.LayerContentsRedrawPolicy) // property
    layerUsesCoreImageFilters: boolean;
    setLayerUsesCoreImageFilters(_: boolean) // property
    layoutGuides: NSLayoutGuide[]; // property
    leadingAnchor: NSLayoutXAxisAnchor; // property
    leftAnchor: NSLayoutXAxisAnchor; // property
    mouseDownCanMoveWindow: boolean; // property
    needsDisplay: boolean;
    setNeedsDisplay(_: boolean) // property
    needsLayout: boolean;
    setNeedsLayout(_: boolean) // property
    needsPanelToBecomeKey: boolean; // property
    needsUpdateConstraints: boolean;
    setNeedsUpdateConstraints(_: boolean) // property
    nextKeyView: NSView;
    setNextKeyView(_: NSView) // property
    nextValidKeyView: NSView; // property
    isOpaque: boolean; // property
    opaqueAncestor: NSView; // property
    pageFooter: NSAttributedString; // property
    pageHeader: NSAttributedString; // property
    postsBoundsChangedNotifications: boolean;
    setPostsBoundsChangedNotifications(_: boolean) // property
    postsFrameChangedNotifications: boolean;
    setPostsFrameChangedNotifications(_: boolean) // property
    preparedContentRect: CGRect;
    setPreparedContentRect(_: CGRect) // property
    preservesContentDuringLiveResize: boolean; // property
    pressureConfiguration: NSPressureConfiguration;
    setPressureConfiguration(_: NSPressureConfiguration) // property
    previousKeyView: NSView; // property
    previousValidKeyView: NSView; // property
    printJobTitle: string; // property
    rectPreservedDuringLiveResize: CGRect; // property
    registeredDraggedTypes: string[]; // property
    rightAnchor: NSLayoutXAxisAnchor; // property
    isRotatedFromBase: boolean; // property
    isRotatedOrScaledFromBase: boolean; // property
    shadow: NSShadow;
    setShadow(_: NSShadow) // property
    subviews: NSView[];
    setSubviews(_: NSView[]) // property
    superview: NSView; // property
    tag: number; // property
    toolTip: string;
    setToolTip(_: string) // property
    topAnchor: NSLayoutYAxisAnchor; // property
    trackingAreas: NSTrackingArea[]; // property
    trailingAnchor: NSLayoutXAxisAnchor; // property
    translatesAutoresizingMaskIntoConstraints: boolean;
    setTranslatesAutoresizingMaskIntoConstraints(_: boolean) // property
    userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection;
    setUserInterfaceLayoutDirection(_: NSUserInterfaceLayoutDirection) // property
    isVerticalContentSizeConstraintActive: boolean;
    setVerticalContentSizeConstraintActive(_: boolean) // property
    visibleRect: CGRect; // property
    wantsDefaultClipping: boolean; // property
    wantsLayer: boolean;
    setWantsLayer(_: boolean) // property
    wantsRestingTouches: boolean;
    setWantsRestingTouches(_: boolean) // property
    wantsUpdateLayer: boolean; // property
    widthAdjustLimit: number; // property
    widthAnchor: NSLayoutDimension; // property
    window: NSWindow; // property
    static isCompatibleWithResponsiveScrolling: boolean; // property
    static defaultFocusRingType: NSFocusRingType; // property
    static defaultMenu: NSMenu; // property
    static focusView: NSView; // property
    static requiresConstraintBasedLayout: boolean; // property
    acceptsFirstMouse(for_?: NSEvent): boolean;
    addConstraint(_: NSLayoutConstraint): void;
    addConstraints(_: NSLayoutConstraint[]): void;
    addCursorRectCursor(_: CGRect, cursor: NSCursor): void;
    addGestureRecognizer(_: NSGestureRecognizer): void;
    addLayoutGuide(_: NSLayoutGuide): void;
    addSubview(_: NSView): void;
    addSubviewPositionedRelativeTo(_: NSView, positioned: NSWindow.OrderingMode, relativeTo?: NSView): void;
    addToolTipRectOwnerUserData(_: CGRect, owner: any, userData?: any): number;
    addTrackingArea(_: NSTrackingArea): void;
    addTrackingRectOwnerUserDataAssumeInside(_: CGRect, owner: any, userData?: any, assumeInside?: boolean): number;
    adjustPageHeightNewTopBottomLimit(_: number, top: number, bottom: number, limit: number): void;
    adjustPageWidthNewLeftRightLimit(_: number, left: number, right: number, limit: number): void;
    adjustScroll(_: CGRect): CGRect;
    alignmentRectForFrame(forFrame: CGRect): CGRect;
    ancestorSharedWithView(with_: NSView): NSView;
    autoscroll(with_: NSEvent): boolean;
    backingAlignedRectOptions(_: CGRect, options: AlignmentOptions): CGRect;
    beginDocument(): void;
    beginDraggingSessionWithItemsEventSource(with_: NSDraggingItem[], event: NSEvent, source: NSDraggingSource): NSDraggingSession;
    beginPageInRectAtPlacement(in_: CGRect, atPlacement: CGPoint): void;
    bitmapImageRepForCachingDisplayInRect(in_: CGRect): NSBitmapImageRep;
    cacheDisplayInRectToBitmapImageRep(in_: CGRect, to: NSBitmapImageRep): void;
    centerScanRect(_: CGRect): CGRect;
    constraintsAffectingLayoutForOrientation(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint[];
    contentCompressionResistancePriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    contentHuggingPriorityForOrientation(for_: NSLayoutConstraint.Orientation): number;
    convertPointFromView(_: CGPoint, from?: NSView): CGPoint;
    convertPointToView(_: CGPoint, to?: NSView): CGPoint;
    convertPointFromBacking(_: CGPoint): CGPoint;
    convertPointFromLayer(_: CGPoint): CGPoint;
    convertPointToBacking(_: CGPoint): CGPoint;
    convertPointToLayer(_: CGPoint): CGPoint;
    convertRectFromView(_: CGRect, from?: NSView): CGRect;
    convertRectToView(_: CGRect, to?: NSView): CGRect;
    convertRectFromBacking(_: CGRect): CGRect;
    convertRectFromLayer(_: CGRect): CGRect;
    convertRectToBacking(_: CGRect): CGRect;
    convertRectToLayer(_: CGRect): CGRect;
    convertSizeFromView(_: CGSize, from?: NSView): CGSize;
    convertSizeToView(_: CGSize, to?: NSView): CGSize;
    convertSizeFromBacking(_: CGSize): CGSize;
    convertSizeFromLayer(_: CGSize): CGSize;
    convertSizeToBacking(_: CGSize): CGSize;
    convertSizeToLayer(_: CGSize): CGSize;
    dataWithEPSInsideRect(inside: CGRect): NSData;
    dataWithPDFInsideRect(inside: CGRect): NSData;
    didAddSubview(_: NSView): void;
    didCloseMenuWithEvent(_: NSMenu, with_?: NSEvent): void;
    discardCursorRects(): void;
    display(): void;
    displayIfNeeded(): void;
    displayIfNeededIgnoringOpacity(): void;
    displayIfNeededInRect(_: CGRect): void;
    displayIfNeededInRectIgnoringOpacity(_: CGRect): void;
    displayRect(_: CGRect): void;
    displayRectIgnoringOpacity(_: CGRect): void;
    displayRectIgnoringOpacityInContext(_: CGRect, in_: NSGraphicsContext): void;
    drawFocusRingMask(): void;
    drawPageBorderWithSize(with_: CGSize): void;
    drawRect(_: CGRect): void;
    endDocument(): void;
    endPage(): void;
    enterFullScreenModeWithOptions(_: NSScreen, withOptions?: Map<string, any>): boolean;
    exerciseAmbiguityInLayout(): void;
    exitFullScreenModeWithOptions(options?: Map<string, any>): void;
    frameForAlignmentRect(forAlignmentRect: CGRect): CGRect;
    getRectsBeingDrawnCount(_?: NSRect, count?: number): void;
    getRectsExposedDuringLiveResizeCount(_: NSRect, count: number): void;
    hitTest(_: CGPoint): NSView;
    static createWithFrame(frame: CGRect): NSView;
    invalidateIntrinsicContentSize(): void;
    isDescendantOf(of: NSView): boolean;
    knowsPageRange(_: NSRange): boolean;
    layout(): void;
    layoutSubtreeIfNeeded(): void;
    locationOfPrintRect(_: CGRect): CGPoint;
    makeBackingLayer(): CALayer;
    menuForEvent(for_: NSEvent): NSMenu;
    mouseInRect(_: CGPoint, in_: CGRect): boolean;
    needsToDrawRect(_: CGRect): boolean;
    noteFocusRingMaskChanged(): void;
    prepareContentInRect(in_: CGRect): void;
    prepareForReuse(): void;
    print(_?: any): void;
    rectForPage(_: number): CGRect;
    rectForSmartMagnificationAtPointInRect(at: CGPoint, in_: CGRect): CGRect;
    reflectScrolledClipView(_: NSClipView): void;
    registerForDraggedTypes(_: string[]): void;
    removeAllToolTips(): void;
    removeConstraint(_: NSLayoutConstraint): void;
    removeConstraints(_: NSLayoutConstraint[]): void;
    removeCursorRectCursor(_: CGRect, cursor: NSCursor): void;
    removeFromSuperview(): void;
    removeFromSuperviewWithoutNeedingDisplay(): void;
    removeGestureRecognizer(_: NSGestureRecognizer): void;
    removeLayoutGuide(_: NSLayoutGuide): void;
    removeToolTip(_: number): void;
    removeTrackingArea(_: NSTrackingArea): void;
    removeTrackingRect(_: number): void;
    replaceSubviewWith(_: NSView, with_: NSView): void;
    resetCursorRects(): void;
    resizeSubviewsWithOldSize(withOldSize: CGSize): void;
    resizeWithOldSuperviewSize(withOldSuperviewSize: CGSize): void;
    rotateByAngle(byDegrees: number): void;
    rulerViewDidAddMarker(_: NSRulerView, didAdd: NSRulerMarker): void;
    rulerViewDidMoveMarker(_: NSRulerView, didMove: NSRulerMarker): void;
    rulerViewDidRemoveMarker(_: NSRulerView, didRemove: NSRulerMarker): void;
    rulerViewHandleMouseDown(_: NSRulerView, handleMouseDownWith: NSEvent): void;
    rulerViewLocationForPoint(_: NSRulerView, locationFor: CGPoint): number;
    rulerViewPointForLocation(_: NSRulerView, pointForLocation: number): CGPoint;
    rulerViewShouldAddMarker(_: NSRulerView, shouldAdd: NSRulerMarker): boolean;
    rulerViewShouldMoveMarker(_: NSRulerView, shouldMove: NSRulerMarker): boolean;
    rulerViewShouldRemoveMarker(_: NSRulerView, shouldRemove: NSRulerMarker): boolean;
    rulerViewWillAddMarkerAtLocation(_: NSRulerView, willAdd: NSRulerMarker, atLocation: number): number;
    rulerViewWillMoveMarkerToLocation(_: NSRulerView, willMove: NSRulerMarker, toLocation: number): number;
    rulerViewWillSetClientView(_: NSRulerView, willSetClientView: NSView): void;
    scaleUnitSquareToSize(to: CGSize): void;
    scrollClipViewToPoint(_: NSClipView, to: CGPoint): void;
    scrollPoint(_: CGPoint): void;
    scrollRectToVisible(_: CGRect): boolean;
    setBoundsOrigin(_: CGPoint): void;
    setBoundsSize(_: CGSize): void;
    setContentCompressionResistancePriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    setContentHuggingPriorityForOrientation(_: number, for_: NSLayoutConstraint.Orientation): void;
    setFrameOrigin(_: CGPoint): void;
    setFrameSize(_: CGSize): void;
    setKeyboardFocusRingNeedsDisplayInRect(_: CGRect): void;
    setNeedsDisplayInRect(_: CGRect): void;
    shouldDelayWindowOrderingForEvent(for_: NSEvent): boolean;
    showDefinitionForAttributedStringAtPoint(for_?: NSAttributedString, at?: CGPoint): void;
    showDefinitionForRangeOptionsBaselineOriginProvider(for_?: NSAttributedString, range?: NSRange, options?: Map<string, any>, baselineOriginProvider?: (p1: NSRange) => CGPoint): void;
    sortSubviewsContext(_?: (p1: NSView, p2: NSView, p3: any) => ComparisonResult, context?: any): void;
    translateOriginToPoint(to: CGPoint): void;
    translateRectsNeedingDisplayInRectBy(in_: CGRect, by: CGSize): void;
    unregisterDraggedTypes(): void;
    updateConstraints(): void;
    updateConstraintsForSubtreeIfNeeded(): void;
    updateLayer(): void;
    updateTrackingAreas(): void;
    viewDidChangeBackingProperties(): void;
    viewDidChangeEffectiveAppearance(): void;
    viewDidEndLiveResize(): void;
    viewDidHide(): void;
    viewDidMoveToSuperview(): void;
    viewDidMoveToWindow(): void;
    viewDidUnhide(): void;
    viewWillDraw(): void;
    viewWillMoveToSuperview(toSuperview?: NSView): void;
    viewWillMoveToWindow(toWindow?: NSWindow): void;
    viewWillStartLiveResize(): void;
    viewWithTag(_: number): NSView;
    willOpenMenuWithEvent(_: NSMenu, with_: NSEvent): void;
    willRemoveSubview(_: NSView): void;
    writeEPSInsideRectToPasteboard(inside: CGRect, to: NSPasteboard): void;
    writePDFInsideRectToPasteboard(inside: CGRect, to: NSPasteboard): void;
  }

  // interface
  class NSViewAnimation extends NSAnimation {
    viewAnimations: Map<string, any>[];
    setViewAnimations(_: Map<string, any>[]) // property
    static createWithViewAnimations(viewAnimations: Map<string, any>[]): NSViewAnimation;
  }

  // interface
  class NSViewController extends NSResponder /* implements NSEditor, NSSeguePerforming, NSUserInterfaceItemIdentification, NSExtensionRequestHandling */ {
    childViewControllers: NSViewController[];
    setChildViewControllers(_: NSViewController[]) // property
    extensionContext: NSExtensionContext; // property
    nibBundle: Bundle; // property
    nibName: string; // property
    parentViewController: NSViewController; // property
    preferredContentSize: CGSize;
    setPreferredContentSize(_: CGSize) // property
    preferredMaximumSize: CGSize; // property
    preferredMinimumSize: CGSize; // property
    preferredScreenOrigin: CGPoint;
    setPreferredScreenOrigin(_: CGPoint) // property
    presentedViewControllers: NSViewController[]; // property
    presentingViewController: NSViewController; // property
    representedObject: any;
    setRepresentedObject(_: any) // property
    sourceItemView: NSView;
    setSourceItemView(_: NSView) // property
    storyboard: NSStoryboard; // property
    title: string;
    setTitle(_: string) // property
    view: NSView;
    setView(_: NSView) // property
    isViewLoaded: boolean; // property
    addChildViewController(_: NSViewController): void;
    dismissController(_?: any): void;
    dismissViewController(_: NSViewController): void;
    static createWithNibNameBundle(nibName?: string, bundle?: Bundle): NSViewController;
    insertChildViewControllerAtIndex(_: NSViewController, at: number): void;
    loadView(): void;
    preferredContentSizeDidChangeForViewController(for_: NSViewController): void;
    presentViewControllerAnimator(_: NSViewController, animator: NSViewControllerPresentationAnimator): void;
    presentViewControllerAsPopoverRelativeToRectOfViewPreferredEdgeBehavior(_: NSViewController, asPopoverRelativeTo: CGRect, of: NSView, preferredEdge: NSRectEdge, behavior: NSPopover.Behavior): void;
    presentViewControllerAsModalWindow(_: NSViewController): void;
    presentViewControllerAsSheet(_: NSViewController): void;
    removeChildViewControllerAtIndex(at: number): void;
    removeFromParentViewController(): void;
    transitionWithFromToOptionsCompletionHandler(from: NSViewController, to: NSViewController, options: NSViewController.TransitionOptions, completionHandler?: () => void): void;
    updateViewConstraints(): void;
    viewDidAppear(): void;
    viewDidDisappear(): void;
    viewDidLayout(): void;
    viewDidLoad(): void;
    viewWillAppear(): void;
    viewWillDisappear(): void;
    viewWillLayout(): void;
    viewWillTransitionToSize(to: CGSize): void;
  }

  interface NSViewControllerPresentationAnimator extends NSObject {
    // instance method
    animateDismissalOfViewControllerFromViewController(of: NSViewController, from: NSViewController): void;
    // instance method
    animatePresentationOfViewControllerFromViewController(of: NSViewController, from: NSViewController): void;
  }

  interface NSViewLayerContentScaleDelegate extends NSObject {
    // instance method
    layerShouldInheritContentsScaleFromWindow?(_: CALayer, shouldInheritContentsScale: number, from: NSWindow): boolean;
  }

  interface NSViewToolTipOwner extends NSObject {
    // instance method
    viewStringForToolTipPointUserData(_: NSView, stringForToolTip: number, point: CGPoint, userData?: any): string;
  }

  // interface
  class NSVisualEffectView extends NSView {
    blendingMode: NSVisualEffectView.BlendingMode;
    setBlendingMode(_: NSVisualEffectView.BlendingMode) // property
    isEmphasized: boolean;
    setEmphasized(_: boolean) // property
    interiorBackgroundStyle: NSView.BackgroundStyle; // property
    maskImage: NSImage;
    setMaskImage(_: NSImage) // property
    material: NSVisualEffectView.Material;
    setMaterial(_: NSVisualEffectView.Material) // property
    state: NSVisualEffectView.State;
    setState(_: NSVisualEffectView.State) // property
  }

  // interface
  class NSWindow extends NSResponder /* implements NSAccessibility, NSAccessibilityElement, NSAnimatablePropertyContainer, NSAppearanceCustomization, NSMenuItemValidation, NSUserInterfaceItemIdentification, NSUserInterfaceValidations */ {
    static contentRectForFrameRectStyleMask(forFrameRect: CGRect, styleMask: NSWindow.StyleMask): CGRect;
    static frameRectForContentRectStyleMask(forContentRect: CGRect, styleMask: NSWindow.StyleMask): CGRect;
    static minFrameWidthWithTitleStyleMask(withTitle: string, styleMask: NSWindow.StyleMask): number;
    static removeFrameUsingName(usingName: string): void;
    static standardWindowButtonForStyleMask(_: NSWindow.ButtonType, for_: NSWindow.StyleMask): NSButton;
    static windowNumberAtPointBelowWindowWithWindowNumber(at: CGPoint, belowWindowWithWindowNumber: number): number;
    static windowNumbersWithOptions(options: NSWindow.NumberListOptions): number[];
    acceptsMouseMovedEvents: boolean;
    setAcceptsMouseMovedEvents(_: boolean) // property
    allowsConcurrentViewDrawing: boolean;
    setAllowsConcurrentViewDrawing(_: boolean) // property
    allowsToolTipsWhenApplicationIsInactive: boolean;
    setAllowsToolTipsWhenApplicationIsInactive(_: boolean) // property
    alphaValue: number;
    setAlphaValue(_: number) // property
    animationBehavior: NSWindow.AnimationBehavior;
    setAnimationBehavior(_: NSWindow.AnimationBehavior) // property
    appearanceSource: NSObject;
    setAppearanceSource(_: NSObject) // property
    areCursorRectsEnabled: boolean; // property
    aspectRatio: CGSize;
    setAspectRatio(_: CGSize) // property
    attachedSheet: NSWindow; // property
    autorecalculatesKeyViewLoop: boolean;
    setAutorecalculatesKeyViewLoop(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    backingScaleFactor: number; // property
    backingType: NSWindow.BackingStoreType;
    setBackingType(_: NSWindow.BackingStoreType) // property
    canBecomeKeyWindow: boolean; // property
    canBecomeMainWindow: boolean; // property
    canBecomeVisibleWithoutLogin: boolean;
    setCanBecomeVisibleWithoutLogin(_: boolean) // property
    canHide: boolean;
    setCanHide(_: boolean) // property
    childWindows: NSWindow[]; // property
    collectionBehavior: NSWindow.CollectionBehavior;
    setCollectionBehavior(_: NSWindow.CollectionBehavior) // property
    colorSpace: NSColorSpace;
    setColorSpace(_: NSColorSpace) // property
    contentAspectRatio: CGSize;
    setContentAspectRatio(_: CGSize) // property
    contentLayoutGuide: any; // property
    contentLayoutRect: CGRect; // property
    contentMaxSize: CGSize;
    setContentMaxSize(_: CGSize) // property
    contentMinSize: CGSize;
    setContentMinSize(_: CGSize) // property
    contentResizeIncrements: CGSize;
    setContentResizeIncrements(_: CGSize) // property
    contentView: NSView;
    setContentView(_: NSView) // property
    contentViewController: NSViewController;
    setContentViewController(_: NSViewController) // property
    currentEvent: NSEvent; // property
    deepestScreen: NSScreen; // property
    defaultButtonCell: NSButtonCell;
    setDefaultButtonCell(_: NSButtonCell) // property
    delegate: NSWindowDelegate;
    setDelegate(_: NSWindowDelegate) // property
    depthLimit: NSWindow.Depth;
    setDepthLimit(_: NSWindow.Depth) // property
    deviceDescription: Map<string, any>; // property
    displaysWhenScreenProfileChanges: boolean;
    setDisplaysWhenScreenProfileChanges(_: boolean) // property
    dockTile: NSDockTile; // property
    isDocumentEdited: boolean;
    setDocumentEdited(_: boolean) // property
    isExcludedFromWindowsMenu: boolean;
    setExcludedFromWindowsMenu(_: boolean) // property
    firstResponder: NSResponder; // property
    isFloatingPanel: boolean; // property
    frame: CGRect; // property
    frameAutosaveName: string; // property
    hasCloseBox: boolean; // property
    hasDynamicDepthLimit: boolean; // property
    hasShadow: boolean;
    setHasShadow(_: boolean) // property
    hasTitleBar: boolean; // property
    hidesOnDeactivate: boolean;
    setHidesOnDeactivate(_: boolean) // property
    ignoresMouseEvents: boolean;
    setIgnoresMouseEvents(_: boolean) // property
    inLiveResize: boolean; // property
    initialFirstResponder: NSView;
    setInitialFirstResponder(_: NSView) // property
    keyViewSelectionDirection: NSWindow.SelectionDirection; // property
    isKeyWindow: boolean; // property
    level: number;
    setLevel(_: number) // property
    isMainWindow: boolean; // property
    maxFullScreenContentSize: CGSize;
    setMaxFullScreenContentSize(_: CGSize) // property
    maxSize: CGSize;
    setMaxSize(_: CGSize) // property
    minFullScreenContentSize: CGSize;
    setMinFullScreenContentSize(_: CGSize) // property
    minSize: CGSize;
    setMinSize(_: CGSize) // property
    isMiniaturizable: boolean; // property
    isMiniaturized: boolean; // property
    miniwindowImage: NSImage;
    setMiniwindowImage(_: NSImage) // property
    miniwindowTitle: string;
    setMiniwindowTitle(_: string) // property
    isModalPanel: boolean; // property
    mouseLocationOutsideOfEventStream: CGPoint; // property
    isMovable: boolean;
    setMovable(_: boolean) // property
    isMovableByWindowBackground: boolean;
    setMovableByWindowBackground(_: boolean) // property
    occlusionState: NSWindow.OcclusionState; // property
    isOnActiveSpace: boolean; // property
    isOpaque: boolean;
    setOpaque(_: boolean) // property
    orderedIndex: number;
    setOrderedIndex(_: number) // property
    parentWindow: NSWindow;
    setParentWindow(_: NSWindow) // property
    preservesContentDuringLiveResize: boolean;
    setPreservesContentDuringLiveResize(_: boolean) // property
    preventsApplicationTerminationWhenModal: boolean;
    setPreventsApplicationTerminationWhenModal(_: boolean) // property
    isReleasedWhenClosed: boolean;
    setReleasedWhenClosed(_: boolean) // property
    representedFilename: string;
    setRepresentedFilename(_: string) // property
    representedURL: NSURL;
    setRepresentedURL(_: NSURL) // property
    isResizable: boolean; // property
    resizeFlags: NSEvent.ModifierFlags; // property
    resizeIncrements: CGSize;
    setResizeIncrements(_: CGSize) // property
    isRestorable: boolean;
    setRestorable(_: boolean) // property
    restorationClass: typeof NSObject;
    setRestorationClass(_: typeof NSObject) // property
    screen: NSScreen; // property
    sharingType: NSWindow.SharingType;
    setSharingType(_: NSWindow.SharingType) // property
    isSheet: boolean; // property
    sheetParent: NSWindow; // property
    sheets: NSWindow[]; // property
    showsResizeIndicator: boolean;
    setShowsResizeIndicator(_: boolean) // property
    showsToolbarButton: boolean;
    setShowsToolbarButton(_: boolean) // property
    stringWithSavedFrame: string; // property
    styleMask: NSWindow.StyleMask;
    setStyleMask(_: NSWindow.StyleMask) // property
    tab: NSWindowTab; // property
    tabGroup: NSWindowTabGroup; // property
    tabbedWindows: NSWindow[]; // property
    tabbingIdentifier: string;
    setTabbingIdentifier(_: string) // property
    tabbingMode: NSWindow.TabbingMode;
    setTabbingMode(_: NSWindow.TabbingMode) // property
    title: string;
    setTitle(_: string) // property
    titleVisibility: NSWindow.TitleVisibility;
    setTitleVisibility(_: NSWindow.TitleVisibility) // property
    titlebarAccessoryViewControllers: NSTitlebarAccessoryViewController[];
    setTitlebarAccessoryViewControllers(_: NSTitlebarAccessoryViewController[]) // property
    titlebarAppearsTransparent: boolean;
    setTitlebarAppearsTransparent(_: boolean) // property
    toolbar: NSToolbar;
    setToolbar(_: NSToolbar) // property
    viewsNeedDisplay: boolean;
    setViewsNeedDisplay(_: boolean) // property
    isVisible: boolean; // property
    windowController: NSWindowController;
    setWindowController(_: NSWindowController) // property
    windowNumber: number; // property
    windowRef: any; // property
    windowTitlebarLayoutDirection: NSUserInterfaceLayoutDirection; // property
    worksWhenModal: boolean; // property
    isZoomable: boolean; // property
    isZoomed: boolean; // property
    static allowsAutomaticWindowTabbing: boolean;
    setAllowsAutomaticWindowTabbing(_: boolean) // property
    static defaultDepthLimit: NSWindow.Depth; // property
    static userTabbingPreference: NSWindow.UserTabbingPreference; // property
    addChildWindowOrdered(_: NSWindow, ordered: NSWindow.OrderingMode): void;
    addTabbedWindowOrdered(_: NSWindow, ordered: NSWindow.OrderingMode): void;
    addTitlebarAccessoryViewController(_: NSTitlebarAccessoryViewController): void;
    anchorAttributeForOrientation(for_: NSLayoutConstraint.Orientation): NSLayoutConstraint.Attribute;
    animationResizeTime(_: CGRect): number;
    autorecalculatesContentBorderThicknessForEdge(for_: NSRectEdge): boolean;
    backingAlignedRectOptions(_: CGRect, options: AlignmentOptions): CGRect;
    becomeKeyWindow(): void;
    becomeMainWindow(): void;
    beginCriticalSheetWithCompletionHandler(_: NSWindow, completionHandler?: (p1: number) => void): void;
    beginSheetWithCompletionHandler(_: NSWindow, completionHandler?: (p1: number) => void): void;
    canRepresentDisplayGamut(_: NSDisplayGamut): boolean;
    cascadeTopLeftFromPoint(from: CGPoint): CGPoint;
    center(): void;
    close(): void;
    constrainFrameRectToScreen(_: CGRect, to?: NSScreen): CGRect;
    contentBorderThicknessForEdge(for_: NSRectEdge): number;
    contentRectForFrameRect(forFrameRect: CGRect): CGRect;
    convertPointFromBacking(_: CGPoint): CGPoint;
    convertPointFromScreen(fromScreen: CGPoint): CGPoint;
    convertPointToBacking(_: CGPoint): CGPoint;
    convertPointToScreen(toScreen: CGPoint): CGPoint;
    convertRectFromBacking(_: CGRect): CGRect;
    convertRectFromScreen(_: CGRect): CGRect;
    convertRectToBacking(_: CGRect): CGRect;
    convertRectToScreen(_: CGRect): CGRect;
    dataWithEPSInsideRect(inside: CGRect): NSData;
    dataWithPDFInsideRect(inside: CGRect): NSData;
    deminiaturize(_?: any): void;
    disableCursorRects(): void;
    disableKeyEquivalentForDefaultButtonCell(): void;
    disableScreenUpdatesUntilFlush(): void;
    disableSnapshotRestoration(): void;
    discardCursorRects(): void;
    discardEventsMatchingMaskBeforeEvent(matching: NSEvent.EventTypeMask, before?: NSEvent): void;
    display(): void;
    displayIfNeeded(): void;
    dragImageAtOffsetEventPasteboardSourceSlideBack(_: NSImage, at: CGPoint, offset: CGSize, event: NSEvent, pasteboard: NSPasteboard, source: any, slideBack: boolean): void;
    enableCursorRects(): void;
    enableKeyEquivalentForDefaultButtonCell(): void;
    enableSnapshotRestoration(): void;
    endEditingFor(for_?: any): void;
    endSheet(_: NSWindow): void;
    endSheetReturnCode(_: NSWindow, returnCode: number): void;
    fieldEditorForObject(_: boolean, for_?: any): NSText;
    frameRectForContentRect(forContentRect: CGRect): CGRect;
    handleCloseScriptCommand(_: NSCloseCommand): any;
    handlePrintScriptCommand(_: NSScriptCommand): any;
    handleSaveScriptCommand(_: NSScriptCommand): any;
    static createWithContentRectStyleMaskBackingDefer(contentRect: CGRect, styleMask: NSWindow.StyleMask, backing: NSWindow.BackingStoreType, defer: boolean): NSWindow;
    static createWithContentRectStyleMaskBackingDeferScreen(contentRect: CGRect, styleMask: NSWindow.StyleMask, backing: NSWindow.BackingStoreType, defer: boolean, screen?: NSScreen): NSWindow;
    static createWithWindowRef(windowRef: any): NSWindow;
    insertTitlebarAccessoryViewControllerAtIndex(_: NSTitlebarAccessoryViewController, at: number): void;
    invalidateCursorRectsForView(for_: NSView): void;
    invalidateShadow(): void;
    layoutIfNeeded(): void;
    makeFirstResponder(_?: NSResponder): boolean;
    makeKeyAndOrderFront(_?: any): void;
    makeKeyWindow(): void;
    makeMainWindow(): void;
    mergeAllWindows(_?: any): void;
    miniaturize(_?: any): void;
    moveTabToNewWindow(_?: any): void;
    nextEventMatchingMask(matching: NSEvent.EventTypeMask): NSEvent;
    nextEventMatchingMaskUntilDateInModeDequeue(matching: NSEvent.EventTypeMask, until?: Date, inMode?: string, dequeue?: boolean): NSEvent;
    orderBack(_?: any): void;
    orderFront(_?: any): void;
    orderFrontRegardless(): void;
    orderOut(_?: any): void;
    orderWindowRelativeTo(_: NSWindow.OrderingMode, relativeTo: number): void;
    performClose(_?: any): void;
    performMiniaturize(_?: any): void;
    performWindowDragWithEvent(with_: NSEvent): void;
    performZoom(_?: any): void;
    postEventAtStart(_: NSEvent, atStart: boolean): void;
    print(_?: any): void;
    recalculateKeyViewLoop(): void;
    registerForDraggedTypes(_: string[]): void;
    removeChildWindow(_: NSWindow): void;
    removeTitlebarAccessoryViewControllerAtIndex(at: number): void;
    resetCursorRects(): void;
    resignKeyWindow(): void;
    resignMainWindow(): void;
    runToolbarCustomizationPalette(_?: any): void;
    saveFrameUsingName(usingName: string): void;
    selectKeyViewFollowingView(following: NSView): void;
    selectKeyViewPrecedingView(preceding: NSView): void;
    selectNextKeyView(_?: any): void;
    selectNextTab(_?: any): void;
    selectPreviousKeyView(_?: any): void;
    selectPreviousTab(_?: any): void;
    sendEvent(_: NSEvent): void;
    setAnchorAttributeForOrientation(_: NSLayoutConstraint.Attribute, for_: NSLayoutConstraint.Orientation): void;
    setAutorecalculatesContentBorderThicknessForEdge(_: boolean, for_: NSRectEdge): void;
    setContentBorderThicknessForEdge(_: number, for_: NSRectEdge): void;
    setContentSize(_: CGSize): void;
    setDynamicDepthLimit(_: boolean): void;
    setFrameDisplay(_: CGRect, display: boolean): void;
    setFrameDisplayAnimate(_: CGRect, display: boolean, animate: boolean): void;
    setFrameAutosaveName(_: string): boolean;
    setFrameFromString(from: string): void;
    setFrameOrigin(_: CGPoint): void;
    setFrameTopLeftPoint(_: CGPoint): void;
    setFrameUsingName(_: string): boolean;
    setFrameUsingNameForce(_: string, force: boolean): boolean;
    setIsMiniaturized(_: boolean): void;
    setIsVisible(_: boolean): void;
    setIsZoomed(_: boolean): void;
    setTitleWithRepresentedFilename(_: string): void;
    standardWindowButton(_: NSWindow.ButtonType): NSButton;
    toggleFullScreen(_?: any): void;
    toggleTabBar(_?: any): void;
    toggleTabOverview(_?: any): void;
    toggleToolbarShown(_?: any): void;
    trackEventsWithMatchingTimeoutModeHandler(matching: NSEvent.EventTypeMask, timeout: number, mode: string, handler?: (p1: NSEvent, p2: boolean) => void): void;
    unregisterDraggedTypes(): void;
    update(): void;
    updateConstraintsIfNeeded(): void;
    visualizeConstraints(_?: NSLayoutConstraint[]): void;
    zoom(_?: any): void;
  }

  // interface
  class NSWindowController extends NSResponder /* implements NSSeguePerforming */ {
    contentViewController: NSViewController;
    setContentViewController(_: NSViewController) // property
    document: any;
    setDocument(_: any) // property
    owner: any; // property
    shouldCascadeWindows: boolean;
    setShouldCascadeWindows(_: boolean) // property
    shouldCloseDocument: boolean;
    setShouldCloseDocument(_: boolean) // property
    storyboard: NSStoryboard; // property
    window: NSWindow;
    setWindow(_: NSWindow) // property
    windowFrameAutosaveName: string;
    setWindowFrameAutosaveName(_: string) // property
    isWindowLoaded: boolean; // property
    windowNibName: string; // property
    windowNibPath: string; // property
    close(): void;
    dismissController(_?: any): void;
    static createWithWindow(window?: NSWindow): NSWindowController;
    static createWithWindowNibName(windowNibName: string): NSWindowController;
    static createWithWindowNibNameOwner(windowNibName: string, owner: any): NSWindowController;
    static createWithWindowNibPathOwner(windowNibPath: string, owner: any): NSWindowController;
    loadWindow(): void;
    setDocumentEdited(_: boolean): void;
    showWindow(_?: any): void;
    synchronizeWindowTitleWithDocumentName(): void;
    windowDidLoad(): void;
    windowTitleForDocumentDisplayName(forDocumentDisplayName: string): string;
    windowWillLoad(): void;
  }

  interface NSWindowDelegate extends NSObject {
    // instance method
    customWindowsToEnterFullScreenForWindow?(for_: NSWindow): NSWindow[];
    // instance method
    customWindowsToEnterFullScreenForWindowOnScreen?(for_: NSWindow, on: NSScreen): NSWindow[];
    // instance method
    customWindowsToExitFullScreenForWindow?(for_: NSWindow): NSWindow[];
    // instance method
    windowWillPositionSheetUsingRect?(_: NSWindow, willPositionSheet: NSWindow, using: CGRect): CGRect;
    // instance method
    windowShouldDragDocumentWithEventFromWithPasteboard?(_: NSWindow, shouldDragDocumentWith: NSEvent, from: CGPoint, with_: NSPasteboard): boolean;
    // instance method
    windowStartCustomAnimationToEnterFullScreenOnScreenWithDuration?(_: NSWindow, startCustomAnimationToEnterFullScreenOn: NSScreen, withDuration: number): void;
    // instance method
    windowDidDecodeRestorableState?(_: NSWindow, didDecodeRestorableState: NSCoder): void;
    // instance method
    windowShouldPopUpDocumentPathMenu?(_: NSWindow, shouldPopUpDocumentPathMenu: NSMenu): boolean;
    // instance method
    windowStartCustomAnimationToEnterFullScreenWithDuration?(_: NSWindow, startCustomAnimationToEnterFullScreenWithDuration: number): void;
    // instance method
    windowStartCustomAnimationToExitFullScreenWithDuration?(_: NSWindow, startCustomAnimationToExitFullScreenWithDuration: number): void;
    // instance method
    windowWillEncodeRestorableState?(_: NSWindow, willEncodeRestorableState: NSCoder): void;
    // instance method
    windowWillResizeForVersionBrowserWithMaxPreferredSizeMaxAllowedSize?(_: NSWindow, willResizeForVersionBrowserWithMaxPreferredSize: CGSize, maxAllowedSize: CGSize): CGSize;
    // instance method
    windowWillUseFullScreenContentSize?(_: NSWindow, willUseFullScreenContentSize: CGSize): CGSize;
    // instance method
    windowWillUseFullScreenPresentationOptions?(_: NSWindow, willUseFullScreenPresentationOptions: NSApplication.PresentationOptions): NSApplication.PresentationOptions;
    // instance method
    windowDidBecomeKey?(_: NSNotification): void;
    // instance method
    windowDidBecomeMain?(_: NSNotification): void;
    // instance method
    windowDidChangeBackingProperties?(_: NSNotification): void;
    // instance method
    windowDidChangeOcclusionState?(_: NSNotification): void;
    // instance method
    windowDidChangeScreen?(_: NSNotification): void;
    // instance method
    windowDidChangeScreenProfile?(_: NSNotification): void;
    // instance method
    windowDidDeminiaturize?(_: NSNotification): void;
    // instance method
    windowDidEndLiveResize?(_: NSNotification): void;
    // instance method
    windowDidEndSheet?(_: NSNotification): void;
    // instance method
    windowDidEnterFullScreen?(_: NSNotification): void;
    // instance method
    windowDidEnterVersionBrowser?(_: NSNotification): void;
    // instance method
    windowDidExitFullScreen?(_: NSNotification): void;
    // instance method
    windowDidExitVersionBrowser?(_: NSNotification): void;
    // instance method
    windowDidExpose?(_: NSNotification): void;
    // instance method
    windowDidFailToEnterFullScreen?(_: NSWindow): void;
    // instance method
    windowDidFailToExitFullScreen?(_: NSWindow): void;
    // instance method
    windowDidMiniaturize?(_: NSNotification): void;
    // instance method
    windowDidMove?(_: NSNotification): void;
    // instance method
    windowDidResignKey?(_: NSNotification): void;
    // instance method
    windowDidResignMain?(_: NSNotification): void;
    // instance method
    windowDidResize?(_: NSNotification): void;
    // instance method
    windowDidUpdate?(_: NSNotification): void;
    // instance method
    windowShouldClose?(_: NSWindow): boolean;
    // instance method
    windowShouldZoomToFrame?(_: NSWindow, toFrame: CGRect): boolean;
    // instance method
    windowWillBeginSheet?(_: NSNotification): void;
    // instance method
    windowWillClose?(_: NSNotification): void;
    // instance method
    windowWillEnterFullScreen?(_: NSNotification): void;
    // instance method
    windowWillEnterVersionBrowser?(_: NSNotification): void;
    // instance method
    windowWillExitFullScreen?(_: NSNotification): void;
    // instance method
    windowWillExitVersionBrowser?(_: NSNotification): void;
    // instance method
    windowWillMiniaturize?(_: NSNotification): void;
    // instance method
    windowWillMove?(_: NSNotification): void;
    // instance method
    windowWillResizeToSize?(_: NSWindow, to: CGSize): CGSize;
    // instance method
    windowWillReturnFieldEditorToObject?(_: NSWindow, to?: any): any;
    // instance method
    windowWillReturnUndoManager?(_: NSWindow): UndoManager;
    // instance method
    windowWillStartLiveResize?(_: NSNotification): void;
    // instance method
    windowWillUseStandardFrameDefaultFrame?(_: NSWindow, defaultFrame: CGRect): CGRect;
  }

  interface NSWindowRestoration extends NSObject {
  }

  // interface
  class NSWindowTab extends NSObject {
    accessoryView: NSView;
    setAccessoryView(_: NSView) // property
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString) // property
    title: string;
    setTitle(_: string) // property
    toolTip: string;
    setToolTip(_: string) // property
  }

  // interface
  class NSWindowTabGroup extends NSObject {
    identifier: string; // property
    isOverviewVisible: boolean;
    setOverviewVisible(_: boolean) // property
    selectedWindow: NSWindow;
    setSelectedWindow(_: NSWindow) // property
    isTabBarVisible: boolean; // property
    windows: NSWindow[]; // property
    addWindow(_: NSWindow): void;
    insertWindowAtIndex(_: NSWindow, at: number): void;
    removeWindow(_: NSWindow): void;
  }

  // interface
  class NSWorkspace extends NSObject {
    accessibilityDisplayShouldDifferentiateWithoutColor: boolean; // property
    accessibilityDisplayShouldIncreaseContrast: boolean; // property
    accessibilityDisplayShouldInvertColors: boolean; // property
    accessibilityDisplayShouldReduceMotion: boolean; // property
    accessibilityDisplayShouldReduceTransparency: boolean; // property
    fileLabelColors: NSColor[]; // property
    fileLabels: string[]; // property
    frontmostApplication: NSRunningApplication; // property
    menuBarOwningApplication: NSRunningApplication; // property
    notificationCenter: NotificationCenter; // property
    runningApplications: NSRunningApplication[]; // property
    isSwitchControlEnabled: boolean; // property
    isVoiceOverEnabled: boolean; // property
    static sharedWorkspace: NSWorkspace; // property
    URLForApplicationToOpenURL(toOpen: NSURL): NSURL;
    URLForApplicationWithBundleIdentifier(withBundleIdentifier: string): NSURL;
    activateFileViewerSelectingURLs(_: NSURL[]): void;
    desktopImageOptionsForScreen(for_: NSScreen): Map<string, any>;
    desktopImageURLForScreen(for_: NSScreen): NSURL;
    duplicateCompletionHandler(_: NSURL[], completionHandler?: (p1: Map<NSURL, NSURL>, p2: NSError) => void): void;
    extendPowerOffBy(by: number): number;
    filenameExtensionIsValidForType(_: string, isValidForType: string): boolean;
    getFileSystemInfoForPathIsRemovableIsWritableIsUnmountableDescriptionType(forPath: string, isRemovable?: boolean, isWritable?: boolean, isUnmountable?: boolean, description?: string, type?: string): boolean;
    getInfoForFileApplicationType(_: string, application?: string, type?: string): boolean;
    hideOtherApplications(): void;
    iconForFile(forFile: string): NSImage;
    iconForFileType(forFileType: string): NSImage;
    iconForFiles(forFiles: string[]): NSImage;
    isFilePackageAtPath(atPath: string): boolean;
    launchApplicationAtURLOptionsConfigurationError(options: NSURL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
    localizedDescriptionForType(forType: string): string;
    noteFileSystemChanged(_: string): void;
    openApplicationWithAtConfigurationCompletionHandler(at: NSURL, configuration: OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: NSError) => void): void;
    openURL(_: NSURL): boolean;
    openConfigurationCompletionHandler(_: NSURL, configuration: OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: NSError) => void): void;
    openURLOptionsConfigurationError(options: NSURL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
    openWithApplicationAtConfigurationCompletionHandler(_: NSURL[], withApplicationAt: NSURL, configuration: OpenConfiguration, completionHandler?: (p1: NSRunningApplication, p2: NSError) => void): void;
    openURLsWithApplicationAtURLOptionsConfigurationError(withApplicationAtURL: NSURL[], options: NSURL, configuration: NSWorkspace.LaunchOptions, error: Map<string, any>): NSRunningApplication;
    preferredFilenameExtensionForType(forType: string): string;
    recycleCompletionHandler(_: NSURL[], completionHandler?: (p1: Map<NSURL, NSURL>, p2: NSError) => void): void;
    requestAuthorizationWithToCompletionHandler(to: NSWorkspace.AuthorizationType, completionHandler?: (p1: Authorization, p2: NSError) => void): void;
    selectFileInFileViewerRootedAtPath(_?: string, inFileViewerRootedAtPath?: string): boolean;
    setDesktopImageURLForScreenOptionsError(forScreen: NSURL, options: NSScreen, error: Map<string, any>): boolean;
    setIconForFileOptions(_?: NSImage, forFile?: string, options?: NSWorkspace.IconCreationOptions): boolean;
    showSearchResultsForQueryString(forQueryString: string): boolean;
    typeConformsToType(_: string, conformsToType: string): boolean;
    typeOfFileError(error: string): string;
    unmountAndEjectDeviceAtPath(atPath: string): boolean;
    unmountAndEjectDeviceAtURLError(error: NSURL): boolean;
  }

  // interface
  class Authorization extends NSObject {
  }

  // interface
  class OpenConfiguration extends NSObject /* implements NSCopying */ {
    static configuration(): OpenConfiguration;
    activates: boolean;
    setActivates(_: boolean) // property
    addsToRecentItems: boolean;
    setAddsToRecentItems(_: boolean) // property
    allowsRunningApplicationSubstitution: boolean;
    setAllowsRunningApplicationSubstitution(_: boolean) // property
    appleEvent: NSAppleEventDescriptor;
    setAppleEvent(_: NSAppleEventDescriptor) // property
    architecture: number;
    setArchitecture(_: number) // property
    arguments: string[];
    setArguments(_: string[]) // property
    createsNewApplicationInstance: boolean;
    setCreatesNewApplicationInstance(_: boolean) // property
    environment: Map<string, string>;
    setEnvironment(_: Map<string, string>) // property
    isForPrinting: boolean;
    setForPrinting(_: boolean) // property
    hides: boolean;
    setHides(_: boolean) // property
    hidesOthers: boolean;
    setHidesOthers(_: boolean) // property
    promptsUserIfNeeded: boolean;
    setPromptsUserIfNeeded(_: boolean) // property
    requiresUniversalLinks: boolean;
    setRequiresUniversalLinks(_: boolean) // property
  }

  // struct
  interface _OVFlags {
    unused3: number;
    dataSourceObjectValueByItem: number;
    allowAutomaticAnimations: number;
    dontRedisplayOnFrameChange: number;
    unused2: number;
    delegateShouldAutoExpandItem: number;
    delegateAutoCollapseItem: number;
    delegateAutoExpandItem: number;
    delegateShouldShowOutlineCellForItem: number;
    dataSourceDraggedImageMovedTo: number;
    dataSourceDraggingEndedAt: number;
    reloadingData: number;
    validDataSourceMethods: number;
    numberOfRowsDataExpandEntered: number;
    delayRowEntryFreeDisabled: number;
    delegateHeightOfRowByItem: number;
    animateExpandAndCollapse: number;
    stronglyReferencesItems: number;
    selectionAdjustmentDisabled: number;
    subclassRowForItem: number;
    delegateWillDisplayOutlineCell: number;
    enableExpandNotifications: number;
    autoSaveExpandItems: number;
    autoresizesOutlineColumn: number;
    delegateShouldExpandItem: number;
    delegateShouldCollapseItem: number;
    delegateSelectionShouldChangeInOutlineView: number;
    delegateShouldSelectTableColumn: number;
    delegateShouldSelectItem: number;
    delegateShouldEditTableColumn: number;
    delegateWillDisplayCell: number;
  }

  // interface
  class NSAsynchronousFetchRequest<ResultType> extends NSPersistentStoreRequest {
    completionBlock: (p1: NSAsynchronousFetchResult<any>) => void; // property
    estimatedResultCount: number;
    setEstimatedResultCount(_: number) // property
    fetchRequest: NSFetchRequest<ResultType>; // property
  }

  // interface
  class NSAsynchronousFetchResult<ResultType> extends NSPersistentStoreAsynchronousResult {
    fetchRequest: NSAsynchronousFetchRequest<ResultType>; // property
    finalResult: ResultType[]; // property
  }

  // interface
  class NSAtomicStore extends NSPersistentStore {
    addCacheNodes(_: NSSet<NSAtomicStoreCacheNode>): void;
    cacheNodeForObjectID(_: NSManagedObjectID): NSAtomicStoreCacheNode;
    cacheNodes(): NSSet<NSAtomicStoreCacheNode>;
    load(): boolean;
    newCacheNodeForManagedObject(_: NSManagedObject): NSAtomicStoreCacheNode;
    newReferenceObjectForManagedObject(_: NSManagedObject): any;
    objectIDForEntityReferenceObject(for_: NSEntityDescription, withReferenceObject: any): NSManagedObjectID;
    referenceObjectForObjectID(_: NSManagedObjectID): any;
    save(): boolean;
    updateCacheNodeFromManagedObject(_: NSAtomicStoreCacheNode, fromManagedObject: NSManagedObject): void;
    willRemoveCacheNodes(_: NSSet<NSAtomicStoreCacheNode>): void;
  }

  // interface
  class NSAtomicStoreCacheNode extends NSObject {
    objectID: NSManagedObjectID; // property
    propertyCache: NSMutableDictionary<string, any>;
    setPropertyCache(_: NSMutableDictionary<string, any>) // property
    static createWithObjectID(objectID: NSManagedObjectID): NSAtomicStoreCacheNode;
  }

  // interface
  class NSAttributeDescription extends NSPropertyDescription {
    allowsExternalBinaryDataStorage: boolean;
    setAllowsExternalBinaryDataStorage(_: boolean) // property
    attributeType: NSAttributeType;
    setAttributeType(_: NSAttributeType) // property
    attributeValueClassName: string;
    setAttributeValueClassName(_: string) // property
    defaultValue: any;
    setDefaultValue(_: any) // property
    preservesValueInHistoryOnDeletion: boolean;
    setPreservesValueInHistoryOnDeletion(_: boolean) // property
    valueTransformerName: string;
    setValueTransformerName(_: string) // property
  }

  // interface
  class NSBatchDeleteRequest extends NSPersistentStoreRequest {
    fetchRequest: NSFetchRequest<any>; // property
    resultType: NSBatchDeleteRequestResultType;
    setResultType(_: NSBatchDeleteRequestResultType) // property
    static createWithFetchRequest(fetchRequest: NSFetchRequest<any>): NSBatchDeleteRequest;
    static createWithObjectIDs(objectIDs: NSManagedObjectID[]): NSBatchDeleteRequest;
  }

  // interface
  class NSBatchDeleteResult extends NSPersistentStoreResult {
    result: any; // property
    resultType: NSBatchDeleteRequestResultType; // property
  }

  // interface
  class NSBatchInsertRequest extends NSPersistentStoreRequest {
    static batchInsertRequestWithEntityNameObjects(_: string, objects: Map<string, any>[]): NSBatchInsertRequest;
    entity: NSEntityDescription; // property
    entityName: string; // property
    objectsToInsert: Map<string, any>[];
    setObjectsToInsert(_: Map<string, any>[]) // property
    resultType: NSBatchInsertRequestResultType;
    setResultType(_: NSBatchInsertRequestResultType) // property
    static createWithEntityObjects(entity: NSEntityDescription, objects: Map<string, any>[]): NSBatchInsertRequest;
    static createWithEntityNameObjects(entityName: string, objects: Map<string, any>[]): NSBatchInsertRequest;
  }

  // interface
  class NSBatchInsertResult extends NSPersistentStoreResult {
    result: any; // property
    resultType: NSBatchInsertRequestResultType; // property
  }

  // interface
  class NSBatchUpdateRequest extends NSPersistentStoreRequest {
    static batchUpdateRequestWithEntityName(_: string): NSBatchUpdateRequest;
    entity: NSEntityDescription; // property
    entityName: string; // property
    includesSubentities: boolean;
    setIncludesSubentities(_: boolean) // property
    predicate: NSPredicate;
    setPredicate(_: NSPredicate) // property
    propertiesToUpdate: Map<any, any>;
    setPropertiesToUpdate(_: Map<any, any>) // property
    resultType: NSBatchUpdateRequestResultType;
    setResultType(_: NSBatchUpdateRequestResultType) // property
    static createWithEntity(entity: NSEntityDescription): NSBatchUpdateRequest;
    static createWithEntityName(entityName: string): NSBatchUpdateRequest;
  }

  // interface
  class NSBatchUpdateResult extends NSPersistentStoreResult {
    result: any; // property
    resultType: NSBatchUpdateRequestResultType; // property
  }

  // interface
  class NSConstraintConflict extends NSObject {
    conflictingObjects: NSManagedObject[]; // property
    conflictingSnapshots: Map<any, any>[]; // property
    constraint: string[]; // property
    constraintValues: Map<string, any>; // property
    databaseObject: NSManagedObject; // property
    databaseSnapshot: Map<string, any>; // property
    static createWithConstraintDatabaseObjectDatabaseSnapshotConflictingObjectsConflictingSnapshots(constraint: string[], databaseObject?: NSManagedObject, databaseSnapshot?: Map<any, any>, conflictingObjects?: NSManagedObject[], conflictingSnapshots?: any[]): NSConstraintConflict;
  }

  // interface
  class NSCoreDataCoreSpotlightDelegate extends NSObject {
    // attributeSetForObject(_: NSManagedObject): CSSearchableItemAttributeSet;
    domainIdentifier(): string;
    indexName(): string;
    static createWithForStoreWithDescriptionModel(forStoreWithDescription: NSPersistentStoreDescription, model: NSManagedObjectModel): NSCoreDataCoreSpotlightDelegate;
    // searchableIndexWithReindexAllSearchableItemsWithAcknowledgementHandler(_: CSSearchableIndex, reindexAllSearchableItemsWithAcknowledgementHandler: () => void): void;
    // searchableIndexWithReindexSearchableItemsWithIdentifiersAcknowledgementHandler(_: CSSearchableIndex, reindexSearchableItemsWithIdentifiers: string[], acknowledgementHandler: () => void): void;
  }

  // interface
  class NSDerivedAttributeDescription extends NSAttributeDescription {
    derivationExpression: NSExpression;
    setDerivationExpression(_: NSExpression) // property
  }

  // interface
  class NSEntityDescription extends NSObject /* implements NSCoding, NSCopying, NSFastEnumeration */ {
    static entityForNameInManagedObjectContext(forEntityName: string, in_: NSManagedObjectContext): NSEntityDescription;
    static insertNewObjectForEntityForNameInManagedObjectContext(forEntityName: string, into: NSManagedObjectContext): NSManagedObject;
    isAbstract: boolean;
    setAbstract(_: boolean) // property
    attributesByName: Map<string, NSAttributeDescription>; // property
    coreSpotlightDisplayNameExpression: NSExpression;
    setCoreSpotlightDisplayNameExpression(_: NSExpression) // property
    indexes: NSFetchIndexDescription[];
    setIndexes(_: NSFetchIndexDescription[]) // property
    managedObjectClassName: string;
    setManagedObjectClassName(_: string) // property
    managedObjectModel: NSManagedObjectModel; // property
    name: string;
    setName(_: string) // property
    properties: NSPropertyDescription[];
    setProperties(_: NSPropertyDescription[]) // property
    propertiesByName: Map<string, NSPropertyDescription>; // property
    relationshipsByName: Map<string, NSRelationshipDescription>; // property
    renamingIdentifier: string;
    setRenamingIdentifier(_: string) // property
    subentities: NSEntityDescription[];
    setSubentities(_: NSEntityDescription[]) // property
    subentitiesByName: Map<string, NSEntityDescription>; // property
    superentity: NSEntityDescription; // property
    uniquenessConstraints: any[][];
    setUniquenessConstraints(_: any[][]) // property
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>) // property
    versionHash: NSData; // property
    versionHashModifier: string;
    setVersionHashModifier(_: string) // property
    isKindOfEntity(entity: NSEntityDescription): boolean;
    relationshipsWithDestinationEntity(forDestination: NSEntityDescription): NSRelationshipDescription[];
  }

  // interface
  class NSEntityMapping extends NSObject {
    attributeMappings: NSPropertyMapping[];
    setAttributeMappings(_: NSPropertyMapping[]) // property
    destinationEntityName: string;
    setDestinationEntityName(_: string) // property
    destinationEntityVersionHash: NSData;
    setDestinationEntityVersionHash(_: NSData) // property
    entityMigrationPolicyClassName: string;
    setEntityMigrationPolicyClassName(_: string) // property
    mappingType: NSEntityMappingType;
    setMappingType(_: NSEntityMappingType) // property
    name: string;
    setName(_: string) // property
    relationshipMappings: NSPropertyMapping[];
    setRelationshipMappings(_: NSPropertyMapping[]) // property
    sourceEntityName: string;
    setSourceEntityName(_: string) // property
    sourceEntityVersionHash: NSData;
    setSourceEntityVersionHash(_: NSData) // property
    sourceExpression: NSExpression;
    setSourceExpression(_: NSExpression) // property
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>) // property
  }

  // interface
  class NSEntityMigrationPolicy extends NSObject {
    beginEntityMappingManagerError(_: NSEntityMapping, with_: NSMigrationManager): boolean;
    createDestinationInstancesForSourceInstanceEntityMappingManagerError(forSource: NSManagedObject, in_: NSEntityMapping, manager: NSMigrationManager): boolean;
    createRelationshipsForDestinationInstanceEntityMappingManagerError(forDestination: NSManagedObject, in_: NSEntityMapping, manager: NSMigrationManager): boolean;
    endEntityMappingManagerError(manager: NSEntityMapping, error: NSMigrationManager): boolean;
    endInstanceCreationForEntityMappingManagerError(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
    endRelationshipCreationForEntityMappingManagerError(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
    performCustomValidationForEntityMappingManagerError(forMapping: NSEntityMapping, manager: NSMigrationManager): boolean;
  }

  // interface
  class NSExpressionDescription extends NSPropertyDescription {
    expression: NSExpression;
    setExpression(_: NSExpression) // property
    expressionResultType: NSAttributeType;
    setExpressionResultType(_: NSAttributeType) // property
  }

  // interface
  class NSFetchIndexDescription extends NSObject /* implements NSCoding */ {
    elements: NSFetchIndexElementDescription[];
    setElements(_: NSFetchIndexElementDescription[]) // property
    entity: NSEntityDescription; // property
    name: string;
    setName(_: string) // property
    partialIndexPredicate: NSPredicate;
    setPartialIndexPredicate(_: NSPredicate) // property
    static createWithNameElements(name: string, elements?: NSFetchIndexElementDescription[]): NSFetchIndexDescription;
  }

  // interface
  class NSFetchIndexElementDescription extends NSObject /* implements NSCoding */ {
    isAscending: boolean;
    setAscending(_: boolean) // property
    collationType: NSFetchIndexElementType;
    setCollationType(_: NSFetchIndexElementType) // property
    indexDescription: NSFetchIndexDescription; // property
    property: NSPropertyDescription; // property
    propertyName: string; // property
    static createWithPropertyCollationType(property: NSPropertyDescription, collationType: NSFetchIndexElementType): NSFetchIndexElementDescription;
  }

  // interface
  class NSFetchRequest<ResultType> extends NSPersistentStoreRequest /* implements NSCoding */ {
    static fetchRequestWithEntityName<ResultType>(_: string): NSFetchRequest<ResultType>;
    entity: NSEntityDescription;
    setEntity(_: NSEntityDescription) // property
    entityName: string; // property
    fetchBatchSize: number;
    setFetchBatchSize(_: number) // property
    fetchLimit: number;
    setFetchLimit(_: number) // property
    fetchOffset: number;
    setFetchOffset(_: number) // property
    havingPredicate: NSPredicate;
    setHavingPredicate(_: NSPredicate) // property
    includesPendingChanges: boolean;
    setIncludesPendingChanges(_: boolean) // property
    includesPropertyValues: boolean;
    setIncludesPropertyValues(_: boolean) // property
    includesSubentities: boolean;
    setIncludesSubentities(_: boolean) // property
    predicate: NSPredicate;
    setPredicate(_: NSPredicate) // property
    propertiesToFetch: any[];
    setPropertiesToFetch(_: any[]) // property
    propertiesToGroupBy: any[];
    setPropertiesToGroupBy(_: any[]) // property
    relationshipKeyPathsForPrefetching: string[];
    setRelationshipKeyPathsForPrefetching(_: string[]) // property
    resultType: NSFetchRequestResultType;
    setResultType(_: NSFetchRequestResultType) // property
    returnsDistinctResults: boolean;
    setReturnsDistinctResults(_: boolean) // property
    returnsObjectsAsFaults: boolean;
    setReturnsObjectsAsFaults(_: boolean) // property
    shouldRefreshRefetchedObjects: boolean;
    setShouldRefreshRefetchedObjects(_: boolean) // property
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[]) // property
    execute(): ResultType[];
  }

  // interface
  class NSFetchRequestExpression extends NSExpression {
    static expressionForFetchContextCountOnly(_: NSExpression, context: NSExpression, countOnly: boolean): NSExpression;
    contextExpression: NSExpression; // property
    isCountOnlyRequest: boolean; // property
    requestExpression: NSExpression; // property
  }

  interface NSFetchRequestResult extends NSObject {
  }

  // interface
  class NSFetchedPropertyDescription extends NSPropertyDescription {
    fetchRequest: NSFetchRequest<any>;
    setFetchRequest(_: NSFetchRequest<any>) // property
  }

  // interface
  class NSFetchedResultsController<ResultType> extends NSObject {
    static deleteCacheWithName(_?: string): void;
    cacheName: string; // property
    delegate: NSFetchedResultsControllerDelegate;
    setDelegate(_: NSFetchedResultsControllerDelegate) // property
    fetchRequest: NSFetchRequest<ResultType>; // property
    fetchedObjects: ResultType[]; // property
    managedObjectContext: NSManagedObjectContext; // property
    sectionIndexTitles: string[]; // property
    sectionNameKeyPath: string; // property
    sections: NSFetchedResultsSectionInfo[]; // property
    indexPathForObject(_: ResultType): NSIndexPath;
    objectAtIndexPath(_: NSIndexPath): ResultType;
    performFetch(): boolean;
    sectionForSectionIndexTitleAtIndex(_: string, atIndex: number): number;
    sectionIndexTitleForSectionName(_: string): string;
  }

  interface NSFetchedResultsControllerDelegate extends NSObject {
    // instance method
    controllerWithDidChangeContentWithDifference?(_: NSFetchedResultsController<any>, didChangeContentWithDifference: NSOrderedCollectionDifference<NSManagedObjectID>): void;
    // instance method
    controllerWithDidChangeContentWithSnapshot?(_: NSFetchedResultsController<any>, didChangeContentWithSnapshot: NSDiffableDataSourceSnapshotReference<string, NSManagedObjectID>): void;
    // instance method
    controllerDidChangeObjectAtIndexPathForChangeTypeNewIndexPath?(_: NSFetchedResultsController<any>, didChangeObject: any, atIndexPath?: NSIndexPath, forChangeType?: NSFetchedResultsChangeType, newIndexPath?: NSIndexPath): void;
    // instance method
    controllerDidChangeSectionAtIndexForChangeType?(_: NSFetchedResultsController<any>, didChangeSection: NSFetchedResultsSectionInfo, atIndex: number, forChangeType: NSFetchedResultsChangeType): void;
    // instance method
    controllerSectionIndexTitleForSectionName?(_: NSFetchedResultsController<any>, sectionIndexTitleForSectionName: string): string;
    // instance method
    controllerDidChangeContent?(_: NSFetchedResultsController<any>): void;
    // instance method
    controllerWillChangeContent?(_: NSFetchedResultsController<any>): void;
  }

  interface NSFetchedResultsSectionInfo {
    indexTitle: string; // property
    name: string; // property
    numberOfObjects: number; // property
    objects: any[]; // property
  }

  // interface
  class NSIncrementalStore extends NSPersistentStore {
    static identifierForNewStoreAtURL(_: NSURL): any;
    executeRequestWithContextError(withContext: NSPersistentStoreRequest, error?: NSManagedObjectContext): any;
    managedObjectContextDidRegisterObjectsWithIDs(_: NSManagedObjectID[]): void;
    managedObjectContextDidUnregisterObjectsWithIDs(_: NSManagedObjectID[]): void;
    newObjectIDForEntityReferenceObject(for_: NSEntityDescription, referenceObject: any): NSManagedObjectID;
    newValueForRelationshipForObjectWithIDWithContextError(forObjectWithID: NSRelationshipDescription, withContext: NSManagedObjectID, error?: NSManagedObjectContext): any;
    newValuesForObjectWithIDWithContextError(withContext: NSManagedObjectID, error: NSManagedObjectContext): NSIncrementalStoreNode;
    obtainPermanentIDsForObjectsError(error: NSManagedObject[]): NSManagedObjectID[];
    referenceObjectForObjectID(_: NSManagedObjectID): any;
  }

  // interface
  class NSIncrementalStoreNode extends NSObject {
    objectID: NSManagedObjectID; // property
    static createWithObjectIDWithValuesVersion(objectID: NSManagedObjectID, withValues: Map<string, any>, version: number): NSIncrementalStoreNode;
    updateWithValuesVersion(_: Map<string, any>, version: number): void;
    valueForPropertyDescription(_: NSPropertyDescription): any;
  }

  // interface
  class NSManagedObject extends NSObject /* implements NSFetchRequestResult */ {
    static entity(): NSEntityDescription;
    static fetchRequest(): NSFetchRequest<any>;
    isDeleted: boolean; // property
    entity: NSEntityDescription; // property
    isFault: boolean; // property
    faultingState: number; // property
    hasChanges: boolean; // property
    hasPersistentChangedValues: boolean; // property
    isInserted: boolean; // property
    managedObjectContext: NSManagedObjectContext; // property
    objectID: NSManagedObjectID; // property
    isUpdated: boolean; // property
    static contextShouldIgnoreUnmodeledPropertyChanges: boolean; // property
    awakeFromFetch(): void;
    awakeFromInsert(): void;
    awakeFromSnapshotEvents(_: NSSnapshotEventType): void;
    changedValues(): Map<string, any>;
    changedValuesForCurrentEvent(): Map<string, any>;
    committedValuesForKeys(_?: string[]): Map<string, any>;
    didAccessValueForKey(_?: string): void;
    didSave(): void;
    didTurnIntoFault(): void;
    hasFaultForRelationshipNamed(_: string): boolean;
    static createWithContext(context: NSManagedObjectContext): NSManagedObject;
    static createWithEntityInsertIntoManagedObjectContext(entity: NSEntityDescription, insertIntoManagedObjectContext?: NSManagedObjectContext): NSManagedObject;
    objectIDsForRelationshipNamed(_: string): NSManagedObjectID[];
    prepareForDeletion(): void;
    primitiveValueForKey(_: string): any;
    setObservationInfo(_?: any): void;
    setPrimitiveValueForKey(_?: any, forKey?: string): void;
    validateForDelete(): boolean;
    validateForInsert(): boolean;
    validateForUpdate(): boolean;
    willAccessValueForKey(_?: string): void;
    willSave(): void;
    willTurnIntoFault(): void;
  }

  // interface
  class NSManagedObjectContext extends NSObject /* implements NSCoding, NSLocking, NSEditor, NSEditorRegistration */ {
    static mergeChangesFromRemoteContextSaveIntoContexts(_: Map<any, any>, intoContexts: NSManagedObjectContext[]): void;
    automaticallyMergesChangesFromParent: boolean;
    setAutomaticallyMergesChangesFromParent(_: boolean) // property
    concurrencyType: NSManagedObjectContextConcurrencyType; // property
    deletedObjects: NSSet<NSManagedObject>; // property
    hasChanges: boolean; // property
    insertedObjects: NSSet<NSManagedObject>; // property
    mergePolicy: any;
    setMergePolicy(_: any) // property
    name: string;
    setName(_: string) // property
    parentContext: NSManagedObjectContext;
    setParentContext(_: NSManagedObjectContext) // property
    persistentStoreCoordinator: NSPersistentStoreCoordinator;
    setPersistentStoreCoordinator(_: NSPersistentStoreCoordinator) // property
    propagatesDeletesAtEndOfEvent: boolean;
    setPropagatesDeletesAtEndOfEvent(_: boolean) // property
    queryGenerationToken: NSQueryGenerationToken; // property
    registeredObjects: NSSet<NSManagedObject>; // property
    retainsRegisteredObjects: boolean;
    setRetainsRegisteredObjects(_: boolean) // property
    shouldDeleteInaccessibleFaults: boolean;
    setShouldDeleteInaccessibleFaults(_: boolean) // property
    stalenessInterval: number;
    setStalenessInterval(_: number) // property
    transactionAuthor: string;
    setTransactionAuthor(_: string) // property
    undoManager: UndoManager;
    setUndoManager(_: UndoManager) // property
    updatedObjects: NSSet<NSManagedObject>; // property
    userInfo: NSMutableDictionary<any, any>; // property
    assignObjectToPersistentStore(_: any, toPersistentStore: NSPersistentStore): void;
    countForFetchRequestError(error: NSFetchRequest<any>): number;
    deleteObject(_: NSManagedObject): void;
    detectConflictsForObject(_: NSManagedObject): void;
    executeFetchRequestError(_: NSFetchRequest<any>): any[];
    executeRequestError(error: NSPersistentStoreRequest): NSPersistentStoreResult;
    existingObjectWithIDError(error: NSManagedObjectID): NSManagedObject;
    static createWithConcurrencyType(concurrencyType: NSManagedObjectContextConcurrencyType): NSManagedObjectContext;
    insertObject(_: NSManagedObject): void;
    mergeChangesFromContextDidSaveNotification(_: NSNotification): void;
    objectRegisteredForID(for_: NSManagedObjectID): NSManagedObject;
    objectWithID(_: NSManagedObjectID): NSManagedObject;
    obtainPermanentIDsForObjectsError(error: NSManagedObject[]): boolean;
    performBlock(_: () => void): void;
    performAndWait(_: () => void): void;
    processPendingChanges(): void;
    redo(): void;
    refreshAllObjects(): void;
    refreshObjectMergeChanges(_: NSManagedObject, mergeChanges: boolean): void;
    reset(): void;
    rollback(): void;
    save(): boolean;
    setQueryGenerationFromTokenError(error?: NSQueryGenerationToken): boolean;
    shouldHandleInaccessibleFaultForObjectIDTriggeredByProperty(_: NSManagedObject, forObjectID: NSManagedObjectID, triggeredByProperty?: NSPropertyDescription): boolean;
    undo(): void;
  }

  // interface
  class NSManagedObjectID extends NSObject /* implements NSCopying, NSFetchRequestResult */ {
    entity: NSEntityDescription; // property
    persistentStore: NSPersistentStore; // property
    isTemporaryID: boolean; // property
    URIRepresentation(): NSURL;
  }

  // interface
  class NSManagedObjectModel extends NSObject /* implements NSCoding, NSCopying, NSFastEnumeration */ {
    static mergedModelFromBundles(_?: Bundle[]): NSManagedObjectModel;
    static mergedModelFromBundlesForStoreMetadata(_?: Bundle[], forStoreMetadata?: Map<string, any>): NSManagedObjectModel;
    static modelByMergingModels(_?: NSManagedObjectModel[]): NSManagedObjectModel;
    static modelByMergingModelsForStoreMetadata(_: NSManagedObjectModel[], forStoreMetadata: Map<string, any>): NSManagedObjectModel;
    configurations: string[]; // property
    entities: NSEntityDescription[];
    setEntities(_: NSEntityDescription[]) // property
    entitiesByName: Map<string, NSEntityDescription>; // property
    entityVersionHashesByName: Map<string, Data>; // property
    fetchRequestTemplatesByName: Map<string, NSFetchRequest<any>>; // property
    localizationDictionary: Map<string, string>;
    setLocalizationDictionary(_: Map<string, string>) // property
    versionIdentifiers: NSSet<any>;
    setVersionIdentifiers(_: NSSet<any>) // property
    entitiesForConfiguration(forConfigurationName?: string): NSEntityDescription[];
    fetchRequestFromTemplateWithNameSubstitutionVariables(_: string, substitutionVariables: Map<string, any>): NSFetchRequest<any>;
    fetchRequestTemplateForName(_: string): NSFetchRequest<any>;
    static createWithContentsOfURL(contentsOfURL: NSURL): NSManagedObjectModel;
    isConfigurationCompatibleWithStoreMetadata(withName?: string, compatibleWithStoreMetadata?: Map<string, any>): boolean;
    setEntitiesForConfiguration(_: NSEntityDescription[], forConfigurationName: string): void;
    setFetchRequestTemplateForName(_?: NSFetchRequest<any>, forName?: string): void;
  }

  // interface
  class NSMappingModel extends NSObject {
    static inferredMappingModelForSourceModelDestinationModelError(destinationModel: NSManagedObjectModel, error: NSManagedObjectModel): NSMappingModel;
    static mappingModelFromBundlesForSourceModelDestinationModel(_?: Bundle[], forSourceModel?: NSManagedObjectModel, destinationModel?: NSManagedObjectModel): NSMappingModel;
    entityMappings: NSEntityMapping[];
    setEntityMappings(_: NSEntityMapping[]) // property
    entityMappingsByName: Map<string, NSEntityMapping>; // property
    static createWithContentsOfURL(contentsOfURL?: NSURL): NSMappingModel;
  }

  // interface
  class NSMergeConflict extends NSObject {
    cachedSnapshot: Map<string, any>; // property
    newVersionNumber: number; // property
    objectSnapshot: Map<string, any>; // property
    oldVersionNumber: number; // property
    persistedSnapshot: Map<string, any>; // property
    sourceObject: NSManagedObject; // property
    static createWithSourceNewVersionOldVersionCachedSnapshotPersistedSnapshot(source: NSManagedObject, newVersion: number, oldVersion: number, cachedSnapshot?: Map<string, any>, persistedSnapshot?: Map<string, any>): NSMergeConflict;
  }

  // interface
  class NSMergePolicy extends NSObject {
    mergeType: NSMergePolicyType; // property
    static errorMergePolicy: NSMergePolicy; // property
    static mergeByPropertyObjectTrumpMergePolicy: NSMergePolicy; // property
    static mergeByPropertyStoreTrumpMergePolicy: NSMergePolicy; // property
    static overwriteMergePolicy: NSMergePolicy; // property
    static rollbackMergePolicy: NSMergePolicy; // property
    static createWithMergeType(mergeType: NSMergePolicyType): NSMergePolicy;
    resolveConflictsError(mergeConflicts: any[]): boolean;
    resolveConstraintConflictsError(constraintConflicts: NSConstraintConflict[]): boolean;
    resolveOptimisticLockingVersionConflictsError(optimisticLockingConflicts: NSMergeConflict[]): boolean;
  }

  // interface
  class NSMigrationManager extends NSObject {
    currentEntityMapping: NSEntityMapping; // property
    destinationContext: NSManagedObjectContext; // property
    destinationModel: NSManagedObjectModel; // property
    mappingModel: NSMappingModel; // property
    migrationProgress: number; // property
    sourceContext: NSManagedObjectContext; // property
    sourceModel: NSManagedObjectModel; // property
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>) // property
    usesStoreSpecificMigrationManager: boolean;
    setUsesStoreSpecificMigrationManager(_: boolean) // property
    associateSourceInstanceWithDestinationInstanceForEntityMapping(sourceInstance: NSManagedObject, withDestinationInstance: NSManagedObject, for_: NSEntityMapping): void;
    cancelMigrationWithError(_: NSError): void;
    destinationEntityForEntityMapping(_: NSEntityMapping): NSEntityDescription;
    destinationInstancesForEntityMappingNamedSourceInstances(forEntityMappingName: string, sourceInstances?: NSManagedObject[]): NSManagedObject[];
    static createWithSourceModelDestinationModel(sourceModel: NSManagedObjectModel, destinationModel: NSManagedObjectModel): NSMigrationManager;
    migrateStoreFromURLTypeOptionsWithMappingModelToDestinationURLDestinationTypeDestinationOptionsError(from: NSURL, sourceType: string, options?: Map<any, any>, with_?: NSMappingModel, toDestinationURL?: NSURL, destinationType?: string, destinationOptions?: Map<any, any>): boolean;
    reset(): void;
    sourceEntityForEntityMapping(_: NSEntityMapping): NSEntityDescription;
    sourceInstancesForEntityMappingNamedDestinationInstances(forEntityMappingName: string, destinationInstances?: NSManagedObject[]): NSManagedObject[];
  }

  // interface
  // class NSPersistentCloudKitContainer extends NSPersistentContainer {
  //   initializeCloudKitSchemaWithOptionsError(error: NSPersistentCloudKitContainerSchemaInitializationOptions): boolean;
  //   recordForManagedObjectID(_: NSManagedObjectID): CKRecord;
  //   recordIDForManagedObjectID(_: NSManagedObjectID): ID;
  //   recordIDsForManagedObjectIDs(_: NSManagedObjectID[]): Map<NSManagedObjectID, ID>;
  //   recordsForManagedObjectIDs(_: NSManagedObjectID[]): Map<NSManagedObjectID, CKRecord>;
  // }

  // // interface
  class NSPersistentCloudKitContainerOptions extends NSObject {
    //   containerIdentifier: string; // property
    static createWithContainerIdentifier(containerIdentifier: string): NSPersistentCloudKitContainerOptions;
  }

  // interface
  class NSPersistentContainer extends NSObject {
    static defaultDirectoryURL(): NSURL;
    static persistentContainerWithName(_: string): NSPersistentContainer;
    static persistentContainerWithNameManagedObjectModel(_: string, managedObjectModel: NSManagedObjectModel): NSPersistentContainer;
    managedObjectModel: NSManagedObjectModel; // property
    name: string; // property
    persistentStoreCoordinator: NSPersistentStoreCoordinator; // property
    persistentStoreDescriptions: NSPersistentStoreDescription[];
    setPersistentStoreDescriptions(_: NSPersistentStoreDescription[]) // property
    viewContext: NSManagedObjectContext; // property
    static createWithName(name: string): NSPersistentContainer;
    static createWithNameManagedObjectModel(name: string, managedObjectModel: NSManagedObjectModel): NSPersistentContainer;
    loadPersistentStoresWithCompletionHandler(_?: (p1: NSPersistentStoreDescription, p2: NSError) => void): void;
    newBackgroundContext(): NSManagedObjectContext;
    performBackgroundTask(_: (p1: NSManagedObjectContext) => void): void;
  }

  // interface
  class NSPersistentHistoryChange extends NSObject /* implements NSCopying */ {
    static entityDescriptionWithContext(_: NSManagedObjectContext): NSEntityDescription;
    changeID: number; // property
    changeType: NSPersistentHistoryChangeType; // property
    changedObjectID: NSManagedObjectID; // property
    tombstone: Map<any, any>; // property
    transaction: NSPersistentHistoryTransaction; // property
    updatedProperties: NSSet<NSPropertyDescription>; // property
    static entityDescription: NSEntityDescription; // property
    static fetchRequest: NSFetchRequest<any>; // property
  }

  // interface
  class NSPersistentHistoryChangeRequest extends NSPersistentStoreRequest {
    static deleteHistoryBeforeDate(_: Date): NSPersistentHistoryChangeRequest;
    static deleteHistoryBeforeToken(_?: NSPersistentHistoryToken): NSPersistentHistoryChangeRequest;
    static deleteHistoryBeforeTransaction(_?: NSPersistentHistoryTransaction): NSPersistentHistoryChangeRequest;
    static fetchHistoryAfterDate(_: Date): NSPersistentHistoryChangeRequest;
    static fetchHistoryAfterToken(_?: NSPersistentHistoryToken): NSPersistentHistoryChangeRequest;
    static fetchHistoryAfterTransaction(_?: NSPersistentHistoryTransaction): NSPersistentHistoryChangeRequest;
    static fetchHistoryWithFetchRequest(_: NSFetchRequest<any>): NSPersistentHistoryChangeRequest;
    fetchRequest: NSFetchRequest<any>;
    setFetchRequest(_: NSFetchRequest<any>) // property
    resultType: NSPersistentHistoryResultType;
    setResultType(_: NSPersistentHistoryResultType) // property
    token: NSPersistentHistoryToken; // property
  }

  // interface
  class NSPersistentHistoryResult extends NSPersistentStoreResult {
    result: any; // property
    resultType: NSPersistentHistoryResultType; // property
  }

  // interface
  class NSPersistentHistoryToken extends NSObject /* implements NSCopying, NSSecureCoding */ {
  }

  // interface
  class NSPersistentHistoryTransaction extends NSObject /* implements NSCopying */ {
    static entityDescriptionWithContext(_: NSManagedObjectContext): NSEntityDescription;
    author: string; // property
    bundleID: string; // property
    changes: NSPersistentHistoryChange[]; // property
    contextName: string; // property
    processID: string; // property
    storeID: string; // property
    timestamp: Date; // property
    token: NSPersistentHistoryToken; // property
    transactionNumber: number; // property
    static entityDescription: NSEntityDescription; // property
    static fetchRequest: NSFetchRequest<any>; // property
    objectIDNotification(): NSNotification;
  }

  // interface
  class NSPersistentStore extends NSObject {
    static metadataForPersistentStoreWithURLError(error: NSURL): Map<string, any>;
    static migrationManagerClass(): typeof NSObject;
    static setMetadataForPersistentStoreWithURLError(_?: Map<string, any>, forPersistentStoreAt?: NSURL): boolean;
    URL: NSURL;
    setURL(_: NSURL) // property
    configurationName: string; // property
    coreSpotlightExporter: NSCoreDataCoreSpotlightDelegate; // property
    identifier: string;
    setIdentifier(_: string) // property
    metadata: Map<string, any>;
    setMetadata(_: Map<string, any>) // property
    options: Map<any, any>; // property
    persistentStoreCoordinator: NSPersistentStoreCoordinator; // property
    isReadOnly: boolean;
    setReadOnly(_: boolean) // property
    type: string; // property
    didAddToPersistentStoreCoordinator(_: NSPersistentStoreCoordinator): void;
    static createWithPersistentStoreCoordinatorConfigurationNameUrlOptions(persistentStoreCoordinator?: NSPersistentStoreCoordinator, configurationName?: string, URL?: NSURL, options?: Map<any, any>): NSPersistentStore;
    loadMetadata(): boolean;
    willRemoveFromPersistentStoreCoordinator(_?: NSPersistentStoreCoordinator): void;
  }

  // interface
  class NSPersistentStoreAsynchronousResult extends NSPersistentStoreResult {
    managedObjectContext: NSManagedObjectContext; // property
    operationError: NSError; // property
    progress: Progress; // property
    cancel(): void;
  }

  // interface
  class NSPersistentStoreCoordinator extends NSObject /* implements NSLocking */ {
    static elementsDerivedFromExternalRecordURL(fromExternalRecordAt: NSURL): Map<any, any>;
    static metadataForPersistentStoreOfTypeUrlOptionsError(ofType: string, at: NSURL, options?: Map<any, any>): Map<string, any>;
    static registerStoreClassForStoreType(_?: typeof NSObject, forStoreType?: string): void;
    static setMetadataForPersistentStoreOfTypeUrlOptionsError(_?: Map<string, any>, forPersistentStoreOfType?: string, at?: NSURL, options?: Map<any, any>): boolean;
    managedObjectModel: NSManagedObjectModel; // property
    name: string;
    setName(_: string) // property
    persistentStores: NSPersistentStore[]; // property
    static registeredStoreTypes: Map<string, NSValue>; // property
    URLForPersistentStore(_: NSPersistentStore): NSURL;
    addPersistentStoreWithDescriptionWithCompletionHandler(_: NSPersistentStoreDescription, completionHandler?: (p1: NSPersistentStoreDescription, p2: NSError) => void): void;
    addPersistentStoreWithTypeConfigurationUrlOptionsError(ofType: string, configurationName?: string, at?: NSURL, options?: Map<any, any>): NSPersistentStore;
    currentPersistentHistoryTokenFromStores(_?: any[]): NSPersistentHistoryToken;
    destroyPersistentStoreAtURLWithTypeOptionsError(at: NSURL, ofType: string, options?: Map<any, any>): boolean;
    executeRequestWithContextError(withContext: NSPersistentStoreRequest, error: NSManagedObjectContext): any;
    importStoreWithIdentifierFromExternalRecordsDirectoryToURLOptionsWithTypeError(withIdentifier?: string, fromExternalRecordsDirectoryAt?: NSURL, to?: NSURL, options?: Map<any, any>, ofType?: string): NSPersistentStore;
    static createWithManagedObjectModel(managedObjectModel: NSManagedObjectModel): NSPersistentStoreCoordinator;
    managedObjectIDForURIRepresentation(_: NSURL): NSManagedObjectID;
    metadataForPersistentStore(_: NSPersistentStore): Map<string, any>;
    migratePersistentStoreToURLOptionsWithTypeError(toURL: NSPersistentStore, options: NSURL, withType?: Map<any, any>, error?: string): NSPersistentStore;
    performBlock(_: () => void): void;
    performAndWait(_: () => void): void;
    persistentStoreForURL(_: NSURL): NSPersistentStore;
    removePersistentStoreError(_: NSPersistentStore): boolean;
    replacePersistentStoreAtURLDestinationOptionsWithPersistentStoreFromURLSourceOptionsStoreTypeError(at: NSURL, destinationOptions?: Map<any, any>, withPersistentStoreFrom?: NSURL, sourceOptions?: Map<any, any>, ofType?: string): boolean;
    setMetadataForPersistentStore(_?: Map<string, any>, forPersistentStore?: NSPersistentStore): void;
    setURLForPersistentStore(_: NSURL, forPersistentStore: NSPersistentStore): boolean;
  }

  // interface
  class NSPersistentStoreDescription extends NSObject /* implements NSCopying */ {
    static persistentStoreDescriptionWithURL(_: NSURL): NSPersistentStoreDescription;
    URL: NSURL;
    setURL(_: NSURL) // property
    // cloudKitContainerOptions: NSPersistentCloudKitContainerOptions;
    // setCloudKitContainerOptions(_: NSPersistentCloudKitContainerOptions) // property
    configuration: string;
    setConfiguration(_: string) // property
    options: Map<string, NSObject>; // property
    isReadOnly: boolean;
    setReadOnly(_: boolean) // property
    shouldAddStoreAsynchronously: boolean;
    setShouldAddStoreAsynchronously(_: boolean) // property
    shouldInferMappingModelAutomatically: boolean;
    setShouldInferMappingModelAutomatically(_: boolean) // property
    shouldMigrateStoreAutomatically: boolean;
    setShouldMigrateStoreAutomatically(_: boolean) // property
    sqlitePragmas: Map<string, NSObject>; // property
    timeout: number;
    setTimeout(_: number) // property
    type: string;
    setType(_: string) // property
    static createWithUrl(URL: NSURL): NSPersistentStoreDescription;
    setOptionForKey(_?: NSObject, forKey?: string): void;
    setValueForPragmaNamed(_?: NSObject, forPragmaNamed?: string): void;
  }

  // interface
  class NSPersistentStoreRequest extends NSObject /* implements NSCopying */ {
    affectedStores: NSPersistentStore[];
    setAffectedStores(_: NSPersistentStore[]) // property
    requestType: NSPersistentStoreRequestType; // property
  }

  // interface
  class NSPersistentStoreResult extends NSObject {
  }

  // interface
  class NSPropertyDescription extends NSObject /* implements NSCoding, NSCopying */ {
    entity: NSEntityDescription; // property
    isIndexedBySpotlight: boolean;
    setIndexedBySpotlight(_: boolean) // property
    name: string;
    setName(_: string) // property
    isOptional: boolean;
    setOptional(_: boolean) // property
    renamingIdentifier: string;
    setRenamingIdentifier(_: string) // property
    isTransient: boolean;
    setTransient(_: boolean) // property
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>) // property
    validationPredicates: NSPredicate[]; // property
    validationWarnings: any[]; // property
    versionHash: NSData; // property
    versionHashModifier: string;
    setVersionHashModifier(_: string) // property
    setValidationPredicatesWithValidationWarnings(_?: NSPredicate[], withValidationWarnings?: string[]): void;
  }

  // interface
  class NSPropertyMapping extends NSObject {
    name: string;
    setName(_: string) // property
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>) // property
    valueExpression: NSExpression;
    setValueExpression(_: NSExpression) // property
  }

  // interface
  class NSQueryGenerationToken extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static currentQueryGenerationToken: NSQueryGenerationToken; // property
  }

  // interface
  class NSRelationshipDescription extends NSPropertyDescription {
    deleteRule: NSDeleteRule;
    setDeleteRule(_: NSDeleteRule) // property
    destinationEntity: NSEntityDescription;
    setDestinationEntity(_: NSEntityDescription) // property
    inverseRelationship: NSRelationshipDescription;
    setInverseRelationship(_: NSRelationshipDescription) // property
    maxCount: number;
    setMaxCount(_: number) // property
    minCount: number;
    setMinCount(_: number) // property
    isOrdered: boolean;
    setOrdered(_: boolean) // property
    isToMany: boolean; // property
  }

  // interface
  class NSSaveChangesRequest extends NSPersistentStoreRequest {
    deletedObjects: NSSet<NSManagedObject>; // property
    insertedObjects: NSSet<NSManagedObject>; // property
    lockedObjects: NSSet<NSManagedObject>; // property
    updatedObjects: NSSet<NSManagedObject>; // property
    static createWithInsertedObjectsUpdatedObjectsDeletedObjectsLockedObjects(insertedObjects?: NSSet<NSManagedObject>, updatedObjects?: NSSet<NSManagedObject>, deletedObjects?: NSSet<NSManagedObject>, lockedObjects?: NSSet<NSManagedObject>): NSSaveChangesRequest;
  }

  // export declare function CFAbsoluteTimeGetCurrent(): number;

  // export declare function CFAllocatorAllocate(allocator: any, size: number, hint: number): any;

  // struct
  interface CFAllocatorContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
    allocate: (p1: number, p2: number, p3: any) => any;
    reallocate: (p1: any, p2: number, p3: number, p4: any) => any;
    deallocate: (p1: any, p2: any) => void;
    preferredSize: (p1: number, p2: number, p3: any) => number;
  }

  // export declare function CFAllocatorCreate(allocator: any, context: CFAllocatorContext): any;

  // export declare function CFAllocatorDeallocate(allocator: any, ptr: any): void;

  // export declare function CFAllocatorGetContext(allocator: any, context: CFAllocatorContext): void;

  // export declare function CFAllocatorGetDefault(): any;

  // export declare function CFAllocatorGetPreferredSizeForSize(allocator: any, size: number, hint: number): number;

  // export declare function CFAllocatorGetTypeID(): number;

  // export declare function CFAllocatorReallocate(allocator: any, ptr: any, newsize: number, hint: number): any;

  // export declare function CFAllocatorSetDefault(allocator: any): void;

  // export declare function CFArrayAppendArray(theArray: any[], otherArray: any[], otherRange: CFRange): void;

  // export declare function CFArrayAppendValue(theArray: any[], value: any): void;

  // export declare function CFArrayApplyFunction(theArray: any[], range: CFRange, applier: (p1: any, p2: any) => void, context: any): void;

  // export declare function CFArrayBSearchValues(theArray: any[], range: CFRange, value: any, comparator: (p1: any, p2: any, p3: any) => CFComparisonResult, context: any): number;

  // struct
  interface CFArrayCallBacks {
    version: number;
    retain: (p1: any, p2: any) => any;
    release: (p1: any, p2: any) => void;
    copyDescription: (p1: any) => string;
    equal: (p1: any, p2: any) => boolean;
  }

  // export declare function CFArrayContainsValue(theArray: any[], range: CFRange, value: any): boolean;

  // export declare function CFArrayCreate(allocator: any, values: any, numValues: number, callBacks: CFArrayCallBacks): any[];

  // export declare function CFArrayCreateCopy(allocator: any, theArray: any[]): any[];

  // export declare function CFArrayCreateMutable(allocator: any, capacity: number, callBacks: CFArrayCallBacks): any[];

  // export declare function CFArrayCreateMutableCopy(allocator: any, capacity: number, theArray: any[]): any[];

  // export declare function CFArrayExchangeValuesAtIndices(theArray: any[], idx1: number, idx2: number): void;

  // export declare function CFArrayGetCount(theArray: any[]): number;

  // export declare function CFArrayGetCountOfValue(theArray: any[], range: CFRange, value: any): number;

  // export declare function CFArrayGetFirstIndexOfValue(theArray: any[], range: CFRange, value: any): number;

  // export declare function CFArrayGetLastIndexOfValue(theArray: any[], range: CFRange, value: any): number;

  // export declare function CFArrayGetTypeID(): number;

  // export declare function CFArrayGetValueAtIndex(theArray: any[], idx: number): any;

  // export declare function CFArrayGetValues(theArray: any[], range: CFRange, values: any): void;

  // export declare function CFArrayInsertValueAtIndex(theArray: any[], idx: number, value: any): void;

  // export declare function CFArrayRemoveAllValues(theArray: any[]): void;

  // export declare function CFArrayRemoveValueAtIndex(theArray: any[], idx: number): void;

  // export declare function CFArrayReplaceValues(theArray: any[], range: CFRange, newValues: any, newCount: number): void;

  // export declare function CFArraySetValueAtIndex(theArray: any[], idx: number, value: any): void;

  // export declare function CFArraySortValues(theArray: any[], range: CFRange, comparator: (p1: any, p2: any, p3: any) => CFComparisonResult, context: any): void;

  // export declare function CFAttributedStringBeginEditing(aStr: NSAttributedString): void;

  // export declare function CFAttributedStringCreate(alloc: any, str: string, attributes: Map<any, any>): NSAttributedString;

  // export declare function CFAttributedStringCreateCopy(alloc: any, aStr: NSAttributedString): NSAttributedString;

  // export declare function CFAttributedStringCreateMutable(alloc: any, maxLength: number): NSAttributedString;

  // export declare function CFAttributedStringCreateMutableCopy(alloc: any, maxLength: number, aStr: NSAttributedString): NSAttributedString;

  // export declare function CFAttributedStringCreateWithSubstring(alloc: any, aStr: NSAttributedString, range: CFRange): NSAttributedString;

  // export declare function CFAttributedStringEndEditing(aStr: NSAttributedString): void;

  // export declare function CFAttributedStringGetAttribute(aStr: NSAttributedString, loc: number, attrName: string, effectiveRange: CFRange): any;

  // export declare function CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: NSAttributedString, loc: number, attrName: string, inRange: CFRange, longestEffectiveRange: CFRange): any;

  // export declare function CFAttributedStringGetAttributes(aStr: NSAttributedString, loc: number, effectiveRange: CFRange): Map<any, any>;

  // export declare function CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: NSAttributedString, loc: number, inRange: CFRange, longestEffectiveRange: CFRange): Map<any, any>;

  // export declare function CFAttributedStringGetLength(aStr: NSAttributedString): number;

  // export declare function CFAttributedStringGetMutableString(aStr: NSAttributedString): string;

  // export declare function CFAttributedStringGetString(aStr: NSAttributedString): string;

  // export declare function CFAttributedStringGetTypeID(): number;

  // export declare function CFAttributedStringRemoveAttribute(aStr: NSAttributedString, range: CFRange, attrName: string): void;

  // export declare function CFAttributedStringReplaceAttributedString(aStr: NSAttributedString, range: CFRange, replacement: NSAttributedString): void;

  // export declare function CFAttributedStringReplaceString(aStr: NSAttributedString, range: CFRange, replacement: string): void;

  // export declare function CFAttributedStringSetAttribute(aStr: NSAttributedString, range: CFRange, attrName: string, value: any): void;

  // export declare function CFAttributedStringSetAttributes(aStr: NSAttributedString, range: CFRange, replacement: Map<any, any>, clearOtherAttributes: boolean): void;

  // export declare function CFAutorelease(arg: any): any;

  // export declare function CFBagAddValue(theBag: any, value: any): void;

  // export declare function CFBagApplyFunction(theBag: any, applier: (p1: any, p2: any) => void, context: any): void;

  // struct
  interface CFBagCallBacks {
    version: number;
    retain: (p1: any, p2: any) => any;
    release: (p1: any, p2: any) => void;
    copyDescription: (p1: any) => string;
    equal: (p1: any, p2: any) => boolean;
    hash: (p1: any) => number;
  }

  // export declare function CFBagContainsValue(theBag: any, value: any): boolean;

  // export declare function CFBagCreate(allocator: any, values: any, numValues: number, callBacks: CFBagCallBacks): any;

  // export declare function CFBagCreateCopy(allocator: any, theBag: any): any;

  // export declare function CFBagCreateMutable(allocator: any, capacity: number, callBacks: CFBagCallBacks): any;

  // export declare function CFBagCreateMutableCopy(allocator: any, capacity: number, theBag: any): any;

  // export declare function CFBagGetCount(theBag: any): number;

  // export declare function CFBagGetCountOfValue(theBag: any, value: any): number;

  // export declare function CFBagGetTypeID(): number;

  // export declare function CFBagGetValue(theBag: any, value: any): any;

  // export declare function CFBagGetValueIfPresent(theBag: any, candidate: any, value: any): boolean;

  // export declare function CFBagGetValues(theBag: any, values: any): void;

  // export declare function CFBagRemoveAllValues(theBag: any): void;

  // export declare function CFBagRemoveValue(theBag: any, value: any): void;

  // export declare function CFBagReplaceValue(theBag: any, value: any): void;

  // export declare function CFBagSetValue(theBag: any, value: any): void;

  // export declare function CFBinaryHeapAddValue(heap: any, value: any): void;

  // export declare function CFBinaryHeapApplyFunction(heap: any, applier: (p1: any, p2: any) => void, context: any): void;

  // struct
  interface CFBinaryHeapCallBacks {
    version: number;
    retain: (p1: any, p2: any) => any;
    release: (p1: any, p2: any) => void;
    copyDescription: (p1: any) => string;
    compare: (p1: any, p2: any, p3: any) => CFComparisonResult;
  }

  // struct
  interface CFBinaryHeapCompareContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFBinaryHeapContainsValue(heap: any, value: any): boolean;

  // export declare function CFBinaryHeapCreate(allocator: any, capacity: number, callBacks: CFBinaryHeapCallBacks, compareContext: CFBinaryHeapCompareContext): any;

  // export declare function CFBinaryHeapCreateCopy(allocator: any, capacity: number, heap: any): any;

  // export declare function CFBinaryHeapGetCount(heap: any): number;

  // export declare function CFBinaryHeapGetCountOfValue(heap: any, value: any): number;

  // export declare function CFBinaryHeapGetMinimum(heap: any): any;

  // export declare function CFBinaryHeapGetMinimumIfPresent(heap: any, value: any): boolean;

  // export declare function CFBinaryHeapGetTypeID(): number;

  // export declare function CFBinaryHeapGetValues(heap: any, values: any): void;

  // export declare function CFBinaryHeapRemoveAllValues(heap: any): void;

  // export declare function CFBinaryHeapRemoveMinimumValue(heap: any): void;

  // export declare function CFBitVectorContainsBit(bv: any, range: CFRange, value: number): boolean;

  // export declare function CFBitVectorCreate(allocator: any, bytes: string | any, numBits: number): any;

  // export declare function CFBitVectorCreateCopy(allocator: any, bv: any): any;

  // export declare function CFBitVectorCreateMutable(allocator: any, capacity: number): any;

  // export declare function CFBitVectorCreateMutableCopy(allocator: any, capacity: number, bv: any): any;

  // export declare function CFBitVectorFlipBitAtIndex(bv: any, idx: number): void;

  // export declare function CFBitVectorFlipBits(bv: any, range: CFRange): void;

  // export declare function CFBitVectorGetBitAtIndex(bv: any, idx: number): number;

  // export declare function CFBitVectorGetBits(bv: any, range: CFRange, bytes: string | any): void;

  // export declare function CFBitVectorGetCount(bv: any): number;

  // export declare function CFBitVectorGetCountOfBit(bv: any, range: CFRange, value: number): number;

  // export declare function CFBitVectorGetFirstIndexOfBit(bv: any, range: CFRange, value: number): number;

  // export declare function CFBitVectorGetLastIndexOfBit(bv: any, range: CFRange, value: number): number;

  // export declare function CFBitVectorGetTypeID(): number;

  // export declare function CFBitVectorSetAllBits(bv: any, value: number): void;

  // export declare function CFBitVectorSetBitAtIndex(bv: any, idx: number, value: number): void;

  // export declare function CFBitVectorSetBits(bv: any, range: CFRange, value: number): void;

  // export declare function CFBitVectorSetCount(bv: any, count: number): void;

  // export declare function CFBooleanGetTypeID(): number;

  // export declare function CFBooleanGetValue(boolean: number): boolean;

  // export declare function CFBundleCopyAuxiliaryExecutableURL(bundle: any, executableName: string): NSURL;

  // export declare function CFBundleCopyBuiltInPlugInsURL(bundle: any): NSURL;

  // export declare function CFBundleCopyBundleLocalizations(bundle: any): any[];

  // export declare function CFBundleCopyBundleURL(bundle: any): NSURL;

  // export declare function CFBundleCopyExecutableArchitectures(bundle: any): any[];

  // export declare function CFBundleCopyExecutableArchitecturesForURL(url: NSURL): any[];

  // export declare function CFBundleCopyExecutableURL(bundle: any): NSURL;

  // export declare function CFBundleCopyInfoDictionaryForURL(url: NSURL): Map<any, any>;

  // export declare function CFBundleCopyInfoDictionaryInDirectory(bundleURL: NSURL): Map<any, any>;

  // export declare function CFBundleCopyLocalizationsForPreferences(locArray: any[], prefArray: any[]): any[];

  // export declare function CFBundleCopyLocalizationsForURL(url: NSURL): any[];

  // export declare function CFBundleCopyLocalizedString(bundle: any, key: string, value: string, tableName: string): string;

  // export declare function CFBundleCopyPreferredLocalizationsFromArray(locArray: any[]): any[];

  // export declare function CFBundleCopyPrivateFrameworksURL(bundle: any): NSURL;

  // export declare function CFBundleCopyResourceURL(bundle: any, resourceName: string, resourceType: string, subDirName: string): NSURL;

  // export declare function CFBundleCopyResourceURLForLocalization(bundle: any, resourceName: string, resourceType: string, subDirName: string, localizationName: string): NSURL;

  // export declare function CFBundleCopyResourceURLInDirectory(bundleURL: NSURL, resourceName: string, resourceType: string, subDirName: string): NSURL;

  // export declare function CFBundleCopyResourceURLsOfType(bundle: any, resourceType: string, subDirName: string): any[];

  // export declare function CFBundleCopyResourceURLsOfTypeForLocalization(bundle: any, resourceType: string, subDirName: string, localizationName: string): any[];

  // export declare function CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: NSURL, resourceType: string, subDirName: string): any[];

  // export declare function CFBundleCopyResourcesDirectoryURL(bundle: any): NSURL;

  // export declare function CFBundleCopySharedFrameworksURL(bundle: any): NSURL;

  // export declare function CFBundleCopySharedSupportURL(bundle: any): NSURL;

  // export declare function CFBundleCopySupportFilesDirectoryURL(bundle: any): NSURL;

  // export declare function CFBundleCreate(allocator: any, bundleURL: NSURL): any;

  // export declare function CFBundleCreateBundlesFromDirectory(allocator: any, directoryURL: NSURL, bundleType: string): any[];

  // export declare function CFBundleGetAllBundles(): any[];

  // export declare function CFBundleGetBundleWithIdentifier(bundleID: string): any;

  // export declare function CFBundleGetDataPointerForName(bundle: any, symbolName: string): any;

  // export declare function CFBundleGetDataPointersForNames(bundle: any, symbolNames: any[], stbl: any): void;

  // export declare function CFBundleGetDevelopmentRegion(bundle: any): string;

  // export declare function CFBundleGetFunctionPointerForName(bundle: any, functionName: string): any;

  // export declare function CFBundleGetFunctionPointersForNames(bundle: any, functionNames: any[], ftbl: any): void;

  // export declare function CFBundleGetIdentifier(bundle: any): string;

  // export declare function CFBundleGetInfoDictionary(bundle: any): Map<any, any>;

  // export declare function CFBundleGetLocalInfoDictionary(bundle: any): Map<any, any>;

  // export declare function CFBundleGetMainBundle(): any;

  // export declare function CFBundleGetPackageInfo(bundle: any, packageType: number, packageCreator: number): void;

  // export declare function CFBundleGetPackageInfoInDirectory(url: NSURL, packageType: number, packageCreator: number): boolean;

  // export declare function CFBundleGetPlugIn(bundle: any): any;

  // export declare function CFBundleGetTypeID(): number;

  // export declare function CFBundleGetValueForInfoDictionaryKey(bundle: any, key: string): any;

  // export declare function CFBundleGetVersionNumber(bundle: any): number;

  // export declare function CFBundleIsExecutableLoaded(bundle: any): boolean;

  // export declare function CFBundleLoadExecutable(bundle: any): boolean;

  // export declare function CFBundleLoadExecutableAndReturnError(bundle: any, error: Error): boolean;

  // export declare function CFBundlePreflightExecutable(bundle: any, error: Error): boolean;

  // export declare function CFBundleUnloadExecutable(bundle: any): void;

  // export declare function CFCalendarCopyCurrent(): NSCalendar;

  // export declare function CFCalendarCopyLocale(calendar: NSCalendar): NSLocale;

  // export declare function CFCalendarCopyTimeZone(calendar: NSCalendar): NSTimeZone;

  // export declare function CFCalendarCreateWithIdentifier(allocator: any, identifier: any): NSCalendar;

  // export declare function CFCalendarGetFirstWeekday(calendar: NSCalendar): number;

  // export declare function CFCalendarGetIdentifier(calendar: NSCalendar): any;

  // export declare function CFCalendarGetMaximumRangeOfUnit(calendar: NSCalendar, unit: CFCalendarUnit): CFRange;

  // export declare function CFCalendarGetMinimumDaysInFirstWeek(calendar: NSCalendar): number;

  // export declare function CFCalendarGetMinimumRangeOfUnit(calendar: NSCalendar, unit: CFCalendarUnit): CFRange;

  // export declare function CFCalendarGetOrdinalityOfUnit(calendar: NSCalendar, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: number): number;

  // export declare function CFCalendarGetRangeOfUnit(calendar: NSCalendar, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: number): CFRange;

  // export declare function CFCalendarGetTimeRangeOfUnit(calendar: NSCalendar, unit: CFCalendarUnit, at: number, startp: number, tip: number): boolean;

  // export declare function CFCalendarGetTypeID(): number;

  // export declare function CFCalendarSetFirstWeekday(calendar: NSCalendar, wkdy: number): void;

  // export declare function CFCalendarSetLocale(calendar: NSCalendar, locale: NSLocale): void;

  // export declare function CFCalendarSetMinimumDaysInFirstWeek(calendar: NSCalendar, mwd: number): void;

  // export declare function CFCalendarSetTimeZone(calendar: NSCalendar, tz: NSTimeZone): void;

  // export declare function CFCharacterSetAddCharactersInRange(theSet: NSCharacterSet, theRange: CFRange): void;

  // export declare function CFCharacterSetAddCharactersInString(theSet: NSCharacterSet, theString: string): void;

  // export declare function CFCharacterSetCreateBitmapRepresentation(alloc: any, theSet: NSCharacterSet): NSData;

  // export declare function CFCharacterSetCreateCopy(alloc: any, theSet: NSCharacterSet): NSCharacterSet;

  // export declare function CFCharacterSetCreateInvertedSet(alloc: any, theSet: NSCharacterSet): NSCharacterSet;

  // export declare function CFCharacterSetCreateMutable(alloc: any): NSCharacterSet;

  // export declare function CFCharacterSetCreateMutableCopy(alloc: any, theSet: NSCharacterSet): NSCharacterSet;

  // export declare function CFCharacterSetCreateWithBitmapRepresentation(alloc: any, theData: NSData): NSCharacterSet;

  // export declare function CFCharacterSetCreateWithCharactersInRange(alloc: any, theRange: CFRange): NSCharacterSet;

  // export declare function CFCharacterSetCreateWithCharactersInString(alloc: any, theString: string): NSCharacterSet;

  // export declare function CFCharacterSetGetPredefined(theSetIdentifier: CFCharacterSetPredefinedSet): NSCharacterSet;

  // export declare function CFCharacterSetGetTypeID(): number;

  // export declare function CFCharacterSetHasMemberInPlane(theSet: NSCharacterSet, thePlane: number): boolean;

  // export declare function CFCharacterSetIntersect(theSet: NSCharacterSet, theOtherSet: NSCharacterSet): void;

  // export declare function CFCharacterSetInvert(theSet: NSCharacterSet): void;

  // export declare function CFCharacterSetIsCharacterMember(theSet: NSCharacterSet, theChar: number): boolean;

  // export declare function CFCharacterSetIsLongCharacterMember(theSet: NSCharacterSet, theChar: number): boolean;

  // export declare function CFCharacterSetIsSupersetOfSet(theSet: NSCharacterSet, theOtherset: NSCharacterSet): boolean;

  // export declare function CFCharacterSetRemoveCharactersInRange(theSet: NSCharacterSet, theRange: CFRange): void;

  // export declare function CFCharacterSetRemoveCharactersInString(theSet: NSCharacterSet, theString: string): void;

  // export declare function CFCharacterSetUnion(theSet: NSCharacterSet, theOtherSet: NSCharacterSet): void;

  // export declare function CFCopyDescription(cf: any): string;

  // export declare function CFCopyTypeIDDescription(type_id: number): string;

  // export declare function CFDataAppendBytes(theData: NSData, bytes: string | any, length: number): void;

  // export declare function CFDataCreate(allocator: any, bytes: string | any, length: number): NSData;

  // export declare function CFDataCreateCopy(allocator: any, theData: NSData): NSData;

  // export declare function CFDataCreateMutable(allocator: any, capacity: number): NSData;

  // export declare function CFDataCreateMutableCopy(allocator: any, capacity: number, theData: NSData): NSData;

  // export declare function CFDataCreateWithBytesNoCopy(allocator: any, bytes: string | any, length: number, bytesDeallocator: any): NSData;

  // export declare function CFDataDeleteBytes(theData: NSData, range: CFRange): void;

  // export declare function CFDataFind(theData: NSData, dataToFind: NSData, searchRange: CFRange, compareOptions: CFDataSearchFlags): CFRange;

  // export declare function CFDataGetBytePtr(theData: NSData): string;

  // export declare function CFDataGetBytes(theData: NSData, range: CFRange, buffer: string | any): void;

  // export declare function CFDataGetLength(theData: NSData): number;

  // export declare function CFDataGetMutableBytePtr(theData: NSData): string;

  // export declare function CFDataGetTypeID(): number;

  // export declare function CFDataIncreaseLength(theData: NSData, extraLength: number): void;

  // export declare function CFDataReplaceBytes(theData: NSData, range: CFRange, newBytes: string | any, newLength: number): void;

  // export declare function CFDataSetLength(theData: NSData, length: number): void;

  // export declare function CFDateCompare(theDate: Date, otherDate: Date, context: any): CFComparisonResult;

  // export declare function CFDateCreate(allocator: any, at: number): Date;

  // export declare function CFDateFormatterCopyProperty(formatter: any, key: any): any;

  // export declare function CFDateFormatterCreate(allocator: any, locale: NSLocale, dateStyle: CFDateFormatterStyle, timeStyle: CFDateFormatterStyle): any;

  // export declare function CFDateFormatterCreateDateFormatFromTemplate(allocator: any, tmplate: string, options: number, locale: NSLocale): string;

  // export declare function CFDateFormatterCreateDateFromString(allocator: any, formatter: any, string: string, rangep: CFRange): Date;

  // export declare function CFDateFormatterCreateISO8601Formatter(allocator: any, formatOptions: CFISO8601DateFormatOptions): any;

  // export declare function CFDateFormatterCreateStringWithAbsoluteTime(allocator: any, formatter: any, at: number): string;

  // export declare function CFDateFormatterCreateStringWithDate(allocator: any, formatter: any, date: Date): string;

  // export declare function CFDateFormatterGetAbsoluteTimeFromString(formatter: any, string: string, rangep: CFRange, atp: number): boolean;

  // export declare function CFDateFormatterGetDateStyle(formatter: any): CFDateFormatterStyle;

  // export declare function CFDateFormatterGetFormat(formatter: any): string;

  // export declare function CFDateFormatterGetLocale(formatter: any): NSLocale;

  // export declare function CFDateFormatterGetTimeStyle(formatter: any): CFDateFormatterStyle;

  // export declare function CFDateFormatterGetTypeID(): number;

  // export declare function CFDateFormatterSetFormat(formatter: any, formatString: string): void;

  // export declare function CFDateFormatterSetProperty(formatter: any, key: string, value: any): void;

  // export declare function CFDateGetAbsoluteTime(theDate: Date): number;

  // export declare function CFDateGetTimeIntervalSinceDate(theDate: Date, otherDate: Date): number;

  // export declare function CFDateGetTypeID(): number;

  // export declare function CFDictionaryAddValue(theDict: Map<any, any>, key: any, value: any): void;

  // export declare function CFDictionaryApplyFunction(theDict: Map<any, any>, applier: (p1: any, p2: any, p3: any) => void, context: any): void;

  // export declare function CFDictionaryContainsKey(theDict: Map<any, any>, key: any): boolean;

  // export declare function CFDictionaryContainsValue(theDict: Map<any, any>, value: any): boolean;

  // export declare function CFDictionaryCreate(allocator: any, keys: any, values: any, numValues: number, keyCallBacks: CFDictionaryKeyCallBacks, valueCallBacks: CFDictionaryValueCallBacks): Map<any, any>;

  // export declare function CFDictionaryCreateCopy(allocator: any, theDict: Map<any, any>): Map<any, any>;

  // export declare function CFDictionaryCreateMutable(allocator: any, capacity: number, keyCallBacks: CFDictionaryKeyCallBacks, valueCallBacks: CFDictionaryValueCallBacks): Map<any, any>;

  // export declare function CFDictionaryCreateMutableCopy(allocator: any, capacity: number, theDict: Map<any, any>): Map<any, any>;

  // export declare function CFDictionaryGetCount(theDict: Map<any, any>): number;

  // export declare function CFDictionaryGetCountOfKey(theDict: Map<any, any>, key: any): number;

  // export declare function CFDictionaryGetCountOfValue(theDict: Map<any, any>, value: any): number;

  // export declare function CFDictionaryGetKeysAndValues(theDict: Map<any, any>, keys: any, values: any): void;

  // export declare function CFDictionaryGetTypeID(): number;

  // export declare function CFDictionaryGetValue(theDict: Map<any, any>, key: any): any;

  // export declare function CFDictionaryGetValueIfPresent(theDict: Map<any, any>, key: any, value: any): boolean;

  // struct
  interface CFDictionaryKeyCallBacks {
    version: number;
    retain: (p1: any, p2: any) => any;
    release: (p1: any, p2: any) => void;
    copyDescription: (p1: any) => string;
    equal: (p1: any, p2: any) => boolean;
    hash: (p1: any) => number;
  }

  // export declare function CFDictionaryRemoveAllValues(theDict: Map<any, any>): void;

  // export declare function CFDictionaryRemoveValue(theDict: Map<any, any>, key: any): void;

  // export declare function CFDictionaryReplaceValue(theDict: Map<any, any>, key: any, value: any): void;

  // export declare function CFDictionarySetValue(theDict: Map<any, any>, key: any, value: any): void;

  // struct
  interface CFDictionaryValueCallBacks {
    version: number;
    retain: (p1: any, p2: any) => any;
    release: (p1: any, p2: any) => void;
    copyDescription: (p1: any) => string;
    equal: (p1: any, p2: any) => boolean;
  }

  // export declare function CFEqual(cf1: any, cf2: any): boolean;

  // export declare function CFErrorCopyDescription(err: NSError): string;

  // export declare function CFErrorCopyFailureReason(err: NSError): string;

  // export declare function CFErrorCopyRecoverySuggestion(err: NSError): string;

  // export declare function CFErrorCopyUserInfo(err: NSError): Map<any, any>;

  // export declare function CFErrorCreate(allocator: any, domain: any, code: number, userInfo: Map<any, any>): NSError;

  // export declare function CFErrorCreateWithUserInfoKeysAndValues(allocator: any, domain: any, code: number, userInfoKeys: any, userInfoValues: any, numUserInfoValues: number): NSError;

  // export declare function CFErrorGetCode(err: NSError): number;

  // export declare function CFErrorGetDomain(err: NSError): any;

  // export declare function CFErrorGetTypeID(): number;

  // struct
  interface CFFileDescriptorContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFFileDescriptorCreate(allocator: any, fd: number, closeOnInvalidate: boolean, callout: (p1: any, p2: number, p3: any) => void, context: CFFileDescriptorContext): any;

  // export declare function CFFileDescriptorCreateRunLoopSource(allocator: any, f: any, order: number): any;

  // export declare function CFFileDescriptorDisableCallBacks(f: any, callBackTypes: number): void;

  // export declare function CFFileDescriptorEnableCallBacks(f: any, callBackTypes: number): void;

  // export declare function CFFileDescriptorGetContext(f: any, context: CFFileDescriptorContext): void;

  // export declare function CFFileDescriptorGetNativeDescriptor(f: any): number;

  // export declare function CFFileDescriptorGetTypeID(): number;

  // export declare function CFFileDescriptorInvalidate(f: any): void;

  // export declare function CFFileDescriptorIsValid(f: any): boolean;

  // export declare function CFFileSecurityClearProperties(fileSec: NSFileSecurity, clearPropertyMask: CFFileSecurityClearOptions): boolean;

  // export declare function CFFileSecurityCopyAccessControlList(fileSec: NSFileSecurity, accessControlList: any): boolean;

  // export declare function CFFileSecurityCopyGroupUUID(fileSec: NSFileSecurity, groupUUID: any): boolean;

  // export declare function CFFileSecurityCopyOwnerUUID(fileSec: NSFileSecurity, ownerUUID: any): boolean;

  // export declare function CFFileSecurityCreate(allocator: any): NSFileSecurity;

  // export declare function CFFileSecurityCreateCopy(allocator: any, fileSec: NSFileSecurity): NSFileSecurity;

  // export declare function CFFileSecurityGetGroup(fileSec: NSFileSecurity, group: number): boolean;

  // export declare function CFFileSecurityGetMode(fileSec: NSFileSecurity, mode: number): boolean;

  // export declare function CFFileSecurityGetOwner(fileSec: NSFileSecurity, owner: number): boolean;

  // export declare function CFFileSecurityGetTypeID(): number;

  // export declare function CFFileSecuritySetAccessControlList(fileSec: NSFileSecurity, accessControlList: any): boolean;

  // export declare function CFFileSecuritySetGroup(fileSec: NSFileSecurity, group: number): boolean;

  // export declare function CFFileSecuritySetGroupUUID(fileSec: NSFileSecurity, groupUUID: any): boolean;

  // export declare function CFFileSecuritySetMode(fileSec: NSFileSecurity, mode: number): boolean;

  // export declare function CFFileSecuritySetOwner(fileSec: NSFileSecurity, owner: number): boolean;

  // export declare function CFFileSecuritySetOwnerUUID(fileSec: NSFileSecurity, ownerUUID: any): boolean;

  // export declare function CFGetAllocator(cf: any): any;

  // export declare function CFGetRetainCount(cf: any): number;

  // export declare function CFGetTypeID(cf: any): number;

  // struct
  interface CFGregorianDate {
    year: number;
    month: number;
    day: number;
    hour: number;
    minute: number;
    second: number;
  }

  // struct
  interface CFGregorianUnits {
    years: number;
    months: number;
    days: number;
    hours: number;
    minutes: number;
    seconds: number;
  }

  // export declare function CFHash(cf: any): number;

  // export declare function CFLocaleCopyAvailableLocaleIdentifiers(): any[];

  // export declare function CFLocaleCopyCommonISOCurrencyCodes(): any[];

  // export declare function CFLocaleCopyCurrent(): NSLocale;

  // export declare function CFLocaleCopyDisplayNameForPropertyValue(displayLocale: NSLocale, key: any, value: string): string;

  // export declare function CFLocaleCopyISOCountryCodes(): any[];

  // export declare function CFLocaleCopyISOCurrencyCodes(): any[];

  // export declare function CFLocaleCopyISOLanguageCodes(): any[];

  // export declare function CFLocaleCopyPreferredLanguages(): any[];

  // export declare function CFLocaleCreate(allocator: any, localeIdentifier: any): NSLocale;

  // export declare function CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: any, localeIdentifier: string): any;

  // export declare function CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: any, lcode: number, rcode: number): any;

  // export declare function CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: any, localeIdentifier: string): any;

  // export declare function CFLocaleCreateComponentsFromLocaleIdentifier(allocator: any, localeID: any): Map<any, any>;

  // export declare function CFLocaleCreateCopy(allocator: any, locale: NSLocale): NSLocale;

  // export declare function CFLocaleCreateLocaleIdentifierFromComponents(allocator: any, dictionary: Map<any, any>): any;

  // export declare function CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: any, lcid: number): any;

  // export declare function CFLocaleGetIdentifier(locale: NSLocale): any;

  // export declare function CFLocaleGetLanguageCharacterDirection(isoLangCode: string): CFLocaleLanguageDirection;

  // export declare function CFLocaleGetLanguageLineDirection(isoLangCode: string): CFLocaleLanguageDirection;

  // export declare function CFLocaleGetSystem(): NSLocale;

  // export declare function CFLocaleGetTypeID(): number;

  // export declare function CFLocaleGetValue(locale: NSLocale, key: any): any;

  // export declare function CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: any): number;

  // struct
  interface CFMachPortContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFMachPortCreate(allocator: any, callout: (p1: NSMachPort, p2: any, p3: number, p4: any) => void, context: CFMachPortContext, shouldFreeInfo: string | any): NSMachPort;

  // export declare function CFMachPortCreateRunLoopSource(allocator: any, port: NSMachPort, order: number): any;

  // export declare function CFMachPortCreateWithPort(allocator: any, portNum: number, callout: (p1: NSMachPort, p2: any, p3: number, p4: any) => void, context: CFMachPortContext, shouldFreeInfo: string | any): NSMachPort;

  // export declare function CFMachPortGetContext(port: NSMachPort, context: CFMachPortContext): void;

  // export declare function CFMachPortGetInvalidationCallBack(port: NSMachPort): (p1: NSMachPort, p2: any) => void;

  // export declare function CFMachPortGetPort(port: NSMachPort): number;

  // export declare function CFMachPortGetTypeID(): number;

  // export declare function CFMachPortInvalidate(port: NSMachPort): void;

  // export declare function CFMachPortIsValid(port: NSMachPort): boolean;

  // export declare function CFMachPortSetInvalidationCallBack(port: NSMachPort, callout: (p1: NSMachPort, p2: any) => void): void;

  // export declare function CFMakeCollectable(cf: any): any;

  // struct
  interface CFMessagePortContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFMessagePortCreateLocal(allocator: any, name: string, callout: (p1: MessagePort, p2: number, p3: NSData, p4: any) => NSData, context: CFMessagePortContext, shouldFreeInfo: string | any): MessagePort;

  // export declare function CFMessagePortCreateRemote(allocator: any, name: string): MessagePort;

  // export declare function CFMessagePortCreateRunLoopSource(allocator: any, local: MessagePort, order: number): any;

  // export declare function CFMessagePortGetContext(ms: MessagePort, context: CFMessagePortContext): void;

  // export declare function CFMessagePortGetInvalidationCallBack(ms: MessagePort): (p1: MessagePort, p2: any) => void;

  // export declare function CFMessagePortGetName(ms: MessagePort): string;

  // export declare function CFMessagePortGetTypeID(): number;

  // export declare function CFMessagePortInvalidate(ms: MessagePort): void;

  // export declare function CFMessagePortIsRemote(ms: MessagePort): boolean;

  // export declare function CFMessagePortIsValid(ms: MessagePort): boolean;

  // export declare function CFMessagePortSendRequest(remote: MessagePort, msgid: number, data: NSData, sendTimeout: number, rcvTimeout: number, replyMode: string, returnData: Data): number;

  // export declare function CFMessagePortSetDispatchQueue(ms: MessagePort, queue: NSObject): void;

  // export declare function CFMessagePortSetInvalidationCallBack(ms: MessagePort, callout: (p1: MessagePort, p2: any) => void): void;

  // export declare function CFMessagePortSetName(ms: MessagePort, newName: string): boolean;

  // export declare function CFNotificationCenterAddObserver(center: any, observer: any, callBack: (p1: any, p2: any, p3: any, p4: any, p5: Map<any, any>) => void, name: string, object_: any, suspensionBehavior: CFNotificationSuspensionBehavior): void;

  // export declare function CFNotificationCenterGetDarwinNotifyCenter(): any;

  // export declare function CFNotificationCenterGetDistributedCenter(): any;

  // export declare function CFNotificationCenterGetLocalCenter(): any;

  // export declare function CFNotificationCenterGetTypeID(): number;

  // export declare function CFNotificationCenterPostNotification(center: any, name: any, object_: any, userInfo: Map<any, any>, deliverImmediately: boolean): void;

  // export declare function CFNotificationCenterPostNotificationWithOptions(center: any, name: any, object_: any, userInfo: Map<any, any>, options: number): void;

  // export declare function CFNotificationCenterRemoveEveryObserver(center: any, observer: any): void;

  // export declare function CFNotificationCenterRemoveObserver(center: any, observer: any, name: any, object_: any): void;

  // export declare function CFNullGetTypeID(): number;

  // export declare function CFNumberCompare(number: number, otherNumber: number, context: any): CFComparisonResult;

  // export declare function CFNumberCreate(allocator: any, theType: CFNumberType, valuePtr: any): number;

  // export declare function CFNumberFormatterCopyProperty(formatter: any, key: any): any;

  // export declare function CFNumberFormatterCreate(allocator: any, locale: NSLocale, style: CFNumberFormatterStyle): any;

  // export declare function CFNumberFormatterCreateNumberFromString(allocator: any, formatter: any, string: string, rangep: CFRange, options: number): number;

  // export declare function CFNumberFormatterCreateStringWithNumber(allocator: any, formatter: any, number: number): string;

  // export declare function CFNumberFormatterCreateStringWithValue(allocator: any, formatter: any, numberType: CFNumberType, valuePtr: any): string;

  // export declare function CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: string, defaultFractionDigits: number, roundingIncrement: number): boolean;

  // export declare function CFNumberFormatterGetFormat(formatter: any): string;

  // export declare function CFNumberFormatterGetLocale(formatter: any): NSLocale;

  // export declare function CFNumberFormatterGetStyle(formatter: any): CFNumberFormatterStyle;

  // export declare function CFNumberFormatterGetTypeID(): number;

  // export declare function CFNumberFormatterGetValueFromString(formatter: any, string: string, rangep: CFRange, numberType: CFNumberType, valuePtr: any): boolean;

  // export declare function CFNumberFormatterSetFormat(formatter: any, formatString: string): void;

  // export declare function CFNumberFormatterSetProperty(formatter: any, key: any, value: any): void;

  // export declare function CFNumberGetByteSize(number: number): number;

  // export declare function CFNumberGetType(number: number): CFNumberType;

  // export declare function CFNumberGetTypeID(): number;

  // export declare function CFNumberGetValue(number: number, theType: CFNumberType, valuePtr: any): boolean;

  // export declare function CFNumberIsFloatType(number: number): boolean;

  // export declare function CFPlugInAddInstanceForFactory(factoryID: any): void;

  // export declare function CFPlugInCreate(allocator: any, plugInURL: NSURL): any;

  // export declare function CFPlugInFindFactoriesForPlugInType(typeUUID: any): any[];

  // export declare function CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: any, plugIn: any): any[];

  // export declare function CFPlugInGetBundle(plugIn: any): any;

  // export declare function CFPlugInGetTypeID(): number;

  // export declare function CFPlugInInstanceCreate(allocator: any, factoryUUID: any, typeUUID: any): any;

  // export declare function CFPlugInInstanceCreateWithInstanceDataSize(allocator: any, instanceDataSize: number, deallocateInstanceFunction: (p1: any) => void, factoryName: string, getInterfaceFunction: (p1: any, p2: string, p3: any) => boolean): any;

  // export declare function CFPlugInInstanceGetFactoryName(instance: any): string;

  // export declare function CFPlugInInstanceGetInstanceData(instance: any): any;

  // export declare function CFPlugInInstanceGetInterfaceFunctionTable(instance: any, interfaceName: string, ftbl: any): boolean;

  // export declare function CFPlugInInstanceGetTypeID(): number;

  // export declare function CFPlugInIsLoadOnDemand(plugIn: any): boolean;

  // export declare function CFPlugInRegisterFactoryFunction(factoryUUID: any, func: (p1: any, p2: any) => any): boolean;

  // export declare function CFPlugInRegisterFactoryFunctionByName(factoryUUID: any, plugIn: any, functionName: string): boolean;

  // export declare function CFPlugInRegisterPlugInType(factoryUUID: any, typeUUID: any): boolean;

  // export declare function CFPlugInRemoveInstanceForFactory(factoryID: any): void;

  // export declare function CFPlugInSetLoadOnDemand(plugIn: any, flag: boolean): void;

  // export declare function CFPlugInUnregisterFactory(factoryUUID: any): boolean;

  // export declare function CFPlugInUnregisterPlugInType(factoryUUID: any, typeUUID: any): boolean;

  // export declare function CFPreferencesAddSuitePreferencesToApp(applicationID: string, suiteID: string): void;

  // export declare function CFPreferencesAppSynchronize(applicationID: string): boolean;

  // export declare function CFPreferencesAppValueIsForced(key: string, applicationID: string): boolean;

  // export declare function CFPreferencesCopyAppValue(key: string, applicationID: string): any;

  // export declare function CFPreferencesCopyKeyList(applicationID: string, userName: string, hostName: string): any[];

  // export declare function CFPreferencesCopyMultiple(keysToFetch: any[], applicationID: string, userName: string, hostName: string): Map<any, any>;

  // export declare function CFPreferencesCopyValue(key: string, applicationID: string, userName: string, hostName: string): any;

  // export declare function CFPreferencesGetAppBooleanValue(key: string, applicationID: string, keyExistsAndHasValidFormat: string | any): boolean;

  // export declare function CFPreferencesGetAppIntegerValue(key: string, applicationID: string, keyExistsAndHasValidFormat: string | any): number;

  // export declare function CFPreferencesRemoveSuitePreferencesFromApp(applicationID: string, suiteID: string): void;

  // export declare function CFPreferencesSetAppValue(key: string, value: any, applicationID: string): void;

  // export declare function CFPreferencesSetMultiple(keysToSet: Map<any, any>, keysToRemove: any[], applicationID: string, userName: string, hostName: string): void;

  // export declare function CFPreferencesSetValue(key: string, value: any, applicationID: string, userName: string, hostName: string): void;

  // export declare function CFPreferencesSynchronize(applicationID: string, userName: string, hostName: string): boolean;

  // export declare function CFPropertyListCreateData(allocator: any, propertyList: any, format: CFPropertyListFormat, options: number, error: Error): NSData;

  // export declare function CFPropertyListCreateDeepCopy(allocator: any, propertyList: any, mutabilityOption: number): any;

  // export declare function CFPropertyListCreateWithData(allocator: any, data: NSData, options: number, format: CFPropertyListFormat, error: Error): any;

  // export declare function CFPropertyListCreateWithStream(allocator: any, stream: InputStream, streamLength: number, options: number, format: CFPropertyListFormat, error: Error): any;

  // export declare function CFPropertyListIsValid(plist: any, format: CFPropertyListFormat): boolean;

  // export declare function CFPropertyListWrite(propertyList: any, stream: OutputStream, format: CFPropertyListFormat, options: number, error: Error): number;

  // struct
  interface CFRange {
    location: number;
    length: number;
  }

  // export declare function CFReadStreamClose(stream: InputStream): void;

  // export declare function CFReadStreamCopyDispatchQueue(stream: InputStream): NSObject;

  // export declare function CFReadStreamCopyError(stream: InputStream): NSError;

  // export declare function CFReadStreamCopyProperty(stream: InputStream, propertyName: any): any;

  // export declare function CFReadStreamCreateWithBytesNoCopy(alloc: any, bytes: string | any, length: number, bytesDeallocator: any): InputStream;

  // export declare function CFReadStreamCreateWithFile(alloc: any, fileURL: NSURL): InputStream;

  // export declare function CFReadStreamGetBuffer(stream: InputStream, maxBytesToRead: number, numBytesRead: number): string;

  // export declare function CFReadStreamGetError(stream: InputStream): CFStreamError;

  // export declare function CFReadStreamGetStatus(stream: InputStream): CFStreamStatus;

  // export declare function CFReadStreamGetTypeID(): number;

  // export declare function CFReadStreamHasBytesAvailable(stream: InputStream): boolean;

  // export declare function CFReadStreamOpen(stream: InputStream): boolean;

  // export declare function CFReadStreamRead(stream: InputStream, buffer: string | any, bufferLength: number): number;

  // export declare function CFReadStreamScheduleWithRunLoop(stream: InputStream, runLoop: any, runLoopMode: any): void;

  // export declare function CFReadStreamSetClient(stream: InputStream, streamEvents: number, clientCB: (p1: InputStream, p2: CFStreamEventType, p3: any) => void, clientContext: CFStreamClientContext): boolean;

  // export declare function CFReadStreamSetDispatchQueue(stream: InputStream, q: NSObject): void;

  // export declare function CFReadStreamSetProperty(stream: InputStream, propertyName: any, propertyValue: any): boolean;

  // export declare function CFReadStreamUnscheduleFromRunLoop(stream: InputStream, runLoop: any, runLoopMode: any): void;

  // export declare function CFRelease(cf: any): void;

  // export declare function CFRetain(cf: any): any;

  // export declare function CFRunLoopAddCommonMode(rl: any, mode: any): void;

  // export declare function CFRunLoopAddObserver(rl: any, observer: any, mode: any): void;

  // export declare function CFRunLoopAddSource(rl: any, source: any, mode: any): void;

  // export declare function CFRunLoopAddTimer(rl: any, timer: Timer, mode: any): void;

  // export declare function CFRunLoopContainsObserver(rl: any, observer: any, mode: any): boolean;

  // export declare function CFRunLoopContainsSource(rl: any, source: any, mode: any): boolean;

  // export declare function CFRunLoopContainsTimer(rl: any, timer: Timer, mode: any): boolean;

  // export declare function CFRunLoopCopyAllModes(rl: any): any[];

  // export declare function CFRunLoopCopyCurrentMode(rl: any): any;

  // export declare function CFRunLoopGetCurrent(): any;

  // export declare function CFRunLoopGetMain(): any;

  // export declare function CFRunLoopGetNextTimerFireDate(rl: any, mode: any): number;

  // export declare function CFRunLoopGetTypeID(): number;

  // export declare function CFRunLoopIsWaiting(rl: any): boolean;

  // struct
  interface CFRunLoopObserverContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFRunLoopObserverCreate(allocator: any, activities: number, repeats: boolean, order: number, callout: (p1: any, p2: CFRunLoopActivity, p3: any) => void, context: CFRunLoopObserverContext): any;

  // export declare function CFRunLoopObserverCreateWithHandler(allocator: any, activities: number, repeats: boolean, order: number, block: (p1: any, p2: CFRunLoopActivity) => void): any;

  // export declare function CFRunLoopObserverDoesRepeat(observer: any): boolean;

  // export declare function CFRunLoopObserverGetActivities(observer: any): number;

  // export declare function CFRunLoopObserverGetContext(observer: any, context: CFRunLoopObserverContext): void;

  // export declare function CFRunLoopObserverGetOrder(observer: any): number;

  // export declare function CFRunLoopObserverGetTypeID(): number;

  // export declare function CFRunLoopObserverInvalidate(observer: any): void;

  // export declare function CFRunLoopObserverIsValid(observer: any): boolean;

  // export declare function CFRunLoopPerformBlock(rl: any, mode: any, block: () => void): void;

  // export declare function CFRunLoopRemoveObserver(rl: any, observer: any, mode: any): void;

  // export declare function CFRunLoopRemoveSource(rl: any, source: any, mode: any): void;

  // export declare function CFRunLoopRemoveTimer(rl: any, timer: Timer, mode: any): void;

  // export declare function CFRunLoopRun(): void;

  // export declare function CFRunLoopRunInMode(mode: any, seconds: number, returnAfterSourceHandled: boolean): CFRunLoopRunResult;

  // struct
  interface CFRunLoopSourceContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
    equal: (p1: any, p2: any) => boolean;
    hash: (p1: any) => number;
    schedule: (p1: any, p2: any, p3: any) => void;
    cancel: (p1: any, p2: any, p3: any) => void;
    perform: (p1: any) => void;
  }

  // struct
  interface CFRunLoopSourceContext1 {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
    equal: (p1: any, p2: any) => boolean;
    hash: (p1: any) => number;
    getPort: (p1: any) => number;
    perform: (p1: any, p2: number, p3: any, p4: any) => any;
  }

  // export declare function CFRunLoopSourceCreate(allocator: any, order: number, context: CFRunLoopSourceContext): any;

  // export declare function CFRunLoopSourceGetContext(source: any, context: CFRunLoopSourceContext): void;

  // export declare function CFRunLoopSourceGetOrder(source: any): number;

  // export declare function CFRunLoopSourceGetTypeID(): number;

  // export declare function CFRunLoopSourceInvalidate(source: any): void;

  // export declare function CFRunLoopSourceIsValid(source: any): boolean;

  // export declare function CFRunLoopSourceSignal(source: any): void;

  // export declare function CFRunLoopStop(rl: any): void;

  // struct
  interface CFRunLoopTimerContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFRunLoopTimerCreate(allocator: any, fireDate: number, interval: number, flags: number, order: number, callout: (p1: Timer, p2: any) => void, context: CFRunLoopTimerContext): Timer;

  // export declare function CFRunLoopTimerCreateWithHandler(allocator: any, fireDate: number, interval: number, flags: number, order: number, block: (p1: Timer) => void): Timer;

  // export declare function CFRunLoopTimerDoesRepeat(timer: Timer): boolean;

  // export declare function CFRunLoopTimerGetContext(timer: Timer, context: CFRunLoopTimerContext): void;

  // export declare function CFRunLoopTimerGetInterval(timer: Timer): number;

  // export declare function CFRunLoopTimerGetNextFireDate(timer: Timer): number;

  // export declare function CFRunLoopTimerGetOrder(timer: Timer): number;

  // export declare function CFRunLoopTimerGetTolerance(timer: Timer): number;

  // export declare function CFRunLoopTimerGetTypeID(): number;

  // export declare function CFRunLoopTimerInvalidate(timer: Timer): void;

  // export declare function CFRunLoopTimerIsValid(timer: Timer): boolean;

  // export declare function CFRunLoopTimerSetNextFireDate(timer: Timer, fireDate: number): void;

  // export declare function CFRunLoopTimerSetTolerance(timer: Timer, tolerance: number): void;

  // export declare function CFRunLoopWakeUp(rl: any): void;

  // export declare function CFSetAddValue(theSet: NSSet<any>, value: any): void;

  // export declare function CFSetApplyFunction(theSet: NSSet<any>, applier: (p1: any, p2: any) => void, context: any): void;

  // struct
  interface CFSetCallBacks {
    version: number;
    retain: (p1: any, p2: any) => any;
    release: (p1: any, p2: any) => void;
    copyDescription: (p1: any) => string;
    equal: (p1: any, p2: any) => boolean;
    hash: (p1: any) => number;
  }

  // export declare function CFSetContainsValue(theSet: NSSet<any>, value: any): boolean;

  // export declare function CFSetCreate(allocator: any, values: any, numValues: number, callBacks: CFSetCallBacks): NSSet<any>;

  // export declare function CFSetCreateCopy(allocator: any, theSet: NSSet<any>): NSSet<any>;

  // export declare function CFSetCreateMutable(allocator: any, capacity: number, callBacks: CFSetCallBacks): NSSet<any>;

  // export declare function CFSetCreateMutableCopy(allocator: any, capacity: number, theSet: NSSet<any>): NSSet<any>;

  // export declare function CFSetGetCount(theSet: NSSet<any>): number;

  // export declare function CFSetGetCountOfValue(theSet: NSSet<any>, value: any): number;

  // export declare function CFSetGetTypeID(): number;

  // export declare function CFSetGetValue(theSet: NSSet<any>, value: any): any;

  // export declare function CFSetGetValueIfPresent(theSet: NSSet<any>, candidate: any, value: any): boolean;

  // export declare function CFSetGetValues(theSet: NSSet<any>, values: any): void;

  // export declare function CFSetRemoveAllValues(theSet: NSSet<any>): void;

  // export declare function CFSetRemoveValue(theSet: NSSet<any>, value: any): void;

  // export declare function CFSetReplaceValue(theSet: NSSet<any>, value: any): void;

  // export declare function CFSetSetValue(theSet: NSSet<any>, value: any): void;

  // export declare function CFShow(obj: any): void;

  // export declare function CFShowStr(str: string): void;

  // export declare function CFSocketConnectToAddress(s: any, address: NSData, timeout: number): CFSocketError;

  // struct
  interface CFSocketContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFSocketCopyAddress(s: any): NSData;

  // export declare function CFSocketCopyPeerAddress(s: any): NSData;

  // export declare function CFSocketCopyRegisteredSocketSignature(nameServerSignature: CFSocketSignature, timeout: number, name: string, signature: CFSocketSignature, nameServerAddress: Data): CFSocketError;

  // export declare function CFSocketCopyRegisteredValue(nameServerSignature: CFSocketSignature, timeout: number, name: string, value: any, nameServerAddress: Data): CFSocketError;

  // export declare function CFSocketCreate(allocator: any, protocolFamily: number, socketType: number, protocol: number, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext): any;

  // export declare function CFSocketCreateConnectedToSocketSignature(allocator: any, signature: CFSocketSignature, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext, timeout: number): any;

  // export declare function CFSocketCreateRunLoopSource(allocator: any, s: any, order: number): any;

  // export declare function CFSocketCreateWithNative(allocator: any, sock: number, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext): any;

  // export declare function CFSocketCreateWithSocketSignature(allocator: any, signature: CFSocketSignature, callBackTypes: number, callout: (p1: any, p2: CFSocketCallBackType, p3: NSData, p4: any, p5: any) => void, context: CFSocketContext): any;

  // export declare function CFSocketDisableCallBacks(s: any, callBackTypes: number): void;

  // export declare function CFSocketEnableCallBacks(s: any, callBackTypes: number): void;

  // export declare function CFSocketGetContext(s: any, context: CFSocketContext): void;

  // export declare function CFSocketGetDefaultNameRegistryPortNumber(): number;

  // export declare function CFSocketGetNative(s: any): number;

  // export declare function CFSocketGetSocketFlags(s: any): number;

  // export declare function CFSocketGetTypeID(): number;

  // export declare function CFSocketInvalidate(s: any): void;

  // export declare function CFSocketIsValid(s: any): boolean;

  // export declare function CFSocketRegisterSocketSignature(nameServerSignature: CFSocketSignature, timeout: number, name: string, signature: CFSocketSignature): CFSocketError;

  // export declare function CFSocketRegisterValue(nameServerSignature: CFSocketSignature, timeout: number, name: string, value: any): CFSocketError;

  // export declare function CFSocketSendData(s: any, address: NSData, data: NSData, timeout: number): CFSocketError;

  // export declare function CFSocketSetAddress(s: any, address: NSData): CFSocketError;

  // export declare function CFSocketSetDefaultNameRegistryPortNumber(port: number): void;

  // export declare function CFSocketSetSocketFlags(s: any, flags: number): void;

  // struct
  interface CFSocketSignature {
    protocolFamily: number;
    socketType: number;
    protocol: number;
    address: NSData;
  }

  // export declare function CFSocketUnregister(nameServerSignature: CFSocketSignature, timeout: number, name: string): CFSocketError;

  // struct
  interface CFStreamClientContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFStreamCreateBoundPair(alloc: any, readStream: InputStream, writeStream: OutputStream, transferBufferSize: number): void;

  // export declare function CFStreamCreatePairWithPeerSocketSignature(alloc: any, signature: CFSocketSignature, readStream: InputStream, writeStream: OutputStream): void;

  // export declare function CFStreamCreatePairWithSocket(alloc: any, sock: number, readStream: InputStream, writeStream: OutputStream): void;

  // export declare function CFStreamCreatePairWithSocketToHost(alloc: any, host: string, port: number, readStream: InputStream, writeStream: OutputStream): void;

  // struct
  interface CFStreamError {
    domain: number;
    error: number;
  }

  // export declare function CFStringAppend(theString: string, appendedString: string): void;

  // export declare function CFStringAppendCString(theString: string, cStr: string | any, encoding: number): void;

  // export declare function CFStringAppendCharacters(theString: string, chars: number, numChars: number): void;

  // export declare function CFStringAppendPascalString(theString: string, pStr: string | any, encoding: number): void;

  // export declare function CFStringCapitalize(theString: string, locale: NSLocale): void;

  // export declare function CFStringCompare(theString1: string, theString2: string, compareOptions: CFStringCompareFlags): CFComparisonResult;

  // export declare function CFStringCompareWithOptions(theString1: string, theString2: string, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags): CFComparisonResult;

  // export declare function CFStringCompareWithOptionsAndLocale(theString1: string, theString2: string, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags, locale: NSLocale): CFComparisonResult;

  // export declare function CFStringConvertEncodingToIANACharSetName(encoding: number): string;

  // export declare function CFStringConvertEncodingToNSStringEncoding(encoding: number): number;

  // export declare function CFStringConvertEncodingToWindowsCodepage(encoding: number): number;

  // export declare function CFStringConvertIANACharSetNameToEncoding(theString: string): number;

  // export declare function CFStringConvertNSStringEncodingToEncoding(encoding: number): number;

  // export declare function CFStringConvertWindowsCodepageToEncoding(codepage: number): number;

  // export declare function CFStringCreateArrayBySeparatingStrings(alloc: any, theString: string, separatorString: string): any[];

  // export declare function CFStringCreateArrayWithFindResults(alloc: any, theString: string, stringToFind: string, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags): any[];

  // export declare function CFStringCreateByCombiningStrings(alloc: any, theArray: any[], separatorString: string): string;

  // export declare function CFStringCreateCopy(alloc: any, theString: string): string;

  // export declare function CFStringCreateExternalRepresentation(alloc: any, theString: string, encoding: number, lossByte: number): NSData;

  // export declare function CFStringCreateFromExternalRepresentation(alloc: any, data: NSData, encoding: number): string;

  // export declare function CFStringCreateMutable(alloc: any, maxLength: number): string;

  // export declare function CFStringCreateMutableCopy(alloc: any, maxLength: number, theString: string): string;

  // export declare function CFStringCreateMutableWithExternalCharactersNoCopy(alloc: any, chars: number, numChars: number, capacity: number, externalCharactersAllocator: any): string;

  // export declare function CFStringCreateWithBytes(alloc: any, bytes: string | any, numBytes: number, encoding: number, isExternalRepresentation: boolean): string;

  // export declare function CFStringCreateWithBytesNoCopy(alloc: any, bytes: string | any, numBytes: number, encoding: number, isExternalRepresentation: boolean, contentsDeallocator: any): string;

  // export declare function CFStringCreateWithCString(alloc: any, cStr: string | any, encoding: number): string;

  // export declare function CFStringCreateWithCStringNoCopy(alloc: any, cStr: string | any, encoding: number, contentsDeallocator: any): string;

  // export declare function CFStringCreateWithCharacters(alloc: any, chars: number, numChars: number): string;

  // export declare function CFStringCreateWithCharactersNoCopy(alloc: any, chars: number, numChars: number, contentsDeallocator: any): string;

  // export declare function CFStringCreateWithFileSystemRepresentation(alloc: any, buffer: string | any): string;

  // export declare function CFStringCreateWithPascalString(alloc: any, pStr: string | any, encoding: number): string;

  // export declare function CFStringCreateWithPascalStringNoCopy(alloc: any, pStr: string | any, encoding: number, contentsDeallocator: any): string;

  // export declare function CFStringCreateWithSubstring(alloc: any, str: string, range: CFRange): string;

  // export declare function CFStringDelete(theString: string, range: CFRange): void;

  // export declare function CFStringFind(theString: string, stringToFind: string, compareOptions: CFStringCompareFlags): CFRange;

  // export declare function CFStringFindAndReplace(theString: string, stringToFind: string, replacementString: string, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags): number;

  // export declare function CFStringFindCharacterFromSet(theString: string, theSet: NSCharacterSet, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: CFRange): boolean;

  // export declare function CFStringFindWithOptions(theString: string, stringToFind: string, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: CFRange): boolean;

  // export declare function CFStringFindWithOptionsAndLocale(theString: string, stringToFind: string, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, locale: NSLocale, result: CFRange): boolean;

  // export declare function CFStringFold(theString: string, theFlags: CFStringCompareFlags, theLocale: NSLocale): void;

  // export declare function CFStringGetBytes(theString: string, range: CFRange, encoding: number, lossByte: number, isExternalRepresentation: boolean, buffer: string | any, maxBufLen: number, usedBufLen: number): number;

  // export declare function CFStringGetCString(theString: string, buffer: string | any, bufferSize: number, encoding: number): boolean;

  // export declare function CFStringGetCStringPtr(theString: string, encoding: number): string;

  // export declare function CFStringGetCharacterAtIndex(theString: string, idx: number): number;

  // export declare function CFStringGetCharacters(theString: string, range: CFRange, buffer: number): void;

  // export declare function CFStringGetCharactersPtr(theString: string): number;

  // export declare function CFStringGetDoubleValue(str: string): number;

  // export declare function CFStringGetFastestEncoding(theString: string): number;

  // export declare function CFStringGetFileSystemRepresentation(string: string, buffer: string | any, maxBufLen: number): boolean;

  // export declare function CFStringGetHyphenationLocationBeforeIndex(string: string, location: number, limitRange: CFRange, options: number, locale: NSLocale, character: number): number;

  // export declare function CFStringGetIntValue(str: string): number;

  // export declare function CFStringGetLength(theString: string): number;

  // export declare function CFStringGetLineBounds(theString: string, range: CFRange, lineBeginIndex: number, lineEndIndex: number, contentsEndIndex: number): void;

  // export declare function CFStringGetListOfAvailableEncodings(): number;

  // export declare function CFStringGetMaximumSizeForEncoding(length: number, encoding: number): number;

  // export declare function CFStringGetMaximumSizeOfFileSystemRepresentation(string: string): number;

  // export declare function CFStringGetMostCompatibleMacStringEncoding(encoding: number): number;

  // export declare function CFStringGetNameOfEncoding(encoding: number): string;

  // export declare function CFStringGetParagraphBounds(string: string, range: CFRange, parBeginIndex: number, parEndIndex: number, contentsEndIndex: number): void;

  // export declare function CFStringGetPascalString(theString: string, buffer: string | any, bufferSize: number, encoding: number): boolean;

  // export declare function CFStringGetPascalStringPtr(theString: string, encoding: number): string;

  // export declare function CFStringGetRangeOfComposedCharactersAtIndex(theString: string, theIndex: number): CFRange;

  // export declare function CFStringGetSmallestEncoding(theString: string): number;

  // export declare function CFStringGetSystemEncoding(): number;

  // export declare function CFStringGetTypeID(): number;

  // export declare function CFStringHasPrefix(theString: string, prefix: string): boolean;

  // export declare function CFStringHasSuffix(theString: string, suffix: string): boolean;

  // struct
  interface CFStringInlineBuffer {
    buffer: number;
    theString: string;
    directUniCharBuffer: number;
    directCStringBuffer: string;
    rangeToBuffer: CFRange;
    bufferedRangeStart: number;
    bufferedRangeEnd: number;
  }

  // export declare function CFStringInsert(str: string, idx: number, insertedStr: string): void;

  // export declare function CFStringIsEncodingAvailable(encoding: number): boolean;

  // export declare function CFStringIsHyphenationAvailableForLocale(locale: NSLocale): boolean;

  // export declare function CFStringLowercase(theString: string, locale: NSLocale): void;

  // export declare function CFStringNormalize(theString: string, theForm: CFStringNormalizationForm): void;

  // export declare function CFStringPad(theString: string, padString: string, length: number, indexIntoPad: number): void;

  // export declare function CFStringReplace(theString: string, range: CFRange, replacement: string): void;

  // export declare function CFStringReplaceAll(theString: string, replacement: string): void;

  // export declare function CFStringSetExternalCharactersNoCopy(theString: string, chars: number, length: number, capacity: number): void;

  // export declare function CFStringTokenizerAdvanceToNextToken(tokenizer: any): CFStringTokenizerTokenType;

  // export declare function CFStringTokenizerCopyBestStringLanguage(string: string, range: CFRange): string;

  // export declare function CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: any, attribute: number): any;

  // export declare function CFStringTokenizerCreate(alloc: any, string: string, range: CFRange, options: number, locale: NSLocale): any;

  // export declare function CFStringTokenizerGetCurrentSubTokens(tokenizer: any, ranges: CFRange, maxRangeLength: number, derivedSubTokens: any[]): number;

  // export declare function CFStringTokenizerGetCurrentTokenRange(tokenizer: any): CFRange;

  // export declare function CFStringTokenizerGetTypeID(): number;

  // export declare function CFStringTokenizerGoToTokenAtIndex(tokenizer: any, index: number): CFStringTokenizerTokenType;

  // export declare function CFStringTokenizerSetString(tokenizer: any, string: string, range: CFRange): void;

  // export declare function CFStringTransform(string: string, range: CFRange, transform: string, reverse: boolean): boolean;

  // export declare function CFStringTrim(theString: string, trimString: string): void;

  // export declare function CFStringTrimWhitespace(theString: string): void;

  // export declare function CFStringUppercase(theString: string, locale: NSLocale): void;

  // struct
  interface CFSwappedFloat32 {
    v: number;
  }

  // struct
  interface CFSwappedFloat64 {
    v: number;
  }

  // export declare function CFTimeZoneCopyAbbreviation(tz: NSTimeZone, at: number): string;

  // export declare function CFTimeZoneCopyAbbreviationDictionary(): Map<any, any>;

  // export declare function CFTimeZoneCopyDefault(): NSTimeZone;

  // export declare function CFTimeZoneCopyKnownNames(): any[];

  // export declare function CFTimeZoneCopyLocalizedName(tz: NSTimeZone, style: CFTimeZoneNameStyle, locale: NSLocale): string;

  // export declare function CFTimeZoneCopySystem(): NSTimeZone;

  // export declare function CFTimeZoneCreate(allocator: any, name: string, data: NSData): NSTimeZone;

  // export declare function CFTimeZoneCreateWithName(allocator: any, name: string, tryAbbrev: boolean): NSTimeZone;

  // export declare function CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: any, ti: number): NSTimeZone;

  // export declare function CFTimeZoneGetData(tz: NSTimeZone): NSData;

  // export declare function CFTimeZoneGetDaylightSavingTimeOffset(tz: NSTimeZone, at: number): number;

  // export declare function CFTimeZoneGetName(tz: NSTimeZone): string;

  // export declare function CFTimeZoneGetNextDaylightSavingTimeTransition(tz: NSTimeZone, at: number): number;

  // export declare function CFTimeZoneGetSecondsFromGMT(tz: NSTimeZone, at: number): number;

  // export declare function CFTimeZoneGetTypeID(): number;

  // export declare function CFTimeZoneIsDaylightSavingTime(tz: NSTimeZone, at: number): boolean;

  // export declare function CFTimeZoneResetSystem(): void;

  // export declare function CFTimeZoneSetAbbreviationDictionary(dict: Map<any, any>): void;

  // export declare function CFTimeZoneSetDefault(tz: NSTimeZone): void;

  // export declare function CFTreeAppendChild(tree: any, newChild: any): void;

  // export declare function CFTreeApplyFunctionToChildren(tree: any, applier: (p1: any, p2: any) => void, context: any): void;

  // struct
  interface CFTreeContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // export declare function CFTreeCreate(allocator: any, context: CFTreeContext): any;

  // export declare function CFTreeFindRoot(tree: any): any;

  // export declare function CFTreeGetChildAtIndex(tree: any, idx: number): any;

  // export declare function CFTreeGetChildCount(tree: any): number;

  // export declare function CFTreeGetChildren(tree: any, children: any): void;

  // export declare function CFTreeGetContext(tree: any, context: CFTreeContext): void;

  // export declare function CFTreeGetFirstChild(tree: any): any;

  // export declare function CFTreeGetNextSibling(tree: any): any;

  // export declare function CFTreeGetParent(tree: any): any;

  // export declare function CFTreeGetTypeID(): number;

  // export declare function CFTreeInsertSibling(tree: any, newSibling: any): void;

  // export declare function CFTreePrependChild(tree: any, newChild: any): void;

  // export declare function CFTreeRemove(tree: any): void;

  // export declare function CFTreeRemoveAllChildren(tree: any): void;

  // export declare function CFTreeSetContext(tree: any, context: CFTreeContext): void;

  // export declare function CFTreeSortChildren(tree: any, comparator: (p1: any, p2: any, p3: any) => CFComparisonResult, context: any): void;

  // export declare function CFURLCanBeDecomposed(anURL: NSURL): boolean;

  // export declare function CFURLClearResourcePropertyCache(url: NSURL): void;

  // export declare function CFURLClearResourcePropertyCacheForKey(url: NSURL, key: string): void;

  // export declare function CFURLCopyAbsoluteURL(relativeURL: NSURL): NSURL;

  // export declare function CFURLCopyFileSystemPath(anURL: NSURL, pathStyle: CFURLPathStyle): string;

  // export declare function CFURLCopyFragment(anURL: NSURL, charactersToLeaveEscaped: string): string;

  // export declare function CFURLCopyHostName(anURL: NSURL): string;

  // export declare function CFURLCopyLastPathComponent(url: NSURL): string;

  // export declare function CFURLCopyNetLocation(anURL: NSURL): string;

  // export declare function CFURLCopyPassword(anURL: NSURL): string;

  // export declare function CFURLCopyPath(anURL: NSURL): string;

  // export declare function CFURLCopyPathExtension(url: NSURL): string;

  // export declare function CFURLCopyQueryString(anURL: NSURL, charactersToLeaveEscaped: string): string;

  // export declare function CFURLCopyResourcePropertiesForKeys(url: NSURL, keys: any[], error: Error): Map<any, any>;

  // export declare function CFURLCopyResourcePropertyForKey(url: NSURL, key: string, propertyValueTypeRefPtr: any, error: Error): boolean;

  // export declare function CFURLCopyResourceSpecifier(anURL: NSURL): string;

  // export declare function CFURLCopyScheme(anURL: NSURL): string;

  // export declare function CFURLCopyStrictPath(anURL: NSURL, isAbsolute: string | any): string;

  // export declare function CFURLCopyUserName(anURL: NSURL): string;

  // export declare function CFURLCreateAbsoluteURLWithBytes(alloc: any, relativeURLBytes: string | any, length: number, encoding: number, baseURL: NSURL, useCompatibilityMode: boolean): NSURL;

  // export declare function CFURLCreateBookmarkData(allocator: any, url: NSURL, options: CFURLBookmarkCreationOptions, resourcePropertiesToInclude: any[], relativeToURL: NSURL, error: Error): NSData;

  // export declare function CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: any, aliasRecordDataRef: NSData): NSData;

  // export declare function CFURLCreateBookmarkDataFromFile(allocator: any, fileURL: NSURL, errorRef: Error): NSData;

  // export declare function CFURLCreateByResolvingBookmarkData(allocator: any, bookmark: NSData, options: CFURLBookmarkResolutionOptions, relativeToURL: NSURL, resourcePropertiesToInclude: any[], isStale: string | any, error: Error): NSURL;

  // export declare function CFURLCreateCopyAppendingPathComponent(allocator: any, url: NSURL, pathComponent: string, isDirectory: boolean): NSURL;

  // export declare function CFURLCreateCopyAppendingPathExtension(allocator: any, url: NSURL, extension: string): NSURL;

  // export declare function CFURLCreateCopyDeletingLastPathComponent(allocator: any, url: NSURL): NSURL;

  // export declare function CFURLCreateCopyDeletingPathExtension(allocator: any, url: NSURL): NSURL;

  // export declare function CFURLCreateData(allocator: any, url: NSURL, encoding: number, escapeWhitespace: boolean): NSData;

  // export declare function CFURLCreateFilePathURL(allocator: any, url: NSURL, error: Error): NSURL;

  // export declare function CFURLCreateFileReferenceURL(allocator: any, url: NSURL, error: Error): NSURL;

  // export declare function CFURLCreateFromFileSystemRepresentation(allocator: any, buffer: string | any, bufLen: number, isDirectory: boolean): NSURL;

  // export declare function CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: any, buffer: string | any, bufLen: number, isDirectory: boolean, baseURL: NSURL): NSURL;

  // export declare function CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: any, resourcePropertiesToReturn: any[], bookmark: NSData): Map<any, any>;

  // export declare function CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: any, resourcePropertyKey: string, bookmark: NSData): any;

  // export declare function CFURLCreateStringByReplacingPercentEscapes(allocator: any, originalString: string, charactersToLeaveEscaped: string): string;

  // export declare function CFURLCreateWithBytes(allocator: any, URLBytes: string | any, length: number, encoding: number, baseURL: NSURL): NSURL;

  // export declare function CFURLCreateWithFileSystemPath(allocator: any, filePath: string, pathStyle: CFURLPathStyle, isDirectory: boolean): NSURL;

  // export declare function CFURLCreateWithFileSystemPathRelativeToBase(allocator: any, filePath: string, pathStyle: CFURLPathStyle, isDirectory: boolean, baseURL: NSURL): NSURL;

  // export declare function CFURLCreateWithString(allocator: any, URLString: string, baseURL: NSURL): NSURL;

  // export declare function CFURLEnumeratorCreateForDirectoryURL(alloc: any, directoryURL: NSURL, option: CFURLEnumeratorOptions, propertyKeys: any[]): any;

  // export declare function CFURLEnumeratorCreateForMountedVolumes(alloc: any, option: CFURLEnumeratorOptions, propertyKeys: any[]): any;

  // export declare function CFURLEnumeratorGetDescendentLevel(enumerator: any): number;

  // export declare function CFURLEnumeratorGetNextURL(enumerator: any, url: NSURL, error: Error): CFURLEnumeratorResult;

  // export declare function CFURLEnumeratorGetTypeID(): number;

  // export declare function CFURLEnumeratorSkipDescendents(enumerator: any): void;

  // export declare function CFURLGetBaseURL(anURL: NSURL): NSURL;

  // export declare function CFURLGetByteRangeForComponent(url: NSURL, component: CFURLComponentType, rangeIncludingSeparators: CFRange): CFRange;

  // export declare function CFURLGetBytes(url: NSURL, buffer: string | any, bufferLength: number): number;

  // export declare function CFURLGetFileSystemRepresentation(url: NSURL, resolveAgainstBase: boolean, buffer: string | any, maxBufLen: number): boolean;

  // export declare function CFURLGetPortNumber(anURL: NSURL): number;

  // export declare function CFURLGetString(anURL: NSURL): string;

  // export declare function CFURLGetTypeID(): number;

  // export declare function CFURLHasDirectoryPath(anURL: NSURL): boolean;

  // export declare function CFURLIsFileReferenceURL(url: NSURL): boolean;

  // export declare function CFURLResourceIsReachable(url: NSURL, error: Error): boolean;

  // export declare function CFURLSetResourcePropertiesForKeys(url: NSURL, keyedPropertyValues: Map<any, any>, error: Error): boolean;

  // export declare function CFURLSetResourcePropertyForKey(url: NSURL, key: string, propertyValue: any, error: Error): boolean;

  // export declare function CFURLSetTemporaryResourcePropertyForKey(url: NSURL, key: string, propertyValue: any): void;

  // export declare function CFURLStartAccessingSecurityScopedResource(url: NSURL): boolean;

  // export declare function CFURLStopAccessingSecurityScopedResource(url: NSURL): void;

  // export declare function CFURLWriteBookmarkDataToFile(bookmarkRef: NSData, fileURL: NSURL, options: number, errorRef: Error): boolean;

  // struct
  interface CFUUIDBytes {
    byte0: number;
    byte1: number;
    byte2: number;
    byte3: number;
    byte4: number;
    byte5: number;
    byte6: number;
    byte7: number;
    byte8: number;
    byte9: number;
    byte10: number;
    byte11: number;
    byte12: number;
    byte13: number;
    byte14: number;
    byte15: number;
  }

  // export declare function CFUUIDCreate(alloc: any): any;

  // export declare function CFUUIDCreateFromString(alloc: any, uuidStr: string): any;

  // export declare function CFUUIDCreateFromUUIDBytes(alloc: any, bytes: CFUUIDBytes): any;

  // export declare function CFUUIDCreateString(alloc: any, uuid: any): string;

  // export declare function CFUUIDCreateWithBytes(alloc: any, byte0: number, byte1: number, byte2: number, byte3: number, byte4: number, byte5: number, byte6: number, byte7: number, byte8: number, byte9: number, byte10: number, byte11: number, byte12: number, byte13: number, byte14: number, byte15: number): any;

  // export declare function CFUUIDGetConstantUUIDWithBytes(alloc: any, byte0: number, byte1: number, byte2: number, byte3: number, byte4: number, byte5: number, byte6: number, byte7: number, byte8: number, byte9: number, byte10: number, byte11: number, byte12: number, byte13: number, byte14: number, byte15: number): any;

  // export declare function CFUUIDGetTypeID(): number;

  // export declare function CFUUIDGetUUIDBytes(uuid: any): CFUUIDBytes;

  // export declare function CFUserNotificationCancel(userNotification: any): number;

  // export declare function CFUserNotificationCreate(allocator: any, timeout: number, flags: number, error: number, dictionary: Map<any, any>): any;

  // export declare function CFUserNotificationCreateRunLoopSource(allocator: any, userNotification: any, callout: (p1: any, p2: number) => void, order: number): any;

  // export declare function CFUserNotificationDisplayAlert(timeout: number, flags: number, iconURL: NSURL, soundURL: NSURL, localizationURL: NSURL, alertHeader: string, alertMessage: string, defaultButtonTitle: string, alternateButtonTitle: string, otherButtonTitle: string, responseFlags: number): number;

  // export declare function CFUserNotificationDisplayNotice(timeout: number, flags: number, iconURL: NSURL, soundURL: NSURL, localizationURL: NSURL, alertHeader: string, alertMessage: string, defaultButtonTitle: string): number;

  // export declare function CFUserNotificationGetResponseDictionary(userNotification: any): Map<any, any>;

  // export declare function CFUserNotificationGetResponseValue(userNotification: any, key: string, idx: number): string;

  // export declare function CFUserNotificationGetTypeID(): number;

  // export declare function CFUserNotificationReceiveResponse(userNotification: any, timeout: number, responseFlags: number): number;

  // export declare function CFUserNotificationUpdate(userNotification: any, timeout: number, flags: number, dictionary: Map<any, any>): number;

  // export declare function CFWriteStreamCanAcceptBytes(stream: OutputStream): boolean;

  // export declare function CFWriteStreamClose(stream: OutputStream): void;

  // export declare function CFWriteStreamCopyDispatchQueue(stream: OutputStream): NSObject;

  // export declare function CFWriteStreamCopyError(stream: OutputStream): NSError;

  // export declare function CFWriteStreamCopyProperty(stream: OutputStream, propertyName: any): any;

  // export declare function CFWriteStreamCreateWithAllocatedBuffers(alloc: any, bufferAllocator: any): OutputStream;

  // export declare function CFWriteStreamCreateWithBuffer(alloc: any, buffer: string | any, bufferCapacity: number): OutputStream;

  // export declare function CFWriteStreamCreateWithFile(alloc: any, fileURL: NSURL): OutputStream;

  // export declare function CFWriteStreamGetError(stream: OutputStream): CFStreamError;

  // export declare function CFWriteStreamGetStatus(stream: OutputStream): CFStreamStatus;

  // export declare function CFWriteStreamGetTypeID(): number;

  // export declare function CFWriteStreamOpen(stream: OutputStream): boolean;

  // export declare function CFWriteStreamScheduleWithRunLoop(stream: OutputStream, runLoop: any, runLoopMode: any): void;

  // export declare function CFWriteStreamSetClient(stream: OutputStream, streamEvents: number, clientCB: (p1: OutputStream, p2: CFStreamEventType, p3: any) => void, clientContext: CFStreamClientContext): boolean;

  // export declare function CFWriteStreamSetDispatchQueue(stream: OutputStream, q: NSObject): void;

  // export declare function CFWriteStreamSetProperty(stream: OutputStream, propertyName: any, propertyValue: any): boolean;

  // export declare function CFWriteStreamUnscheduleFromRunLoop(stream: OutputStream, runLoop: any, runLoopMode: any): void;

  // export declare function CFWriteStreamWrite(stream: OutputStream, buffer: string | any, bufferLength: number): number;

  // struct
  interface CFXMLAttributeDeclarationInfo {
    attributeName: string;
    typeString: string;
    defaultString: string;
  }

  // struct
  interface CFXMLAttributeListDeclarationInfo {
    numberOfAttributes: number;
    attributes: CFXMLAttributeDeclarationInfo;
  }

  // export declare function CFXMLCreateStringByEscapingEntities(allocator: any, string: string, entitiesDictionary: Map<any, any>): string;

  // export declare function CFXMLCreateStringByUnescapingEntities(allocator: any, string: string, entitiesDictionary: Map<any, any>): string;

  // struct
  interface CFXMLDocumentInfo {
    sourceURL: NSURL;
    encoding: number;
  }

  // struct
  interface CFXMLDocumentTypeInfo {
    externalID: CFXMLExternalID;
  }

  // struct
  interface CFXMLElementInfo {
    attributes: Map<any, any>;
    attributeOrder: any[];
    isEmpty: boolean;
  }

  // struct
  interface CFXMLElementTypeDeclarationInfo {
    contentDescription: string;
  }

  // struct
  interface CFXMLEntityInfo {
    entityType: CFXMLEntityTypeCode;
    replacementText: string;
    entityID: CFXMLExternalID;
    notationName: string;
  }

  // struct
  interface CFXMLEntityReferenceInfo {
    entityType: CFXMLEntityTypeCode;
  }

  // struct
  interface CFXMLExternalID {
    systemID: NSURL;
    publicID: string;
  }

  // struct
  interface CFXMLNotationInfo {
    externalID: CFXMLExternalID;
  }

  // struct
  interface CFXMLParserCallBacks {
    version: number;
    createXMLStructure: (p1: any, p2: any, p3: any) => any;
    addChild: (p1: any, p2: any, p3: any, p4: any) => void;
    endXMLStructure: (p1: any, p2: any, p3: any) => void;
    resolveExternalEntity: (p1: any, p2: CFXMLExternalID, p3: any) => NSData;
    handleError: (p1: any, p2: CFXMLParserStatusCode, p3: any) => boolean;
  }

  // struct
  interface CFXMLParserContext {
    version: number;
    info: any;
    retain: (p1: any) => any;
    release: (p1: any) => void;
    copyDescription: (p1: any) => string;
  }

  // struct
  interface CFXMLProcessingInstructionInfo {
    dataString: string;
  }

  // struct
  interface IUnknownVTbl {
    QueryInterface: (p1: any, p2: CFUUIDBytes, p3: any) => number;
    AddRef: (p1: any) => number;
    Release: (p1: any) => number;
  }

  // export declare function __CFRangeMake(loc: number, len: number): CFRange;

  // export declare function __CFStringMakeConstantString(cStr: string | any): string;

  // export declare function CGAcquireDisplayFadeReservation(seconds: number, token: number): CGError;

  // struct
  interface CGAffineTransform {
    a: number;
    b: number;
    c: number;
    d: number;
    tx: number;
    ty: number;
  }

  // export declare function CGAffineTransformConcat(t1: CGAffineTransform, t2: CGAffineTransform): CGAffineTransform;

  // export declare function CGAffineTransformEqualToTransform(t1: CGAffineTransform, t2: CGAffineTransform): boolean;

  // export declare function CGAffineTransformInvert(t: CGAffineTransform): CGAffineTransform;

  // export declare function CGAffineTransformIsIdentity(t: CGAffineTransform): boolean;

  // export declare function CGAffineTransformMake(a: number, b: number, c: number, d: number, tx: number, ty: number): CGAffineTransform;

  // export declare function CGAffineTransformMakeRotation(angle: number): CGAffineTransform;

  // export declare function CGAffineTransformMakeScale(sx: number, sy: number): CGAffineTransform;

  // export declare function CGAffineTransformMakeTranslation(tx: number, ty: number): CGAffineTransform;

  // export declare function CGAffineTransformRotate(t: CGAffineTransform, angle: number): CGAffineTransform;

  // export declare function CGAffineTransformScale(t: CGAffineTransform, sx: number, sy: number): CGAffineTransform;

  // export declare function CGAffineTransformTranslate(t: CGAffineTransform, tx: number, ty: number): CGAffineTransform;

  // export declare function CGAssociateMouseAndMouseCursorPosition(connected: number): CGError;

  // export declare function CGBeginDisplayConfiguration(config: any): CGError;

  // export declare function CGBitmapContextCreate(data: any, width: number, height: number, bitsPerComponent: number, bytesPerRow: number, space: any, bitmapInfo: number): any;

  // export declare function CGBitmapContextCreateImage(context: any): any;

  // export declare function CGBitmapContextCreateWithData(data: any, width: number, height: number, bitsPerComponent: number, bytesPerRow: number, space: any, bitmapInfo: number, releaseCallback: (p1: any, p2: any) => void, releaseInfo: any): any;

  // export declare function CGBitmapContextGetAlphaInfo(context: any): CGImageAlphaInfo;

  // export declare function CGBitmapContextGetBitmapInfo(context: any): CGBitmapInfo;

  // export declare function CGBitmapContextGetBitsPerComponent(context: any): number;

  // export declare function CGBitmapContextGetBitsPerPixel(context: any): number;

  // export declare function CGBitmapContextGetBytesPerRow(context: any): number;

  // export declare function CGBitmapContextGetColorSpace(context: any): any;

  // export declare function CGBitmapContextGetData(context: any): any;

  // export declare function CGBitmapContextGetHeight(context: any): number;

  // export declare function CGBitmapContextGetWidth(context: any): number;

  // export declare function CGCancelDisplayConfiguration(config: any): CGError;

  // export declare function CGCaptureAllDisplays(): CGError;

  // export declare function CGCaptureAllDisplaysWithOptions(options: CGCaptureOptions): CGError;

  // export declare function CGColorConversionInfoCreate(src: any, dst: any): any;

  // export declare function CGColorConversionInfoCreateWithOptions(src: any, dst: any, options: Map<any, any>): any;

  // export declare function typeID(): number;

  // export declare function CGColorCreate(space: any, components: number): any;

  // export declare function CGColorCreateCopy(color: any): any;

  // export declare function CGColorCreateCopyByMatchingToColorSpace(p1: any, intent: CGColorRenderingIntent, color: any, options: Map<any, any>): any;

  // export declare function CGColorCreateCopyWithAlpha(color: any, alpha: number): any;

  // export declare function CGColorCreateGenericCMYK(cyan: number, magenta: number, yellow: number, black: number, alpha: number): any;

  // export declare function CGColorCreateGenericGray(gray: number, alpha: number): any;

  // export declare function CGColorCreateGenericGrayGamma2_2(gray: number, alpha: number): any;

  // export declare function CGColorCreateGenericRGB(red: number, green: number, blue: number, alpha: number): any;

  // export declare function CGColorCreateSRGB(red: number, green: number, blue: number, alpha: number): any;

  // export declare function CGColorCreateWithPattern(space: any, pattern: any, components: number): any;

  // export declare function CGColorEqualToColor(color1: any, color2: any): boolean;

  // export declare function CGColorGetAlpha(color: any): number;

  // export declare function CGColorGetColorSpace(color: any): any;

  // export declare function CGColorGetComponents(color: any): number;

  // export declare function CGColorGetConstantColor(colorName: string): any;

  // export declare function CGColorGetNumberOfComponents(color: any): number;

  // export declare function CGColorGetPattern(color: any): any;

  // export declare function typeID(): number;

  // export declare function CGColorRelease(color: any): void;

  // export declare function CGColorRetain(color: any): any;

  // export declare function CGColorSpaceCopyICCData(space: any): NSData;

  // export declare function CGColorSpaceCopyName(space: any): string;

  // export declare function CGColorSpaceCopyPropertyList(space: any): any;

  // export declare function CGColorSpaceCreateCalibratedGray(whitePoint: number, blackPoint: number, gamma: number): any;

  // export declare function CGColorSpaceCreateCalibratedRGB(whitePoint: number, blackPoint: number, gamma: number, matrix: number): any;

  // export declare function CGColorSpaceCreateDeviceCMYK(): any;

  // export declare function CGColorSpaceCreateDeviceGray(): any;

  // export declare function CGColorSpaceCreateDeviceRGB(): any;

  // export declare function CGColorSpaceCreateICCBased(nComponents: number, range: number, profile: any, alternate: any): any;

  // export declare function CGColorSpaceCreateIndexed(baseSpace: any, lastIndex: number, colorTable: string | any): any;

  // export declare function CGColorSpaceCreateLab(whitePoint: number, blackPoint: number, range: number): any;

  // export declare function CGColorSpaceCreatePattern(baseSpace: any): any;

  // export declare function CGColorSpaceCreateWithICCData(data: any): any;

  // export declare function CGColorSpaceCreateWithName(name: string): any;

  // export declare function CGColorSpaceCreateWithPlatformColorSpace(ref: any): any;

  // export declare function CGColorSpaceCreateWithPropertyList(plist: any): any;

  // export declare function CGColorSpaceGetBaseColorSpace(space: any): any;

  // export declare function CGColorSpaceGetColorTable(space: any, table: string | any): void;

  // export declare function CGColorSpaceGetColorTableCount(space: any): number;

  // export declare function CGColorSpaceGetModel(space: any): CGColorSpaceModel;

  // export declare function CGColorSpaceGetName(space: any): string;

  // export declare function CGColorSpaceGetNumberOfComponents(space: any): number;

  // export declare function typeID(): number;

  // export declare function CGColorSpaceIsWideGamutRGB(p1: any): boolean;

  // export declare function CGColorSpaceRelease(space: any): void;

  // export declare function CGColorSpaceRetain(space: any): any;

  // export declare function CGColorSpaceSupportsOutput(space: any): boolean;

  // export declare function CGCompleteDisplayConfiguration(config: any, option: CGConfigureOption): CGError;

  // export declare function CGConfigureDisplayFadeEffect(config: any, fadeOutSeconds: number, fadeInSeconds: number, fadeRed: number, fadeGreen: number, fadeBlue: number): CGError;

  // export declare function CGConfigureDisplayMirrorOfDisplay(config: any, display: number, master: number): CGError;

  // export declare function CGConfigureDisplayOrigin(config: any, display: number, x: number, y: number): CGError;

  // export declare function CGConfigureDisplayStereoOperation(config: any, display: number, stereo: number, forceBlueLine: number): CGError;

  // export declare function CGConfigureDisplayWithDisplayMode(config: any, display: number, mode: any, options: Map<any, any>): CGError;

  // export declare function CGContextAddArc(c: any, x: number, y: number, radius: number, startAngle: number, endAngle: number, clockwise: number): void;

  // export declare function CGContextAddArcToPoint(c: any, x1: number, y1: number, x2: number, y2: number, radius: number): void;

  // export declare function CGContextAddCurveToPoint(c: any, cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

  // export declare function CGContextAddEllipseInRect(c: any, rect: CGRect): void;

  // export declare function CGContextAddLineToPoint(c: any, x: number, y: number): void;

  // export declare function CGContextAddLines(c: any, points: NSPoint, count: number): void;

  // export declare function CGContextAddPath(c: any, path: any): void;

  // export declare function CGContextAddQuadCurveToPoint(c: any, cpx: number, cpy: number, x: number, y: number): void;

  // export declare function CGContextAddRect(c: any, rect: CGRect): void;

  // export declare function CGContextAddRects(c: any, rects: NSRect, count: number): void;

  // export declare function CGContextBeginPage(c: any, mediaBox: NSRect): void;

  // export declare function CGContextBeginPath(c: any): void;

  // export declare function CGContextBeginTransparencyLayer(c: any, auxiliaryInfo: Map<any, any>): void;

  // export declare function CGContextBeginTransparencyLayerWithRect(c: any, rect: CGRect, auxInfo: Map<any, any>): void;

  // export declare function CGContextClearRect(c: any, rect: CGRect): void;

  // export declare function CGContextClip(c: any): void;

  // export declare function CGContextClipToMask(c: any, rect: CGRect, mask: any): void;

  // export declare function CGContextClipToRect(c: any, rect: CGRect): void;

  // export declare function CGContextClipToRects(c: any, rects: NSRect, count: number): void;

  // export declare function CGContextClosePath(c: any): void;

  // export declare function CGContextConcatCTM(c: any, transform: CGAffineTransform): void;

  // export declare function CGContextConvertPointToDeviceSpace(c: any, point: CGPoint): CGPoint;

  // export declare function CGContextConvertPointToUserSpace(c: any, point: CGPoint): CGPoint;

  // export declare function CGContextConvertRectToDeviceSpace(c: any, rect: CGRect): CGRect;

  // export declare function CGContextConvertRectToUserSpace(c: any, rect: CGRect): CGRect;

  // export declare function CGContextConvertSizeToDeviceSpace(c: any, size: CGSize): CGSize;

  // export declare function CGContextConvertSizeToUserSpace(c: any, size: CGSize): CGSize;

  // export declare function CGContextCopyPath(c: any): any;

  // export declare function CGContextDrawImage(c: any, rect: CGRect, image: any): void;

  // export declare function CGContextDrawLayerAtPoint(context: any, point: CGPoint, layer: any): void;

  // export declare function CGContextDrawLayerInRect(context: any, rect: CGRect, layer: any): void;

  // export declare function CGContextDrawLinearGradient(c: any, gradient: any, startPoint: CGPoint, endPoint: CGPoint, options: CGGradientDrawingOptions): void;

  // export declare function CGContextDrawPDFPage(c: any, page: any): void;

  // export declare function CGContextDrawPath(c: any, mode: CGPathDrawingMode): void;

  // export declare function CGContextDrawRadialGradient(c: any, gradient: any, startCenter: CGPoint, startRadius: number, endCenter: CGPoint, endRadius: number, options: CGGradientDrawingOptions): void;

  // export declare function CGContextDrawShading(c: any, shading: any): void;

  // export declare function CGContextDrawTiledImage(c: any, rect: CGRect, image: any): void;

  // export declare function CGContextEOClip(c: any): void;

  // export declare function CGContextEOFillPath(c: any): void;

  // export declare function CGContextEndPage(c: any): void;

  // export declare function CGContextEndTransparencyLayer(c: any): void;

  // export declare function CGContextFillEllipseInRect(c: any, rect: CGRect): void;

  // export declare function CGContextFillPath(c: any): void;

  // export declare function CGContextFillRect(c: any, rect: CGRect): void;

  // export declare function CGContextFillRects(c: any, rects: NSRect, count: number): void;

  // export declare function CGContextFlush(c: any): void;

  // export declare function CGContextGetCTM(c: any): CGAffineTransform;

  // export declare function CGContextGetClipBoundingBox(c: any): CGRect;

  // export declare function CGContextGetInterpolationQuality(c: any): CGInterpolationQuality;

  // export declare function CGContextGetPathBoundingBox(c: any): CGRect;

  // export declare function CGContextGetPathCurrentPoint(c: any): CGPoint;

  // export declare function CGContextGetTextMatrix(c: any): CGAffineTransform;

  // export declare function CGContextGetTextPosition(c: any): CGPoint;

  // export declare function typeID(): number;

  // export declare function CGContextGetUserSpaceToDeviceSpaceTransform(c: any): CGAffineTransform;

  // export declare function CGContextIsPathEmpty(c: any): boolean;

  // export declare function CGContextMoveToPoint(c: any, x: number, y: number): void;

  // export declare function CGContextPathContainsPoint(c: any, point: CGPoint, mode: CGPathDrawingMode): boolean;

  // export declare function CGContextRelease(c: any): void;

  // export declare function CGContextReplacePathWithStrokedPath(c: any): void;

  // export declare function CGContextResetClip(c: any): void;

  // export declare function CGContextRestoreGState(c: any): void;

  // export declare function CGContextRetain(c: any): any;

  // export declare function CGContextRotateCTM(c: any, angle: number): void;

  // export declare function CGContextSaveGState(c: any): void;

  // export declare function CGContextScaleCTM(c: any, sx: number, sy: number): void;

  // export declare function CGContextSetAllowsAntialiasing(c: any, allowsAntialiasing: boolean): void;

  // export declare function CGContextSetAllowsFontSmoothing(c: any, allowsFontSmoothing: boolean): void;

  // export declare function CGContextSetAllowsFontSubpixelPositioning(c: any, allowsFontSubpixelPositioning: boolean): void;

  // export declare function CGContextSetAllowsFontSubpixelQuantization(c: any, allowsFontSubpixelQuantization: boolean): void;

  // export declare function CGContextSetAlpha(c: any, alpha: number): void;

  // export declare function CGContextSetBlendMode(c: any, mode: CGBlendMode): void;

  // export declare function CGContextSetCMYKFillColor(c: any, cyan: number, magenta: number, yellow: number, black: number, alpha: number): void;

  // export declare function CGContextSetCMYKStrokeColor(c: any, cyan: number, magenta: number, yellow: number, black: number, alpha: number): void;

  // export declare function CGContextSetCharacterSpacing(c: any, spacing: number): void;

  // export declare function CGContextSetFillColor(c: any, components: number): void;

  // export declare function CGContextSetFillColorSpace(c: any, space: any): void;

  // export declare function CGContextSetFillColorWithColor(c: any, color: any): void;

  // export declare function CGContextSetFillPattern(c: any, pattern: any, components: number): void;

  // export declare function CGContextSetFlatness(c: any, flatness: number): void;

  // export declare function CGContextSetFont(c: any, font: any): void;

  // export declare function CGContextSetFontSize(c: any, size: number): void;

  // export declare function CGContextSetGrayFillColor(c: any, gray: number, alpha: number): void;

  // export declare function CGContextSetGrayStrokeColor(c: any, gray: number, alpha: number): void;

  // export declare function CGContextSetInterpolationQuality(c: any, quality: CGInterpolationQuality): void;

  // export declare function CGContextSetLineCap(c: any, cap: CGLineCap): void;

  // export declare function CGContextSetLineDash(c: any, phase: number, lengths: number, count: number): void;

  // export declare function CGContextSetLineJoin(c: any, join: CGLineJoin): void;

  // export declare function CGContextSetLineWidth(c: any, width: number): void;

  // export declare function CGContextSetMiterLimit(c: any, limit: number): void;

  // export declare function CGContextSetPatternPhase(c: any, phase: CGSize): void;

  // export declare function CGContextSetRGBFillColor(c: any, red: number, green: number, blue: number, alpha: number): void;

  // export declare function CGContextSetRGBStrokeColor(c: any, red: number, green: number, blue: number, alpha: number): void;

  // export declare function CGContextSetRenderingIntent(c: any, intent: CGColorRenderingIntent): void;

  // export declare function CGContextSetShadow(c: any, offset: CGSize, blur: number): void;

  // export declare function CGContextSetShadowWithColor(c: any, offset: CGSize, blur: number, color: any): void;

  // export declare function CGContextSetShouldAntialias(c: any, shouldAntialias: boolean): void;

  // export declare function CGContextSetShouldSmoothFonts(c: any, shouldSmoothFonts: boolean): void;

  // export declare function CGContextSetShouldSubpixelPositionFonts(c: any, shouldSubpixelPositionFonts: boolean): void;

  // export declare function CGContextSetShouldSubpixelQuantizeFonts(c: any, shouldSubpixelQuantizeFonts: boolean): void;

  // export declare function CGContextSetStrokeColor(c: any, components: number): void;

  // export declare function CGContextSetStrokeColorSpace(c: any, space: any): void;

  // export declare function CGContextSetStrokeColorWithColor(c: any, color: any): void;

  // export declare function CGContextSetStrokePattern(c: any, pattern: any, components: number): void;

  // export declare function CGContextSetTextDrawingMode(c: any, mode: CGTextDrawingMode): void;

  // export declare function CGContextSetTextMatrix(c: any, t: CGAffineTransform): void;

  // export declare function CGContextSetTextPosition(c: any, x: number, y: number): void;

  // export declare function CGContextShowGlyphsAtPositions(c: any, glyphs: number, Lpositions: NSPoint, count: number): void;

  // export declare function CGContextStrokeEllipseInRect(c: any, rect: CGRect): void;

  // export declare function CGContextStrokeLineSegments(c: any, points: NSPoint, count: number): void;

  // export declare function CGContextStrokePath(c: any): void;

  // export declare function CGContextStrokeRect(c: any, rect: CGRect): void;

  // export declare function CGContextStrokeRectWithWidth(c: any, rect: CGRect, width: number): void;

  // export declare function CGContextSynchronize(c: any): void;

  // export declare function CGContextTranslateCTM(c: any, tx: number, ty: number): void;

  // struct
  interface CGDataConsumerCallbacks {
    putBytes: (p1: any, p2: any, p3: number) => number;
    releaseConsumer: (p1: any) => void;
  }

  // export declare function CGDataConsumerCreate(info: any, cbks: CGDataConsumerCallbacks): any;

  // export declare function CGDataConsumerCreateWithCFData(data: NSData): any;

  // export declare function CGDataConsumerCreateWithURL(url: NSURL): any;

  // export declare function typeID(): number;

  // export declare function CGDataConsumerRelease(consumer: any): void;

  // export declare function CGDataConsumerRetain(consumer: any): any;

  // export declare function CGDataProviderCopyData(provider: any): NSData;

  // export declare function CGDataProviderCreateDirect(info: any, size: number, callbacks: CGDataProviderDirectCallbacks): any;

  // export declare function CGDataProviderCreateSequential(info: any, callbacks: CGDataProviderSequentialCallbacks): any;

  // export declare function CGDataProviderCreateWithCFData(data: NSData): any;

  // export declare function CGDataProviderCreateWithData(info: any, data: any, size: number, releaseData: (p1: any, p2: any, p3: number) => void): any;

  // export declare function CGDataProviderCreateWithFilename(filename: string | any): any;

  // export declare function CGDataProviderCreateWithURL(url: NSURL): any;

  // struct
  interface CGDataProviderDirectCallbacks {
    version: number;
    getBytePointer: (p1: any) => any;
    releaseBytePointer: (p1: any, p2: any) => void;
    getBytesAtPosition: (p1: any, p2: any, p3: number, p4: number) => number;
    releaseInfo: (p1: any) => void;
  }

  // export declare function CGDataProviderGetInfo(provider: any): any;

  // export declare function typeID(): number;

  // export declare function CGDataProviderRelease(provider: any): void;

  // export declare function CGDataProviderRetain(provider: any): any;

  // struct
  interface CGDataProviderSequentialCallbacks {
    version: number;
    getBytes: (p1: any, p2: any, p3: number) => number;
    skipForward: (p1: any, p2: number) => number;
    rewind: (p1: any) => void;
    releaseInfo: (p1: any) => void;
  }

  // struct
  interface CGDeviceColor {
    red: number;
    green: number;
    blue: number;
  }

  // export declare function CGDirectDisplayCopyCurrentMetalDevice(display: number): MTLDevice;

  // export declare function CGDisplayBounds(display: number): CGRect;

  // export declare function CGDisplayCapture(display: number): CGError;

  // export declare function CGDisplayCaptureWithOptions(display: number, options: CGCaptureOptions): CGError;

  // export declare function CGDisplayCopyAllDisplayModes(display: number, options: Map<any, any>): any[];

  // export declare function CGDisplayCopyColorSpace(display: number): any;

  // export declare function CGDisplayCopyDisplayMode(display: number): any;

  // export declare function CGDisplayCreateImage(displayID: number): any;

  // export declare function CGDisplayCreateImageForRect(display: number, rect: CGRect): any;

  // export declare function CGDisplayFade(token: number, duration: number, startBlend: number, endBlend: number, redBlend: number, greenBlend: number, blueBlend: number, synchronous: number): CGError;

  // export declare function CGDisplayGammaTableCapacity(display: number): number;

  // export declare function CGDisplayGetDrawingContext(display: number): any;

  // export declare function CGDisplayHideCursor(display: number): CGError;

  // export declare function CGDisplayIDToOpenGLDisplayMask(display: number): number;

  // export declare function CGDisplayIsActive(display: number): number;

  // export declare function CGDisplayIsAlwaysInMirrorSet(display: number): number;

  // export declare function CGDisplayIsAsleep(display: number): number;

  // export declare function CGDisplayIsBuiltin(display: number): number;

  // export declare function CGDisplayIsInHWMirrorSet(display: number): number;

  // export declare function CGDisplayIsInMirrorSet(display: number): number;

  // export declare function CGDisplayIsMain(display: number): number;

  // export declare function CGDisplayIsOnline(display: number): number;

  // export declare function CGDisplayIsStereo(display: number): number;

  // export declare function CGDisplayMirrorsDisplay(display: number): number;

  // export declare function CGDisplayModeGetHeight(mode: any): number;

  // export declare function CGDisplayModeGetIODisplayModeID(mode: any): number;

  // export declare function CGDisplayModeGetIOFlags(mode: any): number;

  // export declare function CGDisplayModeGetPixelHeight(mode: any): number;

  // export declare function CGDisplayModeGetPixelWidth(mode: any): number;

  // export declare function CGDisplayModeGetRefreshRate(mode: any): number;

  // export declare function typeID(): number;

  // export declare function CGDisplayModeGetWidth(mode: any): number;

  // export declare function CGDisplayModeIsUsableForDesktopGUI(mode: any): boolean;

  // export declare function CGDisplayModeRelease(mode: any): void;

  // export declare function CGDisplayModeRetain(mode: any): any;

  // export declare function CGDisplayModelNumber(display: number): number;

  // export declare function CGDisplayMoveCursorToPoint(display: number, point: CGPoint): CGError;

  // export declare function CGDisplayPixelsHigh(display: number): number;

  // export declare function CGDisplayPixelsWide(display: number): number;

  // export declare function CGDisplayPrimaryDisplay(display: number): number;

  // export declare function CGDisplayRegisterReconfigurationCallback(callback: (p1: number, p2: CGDisplayChangeSummaryFlags, p3: any) => void, userInfo: any): CGError;

  // export declare function CGDisplayRelease(display: number): CGError;

  // export declare function CGDisplayRemoveReconfigurationCallback(callback: (p1: number, p2: CGDisplayChangeSummaryFlags, p3: any) => void, userInfo: any): CGError;

  // export declare function CGDisplayRestoreColorSyncSettings(): void;

  // export declare function CGDisplayRotation(display: number): number;

  // export declare function CGDisplayScreenSize(display: number): CGSize;

  // export declare function CGDisplaySerialNumber(display: number): number;

  // export declare function CGDisplaySetDisplayMode(display: number, mode: any, options: Map<any, any>): CGError;

  // export declare function CGDisplaySetStereoOperation(display: number, stereo: number, forceBlueLine: number, option: CGConfigureOption): CGError;

  // export declare function CGDisplayShowCursor(display: number): CGError;

  // export declare function CGDisplayStreamCreate(display: number, outputWidth: number, outputHeight: number, pixelFormat: number, properties: Map<any, any>, handler: (p1: CGDisplayStreamFrameStatus, p2: number, p3: any, p4: any) => void): any;

  // export declare function CGDisplayStreamCreateWithDispatchQueue(display: number, outputWidth: number, outputHeight: number, pixelFormat: number, properties: Map<any, any>, queue: NSObject, handler: (p1: CGDisplayStreamFrameStatus, p2: number, p3: any, p4: any) => void): any;

  // export declare function CGDisplayStreamGetRunLoopSource(displayStream: any): any;

  // export declare function typeID(): number;

  // export declare function CGDisplayStreamStart(displayStream: any): CGError;

  // export declare function CGDisplayStreamStop(displayStream: any): CGError;

  // export declare function CGDisplayStreamUpdateCreateMergedUpdate(firstUpdate: any, secondUpdate: any): any;

  // export declare function CGDisplayStreamUpdateGetDropCount(updateRef: any): number;

  // export declare function CGDisplayStreamUpdateGetMovedRectsDelta(updateRef: any, dx: number, dy: number): void;

  // export declare function CGDisplayStreamUpdateGetRects(updateRef: any, rectType: CGDisplayStreamUpdateRectType, rectCount: number): NSRect;

  // export declare function typeID(): number;

  // export declare function CGDisplayUnitNumber(display: number): number;

  // export declare function CGDisplayUsesOpenGLAcceleration(display: number): number;

  // export declare function CGDisplayVendorNumber(display: number): number;

  // export declare function CGEventCreate(source: any): any;

  // export declare function CGEventCreateCopy(event: any): any;

  // export declare function CGEventCreateData(allocator: any, event: any): NSData;

  // export declare function CGEventCreateFromData(allocator: any, data: NSData): any;

  // export declare function CGEventCreateKeyboardEvent(source: any, virtualKey: number, keyDown: boolean): any;

  // export declare function CGEventCreateMouseEvent(source: any, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton): any;

  // export declare function CGEventCreateScrollWheelEvent2(source: any, units: CGScrollEventUnit, wheelCount: number, wheel1: number, wheel2: number, wheel3: number): any;

  // export declare function CGEventCreateSourceFromEvent(event: any): any;

  // export declare function CGEventGetDoubleValueField(event: any, field: CGEventField): number;

  // export declare function CGEventGetFlags(event: any): CGEventFlags;

  // export declare function CGEventGetIntegerValueField(event: any, field: CGEventField): number;

  // export declare function CGEventGetLocation(event: any): CGPoint;

  // export declare function CGEventGetTimestamp(event: any): number;

  // export declare function CGEventGetType(event: any): CGEventType;

  // export declare function typeID(): number;

  // export declare function CGEventGetUnflippedLocation(event: any): CGPoint;

  // export declare function CGEventKeyboardGetUnicodeString(event: any, maxStringLength: number, actualStringLength: number, unicodeString: number): void;

  // export declare function CGEventKeyboardSetUnicodeString(event: any, stringLength: number, unicodeString: number): void;

  // export declare function CGEventPost(tap: CGEventTapLocation, event: any): void;

  // export declare function CGEventPostToPSN(processSerialNumber: any, event: any): void;

  // export declare function CGEventPostToPid(pid: number, event: any): void;

  // export declare function CGEventSetDoubleValueField(event: any, field: CGEventField, value: number): void;

  // export declare function CGEventSetFlags(event: any, flags: CGEventFlags): void;

  // export declare function CGEventSetIntegerValueField(event: any, field: CGEventField, value: number): void;

  // export declare function CGEventSetLocation(event: any, location: CGPoint): void;

  // export declare function CGEventSetSource(event: any, source: any): void;

  // export declare function CGEventSetTimestamp(event: any, timestamp: number): void;

  // export declare function CGEventSetType(event: any, type: CGEventType): void;

  // export declare function CGEventSourceButtonState(stateID: CGEventSourceStateID, button: CGMouseButton): boolean;

  // export declare function CGEventSourceCounterForEventType(stateID: CGEventSourceStateID, eventType: CGEventType): number;

  // export declare function CGEventSourceCreate(stateID: CGEventSourceStateID): any;

  // export declare function CGEventSourceFlagsState(stateID: CGEventSourceStateID): CGEventFlags;

  // export declare function CGEventSourceGetKeyboardType(source: any): number;

  // export declare function CGEventSourceGetLocalEventsFilterDuringSuppressionState(source: any, state: CGEventSuppressionState): CGEventFilterMask;

  // export declare function CGEventSourceGetLocalEventsSuppressionInterval(source: any): number;

  // export declare function CGEventSourceGetPixelsPerLine(source: any): number;

  // export declare function CGEventSourceGetSourceStateID(source: any): CGEventSourceStateID;

  // export declare function typeID(): number;

  // export declare function CGEventSourceGetUserData(source: any): number;

  // export declare function CGEventSourceKeyState(stateID: CGEventSourceStateID, key: number): boolean;

  // export declare function CGEventSourceSecondsSinceLastEventType(stateID: CGEventSourceStateID, eventType: CGEventType): number;

  // export declare function CGEventSourceSetKeyboardType(source: any, keyboardType: number): void;

  // export declare function CGEventSourceSetLocalEventsFilterDuringSuppressionState(source: any, filter: CGEventFilterMask, state: CGEventSuppressionState): void;

  // export declare function CGEventSourceSetLocalEventsSuppressionInterval(source: any, seconds: number): void;

  // export declare function CGEventSourceSetPixelsPerLine(source: any, pixelsPerLine: number): void;

  // export declare function CGEventSourceSetUserData(source: any, userData: number): void;

  // export declare function CGEventTapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

  // export declare function CGEventTapCreateForPSN(processSerialNumber: any, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

  // export declare function CGEventTapCreateForPid(pid: number, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: number, callback: (p1: any, p2: CGEventType, p3: any, p4: any) => any, userInfo: any): NSMachPort;

  // export declare function CGEventTapEnable(tap: NSMachPort, enable: boolean): void;

  // export declare function CGEventTapIsEnabled(tap: NSMachPort): boolean;

  // export declare function CGEventTapPostEvent(proxy: any, event: any): void;

  // export declare function CGFontCanCreatePostScriptSubset(font: any, format: CGFontPostScriptFormat): boolean;

  // export declare function CGFontCopyFullName(font: any): string;

  // export declare function CGFontCopyGlyphNameForGlyph(font: any, glyph: number): string;

  // export declare function CGFontCopyPostScriptName(font: any): string;

  // export declare function CGFontCopyTableForTag(font: any, tag: number): NSData;

  // export declare function CGFontCopyTableTags(font: any): any[];

  // export declare function CGFontCopyVariationAxes(font: any): any[];

  // export declare function CGFontCopyVariations(font: any): Map<any, any>;

  // export declare function CGFontCreateCopyWithVariations(font: any, variations: Map<any, any>): any;

  // export declare function CGFontCreatePostScriptEncoding(font: any, encoding: number): NSData;

  // export declare function CGFontCreatePostScriptSubset(font: any, subsetName: string, format: CGFontPostScriptFormat, glyphs: number, count: number, encoding: number): NSData;

  // export declare function CGFontCreateWithDataProvider(provider: any): any;

  // export declare function CGFontCreateWithFontName(name: string): any;

  // export declare function CGFontGetAscent(font: any): number;

  // export declare function CGFontGetCapHeight(font: any): number;

  // export declare function CGFontGetDescent(font: any): number;

  // export declare function CGFontGetFontBBox(font: any): CGRect;

  // export declare function CGFontGetGlyphAdvances(font: any, glyphs: number, count: number, advances: number): boolean;

  // export declare function CGFontGetGlyphBBoxes(font: any, glyphs: number, count: number, bboxes: NSRect): boolean;

  // export declare function CGFontGetGlyphWithGlyphName(font: any, name: string): number;

  // export declare function CGFontGetItalicAngle(font: any): number;

  // export declare function CGFontGetLeading(font: any): number;

  // export declare function CGFontGetNumberOfGlyphs(font: any): number;

  // export declare function CGFontGetStemV(font: any): number;

  // export declare function typeID(): number;

  // export declare function CGFontGetUnitsPerEm(font: any): number;

  // export declare function CGFontGetXHeight(font: any): number;

  // export declare function CGFontRelease(font: any): void;

  // export declare function CGFontRetain(font: any): any;

  // struct
  interface CGFunctionCallbacks {
    version: number;
    evaluate: (p1: any, p2: number, p3: number) => void;
    releaseInfo: (p1: any) => void;
  }

  // export declare function CGFunctionCreate(info: any, domainDimension: number, domain: number, rangeDimension: number, range: number, callbacks: CGFunctionCallbacks): any;

  // export declare function typeID(): number;

  // export declare function CGFunctionRelease(function_: any): void;

  // export declare function CGFunctionRetain(function_: any): any;

  // export declare function CGGetActiveDisplayList(maxDisplays: number, activeDisplays: number, displayCount: number): CGError;

  // export declare function CGGetDisplayTransferByFormula(display: number, redMin: number, redMax: number, redGamma: number, greenMin: number, greenMax: number, greenGamma: number, blueMin: number, blueMax: number, blueGamma: number): CGError;

  // export declare function CGGetDisplayTransferByTable(display: number, capacity: number, redTable: number, greenTable: number, blueTable: number, sampleCount: number): CGError;

  // export declare function CGGetDisplaysWithOpenGLDisplayMask(mask: number, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError;

  // export declare function CGGetDisplaysWithPoint(point: CGPoint, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError;

  // export declare function CGGetDisplaysWithRect(rect: CGRect, maxDisplays: number, displays: number, matchingDisplayCount: number): CGError;

  // export declare function CGGetEventTapList(maxNumberOfTaps: number, tapList: __CGEventTapInformation, eventTapCount: number): CGError;

  // export declare function CGGetLastMouseDelta(deltaX: number, deltaY: number): void;

  // export declare function CGGetOnlineDisplayList(maxDisplays: number, onlineDisplays: number, displayCount: number): CGError;

  // export declare function CGGradientCreateWithColorComponents(space: any, components: number, locations: number, count: number): any;

  // export declare function CGGradientCreateWithColors(space: any, colors: any[], locations: number): any;

  // export declare function typeID(): number;

  // export declare function CGGradientRelease(gradient: any): void;

  // export declare function CGGradientRetain(gradient: any): any;

  // export declare function CGImageCreate(width: number, height: number, bitsPerComponent: number, bitsPerPixel: number, bytesPerRow: number, space: any, bitmapInfo: CGBitmapInfo, provider: any, decode: number, shouldInterpolate: boolean, intent: CGColorRenderingIntent): any;

  // export declare function CGImageCreateCopy(image: any): any;

  // export declare function CGImageCreateCopyWithColorSpace(image: any, space: any): any;

  // export declare function CGImageCreateWithImageInRect(image: any, rect: CGRect): any;

  // export declare function CGImageCreateWithJPEGDataProvider(source: any, decode: number, shouldInterpolate: boolean, intent: CGColorRenderingIntent): any;

  // export declare function CGImageCreateWithMask(image: any, mask: any): any;

  // export declare function CGImageCreateWithMaskingColors(image: any, components: number): any;

  // export declare function CGImageCreateWithPNGDataProvider(source: any, decode: number, shouldInterpolate: boolean, intent: CGColorRenderingIntent): any;

  // export declare function CGImageGetAlphaInfo(image: any): CGImageAlphaInfo;

  // export declare function CGImageGetBitmapInfo(image: any): CGBitmapInfo;

  // export declare function CGImageGetBitsPerComponent(image: any): number;

  // export declare function CGImageGetBitsPerPixel(image: any): number;

  // export declare function CGImageGetByteOrderInfo(image: any): CGImageByteOrderInfo;

  // export declare function CGImageGetBytesPerRow(image: any): number;

  // export declare function CGImageGetColorSpace(image: any): any;

  // export declare function CGImageGetDataProvider(image: any): any;

  // export declare function CGImageGetDecode(image: any): number;

  // export declare function CGImageGetHeight(image: any): number;

  // export declare function CGImageGetPixelFormatInfo(image: any): CGImagePixelFormatInfo;

  // export declare function CGImageGetRenderingIntent(image: any): CGColorRenderingIntent;

  // export declare function CGImageGetShouldInterpolate(image: any): boolean;

  // export declare function typeID(): number;

  // export declare function CGImageGetUTType(image: any): string;

  // export declare function CGImageGetWidth(image: any): number;

  // export declare function CGImageIsMask(image: any): boolean;

  // export declare function CGImageMaskCreate(width: number, height: number, bitsPerComponent: number, bitsPerPixel: number, bytesPerRow: number, provider: any, decode: number, shouldInterpolate: boolean): any;

  // export declare function CGImageRelease(image: any): void;

  // export declare function CGImageRetain(image: any): any;

  // export declare function CGLayerCreateWithContext(context: any, size: CGSize, auxiliaryInfo: Map<any, any>): any;

  // export declare function CGLayerGetContext(layer: any): any;

  // export declare function CGLayerGetSize(layer: any): CGSize;

  // export declare function typeID(): number;

  // export declare function CGLayerRelease(layer: any): void;

  // export declare function CGLayerRetain(layer: any): any;

  // export declare function CGMainDisplayID(): number;

  // export declare function CGOpenGLDisplayMaskToDisplayID(mask: number): number;

  // export declare function CGPDFArrayApplyBlock(array: any, block: (p1: number, p2: any, p3: any) => boolean, info: any): void;

  // export declare function CGPDFArrayGetArray(array: any, index: number, value: any): boolean;

  // export declare function CGPDFArrayGetBoolean(array: any, index: number, value: string | any): boolean;

  // export declare function CGPDFArrayGetCount(array: any): number;

  // export declare function CGPDFArrayGetDictionary(array: any, index: number, value: any): boolean;

  // export declare function CGPDFArrayGetInteger(array: any, index: number, value: number): boolean;

  // export declare function CGPDFArrayGetName(array: any, index: number, value: string): boolean;

  // export declare function CGPDFArrayGetNull(array: any, index: number): boolean;

  // export declare function CGPDFArrayGetNumber(array: any, index: number, value: number): boolean;

  // export declare function CGPDFArrayGetObject(array: any, index: number, value: any): boolean;

  // export declare function CGPDFArrayGetStream(array: any, index: number, value: any): boolean;

  // export declare function CGPDFArrayGetString(array: any, index: number, value: any): boolean;

  // export declare function CGPDFContentStreamCreateWithPage(page: any): any;

  // export declare function CGPDFContentStreamCreateWithStream(stream: any, streamResources: any, parent: any): any;

  // export declare function CGPDFContentStreamGetResource(cs: any, category: string | any, name: string | any): any;

  // export declare function CGPDFContentStreamGetStreams(cs: any): any[];

  // export declare function CGPDFContentStreamRelease(cs: any): void;

  // export declare function CGPDFContentStreamRetain(cs: any): any;

  // export declare function CGPDFContextAddDestinationAtPoint(context: any, name: string, point: CGPoint): void;

  // export declare function CGPDFContextAddDocumentMetadata(context: any, metadata: NSData): void;

  // export declare function CGPDFContextBeginPage(context: any, pageInfo: Map<any, any>): void;

  // export declare function CGPDFContextBeginTag(context: any, tagType: CGPDFTagType, tagProperties: Map<any, any>): void;

  // export declare function CGPDFContextClose(context: any): void;

  // export declare function CGPDFContextCreate(consumer: any, mediaBox: NSRect, auxiliaryInfo: Map<any, any>): any;

  // export declare function CGPDFContextCreateWithURL(url: NSURL, mediaBox: NSRect, auxiliaryInfo: Map<any, any>): any;

  // export declare function CGPDFContextEndPage(context: any): void;

  // export declare function CGPDFContextEndTag(context: any): void;

  // export declare function CGPDFContextSetDestinationForRect(context: any, name: string, rect: CGRect): void;

  // export declare function CGPDFContextSetOutline(context: any, outline: Map<any, any>): void;

  // export declare function CGPDFContextSetURLForRect(context: any, url: NSURL, rect: CGRect): void;

  // export declare function CGPDFDictionaryApplyBlock(dict: any, block: (p1: string, p2: any, p3: any) => boolean, info: any): void;

  // export declare function CGPDFDictionaryApplyFunction(dict: any, function_: (p1: string, p2: any, p3: any) => void, info: any): void;

  // export declare function CGPDFDictionaryGetArray(dict: any, key: string | any, value: any): boolean;

  // export declare function CGPDFDictionaryGetBoolean(dict: any, key: string | any, value: string | any): boolean;

  // export declare function CGPDFDictionaryGetCount(dict: any): number;

  // export declare function CGPDFDictionaryGetDictionary(dict: any, key: string | any, value: any): boolean;

  // export declare function CGPDFDictionaryGetInteger(dict: any, key: string | any, value: number): boolean;

  // export declare function CGPDFDictionaryGetName(dict: any, key: string | any, value: string): boolean;

  // export declare function CGPDFDictionaryGetNumber(dict: any, key: string | any, value: number): boolean;

  // export declare function CGPDFDictionaryGetObject(dict: any, key: string | any, value: any): boolean;

  // export declare function CGPDFDictionaryGetStream(dict: any, key: string | any, value: any): boolean;

  // export declare function CGPDFDictionaryGetString(dict: any, key: string | any, value: any): boolean;

  // export declare function CGPDFDocumentAllowsCopying(document: any): boolean;

  // export declare function CGPDFDocumentAllowsPrinting(document: any): boolean;

  // export declare function CGPDFDocumentCreateWithProvider(provider: any): any;

  // export declare function CGPDFDocumentCreateWithURL(url: NSURL): any;

  // export declare function CGPDFDocumentGetAccessPermissions(document: any): CGPDFAccessPermissions;

  // export declare function CGPDFDocumentGetCatalog(document: any): any;

  // export declare function CGPDFDocumentGetID(document: any): any;

  // export declare function CGPDFDocumentGetInfo(document: any): any;

  // export declare function CGPDFDocumentGetNumberOfPages(document: any): number;

  // export declare function CGPDFDocumentGetOutline(document: any): Map<any, any>;

  // export declare function CGPDFDocumentGetPage(document: any, pageNumber: number): any;

  // export declare function typeID(): number;

  // export declare function CGPDFDocumentGetVersion(document: any, majorVersion: number, minorVersion: number): void;

  // export declare function CGPDFDocumentIsEncrypted(document: any): boolean;

  // export declare function CGPDFDocumentIsUnlocked(document: any): boolean;

  // export declare function CGPDFDocumentRelease(document: any): void;

  // export declare function CGPDFDocumentRetain(document: any): any;

  // export declare function CGPDFDocumentUnlockWithPassword(document: any, password: string | any): boolean;

  // export declare function CGPDFObjectGetType(object_: any): CGPDFObjectType;

  // export declare function CGPDFObjectGetValue(object_: any, type: CGPDFObjectType, value: any): boolean;

  // export declare function CGPDFOperatorTableCreate(): any;

  // export declare function CGPDFOperatorTableRelease(table: any): void;

  // export declare function CGPDFOperatorTableRetain(table: any): any;

  // export declare function CGPDFOperatorTableSetCallback(table: any, name: string | any, callback: (p1: any, p2: any) => void): void;

  // export declare function CGPDFPageGetBoxRect(page: any, box: CGPDFBox): CGRect;

  // export declare function CGPDFPageGetDictionary(page: any): any;

  // export declare function CGPDFPageGetDocument(page: any): any;

  // export declare function CGPDFPageGetDrawingTransform(page: any, box: CGPDFBox, rect: CGRect, rotate: number, preserveAspectRatio: boolean): CGAffineTransform;

  // export declare function CGPDFPageGetPageNumber(page: any): number;

  // export declare function CGPDFPageGetRotationAngle(page: any): number;

  // export declare function typeID(): number;

  // export declare function CGPDFPageRelease(page: any): void;

  // export declare function CGPDFPageRetain(page: any): any;

  // export declare function CGPDFScannerCreate(cs: any, table: any, info: any): any;

  // export declare function CGPDFScannerGetContentStream(scanner: any): any;

  // export declare function CGPDFScannerPopArray(scanner: any, value: any): boolean;

  // export declare function CGPDFScannerPopBoolean(scanner: any, value: string | any): boolean;

  // export declare function CGPDFScannerPopDictionary(scanner: any, value: any): boolean;

  // export declare function CGPDFScannerPopInteger(scanner: any, value: number): boolean;

  // export declare function CGPDFScannerPopName(scanner: any, value: string): boolean;

  // export declare function CGPDFScannerPopNumber(scanner: any, value: number): boolean;

  // export declare function CGPDFScannerPopObject(scanner: any, value: any): boolean;

  // export declare function CGPDFScannerPopStream(scanner: any, value: any): boolean;

  // export declare function CGPDFScannerPopString(scanner: any, value: any): boolean;

  // export declare function CGPDFScannerRelease(scanner: any): void;

  // export declare function CGPDFScannerRetain(scanner: any): any;

  // export declare function CGPDFScannerScan(scanner: any): boolean;

  // export declare function CGPDFStreamCopyData(stream: any, format: CGPDFDataFormat): NSData;

  // export declare function CGPDFStreamGetDictionary(stream: any): any;

  // export declare function CGPDFStringCopyDate(string: any): Date;

  // export declare function CGPDFStringCopyTextString(string: any): string;

  // export declare function CGPDFStringGetBytePtr(string: any): string;

  // export declare function CGPDFStringGetLength(string: any): number;

  // export declare function CGPDFTagTypeGetName(tagType: CGPDFTagType): string;

  // export declare function CGPSConverterAbort(converter: any): boolean;

  // struct
  interface CGPSConverterCallbacks {
    version: number;
    beginDocument: (p1: any) => void;
    endDocument: (p1: any, p2: boolean) => void;
    beginPage: (p1: any, p2: number, p3: Map<any, any>) => void;
    endPage: (p1: any, p2: number, p3: Map<any, any>) => void;
    noteProgress: (p1: any) => void;
    noteMessage: (p1: any, p2: string) => void;
    releaseInfo: (p1: any) => void;
  }

  // export declare function CGPSConverterConvert(converter: any, provider: any, consumer: any, options: Map<any, any>): boolean;

  // export declare function CGPSConverterCreate(info: any, callbacks: CGPSConverterCallbacks, options: Map<any, any>): any;

  // export declare function typeID(): number;

  // export declare function CGPSConverterIsConverting(converter: any): boolean;

  // export declare function CGPathAddArc(path: any, m: CGAffineTransform, x: number, y: number, radius: number, startAngle: number, endAngle: number, clockwise: boolean): void;

  // export declare function CGPathAddArcToPoint(path: any, m: CGAffineTransform, x1: number, y1: number, x2: number, y2: number, radius: number): void;

  // export declare function CGPathAddCurveToPoint(path: any, m: CGAffineTransform, cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

  // export declare function CGPathAddEllipseInRect(path: any, m: CGAffineTransform, rect: CGRect): void;

  // export declare function CGPathAddLineToPoint(path: any, m: CGAffineTransform, x: number, y: number): void;

  // export declare function CGPathAddLines(path: any, m: CGAffineTransform, points: NSPoint, count: number): void;

  // export declare function CGPathAddPath(path1: any, m: CGAffineTransform, path2: any): void;

  // export declare function CGPathAddQuadCurveToPoint(path: any, m: CGAffineTransform, cpx: number, cpy: number, x: number, y: number): void;

  // export declare function CGPathAddRect(path: any, m: CGAffineTransform, rect: CGRect): void;

  // export declare function CGPathAddRects(path: any, m: CGAffineTransform, rects: NSRect, count: number): void;

  // export declare function CGPathAddRelativeArc(path: any, matrix: CGAffineTransform, x: number, y: number, radius: number, startAngle: number, delta: number): void;

  // export declare function CGPathAddRoundedRect(path: any, transform: CGAffineTransform, rect: CGRect, cornerWidth: number, cornerHeight: number): void;

  // export declare function apply(path: any, info: any, function_: (p1: any, p2: CGPathElement) => void): void;

  // export declare function CGPathApplyWithBlock(path: any, block: (p1: CGPathElement) => void): void;

  // export declare function CGPathCloseSubpath(path: any): void;

  // export declare function CGPathContainsPoint(path: any, m: CGAffineTransform, point: CGPoint, eoFill: boolean): boolean;

  // export declare function CGPathCreateCopy(path: any): any;

  // export declare function CGPathCreateCopyByDashingPath(path: any, transform: CGAffineTransform, phase: number, lengths: number, count: number): any;

  // export declare function CGPathCreateCopyByStrokingPath(path: any, transform: CGAffineTransform, lineWidth: number, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: number): any;

  // export declare function CGPathCreateCopyByTransformingPath(path: any, transform: CGAffineTransform): any;

  // export declare function create(): any;

  // export declare function CGPathCreateMutableCopy(path: any): any;

  // export declare function CGPathCreateMutableCopyByTransformingPath(path: any, transform: CGAffineTransform): any;

  // export declare function CGPathCreateWithEllipseInRect(rect: CGRect, transform: CGAffineTransform): any;

  // export declare function CGPathCreateWithRect(rect: CGRect, transform: CGAffineTransform): any;

  // export declare function CGPathCreateWithRoundedRect(rect: CGRect, cornerWidth: number, cornerHeight: number, transform: CGAffineTransform): any;

  // struct
  interface CGPathElement {
    type: CGPathElementType;
    points: NSPoint;
  }

  // export declare function CGPathEqualToPath(path1: any, path2: any): boolean;

  // export declare function CGPathGetBoundingBox(path: any): CGRect;

  // export declare function CGPathGetCurrentPoint(path: any): CGPoint;

  // export declare function CGPathGetPathBoundingBox(path: any): CGRect;

  // export declare function typeID(): number;

  // export declare function CGPathIsEmpty(path: any): boolean;

  // export declare function CGPathIsRect(path: any, rect: NSRect): boolean;

  // export declare function CGPathMoveToPoint(path: any, m: CGAffineTransform, x: number, y: number): void;

  // export declare function CGPathRelease(path: any): void;

  // export declare function CGPathRetain(path: any): any;

  // struct
  interface CGPatternCallbacks {
    version: number;
    drawPattern: (p1: any, p2: any) => void;
    releaseInfo: (p1: any) => void;
  }

  // export declare function CGPatternCreate(info: any, bounds: CGRect, matrix: CGAffineTransform, xStep: number, yStep: number, tiling: CGPatternTiling, isColored: boolean, callbacks: CGPatternCallbacks): any;

  // export declare function typeID(): number;

  // export declare function CGPatternRelease(pattern: any): void;

  // export declare function CGPatternRetain(pattern: any): any;

  // struct
  interface CGPoint {
    x: number;
    y: number;
  }

  // export declare function CGPointApplyAffineTransform(point: CGPoint, t: CGAffineTransform): CGPoint;

  // export declare function CGPointCreateDictionaryRepresentation(point: CGPoint): Map<any, any>;

  // export declare function CGPointEqualToPoint(point1: CGPoint, point2: CGPoint): boolean;

  // export declare function CGPointMake(x: number, y: number): CGPoint;

  // export declare function CGPointMakeWithDictionaryRepresentation(dict: Map<any, any>, point: NSPoint): boolean;

  // struct
  interface CGRect {
    origin: CGPoint;
    size: CGSize;
  }

  // export declare function CGRectApplyAffineTransform(rect: CGRect, t: CGAffineTransform): CGRect;

  // export declare function CGRectContainsPoint(rect: CGRect, point: CGPoint): boolean;

  // export declare function CGRectContainsRect(rect1: CGRect, rect2: CGRect): boolean;

  // export declare function CGRectCreateDictionaryRepresentation(p1: CGRect): Map<any, any>;

  // export declare function CGRectDivide(rect: CGRect, slice: NSRect, remainder: NSRect, amount: number, edge: CGRectEdge): void;

  // export declare function CGRectEqualToRect(rect1: CGRect, rect2: CGRect): boolean;

  // export declare function CGRectGetHeight(rect: CGRect): number;

  // export declare function CGRectGetMaxX(rect: CGRect): number;

  // export declare function CGRectGetMaxY(rect: CGRect): number;

  // export declare function CGRectGetMidX(rect: CGRect): number;

  // export declare function CGRectGetMidY(rect: CGRect): number;

  // export declare function CGRectGetMinX(rect: CGRect): number;

  // export declare function CGRectGetMinY(rect: CGRect): number;

  // export declare function CGRectGetWidth(rect: CGRect): number;

  // export declare function CGRectInset(rect: CGRect, dx: number, dy: number): CGRect;

  // export declare function CGRectIntegral(rect: CGRect): CGRect;

  // export declare function CGRectIntersection(r1: CGRect, r2: CGRect): CGRect;

  // export declare function CGRectIntersectsRect(rect1: CGRect, rect2: CGRect): boolean;

  // export declare function CGRectIsEmpty(rect: CGRect): boolean;

  // export declare function CGRectIsInfinite(rect: CGRect): boolean;

  // export declare function CGRectIsNull(rect: CGRect): boolean;

  // export declare function CGRectMake(x: number, y: number, width: number, height: number): CGRect;

  // export declare function CGRectMakeWithDictionaryRepresentation(dict: Map<any, any>, rect: NSRect): boolean;

  // export declare function CGRectOffset(rect: CGRect, dx: number, dy: number): CGRect;

  // export declare function CGRectStandardize(rect: CGRect): CGRect;

  // export declare function CGRectUnion(r1: CGRect, r2: CGRect): CGRect;

  // export declare function CGReleaseAllDisplays(): CGError;

  // export declare function CGReleaseDisplayFadeReservation(token: number): CGError;

  // export declare function CGRestorePermanentDisplayConfiguration(): void;

  // struct
  interface CGScreenUpdateMoveDelta {
    dX: number;
    dY: number;
  }

  // export declare function CGSessionCopyCurrentDictionary(): Map<any, any>;

  // export declare function CGSetDisplayTransferByByteTable(display: number, tableSize: number, redTable: string | any, greenTable: string | any, blueTable: string | any): CGError;

  // export declare function CGSetDisplayTransferByFormula(display: number, redMin: number, redMax: number, redGamma: number, greenMin: number, greenMax: number, greenGamma: number, blueMin: number, blueMax: number, blueGamma: number): CGError;

  // export declare function CGSetDisplayTransferByTable(display: number, tableSize: number, redTable: number, greenTable: number, blueTable: number): CGError;

  // export declare function CGShadingCreateAxial(space: any, start: CGPoint, end: CGPoint, function_: any, extendStart: boolean, extendEnd: boolean): any;

  // export declare function CGShadingCreateRadial(space: any, start: CGPoint, startRadius: number, end: CGPoint, endRadius: number, function_: any, extendStart: boolean, extendEnd: boolean): any;

  // export declare function typeID(): number;

  // export declare function CGShadingRelease(shading: any): void;

  // export declare function CGShadingRetain(shading: any): any;

  // export declare function CGShieldingWindowID(display: number): number;

  // export declare function CGShieldingWindowLevel(): number;

  // struct
  interface CGSize {
    width: number;
    height: number;
  }

  // export declare function CGSizeApplyAffineTransform(size: CGSize, t: CGAffineTransform): CGSize;

  // export declare function CGSizeCreateDictionaryRepresentation(size: CGSize): Map<any, any>;

  // export declare function CGSizeEqualToSize(size1: CGSize, size2: CGSize): boolean;

  // export declare function CGSizeMake(width: number, height: number): CGSize;

  // export declare function CGSizeMakeWithDictionaryRepresentation(dict: Map<any, any>, size: NSSize): boolean;

  // struct
  interface CGVector {
    dx: number;
    dy: number;
  }

  // export declare function CGVectorMake(dx: number, dy: number): CGVector;

  // export declare function CGWarpMouseCursorPosition(newCursorPosition: CGPoint): CGError;

  // export declare function CGWindowLevelForKey(key: CGWindowLevelKey): number;

  // export declare function CGWindowListCopyWindowInfo(option: CGWindowListOption, relativeToWindow: number): any[];

  // export declare function CGWindowListCreateDescriptionFromArray(windowArray: any[]): any[];

  // export declare function CGWindowListCreateImage(screenBounds: CGRect, listOption: CGWindowListOption, windowID: number, imageOption: CGWindowImageOption): any;

  // export declare function CGWindowListCreateImageFromArray(screenBounds: CGRect, windowArray: any[], imageOption: CGWindowImageOption): any;

  // export declare function CGWindowServerCreateServerPort(): NSMachPort;

  // struct
  interface __CGEventTapInformation {
    eventTapID: number;
    tapPoint: CGEventTapLocation;
    options: CGEventTapOptions;
    eventsOfInterest: number;
    tappingProcess: number;
    processBeingTapped: number;
    enabled: boolean;
    minUsecLatency: number;
    avgUsecLatency: number;
    maxUsecLatency: number;
  }

  interface CIAccordionFoldTransition extends CITransitionFilter {
    bottomHeight: number;
    setBottomHeight(_: number) // property
    foldShadowAmount: number;
    setFoldShadowAmount(_: number) // property
    numberOfFolds: number;
    setNumberOfFolds(_: number) // property
  }

  interface CIAffineClamp extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    transform: CGAffineTransform;
    setTransform(_: CGAffineTransform) // property
  }

  interface CIAffineTile extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    transform: CGAffineTransform;
    setTransform(_: CGAffineTransform) // property
  }

  interface CIAttributedTextImageGenerator extends CIFilter {
    scaleFactor: number;
    setScaleFactor(_: number) // property
    text: NSAttributedString;
    setText(_: NSAttributedString) // property
  }

  // interface
  class CIAztecCodeDescriptor extends CIBarcodeDescriptor {
    static descriptorWithPayloadIsCompactLayerCountDataCodewordCount(payload: NSData, isCompact: boolean, layerCount: number, dataCodewordCount: number): CIAztecCodeDescriptor;
    dataCodewordCount: number; // property
    errorCorrectedPayload: NSData; // property
    isCompact: boolean; // property
    layerCount: number; // property
    static createWithPayloadIsCompactLayerCountDataCodewordCount(payload: NSData, isCompact: boolean, layerCount: number, dataCodewordCount: number): CIAztecCodeDescriptor;
  }

  interface CIAztecCodeGenerator extends CIFilter {
    compactStyle: number;
    setCompactStyle(_: number) // property
    correctionLevel: number;
    setCorrectionLevel(_: number) // property
    layers: number;
    setLayers(_: number) // property
    message: NSData;
    setMessage(_: NSData) // property
  }

  // interface
  class CIBarcodeDescriptor extends NSObject /* implements NSCopying, NSSecureCoding */ {
  }

  interface CIBarcodeGenerator extends CIFilter {
    barcodeDescriptor: CIBarcodeDescriptor;
    setBarcodeDescriptor(_: CIBarcodeDescriptor) // property
  }

  interface CIBarsSwipeTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number) // property
    barOffset: number;
    setBarOffset(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIBicubicScaleTransform extends CIFilter {
    aspectRatio: number;
    setAspectRatio(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    parameterB: number;
    setParameterB(_: number) // property
    parameterC: number;
    setParameterC(_: number) // property
    scale: number;
    setScale(_: number) // property
  }

  // interface
  class CIBlendKernel extends CIColorKernel {
    static clear: CIBlendKernel; // property
    static color: CIBlendKernel; // property
    static colorBurn: CIBlendKernel; // property
    static colorDodge: CIBlendKernel; // property
    static componentAdd: CIBlendKernel; // property
    static componentMax: CIBlendKernel; // property
    static componentMin: CIBlendKernel; // property
    static componentMultiply: CIBlendKernel; // property
    static darken: CIBlendKernel; // property
    static darkerColor: CIBlendKernel; // property
    static destination: CIBlendKernel; // property
    static destinationAtop: CIBlendKernel; // property
    static destinationIn: CIBlendKernel; // property
    static destinationOut: CIBlendKernel; // property
    static destinationOver: CIBlendKernel; // property
    static difference: CIBlendKernel; // property
    static divide: CIBlendKernel; // property
    static exclusion: CIBlendKernel; // property
    static exclusiveOr: CIBlendKernel; // property
    static hardLight: CIBlendKernel; // property
    static hardMix: CIBlendKernel; // property
    static hue: CIBlendKernel; // property
    static lighten: CIBlendKernel; // property
    static lighterColor: CIBlendKernel; // property
    static linearBurn: CIBlendKernel; // property
    static linearDodge: CIBlendKernel; // property
    static linearLight: CIBlendKernel; // property
    static luminosity: CIBlendKernel; // property
    static multiply: CIBlendKernel; // property
    static overlay: CIBlendKernel; // property
    static pinLight: CIBlendKernel; // property
    static saturation: CIBlendKernel; // property
    static screen: CIBlendKernel; // property
    static softLight: CIBlendKernel; // property
    static source: CIBlendKernel; // property
    static sourceAtop: CIBlendKernel; // property
    static sourceIn: CIBlendKernel; // property
    static sourceOut: CIBlendKernel; // property
    static sourceOver: CIBlendKernel; // property
    static subtract: CIBlendKernel; // property
    static vividLight: CIBlendKernel; // property
    applyWithForegroundBackground(foreground: CIImage, background: CIImage): CIImage;
    applyWithForegroundBackgroundColorSpace(foreground: CIImage, background: CIImage, colorSpace: any): CIImage;
  }

  interface CIBlendWithMask extends CIFilter {
    backgroundImage: CIImage;
    setBackgroundImage(_: CIImage) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    maskImage: CIImage;
    setMaskImage(_: CIImage) // property
  }

  interface CIBloom extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIBokehBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
    ringAmount: number;
    setRingAmount(_: number) // property
    ringSize: number;
    setRingSize(_: number) // property
    softness: number;
    setSoftness(_: number) // property
  }

  interface CIBoxBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CICMYKHalftone extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    grayComponentReplacement: number;
    setGrayComponentReplacement(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    sharpness: number;
    setSharpness(_: number) // property
    underColorRemoval: number;
    setUnderColorRemoval(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CICheckerboardGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color0: CIColor;
    setColor0(_: CIColor) // property
    color1: CIColor;
    setColor1(_: CIColor) // property
    sharpness: number;
    setSharpness(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CICircularScreen extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    sharpness: number;
    setSharpness(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CICode128BarcodeGenerator extends CIFilter {
    barcodeHeight: number;
    setBarcodeHeight(_: number) // property
    message: NSData;
    setMessage(_: NSData) // property
    quietSpace: number;
    setQuietSpace(_: number) // property
  }

  // interface
  class CIColor extends NSObject /* implements NSCopying, NSSecureCoding */ {
    alpha: number; // property
    blue: number; // property
    colorSpace: any; // property
    components: number; // property
    green: number; // property
    numberOfComponents: number; // property
    red: number; // property
    stringRepresentation: string; // property
    static blackColor: CIColor; // property
    static blueColor: CIColor; // property
    static clearColor: CIColor; // property
    static cyanColor: CIColor; // property
    static grayColor: CIColor; // property
    static greenColor: CIColor; // property
    static magentaColor: CIColor; // property
    static redColor: CIColor; // property
    static whiteColor: CIColor; // property
    static yellowColor: CIColor; // property
    static createWithCGColor(CGColor: any): CIColor;
    static createWithColor(color: NSColor): CIColor;
    static createWithRedGreenBlue(red: number, green: number, blue: number): CIColor;
    static createWithRedGreenBlueAlpha(red: number, green: number, blue: number, alpha: number): CIColor;
    static createWithRedGreenBlueAlphaColorSpace(red: number, green: number, blue: number, alpha: number, colorSpace: any): CIColor;
    static createWithRedGreenBlueColorSpace(red: number, green: number, blue: number, colorSpace: any): CIColor;
  }

  interface CIColorClamp extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    maxComponents: CIVector;
    setMaxComponents(_: CIVector) // property
    minComponents: CIVector;
    setMinComponents(_: CIVector) // property
  }

  interface CIColorControls extends CIFilter {
    brightness: number;
    setBrightness(_: number) // property
    contrast: number;
    setContrast(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    saturation: number;
    setSaturation(_: number) // property
  }

  interface CIColorCrossPolynomial extends CIFilter {
    blueCoefficients: CIVector;
    setBlueCoefficients(_: CIVector) // property
    greenCoefficients: CIVector;
    setGreenCoefficients(_: CIVector) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    redCoefficients: CIVector;
    setRedCoefficients(_: CIVector) // property
  }

  interface CIColorCube extends CIFilter {
    cubeData: NSData;
    setCubeData(_: NSData) // property
    cubeDimension: number;
    setCubeDimension(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIColorCubeWithColorSpace extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any) // property
    cubeData: NSData;
    setCubeData(_: NSData) // property
    cubeDimension: number;
    setCubeDimension(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIColorCubesMixedWithMask extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any) // property
    cube0Data: NSData;
    setCube0Data(_: NSData) // property
    cube1Data: NSData;
    setCube1Data(_: NSData) // property
    cubeDimension: number;
    setCubeDimension(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    maskImage: CIImage;
    setMaskImage(_: CIImage) // property
  }

  interface CIColorCurves extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any) // property
    curvesData: NSData;
    setCurvesData(_: NSData) // property
    curvesDomain: CIVector;
    setCurvesDomain(_: CIVector) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIColorInvert extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // interface
  class CIColorKernel extends CIKernel {
    applyWithExtentArguments(extent: CGRect, arguments_?: any[]): CIImage;
  }

  interface CIColorMap extends CIFilter {
    gradientImage: CIImage;
    setGradientImage(_: CIImage) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIColorMatrix extends CIFilter {
    AVector: CIVector;
    setAVector(_: CIVector) // property
    biasVector: CIVector;
    setBiasVector(_: CIVector) // property
    BVector: CIVector;
    setBVector(_: CIVector) // property
    GVector: CIVector;
    setGVector(_: CIVector) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    RVector: CIVector;
    setRVector(_: CIVector) // property
  }

  interface CIColorMonochrome extends CIFilter {
    color: CIColor;
    setColor(_: CIColor) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
  }

  interface CIColorPolynomial extends CIFilter {
    alphaCoefficients: CIVector;
    setAlphaCoefficients(_: CIVector) // property
    blueCoefficients: CIVector;
    setBlueCoefficients(_: CIVector) // property
    greenCoefficients: CIVector;
    setGreenCoefficients(_: CIVector) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    redCoefficients: CIVector;
    setRedCoefficients(_: CIVector) // property
  }

  interface CIColorPosterize extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    levels: number;
    setLevels(_: number) // property
  }

  interface CIComicEffect extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CICompositeOperation extends CIFilter {
    backgroundImage: CIImage;
    setBackgroundImage(_: CIImage) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // interface
  class CIContext extends NSObject {
    static offlineGPUCount(): number;
    workingColorSpace: any; // property
    workingFormat: number; // property
    HEIFRepresentationOfImageFormatColorSpaceOptions(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): NSData;
    JPEGRepresentationOfImageColorSpaceOptions(of: CIImage, colorSpace: any, options: Map<string, any>): NSData;
    PNGRepresentationOfImageFormatColorSpaceOptions(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): NSData;
    TIFFRepresentationOfImageFormatColorSpaceOptions(of: CIImage, format: number, colorSpace: any, options: Map<string, any>): NSData;
    clearCaches(): void;
    createCGImageFromRect(_: CIImage, from: CGRect): any;
    createCGImageFromRectFormatColorSpace(_: CIImage, from: CGRect, format: number, colorSpace?: any): any;
    createCGImageFromRectFormatColorSpaceDeferred(_: CIImage, from: CGRect, format: number, colorSpace?: any, deferred?: boolean): any;
    depthBlurEffectFilterForImageDisparityImagePortraitEffectsMatteHairSemanticSegmentationOrientationOptions(for_: CIImage, disparityImage: CIImage, portraitEffectsMatte?: CIImage, hairSemanticSegmentation?: CIImage, orientation?: CGImagePropertyOrientation, options?: Map<any, any>): CIFilter;
    depthBlurEffectFilterForImageDisparityImagePortraitEffectsMatteOrientationOptions(for_: CIImage, disparityImage: CIImage, portraitEffectsMatte?: CIImage, orientation?: CGImagePropertyOrientation, options?: Map<any, any>): CIFilter;
    depthBlurEffectFilterForImageDataOptions(forImageData: NSData, options?: Map<any, any>): CIFilter;
    depthBlurEffectFilterForImageURLOptions(forImageURL: NSURL, options?: Map<any, any>): CIFilter;
    drawImageInRectFromRect(_: CIImage, in_: CGRect, from: CGRect): void;
    static createWithOptions(options?: Map<string, any>): CIContext;
    prepareRenderFromRectToDestinationAtPointError(fromRect: CIImage, toDestination: CGRect, atPoint: CIRenderDestination, error: CGPoint): boolean;
    reclaimResources(): void;
    renderToBitmapRowBytesBoundsFormatColorSpace(_: CIImage, toBitmap: any, rowBytes: number, bounds: CGRect, format: number, colorSpace?: any): void;
    renderToCVPixelBuffer(_: CIImage, to: any): void;
    renderToCVPixelBufferBoundsColorSpace(_: CIImage, to: any, bounds: CGRect, colorSpace?: any): void;
    renderToIOSurfaceBoundsColorSpace(_: CIImage, to: any, bounds: CGRect, colorSpace?: any): void;
    // renderToMTLTextureCommandBufferBoundsColorSpace(_: CIImage, to: MTLTexture, commandBuffer?: MTLCommandBuffer, bounds?: CGRect, colorSpace?: any): void;
    startTaskToClearError(error: CIRenderDestination): CIRenderTask;
    startTaskToRenderFromRectToDestinationAtPointError(fromRect: CIImage, toDestination: CGRect, atPoint: CIRenderDestination, error: CGPoint): CIRenderTask;
    startTaskToRenderToDestinationError(toDestination: CIImage, error: CIRenderDestination): CIRenderTask;
    writeHEIFRepresentationOfImageToURLFormatColorSpaceOptionsError(toURL: CIImage, format: NSURL, colorSpace: number, options: any, error: Map<string, any>): boolean;
    writeJPEGRepresentationOfImageToURLColorSpaceOptionsError(toURL: CIImage, colorSpace: NSURL, options: any, error: Map<string, any>): boolean;
    writePNGRepresentationOfImageToURLFormatColorSpaceOptionsError(toURL: CIImage, format: NSURL, colorSpace: number, options: any, error: Map<string, any>): boolean;
    writeTIFFRepresentationOfImageToURLFormatColorSpaceOptionsError(toURL: CIImage, format: NSURL, colorSpace: number, options: any, error: Map<string, any>): boolean;
  }

  interface CIConvolution extends CIFilter {
    bias: number;
    setBias(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    weights: CIVector;
    setWeights(_: CIVector) // property
  }

  interface CICopyMachineTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number) // property
    color: CIColor;
    setColor(_: CIColor) // property
    extent: CGRect;
    setExtent(_: CGRect) // property
    opacity: number;
    setOpacity(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CICoreMLModel extends CIFilter {
    headIndex: number;
    setHeadIndex(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    // model: MLModel;
    // setModel(_: MLModel) // property
    softmaxNormalization: boolean;
    setSoftmaxNormalization(_: boolean) // property
  }

  interface CICrystallize extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  // interface
  class CIDataMatrixCodeDescriptor extends CIBarcodeDescriptor {
    static descriptorWithPayloadRowCountColumnCountEccVersion(payload: NSData, rowCount: number, columnCount: number, eccVersion: CIDataMatrixCodeECCVersion): CIDataMatrixCodeDescriptor;
    columnCount: number; // property
    eccVersion: CIDataMatrixCodeECCVersion; // property
    errorCorrectedPayload: NSData; // property
    rowCount: number; // property
    static createWithPayloadRowCountColumnCountEccVersion(payload: NSData, rowCount: number, columnCount: number, eccVersion: CIDataMatrixCodeECCVersion): CIDataMatrixCodeDescriptor;
  }

  interface CIDepthOfField extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    point0: CGPoint;
    setPoint0(_: CGPoint) // property
    point1: CGPoint;
    setPoint1(_: CGPoint) // property
    radius: number;
    setRadius(_: number) // property
    saturation: number;
    setSaturation(_: number) // property
    unsharpMaskIntensity: number;
    setUnsharpMaskIntensity(_: number) // property
    unsharpMaskRadius: number;
    setUnsharpMaskRadius(_: number) // property
  }

  interface CIDepthToDisparity extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // interface
  class CIDetector extends NSObject {
    featuresInImage(in_: CIImage): CIFeature[];
    featuresInImageOptions(in_: CIImage, options?: Map<string, any>): CIFeature[];
  }

  interface CIDiscBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIDisintegrateWithMaskTransition extends CITransitionFilter {
    maskImage: CIImage;
    setMaskImage(_: CIImage) // property
    shadowDensity: number;
    setShadowDensity(_: number) // property
    shadowOffset: CGPoint;
    setShadowOffset(_: CGPoint) // property
    shadowRadius: number;
    setShadowRadius(_: number) // property
  }

  interface CIDisparityToDepth extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIDissolveTransition extends CITransitionFilter {
  }

  interface CIDither extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
  }

  interface CIDocumentEnhancer extends CIFilter {
    amount: number;
    setAmount(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIDotScreen extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    sharpness: number;
    setSharpness(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIEdgePreserveUpsample extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    lumaSigma: number;
    setLumaSigma(_: number) // property
    smallImage: CIImage;
    setSmallImage(_: CIImage) // property
    spatialSigma: number;
    setSpatialSigma(_: number) // property
  }

  interface CIEdgeWork extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIEdges extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
  }

  interface CIEightfoldReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIExposureAdjust extends CIFilter {
    EV: number;
    setEV(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // interface
  class CIFaceFeature extends CIFeature {
    faceAngle: number; // property
    hasFaceAngle: boolean; // property
    hasLeftEyePosition: boolean; // property
    hasMouthPosition: boolean; // property
    hasRightEyePosition: boolean; // property
    hasSmile: boolean; // property
    hasTrackingFrameCount: boolean; // property
    hasTrackingID: boolean; // property
    leftEyeClosed: boolean; // property
    leftEyePosition: CGPoint; // property
    mouthPosition: CGPoint; // property
    rightEyeClosed: boolean; // property
    rightEyePosition: CGPoint; // property
    trackingFrameCount: number; // property
    trackingID: number; // property
  }

  interface CIFalseColor extends CIFilter {
    color0: CIColor;
    setColor0(_: CIColor) // property
    color1: CIColor;
    setColor1(_: CIColor) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // interface
  class CIFeature extends NSObject {
    bounds: CGRect; // property
    type: string; // property
  }

  // interface
  class CIFilter extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static CMYKHalftone(): CIFilter;
    static LabDeltaE(): CIFilter;
    static PDF417BarcodeGenerator(): CIFilter;
    static QRCodeGenerator(): CIFilter;
    static accordionFoldTransitionFilter(): CIFilter;
    static additionCompositingFilter(): CIFilter;
    static affineClampFilter(): CIFilter;
    static affineTileFilter(): CIFilter;
    static attributedTextImageGeneratorFilter(): CIFilter;
    static aztecCodeGeneratorFilter(): CIFilter;
    static barcodeGeneratorFilter(): CIFilter;
    static barsSwipeTransitionFilter(): CIFilter;
    static bicubicScaleTransformFilter(): CIFilter;
    static blendWithAlphaMaskFilter(): CIFilter;
    static blendWithBlueMaskFilter(): CIFilter;
    static blendWithMaskFilter(): CIFilter;
    static blendWithRedMaskFilter(): CIFilter;
    static bloomFilter(): CIFilter;
    static bokehBlurFilter(): CIFilter;
    static boxBlurFilter(): CIFilter;
    static checkerboardGeneratorFilter(): CIFilter;
    static circularScreenFilter(): CIFilter;
    static code128BarcodeGeneratorFilter(): CIFilter;
    static colorBlendModeFilter(): CIFilter;
    static colorBurnBlendModeFilter(): CIFilter;
    static colorClampFilter(): CIFilter;
    static colorControlsFilter(): CIFilter;
    static colorCrossPolynomialFilter(): CIFilter;
    static colorCubeFilter(): CIFilter;
    static colorCubeWithColorSpaceFilter(): CIFilter;
    static colorCubesMixedWithMaskFilter(): CIFilter;
    static colorCurvesFilter(): CIFilter;
    static colorDodgeBlendModeFilter(): CIFilter;
    static colorInvertFilter(): CIFilter;
    static colorMapFilter(): CIFilter;
    static colorMatrixFilter(): CIFilter;
    static colorMonochromeFilter(): CIFilter;
    static colorPolynomialFilter(): CIFilter;
    static colorPosterizeFilter(): CIFilter;
    static comicEffectFilter(): CIFilter;
    static convolution3X3Filter(): CIFilter;
    static convolution5X5Filter(): CIFilter;
    static convolution7X7Filter(): CIFilter;
    static convolution9HorizontalFilter(): CIFilter;
    static convolution9VerticalFilter(): CIFilter;
    static copyMachineTransitionFilter(): CIFilter;
    static coreMLModelFilter(): CIFilter;
    static crystallizeFilter(): CIFilter;
    static darkenBlendModeFilter(): CIFilter;
    static depthOfFieldFilter(): CIFilter;
    static depthToDisparityFilter(): CIFilter;
    static differenceBlendModeFilter(): CIFilter;
    static discBlurFilter(): CIFilter;
    static disintegrateWithMaskTransitionFilter(): CIFilter;
    static disparityToDepthFilter(): CIFilter;
    static dissolveTransitionFilter(): CIFilter;
    static ditherFilter(): CIFilter;
    static divideBlendModeFilter(): CIFilter;
    static documentEnhancerFilter(): CIFilter;
    static dotScreenFilter(): CIFilter;
    static edgePreserveUpsampleFilter(): CIFilter;
    static edgeWorkFilter(): CIFilter;
    static edgesFilter(): CIFilter;
    static eightfoldReflectedTileFilter(): CIFilter;
    static exclusionBlendModeFilter(): CIFilter;
    static exposureAdjustFilter(): CIFilter;
    static falseColorFilter(): CIFilter;
    static filterArrayFromSerializedXMPInputImageExtentError(fromSerializedXMP: NSData, inputImageExtent: CGRect): CIFilter[];
    static filterNamesInCategories(inCategories?: string[]): string[];
    static filterNamesInCategory(inCategory?: string): string[];
    static flashTransitionFilter(): CIFilter;
    static fourfoldReflectedTileFilter(): CIFilter;
    static fourfoldRotatedTileFilter(): CIFilter;
    static fourfoldTranslatedTileFilter(): CIFilter;
    static gaborGradientsFilter(): CIFilter;
    static gammaAdjustFilter(): CIFilter;
    static gaussianBlurFilter(): CIFilter;
    static gaussianGradientFilter(): CIFilter;
    static glideReflectedTileFilter(): CIFilter;
    static gloomFilter(): CIFilter;
    static hardLightBlendModeFilter(): CIFilter;
    static hatchedScreenFilter(): CIFilter;
    static heightFieldFromMaskFilter(): CIFilter;
    static hexagonalPixellateFilter(): CIFilter;
    static highlightShadowAdjustFilter(): CIFilter;
    static hueAdjustFilter(): CIFilter;
    static hueBlendModeFilter(): CIFilter;
    static hueSaturationValueGradientFilter(): CIFilter;
    static kaleidoscopeFilter(): CIFilter;
    static keystoneCorrectionCombinedFilter(): CIFilter;
    static keystoneCorrectionHorizontalFilter(): CIFilter;
    static keystoneCorrectionVerticalFilter(): CIFilter;
    static lanczosScaleTransformFilter(): CIFilter;
    static lenticularHaloGeneratorFilter(): CIFilter;
    static lightenBlendModeFilter(): CIFilter;
    static lineOverlayFilter(): CIFilter;
    static lineScreenFilter(): CIFilter;
    static linearBurnBlendModeFilter(): CIFilter;
    static linearDodgeBlendModeFilter(): CIFilter;
    static linearGradientFilter(): CIFilter;
    static linearToSRGBToneCurveFilter(): CIFilter;
    static localizedDescriptionForFilterName(forFilterName: string): string;
    static localizedNameForCategory(forCategory: string): string;
    static localizedNameForFilterName(forFilterName: string): string;
    static localizedReferenceDocumentationForFilterName(forFilterName: string): NSURL;
    static luminosityBlendModeFilter(): CIFilter;
    static maskToAlphaFilter(): CIFilter;
    static maskedVariableBlurFilter(): CIFilter;
    static maximumComponentFilter(): CIFilter;
    static maximumCompositingFilter(): CIFilter;
    static medianFilter(): CIFilter;
    static meshGeneratorFilter(): CIFilter;
    static minimumComponentFilter(): CIFilter;
    static minimumCompositingFilter(): CIFilter;
    static mixFilter(): CIFilter;
    static modTransitionFilter(): CIFilter;
    static morphologyGradientFilter(): CIFilter;
    static morphologyMaximumFilter(): CIFilter;
    static morphologyMinimumFilter(): CIFilter;
    static morphologyRectangleMaximumFilter(): CIFilter;
    static morphologyRectangleMinimumFilter(): CIFilter;
    static motionBlurFilter(): CIFilter;
    static multiplyBlendModeFilter(): CIFilter;
    static multiplyCompositingFilter(): CIFilter;
    static noiseReductionFilter(): CIFilter;
    static opTileFilter(): CIFilter;
    static overlayBlendModeFilter(): CIFilter;
    static pageCurlTransitionFilter(): CIFilter;
    static pageCurlWithShadowTransitionFilter(): CIFilter;
    static paletteCentroidFilter(): CIFilter;
    static palettizeFilter(): CIFilter;
    static parallelogramTileFilter(): CIFilter;
    static perspectiveCorrectionFilter(): CIFilter;
    static perspectiveRotateFilter(): CIFilter;
    static perspectiveTileFilter(): CIFilter;
    static perspectiveTransformFilter(): CIFilter;
    static perspectiveTransformWithExtentFilter(): CIFilter;
    static photoEffectChromeFilter(): CIFilter;
    static photoEffectFadeFilter(): CIFilter;
    static photoEffectInstantFilter(): CIFilter;
    static photoEffectMonoFilter(): CIFilter;
    static photoEffectNoirFilter(): CIFilter;
    static photoEffectProcessFilter(): CIFilter;
    static photoEffectTonalFilter(): CIFilter;
    static photoEffectTransferFilter(): CIFilter;
    static pinLightBlendModeFilter(): CIFilter;
    static pixellateFilter(): CIFilter;
    static pointillizeFilter(): CIFilter;
    static radialGradientFilter(): CIFilter;
    static randomGeneratorFilter(): CIFilter;
    static registerFilterNameConstructorClassAttributes(_: string, constructor: CIFilterConstructor, classAttributes: Map<string, any>): void;
    static rippleTransitionFilter(): CIFilter;
    static roundedRectangleGeneratorFilter(): CIFilter;
    static sRGBToneCurveToLinearFilter(): CIFilter;
    static saliencyMapFilter(): CIFilter;
    static saturationBlendModeFilter(): CIFilter;
    static screenBlendModeFilter(): CIFilter;
    static sepiaToneFilter(): CIFilter;
    static serializedXMPFromFiltersInputImageExtent(from: CIFilter[], inputImageExtent: CGRect): NSData;
    static shadedMaterialFilter(): CIFilter;
    static sharpenLuminanceFilter(): CIFilter;
    static sixfoldReflectedTileFilter(): CIFilter;
    static sixfoldRotatedTileFilter(): CIFilter;
    static smoothLinearGradientFilter(): CIFilter;
    static softLightBlendModeFilter(): CIFilter;
    static sourceAtopCompositingFilter(): CIFilter;
    static sourceInCompositingFilter(): CIFilter;
    static sourceOutCompositingFilter(): CIFilter;
    static sourceOverCompositingFilter(): CIFilter;
    static spotColorFilter(): CIFilter;
    static spotLightFilter(): CIFilter;
    static starShineGeneratorFilter(): CIFilter;
    static straightenFilter(): CIFilter;
    static stripesGeneratorFilter(): CIFilter;
    static subtractBlendModeFilter(): CIFilter;
    static sunbeamsGeneratorFilter(): CIFilter;
    static supportedRawCameraModels(): string[];
    static swipeTransitionFilter(): CIFilter;
    static temperatureAndTintFilter(): CIFilter;
    static textImageGeneratorFilter(): CIFilter;
    static thermalFilter(): CIFilter;
    static toneCurveFilter(): CIFilter;
    static triangleKaleidoscopeFilter(): CIFilter;
    static triangleTileFilter(): CIFilter;
    static twelvefoldReflectedTileFilter(): CIFilter;
    static unsharpMaskFilter(): CIFilter;
    static vibranceFilter(): CIFilter;
    static vignetteEffectFilter(): CIFilter;
    static vignetteFilter(): CIFilter;
    static whitePointAdjustFilter(): CIFilter;
    static xRayFilter(): CIFilter;
    static zoomBlurFilter(): CIFilter;
    attributes: Map<string, any>; // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    inputKeys: string[]; // property
    name: string;
    setName(_: string) // property
    outputImage: CIImage; // property
    outputKeys: string[]; // property
    applyArgumentsOptions(_: CIKernel, arguments_?: any[], options?: Map<string, any>): CIImage;
    setDefaults(): void;
    setName(_: string): void;
    viewForUIConfigurationExcludedKeys(_: Map<any, any>, excludedKeys: any[]): IKFilterUIView;
  }

  interface CIFilterConstructor {
    // instance method
    filterWithName(withName: string): CIFilter;
  }

  // interface
  class CIFilterGenerator extends NSObject /* implements CIFilterConstructor, NSCopying, NSSecureCoding */ {
    classAttributes: Map<any, any>;
    setClassAttributes(_: Map<any, any>) // property
    exportedKeys: Map<any, any>; // property
    connectObjectWithKeyToObjectWithKey(_: any, withKey?: string, to?: any, withKey2?: string): void;
    disconnectObjectWithKeyToObjectWithKey(_: any, withKey: string, to: any, withKey2: string): void;
    exportKeyFromObjectWithName(_: string, from: any, withName?: string): void;
    filter(): CIFilter;
    static createWithContentsOfURL(contentsOfURL: NSURL): CIFilterGenerator;
    registerFilterName(_: string): void;
    removeExportedKey(_: string): void;
    setAttributesForExportedKey(_: Map<any, any>, forExportedKey: string): void;
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
  }

  interface CIFilter {
    outputImage: CIImage; // property
  }

  // interface
  class CIFilterShape extends NSObject /* implements NSCopying */ {
    extent: CGRect; // property
    static createWithRect(rect: CGRect): CIFilterShape;
    insetByXY(x: number, y: number): CIFilterShape;
    intersectWith(with_: CIFilterShape): CIFilterShape;
    intersectWithRect(with_: CGRect): CIFilterShape;
    transformByInterior(by: CGAffineTransform, interior: boolean): CIFilterShape;
    unionWith(with_: CIFilterShape): CIFilterShape;
    unionWithRect(with_: CGRect): CIFilterShape;
  }

  interface CIFlashTransition extends CITransitionFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color: CIColor;
    setColor(_: CIColor) // property
    extent: CGRect;
    setExtent(_: CGRect) // property
    fadeThreshold: number;
    setFadeThreshold(_: number) // property
    maxStriationRadius: number;
    setMaxStriationRadius(_: number) // property
    striationContrast: number;
    setStriationContrast(_: number) // property
    striationStrength: number;
    setStriationStrength(_: number) // property
  }

  interface CIFourCoordinateGeometryFilter extends CIFilter {
    bottomLeft: CGPoint;
    setBottomLeft(_: CGPoint) // property
    bottomRight: CGPoint;
    setBottomRight(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    topLeft: CGPoint;
    setTopLeft(_: CGPoint) // property
    topRight: CGPoint;
    setTopRight(_: CGPoint) // property
  }

  interface CIFourfoldReflectedTile extends CIFilter {
    acuteAngle: number;
    setAcuteAngle(_: number) // property
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIFourfoldRotatedTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIFourfoldTranslatedTile extends CIFilter {
    acuteAngle: number;
    setAcuteAngle(_: number) // property
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIGaborGradients extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIGammaAdjust extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIGaussianBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIGaussianGradient extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color0: CIColor;
    setColor0(_: CIColor) // property
    color1: CIColor;
    setColor1(_: CIColor) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIGlideReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIGloom extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIHatchedScreen extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    sharpness: number;
    setSharpness(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIHeightFieldFromMask extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIHexagonalPixellate extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    scale: number;
    setScale(_: number) // property
  }

  interface CIHighlightShadowAdjust extends CIFilter {
    highlightAmount: number;
    setHighlightAmount(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
    shadowAmount: number;
    setShadowAmount(_: number) // property
  }

  interface CIHueAdjust extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIHueSaturationValueGradient extends CIFilter {
    colorSpace: any;
    setColorSpace(_: any) // property
    dither: number;
    setDither(_: number) // property
    radius: number;
    setRadius(_: number) // property
    softness: number;
    setSoftness(_: number) // property
    value: number;
    setValue(_: number) // property
  }

  // interface
  class CIImage extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static emptyImage(): CIImage;
    static imageWithDepthData(_: AVDepthData): CIImage;
    static imageWithDepthDataOptions(_: AVDepthData, options?: Map<string, any>): CIImage;
    static imageWithImageProviderSizeFormatColorSpaceOptions(_: any, _2: number, size: number, format: number, colorSpace?: any, options?: Map<string, any>): CIImage;
    static imageWithPortaitEffectsMatte(_: AVPortraitEffectsMatte): CIImage;
    static imageWithPortaitEffectsMatteOptions(_: AVPortraitEffectsMatte, options?: Map<string, any>): CIImage;
    static imageWithSemanticSegmentationMatte(_: AVSemanticSegmentationMatte): CIImage;
    static imageWithSemanticSegmentationMatteOptions(_: AVSemanticSegmentationMatte, options?: Map<string, any>): CIImage;
    CGImage: any; // property
    colorSpace: any; // property
    definition: CIFilterShape; // property
    depthData: AVDepthData; // property
    extent: CGRect; // property
    pixelBuffer: any; // property
    portraitEffectsMatte: AVPortraitEffectsMatte; // property
    properties: Map<string, any>; // property
    semanticSegmentationMatte: AVSemanticSegmentationMatte; // property
    url: NSURL; // property
    static blackImage: CIImage; // property
    static blueImage: CIImage; // property
    static clearImage: CIImage; // property
    static cyanImage: CIImage; // property
    static grayImage: CIImage; // property
    static greenImage: CIImage; // property
    static magentaImage: CIImage; // property
    static redImage: CIImage; // property
    static whiteImage: CIImage; // property
    static yellowImage: CIImage; // property
    autoAdjustmentFilters(): CIFilter[];
    autoAdjustmentFiltersWithOptions(options?: Map<string, any>): CIFilter[];
    drawAtPointFromRectOperationFraction(at: CGPoint, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    drawInRectFromRectOperationFraction(in_: CGRect, from: CGRect, operation: NSCompositingOperation, fraction: number): void;
    imageByApplyingCGOrientation(_: CGImagePropertyOrientation): CIImage;
    imageByApplyingFilter(_: string): CIImage;
    imageByApplyingFilterWithInputParameters(_: string, parameters?: Map<string, any>): CIImage;
    imageByApplyingGaussianBlurWithSigma(sigma: number): CIImage;
    imageByApplyingOrientation(forExifOrientation: number): CIImage;
    imageByApplyingTransform(by: CGAffineTransform): CIImage;
    imageByApplyingTransformHighQualityDownsample(by: CGAffineTransform, highQualityDownsample: boolean): CIImage;
    imageByClampingToExtent(): CIImage;
    imageByClampingToRect(to: CGRect): CIImage;
    imageByColorMatchingColorSpaceToWorkingSpace(from: any): CIImage;
    imageByColorMatchingWorkingSpaceToColorSpace(to: any): CIImage;
    imageByCompositingOverImage(over: CIImage): CIImage;
    imageByCroppingToRect(to: CGRect): CIImage;
    imageByInsertingIntermediate(): CIImage;
    imageByInsertingIntermediate(cache: boolean): CIImage;
    imageByPremultiplyingAlpha(): CIImage;
    imageBySamplingLinear(): CIImage;
    imageBySamplingNearest(): CIImage;
    imageBySettingAlphaOneInExtent(in_: CGRect): CIImage;
    imageBySettingProperties(_: Map<any, any>): CIImage;
    imageByUnpremultiplyingAlpha(): CIImage;
    imageTransformForCGOrientation(for_: CGImagePropertyOrientation): CGAffineTransform;
    imageTransformForOrientation(forExifOrientation: number): CGAffineTransform;
    static createWithBitmapDataBytesPerRowSizeFormatColorSpace(bitmapData: NSData, bytesPerRow: number, size: CGSize, format: number, colorSpace?: any): CIImage;
    static createWithBitmapImageRep(bitmapImageRep: NSBitmapImageRep): CIImage;
    static createWithCGImage(CGImage: any): CIImage;
    static createWithCGImageOptions(CGImage: any, options?: Map<string, any>): CIImage;
    static createWithCGImageSourceIndexOptions(CGImageSource: any, index: number, options?: Map<string, any>): CIImage;
    static createWithCVImageBuffer(CVImageBuffer: any): CIImage;
    static createWithCVImageBufferOptions(CVImageBuffer: any, options?: Map<string, any>): CIImage;
    static createWithCVPixelBuffer(CVPixelBuffer: any): CIImage;
    static createWithCVPixelBufferOptions(CVPixelBuffer: any, options?: Map<string, any>): CIImage;
    static createWithColor(color: CIColor): CIImage;
    static createWithContentsOfURL(contentsOfURL: NSURL): CIImage;
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options?: Map<string, any>): CIImage;
    static createWithData(data: NSData): CIImage;
    static createWithDataOptions(data: NSData, options?: Map<string, any>): CIImage;
    static createWithDepthData(depthData: AVDepthData): CIImage;
    static createWithDepthDataOptions(depthData: AVDepthData, options?: Map<string, any>): CIImage;
    static createWithIOSurface(IOSurface: any): CIImage;
    static createWithIOSurfaceOptions(IOSurface: any, options?: Map<string, any>): CIImage;
    static createWithImageProviderSizeFormatColorSpaceOptions(_: any, imageProvider: number, size: number, format: number, colorSpace?: any, options?: Map<string, any>): CIImage;
    // static createWithMTLTextureOptions(MTLTexture: MTLTexture, options?: Map<string, any>): CIImage;
    static createWithPortaitEffectsMatte(portaitEffectsMatte: AVPortraitEffectsMatte): CIImage;
    static createWithPortaitEffectsMatteOptions(portaitEffectsMatte: AVPortraitEffectsMatte, options?: Map<string, any>): CIImage;
    static createWithSemanticSegmentationMatte(semanticSegmentationMatte: AVSemanticSegmentationMatte): CIImage;
    static createWithSemanticSegmentationMatteOptions(semanticSegmentationMatte: AVSemanticSegmentationMatte, options?: Map<string, any>): CIImage;
    regionOfInterestForImageInRect(for_: CIImage, in_: CGRect): CGRect;
  }

  // interface
  class CIImageAccumulator extends NSObject {
    extent: CGRect; // property
    format: number; // property
    clear(): void;
    image(): CIImage;
    static createWithExtentFormat(extent: CGRect, format: number): CIImageAccumulator;
    static createWithExtentFormatColorSpace(extent: CGRect, format: number, colorSpace: any): CIImageAccumulator;
    setImage(_: CIImage): void;
    setImageDirtyRect(_: CIImage, dirtyRect: CGRect): void;
  }

  interface CIImageProcessorInput {
    baseAddress: any; // property
    bytesPerRow: number; // property
    format: number; // property
    // metalTexture: MTLTexture; // property
    pixelBuffer: any; // property
    region: CGRect; // property
    surface: any; // property
  }

  // interface
  class CIImageProcessorKernel extends NSObject {
    static applyWithExtentInputsArgumentsError(inputs: CGRect, arguments_?: CIImage[], error?: Map<string, any>): CIImage;
    static formatForInputAtIndex(at: number): number;
    static processWithInputsWithArgumentsOutputError(arguments_?: CIImageProcessorInput[], output?: Map<string, any>, error?: CIImageProcessorOutput): boolean;
    static roiForInputArgumentsOutputRect(forInput: number, arguments_?: Map<string, any>, outputRect?: CGRect): CGRect;
    static outputFormat: number; // property
    static outputIsOpaque: boolean; // property
    static synchronizeInputs: boolean; // property
  }

  interface CIImageProcessorOutput {
    baseAddress: any; // property
    bytesPerRow: number; // property
    format: number; // property
    // metalCommandBuffer: MTLCommandBuffer; // property
    // metalTexture: MTLTexture; // property
    pixelBuffer: any; // property
    region: CGRect; // property
    surface: any; // property
  }

  interface CIKaleidoscope extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    count: number;
    setCount(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // interface
  class CIKernel extends NSObject {
    static kernelWithFunctionNameFromMetalLibraryDataError(fromMetalLibraryData: string, error: NSData): CIKernel;
    static kernelWithFunctionNameFromMetalLibraryDataOutputPixelFormatError(fromMetalLibraryData: string, outputPixelFormat: NSData, error: number): CIKernel;
    name: string; // property
    applyWithExtentRoiCallbackArguments(extent: CGRect, roiCallback: (p1: number, p2: CGRect) => CGRect, arguments_?: any[]): CIImage;
    setROISelector(_: string): void;
  }

  interface CIKeystoneCorrectionCombined extends CIFourCoordinateGeometryFilter {
    focalLength: number;
    setFocalLength(_: number) // property
  }

  interface CIKeystoneCorrectionHorizontal extends CIFourCoordinateGeometryFilter {
    focalLength: number;
    setFocalLength(_: number) // property
  }

  interface CIKeystoneCorrectionVertical extends CIFourCoordinateGeometryFilter {
    focalLength: number;
    setFocalLength(_: number) // property
  }

  interface CILabDeltaE extends CIFilter {
    image2: CIImage;
    setImage2(_: CIImage) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CILanczosScaleTransform extends CIFilter {
    aspectRatio: number;
    setAspectRatio(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    scale: number;
    setScale(_: number) // property
  }

  interface CILenticularHaloGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color: CIColor;
    setColor(_: CIColor) // property
    haloOverlap: number;
    setHaloOverlap(_: number) // property
    haloRadius: number;
    setHaloRadius(_: number) // property
    haloWidth: number;
    setHaloWidth(_: number) // property
    striationContrast: number;
    setStriationContrast(_: number) // property
    striationStrength: number;
    setStriationStrength(_: number) // property
    time: number;
    setTime(_: number) // property
  }

  interface CILineOverlay extends CIFilter {
    contrast: number;
    setContrast(_: number) // property
    edgeIntensity: number;
    setEdgeIntensity(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    NRNoiseLevel: number;
    setNRNoiseLevel(_: number) // property
    NRSharpness: number;
    setNRSharpness(_: number) // property
    threshold: number;
    setThreshold(_: number) // property
  }

  interface CILineScreen extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    sharpness: number;
    setSharpness(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CILinearGradient extends CIFilter {
    color0: CIColor;
    setColor0(_: CIColor) // property
    color1: CIColor;
    setColor1(_: CIColor) // property
    point0: CGPoint;
    setPoint0(_: CGPoint) // property
    point1: CGPoint;
    setPoint1(_: CGPoint) // property
  }

  interface CILinearToSRGBToneCurve extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIMaskToAlpha extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIMaskedVariableBlur extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    mask: CIImage;
    setMask(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIMaximumComponent extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIMedian extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIMeshGenerator extends CIFilter {
    color: CIColor;
    setColor(_: CIColor) // property
    mesh: any[];
    setMesh(_: any[]) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIMinimumComponent extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIMix extends CIFilter {
    amount: number;
    setAmount(_: number) // property
    backgroundImage: CIImage;
    setBackgroundImage(_: CIImage) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIModTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    compression: number;
    setCompression(_: number) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIMorphologyGradient extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIMorphologyMaximum extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIMorphologyMinimum extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIMorphologyRectangleMaximum extends CIFilter {
    height: number;
    setHeight(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIMorphologyRectangleMinimum extends CIFilter {
    height: number;
    setHeight(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIMotionBlur extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CINoiseReduction extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    noiseLevel: number;
    setNoiseLevel(_: number) // property
    sharpness: number;
    setSharpness(_: number) // property
  }

  interface CIOpTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    scale: number;
    setScale(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIPDF417BarcodeGenerator extends CIFilter {
    alwaysSpecifyCompaction: number;
    setAlwaysSpecifyCompaction(_: number) // property
    compactionMode: number;
    setCompactionMode(_: number) // property
    compactStyle: number;
    setCompactStyle(_: number) // property
    correctionLevel: number;
    setCorrectionLevel(_: number) // property
    dataColumns: number;
    setDataColumns(_: number) // property
    maxHeight: number;
    setMaxHeight(_: number) // property
    maxWidth: number;
    setMaxWidth(_: number) // property
    message: NSData;
    setMessage(_: NSData) // property
    minHeight: number;
    setMinHeight(_: number) // property
    minWidth: number;
    setMinWidth(_: number) // property
    preferredAspectRatio: number;
    setPreferredAspectRatio(_: number) // property
    rows: number;
    setRows(_: number) // property
  }

  // interface
  class CIPDF417CodeDescriptor extends CIBarcodeDescriptor {
    static descriptorWithPayloadIsCompactRowCountColumnCount(payload: NSData, isCompact: boolean, rowCount: number, columnCount: number): CIPDF417CodeDescriptor;
    columnCount: number; // property
    errorCorrectedPayload: NSData; // property
    isCompact: boolean; // property
    rowCount: number; // property
    static createWithPayloadIsCompactRowCountColumnCount(payload: NSData, isCompact: boolean, rowCount: number, columnCount: number): CIPDF417CodeDescriptor;
  }

  interface CIPageCurlTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number) // property
    backsideImage: CIImage;
    setBacksideImage(_: CIImage) // property
    extent: CGRect;
    setExtent(_: CGRect) // property
    radius: number;
    setRadius(_: number) // property
    shadingImage: CIImage;
    setShadingImage(_: CIImage) // property
  }

  interface CIPageCurlWithShadowTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number) // property
    backsideImage: CIImage;
    setBacksideImage(_: CIImage) // property
    extent: CGRect;
    setExtent(_: CGRect) // property
    radius: number;
    setRadius(_: number) // property
    shadowAmount: number;
    setShadowAmount(_: number) // property
    shadowExtent: CGRect;
    setShadowExtent(_: CGRect) // property
    shadowSize: number;
    setShadowSize(_: number) // property
  }

  interface CIPaletteCentroid extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    paletteImage: CIImage;
    setPaletteImage(_: CIImage) // property
    perceptual: boolean;
    setPerceptual(_: boolean) // property
  }

  interface CIPalettize extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    paletteImage: CIImage;
    setPaletteImage(_: CIImage) // property
    perceptual: boolean;
    setPerceptual(_: boolean) // property
  }

  interface CIParallelogramTile extends CIFilter {
    acuteAngle: number;
    setAcuteAngle(_: number) // property
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIPerspectiveCorrection extends CIFourCoordinateGeometryFilter {
    crop: boolean;
    setCrop(_: boolean) // property
  }

  interface CIPerspectiveRotate extends CIFilter {
    focalLength: number;
    setFocalLength(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    pitch: number;
    setPitch(_: number) // property
    roll: number;
    setRoll(_: number) // property
    yaw: number;
    setYaw(_: number) // property
  }

  interface CIPerspectiveTile extends CIFilter {
    bottomLeft: CGPoint;
    setBottomLeft(_: CGPoint) // property
    bottomRight: CGPoint;
    setBottomRight(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    topLeft: CGPoint;
    setTopLeft(_: CGPoint) // property
    topRight: CGPoint;
    setTopRight(_: CGPoint) // property
  }

  interface CIPerspectiveTransform extends CIFourCoordinateGeometryFilter {
  }

  interface CIPerspectiveTransformWithExtent extends CIFourCoordinateGeometryFilter {
    extent: CGRect;
    setExtent(_: CGRect) // property
  }

  interface CIPhotoEffect extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIPixellate extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    scale: number;
    setScale(_: number) // property
  }

  // interface
  class CIPlugIn extends NSObject {
    static loadNonExecutablePlugIn(_: NSURL): void;
    static loadNonExecutablePlugIns(): void;
  }

  interface CIPlugInRegistration {
    // instance method
    load(_: any): boolean;
  }

  interface CIPointillize extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
  }

  // interface
  class CIQRCodeDescriptor extends CIBarcodeDescriptor {
    static descriptorWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(payload: NSData, symbolVersion: number, maskPattern: number, errorCorrectionLevel: CIQRCodeErrorCorrectionLevel): CIQRCodeDescriptor;
    errorCorrectedPayload: NSData; // property
    errorCorrectionLevel: CIQRCodeErrorCorrectionLevel; // property
    maskPattern: number; // property
    symbolVersion: number; // property
    static createWithPayloadSymbolVersionMaskPatternErrorCorrectionLevel(payload: NSData, symbolVersion: number, maskPattern: number, errorCorrectionLevel: CIQRCodeErrorCorrectionLevel): CIQRCodeDescriptor;
  }

  // interface
  class CIQRCodeFeature extends CIFeature /* implements NSCopying, NSSecureCoding */ {
    bottomLeft: CGPoint; // property
    bottomRight: CGPoint; // property
    messageString: string; // property
    symbolDescriptor: CIQRCodeDescriptor; // property
    topLeft: CGPoint; // property
    topRight: CGPoint; // property
  }

  interface CIQRCodeGenerator extends CIFilter {
    correctionLevel: string;
    setCorrectionLevel(_: string) // property
    message: NSData;
    setMessage(_: NSData) // property
  }

  interface CIRadialGradient extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color0: CIColor;
    setColor0(_: CIColor) // property
    color1: CIColor;
    setColor1(_: CIColor) // property
    radius0: number;
    setRadius0(_: number) // property
    radius1: number;
    setRadius1(_: number) // property
  }

  interface CIRandomGenerator extends CIFilter {
  }

  // interface
  class CIRectangleFeature extends CIFeature {
    bottomLeft: CGPoint; // property
    bottomRight: CGPoint; // property
    topLeft: CGPoint; // property
    topRight: CGPoint; // property
  }

  // interface
  class CIRenderDestination extends NSObject {
    alphaMode: CIRenderDestinationAlphaMode;
    setAlphaMode(_: CIRenderDestinationAlphaMode) // property
    blendKernel: CIBlendKernel;
    setBlendKernel(_: CIBlendKernel) // property
    blendsInDestinationColorSpace: boolean;
    setBlendsInDestinationColorSpace(_: boolean) // property
    isClamped: boolean;
    setClamped(_: boolean) // property
    colorSpace: any;
    setColorSpace(_: any) // property
    isDithered: boolean;
    setDithered(_: boolean) // property
    isFlipped: boolean;
    setFlipped(_: boolean) // property
    height: number; // property
    width: number; // property
    static createWithBitmapDataWidthHeightBytesPerRowFormat(bitmapData: any, width: number, height: number, bytesPerRow: number, format: number): CIRenderDestination;
    static createWithGLTextureTargetWidthHeight(GLTexture: number, target: number, width: number, height: number): CIRenderDestination;
    // static createWithIOSurface(IOSurface: IOSurface): CIRenderDestination;
    // static createWithMTLTextureCommandBuffer(MTLTexture: MTLTexture, commandBuffer?: MTLCommandBuffer): CIRenderDestination;
    static createWithPixelBuffer(pixelBuffer: any): CIRenderDestination;
    // static createWithWidthHeightPixelFormatCommandBufferMtlTextureProvider(width: number, height: number, pixelFormat: MTLPixelFormat, commandBuffer?: MTLCommandBuffer, mtlTextureProvider?: () => MTLTexture): CIRenderDestination;
  }

  // interface
  class CIRenderInfo extends NSObject {
    kernelExecutionTime: number; // property
    passCount: number; // property
    pixelsProcessed: number; // property
  }

  // interface
  class CIRenderTask extends NSObject {
    waitUntilCompletedAndReturnError(): CIRenderInfo;
  }

  interface CIRippleTransition extends CITransitionFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    extent: CGRect;
    setExtent(_: CGRect) // property
    scale: number;
    setScale(_: number) // property
    shadingImage: CIImage;
    setShadingImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIRoundedRectangleGenerator extends CIFilter {
    color: CIColor;
    setColor(_: CIColor) // property
    extent: CGRect;
    setExtent(_: CGRect) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CISRGBToneCurveToLinear extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CISaliencyMap extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // interface
  class CISampler extends NSObject /* implements NSCopying */ {
    static samplerWithImageKeysAndValues(_: CIImage, keysAndValues: any): CISampler;
    definition: CIFilterShape; // property
    extent: CGRect; // property
    static createWithImage(image: CIImage): CISampler;
    static createWithImageOptions(image: CIImage, options?: Map<any, any>): CISampler;
  }

  interface CISepiaTone extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
  }

  interface CIShadedMaterial extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    scale: number;
    setScale(_: number) // property
    shadingImage: CIImage;
    setShadingImage(_: CIImage) // property
  }

  interface CISharpenLuminance extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    radius: number;
    setRadius(_: number) // property
    sharpness: number;
    setSharpness(_: number) // property
  }

  interface CISixfoldReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CISixfoldRotatedTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CISmoothLinearGradient extends CIFilter {
    color0: CIColor;
    setColor0(_: CIColor) // property
    color1: CIColor;
    setColor1(_: CIColor) // property
    point0: CGPoint;
    setPoint0(_: CGPoint) // property
    point1: CGPoint;
    setPoint1(_: CGPoint) // property
  }

  interface CISpotColor extends CIFilter {
    centerColor1: CIColor;
    setCenterColor1(_: CIColor) // property
    centerColor2: CIColor;
    setCenterColor2(_: CIColor) // property
    centerColor3: CIColor;
    setCenterColor3(_: CIColor) // property
    closeness1: number;
    setCloseness1(_: number) // property
    closeness2: number;
    setCloseness2(_: number) // property
    closeness3: number;
    setCloseness3(_: number) // property
    contrast1: number;
    setContrast1(_: number) // property
    contrast2: number;
    setContrast2(_: number) // property
    contrast3: number;
    setContrast3(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    replacementColor1: CIColor;
    setReplacementColor1(_: CIColor) // property
    replacementColor2: CIColor;
    setReplacementColor2(_: CIColor) // property
    replacementColor3: CIColor;
    setReplacementColor3(_: CIColor) // property
  }

  interface CISpotLight extends CIFilter {
    brightness: number;
    setBrightness(_: number) // property
    color: CIColor;
    setColor(_: CIColor) // property
    concentration: number;
    setConcentration(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    lightPointsAt: CIVector;
    setLightPointsAt(_: CIVector) // property
    lightPosition: CIVector;
    setLightPosition(_: CIVector) // property
  }

  interface CIStarShineGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color: CIColor;
    setColor(_: CIColor) // property
    crossAngle: number;
    setCrossAngle(_: number) // property
    crossOpacity: number;
    setCrossOpacity(_: number) // property
    crossScale: number;
    setCrossScale(_: number) // property
    crossWidth: number;
    setCrossWidth(_: number) // property
    epsilon: number;
    setEpsilon(_: number) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIStraighten extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIStripesGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color0: CIColor;
    setColor0(_: CIColor) // property
    color1: CIColor;
    setColor1(_: CIColor) // property
    sharpness: number;
    setSharpness(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CISunbeamsGenerator extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    color: CIColor;
    setColor(_: CIColor) // property
    maxStriationRadius: number;
    setMaxStriationRadius(_: number) // property
    striationContrast: number;
    setStriationContrast(_: number) // property
    striationStrength: number;
    setStriationStrength(_: number) // property
    sunRadius: number;
    setSunRadius(_: number) // property
    time: number;
    setTime(_: number) // property
  }

  interface CISwipeTransition extends CITransitionFilter {
    angle: number;
    setAngle(_: number) // property
    color: CIColor;
    setColor(_: CIColor) // property
    extent: CGRect;
    setExtent(_: CGRect) // property
    opacity: number;
    setOpacity(_: number) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CITemperatureAndTint extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    neutral: CIVector;
    setNeutral(_: CIVector) // property
    targetNeutral: CIVector;
    setTargetNeutral(_: CIVector) // property
  }

  // interface
  class CITextFeature extends CIFeature {
    bottomLeft: CGPoint; // property
    bottomRight: CGPoint; // property
    subFeatures: any[]; // property
    topLeft: CGPoint; // property
    topRight: CGPoint; // property
  }

  interface CITextImageGenerator extends CIFilter {
    fontName: string;
    setFontName(_: string) // property
    fontSize: number;
    setFontSize(_: number) // property
    scaleFactor: number;
    setScaleFactor(_: number) // property
    text: string;
    setText(_: string) // property
  }

  interface CIThermal extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIToneCurve extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    point0: CGPoint;
    setPoint0(_: CGPoint) // property
    point1: CGPoint;
    setPoint1(_: CGPoint) // property
    point2: CGPoint;
    setPoint2(_: CGPoint) // property
    point3: CGPoint;
    setPoint3(_: CGPoint) // property
    point4: CGPoint;
    setPoint4(_: CGPoint) // property
  }

  interface CITransitionFilter extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    targetImage: CIImage;
    setTargetImage(_: CIImage) // property
    time: number;
    setTime(_: number) // property
  }

  interface CITriangleKaleidoscope extends CIFilter {
    decay: number;
    setDecay(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    point: CGPoint;
    setPoint(_: CGPoint) // property
    rotation: number;
    setRotation(_: number) // property
    size: number;
    setSize(_: number) // property
  }

  interface CITriangleTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CITwelvefoldReflectedTile extends CIFilter {
    angle: number;
    setAngle(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    width: number;
    setWidth(_: number) // property
  }

  interface CIUnsharpMask extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
    radius: number;
    setRadius(_: number) // property
  }

  // interface
  class CIVector extends NSObject /* implements NSCopying, NSSecureCoding */ {
    CGAffineTransformValue: CGAffineTransform; // property
    CGPointValue: CGPoint; // property
    CGRectValue: CGRect; // property
    W: number; // property
    X: number; // property
    Y: number; // property
    Z: number; // property
    count: number; // property
    stringRepresentation: string; // property
    static createWithCGAffineTransform(CGAffineTransform: CGAffineTransform): CIVector;
    static createWithCGPoint(CGPoint: CGPoint): CIVector;
    static createWithCGRect(CGRect: CGRect): CIVector;
    static createWithString(string: string): CIVector;
    static createWithValuesCount(values: number, count: number): CIVector;
    static createWithX(x: number): CIVector;
    static createWithXY(x: number, y: number): CIVector;
    static createWithXYZ(x: number, y: number, z: number): CIVector;
    static createWithXYZW(x: number, y: number, z: number, w: number): CIVector;
    valueAtIndex(at: number): number;
  }

  interface CIVibrance extends CIFilter {
    amount: number;
    setAmount(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIVignette extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
    radius: number;
    setRadius(_: number) // property
  }

  interface CIVignetteEffect extends CIFilter {
    center: CGPoint;
    setCenter(_: CGPoint) // property
    falloff: number;
    setFalloff(_: number) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
    intensity: number;
    setIntensity(_: number) // property
    radius: number;
    setRadius(_: number) // property
  }

  // interface
  class CIWarpKernel extends CIKernel {
    applyWithExtentRoiCallbackImageArguments(extent: CGRect, roiCallback: (p1: number, p2: CGRect) => CGRect, image: CIImage, arguments_?: any[]): CIImage;
  }

  interface CIWhitePointAdjust extends CIFilter {
    color: CIColor;
    setColor(_: CIColor) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIXRay extends CIFilter {
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  interface CIZoomBlur extends CIFilter {
    amount: number;
    setAmount(_: number) // property
    center: CGPoint;
    setCenter(_: CGPoint) // property
    inputImage: CIImage;
    setInputImage(_: CIImage) // property
  }

  // export declare function CMAudioDeviceClockCreate(allocator: any, deviceUID: string, clockOut: any): number;

  // export declare function CMAudioDeviceClockCreateFromAudioDeviceID(allocator: any, deviceID: number, clockOut: any): number;

  // export declare function CMAudioDeviceClockGetAudioDevice(clock: any, deviceUIDOut: string, deviceIDOut: number, trackingDefaultDeviceOut: string | any): number;

  // export declare function CMAudioDeviceClockSetAudioDeviceID(clock: any, deviceID: number): number;

  // export declare function CMAudioDeviceClockSetAudioDeviceUID(clock: any, deviceUID: string): number;

  // export declare function CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(allocator: any, audioFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export declare function CMAudioFormatDescriptionCreate(allocator: any, asbd: AudioStreamBasicDescription, layoutSize: number, layout: AudioChannelLayout, magicCookieSize: number, magicCookie: any, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export declare function CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer(allocator: any, soundDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData(allocator: any, soundDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMAudioFormatDescriptionCreateSummary(allocator: any, formatDescriptionArray: any[], flags: number, formatDescriptionOut: any): number;

  // export declare function CMAudioFormatDescriptionEqual(formatDescription: any, otherFormatDescription: any, equalityMask: number, equalityMaskOut: number): boolean;

  // export declare function CMAudioFormatDescriptionGetChannelLayout(desc: any, sizeOut: number): AudioChannelLayout;

  // export declare function CMAudioFormatDescriptionGetFormatList(desc: any, sizeOut: number): AudioFormatListItem;

  // export declare function CMAudioFormatDescriptionGetMagicCookie(desc: any, sizeOut: number): any;

  // export declare function CMAudioFormatDescriptionGetMostCompatibleFormat(desc: any): AudioFormatListItem;

  // export declare function CMAudioFormatDescriptionGetRichestDecodableFormat(desc: any): AudioFormatListItem;

  // export declare function CMAudioFormatDescriptionGetStreamBasicDescription(desc: any): AudioStreamBasicDescription;

  // export declare function CMAudioSampleBufferCreateReadyWithPacketDescriptions(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any): number;

  // export declare function CMAudioSampleBufferCreateWithPacketDescriptions(allocator: any, dataBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any): number;

  // export declare function CMAudioSampleBufferCreateWithPacketDescriptionsAndMakeDataReadyHandler(allocator: any, dataBuffer: any, dataReady: boolean, formatDescription: any, numSamples: number, presentationTimeStamp: CMTime, packetDescriptions: AudioStreamPacketDescription, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

  // export declare function CMBlockBufferAccessDataBytes(theBuffer: any, offset: number, length: number, temporaryBlock: any, returnedPointerOut: string): number;

  // export declare function CMBlockBufferAppendBufferReference(theBuffer: any, targetBBuf: any, offsetToData: number, dataLength: number, flags: number): number;

  // export declare function CMBlockBufferAppendMemoryBlock(theBuffer: any, memoryBlock: any, blockLength: number, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number): number;

  // export declare function CMBlockBufferAssureBlockMemory(theBuffer: any): number;

  // export declare function CMBlockBufferCopyDataBytes(theSourceBuffer: any, offsetToData: number, dataLength: number, destination: any): number;

  // export declare function CMBlockBufferCreateContiguous(structureAllocator: any, sourceBuffer: any, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

  // export declare function CMBlockBufferCreateEmpty(structureAllocator: any, subBlockCapacity: number, flags: number, blockBufferOut: any): number;

  // export declare function CMBlockBufferCreateWithBufferReference(structureAllocator: any, bufferReference: any, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

  // export declare function CMBlockBufferCreateWithMemoryBlock(structureAllocator: any, memoryBlock: any, blockLength: number, blockAllocator: any, customBlockSource: CMBlockBufferCustomBlockSource, offsetToData: number, dataLength: number, flags: number, blockBufferOut: any): number;

  // struct
  interface CMBlockBufferCustomBlockSource {
    version: number;
    AllocateBlock: (p1: any, p2: number) => any;
    FreeBlock: (p1: any, p2: any, p3: number) => void;
    refCon: any;
  }

  // export declare function CMBlockBufferFillDataBytes(fillByte: number, destinationBuffer: any, offsetIntoDestination: number, dataLength: number): number;

  // export declare function CMBlockBufferGetDataLength(theBuffer: any): number;

  // export declare function CMBlockBufferGetDataPointer(theBuffer: any, offset: number, lengthAtOffsetOut: number, totalLengthOut: number, dataPointerOut: string): number;

  // export declare function CMBlockBufferGetTypeID(): number;

  // export declare function CMBlockBufferIsEmpty(theBuffer: any): boolean;

  // export declare function CMBlockBufferIsRangeContiguous(theBuffer: any, offset: number, length: number): boolean;

  // export declare function CMBlockBufferReplaceDataBytes(sourceBytes: any, destinationBuffer: any, offsetIntoDestination: number, dataLength: number): number;

  // struct
  interface CMBufferCallbacks {
    version: number;
    refcon: any;
    getDecodeTimeStamp: (p1: any, p2: any) => CMTime;
    getPresentationTimeStamp: (p1: any, p2: any) => CMTime;
    getDuration: (p1: any, p2: any) => CMTime;
    isDataReady: (p1: any, p2: any) => boolean;
    compare: (p1: any, p2: any, p3: any) => CFComparisonResult;
    dataBecameReadyNotification: string;
    getSize: (p1: any, p2: any) => number;
  }

  // struct
  interface CMBufferHandlers {
    version: number;
    getDecodeTimeStamp: (p1: any) => CMTime;
    getPresentationTimeStamp: (p1: any) => CMTime;
    getDuration: (p1: any) => CMTime;
    isDataReady: (p1: any) => boolean;
    compare: (p1: any, p2: any) => CFComparisonResult;
    dataBecameReadyNotification: string;
    getSize: (p1: any) => number;
  }

  // export declare function CMBufferQueueCallForEachBuffer(queue: any, callback: (p1: any, p2: any) => number, refcon: any): number;

  // export declare function CMBufferQueueContainsEndOfData(queue: any): boolean;

  // export declare function CMBufferQueueCreate(allocator: any, capacity: number, callbacks: CMBufferCallbacks, queueOut: any): number;

  // export declare function CMBufferQueueCreateWithHandlers(allocator: any, capacity: number, handlers: CMBufferHandlers, queueOut: any): number;

  // export declare function CMBufferQueueDequeueAndRetain(queue: any): any;

  // export declare function CMBufferQueueDequeueIfDataReadyAndRetain(queue: any): any;

  // export declare function CMBufferQueueEnqueue(queue: any, buf: any): number;

  // export declare function CMBufferQueueGetBufferCount(queue: any): number;

  // export declare function CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS(): CMBufferCallbacks;

  // export declare function CMBufferQueueGetCallbacksForUnsortedSampleBuffers(): CMBufferCallbacks;

  // export declare function CMBufferQueueGetDuration(queue: any): CMTime;

  // export declare function CMBufferQueueGetEndPresentationTimeStamp(queue: any): CMTime;

  // export declare function CMBufferQueueGetFirstDecodeTimeStamp(queue: any): CMTime;

  // export declare function CMBufferQueueGetFirstPresentationTimeStamp(queue: any): CMTime;

  // export declare function CMBufferQueueGetHead(queue: any): any;

  // export declare function CMBufferQueueGetMaxPresentationTimeStamp(queue: any): CMTime;

  // export declare function CMBufferQueueGetMinDecodeTimeStamp(queue: any): CMTime;

  // export declare function CMBufferQueueGetMinPresentationTimeStamp(queue: any): CMTime;

  // export declare function CMBufferQueueGetTotalSize(queue: any): number;

  // export declare function CMBufferQueueGetTypeID(): number;

  // export declare function CMBufferQueueInstallTrigger(queue: any, callback: (p1: any, p2: any) => void, refcon: any, condition: number, time: CMTime, triggerTokenOut: any): number;

  // export declare function CMBufferQueueInstallTriggerHandler(queue: any, condition: number, time: CMTime, triggerTokenOut: any, handler: (p1: any) => void): number;

  // export declare function CMBufferQueueInstallTriggerHandlerWithIntegerThreshold(queue: any, condition: number, threshold: number, triggerTokenOut: any, handler: (p1: any) => void): number;

  // export declare function CMBufferQueueInstallTriggerWithIntegerThreshold(queue: any, callback: (p1: any, p2: any) => void, refcon: any, condition: number, threshold: number, triggerTokenOut: any): number;

  // export declare function CMBufferQueueIsAtEndOfData(queue: any): boolean;

  // export declare function CMBufferQueueIsEmpty(queue: any): boolean;

  // export declare function CMBufferQueueMarkEndOfData(queue: any): number;

  // export declare function CMBufferQueueRemoveTrigger(queue: any, triggerToken: any): number;

  // export declare function CMBufferQueueReset(queue: any): number;

  // export declare function CMBufferQueueResetWithCallback(queue: any, callback: (p1: any, p2: any) => void, refcon: any): number;

  // export declare function CMBufferQueueSetValidationCallback(queue: any, callback: (p1: any, p2: any, p3: any) => number, refcon: any): number;

  // export declare function CMBufferQueueSetValidationHandler(queue: any, handler: (p1: any, p2: any) => number): number;

  // export declare function CMBufferQueueTestTrigger(queue: any, triggerToken: any): boolean;

  // export declare function CMClockConvertHostTimeToSystemUnits(hostTime: CMTime): number;

  // export declare function CMClockGetAnchorTime(clock: any, clockTimeOut: CMTime, referenceClockTimeOut: CMTime): number;

  // export declare function CMClockGetHostTimeClock(): any;

  // export declare function CMClockGetTime(clock: any): CMTime;

  // export declare function CMClockGetTypeID(): number;

  // export declare function CMClockInvalidate(clock: any): void;

  // export declare function CMClockMakeHostTimeFromSystemUnits(hostTime: number): CMTime;

  // export declare function CMClockMightDrift(clock: any, otherClock: any): boolean;

  // export declare function CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(allocator: any, closedCaptionFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export declare function CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(allocator: any, closedCaptionDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData(allocator: any, closedCaptionDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMCopyDictionaryOfAttachments(allocator: any, target: any, attachmentMode: number): Map<any, any>;

  // export declare function CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(soundDescriptionBlockBuffer: any, flavor: any): boolean;

  // export declare function CMFormatDescriptionCreate(allocator: any, mediaType: number, mediaSubType: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export declare function CMFormatDescriptionEqual(formatDescription: any, otherFormatDescription: any): boolean;

  // export declare function CMFormatDescriptionEqualIgnoringExtensionKeys(formatDescription: any, otherFormatDescription: any, formatDescriptionExtensionKeysToIgnore: any, sampleDescriptionExtensionAtomKeysToIgnore: any): boolean;

  // export declare function CMFormatDescriptionGetExtension(desc: any, extensionKey: string): any;

  // export declare function CMFormatDescriptionGetExtensions(desc: any): Map<any, any>;

  // export declare function CMFormatDescriptionGetMediaSubType(desc: any): number;

  // export declare function CMFormatDescriptionGetMediaType(desc: any): number;

  // export declare function CMFormatDescriptionGetTypeID(): number;

  // export declare function CMGetAttachment(target: any, key: string, attachmentModeOut: number): any;

  // export declare function CMMemoryPoolCreate(options: Map<any, any>): any;

  // export declare function CMMemoryPoolFlush(pool: any): void;

  // export declare function CMMemoryPoolGetAllocator(pool: any): any;

  // export declare function CMMemoryPoolGetTypeID(): number;

  // export declare function CMMemoryPoolInvalidate(pool: any): void;

  // export declare function CMMetadataCreateIdentifierForKeyAndKeySpace(allocator: any, key: any, keySpace: string, identifierOut: string): number;

  // export declare function CMMetadataCreateKeyFromIdentifier(allocator: any, identifier: string, keyOut: any): number;

  // export declare function CMMetadataCreateKeyFromIdentifierAsCFData(allocator: any, identifier: string, keyOut: Data): number;

  // export declare function CMMetadataCreateKeySpaceFromIdentifier(allocator: any, identifier: string, keySpaceOut: string): number;

  // export declare function CMMetadataDataTypeRegistryDataTypeConformsToDataType(dataType: string, conformsToDataType: string): boolean;

  // export declare function CMMetadataDataTypeRegistryDataTypeIsBaseDataType(dataType: string): boolean;

  // export declare function CMMetadataDataTypeRegistryDataTypeIsRegistered(dataType: string): boolean;

  // export declare function CMMetadataDataTypeRegistryGetBaseDataTypeForConformingDataType(dataType: string): string;

  // export declare function CMMetadataDataTypeRegistryGetBaseDataTypes(): any[];

  // export declare function CMMetadataDataTypeRegistryGetConformingDataTypes(dataType: string): any[];

  // export declare function CMMetadataDataTypeRegistryGetDataTypeDescription(dataType: string): string;

  // export declare function CMMetadataDataTypeRegistryRegisterDataType(dataType: string, description: string, conformingDataTypes: any[]): number;

  // export declare function CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(allocator: any, metadataFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export declare function CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions(allocator: any, sourceDescription: any, otherSourceDescription: any, formatDescriptionOut: any): number;

  // export declare function CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(allocator: any, metadataDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData(allocator: any, metadataDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMMetadataFormatDescriptionCreateWithKeys(allocator: any, metadataType: number, keys: any[], formatDescriptionOut: any): number;

  // export declare function CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications(allocator: any, sourceDescription: any, metadataSpecifications: any[], formatDescriptionOut: any): number;

  // export declare function CMMetadataFormatDescriptionCreateWithMetadataSpecifications(allocator: any, metadataType: number, metadataSpecifications: any[], formatDescriptionOut: any): number;

  // export declare function CMMetadataFormatDescriptionGetIdentifiers(desc: any): any[];

  // export declare function CMMetadataFormatDescriptionGetKeyWithLocalID(desc: any, localKeyID: number): Map<any, any>;

  // export declare function CMMuxedFormatDescriptionCreate(allocator: any, muxType: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export declare function CMPropagateAttachments(source: any, destination: any): void;

  // export declare function CMRemoveAllAttachments(target: any): void;

  // export declare function CMRemoveAttachment(target: any, key: string): void;

  // export declare function CMSampleBufferCallBlockForEachSample(sbuf: any, handler: (p1: any, p2: number) => number): number;

  // export declare function CMSampleBufferCallForEachSample(sbuf: any, callback: (p1: any, p2: number, p3: any) => number, refcon: any): number;

  // export declare function CMSampleBufferCopyPCMDataIntoAudioBufferList(sbuf: any, frameOffset: number, numFrames: number, bufferList: AudioBufferList): number;

  // export declare function CMSampleBufferCopySampleBufferForRange(allocator: any, sbuf: any, sampleRange: CFRange, sampleBufferOut: any): number;

  // export declare function CMSampleBufferCreate(allocator: any, dataBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any): number;

  // export declare function CMSampleBufferCreateCopy(allocator: any, sbuf: any, sampleBufferOut: any): number;

  // export declare function CMSampleBufferCreateCopyWithNewTiming(allocator: any, originalSBuf: any, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, sampleBufferOut: any): number;

  // export declare function CMSampleBufferCreateForImageBuffer(allocator: any, imageBuffer: any, dataReady: boolean, makeDataReadyCallback: (p1: any, p2: any) => number, makeDataReadyRefcon: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any): number;

  // export declare function CMSampleBufferCreateForImageBufferWithMakeDataReadyHandler(allocator: any, imageBuffer: any, dataReady: boolean, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

  // export declare function CMSampleBufferCreateReady(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any): number;

  // export declare function CMSampleBufferCreateReadyWithImageBuffer(allocator: any, imageBuffer: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sampleBufferOut: any): number;

  // export declare function CMSampleBufferCreateWithMakeDataReadyHandler(allocator: any, dataBuffer: any, dataReady: boolean, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sampleBufferOut: any, makeDataReadyHandler: (p1: any) => number): number;

  // export declare function CMSampleBufferDataIsReady(sbuf: any): boolean;

  // export declare function CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(sbuf: any, bufferListSizeNeededOut: number, bufferListOut: AudioBufferList, bufferListSize: number, blockBufferStructureAllocator: any, blockBufferBlockAllocator: any, flags: number, blockBufferOut: any): number;

  // export declare function CMSampleBufferGetAudioStreamPacketDescriptions(sbuf: any, packetDescriptionsSize: number, packetDescriptionsOut: AudioStreamPacketDescription, packetDescriptionsSizeNeededOut: number): number;

  // export declare function CMSampleBufferGetAudioStreamPacketDescriptionsPtr(sbuf: any, packetDescriptionsPointerOut: AudioStreamPacketDescription, packetDescriptionsSizeOut: number): number;

  // export declare function CMSampleBufferGetDataBuffer(sbuf: any): any;

  // export declare function CMSampleBufferGetDecodeTimeStamp(sbuf: any): CMTime;

  // export declare function CMSampleBufferGetDuration(sbuf: any): CMTime;

  // export declare function CMSampleBufferGetFormatDescription(sbuf: any): any;

  // export declare function CMSampleBufferGetImageBuffer(sbuf: any): any;

  // export declare function CMSampleBufferGetNumSamples(sbuf: any): number;

  // export declare function CMSampleBufferGetOutputDecodeTimeStamp(sbuf: any): CMTime;

  // export declare function CMSampleBufferGetOutputDuration(sbuf: any): CMTime;

  // export declare function CMSampleBufferGetOutputPresentationTimeStamp(sbuf: any): CMTime;

  // export declare function CMSampleBufferGetOutputSampleTimingInfoArray(sbuf: any, timingArrayEntries: number, timingArrayOut: CMSampleTimingInfo, timingArrayEntriesNeededOut: number): number;

  // export declare function CMSampleBufferGetPresentationTimeStamp(sbuf: any): CMTime;

  // export declare function CMSampleBufferGetSampleAttachmentsArray(sbuf: any, createIfNecessary: boolean): any[];

  // export declare function CMSampleBufferGetSampleSize(sbuf: any, sampleIndex: number): number;

  // export declare function CMSampleBufferGetSampleSizeArray(sbuf: any, sizeArrayEntries: number, sizeArrayOut: number, sizeArrayEntriesNeededOut: number): number;

  // export declare function CMSampleBufferGetSampleTimingInfo(sbuf: any, sampleIndex: number, timingInfoOut: CMSampleTimingInfo): number;

  // export declare function CMSampleBufferGetSampleTimingInfoArray(sbuf: any, numSampleTimingEntries: number, timingArrayOut: CMSampleTimingInfo, timingArrayEntriesNeededOut: number): number;

  // export declare function CMSampleBufferGetTotalSampleSize(sbuf: any): number;

  // export declare function CMSampleBufferGetTypeID(): number;

  // export declare function CMSampleBufferHasDataFailed(sbuf: any, statusOut: number): boolean;

  // export declare function CMSampleBufferInvalidate(sbuf: any): number;

  // export declare function CMSampleBufferIsValid(sbuf: any): boolean;

  // export declare function CMSampleBufferMakeDataReady(sbuf: any): number;

  // export declare function CMSampleBufferSetDataBuffer(sbuf: any, dataBuffer: any): number;

  // export declare function CMSampleBufferSetDataBufferFromAudioBufferList(sbuf: any, blockBufferStructureAllocator: any, blockBufferBlockAllocator: any, flags: number, bufferList: AudioBufferList): number;

  // export declare function CMSampleBufferSetDataFailed(sbuf: any, status: number): number;

  // export declare function CMSampleBufferSetDataReady(sbuf: any): number;

  // export declare function CMSampleBufferSetInvalidateCallback(sbuf: any, invalidateCallback: (p1: any, p2: number) => void, invalidateRefCon: number): number;

  // export declare function CMSampleBufferSetInvalidateHandler(sbuf: any, invalidateHandler: (p1: any) => void): number;

  // export declare function CMSampleBufferSetOutputPresentationTimeStamp(sbuf: any, outputPresentationTimeStamp: CMTime): number;

  // export declare function CMSampleBufferTrackDataReadiness(sbuf: any, sampleBufferToTrack: any): number;

  // struct
  interface CMSampleTimingInfo {
    duration: CMTime;
    presentationTimeStamp: CMTime;
    decodeTimeStamp: CMTime;
  }

  // export declare function CMSetAttachment(target: any, key: string, value: any, attachmentMode: number): void;

  // export declare function CMSetAttachments(target: any, theAttachments: Map<any, any>, attachmentMode: number): void;

  // export declare function CMSimpleQueueCreate(allocator: any, capacity: number, queueOut: any): number;

  // export declare function CMSimpleQueueDequeue(queue: any): any;

  // export declare function CMSimpleQueueEnqueue(queue: any, element: any): number;

  // export declare function CMSimpleQueueGetCapacity(queue: any): number;

  // export declare function CMSimpleQueueGetCount(queue: any): number;

  // export declare function CMSimpleQueueGetHead(queue: any): any;

  // export declare function CMSimpleQueueGetTypeID(): number;

  // export declare function CMSimpleQueueReset(queue: any): number;

  // export declare function CMSwapBigEndianClosedCaptionDescriptionToHost(closedCaptionDescriptionData: string | any, closedCaptionDescriptionSize: number): number;

  // export declare function CMSwapBigEndianImageDescriptionToHost(imageDescriptionData: string | any, imageDescriptionSize: number): number;

  // export declare function CMSwapBigEndianMetadataDescriptionToHost(metadataDescriptionData: string | any, metadataDescriptionSize: number): number;

  // export declare function CMSwapBigEndianSoundDescriptionToHost(soundDescriptionData: string | any, soundDescriptionSize: number): number;

  // export declare function CMSwapBigEndianTextDescriptionToHost(textDescriptionData: string | any, textDescriptionSize: number): number;

  // export declare function CMSwapBigEndianTimeCodeDescriptionToHost(timeCodeDescriptionData: string | any, timeCodeDescriptionSize: number): number;

  // export declare function CMSwapHostEndianClosedCaptionDescriptionToBig(closedCaptionDescriptionData: string | any, closedCaptionDescriptionSize: number): number;

  // export declare function CMSwapHostEndianImageDescriptionToBig(imageDescriptionData: string | any, imageDescriptionSize: number): number;

  // export declare function CMSwapHostEndianMetadataDescriptionToBig(metadataDescriptionData: string | any, metadataDescriptionSize: number): number;

  // export declare function CMSwapHostEndianSoundDescriptionToBig(soundDescriptionData: string | any, soundDescriptionSize: number): number;

  // export declare function CMSwapHostEndianTextDescriptionToBig(textDescriptionData: string | any, textDescriptionSize: number): number;

  // export declare function CMSwapHostEndianTimeCodeDescriptionToBig(timeCodeDescriptionData: string | any, timeCodeDescriptionSize: number): number;

  // export declare function CMSyncConvertTime(time: CMTime, fromClockOrTimebase: any, toClockOrTimebase: any): CMTime;

  // export declare function CMSyncGetRelativeRate(ofClockOrTimebase: any, relativeToClockOrTimebase: any): number;

  // export declare function CMSyncGetRelativeRateAndAnchorTime(ofClockOrTimebase: any, relativeToClockOrTimebase: any, outRelativeRate: number, outOfClockOrTimebaseAnchorTime: CMTime, outRelativeToClockOrTimebaseAnchorTime: CMTime): number;

  // export declare function CMSyncGetTime(clockOrTimebase: any): CMTime;

  // export declare function CMSyncMightDrift(clockOrTimebase1: any, clockOrTimebase2: any): boolean;

  // export declare function CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(allocator: any, textFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export declare function CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(allocator: any, textDescriptionBlockBuffer: any, flavor: any, mediaType: number, formatDescriptionOut: any): number;

  // export declare function CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData(allocator: any, textDescriptionData: string | any, size: number, flavor: any, mediaType: number, formatDescriptionOut: any): number;

  // export declare function CMTextFormatDescriptionGetDefaultStyle(desc: any, localFontIDOut: number, boldOut: string | any, italicOut: string | any, underlineOut: string | any, fontSizeOut: number, colorComponentsOut: number): number;

  // export declare function CMTextFormatDescriptionGetDefaultTextBox(desc: any, originIsAtTopLeft: boolean, heightOfTextTrack: number, defaultTextBoxOut: NSRect): number;

  // export declare function CMTextFormatDescriptionGetDisplayFlags(desc: any, displayFlagsOut: number): number;

  // export declare function CMTextFormatDescriptionGetFontName(desc: any, localFontID: number, fontNameOut: string): number;

  // export declare function CMTextFormatDescriptionGetJustification(desc: any, horizontaJustificationlOut: number, verticalJustificationOut: number): number;

  // struct
  interface CMTime {
    value: number;
    timescale: number;
    flags: CMTimeFlags;
    epoch: number;
  }

  // export declare function CMTimeAbsoluteValue(time: CMTime): CMTime;

  // export declare function CMTimeAdd(lhs: CMTime, rhs: CMTime): CMTime;

  // export declare function CMTimeClampToRange(time: CMTime, range: CMTimeRange): CMTime;

  // export declare function CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(allocator: any, timeCodeFormatDescription: any, flavor: any, blockBufferOut: any): number;

  // export declare function CMTimeCodeFormatDescriptionCreate(allocator: any, timeCodeFormatType: number, frameDuration: CMTime, frameQuanta: number, flags: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export declare function CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(allocator: any, timeCodeDescriptionBlockBuffer: any, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData(allocator: any, timeCodeDescriptionData: string | any, size: number, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMTimeCodeFormatDescriptionGetFrameDuration(timeCodeFormatDescription: any): CMTime;

  // export declare function CMTimeCodeFormatDescriptionGetFrameQuanta(timeCodeFormatDescription: any): number;

  // export declare function CMTimeCodeFormatDescriptionGetTimeCodeFlags(desc: any): number;

  // export declare function CMTimeCompare(time1: CMTime, time2: CMTime): number;

  // export declare function CMTimeConvertScale(time: CMTime, newTimescale: number, method: CMTimeRoundingMethod): CMTime;

  // export declare function CMTimeCopyAsDictionary(time: CMTime, allocator: any): Map<any, any>;

  // export declare function CMTimeCopyDescription(allocator: any, time: CMTime): string;

  // export declare function CMTimeFoldIntoRange(time: CMTime, foldRange: CMTimeRange): CMTime;

  // export declare function CMTimeGetSeconds(time: CMTime): number;

  // export declare function CMTimeMake(value: number, timescale: number): CMTime;

  // export declare function CMTimeMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTime;

  // export declare function CMTimeMakeWithEpoch(value: number, timescale: number, epoch: number): CMTime;

  // export declare function CMTimeMakeWithSeconds(seconds: number, preferredTimescale: number): CMTime;

  // export declare function CMTimeMapDurationFromRangeToRange(dur: CMTime, fromRange: CMTimeRange, toRange: CMTimeRange): CMTime;

  // export declare function CMTimeMapTimeFromRangeToRange(t: CMTime, fromRange: CMTimeRange, toRange: CMTimeRange): CMTime;

  // struct
  interface CMTimeMapping {
    source: CMTimeRange;
    target: CMTimeRange;
  }

  // export declare function CMTimeMappingCopyAsDictionary(mapping: CMTimeMapping, allocator: any): Map<any, any>;

  // export declare function CMTimeMappingCopyDescription(allocator: any, mapping: CMTimeMapping): string;

  // export declare function CMTimeMappingMake(source: CMTimeRange, target: CMTimeRange): CMTimeMapping;

  // export declare function CMTimeMappingMakeEmpty(target: CMTimeRange): CMTimeMapping;

  // export declare function CMTimeMappingMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTimeMapping;

  // export declare function CMTimeMappingShow(mapping: CMTimeMapping): void;

  // export declare function CMTimeMaximum(time1: CMTime, time2: CMTime): CMTime;

  // export declare function CMTimeMinimum(time1: CMTime, time2: CMTime): CMTime;

  // export declare function CMTimeMultiply(time: CMTime, multiplier: number): CMTime;

  // export declare function CMTimeMultiplyByFloat64(time: CMTime, multiplier: number): CMTime;

  // export declare function CMTimeMultiplyByRatio(time: CMTime, multiplier: number, divisor: number): CMTime;

  // struct
  interface CMTimeRange {
    start: CMTime;
    duration: CMTime;
  }

  // export declare function CMTimeRangeContainsTime(range: CMTimeRange, time: CMTime): boolean;

  // export declare function CMTimeRangeContainsTimeRange(range: CMTimeRange, otherRange: CMTimeRange): boolean;

  // export declare function CMTimeRangeCopyAsDictionary(range: CMTimeRange, allocator: any): Map<any, any>;

  // export declare function CMTimeRangeCopyDescription(allocator: any, range: CMTimeRange): string;

  // export declare function CMTimeRangeEqual(range1: CMTimeRange, range2: CMTimeRange): boolean;

  // export declare function CMTimeRangeFromTimeToTime(start: CMTime, end: CMTime): CMTimeRange;

  // export declare function CMTimeRangeGetEnd(range: CMTimeRange): CMTime;

  // export declare function CMTimeRangeGetIntersection(range: CMTimeRange, otherRange: CMTimeRange): CMTimeRange;

  // export declare function CMTimeRangeGetUnion(range: CMTimeRange, otherRange: CMTimeRange): CMTimeRange;

  // export declare function CMTimeRangeMake(start: CMTime, duration: CMTime): CMTimeRange;

  // export declare function CMTimeRangeMakeFromDictionary(dictionaryRepresentation: Map<any, any>): CMTimeRange;

  // export declare function CMTimeRangeShow(range: CMTimeRange): void;

  // export declare function CMTimeShow(time: CMTime): void;

  // export declare function CMTimeSubtract(lhs: CMTime, rhs: CMTime): CMTime;

  // export declare function CMTimebaseAddTimer(timebase: any, timer: Timer, runloop: any): number;

  // export declare function CMTimebaseAddTimerDispatchSource(timebase: any, timerSource: NSObject): number;

  // export declare function CMTimebaseCopyMaster(timebase: any): any;

  // export declare function CMTimebaseCopyMasterClock(timebase: any): any;

  // export declare function CMTimebaseCopyMasterTimebase(timebase: any): any;

  // export declare function CMTimebaseCopyUltimateMasterClock(timebase: any): any;

  // export declare function CMTimebaseCreateWithMasterClock(allocator: any, masterClock: any, timebaseOut: any): number;

  // export declare function CMTimebaseCreateWithMasterTimebase(allocator: any, masterTimebase: any, timebaseOut: any): number;

  // export declare function CMTimebaseGetEffectiveRate(timebase: any): number;

  // export declare function CMTimebaseGetRate(timebase: any): number;

  // export declare function CMTimebaseGetTime(timebase: any): CMTime;

  // export declare function CMTimebaseGetTimeAndRate(timebase: any, timeOut: CMTime, rateOut: number): number;

  // export declare function CMTimebaseGetTimeWithTimeScale(timebase: any, timescale: number, method: CMTimeRoundingMethod): CMTime;

  // export declare function CMTimebaseGetTypeID(): number;

  // export declare function CMTimebaseNotificationBarrier(timebase: any): number;

  // export declare function CMTimebaseRemoveTimer(timebase: any, timer: Timer): number;

  // export declare function CMTimebaseRemoveTimerDispatchSource(timebase: any, timerSource: NSObject): number;

  // export declare function CMTimebaseSetAnchorTime(timebase: any, timebaseTime: CMTime, immediateMasterTime: CMTime): number;

  // export declare function CMTimebaseSetMasterClock(timebase: any, newMasterClock: any): number;

  // export declare function CMTimebaseSetMasterTimebase(timebase: any, newMasterTimebase: any): number;

  // export declare function CMTimebaseSetRate(timebase: any, rate: number): number;

  // export declare function CMTimebaseSetRateAndAnchorTime(timebase: any, rate: number, timebaseTime: CMTime, immediateMasterTime: CMTime): number;

  // export declare function CMTimebaseSetTime(timebase: any, time: CMTime): number;

  // export declare function CMTimebaseSetTimerDispatchSourceNextFireTime(timebase: any, timerSource: NSObject, fireTime: CMTime, flags: number): number;

  // export declare function CMTimebaseSetTimerDispatchSourceToFireImmediately(timebase: any, timerSource: NSObject): number;

  // export declare function CMTimebaseSetTimerNextFireTime(timebase: any, timer: Timer, fireTime: CMTime, flags: number): number;

  // export declare function CMTimebaseSetTimerToFireImmediately(timebase: any, timer: Timer): number;

  // struct
  interface CMVideoDimensions {
    width: number;
    height: number;
  }

  // export declare function CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(allocator: any, videoFormatDescription: any, stringEncoding: number, flavor: any, blockBufferOut: any): number;

  // export declare function CMVideoFormatDescriptionCreate(allocator: any, codecType: number, width: number, height: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export declare function CMVideoFormatDescriptionCreateForImageBuffer(allocator: any, imageBuffer: any, formatDescriptionOut: any): number;

  // export declare function CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(allocator: any, imageDescriptionBlockBuffer: any, stringEncoding: number, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(allocator: any, imageDescriptionData: string | any, size: number, stringEncoding: number, flavor: any, formatDescriptionOut: any): number;

  // export declare function CMVideoFormatDescriptionCreateFromH264ParameterSets(allocator: any, parameterSetCount: number, parameterSetPointers: string, parameterSetSizes: number, NALUnitHeaderLength: number, formatDescriptionOut: any): number;

  // export declare function CMVideoFormatDescriptionCreateFromHEVCParameterSets(allocator: any, parameterSetCount: number, parameterSetPointers: string, parameterSetSizes: number, NALUnitHeaderLength: number, extensions: Map<any, any>, formatDescriptionOut: any): number;

  // export declare function CMVideoFormatDescriptionGetCleanAperture(videoDesc: any, originIsAtTopLeft: boolean): CGRect;

  // export declare function CMVideoFormatDescriptionGetDimensions(videoDesc: any): CMVideoDimensions;

  // export declare function CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers(): any[];

  // export declare function CMVideoFormatDescriptionGetH264ParameterSetAtIndex(videoDesc: any, parameterSetIndex: number, parameterSetPointerOut: string, parameterSetSizeOut: number, parameterSetCountOut: number, NALUnitHeaderLengthOut: number): number;

  // export declare function CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(videoDesc: any, parameterSetIndex: number, parameterSetPointerOut: string, parameterSetSizeOut: number, parameterSetCountOut: number, NALUnitHeaderLengthOut: number): number;

  // export declare function CMVideoFormatDescriptionGetPresentationDimensions(videoDesc: any, usePixelAspectRatio: boolean, useCleanAperture: boolean): CGSize;

  // export declare function CMVideoFormatDescriptionMatchesImageBuffer(desc: any, imageBuffer: any): boolean;

  // struct
  interface CMIODeviceAVCCommand {
    mCommand: string;
    mCommandLength: number;
    mResponse: string;
    mResponseLength: number;
    mResponseUsed: number;
  }

  // export declare function CMIODeviceProcessAVCCommand(deviceID: number, ioAVCCommand: CMIODeviceAVCCommand): number;

  // export declare function CMIODeviceProcessRS422Command(deviceID: number, ioRS422Command: CMIODeviceRS422Command): number;

  // struct
  interface CMIODeviceRS422Command {
    mCommand: string;
    mCommandLength: number;
    mResponse: string;
    mResponseLength: number;
    mResponseUsed: number;
  }

  // struct
  interface CMIODeviceSMPTETimeCallback {
    mGetSMPTETimeProc: (p1: any, p2: number, p3: string, p4: number) => number;
    mRefCon: any;
  }

  // export declare function CMIODeviceStartStream(deviceID: number, streamID: number): number;

  // export declare function CMIODeviceStopStream(deviceID: number, streamID: number): number;

  // struct
  interface CMIODeviceStreamConfiguration {
    mNumberStreams: number;
    mNumberChannels: number;
  }

  // struct
  interface CMIOHardwarePlugInInterface {
    QueryInterface: (p1: any, p2: CFUUIDBytes, p3: any) => number;
    AddRef: (p1: any) => number;
    Release: (p1: any) => number;
    Initialize: (p1: CMIOHardwarePlugInInterface) => number;
    InitializeWithObjectID: (p1: CMIOHardwarePlugInInterface, p2: number) => number;
    Teardown: (p1: CMIOHardwarePlugInInterface) => number;
    ObjectShow: (p1: CMIOHardwarePlugInInterface, p2: number) => void;
    ObjectHasProperty: (p1: CMIOHardwarePlugInInterface, p2: number, p3: CMIOObjectPropertyAddress) => boolean;
    ObjectIsPropertySettable: (p1: CMIOHardwarePlugInInterface, p2: number, p3: CMIOObjectPropertyAddress, p4: string) => number;
    ObjectGetPropertyDataSize: (p1: CMIOHardwarePlugInInterface, p2: number, p3: CMIOObjectPropertyAddress, p4: number, p5: any, p6: number) => number;
    ObjectGetPropertyData: (p1: CMIOHardwarePlugInInterface, p2: number, p3: CMIOObjectPropertyAddress, p4: number, p5: any, p6: number, p7: number, p8: any) => number;
    ObjectSetPropertyData: (p1: CMIOHardwarePlugInInterface, p2: number, p3: CMIOObjectPropertyAddress, p4: number, p5: any, p6: number, p7: any) => number;
    DeviceSuspend: (p1: CMIOHardwarePlugInInterface, p2: number) => number;
    DeviceResume: (p1: CMIOHardwarePlugInInterface, p2: number) => number;
    DeviceStartStream: (p1: CMIOHardwarePlugInInterface, p2: number, p3: number) => number;
    DeviceStopStream: (p1: CMIOHardwarePlugInInterface, p2: number, p3: number) => number;
    DeviceProcessAVCCommand: (p1: CMIOHardwarePlugInInterface, p2: number, p3: CMIODeviceAVCCommand) => number;
    DeviceProcessRS422Command: (p1: CMIOHardwarePlugInInterface, p2: number, p3: CMIODeviceRS422Command) => number;
    StreamCopyBufferQueue: (p1: CMIOHardwarePlugInInterface, p2: number, p3: (p1: number, p2: any, p3: any) => void, p4: any, p5: any) => number;
    StreamDeckPlay: (p1: CMIOHardwarePlugInInterface, p2: number) => number;
    StreamDeckStop: (p1: CMIOHardwarePlugInInterface, p2: number) => number;
    StreamDeckJog: (p1: CMIOHardwarePlugInInterface, p2: number, p3: number) => number;
    StreamDeckCueTo: (p1: CMIOHardwarePlugInInterface, p2: number, p3: number, p4: boolean) => number;
  }

  // export declare function CMIOObjectAddPropertyListener(objectID: number, address: CMIOObjectPropertyAddress, listener: (p1: number, p2: number, p3: CMIOObjectPropertyAddress, p4: any) => number, clientData: any): number;

  // export declare function CMIOObjectAddPropertyListenerBlock(objectID: number, address: CMIOObjectPropertyAddress, dispatchQueue: NSObject, listener: (p1: number, p2: CMIOObjectPropertyAddress) => void): number;

  // export declare function CMIOObjectCreate(owningPlugIn: CMIOHardwarePlugInInterface, owningObjectID: number, classID: number, objectID: number): number;

  // export declare function CMIOObjectGetPropertyData(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number, dataUsed: number, data: any): number;

  // export declare function CMIOObjectGetPropertyDataSize(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number): number;

  // export declare function CMIOObjectHasProperty(objectID: number, address: CMIOObjectPropertyAddress): boolean;

  // export declare function CMIOObjectIsPropertySettable(objectID: number, address: CMIOObjectPropertyAddress, isSettable: string | any): number;

  // export declare function CMIOObjectPropertiesChanged(owningPlugIn: CMIOHardwarePlugInInterface, objectID: number, numberAddresses: number, addresses: CMIOObjectPropertyAddress): number;

  // struct
  interface CMIOObjectPropertyAddress {
    mSelector: number;
    mScope: number;
    mElement: number;
  }

  // export declare function CMIOObjectRemovePropertyListener(objectID: number, address: CMIOObjectPropertyAddress, listener: (p1: number, p2: number, p3: CMIOObjectPropertyAddress, p4: any) => number, clientData: any): number;

  // export declare function CMIOObjectRemovePropertyListenerBlock(objectID: number, address: CMIOObjectPropertyAddress, dispatchQueue: NSObject, listener: (p1: number, p2: CMIOObjectPropertyAddress) => void): number;

  // export declare function CMIOObjectSetPropertyData(objectID: number, address: CMIOObjectPropertyAddress, qualifierDataSize: number, qualifierData: any, dataSize: number, data: any): number;

  // export declare function CMIOObjectShow(objectID: number): void;

  // export declare function CMIOObjectsPublishedAndDied(owningPlugIn: CMIOHardwarePlugInInterface, owningObjectID: number, numberPublishedCMIOObjects: number, publishedCMIOObjects: number, numberDeadCMIOObjects: number, deadCMIOObjects: number): number;

  // export declare function CMIOSampleBufferCopyNonRequiredAttachments(sourceSBuf: any, destSBuf: any, attachmentMode: number): number;

  // export declare function CMIOSampleBufferCopySampleAttachments(sourceSBuf: any, destSBuf: any): number;

  // export declare function CMIOSampleBufferCreate(allocator: any, dataBuffer: any, formatDescription: any, numSamples: number, numSampleTimingEntries: number, sampleTimingArray: CMSampleTimingInfo, numSampleSizeEntries: number, sampleSizeArray: number, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

  // export declare function CMIOSampleBufferCreateForImageBuffer(allocator: any, imageBuffer: any, formatDescription: any, sampleTiming: CMSampleTimingInfo, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

  // export declare function CMIOSampleBufferCreateNoDataMarker(allocator: any, noDataEvent: number, formatDescription: any, sequenceNumber: number, discontinuityFlags: number, sBufOut: any): number;

  // export declare function CMIOSampleBufferGetDiscontinuityFlags(sbuf: any): number;

  // export declare function CMIOSampleBufferGetSequenceNumber(sbuf: any): number;

  // export declare function CMIOSampleBufferSetDiscontinuityFlags(allocator: any, sbuf: any, discontinuityFlags: number): void;

  // export declare function CMIOSampleBufferSetSequenceNumber(allocator: any, sbuf: any, sequenceNumber: number): void;

  // export declare function CMIOStreamClockConvertHostTimeToDeviceTime(hostTime: number, clock: any): CMTime;

  // export declare function CMIOStreamClockCreate(allocator: any, clockName: string, sourceIdentifier: any, getTimeCallMinimumInterval: CMTime, numberOfEventsForRateSmoothing: number, numberOfAveragesForRateSmoothing: number, clock: any): number;

  // export declare function CMIOStreamClockInvalidate(clock: any): number;

  // export declare function CMIOStreamClockPostTimingEvent(eventTime: CMTime, hostTime: number, resynchronize: boolean, clock: any): number;

  // export declare function CMIOStreamCopyBufferQueue(streamID: number, queueAlteredProc: (p1: number, p2: any, p3: any) => void, queueAlteredRefCon: any, queue: any): number;

  // struct
  interface CMIOStreamDeck {
    mStatus: number;
    mState: number;
    mState2: number;
  }

  // export declare function CMIOStreamDeckCueTo(streamID: number, frameNumber: number, playOnCue: boolean): number;

  // export declare function CMIOStreamDeckJog(streamID: number, speed: number): number;

  // export declare function CMIOStreamDeckPlay(streamID: number): number;

  // export declare function CMIOStreamDeckStop(streamID: number): number;

  // struct
  interface CMIOStreamScheduledOutputNotificationProcAndRefCon {
    scheduledOutputNotificationProc: (p1: number, p2: number, p3: any) => void;
    scheduledOutputNotificationRefCon: any;
  }

  // interface
  class NSAffineTransform extends NSObject /* implements NSCopying, NSSecureCoding */ {
    transformStruct: NSAffineTransformStruct;
    setTransformStruct(_: NSAffineTransformStruct) // property
    appendTransform(_: NSAffineTransform): void;
    concat(): void;
    static createWithTransform(transform: NSAffineTransform): NSAffineTransform;
    invert(): void;
    prependTransform(_: NSAffineTransform): void;
    rotateByDegrees(byDegrees: number): void;
    rotateByRadians(byRadians: number): void;
    scaleBy(by: number): void;
    scaleXByYBy(by: number, yBy: number): void;
    set(): void;
    transformBezierPath(_: NSBezierPath): NSBezierPath;
    transformPoint(_: CGPoint): CGPoint;
    transformSize(_: CGSize): CGSize;
    translateXByYBy(by: number, yBy: number): void;
  }

  // struct
  interface NSAffineTransformStruct {
    m11: number;
    m12: number;
    m21: number;
    m22: number;
    tX: number;
    tY: number;
  }

  // export declare function NSAllHashTableObjects(table: NSHashTable<any>): any[];

  // export declare function NSAllMapTableKeys(table: NSMapTable<any, any>): any[];

  // export declare function NSAllMapTableValues(table: NSMapTable<any, any>): any[];

  // export declare function NSAllocateMemoryPages(bytes: number): any;

  // export declare function NSAllocateObject(aClass: typeof NSObject, extraBytes: number, zone: any): any;

  // interface
  class NSAppleEventDescriptor extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static appleEventWithEventClassEventIDTargetDescriptorReturnIDTransactionID(withEventClass: number, eventID: number, targetDescriptor?: NSAppleEventDescriptor, returnID?: number, transactionID?: number): NSAppleEventDescriptor;
    static currentProcessDescriptor(): NSAppleEventDescriptor;
    static listDescriptor(): NSAppleEventDescriptor;
    static nullDescriptor(): NSAppleEventDescriptor;
    static recordDescriptor(): NSAppleEventDescriptor;
    aeDesc: AE.AEDataModel; // property
    booleanValue: boolean; // property
    data: NSData; // property
    dateValue: Date; // property
    descriptorType: number; // property
    doubleValue: number; // property
    enumCodeValue: number; // property
    eventClass: number; // property
    eventID: number; // property
    fileURLValue: NSURL; // property
    int32Value: number; // property
    isRecordDescriptor: boolean; // property
    numberOfItems: number; // property
    returnID: number; // property
    stringValue: string; // property
    transactionID: number; // property
    typeCodeValue: number; // property
    attributeDescriptorForKeyword(forKeyword: number): NSAppleEventDescriptor;
    coerceToDescriptorType(toDescriptorType: number): NSAppleEventDescriptor;
    descriptorAtIndex(_: number): NSAppleEventDescriptor;
    descriptorForKeyword(_: number): NSAppleEventDescriptor;
    static createWithListDescriptor(): NSAppleEventDescriptor;
    static createWithRecordDescriptor(): NSAppleEventDescriptor;
    static createWithAEDescNoCopy(AEDescNoCopy: AE.AEDataModel): NSAppleEventDescriptor;
    static createWithDescriptorTypeBytesLength(descriptorType: number, bytes?: any, length?: number): NSAppleEventDescriptor;
    static createWithDescriptorTypeData(descriptorType: number, data?: NSData): NSAppleEventDescriptor;
    static createWithEventClassEventIDTargetDescriptorReturnIDTransactionID(eventClass: number, eventID: number, targetDescriptor?: NSAppleEventDescriptor, returnID?: number, transactionID?: number): NSAppleEventDescriptor;
    insertDescriptorAtIndex(_: NSAppleEventDescriptor, at: number): void;
    keywordForDescriptorAtIndex(at: number): number;
    paramDescriptorForKeyword(forKeyword: number): NSAppleEventDescriptor;
    removeDescriptorAtIndex(at: number): void;
    removeDescriptorWithKeyword(withKeyword: number): void;
    removeParamDescriptorWithKeyword(withKeyword: number): void;
    sendEventWithOptionsTimeoutError(timeout: NSAppleEventDescriptor.SendOptions, error: number): NSAppleEventDescriptor;
    setAttributeDescriptorForKeyword(_: NSAppleEventDescriptor, forKeyword: number): void;
    setDescriptorForKeyword(_: NSAppleEventDescriptor, forKeyword: number): void;
    setParamDescriptorForKeyword(_: NSAppleEventDescriptor, forKeyword: number): void;
  }

  // interface
  class NSAppleEventManager extends NSObject {
    static sharedAppleEventManager(): NSAppleEventManager;
    currentAppleEvent: NSAppleEventDescriptor; // property
    currentReplyAppleEvent: NSAppleEventDescriptor; // property
    appleEventForSuspensionID(forSuspensionID: any): NSAppleEventDescriptor;
    dispatchRawAppleEventWithRawReplyHandlerRefCon(_: AE.AEDataModel, withRawReply: AE.AEDataModel, handlerRefCon: any): number;
    removeEventHandlerForEventClassAndEventID(forEventClass: number, andEventID: number): void;
    replyAppleEventForSuspensionID(forSuspensionID: any): NSAppleEventDescriptor;
    resumeWithSuspensionID(withSuspensionID: any): void;
    setCurrentAppleEventAndReplyEventWithSuspensionID(_: any): void;
    setEventHandlerAndSelectorForEventClassAndEventID(_: any, andSelector: string, forEventClass: number, andEventID: number): void;
    suspendCurrentAppleEvent(): any;
  }

  // interface
  class NSAppleScript extends NSObject /* implements NSCopying */ {
    isCompiled: boolean; // property
    richTextSource: NSAttributedString; // property
    source: string; // property
    compileAndReturnError(_?: Map<string, any>): boolean;
    executeAndReturnError(_?: Map<string, any>): NSAppleEventDescriptor;
    executeAppleEventError(_: NSAppleEventDescriptor, error?: Map<string, any>): NSAppleEventDescriptor;
    static createWithContentsOfURLError(contentsOfURL: NSURL, error?: Map<string, any>): NSAppleScript;
    static createWithSource(source: string): NSAppleScript;
  }

  // interface
  class NSArray<ObjectType> extends NSObject /* implements NSCopying, NSFastEnumeration, NSMutableCopying, NSSecureCoding */ {
    static arrayWithObjects<ObjectType>(_: ObjectType): NSArray<ObjectType>;
    count: number; // property
    firstObject: ObjectType; // property
    lastObject: ObjectType; // property
    sortedArrayHint: NSData; // property
    addObserverToObjectsAtIndexesForKeyPathOptionsContext(_: NSObject, toObjectsAt: NSIndexSet, forKeyPath: string, options: NSKeyValueObservingOptions, context?: any): void;
    arrayByAddingObject(_: ObjectType): ObjectType[];
    arrayByAddingObjectsFromArray(from: ObjectType[]): ObjectType[];
    componentsJoinedByString(by: string): string;
    containsObject(_: ObjectType): boolean;
    descriptionWithLocale(withLocale?: any): string;
    descriptionWithLocaleIndent(withLocale?: any, indent?: number): string;
    enumerateObjectsWithAtOptionsUsing(at: NSIndexSet, options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    enumerateObjects(_: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    enumerateObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    filteredArrayUsingPredicate(using: NSPredicate): ObjectType[];
    firstObjectCommonWithArray(with_: ObjectType[]): ObjectType;
    indexOfObject(of: ObjectType): number;
    indexOfObjectInRange(of: ObjectType, in_: NSRange): number;
    indexOfInSortedRangeOptionsUsingComparator(of: ObjectType, inSortedRange: NSRange, options: NSBinarySearchingOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): number;
    indexOfObjectWithAtOptionsPassingTest(at: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    indexOfObjectIdenticalTo(to: ObjectType): number;
    indexOfObjectIdenticalToInRange(to: ObjectType, in_: NSRange): number;
    indexOfObjectWithPassingTest(passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    indexOfObjectWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    indexesOfObjectsWithAtOptionsPassingTest(at: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    indexesOfObjectsWithPassingTest(passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    indexesOfObjectsWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    isEqualToArray(to: ObjectType[]): boolean;
    objectAtIndex(at: number): ObjectType;
    objectEnumerator(): NSEnumerator<ObjectType>;
    objectsAtIndexes(at: NSIndexSet): ObjectType[];
    pathsMatchingExtensions(_: string[]): string[];
    removeObserverFromObjectsAtIndexesForKeyPath(_: NSObject, fromObjectsAt: NSIndexSet, forKeyPath: string): void;
    removeObserverFromObjectsAtIndexesForKeyPathContext(_: NSObject, fromObjectsAt: NSIndexSet, forKeyPath: string, context?: any): void;
    reverseObjectEnumerator(): NSEnumerator<ObjectType>;
    sortedArrayWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
    sortedArrayUsingDescriptors(using: NSSortDescriptor[]): ObjectType[];
    sortedArrayContext(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any): ObjectType[];
    sortedArrayContextHint(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any, hint?: NSData): ObjectType[];
    sortedArrayUsingSelector(using: string): ObjectType[];
    sortedArrayWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
    subarrayWithRange(with_: NSRange): ObjectType[];
    writeToFileAtomically(toFile: string, atomically: boolean): boolean;
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
    writeToURLError(error: NSURL): boolean;
  }

  // interface
  class NSAssertionHandler extends NSObject {
    static currentHandler: NSAssertionHandler; // property
  }

  // interface
  class NSAttributedString extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding, NSPasteboardReading, NSPasteboardWriting */ {
    containsAttachments: boolean; // property
    length: number; // property
    string: string; // property
    static textTypes: string[]; // property
    static textUnfilteredTypes: string[]; // property
    RTFDFileWrapperFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): FileWrapper;
    RTFDFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): NSData;
    RTFFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): NSData;
    attributeAtIndexEffectiveRange(_: string, at: number, effectiveRange?: NSRange): any;
    attributeAtIndexLongestEffectiveRangeInRange(_: string, at: number, longestEffectiveRange?: NSRange, in_?: NSRange): any;
    attributedSubstringFromRange(from: NSRange): NSAttributedString;
    attributesAtIndexEffectiveRange(at: number, effectiveRange?: NSRange): Map<string, any>;
    attributesAtIndexLongestEffectiveRangeInRange(at: number, longestEffectiveRange?: NSRange, in_?: NSRange): Map<string, any>;
    boundingRectWithSizeOptions(with_: CGSize, options: NSString.DrawingOptions): CGRect;
    boundingRectWithSizeOptionsContext(with_: CGSize, options: NSString.DrawingOptions, context?: NSStringDrawingContext): CGRect;
    containsAttachmentsInRange(in_: NSRange): boolean;
    dataFromRangeDocumentAttributesError(documentAttributes: NSRange, error: Map<string, any>): NSData;
    docFormatFromRangeDocumentAttributes(from: NSRange, documentAttributes: Map<string, any>): NSData;
    doubleClickAtIndex(at: number): NSRange;
    drawAtPoint(at: CGPoint): void;
    drawInRect(in_: CGRect): void;
    drawWithRectOptions(with_: CGRect, options: NSString.DrawingOptions): void;
    drawWithRectOptionsContext(with_: CGRect, options: NSString.DrawingOptions, context?: NSStringDrawingContext): void;
    enumerateAttributeInOptionsUsing(_: string, in_: NSRange, options: NSAttributedString.EnumerationOptions, using?: (p1: any, p2: NSRange, p3: boolean) => void): void;
    enumerateAttributesWithInOptionsUsing(in_: NSRange, options: NSAttributedString.EnumerationOptions, using: (p1: Map<string, any>, p2: NSRange, p3: boolean) => void): void;
    fileWrapperFromRangeDocumentAttributesError(documentAttributes: NSRange, error: Map<string, any>): FileWrapper;
    fontAttributesInRange(in_: NSRange): Map<string, any>;
    static createWithAttributedString(attributedString: NSAttributedString): NSAttributedString;
    static createWithDataOptionsDocumentAttributes(data: NSData, options: Map<string, any>, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithDocFormatDocumentAttributes(docFormat: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithHtmlBaseURLDocumentAttributes(HTML: NSData, baseURL: NSURL, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithHtmlDocumentAttributes(HTML: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithHtmlOptionsDocumentAttributes(HTML: NSData, options: Map<string, any>, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithRtfDocumentAttributes(RTF: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithRtfdDocumentAttributes(RTFD: NSData, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithRTFDFileWrapperDocumentAttributes(RTFDFileWrapper: FileWrapper, documentAttributes?: Map<string, any>): NSAttributedString;
    static createWithString(string: string): NSAttributedString;
    static createWithStringAttributes(string: string, attributes?: Map<string, any>): NSAttributedString;
    static createWithUrlOptionsDocumentAttributes(URL: NSURL, options: Map<string, any>, documentAttributes?: Map<string, any>): NSAttributedString;
    isEqualToAttributedString(to: NSAttributedString): boolean;
    itemNumberInTextListAtIndex(in_: NSTextList, at: number): number;
    lineBreakBeforeIndexWithinRange(before: number, within: NSRange): number;
    lineBreakByHyphenatingBeforeIndexWithinRange(before: number, within: NSRange): number;
    nextWordFromIndexForward(from: number, forward: boolean): number;
    rangeOfTextBlockAtIndex(of: NSTextBlock, at: number): NSRange;
    rangeOfTextListAtIndex(of: NSTextList, at: number): NSRange;
    rangeOfTextTableAtIndex(of: NSTextTable, at: number): NSRange;
    rulerAttributesInRange(in_: NSRange): Map<string, any>;
    size(): CGSize;
  }

  // interface
  class NSAutoreleasePool extends NSObject {
    static addObject(_: any): void;
    static showPools(): void;
    addObject(_: any): void;
    drain(): void;
  }

  // interface
  class NSBackgroundActivityScheduler extends NSObject {
    identifier: string; // property
    interval: number;
    setInterval(_: number) // property
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService) // property
    repeats: boolean;
    setRepeats(_: boolean) // property
    shouldDefer: boolean; // property
    tolerance: number;
    setTolerance(_: number) // property
    static createWithIdentifier(identifier: string): NSBackgroundActivityScheduler;
    invalidate(): void;
    schedule(_: (p1: (p1: NSBackgroundActivityScheduler.Result) => void) => void): void;
  }

  // interface
  class BlockOperation extends Operation {
    static blockOperationWithBlock(_: () => void): BlockOperation;
    executionBlocks: () => void[]; // property
    addExecutionBlock(_: () => void): void;
  }

  // interface
  class Bundle extends NSObject {
    static URLForResourceWithExtensionSubdirectoryInBundleWithURL(forResource?: string, withExtension?: string, subdirectory?: string, in_?: NSURL): NSURL;
    static URLsForResourcesWithExtensionSubdirectoryInBundleWithURL(forResourcesWithExtension?: string, subdirectory?: string, in_?: NSURL): NSURL[];
    static pathForResourceOfTypeInDirectory(forResource?: string, ofType?: string, inDirectory?: string): string;
    static pathsForResourcesOfTypeInDirectory(forResourcesOfType?: string, inDirectory?: string): string[];
    static preferredLocalizationsFromArray(_: string[]): string[];
    static preferredLocalizationsFromArrayForPreferences(_: string[], forPreferences?: string[]): string[];
    appStoreReceiptURL: NSURL; // property
    builtInPlugInsPath: string; // property
    builtInPlugInsURL: NSURL; // property
    bundleIdentifier: string; // property
    bundlePath: string; // property
    bundleURL: NSURL; // property
    developmentLocalization: string; // property
    executableArchitectures: number[]; // property
    executablePath: string; // property
    executableURL: NSURL; // property
    infoDictionary: Map<string, any>; // property
    isLoaded: boolean; // property
    localizations: string[]; // property
    localizedInfoDictionary: Map<string, any>; // property
    preferredLocalizations: string[]; // property
    principalClass: typeof NSObject; // property
    privateFrameworksPath: string; // property
    privateFrameworksURL: NSURL; // property
    resourcePath: string; // property
    resourceURL: NSURL; // property
    sharedFrameworksPath: string; // property
    sharedFrameworksURL: NSURL; // property
    sharedSupportPath: string; // property
    sharedSupportURL: NSURL; // property
    static allBundles: Bundle[]; // property
    static allFrameworks: Bundle[]; // property
    static mainBundle: Bundle; // property
    URLForAuxiliaryExecutable(forAuxiliaryExecutable: string): NSURL;
    URLForImageResource(_: string): NSURL;
    URLForResourceWithExtension(forResource?: string, withExtension?: string): NSURL;
    URLForResourceWithExtensionSubdirectory(forResource?: string, withExtension?: string, subdirectory?: string): NSURL;
    URLForResourceWithExtensionSubdirectoryLocalization(_?: string, withExtension?: string, subdirectory?: string, localization?: string): NSURL;
    URLsForResourcesWithExtensionSubdirectory(forResourcesWithExtension?: string, subdirectory?: string): NSURL[];
    URLsForResourcesWithExtensionSubdirectoryLocalization(forResourcesWithExtension?: string, subdirectory?: string, localization?: string): NSURL[];
    classNamed(_: string): typeof NSObject;
    contextHelpForKey(_: string): NSAttributedString;
    imageForResource(_: string): NSImage;
    static createWithPath(path: string): Bundle;
    static createWithUrl(URL: NSURL): Bundle;
    loadAndReturnError(): boolean;
    loadNibNamedOwnerTopLevelObjects(_: string, owner?: any, topLevelObjects?: any[]): boolean;
    localizedStringForKeyValueTable(_: string, value?: string, table?: string): string;
    objectForInfoDictionaryKey(forInfoDictionaryKey: string): any;
    pathForAuxiliaryExecutable(forAuxiliaryExecutable: string): string;
    pathForImageResource(_: string): string;
    pathForResourceOfType(forResource?: string, ofType?: string): string;
    pathForResourceOfTypeInDirectory(forResource?: string, ofType?: string, inDirectory?: string): string;
    pathForResourceOfTypeInDirectoryForLocalization(forResource?: string, ofType?: string, inDirectory?: string, forLocalization?: string): string;
    pathForSoundResource(_: string): string;
    pathsForResourcesOfTypeInDirectory(forResourcesOfType?: string, inDirectory?: string): string[];
    pathsForResourcesOfTypeInDirectoryForLocalization(forResourcesOfType?: string, inDirectory?: string, forLocalization?: string): string[];
    preflightAndReturnError(): boolean;
    unload(): boolean;
  }

  // interface
  class ByteCountFormatter extends Formatter {
    static stringFromByteCountCountStyle(_: number, countStyle: ByteCountFormatter.CountStyle): string;
    static stringFromMeasurementWithCountStyle(_: NSMeasurement<NSUnitInformationStorage>, countStyle: ByteCountFormatter.CountStyle): string;
    isAdaptive: boolean;
    setAdaptive(_: boolean) // property
    allowedUnits: ByteCountFormatter.Units;
    setAllowedUnits(_: ByteCountFormatter.Units) // property
    allowsNonnumericFormatting: boolean;
    setAllowsNonnumericFormatting(_: boolean) // property
    countStyle: ByteCountFormatter.CountStyle;
    setCountStyle(_: ByteCountFormatter.CountStyle) // property
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context) // property
    includesActualByteCount: boolean;
    setIncludesActualByteCount(_: boolean) // property
    includesCount: boolean;
    setIncludesCount(_: boolean) // property
    includesUnit: boolean;
    setIncludesUnit(_: boolean) // property
    zeroPadsFractionDigits: boolean;
    setZeroPadsFractionDigits(_: boolean) // property
    stringFromByteCount(fromByteCount: number): string;
    stringFromMeasurement(_: NSMeasurement<NSUnitInformationStorage>): string;
  }

  // interface
  class NSCache<KeyType, ObjectType> extends NSObject {
    countLimit: number;
    setCountLimit(_: number) // property
    delegate: NSCacheDelegate;
    setDelegate(_: NSCacheDelegate) // property
    evictsObjectsWithDiscardedContent: boolean;
    setEvictsObjectsWithDiscardedContent(_: boolean) // property
    name: string;
    setName(_: string) // property
    totalCostLimit: number;
    setTotalCostLimit(_: number) // property
    objectForKey(forKey: KeyType): ObjectType;
    removeAllObjects(): void;
    removeObjectForKey(forKey: KeyType): void;
    setObjectForKey(_: ObjectType, forKey: KeyType): void;
    setObjectForKeyCost(_: ObjectType, forKey: KeyType, cost: number): void;
  }

  interface NSCacheDelegate extends NSObject {
    // instance method
    cacheWillEvictObject?(_: NSCache<any, any>, willEvictObject: any): void;
  }

  // interface
  class CachedURLResponse extends NSObject /* implements NSCopying, NSSecureCoding */ {
    data: NSData; // property
    response: URLResponse; // property
    storagePolicy: URLCache.StoragePolicy; // property
    userInfo: Map<any, any>; // property
    static createWithResponseData(response: URLResponse, data: NSData): CachedURLResponse;
    static createWithResponseDataUserInfoStoragePolicy(response: URLResponse, data: NSData, userInfo?: Map<any, any>, storagePolicy?: URLCache.StoragePolicy): CachedURLResponse;
  }

  // interface
  class NSCalendar extends NSObject /* implements NSCopying, NSSecureCoding */ {
    AMSymbol: string; // property
    PMSymbol: string; // property
    calendarIdentifier: string; // property
    eraSymbols: string[]; // property
    firstWeekday: number;
    setFirstWeekday(_: number) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    longEraSymbols: string[]; // property
    minimumDaysInFirstWeek: number;
    setMinimumDaysInFirstWeek(_: number) // property
    monthSymbols: string[]; // property
    quarterSymbols: string[]; // property
    shortMonthSymbols: string[]; // property
    shortQuarterSymbols: string[]; // property
    shortStandaloneMonthSymbols: string[]; // property
    shortStandaloneQuarterSymbols: string[]; // property
    shortStandaloneWeekdaySymbols: string[]; // property
    shortWeekdaySymbols: string[]; // property
    standaloneMonthSymbols: string[]; // property
    standaloneQuarterSymbols: string[]; // property
    standaloneWeekdaySymbols: string[]; // property
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone) // property
    veryShortMonthSymbols: string[]; // property
    veryShortStandaloneMonthSymbols: string[]; // property
    veryShortStandaloneWeekdaySymbols: string[]; // property
    veryShortWeekdaySymbols: string[]; // property
    weekdaySymbols: string[]; // property
    static autoupdatingCurrentCalendar: NSCalendar; // property
    static currentCalendar: NSCalendar; // property
    compareDateToDateToUnitGranularity(_: Date, to: Date, toUnitGranularity: NSCalendar.Unit): ComparisonResult;
    componentFromDate(_: NSCalendar.Unit, from: Date): number;
    componentsFromDate(_: NSCalendar.Unit, from: Date): NSDateComponents;
    componentsFromDateToDateOptions(_: NSCalendar.Unit, from: Date, to: Date, options: NSCalendar.Options): NSDateComponents;
    componentsFromDateComponentsToDateComponentsOptions(_: NSCalendar.Unit, from: NSDateComponents, to: NSDateComponents, options: NSCalendar.Options): NSDateComponents;
    componentsInTimeZoneFromDate(in_: NSTimeZone, from: Date): NSDateComponents;
    dateMatchesComponents(_: Date, matchesComponents: NSDateComponents): boolean;
    dateByAddingComponentsToDateOptions(byAdding: NSDateComponents, to: Date, options: NSCalendar.Options): Date;
    dateByAddingUnitValueToDateOptions(byAdding: NSCalendar.Unit, value: number, to: Date, options: NSCalendar.Options): Date;
    dateBySettingHourMinuteSecondOfDateOptions(bySettingHour: number, minute: number, second: number, of: Date, options: NSCalendar.Options): Date;
    dateBySettingUnitValueOfDateOptions(bySettingUnit: NSCalendar.Unit, value: number, of: Date, options: NSCalendar.Options): Date;
    dateFromComponents(from: NSDateComponents): Date;
    dateWithEraYearMonthDayHourMinuteSecondNanosecond(era: number, year: number, month: number, day: number, hour: number, minute: number, second: number, nanosecond: number): Date;
    dateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond(era: number, yearForWeekOfYear: number, weekOfYear: number, weekday: number, hour: number, minute: number, second: number, nanosecond: number): Date;
    enumerateDatesWithStartingAfterMatchingOptionsUsing(startingAfter: Date, matching: NSDateComponents, options: NSCalendar.Options, using?: (p1: Date, p2: boolean, p3: boolean) => void): void;
    getEraYearMonthDayFromDate(_?: number, year?: number, month?: number, day?: number, from?: Date): void;
    getEraYearForWeekOfYearWeekOfYearWeekdayFromDate(_?: number, yearForWeekOfYear?: number, weekOfYear?: number, weekday?: number, from?: Date): void;
    getHourMinuteSecondNanosecondFromDate(_?: number, minute?: number, second?: number, nanosecond?: number, from?: Date): void;
    static createWithCalendarIdentifier(calendarIdentifier: string): NSCalendar;
    isDateEqualToDateToUnitGranularity(_: Date, equalTo: Date, toUnitGranularity: NSCalendar.Unit): boolean;
    isDateInSameDayAsDate(_: Date, inSameDayAs: Date): boolean;
    isDateInToday(_: Date): boolean;
    isDateInTomorrow(_: Date): boolean;
    isDateInWeekend(_: Date): boolean;
    isDateInYesterday(_: Date): boolean;
    maximumRangeOfUnit(of: NSCalendar.Unit): NSRange;
    minimumRangeOfUnit(of: NSCalendar.Unit): NSRange;
    nextDateAfterDateMatchingComponentsOptions(after: Date, matching: NSDateComponents, options: NSCalendar.Options): Date;
    nextDateAfterDateMatchingHourMinuteSecondOptions(after: Date, matchingHour: number, minute: number, second: number, options: NSCalendar.Options): Date;
    nextDateAfterDateMatchingUnitValueOptions(after: Date, matching: NSCalendar.Unit, value: number, options: NSCalendar.Options): Date;
    nextWeekendStartDateIntervalOptionsAfterDate(_?: Date, interval?: number, options?: NSCalendar.Options, after?: Date): boolean;
    ordinalityOfUnitInUnitForDate(of: NSCalendar.Unit, in_: NSCalendar.Unit, for_: Date): number;
    rangeOfUnitInUnitForDate(of: NSCalendar.Unit, in_: NSCalendar.Unit, for_: Date): NSRange;
    rangeOfUnitStartDateIntervalForDate(of: NSCalendar.Unit, start?: Date, interval?: number, for_?: Date): boolean;
    rangeOfWeekendStartDateIntervalContainingDate(ofWeekendStart?: Date, interval?: number, containing?: Date): boolean;
    startOfDayForDate(for_: Date): Date;
  }

  // interface
  class NSCharacterSet extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding */ {
    bitmapRepresentation: NSData; // property
    invertedSet: NSCharacterSet; // property
    static URLFragmentAllowedCharacterSet: NSCharacterSet; // property
    static URLHostAllowedCharacterSet: NSCharacterSet; // property
    static URLPasswordAllowedCharacterSet: NSCharacterSet; // property
    static URLPathAllowedCharacterSet: NSCharacterSet; // property
    static URLQueryAllowedCharacterSet: NSCharacterSet; // property
    static URLUserAllowedCharacterSet: NSCharacterSet; // property
    static alphanumericCharacterSet: NSCharacterSet; // property
    static capitalizedLetterCharacterSet: NSCharacterSet; // property
    static controlCharacterSet: NSCharacterSet; // property
    static decimalDigitCharacterSet: NSCharacterSet; // property
    static decomposableCharacterSet: NSCharacterSet; // property
    static illegalCharacterSet: NSCharacterSet; // property
    static letterCharacterSet: NSCharacterSet; // property
    static lowercaseLetterCharacterSet: NSCharacterSet; // property
    static newlineCharacterSet: NSCharacterSet; // property
    static nonBaseCharacterSet: NSCharacterSet; // property
    static punctuationCharacterSet: NSCharacterSet; // property
    static symbolCharacterSet: NSCharacterSet; // property
    static uppercaseLetterCharacterSet: NSCharacterSet; // property
    static whitespaceAndNewlineCharacterSet: NSCharacterSet; // property
    static whitespaceCharacterSet: NSCharacterSet; // property
    characterIsMember(_: string): boolean;
    hasMemberInPlane(_: number): boolean;
    isSupersetOfSet(of: NSCharacterSet): boolean;
    longCharacterIsMember(_: number): boolean;
  }

  // interface
  class NSClassDescription extends NSObject {
    static invalidateClassDescriptionCache(): void;
    static registerClassDescriptionForClass(_: NSClassDescription, for_: typeof NSObject): void;
  }

  // export declare function NSClassFromString(aClassName: string): typeof NSObject;

  // interface
  class NSCloneCommand extends NSScriptCommand {
    keySpecifier: NSScriptObjectSpecifier; // property
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // interface
  class NSCloseCommand extends NSScriptCommand {
    saveOptions: NSSaveOptions; // property
  }

  // interface
  class NSCoder extends NSObject {
    allowedClasses: NSSet<typeof NSObject>; // property
    allowsKeyedCoding: boolean; // property
    decodingFailurePolicy: NSCoder.DecodingFailurePolicy; // property
    error: NSError; // property
    requiresSecureCoding: boolean; // property
    systemVersion: number; // property
    containsValueForKey(forKey: string): boolean;
    decodeArrayOfObjCTypeCountAt(ofObjCType: string, count: number, at: any): void;
    decodeBoolForKey(forKey: string): boolean;
    decodeBytesForKeyReturnedLength(forKey: string, returnedLength?: number): string;
    decodeBytesWithReturnedLength(withReturnedLength: number): any;
    decodeCMTimeForKey(forKey: string): CMTime;
    decodeCMTimeMappingForKey(forKey: string): CMTimeMapping;
    decodeCMTimeRangeForKey(forKey: string): CMTimeRange;
    decodeDataObject(): NSData;
    decodeDoubleForKey(forKey: string): number;
    decodeFloatForKey(forKey: string): number;
    decodeInt32ForKey(forKey: string): number;
    decodeInt64ForKey(forKey: string): number;
    decodeIntForKey(forKey: string): number;
    decodeIntegerForKey(forKey: string): number;
    decodeObject(): any;
    decodeObjectForKey(forKey: string): any;
    decodePoint(): CGPoint;
    decodePointForKey(forKey: string): CGPoint;
    decodePropertyList(): any;
    decodePropertyListForKey(forKey: string): any;
    decodeRect(): CGRect;
    decodeRectForKey(forKey: string): CGRect;
    decodeSize(): CGSize;
    decodeSizeForKey(forKey: string): CGSize;
    decodeValueOfObjCTypeAt(ofObjCType: string, at: any): void;
    decodeValueOfObjCTypeAtSize(ofObjCType: string, at: any, size: number): void;
    encodeArrayOfObjCTypeCountAt(ofObjCType: string, count: number, at: any): void;
    encodeBoolForKey(_: boolean, forKey: string): void;
    encodeBycopyObject(_?: any): void;
    encodeByrefObject(_?: any): void;
    encodeBytesLength(_?: any, length?: number): void;
    encodeBytesLengthForKey(_?: string, length?: number, forKey?: string): void;
    encodeCMTimeForKey(_: CMTime, forKey: string): void;
    encodeCMTimeMappingForKey(_: CMTimeMapping, forKey: string): void;
    encodeCMTimeRangeForKey(_: CMTimeRange, forKey: string): void;
    encodeConditionalObject(_?: any): void;
    encodeConditionalObjectForKey(_?: any, forKey?: string): void;
    encodeDataObject(_: NSData): void;
    encodeDoubleForKey(_: number, forKey: string): void;
    encodeFloatForKey(_: number, forKey: string): void;
    encodeInt32ForKey(_: number, forKey: string): void;
    encodeInt64ForKey(_: number, forKey: string): void;
    encodeIntForKey(_: number, forKey: string): void;
    encodeIntegerForKey(_: number, forKey: string): void;
    encodeObject(_?: any): void;
    encodeObjectForKey(_?: any, forKey?: string): void;
    encodePoint(_: CGPoint): void;
    encodePointForKey(_: CGPoint, forKey: string): void;
    encodePropertyList(_: any): void;
    encodeRect(_: CGRect): void;
    encodeRectForKey(_: CGRect, forKey: string): void;
    encodeRootObject(_: any): void;
    encodeSize(_: CGSize): void;
    encodeSizeForKey(_: CGSize, forKey: string): void;
    encodeValueOfObjCTypeAt(ofObjCType: string, at: any): void;
    failWithError(_: NSError): void;
    versionForClassName(forClassName: string): number;
  }

  interface NSCoding {
    // instance method
    encodeWithCoder(with_: NSCoder): void;
  }

  // export declare function NSCompareHashTables(table1: NSHashTable<any>, table2: NSHashTable<any>): boolean;

  // export declare function NSCompareMapTables(table1: NSMapTable<any, any>, table2: NSMapTable<any, any>): boolean;

  // interface
  class NSComparisonPredicate extends NSPredicate {
    comparisonPredicateModifier: NSComparisonPredicate.Modifier; // property
    customSelector: string; // property
    leftExpression: NSExpression; // property
    options: NSComparisonPredicate.Options; // property
    predicateOperatorType: NSComparisonPredicate.Operator; // property
    rightExpression: NSExpression; // property
    static createWithLeftExpressionRightExpressionCustomSelector(leftExpression: NSExpression, rightExpression: NSExpression, customSelector: string): NSComparisonPredicate;
    static createWithLeftExpressionRightExpressionModifierTypeOptions(leftExpression: NSExpression, rightExpression: NSExpression, modifier: NSComparisonPredicate.Modifier, type: NSComparisonPredicate.Operator, options: NSComparisonPredicate.Options): NSComparisonPredicate;
  }

  // interface
  class NSCompoundPredicate extends NSPredicate {
    compoundPredicateType: NSCompoundPredicate.LogicalType; // property
    subpredicates: any[]; // property
    static createWithTypeSubpredicates(type: NSCompoundPredicate.LogicalType, subpredicates: NSPredicate[]): NSCompoundPredicate;
  }

  // interface
  class NSCondition extends NSObject /* implements NSLocking */ {
    name: string;
    setName(_: string) // property
    broadcast(): void;
    signal(): void;
    wait(): void;
    waitUntilDate(until: Date): boolean;
  }

  // interface
  class NSConditionLock extends NSObject /* implements NSLocking */ {
    condition: number; // property
    name: string;
    setName(_: string) // property
    static createWithCondition(condition: number): NSConditionLock;
    lockBeforeDate(before: Date): boolean;
    lockWhenCondition(whenCondition: number): void;
    lockWhenConditionBeforeDate(whenCondition: number, before: Date): boolean;
    tryLock(): boolean;
    tryLockWhenCondition(whenCondition: number): boolean;
    unlockWithCondition(withCondition: number): void;
  }

  // export declare function NSContainsRect(aRect: CGRect, bRect: CGRect): boolean;

  // export declare function NSCopyHashTableWithZone(table: NSHashTable<any>, zone: any): NSHashTable<any>;

  // export declare function NSCopyMapTableWithZone(table: NSMapTable<any, any>, zone: any): NSMapTable<any, any>;

  // export declare function NSCopyMemoryPages(source: any, dest: any, bytes: number): void;

  interface NSCopying {
  }

  // interface
  class NSCountCommand extends NSScriptCommand {
  }

  // export declare function NSCountFrames(): number;

  // export declare function NSCountHashTable(table: NSHashTable<any>): number;

  // export declare function NSCountMapTable(table: NSMapTable<any, any>): number;

  // interface
  class NSCountedSet<ObjectType> extends NSMutableSet<ObjectType> {
    countForObject(for_: ObjectType): number;
  }

  // interface
  class NSCreateCommand extends NSScriptCommand {
    createClassDescription: NSScriptClassDescription; // property
    resolvedKeyDictionary: Map<string, any>; // property
  }

  // export declare function NSCreateHashTable(callBacks: NSHashTableCallBacks, capacity: number): NSHashTable<any>;

  // export declare function NSCreateHashTableWithZone(callBacks: NSHashTableCallBacks, capacity: number, zone: any): NSHashTable<any>;

  // export declare function NSCreateMapTable(keyCallBacks: NSMapTableKeyCallBacks, valueCallBacks: NSMapTableValueCallBacks, capacity: number): NSMapTable<any, any>;

  // export declare function NSCreateMapTableWithZone(keyCallBacks: NSMapTableKeyCallBacks, valueCallBacks: NSMapTableValueCallBacks, capacity: number, zone: any): NSMapTable<any, any>;

  // interface
  class NSData extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding */ {
    static dataWithContentsOfFileOptionsError(options: string, error: NSData.ReadingOptions): NSData;
    static dataWithContentsOfURLOptionsError(options: NSURL, error: NSData.ReadingOptions): NSData;
    bytes: any; // property
    length: number; // property
    base64EncodedDataWithOptions(options: NSData.Base64EncodingOptions): NSData;
    base64EncodedStringWithOptions(options: NSData.Base64EncodingOptions): string;
    compressedDataUsingAlgorithmError(using: NSData.CompressionAlgorithm): NSData;
    decompressedDataUsingAlgorithmError(using: NSData.CompressionAlgorithm): NSData;
    enumerateBytes(_: (p1: any, p2: NSRange, p3: boolean) => void): void;
    getBytesLength(_: any, length: number): void;
    getBytesRange(_: any, range: NSRange): void;
    static createWithBase64EncodedDataOptions(base64EncodedData: NSData, options: NSData.Base64DecodingOptions): NSData;
    static createWithBase64EncodedStringOptions(base64EncodedString: string, options: NSData.Base64DecodingOptions): NSData;
    static createWithBytesLength(bytes?: any, length?: number): NSData;
    static createWithBytesNoCopyLength(bytesNoCopy: any, length: number): NSData;
    static createWithBytesNoCopyLengthDeallocator(bytesNoCopy: any, length: number, deallocator?: (p1: any, p2: number) => void): NSData;
    static createWithBytesNoCopyLengthFreeWhenDone(bytesNoCopy: any, length: number, freeWhenDone: boolean): NSData;
    static createWithContentsOfFile(contentsOfFile: string): NSData;
    static createWithContentsOfFileOptions(contentsOfFile: string, options: NSData.ReadingOptions): NSData;
    static createWithContentsOfURL(contentsOfURL: NSURL): NSData;
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options: NSData.ReadingOptions): NSData;
    static createWithData(data: NSData): NSData;
    isEqualToData(to: NSData): boolean;
    rangeOfDataOptionsRange(of: NSData, options: NSData.SearchOptions, in_: NSRange): NSRange;
    subdataWithRange(with_: NSRange): NSData;
    writeToFileAtomically(toFile: string, atomically: boolean): boolean;
    writeToFileOptionsError(options: string, error: NSData.WritingOptions): boolean;
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
    writeToURLOptionsError(options: NSURL, error: NSData.WritingOptions): boolean;
  }

  // interface
  class NSDataDetector extends NSRegularExpression {
    static dataDetectorWithTypesError(error: number): NSDataDetector;
    checkingTypes: number; // property
    static createWithTypes(types: number): NSDataDetector;
  }

  // interface
  class NSDate extends NSObject /* implements NSCopying, NSSecureCoding */ {
    timeIntervalSince1970: number; // property
    timeIntervalSinceNow: number; // property
    static distantFuture: Date; // property
    static distantPast: Date; // property
    static now: Date; // property
    static timeIntervalSinceReferenceDate: number; // property
    compare(_: Date): ComparisonResult;
    dateByAddingTimeInterval(_: number): NSDate;
    descriptionWithLocale(with_?: any): string;
    earlierDate(_: Date): Date;
    static createWithTimeIntervalSinceDate(timeInterval: number, sinceDate: Date): NSDate;
    static createWithTimeIntervalSince1970(timeIntervalSince1970: number): NSDate;
    static createWithTimeIntervalSinceNow(timeIntervalSinceNow: number): NSDate;
    static createWithTimeIntervalSinceReferenceDate(timeIntervalSinceReferenceDate: number): NSDate;
    isEqualToDate(to: Date): boolean;
    laterDate(_: Date): Date;
    timeIntervalSinceDate(_: Date): number;
  }

  // interface
  class NSDateComponents extends NSObject /* implements NSCopying, NSSecureCoding */ {
    calendar: NSCalendar;
    setCalendar(_: NSCalendar) // property
    date: Date; // property
    day: number;
    setDay(_: number) // property
    era: number;
    setEra(_: number) // property
    hour: number;
    setHour(_: number) // property
    isLeapMonth: boolean;
    setLeapMonth(_: boolean) // property
    minute: number;
    setMinute(_: number) // property
    month: number;
    setMonth(_: number) // property
    nanosecond: number;
    setNanosecond(_: number) // property
    quarter: number;
    setQuarter(_: number) // property
    second: number;
    setSecond(_: number) // property
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone) // property
    isValidDate: boolean; // property
    weekOfMonth: number;
    setWeekOfMonth(_: number) // property
    weekOfYear: number;
    setWeekOfYear(_: number) // property
    weekday: number;
    setWeekday(_: number) // property
    weekdayOrdinal: number;
    setWeekdayOrdinal(_: number) // property
    year: number;
    setYear(_: number) // property
    yearForWeekOfYear: number;
    setYearForWeekOfYear(_: number) // property
    isValidDateInCalendar(in_: NSCalendar): boolean;
    setValueForComponent(_: number, forComponent: NSCalendar.Unit): void;
    valueForComponent(forComponent: NSCalendar.Unit): number;
  }

  // interface
  class DateComponentsFormatter extends Formatter {
    static localizedStringFromDateComponentsUnitsStyle(_: NSDateComponents, unitsStyle: DateComponentsFormatter.UnitsStyle): string;
    allowedUnits: NSCalendar.Unit;
    setAllowedUnits(_: NSCalendar.Unit) // property
    allowsFractionalUnits: boolean;
    setAllowsFractionalUnits(_: boolean) // property
    calendar: NSCalendar;
    setCalendar(_: NSCalendar) // property
    collapsesLargestUnit: boolean;
    setCollapsesLargestUnit(_: boolean) // property
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context) // property
    includesApproximationPhrase: boolean;
    setIncludesApproximationPhrase(_: boolean) // property
    includesTimeRemainingPhrase: boolean;
    setIncludesTimeRemainingPhrase(_: boolean) // property
    maximumUnitCount: number;
    setMaximumUnitCount(_: number) // property
    referenceDate: Date;
    setReferenceDate(_: Date) // property
    unitsStyle: DateComponentsFormatter.UnitsStyle;
    setUnitsStyle(_: DateComponentsFormatter.UnitsStyle) // property
    zeroFormattingBehavior: DateComponentsFormatter.ZeroFormattingBehavior;
    setZeroFormattingBehavior(_: DateComponentsFormatter.ZeroFormattingBehavior) // property
    stringFromDateToDate(_: Date, toDate: Date): string;
    stringFromDateComponents(_: NSDateComponents): string;
    stringFromTimeInterval(from: number): string;
  }

  // interface
  class DateFormatter extends Formatter {
    static dateFormatFromTemplateOptionsLocale(_: string, options: number, locale?: NSLocale): string;
    static localizedStringFromDateDateStyleTimeStyle(from: Date, dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style): string;
    AMSymbol: string;
    setAMSymbol(_: string) // property
    PMSymbol: string;
    setPMSymbol(_: string) // property
    calendar: NSCalendar;
    setCalendar(_: NSCalendar) // property
    dateFormat: string;
    setDateFormat(_: string) // property
    dateStyle: DateFormatter.Style;
    setDateStyle(_: DateFormatter.Style) // property
    defaultDate: Date;
    setDefaultDate(_: Date) // property
    doesRelativeDateFormatting: boolean;
    setDoesRelativeDateFormatting(_: boolean) // property
    eraSymbols: string[];
    setEraSymbols(_: string[]) // property
    formatterBehavior: DateFormatter.Behavior;
    setFormatterBehavior(_: DateFormatter.Behavior) // property
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context) // property
    generatesCalendarDates: boolean;
    setGeneratesCalendarDates(_: boolean) // property
    gregorianStartDate: Date;
    setGregorianStartDate(_: Date) // property
    isLenient: boolean;
    setLenient(_: boolean) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    longEraSymbols: string[];
    setLongEraSymbols(_: string[]) // property
    monthSymbols: string[];
    setMonthSymbols(_: string[]) // property
    quarterSymbols: string[];
    setQuarterSymbols(_: string[]) // property
    shortMonthSymbols: string[];
    setShortMonthSymbols(_: string[]) // property
    shortQuarterSymbols: string[];
    setShortQuarterSymbols(_: string[]) // property
    shortStandaloneMonthSymbols: string[];
    setShortStandaloneMonthSymbols(_: string[]) // property
    shortStandaloneQuarterSymbols: string[];
    setShortStandaloneQuarterSymbols(_: string[]) // property
    shortStandaloneWeekdaySymbols: string[];
    setShortStandaloneWeekdaySymbols(_: string[]) // property
    shortWeekdaySymbols: string[];
    setShortWeekdaySymbols(_: string[]) // property
    standaloneMonthSymbols: string[];
    setStandaloneMonthSymbols(_: string[]) // property
    standaloneQuarterSymbols: string[];
    setStandaloneQuarterSymbols(_: string[]) // property
    standaloneWeekdaySymbols: string[];
    setStandaloneWeekdaySymbols(_: string[]) // property
    timeStyle: DateFormatter.Style;
    setTimeStyle(_: DateFormatter.Style) // property
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone) // property
    twoDigitStartDate: Date;
    setTwoDigitStartDate(_: Date) // property
    veryShortMonthSymbols: string[];
    setVeryShortMonthSymbols(_: string[]) // property
    veryShortStandaloneMonthSymbols: string[];
    setVeryShortStandaloneMonthSymbols(_: string[]) // property
    veryShortStandaloneWeekdaySymbols: string[];
    setVeryShortStandaloneWeekdaySymbols(_: string[]) // property
    veryShortWeekdaySymbols: string[];
    setVeryShortWeekdaySymbols(_: string[]) // property
    weekdaySymbols: string[];
    setWeekdaySymbols(_: string[]) // property
    static defaultFormatterBehavior: DateFormatter.Behavior;
    setDefaultFormatterBehavior(_: DateFormatter.Behavior) // property
    dateFromString(_: string): Date;
    getObjectValueForStringRangeError(forString?: any, range?: string, error?: NSRange): boolean;
    setLocalizedDateFormatFromTemplate(_: string): void;
    stringFromDate(_: Date): string;
  }

  // interface
  class NSDateInterval extends NSObject /* implements NSCopying, NSSecureCoding */ {
    duration: number; // property
    endDate: Date; // property
    startDate: Date; // property
    compare(_: NSDateInterval): ComparisonResult;
    containsDate(_: Date): boolean;
    static createWithStartDateDuration(startDate: Date, duration: number): NSDateInterval;
    static createWithStartDateEndDate(startDate: Date, endDate: Date): NSDateInterval;
    intersectionWithDateInterval(with_: NSDateInterval): NSDateInterval;
    intersectsDateInterval(_: NSDateInterval): boolean;
    isEqualToDateInterval(to: NSDateInterval): boolean;
  }

  // interface
  class DateIntervalFormatter extends Formatter {
    calendar: NSCalendar;
    setCalendar(_: NSCalendar) // property
    dateStyle: DateIntervalFormatter.Style;
    setDateStyle(_: DateIntervalFormatter.Style) // property
    dateTemplate: string;
    setDateTemplate(_: string) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    timeStyle: DateIntervalFormatter.Style;
    setTimeStyle(_: DateIntervalFormatter.Style) // property
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone) // property
    stringFromDateToDate(_: Date, toDate: Date): string;
    stringFromDateInterval(_: NSDateInterval): string;
  }

  // export declare function NSDeallocateMemoryPages(ptr: any, bytes: number): void;

  // export declare function NSDeallocateObject(object_: any): void;

  // export declare function NSDecimalAdd(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export declare function NSDecimalCompact(number: number): void;

  // export declare function NSDecimalCompare(leftOperand: number, rightOperand: number): ComparisonResult;

  // export declare function NSDecimalCopy(destination: number, source: number): void;

  // export declare function NSDecimalDivide(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export declare function NSDecimalMultiply(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export declare function NSDecimalMultiplyByPowerOf10(result: number, number: number, power: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export declare function NSDecimalNormalize(number1: number, number2: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // interface
  class NSDecimalNumber extends NSNumber {
    static defaultBehavior: NSDecimalNumberBehaviors;
    setDefaultBehavior(_: NSDecimalNumberBehaviors) // property
    static maximumDecimalNumber: NSDecimalNumber; // property
    static minimumDecimalNumber: NSDecimalNumber; // property
    static notANumber: NSDecimalNumber; // property
    static one: NSDecimalNumber; // property
    static zero: NSDecimalNumber; // property
    decimalNumberByAdding(_: NSDecimalNumber): NSDecimalNumber;
    decimalNumberByAddingWithBehavior(_: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    decimalNumberByDividingBy(by: NSDecimalNumber): NSDecimalNumber;
    decimalNumberByDividingByWithBehavior(by: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    decimalNumberByMultiplyingBy(by: NSDecimalNumber): NSDecimalNumber;
    decimalNumberByMultiplyingByWithBehavior(by: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    decimalNumberByMultiplyingByPowerOf10(byPowerOf10: number): NSDecimalNumber;
    decimalNumberByMultiplyingByPowerOf10WithBehavior(byPowerOf10: number, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    decimalNumberByRaisingToPower(toPower: number): NSDecimalNumber;
    decimalNumberByRaisingToPowerWithBehavior(toPower: number, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    decimalNumberByRoundingAccordingToBehavior(accordingToBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    decimalNumberBySubtracting(_: NSDecimalNumber): NSDecimalNumber;
    decimalNumberBySubtractingWithBehavior(_: NSDecimalNumber, withBehavior?: NSDecimalNumberBehaviors): NSDecimalNumber;
    static createWithDecimal(decimal: number): NSDecimalNumber;
    static createWithMantissaExponentIsNegative(mantissa: number, exponent: number, isNegative: boolean): NSDecimalNumber;
    static createWithString(string?: string): NSDecimalNumber;
    static createWithStringLocale(string?: string, locale?: any): NSDecimalNumber;
  }

  interface NSDecimalNumberBehaviors {
    // instance method
    exceptionDuringOperationErrorLeftOperandRightOperand(_: string, error: NSDecimalNumber.CalculationError, leftOperand: NSDecimalNumber, rightOperand?: NSDecimalNumber): NSDecimalNumber;
    // instance method
    roundingMode(): NSDecimalNumber.RoundingMode;
    // instance method
    scale(): number;
  }

  // interface
  class NSDecimalNumberHandler extends NSObject /* implements NSCoding, NSDecimalNumberBehaviors */ {
    static decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode: NSDecimalNumber.RoundingMode, scale: number, raiseOnExactness: boolean, raiseOnOverflow: boolean, raiseOnUnderflow: boolean, raiseOnDivideByZero: boolean): NSDecimalNumberHandler;
    static defaultDecimalNumberHandler: NSDecimalNumberHandler; // property
    static createWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode: NSDecimalNumber.RoundingMode, scale: number, raiseOnExactness: boolean, raiseOnOverflow: boolean, raiseOnUnderflow: boolean, raiseOnDivideByZero: boolean): NSDecimalNumberHandler;
  }

  // export declare function NSDecimalPower(result: number, number: number, power: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export declare function NSDecimalRound(result: number, number: number, scale: number, roundingMode: NSDecimalNumber.RoundingMode): void;

  // export declare function NSDecimalString(dcm: number, locale: any): string;

  // export declare function NSDecimalSubtract(result: number, leftOperand: number, rightOperand: number, roundingMode: NSDecimalNumber.RoundingMode): NSDecimalNumber.CalculationError;

  // export declare function NSDecrementExtraRefCountWasZero(object_: any): boolean;

  // interface
  class NSDeleteCommand extends NSScriptCommand {
    keySpecifier: NSScriptObjectSpecifier; // property
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // interface
  class NSDictionary<KeyType, ObjectType> extends NSObject /* implements NSCopying, NSFastEnumeration, NSMutableCopying, NSSecureCoding, NSFastEnumeration, NSFetchRequestResult */ {
    static sharedKeySetWithForKeys<KeyType>(forKeys: KeyType[]): any;
    allKeys: KeyType[]; // property
    allValues: ObjectType[]; // property
    count: number; // property
    descriptionInStringsFileFormat: string; // property
    allKeysForObject(for_: ObjectType): KeyType[];
    countByEnumeratingWithStateObjectsCount(with_: NSFastEnumerationState, objects?: K, count?: number): number;
    descriptionWithLocale(withLocale?: any): string;
    descriptionWithLocaleIndent(withLocale?: any, indent?: number): string;
    enumerateKeysAndObjects(_: (p1: KeyType, p2: ObjectType, p3: boolean) => void): void;
    enumerateKeysAndObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: KeyType, p2: ObjectType, p3: boolean) => void): void;
    fileCreationDate(): Date;
    fileExtensionHidden(): boolean;
    fileGroupOwnerAccountID(): number;
    fileGroupOwnerAccountName(): string;
    fileHFSCreatorCode(): number;
    fileHFSTypeCode(): number;
    fileIsAppendOnly(): boolean;
    fileIsImmutable(): boolean;
    fileModificationDate(): Date;
    fileOwnerAccountID(): number;
    fileOwnerAccountName(): string;
    filePosixPermissions(): number;
    fileSize(): number;
    fileSystemFileNumber(): number;
    fileSystemNumber(): number;
    fileType(): string;
    isEqualToDictionary(to: Map<KeyType, ObjectType>): boolean;
    keyEnumerator(): NSEnumerator<KeyType>;
    keysOfEntriesWithPassingTest(passingTest: (p1: KeyType, p2: ObjectType, p3: boolean) => boolean): NSSet<KeyType>;
    keysOfEntriesWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: KeyType, p2: ObjectType, p3: boolean) => boolean): NSSet<KeyType>;
    keysSortedByValueWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): KeyType[];
    keysSortedByValueUsingSelector(using: string): KeyType[];
    keysSortedByValueWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): KeyType[];
    objectEnumerator(): NSEnumerator<ObjectType>;
    objectForKey(forKey: KeyType): ObjectType;
    objectsForKeysNotFoundMarker(forKeys: KeyType[], notFoundMarker: ObjectType): ObjectType[];
    writeToFileAtomically(toFile: string, atomically: boolean): boolean;
    writeToURLAtomically(to: NSURL, atomically: boolean): boolean;
    writeToURLError(error: NSURL): boolean;
  }

  // interface
  class Dimension extends Unit /* implements NSSecureCoding */ {
    static baseUnit(): Dimension;
    converter: UnitConverter; // property
    static createWithSymbolConverter(symbol: string, converter: UnitConverter): Dimension;
  }

  // interface
  class DirectoryEnumerator<ObjectType> extends NSEnumerator<ObjectType> {
    directoryAttributes: Map<string, any>; // property
    fileAttributes: Map<string, any>; // property
    isEnumeratingDirectoryPostOrder: boolean; // property
    level: number; // property
    skipDescendants(): void;
    skipDescendents(): void;
  }

  interface NSDiscardableContent {
    // instance method
    beginContentAccess(): boolean;
    // instance method
    discardContentIfPossible(): void;
    // instance method
    endContentAccess(): void;
    // instance method
    isContentDiscarded(): boolean;
  }

  // interface
  class NSDistributedLock extends NSObject {
    lockDate: Date; // property
    breakLock(): void;
    static createWithPath(path: string): NSDistributedLock;
    tryLock(): boolean;
    unlock(): void;
  }

  // interface
  class DistributedNotificationCenter extends NotificationCenter {
    suspended: boolean;
    setSuspended(_: boolean) // property
    addObserverSelectorNameObjectSuspensionBehavior(_: any, selector: string, name?: string, object_?: string, suspensionBehavior?: DistributedNotificationCenter.SuspensionBehavior): void;
    postNotificationNameObjectUserInfoDeliverImmediately(_: string, object_?: string, userInfo?: Map<any, any>, deliverImmediately?: boolean): void;
    postNotificationNameObjectUserInfoOptions(_: string, object_?: string, userInfo?: Map<any, any>, options?: DistributedNotificationCenter.Options): void;
  }

  // export declare function NSDivideRect(inRect: CGRect, slice: NSRect, rem: NSRect, amount: number, edge: NSRectEdge): void;

  // struct
  interface NSEdgeInsets {
    top: number;
    left: number;
    bottom: number;
    right: number;
  }

  // export declare function NSEdgeInsetsEqual(aInsets: NSEdgeInsets, bInsets: NSEdgeInsets): boolean;

  // export declare function NSEndHashTableEnumeration(enumerator: NSHashEnumerator): void;

  // export declare function NSEndMapTableEnumeration(enumerator: NSMapEnumerator): void;

  // interface
  class EnergyFormatter extends Formatter {
    isForFoodEnergyUse: boolean;
    setForFoodEnergyUse(_: boolean) // property
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter) // property
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle) // property
    stringFromJoules(_: number): string;
    stringFromValueUnit(_: number, unit: EnergyFormatter.Unit): string;
    unitStringFromJoulesUsedUnit(_: number, usedUnit?: EnergyFormatter.Unit): string;
    unitStringFromValueUnit(_: number, unit: EnergyFormatter.Unit): string;
  }

  // export declare function NSEnumerateHashTable(table: NSHashTable<any>): NSHashEnumerator;

  // export declare function NSEnumerateMapTable(table: NSMapTable<any, any>): NSMapEnumerator;

  // interface
  class NSEnumerator<ObjectType> extends NSObject /* implements NSFastEnumeration */ {
    allObjects: ObjectType[]; // property
    nextObject(): ObjectType;
  }

  // export declare function NSEqualPoints(aPoint: CGPoint, bPoint: CGPoint): boolean;

  // export declare function NSEqualRects(aRect: CGRect, bRect: CGRect): boolean;

  // export declare function NSEqualSizes(aSize: CGSize, bSize: CGSize): boolean;

  // interface
  class NSError extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static setUserInfoValueProviderWithForDomainProvider(forDomain: string, provider?: (p1: NSError, p2: string) => any): void;
    static userInfoValueProviderForDomain(forDomain: string): (p1: NSError, p2: string) => any;
    code: number; // property
    domain: string; // property
    helpAnchor: string; // property
    localizedDescription: string; // property
    localizedFailureReason: string; // property
    localizedRecoveryOptions: string[]; // property
    localizedRecoverySuggestion: string; // property
    recoveryAttempter: any; // property
    userInfo: Map<string, any>; // property
    static createWithDomainCodeUserInfo(domain: string, code: number, userInfo?: Map<string, any>): NSError;
  }

  // interface
  class NSException extends NSObject /* implements NSCopying, NSSecureCoding */ {
    callStackReturnAddresses: number[]; // property
    callStackSymbols: string[]; // property
    name: string; // property
    reason: string; // property
    userInfo: Map<any, any>; // property
    static createWithNameReasonUserInfo(name: string, reason?: string, userInfo?: Map<any, any>): NSException;
    raise(): void;
  }

  // interface
  class NSExistsCommand extends NSScriptCommand {
  }

  // interface
  class NSExpression extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static expressionForAnyKey(): NSExpression;
    static expressionForEvaluatedObject(): NSExpression;
    arguments: NSExpression[]; // property
    collection: any; // property
    constantValue: any; // property
    expressionBlock: (p1: any, p2: NSExpression[], p3: NSMutableDictionary<any, any>) => any; // property
    expressionType: NSExpression.ExpressionType; // property
    falseExpression: NSExpression; // property
    function: string; // property
    keyPath: string; // property
    leftExpression: NSExpression; // property
    operand: NSExpression; // property
    predicate: NSPredicate; // property
    rightExpression: NSExpression; // property
    trueExpression: NSExpression; // property
    variable: string; // property
    allowEvaluation(): void;
    expressionValueWithObjectContext(with_?: any, context?: NSMutableDictionary<any, any>): any;
    static createWithExpressionType(expressionType: NSExpression.ExpressionType): NSExpression;
  }

  // interface
  class NSExtensionContext extends NSObject {
    inputItems: any[]; // property
    cancelRequestWithError(withError: NSError): void;
    completeRequestWithReturningItemsCompletionHandler(returningItems?: any[], completionHandler?: (p1: boolean) => void): void;
    openCompletionHandler(_: NSURL, completionHandler?: (p1: boolean) => void): void;
  }

  // interface
  class NSExtensionItem extends NSObject /* implements NSCopying, NSSecureCoding */ {
    attachments: NSItemProvider[];
    setAttachments(_: NSItemProvider[]) // property
    attributedContentText: NSAttributedString;
    setAttributedContentText(_: NSAttributedString) // property
    attributedTitle: NSAttributedString;
    setAttributedTitle(_: NSAttributedString) // property
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>) // property
  }

  interface NSExtensionRequestHandling extends NSObject {
    // instance method
    beginRequestWithExtensionContext(with_: NSExtensionContext): void;
  }

  // export declare function NSExtraRefCount(object_: any): number;

  interface NSFastEnumeration {
    // instance method
    countByEnumeratingWithStateObjectsCount(with_: NSFastEnumerationState, objects?: any, count?: number): number;
  }

  // struct
  interface NSFastEnumerationState {
    state: number;
    itemsPtr: any;
    mutationsPtr: number;
    extra: number;
  }

  // interface
  class NSFileAccessIntent extends NSObject {
    static readingIntentWithURLOptions(with_: NSURL, options: NSFileCoordinator.ReadingOptions): NSFileAccessIntent;
    static writingIntentWithURLOptions(with_: NSURL, options: NSFileCoordinator.WritingOptions): NSFileAccessIntent;
    URL: NSURL; // property
  }

  // interface
  class NSFileCoordinator extends NSObject {
    static addFilePresenter(_: NSFilePresenter): void;
    static removeFilePresenter(_: NSFilePresenter): void;
    purposeIdentifier: string;
    setPurposeIdentifier(_: string) // property
    static filePresenters: NSFilePresenter[]; // property
    cancel(): void;
    coordinateWithWithQueueByAccessor(with_: NSFileAccessIntent[], queue: OperationQueue, byAccessor?: (p1: NSError) => void): void;
    coordinateWithReadingItemAtOptionsErrorByAccessor(readingItemAt: NSURL, options: NSFileCoordinator.ReadingOptions, error?: Error, byAccessor?: (p1: NSURL) => void): void;
    coordinateWithReadingItemAtOptionsWritingItemAtOptionsErrorByAccessor(readingItemAt: NSURL, options: NSFileCoordinator.ReadingOptions, writingItemAt: NSURL, options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: NSURL, p2: NSURL) => void): void;
    coordinateWithWritingItemAtOptionsErrorByAccessor(writingItemAt: NSURL, options: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: NSURL) => void): void;
    coordinateWithWritingItemAtOptionsWritingItemAtOptionsErrorByAccessor(writingItemAt: NSURL, options: NSFileCoordinator.WritingOptions, writingItemAt2: NSURL, options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: NSURL, p2: NSURL) => void): void;
    static createWithFilePresenter(filePresenter?: NSFilePresenter): NSFileCoordinator;
    itemWithAtDidChangeUbiquityAttributes(at: NSURL, didChangeUbiquityAttributes: NSSet<string>): void;
    itemAtURLDidMoveToURL(at: NSURL, didMoveTo: NSURL): void;
    itemAtURLWillMoveToURL(at: NSURL, willMoveTo: NSURL): void;
    prepareWithForReadingItemsAtOptionsWritingItemsAtOptionsErrorByAccessor(forReadingItemsAt: NSURL[], options: NSFileCoordinator.ReadingOptions, writingItemsAt: NSURL[], options2: NSFileCoordinator.WritingOptions, error?: Error, byAccessor?: (p1: () => void) => void): void;
  }

  // interface
  class FileHandle extends NSObject /* implements NSSecureCoding */ {
    static fileHandleForReadingFromURLError(error: NSURL): FileHandle;
    static fileHandleForUpdatingURLError(error: NSURL): FileHandle;
    static fileHandleForWritingToURLError(error: NSURL): FileHandle;
    availableData: NSData; // property
    fileDescriptor: number; // property
    offsetInFile: number; // property
    readabilityHandler: (p1: FileHandle) => void;
    setReadabilityHandler(_: (p1: FileHandle) => void) // property
    writeabilityHandler: (p1: FileHandle) => void;
    setWriteabilityHandler(_: (p1: FileHandle) => void) // property
    static fileHandleWithNullDevice: FileHandle; // property
    static fileHandleWithStandardError: FileHandle; // property
    static fileHandleWithStandardInput: FileHandle; // property
    static fileHandleWithStandardOutput: FileHandle; // property
    acceptConnectionInBackgroundAndNotify(): void;
    acceptConnectionInBackgroundAndNotifyForModes(_?: string[]): void;
    closeAndReturnError(): boolean;
    closeFile(): void;
    getOffsetError(error: number): boolean;
    static createWithFileDescriptor(fileDescriptor: number): FileHandle;
    static createWithFileDescriptorCloseOnDealloc(fileDescriptor: number, closeOnDealloc: boolean): FileHandle;
    readDataOfLength(_: number): NSData;
    readDataToEndOfFile(): NSData;
    readDataToEndOfFileAndReturnError(): NSData;
    readDataUpToLengthError(error: number): NSData;
    readInBackgroundAndNotify(): void;
    readInBackgroundAndNotifyForModes(_?: string[]): void;
    readToEndOfFileInBackgroundAndNotify(): void;
    readToEndOfFileInBackgroundAndNotifyForModes(_?: string[]): void;
    seekToEndOfFile(): number;
    seekToEndReturningOffsetError(error?: number): boolean;
    seekToFileOffset(_: number): void;
    seekToOffsetError(error: number): boolean;
    synchronizeAndReturnError(): boolean;
    synchronizeFile(): void;
    truncateAtOffsetError(error: number): boolean;
    truncateFileAtOffset(_: number): void;
    waitForDataInBackgroundAndNotify(): void;
    waitForDataInBackgroundAndNotifyForModes(_?: string[]): void;
    writeData(_: NSData): void;
    writeDataError(error: NSData): boolean;
  }

  // interface
  class FileManager extends NSObject {
    currentDirectoryPath: string; // property
    delegate: FileManagerDelegate;
    setDelegate(_: FileManagerDelegate) // property
    homeDirectoryForCurrentUser: NSURL; // property
    temporaryDirectory: NSURL; // property
    ubiquityIdentityToken: any; // property
    static defaultManager: FileManager; // property
    URLForDirectoryInDomainAppropriateForURLCreateError(for_: FileManager.SearchPathDirectory, in_: FileManager.SearchPathDomainMask, appropriateFor?: NSURL, create?: boolean): NSURL;
    URLForPublishingUbiquitousItemAtURLExpirationDateError(forPublishingUbiquitousItemAt: NSURL, expiration?: Date): NSURL;
    URLForUbiquityContainerIdentifier(forUbiquityContainerIdentifier?: string): NSURL;
    URLsForDirectoryInDomains(for_: FileManager.SearchPathDirectory, in_: FileManager.SearchPathDomainMask): NSURL[];
    attributesOfFileSystemForPathError(error: string): Map<string, any>;
    attributesOfItemAtPathError(error: string): Map<string, any>;
    changeCurrentDirectoryPath(_: string): boolean;
    componentsToDisplayForPath(_: string): string[];
    containerURLForSecurityApplicationGroupIdentifier(forSecurityApplicationGroupIdentifier: string): NSURL;
    contentsAtPath(_: string): NSData;
    contentsEqualAtPathAndPath(_: string, andPath: string): boolean;
    contentsOfDirectoryAtPathError(error: string): string[];
    contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(includingPropertiesForKeys: NSURL, options?: string[], error?: FileManager.DirectoryEnumerationOptions): NSURL[];
    copyItemAtPathToPathError(toPath: string, error: string): boolean;
    copyItemAtURLToURLError(toURL: NSURL, error: NSURL): boolean;
    createDirectoryAtPathWithIntermediateDirectoriesAttributesError(withIntermediateDirectories: string, attributes: boolean, error?: Map<string, any>): boolean;
    createDirectoryAtURLWithIntermediateDirectoriesAttributesError(withIntermediateDirectories: NSURL, attributes: boolean, error?: Map<string, any>): boolean;
    createFileAtPathContentsAttributes(_: string, contents?: NSData, attributes?: Map<string, any>): boolean;
    createSymbolicLinkAtPathWithDestinationPathError(withDestinationPath: string, error: string): boolean;
    createSymbolicLinkAtURLWithDestinationURLError(withDestinationURL: NSURL, error: NSURL): boolean;
    destinationOfSymbolicLinkAtPathError(error: string): string;
    displayNameAtPath(_: string): string;
    enumeratorAtPath(_: string): DirectoryEnumerator<string>;
    enumeratorAtURLWithIncludingPropertiesForKeysOptionsErrorHandler(_: NSURL, includingPropertiesForKeys?: string[], options?: FileManager.DirectoryEnumerationOptions, errorHandler?: (p1: NSURL, p2: NSError) => boolean): DirectoryEnumerator<NSURL>;
    evictUbiquitousItemAtURLError(error: NSURL): boolean;
    fileExistsAtPath(_: string): boolean;
    fileExistsAtPathIsDirectory(_: string, isDirectory?: boolean): boolean;
    fileSystemRepresentationWithPath(_: string): string;
    getFileProviderServicesForItemAtURLWithCompletionHandler(_: NSURL, completionHandler?: (p1: Map<string, NSFileProviderService>, p2: NSError) => void): void;
    getRelationshipOfDirectoryInDomainToItemAtURLError(ofDirectory: FileManager.URLRelationship, inDomain: FileManager.SearchPathDirectory, toItemAtURL: FileManager.SearchPathDomainMask, error: NSURL): boolean;
    getRelationshipOfDirectoryAtURLToItemAtURLError(ofDirectoryAtURL: FileManager.URLRelationship, toItemAtURL: NSURL, error: NSURL): boolean;
    homeDirectoryForUser(_: string): NSURL;
    isDeletableFileAtPath(_: string): boolean;
    isExecutableFileAtPath(_: string): boolean;
    isReadableFileAtPath(_: string): boolean;
    isUbiquitousItemAtURL(_: NSURL): boolean;
    isWritableFileAtPath(_: string): boolean;
    linkItemAtPathToPathError(toPath: string, error: string): boolean;
    linkItemAtURLToURLError(toURL: NSURL, error: NSURL): boolean;
    mountedVolumeURLsIncludingResourceValuesForKeysOptions(includingResourceValuesForKeys?: string[], options?: FileManager.VolumeEnumerationOptions): NSURL[];
    moveItemAtPathToPathError(toPath: string, error: string): boolean;
    moveItemAtURLToURLError(toURL: NSURL, error: NSURL): boolean;
    removeItemAtPathError(error: string): boolean;
    removeItemAtURLError(error: NSURL): boolean;
    replaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError(withItemAtURL: NSURL, backupItemName: NSURL, options?: string, resultingItemURL?: FileManager.ItemReplacementOptions, error?: NSURL): boolean;
    setAttributesOfItemAtPathError(ofItemAtPath: Map<string, any>, error: string): boolean;
    setUbiquitousItemAtURLDestinationURLError(itemAtURL: boolean, destinationURL: NSURL, error: NSURL): boolean;
    startDownloadingUbiquitousItemAtURLError(error: NSURL): boolean;
    stringWithFileSystemRepresentationLength(_: string, length: number): string;
    subpathsAtPath(_: string): string[];
    subpathsOfDirectoryAtPathError(error: string): string[];
    trashItemAtURLResultingItemURLError(resultingItemURL: NSURL, error?: NSURL): boolean;
    unmountVolumeAtURLWithOptionsCompletionHandler(_: NSURL, options: FileManager.UnmountOptions, completionHandler?: (p1: NSError) => void): void;
  }

  interface FileManagerDelegate extends NSObject {
    // instance method
    fileManagerShouldCopyItemAtPathToPath?(_: FileManager, shouldCopyItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldCopyItemAtURLToURL?(_: FileManager, shouldCopyItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldLinkItemAtPathToPath?(_: FileManager, shouldLinkItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldLinkItemAtURLToURL?(_: FileManager, shouldLinkItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldMoveItemAtPathToPath?(_: FileManager, shouldMoveItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldMoveItemAtURLToURL?(_: FileManager, shouldMoveItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorCopyingItemAtPathToPath?(_: FileManager, shouldProceedAfterError: NSError, copyingItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorCopyingItemAtURLToURL?(_: FileManager, shouldProceedAfterError: NSError, copyingItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorLinkingItemAtPathToPath?(_: FileManager, shouldProceedAfterError: NSError, linkingItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorLinkingItemAtURLToURL?(_: FileManager, shouldProceedAfterError: NSError, linkingItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorMovingItemAtPathToPath?(_: FileManager, shouldProceedAfterError: NSError, movingItemAtPath: string, toPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorMovingItemAtURLToURL?(_: FileManager, shouldProceedAfterError: NSError, movingItemAtURL: NSURL, toURL: NSURL): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorRemovingItemAtPath?(_: FileManager, shouldProceedAfterError: NSError, removingItemAtPath: string): boolean;
    // instance method
    fileManagerShouldProceedAfterErrorRemovingItemAtURL?(_: FileManager, shouldProceedAfterError: NSError, removingItemAtURL: NSURL): boolean;
    // instance method
    fileManagerShouldRemoveItemAtPath?(_: FileManager, shouldRemoveItemAtPath: string): boolean;
    // instance method
    fileManagerShouldRemoveItemAtURL?(_: FileManager, shouldRemoveItemAtURL: NSURL): boolean;
  }

  interface NSFilePresenter extends NSObject {
    observedPresentedItemUbiquityAttributes?: NSSet<string>; // property
    presentedItemOperationQueue: OperationQueue; // property
    presentedItemURL: NSURL; // property
    primaryPresentedItemURL?: NSURL; // property
    // instance method
    accommodatePresentedItemDeletionWithCompletionHandler?(completionHandler?: (p1: NSError) => void): void;
    // instance method
    accommodatePresentedSubitemDeletionWithAtCompletionHandler?(at: NSURL, completionHandler?: (p1: NSError) => void): void;
    // instance method
    presentedItemDidChange?(): void;
    // instance method
    presentedItemDidChangeUbiquityAttributes?(_: NSSet<string>): void;
    // instance method
    presentedItemDidGainVersion?(_: NSFileVersion): void;
    // instance method
    presentedItemDidLoseVersion?(_: NSFileVersion): void;
    // instance method
    presentedItemDidMoveToURL?(to: NSURL): void;
    // instance method
    presentedItemDidResolveConflictVersion?(_: NSFileVersion): void;
    // instance method
    presentedSubitemAtURLDidMoveToURL?(at: NSURL, didMoveTo: NSURL): void;
    // instance method
    presentedSubitemAtURLDidGainVersion?(at: NSURL, didGain: NSFileVersion): void;
    // instance method
    presentedSubitemAtURLDidLoseVersion?(at: NSURL, didLose: NSFileVersion): void;
    // instance method
    presentedSubitemAtURLDidResolveConflictVersion?(at: NSURL, didResolve: NSFileVersion): void;
    // instance method
    presentedSubitemDidAppearAtURL?(at: NSURL): void;
    // instance method
    presentedSubitemDidChangeAtURL?(at: NSURL): void;
    // instance method
    relinquishPresentedItemWithToReader?(toReader?: (p1: () => void) => void): void;
    // instance method
    relinquishPresentedItemWithToWriter?(toWriter?: (p1: () => void) => void): void;
    // instance method
    savePresentedItemChangesWithCompletionHandler?(completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class NSFileProviderService extends NSObject {
    name: string; // property
    getFileProviderConnectionWithCompletionHandler(completionHandler?: (p1: NSXPCConnection, p2: NSError) => void): void;
  }

  // interface
  class NSFileSecurity extends NSObject /* implements NSCopying, NSSecureCoding */ {
  }

  // export declare function NSFileTypeForHFSTypeCode(hfsFileTypeCode: number): string;

  // interface
  class NSFileVersion extends NSObject {
    static addVersionOfItemAtURLWithContentsOfURLOptionsError(withContentsOfURL: NSURL, options: NSURL, error: NSFileVersion.AddingOptions): NSFileVersion;
    static currentVersionOfItemAtURL(at: NSURL): NSFileVersion;
    static getNonlocalVersionsOfItemWithAtCompletionHandler(at: NSURL, completionHandler?: (p1: NSFileVersion[], p2: NSError) => void): void;
    static otherVersionsOfItemAtURL(at: NSURL): NSFileVersion[];
    static removeOtherVersionsOfItemAtURLError(error: NSURL): boolean;
    static temporaryDirectoryURLForNewVersionOfItemAtURL(at: NSURL): NSURL;
    static unresolvedConflictVersionsOfItemAtURL(at: NSURL): NSFileVersion[];
    URL: NSURL; // property
    isConflict: boolean; // property
    isDiscardable: boolean;
    setDiscardable(_: boolean) // property
    hasLocalContents: boolean; // property
    hasThumbnail: boolean; // property
    localizedName: string; // property
    localizedNameOfSavingComputer: string; // property
    modificationDate: Date; // property
    originatorNameComponents: NSPersonNameComponents; // property
    persistentIdentifier: NSCoding; // property
    isResolved: boolean;
    setResolved(_: boolean) // property
    removeAndReturnError(): boolean;
    replaceItemAtURLOptionsError(options: NSURL, error: NSFileVersion.ReplacingOptions): NSURL;
  }

  // interface
  class FileWrapper extends NSObject /* implements NSSecureCoding */ {
    isDirectory: boolean; // property
    fileAttributes: Map<string, any>;
    setFileAttributes(_: Map<string, any>) // property
    fileWrappers: Map<string, FileWrapper>; // property
    filename: string;
    setFilename(_: string) // property
    icon: NSImage;
    setIcon(_: NSImage) // property
    preferredFilename: string;
    setPreferredFilename(_: string) // property
    isRegularFile: boolean; // property
    regularFileContents: NSData; // property
    serializedRepresentation: NSData; // property
    isSymbolicLink: boolean; // property
    symbolicLinkDestinationURL: NSURL; // property
    addFileWrapper(_: FileWrapper): string;
    addRegularFileWithContentsPreferredFilename(_: NSData, preferredFilename: string): string;
    static createWithDirectoryWithFileWrappers(directoryWithFileWrappers: Map<string, FileWrapper>): FileWrapper;
    static createWithRegularFileWithContents(regularFileWithContents: NSData): FileWrapper;
    static createWithSymbolicLinkWithDestinationURL(symbolicLinkWithDestinationURL: NSURL): FileWrapper;
    static createWithSerializedRepresentation(serializedRepresentation: NSData): FileWrapper;
    static createWithUrlOptions(URL: NSURL, options: FileWrapper.ReadingOptions): FileWrapper;
    keyForFileWrapper(_: FileWrapper): string;
    matchesContentsOfURL(_: NSURL): boolean;
    readFromURLOptionsError(options: NSURL, error: FileWrapper.ReadingOptions): boolean;
    removeFileWrapper(_: FileWrapper): void;
    writeToURLOptionsOriginalContentsURLError(options: NSURL, originalContentsURL: FileWrapper.WritingOptions, error?: NSURL): boolean;
  }

  // interface
  class Formatter extends NSObject /* implements NSCoding, NSCopying */ {
    attributedStringForObjectValueWithDefaultAttributes(_: any, withDefaultAttributes?: Map<string, any>): NSAttributedString;
    editingStringForObjectValue(_: any): string;
    getObjectValueForStringErrorDescription(_?: any, forString?: string, errorDescription?: string): boolean;
    isPartialStringValidNewEditingStringErrorDescription(_: string, newEditingString?: string, errorDescription?: string): boolean;
    isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(_: string, proposedSelectedRange?: NSRange, originalString?: string, originalSelectedRange?: NSRange, errorDescription?: string): boolean;
    stringForObjectValue(_?: any): string;
  }

  // export declare function NSFrameAddress(frame: number): any;

  // export declare function NSFreeHashTable(table: NSHashTable<any>): void;

  // export declare function NSFreeMapTable(table: NSMapTable<any, any>): void;

  // export declare function NSFullUserName(): string;

  // interface
  class NSGetCommand extends NSScriptCommand {
  }

  // export declare function NSGetSizeAndAlignment(typePtr: string | any, sizep: number, alignp: number): string;

  // export declare function NSGetUncaughtExceptionHandler(): (p1: NSException) => void;

  // export declare function NSHFSTypeCodeFromFileType(fileTypeString: string): number;

  // export declare function NSHFSTypeOfFile(fullFilePath: string): string;

  // interface
  class HTTPCookie extends NSObject {
    static cookiesWithResponseHeaderFieldsForURL(_: Map<string, string>, forURL: NSURL): HTTPCookie[];
    static requestHeaderFieldsWithCookies(_: HTTPCookie[]): Map<string, string>;
    isHTTPOnly: boolean; // property
    comment: string; // property
    commentURL: NSURL; // property
    domain: string; // property
    expiresDate: Date; // property
    name: string; // property
    path: string; // property
    portList: number[]; // property
    properties: Map<string, any>; // property
    sameSitePolicy: string; // property
    isSecure: boolean; // property
    isSessionOnly: boolean; // property
    value: string; // property
    static createWithProperties(properties: Map<string, any>): HTTPCookie;
  }

  // interface
  class HTTPCookieStorage extends NSObject {
    static sharedCookieStorageForGroupContainerIdentifier(_: string): HTTPCookieStorage;
    cookieAcceptPolicy: HTTPCookie.AcceptPolicy;
    setCookieAcceptPolicy(_: HTTPCookie.AcceptPolicy) // property
    cookies: HTTPCookie[]; // property
    static sharedHTTPCookieStorage: HTTPCookieStorage; // property
    cookiesForURL(_: NSURL): HTTPCookie[];
    deleteCookie(_: HTTPCookie): void;
    getCookiesForTaskWithCompletionHandler(_: URLSessionTask, completionHandler?: (p1: HTTPCookie[]) => void): void;
    removeCookiesSinceDate(_: Date): void;
    setCookie(_: HTTPCookie): void;
    setCookiesForURLMainDocumentURL(_: HTTPCookie[], forURL?: NSURL, mainDocumentURL?: NSURL): void;
    sortedCookiesUsingDescriptors(_: NSSortDescriptor[]): HTTPCookie[];
    storeCookiesForTask(_: HTTPCookie[], forTask: URLSessionTask): void;
  }

  // interface
  class HTTPURLResponse extends URLResponse {
    static localizedStringForStatusCode(_: number): string;
    allHeaderFields: Map<any, any>; // property
    statusCode: number; // property
    static createWithUrlStatusCodeHTTPVersionHeaderFields(URL: NSURL, statusCode: number, HTTPVersion?: string, headerFields?: Map<string, string>): HTTPURLResponse;
    valueForHTTPHeaderField(_: string): string;
  }

  // export declare function NSHashGet(table: NSHashTable<any>, pointer: any): any;

  // export declare function NSHashInsert(table: NSHashTable<any>, pointer: any): void;

  // export declare function NSHashInsertIfAbsent(table: NSHashTable<any>, pointer: any): any;

  // export declare function NSHashInsertKnownAbsent(table: NSHashTable<any>, pointer: any): void;

  // export declare function NSHashRemove(table: NSHashTable<any>, pointer: any): void;

  // interface
  class NSHashTable<ObjectType> extends NSObject /* implements NSCopying, NSFastEnumeration, NSSecureCoding */ {
    static weakObjectsHashTable<ObjectType>(): NSHashTable<ObjectType>;
    allObjects: ObjectType[]; // property
    anyObject: ObjectType; // property
    count: number; // property
    pointerFunctions: NSPointerFunctions; // property
    setRepresentation: NSSet<ObjectType>; // property
    addObject(_?: ObjectType): void;
    containsObject(_?: ObjectType): boolean;
    intersect(_: NSHashTable<ObjectType>): void;
    intersects(_: NSHashTable<ObjectType>): boolean;
    isEqualWithTo(to: NSHashTable<ObjectType>): boolean;
    isSubsetOf(of: NSHashTable<ObjectType>): boolean;
    member(_?: ObjectType): ObjectType;
    minus(_: NSHashTable<ObjectType>): void;
    objectEnumerator(): NSEnumerator<ObjectType>;
    removeAllObjects(): void;
    removeObject(_?: ObjectType): void;
    union(_: NSHashTable<ObjectType>): void;
  }

  // struct
  interface NSHashTableCallBacks {
    hash: (p1: NSHashTable<any>, p2: any) => number;
    isEqual: (p1: NSHashTable<any>, p2: any, p3: any) => boolean;
    retain: (p1: NSHashTable<any>, p2: any) => void;
    release: (p1: NSHashTable<any>, p2: any) => void;
    describe: (p1: NSHashTable<any>, p2: any) => string;
  }

  // export declare function NSHomeDirectory(): string;

  // export declare function NSHomeDirectoryForUser(userName: string): string;

  // interface
  class Host extends NSObject {
    static currentHost(): Host;
    address: string; // property
    addresses: string[]; // property
    localizedName: string; // property
    name: string; // property
    names: string[]; // property
    isEqualToHost(_: Host): boolean;
  }

  // interface
  class ISO8601DateFormatter extends Formatter /* implements NSSecureCoding */ {
    static stringFromDateTimeZoneFormatOptions(_: Date, timeZone: NSTimeZone, formatOptions: ISO8601DateFormatter.Options): string;
    formatOptions: ISO8601DateFormatter.Options;
    setFormatOptions(_: ISO8601DateFormatter.Options) // property
    timeZone: NSTimeZone;
    setTimeZone(_: NSTimeZone) // property
    dateFromString(_: string): Date;
    stringFromDate(_: Date): string;
  }

  // export declare function NSIncrementExtraRefCount(object_: any): void;

  // interface
  class NSIndexPath extends NSObject /* implements NSCopying, NSSecureCoding */ {
    item: number; // property
    length: number; // property
    section: number; // property
    compare(_: NSIndexPath): ComparisonResult;
    getIndexes(_: number): void;
    getIndexesRange(_: number, range: NSRange): void;
    indexAtPosition(atPosition: number): number;
    indexPathByAddingIndex(_: number): NSIndexPath;
    indexPathByRemovingLastIndex(): NSIndexPath;
    static createWithIndex(index: number): NSIndexPath;
    static createWithIndexesLength(indexes?: number, length?: number): NSIndexPath;
  }

  // interface
  class NSIndexSet extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding */ {
    count: number; // property
    firstIndex: number; // property
    lastIndex: number; // property
    containsIndex(_: number): boolean;
    containsIndexes(_: NSIndexSet): boolean;
    containsIndexesInRange(in_: NSRange): boolean;
    countOfIndexesInRange(in_: NSRange): number;
    enumerateWithInOptionsUsing(in_: NSRange, options: NSEnumerationOptions, using: (p1: number, p2: boolean) => void): void;
    enumerate(_: (p1: number, p2: boolean) => void): void;
    enumerateWithOptionsUsing(options: NSEnumerationOptions, using: (p1: number, p2: boolean) => void): void;
    enumerateRangesWithInOptionsUsing(in_: NSRange, options: NSEnumerationOptions, using: (p1: NSRange, p2: boolean) => void): void;
    enumerateRanges(_: (p1: NSRange, p2: boolean) => void): void;
    enumerateRangesWithOptionsUsing(options: NSEnumerationOptions, using: (p1: NSRange, p2: boolean) => void): void;
    getIndexesMaxCountInIndexRange(_: number, maxCount: number, inIndexRange?: NSRange): number;
    indexGreaterThanIndex(_: number): number;
    indexGreaterThanOrEqualToIndex(to: number): number;
    indexWithInOptionsPassingTest(in_: NSRange, options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): number;
    indexLessThanIndex(_: number): number;
    indexLessThanOrEqualToIndex(to: number): number;
    indexWithPassingTest(passingTest: (p1: number, p2: boolean) => boolean): number;
    indexWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): number;
    indexesWithInOptionsPassingTest(in_: NSRange, options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): NSIndexSet;
    indexesWithPassingTest(passingTest: (p1: number, p2: boolean) => boolean): NSIndexSet;
    indexesWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: number, p2: boolean) => boolean): NSIndexSet;
    static createWithIndex(index: number): NSIndexSet;
    static createWithIndexSet(indexSet: NSIndexSet): NSIndexSet;
    static createWithIndexesInRange(indexesInRange: NSRange): NSIndexSet;
    intersectsIndexesInRange(in_: NSRange): boolean;
    isEqualToIndexSet(to: NSIndexSet): boolean;
  }

  // interface
  class NSIndexSpecifier extends NSScriptObjectSpecifier {
    index: number;
    setIndex(_: number) // property
    static createWithContainerClassDescriptionContainerSpecifierKeyIndex(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, index?: number): NSIndexSpecifier;
  }

  // interface
  class InputStream extends Stream {
    static inputStreamWithData(_: NSData): InputStream;
    static inputStreamWithFileAtPath(_: string): InputStream;
    static inputStreamWithURL(_: NSURL): InputStream;
    hasBytesAvailable: boolean; // property
    getBufferLength(_?: string, length?: number): boolean;
    static createWithData(data: NSData): InputStream;
    static createWithFileAtPath(fileAtPath: string): InputStream;
    static createWithUrl(URL: NSURL): InputStream;
    readMaxLength(_: string, maxLength: number): number;
  }

  // export declare function NSInsetRect(aRect: CGRect, dX: number, dY: number): CGRect;

  // export declare function NSIntegralRect(aRect: CGRect): CGRect;

  // export declare function NSIntegralRectWithOptions(aRect: CGRect, opts: AlignmentOptions): CGRect;

  // export declare function NSIntersectionRange(range1: NSRange, range2: NSRange): NSRange;

  // export declare function NSIntersectionRect(aRect: CGRect, bRect: CGRect): CGRect;

  // export declare function NSIntersectsRect(aRect: CGRect, bRect: CGRect): boolean;

  // export declare function NSIsEmptyRect(aRect: CGRect): boolean;

  // export declare function NSIsFreedObject(anObject: any): boolean;

  // interface
  class NSItemProvider extends NSObject /* implements NSCopying */ {
    containerFrame: CGRect; // property
    preferredPresentationSize: CGSize; // property
    previewImageHandler: (p1: (p1: NSSecureCoding, p2: NSError) => void, p2: typeof NSObject, p3: Map<any, any>) => void;
    setPreviewImageHandler(_: (p1: (p1: NSSecureCoding, p2: NSError) => void, p2: typeof NSObject, p3: Map<any, any>) => void) // property
    registeredTypeIdentifiers: string[]; // property
    sourceFrame: CGRect; // property
    suggestedName: string;
    setSuggestedName(_: string) // property
    canLoadObjectOfClass(ofClass: typeof NSObject): boolean;
    hasItemConformingToTypeIdentifier(_: string): boolean;
    hasRepresentationConformingToTypeIdentifierFileOptions(toTypeIdentifier: string, fileOptions: NSItemProviderFileOptions): boolean;
    static createWithContentsOfURL(contentsOfURL: NSURL): NSItemProvider;
    static createWithItemTypeIdentifier(item?: NSSecureCoding, typeIdentifier?: string): NSItemProvider;
    static createWithObject(object_: NSItemProviderWriting): NSItemProvider;
    loadDataRepresentationWithForTypeIdentifierCompletionHandler(forTypeIdentifier: string, completionHandler?: (p1: NSData, p2: NSError) => void): Progress;
    loadFileRepresentationWithForTypeIdentifierCompletionHandler(forTypeIdentifier: string, completionHandler?: (p1: NSURL, p2: NSError) => void): Progress;
    loadInPlaceFileRepresentationWithForTypeIdentifierCompletionHandler(forTypeIdentifier: string, completionHandler?: (p1: NSURL, p2: boolean, p3: NSError) => void): Progress;
    loadItemWithForTypeIdentifierOptionsCompletionHandler(forTypeIdentifier: string, options?: Map<any, any>, completionHandler?: (p1: NSSecureCoding, p2: NSError) => void): void;
    loadObjectWithOfClassCompletionHandler(ofClass: typeof NSObject, completionHandler?: (p1: NSItemProviderReading, p2: NSError) => void): Progress;
    loadPreviewImageWithOptionsCompletionHandler(options: Map<any, any>, completionHandler: (p1: NSSecureCoding, p2: NSError) => void): void;
    registerCloudKitShareContainer(_: CKShare, container: CKContainer): void;
    registerCloudKitShareWithPreparationHandler(preparationHandler?: (p1: (p1: CKShare, p2: CKContainer, p3: NSError) => void) => void): void;
    registerDataRepresentationWithForTypeIdentifierVisibilityLoadHandler(forTypeIdentifier: string, visibility: NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: NSData, p2: NSError) => void) => Progress): void;
    registerFileRepresentationWithForTypeIdentifierFileOptionsVisibilityLoadHandler(forTypeIdentifier: string, fileOptions: NSItemProviderFileOptions, visibility: NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: NSURL, p2: boolean, p3: NSError) => void) => Progress): void;
    registerItemWithForTypeIdentifierLoadHandler(forTypeIdentifier: string, loadHandler: (p1: (p1: NSSecureCoding, p2: NSError) => void, p2: typeof NSObject, p3: Map<any, any>) => void): void;
    registerObjectVisibility(_: NSItemProviderWriting, visibility: NSItemProviderRepresentationVisibility): void;
    registerObjectWithOfClassVisibilityLoadHandler(ofClass: typeof NSObject, visibility: NSItemProviderRepresentationVisibility, loadHandler?: (p1: (p1: NSItemProviderWriting, p2: NSError) => void) => Progress): void;
    registeredTypeIdentifiersWithFileOptions(fileOptions: NSItemProviderFileOptions): string[];
  }

  interface NSItemProviderReading extends NSObject {
  }

  interface NSItemProviderWriting extends NSObject {
    writableTypeIdentifiersForItemProvider?: string[]; // property
    // instance method
    itemProviderVisibilityForRepresentationWithTypeIdentifier?(withTypeIdentifier: string): NSItemProviderRepresentationVisibility;
    // instance method
    loadDataWithWithTypeIdentifierForItemProviderCompletionHandler(withTypeIdentifier: string, forItemProviderCompletionHandler?: (p1: NSData, p2: NSError) => void): Progress;
  }

  // interface
  class JSONSerialization extends NSObject {
    static JSONObjectWithDataOptionsError(options: NSData, error: JSONSerialization.ReadingOptions): any;
    static JSONObjectWithStreamOptionsError(options: InputStream, error: JSONSerialization.ReadingOptions): any;
    static dataWithJSONObjectOptionsError(options: any, error: JSONSerialization.WritingOptions): NSData;
    static isValidJSONObject(_: any): boolean;
    static writeJSONObjectToStreamOptionsError(toStream: any, options: OutputStream, error: JSONSerialization.WritingOptions): number;
  }

  // interface
  class NSKeyedArchiver extends NSCoder {
    static archivedDataWithRootObjectRequiringSecureCodingError(requiringSecureCoding: any, error: boolean): NSData;
    static classNameForClass(for_: typeof NSObject): string;
    static setClassNameForClass(_?: string, for_?: typeof NSObject): void;
    delegate: NSKeyedArchiverDelegate;
    setDelegate(_: NSKeyedArchiverDelegate) // property
    encodedData: NSData; // property
    outputFormat: PropertyListSerialization.PropertyListFormat;
    setOutputFormat(_: PropertyListSerialization.PropertyListFormat) // property
    classNameForClass(for_: typeof NSObject): string;
    finishEncoding(): void;
    static createWithRequiringSecureCoding(requiringSecureCoding: boolean): NSKeyedArchiver;
    setClassNameForClass(_?: string, for_?: typeof NSObject): void;
  }

  interface NSKeyedArchiverDelegate extends NSObject {
    // instance method
    archiverWillEncodeObject?(_: NSKeyedArchiver, willEncode: any): any;
    // instance method
    archiverDidEncodeObject?(_: NSKeyedArchiver, didEncode?: any): void;
    // instance method
    archiverWillReplaceObjectWithObject?(_: NSKeyedArchiver, willReplace?: any, with_?: any): void;
    // instance method
    archiverDidFinish?(_: NSKeyedArchiver): void;
    // instance method
    archiverWillFinish?(_: NSKeyedArchiver): void;
  }

  // interface
  class NSKeyedUnarchiver extends NSCoder {
    static classForClassName(forClassName: string): typeof NSObject;
    static setClassForClassName(_?: typeof NSObject, forClassName?: string): void;
    static unarchivedObjectOfClassFromDataError(fromData: typeof NSObject, error: NSData): any;
    static unarchivedObjectOfClassesWithFromDataError(fromData: NSSet<typeof NSObject>, error: NSData): any;
    delegate: NSKeyedUnarchiverDelegate;
    setDelegate(_: NSKeyedUnarchiverDelegate) // property
    classForClassName(forClassName: string): typeof NSObject;
    finishDecoding(): void;
    static createWithForReadingFromData(forReadingFromData: NSData): NSKeyedUnarchiver;
    setClassForClassName(_?: typeof NSObject, forClassName?: string): void;
  }

  interface NSKeyedUnarchiverDelegate extends NSObject {
    // instance method
    unarchiverDidDecodeObject?(_: NSKeyedUnarchiver, didDecode?: any): any;
    // instance method
    unarchiverWillReplaceObjectWithObject?(_: NSKeyedUnarchiver, willReplace: any, with_: any): void;
    // instance method
    unarchiverCannotDecodeObjectOfClassNameOriginalClasses?(_: NSKeyedUnarchiver, cannotDecodeObjectOfClassName: string, originalClasses: string[]): typeof NSObject;
    // instance method
    unarchiverDidFinish?(_: NSKeyedUnarchiver): void;
    // instance method
    unarchiverWillFinish?(_: NSKeyedUnarchiver): void;
  }

  // interface
  class LengthFormatter extends Formatter {
    isForPersonHeightUse: boolean;
    setForPersonHeightUse(_: boolean) // property
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter) // property
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle) // property
    stringFromMeters(_: number): string;
    stringFromValueUnit(_: number, unit: LengthFormatter.Unit): string;
    unitStringFromMetersUsedUnit(_: number, usedUnit?: LengthFormatter.Unit): string;
    unitStringFromValueUnit(_: number, unit: LengthFormatter.Unit): string;
  }

  // interface
  class NSLinguisticTagger extends NSObject {
    static availableTagSchemesForLanguage(forLanguage: string): string[];
    static availableTagSchemesForUnitLanguage(for_: NSLinguisticTaggerUnit, language: string): string[];
    static dominantLanguageForString(for_: string): string;
    static enumerateTagsForRangeUnitSchemeOptionsOrthographyUsing(for_: string, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, using?: (p1: string, p2: NSRange, p3: boolean) => void): void;
    static tagForStringAtIndexUnitSchemeOrthographyTokenRange(for_: string, at: number, unit: NSLinguisticTaggerUnit, scheme: string, orthography?: NSOrthography, tokenRange?: NSRange): string;
    static tagsForStringRangeUnitSchemeOptionsOrthographyTokenRanges(for_: string, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, tokenRanges?: NSValue[]): string[];
    dominantLanguage: string; // property
    string: string;
    setString(_: string) // property
    tagSchemes: string[]; // property
    enumerateTagsWithInSchemeOptionsUsing(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, using?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
    enumerateTagsWithInUnitSchemeOptionsUsing(in_: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, using?: (p1: string, p2: NSRange, p3: boolean) => void): void;
    static createWithTagSchemesOptions(tagSchemes: string[], options: number): NSLinguisticTagger;
    orthographyAtIndexEffectiveRange(at: number, effectiveRange?: NSRange): NSOrthography;
    possibleTagsAtIndexSchemeTokenRangeSentenceRangeScores(at: number, scheme: string, tokenRange?: NSRange, sentenceRange?: NSRange, scores?: NSValue[]): string[];
    sentenceRangeForRange(for_: NSRange): NSRange;
    setOrthographyRange(_?: NSOrthography, range?: NSRange): void;
    stringEditedInRangeChangeInLength(in_: NSRange, changeInLength: number): void;
    tagAtIndexSchemeTokenRangeSentenceRange(at: number, scheme: string, tokenRange?: NSRange, sentenceRange?: NSRange): string;
    tagAtIndexUnitSchemeTokenRange(at: number, unit: NSLinguisticTaggerUnit, scheme: string, tokenRange?: NSRange): string;
    tagsInRangeSchemeOptionsTokenRanges(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, tokenRanges?: NSValue[]): string[];
    tagsInRangeUnitSchemeOptionsTokenRanges(in_: NSRange, unit: NSLinguisticTaggerUnit, scheme: string, options: NSLinguisticTagger.Options, tokenRanges?: NSValue[]): string[];
    tokenRangeAtIndexUnit(at: number, unit: NSLinguisticTaggerUnit): NSRange;
  }

  // interface
  class ListFormatter extends Formatter {
    static localizedStringByJoiningStrings(_: string[]): string;
    itemFormatter: Formatter;
    setItemFormatter(_: Formatter) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    stringFromItems(from: any[]): string;
  }

  // interface
  class NSLocale extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static canonicalLanguageIdentifierFromString(from: string): string;
    static canonicalLocaleIdentifierFromString(from: string): string;
    static characterDirectionForLanguage(forLanguage: string): NSLocale.LanguageDirection;
    static componentsFromLocaleIdentifier(fromLocaleIdentifier: string): Map<string, string>;
    static lineDirectionForLanguage(forLanguage: string): NSLocale.LanguageDirection;
    static localeIdentifierFromComponents(fromComponents: Map<string, string>): string;
    static localeIdentifierFromWindowsLocaleCode(fromWindowsLocaleCode: number): string;
    static windowsLocaleCodeFromLocaleIdentifier(fromLocaleIdentifier: string): number;
    alternateQuotationBeginDelimiter: string; // property
    alternateQuotationEndDelimiter: string; // property
    calendarIdentifier: string; // property
    collationIdentifier: string; // property
    collatorIdentifier: string; // property
    countryCode: string; // property
    currencyCode: string; // property
    currencySymbol: string; // property
    decimalSeparator: string; // property
    exemplarCharacterSet: NSCharacterSet; // property
    groupingSeparator: string; // property
    languageCode: string; // property
    localeIdentifier: string; // property
    quotationBeginDelimiter: string; // property
    quotationEndDelimiter: string; // property
    scriptCode: string; // property
    usesMetricSystem: boolean; // property
    variantCode: string; // property
    static ISOCountryCodes: string[]; // property
    static ISOCurrencyCodes: string[]; // property
    static ISOLanguageCodes: string[]; // property
    static autoupdatingCurrentLocale: NSLocale; // property
    static availableLocaleIdentifiers: string[]; // property
    static commonISOCurrencyCodes: string[]; // property
    static currentLocale: NSLocale; // property
    static preferredLanguages: string[]; // property
    static systemLocale: NSLocale; // property
    displayNameForKeyValue(forKey: string, value: any): string;
    static createWithLocaleIdentifier(localeIdentifier: string): NSLocale;
    localizedStringForCalendarIdentifier(forCalendarIdentifier: string): string;
    localizedStringForCollationIdentifier(forCollationIdentifier: string): string;
    localizedStringForCollatorIdentifier(forCollatorIdentifier: string): string;
    localizedStringForCountryCode(forCountryCode: string): string;
    localizedStringForCurrencyCode(forCurrencyCode: string): string;
    localizedStringForLanguageCode(forLanguageCode: string): string;
    localizedStringForLocaleIdentifier(forLocaleIdentifier: string): string;
    localizedStringForScriptCode(forScriptCode: string): string;
    localizedStringForVariantCode(forVariantCode: string): string;
    objectForKey(forKey: string): any;
  }

  // interface
  class NSLock extends NSObject /* implements NSLocking */ {
    name: string;
    setName(_: string) // property
    lockBeforeDate(before: Date): boolean;
    tryLock(): boolean;
  }

  interface NSLocking {
    // instance method
    lock(): void;
    // instance method
    unlock(): void;
  }

  // export declare function NSLogPageSize(): number;

  // interface
  class NSLogicalTest extends NSScriptWhoseTest {
    static createWithAndTestWithTests(andTestWithTests: NSSpecifierTest[]): NSLogicalTest;
    static createWithNotTestWithTest(notTestWithTest: NSScriptWhoseTest): NSLogicalTest;
    static createWithOrTestWithTests(orTestWithTests: NSSpecifierTest[]): NSLogicalTest;
  }

  // interface
  class NSMachPort extends Port {
    static portWithMachPort(withMachPort: number): Port;
    static portWithMachPortOptions(withMachPort: number, options: NSMachPort.Options): Port;
    machPort: number; // property
    static createWithMachPort(machPort: number): NSMachPort;
    static createWithMachPortOptions(machPort: number, options: NSMachPort.Options): NSMachPort;
  }

  interface NSMachPortDelegate extends PortDelegate {
    // instance method
    handleMachMessage?(_: any): void;
  }

  // export declare function NSMapGet(table: NSMapTable<any, any>, key: any): any;

  // export declare function NSMapInsert(table: NSMapTable<any, any>, key: any, value: any): void;

  // export declare function NSMapInsertIfAbsent(table: NSMapTable<any, any>, key: any, value: any): any;

  // export declare function NSMapInsertKnownAbsent(table: NSMapTable<any, any>, key: any, value: any): void;

  // export declare function NSMapMember(table: NSMapTable<any, any>, key: any, originalKey: any, value: any): boolean;

  // export declare function NSMapRemove(table: NSMapTable<any, any>, key: any): void;

  // interface
  class NSMapTable<KeyType, ObjectType> extends NSObject /* implements NSCopying, NSFastEnumeration, NSSecureCoding */ {
    static strongToStrongObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    static strongToWeakObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    static weakToStrongObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    static weakToWeakObjectsMapTable<KeyType, ObjectType>(): NSMapTable<KeyType, ObjectType>;
    count: number; // property
    keyPointerFunctions: NSPointerFunctions; // property
    valuePointerFunctions: NSPointerFunctions; // property
    dictionaryRepresentation(): Map<KeyType, ObjectType>;
    keyEnumerator(): NSEnumerator<KeyType>;
    objectEnumerator(): NSEnumerator<ObjectType>;
    objectForKey(forKey?: KeyType): ObjectType;
    removeAllObjects(): void;
    removeObjectForKey(forKey?: KeyType): void;
    setObjectForKey(_?: ObjectType, forKey?: KeyType): void;
  }

  // struct
  interface NSMapTableKeyCallBacks {
    hash: (p1: NSMapTable<any, any>, p2: any) => number;
    isEqual: (p1: NSMapTable<any, any>, p2: any, p3: any) => boolean;
    retain: (p1: NSMapTable<any, any>, p2: any) => void;
    release: (p1: NSMapTable<any, any>, p2: any) => void;
    describe: (p1: NSMapTable<any, any>, p2: any) => string;
    notAKeyMarker: any;
  }

  // struct
  interface NSMapTableValueCallBacks {
    retain: (p1: NSMapTable<any, any>, p2: any) => void;
    release: (p1: NSMapTable<any, any>, p2: any) => void;
    describe: (p1: NSMapTable<any, any>, p2: any) => string;
  }

  // interface
  class MassFormatter extends Formatter {
    isForPersonMassUse: boolean;
    setForPersonMassUse(_: boolean) // property
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter) // property
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle) // property
    stringFromKilograms(_: number): string;
    stringFromValueUnit(_: number, unit: MassFormatter.Unit): string;
    unitStringFromKilogramsUsedUnit(_: number, usedUnit?: MassFormatter.Unit): string;
    unitStringFromValueUnit(_: number, unit: MassFormatter.Unit): string;
  }

  // interface
  class NSMeasurement<UnitType> extends NSObject /* implements NSCopying, NSSecureCoding */ {
    doubleValue: number; // property
    unit: UnitType; // property
    canBeConvertedToUnit(to: Unit): boolean;
    adding(_: NSMeasurement<UnitType>): NSMeasurement<UnitType>;
    measurementByConvertingToUnit(to: Unit): NSMeasurement<any>;
    subtracting(_: NSMeasurement<UnitType>): NSMeasurement<UnitType>;
  }

  // interface
  class MeasurementFormatter extends Formatter /* implements NSSecureCoding */ {
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    numberFormatter: NumberFormatter;
    setNumberFormatter(_: NumberFormatter) // property
    unitOptions: MeasurementFormatter.UnitOptions;
    setUnitOptions(_: MeasurementFormatter.UnitOptions) // property
    unitStyle: Formatter.UnitStyle;
    setUnitStyle(_: Formatter.UnitStyle) // property
    stringFromMeasurement(_: NSMeasurement<any>): string;
    stringFromUnit(_: Unit): string;
  }

  // interface
  class MessagePort extends Port {
  }

  // interface
  class NSMetadataItem extends NSObject {
    attributes: string[]; // property
    static createWithUrl(URL: NSURL): NSMetadataItem;
    valueForAttribute(forAttribute: string): any;
    valuesForAttributes(forAttributes: string[]): Map<string, any>;
  }

  // interface
  class NSMetadataQuery extends NSObject {
    delegate: NSMetadataQueryDelegate;
    setDelegate(_: NSMetadataQueryDelegate) // property
    isGathering: boolean; // property
    groupedResults: NSMetadataQueryResultGroup[]; // property
    groupingAttributes: string[];
    setGroupingAttributes(_: string[]) // property
    notificationBatchingInterval: number;
    setNotificationBatchingInterval(_: number) // property
    operationQueue: OperationQueue;
    setOperationQueue(_: OperationQueue) // property
    predicate: NSPredicate;
    setPredicate(_: NSPredicate) // property
    resultCount: number; // property
    results: any[]; // property
    searchItems: any[];
    setSearchItems(_: any[]) // property
    searchScopes: any[];
    setSearchScopes(_: any[]) // property
    sortDescriptors: NSSortDescriptor[];
    setSortDescriptors(_: NSSortDescriptor[]) // property
    isStarted: boolean; // property
    isStopped: boolean; // property
    valueListAttributes: string[];
    setValueListAttributes(_: string[]) // property
    valueLists: Map<string, NSMetadataQueryAttributeValueTuple[]>; // property
    disableUpdates(): void;
    enableUpdates(): void;
    enumerateResults(_: (p1: any, p2: number, p3: boolean) => void): void;
    enumerateResultsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: any, p2: number, p3: boolean) => void): void;
    indexOfResult(ofResult: any): number;
    resultAtIndex(at: number): any;
    startQuery(): boolean;
    stopQuery(): void;
    valueOfAttributeForResultAtIndex(ofAttribute: string, forResultAt: number): any;
  }

  // interface
  class NSMetadataQueryAttributeValueTuple extends NSObject {
    attribute: string; // property
    count: number; // property
    value: any; // property
  }

  interface NSMetadataQueryDelegate extends NSObject {
    // instance method
    metadataQueryReplacementObjectForResultObject?(_: NSMetadataQuery, replacementObjectForResultObject: NSMetadataItem): any;
    // instance method
    metadataQueryReplacementValueForAttributeValue?(_: NSMetadataQuery, replacementValueForAttribute: string, value: any): any;
  }

  // interface
  class NSMetadataQueryResultGroup extends NSObject {
    attribute: string; // property
    resultCount: number; // property
    results: any[]; // property
    subgroups: NSMetadataQueryResultGroup[]; // property
    value: any; // property
    resultAtIndex(at: number): any;
  }

  // interface
  class NSMiddleSpecifier extends NSScriptObjectSpecifier {
  }

  // export declare function NSMouseInRect(aPoint: CGPoint, aRect: CGRect, flipped: boolean): boolean;

  // interface
  class NSMoveCommand extends NSScriptCommand {
    keySpecifier: NSScriptObjectSpecifier; // property
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // interface
  class NSMutableArray<ObjectType> extends NSArray<ObjectType> {
    static arrayWithCapacity<ObjectType>(capacity: number): NSMutableArray<ObjectType>;
    addObject(_: ObjectType): void;
    addObjectsFromArray(from: ObjectType[]): void;
    exchangeObjectAtIndexWithObjectAtIndex(at: number, withObjectAt: number): void;
    filterUsingPredicate(using: NSPredicate): void;
    insertObjectAtIndex(_: ObjectType, at: number): void;
    insertObjectsAtIndexes(_: ObjectType[], at: NSIndexSet): void;
    removeAllObjects(): void;
    removeLastObject(): void;
    removeObject(_: ObjectType): void;
    removeObjectInRange(_: ObjectType, in_: NSRange): void;
    removeObjectAtIndex(at: number): void;
    removeObjectIdenticalTo(identicalTo: ObjectType): void;
    removeObjectIdenticalToInRange(identicalTo: ObjectType, in_: NSRange): void;
    removeObjectsAtIndexes(at: NSIndexSet): void;
    removeObjectsInArray(in_: ObjectType[]): void;
    removeObjectsInRange(in_: NSRange): void;
    replaceObjectAtIndexWithObject(at: number, with_: ObjectType): void;
    replaceObjectsAtIndexesWithObjects(at: NSIndexSet, with_: ObjectType[]): void;
    replaceObjectsInRangeWithObjectsFromArray(in_: NSRange, withObjectsFrom: ObjectType[]): void;
    replaceObjectsInRangeWithObjectsFromArrayRange(in_: NSRange, withObjectsFrom: ObjectType[], range: NSRange): void;
    setArray(_: ObjectType[]): void;
    setObjectAtIndexedSubscript(_: ObjectType, atIndexedSubscript: number): void;
    sortWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): void;
    sortUsingDescriptors(using: NSSortDescriptor[]): void;
    sortContext(_?: (p1: ObjectType, p2: ObjectType, p3: any) => number, context?: any): void;
    sortUsingSelector(using: string): void;
    sortWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): void;
  }

  // interface
  class NSMutableAttributedString extends NSAttributedString {
    mutableString: NSMutableString; // property
    addAttributeValueRange(_: string, value: any, range: NSRange): void;
    addAttributesRange(_: Map<string, any>, range: NSRange): void;
    appendAttributedString(_: NSAttributedString): void;
    applyFontTraitsRange(_: NSFontTraitMask, range: NSRange): void;
    beginEditing(): void;
    deleteCharactersInRange(in_: NSRange): void;
    endEditing(): void;
    fixAttachmentAttributeInRange(in_: NSRange): void;
    fixAttributesInRange(in_: NSRange): void;
    fixFontAttributeInRange(in_: NSRange): void;
    fixParagraphStyleAttributeInRange(in_: NSRange): void;
    insertAttributedStringAtIndex(_: NSAttributedString, at: number): void;
    readFromDataOptionsDocumentAttributesError(from: NSData, options: Map<string, any>, documentAttributes?: Map<string, any>): boolean;
    readFromURLOptionsDocumentAttributesError(from: NSURL, options: Map<string, any>, documentAttributes?: Map<string, any>): boolean;
    removeAttributeRange(_: string, range: NSRange): void;
    replaceCharactersInRangeWithAttributedString(in_: NSRange, with_: NSAttributedString): void;
    replaceCharactersInRangeWithString(in_: NSRange, with_: string): void;
    setAlignmentRange(_: NSTextAlignment, range: NSRange): void;
    setAttributedString(_: NSAttributedString): void;
    setAttributesRange(_?: Map<string, any>, range?: NSRange): void;
    setBaseWritingDirectionRange(_: NSWritingDirection, range: NSRange): void;
    subscriptRange(_: NSRange): void;
    superscriptRange(_: NSRange): void;
    unscriptRange(_: NSRange): void;
    updateAttachmentsFromPath(fromPath: string): void;
  }

  // interface
  class NSMutableCharacterSet extends NSCharacterSet /* implements NSCopying, NSMutableCopying, NSSecureCoding */ {
    addCharactersInRange(in_: NSRange): void;
    addCharactersInString(in_: string): void;
    formIntersectionWithCharacterSet(with_: NSCharacterSet): void;
    formUnionWithCharacterSet(with_: NSCharacterSet): void;
    invert(): void;
    removeCharactersInRange(in_: NSRange): void;
    removeCharactersInString(in_: string): void;
  }

  interface NSMutableCopying {
  }

  // interface
  class NSMutableData extends NSData {
    static dataWithCapacity(capacity: number): NSMutableData;
    static dataWithLength(length: number): NSMutableData;
    mutableBytes: any; // property
    appendBytesLength(_: any, length: number): void;
    appendData(_: NSData): void;
    compressUsingAlgorithmError(error: NSData.CompressionAlgorithm): boolean;
    decompressUsingAlgorithmError(error: NSData.CompressionAlgorithm): boolean;
    increaseLengthBy(by: number): void;
    static createWithCapacity(capacity: number): NSMutableData;
    static createWithLength(length: number): NSMutableData;
    replaceBytesInRangeWithBytes(in_: NSRange, withBytes: any): void;
    replaceBytesInRangeWithBytesLength(in_: NSRange, withBytes?: any, length?: number): void;
    resetBytesInRange(in_: NSRange): void;
    setData(_: NSData): void;
  }

  // interface
  class NSMutableDictionary<KeyType, ObjectType> extends NSDictionary<KeyType, ObjectType> {
    static dictionaryWithCapacity<KeyType, ObjectType>(capacity: number): NSMutableDictionary<KeyType, ObjectType>;
    static dictionaryWithSharedKeySet<KeyType, ObjectType>(sharedKeySet: any): NSMutableDictionary<KeyType, ObjectType>;
    addEntriesFromDictionary(from: Map<KeyType, ObjectType>): void;
    removeAllObjects(): void;
    removeObjectForKey(forKey: KeyType): void;
    removeObjectsForKeys(forKeys: KeyType[]): void;
    setDictionary(_: Map<KeyType, ObjectType>): void;
    setObjectForKey(_: ObjectType, forKey: KeyType): void;
    setObjectForKeyedSubscript(_?: ObjectType, forKeyedSubscript?: KeyType): void;
  }

  // interface
  class NSMutableIndexSet extends NSIndexSet {
    addIndex(_: number): void;
    addIndexes(_: NSIndexSet): void;
    addIndexesInRange(in_: NSRange): void;
    removeAllIndexes(): void;
    removeIndex(_: number): void;
    removeIndexes(_: NSIndexSet): void;
    removeIndexesInRange(in_: NSRange): void;
    shiftIndexesStartingAtIndexBy(at: number, by: number): void;
  }

  // interface
  class NSMutableOrderedSet<ObjectType> extends NSOrderedSet<ObjectType> {
    static orderedSetWithCapacity<ObjectType>(capacity: number): NSMutableOrderedSet<ObjectType>;
    addObject(_: ObjectType): void;
    addObjectsCount(_?: ObjectType, count?: number): void;
    addObjectsFromArray(from: ObjectType[]): void;
    exchangeObjectAtIndexWithObjectAtIndex(at: number, withObjectAt: number): void;
    filterUsingPredicate(using: NSPredicate): void;
    insertObjectAtIndex(_: ObjectType, at: number): void;
    insertObjectsAtIndexes(_: ObjectType[], at: NSIndexSet): void;
    intersect(_: NSOrderedSet<ObjectType>): void;
    intersectSet(_: NSSet<ObjectType>): void;
    minus(_: NSOrderedSet<ObjectType>): void;
    minusSet(_: NSSet<ObjectType>): void;
    moveObjectsAtIndexesToIndex(at: NSIndexSet, to: number): void;
    removeAllObjects(): void;
    removeObject(_: ObjectType): void;
    removeObjectAtIndex(at: number): void;
    removeObjectsAtIndexes(at: NSIndexSet): void;
    removeObjectsInArray(in_: ObjectType[]): void;
    removeObjectsInRange(in_: NSRange): void;
    replaceObjectAtIndexWithObject(at: number, with_: ObjectType): void;
    replaceObjectsAtIndexesWithObjects(at: NSIndexSet, with_: ObjectType[]): void;
    replaceObjectsInRangeWithObjectsCount(in_: NSRange, with_?: ObjectType, count?: number): void;
    setObjectAtIndex(_: ObjectType, at: number): void;
    setObjectAtIndexedSubscript(_: ObjectType, atIndexedSubscript: number): void;
    sortRangeWithOptionsUsingComparator(_: NSRange, options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): void;
    sortWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): void;
    sortUsingDescriptors(using: NSSortDescriptor[]): void;
    sortWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): void;
    union(_: NSOrderedSet<ObjectType>): void;
    unionSet(_: NSSet<ObjectType>): void;
  }

  // interface
  class NSMutableSet<ObjectType> extends NSSet<ObjectType> {
    static setWithCapacity<ObjectType>(capacity: number): NSMutableSet<ObjectType>;
    addObject(_: ObjectType): void;
    addObjectsFromArray(from: ObjectType[]): void;
    filterUsingPredicate(using: NSPredicate): void;
    intersect(_: NSSet<ObjectType>): void;
    minus(_: NSSet<ObjectType>): void;
    removeAllObjects(): void;
    removeObject(_: ObjectType): void;
    setSet(_: NSSet<ObjectType>): void;
    union(_: NSSet<ObjectType>): void;
  }

  // interface
  class NSMutableString extends NSString {
    static stringWithCapacity(capacity: number): NSMutableString;
    appendString(_: string): void;
    applyTransformReverseRangeUpdatedRange(_: string, reverse: boolean, range: NSRange, updatedRange?: NSRange): boolean;
    deleteCharactersInRange(in_: NSRange): void;
    static createWithCapacity(capacity: number): NSMutableString;
    insertStringAtIndex(_: string, at: number): void;
    replaceCharactersInRangeWithString(in_: NSRange, with_: string): void;
    replaceOccurrencesOfStringWithStringOptionsRange(of: string, with_: string, options: NSString.CompareOptions, range: NSRange): number;
    setString(_: string): void;
  }

  // interface
  class NSMutableURLRequest extends NSURLRequest {
    addValueForHTTPHeaderField(_: string, forHTTPHeaderField: string): void;
    setValueForHTTPHeaderField(_?: string, forHTTPHeaderField?: string): void;
  }

  // interface
  class NSNameSpecifier extends NSScriptObjectSpecifier {
    name: string;
    setName(_: string) // property
    static createWithContainerClassDescriptionContainerSpecifierKeyName(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, name?: string): NSNameSpecifier;
  }

  // interface
  class NetService extends NSObject {
    static dataFromTXTRecordDictionary(_: Map<string, Data>): NSData;
    static dictionaryFromTXTRecordData(_: NSData): Map<string, Data>;
    addresses: NSData[]; // property
    delegate: NetServiceDelegate;
    setDelegate(_: NetServiceDelegate) // property
    domain: string; // property
    hostName: string; // property
    includesPeerToPeer: boolean;
    setIncludesPeerToPeer(_: boolean) // property
    name: string; // property
    port: number; // property
    type: string; // property
    TXTRecordData(): NSData;
    getInputStreamOutputStream(_?: InputStream, outputStream?: OutputStream): boolean;
    static createWithDomainTypeName(domain: string, type: string, name: string): NetService;
    static createWithDomainTypeNamePort(domain: string, type: string, name: string, port: number): NetService;
    publish(): void;
    publishWithOptions(_: NetService.Options): void;
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    resolveWithTimeout(_: number): void;
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    setTXTRecordData(_?: NSData): boolean;
    startMonitoring(): void;
    stop(): void;
    stopMonitoring(): void;
  }

  // interface
  class NetServiceBrowser extends NSObject {
    delegate: NetServiceBrowserDelegate;
    setDelegate(_: NetServiceBrowserDelegate) // property
    includesPeerToPeer: boolean;
    setIncludesPeerToPeer(_: boolean) // property
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    searchForBrowsableDomains(): void;
    searchForRegistrationDomains(): void;
    searchForServicesOfTypeInDomain(_: string, inDomain: string): void;
    stop(): void;
  }

  interface NetServiceBrowserDelegate extends NSObject {
    // instance method
    netServiceBrowserDidFindDomainMoreComing?(_: NetServiceBrowser, didFindDomain: string, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidFindServiceMoreComing?(_: NetServiceBrowser, didFindService: NetService, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidNotSearch?(_: NetServiceBrowser, didNotSearch: Map<string, number>): void;
    // instance method
    netServiceBrowserDidRemoveDomainMoreComing?(_: NetServiceBrowser, didRemoveDomain: string, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidRemoveServiceMoreComing?(_: NetServiceBrowser, didRemoveService: NetService, moreComing: boolean): void;
    // instance method
    netServiceBrowserDidStopSearch?(_: NetServiceBrowser): void;
    // instance method
    netServiceBrowserWillSearch?(_: NetServiceBrowser): void;
  }

  interface NetServiceDelegate extends NSObject {
    // instance method
    netServiceDidAcceptConnectionWithInputStreamOutputStream?(_: NetService, didAcceptConnectionWithInputStream: InputStream, outputStream: OutputStream): void;
    // instance method
    netServiceDidNotPublish?(_: NetService, didNotPublish: Map<string, number>): void;
    // instance method
    netServiceDidNotResolve?(_: NetService, didNotResolve: Map<string, number>): void;
    // instance method
    netServiceDidUpdateTXTRecordData?(_: NetService, didUpdateTXTRecordData: NSData): void;
    // instance method
    netServiceDidPublish?(_: NetService): void;
    // instance method
    netServiceDidResolveAddress?(_: NetService): void;
    // instance method
    netServiceDidStop?(_: NetService): void;
    // instance method
    netServiceWillPublish?(_: NetService): void;
    // instance method
    netServiceWillResolve?(_: NetService): void;
  }

  // export declare function NSNextHashEnumeratorItem(enumerator: NSHashEnumerator): any;

  // export declare function NSNextMapEnumeratorPair(enumerator: NSMapEnumerator, key: any, value: any): boolean;

  // interface
  class NSNotification extends NSObject /* implements NSCoding, NSCopying */ {
    name: string; // property
    object: any; // property
    userInfo: Map<any, any>; // property
    static createWithNameObjectUserInfo(name: string, object_?: any, userInfo?: Map<any, any>): NSNotification;
  }

  // interface
  class NotificationCenter extends NSObject {
    static defaultCenter: NotificationCenter; // property
    addObserverSelectorNameObject(_: any, selector: string, name?: string, object_?: any): void;
    addObserverForNameWithObjectQueueUsingBlock(_?: string, object_?: any, queue?: OperationQueue, usingBlock?: (p1: NSNotification) => void): NSObject;
    postNotification(_: NSNotification): void;
    postNotificationNameObject(name: string, object_?: any): void;
    postNotificationNameObjectUserInfo(name: string, object_?: any, userInfo?: Map<any, any>): void;
    removeObserver(_: any): void;
    removeObserverNameObject(_: any, name?: string, object_?: any): void;
  }

  // interface
  class NotificationQueue extends NSObject {
    static defaultQueue: NotificationQueue; // property
    dequeueNotificationsMatchingCoalesceMask(_: NSNotification, coalesceMask: number): void;
    enqueueNotificationPostingStyle(_: NSNotification, postingStyle: NotificationQueue.PostingStyle): void;
    enqueueNotificationPostingStyleCoalesceMaskForModes(_: NSNotification, postingStyle: NotificationQueue.PostingStyle, coalesceMask: NotificationQueue.NotificationCoalescing, forModes?: string[]): void;
    static createWithNotificationCenter(notificationCenter: NotificationCenter): NotificationQueue;
  }

  // interface
  class NSNull extends NSObject /* implements NSCopying, NSSecureCoding, CAAction */ {
  }

  // interface
  class NSNumber extends NSValue /* implements NSFetchRequestResult */ {
    static numberWithBool(bool: boolean): number;
    static numberWithChar(char: number): number;
    static numberWithDouble(double: number): number;
    static numberWithFloat(float: number): number;
    static numberWithInt(int: number): number;
    static numberWithInteger(integer: number): number;
    static numberWithLong(long: number): number;
    static numberWithLongLong(longLong: number): number;
    static numberWithShort(short: number): number;
    static numberWithUnsignedChar(unsignedChar: number): number;
    static numberWithUnsignedInt(unsignedInt: number): number;
    static numberWithUnsignedInteger(unsignedInteger: number): number;
    static numberWithUnsignedLong(unsignedLong: number): number;
    static numberWithUnsignedLongLong(unsignedLongLong: number): number;
    static numberWithUnsignedShort(unsignedShort: number): number;
    boolValue: boolean; // property
    charValue: number; // property
    decimalValue: number; // property
    doubleValue: number; // property
    floatValue: number; // property
    intValue: number; // property
    integerValue: number; // property
    longLongValue: number; // property
    longValue: number; // property
    shortValue: number; // property
    stringValue: string; // property
    unsignedCharValue: number; // property
    unsignedIntValue: number; // property
    unsignedIntegerValue: number; // property
    unsignedLongLongValue: number; // property
    unsignedLongValue: number; // property
    unsignedShortValue: number; // property
    compare(_: number): ComparisonResult;
    descriptionWithLocale(withLocale?: any): string;
    static createWithBool(bool: boolean): NSNumber;
    static createWithChar(char: number): NSNumber;
    static createWithDouble(double: number): NSNumber;
    static createWithFloat(float: number): NSNumber;
    static createWithInt(int: number): NSNumber;
    static createWithInteger(integer: number): NSNumber;
    static createWithLong(long: number): NSNumber;
    static createWithLongLong(longLong: number): NSNumber;
    static createWithShort(short: number): NSNumber;
    static createWithUnsignedChar(unsignedChar: number): NSNumber;
    static createWithUnsignedInt(unsignedInt: number): NSNumber;
    static createWithUnsignedInteger(unsignedInteger: number): NSNumber;
    static createWithUnsignedLong(unsignedLong: number): NSNumber;
    static createWithUnsignedLongLong(unsignedLongLong: number): NSNumber;
    static createWithUnsignedShort(unsignedShort: number): NSNumber;
    isEqualToNumber(to: number): boolean;
  }

  // interface
  class NumberFormatter extends Formatter {
    static defaultFormatterBehavior(): NumberFormatter.Behavior;
    static localizedStringFromNumberNumberStyle(_: number, numberStyle: NumberFormatter.Style): string;
    static setDefaultFormatterBehavior(_: NumberFormatter.Behavior): void;
    allowsFloats: boolean;
    setAllowsFloats(_: boolean) // property
    alwaysShowsDecimalSeparator: boolean;
    setAlwaysShowsDecimalSeparator(_: boolean) // property
    attributedStringForNil: NSAttributedString;
    setAttributedStringForNil(_: NSAttributedString) // property
    attributedStringForNotANumber: NSAttributedString;
    setAttributedStringForNotANumber(_: NSAttributedString) // property
    attributedStringForZero: NSAttributedString;
    setAttributedStringForZero(_: NSAttributedString) // property
    currencyCode: string;
    setCurrencyCode(_: string) // property
    currencyDecimalSeparator: string;
    setCurrencyDecimalSeparator(_: string) // property
    currencyGroupingSeparator: string;
    setCurrencyGroupingSeparator(_: string) // property
    currencySymbol: string;
    setCurrencySymbol(_: string) // property
    decimalSeparator: string;
    setDecimalSeparator(_: string) // property
    exponentSymbol: string;
    setExponentSymbol(_: string) // property
    format: string;
    setFormat(_: string) // property
    formatWidth: number;
    setFormatWidth(_: number) // property
    formatterBehavior: NumberFormatter.Behavior;
    setFormatterBehavior(_: NumberFormatter.Behavior) // property
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context) // property
    generatesDecimalNumbers: boolean;
    setGeneratesDecimalNumbers(_: boolean) // property
    groupingSeparator: string;
    setGroupingSeparator(_: string) // property
    groupingSize: number;
    setGroupingSize(_: number) // property
    hasThousandSeparators: boolean;
    setHasThousandSeparators(_: boolean) // property
    internationalCurrencySymbol: string;
    setInternationalCurrencySymbol(_: string) // property
    isLenient: boolean;
    setLenient(_: boolean) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    localizesFormat: boolean;
    setLocalizesFormat(_: boolean) // property
    maximum: number;
    setMaximum(_: number) // property
    maximumFractionDigits: number;
    setMaximumFractionDigits(_: number) // property
    maximumIntegerDigits: number;
    setMaximumIntegerDigits(_: number) // property
    maximumSignificantDigits: number;
    setMaximumSignificantDigits(_: number) // property
    minimum: number;
    setMinimum(_: number) // property
    minimumFractionDigits: number;
    setMinimumFractionDigits(_: number) // property
    minimumIntegerDigits: number;
    setMinimumIntegerDigits(_: number) // property
    minimumSignificantDigits: number;
    setMinimumSignificantDigits(_: number) // property
    minusSign: string;
    setMinusSign(_: string) // property
    multiplier: number;
    setMultiplier(_: number) // property
    negativeFormat: string;
    setNegativeFormat(_: string) // property
    negativeInfinitySymbol: string;
    setNegativeInfinitySymbol(_: string) // property
    negativePrefix: string;
    setNegativePrefix(_: string) // property
    negativeSuffix: string;
    setNegativeSuffix(_: string) // property
    nilSymbol: string;
    setNilSymbol(_: string) // property
    notANumberSymbol: string;
    setNotANumberSymbol(_: string) // property
    numberStyle: NumberFormatter.Style;
    setNumberStyle(_: NumberFormatter.Style) // property
    paddingCharacter: string;
    setPaddingCharacter(_: string) // property
    paddingPosition: NumberFormatter.PadPosition;
    setPaddingPosition(_: NumberFormatter.PadPosition) // property
    isPartialStringValidationEnabled: boolean;
    setPartialStringValidationEnabled(_: boolean) // property
    perMillSymbol: string;
    setPerMillSymbol(_: string) // property
    percentSymbol: string;
    setPercentSymbol(_: string) // property
    plusSign: string;
    setPlusSign(_: string) // property
    positiveFormat: string;
    setPositiveFormat(_: string) // property
    positiveInfinitySymbol: string;
    setPositiveInfinitySymbol(_: string) // property
    positivePrefix: string;
    setPositivePrefix(_: string) // property
    positiveSuffix: string;
    setPositiveSuffix(_: string) // property
    roundingBehavior: NSDecimalNumberHandler;
    setRoundingBehavior(_: NSDecimalNumberHandler) // property
    roundingIncrement: number;
    setRoundingIncrement(_: number) // property
    roundingMode: NumberFormatter.RoundingMode;
    setRoundingMode(_: NumberFormatter.RoundingMode) // property
    secondaryGroupingSize: number;
    setSecondaryGroupingSize(_: number) // property
    textAttributesForNegativeInfinity: Map<string, any>;
    setTextAttributesForNegativeInfinity(_: Map<string, any>) // property
    textAttributesForNegativeValues: Map<string, any>;
    setTextAttributesForNegativeValues(_: Map<string, any>) // property
    textAttributesForNil: Map<string, any>;
    setTextAttributesForNil(_: Map<string, any>) // property
    textAttributesForNotANumber: Map<string, any>;
    setTextAttributesForNotANumber(_: Map<string, any>) // property
    textAttributesForPositiveInfinity: Map<string, any>;
    setTextAttributesForPositiveInfinity(_: Map<string, any>) // property
    textAttributesForPositiveValues: Map<string, any>;
    setTextAttributesForPositiveValues(_: Map<string, any>) // property
    textAttributesForZero: Map<string, any>;
    setTextAttributesForZero(_: Map<string, any>) // property
    thousandSeparator: string;
    setThousandSeparator(_: string) // property
    usesGroupingSeparator: boolean;
    setUsesGroupingSeparator(_: boolean) // property
    usesSignificantDigits: boolean;
    setUsesSignificantDigits(_: boolean) // property
    zeroSymbol: string;
    setZeroSymbol(_: string) // property
    getObjectValueForStringRangeError(forString?: any, range?: string, error?: NSRange): boolean;
    numberFromString(_: string): number;
    stringFromNumber(_: number): string;
  }

  // export declare function NSOffsetRect(aRect: CGRect, dX: number, dY: number): CGRect;

  // export declare function NSOpenStepRootDirectory(): string;

  // struct
  interface OperatingSystemVersion {
    majorVersion: number;
    minorVersion: number;
    patchVersion: number;
  }

  // interface
  class Operation extends NSObject {
    isAsynchronous: boolean; // property
    isCancelled: boolean; // property
    completionBlock: () => void;
    setCompletionBlock(_: () => void) // property
    isConcurrent: boolean; // property
    dependencies: Operation[]; // property
    isExecuting: boolean; // property
    isFinished: boolean; // property
    name: string;
    setName(_: string) // property
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService) // property
    queuePriority: Operation.QueuePriority;
    setQueuePriority(_: Operation.QueuePriority) // property
    isReady: boolean; // property
    addDependency(_: Operation): void;
    cancel(): void;
    main(): void;
    removeDependency(_: Operation): void;
    start(): void;
    waitUntilFinished(): void;
  }

  // interface
  class OperationQueue extends NSObject /* implements ProgressReporting */ {
    maxConcurrentOperationCount: number;
    setMaxConcurrentOperationCount(_: number) // property
    name: string;
    setName(_: string) // property
    operationCount: number; // property
    operations: Operation[]; // property
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService) // property
    isSuspended: boolean;
    setSuspended(_: boolean) // property
    underlyingQueue: NSObject;
    setUnderlyingQueue(_: NSObject) // property
    static currentQueue: OperationQueue; // property
    static mainQueue: OperationQueue; // property
    addBarrierBlock(_: () => void): void;
    addOperation(_: Operation): void;
    addOperationWithBlock(_: () => void): void;
    addOperationsWaitUntilFinished(_: Operation[], waitUntilFinished: boolean): void;
    cancelAllOperations(): void;
    waitUntilAllOperationsAreFinished(): void;
  }

  // interface
  class NSOrderedCollectionChange<ObjectType> extends NSObject {
    associatedIndex: number; // property
    changeType: NSCollectionChangeType; // property
    index: number; // property
    object: ObjectType; // property
  }

  // interface
  class NSOrderedCollectionDifference<ObjectType> extends NSObject /* implements NSFastEnumeration */ {
    hasChanges: boolean; // property
    insertions: NSOrderedCollectionChange<ObjectType>[]; // property
    removals: NSOrderedCollectionChange<ObjectType>[]; // property
    transformingChanges(_: (p1: NSOrderedCollectionChange<ObjectType>) => NSOrderedCollectionChange<any>): NSOrderedCollectionDifference<any>;
    inverseDifference(): NSOrderedCollectionDifference<ObjectType>;
  }

  // interface
  class NSOrderedSet<ObjectType> extends NSObject /* implements NSCopying, NSFastEnumeration, NSMutableCopying, NSSecureCoding */ {
    static orderedSetWithObjects<ObjectType>(_: ObjectType): NSOrderedSet<ObjectType>;
    array: ObjectType[]; // property
    count: number; // property
    firstObject: ObjectType; // property
    lastObject: ObjectType; // property
    reversedOrderedSet: NSOrderedSet<ObjectType>; // property
    set: NSSet<ObjectType>; // property
    containsObject(_: ObjectType): boolean;
    descriptionWithLocale(withLocale?: any): string;
    descriptionWithLocaleIndent(withLocale?: any, indent?: number): string;
    enumerateObjectsWithAtOptionsUsing(at: NSIndexSet, options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    enumerateObjects(_: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    enumerateObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: ObjectType, p2: number, p3: boolean) => void): void;
    filteredOrderedSetUsingPredicate(using: NSPredicate): NSOrderedSet<ObjectType>;
    indexOfObject(of: ObjectType): number;
    indexOfInSortedRangeOptionsUsingComparator(of: ObjectType, inSortedRange: NSRange, options: NSBinarySearchingOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): number;
    indexWithOfObjectAtOptionsPassingTest(ofObjectAt: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    indexWithOfObjectPassingTest(ofObjectPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    indexOfObjectPassingTest(_: NSEnumerationOptions, ofObjectPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): number;
    indexesWithOfObjectsAtOptionsPassingTest(ofObjectsAt: NSIndexSet, options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    indexesWithOfObjectsPassingTest(ofObjectsPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    indexesWithOptionsOfObjectsPassingTest(options: NSEnumerationOptions, ofObjectsPassingTest: (p1: ObjectType, p2: number, p3: boolean) => boolean): NSIndexSet;
    intersects(_: NSOrderedSet<ObjectType>): boolean;
    intersectsSet(_: NSSet<ObjectType>): boolean;
    isEqualWithTo(to: NSOrderedSet<ObjectType>): boolean;
    isSubsetOf(of: NSOrderedSet<ObjectType>): boolean;
    isSubsetOf(of: NSSet<ObjectType>): boolean;
    objectAtIndex(at: number): ObjectType;
    objectEnumerator(): NSEnumerator<ObjectType>;
    objectsAtIndexes(at: NSIndexSet): ObjectType[];
    reverseObjectEnumerator(): NSEnumerator<ObjectType>;
    sortedArrayWithComparator(comparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
    sortedArrayUsingDescriptors(using: NSSortDescriptor[]): ObjectType[];
    sortedArrayWithOptionsUsingComparator(options: NSSortOptions, usingComparator: (p1: any, p2: any) => ComparisonResult): ObjectType[];
  }

  // interface
  class NSOrthography extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static defaultOrthographyForLanguage(forLanguage: string): NSOrthography;
    allLanguages: string[]; // property
    allScripts: string[]; // property
    dominantLanguage: string; // property
    dominantScript: string; // property
    languageMap: Map<string, string[]>; // property
    dominantLanguageForScript(forScript: string): string;
    static createWithDominantScriptLanguageMap(dominantScript: string, languageMap: Map<string, string[]>): NSOrthography;
    languagesForScript(forScript: string): string[];
  }

  // interface
  class OutputStream extends Stream {
    static outputStreamToBufferCapacity(_: string, capacity: number): OutputStream;
    static outputStreamToFileAtPathAppend(_: string, append: boolean): OutputStream;
    static outputStreamToMemory(): OutputStream;
    static outputStreamWithURLAppend(_: NSURL, append: boolean): OutputStream;
    hasSpaceAvailable: boolean; // property
    static createWithToBufferCapacity(toBuffer: string, capacity: number): OutputStream;
    static createWithToFileAtPathAppend(toFileAtPath: string, append: boolean): OutputStream;
    static createWithToMemory(): OutputStream;
    static createWithUrlAppend(URL: NSURL, append: boolean): OutputStream;
    writeMaxLength(_: string, maxLength: number): number;
  }

  // export declare function NSPageSize(): number;

  // interface
  class NSPersonNameComponents extends NSObject /* implements NSCopying, NSSecureCoding */ {
    familyName: string;
    setFamilyName(_: string) // property
    givenName: string;
    setGivenName(_: string) // property
    middleName: string;
    setMiddleName(_: string) // property
    namePrefix: string;
    setNamePrefix(_: string) // property
    nameSuffix: string;
    setNameSuffix(_: string) // property
    nickname: string;
    setNickname(_: string) // property
    phoneticRepresentation: NSPersonNameComponents;
    setPhoneticRepresentation(_: NSPersonNameComponents) // property
  }

  // interface
  class PersonNameComponentsFormatter extends Formatter {
    static localizedStringFromPersonNameComponentsStyleOptions(_: NSPersonNameComponents, style: PersonNameComponentsFormatter.Style, options: PersonNameComponentsFormatter.Options): string;
    isPhonetic: boolean;
    setPhonetic(_: boolean) // property
    style: PersonNameComponentsFormatter.Style;
    setStyle(_: PersonNameComponentsFormatter.Style) // property
    annotatedStringFromPersonNameComponents(_: NSPersonNameComponents): NSAttributedString;
    personNameComponentsFromString(_: string): NSPersonNameComponents;
    stringFromPersonNameComponents(_: NSPersonNameComponents): string;
  }

  // interface
  class Pipe extends NSObject {
    static pipe(): Pipe;
    fileHandleForReading: FileHandle; // property
    fileHandleForWriting: FileHandle; // property
  }

  // export declare function NSPointFromString(aString: string): CGPoint;

  // export declare function NSPointInRect(aPoint: CGPoint, aRect: CGRect): boolean;

  // interface
  class NSPointerArray extends NSObject /* implements NSCopying, NSFastEnumeration, NSSecureCoding */ {
    static strongObjectsPointerArray(): NSPointerArray;
    static weakObjectsPointerArray(): NSPointerArray;
    allObjects: any[]; // property
    count: number;
    setCount(_: number) // property
    pointerFunctions: NSPointerFunctions; // property
    addPointer(_?: any): void;
    compact(): void;
    static createWithOptions(options: NSPointerFunctions.Options): NSPointerArray;
    static createWithPointerFunctions(pointerFunctions: NSPointerFunctions): NSPointerArray;
    insertPointerAtIndex(_?: any, at?: number): void;
    pointerAtIndex(at: number): any;
    removePointerAtIndex(at: number): void;
    replacePointerAtIndexWithPointer(at: number, withPointer?: any): void;
  }

  // interface
  class NSPointerFunctions extends NSObject /* implements NSCopying */ {
    acquireFunction: (p1: any, p2: (p1: any) => number, p3: boolean) => any;
    setAcquireFunction(_: (p1: any, p2: (p1: any) => number, p3: boolean) => any) // property
    descriptionFunction: (p1: any) => string;
    setDescriptionFunction(_: (p1: any) => string) // property
    hashFunction: (p1: any, p2: (p1: any) => number) => number;
    setHashFunction(_: (p1: any, p2: (p1: any) => number) => number) // property
    isEqualFunction: (p1: any, p2: any, p3: (p1: any) => number) => boolean;
    setIsEqualFunction(_: (p1: any, p2: any, p3: (p1: any) => number) => boolean) // property
    relinquishFunction: (p1: any, p2: (p1: any) => number) => void;
    setRelinquishFunction(_: (p1: any, p2: (p1: any) => number) => void) // property
    sizeFunction: (p1: any) => number;
    setSizeFunction(_: (p1: any) => number) // property
    static createWithOptions(options: NSPointerFunctions.Options): NSPointerFunctions;
  }

  // interface
  class Port extends NSObject /* implements NSCoding, NSCopying */ {
    reservedSpaceLength: number; // property
    isValid: boolean; // property
    delegate(): PortDelegate;
    invalidate(): void;
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    sendBeforeDateComponentsFromReserved(_: Date, components?: NSMutableArray<any>, from?: Port, reserved?: number): boolean;
    sendBeforeDateMsgidComponentsFromReserved(_: Date, msgid: number, components?: NSMutableArray<any>, from?: Port, reserved?: number): boolean;
    setDelegate(_?: PortDelegate): void;
  }

  interface PortDelegate extends NSObject {
    // instance method
    handlePortMessage?(_: PortMessage): void;
  }

  // interface
  class PortMessage extends NSObject {
    components: any[]; // property
    msgid: number;
    setMsgid(_: number) // property
    receivePort: Port; // property
    sendPort: Port; // property
    static createWithSendPortReceivePortComponents(sendPort?: Port, receivePort?: Port, components?: any[]): PortMessage;
    sendBeforeDate(_: Date): boolean;
  }

  // interface
  class NSPositionalSpecifier extends NSObject {
    insertionContainer: any; // property
    insertionIndex: number; // property
    insertionKey: string; // property
    insertionReplaces: boolean; // property
    position: NSPositionalSpecifier.InsertionPosition; // property
    evaluate(): void;
    static createWithPositionObjectSpecifier(position: NSPositionalSpecifier.InsertionPosition, objectSpecifier: NSScriptObjectSpecifier): NSPositionalSpecifier;
    setInsertionClassDescription(_: NSScriptClassDescription): void;
  }

  // interface
  class NSPredicate extends NSObject /* implements NSCopying, NSSecureCoding */ {
    predicateFormat: string; // property
    allowEvaluation(): void;
    evaluateWithObject(with_?: any): boolean;
    evaluateWithObjectSubstitutionVariables(with_?: any, substitutionVariables?: Map<string, any>): boolean;
    predicateWithSubstitutionVariables(_: Map<string, any>): NSPredicate;
  }

  // interface
  class ProcessInfo extends NSObject {
    activeProcessorCount: number; // property
    arguments: string[]; // property
    automaticTerminationSupportEnabled: boolean;
    setAutomaticTerminationSupportEnabled(_: boolean) // property
    environment: Map<string, string>; // property
    fullUserName: string; // property
    globallyUniqueString: string; // property
    hostName: string; // property
    isMacCatalystApp: boolean; // property
    operatingSystemVersion: OperatingSystemVersion; // property
    operatingSystemVersionString: string; // property
    physicalMemory: number; // property
    processIdentifier: number; // property
    processName: string;
    setProcessName(_: string) // property
    processorCount: number; // property
    systemUptime: number; // property
    thermalState: ProcessInfo.ThermalState; // property
    userName: string; // property
    static processInfo: ProcessInfo; // property
    beginActivityWithOptionsReason(_: ProcessInfo.ActivityOptions, reason: string): NSObject;
    disableAutomaticTermination(_: string): void;
    disableSuddenTermination(): void;
    enableAutomaticTermination(_: string): void;
    enableSuddenTermination(): void;
    endActivity(_: NSObject): void;
    isOperatingSystemAtLeastVersion(_: OperatingSystemVersion): boolean;
    performActivityWithOptionsWithReasonUsingBlock(_: ProcessInfo.ActivityOptions, reason: string, usingBlock: () => void): void;
  }

  // interface
  class Progress extends NSObject {
    static addSubscriberForFileURLWithWithPublishingHandler(_: NSURL, withPublishingHandler: (p1: Progress) => () => void): any;
    static currentProgress(): Progress;
    static discreteProgressWithTotalUnitCount(totalUnitCount: number): Progress;
    static removeSubscriber(_: any): void;
    isCancellable: boolean;
    setCancellable(_: boolean) // property
    cancellationHandler: () => void;
    setCancellationHandler(_: () => void) // property
    isCancelled: boolean; // property
    completedUnitCount: number;
    setCompletedUnitCount(_: number) // property
    estimatedTimeRemaining: number;
    setEstimatedTimeRemaining(_: number) // property
    fileCompletedCount: number;
    setFileCompletedCount(_: number) // property
    fileOperationKind: string;
    setFileOperationKind(_: string) // property
    fileTotalCount: number;
    setFileTotalCount(_: number) // property
    fileURL: NSURL;
    setFileURL(_: NSURL) // property
    isFinished: boolean; // property
    fractionCompleted: number; // property
    isIndeterminate: boolean; // property
    kind: string;
    setKind(_: string) // property
    localizedAdditionalDescription: string;
    setLocalizedAdditionalDescription(_: string) // property
    localizedDescription: string;
    setLocalizedDescription(_: string) // property
    isOld: boolean; // property
    isPausable: boolean;
    setPausable(_: boolean) // property
    isPaused: boolean; // property
    pausingHandler: () => void;
    setPausingHandler(_: () => void) // property
    resumingHandler: () => void;
    setResumingHandler(_: () => void) // property
    throughput: number;
    setThroughput(_: number) // property
    totalUnitCount: number;
    setTotalUnitCount(_: number) // property
    userInfo: Map<string, any>; // property
    addChildWithPendingUnitCount(_: Progress, withPendingUnitCount: number): void;
    becomeCurrentWithPendingUnitCount(_: number): void;
    cancel(): void;
    static createWithParentUserInfo(parent?: Progress, userInfo?: Map<string, any>): Progress;
    pause(): void;
    performAsCurrentWithPendingUnitCountWithUsingBlock(_: number, usingBlock: () => void): void;
    publish(): void;
    resignCurrent(): void;
    resume(): void;
    setUserInfoObjectForKey(_?: any, forKey?: string): void;
    unpublish(): void;
  }

  interface ProgressReporting extends NSObject {
    progress: Progress; // property
  }

  // interface
  class PropertyListSerialization extends NSObject {
    static dataWithPropertyListFormatOptionsError(fromPropertyList: any, format: PropertyListSerialization.PropertyListFormat, options: number): NSData;
    static propertyListIsValidForFormat(_: any, isValidForFormat: PropertyListSerialization.PropertyListFormat): boolean;
    static propertyListWithDataOptionsFormatError(from: NSData, options: PropertyListSerialization.MutabilityOptions, format?: PropertyListSerialization.PropertyListFormat): any;
    static propertyListWithStreamOptionsFormatError(options: InputStream, format: PropertyListSerialization.MutabilityOptions, error?: PropertyListSerialization.PropertyListFormat): any;
    static writePropertyListToStreamFormatOptionsError(toStream: any, format: OutputStream, options: PropertyListSerialization.PropertyListFormat, error: number): number;
  }

  // interface
  class NSPropertySpecifier extends NSScriptObjectSpecifier {
  }

  // interface
  class NSProtocolChecker extends NSProxy {
    protocol: any /* Protocol */; // property
    target: NSObject; // property
    static createWithTargetProtocol(target: NSObject, protocol: any /* Protocol */): NSProtocolChecker;
  }

  // export declare function NSProtocolFromString(namestr: string): any /* Protocol */;

  // interface
  class NSProxy /* implements NSObject */ {
    static alloc(): NSProxy;
    static class(): typeof NSObject;
    static respondsToSelector(to: string): boolean;
    dealloc(): void;
    finalize(): void;
  }

  // interface
  class NSPurgeableData extends NSMutableData /* implements NSDiscardableContent */ {
  }

  // interface
  class NSQuitCommand extends NSScriptCommand {
    saveOptions: NSSaveOptions; // property
  }

  // interface
  class NSRandomSpecifier extends NSScriptObjectSpecifier {
  }

  // struct
  interface NSRange {
    location: number;
    length: number;
  }

  // export declare function NSRangeFromString(aString: string): NSRange;

  // interface
  class NSRangeSpecifier extends NSScriptObjectSpecifier {
    endSpecifier: NSScriptObjectSpecifier;
    setEndSpecifier(_: NSScriptObjectSpecifier) // property
    startSpecifier: NSScriptObjectSpecifier;
    setStartSpecifier(_: NSScriptObjectSpecifier) // property
    static createWithContainerClassDescriptionContainerSpecifierKeyStartSpecifierEndSpecifier(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, startSpecifier?: NSScriptObjectSpecifier, endSpecifier?: NSScriptObjectSpecifier): NSRangeSpecifier;
  }

  // export declare function NSRecordAllocationEvent(eventType: number, object_: any): void;

  // export declare function NSRectFromString(aString: string): CGRect;

  // interface
  class NSRecursiveLock extends NSObject /* implements NSLocking */ {
    name: string;
    setName(_: string) // property
    lockBeforeDate(before: Date): boolean;
    tryLock(): boolean;
  }

  // interface
  class NSRegularExpression extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static escapedPatternForString(for_: string): string;
    static escapedTemplateForString(for_: string): string;
    static regularExpressionWithPatternOptionsError(options: string, error: NSRegularExpression.Options): NSRegularExpression;
    numberOfCaptureGroups: number; // property
    options: NSRegularExpression.Options; // property
    pattern: string; // property
    enumerateMatchesWithInOptionsRangeUsing(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange, using?: (p1: NSTextCheckingResult, p2: NSRegularExpression.MatchingFlags, p3: boolean) => void): void;
    firstMatchInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSTextCheckingResult;
    static createWithPatternOptions(pattern: string, options: NSRegularExpression.Options): NSRegularExpression;
    matchesInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSTextCheckingResult[];
    numberOfMatchesInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): number;
    rangeOfFirstMatchInStringOptionsRange(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange): NSRange;
    replaceMatchesInStringOptionsRangeWithTemplate(in_: NSMutableString, options: NSRegularExpression.MatchingOptions, range: NSRange, withTemplate: string): number;
    replacementStringForResultInStringOffsetTemplate(for_: NSTextCheckingResult, in_: string, offset: number, template: string): string;
    stringByReplacingMatchesInStringOptionsRangeWithTemplate(in_: string, options: NSRegularExpression.MatchingOptions, range: NSRange, withTemplate: string): string;
  }

  // interface
  class RelativeDateTimeFormatter extends Formatter {
    calendar: NSCalendar;
    setCalendar(_: NSCalendar) // property
    dateTimeStyle: RelativeDateTimeFormatter.DateTimeStyle;
    setDateTimeStyle(_: RelativeDateTimeFormatter.DateTimeStyle) // property
    formattingContext: Formatter.Context;
    setFormattingContext(_: Formatter.Context) // property
    locale: NSLocale;
    setLocale(_: NSLocale) // property
    unitsStyle: RelativeDateTimeFormatter.UnitsStyle;
    setUnitsStyle(_: RelativeDateTimeFormatter.UnitsStyle) // property
    localizedStringForDateRelativeToDate(_: Date, relativeToDate: Date): string;
    localizedStringFromDateComponents(_: NSDateComponents): string;
    localizedStringFromTimeInterval(_: number): string;
  }

  // interface
  class NSRelativeSpecifier extends NSScriptObjectSpecifier {
    baseSpecifier: NSScriptObjectSpecifier;
    setBaseSpecifier(_: NSScriptObjectSpecifier) // property
    relativePosition: NSRelativeSpecifier.RelativePosition;
    setRelativePosition(_: NSRelativeSpecifier.RelativePosition) // property
    static createWithContainerClassDescriptionContainerSpecifierKeyRelativePositionBaseSpecifier(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, relativePosition?: NSRelativeSpecifier.RelativePosition, baseSpecifier?: NSScriptObjectSpecifier): NSRelativeSpecifier;
  }

  // export declare function NSResetHashTable(table: NSHashTable<any>): void;

  // export declare function NSResetMapTable(table: NSMapTable<any, any>): void;

  // export declare function NSReturnAddress(frame: number): any;

  // export declare function NSRoundDownToMultipleOfPageSize(bytes: number): number;

  // export declare function NSRoundUpToMultipleOfPageSize(bytes: number): number;

  // interface
  class RunLoop extends NSObject {
    currentMode: string; // property
    static currentRunLoop: RunLoop; // property
    static mainRunLoop: RunLoop; // property
    acceptInputForModeBeforeDate(_: string, beforeDate: Date): void;
    addPortForMode(_: Port, forMode: string): void;
    addTimerForMode(_: Timer, forMode: string): void;
    cancelPerformSelectorTargetArgument(_: string, target: any, argument?: any): void;
    cancelPerformSelectorsWithTarget(_: any): void;
    getCFRunLoop(): any;
    limitDateForMode(_: string): Date;
    performBlock(_: () => void): void;
    performInModesWithBlock(_: string[], block: () => void): void;
    performSelectorTargetArgumentOrderModes(_: string, target: any, argument?: any, order?: number, modes?: string[]): void;
    removePortForMode(_: Port, forMode: string): void;
    run(): void;
    runModeBeforeDate(mode: string, before: Date): boolean;
    runUntilDate(_: Date): void;
  }

  // interface
  class Scanner extends NSObject /* implements NSCopying */ {
    static localizedScannerWithString(_: string): any;
    isAtEnd: boolean; // property
    caseSensitive: boolean;
    setCaseSensitive(_: boolean) // property
    charactersToBeSkipped: NSCharacterSet;
    setCharactersToBeSkipped(_: NSCharacterSet) // property
    locale: any;
    setLocale(_: any) // property
    string: string; // property
    static createWithString(string: string): Scanner;
    scanHexDouble(_?: number): boolean;
    scanHexFloat(_?: number): boolean;
    scanHexLongLong(_?: number): boolean;
    scanInt(_?: number): boolean;
    scanInteger(_?: number): boolean;
    scanLongLong(_?: number): boolean;
    scanUnsignedLongLong(_?: number): boolean;
  }

  // interface
  class NSScriptClassDescription extends NSClassDescription {
    appleEventCode: number; // property
    defaultSubcontainerAttributeKey: string; // property
    implementationClassName: string; // property
    suiteName: string; // property
    superclassDescription: NSScriptClassDescription; // property
    appleEventCodeForKey(forKey: string): number;
    classDescriptionForKey(_: string): NSScriptClassDescription;
    hasOrderedToManyRelationshipForKey(forKey: string): boolean;
    hasPropertyForKey(forKey: string): boolean;
    hasReadablePropertyForKey(forKey: string): boolean;
    hasWritablePropertyForKey(forKey: string): boolean;
    static createWithSuiteNameClassNameDictionary(suiteName: string, className: string, dictionary?: Map<any, any>): NSScriptClassDescription;
    isLocationRequiredToCreateForKey(forKey: string): boolean;
    keyWithAppleEventCode(withAppleEventCode: number): string;
    matchesAppleEventCode(_: number): boolean;
    selectorForCommand(forCommand: NSScriptCommandDescription): string;
    supportsCommand(_: NSScriptCommandDescription): boolean;
    typeForKey(forKey: string): string;
  }

  // interface
  class NSScriptCoercionHandler extends NSObject {
    static sharedCoercionHandler(): NSScriptCoercionHandler;
    coerceValueToClass(_: any, to: typeof NSObject): any;
    registerCoercerSelectorToConvertFromClassToClass(_: any, selector: string, toConvertFrom: typeof NSObject, to: typeof NSObject): void;
  }

  // interface
  class NSScriptCommand extends NSObject /* implements NSCoding */ {
    static currentCommand(): NSScriptCommand;
    appleEvent: NSAppleEventDescriptor; // property
    arguments: Map<string, any>;
    setArguments(_: Map<string, any>) // property
    commandDescription: NSScriptCommandDescription; // property
    directParameter: any;
    setDirectParameter(_: any) // property
    evaluatedArguments: Map<string, any>; // property
    evaluatedReceivers: any; // property
    receiversSpecifier: NSScriptObjectSpecifier;
    setReceiversSpecifier(_: NSScriptObjectSpecifier) // property
    scriptErrorExpectedTypeDescriptor: NSAppleEventDescriptor;
    setScriptErrorExpectedTypeDescriptor(_: NSAppleEventDescriptor) // property
    scriptErrorNumber: number;
    setScriptErrorNumber(_: number) // property
    scriptErrorOffendingObjectDescriptor: NSAppleEventDescriptor;
    setScriptErrorOffendingObjectDescriptor(_: NSAppleEventDescriptor) // property
    scriptErrorString: string;
    setScriptErrorString(_: string) // property
    isWellFormed: boolean; // property
    executeCommand(): any;
    static createWithCommandDescription(commandDescription: NSScriptCommandDescription): NSScriptCommand;
    performDefaultImplementation(): any;
    resumeExecutionWithResult(withResult?: any): void;
    suspendExecution(): void;
  }

  // interface
  class NSScriptCommandDescription extends NSObject /* implements NSCoding */ {
    appleEventClassCode: number; // property
    appleEventCode: number; // property
    appleEventCodeForReturnType: number; // property
    argumentNames: string[]; // property
    commandClassName: string; // property
    commandName: string; // property
    returnType: string; // property
    suiteName: string; // property
    appleEventCodeForArgumentWithName(withName: string): number;
    createCommandInstance(): NSScriptCommand;
    createCommandInstanceWithZone(with_?: any): NSScriptCommand;
    static createWithSuiteNameCommandNameDictionary(suiteName: string, commandName: string, dictionary?: Map<any, any>): NSScriptCommandDescription;
    isOptionalArgumentWithName(withName: string): boolean;
    typeForArgumentWithName(withName: string): string;
  }

  // interface
  class NSScriptExecutionContext extends NSObject {
    static sharedScriptExecutionContext(): NSScriptExecutionContext;
    objectBeingTested: any;
    setObjectBeingTested(_: any) // property
    rangeContainerObject: any;
    setRangeContainerObject(_: any) // property
    topLevelObject: any;
    setTopLevelObject(_: any) // property
  }

  // interface
  class NSScriptObjectSpecifier extends NSObject /* implements NSCoding */ {
    static objectSpecifierWithDescriptor(descriptor: NSAppleEventDescriptor): NSScriptObjectSpecifier;
    childSpecifier: NSScriptObjectSpecifier;
    setChildSpecifier(_: NSScriptObjectSpecifier) // property
    containerClassDescription: NSScriptClassDescription;
    setContainerClassDescription(_: NSScriptClassDescription) // property
    containerIsObjectBeingTested: boolean;
    setContainerIsObjectBeingTested(_: boolean) // property
    containerIsRangeContainerObject: boolean;
    setContainerIsRangeContainerObject(_: boolean) // property
    containerSpecifier: NSScriptObjectSpecifier;
    setContainerSpecifier(_: NSScriptObjectSpecifier) // property
    descriptor: NSAppleEventDescriptor; // property
    evaluationErrorNumber: number;
    setEvaluationErrorNumber(_: number) // property
    evaluationErrorSpecifier: NSScriptObjectSpecifier; // property
    key: string;
    setKey(_: string) // property
    keyClassDescription: NSScriptClassDescription; // property
    objectsByEvaluatingSpecifier: any; // property
    indicesOfObjectsByEvaluatingWithContainerCount(withContainer: any, count: number): number;
    static createWithContainerClassDescriptionContainerSpecifierKey(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string): NSScriptObjectSpecifier;
    static createWithContainerSpecifierKey(containerSpecifier: NSScriptObjectSpecifier, key: string): NSScriptObjectSpecifier;
    objectsByEvaluatingWithContainers(withContainers: any): any;
  }

  // interface
  class NSScriptSuiteRegistry extends NSObject {
    static setSharedScriptSuiteRegistry(_: NSScriptSuiteRegistry): void;
    static sharedScriptSuiteRegistry(): NSScriptSuiteRegistry;
    suiteNames: string[]; // property
    aeteResource(_: string): NSData;
    appleEventCodeForSuite(forSuite: string): number;
    bundleForSuite(forSuite: string): Bundle;
    classDescriptionWithAppleEventCode(withAppleEventCode: number): NSScriptClassDescription;
    classDescriptionsInSuite(inSuite: string): Map<string, NSScriptClassDescription>;
    commandDescriptionWithAppleEventClassAndAppleEventCode(withAppleEventClass: number, andAppleEventCode: number): NSScriptCommandDescription;
    commandDescriptionsInSuite(inSuite: string): Map<string, NSScriptCommandDescription>;
    loadSuiteWithDictionaryFromBundle(with_: Map<any, any>, from: Bundle): void;
    loadSuitesFromBundle(from: Bundle): void;
    registerClassDescription(_: NSScriptClassDescription): void;
    registerCommandDescription(_: NSScriptCommandDescription): void;
    suiteForAppleEventCode(forAppleEventCode: number): string;
  }

  // interface
  class NSScriptWhoseTest extends NSObject /* implements NSCoding */ {
    isTrue(): boolean;
  }

  // export declare function NSSearchPathForDirectoriesInDomains(directory: FileManager.SearchPathDirectory, domainMask: FileManager.SearchPathDomainMask, expandTilde: boolean): string[];

  interface NSSecureCoding extends NSCoding {
  }

  // interface
  class NSSecureUnarchiveFromDataTransformer extends ValueTransformer {
    static allowedTopLevelClasses: typeof NSObject[]; // property
  }

  // export declare function NSSelectorFromString(aSelectorName: string): string;

  // interface
  class NSSet<ObjectType> extends NSObject /* implements NSCopying, NSFastEnumeration, NSMutableCopying, NSSecureCoding */ {
    static setWithObjects<ObjectType>(_: ObjectType): NSSet<ObjectType>;
    allObjects: ObjectType[]; // property
    count: number; // property
    anyObject(): ObjectType;
    containsObject(_: ObjectType): boolean;
    descriptionWithLocale(withLocale?: any): string;
    enumerateIndexPathsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: NSIndexPath, p2: boolean) => void): void;
    enumerateObjects(_: (p1: ObjectType, p2: boolean) => void): void;
    enumerateObjectsWithOptionsUsing(options: NSEnumerationOptions, using: (p1: ObjectType, p2: boolean) => void): void;
    filteredSetUsingPredicate(using: NSPredicate): NSSet<ObjectType>;
    intersects(_: NSSet<ObjectType>): boolean;
    isEqualWithTo(to: NSSet<ObjectType>): boolean;
    isSubsetOf(of: NSSet<ObjectType>): boolean;
    member(_: ObjectType): ObjectType;
    objectEnumerator(): NSEnumerator<ObjectType>;
    objectsWithPassingTest(passingTest: (p1: ObjectType, p2: boolean) => boolean): NSSet<ObjectType>;
    objectsWithOptionsPassingTest(options: NSEnumerationOptions, passingTest: (p1: ObjectType, p2: boolean) => boolean): NSSet<ObjectType>;
    setByAddingObject(_: ObjectType): NSSet<ObjectType>;
    setByAddingObjectsFromArray(from: ObjectType[]): NSSet<ObjectType>;
    addingObjectsWithFrom(from: NSSet<ObjectType>): NSSet<ObjectType>;
    sortedArrayUsingDescriptors(using: NSSortDescriptor[]): ObjectType[];
  }

  // interface
  class NSSetCommand extends NSScriptCommand {
    keySpecifier: NSScriptObjectSpecifier; // property
    setReceiversSpecifier(_?: NSScriptObjectSpecifier): void;
  }

  // export declare function NSSetUncaughtExceptionHandler(p1: (p1: NSException) => void): void;

  // export declare function NSShouldRetainWithZone(anObject: any, requestedZone: any): boolean;

  // export declare function NSSizeFromString(aString: string): CGSize;

  // interface
  class SocketPort extends Port {
    address: NSData; // property
    protocol: number; // property
    protocolFamily: number; // property
    socket: number; // property
    socketType: number; // property
    static createWithRemoteWithProtocolFamilySocketTypeProtocolAddress(remoteWithProtocolFamily: number, socketType: number, protocol: number, address: NSData): SocketPort;
    static createWithRemoteWithTCPPortHost(remoteWithTCPPort: number, host?: string): SocketPort;
    static createWithProtocolFamilySocketTypeProtocolAddress(protocolFamily: number, socketType: number, protocol: number, address: NSData): SocketPort;
    static createWithProtocolFamilySocketTypeProtocolSocket(protocolFamily: number, socketType: number, protocol: number, socket: number): SocketPort;
    static createWithTCPPort(TCPPort: number): SocketPort;
  }

  // interface
  class NSSortDescriptor extends NSObject /* implements NSCopying, NSSecureCoding */ {
    ascending: boolean; // property
    comparator: (p1: any, p2: any) => ComparisonResult; // property
    key: string; // property
    reversedSortDescriptor: any; // property
    selector: string; // property
    allowEvaluation(): void;
    compareObjectToObject(_: any, to: any): ComparisonResult;
    static createWithKeyAscending(key?: string, ascending?: boolean): NSSortDescriptor;
    static createWithKeyAscendingComparator(key?: string, ascending?: boolean, comparator?: (p1: any, p2: any) => ComparisonResult): NSSortDescriptor;
    static createWithKeyAscendingSelector(key?: string, ascending?: boolean, selector?: string): NSSortDescriptor;
  }

  // interface
  class NSSpecifierTest extends NSScriptWhoseTest {
    static createWithObjectSpecifierComparisonOperatorTestObject(objectSpecifier?: NSScriptObjectSpecifier, comparisonOperator?: NSSpecifierTest.TestComparisonOperation, testObject?: any): NSSpecifierTest;
  }

  // interface
  class NSSpellServer extends NSObject {
    delegate: NSSpellServerDelegate;
    setDelegate(_: NSSpellServerDelegate) // property
    isWordInUserDictionariesCaseSensitive(inUserDictionaries: string, caseSensitive: boolean): boolean;
    registerLanguageByVendor(_?: string, byVendor?: string): boolean;
    run(): void;
  }

  interface NSSpellServerDelegate extends NSObject {
    // instance method
    spellServerFindMisspelledWordInStringLanguageWordCountCountOnly?(_: NSSpellServer, findMisspelledWordIn: string, language: string, wordCount: number, countOnly: boolean): NSRange;
    // instance method
    spellServerSuggestCompletionsForPartialWordRangeInStringLanguage?(_: NSSpellServer, suggestCompletionsForPartialWordRange: NSRange, in_: string, language: string): string[];
    // instance method
    spellServerCheckGrammarInStringLanguageDetails?(_: NSSpellServer, checkGrammarIn: string, language?: string, details?: Map<string, any>[]): NSRange;
    // instance method
    spellServerCheckStringOffsetTypesOptionsOrthographyWordCount?(_: NSSpellServer, check: string, offset: number, types: number, options?: Map<string, any>, orthography?: NSOrthography, wordCount?: number): NSTextCheckingResult[];
    // instance method
    spellServerDidForgetWordInLanguage?(_: NSSpellServer, didForgetWord: string, inLanguage: string): void;
    // instance method
    spellServerDidLearnWordInLanguage?(_: NSSpellServer, didLearnWord: string, inLanguage: string): void;
    // instance method
    spellServerRecordResponseToCorrectionForWordLanguage?(_: NSSpellServer, recordResponse: number, toCorrection: string, forWord: string, language: string): void;
    // instance method
    spellServerSuggestGuessesForWordInLanguage?(_: NSSpellServer, suggestGuessesForWord: string, inLanguage: string): string[];
  }

  // interface
  class Stream extends NSObject {
    static getBoundStreamsWithBufferSizeInputStreamOutputStream(_: number, inputStream?: InputStream, outputStream?: OutputStream): void;
    static getStreamsToHostWithNamePortInputStreamOutputStream(_: string, port: number, inputStream?: InputStream, outputStream?: OutputStream): void;
    delegate: StreamDelegate;
    setDelegate(_: StreamDelegate) // property
    streamError: NSError; // property
    streamStatus: Stream.Status; // property
    close(): void;
    open(): void;
    propertyForKey(_: string): any;
    removeFromRunLoopForMode(_: RunLoop, forMode: string): void;
    scheduleInRunLoopForMode(_: RunLoop, forMode: string): void;
    setPropertyForKey(_?: any, forKey?: string): boolean;
  }

  interface StreamDelegate extends NSObject {
    // instance method
    streamHandleEvent?(_: Stream, handleEvent: Stream.Event): void;
  }

  // interface
  class NSString extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding, NSItemProviderReading, NSItemProviderWriting, NSPasteboardReading, NSPasteboardWriting */ {
    static localizedNameOfStringEncoding(of: number): string;
    static pathWithComponents(withComponents: string[]): string;
    static stringEncodingForDataEncodingOptionsConvertedStringUsedLossyConversion(for_: NSData, encodingOptions?: Map<string, any>, convertedString?: string, usedLossyConversion?: boolean): number;
    static stringWithContentsOfFileEncodingError(encoding: string, error: number): NSString;
    static stringWithContentsOfFileUsedEncodingError(usedEncoding: string, error?: number): NSString;
    static stringWithContentsOfURLEncodingError(encoding: NSURL, error: number): NSString;
    static stringWithContentsOfURLUsedEncodingError(usedEncoding: NSURL, error?: number): NSString;
    UTF8String: string; // property
    isAbsolutePath: boolean; // property
    boolValue: boolean; // property
    capitalizedString: string; // property
    decomposedStringWithCanonicalMapping: string; // property
    decomposedStringWithCompatibilityMapping: string; // property
    doubleValue: number; // property
    fastestEncoding: number; // property
    fileSystemRepresentation: string; // property
    floatValue: number; // property
    intValue: number; // property
    integerValue: number; // property
    lastPathComponent: string; // property
    length: number; // property
    localizedCapitalizedString: string; // property
    localizedLowercaseString: string; // property
    localizedUppercaseString: string; // property
    longLongValue: number; // property
    lowercaseString: string; // property
    pathComponents: string[]; // property
    pathExtension: string; // property
    precomposedStringWithCanonicalMapping: string; // property
    precomposedStringWithCompatibilityMapping: string; // property
    smallestEncoding: number; // property
    stringByAbbreviatingWithTildeInPath: string; // property
    stringByDeletingLastPathComponent: string; // property
    stringByDeletingPathExtension: string; // property
    stringByExpandingTildeInPath: string; // property
    stringByRemovingPercentEncoding: string; // property
    stringByResolvingSymlinksInPath: string; // property
    stringByStandardizingPath: string; // property
    uppercaseString: string; // property
    static availableStringEncodings: number; // property
    static defaultCStringEncoding: number; // property
    boundingRectWithSizeOptionsAttributes(with_: CGSize, options: NSString.DrawingOptions, attributes?: Map<string, any>): CGRect;
    boundingRectWithSizeOptionsAttributesContext(with_: CGSize, options: NSString.DrawingOptions, attributes?: Map<string, any>, context?: NSStringDrawingContext): CGRect;
    cStringUsingEncoding(using: number): string;
    canBeConvertedToEncoding(to: number): boolean;
    capitalizedStringWithLocale(with_?: NSLocale): string;
    caseInsensitiveCompare(_: string): ComparisonResult;
    characterAtIndex(at: number): string;
    commonPrefixWithStringOptions(with_: string, options: NSString.CompareOptions): string;
    compare(_: string): ComparisonResult;
    compareOptions(_: string, options: NSString.CompareOptions): ComparisonResult;
    compareOptionsRange(_: string, options: NSString.CompareOptions, range: NSRange): ComparisonResult;
    compareOptionsRangeLocale(_: string, options: NSString.CompareOptions, range: NSRange, locale?: any): ComparisonResult;
    completePathIntoStringCaseSensitiveMatchesIntoArrayFilterTypes(into?: string, caseSensitive?: boolean, matchesInto?: string[], filterTypes?: string[]): number;
    componentsSeparatedByCharactersInSet(separatedBy: NSCharacterSet): string[];
    componentsSeparatedByString(separatedBy: string): string[];
    containsString(_: string): boolean;
    dataUsingEncoding(using: number): NSData;
    dataUsingEncodingAllowLossyConversion(using: number, allowLossyConversion: boolean): NSData;
    drawAtPointWithAttributes(at: CGPoint, withAttributes?: Map<string, any>): void;
    drawInRectWithAttributes(in_: CGRect, withAttributes?: Map<string, any>): void;
    drawWithRectOptionsAttributes(with_: CGRect, options: NSString.DrawingOptions, attributes?: Map<string, any>): void;
    drawWithRectOptionsAttributesContext(with_: CGRect, options: NSString.DrawingOptions, attributes?: Map<string, any>, context?: NSStringDrawingContext): void;
    enumerateLines(_: (p1: string, p2: boolean) => void): void;
    enumerateLinguisticTagsWithInSchemeOptionsOrthographyUsing(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, using?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
    enumerateSubstringsWithInOptionsUsing(in_: NSRange, options: NSString.EnumerationOptions, using?: (p1: string, p2: NSRange, p3: NSRange, p4: boolean) => void): void;
    getBytesMaxLengthUsedLengthEncodingOptionsRangeRemainingRange(_?: any, maxLength?: number, usedLength?: number, encoding?: number, options?: NSString.EncodingConversionOptions, range?: NSRange, remaining?: NSRange): boolean;
    getCStringMaxLengthEncoding(_: string, maxLength: number, encoding: number): boolean;
    getCharacters(_: string): void;
    getCharactersRange(_: string, range: NSRange): void;
    getFileSystemRepresentationMaxLength(_: string, maxLength: number): boolean;
    getLineStartEndContentsEndForRange(_?: number, end?: number, contentsEnd?: number, for_?: NSRange): void;
    getParagraphStartEndContentsEndForRange(_?: number, end?: number, contentsEnd?: number, for_?: NSRange): void;
    hasPrefix(_: string): boolean;
    hasSuffix(_: string): boolean;
    static createWithBytesLengthEncoding(bytes: any, length: number, encoding: number): NSString;
    static createWithBytesNoCopyLengthEncodingFreeWhenDone(bytesNoCopy: any, length: number, encoding: number, freeWhenDone: boolean): NSString;
    static createWithCStringEncoding(CString: string, encoding: number): NSString;
    static createWithCharactersLength(characters: string, length: number): NSString;
    static createWithCharactersNoCopyLengthFreeWhenDone(charactersNoCopy: string, length: number, freeWhenDone: boolean): NSString;
    static createWithContentsOfFileEncoding(contentsOfFile: string, encoding: number): NSString;
    static createWithContentsOfFileUsedEncoding(contentsOfFile: string, usedEncoding?: number): NSString;
    static createWithContentsOfURLEncoding(contentsOfURL: NSURL, encoding: number): NSString;
    static createWithContentsOfURLUsedEncoding(contentsOfURL: NSURL, usedEncoding?: number): NSString;
    static createWithDataEncoding(data: NSData, encoding: number): NSString;
    static createWithString(string: string): NSString;
    static createWithUTF8String(UTF8String: string): NSString;
    isEqualToString(to: string): boolean;
    lengthOfBytesUsingEncoding(using: number): number;
    lineRangeForRange(for_: NSRange): NSRange;
    linguisticTagsInRangeSchemeOptionsOrthographyTokenRanges(in_: NSRange, scheme: string, options: NSLinguisticTagger.Options, orthography?: NSOrthography, tokenRanges?: NSValue[]): string[];
    localizedCaseInsensitiveCompare(_: string): ComparisonResult;
    localizedCaseInsensitiveContainsString(_: string): boolean;
    localizedCompare(_: string): ComparisonResult;
    localizedStandardCompare(_: string): ComparisonResult;
    localizedStandardContainsString(_: string): boolean;
    localizedStandardRangeOfString(of: string): NSRange;
    lowercaseStringWithLocale(with_?: NSLocale): string;
    maximumLengthOfBytesUsingEncoding(using: number): number;
    paragraphRangeForRange(for_: NSRange): NSRange;
    propertyList(): any;
    propertyListFromStringsFileFormat(): Map<any, any>;
    rangeOfCharacterFromSet(from: NSCharacterSet): NSRange;
    rangeOfCharacterFromSetOptions(from: NSCharacterSet, options: NSString.CompareOptions): NSRange;
    rangeOfCharacterFromSetOptionsRange(from: NSCharacterSet, options: NSString.CompareOptions, range: NSRange): NSRange;
    rangeOfComposedCharacterSequenceAtIndex(at: number): NSRange;
    rangeOfComposedCharacterSequencesForRange(for_: NSRange): NSRange;
    rangeOfString(of: string): NSRange;
    rangeOfStringOptions(of: string, options: NSString.CompareOptions): NSRange;
    rangeOfStringOptionsRange(of: string, options: NSString.CompareOptions, range: NSRange): NSRange;
    rangeOfStringOptionsRangeLocale(of: string, options: NSString.CompareOptions, range: NSRange, locale?: NSLocale): NSRange;
    sizeWithAttributes(withAttributes?: Map<string, any>): CGSize;
    stringByAddingPercentEncodingWithAllowedCharacters(withAllowedCharacters: NSCharacterSet): string;
    stringByAppendingPathComponent(_: string): string;
    stringByAppendingPathExtension(_: string): string;
    stringByAppendingString(_: string): string;
    stringByApplyingTransformReverse(_: string, reverse: boolean): string;
    stringByFoldingWithOptionsLocale(options: NSString.CompareOptions, locale?: NSLocale): string;
    stringByPaddingToLengthWithStringStartingAtIndex(toLength: number, withPad: string, startingAt: number): string;
    stringByReplacingCharactersInRangeWithString(in_: NSRange, with_: string): string;
    stringByReplacingOccurrencesOfStringWithString(of: string, with_: string): string;
    stringByReplacingOccurrencesOfStringWithStringOptionsRange(of: string, with_: string, options: NSString.CompareOptions, range: NSRange): string;
    stringByTrimmingCharactersInSet(in_: NSCharacterSet): string;
    stringsByAppendingPaths(byAppendingPaths: string[]): string[];
    substringFromIndex(from: number): string;
    substringToIndex(to: number): string;
    substringWithRange(with_: NSRange): string;
    uppercaseStringWithLocale(with_?: NSLocale): string;
    variantFittingPresentationWidth(_: number): string;
    writeToFileAtomicallyEncodingError(atomically: string, encoding: boolean, error: number): boolean;
    writeToURLAtomicallyEncodingError(atomically: NSURL, encoding: boolean, error: number): boolean;
  }

  // export declare function NSStringFromClass(aClass: typeof NSObject): string;

  // export declare function NSStringFromHashTable(table: NSHashTable<any>): string;

  // export declare function NSStringFromMapTable(table: NSMapTable<any, any>): string;

  // export declare function NSStringFromPoint(aPoint: CGPoint): string;

  // export declare function NSStringFromProtocol(proto: any /* Protocol */): string;

  // export declare function NSStringFromRange(range: NSRange): string;

  // export declare function NSStringFromRect(aRect: CGRect): string;

  // export declare function NSStringFromSelector(aSelector: string): string;

  // export declare function NSStringFromSize(aSize: CGSize): string;

  // struct
  interface NSSwappedDouble {
    v: number;
  }

  // struct
  interface NSSwappedFloat {
    v: number;
  }

  // interface
  class Process extends NSObject {
    static runArgumentsTerminationHandler(_: NSURL, _2: string[], arguments_?: Error, terminationHandler?: (p1: Process) => void): Process;
    static launchedTaskWithLaunchPathArguments(launchPath: string, arguments_: string[]): Process;
    arguments: string[];
    setArguments(_: string[]) // property
    currentDirectoryPath: string;
    setCurrentDirectoryPath(_: string) // property
    currentDirectoryURL: NSURL;
    setCurrentDirectoryURL(_: NSURL) // property
    environment: Map<string, string>;
    setEnvironment(_: Map<string, string>) // property
    executableURL: NSURL;
    setExecutableURL(_: NSURL) // property
    launchPath: string;
    setLaunchPath(_: string) // property
    processIdentifier: number; // property
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService) // property
    isRunning: boolean; // property
    standardError: any;
    setStandardError(_: any) // property
    standardInput: any;
    setStandardInput(_: any) // property
    standardOutput: any;
    setStandardOutput(_: any) // property
    terminationHandler: (p1: Process) => void;
    setTerminationHandler(_: (p1: Process) => void) // property
    terminationReason: Process.TerminationReason; // property
    terminationStatus: number; // property
    interrupt(): void;
    launch(): void;
    launchAndReturnError(): boolean;
    resume(): boolean;
    suspend(): boolean;
    terminate(): void;
    waitUntilExit(): void;
  }

  // export declare function NSTemporaryDirectory(): string;

  // interface
  class NSTextCheckingResult extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static addressCheckingResultWithRangeComponents(range: NSRange, components: Map<string, string>): NSTextCheckingResult;
    static correctionCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    static correctionCheckingResultWithRangeReplacementStringAlternativeStrings(range: NSRange, replacementString: string, alternativeStrings: string[]): NSTextCheckingResult;
    static dashCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    static dateCheckingResultWithRangeDate(range: NSRange, date: Date): NSTextCheckingResult;
    static dateCheckingResultWithRangeDateTimeZoneDuration(range: NSRange, date: Date, timeZone: NSTimeZone, duration: number): NSTextCheckingResult;
    static grammarCheckingResultWithRangeDetails(range: NSRange, details: Map<string, any>[]): NSTextCheckingResult;
    static linkCheckingResultWithRangeUrl(range: NSRange, url: NSURL): NSTextCheckingResult;
    static orthographyCheckingResultWithRangeOrthography(range: NSRange, orthography: NSOrthography): NSTextCheckingResult;
    static phoneNumberCheckingResultWithRangePhoneNumber(range: NSRange, phoneNumber: string): NSTextCheckingResult;
    static quoteCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    static regularExpressionCheckingResultWithRangesCountRegularExpression(ranges: NSRange, count: number, regularExpression: NSRegularExpression): NSTextCheckingResult;
    static replacementCheckingResultWithRangeReplacementString(range: NSRange, replacementString: string): NSTextCheckingResult;
    static spellCheckingResultWithRange(range: NSRange): NSTextCheckingResult;
    static transitInformationCheckingResultWithRangeComponents(range: NSRange, components: Map<string, string>): NSTextCheckingResult;
    URL: NSURL; // property
    addressComponents: Map<string, string>; // property
    alternativeStrings: string[]; // property
    components: Map<string, string>; // property
    date: Date; // property
    duration: number; // property
    grammarDetails: Map<string, any>[]; // property
    numberOfRanges: number; // property
    orthography: NSOrthography; // property
    phoneNumber: string; // property
    range: NSRange; // property
    regularExpression: NSRegularExpression; // property
    replacementString: string; // property
    resultType: NSTextCheckingResult.CheckingType; // property
    timeZone: NSTimeZone; // property
    rangeAtIndex(at: number): NSRange;
    rangeWithName(withName: string): NSRange;
    resultByAdjustingRangesWithOffset(offset: number): NSTextCheckingResult;
  }

  // interface
  class Thread extends NSObject {
    static detachNewThreadSelectorToTargetWithObject(_: string, toTarget: any, withObject?: any): void;
    static detachNewThreadWithBlock(_: () => void): void;
    static exit(): void;
    static isMultiThreaded(): boolean;
    static setThreadPriority(_: number): boolean;
    static sleepForTimeInterval(_: number): void;
    static sleepUntilDate(_: Date): void;
    static threadPriority(): number;
    isCancelled: boolean; // property
    isExecuting: boolean; // property
    isFinished: boolean; // property
    name: string;
    setName(_: string) // property
    qualityOfService: QualityOfService;
    setQualityOfService(_: QualityOfService) // property
    stackSize: number;
    setStackSize(_: number) // property
    threadDictionary: NSMutableDictionary<any, any>; // property
    threadPriority: number;
    setThreadPriority(_: number) // property
    static callStackReturnAddresses: number[]; // property
    static callStackSymbols: string[]; // property
    static currentThread: Thread; // property
    static isMainThread: boolean; // property
    static mainThread: Thread; // property
    cancel(): void;
    static createWithBlock(block: () => void): Thread;
    static createWithTargetSelectorObject(target: any, selector: string, object_?: any): Thread;
    main(): void;
    start(): void;
  }

  // interface
  class NSTimeZone extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static resetSystemTimeZone(): void;
    abbreviation: string; // property
    data: NSData; // property
    isDaylightSavingTime: boolean; // property
    daylightSavingTimeOffset: number; // property
    name: string; // property
    nextDaylightSavingTimeTransition: Date; // property
    secondsFromGMT: number; // property
    static abbreviationDictionary: Map<string, string>;
    setAbbreviationDictionary(_: Map<string, string>) // property
    static defaultTimeZone: NSTimeZone;
    setDefaultTimeZone(_: NSTimeZone) // property
    static knownTimeZoneNames: string[]; // property
    static localTimeZone: NSTimeZone; // property
    static systemTimeZone: NSTimeZone; // property
    static timeZoneDataVersion: string; // property
    abbreviationForDate(for_: Date): string;
    daylightSavingTimeOffsetForDate(for_: Date): number;
    static createWithName(name: string): NSTimeZone;
    static createWithNameData(name: string, data?: NSData): NSTimeZone;
    isDaylightSavingTimeForDate(for_: Date): boolean;
    isEqualToTimeZone(to: NSTimeZone): boolean;
    localizedNameLocale(_: NSTimeZone.NameStyle, locale?: NSLocale): string;
    nextDaylightSavingTimeTransitionAfterDate(after: Date): Date;
    secondsFromGMTForDate(for_: Date): number;
  }

  // interface
  class Timer extends NSObject {
    static scheduledTimerWithTimeIntervalWithRepeatsBlock(_: number, repeats: boolean, block: (p1: Timer) => void): Timer;
    static scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(timeInterval: number, target: any, selector: string, userInfo?: any, repeats?: boolean): Timer;
    fireDate: Date;
    setFireDate(_: Date) // property
    timeInterval: number; // property
    tolerance: number;
    setTolerance(_: number) // property
    userInfo: any; // property
    isValid: boolean; // property
    fire(): void;
    static createWithFireDateIntervalRepeatsBlock(fireDate: Date, interval: number, repeats: boolean, block: (p1: Timer) => void): Timer;
    static createWithFireDateIntervalTargetSelectorUserInfoRepeats(fireDate: Date, interval: number, target: any, selector: string, userInfo?: any, repeats?: boolean): Timer;
    invalidate(): void;
  }

  // interface
  class NSURL extends NSObject /* implements NSCopying, NSSecureCoding, NSItemProviderReading, NSItemProviderWriting, NSPasteboardReading, NSPasteboardWriting, QLPreviewItem */ {
    static URLByResolvingAliasFileAtURLOptionsError(resolvingAliasFileAt: NSURL, options: NSURL.BookmarkResolutionOptions): NSURL;
    static URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(options: NSData, relativeToURL: NSURL.BookmarkResolutionOptions, bookmarkDataIsStale?: NSURL, error?: boolean): NSURL;
    static absoluteURLWithDataRepresentationRelativeToURL(withDataRepresentation: NSData, relativeTo?: NSURL): NSURL;
    static bookmarkDataWithContentsOfURLError(error: NSURL): NSData;
    static fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(withFileSystemRepresentation: string, isDirectory: boolean, relativeTo?: NSURL): NSURL;
    static fileURLWithPath(withPath: string): NSURL;
    static fileURLWithPathIsDirectory(withPath: string, isDirectory: boolean): NSURL;
    static fileURLWithPathIsDirectoryRelativeToURL(withPath: string, isDirectory: boolean, relativeTo?: NSURL): NSURL;
    static fileURLWithPathRelativeToURL(withPath: string, relativeTo?: NSURL): NSURL;
    static fileURLWithPathComponents(withPathComponents: string[]): NSURL;
    static resourceValuesForKeysFromBookmarkData(forKeys: string[], fromBookmarkData: NSData): Map<string, any>;
    static writeBookmarkDataToURLOptionsError(toURL: NSData, options: NSURL, error: number): boolean;
    URLByDeletingLastPathComponent: NSURL; // property
    URLByDeletingPathExtension: NSURL; // property
    URLByResolvingSymlinksInPath: NSURL; // property
    URLByStandardizingPath: NSURL; // property
    absoluteString: string; // property
    absoluteURL: NSURL; // property
    baseURL: NSURL; // property
    dataRepresentation: NSData; // property
    filePathURL: NSURL; // property
    fileSystemRepresentation: string; // property
    isFileURL: boolean; // property
    fragment: string; // property
    hasDirectoryPath: boolean; // property
    host: string; // property
    lastPathComponent: string; // property
    password: string; // property
    path: string; // property
    pathComponents: string[]; // property
    pathExtension: string; // property
    port: number; // property
    query: string; // property
    relativePath: string; // property
    relativeString: string; // property
    resourceSpecifier: string; // property
    scheme: string; // property
    standardizedURL: NSURL; // property
    user: string; // property
    URLByAppendingPathComponent(_: string): NSURL;
    URLByAppendingPathComponentIsDirectory(_: string, isDirectory: boolean): NSURL;
    URLByAppendingPathExtension(_: string): NSURL;
    bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(includingResourceValuesForKeys: NSURL.BookmarkCreationOptions, relativeToURL?: string[], error?: NSURL): NSData;
    checkPromisedItemIsReachableAndReturnError(): boolean;
    checkResourceIsReachableAndReturnError(): boolean;
    fileReferenceURL(): NSURL;
    getFileSystemRepresentationMaxLength(_: string, maxLength: number): boolean;
    getPromisedItemResourceValueForKeyError(forKey?: any, error?: string): boolean;
    getResourceValueForKeyError(forKey?: any, error?: string): boolean;
    static createWithAbsoluteURLWithDataRepresentationRelativeToURL(absoluteURLWithDataRepresentation: NSData, relativeToURL?: NSURL): NSURL;
    static createWithByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStale(byResolvingBookmarkData: NSData, options: NSURL.BookmarkResolutionOptions, relativeToURL?: NSURL, bookmarkDataIsStale?: boolean): NSURL;
    static createWithFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(fileURLWithFileSystemRepresentation: string, isDirectory: boolean, relativeToURL?: NSURL): NSURL;
    static createWithFileURLWithPath(fileURLWithPath: string): NSURL;
    static createWithFileURLWithPathIsDirectory(fileURLWithPath: string, isDirectory: boolean): NSURL;
    static createWithFileURLWithPathIsDirectoryRelativeToURL(fileURLWithPath: string, isDirectory: boolean, relativeToURL?: NSURL): NSURL;
    static createWithFileURLWithPathRelativeToURL(fileURLWithPath: string, relativeToURL?: NSURL): NSURL;
    static createWithDataRepresentationRelativeToURL(dataRepresentation: NSData, relativeToURL?: NSURL): NSURL;
    static createWithString(string: string): NSURL;
    static createWithStringRelativeToURL(string: string, relativeToURL?: NSURL): NSURL;
    isFileReferenceURL(): boolean;
    promisedItemResourceValuesForKeysError(error: string[]): Map<string, any>;
    removeAllCachedResourceValues(): void;
    removeCachedResourceValueForKey(forKey: string): void;
    resourceValuesForKeysError(error: string[]): Map<string, any>;
    setResourceValueForKeyError(forKey?: any, error?: string): boolean;
    setResourceValuesError(error: Map<string, any>): boolean;
    setTemporaryResourceValueForKey(_?: any, forKey?: string): void;
    startAccessingSecurityScopedResource(): boolean;
    stopAccessingSecurityScopedResource(): void;
    writeToPasteboard(to: NSPasteboard): void;
  }

  // interface
  class URLAuthenticationChallenge extends NSObject /* implements NSSecureCoding */ {
    error: NSError; // property
    failureResponse: URLResponse; // property
    previousFailureCount: number; // property
    proposedCredential: URLCredential; // property
    protectionSpace: URLProtectionSpace; // property
    sender: URLAuthenticationChallengeSender; // property
    static createWithAuthenticationChallengeSender(authenticationChallenge: URLAuthenticationChallenge, sender: URLAuthenticationChallengeSender): URLAuthenticationChallenge;
    static createWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender(protectionSpace: URLProtectionSpace, proposedCredential?: URLCredential, previousFailureCount?: number, failureResponse?: URLResponse, error?: NSError, sender?: URLAuthenticationChallengeSender): URLAuthenticationChallenge;
  }

  interface URLAuthenticationChallengeSender extends NSObject {
    // instance method
    cancelAuthenticationChallenge(_: URLAuthenticationChallenge): void;
    // instance method
    continueWithoutCredentialForAuthenticationChallenge(_: URLAuthenticationChallenge): void;
    // instance method
    performDefaultHandlingForAuthenticationChallenge?(_: URLAuthenticationChallenge): void;
    // instance method
    rejectProtectionSpaceAndContinueWithChallenge?(_: URLAuthenticationChallenge): void;
    // instance method
    useCredentialForAuthenticationChallenge(_: URLCredential, forAuthenticationChallenge: URLAuthenticationChallenge): void;
  }

  // interface
  class URLCache extends NSObject {
    currentDiskUsage: number; // property
    currentMemoryUsage: number; // property
    diskCapacity: number;
    setDiskCapacity(_: number) // property
    memoryCapacity: number;
    setMemoryCapacity(_: number) // property
    static sharedURLCache: URLCache;
    setSharedURLCache(_: URLCache) // property
    cachedResponseForRequest(_: NSURLRequest): CachedURLResponse;
    getCachedResponseForDataTaskWithCompletionHandler(_: URLSessionDataTask, completionHandler?: (p1: CachedURLResponse) => void): void;
    static createWithMemoryCapacityDiskCapacityDirectoryURL(memoryCapacity: number, diskCapacity: number, directoryURL?: NSURL): URLCache;
    static createWithMemoryCapacityDiskCapacityDiskPath(memoryCapacity: number, diskCapacity: number, diskPath?: string): URLCache;
    removeAllCachedResponses(): void;
    removeCachedResponseForDataTask(_: URLSessionDataTask): void;
    removeCachedResponseForRequest(_: NSURLRequest): void;
    removeCachedResponsesSinceDate(_: Date): void;
    storeCachedResponseForDataTask(_: CachedURLResponse, forDataTask: URLSessionDataTask): void;
    storeCachedResponseForRequest(_: CachedURLResponse, forRequest: NSURLRequest): void;
  }

  // interface
  class NSURLComponents extends NSObject /* implements NSCopying */ {
    static componentsWithString(string: string): NSURLComponents;
    static componentsWithURLResolvingAgainstBaseURL(url: NSURL, resolvingAgainstBaseURL: boolean): NSURLComponents;
    URL: NSURL; // property
    fragment: string;
    setFragment(_: string) // property
    host: string;
    setHost(_: string) // property
    password: string;
    setPassword(_: string) // property
    path: string;
    setPath(_: string) // property
    percentEncodedFragment: string;
    setPercentEncodedFragment(_: string) // property
    percentEncodedHost: string;
    setPercentEncodedHost(_: string) // property
    percentEncodedPassword: string;
    setPercentEncodedPassword(_: string) // property
    percentEncodedPath: string;
    setPercentEncodedPath(_: string) // property
    percentEncodedQuery: string;
    setPercentEncodedQuery(_: string) // property
    percentEncodedQueryItems: NSURLQueryItem[];
    setPercentEncodedQueryItems(_: NSURLQueryItem[]) // property
    percentEncodedUser: string;
    setPercentEncodedUser(_: string) // property
    port: number;
    setPort(_: number) // property
    query: string;
    setQuery(_: string) // property
    queryItems: NSURLQueryItem[];
    setQueryItems(_: NSURLQueryItem[]) // property
    rangeOfFragment: NSRange; // property
    rangeOfHost: NSRange; // property
    rangeOfPassword: NSRange; // property
    rangeOfPath: NSRange; // property
    rangeOfPort: NSRange; // property
    rangeOfQuery: NSRange; // property
    rangeOfScheme: NSRange; // property
    rangeOfUser: NSRange; // property
    scheme: string;
    setScheme(_: string) // property
    string: string; // property
    user: string;
    setUser(_: string) // property
    URLRelativeToURL(relativeTo?: NSURL): NSURL;
    static createWithString(string: string): NSURLComponents;
    static createWithUrlResolvingAgainstBaseURL(URL: NSURL, resolvingAgainstBaseURL: boolean): NSURLComponents;
  }

  // interface
  class NSURLConnection extends NSObject {
    static canHandleRequest(_: NSURLRequest): boolean;
    currentRequest: NSURLRequest; // property
    originalRequest: NSURLRequest; // property
    cancel(): void;
    scheduleInRunLoopForMode(in_: RunLoop, forMode: string): void;
    setDelegateQueue(_?: OperationQueue): void;
    start(): void;
    unscheduleFromRunLoopForMode(from: RunLoop, forMode: string): void;
  }

  interface NSURLConnectionDataDelegate extends NSURLConnectionDelegate {
    // instance method
    connectionWillSendRequestRedirectResponse?(_: NSURLConnection, willSend: NSURLRequest, redirectResponse?: URLResponse): NSURLRequest;
    // instance method
    connectionDidReceiveResponse?(_: NSURLConnection, didReceive: URLResponse): void;
    // instance method
    connectionDidReceiveData?(_: NSURLConnection, didReceive: NSData): void;
    // instance method
    connectionDidSendBodyDataTotalBytesWrittenTotalBytesExpectedToWrite?(_: NSURLConnection, didSendBodyData: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
    // instance method
    connectionNeedNewBodyStream?(_: NSURLConnection, needNewBodyStream: NSURLRequest): InputStream;
    // instance method
    connectionWillCacheResponse?(_: NSURLConnection, willCacheResponse: CachedURLResponse): CachedURLResponse;
    // instance method
    connectionDidFinishLoading?(_: NSURLConnection): void;
  }

  interface NSURLConnectionDelegate extends NSObject {
    // instance method
    connectionWillSendRequestForAuthenticationChallenge?(_: NSURLConnection, willSendRequestFor: URLAuthenticationChallenge): void;
    // instance method
    connectionDidFailWithError?(_: NSURLConnection, didFailWithError: NSError): void;
    // instance method
    connectionShouldUseCredentialStorage?(_: NSURLConnection): boolean;
  }

  interface NSURLConnectionDownloadDelegate extends NSURLConnectionDelegate {
    // instance method
    connectionDidWriteDataTotalBytesWrittenExpectedTotalBytes?(_: NSURLConnection, didWriteData: number, totalBytesWritten: number, expectedTotalBytes: number): void;
    // instance method
    connectionDidFinishDownloadingDestinationURL(_: NSURLConnection, destinationURL: NSURL): void;
    // instance method
    connectionDidResumeDownloadingTotalBytesWrittenExpectedTotalBytes?(_: NSURLConnection, totalBytesWritten: number, expectedTotalBytes: number): void;
  }

  // interface
  class URLCredential extends NSObject /* implements NSCopying, NSSecureCoding */ {
    certificates: any[]; // property
    hasPassword: boolean; // property
    identity: any; // property
    password: string; // property
    persistence: URLCredential.Persistence; // property
    user: string; // property
    static createWithIdentityCertificatesPersistence(identity: any, certificates?: any[], persistence?: URLCredential.Persistence): URLCredential;
    static createWithTrust(trust: any): URLCredential;
    static createWithUserPasswordPersistence(user: string, password: string, persistence: URLCredential.Persistence): URLCredential;
  }

  // interface
  class URLCredentialStorage extends NSObject {
    allCredentials: Map<URLProtectionSpace, Map<string, URLCredential>>; // property
    static sharedCredentialStorage: URLCredentialStorage; // property
    credentialsForProtectionSpace(_: URLProtectionSpace): Map<string, URLCredential>;
    defaultCredentialForProtectionSpace(_: URLProtectionSpace): URLCredential;
    getCredentialsForTaskCompletionHandler(for_: URLProtectionSpace, task: URLSessionTask, completionHandler?: (p1: Map<string, URLCredential>) => void): void;
    getDefaultCredentialForProtectionSpaceWithTaskCompletionHandler(_: URLProtectionSpace, task: URLSessionTask, completionHandler?: (p1: URLCredential) => void): void;
    removeCredentialForProtectionSpace(_: URLCredential, forProtectionSpace: URLProtectionSpace): void;
    removeCredentialForProtectionSpaceOptions(_: URLCredential, forProtectionSpace: URLProtectionSpace, options?: Map<string, any>): void;
    removeCredentialForProtectionSpaceOptionsTask(_: URLCredential, forProtectionSpace: URLProtectionSpace, options?: Map<string, any>, task?: URLSessionTask): void;
    setCredentialForProtectionSpace(_: URLCredential, for_: URLProtectionSpace): void;
    setCredentialForProtectionSpaceTask(_: URLCredential, for_: URLProtectionSpace, task: URLSessionTask): void;
    setDefaultCredentialForProtectionSpace(_: URLCredential, forProtectionSpace: URLProtectionSpace): void;
    setDefaultCredentialForProtectionSpaceTask(_: URLCredential, forProtectionSpace: URLProtectionSpace, task: URLSessionTask): void;
  }

  // interface
  class NSURLDownload extends NSObject {
    static canResumeDownloadDecodedWithEncodingMIMEType(withEncodingMIMEType: string): boolean;
    deletesFileUponFailure: boolean;
    setDeletesFileUponFailure(_: boolean) // property
    request: NSURLRequest; // property
    resumeData: NSData; // property
    cancel(): void;
    setDestinationAllowOverwrite(_: string, allowOverwrite: boolean): void;
  }

  interface NSURLDownloadDelegate extends NSObject {
    // instance method
    downloadWillSendRequestRedirectResponse?(_: NSURLDownload, willSend: NSURLRequest, redirectResponse?: URLResponse): NSURLRequest;
    // instance method
    downloadDidReceiveAuthenticationChallenge?(_: NSURLDownload, didReceive: URLAuthenticationChallenge): void;
    // instance method
    downloadDidCancelAuthenticationChallenge?(_: NSURLDownload, didCancel: URLAuthenticationChallenge): void;
    // instance method
    downloadDidReceiveResponse?(_: NSURLDownload, didReceive: URLResponse): void;
    // instance method
    downloadWillResumeWithResponseFromByte?(_: NSURLDownload, willResumeWith: URLResponse, fromByte: number): void;
    // instance method
    downloadCanAuthenticateAgainstProtectionSpace?(_: NSURLDownload, canAuthenticateAgainstProtectionSpace: URLProtectionSpace): boolean;
    // instance method
    downloadDecideDestinationWithSuggestedFilename?(_: NSURLDownload, decideDestinationWithSuggestedFilename: string): void;
    // instance method
    downloadDidCreateDestination?(_: NSURLDownload, didCreateDestination: string): void;
    // instance method
    downloadDidFailWithError?(_: NSURLDownload, didFailWithError: NSError): void;
    // instance method
    downloadDidReceiveDataOfLength?(_: NSURLDownload, didReceiveDataOfLength: number): void;
    // instance method
    downloadShouldDecodeSourceDataOfMIMEType?(_: NSURLDownload, shouldDecodeSourceDataOfMIMEType: string): boolean;
    // instance method
    downloadDidBegin?(_: NSURLDownload): void;
    // instance method
    downloadDidFinish?(_: NSURLDownload): void;
    // instance method
    downloadShouldUseCredentialStorage?(_: NSURLDownload): boolean;
  }

  // interface
  class NSURLHandle extends NSObject {
  }

  // interface
  class URLProtectionSpace extends NSObject /* implements NSCopying, NSSecureCoding */ {
    authenticationMethod: string; // property
    distinguishedNames: NSData[]; // property
    host: string; // property
    isProxy: boolean; // property
    port: number; // property
    protocol: string; // property
    proxyType: string; // property
    realm: string; // property
    receivesCredentialSecurely: boolean; // property
    serverTrust: any; // property
    static createWithHostPortProtocolRealmAuthenticationMethod(host: string, port: number, protocol?: string, realm?: string, authenticationMethod?: string): URLProtectionSpace;
    static createWithProxyHostPortTypeRealmAuthenticationMethod(proxyHost: string, port: number, type?: string, realm?: string, authenticationMethod?: string): URLProtectionSpace;
  }

  // interface
  class URLProtocol extends NSObject {
    static canInitWithRequest(_: NSURLRequest): boolean;
    static canInitWithTask(_: URLSessionTask): boolean;
    static canonicalRequestForRequest(_: NSURLRequest): NSURLRequest;
    static propertyForKeyInRequest(_: string, inRequest: NSURLRequest): any;
    static registerClass(_: typeof NSObject): boolean;
    static removePropertyForKeyInRequest(_: string, inRequest: NSMutableURLRequest): void;
    static requestIsCacheEquivalentToRequest(_: NSURLRequest, toRequest: NSURLRequest): boolean;
    static setPropertyForKeyInRequest(_: any, forKey: string, inRequest: NSMutableURLRequest): void;
    static unregisterClass(_: typeof NSObject): void;
    cachedResponse: CachedURLResponse; // property
    client: URLProtocolClient; // property
    request: NSURLRequest; // property
    task: URLSessionTask; // property
    static createWithRequestCachedResponseClient(request: NSURLRequest, cachedResponse?: CachedURLResponse, client?: URLProtocolClient): URLProtocol;
    static createWithTaskCachedResponseClient(task: URLSessionTask, cachedResponse?: CachedURLResponse, client?: URLProtocolClient): URLProtocol;
    startLoading(): void;
    stopLoading(): void;
  }

  interface URLProtocolClient extends NSObject {
    // instance method
    URLProtocolCachedResponseIsValid(_: URLProtocol, cachedResponseIsValid: CachedURLResponse): void;
    // instance method
    URLProtocolDidCancelAuthenticationChallenge(_: URLProtocol, didCancelAuthenticationChallenge: URLAuthenticationChallenge): void;
    // instance method
    URLProtocolDidFailWithError(_: URLProtocol, didFailWithError: NSError): void;
    // instance method
    URLProtocolDidLoadData(_: URLProtocol, didLoadData: NSData): void;
    // instance method
    URLProtocolDidReceiveAuthenticationChallenge(_: URLProtocol, didReceiveAuthenticationChallenge: URLAuthenticationChallenge): void;
    // instance method
    URLProtocolDidReceiveResponseCacheStoragePolicy(_: URLProtocol, didReceiveResponse: URLResponse, cacheStoragePolicy: URLCache.StoragePolicy): void;
    // instance method
    URLProtocolWasRedirectedToRequestRedirectResponse(_: URLProtocol, wasRedirectedToRequest: NSURLRequest, redirectResponse: URLResponse): void;
    // instance method
    URLProtocolDidFinishLoading(_: URLProtocol): void;
  }

  // interface
  class NSURLQueryItem extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static queryItemWithNameValue(name: string, value?: string): NSURLQueryItem;
    name: string; // property
    value: string; // property
    static createWithNameValue(name: string, value?: string): NSURLQueryItem;
  }

  // interface
  class NSURLRequest extends NSObject /* implements NSCopying, NSMutableCopying, NSSecureCoding */ {
    HTTPBody: NSData; // property
    HTTPBodyStream: InputStream; // property
    HTTPMethod: string; // property
    HTTPShouldHandleCookies: boolean; // property
    HTTPShouldUsePipelining: boolean; // property
    URL: NSURL; // property
    allHTTPHeaderFields: Map<string, string>; // property
    allowsCellularAccess: boolean; // property
    allowsConstrainedNetworkAccess: boolean; // property
    allowsExpensiveNetworkAccess: boolean; // property
    cachePolicy: NSURLRequest.CachePolicy; // property
    mainDocumentURL: NSURL; // property
    networkServiceType: NSURLRequest.NetworkServiceType; // property
    timeoutInterval: number; // property
    static createWithUrl(URL: NSURL): NSURLRequest;
    static createWithUrlCachePolicyTimeoutInterval(URL: NSURL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: number): NSURLRequest;
    valueForHTTPHeaderField(forHTTPHeaderField: string): string;
  }

  // interface
  class URLResponse extends NSObject /* implements NSCopying, NSSecureCoding */ {
    MIMEType: string; // property
    URL: NSURL; // property
    expectedContentLength: number; // property
    suggestedFilename: string; // property
    textEncodingName: string; // property
    static createWithUrlMIMETypeExpectedContentLengthTextEncodingName(URL: NSURL, MIMEType?: string, expectedContentLength?: number, textEncodingName?: string): URLResponse;
  }

  // interface
  class URLSession extends NSObject {
    configuration: URLSessionConfiguration; // property
    delegate: URLSessionDelegate; // property
    delegateQueue: OperationQueue; // property
    sessionDescription: string;
    setSessionDescription(_: string) // property
    static sharedSession: URLSession; // property
    dataTaskWithRequest(_: NSURLRequest): URLSessionDataTask;
    dataTaskWithRequestWithCompletionHandler(_: NSURLRequest, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionDataTask;
    dataTaskWithURL(_: NSURL): URLSessionDataTask;
    dataTaskWithURLWithCompletionHandler(_: NSURL, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionDataTask;
    downloadTaskWithRequest(_: NSURLRequest): URLSessionDownloadTask;
    downloadTaskWithRequestWithCompletionHandler(_: NSURLRequest, completionHandler?: (p1: NSURL, p2: URLResponse, p3: NSError) => void): URLSessionDownloadTask;
    downloadTaskWithResumeData(_: NSData): URLSessionDownloadTask;
    downloadTaskWithResumeDataWithCompletionHandler(_: NSData, completionHandler?: (p1: NSURL, p2: URLResponse, p3: NSError) => void): URLSessionDownloadTask;
    downloadTaskWithURL(_: NSURL): URLSessionDownloadTask;
    downloadTaskWithURLWithCompletionHandler(_: NSURL, completionHandler?: (p1: NSURL, p2: URLResponse, p3: NSError) => void): URLSessionDownloadTask;
    finishTasksAndInvalidate(): void;
    flushWithCompletionHandler(_: () => void): void;
    getAllTasksWithCompletionHandler(_: (p1: URLSessionTask[]) => void): void;
    getTasksWithCompletionHandler(_: (p1: URLSessionDataTask[], p2: URLSessionUploadTask[], p3: URLSessionDownloadTask[]) => void): void;
    invalidateAndCancel(): void;
    resetWithCompletionHandler(_: () => void): void;
    streamTaskWithHostNamePort(_: string, port: number): URLSessionStreamTask;
    streamTaskWithNetService(_: NetService): URLSessionStreamTask;
    uploadTaskWithRequestFromData(_: NSURLRequest, fromData: NSData): URLSessionUploadTask;
    uploadTaskWithRequestWithFromDataCompletionHandler(_: NSURLRequest, fromData?: NSData, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionUploadTask;
    uploadTaskWithRequestFromFile(_: NSURLRequest, fromFile: NSURL): URLSessionUploadTask;
    uploadTaskWithRequestWithFromFileCompletionHandler(_: NSURLRequest, fromFile: NSURL, completionHandler?: (p1: NSData, p2: URLResponse, p3: NSError) => void): URLSessionUploadTask;
    uploadTaskWithStreamedRequest(_: NSURLRequest): URLSessionUploadTask;
    webSocketTaskWithRequest(_: NSURLRequest): URLSessionWebSocketTask;
    webSocketTaskWithURL(_: NSURL): URLSessionWebSocketTask;
    webSocketTaskWithURLProtocols(_: NSURL, protocols: string[]): URLSessionWebSocketTask;
  }

  // interface
  class URLSessionConfiguration extends NSObject /* implements NSCopying */ {
    static backgroundSessionConfigurationWithIdentifier(withIdentifier: string): URLSessionConfiguration;
    HTTPAdditionalHeaders: Map<any, any>;
    setHTTPAdditionalHeaders(_: Map<any, any>) // property
    HTTPCookieAcceptPolicy: HTTPCookie.AcceptPolicy;
    setHTTPCookieAcceptPolicy(_: HTTPCookie.AcceptPolicy) // property
    HTTPCookieStorage: HTTPCookieStorage;
    setHTTPCookieStorage(_: HTTPCookieStorage) // property
    HTTPMaximumConnectionsPerHost: number;
    setHTTPMaximumConnectionsPerHost(_: number) // property
    HTTPShouldSetCookies: boolean;
    setHTTPShouldSetCookies(_: boolean) // property
    HTTPShouldUsePipelining: boolean;
    setHTTPShouldUsePipelining(_: boolean) // property
    TLSMaximumSupportedProtocol: SSLProtocol;
    setTLSMaximumSupportedProtocol(_: SSLProtocol) // property
    TLSMaximumSupportedProtocolVersion: tls_protocol_version_t;
    setTLSMaximumSupportedProtocolVersion(_: tls_protocol_version_t) // property
    TLSMinimumSupportedProtocol: SSLProtocol;
    setTLSMinimumSupportedProtocol(_: SSLProtocol) // property
    TLSMinimumSupportedProtocolVersion: tls_protocol_version_t;
    setTLSMinimumSupportedProtocolVersion(_: tls_protocol_version_t) // property
    URLCache: URLCache;
    setURLCache(_: URLCache) // property
    URLCredentialStorage: URLCredentialStorage;
    setURLCredentialStorage(_: URLCredentialStorage) // property
    allowsCellularAccess: boolean;
    setAllowsCellularAccess(_: boolean) // property
    allowsConstrainedNetworkAccess: boolean;
    setAllowsConstrainedNetworkAccess(_: boolean) // property
    allowsExpensiveNetworkAccess: boolean;
    setAllowsExpensiveNetworkAccess(_: boolean) // property
    connectionProxyDictionary: Map<any, any>;
    setConnectionProxyDictionary(_: Map<any, any>) // property
    isDiscretionary: boolean;
    setDiscretionary(_: boolean) // property
    identifier: string; // property
    networkServiceType: NSURLRequest.NetworkServiceType;
    setNetworkServiceType(_: NSURLRequest.NetworkServiceType) // property
    protocolClasses: typeof NSObject[];
    setProtocolClasses(_: typeof NSObject[]) // property
    requestCachePolicy: NSURLRequest.CachePolicy;
    setRequestCachePolicy(_: NSURLRequest.CachePolicy) // property
    sharedContainerIdentifier: string;
    setSharedContainerIdentifier(_: string) // property
    shouldUseExtendedBackgroundIdleMode: boolean;
    setShouldUseExtendedBackgroundIdleMode(_: boolean) // property
    timeoutIntervalForRequest: number;
    setTimeoutIntervalForRequest(_: number) // property
    timeoutIntervalForResource: number;
    setTimeoutIntervalForResource(_: number) // property
    waitsForConnectivity: boolean;
    setWaitsForConnectivity(_: boolean) // property
    static defaultSessionConfiguration: URLSessionConfiguration; // property
    static ephemeralSessionConfiguration: URLSessionConfiguration; // property
  }

  interface URLSessionDataDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionDataTaskDidBecomeDownloadTask?(_: URLSession, dataTask: URLSessionDataTask, didBecomeDownloadTask: URLSessionDownloadTask): void;
    // instance method
    URLSessionDataTaskDidBecomeStreamTask?(_: URLSession, dataTask: URLSessionDataTask, didBecomeStreamTask: URLSessionStreamTask): void;
    // instance method
    URLSessionDataTaskDidReceiveData?(_: URLSession, dataTask: URLSessionDataTask, didReceiveData: NSData): void;
    // instance method
    URLSessionWithDataTaskDidReceiveResponseCompletionHandler?(_: URLSession, dataTask: URLSessionDataTask, didReceiveResponse: URLResponse, completionHandler: (p1: URLSession.ResponseDisposition) => void): void;
    // instance method
    URLSessionWithDataTaskWillCacheResponseCompletionHandler?(_: URLSession, dataTask: URLSessionDataTask, willCacheResponse: CachedURLResponse, completionHandler?: (p1: CachedURLResponse) => void): void;
  }

  // interface
  class URLSessionDataTask extends URLSessionTask {
  }

  interface URLSessionDelegate extends NSObject {
    // instance method
    URLSessionDidBecomeInvalidWithError?(_: URLSession, didBecomeInvalidWithError?: NSError): void;
    // instance method
    URLSessionWithDidReceiveChallengeCompletionHandler?(_: URLSession, didReceiveChallenge: URLAuthenticationChallenge, completionHandler?: (p1: URLSession.AuthChallengeDisposition, p2: URLCredential) => void): void;
  }

  interface URLSessionDownloadDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionDownloadTaskDidFinishDownloadingToURL(_: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingToURL: NSURL): void;
    // instance method
    URLSessionDownloadTaskDidResumeAtOffsetExpectedTotalBytes?(_: URLSession, downloadTask: URLSessionDownloadTask, didResumeAtOffset: number, expectedTotalBytes: number): void;
    // instance method
    URLSessionDownloadTaskDidWriteDataTotalBytesWrittenTotalBytesExpectedToWrite?(_: URLSession, downloadTask: URLSessionDownloadTask, didWriteData: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  }

  // interface
  class URLSessionDownloadTask extends URLSessionTask {
    cancelByProducingResumeData(_?: (p1: NSData) => void): void;
  }

  interface URLSessionStreamDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionBetterRouteDiscoveredForStreamTask?(_: URLSession, betterRouteDiscoveredForStreamTask: URLSessionStreamTask): void;
    // instance method
    URLSessionReadClosedForStreamTask?(_: URLSession, readClosedForStreamTask: URLSessionStreamTask): void;
    // instance method
    URLSessionStreamTaskDidBecomeInputStreamOutputStream?(_: URLSession, streamTask: URLSessionStreamTask, didBecomeInputStream: InputStream, outputStream: OutputStream): void;
    // instance method
    URLSessionWriteClosedForStreamTask?(_: URLSession, writeClosedForStreamTask: URLSessionStreamTask): void;
  }

  // interface
  class URLSessionStreamTask extends URLSessionTask {
    captureStreams(): void;
    closeRead(): void;
    closeWrite(): void;
    readDataOfMinLengthWithMaxLengthTimeoutCompletionHandler(_: number, maxLength: number, timeout: number, completionHandler?: (p1: NSData, p2: boolean, p3: NSError) => void): void;
    startSecureConnection(): void;
    writeDataWithTimeoutCompletionHandler(_: NSData, timeout: number, completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class URLSessionTask extends NSObject /* implements NSCopying, ProgressReporting */ {
    countOfBytesClientExpectsToReceive: number;
    setCountOfBytesClientExpectsToReceive(_: number) // property
    countOfBytesClientExpectsToSend: number;
    setCountOfBytesClientExpectsToSend(_: number) // property
    countOfBytesExpectedToReceive: number; // property
    countOfBytesExpectedToSend: number; // property
    countOfBytesReceived: number; // property
    countOfBytesSent: number; // property
    currentRequest: NSURLRequest; // property
    earliestBeginDate: Date;
    setEarliestBeginDate(_: Date) // property
    error: NSError; // property
    originalRequest: NSURLRequest; // property
    priority: number;
    setPriority(_: number) // property
    response: URLResponse; // property
    state: URLSessionTask.State; // property
    taskDescription: string;
    setTaskDescription(_: string) // property
    taskIdentifier: number; // property
    cancel(): void;
    resume(): void;
    suspend(): void;
  }

  interface URLSessionTaskDelegate extends URLSessionDelegate {
    // instance method
    URLSessionTaskDidCompleteWithError?(_: URLSession, task: URLSessionTask, didCompleteWithError?: NSError): void;
    // instance method
    URLSessionTaskDidFinishCollectingMetrics?(_: URLSession, task: URLSessionTask, didFinishCollectingMetrics: URLSessionTaskMetrics): void;
    // instance method
    URLSessionWithTaskDidReceiveChallengeCompletionHandler?(_: URLSession, task: URLSessionTask, didReceiveChallenge: URLAuthenticationChallenge, completionHandler?: (p1: URLSession.AuthChallengeDisposition, p2: URLCredential) => void): void;
    // instance method
    URLSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend?(_: URLSession, task: URLSessionTask, didSendBodyData: number, totalBytesSent: number, totalBytesExpectedToSend: number): void;
    // instance method
    URLSessionWithTaskNeedNewBodyStream?(_: URLSession, task: URLSessionTask, needNewBodyStream?: (p1: InputStream) => void): void;
    // instance method
    URLSessionWithTaskWillBeginDelayedRequestCompletionHandler?(_: URLSession, task: URLSessionTask, willBeginDelayedRequest: NSURLRequest, completionHandler?: (p1: NSURLSessionDelayedRequestDisposition, p2: NSURLRequest) => void): void;
    // instance method
    URLSessionWithTaskWillPerformHTTPRedirectionNewRequestCompletionHandler?(_: URLSession, task: URLSessionTask, willPerformHTTPRedirection: HTTPURLResponse, newRequest: NSURLRequest, completionHandler?: (p1: NSURLRequest) => void): void;
    // instance method
    URLSessionTaskIsWaitingForConnectivity?(_: URLSession, taskIsWaitingForConnectivity: URLSessionTask): void;
  }

  // interface
  class URLSessionTaskMetrics extends NSObject {
    redirectCount: number; // property
    taskInterval: NSDateInterval; // property
    transactionMetrics: URLSessionTaskTransactionMetrics[]; // property
  }

  // interface
  class URLSessionTaskTransactionMetrics extends NSObject {
    isCellular: boolean; // property
    connectEndDate: Date; // property
    connectStartDate: Date; // property
    isConstrained: boolean; // property
    countOfRequestBodyBytesBeforeEncoding: number; // property
    countOfRequestBodyBytesSent: number; // property
    countOfRequestHeaderBytesSent: number; // property
    countOfResponseBodyBytesAfterDecoding: number; // property
    countOfResponseBodyBytesReceived: number; // property
    countOfResponseHeaderBytesReceived: number; // property
    domainLookupEndDate: Date; // property
    domainLookupStartDate: Date; // property
    isExpensive: boolean; // property
    fetchStartDate: Date; // property
    localAddress: string; // property
    localPort: number; // property
    isMultipath: boolean; // property
    negotiatedTLSCipherSuite: number; // property
    negotiatedTLSProtocolVersion: number; // property
    networkProtocolName: string; // property
    isProxyConnection: boolean; // property
    remoteAddress: string; // property
    remotePort: number; // property
    request: NSURLRequest; // property
    requestEndDate: Date; // property
    requestStartDate: Date; // property
    resourceFetchType: URLSessionTaskMetrics.ResourceFetchType; // property
    response: URLResponse; // property
    responseEndDate: Date; // property
    responseStartDate: Date; // property
    isReusedConnection: boolean; // property
    secureConnectionEndDate: Date; // property
    secureConnectionStartDate: Date; // property
  }

  // interface
  class URLSessionUploadTask extends URLSessionDataTask {
  }

  interface URLSessionWebSocketDelegate extends URLSessionTaskDelegate {
    // instance method
    URLSessionWebSocketTaskDidCloseWithCodeReason?(_: URLSession, webSocketTask: URLSessionWebSocketTask, didCloseWithCode: URLSessionWebSocketTask.CloseCode, reason?: NSData): void;
    // instance method
    URLSessionWebSocketTaskDidOpenWithProtocol?(_: URLSession, webSocketTask: URLSessionWebSocketTask, didOpenWithProtocol?: string): void;
  }

  // interface
  class NSURLSessionWebSocketMessage extends NSObject {
    data: NSData; // property
    string: string; // property
    type: NSURLSessionWebSocketMessageType; // property
    static createWithData(data: NSData): NSURLSessionWebSocketMessage;
    static createWithString(string: string): NSURLSessionWebSocketMessage;
  }

  // interface
  class URLSessionWebSocketTask extends URLSessionTask {
    closeCode: URLSessionWebSocketTask.CloseCode; // property
    closeReason: NSData; // property
    maximumMessageSize: number;
    setMaximumMessageSize(_: number) // property
    cancelWithCloseCodeReason(_: URLSessionWebSocketTask.CloseCode, reason?: NSData): void;
    receiveMessageWithCompletionHandler(_?: (p1: NSURLSessionWebSocketMessage, p2: NSError) => void): void;
    sendMessageWithCompletionHandler(_: NSURLSessionWebSocketMessage, completionHandler?: (p1: NSError) => void): void;
    sendPingWithPongReceiveHandler(_?: (p1: NSError) => void): void;
  }

  // interface
  class NSUUID extends NSObject /* implements NSCopying, NSSecureCoding */ {
    UUIDString: string; // property
    getUUIDBytes(_: number): void;
    static createWithUUIDBytes(UUIDBytes?: number): NSUUID;
    static createWithUUIDString(UUIDString: string): NSUUID;
  }

  // interface
  class NSUbiquitousKeyValueStore extends NSObject {
    dictionaryRepresentation: Map<string, any>; // property
    static defaultStore: NSUbiquitousKeyValueStore; // property
    arrayForKey(forKey: string): any[];
    boolForKey(forKey: string): boolean;
    dataForKey(forKey: string): NSData;
    dictionaryForKey(forKey: string): Map<string, any>;
    doubleForKey(forKey: string): number;
    longLongForKey(forKey: string): number;
    objectForKey(forKey: string): any;
    removeObjectForKey(forKey: string): void;
    setArrayForKey(_?: any[], forKey?: string): void;
    setBoolForKey(_: boolean, forKey: string): void;
    setDataForKey(_?: NSData, forKey?: string): void;
    setDictionaryForKey(_?: Map<string, any>, forKey?: string): void;
    setDoubleForKey(_: number, forKey: string): void;
    setLongLongForKey(_: number, forKey: string): void;
    setObjectForKey(_?: any, forKey?: string): void;
    setStringForKey(_?: string, forKey?: string): void;
    stringForKey(forKey: string): string;
    synchronize(): boolean;
  }

  // interface
  class UndoManager extends NSObject {
    canRedo: boolean; // property
    canUndo: boolean; // property
    groupingLevel: number; // property
    groupsByEvent: boolean;
    setGroupsByEvent(_: boolean) // property
    levelsOfUndo: number;
    setLevelsOfUndo(_: number) // property
    redoActionIsDiscardable: boolean; // property
    redoActionName: string; // property
    redoMenuItemTitle: string; // property
    isRedoing: boolean; // property
    runLoopModes: string[];
    setRunLoopModes(_: string[]) // property
    undoActionIsDiscardable: boolean; // property
    undoActionName: string; // property
    undoMenuItemTitle: string; // property
    isUndoRegistrationEnabled: boolean; // property
    isUndoing: boolean; // property
    beginUndoGrouping(): void;
    disableUndoRegistration(): void;
    enableUndoRegistration(): void;
    endUndoGrouping(): void;
    prepareWithInvocationTarget(_: any): any;
    redo(): void;
    redoMenuTitleForUndoActionName(_: string): string;
    registerUndoWithTargetSelectorObject(_: any, selector: string, object_?: any): void;
    removeAllActions(): void;
    removeAllActionsWithTarget(_: any): void;
    setActionIsDiscardable(_: boolean): void;
    setActionName(_: string): void;
    undo(): void;
    undoMenuTitleForUndoActionName(_: string): string;
    undoNestedGroup(): void;
  }

  // export declare function NSUnionRange(range1: NSRange, range2: NSRange): NSRange;

  // export declare function NSUnionRect(aRect: CGRect, bRect: CGRect): CGRect;

  // interface
  class NSUniqueIDSpecifier extends NSScriptObjectSpecifier {
    uniqueID: any;
    setUniqueID(_: any) // property
    static createWithContainerClassDescriptionContainerSpecifierKeyUniqueID(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, uniqueID?: any): NSUniqueIDSpecifier;
  }

  // interface
  class Unit extends NSObject /* implements NSCopying, NSSecureCoding */ {
    symbol: string; // property
    static createWithSymbol(symbol: string): Unit;
  }

  // interface
  class UnitAcceleration extends Dimension /* implements NSSecureCoding */ {
    static gravity: UnitAcceleration; // property
    static metersPerSecondSquared: UnitAcceleration; // property
  }

  // interface
  class UnitAngle extends Dimension /* implements NSSecureCoding */ {
    static arcMinutes: UnitAngle; // property
    static arcSeconds: UnitAngle; // property
    static degrees: UnitAngle; // property
    static gradians: UnitAngle; // property
    static radians: UnitAngle; // property
    static revolutions: UnitAngle; // property
  }

  // interface
  class UnitArea extends Dimension /* implements NSSecureCoding */ {
    static acres: UnitArea; // property
    static ares: UnitArea; // property
    static hectares: UnitArea; // property
    static squareCentimeters: UnitArea; // property
    static squareFeet: UnitArea; // property
    static squareInches: UnitArea; // property
    static squareKilometers: UnitArea; // property
    static squareMegameters: UnitArea; // property
    static squareMeters: UnitArea; // property
    static squareMicrometers: UnitArea; // property
    static squareMiles: UnitArea; // property
    static squareMillimeters: UnitArea; // property
    static squareNanometers: UnitArea; // property
    static squareYards: UnitArea; // property
  }

  // interface
  class UnitConcentrationMass extends Dimension /* implements NSSecureCoding */ {
    static millimolesPerLiterWithGramsPerMole(_: number): UnitConcentrationMass;
    static gramsPerLiter: UnitConcentrationMass; // property
    static milligramsPerDeciliter: UnitConcentrationMass; // property
  }

  // interface
  class UnitConverter extends NSObject {
    baseUnitValueFromValue(_: number): number;
    valueFromBaseUnitValue(_: number): number;
  }

  // interface
  class UnitConverterLinear extends UnitConverter /* implements NSSecureCoding */ {
    coefficient: number; // property
    constant: number; // property
    static createWithCoefficient(coefficient: number): UnitConverterLinear;
    static createWithCoefficientConstant(coefficient: number, constant: number): UnitConverterLinear;
  }

  // interface
  class UnitDispersion extends Dimension /* implements NSSecureCoding */ {
    static partsPerMillion: UnitDispersion; // property
  }

  // interface
  class UnitDuration extends Dimension /* implements NSSecureCoding */ {
    static hours: UnitDuration; // property
    static microseconds: UnitDuration; // property
    static milliseconds: UnitDuration; // property
    static minutes: UnitDuration; // property
    static nanoseconds: UnitDuration; // property
    static picoseconds: UnitDuration; // property
    static seconds: UnitDuration; // property
  }

  // interface
  class UnitElectricCharge extends Dimension /* implements NSSecureCoding */ {
    static ampereHours: UnitElectricCharge; // property
    static coulombs: UnitElectricCharge; // property
    static kiloampereHours: UnitElectricCharge; // property
    static megaampereHours: UnitElectricCharge; // property
    static microampereHours: UnitElectricCharge; // property
    static milliampereHours: UnitElectricCharge; // property
  }

  // interface
  class UnitElectricCurrent extends Dimension /* implements NSSecureCoding */ {
    static amperes: UnitElectricCurrent; // property
    static kiloamperes: UnitElectricCurrent; // property
    static megaamperes: UnitElectricCurrent; // property
    static microamperes: UnitElectricCurrent; // property
    static milliamperes: UnitElectricCurrent; // property
  }

  // interface
  class UnitElectricPotentialDifference extends Dimension /* implements NSSecureCoding */ {
    static kilovolts: UnitElectricPotentialDifference; // property
    static megavolts: UnitElectricPotentialDifference; // property
    static microvolts: UnitElectricPotentialDifference; // property
    static millivolts: UnitElectricPotentialDifference; // property
    static volts: UnitElectricPotentialDifference; // property
  }

  // interface
  class UnitElectricResistance extends Dimension /* implements NSSecureCoding */ {
    static kiloohms: UnitElectricResistance; // property
    static megaohms: UnitElectricResistance; // property
    static microohms: UnitElectricResistance; // property
    static milliohms: UnitElectricResistance; // property
    static ohms: UnitElectricResistance; // property
  }

  // interface
  class UnitEnergy extends Dimension /* implements NSSecureCoding */ {
    static calories: UnitEnergy; // property
    static joules: UnitEnergy; // property
    static kilocalories: UnitEnergy; // property
    static kilojoules: UnitEnergy; // property
    static kilowattHours: UnitEnergy; // property
  }

  // interface
  class UnitFrequency extends Dimension /* implements NSSecureCoding */ {
    static framesPerSecond: UnitFrequency; // property
    static gigahertz: UnitFrequency; // property
    static hertz: UnitFrequency; // property
    static kilohertz: UnitFrequency; // property
    static megahertz: UnitFrequency; // property
    static microhertz: UnitFrequency; // property
    static millihertz: UnitFrequency; // property
    static nanohertz: UnitFrequency; // property
    static terahertz: UnitFrequency; // property
  }

  // interface
  class UnitFuelEfficiency extends Dimension /* implements NSSecureCoding */ {
    static litersPer100Kilometers: UnitFuelEfficiency; // property
    static milesPerGallon: UnitFuelEfficiency; // property
    static milesPerImperialGallon: UnitFuelEfficiency; // property
  }

  // interface
  class UnitIlluminance extends Dimension /* implements NSSecureCoding */ {
    static lux: UnitIlluminance; // property
  }

  // interface
  class NSUnitInformationStorage extends Dimension /* implements NSSecureCoding */ {
    static bits: NSUnitInformationStorage; // property
    static bytes: NSUnitInformationStorage; // property
    static exabits: NSUnitInformationStorage; // property
    static exabytes: NSUnitInformationStorage; // property
    static exbibits: NSUnitInformationStorage; // property
    static exbibytes: NSUnitInformationStorage; // property
    static gibibits: NSUnitInformationStorage; // property
    static gibibytes: NSUnitInformationStorage; // property
    static gigabits: NSUnitInformationStorage; // property
    static gigabytes: NSUnitInformationStorage; // property
    static kibibits: NSUnitInformationStorage; // property
    static kibibytes: NSUnitInformationStorage; // property
    static kilobits: NSUnitInformationStorage; // property
    static kilobytes: NSUnitInformationStorage; // property
    static mebibits: NSUnitInformationStorage; // property
    static mebibytes: NSUnitInformationStorage; // property
    static megabits: NSUnitInformationStorage; // property
    static megabytes: NSUnitInformationStorage; // property
    static nibbles: NSUnitInformationStorage; // property
    static pebibits: NSUnitInformationStorage; // property
    static pebibytes: NSUnitInformationStorage; // property
    static petabits: NSUnitInformationStorage; // property
    static petabytes: NSUnitInformationStorage; // property
    static tebibits: NSUnitInformationStorage; // property
    static tebibytes: NSUnitInformationStorage; // property
    static terabits: NSUnitInformationStorage; // property
    static terabytes: NSUnitInformationStorage; // property
    static yobibits: NSUnitInformationStorage; // property
    static yobibytes: NSUnitInformationStorage; // property
    static yottabits: NSUnitInformationStorage; // property
    static yottabytes: NSUnitInformationStorage; // property
    static zebibits: NSUnitInformationStorage; // property
    static zebibytes: NSUnitInformationStorage; // property
    static zettabits: NSUnitInformationStorage; // property
    static zettabytes: NSUnitInformationStorage; // property
  }

  // interface
  class UnitLength extends Dimension /* implements NSSecureCoding */ {
    static astronomicalUnits: UnitLength; // property
    static centimeters: UnitLength; // property
    static decameters: UnitLength; // property
    static decimeters: UnitLength; // property
    static fathoms: UnitLength; // property
    static feet: UnitLength; // property
    static furlongs: UnitLength; // property
    static hectometers: UnitLength; // property
    static inches: UnitLength; // property
    static kilometers: UnitLength; // property
    static lightyears: UnitLength; // property
    static megameters: UnitLength; // property
    static meters: UnitLength; // property
    static micrometers: UnitLength; // property
    static miles: UnitLength; // property
    static millimeters: UnitLength; // property
    static nanometers: UnitLength; // property
    static nauticalMiles: UnitLength; // property
    static parsecs: UnitLength; // property
    static picometers: UnitLength; // property
    static scandinavianMiles: UnitLength; // property
    static yards: UnitLength; // property
  }

  // interface
  class UnitMass extends Dimension /* implements NSSecureCoding */ {
    static carats: UnitMass; // property
    static centigrams: UnitMass; // property
    static decigrams: UnitMass; // property
    static grams: UnitMass; // property
    static kilograms: UnitMass; // property
    static metricTons: UnitMass; // property
    static micrograms: UnitMass; // property
    static milligrams: UnitMass; // property
    static nanograms: UnitMass; // property
    static ounces: UnitMass; // property
    static ouncesTroy: UnitMass; // property
    static picograms: UnitMass; // property
    static poundsMass: UnitMass; // property
    static shortTons: UnitMass; // property
    static slugs: UnitMass; // property
    static stones: UnitMass; // property
  }

  // interface
  class UnitPower extends Dimension /* implements NSSecureCoding */ {
    static femtowatts: UnitPower; // property
    static gigawatts: UnitPower; // property
    static horsepower: UnitPower; // property
    static kilowatts: UnitPower; // property
    static megawatts: UnitPower; // property
    static microwatts: UnitPower; // property
    static milliwatts: UnitPower; // property
    static nanowatts: UnitPower; // property
    static picowatts: UnitPower; // property
    static terawatts: UnitPower; // property
    static watts: UnitPower; // property
  }

  // interface
  class UnitPressure extends Dimension /* implements NSSecureCoding */ {
    static bars: UnitPressure; // property
    static gigapascals: UnitPressure; // property
    static hectopascals: UnitPressure; // property
    static inchesOfMercury: UnitPressure; // property
    static kilopascals: UnitPressure; // property
    static megapascals: UnitPressure; // property
    static millibars: UnitPressure; // property
    static millimetersOfMercury: UnitPressure; // property
    static newtonsPerMetersSquared: UnitPressure; // property
    static poundsForcePerSquareInch: UnitPressure; // property
  }

  // interface
  class UnitSpeed extends Dimension /* implements NSSecureCoding */ {
    static kilometersPerHour: UnitSpeed; // property
    static knots: UnitSpeed; // property
    static metersPerSecond: UnitSpeed; // property
    static milesPerHour: UnitSpeed; // property
  }

  // interface
  class UnitTemperature extends Dimension /* implements NSSecureCoding */ {
    static celsius: UnitTemperature; // property
    static fahrenheit: UnitTemperature; // property
    static kelvin: UnitTemperature; // property
  }

  // interface
  class UnitVolume extends Dimension /* implements NSSecureCoding */ {
    static acreFeet: UnitVolume; // property
    static bushels: UnitVolume; // property
    static centiliters: UnitVolume; // property
    static cubicCentimeters: UnitVolume; // property
    static cubicDecimeters: UnitVolume; // property
    static cubicFeet: UnitVolume; // property
    static cubicInches: UnitVolume; // property
    static cubicKilometers: UnitVolume; // property
    static cubicMeters: UnitVolume; // property
    static cubicMiles: UnitVolume; // property
    static cubicMillimeters: UnitVolume; // property
    static cubicYards: UnitVolume; // property
    static cups: UnitVolume; // property
    static deciliters: UnitVolume; // property
    static fluidOunces: UnitVolume; // property
    static gallons: UnitVolume; // property
    static imperialFluidOunces: UnitVolume; // property
    static imperialGallons: UnitVolume; // property
    static imperialPints: UnitVolume; // property
    static imperialQuarts: UnitVolume; // property
    static imperialTablespoons: UnitVolume; // property
    static imperialTeaspoons: UnitVolume; // property
    static kiloliters: UnitVolume; // property
    static liters: UnitVolume; // property
    static megaliters: UnitVolume; // property
    static metricCups: UnitVolume; // property
    static milliliters: UnitVolume; // property
    static pints: UnitVolume; // property
    static quarts: UnitVolume; // property
    static tablespoons: UnitVolume; // property
    static teaspoons: UnitVolume; // property
  }

  // interface
  class NSUserActivity extends NSObject {
    activityType: string; // property
    delegate: NSUserActivityDelegate;
    setDelegate(_: NSUserActivityDelegate) // property
    detectedBarcodeDescriptor: CIBarcodeDescriptor; // property
    isEligibleForHandoff: boolean;
    setEligibleForHandoff(_: boolean) // property
    isEligibleForPublicIndexing: boolean;
    setEligibleForPublicIndexing(_: boolean) // property
    isEligibleForSearch: boolean;
    setEligibleForSearch(_: boolean) // property
    expirationDate: Date;
    setExpirationDate(_: Date) // property
    keywords: NSSet<string>;
    setKeywords(_: NSSet<string>) // property
    needsSave: boolean;
    setNeedsSave(_: boolean) // property
    referrerURL: NSURL;
    setReferrerURL(_: NSURL) // property
    requiredUserInfoKeys: NSSet<string>;
    setRequiredUserInfoKeys(_: NSSet<string>) // property
    supportsContinuationStreams: boolean;
    setSupportsContinuationStreams(_: boolean) // property
    targetContentIdentifier: string;
    setTargetContentIdentifier(_: string) // property
    title: string;
    setTitle(_: string) // property
    userInfo: Map<any, any>;
    setUserInfo(_: Map<any, any>) // property
    webpageURL: NSURL;
    setWebpageURL(_: NSURL) // property
    addUserInfoEntriesFromDictionary(from: Map<any, any>): void;
    becomeCurrent(): void;
    getContinuationStreamsWithCompletionHandler(completionHandler?: (p1: InputStream, p2: OutputStream, p3: NSError) => void): void;
    static createWithActivityType(activityType: string): NSUserActivity;
    invalidate(): void;
    resignCurrent(): void;
  }

  interface NSUserActivityDelegate extends NSObject {
    // instance method
    userActivityDidReceiveInputStreamOutputStream?(_: NSUserActivity, didReceive: InputStream, outputStream: OutputStream): void;
    // instance method
    userActivityWasContinued?(_: NSUserActivity): void;
    // instance method
    userActivityWillSave?(_: NSUserActivity): void;
  }

  // interface
  class NSUserAppleScriptTask extends NSUserScriptTask {
    executeWithWithAppleEventCompletionHandler(withAppleEvent?: NSAppleEventDescriptor, completionHandler?: (p1: NSAppleEventDescriptor, p2: NSError) => void): void;
  }

  // interface
  class NSUserAutomatorTask extends NSUserScriptTask {
    variables: Map<string, any>;
    setVariables(_: Map<string, any>) // property
    executeWithWithInputCompletionHandler(withInput?: NSSecureCoding, completionHandler?: (p1: any, p2: NSError) => void): void;
  }

  // interface
  class UserDefaults extends NSObject {
    static resetStandardUserDefaults(): void;
    volatileDomainNames: string[]; // property
    static standardUserDefaults: UserDefaults; // property
    URLForKey(_: string): NSURL;
    addSuiteNamed(named: string): void;
    arrayForKey(_: string): any[];
    boolForKey(_: string): boolean;
    dataForKey(_: string): NSData;
    dictionaryForKey(_: string): Map<string, any>;
    dictionaryRepresentation(): Map<string, any>;
    doubleForKey(_: string): number;
    floatForKey(_: string): number;
    static createWithSuiteName(suiteName?: string): UserDefaults;
    integerForKey(_: string): number;
    objectForKey(_: string): any;
    objectIsForcedForKey(_: string): boolean;
    objectIsForcedForKeyInDomain(_: string, inDomain: string): boolean;
    persistentDomainForName(_: string): Map<string, any>;
    registerDefaults(defaults: Map<string, any>): void;
    removeObjectForKey(_: string): void;
    removePersistentDomainForName(_: string): void;
    removeSuiteNamed(named: string): void;
    removeVolatileDomainForName(_: string): void;
    setBoolForKey(_: boolean, forKey: string): void;
    setDoubleForKey(_: number, forKey: string): void;
    setFloatForKey(_: number, forKey: string): void;
    setIntegerForKey(_: number, forKey: string): void;
    setObjectForKey(_?: any, forKey?: string): void;
    setPersistentDomainForName(_: Map<string, any>, forName: string): void;
    setURLForKey(_?: NSURL, forKey?: string): void;
    setVolatileDomainForName(_: Map<string, any>, forName: string): void;
    stringArrayForKey(_: string): string[];
    stringForKey(_: string): string;
    synchronize(): boolean;
    volatileDomainForName(_: string): Map<string, any>;
  }

  // export declare function NSUserName(): string;

  // interface
  class NSUserNotification extends NSObject /* implements NSCopying */ {
    actionButtonTitle: string;
    setActionButtonTitle(_: string) // property
    activationType: NSUserNotification.ActivationType; // property
    actualDeliveryDate: Date; // property
    additionalActions: NSUserNotificationAction[];
    setAdditionalActions(_: NSUserNotificationAction[]) // property
    additionalActivationAction: NSUserNotificationAction; // property
    contentImage: NSImage;
    setContentImage(_: NSImage) // property
    deliveryDate: Date;
    setDeliveryDate(_: Date) // property
    deliveryRepeatInterval: NSDateComponents;
    setDeliveryRepeatInterval(_: NSDateComponents) // property
    deliveryTimeZone: NSTimeZone;
    setDeliveryTimeZone(_: NSTimeZone) // property
    hasActionButton: boolean;
    setHasActionButton(_: boolean) // property
    hasReplyButton: boolean;
    setHasReplyButton(_: boolean) // property
    identifier: string;
    setIdentifier(_: string) // property
    informativeText: string;
    setInformativeText(_: string) // property
    otherButtonTitle: string;
    setOtherButtonTitle(_: string) // property
    isPresented: boolean; // property
    isRemote: boolean; // property
    response: NSAttributedString; // property
    responsePlaceholder: string;
    setResponsePlaceholder(_: string) // property
    soundName: string;
    setSoundName(_: string) // property
    subtitle: string;
    setSubtitle(_: string) // property
    title: string;
    setTitle(_: string) // property
    userInfo: Map<string, any>;
    setUserInfo(_: Map<string, any>) // property
  }

  // interface
  class NSUserNotificationAction extends NSObject /* implements NSCopying */ {
    static actionWithIdentifierTitle(identifier?: string, title?: string): NSUserNotificationAction;
    identifier: string; // property
    title: string; // property
  }

  // interface
  class NSUserNotificationCenter extends NSObject {
    delegate: NSUserNotificationCenterDelegate;
    setDelegate(_: NSUserNotificationCenterDelegate) // property
    deliveredNotifications: NSUserNotification[]; // property
    scheduledNotifications: NSUserNotification[];
    setScheduledNotifications(_: NSUserNotification[]) // property
    static defaultUserNotificationCenter: NSUserNotificationCenter; // property
    deliverNotification(_: NSUserNotification): void;
    removeAllDeliveredNotifications(): void;
    removeDeliveredNotification(_: NSUserNotification): void;
    removeScheduledNotification(_: NSUserNotification): void;
    scheduleNotification(_: NSUserNotification): void;
  }

  interface NSUserNotificationCenterDelegate extends NSObject {
    // instance method
    userNotificationCenterDidDeliverNotification?(_: NSUserNotificationCenter, didDeliver: NSUserNotification): void;
    // instance method
    userNotificationCenterDidActivateNotification?(_: NSUserNotificationCenter, didActivate: NSUserNotification): void;
    // instance method
    userNotificationCenterShouldPresentNotification?(_: NSUserNotificationCenter, shouldPresent: NSUserNotification): boolean;
  }

  // interface
  class NSUserScriptTask extends NSObject {
    scriptURL: NSURL; // property
    executeWithCompletionHandler(completionHandler?: (p1: NSError) => void): void;
    static createWithUrl(URL: NSURL): NSUserScriptTask;
  }

  // interface
  class NSUserUnixTask extends NSUserScriptTask {
    standardError: FileHandle;
    setStandardError(_: FileHandle) // property
    standardInput: FileHandle;
    setStandardInput(_: FileHandle) // property
    standardOutput: FileHandle;
    setStandardOutput(_: FileHandle) // property
    executeWithWithArgumentsCompletionHandler(withArguments?: string[], completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class NSValue extends NSObject /* implements NSCopying, NSSecureCoding */ {
    static valueWithCMTime(time: CMTime): NSValue;
    static valueWithCMTimeMapping(timeMapping: CMTimeMapping): NSValue;
    static valueWithCMTimeRange(timeRange: CMTimeRange): NSValue;
    CATransform3DValue: CATransform3D; // property
    CMTimeMappingValue: CMTimeMapping; // property
    CMTimeRangeValue: CMTimeRange; // property
    CMTimeValue: CMTime; // property
    edgeInsetsValue: NSEdgeInsets; // property
    nonretainedObjectValue: any; // property
    objCType: string; // property
    pointValue: CGPoint; // property
    pointerValue: any; // property
    rangeValue: NSRange; // property
    rectValue: CGRect; // property
    sizeValue: CGSize; // property
    getValue(_: any): void;
    getValueSize(_: any, size: number): void;
    static createWithBytesObjCType(bytes: any, objCType: string): NSValue;
    isEqualToValue(to: NSValue): boolean;
  }

  // interface
  class ValueTransformer extends NSObject {
    static allowsReverseTransformation(): boolean;
    static setValueTransformerForName(_?: ValueTransformer, forName?: string): void;
    static transformedValueClass(): typeof NSObject;
    static valueTransformerNames(): string[];
    reverseTransformedValue(_?: any): any;
    transformedValue(_?: any): any;
  }

  // interface
  class NSWhoseSpecifier extends NSScriptObjectSpecifier {
    endSubelementIdentifier: NSWhoseSpecifier.SubelementIdentifier;
    setEndSubelementIdentifier(_: NSWhoseSpecifier.SubelementIdentifier) // property
    endSubelementIndex: number;
    setEndSubelementIndex(_: number) // property
    startSubelementIdentifier: NSWhoseSpecifier.SubelementIdentifier;
    setStartSubelementIdentifier(_: NSWhoseSpecifier.SubelementIdentifier) // property
    startSubelementIndex: number;
    setStartSubelementIndex(_: number) // property
    test: NSScriptWhoseTest;
    setTest(_: NSScriptWhoseTest) // property
    static createWithContainerClassDescriptionContainerSpecifierKeyTest(containerClassDescription: NSScriptClassDescription, containerSpecifier?: NSScriptObjectSpecifier, key?: string, test?: NSScriptWhoseTest): NSWhoseSpecifier;
  }

  // interface
  class XMLDTD extends XMLNode {
    static predefinedEntityDeclarationForName(_: string): XMLDTDNode;
    publicID: string;
    setPublicID(_: string) // property
    systemID: string;
    setSystemID(_: string) // property
    addChild(_: XMLNode): void;
    attributeDeclarationForNameElementName(_: string, elementName: string): XMLDTDNode;
    elementDeclarationForName(_: string): XMLDTDNode;
    entityDeclarationForName(_: string): XMLDTDNode;
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options: XMLNode.Options): XMLDTD;
    static createWithDataOptions(data: NSData, options: XMLNode.Options): XMLDTD;
    insertChildAtIndex(_: XMLNode, atIndex: number): void;
    insertChildrenAtIndex(_: XMLNode[], atIndex: number): void;
    notationDeclarationForName(_: string): XMLDTDNode;
    removeChildAtIndex(_: number): void;
    replaceChildAtIndexWithNode(_: number, withNode: XMLNode): void;
    setChildren(_?: XMLNode[]): void;
  }

  // interface
  class XMLDTDNode extends XMLNode {
    DTDKind: XMLDTDNode.DTDKind;
    setDTDKind(_: XMLDTDNode.DTDKind) // property
    isExternal: boolean; // property
    notationName: string;
    setNotationName(_: string) // property
    publicID: string;
    setPublicID(_: string) // property
    systemID: string;
    setSystemID(_: string) // property
    static createWithXMLString(XMLString: string): XMLDTDNode;
  }

  // interface
  class XMLDocument extends XMLNode {
    static replacementClassForClass(_: typeof NSObject): typeof NSObject;
    DTD: XMLDTD;
    setDTD(_: XMLDTD) // property
    MIMEType: string;
    setMIMEType(_: string) // property
    XMLData: NSData; // property
    characterEncoding: string;
    setCharacterEncoding(_: string) // property
    documentContentKind: XMLDocument.ContentKind;
    setDocumentContentKind(_: XMLDocument.ContentKind) // property
    isStandalone: boolean;
    setStandalone(_: boolean) // property
    XMLDataWithOptions(_: XMLNode.Options): NSData;
    addChild(_: XMLNode): void;
    static createWithContentsOfURLOptions(contentsOfURL: NSURL, options: XMLNode.Options): XMLDocument;
    static createWithDataOptions(data: NSData, options: XMLNode.Options): XMLDocument;
    static createWithRootElement(rootElement?: XMLElement): XMLDocument;
    static createWithXMLStringOptions(XMLString: string, options: XMLNode.Options): XMLDocument;
    insertChildAtIndex(_: XMLNode, atIndex: number): void;
    insertChildrenAtIndex(_: XMLNode[], atIndex: number): void;
    objectByApplyingXSLTArgumentsError(arguments_: NSData, error?: Map<string, string>): any;
    objectByApplyingXSLTAtURLArgumentsError(arguments_: NSURL, error?: Map<string, string>): any;
    objectByApplyingXSLTStringArgumentsError(arguments_: string, error?: Map<string, string>): any;
    removeChildAtIndex(_: number): void;
    replaceChildAtIndexWithNode(_: number, withNode: XMLNode): void;
    rootElement(): XMLElement;
    setChildren(_?: XMLNode[]): void;
    setRootElement(_: XMLElement): void;
    validateAndReturnError(): boolean;
  }

  // interface
  class XMLElement extends XMLNode {
    attributes: XMLNode[];
    setAttributes(_: XMLNode[]) // property
    namespaces: XMLNode[];
    setNamespaces(_: XMLNode[]) // property
    addAttribute(_: XMLNode): void;
    addChild(_: XMLNode): void;
    addNamespace(_: XMLNode): void;
    attributeForLocalNameUri(_: string, URI?: string): XMLNode;
    attributeForName(_: string): XMLNode;
    elementsForLocalNameUri(_: string, URI?: string): XMLElement[];
    elementsForName(_: string): XMLElement[];
    static createWithName(name: string): XMLElement;
    static createWithNameUri(name: string, URI?: string): XMLElement;
    static createWithNameStringValue(name: string, stringValue?: string): XMLElement;
    static createWithXMLString(XMLString: string): XMLElement;
    insertChildAtIndex(_: XMLNode, atIndex: number): void;
    insertChildrenAtIndex(_: XMLNode[], atIndex: number): void;
    namespaceForPrefix(_: string): XMLNode;
    normalizeAdjacentTextNodesPreservingCDATA(_: boolean): void;
    removeAttributeForName(_: string): void;
    removeChildAtIndex(_: number): void;
    removeNamespaceForPrefix(_: string): void;
    replaceChildAtIndexWithNode(_: number, withNode: XMLNode): void;
    resolveNamespaceForName(_: string): XMLNode;
    resolvePrefixForNamespaceURI(_: string): string;
    setAttributesAsDictionary(_: Map<any, any>): void;
    setAttributesWithDictionary(_: Map<string, string>): void;
    setChildren(_?: XMLNode[]): void;
  }

  // interface
  class XMLNode extends NSObject /* implements NSCopying */ {
    static DTDNodeWithXMLString(_: string): any;
    static attributeWithNameUriStringValue(_: string, URI: string, stringValue: string): any;
    static attributeWithNameStringValue(_: string, stringValue: string): any;
    static commentWithStringValue(_: string): any;
    static document(): any;
    static documentWithRootElement(_: XMLElement): any;
    static elementWithName(_: string): any;
    static elementWithNameUri(_: string, URI: string): any;
    static elementWithNameChildrenAttributes(_: string, children?: XMLNode[], attributes?: XMLNode[]): any;
    static elementWithNameStringValue(_: string, stringValue: string): any;
    static localNameForName(_: string): string;
    static namespaceWithNameStringValue(_: string, stringValue: string): any;
    static predefinedNamespaceForPrefix(_: string): XMLNode;
    static prefixForName(_: string): string;
    static processingInstructionWithNameStringValue(_: string, stringValue: string): any;
    static textWithStringValue(_: string): any;
    URI: string;
    setURI(_: string) // property
    XMLString: string; // property
    XPath: string; // property
    childCount: number; // property
    children: XMLNode[]; // property
    index: number; // property
    kind: XMLNode.Kind; // property
    level: number; // property
    localName: string; // property
    name: string;
    setName(_: string) // property
    nextNode: XMLNode; // property
    nextSibling: XMLNode; // property
    objectValue: any;
    setObjectValue(_: any) // property
    parent: XMLNode; // property
    prefix: string; // property
    previousNode: XMLNode; // property
    previousSibling: XMLNode; // property
    rootDocument: XMLDocument; // property
    stringValue: string;
    setStringValue(_: string) // property
    XMLStringWithOptions(_: XMLNode.Options): string;
    canonicalXMLStringPreservingComments(_: boolean): string;
    childAtIndex(_: number): XMLNode;
    detach(): void;
    static createWithKind(kind: XMLNode.Kind): XMLNode;
    static createWithKindOptions(kind: XMLNode.Kind, options: XMLNode.Options): XMLNode;
    nodesForXPathError(error: string): XMLNode[];
    objectsForXQueryConstantsError(constants: string, error?: Map<string, any>): any[];
    objectsForXQueryError(error: string): any[];
    setStringValueResolvingEntities(_: string, resolvingEntities: boolean): void;
  }

  // interface
  class XMLParser extends NSObject {
    allowedExternalEntityURLs: NSSet<NSURL>;
    setAllowedExternalEntityURLs(_: NSSet<NSURL>) // property
    columnNumber: number; // property
    delegate: XMLParserDelegate;
    setDelegate(_: XMLParserDelegate) // property
    externalEntityResolvingPolicy: XMLParser.ExternalEntityResolvingPolicy;
    setExternalEntityResolvingPolicy(_: XMLParser.ExternalEntityResolvingPolicy) // property
    lineNumber: number; // property
    parserError: NSError; // property
    publicID: string; // property
    shouldProcessNamespaces: boolean;
    setShouldProcessNamespaces(_: boolean) // property
    shouldReportNamespacePrefixes: boolean;
    setShouldReportNamespacePrefixes(_: boolean) // property
    shouldResolveExternalEntities: boolean;
    setShouldResolveExternalEntities(_: boolean) // property
    systemID: string; // property
    abortParsing(): void;
    static createWithContentsOfURL(contentsOfURL: NSURL): XMLParser;
    static createWithData(data: NSData): XMLParser;
    static createWithStream(stream: InputStream): XMLParser;
    parse(): boolean;
  }

  interface XMLParserDelegate extends NSObject {
    // instance method
    parserDidEndElementNamespaceURIQualifiedName?(_: XMLParser, didEndElement: string, namespaceURI?: string, qualifiedName?: string): void;
    // instance method
    parserDidEndMappingPrefix?(_: XMLParser, didEndMappingPrefix: string): void;
    // instance method
    parserDidStartElementNamespaceURIQualifiedNameAttributes?(_: XMLParser, didStartElement: string, namespaceURI?: string, qualifiedName?: string, attributes?: Map<string, string>): void;
    // instance method
    parserDidStartMappingPrefixToURI?(_: XMLParser, didStartMappingPrefix: string, toURI: string): void;
    // instance method
    parserFoundAttributeDeclarationWithNameForElementTypeDefaultValue?(_: XMLParser, foundAttributeDeclarationWithName: string, forElement: string, type?: string, defaultValue?: string): void;
    // instance method
    parserFoundCDATA?(_: XMLParser, foundCDATA: NSData): void;
    // instance method
    parserFoundCharacters?(_: XMLParser, foundCharacters: string): void;
    // instance method
    parserFoundComment?(_: XMLParser, foundComment: string): void;
    // instance method
    parserFoundElementDeclarationWithNameModel?(_: XMLParser, foundElementDeclarationWithName: string, model: string): void;
    // instance method
    parserFoundExternalEntityDeclarationWithNamePublicIDSystemID?(_: XMLParser, foundExternalEntityDeclarationWithName: string, publicID?: string, systemID?: string): void;
    // instance method
    parserFoundIgnorableWhitespace?(_: XMLParser, foundIgnorableWhitespace: string): void;
    // instance method
    parserFoundInternalEntityDeclarationWithNameValue?(_: XMLParser, foundInternalEntityDeclarationWithName: string, value?: string): void;
    // instance method
    parserFoundNotationDeclarationWithNamePublicIDSystemID?(_: XMLParser, foundNotationDeclarationWithName: string, publicID?: string, systemID?: string): void;
    // instance method
    parserFoundProcessingInstructionWithTargetData?(_: XMLParser, foundProcessingInstructionWithTarget: string, data?: string): void;
    // instance method
    parserFoundUnparsedEntityDeclarationWithNamePublicIDSystemIDNotationName?(_: XMLParser, foundUnparsedEntityDeclarationWithName: string, publicID?: string, systemID?: string, notationName?: string): void;
    // instance method
    parserParseErrorOccurred?(_: XMLParser, parseErrorOccurred: NSError): void;
    // instance method
    parserResolveExternalEntityNameSystemID?(_: XMLParser, resolveExternalEntityName: string, systemID?: string): NSData;
    // instance method
    parserValidationErrorOccurred?(_: XMLParser, validationErrorOccurred: NSError): void;
    // instance method
    parserDidEndDocument?(_: XMLParser): void;
    // instance method
    parserDidStartDocument?(_: XMLParser): void;
  }

  // interface
  class NSXPCCoder extends NSCoder {
    connection: NSXPCConnection; // property
    userInfo: NSObject;
    setUserInfo(_: NSObject) // property
    decodeXPCObjectOfTypeForKey(ofType: any, forKey: string): NSObject;
    encodeXPCObjectForKey(_: NSObject, forKey: string): void;
  }

  // interface
  class NSXPCConnection extends NSObject /* implements NSXPCProxyCreating */ {
    static currentConnection(): NSXPCConnection;
    auditSessionIdentifier: number; // property
    effectiveGroupIdentifier: number; // property
    effectiveUserIdentifier: number; // property
    endpoint: NSXPCListenerEndpoint; // property
    exportedInterface: NSXPCInterface;
    setExportedInterface(_: NSXPCInterface) // property
    exportedObject: any;
    setExportedObject(_: any) // property
    interruptionHandler: () => void;
    setInterruptionHandler(_: () => void) // property
    invalidationHandler: () => void;
    setInvalidationHandler(_: () => void) // property
    processIdentifier: number; // property
    remoteObjectInterface: NSXPCInterface;
    setRemoteObjectInterface(_: NSXPCInterface) // property
    remoteObjectProxy: any; // property
    serviceName: string; // property
    static createWithListenerEndpoint(listenerEndpoint: NSXPCListenerEndpoint): NSXPCConnection;
    static createWithMachServiceNameOptions(machServiceName: string, options: NSXPCConnection.Options): NSXPCConnection;
    static createWithServiceName(serviceName: string): NSXPCConnection;
    invalidate(): void;
    resume(): void;
    scheduleSendBarrierBlock(_: () => void): void;
    suspend(): void;
  }

  // interface
  class NSXPCInterface extends NSObject {
    static interfaceWithProtocol(with_: any /* Protocol */): NSXPCInterface;
    protocol: any /* Protocol */;
    setProtocol(_: any /* Protocol */) // property
    XPCTypeForSelectorArgumentIndexOfReply(for_: string, argumentIndex: number, ofReply: boolean): any;
    classesForSelectorArgumentIndexOfReply(for_: string, argumentIndex: number, ofReply: boolean): NSSet<typeof NSObject>;
    interfaceForSelectorArgumentIndexOfReply(_: string, argumentIndex: number, ofReply: boolean): NSXPCInterface;
    setClassesForArgumentIndexOfReply(_: NSSet<typeof NSObject>, for_: string, argumentIndex: number, ofReply: boolean): void;
    setInterfaceForSelectorArgumentIndexOfReply(_: NSXPCInterface, for_: string, argumentIndex: number, ofReply: boolean): void;
    setXPCTypeForSelectorArgumentIndexOfReply(_: any, for_: string, argumentIndex: number, ofReply: boolean): void;
  }

  // interface
  class NSXPCListener extends NSObject {
    static anonymousListener(): NSXPCListener;
    static serviceListener(): NSXPCListener;
    delegate: NSXPCListenerDelegate;
    setDelegate(_: NSXPCListenerDelegate) // property
    endpoint: NSXPCListenerEndpoint; // property
    static createWithMachServiceName(machServiceName: string): NSXPCListener;
    invalidate(): void;
    resume(): void;
    suspend(): void;
  }

  interface NSXPCListenerDelegate extends NSObject {
    // instance method
    listenerShouldAcceptNewConnection?(_: NSXPCListener, shouldAcceptNewConnection: NSXPCConnection): boolean;
  }

  // interface
  class NSXPCListenerEndpoint extends NSObject /* implements NSSecureCoding */ {
  }

  interface NSXPCProxyCreating {
    remoteObjectProxy: any; // property
    // instance method
    remoteObjectProxyWithErrorHandler(_: (p1: NSError) => void): any;
    // instance method
    synchronousRemoteObjectProxyWithErrorHandler?(_: (p1: NSError) => void): any;
  }

  // struct
  interface __ssFlags {
    delegateLearnsWords: number;
    delegateForgetsWords: number;
    busy: number;
  }

  // interface
  class IKCameraDeviceView extends NSView {
    // cameraDevice: ICCameraDevice;
    // setCameraDevice(_: ICCameraDevice) // property
    canDeleteSelectedItems: boolean; // property
    canDownloadSelectedItems: boolean; // property
    canRotateSelectedItemsLeft: boolean; // property
    canRotateSelectedItemsRight: boolean; // property
    delegate: IKCameraDeviceViewDelegate;
    setDelegate(_: IKCameraDeviceViewDelegate) // property
    displaysDownloadsDirectoryControl: boolean;
    setDisplaysDownloadsDirectoryControl(_: boolean) // property
    displaysPostProcessApplicationControl: boolean;
    setDisplaysPostProcessApplicationControl(_: boolean) // property
    downloadAllControlLabel: string;
    setDownloadAllControlLabel(_: string) // property
    downloadSelectedControlLabel: string;
    setDownloadSelectedControlLabel(_: string) // property
    downloadsDirectory: NSURL;
    setDownloadsDirectory(_: NSURL) // property
    hasDisplayModeIcon: boolean;
    setHasDisplayModeIcon(_: boolean) // property
    hasDisplayModeTable: boolean;
    setHasDisplayModeTable(_: boolean) // property
    iconSize: number;
    setIconSize(_: number) // property
    mode: IKCameraDeviceViewDisplayMode;
    setMode(_: IKCameraDeviceViewDisplayMode) // property
    postProcessApplication: NSURL;
    setPostProcessApplication(_: NSURL) // property
    transferMode: IKCameraDeviceViewTransferMode;
    setTransferMode(_: IKCameraDeviceViewTransferMode) // property
    deleteSelectedItems(_: any): void;
    downloadAllItems(_: any): void;
    downloadSelectedItems(_: any): void;
    rotateLeft(_: any): void;
    rotateRight(_: any): void;
    selectIndexesByExtendingSelection(_: NSIndexSet, byExtendingSelection: boolean): void;
    selectedIndexes(): NSIndexSet;
  }

  interface IKCameraDeviceViewDelegate {
    // instance method
    // cameraDeviceViewDidDownloadFileLocationFileDataError?(_: IKCameraDeviceView, didDownloadFile: ICCameraFile, location: NSURL, fileData: NSData, error: NSError): void;
    // instance method
    cameraDeviceViewDidEncounterError?(_: IKCameraDeviceView, didEncounterError: NSError): void;
    // instance method
    cameraDeviceViewSelectionDidChange?(_: IKCameraDeviceView): void;
  }

  // interface
  class IKDeviceBrowserView extends NSView {
    delegate: IKDeviceBrowserViewDelegate;
    setDelegate(_: IKDeviceBrowserViewDelegate) // property
    displaysLocalCameras: boolean;
    setDisplaysLocalCameras(_: boolean) // property
    displaysLocalScanners: boolean;
    setDisplaysLocalScanners(_: boolean) // property
    displaysNetworkCameras: boolean;
    setDisplaysNetworkCameras(_: boolean) // property
    displaysNetworkScanners: boolean;
    setDisplaysNetworkScanners(_: boolean) // property
    mode: IKDeviceBrowserViewDisplayMode;
    setMode(_: IKDeviceBrowserViewDisplayMode) // property
    // selectedDevice: ICDevice; // property
  }

  interface IKDeviceBrowserViewDelegate {
    // instance method
    deviceBrowserViewDidEncounterError?(_: IKDeviceBrowserView, didEncounterError: NSError): void;
    // instance method
    // deviceBrowserViewSelectionDidChange(_: IKDeviceBrowserView, selectionDidChange: ICDevice): void;
  }

  // interface
  class IKFilterBrowserPanel extends NSPanel {
    static filterBrowserPanelWithStyleMask(withStyleMask: number): any;
    beginSheetWithOptionsModalForWindowModalDelegateDidEndSelectorContextInfo(options: Map<any, any>, modalFor: NSWindow, modalDelegate: any, didEnd: string, contextInfo: any): void;
    beginWithOptionsModelessDelegateDidEndSelectorContextInfo(options: Map<any, any>, modelessDelegate: any, didEnd: string, contextInfo: any): void;
    filterBrowserViewWithOptions(options: Map<any, any>): IKFilterBrowserView;
    filterName(): string;
    finish(_: any): void;
    runModalWithOptions(options: Map<any, any>): number;
  }

  // interface
  class IKFilterBrowserView extends NSView {
    filterName(): string;
    setPreviewState(_: boolean): void;
  }

  interface IKFilterCustomUIProvider {
    // instance method
    provideViewForUIConfigurationExcludedKeys(forUIConfiguration: Map<any, any>, excludedKeys: any[]): IKFilterUIView;
  }

  // interface
  class IKFilterUIView extends NSView {
    static viewWithFrameFilter(withFrame: CGRect, filter: CIFilter): any;
    filter(): CIFilter;
    static createWithFrameFilter(frame: CGRect, filter: CIFilter): IKFilterUIView;
    objectController(): NSObjectController;
  }

  // interface
  class IKImageBrowserCell extends NSObject {
    cellState(): IKImageBrowserCellState;
    frame(): CGRect;
    imageAlignment(): NSImageAlignment;
    imageContainerFrame(): CGRect;
    imageFrame(): CGRect;
    indexOfRepresentedItem(): number;
    isSelected(): boolean;
    layerForType(forType: string): CALayer;
    opacity(): number;
    representedItem(): any;
    selectionFrame(): CGRect;
    subtitleFrame(): CGRect;
    titleFrame(): CGRect;
  }

  // interface
  class IKImageEditPanel extends NSPanel {
    static sharedImageEditPanel(): IKImageEditPanel;
    dataSource: IKImageEditPanelDataSource;
    setDataSource(_: IKImageEditPanelDataSource) // property
    filterArray: any[]; // property
    reloadData(): void;
  }

  interface IKImageEditPanelDataSource {
    // instance method
    hasAdjustMode?(): boolean;
    // instance method
    hasDetailsMode?(): boolean;
    // instance method
    hasEffectsMode?(): boolean;
    // instance method
    image(): any;
    // instance method
    imageProperties?(): Map<any, any>;
    // instance method
    setImageImageProperties(_: any, imageProperties: Map<any, any>): void;
    // instance method
    thumbnailWithMaximumSize?(withMaximumSize: CGSize): any;
  }

  // interface
  class IKImageView extends NSView {
    autohidesScrollers: boolean;
    setAutohidesScrollers(_: boolean) // property
    autoresizes: boolean;
    setAutoresizes(_: boolean) // property
    backgroundColor: NSColor;
    setBackgroundColor(_: NSColor) // property
    currentToolMode: string;
    setCurrentToolMode(_: string) // property
    delegate: any;
    setDelegate(_: any) // property
    doubleClickOpensImageEditPanel: boolean;
    setDoubleClickOpensImageEditPanel(_: boolean) // property
    editable: boolean;
    setEditable(_: boolean) // property
    hasHorizontalScroller: boolean;
    setHasHorizontalScroller(_: boolean) // property
    hasVerticalScroller: boolean;
    setHasVerticalScroller(_: boolean) // property
    imageCorrection: CIFilter;
    setImageCorrection(_: CIFilter) // property
    rotationAngle: number;
    setRotationAngle(_: number) // property
    supportsDragAndDrop: boolean;
    setSupportsDragAndDrop(_: boolean) // property
    zoomFactor: number;
    setZoomFactor(_: number) // property
    convertImagePointToViewPoint(toViewPoint: CGPoint): CGPoint;
    convertImageRectToViewRect(toViewRect: CGRect): CGRect;
    convertViewPointToImagePoint(toImagePoint: CGPoint): CGPoint;
    convertViewRectToImageRect(toImageRect: CGRect): CGRect;
    crop(_: any): void;
    flipImageHorizontal(_: any): void;
    flipImageVertical(_: any): void;
    image(): any;
    imageProperties(): Map<any, any>;
    imageSize(): CGSize;
    overlayForType(forType: string): CALayer;
    rotateImageLeft(_: any): void;
    rotateImageRight(_: any): void;
    scrollToPoint(to: CGPoint): void;
    scrollToRect(to: CGRect): void;
    setImageImageProperties(_: any, imageProperties: Map<any, any>): void;
    setImageWithURL(_: NSURL): void;
    setImageZoomFactorCenterPoint(_: number, center: CGPoint): void;
    setOverlayForType(_: CALayer, forType: string): void;
    setRotationAngleCenterPoint(_: number, center: CGPoint): void;
    zoomImageToActualSize(_: any): void;
    zoomImageToFit(_: any): void;
    zoomImageToRect(to: CGRect): void;
    zoomIn(_: any): void;
    zoomOut(_: any): void;
  }

  // interface
  class IKPictureTaker extends NSPanel {
    static pictureTaker(): IKPictureTaker;
    beginPictureTakerSheetForWindowWithDelegateDidEndSelectorContextInfo(for_: NSWindow, withDelegate: any, didEnd: string, contextInfo: any): void;
    beginPictureTakerWithDelegateDidEndSelectorContextInfo(withDelegate: any, didEnd: string, contextInfo: any): void;
    inputImage(): NSImage;
    mirroring(): boolean;
    outputImage(): NSImage;
    popUpRecentsMenuForViewWithDelegateDidEndSelectorContextInfo(for_: NSView, withDelegate: any, didEnd: string, contextInfo: any): void;
    runModal(): number;
    setInputImage(_: NSImage): void;
    setMirroring(_: boolean): void;
  }

  // interface
  class IKSaveOptions extends NSObject {
    delegate: any;
    setDelegate(_: any) // property
    imageProperties: Map<any, any>; // property
    imageUTType: string; // property
    userSelection: Map<any, any>; // property
    addSaveOptionsAccessoryViewToSavePanel(to: NSSavePanel): void;
    addSaveOptionsToView(to: NSView): void;
    static createWithImagePropertiesImageUTType(imageProperties: Map<any, any>, imageUTType: string): IKSaveOptions;
  }

  // interface
  class IKScannerDeviceView extends NSView {
    delegate: IKScannerDeviceViewDelegate;
    setDelegate(_: IKScannerDeviceViewDelegate) // property
    displaysDownloadsDirectoryControl: boolean;
    setDisplaysDownloadsDirectoryControl(_: boolean) // property
    displaysPostProcessApplicationControl: boolean;
    setDisplaysPostProcessApplicationControl(_: boolean) // property
    documentName: string;
    setDocumentName(_: string) // property
    downloadsDirectory: NSURL;
    setDownloadsDirectory(_: NSURL) // property
    hasDisplayModeAdvanced: boolean;
    setHasDisplayModeAdvanced(_: boolean) // property
    hasDisplayModeSimple: boolean;
    setHasDisplayModeSimple(_: boolean) // property
    mode: IKScannerDeviceViewDisplayMode;
    setMode(_: IKScannerDeviceViewDisplayMode) // property
    overviewControlLabel: string;
    setOverviewControlLabel(_: string) // property
    postProcessApplication: NSURL;
    setPostProcessApplication(_: NSURL) // property
    scanControlLabel: string;
    setScanControlLabel(_: string) // property
    // scannerDevice: ICScannerDevice;
    // setScannerDevice(_: ICScannerDevice) // property
    transferMode: IKScannerDeviceViewTransferMode;
    setTransferMode(_: IKScannerDeviceViewTransferMode) // property
  }

  interface IKScannerDeviceViewDelegate {
    // instance method
    scannerDeviceViewDidScanToURLFileDataError?(_: IKScannerDeviceView, didScanTo: NSURL, fileData: NSData, error: NSError): void;
    // instance method
    scannerDeviceViewDidScanToURLError?(_: IKScannerDeviceView, didScanTo: NSURL, error: NSError): void;
    // instance method
    // scannerDeviceViewDidScanToBandDataScanInfoError?(_: IKScannerDeviceView, didScanTo: ICScannerBandData, scanInfo: Map<any, any>, error: NSError): void;
    // instance method
    scannerDeviceViewDidEncounterError?(_: IKScannerDeviceView, didEncounterError: NSError): void;
  }

  // interface
  class IKSlideshow extends NSObject {
    static canExportToApplication(toApplication: string): boolean;
    static exportSlideshowItemToApplication(_: any, toApplication: string): void;
    static sharedSlideshow(): IKSlideshow;
    autoPlayDelay: number;
    setAutoPlayDelay(_: number) // property
    indexOfCurrentSlideshowItem(): number;
    reloadData(): void;
    reloadSlideshowItemAtIndex(at: number): void;
    runSlideshowWithDataSourceInModeOptions(with_: IKSlideshowDataSource, inMode: string, options: Map<any, any>): void;
    stopSlideshow(_: any): void;
  }

  interface IKSlideshowDataSource {
    // instance method
    canExportSlideshowItemAtIndexToApplication?(at: number, toApplication: string): boolean;
    // instance method
    nameOfSlideshowItemAtIndex?(at: number): string;
    // instance method
    numberOfSlideshowItems(): number;
    // instance method
    slideshowDidChangeCurrentIndex?(_: number): void;
    // instance method
    slideshowDidStop?(): void;
    // instance method
    slideshowItemAtIndex(at: number): any;
    // instance method
    slideshowWillStart?(): void;
  }

  interface QLPreviewItem extends NSObject {
    previewItemDisplayState?: any; // property
    previewItemTitle?: string; // property
    previewItemURL: NSURL; // property
  }

  // interface
  class QLPreviewPanel extends NSPanel {
    static sharedPreviewPanel(): QLPreviewPanel;
    static sharedPreviewPanelExists(): boolean;
    currentController: any; // property
    currentPreviewItem: QLPreviewItem; // property
    currentPreviewItemIndex: number;
    setCurrentPreviewItemIndex(_: number) // property
    dataSource: QLPreviewPanelDataSource;
    setDataSource(_: QLPreviewPanelDataSource) // property
    displayState: any;
    setDisplayState(_: any) // property
    isInFullScreenMode: boolean; // property
    enterFullScreenModeWithOptions(_: NSScreen, withOptions: Map<any, any>): boolean;
    exitFullScreenModeWithOptions(options: Map<any, any>): void;
    refreshCurrentPreviewItem(): void;
    reloadData(): void;
    updateController(): void;
  }

  interface QLPreviewPanelDataSource {
    // instance method
    numberOfPreviewItemsInPreviewPanel(in_: QLPreviewPanel): number;
    // instance method
    previewPanelPreviewItemAtIndex(_: QLPreviewPanel, previewItemAt: number): QLPreviewItem;
  }

  interface QLPreviewPanelDelegate extends NSWindowDelegate {
    // instance method
    previewPanelHandleEvent?(_: QLPreviewPanel, handle: NSEvent): boolean;
    // instance method
    previewPanelSourceFrameOnScreenForPreviewItem?(_: QLPreviewPanel, sourceFrameOnScreenFor: QLPreviewItem): CGRect;
    // instance method
    previewPanelTransitionImageForPreviewItemContentRect?(_: QLPreviewPanel, transitionImageFor: QLPreviewItem, contentRect: NSRect): any;
  }

  // interface
  class QLPreviewView extends NSView {
    autostarts: boolean;
    setAutostarts(_: boolean) // property
    displayState: any;
    setDisplayState(_: any) // property
    previewItem: QLPreviewItem;
    setPreviewItem(_: QLPreviewItem) // property
    shouldCloseWithWindow: boolean;
    setShouldCloseWithWindow(_: boolean) // property
    close(): void;
    static createWithFrameStyle(frame: CGRect, style: QLPreviewViewStyle): QLPreviewView;
    refreshPreviewItem(): void;
  }

  interface QLPreviewingController extends NSObject {
    // instance method
    preparePreviewOfFileWithAtCompletionHandler?(at: NSURL, completionHandler?: (p1: NSError) => void): void;
    // instance method
    preparePreviewOfSearchableItemWithIdentifierQueryStringCompletionHandler?(identifier: string, queryString?: string, completionHandler?: (p1: NSError) => void): void;
  }

  // interface
  class QuartzFilter extends NSObject {
    applyToContext(to: any): boolean;
    localizedName(): string;
    properties(): Map<any, any>;
    removeFromContext(from: any): void;
    url(): NSURL;
  }

  // interface
  class QuartzFilterManager extends NSObject {
    static filtersInDomains(inDomains: any[]): any[];
    delegate(): any;
    filterPanel(): NSPanel;
    filterView(): QuartzFilterView;
    importFilter(_: Map<any, any>): QuartzFilter;
    selectFilter(_: QuartzFilter): boolean;
    selectedFilter(): QuartzFilter;
    setDelegate(_: any): void;
  }

  // interface
  class QuartzFilterView extends NSView {
    sizeToFit(): void;
  }

  interface CAAction {
    // instance method
    runActionForKeyObjectArguments(forKey: string, object_: any, arguments_?: Map<any, any>): void;
  }

  // interface
  class CAAnimation extends NSObject /* implements CAAction, CAMediaTiming, NSCopying, NSSecureCoding */ {
    static defaultValueForKey(forKey: string): any;
    delegate: CAAnimationDelegate;
    setDelegate(_: CAAnimationDelegate) // property
    isRemovedOnCompletion: boolean;
    setRemovedOnCompletion(_: boolean) // property
    timingFunction: CAMediaTimingFunction;
    setTimingFunction(_: CAMediaTimingFunction) // property
    shouldArchiveValueForKey(forKey: string): boolean;
  }

  interface CAAnimationDelegate extends NSObject {
    // instance method
    animationDidStart?(_: CAAnimation): void;
    // instance method
    animationDidStopFinished?(_: CAAnimation, finished: boolean): void;
  }

  // interface
  class CAAnimationGroup extends CAAnimation {
    animations: CAAnimation[];
    setAnimations(_: CAAnimation[]) // property
  }

  // interface
  class CABasicAnimation extends CAPropertyAnimation {
    byValue: any;
    setByValue(_: any) // property
    fromValue: any;
    setFromValue(_: any) // property
    toValue: any;
    setToValue(_: any) // property
  }

  // interface
  class CAConstraint extends NSObject /* implements NSSecureCoding */ {
    static constraintWithAttributeRelativeToAttribute(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute): CAConstraint;
    static constraintWithAttributeRelativeToAttributeOffset(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute, offset: number): CAConstraint;
    static constraintWithAttributeRelativeToAttributeScaleOffset(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute, scale: number, offset: number): CAConstraint;
    attribute: CAConstraintAttribute; // property
    offset: number; // property
    scale: number; // property
    sourceAttribute: CAConstraintAttribute; // property
    sourceName: string; // property
    static createWithAttributeRelativeToAttribute2ScaleOffset(attribute: CAConstraintAttribute, relativeTo: string, attribute2: CAConstraintAttribute, scale: number, offset: number): CAConstraint;
  }

  // interface
  class CAConstraintLayoutManager extends NSObject /* implements CALayoutManager */ {
  }

  // export declare function CACurrentMediaTime(): number;

  // interface
  class CAEDRMetadata extends NSObject {
    static HDR10MetadataWithDisplayInfoContentInfoOpticalOutputScale(displayInfo?: NSData, contentInfo?: NSData, opticalOutputScale?: number): CAEDRMetadata;
    static HDR10MetadataWithMinLuminanceMaxLuminanceOpticalOutputScale(minLuminance: number, maxLuminance: number, opticalOutputScale: number): CAEDRMetadata;
    static HLGMetadata: CAEDRMetadata; // property
  }

  // interface
  class CAEmitterCell extends NSObject /* implements CAMediaTiming, NSSecureCoding */ {
    static defaultValueForKey(forKey: string): any;
    alphaRange: number;
    setAlphaRange(_: number) // property
    alphaSpeed: number;
    setAlphaSpeed(_: number) // property
    birthRate: number;
    setBirthRate(_: number) // property
    blueRange: number;
    setBlueRange(_: number) // property
    blueSpeed: number;
    setBlueSpeed(_: number) // property
    color: any;
    setColor(_: any) // property
    contents: any;
    setContents(_: any) // property
    contentsRect: CGRect;
    setContentsRect(_: CGRect) // property
    contentsScale: number;
    setContentsScale(_: number) // property
    emissionLatitude: number;
    setEmissionLatitude(_: number) // property
    emissionLongitude: number;
    setEmissionLongitude(_: number) // property
    emissionRange: number;
    setEmissionRange(_: number) // property
    emitterCells: CAEmitterCell[];
    setEmitterCells(_: CAEmitterCell[]) // property
    isEnabled: boolean;
    setEnabled(_: boolean) // property
    greenRange: number;
    setGreenRange(_: number) // property
    greenSpeed: number;
    setGreenSpeed(_: number) // property
    lifetime: number;
    setLifetime(_: number) // property
    lifetimeRange: number;
    setLifetimeRange(_: number) // property
    magnificationFilter: string;
    setMagnificationFilter(_: string) // property
    minificationFilter: string;
    setMinificationFilter(_: string) // property
    minificationFilterBias: number;
    setMinificationFilterBias(_: number) // property
    name: string;
    setName(_: string) // property
    redRange: number;
    setRedRange(_: number) // property
    redSpeed: number;
    setRedSpeed(_: number) // property
    scale: number;
    setScale(_: number) // property
    scaleRange: number;
    setScaleRange(_: number) // property
    scaleSpeed: number;
    setScaleSpeed(_: number) // property
    spin: number;
    setSpin(_: number) // property
    spinRange: number;
    setSpinRange(_: number) // property
    style: Map<any, any>;
    setStyle(_: Map<any, any>) // property
    velocity: number;
    setVelocity(_: number) // property
    velocityRange: number;
    setVelocityRange(_: number) // property
    xAcceleration: number;
    setXAcceleration(_: number) // property
    yAcceleration: number;
    setYAcceleration(_: number) // property
    zAcceleration: number;
    setZAcceleration(_: number) // property
    shouldArchiveValueForKey(forKey: string): boolean;
  }

  // interface
  class CAEmitterLayer extends CALayer {
    birthRate: number;
    setBirthRate(_: number) // property
    emitterCells: CAEmitterCell[];
    setEmitterCells(_: CAEmitterCell[]) // property
    emitterDepth: number;
    setEmitterDepth(_: number) // property
    emitterMode: string;
    setEmitterMode(_: string) // property
    emitterPosition: CGPoint;
    setEmitterPosition(_: CGPoint) // property
    emitterShape: string;
    setEmitterShape(_: string) // property
    emitterSize: CGSize;
    setEmitterSize(_: CGSize) // property
    emitterZPosition: number;
    setEmitterZPosition(_: number) // property
    lifetime: number;
    setLifetime(_: number) // property
    preservesDepth: boolean;
    setPreservesDepth(_: boolean) // property
    renderMode: string;
    setRenderMode(_: string) // property
    scale: number;
    setScale(_: number) // property
    seed: number;
    setSeed(_: number) // property
    spin: number;
    setSpin(_: number) // property
    velocity: number;
    setVelocity(_: number) // property
  }

  // interface
  class CAGradientLayer extends CALayer {
    colors: any[];
    setColors(_: any[]) // property
    endPoint: CGPoint;
    setEndPoint(_: CGPoint) // property
    locations: number[];
    setLocations(_: number[]) // property
    startPoint: CGPoint;
    setStartPoint(_: CGPoint) // property
    type: string;
    setType(_: string) // property
  }

  // interface
  class CAKeyframeAnimation extends CAPropertyAnimation {
    biasValues: number[];
    setBiasValues(_: number[]) // property
    calculationMode: string;
    setCalculationMode(_: string) // property
    continuityValues: number[];
    setContinuityValues(_: number[]) // property
    keyTimes: number[];
    setKeyTimes(_: number[]) // property
    path: any;
    setPath(_: any) // property
    rotationMode: string;
    setRotationMode(_: string) // property
    tensionValues: number[];
    setTensionValues(_: number[]) // property
    timingFunctions: CAMediaTimingFunction[];
    setTimingFunctions(_: CAMediaTimingFunction[]) // property
    values: any[];
    setValues(_: any[]) // property
  }

  // interface
  class CALayer extends NSObject /* implements CAMediaTiming, NSSecureCoding */ {
    static cornerCurveExpansionFactor(_: string): number;
    static defaultActionForKey(forKey: string): CAAction;
    static defaultValueForKey(forKey: string): any;
    static needsDisplayForKey(forKey: string): boolean;
    actions: Map<string, CAAction>;
    setActions(_: Map<string, CAAction>) // property
    allowsEdgeAntialiasing: boolean;
    setAllowsEdgeAntialiasing(_: boolean) // property
    allowsGroupOpacity: boolean;
    setAllowsGroupOpacity(_: boolean) // property
    anchorPoint: CGPoint;
    setAnchorPoint(_: CGPoint) // property
    anchorPointZ: number;
    setAnchorPointZ(_: number) // property
    autoresizingMask: CAAutoresizingMask;
    setAutoresizingMask(_: CAAutoresizingMask) // property
    backgroundColor: any;
    setBackgroundColor(_: any) // property
    backgroundFilters: any[];
    setBackgroundFilters(_: any[]) // property
    borderColor: any;
    setBorderColor(_: any) // property
    borderWidth: number;
    setBorderWidth(_: number) // property
    bounds: CGRect;
    setBounds(_: CGRect) // property
    compositingFilter: any;
    setCompositingFilter(_: any) // property
    constraints: CAConstraint[];
    setConstraints(_: CAConstraint[]) // property
    contents: any;
    setContents(_: any) // property
    contentsCenter: CGRect;
    setContentsCenter(_: CGRect) // property
    contentsFormat: string;
    setContentsFormat(_: string) // property
    contentsGravity: string;
    setContentsGravity(_: string) // property
    contentsRect: CGRect;
    setContentsRect(_: CGRect) // property
    contentsScale: number;
    setContentsScale(_: number) // property
    cornerCurve: string;
    setCornerCurve(_: string) // property
    cornerRadius: number;
    setCornerRadius(_: number) // property
    delegate: CALayerDelegate;
    setDelegate(_: CALayerDelegate) // property
    isDoubleSided: boolean;
    setDoubleSided(_: boolean) // property
    drawsAsynchronously: boolean;
    setDrawsAsynchronously(_: boolean) // property
    edgeAntialiasingMask: CAEdgeAntialiasingMask;
    setEdgeAntialiasingMask(_: CAEdgeAntialiasingMask) // property
    filters: any[];
    setFilters(_: any[]) // property
    frame: CGRect;
    setFrame(_: CGRect) // property
    isGeometryFlipped: boolean;
    setGeometryFlipped(_: boolean) // property
    isHidden: boolean;
    setHidden(_: boolean) // property
    layoutManager: CALayoutManager;
    setLayoutManager(_: CALayoutManager) // property
    magnificationFilter: string;
    setMagnificationFilter(_: string) // property
    mask: CALayer;
    setMask(_: CALayer) // property
    maskedCorners: CACornerMask;
    setMaskedCorners(_: CACornerMask) // property
    masksToBounds: boolean;
    setMasksToBounds(_: boolean) // property
    minificationFilter: string;
    setMinificationFilter(_: string) // property
    minificationFilterBias: number;
    setMinificationFilterBias(_: number) // property
    name: string;
    setName(_: string) // property
    needsDisplayOnBoundsChange: boolean;
    setNeedsDisplayOnBoundsChange(_: boolean) // property
    opacity: number;
    setOpacity(_: number) // property
    isOpaque: boolean;
    setOpaque(_: boolean) // property
    position: CGPoint;
    setPosition(_: CGPoint) // property
    rasterizationScale: number;
    setRasterizationScale(_: number) // property
    shadowColor: any;
    setShadowColor(_: any) // property
    shadowOffset: CGSize;
    setShadowOffset(_: CGSize) // property
    shadowOpacity: number;
    setShadowOpacity(_: number) // property
    shadowPath: any;
    setShadowPath(_: any) // property
    shadowRadius: number;
    setShadowRadius(_: number) // property
    shouldRasterize: boolean;
    setShouldRasterize(_: boolean) // property
    style: Map<any, any>;
    setStyle(_: Map<any, any>) // property
    sublayerTransform: CATransform3D;
    setSublayerTransform(_: CATransform3D) // property
    sublayers: CALayer[];
    setSublayers(_: CALayer[]) // property
    superlayer: CALayer; // property
    transform: CATransform3D;
    setTransform(_: CATransform3D) // property
    visibleRect: CGRect; // property
    zPosition: number;
    setZPosition(_: number) // property
    actionForKey(forKey: string): CAAction;
    addAnimationForKey(_: CAAnimation, forKey?: string): void;
    addConstraint(_: CAConstraint): void;
    addSublayer(_: CALayer): void;
    affineTransform(): CGAffineTransform;
    animationForKey(forKey: string): CAAnimation;
    animationKeys(): string[];
    containsPoint(_: CGPoint): boolean;
    contentsAreFlipped(): boolean;
    convertPointFromLayer(_: CGPoint, from?: CALayer): CGPoint;
    convertPointToLayer(_: CGPoint, to?: CALayer): CGPoint;
    convertRectFromLayer(_: CGRect, from?: CALayer): CGRect;
    convertRectToLayer(_: CGRect, to?: CALayer): CGRect;
    convertTimeFromLayer(_: number, from?: CALayer): number;
    convertTimeToLayer(_: number, to?: CALayer): number;
    display(): void;
    displayIfNeeded(): void;
    drawInContext(in_: any): void;
    hitTest(_: CGPoint): CALayer;
    static createWithLayer(layer: any): CALayer;
    insertSublayerAbove(_: CALayer, above?: CALayer): void;
    insertSublayerAtIndex(_: CALayer, at: number): void;
    insertSublayerBelow(_: CALayer, below?: CALayer): void;
    layoutIfNeeded(): void;
    layoutSublayers(): void;
    modelLayer(): CALayer;
    needsDisplay(): boolean;
    needsLayout(): boolean;
    preferredFrameSize(): CGSize;
    presentationLayer(): CALayer;
    removeAllAnimations(): void;
    removeAnimationForKey(forKey: string): void;
    removeFromSuperlayer(): void;
    renderInContext(in_: any): void;
    replaceSublayerWith(_: CALayer, with_: CALayer): void;
    resizeSublayersWithOldSize(withOldSize: CGSize): void;
    resizeWithOldSuperlayerSize(withOldSuperlayerSize: CGSize): void;
    scrollPoint(_: CGPoint): void;
    scrollRectToVisible(_: CGRect): void;
    setAffineTransform(_: CGAffineTransform): void;
    setNeedsDisplay(): void;
    setNeedsDisplayInRect(_: CGRect): void;
    setNeedsLayout(): void;
    shouldArchiveValueForKey(forKey: string): boolean;
  }

  interface CALayerDelegate extends NSObject {
    // instance method
    actionForLayerForKey?(for_: CALayer, forKey: string): CAAction;
    // instance method
    displayLayer?(_: CALayer): void;
    // instance method
    drawLayerInContext?(_: CALayer, in_: any): void;
    // instance method
    layerWillDraw?(_: CALayer): void;
    // instance method
    layoutSublayersOfLayer?(of: CALayer): void;
  }

  interface CALayoutManager extends NSObject {
    // instance method
    invalidateLayoutOfLayer?(of: CALayer): void;
    // instance method
    layoutSublayersOfLayer?(of: CALayer): void;
    // instance method
    preferredSizeOfLayer?(of: CALayer): CGSize;
  }

  interface CAMediaTiming {
    autoreverses: boolean;
    setAutoreverses(_: boolean) // property
    beginTime: number;
    setBeginTime(_: number) // property
    duration: number;
    setDuration(_: number) // property
    fillMode: string;
    setFillMode(_: string) // property
    repeatCount: number;
    setRepeatCount(_: number) // property
    repeatDuration: number;
    setRepeatDuration(_: number) // property
    speed: number;
    setSpeed(_: number) // property
    timeOffset: number;
    setTimeOffset(_: number) // property
  }

  // interface
  class CAMediaTimingFunction extends NSObject /* implements NSSecureCoding */ {
    static functionWithControlPoints(_: number, _2: number, _3: number, _4: number): CAMediaTimingFunction;
    getControlPointAtIndexValues(at: number, values: number): void;
    static createWithControlPoints(_: number, _2: number, _3: number, controlPoints: number): CAMediaTimingFunction;
  }

  // interface CAMetalDrawable extends MTLDrawable {
  // layer: CAMetalLayer; // property
  // texture: MTLTexture; // property
  // }

  // interface
  class CAMetalLayer extends CALayer {
    EDRMetadata: CAEDRMetadata;
    setEDRMetadata(_: CAEDRMetadata) // property
    allowsNextDrawableTimeout: boolean;
    setAllowsNextDrawableTimeout(_: boolean) // property
    colorspace: any;
    setColorspace(_: any) // property
    // device: MTLDevice;
    // setDevice(_: MTLDevice) // property
    displaySyncEnabled: boolean;
    setDisplaySyncEnabled(_: boolean) // property
    drawableSize: CGSize;
    setDrawableSize(_: CGSize) // property
    framebufferOnly: boolean;
    setFramebufferOnly(_: boolean) // property
    maximumDrawableCount: number;
    setMaximumDrawableCount(_: number) // property
    // pixelFormat: MTLPixelFormat;
    // setPixelFormat(_: MTLPixelFormat) // property
    // preferredDevice: MTLDevice; // property
    presentsWithTransaction: boolean;
    setPresentsWithTransaction(_: boolean) // property
    wantsExtendedDynamicRangeContent: boolean;
    setWantsExtendedDynamicRangeContent(_: boolean) // property
    // nextDrawable(): CAMetalDrawable;
  }

  // interface
  class CAPropertyAnimation extends CAAnimation {
    static animationWithKeyPath(keyPath?: string): CAPropertyAnimation;
    isAdditive: boolean;
    setAdditive(_: boolean) // property
    isCumulative: boolean;
    setCumulative(_: boolean) // property
    keyPath: string;
    setKeyPath(_: string) // property
    valueFunction: CAValueFunction;
    setValueFunction(_: CAValueFunction) // property
  }

  // interface
  class CARemoteLayerClient extends NSObject {
    clientId: number; // property
    layer: CALayer;
    setLayer(_: CALayer) // property
    static createWithServerPort(serverPort: number): CARemoteLayerClient;
    invalidate(): void;
  }

  // interface
  class CARemoteLayerServer extends NSObject {
    static sharedServer(): CARemoteLayerServer;
    serverPort: number; // property
  }

  // interface
  class CARenderer extends NSObject {
    bounds: CGRect;
    setBounds(_: CGRect) // property
    layer: CALayer;
    setLayer(_: CALayer) // property
    addUpdateRect(_: CGRect): void;
    beginFrameAtTimeTimeStamp(atTime: number, timeStamp?: CVTimeStamp): void;
    endFrame(): void;
    nextFrameTime(): number;
    render(): void;
    // setDestination(_: MTLTexture): void;
    updateBounds(): CGRect;
  }

  // interface
  class CAReplicatorLayer extends CALayer {
    instanceAlphaOffset: number;
    setInstanceAlphaOffset(_: number) // property
    instanceBlueOffset: number;
    setInstanceBlueOffset(_: number) // property
    instanceColor: any;
    setInstanceColor(_: any) // property
    instanceCount: number;
    setInstanceCount(_: number) // property
    instanceDelay: number;
    setInstanceDelay(_: number) // property
    instanceGreenOffset: number;
    setInstanceGreenOffset(_: number) // property
    instanceRedOffset: number;
    setInstanceRedOffset(_: number) // property
    instanceTransform: CATransform3D;
    setInstanceTransform(_: CATransform3D) // property
    preservesDepth: boolean;
    setPreservesDepth(_: boolean) // property
  }

  // interface
  class CAScrollLayer extends CALayer {
    scrollMode: string;
    setScrollMode(_: string) // property
    scrollToPoint(to: CGPoint): void;
    scrollToRect(to: CGRect): void;
  }

  // interface
  class CAShapeLayer extends CALayer {
    fillColor: any;
    setFillColor(_: any) // property
    fillRule: string;
    setFillRule(_: string) // property
    lineCap: string;
    setLineCap(_: string) // property
    lineDashPattern: number[];
    setLineDashPattern(_: number[]) // property
    lineDashPhase: number;
    setLineDashPhase(_: number) // property
    lineJoin: string;
    setLineJoin(_: string) // property
    lineWidth: number;
    setLineWidth(_: number) // property
    miterLimit: number;
    setMiterLimit(_: number) // property
    path: any;
    setPath(_: any) // property
    strokeColor: any;
    setStrokeColor(_: any) // property
    strokeEnd: number;
    setStrokeEnd(_: number) // property
    strokeStart: number;
    setStrokeStart(_: number) // property
  }

  // interface
  class CASpringAnimation extends CABasicAnimation {
    damping: number;
    setDamping(_: number) // property
    initialVelocity: number;
    setInitialVelocity(_: number) // property
    mass: number;
    setMass(_: number) // property
    settlingDuration: number; // property
    stiffness: number;
    setStiffness(_: number) // property
  }

  // interface
  class CATextLayer extends CALayer {
    alignmentMode: string;
    setAlignmentMode(_: string) // property
    allowsFontSubpixelQuantization: boolean;
    setAllowsFontSubpixelQuantization(_: boolean) // property
    font: any;
    setFont(_: any) // property
    fontSize: number;
    setFontSize(_: number) // property
    foregroundColor: any;
    setForegroundColor(_: any) // property
    string: any;
    setString(_: any) // property
    truncationMode: string;
    setTruncationMode(_: string) // property
    isWrapped: boolean;
    setWrapped(_: boolean) // property
  }

  // interface
  class CATiledLayer extends CALayer {
    static fadeDuration(): number;
    levelsOfDetail: number;
    setLevelsOfDetail(_: number) // property
    levelsOfDetailBias: number;
    setLevelsOfDetailBias(_: number) // property
    tileSize: CGSize;
    setTileSize(_: CGSize) // property
  }

  // interface
  class CATransaction extends NSObject {
    static animationDuration(): number;
    static animationTimingFunction(): CAMediaTimingFunction;
    static begin(): void;
    static commit(): void;
    static completionBlock(): () => void;
    static disableActions(): boolean;
    static flush(): void;
    static lock(): void;
    static setAnimationDuration(_: number): void;
    static setAnimationTimingFunction(_?: CAMediaTimingFunction): void;
    static setCompletionBlock(_?: () => void): void;
    static setDisableActions(_: boolean): void;
    static setValueForKey(_?: any, forKey?: string): void;
    static unlock(): void;
    static valueForKey(forKey: string): any;
  }

  // struct
  interface CATransform3D {
    m11: number;
    m12: number;
    m13: number;
    m14: number;
    m21: number;
    m22: number;
    m23: number;
    m24: number;
    m31: number;
    m32: number;
    m33: number;
    m34: number;
    m41: number;
    m42: number;
    m43: number;
    m44: number;
  }

  // export declare function CATransform3DConcat(a: CATransform3D, b: CATransform3D): CATransform3D;

  // export declare function CATransform3DEqualToTransform(a: CATransform3D, b: CATransform3D): boolean;

  // export declare function CATransform3DGetAffineTransform(t: CATransform3D): CGAffineTransform;

  // export declare function CATransform3DInvert(t: CATransform3D): CATransform3D;

  // export declare function CATransform3DIsAffine(t: CATransform3D): boolean;

  // export declare function CATransform3DIsIdentity(t: CATransform3D): boolean;

  // export declare function CATransform3DMakeAffineTransform(m: CGAffineTransform): CATransform3D;

  // export declare function CATransform3DMakeRotation(angle: number, x: number, y: number, z: number): CATransform3D;

  // export declare function CATransform3DMakeScale(sx: number, sy: number, sz: number): CATransform3D;

  // export declare function CATransform3DMakeTranslation(tx: number, ty: number, tz: number): CATransform3D;

  // export declare function CATransform3DRotate(t: CATransform3D, angle: number, x: number, y: number, z: number): CATransform3D;

  // export declare function CATransform3DScale(t: CATransform3D, sx: number, sy: number, sz: number): CATransform3D;

  // export declare function CATransform3DTranslate(t: CATransform3D, tx: number, ty: number, tz: number): CATransform3D;

  // interface
  class CATransformLayer extends CALayer {
  }

  // interface
  class CATransition extends CAAnimation {
    endProgress: number;
    setEndProgress(_: number) // property
    filter: any;
    setFilter(_: any) // property
    startProgress: number;
    setStartProgress(_: number) // property
    subtype: string;
    setSubtype(_: string) // property
    type: string;
    setType(_: string) // property
  }

  // interface
  class CAValueFunction extends NSObject /* implements NSSecureCoding */ {
    name: string; // property
  }

  // struct
  interface _CALayerIvars {
    refcount: number;
    magic: number;
    layer: any;
  }

  namespace AE {
    export enum AEDataModel { }
  }
  namespace AVAssetExportSession {
    export enum Status {
      Unknown = 0,
      Waiting = 1,
      Exporting = 2,
      Completed = 3,
      Failed = 4,
      Cancelled = 5
    }

  }

  namespace AVAssetImageGenerator {
    export enum Result {
      Succeeded = 0,
      Failed = 1,
      Cancelled = 2
    }

    // export declare let cleanAperture: string;
    // export declare let encodedPixels: string;
    // export declare let productionAperture: string;
  }

  namespace AVAssetReader {
    export enum Status {
      Unknown = 0,
      Reading = 1,
      Completed = 2,
      Failed = 3,
      Cancelled = 4
    }

  }

  namespace AVAssetTrack {
    // export declare let audioFallback: string;
    // export declare let chapterList: string;
    // export declare let forcedSubtitlesOnly: string;
    // export declare let metadataReferent: string;
    // export declare let selectionFollower: string;
    // export declare let timecode: string;
  }

  namespace AVAssetWriter {
    export enum Status {
      Unknown = 0,
      Writing = 1,
      Completed = 2,
      Failed = 3,
      Cancelled = 4
    }

  }

  namespace AVAssetWriterInput {
    // export declare let beforeMainMediaDataNotInterleaved: string;
    // export declare let interleavedWithMainMediaData: string;
  }

  namespace AVAudioSession {
    export enum CategoryOptions {
      MixWithOthers = 1,
      DuckOthers = 2,
      AllowBluetooth = 4,
      DefaultToSpeaker = 8,
      InterruptSpokenAudioAndMixWithOthers = 17,
      AllowBluetoothA2DP = 32,
      AllowAirPlay = 64
    }

    export enum IOType {
      NotSpecified = 0,
      Aggregated = 1
    }

    export enum InterruptionOptions {
      ShouldResume = 1
    }

    export enum InterruptionType {
      Began = 1,
      Ended = 0
    }

    export enum PortOverride {
      None = 0,
      Speaker = 1936747378
    }

    export enum PromptStyle {
      None = 1852796517,
      Short = 1936224884,
      Normal = 1852992876
    }

    export enum RecordPermission {
      Undetermined = 1970168948,
      Denied = 1684369017,
      Granted = 1735552628
    }

    export enum RouteChangeReason {
      Unknown = 0,
      NewDeviceAvailable = 1,
      OldDeviceUnavailable = 2,
      CategoryChange = 3,
      Override = 4,
      WakeFromSleep = 6,
      NoSuitableRouteForCategory = 7,
      RouteConfigurationChange = 8
    }

    export enum RouteSharingPolicy {
      Default = 0,
      LongFormAudio = 1,
      LongForm = 1,
      Independent = 2,
      LongFormVideo = 3
    }

    export enum SetActiveOptions {
      NotifyOthersOnDeactivation = 1
    }

    export enum SilenceSecondaryAudioHintType {
      Begin = 1,
      End = 0
    }

    // export declare let ambient: string;
    // export declare let audioProcessing: string;
    // export declare let multiRoute: string;
    // export declare let playAndRecord: string;
    // export declare let playback: string;
    // export declare let record: string;
    // export declare let soloAmbient: string;
    // export declare let interruptionNotification: string;
    // export declare let lower: string;
    // export declare let upper: string;
    // export declare let mediaServicesWereLostNotification: string;
    // export declare let mediaServicesWereResetNotification: string;
    // export declare let default_: string;
    // export declare let gameChat: string;
    // export declare let measurement: string;
    // export declare let moviePlayback: string;
    // export declare let spokenAudio: string;
    // export declare let videoChat: string;
    // export declare let videoRecording: string;
    // export declare let voiceChat: string;
    // export declare let voicePrompt: string;
    // export declare let back: string;
    // export declare let bottom: string;
    // export declare let front: string;
    // export declare let left: string;
    // export declare let right: string;
    // export declare let top: string;
    // export declare let cardioid: string;
    // export declare let omnidirectional: string;
    // export declare let subcardioid: string;
    // export declare let airPlay: string;
    // export declare let bluetoothA2DP: string;
    // export declare let bluetoothHFP: string;
    // export declare let bluetoothLE: string;
    // export declare let builtInMic: string;
    // export declare let builtInReceiver: string;
    // export declare let builtInSpeaker: string;
    // export declare let carAudio: string;
    // export declare let HDMI: string;
    // export declare let headphones: string;
    // export declare let headsetMic: string;
    // export declare let lineIn: string;
    // export declare let lineOut: string;
    // export declare let usbAudio: string;
    // export declare let routeChangeNotification: string;
    // export declare let silenceSecondaryAudioHintNotification: string;
  }

  namespace AVAudioTimePitchAlgorithm {
    // export declare let lowQualityZeroLatency: string;
    // export declare let spectral: string;
    // export declare let timeDomain: string;
    // export declare let varispeed: string;
  }

  namespace AVAudioUnitComponentManager {
    // export declare let registrationsChangedNotification: string;
  }

  namespace AVCaptureDevice {
    export enum AutoFocusRangeRestriction {
      None = 0,
      Near = 1,
      Far = 2
    }

    export enum Position {
      Unspecified = 0,
      Back = 1,
      Front = 2
    }

    export enum TransportControlsPlaybackMode {
      NotPlayingMode = 0,
      PlayingMode = 1
    }

    export enum ExposureMode {
      Locked = 0,
      AutoExpose = 1,
      ContinuousAutoExposure = 2,
      Custom = 3
    }

    export enum FlashMode {
      Off = 0,
      On = 1,
      Auto = 2
    }

    export enum FocusMode {
      Locked = 0,
      AutoFocus = 1,
      ContinuousAutoFocus = 2
    }

    export enum LensStabilizationStatus {
      Unsupported = 0,
      Off = 1,
      Active = 2,
      OutOfRange = 3,
      Unavailable = 4
    }

    export enum TorchMode {
      Off = 0,
      On = 1,
      Auto = 2
    }

    export enum WhiteBalanceMode {
      Locked = 0,
      AutoWhiteBalance = 1,
      ContinuousAutoWhiteBalance = 2
    }

    // export declare let builtInDualCamera: string;
    // export declare let builtInDualWideCamera: string;
    // export declare let builtInDuoCamera: string;
    // export declare let builtInMicrophone: string;
    // export declare let builtInTelephotoCamera: string;
    // export declare let builtInTripleCamera: string;
    // export declare let builtInTrueDepthCamera: string;
    // export declare let builtInUltraWideCamera: string;
    // export declare let builtInWideAngleCamera: string;
    // export declare let externalUnknown: string;
    // export declare let currentExposureDuration: CMTime;
    // export declare let currentExposureTargetBias: number;
    // export declare let currentISO: number;
    // export declare let currentLensPosition: number;
    // export declare let maxAvailableTorchLevel: number;
    // export declare let currentWhiteBalanceGains: AVCaptureDevice.WhiteBalanceGains;
  }

  namespace AVCaptureOutput {
    export enum DataDroppedReason {
      None = 0,
      LateData = 1,
      OutOfBuffers = 2,
      Discontinuity = 3
    }

  }

  namespace AVCapturePhotoOutput {
    export enum QualityPrioritization {
      Speed = 1,
      Balanced = 2,
      Quality = 3
    }

  }

  namespace AVCaptureSession {
    export enum InterruptionReason {
      VideoDeviceNotAvailableInBackground = 1,
      AudioDeviceInUseByAnotherClient = 2,
      VideoDeviceInUseByAnotherClient = 3,
      VideoDeviceNotAvailableWithMultipleForegroundApps = 4,
      VideoDeviceNotAvailableDueToSystemPressure = 5
    }

    // export declare let hd1280x720: string;
    // export declare let hd1920x1080: string;
    // export declare let qvga320x240: string;
    // export declare let cif352x288: string;
    // export declare let hd4K3840x2160: string;
    // export declare let vga640x480: string;
    // export declare let qHD960x540: string;
    // export declare let high: string;
    // export declare let inputPriority: string;
    // export declare let low: string;
    // export declare let medium: string;
    // export declare let photo: string;
    // export declare let iFrame1280x720: string;
    // export declare let iFrame960x540: string;
  }

  namespace AVContentKeyRequest {
    export enum Status {
      RequestingResponse = 0,
      ReceivedResponse = 1,
      Renewed = 2,
      Retried = 3,
      Cancelled = 4,
      Failed = 5
    }

    // export declare let receivedObsoleteContentKey: string;
    // export declare let receivedResponseWithExpiredLease: string;
    // export declare let timedOut: string;
  }

  namespace AVContentKeySessionServerPlaybackContextOption {
    // export declare let protocolVersions: string;
    // export declare let serverChallenge: string;
  }

  namespace AVContentKeySystem {
    // export declare let authorizationToken: string;
    // export declare let clearKey: string;
    // export declare let fairPlayStreaming: string;
  }

  namespace AVDepthData {
    export enum Accuracy {
      Relative = 0,
      Absolute = 1
    }

    export enum Quality {
      Low = 0,
      High = 1
    }

  }

  namespace AVFileType {
    // export declare let mobile3GPP: string;
    // export declare let mobile3GPP2: string;
    // export declare let ac3: string;
    // export declare let aifc: string;
    // export declare let aiff: string;
    // export declare let amr: string;
    // export declare let avci: string;
    // export declare let m4a: string;
    // export declare let m4v: string;
    // export declare let caf: string;
    // export declare let dng: string;
    // export declare let eac3: string;
    // export declare let heic: string;
    // export declare let heif: string;
    // export declare let jpg: string;
    // export declare let mp4: string;
    // export declare let mp3: string;
    // export declare let mov: string;
    // export declare let au: string;
    // export declare let tif: string;
    // export declare let wav: string;
  }

  namespace AVLayerVideoGravity {
    // export declare let resize: string;
    // export declare let resizeAspect: string;
    // export declare let resizeAspectFill: string;
  }

  namespace AVMediaCharacteristic {
    // export declare let audible: string;
    // export declare let containsAlphaChannel: string;
    // export declare let containsOnlyForcedSubtitles: string;
    // export declare let describesMusicAndSoundForAccessibility: string;
    // export declare let describesVideoForAccessibility: string;
    // export declare let dubbedTranslation: string;
    // export declare let easyToRead: string;
    // export declare let frameBased: string;
    // export declare let isAuxiliaryContent: string;
    // export declare let isMainProgramContent: string;
    // export declare let isOriginalContent: string;
    // export declare let languageTranslation: string;
    // export declare let legible: string;
    // export declare let transcribesSpokenDialogForAccessibility: string;
    // export declare let usesWideGamutColorSpace: string;
    // export declare let visual: string;
    // export declare let voiceOverTranslation: string;
  }

  namespace AVMediaType {
    // export declare let audio: string;
    // export declare let closedCaption: string;
    // export declare let depthData: string;
    // export declare let metadata: string;
    // export declare let metadataObject: string;
    // export declare let muxed: string;
    // export declare let subtitle: string;
    // export declare let text: string;
    // export declare let timecode: string;
    // export declare let video: string;
  }

  namespace AVMetadataExtraAttributeKey {
    // export declare let baseURI: string;
    // export declare let info: string;
    // export declare let valueURI: string;
  }

  namespace AVMetadataFormat {
    // export declare let hlsMetadata: string;
    // export declare let id3Metadata: string;
    // export declare let isoUserData: string;
    // export declare let quickTimeMetadata: string;
    // export declare let quickTimeUserData: string;
    // export declare let unknown: string;
    // export declare let iTunesMetadata: string;
  }

  namespace AVMetadataIdentifier {
    // export declare let commonIdentifierAlbumName: string;
    // export declare let commonIdentifierArtist: string;
    // export declare let commonIdentifierArtwork: string;
    // export declare let commonIdentifierAssetIdentifier: string;
    // export declare let commonIdentifierAuthor: string;
    // export declare let commonIdentifierContributor: string;
    // export declare let commonIdentifierCopyrights: string;
    // export declare let commonIdentifierCreationDate: string;
    // export declare let commonIdentifierCreator: string;
    // export declare let commonIdentifierDescription: string;
    // export declare let commonIdentifierFormat: string;
    // export declare let commonIdentifierLanguage: string;
    // export declare let commonIdentifierLastModifiedDate: string;
    // export declare let commonIdentifierLocation: string;
    // export declare let commonIdentifierMake: string;
    // export declare let commonIdentifierModel: string;
    // export declare let commonIdentifierPublisher: string;
    // export declare let commonIdentifierRelation: string;
    // export declare let commonIdentifierSoftware: string;
    // export declare let commonIdentifierSource: string;
    // export declare let commonIdentifierSubject: string;
    // export declare let commonIdentifierTitle: string;
    // export declare let commonIdentifierType: string;
    // export declare let identifier3GPUserDataAlbumAndTrack: string;
    // export declare let identifier3GPUserDataAuthor: string;
    // export declare let identifier3GPUserDataCollection: string;
    // export declare let identifier3GPUserDataCopyright: string;
    // export declare let identifier3GPUserDataDescription: string;
    // export declare let identifier3GPUserDataGenre: string;
    // export declare let identifier3GPUserDataKeywordList: string;
    // export declare let identifier3GPUserDataLocation: string;
    // export declare let identifier3GPUserDataMediaClassification: string;
    // export declare let identifier3GPUserDataMediaRating: string;
    // export declare let identifier3GPUserDataPerformer: string;
    // export declare let identifier3GPUserDataRecordingYear: string;
    // export declare let identifier3GPUserDataThumbnail: string;
    // export declare let identifier3GPUserDataTitle: string;
    // export declare let identifier3GPUserDataUserRating: string;
    // export declare let id3MetadataAlbumSortOrder: string;
    // export declare let id3MetadataAlbumTitle: string;
    // export declare let id3MetadataAttachedPicture: string;
    // export declare let id3MetadataAudioEncryption: string;
    // export declare let id3MetadataAudioSeekPointIndex: string;
    // export declare let id3MetadataBand: string;
    // export declare let id3MetadataBeatsPerMinute: string;
    // export declare let id3MetadataComments: string;
    // export declare let id3MetadataCommercial: string;
    // export declare let id3MetadataCommercialInformation: string;
    // export declare let id3MetadataComposer: string;
    // export declare let id3MetadataConductor: string;
    // export declare let id3MetadataContentGroupDescription: string;
    // export declare let id3MetadataContentType: string;
    // export declare let id3MetadataCopyright: string;
    // export declare let id3MetadataCopyrightInformation: string;
    // export declare let id3MetadataDate: string;
    // export declare let id3MetadataEncodedBy: string;
    // export declare let id3MetadataEncodedWith: string;
    // export declare let id3MetadataEncodingTime: string;
    // export declare let id3MetadataEncryption: string;
    // export declare let id3MetadataEqualization: string;
    // export declare let id3MetadataEqualization2: string;
    // export declare let id3MetadataEventTimingCodes: string;
    // export declare let id3MetadataFileOwner: string;
    // export declare let id3MetadataFileType: string;
    // export declare let id3MetadataGeneralEncapsulatedObject: string;
    // export declare let id3MetadataGroupIdentifier: string;
    // export declare let id3MetadataInitialKey: string;
    // export declare let id3MetadataInternationalStandardRecordingCode: string;
    // export declare let id3MetadataInternetRadioStationName: string;
    // export declare let id3MetadataInternetRadioStationOwner: string;
    // export declare let id3MetadataInvolvedPeopleList_v23: string;
    // export declare let id3MetadataInvolvedPeopleList_v24: string;
    // export declare let id3MetadataLanguage: string;
    // export declare let id3MetadataLeadPerformer: string;
    // export declare let id3MetadataLength: string;
    // export declare let id3MetadataLink: string;
    // export declare let id3MetadataLyricist: string;
    // export declare let id3MetadataMPEGLocationLookupTable: string;
    // export declare let id3MetadataMediaType: string;
    // export declare let id3MetadataModifiedBy: string;
    // export declare let id3MetadataMood: string;
    // export declare let id3MetadataMusicCDIdentifier: string;
    // export declare let id3MetadataMusicianCreditsList: string;
    // export declare let id3MetadataOfficialArtistWebpage: string;
    // export declare let id3MetadataOfficialAudioFileWebpage: string;
    // export declare let id3MetadataOfficialAudioSourceWebpage: string;
    // export declare let id3MetadataOfficialInternetRadioStationHomepage: string;
    // export declare let id3MetadataOfficialPublisherWebpage: string;
    // export declare let id3MetadataOriginalAlbumTitle: string;
    // export declare let id3MetadataOriginalArtist: string;
    // export declare let id3MetadataOriginalFilename: string;
    // export declare let id3MetadataOriginalLyricist: string;
    // export declare let id3MetadataOriginalReleaseTime: string;
    // export declare let id3MetadataOriginalReleaseYear: string;
    // export declare let id3MetadataOwnership: string;
    // export declare let id3MetadataPartOfASet: string;
    // export declare let id3MetadataPayment: string;
    // export declare let id3MetadataPerformerSortOrder: string;
    // export declare let id3MetadataPlayCounter: string;
    // export declare let id3MetadataPlaylistDelay: string;
    // export declare let id3MetadataPopularimeter: string;
    // export declare let id3MetadataPositionSynchronization: string;
    // export declare let id3MetadataPrivate: string;
    // export declare let id3MetadataProducedNotice: string;
    // export declare let id3MetadataPublisher: string;
    // export declare let id3MetadataRecommendedBufferSize: string;
    // export declare let id3MetadataRecordingDates: string;
    // export declare let id3MetadataRecordingTime: string;
    // export declare let id3MetadataRelativeVolumeAdjustment: string;
    // export declare let id3MetadataRelativeVolumeAdjustment2: string;
    // export declare let id3MetadataReleaseTime: string;
    // export declare let id3MetadataReverb: string;
    // export declare let id3MetadataSeek: string;
    // export declare let id3MetadataSetSubtitle: string;
    // export declare let id3MetadataSignature: string;
    // export declare let id3MetadataSize: string;
    // export declare let id3MetadataSubTitle: string;
    // export declare let id3MetadataSynchronizedLyric: string;
    // export declare let id3MetadataSynchronizedTempoCodes: string;
    // export declare let id3MetadataTaggingTime: string;
    // export declare let id3MetadataTermsOfUse: string;
    // export declare let id3MetadataTime: string;
    // export declare let id3MetadataTitleDescription: string;
    // export declare let id3MetadataTitleSortOrder: string;
    // export declare let id3MetadataTrackNumber: string;
    // export declare let id3MetadataUniqueFileIdentifier: string;
    // export declare let id3MetadataUnsynchronizedLyric: string;
    // export declare let id3MetadataUserText: string;
    // export declare let id3MetadataUserURL: string;
    // export declare let id3MetadataYear: string;
    // export declare let isoUserDataCopyright: string;
    // export declare let isoUserDataDate: string;
    // export declare let isoUserDataTaggedCharacteristic: string;
    // export declare let icyMetadataStreamTitle: string;
    // export declare let icyMetadataStreamURL: string;
    // export declare let quickTimeMetadataAlbum: string;
    // export declare let quickTimeMetadataArranger: string;
    // export declare let quickTimeMetadataArtist: string;
    // export declare let quickTimeMetadataArtwork: string;
    // export declare let quickTimeMetadataAuthor: string;
    // export declare let quickTimeMetadataAutoLivePhoto: string;
    // export declare let quickTimeMetadataCameraFrameReadoutTime: string;
    // export declare let quickTimeMetadataCameraIdentifier: string;
    // export declare let quickTimeMetadataCollectionUser: string;
    // export declare let quickTimeMetadataComment: string;
    // export declare let quickTimeMetadataComposer: string;
    // export declare let quickTimeMetadataContentIdentifier: string;
    // export declare let quickTimeMetadataCopyright: string;
    // export declare let quickTimeMetadataCreationDate: string;
    // export declare let quickTimeMetadataCredits: string;
    // export declare let quickTimeMetadataDescription: string;
    // export declare let quickTimeMetadataDetectedCatBody: string;
    // export declare let quickTimeMetadataDetectedDogBody: string;
    // export declare let quickTimeMetadataDetectedFace: string;
    // export declare let quickTimeMetadataDetectedHumanBody: string;
    // export declare let quickTimeMetadataDetectedSalientObject: string;
    // export declare let quickTimeMetadataDirectionFacing: string;
    // export declare let quickTimeMetadataDirectionMotion: string;
    // export declare let quickTimeMetadataDirector: string;
    // export declare let quickTimeMetadataDisplayName: string;
    // export declare let quickTimeMetadataEncodedBy: string;
    // export declare let quickTimeMetadataGenre: string;
    // export declare let quickTimeMetadataInformation: string;
    // export declare let quickTimeMetadataKeywords: string;
    // export declare let quickTimeMetadataLivePhotoVitalityScore: string;
    // export declare let quickTimeMetadataLivePhotoVitalityScoringVersion: string;
    // export declare let quickTimeMetadataLocationBody: string;
    // export declare let quickTimeMetadataLocationDate: string;
    // export declare let quickTimeMetadataLocationISO6709: string;
    // export declare let quickTimeMetadataLocationName: string;
    // export declare let quickTimeMetadataLocationNote: string;
    // export declare let quickTimeMetadataLocationRole: string;
    // export declare let quickTimeMetadataMake: string;
    // export declare let quickTimeMetadataModel: string;
    // export declare let quickTimeMetadataOriginalArtist: string;
    // export declare let quickTimeMetadataPerformer: string;
    // export declare let quickTimeMetadataPhonogramRights: string;
    // export declare let quickTimeMetadataPreferredAffineTransform: string;
    // export declare let quickTimeMetadataProducer: string;
    // export declare let quickTimeMetadataPublisher: string;
    // export declare let quickTimeMetadataRatingUser: string;
    // export declare let quickTimeMetadataSoftware: string;
    // export declare let quickTimeMetadataSpatialOverCaptureQualityScore: string;
    // export declare let quickTimeMetadataSpatialOverCaptureQualityScoringVersion: string;
    // export declare let quickTimeMetadataTitle: string;
    // export declare let quickTimeMetadataVideoOrientation: string;
    // export declare let quickTimeMetadataYear: string;
    // export declare let quickTimeMetadataiXML: string;
    // export declare let quickTimeUserDataAlbum: string;
    // export declare let quickTimeUserDataArranger: string;
    // export declare let quickTimeUserDataArtist: string;
    // export declare let quickTimeUserDataAuthor: string;
    // export declare let quickTimeUserDataChapter: string;
    // export declare let quickTimeUserDataComment: string;
    // export declare let quickTimeUserDataComposer: string;
    // export declare let quickTimeUserDataCopyright: string;
    // export declare let quickTimeUserDataCreationDate: string;
    // export declare let quickTimeUserDataCredits: string;
    // export declare let quickTimeUserDataDescription: string;
    // export declare let quickTimeUserDataDirector: string;
    // export declare let quickTimeUserDataDisclaimer: string;
    // export declare let quickTimeUserDataEncodedBy: string;
    // export declare let quickTimeUserDataFullName: string;
    // export declare let quickTimeUserDataGenre: string;
    // export declare let quickTimeUserDataHostComputer: string;
    // export declare let quickTimeUserDataInformation: string;
    // export declare let quickTimeUserDataKeywords: string;
    // export declare let quickTimeUserDataLocationISO6709: string;
    // export declare let quickTimeUserDataMake: string;
    // export declare let quickTimeUserDataModel: string;
    // export declare let quickTimeUserDataOriginalArtist: string;
    // export declare let quickTimeUserDataOriginalFormat: string;
    // export declare let quickTimeUserDataOriginalSource: string;
    // export declare let quickTimeUserDataPerformers: string;
    // export declare let quickTimeUserDataPhonogramRights: string;
    // export declare let quickTimeUserDataProducer: string;
    // export declare let quickTimeUserDataProduct: string;
    // export declare let quickTimeUserDataPublisher: string;
    // export declare let quickTimeUserDataSoftware: string;
    // export declare let quickTimeUserDataSpecialPlaybackRequirements: string;
    // export declare let quickTimeUserDataTaggedCharacteristic: string;
    // export declare let quickTimeUserDataTrack: string;
    // export declare let quickTimeUserDataTrackName: string;
    // export declare let quickTimeUserDataURLLink: string;
    // export declare let quickTimeUserDataWarning: string;
    // export declare let quickTimeUserDataWriter: string;
    // export declare let iTunesMetadataAccountKind: string;
    // export declare let iTunesMetadataAcknowledgement: string;
    // export declare let iTunesMetadataAlbum: string;
    // export declare let iTunesMetadataAlbumArtist: string;
    // export declare let iTunesMetadataAppleID: string;
    // export declare let iTunesMetadataArranger: string;
    // export declare let iTunesMetadataArtDirector: string;
    // export declare let iTunesMetadataArtist: string;
    // export declare let iTunesMetadataArtistID: string;
    // export declare let iTunesMetadataAuthor: string;
    // export declare let iTunesMetadataBeatsPerMin: string;
    // export declare let iTunesMetadataComposer: string;
    // export declare let iTunesMetadataConductor: string;
    // export declare let iTunesMetadataContentRating: string;
    // export declare let iTunesMetadataCopyright: string;
    // export declare let iTunesMetadataCoverArt: string;
    // export declare let iTunesMetadataCredits: string;
    // export declare let iTunesMetadataDescription: string;
    // export declare let iTunesMetadataDirector: string;
    // export declare let iTunesMetadataDiscCompilation: string;
    // export declare let iTunesMetadataDiscNumber: string;
    // export declare let iTunesMetadataEQ: string;
    // export declare let iTunesMetadataEncodedBy: string;
    // export declare let iTunesMetadataEncodingTool: string;
    // export declare let iTunesMetadataExecProducer: string;
    // export declare let iTunesMetadataGenreID: string;
    // export declare let iTunesMetadataGrouping: string;
    // export declare let iTunesMetadataLinerNotes: string;
    // export declare let iTunesMetadataLyrics: string;
    // export declare let iTunesMetadataOnlineExtras: string;
    // export declare let iTunesMetadataOriginalArtist: string;
    // export declare let iTunesMetadataPerformer: string;
    // export declare let iTunesMetadataPhonogramRights: string;
    // export declare let iTunesMetadataPlaylistID: string;
    // export declare let iTunesMetadataPredefinedGenre: string;
    // export declare let iTunesMetadataProducer: string;
    // export declare let iTunesMetadataPublisher: string;
    // export declare let iTunesMetadataRecordCompany: string;
    // export declare let iTunesMetadataReleaseDate: string;
    // export declare let iTunesMetadataSoloist: string;
    // export declare let iTunesMetadataSongID: string;
    // export declare let iTunesMetadataSongName: string;
    // export declare let iTunesMetadataSoundEngineer: string;
    // export declare let iTunesMetadataThanks: string;
    // export declare let iTunesMetadataTrackNumber: string;
    // export declare let iTunesMetadataTrackSubTitle: string;
    // export declare let iTunesMetadataUserComment: string;
    // export declare let iTunesMetadataUserGenre: string;
  }

  namespace AVMetadataKey {
    // export declare let metadata3GPUserDataKeyAlbumAndTrack: string;
    // export declare let metadata3GPUserDataKeyAuthor: string;
    // export declare let metadata3GPUserDataKeyCollection: string;
    // export declare let metadata3GPUserDataKeyCopyright: string;
    // export declare let metadata3GPUserDataKeyDescription: string;
    // export declare let metadata3GPUserDataKeyGenre: string;
    // export declare let metadata3GPUserDataKeyKeywordList: string;
    // export declare let metadata3GPUserDataKeyLocation: string;
    // export declare let metadata3GPUserDataKeyMediaClassification: string;
    // export declare let metadata3GPUserDataKeyMediaRating: string;
    // export declare let metadata3GPUserDataKeyPerformer: string;
    // export declare let metadata3GPUserDataKeyRecordingYear: string;
    // export declare let metadata3GPUserDataKeyThumbnail: string;
    // export declare let metadata3GPUserDataKeyTitle: string;
    // export declare let metadata3GPUserDataKeyUserRating: string;
    // export declare let commonKeyAlbumName: string;
    // export declare let commonKeyArtist: string;
    // export declare let commonKeyArtwork: string;
    // export declare let commonKeyAuthor: string;
    // export declare let commonKeyContributor: string;
    // export declare let commonKeyCopyrights: string;
    // export declare let commonKeyCreationDate: string;
    // export declare let commonKeyCreator: string;
    // export declare let commonKeyDescription: string;
    // export declare let commonKeyFormat: string;
    // export declare let commonKeyIdentifier: string;
    // export declare let commonKeyLanguage: string;
    // export declare let commonKeyLastModifiedDate: string;
    // export declare let commonKeyLocation: string;
    // export declare let commonKeyMake: string;
    // export declare let commonKeyModel: string;
    // export declare let commonKeyPublisher: string;
    // export declare let commonKeyRelation: string;
    // export declare let commonKeySoftware: string;
    // export declare let commonKeySource: string;
    // export declare let commonKeySubject: string;
    // export declare let commonKeyTitle: string;
    // export declare let commonKeyType: string;
    // export declare let id3MetadataKeyAlbumSortOrder: string;
    // export declare let id3MetadataKeyAlbumTitle: string;
    // export declare let id3MetadataKeyAttachedPicture: string;
    // export declare let id3MetadataKeyAudioEncryption: string;
    // export declare let id3MetadataKeyAudioSeekPointIndex: string;
    // export declare let id3MetadataKeyBand: string;
    // export declare let id3MetadataKeyBeatsPerMinute: string;
    // export declare let id3MetadataKeyComments: string;
    // export declare let id3MetadataKeyCommercial: string;
    // export declare let id3MetadataKeyCommercialInformation: string;
    // export declare let id3MetadataKeyComposer: string;
    // export declare let id3MetadataKeyConductor: string;
    // export declare let id3MetadataKeyContentGroupDescription: string;
    // export declare let id3MetadataKeyContentType: string;
    // export declare let id3MetadataKeyCopyright: string;
    // export declare let id3MetadataKeyCopyrightInformation: string;
    // export declare let id3MetadataKeyDate: string;
    // export declare let id3MetadataKeyEncodedBy: string;
    // export declare let id3MetadataKeyEncodedWith: string;
    // export declare let id3MetadataKeyEncodingTime: string;
    // export declare let id3MetadataKeyEncryption: string;
    // export declare let id3MetadataKeyEqualization: string;
    // export declare let id3MetadataKeyEqualization2: string;
    // export declare let id3MetadataKeyEventTimingCodes: string;
    // export declare let id3MetadataKeyFileOwner: string;
    // export declare let id3MetadataKeyFileType: string;
    // export declare let id3MetadataKeyGeneralEncapsulatedObject: string;
    // export declare let id3MetadataKeyGroupIdentifier: string;
    // export declare let id3MetadataKeyInitialKey: string;
    // export declare let id3MetadataKeyInternationalStandardRecordingCode: string;
    // export declare let id3MetadataKeyInternetRadioStationName: string;
    // export declare let id3MetadataKeyInternetRadioStationOwner: string;
    // export declare let id3MetadataKeyInvolvedPeopleList_v23: string;
    // export declare let id3MetadataKeyInvolvedPeopleList_v24: string;
    // export declare let id3MetadataKeyLanguage: string;
    // export declare let id3MetadataKeyLeadPerformer: string;
    // export declare let id3MetadataKeyLength: string;
    // export declare let id3MetadataKeyLink: string;
    // export declare let id3MetadataKeyLyricist: string;
    // export declare let id3MetadataKeyMPEGLocationLookupTable: string;
    // export declare let id3MetadataKeyMediaType: string;
    // export declare let id3MetadataKeyModifiedBy: string;
    // export declare let id3MetadataKeyMood: string;
    // export declare let id3MetadataKeyMusicCDIdentifier: string;
    // export declare let id3MetadataKeyMusicianCreditsList: string;
    // export declare let id3MetadataKeyOfficialArtistWebpage: string;
    // export declare let id3MetadataKeyOfficialAudioFileWebpage: string;
    // export declare let id3MetadataKeyOfficialAudioSourceWebpage: string;
    // export declare let id3MetadataKeyOfficialInternetRadioStationHomepage: string;
    // export declare let id3MetadataKeyOfficialPublisherWebpage: string;
    // export declare let id3MetadataKeyOriginalAlbumTitle: string;
    // export declare let id3MetadataKeyOriginalArtist: string;
    // export declare let id3MetadataKeyOriginalFilename: string;
    // export declare let id3MetadataKeyOriginalLyricist: string;
    // export declare let id3MetadataKeyOriginalReleaseTime: string;
    // export declare let id3MetadataKeyOriginalReleaseYear: string;
    // export declare let id3MetadataKeyOwnership: string;
    // export declare let id3MetadataKeyPartOfASet: string;
    // export declare let id3MetadataKeyPayment: string;
    // export declare let id3MetadataKeyPerformerSortOrder: string;
    // export declare let id3MetadataKeyPlayCounter: string;
    // export declare let id3MetadataKeyPlaylistDelay: string;
    // export declare let id3MetadataKeyPopularimeter: string;
    // export declare let id3MetadataKeyPositionSynchronization: string;
    // export declare let id3MetadataKeyPrivate: string;
    // export declare let id3MetadataKeyProducedNotice: string;
    // export declare let id3MetadataKeyPublisher: string;
    // export declare let id3MetadataKeyRecommendedBufferSize: string;
    // export declare let id3MetadataKeyRecordingDates: string;
    // export declare let id3MetadataKeyRecordingTime: string;
    // export declare let id3MetadataKeyRelativeVolumeAdjustment: string;
    // export declare let id3MetadataKeyRelativeVolumeAdjustment2: string;
    // export declare let id3MetadataKeyReleaseTime: string;
    // export declare let id3MetadataKeyReverb: string;
    // export declare let id3MetadataKeySeek: string;
    // export declare let id3MetadataKeySetSubtitle: string;
    // export declare let id3MetadataKeySignature: string;
    // export declare let id3MetadataKeySize: string;
    // export declare let id3MetadataKeySubTitle: string;
    // export declare let id3MetadataKeySynchronizedLyric: string;
    // export declare let id3MetadataKeySynchronizedTempoCodes: string;
    // export declare let id3MetadataKeyTaggingTime: string;
    // export declare let id3MetadataKeyTermsOfUse: string;
    // export declare let id3MetadataKeyTime: string;
    // export declare let id3MetadataKeyTitleDescription: string;
    // export declare let id3MetadataKeyTitleSortOrder: string;
    // export declare let id3MetadataKeyTrackNumber: string;
    // export declare let id3MetadataKeyUniqueFileIdentifier: string;
    // export declare let id3MetadataKeyUnsynchronizedLyric: string;
    // export declare let id3MetadataKeyUserText: string;
    // export declare let id3MetadataKeyUserURL: string;
    // export declare let id3MetadataKeyYear: string;
    // export declare let isoUserDataKeyCopyright: string;
    // export declare let isoUserDataKeyDate: string;
    // export declare let isoUserDataKeyTaggedCharacteristic: string;
    // export declare let icyMetadataKeyStreamTitle: string;
    // export declare let icyMetadataKeyStreamURL: string;
    // export declare let quickTimeMetadataKeyAlbum: string;
    // export declare let quickTimeMetadataKeyArranger: string;
    // export declare let quickTimeMetadataKeyArtist: string;
    // export declare let quickTimeMetadataKeyArtwork: string;
    // export declare let quickTimeMetadataKeyAuthor: string;
    // export declare let quickTimeMetadataKeyCameraFrameReadoutTime: string;
    // export declare let quickTimeMetadataKeyCameraIdentifier: string;
    // export declare let quickTimeMetadataKeyCollectionUser: string;
    // export declare let quickTimeMetadataKeyComment: string;
    // export declare let quickTimeMetadataKeyComposer: string;
    // export declare let quickTimeMetadataKeyContentIdentifier: string;
    // export declare let quickTimeMetadataKeyCopyright: string;
    // export declare let quickTimeMetadataKeyCreationDate: string;
    // export declare let quickTimeMetadataKeyCredits: string;
    // export declare let quickTimeMetadataKeyDescription: string;
    // export declare let quickTimeMetadataKeyDirectionFacing: string;
    // export declare let quickTimeMetadataKeyDirectionMotion: string;
    // export declare let quickTimeMetadataKeyDirector: string;
    // export declare let quickTimeMetadataKeyDisplayName: string;
    // export declare let quickTimeMetadataKeyEncodedBy: string;
    // export declare let quickTimeMetadataKeyGenre: string;
    // export declare let quickTimeMetadataKeyInformation: string;
    // export declare let quickTimeMetadataKeyKeywords: string;
    // export declare let quickTimeMetadataKeyLocationBody: string;
    // export declare let quickTimeMetadataKeyLocationDate: string;
    // export declare let quickTimeMetadataKeyLocationISO6709: string;
    // export declare let quickTimeMetadataKeyLocationName: string;
    // export declare let quickTimeMetadataKeyLocationNote: string;
    // export declare let quickTimeMetadataKeyLocationRole: string;
    // export declare let quickTimeMetadataKeyMake: string;
    // export declare let quickTimeMetadataKeyModel: string;
    // export declare let quickTimeMetadataKeyOriginalArtist: string;
    // export declare let quickTimeMetadataKeyPerformer: string;
    // export declare let quickTimeMetadataKeyPhonogramRights: string;
    // export declare let quickTimeMetadataKeyProducer: string;
    // export declare let quickTimeMetadataKeyPublisher: string;
    // export declare let quickTimeMetadataKeyRatingUser: string;
    // export declare let quickTimeMetadataKeySoftware: string;
    // export declare let quickTimeMetadataKeyTitle: string;
    // export declare let quickTimeMetadataKeyYear: string;
    // export declare let quickTimeMetadataKeyiXML: string;
    // export declare let quickTimeUserDataKeyAlbum: string;
    // export declare let quickTimeUserDataKeyArranger: string;
    // export declare let quickTimeUserDataKeyArtist: string;
    // export declare let quickTimeUserDataKeyAuthor: string;
    // export declare let quickTimeUserDataKeyChapter: string;
    // export declare let quickTimeUserDataKeyComment: string;
    // export declare let quickTimeUserDataKeyComposer: string;
    // export declare let quickTimeUserDataKeyCopyright: string;
    // export declare let quickTimeUserDataKeyCreationDate: string;
    // export declare let quickTimeUserDataKeyCredits: string;
    // export declare let quickTimeUserDataKeyDescription: string;
    // export declare let quickTimeUserDataKeyDirector: string;
    // export declare let quickTimeUserDataKeyDisclaimer: string;
    // export declare let quickTimeUserDataKeyEncodedBy: string;
    // export declare let quickTimeUserDataKeyFullName: string;
    // export declare let quickTimeUserDataKeyGenre: string;
    // export declare let quickTimeUserDataKeyHostComputer: string;
    // export declare let quickTimeUserDataKeyInformation: string;
    // export declare let quickTimeUserDataKeyKeywords: string;
    // export declare let quickTimeUserDataKeyLocationISO6709: string;
    // export declare let quickTimeUserDataKeyMake: string;
    // export declare let quickTimeUserDataKeyModel: string;
    // export declare let quickTimeUserDataKeyOriginalArtist: string;
    // export declare let quickTimeUserDataKeyOriginalFormat: string;
    // export declare let quickTimeUserDataKeyOriginalSource: string;
    // export declare let quickTimeUserDataKeyPerformers: string;
    // export declare let quickTimeUserDataKeyPhonogramRights: string;
    // export declare let quickTimeUserDataKeyProducer: string;
    // export declare let quickTimeUserDataKeyProduct: string;
    // export declare let quickTimeUserDataKeyPublisher: string;
    // export declare let quickTimeUserDataKeySoftware: string;
    // export declare let quickTimeUserDataKeySpecialPlaybackRequirements: string;
    // export declare let quickTimeUserDataKeyTaggedCharacteristic: string;
    // export declare let quickTimeUserDataKeyTrack: string;
    // export declare let quickTimeUserDataKeyTrackName: string;
    // export declare let quickTimeUserDataKeyURLLink: string;
    // export declare let quickTimeUserDataKeyWarning: string;
    // export declare let quickTimeUserDataKeyWriter: string;
    // export declare let iTunesMetadataKeyAccountKind: string;
    // export declare let iTunesMetadataKeyAcknowledgement: string;
    // export declare let iTunesMetadataKeyAlbum: string;
    // export declare let iTunesMetadataKeyAlbumArtist: string;
    // export declare let iTunesMetadataKeyAppleID: string;
    // export declare let iTunesMetadataKeyArranger: string;
    // export declare let iTunesMetadataKeyArtDirector: string;
    // export declare let iTunesMetadataKeyArtist: string;
    // export declare let iTunesMetadataKeyArtistID: string;
    // export declare let iTunesMetadataKeyAuthor: string;
    // export declare let iTunesMetadataKeyBeatsPerMin: string;
    // export declare let iTunesMetadataKeyComposer: string;
    // export declare let iTunesMetadataKeyConductor: string;
    // export declare let iTunesMetadataKeyContentRating: string;
    // export declare let iTunesMetadataKeyCopyright: string;
    // export declare let iTunesMetadataKeyCoverArt: string;
    // export declare let iTunesMetadataKeyCredits: string;
    // export declare let iTunesMetadataKeyDescription: string;
    // export declare let iTunesMetadataKeyDirector: string;
    // export declare let iTunesMetadataKeyDiscCompilation: string;
    // export declare let iTunesMetadataKeyDiscNumber: string;
    // export declare let iTunesMetadataKeyEQ: string;
    // export declare let iTunesMetadataKeyEncodedBy: string;
    // export declare let iTunesMetadataKeyEncodingTool: string;
    // export declare let iTunesMetadataKeyExecProducer: string;
    // export declare let iTunesMetadataKeyGenreID: string;
    // export declare let iTunesMetadataKeyGrouping: string;
    // export declare let iTunesMetadataKeyLinerNotes: string;
    // export declare let iTunesMetadataKeyLyrics: string;
    // export declare let iTunesMetadataKeyOnlineExtras: string;
    // export declare let iTunesMetadataKeyOriginalArtist: string;
    // export declare let iTunesMetadataKeyPerformer: string;
    // export declare let iTunesMetadataKeyPhonogramRights: string;
    // export declare let iTunesMetadataKeyPlaylistID: string;
    // export declare let iTunesMetadataKeyPredefinedGenre: string;
    // export declare let iTunesMetadataKeyProducer: string;
    // export declare let iTunesMetadataKeyPublisher: string;
    // export declare let iTunesMetadataKeyRecordCompany: string;
    // export declare let iTunesMetadataKeyReleaseDate: string;
    // export declare let iTunesMetadataKeySoloist: string;
    // export declare let iTunesMetadataKeySongID: string;
    // export declare let iTunesMetadataKeySongName: string;
    // export declare let iTunesMetadataKeySoundEngineer: string;
    // export declare let iTunesMetadataKeyThanks: string;
    // export declare let iTunesMetadataKeyTrackNumber: string;
    // export declare let iTunesMetadataKeyTrackSubTitle: string;
    // export declare let iTunesMetadataKeyUserComment: string;
    // export declare let iTunesMetadataKeyUserGenre: string;
  }

  namespace AVMetadataKeySpace {
    // export declare let audioFile: string;
    // export declare let common: string;
    // export declare let hlsDateRange: string;
    // export declare let id3: string;
    // export declare let isoUserData: string;
    // export declare let icy: string;
    // export declare let quickTimeMetadata: string;
    // export declare let quickTimeUserData: string;
    // export declare let iTunes: string;
  }

  namespace AVMetadataObject {
    // export declare let aztec: string;
    // export declare let catBody: string;
    // export declare let code128: string;
    // export declare let code39: string;
    // export declare let code39Mod43: string;
    // export declare let code93: string;
    // export declare let dataMatrix: string;
    // export declare let dogBody: string;
    // export declare let ean13: string;
    // export declare let ean8: string;
    // export declare let face: string;
    // export declare let humanBody: string;
    // export declare let itf14: string;
    // export declare let interleaved2of5: string;
    // export declare let pdf417: string;
    // export declare let qr: string;
    // export declare let salientObject: string;
    // export declare let upce: string;
  }

  namespace AVOutputSettingsPreset {
    // export declare let preset1280x720: string;
    // export declare let preset1920x1080: string;
    // export declare let preset3840x2160: string;
    // export declare let preset640x480: string;
    // export declare let preset960x540: string;
    // export declare let hevc1920x1080: string;
    // export declare let hevc1920x1080WithAlpha: string;
    // export declare let hevc3840x2160: string;
    // export declare let hevc3840x2160WithAlpha: string;
  }

  namespace AVPlayer {
    export enum ActionAtItemEnd {
      Advance = 0,
      Pause = 1,
      None = 2
    }

    export enum HDRMode {
      HLG = 1,
      HDR10 = 2,
      DolbyVision = 4
    }

    export enum Status {
      Unknown = 0,
      ReadyToPlay = 1,
      Failed = 2
    }

    export enum TimeControlStatus {
      Paused = 0,
      WaitingToPlayAtSpecifiedRate = 1,
      Playing = 2
    }

    // export declare let eligibleForHDRPlaybackDidChangeNotification: string;
    // export declare let toMinimizeStalls: string;
    // export declare let evaluatingBufferingRate: string;
    // export declare let noItemToPlay: string;
  }

  namespace AVPlayerItem {
    export enum Status {
      Unknown = 0,
      ReadyToPlay = 1,
      Failed = 2
    }

    // export declare let mediaSelectionDidChangeNotification: string;
    // export declare let recommendedTimeOffsetFromLiveDidChangeNotification: string;
  }

  namespace AVPlayerItemLegibleOutput {
    // export declare let default_: string;
    // export declare let sourceAndRulesOnly: string;
  }

  namespace AVPlayerLooper {
    export enum Status {
      Unknown = 0,
      Ready = 1,
      Failed = 2,
      Cancelled = 3
    }

  }

  namespace AVSampleBufferRenderSynchronizer {
    // export declare let rateDidChangeNotification: string;
  }

  namespace AVSampleBufferRequest {
    export enum Direction {
      Forward = 1,
      None = 0,
      Reverse = -1
    }

    export enum Mode {
      Immediate = 0,
      Scheduled = 1,
      Opportunistic = 2
    }

  }

  namespace AVSemanticSegmentationMatte {
    // export declare let hair: string;
    // export declare let skin: string;
    // export declare let teeth: string;
  }

  namespace AVVideoApertureMode {
    // export declare let cleanAperture: string;
    // export declare let encodedPixels: string;
    // export declare let productionAperture: string;
  }

  namespace AVVideoCodecType {
    // export declare let proRes422: string;
    // export declare let proRes422HQ: string;
    // export declare let proRes422LT: string;
    // export declare let proRes422Proxy: string;
    // export declare let proRes4444: string;
    // export declare let h264: string;
    // export declare let hevc: string;
    // export declare let hevcWithAlpha: string;
    // export declare let jpeg: string;
  }

  namespace Bundle {
    // export declare let didLoadNotification: string;
  }

  namespace ByteCountFormatter {
    export enum CountStyle {
      File = 0,
      Memory = 1,
      Decimal = 2,
      Binary = 3
    }

    export enum Units {
      UseDefault = 0,
      UseBytes = 1,
      UseKB = 2,
      UseMB = 4,
      UseGB = 8,
      UseTB = 16,
      UsePB = 32,
      UseEB = 64,
      UseZB = 128,
      UseYBOrHigher = 65280,
      UseAll = 65535
    }

  }

  namespace CAAnimationCalculationMode {
    // export declare let cubic: string;
    // export declare let cubicPaced: string;
    // export declare let discrete: string;
    // export declare let linear: string;
    // export declare let paced: string;
  }

  namespace CAAnimationRotationMode {
    // export declare let rotateAuto: string;
    // export declare let rotateAutoReverse: string;
  }

  namespace CAEmitterLayerEmitterMode {
    // export declare let outline: string;
    // export declare let points: string;
    // export declare let surface: string;
    // export declare let volume: string;
  }

  namespace CAEmitterLayerEmitterShape {
    // export declare let circle: string;
    // export declare let cuboid: string;
    // export declare let line: string;
    // export declare let point: string;
    // export declare let rectangle: string;
    // export declare let sphere: string;
  }

  namespace CAEmitterLayerRenderMode {
    // export declare let additive: string;
    // export declare let backToFront: string;
    // export declare let oldestFirst: string;
    // export declare let oldestLast: string;
    // export declare let unordered: string;
  }

  namespace CAGradientLayerType {
    // export declare let axial: string;
    // export declare let conic: string;
    // export declare let radial: string;
  }

  namespace CALayerContentsFilter {
    // export declare let linear: string;
    // export declare let nearest: string;
    // export declare let trilinear: string;
  }

  namespace CALayerContentsFormat {
    // export declare let gray8Uint: string;
    // export declare let RGBA16Float: string;
    // export declare let RGBA8Uint: string;
  }

  namespace CALayerContentsGravity {
    // export declare let bottom: string;
    // export declare let bottomLeft: string;
    // export declare let bottomRight: string;
    // export declare let center: string;
    // export declare let left: string;
    // export declare let resize: string;
    // export declare let resizeAspect: string;
    // export declare let resizeAspectFill: string;
    // export declare let right: string;
    // export declare let top: string;
    // export declare let topLeft: string;
    // export declare let topRight: string;
  }

  namespace CALayerCornerCurve {
    // export declare let circular: string;
    // export declare let continuous: string;
  }

  namespace CAMediaTimingFillMode {
    // export declare let backwards: string;
    // export declare let both: string;
    // export declare let forwards: string;
    // export declare let removed: string;
  }

  namespace CAMediaTimingFunctionName {
    // export declare let default_: string;
    // export declare let easeIn: string;
    // export declare let easeInEaseOut: string;
    // export declare let easeOut: string;
    // export declare let linear: string;
  }

  namespace CAScrollLayerScrollMode {
    // export declare let both: string;
    // export declare let horizontally: string;
    // export declare let none: string;
    // export declare let vertically: string;
  }

  namespace CAShapeLayerFillRule {
    // export declare let evenOdd: string;
    // export declare let nonZero: string;
  }

  namespace CAShapeLayerLineCap {
    // export declare let butt: string;
    // export declare let round: string;
    // export declare let square: string;
  }

  namespace CAShapeLayerLineJoin {
    // export declare let bevel: string;
    // export declare let miter: string;
    // export declare let round: string;
  }

  namespace CATextLayerAlignmentMode {
    // export declare let center: string;
    // export declare let justified: string;
    // export declare let left: string;
    // export declare let natural: string;
    // export declare let right: string;
  }

  namespace CATextLayerTruncationMode {
    // export declare let end: string;
    // export declare let middle: string;
    // export declare let none: string;
    // export declare let start: string;
  }

  namespace CATransitionSubtype {
    // export declare let fromBottom: string;
    // export declare let fromLeft: string;
    // export declare let fromRight: string;
    // export declare let fromTop: string;
  }

  namespace CATransitionType {
    // export declare let fade: string;
    // export declare let moveIn: string;
    // export declare let push: string;
    // export declare let reveal: string;
  }

  namespace CAValueFunctionName {
    // export declare let rotateX: string;
    // export declare let rotateY: string;
    // export declare let rotateZ: string;
    // export declare let scale: string;
    // export declare let scaleX: string;
    // export declare let scaleY: string;
    // export declare let scaleZ: string;
    // export declare let translate: string;
    // export declare let translateX: string;
    // export declare let translateY: string;
    // export declare let translateZ: string;
  }

  namespace CFCalendarIdentifier {
    // export declare let buddhistCalendar: any;
    // export declare let chineseCalendar: any;
    // export declare let gregorianCalendar: any;
    // export declare let hebrewCalendar: any;
    // export declare let cfiso8601Calendar: any;
    // export declare let indianCalendar: any;
    // export declare let islamicCalendar: any;
    // export declare let islamicCivilCalendar: any;
    // export declare let islamicTabularCalendar: any;
    // export declare let islamicUmmAlQuraCalendar: any;
    // export declare let japaneseCalendar: any;
    // export declare let persianCalendar: any;
    // export declare let republicOfChinaCalendar: any;
  }

  namespace CFDateFormatterKey {
    // export declare let amSymbol: any;
    // export declare let calendar: any;
    // export declare let calendarName: any;
    // export declare let defaultDate: any;
    // export declare let defaultFormat: any;
    // export declare let doesRelativeDateFormattingKey: any;
    // export declare let eraSymbols: any;
    // export declare let gregorianStartDate: any;
    // export declare let isLenient: any;
    // export declare let longEraSymbols: any;
    // export declare let monthSymbols: any;
    // export declare let pmSymbol: any;
    // export declare let quarterSymbols: any;
    // export declare let shortMonthSymbols: any;
    // export declare let shortQuarterSymbols: any;
    // export declare let shortStandaloneMonthSymbols: any;
    // export declare let shortStandaloneQuarterSymbols: any;
    // export declare let shortStandaloneWeekdaySymbols: any;
    // export declare let shortWeekdaySymbols: any;
    // export declare let standaloneMonthSymbols: any;
    // export declare let standaloneQuarterSymbols: any;
    // export declare let standaloneWeekdaySymbols: any;
    // export declare let timeZone: any;
    // export declare let twoDigitStartDate: any;
    // export declare let veryShortMonthSymbols: any;
    // export declare let veryShortStandaloneMonthSymbols: any;
    // export declare let veryShortStandaloneWeekdaySymbols: any;
    // export declare let veryShortWeekdaySymbols: any;
    // export declare let weekdaySymbols: any;
  }

  namespace CFLocaleKey {
    // export declare let alternateQuotationBeginDelimiterKey: any;
    // export declare let alternateQuotationEndDelimiterKey: any;
    // export declare let calendar: any;
    // export declare let calendarIdentifier: any;
    // export declare let collationIdentifier: any;
    // export declare let collatorIdentifier: any;
    // export declare let countryCode: any;
    // export declare let currencyCode: any;
    // export declare let currencySymbol: any;
    // export declare let decimalSeparator: any;
    // export declare let exemplarCharacterSet: any;
    // export declare let groupingSeparator: any;
    // export declare let identifier: any;
    // export declare let languageCode: any;
    // export declare let measurementSystem: any;
    // export declare let quotationBeginDelimiterKey: any;
    // export declare let quotationEndDelimiterKey: any;
    // export declare let scriptCode: any;
    // export declare let usesMetricSystem: any;
    // export declare let variantCode: any;
  }

  namespace CFNotificationName {
    // export declare let cfLocaleCurrentLocaleDidChange: any;
    // export declare let cfTimeZoneSystemTimeZoneDidChange: any;
  }

  namespace CFNumberFormatterKey {
    // export declare let alwaysShowDecimalSeparator: any;
    // export declare let currencyCode: any;
    // export declare let currencyDecimalSeparator: any;
    // export declare let currencyGroupingSeparator: any;
    // export declare let currencySymbol: any;
    // export declare let decimalSeparator: any;
    // export declare let defaultFormat: any;
    // export declare let exponentSymbol: any;
    // export declare let formatWidth: any;
    // export declare let groupingSeparator: any;
    // export declare let groupingSize: any;
    // export declare let infinitySymbol: any;
    // export declare let internationalCurrencySymbol: any;
    // export declare let isLenient: any;
    // export declare let maxFractionDigits: any;
    // export declare let maxIntegerDigits: any;
    // export declare let maxSignificantDigits: any;
    // export declare let minFractionDigits: any;
    // export declare let minIntegerDigits: any;
    // export declare let minSignificantDigits: any;
    // export declare let minusSign: any;
    // export declare let multiplier: any;
    // export declare let naNSymbol: any;
    // export declare let negativePrefix: any;
    // export declare let negativeSuffix: any;
    // export declare let paddingCharacter: any;
    // export declare let paddingPosition: any;
    // export declare let perMillSymbol: any;
    // export declare let percentSymbol: any;
    // export declare let plusSign: any;
    // export declare let positivePrefix: any;
    // export declare let positiveSuffix: any;
    // export declare let roundingIncrement: any;
    // export declare let roundingMode: any;
    // export declare let secondaryGroupingSize: any;
    // export declare let useGroupingSeparator: any;
    // export declare let useSignificantDigits: any;
    // export declare let zeroSymbol: any;
  }

  namespace CFRunLoopMode {
    // export declare let commonModes: any;
    // export declare let defaultMode: any;
  }

  namespace CFStreamPropertyKey {
    // export declare let appendToFile: any;
    // export declare let dataWritten: any;
    // export declare let fileCurrentOffset: any;
    // export declare let socketNativeHandle: any;
    // export declare let socketRemoteHostName: any;
    // export declare let socketRemotePortNumber: any;
  }

  namespace CGAffineTransform {
    // export declare let identity: CGAffineTransform;
  }

  namespace CGColor {
    // export declare let __blackColorName: string;
    // export declare let __clearColorName: string;
    // export declare let conversionBlackPointCompensation: string;
    // export declare let conversionTRCSize: string;
    // export declare let __whiteColorName: string;
  }

  namespace CGColorSpace {
    // export declare let acescgLinear: string;
    // export declare let adobeRGB1998: string;
    // export declare let dcip3: string;
    // export declare let displayP3: string;
    // export declare let displayP3_HLG: string;
    // export declare let displayP3_PQ_EOTF: string;
    // export declare let extendedGray: string;
    // export declare let extendedLinearDisplayP3: string;
    // export declare let extendedLinearGray: string;
    // export declare let extendedLinearITUR_2020: string;
    // export declare let extendedLinearSRGB: string;
    // export declare let extendedSRGB: string;
    // export declare let genericCMYK: string;
    // export declare let genericGray: string;
    // export declare let genericGrayGamma2_2: string;
    // export declare let genericLab: string;
    // export declare let genericRGB: string;
    // export declare let genericRGBLinear: string;
    // export declare let genericXYZ: string;
    // export declare let itur_2020: string;
    // export declare let itur_2020_HLG: string;
    // export declare let itur_2020_PQ_EOTF: string;
    // export declare let itur_709: string;
    // export declare let linearGray: string;
    // export declare let linearSRGB: string;
    // export declare let rommrgb: string;
    // export declare let sRGB: string;
  }

  namespace CGDisplayStream {
    // export declare let colorSpace: string;
    // export declare let destinationRect: string;
    // export declare let minimumFrameTime: string;
    // export declare let preserveAspectRatio: string;
    // export declare let queueDepth: string;
    // export declare let showCursor: string;
    // export declare let sourceRect: string;
    // export declare let yCbCrMatrix: string;
    // export declare let yCbCrMatrix_ITU_R_601_4: string;
    // export declare let yCbCrMatrix_ITU_R_709_2: string;
    // export declare let yCbCrMatrix_SMPTE_240M_1995: string;
  }

  namespace CGFont {
    // export declare let variationAxisDefaultValue: string;
    // export declare let variationAxisMaxValue: string;
    // export declare let variationAxisMinValue: string;
    // export declare let variationAxisName: string;
  }

  namespace CGPDFTagProperty {
    // export declare let actualText: any;
    // export declare let alternativeText: any;
    // export declare let languageText: any;
    // export declare let titleText: any;
  }

  namespace CGPoint {
    // export declare let zero: CGPoint;
  }

  namespace CGRect {
    // export declare let infinite: CGRect;
    // export declare let null: CGRect;
    // export declare let zero: CGRect;
  }

  namespace CGSize {
    // export declare let zero: CGSize;
  }

  namespace CIContextOption {
    // export declare let allowLowPower: string;
    // export declare let cacheIntermediates: string;
    // export declare let highQualityDownsample: string;
    // export declare let outputColorSpace: string;
    // export declare let outputPremultiplied: string;
    // export declare let priorityRequestLow: string;
    // export declare let useSoftwareRenderer: string;
    // export declare let workingColorSpace: string;
    // export declare let workingFormat: string;
  }

  namespace CIFormat {
    // export declare let A16: number;
    // export declare let A8: number;
    // export declare let ABGR8: number;
    // export declare let ARGB8: number;
    // export declare let Af: number;
    // export declare let Ah: number;
    // export declare let BGRA8: number;
    // export declare let L16: number;
    // export declare let L8: number;
    // export declare let LA16: number;
    // export declare let LA8: number;
    // export declare let LAf: number;
    // export declare let LAh: number;
    // export declare let Lf: number;
    // export declare let Lh: number;
    // export declare let R16: number;
    // export declare let R8: number;
    // export declare let RG16: number;
    // export declare let RG8: number;
    // export declare let RGBA16: number;
    // export declare let RGBA8: number;
    // export declare let RGBAf: number;
    // export declare let RGBAh: number;
    // export declare let RGf: number;
    // export declare let RGh: number;
    // export declare let Rf: number;
    // export declare let Rh: number;
  }

  namespace CIImageAutoAdjustmentOption {
    // export declare let crop: string;
    // export declare let enhance: string;
    // export declare let features: string;
    // export declare let level: string;
    // export declare let redEye: string;
  }

  namespace CIImageOption {
    // export declare let applyOrientationProperty: string;
    // export declare let auxiliaryDepth: string;
    // export declare let auxiliaryDisparity: string;
    // export declare let auxiliaryPortraitEffectsMatte: string;
    // export declare let auxiliarySemanticSegmentationHairMatte: string;
    // export declare let auxiliarySemanticSegmentationSkinMatte: string;
    // export declare let auxiliarySemanticSegmentationTeethMatte: string;
    // export declare let colorSpace: string;
    // export declare let nearestSampling: string;
    // export declare let properties: string;
    // export declare let providerTileSize: string;
    // export declare let providerUserInfo: string;
  }

  namespace CIImageRepresentationOption {
    // export declare let avDepthData: string;
    // export declare let avPortraitEffectsMatte: string;
    // export declare let avSemanticSegmentationMattes: string;
    // export declare let depthImage: string;
    // export declare let disparityImage: string;
    // export declare let portraitEffectsMatteImage: string;
    // export declare let semanticSegmentationHairMatteImage: string;
    // export declare let semanticSegmentationSkinMatteImage: string;
    // export declare let semanticSegmentationTeethMatteImage: string;
  }

  namespace CIRAWFilterOption {
    // export declare let activeKeys: string;
    // export declare let allowDraftMode: string;
    // export declare let baselineExposure: string;
    // export declare let boostAmount: string;
    // export declare let boostShadowAmount: string;
    // export declare let colorNoiseReductionAmount: string;
    // export declare let decoderVersion: string;
    // export declare let disableGamutMap: string;
    // export declare let enableChromaticNoiseTracking: string;
    // export declare let enableSharpening: string;
    // export declare let enableVendorLensCorrection: string;
    // export declare let ignoreImageOrientation: string;
    // export declare let imageOrientation: string;
    // export declare let linearSpaceFilter: string;
    // export declare let luminanceNoiseReductionAmount: string;
    // export declare let moireAmount: string;
    // export declare let neutralChromaticityX: string;
    // export declare let neutralChromaticityY: string;
    // export declare let neutralLocation: string;
    // export declare let neutralTemperature: string;
    // export declare let neutralTint: string;
    // export declare let noiseReductionAmount: string;
    // export declare let noiseReductionContrastAmount: string;
    // export declare let noiseReductionDetailAmount: string;
    // export declare let noiseReductionSharpnessAmount: string;
    // export declare let scaleFactor: string;
    // export declare let outputNativeSize: string;
    // export declare let supportedDecoderVersions: string;
  }

  namespace CMImageDescriptionFlavor {
    // export declare let mobile3GPFamily: any;
    // export declare let isoFamily: any;
    // export declare let quickTimeMovie: any;
  }

  namespace CMSampleTimingInfo {
    // export declare let invalid: CMSampleTimingInfo;
  }

  namespace CMSoundDescriptionFlavor {
    // export declare let mobile3GPFamily: any;
    // export declare let isoFamily: any;
    // export declare let quickTimeMovie: any;
    // export declare let quickTimeMovieV2: any;
  }

  namespace CMTime {
    // export declare let indefinite: CMTime;
    // export declare let invalid: CMTime;
    // export declare let negativeInfinity: CMTime;
    // export declare let positiveInfinity: CMTime;
    // export declare let zero: CMTime;
  }

  namespace CMTimeMapping {
    // export declare let invalid: CMTimeMapping;
  }

  namespace CMTimeRange {
    // export declare let invalid: CMTimeRange;
    // export declare let zero: CMTimeRange;
  }

  namespace DateComponentsFormatter {
    export enum UnitsStyle {
      Positional = 0,
      Abbreviated = 1,
      Short = 2,
      Full = 3,
      SpellOut = 4,
      Brief = 5
    }

    export enum ZeroFormattingBehavior {
      None = 0,
      Default = 1,
      DropLeading = 2,
      DropMiddle = 4,
      DropTrailing = 8,
      DropAll = 14,
      Pad = 65536
    }

  }

  namespace DateFormatter {
    export enum Behavior {
      BehaviorDefault = 0,
      Behavior10_0 = 1000,
      Behavior10_4 = 1040
    }

    export enum Style {
      NoStyle = 0,
      ShortStyle = 1,
      MediumStyle = 2,
      LongStyle = 3,
      FullStyle = 4
    }

  }

  namespace DateIntervalFormatter {
    export enum Style {
      NoStyle = 0,
      ShortStyle = 1,
      MediumStyle = 2,
      LongStyle = 3,
      FullStyle = 4
    }

  }

  namespace DistributedNotificationCenter {
    export enum Options {
      DeliverImmediately = 1,
      PostToAllSessions = 2
    }

    export enum SuspensionBehavior {
      Drop = 1,
      Coalesce = 2,
      Hold = 3,
      DeliverImmediately = 4
    }

    // export declare let localNotificationCenterType: string;
  }

  namespace EnergyFormatter {
    export enum Unit {
      Joule = 11,
      Kilojoule = 14,
      Calorie = 1793,
      Kilocalorie = 1794
    }

  }

  namespace FileAttributeKey {
    // export declare let appendOnly: string;
    // export declare let busy: string;
    // export declare let creationDate: string;
    // export declare let deviceIdentifier: string;
    // export declare let extensionHidden: string;
    // export declare let groupOwnerAccountID: string;
    // export declare let groupOwnerAccountName: string;
    // export declare let hfsCreatorCode: string;
    // export declare let hfsTypeCode: string;
    // export declare let immutable: string;
    // export declare let modificationDate: string;
    // export declare let ownerAccountID: string;
    // export declare let ownerAccountName: string;
    // export declare let posixPermissions: string;
    // export declare let protectionKey: string;
    // export declare let referenceCount: string;
    // export declare let size: string;
    // export declare let systemFileNumber: string;
    // export declare let systemFreeNodes: string;
    // export declare let systemFreeSize: string;
    // export declare let systemNodes: string;
    // export declare let systemNumber: string;
    // export declare let systemSize: string;
    // export declare let type: string;
  }

  namespace FileAttributeType {
    // export declare let typeBlockSpecial: string;
    // export declare let typeCharacterSpecial: string;
    // export declare let typeDirectory: string;
    // export declare let typeRegular: string;
    // export declare let typeSocket: string;
    // export declare let typeSymbolicLink: string;
    // export declare let typeUnknown: string;
  }

  namespace FileHandle {
    // export declare let readCompletionNotification: string;
  }

  namespace FileManager {
    export enum DirectoryEnumerationOptions {
      SkipsSubdirectoryDescendants = 1,
      SkipsPackageDescendants = 2,
      SkipsHiddenFiles = 4,
      IncludesDirectoriesPostOrder = 8,
      ProducesRelativePathURLs = 16
    }

    export enum ItemReplacementOptions {
      UsingNewMetadataOnly = 1,
      WithoutDeletingBackupItem = 2
    }

    export enum UnmountOptions {
      AllPartitionsAndEjectDisk = 1,
      WithoutUI = 2
    }

    export enum SearchPathDirectory {
      ApplicationDirectory = 1,
      DemoApplicationDirectory = 2,
      DeveloperApplicationDirectory = 3,
      AdminApplicationDirectory = 4,
      LibraryDirectory = 5,
      DeveloperDirectory = 6,
      UserDirectory = 7,
      DocumentationDirectory = 8,
      DocumentDirectory = 9,
      CoreServiceDirectory = 10,
      AutosavedInformationDirectory = 11,
      DesktopDirectory = 12,
      CachesDirectory = 13,
      ApplicationSupportDirectory = 14,
      DownloadsDirectory = 15,
      InputMethodsDirectory = 16,
      MoviesDirectory = 17,
      MusicDirectory = 18,
      PicturesDirectory = 19,
      PrinterDescriptionDirectory = 20,
      SharedPublicDirectory = 21,
      PreferencePanesDirectory = 22,
      ApplicationScriptsDirectory = 23,
      ItemReplacementDirectory = 99,
      AllApplicationsDirectory = 100,
      AllLibrariesDirectory = 101,
      TrashDirectory = 102
    }

    export enum SearchPathDomainMask {
      UserDomainMask = 1,
      LocalDomainMask = 2,
      NetworkDomainMask = 4,
      SystemDomainMask = 8,
      AllDomainsMask = 65535
    }

    export enum URLRelationship {
      Contains = 0,
      Same = 1,
      Other = 2
    }

    export enum VolumeEnumerationOptions {
      SkipHiddenVolumes = 2,
      ProduceFileReferenceURLs = 4
    }

  }

  namespace FileProtectionType {
    // export declare let complete: string;
    // export declare let completeUnlessOpen: string;
    // export declare let completeUntilFirstUserAuthentication: string;
    // export declare let none: string;
  }

  namespace FileWrapper {
    export enum ReadingOptions {
      Immediate = 1,
      WithoutMapping = 2
    }

    export enum WritingOptions {
      Atomic = 1,
      WithNameUpdating = 2
    }

  }

  namespace Formatter {
    export enum Context {
      Unknown = 0,
      Dynamic = 1,
      Standalone = 2,
      ListItem = 3,
      BeginningOfSentence = 4,
      MiddleOfSentence = 5
    }

    export enum UnitStyle {
      Short = 1,
      Medium = 2,
      Long = 3
    }

  }

  namespace HTTPCookie {
    export enum AcceptPolicy {
      Always = 0,
      Never = 1,
      OnlyFromMainDocumentDomain = 2
    }

  }

  namespace HTTPCookiePropertyKey {
    // export declare let comment: string;
    // export declare let commentURL: string;
    // export declare let discard: string;
    // export declare let domain: string;
    // export declare let expires: string;
    // export declare let maximumAge: string;
    // export declare let name: string;
    // export declare let originURL: string;
    // export declare let path: string;
    // export declare let port: string;
    // export declare let sameSitePolicy: string;
    // export declare let secure: string;
    // export declare let value: string;
    // export declare let version: string;
  }

  namespace HTTPCookieStringPolicy {
    // export declare let sameSiteLax: string;
    // export declare let sameSiteStrict: string;
  }

  namespace ISO8601DateFormatter {
    export enum Options {
      WithYear = 1,
      WithMonth = 2,
      WithWeekOfYear = 4,
      WithDay = 16,
      WithTime = 32,
      WithTimeZone = 64,
      WithSpaceBetweenDateAndTime = 128,
      WithDashSeparatorInDate = 256,
      WithColonSeparatorInTime = 512,
      WithColonSeparatorInTimeZone = 1024,
      WithFractionalSeconds = 2048,
      WithFullDate = 275,
      WithFullTime = 1632,
      WithInternetDateTime = 1907
    }

  }

  namespace JSONSerialization {
    export enum ReadingOptions {
      MutableContainers = 1,
      MutableLeaves = 2,
      FragmentsAllowed = 4,
      AllowFragments = 4
    }

    export enum WritingOptions {
      PrettyPrinted = 1,
      SortedKeys = 2,
      FragmentsAllowed = 4,
      WithoutEscapingSlashes = 8
    }

  }

  namespace LengthFormatter {
    export enum Unit {
      Millimeter = 8,
      Centimeter = 9,
      Meter = 11,
      Kilometer = 14,
      Inch = 1281,
      Foot = 1282,
      Yard = 1283,
      Mile = 1284
    }

  }

  namespace MassFormatter {
    export enum Unit {
      Gram = 11,
      Kilogram = 14,
      Ounce = 1537,
      Pound = 1538,
      Stone = 1539
    }

  }

  namespace MeasurementFormatter {
    export enum UnitOptions {
      ProvidedUnit = 1,
      NaturalScale = 2,
      TemperatureWithoutUnit = 4
    }

  }

  namespace NSAccessibility {
    export enum AnnotationPosition {
      FullRange = 0,
      Start = 1,
      End = 2
    }

    export enum Orientation {
      Unknown = 0,
      Vertical = 1,
      Horizontal = 2
    }

    export enum RulerMarkerType {
      Unknown = 0,
      TabStopLeft = 1,
      TabStopRight = 2,
      TabStopCenter = 3,
      TabStopDecimal = 4,
      IndentHead = 5,
      IndentTail = 6,
      IndentFirstLine = 7
    }

    export enum SortDirection {
      Unknown = 0,
      Ascending = 1,
      Descending = 2
    }

    export enum Units {
      Unknown = 0,
      Inches = 1,
      Centimeters = 2,
      Points = 3,
      Picas = 4
    }

    // export declare let activationPoint: string;
    // export declare let allowedValues: string;
    // export declare let alternateUIVisible: string;
    // export declare let element: string;
    // export declare let label: string;
    // export declare let location: string;
    // export declare let announcement: string;
    // export declare let announcementRequested: string;
    // export declare let applicationActivated: string;
    // export declare let applicationDeactivated: string;
    // export declare let applicationHidden: string;
    // export declare let application: string;
    // export declare let applicationShown: string;
    // export declare let ascending: string;
    // export declare let attributedStringForRange: string;
    // export declare let boundsForRange: string;
    // export declare let browser: string;
    // export declare let busyIndicator: string;
    // export declare let button: string;
    // export declare let cancel: string;
    // export declare let cancelButton: string;
    // export declare let cellForColumnAndRow: string;
    // export declare let cell: string;
    // export declare let centerTabStop: string;
    // export declare let centimeters: string;
    // export declare let checkBox: string;
    // export declare let children: string;
    // export declare let clearButton: string;
    // export declare let closeButton: string;
    // export declare let collectionListSubrole: string;
    // export declare let colorWell: string;
    // export declare let columnCount: string;
    // export declare let columnHeaderUIElements: string;
    // export declare let columnIndexRange: string;
    // export declare let column: string;
    // export declare let columnTitles: string;
    // export declare let columns: string;
    // export declare let comboBox: string;
    // export declare let confirm: string;
    // export declare let containsProtectedContent: string;
    // export declare let contentList: string;
    // export declare let contents: string;
    // export declare let created: string;
    // export declare let criticalValue: string;
    // export declare let decimalTabStop: string;
    // export declare let decrement: string;
    // export declare let decrementArrow: string;
    // export declare let decrementButton: string;
    // export declare let decrementPage: string;
    // export declare let defaultButton: string;
    // export declare let definitionList: string;
    // export declare let delete_: string;
    // export declare let descending: string;
    // export declare let description: string;
    // export declare let descriptionList: string;
    // export declare let dialog: string;
    // export declare let disclosedByRow: string;
    // export declare let disclosedRows: string;
    // export declare let disclosing: string;
    // export declare let disclosureLevel: string;
    // export declare let disclosureTriangle: string;
    // export declare let document: string;
    // export declare let drawerCreated: string;
    // export declare let drawer: string;
    // export declare let edited: string;
    // export declare let enabled: string;
    // export declare let ErrorCodeExceptionInfo: string;
    // export declare let expanded: string;
    // export declare let extrasMenuBar: string;
    // export declare let filename: string;
    // export declare let firstLineIndent: string;
    // export declare let floatingWindow: string;
    // export declare let focused: string;
    // export declare let focusedUIElement: string;
    // export declare let focusedUIElementChanged: string;
    // export declare let focusedWindow: string;
    // export declare let focusedWindowChanged: string;
    // export declare let fontFamily: string;
    // export declare let fontName: string;
    // export declare let fontSize: string;
    // export declare let frontmost: string;
    // export declare let fullScreenButton: string;
    // export declare let grid: string;
    // export declare let group: string;
    // export declare let growArea: string;
    // export declare let handle: string;
    // export declare let handles: string;
    // export declare let headIndent: string;
    // export declare let header: string;
    // export declare let help: string;
    // export declare let helpTagCreated: string;
    // export declare let helpTag: string;
    // export declare let hidden: string;
    // export declare let horizontal: string;
    // export declare let horizontalScrollBar: string;
    // export declare let horizontalUnitDescription: string;
    // export declare let horizontalUnits: string;
    // export declare let identifier: string;
    // export declare let image: string;
    // export declare let inches: string;
    // export declare let increment: string;
    // export declare let incrementArrow: string;
    // export declare let incrementButton: string;
    // export declare let incrementPage: string;
    // export declare let incrementor: string;
    // export declare let index: string;
    // export declare let insertionPointLineNumber: string;
    // export declare let labelUIElements: string;
    // export declare let labelValue: string;
    // export declare let layoutArea: string;
    // export declare let layoutChanged: string;
    // export declare let layoutItem: string;
    // export declare let layoutPointForScreenPoint: string;
    // export declare let layoutSizeForScreenSize: string;
    // export declare let leftTabStop: string;
    // export declare let levelIndicator: string;
    // export declare let lineForIndex: string;
    // export declare let link: string;
    // export declare let linkedUIElements: string;
    // export declare let list: string;
    // export declare let main: string;
    // export declare let mainWindow: string;
    // export declare let mainWindowChanged: string;
    // export declare let markerGroupUIElement: string;
    // export declare let markerType: string;
    // export declare let markerTypeDescription: string;
    // export declare let markerUIElements: string;
    // export declare let markerValues: string;
    // export declare let matte: string;
    // export declare let maxValue: string;
    // export declare let menuBar: string;
    // export declare let menuBarItem: string;
    // export declare let menuButton: string;
    // export declare let menuItem: string;
    // export declare let menu: string;
    // export declare let minValue: string;
    // export declare let minimizeButton: string;
    // export declare let minimized: string;
    // export declare let modal: string;
    // export declare let moved: string;
    // export declare let nextContents: string;
    // export declare let numberOfCharacters: string;
    // export declare let orderedByRow: string;
    // export declare let orientation: string;
    // export declare let outline: string;
    // export declare let outlineRow: string;
    // export declare let overflowButton: string;
    // export declare let pageRole: string;
    // export declare let parent: string;
    // export declare let picas: string;
    // export declare let pick: string;
    // export declare let placeholderValue: string;
    // export declare let points: string;
    // export declare let popUpButton: string;
    // export declare let popover: string;
    // export declare let position: string;
    // export declare let press: string;
    // export declare let previousContents: string;
    // export declare let priority: string;
    // export declare let progressIndicator: string;
    // export declare let proxy: string;
    // export declare let rtfForRange: string;
    // export declare let radioButton: string;
    // export declare let radioGroup: string;
    // export declare let raise: string;
    // export declare let rangeForIndex: string;
    // export declare let rangeForLine: string;
    // export declare let rangeForPosition: string;
    // export declare let ratingIndicator: string;
    // export declare let relevanceIndicator: string;
    // export declare let required: string;
    // export declare let resized: string;
    // export declare let rightTabStop: string;
    // export declare let role: string;
    // export declare let roleDescription: string;
    // export declare let rowCollapsed: string;
    // export declare let rowCount: string;
    // export declare let rowCountChanged: string;
    // export declare let rowExpanded: string;
    // export declare let rowHeaderUIElements: string;
    // export declare let rowIndexRange: string;
    // export declare let row: string;
    // export declare let rows: string;
    // export declare let rulerMarker: string;
    // export declare let ruler: string;
    // export declare let screenPointForLayoutPoint: string;
    // export declare let screenSizeForLayoutSize: string;
    // export declare let scrollArea: string;
    // export declare let scrollBar: string;
    // export declare let searchButton: string;
    // export declare let searchField: string;
    // export declare let searchMenu: string;
    // export declare let sectionListSubrole: string;
    // export declare let secureTextField: string;
    // export declare let selected: string;
    // export declare let selectedCells: string;
    // export declare let selectedCellsChanged: string;
    // export declare let selectedChildren: string;
    // export declare let selectedChildrenChanged: string;
    // export declare let selectedChildrenMoved: string;
    // export declare let selectedColumns: string;
    // export declare let selectedColumnsChanged: string;
    // export declare let selectedRows: string;
    // export declare let selectedRowsChanged: string;
    // export declare let selectedText: string;
    // export declare let selectedTextChanged: string;
    // export declare let selectedTextRange: string;
    // export declare let selectedTextRanges: string;
    // export declare let servesAsTitleForUIElements: string;
    // export declare let sharedCharacterRange: string;
    // export declare let sharedFocusElements: string;
    // export declare let sharedTextUIElements: string;
    // export declare let sheetCreated: string;
    // export declare let sheet: string;
    // export declare let showAlternateUI: string;
    // export declare let showDefaultUI: string;
    // export declare let showMenu: string;
    // export declare let shownMenu: string;
    // export declare let size: string;
    // export declare let slider: string;
    // export declare let sortButton: string;
    // export declare let sortDirection: string;
    // export declare let splitGroup: string;
    // export declare let splitter: string;
    // export declare let splitters: string;
    // export declare let standardWindow: string;
    // export declare let staticText: string;
    // export declare let stringForRange: string;
    // export declare let styleRangeForIndex: string;
    // export declare let subrole: string;
    // export declare let switch_: string;
    // export declare let systemDialog: string;
    // export declare let systemFloatingWindow: string;
    // export declare let systemWide: string;
    // export declare let tabButtonSubrole: string;
    // export declare let tabGroup: string;
    // export declare let table: string;
    // export declare let tableRow: string;
    // export declare let tabs: string;
    // export declare let tailIndent: string;
    // export declare let textArea: string;
    // export declare let textAttachment: string;
    // export declare let textField: string;
    // export declare let textLink: string;
    // export declare let timeline: string;
    // export declare let title: string;
    // export declare let titleChanged: string;
    // export declare let titleUIElement: string;
    // export declare let toggle: string;
    // export declare let toolbarButton: string;
    // export declare let toolbar: string;
    // export declare let topLevelUIElement: string;
    // export declare let uiElementDestroyed: string;
    // export declare let uiElements: string;
    // export declare let url: string;
    // export declare let unitDescription: string;
    // export declare let units: string;
    // export declare let unitsChanged: string;
    // export declare let unknown: string;
    // export declare let value: string;
    // export declare let valueChanged: string;
    // export declare let valueDescription: string;
    // export declare let valueIndicator: string;
    // export declare let vertical: string;
    // export declare let verticalScrollBar: string;
    // export declare let verticalUnitDescription: string;
    // export declare let verticalUnits: string;
    // export declare let visibleCells: string;
    // export declare let visibleCharacterRange: string;
    // export declare let visibleChildren: string;
    // export declare let visibleColumns: string;
    // export declare let visibleName: string;
    // export declare let visibleRows: string;
    // export declare let warningValue: string;
    // export declare let window: string;
    // export declare let windowCreated: string;
    // export declare let windowDeminiaturized: string;
    // export declare let windowMiniaturized: string;
    // export declare let windowMoved: string;
    // export declare let windowResized: string;
    // export declare let windows: string;
    // export declare let zoomButton: string;
  }

  namespace NSAccessibilityCustomRotor {
    export enum SearchDirection {
      Previous = 0,
      Next = 1
    }

    export enum RotorType {
      Custom = 0,
      Any = 1,
      Annotation = 2,
      BoldText = 3,
      Heading = 4,
      HeadingLevel1 = 5,
      HeadingLevel2 = 6,
      HeadingLevel3 = 7,
      HeadingLevel4 = 8,
      HeadingLevel5 = 9,
      HeadingLevel6 = 10,
      Image = 11,
      ItalicText = 12,
      Landmark = 13,
      Link = 14,
      List = 15,
      MisspelledWord = 16,
      Table = 17,
      TextField = 18,
      UnderlinedText = 19,
      VisitedLink = 20
    }

  }

  namespace NSAlert {
    export enum Style {
      Warning = 0,
      Informational = 1,
      Critical = 2
    }

  }

  namespace NSAnimation {
    export enum BlockingMode {
      Blocking = 0,
      Nonblocking = 1,
      NonblockingThreaded = 2
    }

    export enum Curve {
      EaseInOut = 0,
      EaseIn = 1,
      EaseOut = 2,
      Linear = 3
    }

    // export declare let progressMarkUserInfoKey: string;
    // export declare let progressMarkNotification: string;
    // export type Progress = number;
  }

  namespace NSAppKitVersion {
    // export declare let current: number;
    // export declare let macOS10_0: number;
    // export declare let macOS10_1: number;
    // export declare let macOS10_10: number;
    // export declare let macOS10_10_2: number;
    // export declare let macOS10_10_3: number;
    // export declare let macOS10_10_4: number;
    // export declare let macOS10_10_5: number;
    // export declare let macOS10_10_Max: number;
    // export declare let macOS10_11: number;
    // export declare let macOS10_11_1: number;
    // export declare let macOS10_11_2: number;
    // export declare let macOS10_11_3: number;
    // export declare let macOS10_12: number;
    // export declare let macOS10_12_1: number;
    // export declare let macOS10_12_2: number;
    // export declare let macOS10_13: number;
    // export declare let macOS10_13_1: number;
    // export declare let macOS10_13_2: number;
    // export declare let macOS10_13_4: number;
    // export declare let number10_14: number;
    // export declare let number10_14_1: number;
    // export declare let number10_14_2: number;
    // export declare let number10_14_3: number;
    // export declare let number10_14_4: number;
    // export declare let number10_14_5: number;
    // export declare let macOS10_2: number;
    // export declare let macOS10_2_3: number;
    // export declare let macOS10_3: number;
    // export declare let macOS10_3_2: number;
    // export declare let macOS10_3_3: number;
    // export declare let macOS10_3_5: number;
    // export declare let macOS10_3_7: number;
    // export declare let macOS10_3_9: number;
    // export declare let macOS10_4: number;
    // export declare let macOS10_4_1: number;
    // export declare let macOS10_4_3: number;
    // export declare let macOS10_4_4: number;
    // export declare let macOS10_4_7: number;
    // export declare let macOS10_5: number;
    // export declare let macOS10_5_2: number;
    // export declare let macOS10_5_3: number;
    // export declare let macOS10_6: number;
    // export declare let macOS10_7: number;
    // export declare let macOS10_7_2: number;
    // export declare let macOS10_7_3: number;
    // export declare let macOS10_7_4: number;
    // export declare let macOS10_8: number;
    // export declare let macOS10_9: number;
    // export declare let numberWithColumnResizingBrowser: number;
    // export declare let numberWithContinuousScrollingBrowser: number;
    // export declare let numberWithCursorSizeSupport: number;
    // export declare let numberWithCustomSheetPosition: number;
    // export declare let numberWithDeferredWindowDisplaySupport: number;
    // export declare let numberWithDirectionalTabs: number;
    // export declare let numberWithDockTilePlugInSupport: number;
    // export declare let numberWithPatternColorLeakFix: number;
  }

  namespace NSAppearance {
    // export declare let accessibilityHighContrastAqua: string;
    // export declare let accessibilityHighContrastDarkAqua: string;
    // export declare let accessibilityHighContrastVibrantDark: string;
    // export declare let accessibilityHighContrastVibrantLight: string;
    // export declare let aqua: string;
    // export declare let darkAqua: string;
    // export declare let vibrantDark: string;
    // export declare let vibrantLight: string;
  }

  namespace NSAppleEventDescriptor {
    export enum SendOptions {
      NoReply = 1,
      QueueReply = 2,
      WaitForReply = 3,
      NeverInteract = 16,
      CanInteract = 32,
      AlwaysInteract = 48,
      CanSwitchLayer = 64,
      DontRecord = 4096,
      DontExecute = 8192,
      DontAnnotate = 65536,
      DefaultOptions = 35
    }

  }

  namespace NSAppleEventManager {
    // export type SuspensionID = OpaquePointer;
  }

  namespace NSAppleScript {
    // export declare let errorAppName: string;
    // export declare let errorBriefMessage: string;
    // export declare let errorMessage: string;
    // export declare let errorNumber: string;
    // export declare let errorRange: string;
  }

  namespace NSApplication {
    export enum ActivationOptions {
      ActivateAllWindows = 1,
      ActivateIgnoringOtherApps = 2
    }

    export enum ActivationPolicy {
      Regular = 0,
      Accessory = 1,
      Prohibited = 2
    }

    export enum DelegateReply {
      Success = 0,
      Cancel = 1,
      Failure = 2
    }

    export enum OcclusionState {
      Visible = 2
    }

    export enum PresentationOptions {
      Default = 0,
      AutoHideDock = 1,
      HideDock = 2,
      AutoHideMenuBar = 4,
      HideMenuBar = 8,
      DisableAppleMenu = 16,
      DisableProcessSwitching = 32,
      DisableForceQuit = 64,
      DisableSessionTermination = 128,
      DisableHideApplication = 256,
      DisableMenuBarTransparency = 512,
      FullScreen = 1024,
      AutoHideToolbar = 2048,
      DisableCursorLocationAssistance = 4096
    }

    export enum PrintReply {
      PrintingCancelled = 0,
      PrintingSuccess = 1,
      PrintingFailure = 3,
      PrintingReplyLater = 2
    }

    export enum TerminateReply {
      TerminateCancel = 0,
      TerminateNow = 1,
      TerminateLater = 2
    }

    export enum RemoteNotificationType {
      None = 0,
      Badge = 1,
      Sound = 2,
      Alert = 4
    }

    export enum RequestUserAttentionType {
      CriticalRequest = 0,
      InformationalRequest = 10
    }

    export enum WindowListOptions {
      OrderedFrontToBack = 1
    }

    // export declare let applicationIcon: string;
    // export declare let applicationName: string;
    // export declare let applicationVersion: string;
    // export declare let credits: string;
    // export declare let version: string;
    // export declare let alertFirstButtonReturn: number;
    // export declare let alertSecondButtonReturn: number;
    // export declare let alertThirdButtonReturn: number;
    // export declare let didBecomeActiveNotification: string;
    // export declare let didChangeOcclusionStateNotification: string;
    // export declare let didChangeScreenParametersNotification: string;
    // export declare let didFinishLaunchingNotification: string;
    // export declare let didFinishRestoringWindowsNotification: string;
    // export declare let didHideNotification: string;
    // export declare let didResignActiveNotification: string;
    // export declare let didUnhideNotification: string;
    // export declare let didUpdateNotification: string;
    // export declare let launchIsDefaultUserInfoKey: string;
    // export declare let launchUserNotificationUserInfoKey: string;
    // export declare let willBecomeActiveNotification: string;
    // export declare let willFinishLaunchingNotification: string;
    // export declare let willHideNotification: string;
    // export declare let willResignActiveNotification: string;
    // export declare let willTerminateNotification: string;
    // export declare let willUnhideNotification: string;
    // export declare let willUpdateNotification: string;
    // export declare let abort: number;
    // export declare let cancel: number;
    // export declare let continue_: number;
    // export declare let OK: number;
    // export declare let stop: number;
    // export type ModalSession = OpaquePointer;
  }

  namespace NSArray {
    // export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSAttributedString {
    export enum SpellingState {
      SpellingFlag = 1,
      GrammarFlag = 2
    }

    export enum EnumerationOptions {
      Reverse = 2,
      LongestEffectiveRangeNotRequired = 1048576
    }

    // export declare let accessibilityAnnotationTextAttribute: string;
    // export declare let accessibilityAttachment: string;
    // export declare let accessibilityAutocorrected: string;
    // export declare let accessibilityBackgroundColor: string;
    // export declare let accessibilityCustomText: string;
    // export declare let accessibilityFont: string;
    // export declare let accessibilityForegroundColor: string;
    // export declare let accessibilityLanguage: string;
    // export declare let accessibilityLink: string;
    // export declare let accessibilityListItemIndex: string;
    // export declare let accessibilityListItemLevel: string;
    // export declare let accessibilityListItemPrefix: string;
    // export declare let accessibilityMarkedMisspelled: string;
    // export declare let accessibilityMisspelled: string;
    // export declare let accessibilityShadow: string;
    // export declare let accessibilityStrikethroughColor: string;
    // export declare let accessibilityStrikethrough: string;
    // export declare let accessibilitySuperscript: string;
    // export declare let accessibilityAlignment: string;
    // export declare let accessibilityUnderlineColor: string;
    // export declare let accessibilityUnderline: string;
    // export declare let appearance: string;
    // export declare let attachment: string;
    // export declare let author: string;
    // export declare let backgroundColor: string;
    // export declare let baseURL: string;
    // export declare let baselineOffset: string;
    // export declare let bottomMargin: string;
    // export declare let category: string;
    // export declare let characterEncoding: string;
    // export declare let cocoaVersion: string;
    // export declare let comment: string;
    // export declare let company: string;
    // export declare let converted: string;
    // export declare let copyright: string;
    // export declare let creationTime: string;
    // export declare let cursor: string;
    // export declare let defaultAttributes: string;
    // export declare let defaultTabInterval: string;
    // export declare let docFormat: string;
    // export declare let documentType: string;
    // export declare let editor: string;
    // export declare let excludedElements: string;
    // export declare let expansion: string;
    // export declare let fileType: string;
    // export declare let font: string;
    // export declare let foregroundColor: string;
    // export declare let glyphInfo: string;
    // export declare let html: string;
    // export declare let hyphenationFactor: string;
    // export declare let kern: string;
    // export declare let keywords: string;
    // export declare let leftMargin: string;
    // export declare let ligature: string;
    // export declare let link: string;
    // export declare let macSimpleText: string;
    // export declare let manager: string;
    // export declare let markedClauseSegment: string;
    // export declare let modificationTime: string;
    // export declare let obliqueness: string;
    // export declare let officeOpenXML: string;
    // export declare let openDocument: string;
    // export declare let paperSize: string;
    // export declare let paragraphStyle: string;
    // export declare let plain: string;
    // export declare let prefixSpaces: string;
    // export declare let rtfd: string;
    // export declare let rtf: string;
    // export declare let readOnly: string;
    // export declare let rightMargin: string;
    // export declare let shadow: string;
    // export declare let sourceTextScaling: string;
    // export declare let spellingState: string;
    // export declare let strikethroughColor: string;
    // export declare let strikethroughStyle: string;
    // export declare let strokeColor: string;
    // export declare let strokeWidth: string;
    // export declare let subject: string;
    // export declare let superscript: string;
    // export declare let targetTextScaling: string;
    // export declare let textAlternatives: string;
    // export declare let textEffect: string;
    // export declare let letterpressStyle: string;
    // export declare let textEncodingName: string;
    // export declare let orientation: string;
    // export declare let range: string;
    // export declare let textLayoutSections: string;
    // export declare let textScaling: string;
    // export declare let textSizeMultiplier: string;
    // export declare let timeout: string;
    // export declare let title: string;
    // export declare let toolTip: string;
    // export declare let topMargin: string;
    // export declare let underlineColor: string;
    // export declare let underlineStyle: string;
    // export declare let verticalGlyphForm: string;
    // export declare let viewMode: string;
    // export declare let viewSize: string;
    // export declare let viewZoom: string;
    // export declare let webArchive: string;
    // export declare let webPreferences: string;
    // export declare let webResourceLoadDelegate: string;
    // export declare let wordML: string;
    // export declare let writingDirection: string;
  }

  namespace NSBackgroundActivityScheduler {
    export enum Result {
      Finished = 1,
      Deferred = 2
    }

  }

  namespace NSBezierPath {
    export enum ElementType {
      MoveTo = 0,
      LineTo = 1,
      CurveTo = 2,
      ClosePath = 3
    }

    export enum LineCapStyle {
      Butt = 0,
      Round = 1,
      Square = 2
    }

    export enum LineJoinStyle {
      Miter = 0,
      Round = 1,
      Bevel = 2
    }

    export enum WindingRule {
      NonZero = 0,
      EvenOdd = 1
    }

    // export declare let bevel: NSBezierPath.LineJoinStyle;
    // export declare let butt: NSBezierPath.LineCapStyle;
    // export declare let closePath: NSBezierPath.ElementType;
    // export declare let curveTo: NSBezierPath.ElementType;
    // export declare let evenOdd: NSBezierPath.WindingRule;
    // export declare let lineTo: NSBezierPath.ElementType;
    // export declare let miter: NSBezierPath.LineJoinStyle;
    // export declare let moveTo: NSBezierPath.ElementType;
    // export declare let nonZero: NSBezierPath.WindingRule;
    // export declare let round: NSBezierPath.LineCapStyle;
    // export declare let square: NSBezierPath.LineCapStyle;
  }

  namespace NSBindingInfoKey {
    // export declare let observedKeyPath: string;
    // export declare let observedObject: string;
    // export declare let options: string;
  }

  namespace NSBindingName {
    // export declare let alignment: string;
    // export declare let alternateImage: string;
    // export declare let alternateTitle: string;
    // export declare let animate: string;
    // export declare let animationDelay: string;
    // export declare let argument: string;
    // export declare let attributedString: string;
    // export declare let contentArray: string;
    // export declare let contentArrayForMultipleSelection: string;
    // export declare let content: string;
    // export declare let contentDictionary: string;
    // export declare let contentHeight: string;
    // export declare let contentObject: string;
    // export declare let contentObjects: string;
    // export declare let contentSet: string;
    // export declare let contentValues: string;
    // export declare let contentWidth: string;
    // export declare let criticalValue: string;
    // export declare let data: string;
    // export declare let displayPatternTitle: string;
    // export declare let displayPatternValue: string;
    // export declare let documentEdited: string;
    // export declare let doubleClickArgument: string;
    // export declare let doubleClickTarget: string;
    // export declare let editable: string;
    // export declare let enabled: string;
    // export declare let excludedKeys: string;
    // export declare let filterPredicate: string;
    // export declare let font: string;
    // export declare let fontBold: string;
    // export declare let fontFamilyName: string;
    // export declare let fontItalic: string;
    // export declare let fontName: string;
    // export declare let fontSize: string;
    // export declare let headerTitle: string;
    // export declare let hidden: string;
    // export declare let image: string;
    // export declare let includedKeys: string;
    // export declare let initialKey: string;
    // export declare let initialValue: string;
    // export declare let isIndeterminate: string;
    // export declare let label: string;
    // export declare let localizedKeyDictionary: string;
    // export declare let managedObjectContext: string;
    // export declare let maxValue: string;
    // export declare let maxWidth: string;
    // export declare let maximumRecents: string;
    // export declare let minValue: string;
    // export declare let minWidth: string;
    // export declare let mixedStateImage: string;
    // export declare let offStateImage: string;
    // export declare let onStateImage: string;
    // export declare let positioningRect: string;
    // export declare let predicate: string;
    // export declare let recentSearches: string;
    // export declare let representedFilename: string;
    // export declare let rowHeight: string;
    // export declare let selectedIdentifier: string;
    // export declare let selectedIndex: string;
    // export declare let selectedLabel: string;
    // export declare let selectedObject: string;
    // export declare let selectedObjects: string;
    // export declare let selectedTag: string;
    // export declare let selectedValue: string;
    // export declare let selectedValues: string;
    // export declare let selectionIndexPaths: string;
    // export declare let selectionIndexes: string;
    // export declare let sortDescriptors: string;
    // export declare let target: string;
    // export declare let textColor: string;
    // export declare let title: string;
    // export declare let toolTip: string;
    // export declare let transparent: string;
    // export declare let value: string;
    // export declare let valuePath: string;
    // export declare let valueURL: string;
    // export declare let visible: string;
    // export declare let warningValue: string;
    // export declare let width: string;
  }

  namespace NSBindingOption {
    // export declare let allowsEditingMultipleValuesSelection: string;
    // export declare let allowsNullArgument: string;
    // export declare let alwaysPresentsApplicationModalAlerts: string;
    // export declare let conditionallySetsEditable: string;
    // export declare let conditionallySetsEnabled: string;
    // export declare let conditionallySetsHidden: string;
    // export declare let contentPlacementTag: string;
    // export declare let continuouslyUpdatesValue: string;
    // export declare let createsSortDescriptor: string;
    // export declare let deletesObjectsOnRemove: string;
    // export declare let displayName: string;
    // export declare let displayPattern: string;
    // export declare let handlesContentAsCompoundValue: string;
    // export declare let insertsNullPlaceholder: string;
    // export declare let invokesSeparatelyWithArrayObjects: string;
    // export declare let multipleValuesPlaceholder: string;
    // export declare let noSelectionPlaceholder: string;
    // export declare let notApplicablePlaceholder: string;
    // export declare let nullPlaceholder: string;
    // export declare let predicateFormat: string;
    // export declare let raisesForNotApplicableKeys: string;
    // export declare let selectorName: string;
    // export declare let selectsAllWhenSettingContent: string;
    // export declare let validatesImmediately: string;
    // export declare let valueTransformer: string;
    // export declare let valueTransformerName: string;
  }

  namespace NSBitmapImageRep {
    export enum Format {
      AlphaFirst = 1,
      AlphaNonpremultiplied = 2,
      FloatingPointSamples = 4,
      SixteenBitLittleEndian = 256,
      ThirtyTwoBitLittleEndian = 512,
      SixteenBitBigEndian = 1024,
      ThirtyTwoBitBigEndian = 2048
    }

    export enum FileType {
      TIFF = 0,
      BMP = 1,
      GIF = 2,
      JPEG = 3,
      PNG = 4,
      JPEG2000 = 5
    }

    export enum LoadStatus {
      UnknownType = -1,
      ReadingHeader = -2,
      WillNeedAllData = -3,
      InvalidData = -4,
      UnexpectedEOF = -5,
      Completed = -6
    }

    export enum TIFFCompression {
      None = 1,
      CCITTFAX3 = 3,
      CCITTFAX4 = 4,
      LZW = 5,
      JPEG = 6,
      NEXT = 32766,
      PackBits = 32773,
      OldJPEG = 32865
    }

    // export declare let colorSyncProfileData: string;
    // export declare let compressionFactor: string;
    // export declare let compressionMethod: string;
    // export declare let currentFrame: string;
    // export declare let currentFrameDuration: string;
    // export declare let ditherTransparency: string;
    // export declare let exifData: string;
    // export declare let fallbackBackgroundColor: string;
    // export declare let frameCount: string;
    // export declare let gamma: string;
    // export declare let interlaced: string;
    // export declare let loopCount: string;
    // export declare let progressive: string;
    // export declare let rgbColorTable: string;
  }

  namespace NSBox {
    export enum BoxType {
      Primary = 0,
      Separator = 2,
      Custom = 4
    }

    export enum TitlePosition {
      NoTitle = 0,
      AboveTop = 1,
      AtTop = 2,
      BelowTop = 3,
      AboveBottom = 4,
      AtBottom = 5,
      BelowBottom = 6
    }

    // export declare let primary: NSBox.BoxType;
  }

  namespace NSBrowser {
    export enum ColumnResizingType {
      NoColumnResizing = 0,
      AutoColumnResizing = 1,
      UserColumnResizing = 2
    }

    export enum DropOperation {
      On = 0,
      Above = 1
    }

    // export declare let columnConfigurationDidChangeNotification: string;
    // export type ColumnsAutosaveName = String;
  }

  namespace NSButton {
    export enum BezelStyle {
      Rounded = 1,
      RegularSquare = 2,
      Disclosure = 5,
      ShadowlessSquare = 6,
      Circular = 7,
      TexturedSquare = 8,
      HelpButton = 9,
      SmallSquare = 10,
      TexturedRounded = 11,
      RoundRect = 12,
      Recessed = 13,
      RoundedDisclosure = 14,
      Inline = 15
    }

    export enum ButtonType {
      MomentaryLight = 0,
      PushOnPushOff = 1,
      Toggle = 2,
      Switch = 3,
      Radio = 4,
      MomentaryChange = 5,
      OnOff = 6,
      MomentaryPushIn = 7,
      Accelerator = 8,
      MultiLevelAccelerator = 9
    }

  }

  namespace NSCalendar {
    export enum Options {
      WrapComponents = 1,
      MatchStrictly = 2,
      SearchBackwards = 4,
      MatchPreviousTimePreservingSmallerUnits = 256,
      MatchNextTimePreservingSmallerUnits = 512,
      MatchNextTime = 1024,
      MatchFirst = 4096,
      MatchLast = 8192
    }

    export enum Unit {
      CalendarUnitEra = 2,
      CalendarUnitYear = 4,
      CalendarUnitMonth = 8,
      CalendarUnitDay = 16,
      CalendarUnitHour = 32,
      CalendarUnitMinute = 64,
      CalendarUnitSecond = 128,
      CalendarUnitWeekday = 512,
      CalendarUnitWeekdayOrdinal = 1024,
      CalendarUnitQuarter = 2048,
      CalendarUnitWeekOfMonth = 4096,
      CalendarUnitWeekOfYear = 8192,
      CalendarUnitYearForWeekOfYear = 16384,
      CalendarUnitNanosecond = 32768,
      CalendarUnitCalendar = 1048576,
      CalendarUnitTimeZone = 2097152,
      EraCalendarUnit = 2,
      YearCalendarUnit = 4,
      MonthCalendarUnit = 8,
      DayCalendarUnit = 16,
      HourCalendarUnit = 32,
      MinuteCalendarUnit = 64,
      SecondCalendarUnit = 128,
      WeekCalendarUnit = 256,
      WeekdayCalendarUnit = 512,
      WeekdayOrdinalCalendarUnit = 1024,
      QuarterCalendarUnit = 2048,
      WeekOfMonthCalendarUnit = 4096,
      WeekOfYearCalendarUnit = 8192,
      YearForWeekOfYearCalendarUnit = 16384,
      CalendarCalendarUnit = 1048576,
      TimeZoneCalendarUnit = 2097152
    }

    // export declare let buddhist: string;
    // export declare let chinese: string;
    // export declare let coptic: string;
    // export declare let ethiopicAmeteAlem: string;
    // export declare let ethiopicAmeteMihret: string;
    // export declare let gregorian: string;
    // export declare let hebrew: string;
    // export declare let ISO8601: string;
    // export declare let indian: string;
    // export declare let islamic: string;
    // export declare let islamicCivil: string;
    // export declare let islamicTabular: string;
    // export declare let islamicUmmAlQura: string;
    // export declare let japanese: string;
    // export declare let persian: string;
    // export declare let republicOfChina: string;
  }

  namespace NSCell {
    export enum Attribute {
      CellDisabled = 0,
      CellState = 1,
      PushInCell = 2,
      CellEditable = 3,
      ChangeGrayCell = 4,
      CellHighlighted = 5,
      CellLightsByContents = 6,
      CellLightsByGray = 7,
      ChangeBackgroundCell = 8,
      CellLightsByBackground = 9,
      CellIsBordered = 10,
      CellHasOverlappingImage = 11,
      CellHasImageHorizontal = 12,
      CellHasImageOnLeftOrBottom = 13,
      CellChangesContents = 14,
      CellIsInsetButton = 15,
      CellAllowsMixedState = 16
    }

    export enum HitResult {
      None = 0,
      ContentArea = 1,
      EditableTextArea = 2,
      TrackableArea = 4
    }

    export enum StyleMask {
      NoCellMask = 0,
      ContentsCellMask = 1,
      PushInCellMask = 2,
      ChangeGrayCellMask = 4,
      ChangeBackgroundCellMask = 8
    }

    export enum CellType {
      NullCellType = 0,
      TextCellType = 1,
      ImageCellType = 2
    }

  }

  namespace NSCoder {
    export enum DecodingFailurePolicy {
      RaiseException = 0,
      SetErrorAndReturn = 1
    }

  }

  namespace NSCollectionView {
    export enum UpdateAction {
      Insert = 0,
      Delete = 1,
      Reload = 2,
      Move = 3,
      None = 4
    }

    export enum DropOperation {
      On = 0,
      Before = 1
    }

    export enum ScrollDirection {
      Vertical = 0,
      Horizontal = 1
    }

    export enum ScrollPosition {
      None = 0,
      Top = 1,
      CenteredVertically = 2,
      Bottom = 4,
      NearestHorizontalEdge = 512,
      Left = 8,
      CenteredHorizontally = 16,
      Right = 32,
      LeadingEdge = 64,
      TrailingEdge = 128,
      NearestVerticalEdge = 256
    }

    // export declare let elementKindInterItemGapIndicator: string;
    // export declare let elementKindSectionFooter: string;
    // export declare let elementKindSectionHeader: string;
    // export type DecorationElementKind = String;
    // export type SupplementaryElementKind = String;
  }

  namespace NSCollectionViewItem {
    export enum HighlightState {
      None = 0,
      ForSelection = 1,
      ForDeselection = 2,
      AsDropTarget = 3
    }

  }

  namespace NSCollectionViewTransitionLayout {
    // export type AnimatedKey = String;
  }

  namespace NSColor {
    export enum SystemEffect {
      None = 0,
      Pressed = 1,
      DeepPressed = 2,
      Disabled = 3,
      Rollover = 4
    }

    export enum ColorType {
      ComponentBased = 0,
      Pattern = 1,
      Catalog = 2
    }

    // export declare let currentControlTintDidChangeNotification: string;
    // export declare let systemColorsDidChangeNotification: string;
    // export type Name = String;
  }

  namespace NSColorList {
    // export declare let didChangeNotification: string;
    // export type Name = String;
  }

  namespace NSColorPanel {
    export enum Mode {
      None = -1,
      Gray = 0,
      RGB = 1,
      CMYK = 2,
      HSB = 3,
      CustomPalette = 4,
      ColorList = 5,
      Wheel = 6,
      Crayon = 7
    }

    export enum Options {
      GrayModeMask = 1,
      RGBModeMask = 2,
      CMYKModeMask = 4,
      HSBModeMask = 8,
      CustomPaletteModeMask = 16,
      ColorListModeMask = 32,
      WheelModeMask = 64,
      CrayonModeMask = 128,
      AllModesMask = 65535
    }

    // export declare let colorDidChangeNotification: string;
  }

  namespace NSColorSpace {
    export enum Model {
      Unknown = -1,
      Gray = 0,
      RGB = 1,
      CMYK = 2,
      LAB = 3,
      DeviceN = 4,
      Indexed = 5,
      Patterned = 6
    }

  }

  namespace NSColorSpaceName {
    // export declare let calibratedRGB: string;
    // export declare let calibratedWhite: string;
    // export declare let custom: string;
    // export declare let deviceCMYK: string;
    // export declare let deviceRGB: string;
    // export declare let deviceWhite: string;
    // export declare let named: string;
    // export declare let pattern: string;
  }

  namespace NSComboBox {
    // export declare let selectionDidChangeNotification: string;
    // export declare let selectionIsChangingNotification: string;
    // export declare let willDismissNotification: string;
    // export declare let willPopUpNotification: string;
  }

  namespace NSComparisonPredicate {
    export enum Modifier {
      DirectPredicateModifier = 0,
      AllPredicateModifier = 1,
      AnyPredicateModifier = 2
    }

    export enum Options {
      CaseInsensitivePredicateOption = 1,
      DiacriticInsensitivePredicateOption = 2,
      NormalizedPredicateOption = 4
    }

    export enum Operator {
      LessThanPredicateOperatorType = 0,
      LessThanOrEqualToPredicateOperatorType = 1,
      GreaterThanPredicateOperatorType = 2,
      GreaterThanOrEqualToPredicateOperatorType = 3,
      EqualToPredicateOperatorType = 4,
      NotEqualToPredicateOperatorType = 5,
      MatchesPredicateOperatorType = 6,
      LikePredicateOperatorType = 7,
      BeginsWithPredicateOperatorType = 8,
      EndsWithPredicateOperatorType = 9,
      InPredicateOperatorType = 10,
      CustomSelectorPredicateOperatorType = 11,
      ContainsPredicateOperatorType = 99,
      BetweenPredicateOperatorType = 100
    }

  }

  namespace NSCompoundPredicate {
    export enum LogicalType {
      NotPredicateType = 0,
      AndPredicateType = 1,
      OrPredicateType = 2
    }

  }

  namespace NSControl {
    export enum ImagePosition {
      NoImage = 0,
      ImageOnly = 1,
      ImageLeft = 2,
      ImageRight = 3,
      ImageBelow = 4,
      ImageAbove = 5,
      ImageOverlaps = 6,
      ImageLeading = 7,
      ImageTrailing = 8
    }

    export enum ControlSize {
      Regular = 0,
      Small = 1,
      Mini = 2
    }

    // export declare let mixed: number;
    // export declare let off: number;
    // export declare let on: number;
    // export declare let textDidBeginEditingNotification: string;
    // export declare let textDidChangeNotification: string;
    // export declare let textDidEndEditingNotification: string;
  }

  namespace NSData {
    export enum Base64DecodingOptions {
      IgnoreUnknownCharacters = 1
    }

    export enum Base64EncodingOptions {
      Encoding64CharacterLineLength = 1,
      Encoding76CharacterLineLength = 2,
      EncodingEndLineWithCarriageReturn = 16,
      EncodingEndLineWithLineFeed = 32
    }

    export enum CompressionAlgorithm {
      LZFSE = 0,
      LZ4 = 1,
      LZMA = 2,
      Zlib = 3
    }

    export enum ReadingOptions {
      DataReadingMappedIfSafe = 1,
      DataReadingUncached = 2,
      DataReadingMappedAlways = 8,
      DataReadingMapped = 1,
      MappedRead = 1,
      UncachedRead = 2
    }

    export enum SearchOptions {
      Backwards = 1,
      Anchored = 2
    }

    export enum WritingOptions {
      DataWritingAtomic = 1,
      DataWritingWithoutOverwriting = 2,
      DataWritingFileProtectionNone = 268435456,
      DataWritingFileProtectionComplete = 536870912,
      DataWritingFileProtectionCompleteUnlessOpen = 805306368,
      DataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824,
      DataWritingFileProtectionMask = 4026531840,
      AtomicWrite = 1
    }

    // export type Element = number;
    // export type Index = number;
    // export type Iterator = IndexingIterator;
    // export type SubSequence = Slice;
    // export type Indices = Range;
  }

  namespace NSDatePicker {
    export enum ElementFlags {
      HourMinute = 12,
      HourMinuteSecond = 14,
      TimeZone = 16,
      YearMonth = 192,
      YearMonthDay = 224,
      Era = 256
    }

    export enum Mode {
      Single = 0,
      Range = 1
    }

    export enum Style {
      TextFieldAndStepper = 0,
      ClockAndCalendar = 1,
      TextField = 2
    }

    // export declare let clockAndCalendar: NSDatePicker.Style;
    // export declare let era: NSDatePicker.ElementFlags;
    // export declare let hourMinute: NSDatePicker.ElementFlags;
    // export declare let hourMinuteSecond: NSDatePicker.ElementFlags;
    // export declare let range: NSDatePicker.Mode;
    // export declare let single: NSDatePicker.Mode;
    // export declare let textFieldAndStepper: NSDatePicker.Style;
    // export declare let textField: NSDatePicker.Style;
    // export declare let timeZone: NSDatePicker.ElementFlags;
    // export declare let yearMonth: NSDatePicker.ElementFlags;
    // export declare let yearMonthDay: NSDatePicker.ElementFlags;
  }

  namespace NSDecimalNumber {
    export enum CalculationError {
      NoError = 0,
      LossOfPrecision = 1,
      Underflow = 2,
      Overflow = 3,
      DivideByZero = 4
    }

    export enum RoundingMode {
      Plain = 0,
      Down = 1,
      Up = 2,
      Bankers = 3
    }

  }

  namespace NSDeviceDescriptionKey {
    // export declare let bitsPerSample: string;
    // export declare let colorSpaceName: string;
    // export declare let isPrinter: string;
    // export declare let isScreen: string;
    // export declare let resolution: string;
    // export declare let size: string;
  }

  namespace NSDocument {
    export enum ChangeType {
      ChangeDone = 0,
      ChangeUndone = 1,
      ChangeRedone = 5,
      ChangeCleared = 2,
      ChangeReadOtherContents = 3,
      ChangeAutosaved = 4,
      ChangeDiscardable = 256
    }

    export enum SaveOperationType {
      SaveOperation = 0,
      SaveAsOperation = 1,
      SaveToOperation = 2,
      AutosaveInPlaceOperation = 4,
      AutosaveElsewhereOperation = 3,
      AutosaveAsOperation = 5,
      AutosaveOperation = 3
    }

  }

  namespace NSDraggingItem {
    // export declare let icon: string;
    // export declare let label: string;
  }

  namespace NSDrawer {
    export enum State {
      ClosedState = 0,
      OpeningState = 1,
      OpenState = 2,
      ClosingState = 3
    }

  }

  namespace NSEnumerator {
    // export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSError {
    // export type UserInfoKey = string;
  }

  namespace NSEvent {
    export enum ButtonMask {
      PenTip = 1,
      PenLowerSide = 2,
      PenUpperSide = 4
    }

    export enum GestureAxis {
      None = 0,
      Horizontal = 1,
      Vertical = 2
    }

    export enum EventTypeMask {
      LeftMouseDown = 2,
      LeftMouseUp = 4,
      RightMouseDown = 8,
      RightMouseUp = 16,
      MouseMoved = 32,
      LeftMouseDragged = 64,
      RightMouseDragged = 128,
      MouseEntered = 256,
      MouseExited = 512,
      KeyDown = 1024,
      KeyUp = 2048,
      FlagsChanged = 4096,
      AppKitDefined = 8192,
      SystemDefined = 16384,
      ApplicationDefined = 32768,
      Periodic = 65536,
      CursorUpdate = 131072,
      ScrollWheel = 4194304,
      TabletPoint = 8388608,
      TabletProximity = 16777216,
      OtherMouseDown = 33554432,
      OtherMouseUp = 67108864,
      OtherMouseDragged = 134217728,
      Gesture = 536870912,
      Magnify = 1073741824,
      Swipe = 2147483648,
      Rotate = 262144,
      BeginGesture = 524288,
      EndGesture = 1048576,
      SmartMagnify = 4294967296,
      Pressure = 17179869184,
      DirectTouch = 137438953472,
      ChangeMode = 274877906944,
      Any = -1
    }

    export enum ModifierFlags {
      CapsLock = 65536,
      Shift = 131072,
      Control = 262144,
      Option = 524288,
      Command = 1048576,
      NumericPad = 2097152,
      Help = 4194304,
      Function = 8388608,
      DeviceIndependentFlagsMask = 4294901760
    }

    export enum Phase {
      None = 0,
      Began = 1,
      Stationary = 2,
      Changed = 4,
      Ended = 8,
      Cancelled = 16,
      MayBegin = 32
    }

    export enum EventSubtype {
      WindowExposed = 0,
      ApplicationActivated = 1,
      ApplicationDeactivated = 2,
      WindowMoved = 4,
      ScreenChanged = 8,
      PowerOff = 1,
      MouseEvent = 0,
      TabletPoint = 1,
      TabletProximity = 2,
      Touch = 3
    }

    export enum SwipeTrackingOptions {
      LockDirection = 1,
      ClampGestureAmount = 2
    }

    export enum EventType {
      LeftMouseDown = 1,
      LeftMouseUp = 2,
      RightMouseDown = 3,
      RightMouseUp = 4,
      MouseMoved = 5,
      LeftMouseDragged = 6,
      RightMouseDragged = 7,
      MouseEntered = 8,
      MouseExited = 9,
      KeyDown = 10,
      KeyUp = 11,
      FlagsChanged = 12,
      AppKitDefined = 13,
      SystemDefined = 14,
      ApplicationDefined = 15,
      Periodic = 16,
      CursorUpdate = 17,
      ScrollWheel = 22,
      TabletPoint = 23,
      TabletProximity = 24,
      OtherMouseDown = 25,
      OtherMouseUp = 26,
      OtherMouseDragged = 27,
      Gesture = 29,
      Magnify = 30,
      Swipe = 31,
      Rotate = 18,
      BeginGesture = 19,
      EndGesture = 20,
      SmartMagnify = 32,
      QuickLook = 33,
      Pressure = 34,
      DirectTouch = 37,
      ChangeMode = 38
    }

    export enum PointingDeviceType {
      Unknown = 0,
      Pen = 1,
      Cursor = 2,
      Eraser = 3
    }

    export enum PressureBehavior {
      Unknown = -1,
      PrimaryDefault = 0,
      PrimaryClick = 1,
      PrimaryGeneric = 2,
      PrimaryAccelerator = 3,
      PrimaryDeepClick = 5,
      PrimaryDeepDrag = 6
    }

    // export declare let foreverDuration: number;
  }

  namespace NSExceptionName {
    // export declare let abortModalException: string;
    // export declare let abortPrintingException: string;
    // export declare let appKitIgnoredException: string;
    // export declare let appKitVirtualMemoryException: string;
    // export declare let badBitmapParametersException: string;
    // export declare let badComparisonException: string;
    // export declare let badRTFColorTableException: string;
    // export declare let badRTFDirectiveException: string;
    // export declare let badRTFFontTableException: string;
    // export declare let badRTFStyleSheetException: string;
    // export declare let browserIllegalDelegateException: string;
    // export declare let colorListIOException: string;
    // export declare let colorListNotEditableException: string;
    // export declare let draggingException: string;
    // export declare let fontUnavailableException: string;
    // export declare let illegalSelectorException: string;
    // export declare let imageCacheException: string;
    // export declare let nibLoadingException: string;
    // export declare let NSPPDIncludeNotFoundException: string;
    // export declare let NSPPDIncludeStackOverflowException: string;
    // export declare let NSPPDIncludeStackUnderflowException: string;
    // export declare let NSPPDParseException: string;
    // export declare let pasteboardCommunicationException: string;
    // export declare let printOperationExistsException: string;
    // export declare let printPackageException: string;
    // export declare let printingCommunicationException: string;
    // export declare let NSRTFPropertyStackOverflowException: string;
    // export declare let NSTIFFException: string;
    // export declare let textLineTooLongException: string;
    // export declare let textNoSelectionException: string;
    // export declare let textReadException: string;
    // export declare let textWriteException: string;
    // export declare let typedStreamVersionException: string;
    // export declare let windowServerCommunicationException: string;
    // export declare let wordTablesReadException: string;
    // export declare let wordTablesWriteException: string;
    // export declare let characterConversionException: string;
    // export declare let decimalNumberDivideByZeroException: string;
    // export declare let decimalNumberExactnessException: string;
    // export declare let decimalNumberOverflowException: string;
    // export declare let decimalNumberUnderflowException: string;
    // export declare let destinationInvalidException: string;
    // export declare let fileHandleOperationException: string;
    // export declare let genericException: string;
    // export declare let inconsistentArchiveException: string;
    // export declare let internalInconsistencyException: string;
    // export declare let invalidArchiveOperationException: string;
    // export declare let invalidArgumentException: string;
    // export declare let invalidReceivePortException: string;
    // export declare let invalidSendPortException: string;
    // export declare let invalidUnarchiveOperationException: string;
    // export declare let invocationOperationCancelledException: string;
    // export declare let invocationOperationVoidResultException: string;
    // export declare let mallocException: string;
    // export declare let objectInaccessibleException: string;
    // export declare let objectNotAvailableException: string;
    // export declare let oldStyleException: string;
    // export declare let parseErrorException: string;
    // export declare let portReceiveException: string;
    // export declare let portSendException: string;
    // export declare let portTimeoutException: string;
    // export declare let rangeException: string;
    // export declare let undefinedKeyException: string;
  }

  namespace NSExpression {
    export enum ExpressionType {
      ConstantValueExpressionType = 0,
      EvaluatedObjectExpressionType = 1,
      VariableExpressionType = 2,
      KeyPathExpressionType = 3,
      FunctionExpressionType = 4,
      UnionSetExpressionType = 5,
      IntersectSetExpressionType = 6,
      MinusSetExpressionType = 7,
      SubqueryExpressionType = 13,
      AggregateExpressionType = 14,
      AnyKeyExpressionType = 15,
      BlockExpressionType = 19,
      ConditionalExpressionType = 20
    }

  }

  namespace NSFileCoordinator {
    export enum ReadingOptions {
      WithoutChanges = 1,
      ResolvesSymbolicLink = 2,
      ImmediatelyAvailableMetadataOnly = 4,
      ForUploading = 8
    }

    export enum WritingOptions {
      ForDeleting = 1,
      ForMoving = 2,
      ForMerging = 4,
      ForReplacing = 8,
      ContentIndependentMetadataOnly = 16
    }

  }

  namespace NSFileVersion {
    export enum AddingOptions {
      ByMoving = 1
    }

    export enum ReplacingOptions {
      ByMoving = 1
    }

  }

  namespace NSFont {
    // export declare let antialiasThresholdChangedNotification: string;
    // export declare let identityMatrix: number;
    // export declare let fontSetChangedNotification: string;
    // export declare let black: number;
    // export declare let bold: number;
    // export declare let heavy: number;
    // export declare let light: number;
    // export declare let medium: number;
    // export declare let regular: number;
    // export declare let semibold: number;
    // export declare let thin: number;
    // export declare let ultraLight: number;
  }

  namespace NSFontAssetRequest {
    export enum Options {
      UsesStandardUI = 1
    }

  }

  namespace NSFontCollection {
    export enum Visibility {
      Process = 1,
      User = 2,
      Computer = 4
    }

    // export declare let actionUserInfoKey: string;
    // export declare let allFonts: string;
    // export declare let didChangeNotification: string;
    // export declare let favorites: string;
    // export declare let nameUserInfoKey: string;
    // export declare let oldNameUserInfoKey: string;
    // export declare let recentlyUsed: string;
    // export declare let user: string;
    // export declare let visibilityUserInfoKey: string;
    // export declare let hidden: string;
    // export declare let renamed: string;
    // export declare let shown: string;
  }

  namespace NSFontDescriptor {
    export enum SymbolicTraits {
      TraitItalic = 1,
      TraitBold = 2,
      TraitExpanded = 32,
      TraitCondensed = 64,
      TraitMonoSpace = 1024,
      TraitVertical = 2048,
      TraitUIOptimized = 4096,
      TraitTightLeading = 32768,
      TraitLooseLeading = 65536,
      ClassMask = 4026531840,
      ClassUnknown = 0,
      ClassOldStyleSerifs = 268435456,
      ClassTransitionalSerifs = 536870912,
      ClassModernSerifs = 805306368,
      ClassClarendonSerifs = 1073741824,
      ClassSlabSerifs = 1342177280,
      ClassFreeformSerifs = 1879048192,
      ClassSansSerif = 2147483648,
      ClassOrnamentals = 2415919104,
      ClassScripts = 2684354560,
      ClassSymbolic = 3221225472
    }

    // export declare let cascadeList: string;
    // export declare let characterSet: string;
    // export declare let default_: string;
    // export declare let monospaced: string;
    // export declare let rounded: string;
    // export declare let serif: string;
    // export declare let face: string;
    // export declare let family: string;
    // export declare let selectorIdentifier: string;
    // export declare let featureSettings: string;
    // export declare let typeIdentifier: string;
    // export declare let fixedAdvance: string;
    // export declare let matrix: string;
    // export declare let name: string;
    // export declare let size: string;
    // export declare let slant: string;
    // export declare let symbolic: string;
    // export declare let traits: string;
    // export declare let variation: string;
    // export declare let defaultValue: string;
    // export declare let identifier: string;
    // export declare let maximumValue: string;
    // export declare let minimumValue: string;
    // export declare let visibleName: string;
    // export declare let weight: string;
    // export declare let width: string;
  }

  namespace NSFontPanel {
    export enum ModeMask {
      ModeMaskFace = 1,
      ModeMaskSize = 2,
      ModeMaskCollection = 4,
      ModeMaskUnderlineEffect = 256,
      ModeMaskStrikethroughEffect = 512,
      ModeMaskTextColorEffect = 1024,
      ModeMaskDocumentColorEffect = 2048,
      ModeMaskShadowEffect = 4096,
      ModeMaskAllEffects = 1048320,
      ModesMaskStandardModes = 65535,
      ModesMaskAllModes = 4294967295
    }

  }

  namespace NSGestureRecognizer {
    export enum State {
      Possible = 0,
      Began = 1,
      Changed = 2,
      Ended = 3,
      Cancelled = 4,
      Failed = 5,
      Recognized = 3
    }

  }

  namespace NSGradient {
    export enum DrawingOptions {
      DrawsBeforeStartingLocation = 1,
      DrawsAfterEndingLocation = 2
    }

  }

  namespace NSGraphicsContext {
    // export declare let destination: string;
    // export declare let pdf: string;
    // export declare let postScript: string;
    // export declare let representationFormat: string;
  }

  namespace NSGridCell {
    export enum Placement {
      Inherited = 0,
      None = 1,
      Leading = 2,
      Top = 2,
      Trailing = 3,
      Bottom = 3,
      Center = 4,
      Fill = 5
    }

  }

  namespace NSGridRow {
    export enum Alignment {
      Inherited = 0,
      None = 1,
      FirstBaseline = 2,
      LastBaseline = 3
    }

  }

  namespace NSGridView {
    // export declare let sizedForContent: number;
  }

  namespace NSHapticFeedbackManager {
    export enum FeedbackPattern {
      Generic = 0,
      Alignment = 1,
      LevelChange = 2
    }

    export enum PerformanceTime {
      Default = 0,
      Now = 1,
      DrawCompleted = 2
    }

  }

  namespace NSHelpManager {
    // export declare let contextHelpModeDidActivateNotification: string;
    // export declare let contextHelpModeDidDeactivateNotification: string;
    // export type BookName = String;
    // export type AnchorName = String;
    // export type ContextHelpKey = String;
  }

  namespace NSImage {
    export enum CacheMode {
      Default = 0,
      Always = 1,
      BySize = 2,
      Never = 3
    }

    export enum LayoutDirection {
      Unspecified = -1,
      LeftToRight = 2,
      RightToLeft = 3
    }

    export enum LoadStatus {
      Completed = 0,
      Cancelled = 1,
      InvalidData = 2,
      UnexpectedEOF = 3,
      ReadError = 4
    }

    export enum ResizingMode {
      Stretch = 0,
      Tile = 1
    }

    // export declare let actionTemplateName: string;
    // export declare let addTemplateName: string;
    // export declare let advancedName: string;
    // export declare let applicationIconName: string;
    // export declare let bluetoothTemplateName: string;
    // export declare let bonjourName: string;
    // export declare let bookmarksTemplateName: string;
    // export declare let cautionName: string;
    // export declare let colorPanelName: string;
    // export declare let columnViewTemplateName: string;
    // export declare let computerName: string;
    // export declare let enterFullScreenTemplateName: string;
    // export declare let everyoneName: string;
    // export declare let exitFullScreenTemplateName: string;
    // export declare let flowViewTemplateName: string;
    // export declare let folderName: string;
    // export declare let folderBurnableName: string;
    // export declare let folderSmartName: string;
    // export declare let followLinkFreestandingTemplateName: string;
    // export declare let fontPanelName: string;
    // export declare let goBackTemplateName: string;
    // export declare let goForwardTemplateName: string;
    // export declare let goLeftTemplateName: string;
    // export declare let goRightTemplateName: string;
    // export declare let homeTemplateName: string;
    // export declare let iChatTheaterTemplateName: string;
    // export declare let iconViewTemplateName: string;
    // export declare let infoName: string;
    // export declare let invalidDataFreestandingTemplateName: string;
    // export declare let leftFacingTriangleTemplateName: string;
    // export declare let listViewTemplateName: string;
    // export declare let lockLockedTemplateName: string;
    // export declare let lockUnlockedTemplateName: string;
    // export declare let menuMixedStateTemplateName: string;
    // export declare let menuOnStateTemplateName: string;
    // export declare let mobileMeName: string;
    // export declare let multipleDocumentsName: string;
    // export declare let networkName: string;
    // export declare let pathTemplateName: string;
    // export declare let preferencesGeneralName: string;
    // export declare let quickLookTemplateName: string;
    // export declare let refreshFreestandingTemplateName: string;
    // export declare let refreshTemplateName: string;
    // export declare let removeTemplateName: string;
    // export declare let revealFreestandingTemplateName: string;
    // export declare let rightFacingTriangleTemplateName: string;
    // export declare let shareTemplateName: string;
    // export declare let slideshowTemplateName: string;
    // export declare let smartBadgeTemplateName: string;
    // export declare let statusAvailableName: string;
    // export declare let statusNoneName: string;
    // export declare let statusPartiallyAvailableName: string;
    // export declare let statusUnavailableName: string;
    // export declare let stopProgressFreestandingTemplateName: string;
    // export declare let stopProgressTemplateName: string;
    // export declare let touchBarAddDetailTemplateName: string;
    // export declare let touchBarAddTemplateName: string;
    // export declare let touchBarAlarmTemplateName: string;
    // export declare let touchBarAudioInputMuteTemplateName: string;
    // export declare let touchBarAudioInputTemplateName: string;
    // export declare let touchBarAudioOutputMuteTemplateName: string;
    // export declare let touchBarAudioOutputVolumeHighTemplateName: string;
    // export declare let touchBarAudioOutputVolumeLowTemplateName: string;
    // export declare let touchBarAudioOutputVolumeMediumTemplateName: string;
    // export declare let touchBarAudioOutputVolumeOffTemplateName: string;
    // export declare let touchBarBookmarksTemplateName: string;
    // export declare let touchBarColorPickerFillName: string;
    // export declare let touchBarColorPickerFontName: string;
    // export declare let touchBarColorPickerStrokeName: string;
    // export declare let touchBarCommunicationAudioTemplateName: string;
    // export declare let touchBarCommunicationVideoTemplateName: string;
    // export declare let touchBarComposeTemplateName: string;
    // export declare let touchBarDeleteTemplateName: string;
    // export declare let touchBarDownloadTemplateName: string;
    // export declare let touchBarEnterFullScreenTemplateName: string;
    // export declare let touchBarExitFullScreenTemplateName: string;
    // export declare let touchBarFastForwardTemplateName: string;
    // export declare let touchBarFolderCopyToTemplateName: string;
    // export declare let touchBarFolderMoveToTemplateName: string;
    // export declare let touchBarFolderTemplateName: string;
    // export declare let touchBarGetInfoTemplateName: string;
    // export declare let touchBarGoBackTemplateName: string;
    // export declare let touchBarGoDownTemplateName: string;
    // export declare let touchBarGoForwardTemplateName: string;
    // export declare let touchBarGoUpTemplateName: string;
    // export declare let touchBarHistoryTemplateName: string;
    // export declare let touchBarIconViewTemplateName: string;
    // export declare let touchBarListViewTemplateName: string;
    // export declare let touchBarMailTemplateName: string;
    // export declare let touchBarNewFolderTemplateName: string;
    // export declare let touchBarNewMessageTemplateName: string;
    // export declare let touchBarOpenInBrowserTemplateName: string;
    // export declare let touchBarPauseTemplateName: string;
    // export declare let touchBarPlayPauseTemplateName: string;
    // export declare let touchBarPlayTemplateName: string;
    // export declare let touchBarPlayheadTemplateName: string;
    // export declare let touchBarQuickLookTemplateName: string;
    // export declare let touchBarRecordStartTemplateName: string;
    // export declare let touchBarRecordStopTemplateName: string;
    // export declare let touchBarRefreshTemplateName: string;
    // export declare let touchBarRemoveTemplateName: string;
    // export declare let touchBarRewindTemplateName: string;
    // export declare let touchBarRotateLeftTemplateName: string;
    // export declare let touchBarRotateRightTemplateName: string;
    // export declare let touchBarSearchTemplateName: string;
    // export declare let touchBarShareTemplateName: string;
    // export declare let touchBarSidebarTemplateName: string;
    // export declare let touchBarSkipAhead15SecondsTemplateName: string;
    // export declare let touchBarSkipAhead30SecondsTemplateName: string;
    // export declare let touchBarSkipAheadTemplateName: string;
    // export declare let touchBarSkipBack15SecondsTemplateName: string;
    // export declare let touchBarSkipBack30SecondsTemplateName: string;
    // export declare let touchBarSkipBackTemplateName: string;
    // export declare let touchBarSkipToEndTemplateName: string;
    // export declare let touchBarSkipToStartTemplateName: string;
    // export declare let touchBarSlideshowTemplateName: string;
    // export declare let touchBarTagIconTemplateName: string;
    // export declare let touchBarTextBoldTemplateName: string;
    // export declare let touchBarTextBoxTemplateName: string;
    // export declare let touchBarTextCenterAlignTemplateName: string;
    // export declare let touchBarTextItalicTemplateName: string;
    // export declare let touchBarTextJustifiedAlignTemplateName: string;
    // export declare let touchBarTextLeftAlignTemplateName: string;
    // export declare let touchBarTextListTemplateName: string;
    // export declare let touchBarTextRightAlignTemplateName: string;
    // export declare let touchBarTextStrikethroughTemplateName: string;
    // export declare let touchBarTextUnderlineTemplateName: string;
    // export declare let touchBarUserAddTemplateName: string;
    // export declare let touchBarUserGroupTemplateName: string;
    // export declare let touchBarUserTemplateName: string;
    // export declare let touchBarVolumeDownTemplateName: string;
    // export declare let touchBarVolumeUpTemplateName: string;
    // export declare let trashEmptyName: string;
    // export declare let trashFullName: string;
    // export declare let userName: string;
    // export declare let userAccountsName: string;
    // export declare let userGroupName: string;
    // export declare let userGuestName: string;
    // export type Name = String;
  }

  namespace NSImageRep {
    // export declare let ctm: string;
    // export declare let interpolation: string;
    // export declare let userInterfaceLayoutDirection: string;
    // export declare let registryDidChangeNotification: string;
  }

  namespace NSImageView {
    export enum FrameStyle {
      None = 0,
      Photo = 1,
      GrayBezel = 2,
      Groove = 3,
      Button = 4
    }

  }

  namespace NSIndexSet {
    // export type Element = NSIndexSetIterator;
    // export type Iterator = NSIndexSetIterator;
  }

  namespace NSItemProvider {
    export enum ErrorCode {
      UnknownError = -1,
      ItemUnavailableError = -1000,
      UnexpectedValueClassError = -1100,
      UnavailableCoercionError = -1200
    }

    // export declare let errorDomain: string;
  }

  namespace NSKeyValueChangeKey {
    // export declare let indexesKey: string;
    // export declare let kindKey: string;
    // export declare let newKey: string;
    // export declare let notificationIsPriorKey: string;
    // export declare let oldKey: string;
  }

  namespace NSKeyValueOperator {
    // export declare let averageKeyValueOperator: string;
    // export declare let countKeyValueOperator: string;
    // export declare let distinctUnionOfArraysKeyValueOperator: string;
    // export declare let distinctUnionOfObjectsKeyValueOperator: string;
    // export declare let distinctUnionOfSetsKeyValueOperator: string;
    // export declare let maximumKeyValueOperator: string;
    // export declare let minimumKeyValueOperator: string;
    // export declare let sumKeyValueOperator: string;
    // export declare let unionOfArraysKeyValueOperator: string;
    // export declare let unionOfObjectsKeyValueOperator: string;
    // export declare let unionOfSetsKeyValueOperator: string;
  }

  namespace NSLayoutConstraint {
    export enum Attribute {
      Left = 1,
      Right = 2,
      Top = 3,
      Bottom = 4,
      Leading = 5,
      Trailing = 6,
      Width = 7,
      Height = 8,
      CenterX = 9,
      CenterY = 10,
      LastBaseline = 11,
      Baseline = 11,
      FirstBaseline = 12,
      NotAnAttribute = 0
    }

    export enum Orientation {
      Horizontal = 0,
      Vertical = 1
    }

    export enum FormatOptions {
      AlignAllLeft = 2,
      AlignAllRight = 4,
      AlignAllTop = 8,
      AlignAllBottom = 16,
      AlignAllLeading = 32,
      AlignAllTrailing = 64,
      AlignAllCenterX = 512,
      AlignAllCenterY = 1024,
      AlignAllLastBaseline = 2048,
      AlignAllFirstBaseline = 4096,
      AlignAllBaseline = 2048,
      AlignmentMask = 65535,
      DirectionLeadingToTrailing = 0,
      DirectionLeftToRight = 65536,
      DirectionRightToLeft = 131072,
      DirectionMask = 196608
    }

    export enum Relation {
      LessThanOrEqual = -1,
      Equal = 0,
      GreaterThanOrEqual = 1
    }

    // export declare let defaultHigh: number;
    // export declare let defaultLow: number;
    // export declare let dragThatCanResizeWindow: number;
    // export declare let dragThatCannotResizeWindow: number;
    // export declare let fittingSizeCompression: number;
    // export declare let required: number;
    // export declare let windowSizeStayPut: number;
  }

  namespace NSLayoutManager {
    export enum ControlCharacterAction {
      ZeroAdvancement = 1,
      Whitespace = 2,
      HorizontalTab = 4,
      LineBreak = 8,
      ParagraphBreak = 16,
      ContainerBreak = 32
    }

    export enum GlyphProperty {
      Null = 1,
      ControlCharacter = 2,
      Elastic = 4,
      NonBaseCharacter = 8
    }

    export enum TextLayoutOrientation {
      Horizontal = 0,
      Vertical = 1
    }

    export enum TypesetterBehavior {
      LatestBehavior = -1,
      OriginalBehavior = 0,
      Behavior_10_2_WithCompatibility = 1,
      Behavior_10_2 = 2,
      Behavior_10_3 = 3,
      Behavior_10_4 = 4
    }

  }

  namespace NSLevelIndicator {
    export enum PlaceholderVisibility {
      Automatic = 0,
      Always = 1,
      WhileEditing = 2
    }

    export enum Style {
      Relevancy = 0,
      ContinuousCapacity = 1,
      DiscreteCapacity = 2,
      Rating = 3
    }

  }

  namespace NSLinguisticTag {
    // export declare let adjective: string;
    // export declare let adverb: string;
    // export declare let classifier: string;
    // export declare let closeParenthesis: string;
    // export declare let closeQuote: string;
    // export declare let conjunction: string;
    // export declare let dash: string;
    // export declare let determiner: string;
    // export declare let idiom: string;
    // export declare let interjection: string;
    // export declare let noun: string;
    // export declare let number: string;
    // export declare let openParenthesis: string;
    // export declare let openQuote: string;
    // export declare let organizationName: string;
    // export declare let other: string;
    // export declare let otherPunctuation: string;
    // export declare let otherWhitespace: string;
    // export declare let otherWord: string;
    // export declare let paragraphBreak: string;
    // export declare let particle: string;
    // export declare let personalName: string;
    // export declare let placeName: string;
    // export declare let preposition: string;
    // export declare let pronoun: string;
    // export declare let punctuation: string;
    // export declare let sentenceTerminator: string;
    // export declare let verb: string;
    // export declare let whitespace: string;
    // export declare let word: string;
    // export declare let wordJoiner: string;
  }

  namespace NSLinguisticTagScheme {
    // export declare let language: string;
    // export declare let lemma: string;
    // export declare let lexicalClass: string;
    // export declare let nameType: string;
    // export declare let nameTypeOrLexicalClass: string;
    // export declare let script: string;
    // export declare let tokenType: string;
  }

  namespace NSLinguisticTagger {
    export enum Options {
      OmitWords = 1,
      OmitPunctuation = 2,
      OmitWhitespace = 4,
      OmitOther = 8,
      JoinNames = 16
    }

  }

  namespace NSLocale {
    export enum LanguageDirection {
      Unknown = 0,
      LeftToRight = 1,
      RightToLeft = 2,
      TopToBottom = 3,
      BottomToTop = 4
    }

    // export declare let currentLocaleDidChangeNotification: string;
    // export declare let alternateQuotationBeginDelimiterKey: string;
    // export declare let alternateQuotationEndDelimiterKey: string;
    // export declare let calendar: string;
    // export declare let collationIdentifier: string;
    // export declare let collatorIdentifier: string;
    // export declare let countryCode: string;
    // export declare let currencyCode: string;
    // export declare let currencySymbol: string;
    // export declare let decimalSeparator: string;
    // export declare let exemplarCharacterSet: string;
    // export declare let groupingSeparator: string;
    // export declare let identifier: string;
    // export declare let languageCode: string;
    // export declare let measurementSystem: string;
    // export declare let quotationBeginDelimiterKey: string;
    // export declare let quotationEndDelimiterKey: string;
    // export declare let scriptCode: string;
    // export declare let usesMetricSystem: string;
    // export declare let variantCode: string;
  }

  namespace NSMachPort {
    export enum Options {
      DeallocateNone = 0,
      DeallocateSendRight = 1,
      DeallocateReceiveRight = 2
    }

  }

  namespace NSMatrix {
    export enum Mode {
      RadioModeMatrix = 0,
      HighlightModeMatrix = 1,
      ListModeMatrix = 2,
      TrackModeMatrix = 3
    }

  }

  namespace NSMediaLibraryBrowserController {
    export enum Library {
      Audio = 1,
      Image = 2,
      Movie = 4
    }

  }

  namespace NSMenu {
    export enum Properties {
      PropertyItemTitle = 1,
      PropertyItemAttributedTitle = 2,
      PropertyItemKeyEquivalent = 4,
      PropertyItemImage = 8,
      PropertyItemEnabled = 16,
      PropertyItemAccessibilityDescription = 32
    }

    // export declare let didAddItemNotification: string;
    // export declare let didBeginTrackingNotification: string;
    // export declare let didChangeItemNotification: string;
    // export declare let didEndTrackingNotification: string;
    // export declare let didRemoveItemNotification: string;
    // export declare let didSendActionNotification: string;
    // export declare let willSendActionNotification: string;
  }

  namespace NSMenuItem {
    // export declare let importFromDeviceIdentifier: string;
  }

  namespace NSNib {
    // export type Name = String;
  }

  namespace NSNotification {
    // export declare let AVAssetChapterMetadataGroupsDidChange: string;
    // export declare let AVAssetContainsFragmentsDidChange: string;
    // export declare let AVAssetDurationDidChange: string;
    // export declare let AVAssetMediaSelectionGroupsDidChange: string;
    // export declare let AVAssetTrackSegmentsDidChange: string;
    // export declare let AVAssetTrackTimeRangeDidChange: string;
    // export declare let AVAssetTrackTrackAssociationsDidChange: string;
    // export declare let AVAssetWasDefragmented: string;
    // export declare let AVAudioEngineConfigurationChange: string;
    // export declare let AVAudioUnitComponentTagsDidChange: string;
    // export declare let AVCaptureDeviceSubjectAreaDidChange: string;
    // export declare let AVCaptureDeviceWasConnected: string;
    // export declare let AVCaptureDeviceWasDisconnected: string;
    // export declare let AVCaptureInputPortFormatDescriptionDidChange: string;
    // export declare let AVCaptureSessionDidStartRunning: string;
    // export declare let AVCaptureSessionDidStopRunning: string;
    // export declare let AVCaptureSessionInterruptionEnded: string;
    // export declare let AVCaptureSessionRuntimeError: string;
    // export declare let AVCaptureSessionWasInterrupted: string;
    // export declare let AVFragmentedMovieContainsMovieFragmentsDidChange: string;
    // export declare let AVFragmentedMovieDurationDidChange: string;
    // export declare let AVFragmentedMovieTrackSegmentsDidChange: string;
    // export declare let AVFragmentedMovieTrackTimeRangeDidChange: string;
    // export declare let AVFragmentedMovieWasDefragmented: string;
    // export declare let AVPlayerAvailableHDRModesDidChange: string;
    // export declare let AVPlayerItemDidPlayToEndTime: string;
    // export declare let AVPlayerItemFailedToPlayToEndTime: string;
    // export declare let AVPlayerItemNewAccessLogEntry: string;
    // export declare let AVPlayerItemNewErrorLogEntry: string;
    // export declare let AVPlayerItemPlaybackStalled: string;
    // export declare let AVPlayerItemTimeJumped: string;
    // export declare let AVRouteDetectorMultipleRoutesDetectedDidChange: string;
    // export declare let AVSampleBufferAudioRendererWasFlushedAutomatically: string;
    // export declare let AVSampleBufferDisplayLayerFailedToDecode: string;
    // export declare let NSAppleEventManagerWillProcessFirstEvent: string;
    // export declare let NSBundleResourceRequestLowDiskSpace: string;
    // export declare let NSCalendarDayChanged: string;
    // export declare let NSClassDescriptionNeededForClass: string;
    // export declare let NSDidBecomeSingleThreaded: string;
    // export declare let NSExtensionHostDidBecomeActive: string;
    // export declare let NSExtensionHostDidEnterBackground: string;
    // export declare let NSExtensionHostWillEnterForeground: string;
    // export declare let NSExtensionHostWillResignActive: string;
    // export declare let NSFileHandleConnectionAccepted: string;
    // export declare let NSFileHandleDataAvailable: string;
    // export declare let NSFileHandleReadToEndOfFileCompletion: string;
    // export declare let NSHTTPCookieManagerAcceptPolicyChanged: string;
    // export declare let NSHTTPCookieManagerCookiesChanged: string;
    // export declare let NSMetadataQueryDidFinishGathering: string;
    // export declare let NSMetadataQueryDidStartGathering: string;
    // export declare let NSMetadataQueryDidUpdate: string;
    // export declare let NSMetadataQueryGatheringProgress: string;
    // export declare let NSProcessInfoPowerStateDidChange: string;
    // export declare let NSSystemClockDidChange: string;
    // export declare let NSSystemTimeZoneDidChange: string;
    // export declare let NSThreadWillExit: string;
    // export declare let NSURLCredentialStorageChanged: string;
    // export declare let NSUbiquityIdentityDidChange: string;
    // export declare let NSUndoManagerCheckpoint: string;
    // export declare let NSUndoManagerDidCloseUndoGroup: string;
    // export declare let NSUndoManagerDidOpenUndoGroup: string;
    // export declare let NSUndoManagerDidRedoChange: string;
    // export declare let NSUndoManagerDidUndoChange: string;
    // export declare let NSUndoManagerWillCloseUndoGroup: string;
    // export declare let NSUndoManagerWillRedoChange: string;
    // export declare let NSUndoManagerWillUndoChange: string;
    // export declare let NSWillBecomeMultiThreaded: string;
    // export declare let IKFilterBrowserFilterDoubleClick: string;
    // export declare let IKFilterBrowserFilterSelected: string;
    // export declare let IKFilterBrowserWillPreviewFilter: string;
    // export declare let quartzFilterManagerDidAddFilter: string;
    // export declare let quartzFilterManagerDidModifyFilter: string;
    // export declare let quartzFilterManagerDidRemoveFilter: string;
    // export declare let quartzFilterManagerDidSelectFilter: string;
  }

  namespace NSNumber {
    // export type BooleanLiteralType = boolean;
    // export type IntegerLiteralType = number;
    // export type FloatLiteralType = number;
  }

  namespace NSOrderedSet {
    // export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSOutlineView {
    // export declare let columnDidMoveNotification: string;
    // export declare let columnDidResizeNotification: string;
    // export declare let disclosureButtonIdentifier: string;
    // export declare let itemDidCollapseNotification: string;
    // export declare let itemDidExpandNotification: string;
    // export declare let itemWillCollapseNotification: string;
    // export declare let itemWillExpandNotification: string;
    // export declare let selectionDidChangeNotification: string;
    // export declare let selectionIsChangingNotification: string;
    // export declare let showHideButtonIdentifier: string;
  }

  namespace NSPDFPanel {
    export enum Options {
      ShowsPaperSize = 4,
      ShowsOrientation = 8,
      RequestsParentDirectory = 16777216
    }

  }

  namespace NSPageController {
    export enum TransitionStyle {
      StackHistory = 0,
      StackBook = 1,
      HorizontalStrip = 2
    }

    // export type ObjectIdentifier = String;
  }

  namespace NSParagraphStyle {
    export enum TextTabType {
      LeftTabStopType = 0,
      RightTabStopType = 1,
      CenterTabStopType = 2,
      DecimalTabStopType = 3
    }

    // LineBreakStrategy
    export enum LineBreakStrategy {
      pushOut,
      hangulWordPriority,
      standard
    }

  }

  namespace NSPasteboard {
    export enum ContentsOptions {
      CurrentHostOnly = 1
    }

    export enum ReadingOptions {
      AsData = 0,
      AsString = 1,
      AsPropertyList = 2,
      AsKeyedArchive = 4
    }

    export enum WritingOptions {
      Promised = 512
    }

    // export declare let fileContents: string;
    // export declare let findPanelSearchOptions: string;
    // export declare let drag: string;
    // export declare let find: string;
    // export declare let font: string;
    // export declare let general: string;
    // export declare let ruler: string;
    // export declare let color: string;
    // export declare let fileURL: string;
    // export declare let html: string;
    // export declare let multipleTextSelection: string;
    // export declare let pdf: string;
    // export declare let png: string;
    // export declare let rtf: string;
    // export declare let rtfd: string;
    // export declare let sound: string;
    // export declare let string: string;
    // export declare let tiff: string;
    // export declare let tabularText: string;
    // export declare let textFinderOptions: string;
    // export declare let URL: string;
    // export declare let urlReadingContentsConformToTypes: string;
    // export declare let urlReadingFileURLsOnly: string;
    // export declare let soundPboardType: string;
  }

  namespace NSPathControl {
    export enum Style {
      Standard = 0,
      PopUp = 2,
      NavigationBar = 1
    }

  }

  namespace NSPickerTouchBarItem {
    export enum ControlRepresentation {
      Automatic = 0,
      Expanded = 1,
      Collapsed = 2
    }

    export enum SelectionMode {
      SelectOne = 0,
      SelectAny = 1,
      Momentary = 2
    }

  }

  namespace NSPointerFunctions {
    export enum Options {
      StrongMemory = 0,
      ZeroingWeakMemory = 1,
      OpaqueMemory = 2,
      MallocMemory = 3,
      MachVirtualMemory = 4,
      WeakMemory = 5,
      ObjectPersonality = 0,
      OpaquePersonality = 256,
      ObjectPointerPersonality = 512,
      CStringPersonality = 768,
      StructPersonality = 1024,
      IntegerPersonality = 1280,
      CopyIn = 65536
    }

  }

  namespace NSPopUpButton {
    export enum ArrowPosition {
      NoArrow = 0,
      ArrowAtCenter = 1,
      ArrowAtBottom = 2
    }

    // export declare let willPopUpNotification: string;
  }

  namespace NSPopUpButtonCell {
    // export declare let willPopUpNotification: string;
  }

  namespace NSPopover {
    export enum Behavior {
      ApplicationDefined = 0,
      Transient = 1,
      Semitransient = 2
    }

    // export declare let detachToWindow: string;
    // export declare let closeReasonUserInfoKey: string;
    // export declare let standard: string;
    // export declare let didCloseNotification: string;
    // export declare let didShowNotification: string;
    // export declare let willCloseNotification: string;
    // export declare let willShowNotification: string;
  }

  namespace NSPositionalSpecifier {
    export enum InsertionPosition {
      PositionAfter = 0,
      PositionBefore = 1,
      PositionBeginning = 2,
      PositionEnd = 3,
      PositionReplace = 4
    }

  }

  namespace NSPrintInfo {
    export enum PaperOrientation {
      Portrait = 0,
      Landscape = 1
    }

    export enum PaginationMode {
      Automatic = 0,
      Fit = 1,
      Clip = 2
    }

    // export declare let automatic: NSPrintInfo.PaginationMode;
    // export declare let clip: NSPrintInfo.PaginationMode;
    // export declare let fit: NSPrintInfo.PaginationMode;
    // export declare let allPages: string;
    // export declare let bottomMargin: string;
    // export declare let cancel: string;
    // export declare let copies: string;
    // export declare let detailedErrorReporting: string;
    // export declare let faxNumber: string;
    // export declare let firstPage: string;
    // export declare let headerAndFooter: string;
    // export declare let horizontalPagination: string;
    // export declare let horizontallyCentered: string;
    // export declare let jobDisposition: string;
    // export declare let jobSavingFileNameExtensionHidden: string;
    // export declare let jobSavingURL: string;
    // export declare let lastPage: string;
    // export declare let leftMargin: string;
    // export declare let mustCollate: string;
    // export declare let orientation: string;
    // export declare let pagesAcross: string;
    // export declare let pagesDown: string;
    // export declare let paperName: string;
    // export declare let paperSize: string;
    // export declare let preview: string;
    // export declare let printer: string;
    // export declare let printerName: string;
    // export declare let reversePageOrder: string;
    // export declare let rightMargin: string;
    // export declare let save: string;
    // export declare let scalingFactor: string;
    // export declare let selectionOnly: string;
    // export declare let spool: string;
    // export declare let time: string;
    // export declare let topMargin: string;
    // export declare let verticalPagination: string;
    // export declare let verticallyCentered: string;
    // export type SettingKey = String;
  }

  namespace NSPrintOperation {
    export enum RenderingQuality {
      Best = 0,
      Responsive = 1
    }

    export enum PageOrder {
      DescendingPageOrder = -1,
      SpecialPageOrder = 0,
      AscendingPageOrder = 1,
      UnknownPageOrder = 2
    }

  }

  namespace NSPrintPanel {
    export enum Options {
      ShowsCopies = 1,
      ShowsPageRange = 2,
      ShowsPaperSize = 4,
      ShowsOrientation = 8,
      ShowsScaling = 16,
      ShowsPrintSelection = 32,
      ShowsPageSetupAccessory = 256,
      ShowsPreview = 131072
    }

    // export declare let allPresets: string;
    // export declare let noPresets: string;
    // export declare let itemDescription: string;
    // export declare let itemName: string;
    // export declare let photo: string;
  }

  namespace NSPrinter {
    export enum TableStatus {
      OK = 0,
      NotFound = 1,
      Error = 2
    }

  }

  namespace NSProgressIndicator {
    export enum Style {
      Bar = 0,
      Spinning = 1
    }

  }

  namespace NSRegularExpression {
    export enum MatchingFlags {
      Progress = 1,
      Completed = 2,
      HitEnd = 4,
      RequiredEnd = 8,
      InternalError = 16
    }

    export enum MatchingOptions {
      ReportProgress = 1,
      ReportCompletion = 2,
      Anchored = 4,
      WithTransparentBounds = 8,
      WithoutAnchoringBounds = 16
    }

    export enum Options {
      CaseInsensitive = 1,
      AllowCommentsAndWhitespace = 2,
      IgnoreMetacharacters = 4,
      DotMatchesLineSeparators = 8,
      AnchorsMatchLines = 16,
      UseUnixLineSeparators = 32,
      UseUnicodeWordBoundaries = 64
    }

  }

  namespace NSRelativeSpecifier {
    export enum RelativePosition {
      After = 0,
      Before = 1
    }

  }

  namespace NSRuleEditor {
    export enum NestingMode {
      Single = 0,
      List = 1,
      Compound = 2,
      Simple = 3
    }

    export enum RowType {
      Simple = 0,
      Compound = 1
    }

    // export declare let comparisonModifier: string;
    // export declare let compoundType: string;
    // export declare let customSelector: string;
    // export declare let leftExpression: string;
    // export declare let operatorType: string;
    // export declare let options: string;
    // export declare let rightExpression: string;
    // export declare let rowsDidChangeNotification: string;
  }

  namespace NSRulerView {
    export enum Orientation {
      HorizontalRuler = 0,
      VerticalRuler = 1
    }

    // export declare let centimeters: string;
    // export declare let inches: string;
    // export declare let picas: string;
    // export declare let points: string;
  }

  namespace NSScreen {
    // export declare let colorSpaceDidChangeNotification: string;
  }

  namespace NSScrollView {
    export enum Elasticity {
      Automatic = 0,
      None = 1,
      Allowed = 2
    }

    export enum FindBarPosition {
      AboveHorizontalRuler = 0,
      AboveContent = 1,
      BelowContent = 2
    }

    // export declare let didEndLiveMagnifyNotification: string;
    // export declare let didEndLiveScrollNotification: string;
    // export declare let didLiveScrollNotification: string;
    // export declare let willStartLiveMagnifyNotification: string;
    // export declare let willStartLiveScrollNotification: string;
  }

  namespace NSScroller {
    export enum KnobStyle {
      Default = 0,
      Dark = 1,
      Light = 2
    }

    export enum Part {
      NoPart = 0,
      DecrementPage = 1,
      Knob = 2,
      IncrementPage = 3,
      DecrementLine = 4,
      IncrementLine = 5,
      KnobSlot = 6
    }

    export enum Style {
      Legacy = 0,
      Overlay = 1
    }

    export enum UsableParts {
      NoScrollerParts = 0,
      OnlyScrollerArrows = 1,
      AllScrollerParts = 2
    }

    // export declare let preferredScrollerStyleDidChangeNotification: string;
  }

  namespace NSScrubber {
    export enum Alignment {
      None = 0,
      Leading = 1,
      Trailing = 2,
      Center = 3
    }

    export enum Mode {
      Fixed = 0,
      Free = 1
    }

  }

  namespace NSSearchField {
    // export declare let clearRecentsMenuItemTag: number;
    // export declare let noRecentsMenuItemTag: number;
    // export declare let recentsMenuItemTag: number;
    // export declare let recentsTitleMenuItemTag: number;
    // export type RecentsAutosaveName = String;
  }

  namespace NSSegmentedControl {
    export enum Distribution {
      Fit = 0,
      Fill = 1,
      FillEqually = 2,
      FillProportionally = 3
    }

    export enum Style {
      Automatic = 0,
      Rounded = 1,
      RoundRect = 3,
      TexturedSquare = 4,
      SmallSquare = 6,
      Separated = 8,
      TexturedRounded = 2,
      Capsule = 5
    }

    export enum SwitchTracking {
      SelectOne = 0,
      SelectAny = 1,
      Momentary = 2,
      MomentaryAccelerator = 3
    }

  }

  namespace NSSet {
    // export type Iterator = NSFastEnumerationIterator;
  }

  namespace NSSharingService {
    export enum CloudKitOptions {
      Standard = 0,
      AllowPublic = 1,
      AllowPrivate = 2,
      AllowReadOnly = 16,
      AllowReadWrite = 32
    }

    export enum SharingContentScope {
      Item = 0,
      Partial = 1,
      Full = 2
    }

    // export declare let addToAperture: string;
    // export declare let addToIPhoto: string;
    // export declare let addToSafariReadingList: string;
    // export declare let cloudSharing: string;
    // export declare let composeEmail: string;
    // export declare let composeMessage: string;
    // export declare let sendViaAirDrop: string;
    // export declare let useAsDesktopPicture: string;
  }

  namespace NSSlider {
    export enum SliderType {
      Linear = 0,
      Circular = 1
    }

    export enum TickMarkPosition {
      Below = 0,
      Above = 1,
      Leading = 1,
      Trailing = 0
    }

  }

  namespace NSSliderAccessory {
    // export declare let default_: number;
    // export declare let wide: number;
  }

  namespace NSSound {
    // export type Name = String;
    // export type PlaybackDeviceIdentifier = String;
  }

  namespace NSSpecifierTest {
    export enum TestComparisonOperation {
      EqualToComparison = 0,
      LessThanOrEqualToComparison = 1,
      LessThanComparison = 2,
      GreaterThanOrEqualToComparison = 3,
      GreaterThanComparison = 4,
      BeginsWithComparison = 5,
      EndsWithComparison = 6,
      ContainsComparison = 7
    }

  }

  namespace NSSpeechSynthesizer {
    export enum Boundary {
      ImmediateBoundary = 0,
      WordBoundary = 1,
      SentenceBoundary = 2
    }

    // export declare let characterMode: string;
    // export declare let commandDelimiter: string;
    // export declare let currentVoice: string;
    // export declare let abbreviations: string;
    // export declare let entryPhonemes: string;
    // export declare let entrySpelling: string;
    // export declare let localeIdentifier: string;
    // export declare let modificationDate: string;
    // export declare let pronunciations: string;
    // export declare let errors: string;
    // export declare let inputMode: string;
    // export declare let numberMode: string;
    // export declare let outputToFileURL: string;
    // export declare let phonemeSymbols: string;
    // export declare let pitchBase: string;
    // export declare let pitchMod: string;
    // export declare let rate: string;
    // export declare let recentSync: string;
    // export declare let reset: string;
    // export declare let status: string;
    // export declare let synthesizerInfo: string;
    // export declare let volume: string;
    // export declare let age: string;
    // export declare let demoText: string;
    // export declare let gender: string;
    // export declare let female: string;
    // export declare let male: string;
    // export declare let neuter: string;
    // export declare let identifier: string;
    // export declare let individuallySpokenCharacters: string;
    // export declare let name: string;
    // export declare let supportedCharacters: string;
  }

  namespace NSSpellChecker {
    export enum CorrectionIndicatorType {
      Default = 0,
      Reversion = 1,
      Guesses = 2
    }

    export enum CorrectionResponse {
      None = 0,
      Accepted = 1,
      Rejected = 2,
      Ignored = 3,
      Edited = 4,
      Reverted = 5
    }

    // export declare let didChangeAutomaticCapitalizationNotification: string;
    // export declare let didChangeAutomaticDashSubstitutionNotification: string;
    // export declare let didChangeAutomaticPeriodSubstitutionNotification: string;
    // export declare let didChangeAutomaticQuoteSubstitutionNotification: string;
    // export declare let didChangeAutomaticSpellingCorrectionNotification: string;
    // export declare let didChangeAutomaticTextCompletionNotification: string;
    // export declare let didChangeAutomaticTextReplacementNotification: string;
    // export declare let documentAuthor: string;
    // export declare let documentTitle: string;
    // export declare let documentURL: string;
    // export declare let orthography: string;
    // export declare let quotes: string;
    // export declare let referenceDate: string;
    // export declare let referenceTimeZone: string;
    // export declare let regularExpressions: string;
    // export declare let replacements: string;
    // export declare let selectedRange: string;
  }

  namespace NSSplitView {
    export enum DividerStyle {
      Thick = 1,
      Thin = 2,
      PaneSplitter = 3
    }

    // export declare let didResizeSubviewsNotification: string;
    // export declare let willResizeSubviewsNotification: string;
    // export type AutosaveName = String;
  }

  namespace NSSplitViewController {
    // export declare let automaticDimension: number;
  }

  namespace NSSplitViewItem {
    export enum Behavior {
      Default = 0,
      Sidebar = 1,
      ContentList = 2
    }

    export enum CollapseBehavior {
      Default = 0,
      PreferResizingSplitViewWithFixedSiblings = 1,
      PreferResizingSiblingsWithFixedSplitView = 2,
      UseConstraints = 3
    }

    // export declare let unspecifiedDimension: number;
  }

  namespace NSStackView {
    export enum Distribution {
      GravityAreas = -1,
      Fill = 0,
      FillEqually = 1,
      FillProportionally = 2,
      EqualSpacing = 3,
      EqualCentering = 4
    }

    export enum Gravity {
      Top = 1,
      Leading = 1,
      Center = 2,
      Bottom = 3,
      Trailing = 3
    }

    // export declare let useDefaultSpacing: number;
    // export declare let detachOnlyIfNecessary: number;
    // export declare let mustHold: number;
    // export declare let notVisible: number;
  }

  namespace NSStatusItem {
    export enum Behavior {
      RemovalAllowed = 2,
      TerminationOnRemoval = 4
    }

    // export declare let squareLength: number;
    // export declare let variableLength: number;
    // export type AutosaveName = String;
  }

  namespace NSStoryboard {
    // export type Name = String;
    // export type SceneIdentifier = String;
  }

  namespace NSStoryboardSegue {
    // export type Identifier = String;
  }

  namespace NSString {
    export enum DrawingOptions {
      UsesLineFragmentOrigin = 1,
      UsesFontLeading = 2,
      UsesDeviceMetrics = 8,
      TruncatesLastVisibleLine = 32,
      DisableScreenFontSubstitution = 4,
      OneShot = 16
    }

    export enum CompareOptions {
      CaseInsensitiveSearch = 1,
      LiteralSearch = 2,
      BackwardsSearch = 4,
      AnchoredSearch = 8,
      NumericSearch = 64,
      DiacriticInsensitiveSearch = 128,
      WidthInsensitiveSearch = 256,
      ForcedOrderingSearch = 512,
      RegularExpressionSearch = 1024
    }

    export enum EncodingConversionOptions {
      AllowLossy = 1,
      ExternalRepresentation = 2
    }

    export enum EnumerationOptions {
      ByLines = 0,
      ByParagraphs = 1,
      ByComposedCharacterSequences = 2,
      ByWords = 3,
      BySentences = 4,
      Reverse = 256,
      SubstringNotRequired = 512,
      Localized = 1024
    }

    // export type StringLiteralType = string;
    // export type ExtendedGraphemeClusterLiteralType = string;
    // export type UnicodeScalarLiteralType = string;
  }

  namespace NSTabView {
    export enum TabPosition {
      None = 0,
      Top = 1,
      Left = 2,
      Bottom = 3,
      Right = 4
    }

    export enum TabViewBorderType {
      None = 0,
      Line = 1,
      Bezel = 2
    }

    export enum TabType {
      TopTabsBezelBorder = 0,
      LeftTabsBezelBorder = 1,
      BottomTabsBezelBorder = 2,
      RightTabsBezelBorder = 3,
      NoTabsBezelBorder = 4,
      NoTabsLineBorder = 5,
      NoTabsNoBorder = 6
    }

  }

  namespace NSTabViewController {
    export enum TabStyle {
      SegmentedControlOnTop = 0,
      SegmentedControlOnBottom = 1,
      Toolbar = 2,
      Unspecified = -1
    }

  }

  namespace NSTabViewItem {
    export enum State {
      SelectedTab = 0,
      BackgroundTab = 1,
      PressedTab = 2
    }

  }

  namespace NSTableColumn {
    export enum ResizingOptions {
      NoResizing = 0,
      AutoresizingMask = 1,
      UserResizingMask = 2
    }

  }

  namespace NSTableView {
    export enum RowActionEdge {
      Leading = 0,
      Trailing = 1
    }

    export enum AnimationOptions {
      EffectNone = 0,
      EffectFade = 1,
      EffectGap = 2,
      SlideUp = 16,
      SlideDown = 32,
      SlideLeft = 48,
      SlideRight = 64
    }

    export enum ColumnAutoresizingStyle {
      NoColumnAutoresizing = 0,
      UniformColumnAutoresizingStyle = 1,
      SequentialColumnAutoresizingStyle = 2,
      ReverseSequentialColumnAutoresizingStyle = 3,
      LastColumnOnlyAutoresizingStyle = 4,
      FirstColumnOnlyAutoresizingStyle = 5
    }

    export enum DraggingDestinationFeedbackStyle {
      None = -1,
      Regular = 0,
      SourceList = 1,
      Gap = 2
    }

    export enum DropOperation {
      On = 0,
      Above = 1
    }

    export enum GridLineStyle {
      GridNone = 0,
      SolidVerticalGridLineMask = 1,
      SolidHorizontalGridLineMask = 2,
      DashedHorizontalGridLineMask = 8
    }

    export enum RowSizeStyle {
      Default = -1,
      Custom = 0,
      Small = 1,
      Medium = 2,
      Large = 3
    }

    export enum SelectionHighlightStyle {
      None = -1,
      Regular = 0,
      SourceList = 1
    }

    // export declare let columnDidMoveNotification: string;
    // export declare let columnDidResizeNotification: string;
    // export declare let rowViewIdentifier: string;
    // export declare let selectionDidChangeNotification: string;
    // export declare let selectionIsChangingNotification: string;
    // export type AutosaveName = String;
  }

  namespace NSTableViewRowAction {
    export enum Style {
      Regular = 0,
      Destructive = 1
    }

  }

  namespace NSText {
    // export declare let didBeginEditingNotification: string;
    // export declare let didChangeNotification: string;
    // export declare let didEndEditingNotification: string;
    // export declare let movementUserInfoKey: string;
  }

  namespace NSTextAlternatives {
    // export declare let selectedAlternativeStringNotification: string;
  }

  namespace NSTextBlock {
    export enum Dimension {
      Width = 0,
      MinimumWidth = 1,
      MaximumWidth = 2,
      Height = 4,
      MinimumHeight = 5,
      MaximumHeight = 6
    }

    export enum Layer {
      Padding = -1,
      Border = 0,
      Margin = 1
    }

    export enum ValueType {
      AbsoluteValueType = 0,
      PercentageValueType = 1
    }

    export enum VerticalAlignment {
      TopAlignment = 0,
      MiddleAlignment = 1,
      BottomAlignment = 2,
      BaselineAlignment = 3
    }

  }

  namespace NSTextCheckingKey {
    // export declare let airline: string;
    // export declare let city: string;
    // export declare let country: string;
    // export declare let flight: string;
    // export declare let jobTitle: string;
    // export declare let name: string;
    // export declare let organization: string;
    // export declare let phone: string;
    // export declare let state: string;
    // export declare let street: string;
    // export declare let zip: string;
  }

  namespace NSTextCheckingResult {
    export enum CheckingType {
      Orthography = 1,
      Spelling = 2,
      Grammar = 4,
      Date = 8,
      Address = 16,
      Link = 32,
      Quote = 64,
      Dash = 128,
      Replacement = 256,
      Correction = 512,
      RegularExpression = 1024,
      PhoneNumber = 2048,
      TransitInformation = 4096
    }

  }

  namespace NSTextField {
    export enum BezelStyle {
      SquareBezel = 0,
      RoundedBezel = 1
    }

  }

  namespace NSTextFinder {
    export enum Action {
      ShowFindInterface = 1,
      NextMatch = 2,
      PreviousMatch = 3,
      ReplaceAll = 4,
      Replace = 5,
      ReplaceAndFind = 6,
      SetSearchString = 7,
      ReplaceAllInSelection = 8,
      SelectAll = 9,
      SelectAllInSelection = 10,
      HideFindInterface = 11,
      ShowReplaceInterface = 12,
      HideReplaceInterface = 13
    }

    export enum MatchingType {
      Contains = 0,
      StartsWith = 1,
      FullWord = 2,
      EndsWith = 3
    }

  }

  namespace NSTextInputContext {
    // export declare let keyboardSelectionDidChangeNotification: string;
  }

  namespace NSTextList {
    export enum Options {
      PrependEnclosingMarker = 1
    }

    // export declare let box: string;
    // export declare let check: string;
    // export declare let circle: string;
    // export declare let decimal: string;
    // export declare let diamond: string;
    // export declare let disc: string;
    // export declare let hyphen: string;
    // export declare let lowercaseAlpha: string;
    // export declare let lowercaseHexadecimal: string;
    // export declare let lowercaseLatin: string;
    // export declare let lowercaseRoman: string;
    // export declare let octal: string;
    // export declare let square: string;
    // export declare let uppercaseAlpha: string;
    // export declare let uppercaseHexadecimal: string;
    // export declare let uppercaseLatin: string;
    // export declare let uppercaseRoman: string;
  }

  namespace NSTextStorage {
    // export declare let didProcessEditingNotification: string;
    // export declare let willProcessEditingNotification: string;
  }

  namespace NSTextTab {
    // export declare let columnTerminators: string;
  }

  namespace NSTextTable {
    export enum LayoutAlgorithm {
      AutomaticLayoutAlgorithm = 0,
      FixedLayoutAlgorithm = 1
    }

  }

  namespace NSTextView {
    // export declare let didChangeSelectionNotification: string;
    // export declare let didChangeTypingAttributesNotification: string;
    // export declare let willChangeNotifyingTextViewNotification: string;
  }

  namespace NSTimeZone {
    export enum NameStyle {
      Standard = 0,
      ShortStandard = 1,
      DaylightSaving = 2,
      ShortDaylightSaving = 3,
      Generic = 4,
      ShortGeneric = 5
    }

  }

  namespace NSTokenField {
    export enum TokenStyle {
      Default = 0,
      None = 1,
      Rounded = 2,
      Squared = 3,
      PlainSquared = 4
    }

  }

  namespace NSToolbar {
    export enum DisplayMode {
      Default = 0,
      IconAndLabel = 1,
      IconOnly = 2,
      LabelOnly = 3
    }

    export enum SizeMode {
      Default = 0,
      Regular = 1,
      Small = 2
    }

    // export declare let didRemoveItemNotification: string;
    // export declare let willAddItemNotification: string;
    // export type Identifier = String;
  }

  namespace NSToolbarItem {
    // export declare let cloudSharing: string;
    // export declare let customizeToolbar: string;
    // export declare let flexibleSpace: string;
    // export declare let high: number;
    // export declare let low: number;
    // export declare let standard: number;
    // export declare let user: number;
    // export declare let print: string;
    // export declare let separator: string;
    // export declare let showColors: string;
    // export declare let showFonts: string;
    // export declare let space: string;
    // export declare let toggleSidebar: string;
  }

  namespace NSToolbarItemGroup {
    export enum ControlRepresentation {
      Automatic = 0,
      Expanded = 1,
      Collapsed = 2
    }

    export enum SelectionMode {
      SelectOne = 0,
      SelectAny = 1,
      Momentary = 2
    }

  }

  namespace NSTouch {
    export enum Phase {
      Began = 1,
      Moved = 2,
      Stationary = 4,
      Ended = 8,
      Cancelled = 16,
      Touching = 7,
      Any = -1
    }

    export enum TouchType {
      Direct = 0,
      Indirect = 1
    }

    export enum TouchTypeMask {
      Direct = 1,
      Indirect = 2
    }

  }

  namespace NSTouchBar {
    // export type CustomizationIdentifier = String;
  }

  namespace NSTouchBarItem {
    // export declare let candidateList: string;
    // export declare let characterPicker: string;
    // export declare let fixedSpaceLarge: string;
    // export declare let fixedSpaceSmall: string;
    // export declare let flexibleSpace: string;
    // export declare let otherItemsProxy: string;
    // export declare let textAlignment: string;
    // export declare let textColorPicker: string;
    // export declare let textFormat: string;
    // export declare let textList: string;
    // export declare let textStyle: string;
    // export declare let high: number;
    // export declare let low: number;
    // export declare let normal: number;
  }

  namespace NSTrackingArea {
    export enum Options {
      MouseEnteredAndExited = 1,
      MouseMoved = 2,
      CursorUpdate = 4,
      ActiveWhenFirstResponder = 16,
      ActiveInKeyWindow = 32,
      ActiveInActiveApp = 64,
      ActiveAlways = 128,
      AssumeInside = 256,
      InVisibleRect = 512,
      EnabledDuringMouseDrag = 1024
    }

  }

  namespace NSURL {
    export enum BookmarkCreationOptions {
      PreferFileIDResolution = 256,
      MinimalBookmark = 512,
      SuitableForBookmarkFile = 1024,
      WithSecurityScope = 2048,
      SecurityScopeAllowOnlyReadAccess = 4096
    }

    export enum BookmarkResolutionOptions {
      WithoutUI = 256,
      WithoutMounting = 512,
      WithSecurityScope = 1024
    }

    // export type BookmarkFileCreationOptions = number;
  }

  namespace NSURLHandle {
    export enum Status {
      NotLoaded = 0,
      LoadSucceeded = 1,
      LoadInProgress = 2,
      LoadFailed = 3
    }

  }

  namespace NSURLRequest {
    export enum CachePolicy {
      UseProtocolCachePolicy = 0,
      ReloadIgnoringLocalCacheData = 1,
      ReloadIgnoringLocalAndRemoteCacheData = 4,
      ReloadIgnoringCacheData = 1,
      ReturnCacheDataElseLoad = 2,
      ReturnCacheDataDontLoad = 3,
      ReloadRevalidatingCacheData = 5
    }

    export enum NetworkServiceType {
      NetworkServiceTypeDefault = 0,
      NetworkServiceTypeVoIP = 1,
      NetworkServiceTypeVideo = 2,
      NetworkServiceTypeBackground = 3,
      NetworkServiceTypeVoice = 4,
      NetworkServiceTypeResponsiveData = 6,
      NetworkServiceTypeAVStreaming = 8,
      NetworkServiceTypeResponsiveAV = 9,
      NetworkServiceTypeCallSignaling = 11
    }

  }

  namespace NSUbiquitousKeyValueStore {
    // export declare let didChangeExternallyNotification: string;
  }

  namespace NSUserNotification {
    export enum ActivationType {
      None = 0,
      ContentsClicked = 1,
      ActionButtonClicked = 2,
      Replied = 3,
      AdditionalActionClicked = 4
    }

  }

  namespace NSValueTransformerName {
    // export declare let isNilTransformerName: string;
    // export declare let isNotNilTransformerName: string;
    // export declare let negateBooleanTransformerName: string;
    // export declare let secureUnarchiveFromDataTransformerName: string;
  }

  namespace NSView {
    export enum AutoresizingMask {
      ViewNotSizable = 0,
      ViewMinXMargin = 1,
      ViewWidthSizable = 2,
      ViewMaxXMargin = 4,
      ViewMinYMargin = 8,
      ViewHeightSizable = 16,
      ViewMaxYMargin = 32
    }

    export enum BackgroundStyle {
      Normal = 0,
      Emphasized = 1,
      Raised = 2,
      Lowered = 3
    }

    export enum LayerContentsPlacement {
      ScaleAxesIndependently = 0,
      ScaleProportionallyToFit = 1,
      ScaleProportionallyToFill = 2,
      Center = 3,
      Top = 4,
      TopRight = 5,
      Right = 6,
      BottomRight = 7,
      Bottom = 8,
      BottomLeft = 9,
      Left = 10,
      TopLeft = 11
    }

    export enum LayerContentsRedrawPolicy {
      Never = 0,
      OnSetNeedsDisplay = 1,
      DuringViewResize = 2,
      BeforeViewResize = 3,
      Crossfade = 4
    }

    // export declare let emphasized: NSView.BackgroundStyle;
    // export declare let normal: NSView.BackgroundStyle;
    // export declare let dictionaryApplication: string;
    // export declare let presentationType: string;
    // export declare let overlay: string;
    // export declare let fullScreenModeAllScreens: string;
    // export declare let fullScreenModeApplicationPresentationOptions: string;
    // export declare let fullScreenModeSetting: string;
    // export declare let fullScreenModeWindowLevel: string;
    // export declare let boundsDidChangeNotification: string;
    // export declare let didUpdateTrackingAreasNotification: string;
    // export declare let frameDidChangeNotification: string;
    // export declare let noIntrinsicMetric: number;
    // export type TrackingRectTag = number;
    // export type ToolTipTag = number;
  }

  namespace NSViewAnimation {
    // export declare let effect: string;
    // export declare let endFrame: string;
    // export declare let fadeIn: string;
    // export declare let fadeOut: string;
    // export declare let startFrame: string;
    // export declare let target: string;
  }

  namespace NSViewController {
    export enum TransitionOptions {
      None = 0,
      Crossfade = 1,
      SlideUp = 16,
      SlideDown = 32,
      SlideLeft = 64,
      SlideRight = 128,
      SlideForward = 320,
      SlideBackward = 384,
      AllowUserInteraction = 4096
    }

  }

  namespace NSVisualEffectView {
    export enum BlendingMode {
      BehindWindow = 0,
      WithinWindow = 1
    }

    export enum Material {
      Titlebar = 3,
      Selection = 4,
      Menu = 5,
      Popover = 6,
      Sidebar = 7,
      HeaderView = 10,
      Sheet = 11,
      WindowBackground = 12,
      HUDWindow = 13,
      FullScreenUI = 15,
      ToolTip = 17,
      ContentBackground = 18,
      UnderWindowBackground = 21,
      UnderPageBackground = 22,
      AppearanceBased = 0,
      Light = 1,
      Dark = 2,
      MediumLight = 8,
      UltraDark = 9
    }

    export enum State {
      FollowsWindowActiveState = 0,
      Active = 1,
      Inactive = 2
    }

  }

  namespace NSWhoseSpecifier {
    export enum SubelementIdentifier {
      IndexSubelement = 0,
      EverySubelement = 1,
      MiddleSubelement = 2,
      RandomSubelement = 3,
      NoSubelement = 4
    }

  }

  namespace NSWindow {
    export enum BackingStoreType {
      Retained = 0,
      Nonretained = 1,
      Buffered = 2
    }

    export enum SelectionDirection {
      DirectSelection = 0,
      SelectingNext = 1,
      SelectingPrevious = 2
    }

    export enum AnimationBehavior {
      Default = 0,
      None = 2,
      DocumentWindow = 3,
      UtilityWindow = 4,
      AlertPanel = 5
    }

    export enum ButtonType {
      CloseButton = 0,
      MiniaturizeButton = 1,
      ZoomButton = 2,
      ToolbarButton = 3,
      DocumentIconButton = 4,
      DocumentVersionsButton = 6
    }

    export enum CollectionBehavior {
      Default = 0,
      CanJoinAllSpaces = 1,
      MoveToActiveSpace = 2,
      Managed = 4,
      Transient = 8,
      Stationary = 16,
      ParticipatesInCycle = 32,
      IgnoresCycle = 64,
      FullScreenPrimary = 128,
      FullScreenAuxiliary = 256,
      FullScreenNone = 512,
      FullScreenAllowsTiling = 2048,
      FullScreenDisallowsTiling = 4096
    }

    export enum Depth {
      TwentyfourBitRGB = 520,
      SixtyfourBitRGB = 528,
      OnehundredtwentyeightBitRGB = 544
    }

    export enum NumberListOptions {
      AllApplications = 1,
      AllSpaces = 16
    }

    export enum OcclusionState {
      Visible = 2
    }

    export enum OrderingMode {
      Above = 1,
      Below = -1,
      Out = 0
    }

    export enum SharingType {
      None = 0,
      ReadOnly = 1,
      ReadWrite = 2
    }

    export enum StyleMask {
      Borderless = 0,
      Titled = 1,
      Closable = 2,
      Miniaturizable = 4,
      Resizable = 8,
      TexturedBackground = 256,
      UnifiedTitleAndToolbar = 4096,
      FullScreen = 16384,
      FullSizeContentView = 32768,
      UtilityWindow = 16,
      DocModalWindow = 64,
      NonactivatingPanel = 128,
      HUDWindow = 8192
    }

    export enum TabbingMode {
      Automatic = 0,
      Preferred = 1,
      Disallowed = 2
    }

    export enum TitleVisibility {
      Visible = 0,
      Hidden = 1
    }

    export enum UserTabbingPreference {
      Manual = 0,
      Always = 1,
      InFullScreen = 2
    }

    // export declare let oldColorSpaceUserInfoKey: string;
    // export declare let oldScaleFactorUserInfoKey: string;
    // export declare let floating: number;
    // export declare let mainMenu: number;
    // export declare let modalPanel: number;
    // export declare let normal: number;
    // export declare let popUpMenu: number;
    // export declare let screenSaver: number;
    // export declare let statusBar: number;
    // export declare let submenu: number;
    // export declare let tornOffMenu: number;
    // export declare let didBecomeKeyNotification: string;
    // export declare let didBecomeMainNotification: string;
    // export declare let didChangeBackingPropertiesNotification: string;
    // export declare let didChangeOcclusionStateNotification: string;
    // export declare let didChangeScreenNotification: string;
    // export declare let didChangeScreenProfileNotification: string;
    // export declare let didDeminiaturizeNotification: string;
    // export declare let didEndLiveResizeNotification: string;
    // export declare let didEndSheetNotification: string;
    // export declare let didEnterFullScreenNotification: string;
    // export declare let didEnterVersionBrowserNotification: string;
    // export declare let didExitFullScreenNotification: string;
    // export declare let didExitVersionBrowserNotification: string;
    // export declare let didExposeNotification: string;
    // export declare let didMiniaturizeNotification: string;
    // export declare let didMoveNotification: string;
    // export declare let didResignKeyNotification: string;
    // export declare let didResignMainNotification: string;
    // export declare let didResizeNotification: string;
    // export declare let didUpdateNotification: string;
    // export declare let willBeginSheetNotification: string;
    // export declare let willCloseNotification: string;
    // export declare let willEnterFullScreenNotification: string;
    // export declare let willEnterVersionBrowserNotification: string;
    // export declare let willExitFullScreenNotification: string;
    // export declare let willExitVersionBrowserNotification: string;
    // export declare let willMiniaturizeNotification: string;
    // export declare let willMoveNotification: string;
    // export declare let willStartLiveResizeNotification: string;
    // export type FrameAutosaveName = String;
    // export type PersistableFrameDescriptor = String;
    // export type TabbingIdentifier = String;
  }

  namespace NSWorkspace {
    export enum AuthorizationType {
      CreateSymbolicLink = 0,
      SetAttributes = 1,
      ReplaceFile = 2
    }

    export enum IconCreationOptions {
      ExcludeQuickDrawElementsIconCreationOption = 2,
      Exclude10_4ElementsIconCreationOption = 4
    }

    export enum LaunchOptions {
      AndPrint = 2,
      WithErrorPresentation = 64,
      InhibitingBackgroundOnly = 128,
      WithoutAddingToRecents = 256,
      WithoutActivation = 512,
      Async = 65536,
      NewInstance = 524288,
      AndHide = 1048576,
      AndHideOthers = 2097152,
      Default = 65536,
      AllowingClassicStartup = 131072,
      PreferringClassic = 262144
    }

    // export declare let accessibilityDisplayOptionsDidChangeNotification: string;
    // export declare let activeSpaceDidChangeNotification: string;
    // export declare let applicationUserInfoKey: string;
    // export declare let allowClipping: string;
    // export declare let fillColor: string;
    // export declare let imageScaling: string;
    // export declare let didActivateApplicationNotification: string;
    // export declare let didChangeFileLabelsNotification: string;
    // export declare let didDeactivateApplicationNotification: string;
    // export declare let didHideApplicationNotification: string;
    // export declare let didLaunchApplicationNotification: string;
    // export declare let didMountNotification: string;
    // export declare let didRenameVolumeNotification: string;
    // export declare let didTerminateApplicationNotification: string;
    // export declare let didUnhideApplicationNotification: string;
    // export declare let didUnmountNotification: string;
    // export declare let didWakeNotification: string;
    // export declare let appleEvent: string;
    // export declare let architecture: string;
    // export declare let arguments_: string;
    // export declare let environment: string;
    // export declare let screensDidSleepNotification: string;
    // export declare let screensDidWakeNotification: string;
    // export declare let sessionDidBecomeActiveNotification: string;
    // export declare let sessionDidResignActiveNotification: string;
    // export declare let localizedVolumeNameUserInfoKey: string;
    // export declare let oldLocalizedVolumeNameUserInfoKey: string;
    // export declare let oldVolumeURLUserInfoKey: string;
    // export declare let volumeURLUserInfoKey: string;
    // export declare let willLaunchApplicationNotification: string;
    // export declare let willPowerOffNotification: string;
    // export declare let willSleepNotification: string;
    // export declare let willUnmountNotification: string;
  }

  namespace NSXPCConnection {
    export enum Options {
      Privileged = 4096
    }

  }

  namespace NetService {
    // Options
    export enum Options {
      noAutoRename,
      listenForConnections,
      center,
      name,
      object
    }

  }

  namespace NotificationQueue {
    export enum NotificationCoalescing {
      NoCoalescing = 0,
      CoalescingOnName = 1,
      CoalescingOnSender = 2
    }

    export enum PostingStyle {
      WhenIdle = 1,
      ASAP = 2,
      Now = 3
    }

  }

  namespace NumberFormatter {
    export enum Behavior {
      BehaviorDefault = 0,
      Behavior10_0 = 1000,
      Behavior10_4 = 1040
    }

    export enum PadPosition {
      BeforePrefix = 0,
      AfterPrefix = 1,
      BeforeSuffix = 2,
      AfterSuffix = 3
    }

    export enum RoundingMode {
      Ceiling = 0,
      Floor = 1,
      Down = 2,
      Up = 3,
      HalfEven = 4,
      HalfDown = 5,
      HalfUp = 6
    }

    export enum Style {
      NoStyle = 0,
      DecimalStyle = 1,
      CurrencyStyle = 2,
      PercentStyle = 3,
      ScientificStyle = 4,
      SpellOutStyle = 5,
      OrdinalStyle = 6,
      CurrencyISOCodeStyle = 8,
      CurrencyPluralStyle = 9,
      CurrencyAccountingStyle = 10
    }

  }

  namespace Operation {
    export enum QueuePriority {
      VeryLow = -8,
      Low = -4,
      Normal = 0,
      High = 4,
      VeryHigh = 8
    }

  }

  namespace OperationQueue {
    // export declare let defaultMaxConcurrentOperationCount: number;
  }

  namespace PersonNameComponentsFormatter {
    export enum Options {
      Phonetic = 2
    }

    export enum Style {
      Default = 0,
      Short = 1,
      Medium = 2,
      Long = 3,
      Abbreviated = 4
    }

  }

  namespace Port {
    // export declare let didBecomeInvalidNotification: string;
  }

  namespace Process {
    export enum TerminationReason {
      Exit = 1,
      UncaughtSignal = 2
    }

    // export declare let didTerminateNotification: string;
  }

  namespace ProcessInfo {
    export enum ActivityOptions {
      IdleDisplaySleepDisabled = 1099511627776,
      IdleSystemSleepDisabled = 1048576,
      SuddenTerminationDisabled = 16384,
      AutomaticTerminationDisabled = 32768,
      UserInitiated = 16777215,
      UserInitiatedAllowingIdleSystemSleep = 15728639,
      Background = 255,
      LatencyCritical = 1095216660480
    }

    export enum ThermalState {
      Nominal = 0,
      Fair = 1,
      Serious = 2,
      Critical = 3
    }

    // export declare let thermalStateDidChangeNotification: string;
  }

  namespace Progress {
    // export declare let copying: string;
    // export declare let decompressingAfterDownloading: string;
    // export declare let downloading: string;
    // export declare let receiving: string;
  }

  namespace ProgressKind {
    // export declare let file: string;
  }

  namespace ProgressUserInfoKey {
    // export declare let estimatedTimeRemainingKey: string;
    // export declare let fileAnimationImageKey: string;
    // export declare let fileAnimationImageOriginalRectKey: string;
    // export declare let fileCompletedCountKey: string;
    // export declare let fileIconKey: string;
    // export declare let fileOperationKindKey: string;
    // export declare let fileTotalCountKey: string;
    // export declare let fileURLKey: string;
    // export declare let throughputKey: string;
  }

  namespace PropertyListSerialization {
    export enum PropertyListFormat {
      OpenStepFormat = 1,
      XMLFormat_v1_0 = 100,
      BinaryFormat_v1_0 = 200
    }

    export enum MutabilityOptions {
      Immutable = 0,
      MutableContainers = 1,
      MutableContainersAndLeaves = 2
    }

    // export type ReadOptions = PropertyListSerialization;
    // export type WriteOptions = number;
  }

  namespace RelativeDateTimeFormatter {
    export enum DateTimeStyle {
      Numeric = 0,
      Named = 1
    }

    export enum UnitsStyle {
      Full = 0,
      SpellOut = 1,
      Short = 2,
      Abbreviated = 3
    }

  }

  namespace RunLoop {
    // export declare let eventTracking: string;
    // export declare let modalPanel: string;
    // export declare let default_: string;
    // export declare let common: string;
  }

  namespace Stream {
    export enum Event {
      None = 0,
      OpenCompleted = 1,
      HasBytesAvailable = 2,
      HasSpaceAvailable = 4,
      ErrorOccurred = 8,
      EndEncountered = 16
    }

    export enum Status {
      NotOpen = 0,
      Opening = 1,
      Open = 2,
      Reading = 3,
      Writing = 4,
      AtEnd = 5,
      Closed = 6,
      Error = 7
    }

    // export declare let dataWrittenToMemoryStreamKey: string;
    // export declare let fileCurrentOffsetKey: string;
    // export declare let networkServiceType: string;
    // export declare let socksProxyConfigurationKey: string;
    // export declare let socketSecurityLevelKey: string;
  }

  namespace StreamNetworkServiceTypeValue {
    // export declare let background: string;
    // export declare let callSignaling: string;
    // export declare let video: string;
    // export declare let voIP: string;
    // export declare let voice: string;
  }

  namespace StreamSOCKSProxyConfiguration {
    // export declare let hostKey: string;
    // export declare let passwordKey: string;
    // export declare let portKey: string;
    // export declare let userKey: string;
    // export declare let versionKey: string;
  }

  namespace StreamSOCKSProxyVersion {
    // export declare let version4: string;
    // export declare let version5: string;
  }

  namespace StreamSocketSecurityLevel {
    // export declare let negotiatedSSL: string;
    // export declare let none: string;
    // export declare let ssLv2: string;
    // export declare let ssLv3: string;
    // export declare let tlSv1: string;
  }

  namespace StringEncodingDetectionOptionsKey {
    // export declare let allowLossyKey: string;
    // export declare let disallowedEncodingsKey: string;
    // export declare let fromWindowsKey: string;
    // export declare let likelyLanguageKey: string;
    // export declare let lossySubstitutionKey: string;
    // export declare let suggestedEncodingsKey: string;
    // export declare let useOnlySuggestedEncodingsKey: string;
  }

  namespace StringTransform {
    // export declare let fullwidthToHalfwidth: string;
    // export declare let hiraganaToKatakana: string;
    // export declare let latinToArabic: string;
    // export declare let latinToCyrillic: string;
    // export declare let latinToGreek: string;
    // export declare let latinToHangul: string;
    // export declare let latinToHebrew: string;
    // export declare let latinToHiragana: string;
    // export declare let latinToKatakana: string;
    // export declare let latinToThai: string;
    // export declare let mandarinToLatin: string;
    // export declare let stripCombiningMarks: string;
    // export declare let stripDiacritics: string;
    // export declare let toLatin: string;
    // export declare let toUnicodeName: string;
    // export declare let toXMLHex: string;
  }

  namespace SystemPressureState {
    // Factors
    export enum Factors {
      systemTemperature,
      peakPower,
      depthModuleTemperature
    }

  }

  namespace URLCache {
    export enum StoragePolicy {
      Allowed = 0,
      AllowedInMemoryOnly = 1,
      NotAllowed = 2
    }

  }

  namespace URLCredential {
    export enum Persistence {
      None = 0,
      ForSession = 1,
      Permanent = 2,
      Synchronizable = 3
    }

  }

  namespace URLFileProtection {
    // export declare let complete: string;
    // export declare let completeUnlessOpen: string;
    // export declare let completeUntilFirstUserAuthentication: string;
    // export declare let none: string;
  }

  namespace URLFileResourceType {
    // export declare let blockSpecial: string;
    // export declare let characterSpecial: string;
    // export declare let directory: string;
    // export declare let namedPipe: string;
    // export declare let regular: string;
    // export declare let socket: string;
    // export declare let symbolicLink: string;
    // export declare let unknown: string;
  }

  namespace URLResourceKey {
    // export declare let addedToDirectoryDateKey: string;
    // export declare let applicationIsScriptableKey: string;
    // export declare let attributeModificationDateKey: string;
    // export declare let canonicalPathKey: string;
    // export declare let contentAccessDateKey: string;
    // export declare let contentModificationDateKey: string;
    // export declare let creationDateKey: string;
    // export declare let customIconKey: string;
    // export declare let documentIdentifierKey: string;
    // export declare let effectiveIconKey: string;
    // export declare let fileAllocatedSizeKey: string;
    // export declare let fileProtectionKey: string;
    // export declare let fileResourceIdentifierKey: string;
    // export declare let fileResourceTypeKey: string;
    // export declare let fileSecurityKey: string;
    // export declare let fileSizeKey: string;
    // export declare let generationIdentifierKey: string;
    // export declare let hasHiddenExtensionKey: string;
    // export declare let isAliasFileKey: string;
    // export declare let isApplicationKey: string;
    // export declare let isDirectoryKey: string;
    // export declare let isExcludedFromBackupKey: string;
    // export declare let isExecutableKey: string;
    // export declare let isHiddenKey: string;
    // export declare let isMountTriggerKey: string;
    // export declare let isPackageKey: string;
    // export declare let isReadableKey: string;
    // export declare let isRegularFileKey: string;
    // export declare let isSymbolicLinkKey: string;
    // export declare let isSystemImmutableKey: string;
    // export declare let isUbiquitousItemKey: string;
    // export declare let isUserImmutableKey: string;
    // export declare let isVolumeKey: string;
    // export declare let isWritableKey: string;
    // export declare let keysOfUnsetValuesKey: string;
    // export declare let labelColorKey: string;
    // export declare let labelNumberKey: string;
    // export declare let linkCountKey: string;
    // export declare let localizedLabelKey: string;
    // export declare let localizedNameKey: string;
    // export declare let localizedTypeDescriptionKey: string;
    // export declare let nameKey: string;
    // export declare let parentDirectoryURLKey: string;
    // export declare let pathKey: string;
    // export declare let preferredIOBlockSizeKey: string;
    // export declare let quarantinePropertiesKey: string;
    // export declare let tagNamesKey: string;
    // export declare let thumbnailDictionaryKey: string;
    // export declare let thumbnailKey: string;
    // export declare let totalFileAllocatedSizeKey: string;
    // export declare let totalFileSizeKey: string;
    // export declare let typeIdentifierKey: string;
    // export declare let ubiquitousItemContainerDisplayNameKey: string;
    // export declare let ubiquitousItemDownloadRequestedKey: string;
    // export declare let ubiquitousItemDownloadingErrorKey: string;
    // export declare let ubiquitousItemDownloadingStatusKey: string;
    // export declare let ubiquitousItemHasUnresolvedConflictsKey: string;
    // export declare let ubiquitousItemIsDownloadingKey: string;
    // export declare let ubiquitousItemIsSharedKey: string;
    // export declare let ubiquitousItemIsUploadedKey: string;
    // export declare let ubiquitousItemIsUploadingKey: string;
    // export declare let ubiquitousItemUploadingErrorKey: string;
    // export declare let ubiquitousSharedItemCurrentUserPermissionsKey: string;
    // export declare let ubiquitousSharedItemCurrentUserRoleKey: string;
    // export declare let ubiquitousSharedItemMostRecentEditorNameComponentsKey: string;
    // export declare let ubiquitousSharedItemOwnerNameComponentsKey: string;
    // export declare let volumeAvailableCapacityForImportantUsageKey: string;
    // export declare let volumeAvailableCapacityForOpportunisticUsageKey: string;
    // export declare let volumeAvailableCapacityKey: string;
    // export declare let volumeCreationDateKey: string;
    // export declare let volumeIdentifierKey: string;
    // export declare let volumeIsAutomountedKey: string;
    // export declare let volumeIsBrowsableKey: string;
    // export declare let volumeIsEjectableKey: string;
    // export declare let volumeIsEncryptedKey: string;
    // export declare let volumeIsInternalKey: string;
    // export declare let volumeIsJournalingKey: string;
    // export declare let volumeIsLocalKey: string;
    // export declare let volumeIsReadOnlyKey: string;
    // export declare let volumeIsRemovableKey: string;
    // export declare let volumeIsRootFileSystemKey: string;
    // export declare let volumeLocalizedFormatDescriptionKey: string;
    // export declare let volumeLocalizedNameKey: string;
    // export declare let volumeMaximumFileSizeKey: string;
    // export declare let volumeNameKey: string;
    // export declare let volumeResourceCountKey: string;
    // export declare let volumeSupportsAccessPermissionsKey: string;
    // export declare let volumeSupportsAdvisoryFileLockingKey: string;
    // export declare let volumeSupportsCasePreservedNamesKey: string;
    // export declare let volumeSupportsCaseSensitiveNamesKey: string;
    // export declare let volumeSupportsCompressionKey: string;
    // export declare let volumeSupportsExclusiveRenamingKey: string;
    // export declare let volumeSupportsExtendedSecurityKey: string;
    // export declare let volumeSupportsFileCloningKey: string;
    // export declare let volumeSupportsHardLinksKey: string;
    // export declare let volumeSupportsImmutableFilesKey: string;
    // export declare let volumeSupportsJournalingKey: string;
    // export declare let volumeSupportsPersistentIDsKey: string;
    // export declare let volumeSupportsRenamingKey: string;
    // export declare let volumeSupportsRootDirectoryDatesKey: string;
    // export declare let volumeSupportsSparseFilesKey: string;
    // export declare let volumeSupportsSwapRenamingKey: string;
    // export declare let volumeSupportsSymbolicLinksKey: string;
    // export declare let volumeSupportsVolumeSizesKey: string;
    // export declare let volumeSupportsZeroRunsKey: string;
    // export declare let volumeTotalCapacityKey: string;
    // export declare let volumeURLForRemountingKey: string;
    // export declare let volumeURLKey: string;
    // export declare let volumeUUIDStringKey: string;
  }

  namespace URLSession {
    export enum AuthChallengeDisposition {
      UseCredential = 0,
      PerformDefaultHandling = 1,
      CancelAuthenticationChallenge = 2,
      RejectProtectionSpace = 3
    }

    export enum ResponseDisposition {
      Cancel = 0,
      Allow = 1,
      BecomeDownload = 2,
      BecomeStream = 3
    }

  }

  namespace URLSessionTask {
    export enum State {
      Running = 0,
      Suspended = 1,
      Canceling = 2,
      Completed = 3
    }

    // export declare let defaultPriority: number;
    // export declare let highPriority: number;
    // export declare let lowPriority: number;
  }

  namespace URLSessionTaskMetrics {
    export enum ResourceFetchType {
      Unknown = 0,
      NetworkLoad = 1,
      ServerPush = 2,
      LocalCache = 3
    }

  }

  namespace URLSessionWebSocketTask {
    export enum CloseCode {
      Invalid = 0,
      NormalClosure = 1000,
      GoingAway = 1001,
      ProtocolError = 1002,
      UnsupportedData = 1003,
      NoStatusReceived = 1005,
      AbnormalClosure = 1006,
      InvalidFramePayloadData = 1007,
      PolicyViolation = 1008,
      MessageTooBig = 1009,
      MandatoryExtensionMissing = 1010,
      InternalServerError = 1011,
      TLSHandshakeFailure = 1015
    }

  }

  namespace URLThumbnailDictionaryItem {
    // export declare let NSThumbnail1024x1024SizeKey: string;
  }

  namespace URLUbiquitousItemDownloadingStatus {
    // export declare let current: string;
    // export declare let downloaded: string;
    // export declare let notDownloaded: string;
  }

  namespace URLUbiquitousSharedItemPermissions {
    // export declare let readOnly: string;
    // export declare let readWrite: string;
  }

  namespace URLUbiquitousSharedItemRole {
    // export declare let owner: string;
    // export declare let participant: string;
  }

  namespace UserDefaults {
    // export declare let argumentDomain: string;
    // export declare let globalDomain: string;
    // export declare let registrationDomain: string;
    // export declare let completedInitialCloudSyncNotification: string;
    // export declare let didChangeCloudAccountsNotification: string;
    // export declare let noCloudAccountNotification: string;
    // export declare let didChangeNotification: string;
    // export declare let sizeLimitExceededNotification: string;
  }

  namespace XMLDTDNode {
    export enum DTDKind {
      EntityGeneralKind = 1,
      EntityParsedKind = 2,
      EntityUnparsedKind = 3,
      EntityParameterKind = 4,
      EntityPredefined = 5,
      AttributeCDATAKind = 6,
      AttributeIDKind = 7,
      AttributeIDRefKind = 8,
      AttributeIDRefsKind = 9,
      AttributeEntityKind = 10,
      AttributeEntitiesKind = 11,
      AttributeNMTokenKind = 12,
      AttributeNMTokensKind = 13,
      AttributeEnumerationKind = 14,
      AttributeNotationKind = 15,
      ElementDeclarationUndefinedKind = 16,
      ElementDeclarationEmptyKind = 17,
      ElementDeclarationAnyKind = 18,
      ElementDeclarationMixedKind = 19,
      ElementDeclarationElementKind = 20
    }

  }

  namespace XMLDocument {
    export enum ContentKind {
      XMLKind = 0,
      XHTMLKind = 1,
      HTMLKind = 2,
      TextKind = 3
    }

  }

  namespace XMLNode {
    export enum Kind {
      InvalidKind = 0,
      DocumentKind = 1,
      ElementKind = 2,
      AttributeKind = 3,
      NamespaceKind = 4,
      ProcessingInstructionKind = 5,
      CommentKind = 6,
      TextKind = 7,
      DTDKind = 8,
      EntityDeclarationKind = 9,
      AttributeDeclarationKind = 10,
      ElementDeclarationKind = 11,
      NotationDeclarationKind = 12
    }

    export enum Options {
      NodeOptionsNone = 0,
      NodeIsCDATA = 1,
      NodeExpandEmptyElement = 2,
      NodeCompactEmptyElement = 4,
      NodeUseSingleQuotes = 8,
      NodeUseDoubleQuotes = 16,
      NodeNeverEscapeContents = 32,
      DocumentTidyHTML = 512,
      DocumentTidyXML = 1024,
      DocumentValidate = 8192,
      NodeLoadExternalEntitiesAlways = 16384,
      NodeLoadExternalEntitiesSameOriginOnly = 32768,
      NodeLoadExternalEntitiesNever = 524288,
      DocumentXInclude = 65536,
      NodePrettyPrint = 131072,
      DocumentIncludeContentTypeDeclaration = 262144,
      NodePreserveNamespaceOrder = 1048576,
      NodePreserveAttributeOrder = 2097152,
      NodePreserveEntities = 4194304,
      NodePreservePrefixes = 8388608,
      NodePreserveCDATA = 16777216,
      NodePreserveWhitespace = 33554432,
      NodePreserveDTD = 67108864,
      NodePreserveCharacterReferences = 134217728,
      NodePromoteSignificantWhitespace = 268435456,
      NodePreserveEmptyElements = 6,
      NodePreserveQuotes = 24,
      NodePreserveAll = 4293918750
    }

  }

  namespace XMLParser {
    export enum ErrorCode {
      InternalError = 1,
      OutOfMemoryError = 2,
      DocumentStartError = 3,
      EmptyDocumentError = 4,
      PrematureDocumentEndError = 5,
      InvalidHexCharacterRefError = 6,
      InvalidDecimalCharacterRefError = 7,
      InvalidCharacterRefError = 8,
      InvalidCharacterError = 9,
      CharacterRefAtEOFError = 10,
      CharacterRefInPrologError = 11,
      CharacterRefInEpilogError = 12,
      CharacterRefInDTDError = 13,
      EntityRefAtEOFError = 14,
      EntityRefInPrologError = 15,
      EntityRefInEpilogError = 16,
      EntityRefInDTDError = 17,
      ParsedEntityRefAtEOFError = 18,
      ParsedEntityRefInPrologError = 19,
      ParsedEntityRefInEpilogError = 20,
      ParsedEntityRefInInternalSubsetError = 21,
      EntityReferenceWithoutNameError = 22,
      EntityReferenceMissingSemiError = 23,
      ParsedEntityRefNoNameError = 24,
      ParsedEntityRefMissingSemiError = 25,
      UndeclaredEntityError = 26,
      UnparsedEntityError = 28,
      EntityIsExternalError = 29,
      EntityIsParameterError = 30,
      UnknownEncodingError = 31,
      EncodingNotSupportedError = 32,
      StringNotStartedError = 33,
      StringNotClosedError = 34,
      NamespaceDeclarationError = 35,
      EntityNotStartedError = 36,
      EntityNotFinishedError = 37,
      LessThanSymbolInAttributeError = 38,
      AttributeNotStartedError = 39,
      AttributeNotFinishedError = 40,
      AttributeHasNoValueError = 41,
      AttributeRedefinedError = 42,
      LiteralNotStartedError = 43,
      LiteralNotFinishedError = 44,
      CommentNotFinishedError = 45,
      ProcessingInstructionNotStartedError = 46,
      ProcessingInstructionNotFinishedError = 47,
      NotationNotStartedError = 48,
      NotationNotFinishedError = 49,
      AttributeListNotStartedError = 50,
      AttributeListNotFinishedError = 51,
      MixedContentDeclNotStartedError = 52,
      MixedContentDeclNotFinishedError = 53,
      ElementContentDeclNotStartedError = 54,
      ElementContentDeclNotFinishedError = 55,
      XMLDeclNotStartedError = 56,
      XMLDeclNotFinishedError = 57,
      ConditionalSectionNotStartedError = 58,
      ConditionalSectionNotFinishedError = 59,
      ExternalSubsetNotFinishedError = 60,
      DOCTYPEDeclNotFinishedError = 61,
      MisplacedCDATAEndStringError = 62,
      CDATANotFinishedError = 63,
      MisplacedXMLDeclarationError = 64,
      SpaceRequiredError = 65,
      SeparatorRequiredError = 66,
      NMTOKENRequiredError = 67,
      NAMERequiredError = 68,
      PCDATARequiredError = 69,
      URIRequiredError = 70,
      PublicIdentifierRequiredError = 71,
      LTRequiredError = 72,
      GTRequiredError = 73,
      LTSlashRequiredError = 74,
      EqualExpectedError = 75,
      TagNameMismatchError = 76,
      UnfinishedTagError = 77,
      StandaloneValueError = 78,
      InvalidEncodingNameError = 79,
      CommentContainsDoubleHyphenError = 80,
      InvalidEncodingError = 81,
      ExternalStandaloneEntityError = 82,
      InvalidConditionalSectionError = 83,
      EntityValueRequiredError = 84,
      NotWellBalancedError = 85,
      ExtraContentError = 86,
      InvalidCharacterInEntityError = 87,
      ParsedEntityRefInInternalError = 88,
      EntityRefLoopError = 89,
      EntityBoundaryError = 90,
      InvalidURIError = 91,
      URIFragmentError = 92,
      NoDTDError = 94,
      DelegateAbortedParseError = 512
    }

    export enum ExternalEntityResolvingPolicy {
      ResolveExternalEntitiesNever = 0,
      ResolveExternalEntitiesNoNetwork = 1,
      ResolveExternalEntitiesSameOriginOnly = 2,
      ResolveExternalEntitiesAlways = 3
    }

    // export declare let errorDomain: string;
  }

  export enum AVAssetReferenceRestrictions {
    forbidRemoteReferenceToLocal,
    forbidLocalReferenceToRemote,
    forbidCrossSiteReference,
    forbidLocalReferenceToLocal,
    forbidAll,
    defaultPolicy,
  }

  export enum AVAudioPlayerNodeBufferOptions {
    byteSwapped,
    scalarCount,
    loops,
    interrupts,
    interruptsAtLoop,
  }

  export enum AVAudioSpatializationFormats {
    monoAndStereo,
    multichannel,
    monoStereoAndMultichannel,
  }

  export enum AVMovieWritingOptions {
    errorDomain,
    unknown,
    outOfMemory,
    sessionNotRunning,
    deviceAlreadyUsedByAnotherSession,
    noDataCaptured,
    sessionConfigurationChanged,
    diskFull,
    deviceWasDisconnected,
    mediaChanged,
    maximumDurationReached,
    maximumFileSizeReached,
    mediaDiscontinuity,
    maximumNumberOfSamplesForFileFormatReached,
    deviceNotConnected,
    deviceInUseByAnotherApplication,
    deviceLockedForConfigurationByAnotherProcess,
    exportFailed,
    decodeFailed,
    invalidSourceMedia,
    fileAlreadyExists,
    compositionTrackSegmentsNotContiguous,
    invalidCompositionTrackSegmentDuration,
    invalidCompositionTrackSegmentSourceStartTime,
    invalidCompositionTrackSegmentSourceDuration,
    fileFormatNotRecognized,
    fileFailedToParse,
    maximumStillImageCaptureRequestsExceeded,
    contentIsProtected,
    noImageAtTime,
    decoderNotFound,
    encoderNotFound,
    contentIsNotAuthorized,
    applicationIsNotAuthorized,
    operationNotSupportedForAsset,
    decoderTemporarilyUnavailable,
    encoderTemporarilyUnavailable,
    invalidVideoComposition,
    referenceForbiddenByReferencePolicy,
    invalidOutputURLPathExtension,
    screenCaptureFailed,
    displayWasDisabled,
    torchLevelUnavailable,
    incompatibleAsset,
    failedToLoadMediaData,
    serverIncorrectlyConfigured,
    applicationIsNotAuthorizedToUseDevice,
    failedToParse,
    fileTypeDoesNotSupportSampleReferences,
    undecodableMediaData,
    airPlayControllerRequiresInternet,
    airPlayReceiverRequiresInternet,
    videoCompositorFailed,
    createContentKeyRequestFailed,
    unsupportedOutputSettings,
    operationNotAllowed,
    contentIsUnavailable,
    formatUnsupported,
    malformedDepth,
    contentNotUpdated,
    noLongerPlayable,
    noCompatibleAlternatesForExternalDisplay,
    noSourceTrack,
    externalPlaybackNotSupportedForAsset,
    operationNotSupportedForPreset,
    incorrectlyConfigured,
    segmentStartedWithNonSyncSample,
    rosettaNotInstalled,
    addMovieHeaderToDestination,
    truncateDestinationToMovieHeaderOnly,
  }

  export enum AVMusicSequenceLoadOptions {
    smfChannelsToTracks,
    scalarCount,
  }

  export enum AlignmentOptions {
    alignMinXInward,
    alignMinYInward,
    alignMaxXInward,
    alignMaxYInward,
    alignWidthInward,
    alignHeightInward,
    alignMinXOutward,
    alignMinYOutward,
    alignMaxXOutward,
    alignMaxYOutward,
    alignWidthOutward,
    alignHeightOutward,
    alignMinXNearest,
    alignMinYNearest,
    alignMaxXNearest,
    alignMaxYNearest,
    alignWidthNearest,
    alignHeightNearest,
    alignRectFlipped,
    alignAllEdgesInward,
    alignAllEdgesOutward,
    alignAllEdgesNearest,
  }

  export enum AnyObject {
    byteSwapped,
    scalarCount,
    assureMemoryNow,
    alwaysCopyData,
    dontOptimizeDepth,
    permitEmptyReference,
  }

  export enum CAAutoresizingMask {
    layerMinXMargin,
    layerWidthSizable,
    layerMaxXMargin,
    layerMinYMargin,
    layerHeightSizable,
    layerMaxYMargin,
  }

  export enum CACornerMask {
    layerMinXMinYCorner,
    layerMaxXMinYCorner,
    layerMinXMaxYCorner,
    layerMaxXMaxYCorner,
  }

  export enum CAEdgeAntialiasingMask {
    layerLeftEdge,
    layerRightEdge,
    layerBottomEdge,
    layerTopEdge,
  }

  export enum CFCalendarUnit {
    magnitude,
    byteSwapped,
    scalarCount,
    era,
    year,
    month,
    day,
    hour,
    minute,
    second,
    week,
    weekday,
    weekdayOrdinal,
    quarter,
    weekOfMonth,
    weekOfYear,
    yearForWeekOfYear,
  }

  export enum CFDataSearchFlags {
    backwards,
    anchored,
  }

  export enum CFFileSecurityClearOptions {
    magnitude,
    byteSwapped,
    scalarCount,
    owner,
    group,
    mode,
    ownerUUID,
    groupUUID,
    accessControlList,
  }

  export enum CFGregorianUnitFlags {
    unitsYears,
    unitsMonths,
    unitsDays,
    unitsHours,
    unitsMinutes,
    unitsSeconds,
    allUnits,
  }

  export enum CFISO8601DateFormatOptions {
    byteSwapped,
    scalarCount,
    withYear,
    withMonth,
    withWeekOfYear,
    withDay,
    withTime,
    withTimeZone,
    withSpaceBetweenDateAndTime,
    withDashSeparatorInDate,
    withColonSeparatorInTime,
    withColonSeparatorInTimeZone,
    withFractionalSeconds,
    withFullDate,
    withFullTime,
    withInternetDateTime,
  }

  export enum CFNumberFormatterOptionFlags {
    magnitude,
    byteSwapped,
    scalarCount,
    parseIntegersOnly,
  }

  export enum CFPropertyListMutabilityOptions {
    byteSwapped,
    scalarCount,
    mutableContainers,
    mutableContainersAndLeaves,
  }

  export enum CFRunLoopActivity {
    entry,
    beforeTimers,
    beforeSources,
    beforeWaiting,
    afterWaiting,
    exit,
    allActivities,
  }

  export enum CFSocketCallBackType {
    readCallBack,
    acceptCallBack,
    dataCallBack,
    connectCallBack,
    writeCallBack,
  }

  export enum CFStreamEventType {
    magnitude,
    byteSwapped,
    scalarCount,
    openCompleted,
    hasBytesAvailable,
    canAcceptBytes,
    errorOccurred,
    endEncountered,
  }

  export enum CFStringCompareFlags {
    compareCaseInsensitive,
    compareBackwards,
    compareAnchored,
    compareNonliteral,
    compareLocalized,
    compareNumerically,
    compareDiacriticInsensitive,
    compareWidthInsensitive,
    compareForcedOrdering,
  }

  export enum CFStringTokenizerTokenType {
    byteSwapped,
    scalarCount,
    normal,
    hasSubTokensMask,
    hasDerivedSubTokensMask,
    hasHasNumbersMask,
    hasNonLettersMask,
    isCJWordMask,
  }

  export enum CFURLBookmarkCreationOptions {
    byteSwapped,
    scalarCount,
    minimalBookmarkMask,
    suitableForBookmarkFile,
    withSecurityScope,
    securityScopeAllowOnlyReadAccess,
  }

  export enum CFURLBookmarkResolutionOptions {
    byteSwapped,
    scalarCount,
    cfurlBookmarkResolutionWithoutUIMask,
    cfurlBookmarkResolutionWithoutMountingMask,
    cfurlBookmarkResolutionWithSecurityScope,
    cfBookmarkResolutionWithoutUIMask,
    cfBookmarkResolutionWithoutMountingMask,
  }

  export enum CFURLEnumeratorOptions {
    descendRecursively,
    skipInvisibles,
    generateFileReferenceURLs,
    skipPackageContents,
    includeDirectoriesPreOrder,
    includeDirectoriesPostOrder,
    generateRelativePathURLs,
  }

  export enum CFXMLParserOptions {
    validateDocument,
    skipMetaData,
    replacePhysicalEntities,
    skipWhitespace,
    resolveExternalEntities,
    addImpliedAttributes,
    allOptions,
  }

  export enum CFXMLParserStatusCode {
    statusParseNotBegun,
    statusParseInProgress,
    errorUnexpectedEOF,
    errorUnknownEncoding,
    errorEncodingConversionFailure,
    errorMalformedProcessingInstruction,
    errorMalformedDTD,
    errorMalformedName,
    errorMalformedCDSect,
    errorMalformedCloseTag,
    errorMalformedStartTag,
    errorMalformedDocument,
    errorElementlessDocument,
    errorMalformedComment,
    errorMalformedCharacterReference,
    errorMalformedParsedCharacterData,
    errorNoData,
  }

  export enum CGBitmapInfo {
    alphaInfoMask,
    floatInfoMask,
    floatComponents,
    byteOrderMask,
    byteOrder16Little,
    byteOrder32Little,
    byteOrder16Big,
    byteOrder32Big,
  }

  export enum CGCaptureOptions {
    byteSwapped,
    scalarCount,
    noFill,
  }

  export enum CGConfigureOption {
    byteSwapped,
    scalarCount,
    forAppOnly,
    forSession,
    permanently,
  }

  export enum CGDisplayChangeSummaryFlags {
    byteSwapped,
    scalarCount,
    beginConfigurationFlag,
    movedFlag,
    setMainFlag,
    setModeFlag,
    addFlag,
    removeFlag,
    enabledFlag,
    disabledFlag,
    mirrorFlag,
    unMirrorFlag,
    desktopShapeChangedFlag,
  }

  export enum CGEventFilterMask {
    byteSwapped,
    scalarCount,
    permitLocalMouseEvents,
    permitLocalKeyboardEvents,
    permitSystemDefinedEvents,
  }

  export enum CGEventFlags {
    maskAlphaShift,
    maskShift,
    maskControl,
    maskAlternate,
    maskCommand,
    maskHelp,
    maskSecondaryFn,
    maskNumericPad,
    maskNonCoalesced,
  }

  export enum CGGradientDrawingOptions {
    byteSwapped,
    scalarCount,
    drawsBeforeStartLocation,
    drawsAfterEndLocation,
  }

  export enum CGPDFAccessPermissions {
    byteSwapped,
    scalarCount,
    allowsLowQualityPrinting,
    allowsHighQualityPrinting,
    allowsDocumentChanges,
    allowsDocumentAssembly,
    allowsContentCopying,
    allowsContentAccessibility,
    allowsCommenting,
    allowsFormFieldEntry,
  }

  export enum CGScreenUpdateOperation {
    byteSwapped,
    scalarCount,
    refresh,
    move,
    reducedDirtyRectangleCount,
  }

  export enum CGWindowImageOption {
    byteSwapped,
    scalarCount,
    boundsIgnoreFraming,
    shouldBeOpaque,
    onlyShadows,
    bestResolution,
    nominalResolution,
  }

  export enum CGWindowListOption {
    magnitude,
    byteSwapped,
    scalarCount,
    optionAll,
    optionOnScreenOnly,
    optionOnScreenAboveWindow,
    optionOnScreenBelowWindow,
    optionIncludingWindow,
    excludeDesktopElements,
  }

  export enum CKContainer_Application_Permissions {
    userDiscoverability,
  }

  export enum CMSampleBuffer {
    audioBufferListAssure16ByteAlignment,
  }

  export enum CMTimeFlags {
    magnitude,
    byteSwapped,
    scalarCount,
    valid,
    hasBeenRounded,
    positiveInfinity,
    negativeInfinity,
    indefinite,
    impliedValueFlagsMask,
  }

  export enum Character {
    request,
    session,
    ascii,
    nextstep,
    japaneseEUC,
    utf8,
    isoLatin1,
    symbol,
    nonLossyASCII,
    shiftJIS,
    isoLatin2,
    unicode,
    windowsCP1251,
    windowsCP1252,
    windowsCP1253,
    windowsCP1254,
    windowsCP1250,
    iso2022JP,
    macOSRoman,
    utf16,
    utf16BigEndian,
    utf16LittleEndian,
    utf32,
    utf32BigEndian,
    utf32LittleEndian,
  }

  export enum Data {
    video,
    audio,
    muxed,
    text,
    closedCaption,
    subtitle,
    timeCode,
    metadata,
    linearPCM,
    ac3,
    iec60958AC3,
    appleIMA4,
    mpeg4AAC,
    mpeg4CELP,
    mpeg4HVXC,
    mpeg4TwinVQ,
    mace3,
    mace6,
    uLaw,
    aLaw,
    qDesign,
    qDesign2,
    qualcomm,
    mpegLayer1,
    mpegLayer2,
    mpegLayer3,
    midiStream,
    parameterValueStream,
    appleLossless,
    mpeg4AAC_HE,
    mpeg4AAC_LD,
    mpeg4AAC_ELD,
    mpeg4AAC_ELD_SBR,
    mpeg4AAC_ELD_V2,
    mpeg4AAC_HE_V2,
    mpeg4AAC_Spatial,
    mpegD_USAC,
    amr,
    amr_WB,
    audible,
    iLBC,
    dviIntelIMA,
    microsoftGSM,
    aes3,
    enhancedAC3,
    flac,
    opus,
    aacLCProtected,
    aacAudibleProtected,
    pixelFormat_32ARGB,
    pixelFormat_32BGRA,
    pixelFormat_24RGB,
    pixelFormat_16BE555,
    pixelFormat_16BE565,
    pixelFormat_16LE555,
    pixelFormat_16LE565,
    pixelFormat_16LE5551,
    pixelFormat_422YpCbCr8,
    pixelFormat_422YpCbCr8_yuvs,
    pixelFormat_444YpCbCr8,
    pixelFormat_4444YpCbCrA8,
    pixelFormat_422YpCbCr16,
    pixelFormat_422YpCbCr10,
    pixelFormat_444YpCbCr10,
    pixelFormat_8IndexedGray_WhiteIsZero,
    animation,
    cinepak,
    jpeg,
    jpeg_OpenDML,
    sorensonVideo,
    sorensonVideo3,
    h263,
    h264,
    hevc,
    hevcWithAlpha,
    mpeg4Video,
    mpeg2Video,
    mpeg1Video,
    dvcNTSC,
    dvcPAL,
    dvcProPAL,
    dvcPro50NTSC,
    dvcPro50PAL,
    dvcPROHD720p60,
    dvcPROHD720p50,
    dvcPROHD1080i60,
    dvcPROHD1080i50,
    dvcPROHD1080p30,
    dvcPROHD1080p25,
    proRes4444XQ,
    proRes4444,
    proRes422HQ,
    proRes422,
    proRes422LT,
    proRes422Proxy,
    proResRAW,
    proResRAWHQ,
    mpeg1System,
    mpeg2Transport,
    mpeg2Program,
    dv,
    cea608,
    cea708,
    atsc,
    qt,
    mobile3GPP,
    webVTT,
    timeCode32,
    timeCode64,
    counter32,
    counter64,
    icy,
    id3,
    boxed,
    emsg,
    streamBasicDescription,
    magicCookie,
    channelLayout,
    extensions,
    all,
    startIndex,
    endIndex,
  }

  export enum Int {
    byteSwapped,
    scalarCount,
  }

  export enum NSBinarySearchingOptions {
    firstEqual,
    lastEqual,
    insertionIndex,
  }

  export enum NSDirectionalRectEdge {
    top,
    leading,
    bottom,
    trailing,
    all,
  }

  export enum NSDragOperation {
    copy,
    link,
    generic,
    private,
    move,
    delete,
    every,
    all_Obsolete,
    all,
  }

  export enum NSDraggingItemEnumerationOptions {
    concurrent,
    clearNonenumeratedImages,
  }

  export enum NSEnumerationOptions {
    concurrent,
    reverse,
  }

  export enum NSFontCollectionOptions {
    applicationOnlyMask,
  }

  export enum NSFontTraitMask {
    byteSwapped,
    scalarCount,
    italicFontMask,
    boldFontMask,
    unboldFontMask,
    nonStandardCharacterSetFontMask,
    narrowFontMask,
    expandedFontMask,
    condensedFontMask,
    smallCapsFontMask,
    posterFontMask,
    compressedFontMask,
    fixedPitchFontMask,
    unitalicFontMask,
  }

  export enum NSItemProviderFileOptions {
    openInPlace,
  }

  export enum NSKeyValueObservingOptions {
    new,
    old,
    initial,
    prior,
  }

  export enum NSOrderedCollectionDifferenceCalculationOptions {
    magnitude,
    timeInterval,
    hashValue,
    omitInsertedObjects,
    omitRemovedObjects,
    inferMoves,
  }

  export enum NSSortOptions {
    magnitude,
    byteSwapped,
    scalarCount,
    concurrent,
    stable,
  }

  export enum NSSpringLoadingOptions {
    disabled,
    enabled,
    continuousActivation,
    noHover,
  }

  export enum NSTextStorageEditActions {
    editedAttributes,
    editedCharacters,
  }

  export enum NSTypesetterControlCharacterAction {
    magnitude,
    byteSwapped,
    scalarCount,
    zeroAdvancementAction,
    whitespaceAction,
    horizontalTabAction,
    lineBreakAction,
    paragraphBreakAction,
    containerBreakAction,
  }

  export enum NSUnderlineStyle {
    single,
    thick,
    double,
    patternDot,
    patternDash,
    patternDashDot,
    patternDashDotDot,
    byWord,
  }

  export enum UInt {
    magnitude,
    byteSwapped,
    scalarCount,
    hashValue,
    bitWidth,
    leadingZeroBitCount,
    trailingZeroBitCount,
    nonzeroBitCount,
    count,
    startIndex,
    endIndex,
    indices,
    words,
  }

  export enum UInt8 {
    regions,
    startIndex,
    endIndex,
    indices,
    hashValue,
    autoupdatingCurrent,
    current,
  }

  export enum AVAssetReferenceRestrictions {
    ForbidNone = 0,
    ForbidRemoteReferenceToLocal = 1,
    ForbidLocalReferenceToRemote = 2,
    ForbidCrossSiteReference = 4,
    ForbidLocalReferenceToLocal = 8,
    ForbidAll = 65535,
    DefaultPolicy = 2
  }

  export enum AVAudio3DMixingPointSourceInHeadMode {
    Mono = 0,
    Bypass = 1
  }

  export enum AVAudio3DMixingRenderingAlgorithm {
    EqualPowerPanning = 0,
    SphericalHead = 1,
    HRTF = 2,
    SoundField = 3,
    StereoPassThrough = 5,
    HRTFHQ = 6,
    Auto = 7
  }

  export enum AVAudio3DMixingSourceMode {
    SpatializeIfMono = 0,
    Bypass = 1,
    PointSource = 2,
    AmbienceBed = 3
  }

  export enum AVAudioCommonFormat {
    OtherFormat = 0,
    PCMFormatFloat32 = 1,
    PCMFormatFloat64 = 2,
    PCMFormatInt16 = 3,
    PCMFormatInt32 = 4
  }

  export enum AVAudioConverterInputStatus {
    HaveData = 0,
    NoDataNow = 1,
    EndOfStream = 2
  }

  export enum AVAudioConverterOutputStatus {
    HaveData = 0,
    InputRanDry = 1,
    EndOfStream = 2,
    Error = 3
  }

  export enum AVAudioConverterPrimeMethod {
    Pre = 0,
    Normal = 1,
    None = 2
  }

  export enum AVAudioEngineManualRenderingError {
    InvalidMode = -80800,
    Initialized = -80801,
    NotRunning = -80802
  }

  export enum AVAudioEngineManualRenderingMode {
    Offline = 0,
    Realtime = 1
  }

  export enum AVAudioEngineManualRenderingStatus {
    Error = -1,
    Success = 0,
    InsufficientDataFromInputNode = 1,
    CannotDoInCurrentContext = 2
  }

  export enum AVAudioEnvironmentDistanceAttenuationModel {
    Exponential = 1,
    Inverse = 2,
    Linear = 3
  }

  export enum AVAudioEnvironmentOutputType {
    Auto = 0,
    Headphones = 1,
    BuiltInSpeakers = 2,
    ExternalSpeakers = 3
  }

  export enum AVAudioPlayerNodeBufferOptions {
    Loops = 1,
    Interrupts = 2,
    InterruptsAtLoop = 4
  }

  export enum AVAudioPlayerNodeCompletionCallbackType {
    DataConsumed = 0,
    DataRendered = 1,
    DataPlayedBack = 2
  }

  export enum AVAudioQuality {
    Min = 0,
    Low = 32,
    Medium = 64,
    High = 96,
    Max = 127
  }

  export enum AVAudioSessionActivationOptions {
    None = 0
  }

  export enum AVAudioUnitDistortionPreset {
    DrumsBitBrush = 0,
    DrumsBufferBeats = 1,
    DrumsLoFi = 2,
    MultiBrokenSpeaker = 3,
    MultiCellphoneConcert = 4,
    MultiDecimated1 = 5,
    MultiDecimated2 = 6,
    MultiDecimated3 = 7,
    MultiDecimated4 = 8,
    MultiDistortedFunk = 9,
    MultiDistortedCubed = 10,
    MultiDistortedSquared = 11,
    MultiEcho1 = 12,
    MultiEcho2 = 13,
    MultiEchoTight1 = 14,
    MultiEchoTight2 = 15,
    MultiEverythingIsBroken = 16,
    SpeechAlienChatter = 17,
    SpeechCosmicInterference = 18,
    SpeechGoldenPi = 19,
    SpeechRadioTower = 20,
    SpeechWaves = 21
  }

  export enum AVAudioUnitEQFilterType {
    Parametric = 0,
    LowPass = 1,
    HighPass = 2,
    ResonantLowPass = 3,
    ResonantHighPass = 4,
    BandPass = 5,
    BandStop = 6,
    LowShelf = 7,
    HighShelf = 8,
    ResonantLowShelf = 9,
    ResonantHighShelf = 10
  }

  export enum AVAudioUnitReverbPreset {
    SmallRoom = 0,
    MediumRoom = 1,
    LargeRoom = 2,
    MediumHall = 3,
    LargeHall = 4,
    Plate = 5,
    MediumChamber = 6,
    LargeChamber = 7,
    Cathedral = 8,
    LargeRoom2 = 9,
    MediumHall2 = 10,
    MediumHall3 = 11,
    LargeHall2 = 12
  }

  export enum AVAuthorizationStatus {
    NotDetermined = 0,
    Restricted = 1,
    Denied = 2,
    Authorized = 3
  }

  export enum AVCaptureColorSpace {
    sRGB = 0,
    P3_D65 = 1
  }

  export enum AVCaptureVideoOrientation {
    Portrait = 1,
    PortraitUpsideDown = 2,
    LandscapeRight = 3,
    LandscapeLeft = 4
  }

  export enum AVContentAuthorizationStatus {
    Unknown = 0,
    Completed = 1,
    Cancelled = 2,
    TimedOut = 3,
    Busy = 4,
    NotAvailable = 5,
    NotPossible = 6
  }

  export enum AVError {
    Unknown = -11800,
    OutOfMemory = -11801,
    SessionNotRunning = -11803,
    DeviceAlreadyUsedByAnotherSession = -11804,
    NoDataCaptured = -11805,
    SessionConfigurationChanged = -11806,
    DiskFull = -11807,
    DeviceWasDisconnected = -11808,
    MediaChanged = -11809,
    MaximumDurationReached = -11810,
    MaximumFileSizeReached = -11811,
    MediaDiscontinuity = -11812,
    MaximumNumberOfSamplesForFileFormatReached = -11813,
    DeviceNotConnected = -11814,
    DeviceInUseByAnotherApplication = -11815,
    DeviceLockedForConfigurationByAnotherProcess = -11817,
    ExportFailed = -11820,
    DecodeFailed = -11821,
    InvalidSourceMedia = -11822,
    FileAlreadyExists = -11823,
    CompositionTrackSegmentsNotContiguous = -11824,
    InvalidCompositionTrackSegmentDuration = -11825,
    InvalidCompositionTrackSegmentSourceStartTime = -11826,
    InvalidCompositionTrackSegmentSourceDuration = -11827,
    FileFormatNotRecognized = -11828,
    FileFailedToParse = -11829,
    MaximumStillImageCaptureRequestsExceeded = -11830,
    ContentIsProtected = -11831,
    NoImageAtTime = -11832,
    DecoderNotFound = -11833,
    EncoderNotFound = -11834,
    ContentIsNotAuthorized = -11835,
    ApplicationIsNotAuthorized = -11836,
    OperationNotSupportedForAsset = -11838,
    DecoderTemporarilyUnavailable = -11839,
    EncoderTemporarilyUnavailable = -11840,
    InvalidVideoComposition = -11841,
    ReferenceForbiddenByReferencePolicy = -11842,
    InvalidOutputURLPathExtension = -11843,
    ScreenCaptureFailed = -11844,
    DisplayWasDisabled = -11845,
    TorchLevelUnavailable = -11846,
    IncompatibleAsset = -11848,
    FailedToLoadMediaData = -11849,
    ServerIncorrectlyConfigured = -11850,
    ApplicationIsNotAuthorizedToUseDevice = -11852,
    FailedToParse = -11853,
    FileTypeDoesNotSupportSampleReferences = -11854,
    UndecodableMediaData = -11855,
    AirPlayControllerRequiresInternet = -11856,
    AirPlayReceiverRequiresInternet = -11857,
    VideoCompositorFailed = -11858,
    CreateContentKeyRequestFailed = -11860,
    UnsupportedOutputSettings = -11861,
    OperationNotAllowed = -11862,
    ContentIsUnavailable = -11863,
    FormatUnsupported = -11864,
    MalformedDepth = -11865,
    ContentNotUpdated = -11866,
    NoLongerPlayable = -11867,
    NoCompatibleAlternatesForExternalDisplay = -11868,
    NoSourceTrack = -11869,
    ExternalPlaybackNotSupportedForAsset = -11870,
    OperationNotSupportedForPreset = -11871,
    SessionHardwareCostOverage = -11872,
    UnsupportedDeviceActiveFormat = -11873
  }

  export enum AVKeyValueStatus {
    Unknown = 0,
    Loading = 1,
    Loaded = 2,
    Failed = 3,
    Cancelled = 4
  }

  export enum AVMovieWritingOptions {
    AddMovieHeaderToDestination = 0,
    TruncateDestinationToMovieHeaderOnly = 1
  }

  export enum AVMusicSequenceLoadOptions {
    SMF_PreserveTracks = 0,
    SMF_ChannelsToTracks = 1
  }

  export enum AVMusicTrackLoopCount {
    Forever = -1
  }

  export enum AVQueuedSampleBufferRenderingStatus {
    Unknown = 0,
    Rendering = 1,
    Failed = 2
  }

  export enum AVSpeechBoundary {
    Immediate = 0,
    Word = 1
  }

  export enum AVSpeechSynthesisVoiceGender {
    Unspecified = 0,
    Male = 1,
    Female = 2
  }

  export enum AVSpeechSynthesisVoiceQuality {
    Default = 1,
    Enhanced = 2
  }

  export enum AVVideoFieldMode {
    Both = 0,
    TopOnly = 1,
    BottomOnly = 2,
    Deinterlace = 3
  }

  export enum AVCaptureViewControlsStyle {
    Inline = 0,
    Floating = 1,
    InlineDeviceSelection = 2,
    Default = 0
  }

  export enum AVPlayerViewControlsStyle {
    None = 0,
    Inline = 1,
    Floating = 2,
    Minimal = 3,
    Default = 1
  }

  export enum AVPlayerViewTrimResult {
    OKButton = 0,
    CancelButton = 1
  }

  export enum AVRoutePickerViewButtonState {
    Normal = 0,
    NormalHighlighted = 1,
    Active = 2,
    ActiveHighlighted = 3
  }

  export enum NSAccessibilityPriorityLevel {
    Low = 10,
    Medium = 50,
    High = 90
  }

  export enum NSAnimationEffect {
    DisappearingItemDefault = 0,
    Poof = 10
  }

  export enum NSBorderType {
    NoBorder = 0,
    LineBorder = 1,
    BezelBorder = 2,
    GrooveBorder = 3
  }

  export enum NSCharacterCollection {
    IdentityMappingCharacterCollection = 0,
    AdobeCNS1CharacterCollection = 1,
    AdobeGB1CharacterCollection = 2,
    AdobeJapan1CharacterCollection = 3,
    AdobeJapan2CharacterCollection = 4,
    AdobeKorea1CharacterCollection = 5
  }

  export enum NSCollectionElementCategory {
    Item = 0,
    SupplementaryView = 1,
    DecorationView = 2,
    InterItemGap = 3
  }

  export enum NSCollectionLayoutSectionOrthogonalScrollingBehavior {
    None = 0,
    Continuous = 1,
    ContinuousGroupLeadingBoundary = 2,
    Paging = 3,
    GroupPaging = 4,
    GroupPagingCentered = 5
  }

  export enum NSColorRenderingIntent {
    Default = 0,
    AbsoluteColorimetric = 1,
    RelativeColorimetric = 2,
    Perceptual = 3,
    Saturation = 4
  }

  export enum NSCompositingOperation {
    Clear = 0,
    Copy = 1,
    SourceOver = 2,
    SourceIn = 3,
    SourceOut = 4,
    SourceAtop = 5,
    DestinationOver = 6,
    DestinationIn = 7,
    DestinationOut = 8,
    DestinationAtop = 9,
    XOR = 10,
    PlusDarker = 11,
    Highlight = 12,
    PlusLighter = 13,
    Multiply = 14,
    Screen = 15,
    Overlay = 16,
    Darken = 17,
    Lighten = 18,
    ColorDodge = 19,
    ColorBurn = 20,
    SoftLight = 21,
    HardLight = 22,
    Difference = 23,
    Exclusion = 24,
    Hue = 25,
    Saturation = 26,
    Color = 27,
    Luminosity = 28
  }

  export enum NSControlTint {
    DefaultControlTint = 0,
    BlueControlTint = 1,
    GraphiteControlTint = 6,
    ClearControlTint = 7
  }

  export enum NSDirectionalRectEdge {
    None = 0,
    Top = 1,
    Leading = 2,
    Bottom = 4,
    Trailing = 8,
    All = 15
  }

  export enum NSDisplayGamut {
    SRGB = 1,
    P3 = 2
  }

  export enum NSDragOperation {
    None = 0,
    Copy = 1,
    Link = 2,
    Generic = 4,
    Private = 8,
    Move = 16,
    Delete = 32,
    Every = -1,
    All_Obsolete = 15,
    All = 15
  }

  export enum NSDraggingContext {
    OutsideApplication = 0,
    WithinApplication = 1
  }

  export enum NSDraggingFormation {
    Default = 0,
    None = 1,
    Pile = 2,
    List = 3,
    Stack = 4
  }

  export enum NSDraggingItemEnumerationOptions {
    Concurrent = 1,
    ClearNonenumeratedImages = 65536
  }

  export enum NSFindPanelAction {
    ShowFindPanel = 1,
    Next = 2,
    Previous = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetFindString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10
  }

  export enum NSFindPanelSubstringMatchType {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3
  }

  export enum NSFocusRingPlacement {
    Only = 0,
    Below = 1,
    Above = 2
  }

  export enum NSFocusRingType {
    Default = 0,
    None = 1,
    Exterior = 2
  }

  export enum NSFontAction {
    NoFontChangeAction = 0,
    ViaPanelFontAction = 1,
    AddTraitFontAction = 2,
    SizeUpFontAction = 3,
    SizeDownFontAction = 4,
    HeavierFontAction = 5,
    LighterFontAction = 6,
    RemoveTraitFontAction = 7
  }

  export enum NSFontCollectionOptions {
    ApplicationOnlyMask = 1
  }

  export enum NSFontRenderingMode {
    DefaultRenderingMode = 0,
    AntialiasedRenderingMode = 1,
    IntegerAdvancementsRenderingMode = 2,
    AntialiasedIntegerAdvancementsRenderingMode = 3
  }

  export enum NSFontTraitMask {
    ItalicFontMask = 1,
    BoldFontMask = 2,
    UnboldFontMask = 4,
    NonStandardCharacterSetFontMask = 8,
    NarrowFontMask = 16,
    ExpandedFontMask = 32,
    CondensedFontMask = 64,
    SmallCapsFontMask = 128,
    PosterFontMask = 256,
    CompressedFontMask = 512,
    FixedPitchFontMask = 1024,
    UnitalicFontMask = 16777216
  }

  export enum NSImageAlignment {
    Center = 0,
    Top = 1,
    TopLeft = 2,
    TopRight = 3,
    Left = 4,
    Bottom = 5,
    BottomLeft = 6,
    BottomRight = 7,
    Right = 8
  }

  export enum NSImageInterpolation {
    Default = 0,
    None = 1,
    Low = 2,
    Medium = 4,
    High = 3
  }

  export enum NSImageScaling {
    ImageScaleProportionallyDown = 0,
    ImageScaleAxesIndependently = 1,
    ImageScaleNone = 2,
    ImageScaleProportionallyUpOrDown = 3,
    ScaleProportionally = 0,
    ScaleToFit = 1,
    ScaleNone = 2
  }

  export enum NSLineBreakMode {
    ByWordWrapping = 0,
    ByCharWrapping = 1,
    ByClipping = 2,
    ByTruncatingHead = 3,
    ByTruncatingTail = 4,
    ByTruncatingMiddle = 5
  }

  export enum NSLineMovementDirection {
    DoesntMove = 0,
    MovesLeft = 1,
    MovesRight = 2,
    MovesDown = 3,
    MovesUp = 4
  }

  export enum NSLineSweepDirection {
    Left = 0,
    Right = 1,
    Down = 2,
    Up = 3
  }

  export enum NSRectAlignment {
    None = 0,
    Top = 1,
    TopLeading = 2,
    Leading = 3,
    BottomLeading = 4,
    Bottom = 5,
    BottomTrailing = 6,
    Trailing = 7,
    TopTrailing = 8
  }

  export enum NSSelectionAffinity {
    Upstream = 0,
    Downstream = 1
  }

  export enum NSSelectionGranularity {
    ByCharacter = 0,
    ByWord = 1,
    ByParagraph = 2
  }

  export enum NSSpringLoadingHighlight {
    None = 0,
    Standard = 1,
    Emphasized = 2
  }

  export enum NSSpringLoadingOptions {
    Disabled = 0,
    Enabled = 1,
    ContinuousActivation = 2,
    NoHover = 8
  }

  export enum NSTextAlignment {
    Left = 0,
    Right = 1,
    Center = 2,
    Justified = 3,
    Natural = 4
  }

  export enum NSTextInputTraitType {
    Default = 0,
    No = 1,
    Yes = 2
  }

  export enum NSTextMovement {
    Return = 16,
    Tab = 17,
    Backtab = 18,
    Left = 19,
    Right = 20,
    Up = 21,
    Down = 22,
    Cancel = 23,
    Other = 0
  }

  export enum NSTextScalingType {
    Standard = 0,
    iOS = 1
  }

  export enum NSTextStorageEditActions {
    EditedAttributes = 1,
    EditedCharacters = 2
  }

  export enum NSTypesetterControlCharacterAction {
    ZeroAdvancementAction = 1,
    WhitespaceAction = 2,
    HorizontalTabAction = 4,
    LineBreakAction = 8,
    ParagraphBreakAction = 16,
    ContainerBreakAction = 32
  }

  export enum NSUnderlineStyle {
    None = 0,
    Single = 1,
    Thick = 2,
    Double = 9,
    PatternSolid = 0,
    PatternDot = 256,
    PatternDash = 512,
    PatternDashDot = 768,
    PatternDashDotDot = 1024,
    ByWord = 32768
  }

  export enum NSUserInterfaceLayoutDirection {
    LeftToRight = 0,
    RightToLeft = 1
  }

  export enum NSUserInterfaceLayoutOrientation {
    Horizontal = 0,
    Vertical = 1
  }

  export enum NSWritingDirection {
    Natural = -1,
    LeftToRight = 0,
    RightToLeft = 1
  }

  export enum NSWritingDirectionFormatType {
    Embedding = 0,
    Override = 2
  }

  export enum NSAttributeType {
    UndefinedAttributeType = 0,
    Integer16AttributeType = 100,
    Integer32AttributeType = 200,
    Integer64AttributeType = 300,
    DecimalAttributeType = 400,
    DoubleAttributeType = 500,
    FloatAttributeType = 600,
    StringAttributeType = 700,
    BooleanAttributeType = 800,
    DateAttributeType = 900,
    BinaryDataAttributeType = 1000,
    UUIDAttributeType = 1100,
    URIAttributeType = 1200,
    TransformableAttributeType = 1800,
    ObjectIDAttributeType = 2000
  }

  export enum NSBatchDeleteRequestResultType {
    ResultTypeStatusOnly = 0,
    ResultTypeObjectIDs = 1,
    ResultTypeCount = 2
  }

  export enum NSBatchInsertRequestResultType {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2
  }

  export enum NSBatchUpdateRequestResultType {
    StatusOnlyResultType = 0,
    UpdatedObjectIDsResultType = 1,
    UpdatedObjectsCountResultType = 2
  }

  export enum NSDeleteRule {
    NoActionDeleteRule = 0,
    NullifyDeleteRule = 1,
    CascadeDeleteRule = 2,
    DenyDeleteRule = 3
  }

  export enum NSEntityMappingType {
    UndefinedEntityMappingType = 0,
    CustomEntityMappingType = 1,
    AddEntityMappingType = 2,
    RemoveEntityMappingType = 3,
    CopyEntityMappingType = 4,
    TransformEntityMappingType = 5
  }

  export enum NSFetchIndexElementType {
    Binary = 0,
    RTree = 1
  }

  export enum NSFetchRequestResultType {
    ManagedObjectResultType = 0,
    ManagedObjectIDResultType = 1,
    DictionaryResultType = 2,
    CountResultType = 4
  }

  export enum NSFetchedResultsChangeType {
    Insert = 1,
    Delete = 2,
    Move = 3,
    Update = 4
  }

  export enum NSManagedObjectContextConcurrencyType {
    ConfinementConcurrencyType = 0,
    PrivateQueueConcurrencyType = 1,
    MainQueueConcurrencyType = 2
  }

  export enum NSMergePolicyType {
    ErrorMergePolicyType = 0,
    MergeByPropertyStoreTrumpMergePolicyType = 1,
    MergeByPropertyObjectTrumpMergePolicyType = 2,
    OverwriteMergePolicyType = 3,
    RollbackMergePolicyType = 4
  }

  export enum NSPersistentCloudKitContainerSchemaInitializationOptions {
    None = 0,
    DryRun = 2,
    PrintSchema = 4
  }

  export enum NSPersistentHistoryChangeType {
    Insert = 0,
    Update = 1,
    Delete = 2
  }

  export enum NSPersistentHistoryResultType {
    StatusOnly = 0,
    ObjectIDs = 1,
    Count = 2,
    TransactionsOnly = 3,
    ChangesOnly = 4,
    TransactionsAndChanges = 5
  }

  export enum NSPersistentStoreRequestType {
    FetchRequestType = 1,
    SaveRequestType = 2,
    BatchInsertRequestType = 5,
    BatchUpdateRequestType = 6,
    BatchDeleteRequestType = 7
  }

  export enum NSSnapshotEventType {
    UndoInsertion = 2,
    UndoDeletion = 4,
    UndoUpdate = 8,
    Rollback = 16,
    Refresh = 32,
    MergePolicy = 64
  }

  export enum CFCalendarUnit {
    kCFCalendarUnitEra = 2,
    kCFCalendarUnitYear = 4,
    kCFCalendarUnitMonth = 8,
    kCFCalendarUnitDay = 16,
    kCFCalendarUnitHour = 32,
    kCFCalendarUnitMinute = 64,
    kCFCalendarUnitSecond = 128,
    kCFCalendarUnitWeek = 256,
    kCFCalendarUnitWeekday = 512,
    kCFCalendarUnitWeekdayOrdinal = 1024,
    kCFCalendarUnitQuarter = 2048,
    kCFCalendarUnitWeekOfMonth = 4096,
    kCFCalendarUnitWeekOfYear = 8192,
    kCFCalendarUnitYearForWeekOfYear = 16384
  }

  export enum CFCharacterSetPredefinedSet {
    kCFCharacterSetControl = 1,
    kCFCharacterSetWhitespace = 2,
    kCFCharacterSetWhitespaceAndNewline = 3,
    kCFCharacterSetDecimalDigit = 4,
    kCFCharacterSetLetter = 5,
    kCFCharacterSetLowercaseLetter = 6,
    kCFCharacterSetUppercaseLetter = 7,
    kCFCharacterSetNonBase = 8,
    kCFCharacterSetDecomposable = 9,
    kCFCharacterSetAlphaNumeric = 10,
    kCFCharacterSetPunctuation = 11,
    kCFCharacterSetCapitalizedLetter = 13,
    kCFCharacterSetSymbol = 14,
    kCFCharacterSetNewline = 15,
    kCFCharacterSetIllegal = 12
  }

  export enum CFComparisonResult {
    kCFCompareLessThan = -1,
    kCFCompareEqualTo = 0,
    kCFCompareGreaterThan = 1
  }

  export enum CFDataSearchFlags {
    kCFDataSearchBackwards = 1,
    kCFDataSearchAnchored = 2
  }

  export enum CFDateFormatterStyle {
    kCFDateFormatterNoStyle = 0,
    kCFDateFormatterShortStyle = 1,
    kCFDateFormatterMediumStyle = 2,
    kCFDateFormatterLongStyle = 3,
    kCFDateFormatterFullStyle = 4
  }

  export enum CFFileSecurityClearOptions {
    kCFFileSecurityClearOwner = 1,
    kCFFileSecurityClearGroup = 2,
    kCFFileSecurityClearMode = 4,
    kCFFileSecurityClearOwnerUUID = 8,
    kCFFileSecurityClearGroupUUID = 16,
    kCFFileSecurityClearAccessControlList = 32
  }

  export enum CFGregorianUnitFlags {
    kCFGregorianUnitsYears = 1,
    kCFGregorianUnitsMonths = 2,
    kCFGregorianUnitsDays = 4,
    kCFGregorianUnitsHours = 8,
    kCFGregorianUnitsMinutes = 16,
    kCFGregorianUnitsSeconds = 32,
    kCFGregorianAllUnits = 16777215
  }

  export enum CFISO8601DateFormatOptions {
    kCFISO8601DateFormatWithYear = 1,
    kCFISO8601DateFormatWithMonth = 2,
    kCFISO8601DateFormatWithWeekOfYear = 4,
    kCFISO8601DateFormatWithDay = 16,
    kCFISO8601DateFormatWithTime = 32,
    kCFISO8601DateFormatWithTimeZone = 64,
    kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128,
    kCFISO8601DateFormatWithDashSeparatorInDate = 256,
    kCFISO8601DateFormatWithColonSeparatorInTime = 512,
    kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024,
    kCFISO8601DateFormatWithFractionalSeconds = 2048,
    kCFISO8601DateFormatWithFullDate = 275,
    kCFISO8601DateFormatWithFullTime = 1632,
    kCFISO8601DateFormatWithInternetDateTime = 1907
  }

  export enum CFLocaleLanguageDirection {
    kCFLocaleLanguageDirectionUnknown = 0,
    kCFLocaleLanguageDirectionLeftToRight = 1,
    kCFLocaleLanguageDirectionRightToLeft = 2,
    kCFLocaleLanguageDirectionTopToBottom = 3,
    kCFLocaleLanguageDirectionBottomToTop = 4
  }

  export enum CFNotificationSuspensionBehavior {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4
  }

  export enum CFNumberFormatterOptionFlags {
    kCFNumberFormatterParseIntegersOnly = 1
  }

  export enum CFNumberFormatterPadPosition {
    kCFNumberFormatterPadBeforePrefix = 0,
    kCFNumberFormatterPadAfterPrefix = 1,
    kCFNumberFormatterPadBeforeSuffix = 2,
    kCFNumberFormatterPadAfterSuffix = 3
  }

  export enum CFNumberFormatterRoundingMode {
    kCFNumberFormatterRoundCeiling = 0,
    kCFNumberFormatterRoundFloor = 1,
    kCFNumberFormatterRoundDown = 2,
    kCFNumberFormatterRoundUp = 3,
    kCFNumberFormatterRoundHalfEven = 4,
    kCFNumberFormatterRoundHalfDown = 5,
    kCFNumberFormatterRoundHalfUp = 6
  }

  export enum CFNumberFormatterStyle {
    kCFNumberFormatterNoStyle = 0,
    kCFNumberFormatterDecimalStyle = 1,
    kCFNumberFormatterCurrencyStyle = 2,
    kCFNumberFormatterPercentStyle = 3,
    kCFNumberFormatterScientificStyle = 4,
    kCFNumberFormatterSpellOutStyle = 5,
    kCFNumberFormatterOrdinalStyle = 6,
    kCFNumberFormatterCurrencyISOCodeStyle = 8,
    kCFNumberFormatterCurrencyPluralStyle = 9,
    kCFNumberFormatterCurrencyAccountingStyle = 10
  }

  export enum CFNumberType {
    kCFNumberSInt8Type = 1,
    kCFNumberSInt16Type = 2,
    kCFNumberSInt32Type = 3,
    kCFNumberSInt64Type = 4,
    kCFNumberFloat32Type = 5,
    kCFNumberFloat64Type = 6,
    kCFNumberCharType = 7,
    kCFNumberShortType = 8,
    kCFNumberIntType = 9,
    kCFNumberLongType = 10,
    kCFNumberLongLongType = 11,
    kCFNumberFloatType = 12,
    kCFNumberDoubleType = 13,
    kCFNumberCFIndexType = 14,
    kCFNumberNSIntegerType = 15,
    kCFNumberCGFloatType = 16,
    kCFNumberMaxType = 16
  }

  export enum CFPropertyListFormat {
    kCFPropertyListOpenStepFormat = 1,
    kCFPropertyListXMLFormat_v1_0 = 100,
    kCFPropertyListBinaryFormat_v1_0 = 200
  }

  export enum CFPropertyListMutabilityOptions {
    kCFPropertyListImmutable = 0,
    kCFPropertyListMutableContainers = 1,
    kCFPropertyListMutableContainersAndLeaves = 2
  }

  export enum CFRunLoopActivity {
    kCFRunLoopEntry = 1,
    kCFRunLoopBeforeTimers = 2,
    kCFRunLoopBeforeSources = 4,
    kCFRunLoopBeforeWaiting = 32,
    kCFRunLoopAfterWaiting = 64,
    kCFRunLoopExit = 128,
    kCFRunLoopAllActivities = 268435455
  }

  export enum CFRunLoopRunResult {
    kCFRunLoopRunFinished = 1,
    kCFRunLoopRunStopped = 2,
    kCFRunLoopRunTimedOut = 3,
    kCFRunLoopRunHandledSource = 4
  }

  export enum CFSocketCallBackType {
    kCFSocketNoCallBack = 0,
    kCFSocketReadCallBack = 1,
    kCFSocketAcceptCallBack = 2,
    kCFSocketDataCallBack = 3,
    kCFSocketConnectCallBack = 4,
    kCFSocketWriteCallBack = 8
  }

  export enum CFSocketError {
    kCFSocketSuccess = 0,
    kCFSocketError = -1,
    kCFSocketTimeout = -2
  }

  export enum CFStreamErrorDomain {
    kCFStreamErrorDomainCustom = -1,
    kCFStreamErrorDomainPOSIX = 1,
    kCFStreamErrorDomainMacOSStatus = 2
  }

  export enum CFStreamEventType {
    kCFStreamEventNone = 0,
    kCFStreamEventOpenCompleted = 1,
    kCFStreamEventHasBytesAvailable = 2,
    kCFStreamEventCanAcceptBytes = 4,
    kCFStreamEventErrorOccurred = 8,
    kCFStreamEventEndEncountered = 16
  }

  export enum CFStreamStatus {
    kCFStreamStatusNotOpen = 0,
    kCFStreamStatusOpening = 1,
    kCFStreamStatusOpen = 2,
    kCFStreamStatusReading = 3,
    kCFStreamStatusWriting = 4,
    kCFStreamStatusAtEnd = 5,
    kCFStreamStatusClosed = 6,
    kCFStreamStatusError = 7
  }

  export enum CFStringBuiltInEncodings {
    kCFStringEncodingMacRoman = 0,
    kCFStringEncodingWindowsLatin1 = 1280,
    kCFStringEncodingISOLatin1 = 513,
    kCFStringEncodingNextStepLatin = 2817,
    kCFStringEncodingASCII = 1536,
    kCFStringEncodingUnicode = 256,
    kCFStringEncodingUTF8 = 134217984,
    kCFStringEncodingNonLossyASCII = 3071,
    kCFStringEncodingUTF16 = 256,
    kCFStringEncodingUTF16BE = 268435712,
    kCFStringEncodingUTF16LE = 335544576,
    kCFStringEncodingUTF32 = 201326848,
    kCFStringEncodingUTF32BE = 402653440,
    kCFStringEncodingUTF32LE = 469762304
  }

  export enum CFStringCompareFlags {
    kCFCompareCaseInsensitive = 1,
    kCFCompareBackwards = 4,
    kCFCompareAnchored = 8,
    kCFCompareNonliteral = 16,
    kCFCompareLocalized = 32,
    kCFCompareNumerically = 64,
    kCFCompareDiacriticInsensitive = 128,
    kCFCompareWidthInsensitive = 256,
    kCFCompareForcedOrdering = 512
  }

  export enum CFStringEncodings {
    kCFStringEncodingMacJapanese = 1,
    kCFStringEncodingMacChineseTrad = 2,
    kCFStringEncodingMacKorean = 3,
    kCFStringEncodingMacArabic = 4,
    kCFStringEncodingMacHebrew = 5,
    kCFStringEncodingMacGreek = 6,
    kCFStringEncodingMacCyrillic = 7,
    kCFStringEncodingMacDevanagari = 9,
    kCFStringEncodingMacGurmukhi = 10,
    kCFStringEncodingMacGujarati = 11,
    kCFStringEncodingMacOriya = 12,
    kCFStringEncodingMacBengali = 13,
    kCFStringEncodingMacTamil = 14,
    kCFStringEncodingMacTelugu = 15,
    kCFStringEncodingMacKannada = 16,
    kCFStringEncodingMacMalayalam = 17,
    kCFStringEncodingMacSinhalese = 18,
    kCFStringEncodingMacBurmese = 19,
    kCFStringEncodingMacKhmer = 20,
    kCFStringEncodingMacThai = 21,
    kCFStringEncodingMacLaotian = 22,
    kCFStringEncodingMacGeorgian = 23,
    kCFStringEncodingMacArmenian = 24,
    kCFStringEncodingMacChineseSimp = 25,
    kCFStringEncodingMacTibetan = 26,
    kCFStringEncodingMacMongolian = 27,
    kCFStringEncodingMacEthiopic = 28,
    kCFStringEncodingMacCentralEurRoman = 29,
    kCFStringEncodingMacVietnamese = 30,
    kCFStringEncodingMacExtArabic = 31,
    kCFStringEncodingMacSymbol = 33,
    kCFStringEncodingMacDingbats = 34,
    kCFStringEncodingMacTurkish = 35,
    kCFStringEncodingMacCroatian = 36,
    kCFStringEncodingMacIcelandic = 37,
    kCFStringEncodingMacRomanian = 38,
    kCFStringEncodingMacCeltic = 39,
    kCFStringEncodingMacGaelic = 40,
    kCFStringEncodingMacFarsi = 140,
    kCFStringEncodingMacUkrainian = 152,
    kCFStringEncodingMacInuit = 236,
    kCFStringEncodingMacVT100 = 252,
    kCFStringEncodingMacHFS = 255,
    kCFStringEncodingISOLatin2 = 514,
    kCFStringEncodingISOLatin3 = 515,
    kCFStringEncodingISOLatin4 = 516,
    kCFStringEncodingISOLatinCyrillic = 517,
    kCFStringEncodingISOLatinArabic = 518,
    kCFStringEncodingISOLatinGreek = 519,
    kCFStringEncodingISOLatinHebrew = 520,
    kCFStringEncodingISOLatin5 = 521,
    kCFStringEncodingISOLatin6 = 522,
    kCFStringEncodingISOLatinThai = 523,
    kCFStringEncodingISOLatin7 = 525,
    kCFStringEncodingISOLatin8 = 526,
    kCFStringEncodingISOLatin9 = 527,
    kCFStringEncodingISOLatin10 = 528,
    kCFStringEncodingDOSLatinUS = 1024,
    kCFStringEncodingDOSGreek = 1029,
    kCFStringEncodingDOSBalticRim = 1030,
    kCFStringEncodingDOSLatin1 = 1040,
    kCFStringEncodingDOSGreek1 = 1041,
    kCFStringEncodingDOSLatin2 = 1042,
    kCFStringEncodingDOSCyrillic = 1043,
    kCFStringEncodingDOSTurkish = 1044,
    kCFStringEncodingDOSPortuguese = 1045,
    kCFStringEncodingDOSIcelandic = 1046,
    kCFStringEncodingDOSHebrew = 1047,
    kCFStringEncodingDOSCanadianFrench = 1048,
    kCFStringEncodingDOSArabic = 1049,
    kCFStringEncodingDOSNordic = 1050,
    kCFStringEncodingDOSRussian = 1051,
    kCFStringEncodingDOSGreek2 = 1052,
    kCFStringEncodingDOSThai = 1053,
    kCFStringEncodingDOSJapanese = 1056,
    kCFStringEncodingDOSChineseSimplif = 1057,
    kCFStringEncodingDOSKorean = 1058,
    kCFStringEncodingDOSChineseTrad = 1059,
    kCFStringEncodingWindowsLatin2 = 1281,
    kCFStringEncodingWindowsCyrillic = 1282,
    kCFStringEncodingWindowsGreek = 1283,
    kCFStringEncodingWindowsLatin5 = 1284,
    kCFStringEncodingWindowsHebrew = 1285,
    kCFStringEncodingWindowsArabic = 1286,
    kCFStringEncodingWindowsBalticRim = 1287,
    kCFStringEncodingWindowsVietnamese = 1288,
    kCFStringEncodingWindowsKoreanJohab = 1296,
    kCFStringEncodingANSEL = 1537,
    kCFStringEncodingJIS_X0201_76 = 1568,
    kCFStringEncodingJIS_X0208_83 = 1569,
    kCFStringEncodingJIS_X0208_90 = 1570,
    kCFStringEncodingJIS_X0212_90 = 1571,
    kCFStringEncodingJIS_C6226_78 = 1572,
    kCFStringEncodingShiftJIS_X0213 = 1576,
    kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577,
    kCFStringEncodingGB_2312_80 = 1584,
    kCFStringEncodingGBK_95 = 1585,
    kCFStringEncodingGB_18030_2000 = 1586,
    kCFStringEncodingKSC_5601_87 = 1600,
    kCFStringEncodingKSC_5601_92_Johab = 1601,
    kCFStringEncodingCNS_11643_92_P1 = 1617,
    kCFStringEncodingCNS_11643_92_P2 = 1618,
    kCFStringEncodingCNS_11643_92_P3 = 1619,
    kCFStringEncodingISO_2022_JP = 2080,
    kCFStringEncodingISO_2022_JP_2 = 2081,
    kCFStringEncodingISO_2022_JP_1 = 2082,
    kCFStringEncodingISO_2022_JP_3 = 2083,
    kCFStringEncodingISO_2022_CN = 2096,
    kCFStringEncodingISO_2022_CN_EXT = 2097,
    kCFStringEncodingISO_2022_KR = 2112,
    kCFStringEncodingEUC_JP = 2336,
    kCFStringEncodingEUC_CN = 2352,
    kCFStringEncodingEUC_TW = 2353,
    kCFStringEncodingEUC_KR = 2368,
    kCFStringEncodingShiftJIS = 2561,
    kCFStringEncodingKOI8_R = 2562,
    kCFStringEncodingBig5 = 2563,
    kCFStringEncodingMacRomanLatin1 = 2564,
    kCFStringEncodingHZ_GB_2312 = 2565,
    kCFStringEncodingBig5_HKSCS_1999 = 2566,
    kCFStringEncodingVISCII = 2567,
    kCFStringEncodingKOI8_U = 2568,
    kCFStringEncodingBig5_E = 2569,
    kCFStringEncodingNextStepJapanese = 2818,
    kCFStringEncodingEBCDIC_US = 3073,
    kCFStringEncodingEBCDIC_CP037 = 3074,
    kCFStringEncodingUTF7 = 67109120,
    kCFStringEncodingUTF7_IMAP = 2576,
    kCFStringEncodingShiftJIS_X0213_00 = 1576
  }

  export enum CFStringNormalizationForm {
    kCFStringNormalizationFormD = 0,
    kCFStringNormalizationFormKD = 1,
    kCFStringNormalizationFormC = 2,
    kCFStringNormalizationFormKC = 3
  }

  export enum CFStringTokenizerTokenType {
    kCFStringTokenizerTokenNone = 0,
    kCFStringTokenizerTokenNormal = 1,
    kCFStringTokenizerTokenHasSubTokensMask = 2,
    kCFStringTokenizerTokenHasDerivedSubTokensMask = 4,
    kCFStringTokenizerTokenHasHasNumbersMask = 8,
    kCFStringTokenizerTokenHasNonLettersMask = 16,
    kCFStringTokenizerTokenIsCJWordMask = 32
  }

  export enum CFTimeZoneNameStyle {
    kCFTimeZoneNameStyleStandard = 0,
    kCFTimeZoneNameStyleShortStandard = 1,
    kCFTimeZoneNameStyleDaylightSaving = 2,
    kCFTimeZoneNameStyleShortDaylightSaving = 3,
    kCFTimeZoneNameStyleGeneric = 4,
    kCFTimeZoneNameStyleShortGeneric = 5
  }

  export enum CFURLBookmarkCreationOptions {
    kCFURLBookmarkCreationMinimalBookmarkMask = 512,
    kCFURLBookmarkCreationSuitableForBookmarkFile = 1024,
    kCFURLBookmarkCreationWithSecurityScope = 2048,
    kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096,
    kCFURLBookmarkCreationPreferFileIDResolutionMask = 256
  }

  export enum CFURLBookmarkResolutionOptions {
    kCFURLBookmarkResolutionWithoutUIMask = 256,
    kCFURLBookmarkResolutionWithoutMountingMask = 512,
    kCFURLBookmarkResolutionWithSecurityScope = 1024,
    kCFBookmarkResolutionWithoutUIMask = 256,
    kCFBookmarkResolutionWithoutMountingMask = 512
  }

  export enum CFURLComponentType {
    kCFURLComponentScheme = 1,
    kCFURLComponentNetLocation = 2,
    kCFURLComponentPath = 3,
    kCFURLComponentResourceSpecifier = 4,
    kCFURLComponentUser = 5,
    kCFURLComponentPassword = 6,
    kCFURLComponentUserInfo = 7,
    kCFURLComponentHost = 8,
    kCFURLComponentPort = 9,
    kCFURLComponentParameterString = 10,
    kCFURLComponentQuery = 11,
    kCFURLComponentFragment = 12
  }

  export enum CFURLEnumeratorOptions {
    kCFURLEnumeratorDefaultBehavior = 0,
    kCFURLEnumeratorDescendRecursively = 1,
    kCFURLEnumeratorSkipInvisibles = 2,
    kCFURLEnumeratorGenerateFileReferenceURLs = 4,
    kCFURLEnumeratorSkipPackageContents = 8,
    kCFURLEnumeratorIncludeDirectoriesPreOrder = 16,
    kCFURLEnumeratorIncludeDirectoriesPostOrder = 32,
    kCFURLEnumeratorGenerateRelativePathURLs = 64
  }

  export enum CFURLEnumeratorResult {
    kCFURLEnumeratorSuccess = 1,
    kCFURLEnumeratorEnd = 2,
    kCFURLEnumeratorError = 3,
    kCFURLEnumeratorDirectoryPostOrderSuccess = 4
  }

  export enum CFURLPathStyle {
    kCFURLPOSIXPathStyle = 0,
    kCFURLHFSPathStyle = 1,
    kCFURLWindowsPathStyle = 2
  }

  export enum CFXMLEntityTypeCode {
    kCFXMLEntityTypeParameter = 0,
    kCFXMLEntityTypeParsedInternal = 1,
    kCFXMLEntityTypeParsedExternal = 2,
    kCFXMLEntityTypeUnparsed = 3,
    kCFXMLEntityTypeCharacter = 4
  }

  export enum CFXMLNodeTypeCode {
    kCFXMLNodeTypeDocument = 1,
    kCFXMLNodeTypeElement = 2,
    kCFXMLNodeTypeAttribute = 3,
    kCFXMLNodeTypeProcessingInstruction = 4,
    kCFXMLNodeTypeComment = 5,
    kCFXMLNodeTypeText = 6,
    kCFXMLNodeTypeCDATASection = 7,
    kCFXMLNodeTypeDocumentFragment = 8,
    kCFXMLNodeTypeEntity = 9,
    kCFXMLNodeTypeEntityReference = 10,
    kCFXMLNodeTypeDocumentType = 11,
    kCFXMLNodeTypeWhitespace = 12,
    kCFXMLNodeTypeNotation = 13,
    kCFXMLNodeTypeElementTypeDeclaration = 14,
    kCFXMLNodeTypeAttributeListDeclaration = 15
  }

  export enum CFXMLParserOptions {
    kCFXMLParserValidateDocument = 1,
    kCFXMLParserSkipMetaData = 2,
    kCFXMLParserReplacePhysicalEntities = 4,
    kCFXMLParserSkipWhitespace = 8,
    kCFXMLParserResolveExternalEntities = 16,
    kCFXMLParserAddImpliedAttributes = 32,
    kCFXMLParserAllOptions = 16777215,
    kCFXMLParserNoOptions = 0
  }

  export enum CFXMLParserStatusCode {
    kCFXMLStatusParseNotBegun = -2,
    kCFXMLStatusParseInProgress = -1,
    kCFXMLStatusParseSuccessful = 0,
    kCFXMLErrorUnexpectedEOF = 1,
    kCFXMLErrorUnknownEncoding = 2,
    kCFXMLErrorEncodingConversionFailure = 3,
    kCFXMLErrorMalformedProcessingInstruction = 4,
    kCFXMLErrorMalformedDTD = 5,
    kCFXMLErrorMalformedName = 6,
    kCFXMLErrorMalformedCDSect = 7,
    kCFXMLErrorMalformedCloseTag = 8,
    kCFXMLErrorMalformedStartTag = 9,
    kCFXMLErrorMalformedDocument = 10,
    kCFXMLErrorElementlessDocument = 11,
    kCFXMLErrorMalformedComment = 12,
    kCFXMLErrorMalformedCharacterReference = 13,
    kCFXMLErrorMalformedParsedCharacterData = 14,
    kCFXMLErrorNoData = 15
  }

  export enum __CFByteOrder {
    CFByteOrderUnknown = 0,
    CFByteOrderLittleEndian = 1,
    CFByteOrderBigEndian = 2
  }

  export enum CGBitmapInfo {
    kCGBitmapAlphaInfoMask = 31,
    kCGBitmapFloatInfoMask = 3840,
    kCGBitmapFloatComponents = 256,
    kCGBitmapByteOrderMask = 28672,
    kCGBitmapByteOrderDefault = 0,
    kCGBitmapByteOrder16Little = 4096,
    kCGBitmapByteOrder32Little = 8192,
    kCGBitmapByteOrder16Big = 12288,
    kCGBitmapByteOrder32Big = 16384
  }

  export enum CGBlendMode {
    kCGBlendModeNormal = 0,
    kCGBlendModeMultiply = 1,
    kCGBlendModeScreen = 2,
    kCGBlendModeOverlay = 3,
    kCGBlendModeDarken = 4,
    kCGBlendModeLighten = 5,
    kCGBlendModeColorDodge = 6,
    kCGBlendModeColorBurn = 7,
    kCGBlendModeSoftLight = 8,
    kCGBlendModeHardLight = 9,
    kCGBlendModeDifference = 10,
    kCGBlendModeExclusion = 11,
    kCGBlendModeHue = 12,
    kCGBlendModeSaturation = 13,
    kCGBlendModeColor = 14,
    kCGBlendModeLuminosity = 15,
    kCGBlendModeClear = 16,
    kCGBlendModeCopy = 17,
    kCGBlendModeSourceIn = 18,
    kCGBlendModeSourceOut = 19,
    kCGBlendModeSourceAtop = 20,
    kCGBlendModeDestinationOver = 21,
    kCGBlendModeDestinationIn = 22,
    kCGBlendModeDestinationOut = 23,
    kCGBlendModeDestinationAtop = 24,
    kCGBlendModeXOR = 25,
    kCGBlendModePlusDarker = 26,
    kCGBlendModePlusLighter = 27
  }

  export enum CGCaptureOptions {
    kCGCaptureNoOptions = 0,
    kCGCaptureNoFill = 1
  }

  export enum CGColorConversionInfoTransformType {
    kCGColorConversionTransformFromSpace = 0,
    kCGColorConversionTransformToSpace = 1,
    kCGColorConversionTransformApplySpace = 2
  }

  export enum CGColorRenderingIntent {
    kCGRenderingIntentDefault = 0,
    kCGRenderingIntentAbsoluteColorimetric = 1,
    kCGRenderingIntentRelativeColorimetric = 2,
    kCGRenderingIntentPerceptual = 3,
    kCGRenderingIntentSaturation = 4
  }

  export enum CGColorSpaceModel {
    kCGColorSpaceModelUnknown = -1,
    kCGColorSpaceModelMonochrome = 0,
    kCGColorSpaceModelRGB = 1,
    kCGColorSpaceModelCMYK = 2,
    kCGColorSpaceModelLab = 3,
    kCGColorSpaceModelDeviceN = 4,
    kCGColorSpaceModelIndexed = 5,
    kCGColorSpaceModelPattern = 6,
    kCGColorSpaceModelXYZ = 7
  }

  export enum CGConfigureOption {
    kCGConfigureForAppOnly = 0,
    kCGConfigureForSession = 1,
    kCGConfigurePermanently = 2
  }

  export enum CGDisplayChangeSummaryFlags {
    kCGDisplayBeginConfigurationFlag = 1,
    kCGDisplayMovedFlag = 2,
    kCGDisplaySetMainFlag = 4,
    kCGDisplaySetModeFlag = 8,
    kCGDisplayAddFlag = 16,
    kCGDisplayRemoveFlag = 32,
    kCGDisplayEnabledFlag = 256,
    kCGDisplayDisabledFlag = 512,
    kCGDisplayMirrorFlag = 1024,
    kCGDisplayUnMirrorFlag = 2048,
    kCGDisplayDesktopShapeChangedFlag = 4096
  }

  export enum CGDisplayStreamFrameStatus {
    kCGDisplayStreamFrameStatusFrameComplete = 0,
    kCGDisplayStreamFrameStatusFrameIdle = 1,
    kCGDisplayStreamFrameStatusFrameBlank = 2,
    kCGDisplayStreamFrameStatusStopped = 3
  }

  export enum CGDisplayStreamUpdateRectType {
    kCGDisplayStreamUpdateRefreshedRects = 0,
    kCGDisplayStreamUpdateMovedRects = 1,
    kCGDisplayStreamUpdateDirtyRects = 2,
    kCGDisplayStreamUpdateReducedDirtyRects = 3
  }

  export enum CGError {
    kCGErrorSuccess = 0,
    kCGErrorFailure = 1000,
    kCGErrorIllegalArgument = 1001,
    kCGErrorInvalidConnection = 1002,
    kCGErrorInvalidContext = 1003,
    kCGErrorCannotComplete = 1004,
    kCGErrorNotImplemented = 1006,
    kCGErrorRangeCheck = 1007,
    kCGErrorTypeCheck = 1008,
    kCGErrorInvalidOperation = 1010,
    kCGErrorNoneAvailable = 1011
  }

  export enum CGEventField {
    kCGMouseEventNumber = 0,
    kCGMouseEventClickState = 1,
    kCGMouseEventPressure = 2,
    kCGMouseEventButtonNumber = 3,
    kCGMouseEventDeltaX = 4,
    kCGMouseEventDeltaY = 5,
    kCGMouseEventInstantMouser = 6,
    kCGMouseEventSubtype = 7,
    kCGKeyboardEventAutorepeat = 8,
    kCGKeyboardEventKeycode = 9,
    kCGKeyboardEventKeyboardType = 10,
    kCGScrollWheelEventDeltaAxis1 = 11,
    kCGScrollWheelEventDeltaAxis2 = 12,
    kCGScrollWheelEventDeltaAxis3 = 13,
    kCGScrollWheelEventFixedPtDeltaAxis1 = 93,
    kCGScrollWheelEventFixedPtDeltaAxis2 = 94,
    kCGScrollWheelEventFixedPtDeltaAxis3 = 95,
    kCGScrollWheelEventPointDeltaAxis1 = 96,
    kCGScrollWheelEventPointDeltaAxis2 = 97,
    kCGScrollWheelEventPointDeltaAxis3 = 98,
    kCGScrollWheelEventScrollPhase = 99,
    kCGScrollWheelEventScrollCount = 100,
    kCGScrollWheelEventMomentumPhase = 123,
    kCGScrollWheelEventInstantMouser = 14,
    kCGTabletEventPointX = 15,
    kCGTabletEventPointY = 16,
    kCGTabletEventPointZ = 17,
    kCGTabletEventPointButtons = 18,
    kCGTabletEventPointPressure = 19,
    kCGTabletEventTiltX = 20,
    kCGTabletEventTiltY = 21,
    kCGTabletEventRotation = 22,
    kCGTabletEventTangentialPressure = 23,
    kCGTabletEventDeviceID = 24,
    kCGTabletEventVendor1 = 25,
    kCGTabletEventVendor2 = 26,
    kCGTabletEventVendor3 = 27,
    kCGTabletProximityEventVendorID = 28,
    kCGTabletProximityEventTabletID = 29,
    kCGTabletProximityEventPointerID = 30,
    kCGTabletProximityEventDeviceID = 31,
    kCGTabletProximityEventSystemTabletID = 32,
    kCGTabletProximityEventVendorPointerType = 33,
    kCGTabletProximityEventVendorPointerSerialNumber = 34,
    kCGTabletProximityEventVendorUniqueID = 35,
    kCGTabletProximityEventCapabilityMask = 36,
    kCGTabletProximityEventPointerType = 37,
    kCGTabletProximityEventEnterProximity = 38,
    kCGEventTargetProcessSerialNumber = 39,
    kCGEventTargetUnixProcessID = 40,
    kCGEventSourceUnixProcessID = 41,
    kCGEventSourceUserData = 42,
    kCGEventSourceUserID = 43,
    kCGEventSourceGroupID = 44,
    kCGEventSourceStateID = 45,
    kCGScrollWheelEventIsContinuous = 88,
    kCGMouseEventWindowUnderMousePointer = 91,
    kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92,
    kCGEventUnacceleratedPointerMovementX = 170,
    kCGEventUnacceleratedPointerMovementY = 171
  }

  export enum CGEventFilterMask {
    kCGEventFilterMaskPermitLocalMouseEvents = 1,
    kCGEventFilterMaskPermitLocalKeyboardEvents = 2,
    kCGEventFilterMaskPermitSystemDefinedEvents = 4
  }

  export enum CGEventFlags {
    kCGEventFlagMaskAlphaShift = 65536,
    kCGEventFlagMaskShift = 131072,
    kCGEventFlagMaskControl = 262144,
    kCGEventFlagMaskAlternate = 524288,
    kCGEventFlagMaskCommand = 1048576,
    kCGEventFlagMaskHelp = 4194304,
    kCGEventFlagMaskSecondaryFn = 8388608,
    kCGEventFlagMaskNumericPad = 2097152,
    kCGEventFlagMaskNonCoalesced = 256
  }

  export enum CGEventMouseSubtype {
    kCGEventMouseSubtypeDefault = 0,
    kCGEventMouseSubtypeTabletPoint = 1,
    kCGEventMouseSubtypeTabletProximity = 2
  }

  export enum CGEventSourceStateID {
    kCGEventSourceStatePrivate = -1,
    kCGEventSourceStateCombinedSessionState = 0,
    kCGEventSourceStateHIDSystemState = 1
  }

  export enum CGEventSuppressionState {
    kCGEventSuppressionStateSuppressionInterval = 0,
    kCGEventSuppressionStateRemoteMouseDrag = 1,
    kCGNumberOfEventSuppressionStates = 2
  }

  export enum CGEventTapLocation {
    kCGHIDEventTap = 0,
    kCGSessionEventTap = 1,
    kCGAnnotatedSessionEventTap = 2
  }

  export enum CGEventTapOptions {
    kCGEventTapOptionDefault = 0,
    kCGEventTapOptionListenOnly = 1
  }

  export enum CGEventTapPlacement {
    kCGHeadInsertEventTap = 0,
    kCGTailAppendEventTap = 1
  }

  export enum CGEventType {
    kCGEventNull = 0,
    kCGEventLeftMouseDown = 1,
    kCGEventLeftMouseUp = 2,
    kCGEventRightMouseDown = 3,
    kCGEventRightMouseUp = 4,
    kCGEventMouseMoved = 5,
    kCGEventLeftMouseDragged = 6,
    kCGEventRightMouseDragged = 7,
    kCGEventKeyDown = 10,
    kCGEventKeyUp = 11,
    kCGEventFlagsChanged = 12,
    kCGEventScrollWheel = 22,
    kCGEventTabletPointer = 23,
    kCGEventTabletProximity = 24,
    kCGEventOtherMouseDown = 25,
    kCGEventOtherMouseUp = 26,
    kCGEventOtherMouseDragged = 27,
    kCGEventTapDisabledByTimeout = 4294967294,
    kCGEventTapDisabledByUserInput = 4294967295
  }

  export enum CGFontPostScriptFormat {
    kCGFontPostScriptFormatType1 = 1,
    kCGFontPostScriptFormatType3 = 3,
    kCGFontPostScriptFormatType42 = 42
  }

  export enum CGGesturePhase {
    kCGGesturePhaseNone = 0,
    kCGGesturePhaseBegan = 1,
    kCGGesturePhaseChanged = 2,
    kCGGesturePhaseEnded = 4,
    kCGGesturePhaseCancelled = 8,
    kCGGesturePhaseMayBegin = 128
  }

  export enum CGGlyphDeprecatedEnum {
    Min = 0,
    Max = 1
  }

  export enum CGGradientDrawingOptions {
    kCGGradientDrawsBeforeStartLocation = 1,
    kCGGradientDrawsAfterEndLocation = 2
  }

  export enum CGImageAlphaInfo {
    kCGImageAlphaNone = 0,
    kCGImageAlphaPremultipliedLast = 1,
    kCGImageAlphaPremultipliedFirst = 2,
    kCGImageAlphaLast = 3,
    kCGImageAlphaFirst = 4,
    kCGImageAlphaNoneSkipLast = 5,
    kCGImageAlphaNoneSkipFirst = 6,
    kCGImageAlphaOnly = 7
  }

  export enum CGImageByteOrderInfo {
    kCGImageByteOrderMask = 28672,
    kCGImageByteOrderDefault = 0,
    kCGImageByteOrder16Little = 4096,
    kCGImageByteOrder32Little = 8192,
    kCGImageByteOrder16Big = 12288,
    kCGImageByteOrder32Big = 16384
  }

  export enum CGImagePixelFormatInfo {
    kCGImagePixelFormatMask = 983040,
    kCGImagePixelFormatPacked = 0,
    kCGImagePixelFormatRGB555 = 65536,
    kCGImagePixelFormatRGB565 = 131072,
    kCGImagePixelFormatRGB101010 = 196608,
    kCGImagePixelFormatRGBCIF10 = 262144
  }

  export enum CGInterpolationQuality {
    kCGInterpolationDefault = 0,
    kCGInterpolationNone = 1,
    kCGInterpolationLow = 2,
    kCGInterpolationMedium = 4,
    kCGInterpolationHigh = 3
  }

  export enum CGLineCap {
    kCGLineCapButt = 0,
    kCGLineCapRound = 1,
    kCGLineCapSquare = 2
  }

  export enum CGLineJoin {
    kCGLineJoinMiter = 0,
    kCGLineJoinRound = 1,
    kCGLineJoinBevel = 2
  }

  export enum CGMomentumScrollPhase {
    kCGMomentumScrollPhaseNone = 0,
    kCGMomentumScrollPhaseBegin = 1,
    kCGMomentumScrollPhaseContinue = 2,
    kCGMomentumScrollPhaseEnd = 3
  }

  export enum CGMouseButton {
    kCGMouseButtonLeft = 0,
    kCGMouseButtonRight = 1,
    kCGMouseButtonCenter = 2
  }

  export enum CGPDFAccessPermissions {
    kCGPDFAllowsLowQualityPrinting = 1,
    kCGPDFAllowsHighQualityPrinting = 2,
    kCGPDFAllowsDocumentChanges = 4,
    kCGPDFAllowsDocumentAssembly = 8,
    kCGPDFAllowsContentCopying = 16,
    kCGPDFAllowsContentAccessibility = 32,
    kCGPDFAllowsCommenting = 64,
    kCGPDFAllowsFormFieldEntry = 128
  }

  export enum CGPDFBox {
    kCGPDFMediaBox = 0,
    kCGPDFCropBox = 1,
    kCGPDFBleedBox = 2,
    kCGPDFTrimBox = 3,
    kCGPDFArtBox = 4
  }

  export enum CGPDFDataFormat {
    Raw = 0,
    JPEGEncoded = 1,
    JPEG2000 = 2
  }

  export enum CGPDFObjectType {
    kCGPDFObjectTypeNull = 1,
    kCGPDFObjectTypeBoolean = 2,
    kCGPDFObjectTypeInteger = 3,
    kCGPDFObjectTypeReal = 4,
    kCGPDFObjectTypeName = 5,
    kCGPDFObjectTypeString = 6,
    kCGPDFObjectTypeArray = 7,
    kCGPDFObjectTypeDictionary = 8,
    kCGPDFObjectTypeStream = 9
  }

  export enum CGPDFTagType {
    Document = 100,
    Part = 101,
    Art = 102,
    Section = 103,
    Div = 104,
    BlockQuote = 105,
    Caption = 106,
    TOC = 107,
    TOCI = 108,
    Index = 109,
    NonStructure = 110,
    Private = 111,
    Paragraph = 200,
    Header = 201,
    Header1 = 202,
    Header2 = 203,
    Header3 = 204,
    Header4 = 205,
    Header5 = 206,
    Header6 = 207,
    List = 300,
    ListItem = 301,
    Label = 302,
    ListBody = 303,
    Table = 400,
    TableRow = 401,
    TableHeaderCell = 402,
    TableDataCell = 403,
    TableHeader = 404,
    TableBody = 405,
    TableFooter = 406,
    Span = 500,
    Quote = 501,
    Note = 502,
    Reference = 503,
    Bibliography = 504,
    Code = 505,
    Link = 506,
    Annotation = 507,
    Ruby = 600,
    RubyBaseText = 601,
    RubyAnnotationText = 602,
    RubyPunctuation = 603,
    Warichu = 604,
    WarichuText = 605,
    WarichuPunctiation = 606,
    Figure = 700,
    Formula = 701,
    Form = 702
  }

  export enum CGPathDrawingMode {
    kCGPathFill = 0,
    kCGPathEOFill = 1,
    kCGPathStroke = 2,
    kCGPathFillStroke = 3,
    kCGPathEOFillStroke = 4
  }

  export enum CGPathElementType {
    kCGPathElementMoveToPoint = 0,
    kCGPathElementAddLineToPoint = 1,
    kCGPathElementAddQuadCurveToPoint = 2,
    kCGPathElementAddCurveToPoint = 3,
    kCGPathElementCloseSubpath = 4
  }

  export enum CGPatternTiling {
    kCGPatternTilingNoDistortion = 0,
    kCGPatternTilingConstantSpacingMinimalDistortion = 1,
    kCGPatternTilingConstantSpacing = 2
  }

  export enum CGRectEdge {
    MinXEdge = 0,
    MinYEdge = 1,
    MaxXEdge = 2,
    MaxYEdge = 3
  }

  export enum CGScreenUpdateOperation {
    kCGScreenUpdateOperationRefresh = 0,
    kCGScreenUpdateOperationMove = 1,
    kCGScreenUpdateOperationReducedDirtyRectangleCount = 2147483648
  }

  export enum CGScrollEventUnit {
    kCGScrollEventUnitPixel = 0,
    kCGScrollEventUnitLine = 1
  }

  export enum CGScrollPhase {
    kCGScrollPhaseBegan = 1,
    kCGScrollPhaseChanged = 2,
    kCGScrollPhaseEnded = 4,
    kCGScrollPhaseCancelled = 8,
    kCGScrollPhaseMayBegin = 128
  }

  export enum CGTextDrawingMode {
    kCGTextFill = 0,
    kCGTextStroke = 1,
    kCGTextFillStroke = 2,
    kCGTextInvisible = 3,
    kCGTextFillClip = 4,
    kCGTextStrokeClip = 5,
    kCGTextFillStrokeClip = 6,
    kCGTextClip = 7
  }

  export enum CGWindowBackingType {
    kCGBackingStoreRetained = 0,
    kCGBackingStoreNonretained = 1,
    kCGBackingStoreBuffered = 2
  }

  export enum CGWindowImageOption {
    kCGWindowImageDefault = 0,
    kCGWindowImageBoundsIgnoreFraming = 1,
    kCGWindowImageShouldBeOpaque = 2,
    kCGWindowImageOnlyShadows = 4,
    kCGWindowImageBestResolution = 8,
    kCGWindowImageNominalResolution = 16
  }

  export enum CGWindowLevelKey {
    kCGBaseWindowLevelKey = 0,
    kCGMinimumWindowLevelKey = 1,
    kCGDesktopWindowLevelKey = 2,
    kCGBackstopMenuLevelKey = 3,
    kCGNormalWindowLevelKey = 4,
    kCGFloatingWindowLevelKey = 5,
    kCGTornOffMenuWindowLevelKey = 6,
    kCGDockWindowLevelKey = 7,
    kCGMainMenuWindowLevelKey = 8,
    kCGStatusWindowLevelKey = 9,
    kCGModalPanelWindowLevelKey = 10,
    kCGPopUpMenuWindowLevelKey = 11,
    kCGDraggingWindowLevelKey = 12,
    kCGScreenSaverWindowLevelKey = 13,
    kCGMaximumWindowLevelKey = 14,
    kCGOverlayWindowLevelKey = 15,
    kCGHelpWindowLevelKey = 16,
    kCGUtilityWindowLevelKey = 17,
    kCGDesktopIconWindowLevelKey = 18,
    kCGCursorWindowLevelKey = 19,
    kCGAssistiveTechHighWindowLevelKey = 20,
    kCGNumberOfWindowLevelKeys = 21
  }

  export enum CGWindowListOption {
    kCGWindowListOptionAll = 0,
    kCGWindowListOptionOnScreenOnly = 1,
    kCGWindowListOptionOnScreenAboveWindow = 2,
    kCGWindowListOptionOnScreenBelowWindow = 4,
    kCGWindowListOptionIncludingWindow = 8,
    kCGWindowListExcludeDesktopElements = 16
  }

  export enum CGWindowSharingType {
    kCGWindowSharingNone = 0,
    kCGWindowSharingReadOnly = 1,
    kCGWindowSharingReadWrite = 2
  }

  export enum CIDataMatrixCodeECCVersion {
    Version000 = 0,
    Version050 = 50,
    Version080 = 80,
    Version100 = 100,
    Version140 = 140,
    Version200 = 200
  }

  export enum CIQRCodeErrorCorrectionLevel {
    L = 76,
    M = 77,
    Q = 81,
    H = 72
  }

  export enum CIRenderDestinationAlphaMode {
    None = 0,
    Premultiplied = 1,
    Unpremultiplied = 2
  }

  export enum CMTimeFlags {
    kCMTimeFlags_Valid = 1,
    kCMTimeFlags_HasBeenRounded = 2,
    kCMTimeFlags_PositiveInfinity = 4,
    kCMTimeFlags_NegativeInfinity = 8,
    kCMTimeFlags_Indefinite = 16,
    kCMTimeFlags_ImpliedValueFlagsMask = 28
  }

  export enum CMTimeRoundingMethod {
    kCMTimeRoundingMethod_RoundHalfAwayFromZero = 1,
    kCMTimeRoundingMethod_RoundTowardZero = 2,
    kCMTimeRoundingMethod_RoundAwayFromZero = 3,
    kCMTimeRoundingMethod_QuickTime = 4,
    kCMTimeRoundingMethod_RoundTowardPositiveInfinity = 5,
    kCMTimeRoundingMethod_RoundTowardNegativeInfinity = 6,
    kCMTimeRoundingMethod_Default = 1
  }

  export enum AlignmentOptions {
    MinXInward = 1,
    MinYInward = 2,
    MaxXInward = 4,
    MaxYInward = 8,
    WidthInward = 16,
    HeightInward = 32,
    MinXOutward = 256,
    MinYOutward = 512,
    MaxXOutward = 1024,
    MaxYOutward = 2048,
    WidthOutward = 4096,
    HeightOutward = 8192,
    MinXNearest = 65536,
    MinYNearest = 131072,
    MaxXNearest = 262144,
    MaxYNearest = 524288,
    WidthNearest = 1048576,
    HeightNearest = 2097152,
    RectFlipped = -9223372036854775808,
    AllEdgesInward = 15,
    AllEdgesOutward = 3840,
    AllEdgesNearest = 983040
  }

  export enum NSBinarySearchingOptions {
    FirstEqual = 256,
    LastEqual = 512,
    InsertionIndex = 1024
  }

  export enum NSCollectionChangeType {
    Insert = 0,
    Remove = 1
  }

  export enum ComparisonResult {
    OrderedAscending = -1,
    OrderedSame = 0,
    OrderedDescending = 1
  }

  export enum NSEnumerationOptions {
    Concurrent = 1,
    Reverse = 2
  }

  export enum NSItemProviderFileOptions {
    OpenInPlace = 1
  }

  export enum NSItemProviderRepresentationVisibility {
    All = 0,
    Team = 1,
    Group = 2,
    OwnProcess = 3
  }

  export enum NSKeyValueChange {
    Setting = 1,
    Insertion = 2,
    Removal = 3,
    Replacement = 4
  }

  export enum NSKeyValueObservingOptions {
    New = 1,
    Old = 2,
    Initial = 4,
    Prior = 8
  }

  export enum NSKeyValueSetMutationKind {
    UnionSetMutation = 1,
    MinusSetMutation = 2,
    IntersectSetMutation = 3,
    SetSetMutation = 4
  }

  export enum NSLinguisticTaggerUnit {
    Word = 0,
    Sentence = 1,
    Paragraph = 2,
    Document = 3
  }

  export enum NSOrderedCollectionDifferenceCalculationOptions {
    OmitInsertedObjects = 1,
    OmitRemovedObjects = 2,
    InferMoves = 4
  }

  export enum QualityOfService {
    UserInteractive = 33,
    UserInitiated = 25,
    Utility = 17,
    Background = 9,
    Default = -1
  }

  export enum NSRectEdge {
    RectEdgeMinX = 0,
    RectEdgeMinY = 1,
    RectEdgeMaxX = 2,
    RectEdgeMaxY = 3,
    MinXEdge = 0,
    MinYEdge = 1,
    MaxXEdge = 2,
    MaxYEdge = 3
  }

  export enum NSSaveOptions {
    Yes = 0,
    No = 1,
    Ask = 2
  }

  export enum NSSortOptions {
    Concurrent = 1,
    Stable = 16
  }

  export enum NSURLErrorNetworkUnavailableReason {
    Cellular = 0,
    Expensive = 1,
    Constrained = 2
  }

  export enum NSURLSessionDelayedRequestDisposition {
    ContinueLoading = 0,
    UseNewRequest = 1,
    Cancel = 2
  }

  export enum NSURLSessionWebSocketMessageType {
    Data = 0,
    String = 1
  }

  export enum IKCameraDeviceViewDisplayMode {
    None = -1,
    Table = 0,
    Icon = 1
  }

  export enum IKCameraDeviceViewTransferMode {
    FileBased = 0,
    MemoryBased = 1
  }

  export enum IKDeviceBrowserViewDisplayMode {
    Table = 0,
    Outline = 1,
    Icon = 2
  }

  export enum IKImageBrowserCellState {
    StateNoImage = 0,
    StateInvalid = 1,
    StateReady = 2
  }

  export enum IKImageBrowserDropOperation {
    On = 0,
    Before = 1
  }

  export enum IKScannerDeviceViewDisplayMode {
    None = -1,
    Simple = 0,
    Advanced = 1
  }

  export enum IKScannerDeviceViewTransferMode {
    FileBased = 0,
    MemoryBased = 1
  }

  export enum QCPlugInExecutionMode {
    kQCPlugInExecutionModeProvider = 1,
    kQCPlugInExecutionModeProcessor = 2,
    kQCPlugInExecutionModeConsumer = 3
  }

  export enum QCPlugInTimeMode {
    kQCPlugInTimeModeNone = 0,
    kQCPlugInTimeModeIdle = 1,
    kQCPlugInTimeModeTimeBase = 2
  }

  export enum QLPreviewViewStyle {
    Normal = 0,
    Compact = 1
  }

  export enum CAAutoresizingMask {
    kCALayerNotSizable = 0,
    kCALayerMinXMargin = 1,
    kCALayerWidthSizable = 2,
    kCALayerMaxXMargin = 4,
    kCALayerMinYMargin = 8,
    kCALayerHeightSizable = 16,
    kCALayerMaxYMargin = 32
  }

  export enum CAConstraintAttribute {
    kCAConstraintMinX = 0,
    kCAConstraintMidX = 1,
    kCAConstraintMaxX = 2,
    kCAConstraintWidth = 3,
    kCAConstraintMinY = 4,
    kCAConstraintMidY = 5,
    kCAConstraintMaxY = 6,
    kCAConstraintHeight = 7
  }

  export enum CACornerMask {
    kCALayerMinXMinYCorner = 1,
    kCALayerMaxXMinYCorner = 2,
    kCALayerMinXMaxYCorner = 4,
    kCALayerMaxXMaxYCorner = 8
  }

  export enum CAEdgeAntialiasingMask {
    kCALayerLeftEdge = 1,
    kCALayerRightEdge = 2,
    kCALayerBottomEdge = 4,
    kCALayerTopEdge = 8
  }

  export let AVAssetExportPreset1280x720: string;
  export let AVAssetExportPreset1920x1080: string;
  export let AVAssetExportPreset3840x2160: string;
  export let AVAssetExportPreset640x480: string;
  export let AVAssetExportPreset960x540: string;
  export let AVAssetExportPresetAppleM4A: string;
  export let AVAssetExportPresetAppleM4V1080pHD: string;
  export let AVAssetExportPresetAppleM4V480pSD: string;
  export let AVAssetExportPresetAppleM4V720pHD: string;
  export let AVAssetExportPresetAppleM4VAppleTV: string;
  export let AVAssetExportPresetAppleM4VCellular: string;
  export let AVAssetExportPresetAppleM4VWiFi: string;
  export let AVAssetExportPresetAppleM4ViPod: string;
  export let AVAssetExportPresetAppleProRes422LPCM: string;
  export let AVAssetExportPresetAppleProRes4444LPCM: string;
  export let AVAssetExportPresetHEVC1920x1080: string;
  export let AVAssetExportPresetHEVC1920x1080WithAlpha: string;
  export let AVAssetExportPresetHEVC3840x2160: string;
  export let AVAssetExportPresetHEVC3840x2160WithAlpha: string;
  export let AVAssetExportPresetHEVCHighestQuality: string;
  export let AVAssetExportPresetHEVCHighestQualityWithAlpha: string;
  export let AVAssetExportPresetHighestQuality: string;
  export let AVAssetExportPresetLowQuality: string;
  export let AVAssetExportPresetMediumQuality: string;
  export let AVAssetExportPresetPassthrough: string;
  export let AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey: string;
  export let AVAudioBitRateStrategy_Constant: string;
  export let AVAudioBitRateStrategy_LongTermAverage: string;
  export let AVAudioBitRateStrategy_Variable: string;
  export let AVAudioBitRateStrategy_VariableConstrained: string;
  export let AVAudioFileTypeKey: string;
  export let AVAudioUnitManufacturerNameApple: string;
  export let AVAudioUnitTypeEffect: string;
  export let AVAudioUnitTypeFormatConverter: string;
  export let AVAudioUnitTypeGenerator: string;
  export let AVAudioUnitTypeMIDIProcessor: string;
  export let AVAudioUnitTypeMixer: string;
  export let AVAudioUnitTypeMusicDevice: string;
  export let AVAudioUnitTypeMusicEffect: string;
  export let AVAudioUnitTypeOfflineEffect: string;
  export let AVAudioUnitTypeOutput: string;
  export let AVAudioUnitTypePanner: string;
  export let AVCaptureSessionErrorKey: string;
  export let AVChannelLayoutKey: string;
  export let AVContentKeyRequestProtocolVersionsKey: string;
  export let AVContentKeyRequestRequiresValidationDataInSecureTokenKey: string;
  export let AVCoreAnimationBeginTimeAtZero: number;
  export let AVEncoderAudioQualityForVBRKey: string;
  export let AVEncoderAudioQualityKey: string;
  export let AVEncoderBitDepthHintKey: string;
  export let AVEncoderBitRateKey: string;
  export let AVEncoderBitRatePerChannelKey: string;
  export let AVEncoderBitRateStrategyKey: string;
  export let AVErrorDeviceKey: string;
  export let AVErrorDiscontinuityFlagsKey: string;
  export let AVErrorFileSizeKey: string;
  export let AVErrorFileTypeKey: string;
  export let AVErrorMediaSubTypeKey: string;
  export let AVErrorMediaTypeKey: string;
  export let AVErrorPIDKey: string;
  export let AVErrorPersistentTrackIDKey: string;
  export let AVErrorPresentationTimeStampKey: string;
  export let AVErrorRecordingSuccessfullyFinishedKey: string;
  export let AVErrorTimeKey: string;
  export let AVFormatIDKey: string;
  export let AVFoundationErrorDomain: string;
  export let AVLinearPCMBitDepthKey: string;
  export let AVLinearPCMIsBigEndianKey: string;
  export let AVLinearPCMIsFloatKey: string;
  export let AVLinearPCMIsNonInterleaved: string;
  export let AVMovieReferenceRestrictionsKey: string;
  export let AVNumberOfChannelsKey: string;
  export let AVPlayerItemFailedToPlayToEndTimeErrorKey: string;
  export let AVPlayerItemTrackVideoFieldModeDeinterlaceFields: string;
  export let AVSampleBufferAudioRendererFlushTimeKey: string;
  export let AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey: string;
  export let AVSampleRateConverterAlgorithmKey: string;
  export let AVSampleRateConverterAlgorithm_Mastering: string;
  export let AVSampleRateConverterAlgorithm_MinimumPhase: string;
  export let AVSampleRateConverterAlgorithm_Normal: string;
  export let AVSampleRateConverterAudioQualityKey: string;
  export let AVSampleRateKey: string;
  export let AVSpeechSynthesisIPANotationAttribute: string;
  export let AVSpeechSynthesisVoiceIdentifierAlex: string;
  export let AVSpeechUtteranceDefaultSpeechRate: number;
  export let AVSpeechUtteranceMaximumSpeechRate: number;
  export let AVSpeechUtteranceMinimumSpeechRate: number;
  export let AVStreamingKeyDeliveryContentKeyType: string;
  export let AVStreamingKeyDeliveryPersistentContentKeyType: string;
  export let AVURLAssetAllowsCellularAccessKey: string;
  export let AVURLAssetAllowsConstrainedNetworkAccessKey: string;
  export let AVURLAssetAllowsExpensiveNetworkAccessKey: string;
  export let AVURLAssetHTTPCookiesKey: string;
  export let AVURLAssetPreferPreciseDurationAndTimingKey: string;
  export let AVURLAssetReferenceRestrictionsKey: string;
  export let AVVideoAllowFrameReorderingKey: string;
  export let AVVideoAllowWideColorKey: string;
  export let AVVideoAverageBitRateKey: string;
  export let AVVideoAverageNonDroppableFrameRateKey: string;
  export let AVVideoCleanApertureHeightKey: string;
  export let AVVideoCleanApertureHorizontalOffsetKey: string;
  export let AVVideoCleanApertureKey: string;
  export let AVVideoCleanApertureVerticalOffsetKey: string;
  export let AVVideoCleanApertureWidthKey: string;
  export let AVVideoCodecKey: string;
  export let AVVideoColorPrimariesKey: string;
  export let AVVideoColorPrimaries_EBU_3213: string;
  export let AVVideoColorPrimaries_ITU_R_2020: string;
  export let AVVideoColorPrimaries_ITU_R_709_2: string;
  export let AVVideoColorPrimaries_P3_D65: string;
  export let AVVideoColorPrimaries_SMPTE_C: string;
  export let AVVideoColorPropertiesKey: string;
  export let AVVideoCompressionPropertiesKey: string;
  export let AVVideoDecompressionPropertiesKey: string;
  export let AVVideoEncoderSpecificationKey: string;
  export let AVVideoExpectedSourceFrameRateKey: string;
  export let AVVideoH264EntropyModeCABAC: string;
  export let AVVideoH264EntropyModeCAVLC: string;
  export let AVVideoH264EntropyModeKey: string;
  export let AVVideoHeightKey: string;
  export let AVVideoMaxKeyFrameIntervalDurationKey: string;
  export let AVVideoMaxKeyFrameIntervalKey: string;
  export let AVVideoPixelAspectRatioHorizontalSpacingKey: string;
  export let AVVideoPixelAspectRatioKey: string;
  export let AVVideoPixelAspectRatioVerticalSpacingKey: string;
  export let AVVideoProfileLevelH264Baseline30: string;
  export let AVVideoProfileLevelH264Baseline31: string;
  export let AVVideoProfileLevelH264Baseline41: string;
  export let AVVideoProfileLevelH264BaselineAutoLevel: string;
  export let AVVideoProfileLevelH264High40: string;
  export let AVVideoProfileLevelH264High41: string;
  export let AVVideoProfileLevelH264HighAutoLevel: string;
  export let AVVideoProfileLevelH264Main30: string;
  export let AVVideoProfileLevelH264Main31: string;
  export let AVVideoProfileLevelH264Main32: string;
  export let AVVideoProfileLevelH264Main41: string;
  export let AVVideoProfileLevelH264MainAutoLevel: string;
  export let AVVideoProfileLevelKey: string;
  export let AVVideoQualityKey: string;
  export let AVVideoScalingModeFit: string;
  export let AVVideoScalingModeKey: string;
  export let AVVideoScalingModeResize: string;
  export let AVVideoScalingModeResizeAspect: string;
  export let AVVideoScalingModeResizeAspectFill: string;
  export let AVVideoTransferFunctionKey: string;
  export let AVVideoTransferFunction_ITU_R_2100_HLG: string;
  export let AVVideoTransferFunction_ITU_R_709_2: string;
  export let AVVideoTransferFunction_SMPTE_240M_1995: string;
  export let AVVideoTransferFunction_SMPTE_ST_2084_PQ: string;
  export let AVVideoWidthKey: string;
  export let AVVideoYCbCrMatrixKey: string;
  export let AVVideoYCbCrMatrix_ITU_R_2020: string;
  export let AVVideoYCbCrMatrix_ITU_R_601_4: string;
  export let AVVideoYCbCrMatrix_ITU_R_709_2: string;
  export let AVVideoYCbCrMatrix_SMPTE_240M_1995: string;
  export let NSAllRomanInputSourcesLocaleIdentifier: string;
  export let NSAnimationTriggerOrderIn: string;
  export let NSAnimationTriggerOrderOut: string;
  export let NSApp: NSApplication;
  export let NSBlack: number;
  export let NSDarkGray: number;
  export let NSDirectionalEdgeInsetsZero: NSDirectionalEdgeInsets;
  export let NSLightGray: number;
  export let NSMultipleValuesMarker: any;
  export let NSNoSelectionMarker: any;
  export let NSNotApplicableMarker: any;
  export let NSTypeIdentifierAddressText: string;
  export let NSTypeIdentifierDateText: string;
  export let NSTypeIdentifierPhoneNumberText: string;
  export let NSTypeIdentifierTransitInformationText: string;
  export let NSUnderlineByWord: NSUnderlineStyle;
  export let NSUnderlinePatternDash: NSUnderlineStyle;
  export let NSUnderlinePatternDashDot: NSUnderlineStyle;
  export let NSUnderlinePatternDashDotDot: NSUnderlineStyle;
  export let NSUnderlinePatternDot: NSUnderlineStyle;
  export let NSUnderlinePatternSolid: NSUnderlineStyle;
  export let NSUserActivityDocumentURLKey: string;
  export let NSWhite: number;
  export let NSAddedPersistentStoresKey: string;
  export let NSAffectedObjectsErrorKey: string;
  export let NSAffectedStoresErrorKey: string;
  export let NSBinaryStoreInsecureDecodingCompatibilityOption: string;
  export let NSBinaryStoreSecureDecodingClasses: string;
  export let NSBinaryStoreType: string;
  export let NSCoreDataCoreSpotlightExporter: string;
  export let NSCoreDataVersionNumber: number;
  export let NSDeletedObjectsKey: string;
  export let NSDetailedErrorsKey: string;
  export let NSErrorMergePolicy: any;
  export let NSFetchRequestExpressionType: NSExpression.ExpressionType;
  export let NSIgnorePersistentStoreVersioningOption: string;
  export let NSInMemoryStoreType: string;
  export let NSInferMappingModelAutomaticallyOption: string;
  export let NSInsertedObjectsKey: string;
  export let NSInvalidatedAllObjectsKey: string;
  export let NSInvalidatedObjectsKey: string;
  export let NSManagedObjectContextDidSaveNotification: string;
  export let NSManagedObjectContextObjectsDidChangeNotification: string;
  export let NSManagedObjectContextQueryGenerationKey: string;
  export let NSManagedObjectContextWillSaveNotification: string;
  export let NSMergeByPropertyObjectTrumpMergePolicy: any;
  export let NSMergeByPropertyStoreTrumpMergePolicy: any;
  export let NSMigratePersistentStoresAutomaticallyOption: string;
  export let NSMigrationDestinationObjectKey: string;
  export let NSMigrationEntityMappingKey: string;
  export let NSMigrationEntityPolicyKey: string;
  export let NSMigrationManagerKey: string;
  export let NSMigrationPropertyMappingKey: string;
  export let NSMigrationSourceObjectKey: string;
  export let NSOverwriteMergePolicy: any;
  export let NSPersistentHistoryTokenKey: string;
  export let NSPersistentHistoryTrackingKey: string;
  export let NSPersistentStoreConnectionPoolMaxSizeKey: string;
  export let NSPersistentStoreCoordinatorStoresDidChangeNotification: string;
  export let NSPersistentStoreCoordinatorStoresWillChangeNotification: string;
  export let NSPersistentStoreCoordinatorWillRemoveStoreNotification: string;
  export let NSPersistentStoreForceDestroyOption: string;
  export let NSPersistentStoreOSCompatibility: string;
  export let NSPersistentStoreRemoteChangeNotification: string;
  export let NSPersistentStoreRemoteChangeNotificationPostOptionKey: string;
  export let NSPersistentStoreSaveConflictsErrorKey: string;
  export let NSPersistentStoreTimeoutOption: string;
  export let NSPersistentStoreURLKey: string;
  export let NSReadOnlyPersistentStoreOption: string;
  export let NSRefreshedObjectsKey: string;
  export let NSRemovedPersistentStoresKey: string;
  export let NSRollbackMergePolicy: any;
  export let NSSQLiteAnalyzeOption: string;
  export let NSSQLiteErrorDomain: string;
  export let NSSQLiteManualVacuumOption: string;
  export let NSSQLitePragmasOption: string;
  export let NSSQLiteStoreType: string;
  export let NSStoreModelVersionHashesKey: string;
  export let NSStoreModelVersionIdentifiersKey: string;
  export let NSStoreTypeKey: string;
  export let NSStoreUUIDKey: string;
  export let NSUUIDChangedPersistentStoresKey: string;
  export let NSUpdatedObjectsKey: string;
  export let NSValidateXMLStoreOption: string;
  export let NSValidationKeyErrorKey: string;
  export let NSValidationObjectErrorKey: string;
  export let NSValidationPredicateErrorKey: string;
  export let NSValidationValueErrorKey: string;
  export let NSXMLStoreType: string;
  export let kCFAbsoluteTimeIntervalSince1904: number;
  export let kCFAbsoluteTimeIntervalSince1970: number;
  export let kCFAllocatorDefault: any;
  export let kCFAllocatorMalloc: any;
  export let kCFAllocatorMallocZone: any;
  export let kCFAllocatorNull: any;
  export let kCFAllocatorSystemDefault: any;
  export let kCFAllocatorUseContext: any;
  export let kCFBooleanFalse: number;
  export let kCFBooleanTrue: number;
  export let kCFBundleDevelopmentRegionKey: string;
  export let kCFBundleExecutableKey: string;
  export let kCFBundleIdentifierKey: string;
  export let kCFBundleInfoDictionaryVersionKey: string;
  export let kCFBundleLocalizationsKey: string;
  export let kCFBundleNameKey: string;
  export let kCFBundleVersionKey: string;
  export let kCFCopyStringBagCallBacks: CFBagCallBacks;
  export let kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
  export let kCFCopyStringSetCallBacks: CFSetCallBacks;
  export let kCFCoreFoundationVersionNumber: number;
  export let kCFErrorDescriptionKey: string;
  export let kCFErrorDomainCocoa: any;
  export let kCFErrorDomainMach: any;
  export let kCFErrorDomainOSStatus: any;
  export let kCFErrorDomainPOSIX: any;
  export let kCFErrorFilePathKey: string;
  export let kCFErrorLocalizedDescriptionKey: string;
  export let kCFErrorLocalizedFailureKey: string;
  export let kCFErrorLocalizedFailureReasonKey: string;
  export let kCFErrorLocalizedRecoverySuggestionKey: string;
  export let kCFErrorURLKey: string;
  export let kCFErrorUnderlyingErrorKey: string;
  export let kCFNotFound: number;
  export let kCFNull: NSNull;
  export let kCFNumberNaN: number;
  export let kCFNumberNegativeInfinity: number;
  export let kCFNumberPositiveInfinity: number;
  export let kCFPlugInDynamicRegisterFunctionKey: string;
  export let kCFPlugInDynamicRegistrationKey: string;
  export let kCFPlugInFactoriesKey: string;
  export let kCFPlugInTypesKey: string;
  export let kCFPlugInUnloadFunctionKey: string;
  export let kCFPreferencesAnyApplication: string;
  export let kCFPreferencesAnyHost: string;
  export let kCFPreferencesAnyUser: string;
  export let kCFPreferencesCurrentApplication: string;
  export let kCFPreferencesCurrentHost: string;
  export let kCFPreferencesCurrentUser: string;
  export let kCFSocketCommandKey: string;
  export let kCFSocketErrorKey: string;
  export let kCFSocketNameKey: string;
  export let kCFSocketRegisterCommand: string;
  export let kCFSocketResultKey: string;
  export let kCFSocketRetrieveCommand: string;
  export let kCFSocketValueKey: string;
  export let kCFStreamErrorDomainSOCKS: number;
  export let kCFStreamErrorDomainSSL: number;
  export let kCFStreamPropertySOCKSPassword: string;
  export let kCFStreamPropertySOCKSProxy: string;
  export let kCFStreamPropertySOCKSProxyHost: string;
  export let kCFStreamPropertySOCKSProxyPort: string;
  export let kCFStreamPropertySOCKSUser: string;
  export let kCFStreamPropertySOCKSVersion: string;
  export let kCFStreamPropertyShouldCloseNativeSocket: string;
  export let kCFStreamPropertySocketSecurityLevel: string;
  export let kCFStreamSocketSOCKSVersion4: string;
  export let kCFStreamSocketSOCKSVersion5: string;
  export let kCFStreamSocketSecurityLevelNegotiatedSSL: string;
  export let kCFStreamSocketSecurityLevelNone: string;
  export let kCFStreamSocketSecurityLevelTLSv1: string;
  export let kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
  export let kCFStringTransformFullwidthHalfwidth: string;
  export let kCFStringTransformHiraganaKatakana: string;
  export let kCFStringTransformLatinArabic: string;
  export let kCFStringTransformLatinCyrillic: string;
  export let kCFStringTransformLatinGreek: string;
  export let kCFStringTransformLatinHangul: string;
  export let kCFStringTransformLatinHebrew: string;
  export let kCFStringTransformLatinHiragana: string;
  export let kCFStringTransformLatinKatakana: string;
  export let kCFStringTransformLatinThai: string;
  export let kCFStringTransformMandarinLatin: string;
  export let kCFStringTransformStripCombiningMarks: string;
  export let kCFStringTransformStripDiacritics: string;
  export let kCFStringTransformToLatin: string;
  export let kCFStringTransformToUnicodeName: string;
  export let kCFStringTransformToXMLHex: string;
  export let kCFTypeArrayCallBacks: CFArrayCallBacks;
  export let kCFTypeBagCallBacks: CFBagCallBacks;
  export let kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
  export let kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
  export let kCFTypeSetCallBacks: CFSetCallBacks;
  export let kCFURLAddedToDirectoryDateKey: string;
  export let kCFURLApplicationIsScriptableKey: string;
  export let kCFURLAttributeModificationDateKey: string;
  export let kCFURLCanonicalPathKey: string;
  export let kCFURLContentAccessDateKey: string;
  export let kCFURLContentModificationDateKey: string;
  export let kCFURLCreationDateKey: string;
  export let kCFURLDocumentIdentifierKey: string;
  export let kCFURLFileAllocatedSizeKey: string;
  export let kCFURLFileResourceIdentifierKey: string;
  export let kCFURLFileResourceTypeBlockSpecial: string;
  export let kCFURLFileResourceTypeCharacterSpecial: string;
  export let kCFURLFileResourceTypeDirectory: string;
  export let kCFURLFileResourceTypeKey: string;
  export let kCFURLFileResourceTypeNamedPipe: string;
  export let kCFURLFileResourceTypeRegular: string;
  export let kCFURLFileResourceTypeSocket: string;
  export let kCFURLFileResourceTypeSymbolicLink: string;
  export let kCFURLFileResourceTypeUnknown: string;
  export let kCFURLFileSecurityKey: string;
  export let kCFURLFileSizeKey: string;
  export let kCFURLGenerationIdentifierKey: string;
  export let kCFURLHasHiddenExtensionKey: string;
  export let kCFURLIsAliasFileKey: string;
  export let kCFURLIsApplicationKey: string;
  export let kCFURLIsDirectoryKey: string;
  export let kCFURLIsExcludedFromBackupKey: string;
  export let kCFURLIsExecutableKey: string;
  export let kCFURLIsHiddenKey: string;
  export let kCFURLIsMountTriggerKey: string;
  export let kCFURLIsPackageKey: string;
  export let kCFURLIsReadableKey: string;
  export let kCFURLIsRegularFileKey: string;
  export let kCFURLIsSymbolicLinkKey: string;
  export let kCFURLIsSystemImmutableKey: string;
  export let kCFURLIsUbiquitousItemKey: string;
  export let kCFURLIsUserImmutableKey: string;
  export let kCFURLIsVolumeKey: string;
  export let kCFURLIsWritableKey: string;
  export let kCFURLKeysOfUnsetValuesKey: string;
  export let kCFURLLabelNumberKey: string;
  export let kCFURLLinkCountKey: string;
  export let kCFURLLocalizedLabelKey: string;
  export let kCFURLLocalizedNameKey: string;
  export let kCFURLLocalizedTypeDescriptionKey: string;
  export let kCFURLNameKey: string;
  export let kCFURLParentDirectoryURLKey: string;
  export let kCFURLPathKey: string;
  export let kCFURLPreferredIOBlockSizeKey: string;
  export let kCFURLQuarantinePropertiesKey: string;
  export let kCFURLTagNamesKey: string;
  export let kCFURLTotalFileAllocatedSizeKey: string;
  export let kCFURLTotalFileSizeKey: string;
  export let kCFURLTypeIdentifierKey: string;
  export let kCFURLUbiquitousItemDownloadingErrorKey: string;
  export let kCFURLUbiquitousItemDownloadingStatusCurrent: string;
  export let kCFURLUbiquitousItemDownloadingStatusDownloaded: string;
  export let kCFURLUbiquitousItemDownloadingStatusKey: string;
  export let kCFURLUbiquitousItemDownloadingStatusNotDownloaded: string;
  export let kCFURLUbiquitousItemHasUnresolvedConflictsKey: string;
  export let kCFURLUbiquitousItemIsDownloadingKey: string;
  export let kCFURLUbiquitousItemIsUploadedKey: string;
  export let kCFURLUbiquitousItemIsUploadingKey: string;
  export let kCFURLUbiquitousItemUploadingErrorKey: string;
  export let kCFURLVolumeAvailableCapacityForImportantUsageKey: string;
  export let kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: string;
  export let kCFURLVolumeAvailableCapacityKey: string;
  export let kCFURLVolumeCreationDateKey: string;
  export let kCFURLVolumeIdentifierKey: string;
  export let kCFURLVolumeIsAutomountedKey: string;
  export let kCFURLVolumeIsBrowsableKey: string;
  export let kCFURLVolumeIsEjectableKey: string;
  export let kCFURLVolumeIsEncryptedKey: string;
  export let kCFURLVolumeIsInternalKey: string;
  export let kCFURLVolumeIsJournalingKey: string;
  export let kCFURLVolumeIsLocalKey: string;
  export let kCFURLVolumeIsReadOnlyKey: string;
  export let kCFURLVolumeIsRemovableKey: string;
  export let kCFURLVolumeIsRootFileSystemKey: string;
  export let kCFURLVolumeLocalizedFormatDescriptionKey: string;
  export let kCFURLVolumeLocalizedNameKey: string;
  export let kCFURLVolumeMaximumFileSizeKey: string;
  export let kCFURLVolumeNameKey: string;
  export let kCFURLVolumeResourceCountKey: string;
  export let kCFURLVolumeSupportsAccessPermissionsKey: string;
  export let kCFURLVolumeSupportsAdvisoryFileLockingKey: string;
  export let kCFURLVolumeSupportsCasePreservedNamesKey: string;
  export let kCFURLVolumeSupportsCaseSensitiveNamesKey: string;
  export let kCFURLVolumeSupportsCompressionKey: string;
  export let kCFURLVolumeSupportsExclusiveRenamingKey: string;
  export let kCFURLVolumeSupportsExtendedSecurityKey: string;
  export let kCFURLVolumeSupportsFileCloningKey: string;
  export let kCFURLVolumeSupportsHardLinksKey: string;
  export let kCFURLVolumeSupportsImmutableFilesKey: string;
  export let kCFURLVolumeSupportsJournalingKey: string;
  export let kCFURLVolumeSupportsPersistentIDsKey: string;
  export let kCFURLVolumeSupportsRenamingKey: string;
  export let kCFURLVolumeSupportsRootDirectoryDatesKey: string;
  export let kCFURLVolumeSupportsSparseFilesKey: string;
  export let kCFURLVolumeSupportsSwapRenamingKey: string;
  export let kCFURLVolumeSupportsSymbolicLinksKey: string;
  export let kCFURLVolumeSupportsVolumeSizesKey: string;
  export let kCFURLVolumeSupportsZeroRunsKey: string;
  export let kCFURLVolumeTotalCapacityKey: string;
  export let kCFURLVolumeURLForRemountingKey: string;
  export let kCFURLVolumeURLKey: string;
  export let kCFURLVolumeUUIDStringKey: string;
  export let kCFUserNotificationAlertHeaderKey: string;
  export let kCFUserNotificationAlertMessageKey: string;
  export let kCFUserNotificationAlertTopMostKey: string;
  export let kCFUserNotificationAlternateButtonTitleKey: string;
  export let kCFUserNotificationCheckBoxTitlesKey: string;
  export let kCFUserNotificationDefaultButtonTitleKey: string;
  export let kCFUserNotificationIconURLKey: string;
  export let kCFUserNotificationKeyboardTypesKey: string;
  export let kCFUserNotificationLocalizationURLKey: string;
  export let kCFUserNotificationOtherButtonTitleKey: string;
  export let kCFUserNotificationPopUpSelectionKey: string;
  export let kCFUserNotificationPopUpTitlesKey: string;
  export let kCFUserNotificationProgressIndicatorValueKey: string;
  export let kCFUserNotificationSoundURLKey: string;
  export let kCFUserNotificationTextFieldTitlesKey: string;
  export let kCFUserNotificationTextFieldValuesKey: string;
  export let kCFXMLTreeErrorDescription: string;
  export let kCFXMLTreeErrorLineNumber: string;
  export let kCFXMLTreeErrorLocation: string;
  export let kCFXMLTreeErrorStatusCode: string;
  export let kCGDisplayShowDuplicateLowResolutionModes: string;
  export let kCGFontIndexInvalid: number;
  export let kCGFontIndexMax: number;
  export let kCGGlyphMax: number;
  export let kCGPDFContextAccessPermissions: string;
  export let kCGPDFContextAllowsCopying: string;
  export let kCGPDFContextAllowsPrinting: string;
  export let kCGPDFContextArtBox: string;
  export let kCGPDFContextAuthor: string;
  export let kCGPDFContextBleedBox: string;
  export let kCGPDFContextCreator: string;
  export let kCGPDFContextCropBox: string;
  export let kCGPDFContextEncryptionKeyLength: string;
  export let kCGPDFContextKeywords: string;
  export let kCGPDFContextMediaBox: string;
  export let kCGPDFContextOutputIntent: string;
  export let kCGPDFContextOutputIntents: string;
  export let kCGPDFContextOwnerPassword: string;
  export let kCGPDFContextSubject: string;
  export let kCGPDFContextTitle: string;
  export let kCGPDFContextTrimBox: string;
  export let kCGPDFContextUserPassword: string;
  export let kCGPDFOutlineChildren: string;
  export let kCGPDFOutlineDestination: string;
  export let kCGPDFOutlineDestinationRect: string;
  export let kCGPDFOutlineTitle: string;
  export let kCGPDFXDestinationOutputProfile: string;
  export let kCGPDFXInfo: string;
  export let kCGPDFXOutputCondition: string;
  export let kCGPDFXOutputConditionIdentifier: string;
  export let kCGPDFXOutputIntentSubtype: string;
  export let kCGPDFXRegistryName: string;
  export let kCGWindowAlpha: string;
  export let kCGWindowBackingLocationVideoMemory: string;
  export let kCGWindowBounds: string;
  export let kCGWindowIsOnscreen: string;
  export let kCGWindowLayer: string;
  export let kCGWindowMemoryUsage: string;
  export let kCGWindowName: string;
  export let kCGWindowNumber: string;
  export let kCGWindowOwnerName: string;
  export let kCGWindowOwnerPID: string;
  export let kCGWindowSharingState: string;
  export let kCGWindowStoreType: string;
  export let CIDetectorAccuracy: string;
  export let CIDetectorAccuracyHigh: string;
  export let CIDetectorAccuracyLow: string;
  export let CIDetectorAspectRatio: string;
  export let CIDetectorEyeBlink: string;
  export let CIDetectorFocalLength: string;
  export let CIDetectorImageOrientation: string;
  export let CIDetectorMaxFeatureCount: string;
  export let CIDetectorMinFeatureSize: string;
  export let CIDetectorNumberOfAngles: string;
  export let CIDetectorReturnSubFeatures: string;
  export let CIDetectorSmile: string;
  export let CIDetectorTracking: string;
  export let CIDetectorTypeFace: string;
  export let CIDetectorTypeQRCode: string;
  export let CIDetectorTypeRectangle: string;
  export let CIDetectorTypeText: string;
  export let CIFeatureTypeFace: string;
  export let CIFeatureTypeQRCode: string;
  export let CIFeatureTypeRectangle: string;
  export let CIFeatureTypeText: string;
  export let kCIApplyOptionColorSpace: string;
  export let kCIApplyOptionDefinition: string;
  export let kCIApplyOptionExtent: string;
  export let kCIApplyOptionUserInfo: string;
  export let kCIAttributeClass: string;
  export let kCIAttributeDefault: string;
  export let kCIAttributeDescription: string;
  export let kCIAttributeDisplayName: string;
  export let kCIAttributeFilterAvailable_Mac: string;
  export let kCIAttributeFilterAvailable_iOS: string;
  export let kCIAttributeFilterCategories: string;
  export let kCIAttributeFilterDisplayName: string;
  export let kCIAttributeFilterName: string;
  export let kCIAttributeIdentity: string;
  export let kCIAttributeMax: string;
  export let kCIAttributeMin: string;
  export let kCIAttributeName: string;
  export let kCIAttributeReferenceDocumentation: string;
  export let kCIAttributeSliderMax: string;
  export let kCIAttributeSliderMin: string;
  export let kCIAttributeType: string;
  export let kCIAttributeTypeAngle: string;
  export let kCIAttributeTypeBoolean: string;
  export let kCIAttributeTypeColor: string;
  export let kCIAttributeTypeCount: string;
  export let kCIAttributeTypeDistance: string;
  export let kCIAttributeTypeGradient: string;
  export let kCIAttributeTypeImage: string;
  export let kCIAttributeTypeInteger: string;
  export let kCIAttributeTypeOffset: string;
  export let kCIAttributeTypeOpaqueColor: string;
  export let kCIAttributeTypePosition: string;
  export let kCIAttributeTypePosition3: string;
  export let kCIAttributeTypeRectangle: string;
  export let kCIAttributeTypeScalar: string;
  export let kCIAttributeTypeTime: string;
  export let kCIAttributeTypeTransform: string;
  export let kCICategoryBlur: string;
  export let kCICategoryBuiltIn: string;
  export let kCICategoryColorAdjustment: string;
  export let kCICategoryColorEffect: string;
  export let kCICategoryCompositeOperation: string;
  export let kCICategoryDistortionEffect: string;
  export let kCICategoryFilterGenerator: string;
  export let kCICategoryGenerator: string;
  export let kCICategoryGeometryAdjustment: string;
  export let kCICategoryGradient: string;
  export let kCICategoryHalftoneEffect: string;
  export let kCICategoryHighDynamicRange: string;
  export let kCICategoryInterlaced: string;
  export let kCICategoryNonSquarePixels: string;
  export let kCICategoryReduction: string;
  export let kCICategorySharpen: string;
  export let kCICategoryStillImage: string;
  export let kCICategoryStylize: string;
  export let kCICategoryTileEffect: string;
  export let kCICategoryTransition: string;
  export let kCICategoryVideo: string;
  export let kCIFilterGeneratorExportedKey: string;
  export let kCIFilterGeneratorExportedKeyName: string;
  export let kCIFilterGeneratorExportedKeyTargetObject: string;
  export let kCIInputAmountKey: string;
  export let kCIInputAngleKey: string;
  export let kCIInputAspectRatioKey: string;
  export let kCIInputBackgroundImageKey: string;
  export let kCIInputBiasKey: string;
  export let kCIInputBrightnessKey: string;
  export let kCIInputCenterKey: string;
  export let kCIInputColorKey: string;
  export let kCIInputContrastKey: string;
  export let kCIInputDepthImageKey: string;
  export let kCIInputDisparityImageKey: string;
  export let kCIInputEVKey: string;
  export let kCIInputEnableEDRModeKey: string;
  export let kCIInputExtentKey: string;
  export let kCIInputGradientImageKey: string;
  export let kCIInputImageKey: string;
  export let kCIInputIntensityKey: string;
  export let kCIInputMaskImageKey: string;
  export let kCIInputMatteImageKey: string;
  export let kCIInputRadiusKey: string;
  export let kCIInputRefractionKey: string;
  export let kCIInputSaturationKey: string;
  export let kCIInputScaleKey: string;
  export let kCIInputShadingImageKey: string;
  export let kCIInputSharpnessKey: string;
  export let kCIInputTargetImageKey: string;
  export let kCIInputTimeKey: string;
  export let kCIInputTransformKey: string;
  export let kCIInputVersionKey: string;
  export let kCIInputWeightsKey: string;
  export let kCIInputWidthKey: string;
  export let kCIOutputImageKey: string;
  export let kCISamplerAffineMatrix: string;
  export let kCISamplerColorSpace: string;
  export let kCISamplerFilterLinear: string;
  export let kCISamplerFilterMode: string;
  export let kCISamplerFilterNearest: string;
  export let kCISamplerWrapBlack: string;
  export let kCISamplerWrapClamp: string;
  export let kCISamplerWrapMode: string;
  export let kCIUIParameterSet: string;
  export let kCIUISetAdvanced: string;
  export let kCIUISetBasic: string;
  export let kCIUISetDevelopment: string;
  export let kCIUISetIntermediate: string;
  export let kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha: string;
  export let kCMFormatDescriptionAlphaChannelMode_StraightAlpha: string;
  export let kCMFormatDescriptionChromaLocation_Bottom: string;
  export let kCMFormatDescriptionChromaLocation_BottomLeft: string;
  export let kCMFormatDescriptionChromaLocation_Center: string;
  export let kCMFormatDescriptionChromaLocation_DV420: string;
  export let kCMFormatDescriptionChromaLocation_Left: string;
  export let kCMFormatDescriptionChromaLocation_Top: string;
  export let kCMFormatDescriptionChromaLocation_TopLeft: string;
  export let kCMFormatDescriptionColorPrimaries_DCI_P3: string;
  export let kCMFormatDescriptionColorPrimaries_EBU_3213: string;
  export let kCMFormatDescriptionColorPrimaries_ITU_R_2020: string;
  export let kCMFormatDescriptionColorPrimaries_ITU_R_709_2: string;
  export let kCMFormatDescriptionColorPrimaries_P22: string;
  export let kCMFormatDescriptionColorPrimaries_P3_D65: string;
  export let kCMFormatDescriptionColorPrimaries_SMPTE_C: string;
  export let kCMFormatDescriptionConformsToMPEG2VideoProfile: string;
  export let kCMFormatDescriptionExtensionKey_MetadataKeyTable: string;
  export let kCMFormatDescriptionExtension_AlphaChannelMode: string;
  export let kCMFormatDescriptionExtension_AlternativeTransferCharacteristics: string;
  export let kCMFormatDescriptionExtension_AuxiliaryTypeInfo: string;
  export let kCMFormatDescriptionExtension_BytesPerRow: string;
  export let kCMFormatDescriptionExtension_ChromaLocationBottomField: string;
  export let kCMFormatDescriptionExtension_ChromaLocationTopField: string;
  export let kCMFormatDescriptionExtension_CleanAperture: string;
  export let kCMFormatDescriptionExtension_ColorPrimaries: string;
  export let kCMFormatDescriptionExtension_ContainsAlphaChannel: string;
  export let kCMFormatDescriptionExtension_ContentLightLevelInfo: string;
  export let kCMFormatDescriptionExtension_Depth: string;
  export let kCMFormatDescriptionExtension_FieldCount: string;
  export let kCMFormatDescriptionExtension_FieldDetail: string;
  export let kCMFormatDescriptionExtension_FormatName: string;
  export let kCMFormatDescriptionExtension_FullRangeVideo: string;
  export let kCMFormatDescriptionExtension_GammaLevel: string;
  export let kCMFormatDescriptionExtension_ICCProfile: string;
  export let kCMFormatDescriptionExtension_MasteringDisplayColorVolume: string;
  export let kCMFormatDescriptionExtension_OriginalCompressionSettings: string;
  export let kCMFormatDescriptionExtension_PixelAspectRatio: string;
  export let kCMFormatDescriptionExtension_RevisionLevel: string;
  export let kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms: string;
  export let kCMFormatDescriptionExtension_SpatialQuality: string;
  export let kCMFormatDescriptionExtension_TemporalQuality: string;
  export let kCMFormatDescriptionExtension_TransferFunction: string;
  export let kCMFormatDescriptionExtension_Vendor: string;
  export let kCMFormatDescriptionExtension_VerbatimISOSampleEntry: string;
  export let kCMFormatDescriptionExtension_VerbatimImageDescription: string;
  export let kCMFormatDescriptionExtension_VerbatimSampleDescription: string;
  export let kCMFormatDescriptionExtension_Version: string;
  export let kCMFormatDescriptionExtension_YCbCrMatrix: string;
  export let kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly: string;
  export let kCMFormatDescriptionFieldDetail_SpatialFirstLineLate: string;
  export let kCMFormatDescriptionFieldDetail_TemporalBottomFirst: string;
  export let kCMFormatDescriptionFieldDetail_TemporalTopFirst: string;
  export let kCMFormatDescriptionKey_CleanApertureHeight: string;
  export let kCMFormatDescriptionKey_CleanApertureHeightRational: string;
  export let kCMFormatDescriptionKey_CleanApertureHorizontalOffset: string;
  export let kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational: string;
  export let kCMFormatDescriptionKey_CleanApertureVerticalOffset: string;
  export let kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational: string;
  export let kCMFormatDescriptionKey_CleanApertureWidth: string;
  export let kCMFormatDescriptionKey_CleanApertureWidthRational: string;
  export let kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing: string;
  export let kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing: string;
  export let kCMFormatDescriptionTransferFunction_ITU_R_2020: string;
  export let kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG: string;
  export let kCMFormatDescriptionTransferFunction_ITU_R_709_2: string;
  export let kCMFormatDescriptionTransferFunction_Linear: string;
  export let kCMFormatDescriptionTransferFunction_SMPTE_240M_1995: string;
  export let kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ: string;
  export let kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1: string;
  export let kCMFormatDescriptionTransferFunction_UseGamma: string;
  export let kCMFormatDescriptionTransferFunction_sRGB: string;
  export let kCMFormatDescriptionVendor_Apple: string;
  export let kCMFormatDescriptionYCbCrMatrix_ITU_R_2020: string;
  export let kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4: string;
  export let kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2: string;
  export let kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995: string;
  export let kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags: string;
  export let kCMHEVCTemporalLevelInfoKey_LevelIndex: string;
  export let kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags: string;
  export let kCMHEVCTemporalLevelInfoKey_ProfileIndex: string;
  export let kCMHEVCTemporalLevelInfoKey_ProfileSpace: string;
  export let kCMHEVCTemporalLevelInfoKey_TemporalLevel: string;
  export let kCMHEVCTemporalLevelInfoKey_TierFlag: string;
  export let kCMMemoryPoolOption_AgeOutPeriod: string;
  export let kCMMetadataBaseDataType_AffineTransformF64: string;
  export let kCMMetadataBaseDataType_BMP: string;
  export let kCMMetadataBaseDataType_DimensionsF32: string;
  export let kCMMetadataBaseDataType_Float32: string;
  export let kCMMetadataBaseDataType_Float64: string;
  export let kCMMetadataBaseDataType_GIF: string;
  export let kCMMetadataBaseDataType_JPEG: string;
  export let kCMMetadataBaseDataType_JSON: string;
  export let kCMMetadataBaseDataType_PNG: string;
  export let kCMMetadataBaseDataType_PerspectiveTransformF64: string;
  export let kCMMetadataBaseDataType_PointF32: string;
  export let kCMMetadataBaseDataType_PolygonF32: string;
  export let kCMMetadataBaseDataType_PolylineF32: string;
  export let kCMMetadataBaseDataType_RawData: string;
  export let kCMMetadataBaseDataType_RectF32: string;
  export let kCMMetadataBaseDataType_SInt16: string;
  export let kCMMetadataBaseDataType_SInt32: string;
  export let kCMMetadataBaseDataType_SInt64: string;
  export let kCMMetadataBaseDataType_SInt8: string;
  export let kCMMetadataBaseDataType_UInt16: string;
  export let kCMMetadataBaseDataType_UInt32: string;
  export let kCMMetadataBaseDataType_UInt64: string;
  export let kCMMetadataBaseDataType_UInt8: string;
  export let kCMMetadataBaseDataType_UTF16: string;
  export let kCMMetadataBaseDataType_UTF8: string;
  export let kCMMetadataDataType_QuickTimeMetadataDirection: string;
  export let kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709: string;
  export let kCMMetadataFormatDescriptionKey_ConformingDataTypes: string;
  export let kCMMetadataFormatDescriptionKey_DataType: string;
  export let kCMMetadataFormatDescriptionKey_DataTypeNamespace: string;
  export let kCMMetadataFormatDescriptionKey_LanguageTag: string;
  export let kCMMetadataFormatDescriptionKey_LocalID: string;
  export let kCMMetadataFormatDescriptionKey_Namespace: string;
  export let kCMMetadataFormatDescriptionKey_SetupData: string;
  export let kCMMetadataFormatDescriptionKey_StructuralDependency: string;
  export let kCMMetadataFormatDescriptionKey_Value: string;
  export let kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType: string;
  export let kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag: string;
  export let kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier: string;
  export let kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData: string;
  export let kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency: string;
  export let kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag: string;
  export let kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing: string;
  export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform: string;
  export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions: string;
  export let kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709: string;
  export let kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform: string;
  export let kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation: string;
  export let kCMMetadataKeySpace_HLSDateRange: string;
  export let kCMMetadataKeySpace_ID3: string;
  export let kCMMetadataKeySpace_ISOUserData: string;
  export let kCMMetadataKeySpace_Icy: string;
  export let kCMMetadataKeySpace_QuickTimeMetadata: string;
  export let kCMMetadataKeySpace_QuickTimeUserData: string;
  export let kCMMetadataKeySpace_iTunes: string;
  export let kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount: string;
  export let kCMSampleAttachmentKey_DependsOnOthers: string;
  export let kCMSampleAttachmentKey_DisplayImmediately: string;
  export let kCMSampleAttachmentKey_DoNotDisplay: string;
  export let kCMSampleAttachmentKey_EarlierDisplayTimesAllowed: string;
  export let kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess: string;
  export let kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType: string;
  export let kCMSampleAttachmentKey_HEVCTemporalLevelInfo: string;
  export let kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess: string;
  export let kCMSampleAttachmentKey_HasRedundantCoding: string;
  export let kCMSampleAttachmentKey_IsDependedOnByOthers: string;
  export let kCMSampleAttachmentKey_NotSync: string;
  export let kCMSampleAttachmentKey_PartialSync: string;
  export let kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix: string;
  export let kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately: string;
  export let kCMSampleBufferAttachmentKey_DrainAfterDecoding: string;
  export let kCMSampleBufferAttachmentKey_DroppedFrameReason: string;
  export let kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo: string;
  export let kCMSampleBufferAttachmentKey_EmptyMedia: string;
  export let kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration: string;
  export let kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence: string;
  export let kCMSampleBufferAttachmentKey_ForceKeyFrame: string;
  export let kCMSampleBufferAttachmentKey_GradualDecoderRefresh: string;
  export let kCMSampleBufferAttachmentKey_PermanentEmptyMedia: string;
  export let kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed: string;
  export let kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding: string;
  export let kCMSampleBufferAttachmentKey_ResumeOutput: string;
  export let kCMSampleBufferAttachmentKey_Reverse: string;
  export let kCMSampleBufferAttachmentKey_SampleReferenceByteOffset: string;
  export let kCMSampleBufferAttachmentKey_SampleReferenceURL: string;
  export let kCMSampleBufferAttachmentKey_SpeedMultiplier: string;
  export let kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo: string;
  export let kCMSampleBufferAttachmentKey_TransitionID: string;
  export let kCMSampleBufferAttachmentKey_TrimDurationAtEnd: string;
  export let kCMSampleBufferAttachmentKey_TrimDurationAtStart: string;
  export let kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS: string;
  export let kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS: string;
  export let kCMSampleBufferConduitNotificationParameter_ResumeTag: string;
  export let kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange: string;
  export let kCMSampleBufferConduitNotification_InhibitOutputUntil: string;
  export let kCMSampleBufferConduitNotification_ResetOutput: string;
  export let kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged: string;
  export let kCMSampleBufferConsumerNotification_BufferConsumed: string;
  export let kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch: string;
  export let kCMSampleBufferDroppedFrameReason_Discontinuity: string;
  export let kCMSampleBufferDroppedFrameReason_FrameWasLate: string;
  export let kCMSampleBufferDroppedFrameReason_OutOfBuffers: string;
  export let kCMSampleBufferLensStabilizationInfo_Active: string;
  export let kCMSampleBufferLensStabilizationInfo_Off: string;
  export let kCMSampleBufferLensStabilizationInfo_OutOfRange: string;
  export let kCMSampleBufferLensStabilizationInfo_Unavailable: string;
  export let kCMSampleBufferNotificationParameter_OSStatus: string;
  export let kCMSampleBufferNotification_DataBecameReady: string;
  export let kCMSampleBufferNotification_DataFailed: string;
  export let kCMTextFormatDescriptionColor_Alpha: string;
  export let kCMTextFormatDescriptionColor_Blue: string;
  export let kCMTextFormatDescriptionColor_Green: string;
  export let kCMTextFormatDescriptionColor_Red: string;
  export let kCMTextFormatDescriptionExtension_BackgroundColor: string;
  export let kCMTextFormatDescriptionExtension_DefaultFontName: string;
  export let kCMTextFormatDescriptionExtension_DefaultStyle: string;
  export let kCMTextFormatDescriptionExtension_DefaultTextBox: string;
  export let kCMTextFormatDescriptionExtension_DisplayFlags: string;
  export let kCMTextFormatDescriptionExtension_FontTable: string;
  export let kCMTextFormatDescriptionExtension_HorizontalJustification: string;
  export let kCMTextFormatDescriptionExtension_TextJustification: string;
  export let kCMTextFormatDescriptionExtension_VerticalJustification: string;
  export let kCMTextFormatDescriptionRect_Bottom: string;
  export let kCMTextFormatDescriptionRect_Left: string;
  export let kCMTextFormatDescriptionRect_Right: string;
  export let kCMTextFormatDescriptionRect_Top: string;
  export let kCMTextFormatDescriptionStyle_Ascent: string;
  export let kCMTextFormatDescriptionStyle_EndChar: string;
  export let kCMTextFormatDescriptionStyle_Font: string;
  export let kCMTextFormatDescriptionStyle_FontFace: string;
  export let kCMTextFormatDescriptionStyle_FontSize: string;
  export let kCMTextFormatDescriptionStyle_ForegroundColor: string;
  export let kCMTextFormatDescriptionStyle_Height: string;
  export let kCMTextFormatDescriptionStyle_StartChar: string;
  export let kCMTextMarkupAlignmentType_End: string;
  export let kCMTextMarkupAlignmentType_Left: string;
  export let kCMTextMarkupAlignmentType_Middle: string;
  export let kCMTextMarkupAlignmentType_Right: string;
  export let kCMTextMarkupAlignmentType_Start: string;
  export let kCMTextMarkupAttribute_Alignment: string;
  export let kCMTextMarkupAttribute_BackgroundColorARGB: string;
  export let kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight: string;
  export let kCMTextMarkupAttribute_BoldStyle: string;
  export let kCMTextMarkupAttribute_CharacterBackgroundColorARGB: string;
  export let kCMTextMarkupAttribute_CharacterEdgeStyle: string;
  export let kCMTextMarkupAttribute_FontFamilyName: string;
  export let kCMTextMarkupAttribute_ForegroundColorARGB: string;
  export let kCMTextMarkupAttribute_GenericFontFamilyName: string;
  export let kCMTextMarkupAttribute_ItalicStyle: string;
  export let kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection: string;
  export let kCMTextMarkupAttribute_RelativeFontSize: string;
  export let kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection: string;
  export let kCMTextMarkupAttribute_UnderlineStyle: string;
  export let kCMTextMarkupAttribute_VerticalLayout: string;
  export let kCMTextMarkupAttribute_WritingDirectionSizePercentage: string;
  export let kCMTextMarkupCharacterEdgeStyle_Depressed: string;
  export let kCMTextMarkupCharacterEdgeStyle_DropShadow: string;
  export let kCMTextMarkupCharacterEdgeStyle_None: string;
  export let kCMTextMarkupCharacterEdgeStyle_Raised: string;
  export let kCMTextMarkupCharacterEdgeStyle_Uniform: string;
  export let kCMTextMarkupGenericFontName_Casual: string;
  export let kCMTextMarkupGenericFontName_Cursive: string;
  export let kCMTextMarkupGenericFontName_Default: string;
  export let kCMTextMarkupGenericFontName_Fantasy: string;
  export let kCMTextMarkupGenericFontName_Monospace: string;
  export let kCMTextMarkupGenericFontName_MonospaceSansSerif: string;
  export let kCMTextMarkupGenericFontName_MonospaceSerif: string;
  export let kCMTextMarkupGenericFontName_ProportionalSansSerif: string;
  export let kCMTextMarkupGenericFontName_ProportionalSerif: string;
  export let kCMTextMarkupGenericFontName_SansSerif: string;
  export let kCMTextMarkupGenericFontName_Serif: string;
  export let kCMTextMarkupGenericFontName_SmallCapital: string;
  export let kCMTextVerticalLayout_LeftToRight: string;
  export let kCMTextVerticalLayout_RightToLeft: string;
  export let kCMTimeCodeFormatDescriptionExtension_SourceReferenceName: string;
  export let kCMTimeCodeFormatDescriptionKey_LangCode: string;
  export let kCMTimeCodeFormatDescriptionKey_Value: string;
  export let kCMTimeEpochKey: string;
  export let kCMTimeFlagsKey: string;
  export let kCMTimeMappingSourceKey: string;
  export let kCMTimeMappingTargetKey: string;
  export let kCMTimeRangeDurationKey: string;
  export let kCMTimeRangeStartKey: string;
  export let kCMTimeScaleKey: string;
  export let kCMTimeValueKey: string;
  export let kCMTimebaseNotificationKey_EventTime: string;
  export let kCMTimebaseNotification_EffectiveRateChanged: string;
  export let kCMTimebaseNotification_TimeJumped: string;
  export let kCMIOBlockBufferAttachmentKey_CVPixelBufferReference: string;
  export let kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp: string;
  export let kCMIOSampleBufferAttachmentKey_ClientSequenceID: string;
  export let kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer: string;
  export let kCMIOSampleBufferAttachmentKey_DiscontinuityFlags: string;
  export let kCMIOSampleBufferAttachmentKey_HDV1_PackData: string;
  export let kCMIOSampleBufferAttachmentKey_HDV2_VAUX: string;
  export let kCMIOSampleBufferAttachmentKey_HostTime: string;
  export let kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers: string;
  export let kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp: string;
  export let kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount: string;
  export let kCMIOSampleBufferAttachmentKey_NoDataMarker: string;
  export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer: string;
  export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP: string;
  export let kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo: string;
  export let kCMIOSampleBufferAttachmentKey_RepeatedBufferContents: string;
  export let kCMIOSampleBufferAttachmentKey_SMPTETime: string;
  export let kCMIOSampleBufferAttachmentKey_SequenceNumber: string;
  export let kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent: string;
  export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState: string;
  export let NSAppleEventTimeOutDefault: number;
  export let NSAppleEventTimeOutNone: number;
  export let NSAssertionHandlerKey: string;
  export let NSCocoaErrorDomain: string;
  export let NSDeallocateZombies: boolean;
  export let NSDebugDescriptionErrorKey: string;
  export let NSDebugEnabled: boolean;
  export let NSEdgeInsetsZero: NSEdgeInsets;
  export let NSExtensionItemAttachmentsKey: string;
  export let NSExtensionItemAttributedContentTextKey: string;
  export let NSExtensionItemAttributedTitleKey: string;
  export let NSExtensionItemsAndErrorsKey: string;
  export let NSExtensionJavaScriptPreprocessingResultsKey: string;
  export let NSFileHandleNotificationDataItem: string;
  export let NSFileHandleNotificationFileHandleItem: string;
  export let NSFileManagerUnmountDissentingProcessIdentifierErrorKey: string;
  export let NSFilePathErrorKey: string;
  export let NSFoundationVersionNumber: number;
  export let NSGrammarCorrections: string;
  export let NSGrammarRange: string;
  export let NSGrammarUserDescription: string;
  export let NSHashTableCopyIn: NSPointerFunctions.Options;
  export let NSHashTableObjectPointerPersonality: NSPointerFunctions.Options;
  export let NSHashTableStrongMemory: NSPointerFunctions.Options;
  export let NSHashTableWeakMemory: NSPointerFunctions.Options;
  export let NSHelpAnchorErrorKey: string;
  export let NSIntegerHashCallBacks: NSHashTableCallBacks;
  export let NSIntegerMapKeyCallBacks: NSMapTableKeyCallBacks;
  export let NSIntegerMapValueCallBacks: NSMapTableValueCallBacks;
  export let NSItemProviderPreferredImageSizeKey: string;
  export let NSKeepAllocationStatistics: boolean;
  export let NSKeyedArchiveRootObjectKey: string;
  export let NSLoadedClasses: string;
  export let NSLocalizedDescriptionKey: string;
  export let NSLocalizedFailureErrorKey: string;
  export let NSLocalizedFailureReasonErrorKey: string;
  export let NSLocalizedRecoveryOptionsErrorKey: string;
  export let NSLocalizedRecoverySuggestionErrorKey: string;
  export let NSMachErrorDomain: string;
  export let NSMapTableCopyIn: NSPointerFunctions.Options;
  export let NSMapTableObjectPointerPersonality: NSPointerFunctions.Options;
  export let NSMapTableStrongMemory: NSPointerFunctions.Options;
  export let NSMapTableWeakMemory: NSPointerFunctions.Options;
  export let NSMetadataItemAcquisitionMakeKey: string;
  export let NSMetadataItemAcquisitionModelKey: string;
  export let NSMetadataItemAlbumKey: string;
  export let NSMetadataItemAltitudeKey: string;
  export let NSMetadataItemApertureKey: string;
  export let NSMetadataItemAppleLoopDescriptorsKey: string;
  export let NSMetadataItemAppleLoopsKeyFilterTypeKey: string;
  export let NSMetadataItemAppleLoopsLoopModeKey: string;
  export let NSMetadataItemAppleLoopsRootKeyKey: string;
  export let NSMetadataItemApplicationCategoriesKey: string;
  export let NSMetadataItemAttributeChangeDateKey: string;
  export let NSMetadataItemAudiencesKey: string;
  export let NSMetadataItemAudioBitRateKey: string;
  export let NSMetadataItemAudioChannelCountKey: string;
  export let NSMetadataItemAudioEncodingApplicationKey: string;
  export let NSMetadataItemAudioSampleRateKey: string;
  export let NSMetadataItemAudioTrackNumberKey: string;
  export let NSMetadataItemAuthorAddressesKey: string;
  export let NSMetadataItemAuthorEmailAddressesKey: string;
  export let NSMetadataItemAuthorsKey: string;
  export let NSMetadataItemBitsPerSampleKey: string;
  export let NSMetadataItemCFBundleIdentifierKey: string;
  export let NSMetadataItemCameraOwnerKey: string;
  export let NSMetadataItemCityKey: string;
  export let NSMetadataItemCodecsKey: string;
  export let NSMetadataItemColorSpaceKey: string;
  export let NSMetadataItemCommentKey: string;
  export let NSMetadataItemComposerKey: string;
  export let NSMetadataItemContactKeywordsKey: string;
  export let NSMetadataItemContentCreationDateKey: string;
  export let NSMetadataItemContentModificationDateKey: string;
  export let NSMetadataItemContentTypeKey: string;
  export let NSMetadataItemContentTypeTreeKey: string;
  export let NSMetadataItemContributorsKey: string;
  export let NSMetadataItemCopyrightKey: string;
  export let NSMetadataItemCountryKey: string;
  export let NSMetadataItemCoverageKey: string;
  export let NSMetadataItemCreatorKey: string;
  export let NSMetadataItemDateAddedKey: string;
  export let NSMetadataItemDeliveryTypeKey: string;
  export let NSMetadataItemDescriptionKey: string;
  export let NSMetadataItemDirectorKey: string;
  export let NSMetadataItemDisplayNameKey: string;
  export let NSMetadataItemDownloadedDateKey: string;
  export let NSMetadataItemDueDateKey: string;
  export let NSMetadataItemDurationSecondsKey: string;
  export let NSMetadataItemEXIFGPSVersionKey: string;
  export let NSMetadataItemEXIFVersionKey: string;
  export let NSMetadataItemEditorsKey: string;
  export let NSMetadataItemEmailAddressesKey: string;
  export let NSMetadataItemEncodingApplicationsKey: string;
  export let NSMetadataItemExecutableArchitecturesKey: string;
  export let NSMetadataItemExecutablePlatformKey: string;
  export let NSMetadataItemExposureModeKey: string;
  export let NSMetadataItemExposureProgramKey: string;
  export let NSMetadataItemExposureTimeSecondsKey: string;
  export let NSMetadataItemExposureTimeStringKey: string;
  export let NSMetadataItemFNumberKey: string;
  export let NSMetadataItemFSContentChangeDateKey: string;
  export let NSMetadataItemFSCreationDateKey: string;
  export let NSMetadataItemFSNameKey: string;
  export let NSMetadataItemFSSizeKey: string;
  export let NSMetadataItemFinderCommentKey: string;
  export let NSMetadataItemFlashOnOffKey: string;
  export let NSMetadataItemFocalLength35mmKey: string;
  export let NSMetadataItemFocalLengthKey: string;
  export let NSMetadataItemFontsKey: string;
  export let NSMetadataItemGPSAreaInformationKey: string;
  export let NSMetadataItemGPSDOPKey: string;
  export let NSMetadataItemGPSDateStampKey: string;
  export let NSMetadataItemGPSDestBearingKey: string;
  export let NSMetadataItemGPSDestDistanceKey: string;
  export let NSMetadataItemGPSDestLatitudeKey: string;
  export let NSMetadataItemGPSDestLongitudeKey: string;
  export let NSMetadataItemGPSDifferentalKey: string;
  export let NSMetadataItemGPSMapDatumKey: string;
  export let NSMetadataItemGPSMeasureModeKey: string;
  export let NSMetadataItemGPSProcessingMethodKey: string;
  export let NSMetadataItemGPSStatusKey: string;
  export let NSMetadataItemGPSTrackKey: string;
  export let NSMetadataItemGenreKey: string;
  export let NSMetadataItemHasAlphaChannelKey: string;
  export let NSMetadataItemHeadlineKey: string;
  export let NSMetadataItemISOSpeedKey: string;
  export let NSMetadataItemIdentifierKey: string;
  export let NSMetadataItemImageDirectionKey: string;
  export let NSMetadataItemInformationKey: string;
  export let NSMetadataItemInstantMessageAddressesKey: string;
  export let NSMetadataItemInstructionsKey: string;
  export let NSMetadataItemIsApplicationManagedKey: string;
  export let NSMetadataItemIsGeneralMIDISequenceKey: string;
  export let NSMetadataItemIsLikelyJunkKey: string;
  export let NSMetadataItemIsUbiquitousKey: string;
  export let NSMetadataItemKeySignatureKey: string;
  export let NSMetadataItemKeywordsKey: string;
  export let NSMetadataItemKindKey: string;
  export let NSMetadataItemLanguagesKey: string;
  export let NSMetadataItemLastUsedDateKey: string;
  export let NSMetadataItemLatitudeKey: string;
  export let NSMetadataItemLayerNamesKey: string;
  export let NSMetadataItemLensModelKey: string;
  export let NSMetadataItemLongitudeKey: string;
  export let NSMetadataItemLyricistKey: string;
  export let NSMetadataItemMaxApertureKey: string;
  export let NSMetadataItemMediaTypesKey: string;
  export let NSMetadataItemMeteringModeKey: string;
  export let NSMetadataItemMusicalGenreKey: string;
  export let NSMetadataItemMusicalInstrumentCategoryKey: string;
  export let NSMetadataItemMusicalInstrumentNameKey: string;
  export let NSMetadataItemNamedLocationKey: string;
  export let NSMetadataItemNumberOfPagesKey: string;
  export let NSMetadataItemOrganizationsKey: string;
  export let NSMetadataItemOrientationKey: string;
  export let NSMetadataItemOriginalFormatKey: string;
  export let NSMetadataItemOriginalSourceKey: string;
  export let NSMetadataItemPageHeightKey: string;
  export let NSMetadataItemPageWidthKey: string;
  export let NSMetadataItemParticipantsKey: string;
  export let NSMetadataItemPathKey: string;
  export let NSMetadataItemPerformersKey: string;
  export let NSMetadataItemPhoneNumbersKey: string;
  export let NSMetadataItemPixelCountKey: string;
  export let NSMetadataItemPixelHeightKey: string;
  export let NSMetadataItemPixelWidthKey: string;
  export let NSMetadataItemProducerKey: string;
  export let NSMetadataItemProfileNameKey: string;
  export let NSMetadataItemProjectsKey: string;
  export let NSMetadataItemPublishersKey: string;
  export let NSMetadataItemRecipientAddressesKey: string;
  export let NSMetadataItemRecipientEmailAddressesKey: string;
  export let NSMetadataItemRecipientsKey: string;
  export let NSMetadataItemRecordingDateKey: string;
  export let NSMetadataItemRecordingYearKey: string;
  export let NSMetadataItemRedEyeOnOffKey: string;
  export let NSMetadataItemResolutionHeightDPIKey: string;
  export let NSMetadataItemResolutionWidthDPIKey: string;
  export let NSMetadataItemRightsKey: string;
  export let NSMetadataItemSecurityMethodKey: string;
  export let NSMetadataItemSpeedKey: string;
  export let NSMetadataItemStarRatingKey: string;
  export let NSMetadataItemStateOrProvinceKey: string;
  export let NSMetadataItemStreamableKey: string;
  export let NSMetadataItemSubjectKey: string;
  export let NSMetadataItemTempoKey: string;
  export let NSMetadataItemTextContentKey: string;
  export let NSMetadataItemThemeKey: string;
  export let NSMetadataItemTimeSignatureKey: string;
  export let NSMetadataItemTimestampKey: string;
  export let NSMetadataItemTitleKey: string;
  export let NSMetadataItemTotalBitRateKey: string;
  export let NSMetadataItemURLKey: string;
  export let NSMetadataItemVersionKey: string;
  export let NSMetadataItemVideoBitRateKey: string;
  export let NSMetadataItemWhereFromsKey: string;
  export let NSMetadataItemWhiteBalanceKey: string;
  export let NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope: string;
  export let NSMetadataQueryIndexedLocalComputerScope: string;
  export let NSMetadataQueryIndexedNetworkScope: string;
  export let NSMetadataQueryLocalComputerScope: string;
  export let NSMetadataQueryNetworkScope: string;
  export let NSMetadataQueryResultContentRelevanceAttribute: string;
  export let NSMetadataQueryUbiquitousDataScope: string;
  export let NSMetadataQueryUbiquitousDocumentsScope: string;
  export let NSMetadataQueryUpdateAddedItemsKey: string;
  export let NSMetadataQueryUpdateChangedItemsKey: string;
  export let NSMetadataQueryUpdateRemovedItemsKey: string;
  export let NSMetadataQueryUserHomeScope: string;
  export let NSMetadataUbiquitousItemContainerDisplayNameKey: string;
  export let NSMetadataUbiquitousItemDownloadRequestedKey: string;
  export let NSMetadataUbiquitousItemDownloadingErrorKey: string;
  export let NSMetadataUbiquitousItemDownloadingStatusCurrent: string;
  export let NSMetadataUbiquitousItemDownloadingStatusDownloaded: string;
  export let NSMetadataUbiquitousItemDownloadingStatusKey: string;
  export let NSMetadataUbiquitousItemDownloadingStatusNotDownloaded: string;
  export let NSMetadataUbiquitousItemHasUnresolvedConflictsKey: string;
  export let NSMetadataUbiquitousItemIsDownloadingKey: string;
  export let NSMetadataUbiquitousItemIsExternalDocumentKey: string;
  export let NSMetadataUbiquitousItemIsSharedKey: string;
  export let NSMetadataUbiquitousItemIsUploadedKey: string;
  export let NSMetadataUbiquitousItemIsUploadingKey: string;
  export let NSMetadataUbiquitousItemPercentDownloadedKey: string;
  export let NSMetadataUbiquitousItemPercentUploadedKey: string;
  export let NSMetadataUbiquitousItemURLInLocalContainerKey: string;
  export let NSMetadataUbiquitousItemUploadingErrorKey: string;
  export let NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey: string;
  export let NSMetadataUbiquitousSharedItemCurrentUserRoleKey: string;
  export let NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey: string;
  export let NSMetadataUbiquitousSharedItemOwnerNameComponentsKey: string;
  export let NSMetadataUbiquitousSharedItemPermissionsReadOnly: string;
  export let NSMetadataUbiquitousSharedItemPermissionsReadWrite: string;
  export let NSMetadataUbiquitousSharedItemRoleOwner: string;
  export let NSMetadataUbiquitousSharedItemRoleParticipant: string;
  export let NSNonOwnedPointerHashCallBacks: NSHashTableCallBacks;
  export let NSNonOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
  export let NSNonOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
  export let NSNonOwnedPointerOrNullMapKeyCallBacks: NSMapTableKeyCallBacks;
  export let NSNonRetainedObjectHashCallBacks: NSHashTableCallBacks;
  export let NSNonRetainedObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
  export let NSNonRetainedObjectMapValueCallBacks: NSMapTableValueCallBacks;
  export let NSNotFound: number;
  export let NSNotificationDeliverImmediately: DistributedNotificationCenter.Options;
  export let NSNotificationPostToAllSessions: DistributedNotificationCenter.Options;
  export let NSOSStatusErrorDomain: string;
  export let NSObjectHashCallBacks: NSHashTableCallBacks;
  export let NSObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
  export let NSObjectMapValueCallBacks: NSMapTableValueCallBacks;
  export let NSOperationNotSupportedForKeyException: string;
  export let NSOwnedObjectIdentityHashCallBacks: NSHashTableCallBacks;
  export let NSOwnedPointerHashCallBacks: NSHashTableCallBacks;
  export let NSOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
  export let NSOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
  export let NSPOSIXErrorDomain: string;
  export let NSPersonNameComponentDelimiter: string;
  export let NSPersonNameComponentFamilyName: string;
  export let NSPersonNameComponentGivenName: string;
  export let NSPersonNameComponentKey: string;
  export let NSPersonNameComponentMiddleName: string;
  export let NSPersonNameComponentNickname: string;
  export let NSPersonNameComponentPrefix: string;
  export let NSPersonNameComponentSuffix: string;
  export let NSPointerToStructHashCallBacks: NSHashTableCallBacks;
  export let NSRecoveryAttempterErrorKey: string;
  export let NSStreamSOCKSErrorDomain: string;
  export let NSStreamSocketSSLErrorDomain: string;
  export let NSStringEncodingErrorKey: string;
  export let NSURLAuthenticationMethodClientCertificate: string;
  export let NSURLAuthenticationMethodDefault: string;
  export let NSURLAuthenticationMethodHTMLForm: string;
  export let NSURLAuthenticationMethodHTTPBasic: string;
  export let NSURLAuthenticationMethodHTTPDigest: string;
  export let NSURLAuthenticationMethodNTLM: string;
  export let NSURLAuthenticationMethodNegotiate: string;
  export let NSURLAuthenticationMethodServerTrust: string;
  export let NSURLCredentialStorageRemoveSynchronizableCredentials: string;
  export let NSURLErrorBackgroundTaskCancelledReasonKey: string;
  export let NSURLErrorDomain: string;
  export let NSURLErrorFailingURLErrorKey: string;
  export let NSURLErrorFailingURLPeerTrustErrorKey: string;
  export let NSURLErrorFailingURLStringErrorKey: string;
  export let NSURLErrorKey: string;
  export let NSURLErrorNetworkUnavailableReasonKey: string;
  export let NSURLFileScheme: string;
  export let NSURLProtectionSpaceFTP: string;
  export let NSURLProtectionSpaceFTPProxy: string;
  export let NSURLProtectionSpaceHTTP: string;
  export let NSURLProtectionSpaceHTTPProxy: string;
  export let NSURLProtectionSpaceHTTPS: string;
  export let NSURLProtectionSpaceHTTPSProxy: string;
  export let NSURLProtectionSpaceSOCKSProxy: string;
  export let NSURLSessionDownloadTaskResumeData: string;
  export let NSURLSessionTransferSizeUnknown: number;
  export let NSUbiquitousKeyValueStoreChangeReasonKey: string;
  export let NSUbiquitousKeyValueStoreChangedKeysKey: string;
  export let NSUnderlyingErrorKey: string;
  export let NSUndoCloseGroupingRunLoopOrdering: number;
  export let NSUndoManagerGroupIsDiscardableKey: string;
  export let NSUserActivityTypeBrowsingWeb: string;
  export let NSUserNotificationDefaultSoundName: string;
  export let NSZeroPoint: CGPoint;
  export let NSZeroRect: CGRect;
  export let NSZeroSize: CGSize;
  export let NSZombieEnabled: boolean;
  export let IKFilterBrowserDefaultInputImage: string;
  export let IKFilterBrowserExcludeCategories: string;
  export let IKFilterBrowserExcludeFilters: string;
  export let IKFilterBrowserShowCategories: string;
  export let IKFilterBrowserShowPreview: string;
  export let IKImageBrowserBackgroundColorKey: string;
  export let IKImageBrowserCGImageRepresentationType: string;
  export let IKImageBrowserCGImageSourceRepresentationType: string;
  export let IKImageBrowserCellBackgroundLayer: string;
  export let IKImageBrowserCellForegroundLayer: string;
  export let IKImageBrowserCellPlaceHolderLayer: string;
  export let IKImageBrowserCellSelectionLayer: string;
  export let IKImageBrowserCellsHighlightedTitleAttributesKey: string;
  export let IKImageBrowserCellsOutlineColorKey: string;
  export let IKImageBrowserCellsSubtitleAttributesKey: string;
  export let IKImageBrowserCellsTitleAttributesKey: string;
  export let IKImageBrowserGroupBackgroundColorKey: string;
  export let IKImageBrowserGroupFooterLayer: string;
  export let IKImageBrowserGroupHeaderLayer: string;
  export let IKImageBrowserGroupRangeKey: string;
  export let IKImageBrowserGroupStyleKey: string;
  export let IKImageBrowserGroupTitleKey: string;
  export let IKImageBrowserIconRefPathRepresentationType: string;
  export let IKImageBrowserIconRefRepresentationType: string;
  export let IKImageBrowserNSBitmapImageRepresentationType: string;
  export let IKImageBrowserNSDataRepresentationType: string;
  export let IKImageBrowserNSImageRepresentationType: string;
  export let IKImageBrowserNSURLRepresentationType: string;
  export let IKImageBrowserPDFPageRepresentationType: string;
  export let IKImageBrowserPathRepresentationType: string;
  export let IKImageBrowserQCCompositionPathRepresentationType: string;
  export let IKImageBrowserQCCompositionRepresentationType: string;
  export let IKImageBrowserQTMoviePathRepresentationType: string;
  export let IKImageBrowserQTMovieRepresentationType: string;
  export let IKImageBrowserQuickLookPathRepresentationType: string;
  export let IKImageBrowserSelectionColorKey: string;
  export let IKOverlayTypeBackground: string;
  export let IKOverlayTypeImage: string;
  export let IKPictureTakerAllowsEditingKey: string;
  export let IKPictureTakerAllowsFileChoosingKey: string;
  export let IKPictureTakerAllowsVideoCaptureKey: string;
  export let IKPictureTakerCropAreaSizeKey: string;
  export let IKPictureTakerImageTransformsKey: string;
  export let IKPictureTakerInformationalTextKey: string;
  export let IKPictureTakerOutputImageMaxSizeKey: string;
  export let IKPictureTakerRemainOpenAfterValidateKey: string;
  export let IKPictureTakerShowAddressBookPicture: string;
  export let IKPictureTakerShowAddressBookPictureKey: string;
  export let IKPictureTakerShowEffectsKey: string;
  export let IKPictureTakerShowEmptyPicture: string;
  export let IKPictureTakerShowEmptyPictureKey: string;
  export let IKPictureTakerShowRecentPictureKey: string;
  export let IKPictureTakerUpdateRecentPictureKey: string;
  export let IKSlideshowAudioFile: string;
  export let IKSlideshowModeImages: string;
  export let IKSlideshowModeOther: string;
  export let IKSlideshowModePDF: string;
  export let IKSlideshowPDFDisplayBox: string;
  export let IKSlideshowPDFDisplayMode: string;
  export let IKSlideshowPDFDisplaysAsBook: string;
  export let IKSlideshowScreen: string;
  export let IKSlideshowStartIndex: string;
  export let IKSlideshowStartPaused: string;
  export let IKSlideshowWrapAround: string;
  export let IKToolModeAnnotate: string;
  export let IKToolModeCrop: string;
  export let IKToolModeMove: string;
  export let IKToolModeNone: string;
  export let IKToolModeRotate: string;
  export let IKToolModeSelect: string;
  export let IKToolModeSelectEllipse: string;
  export let IKToolModeSelectLasso: string;
  export let IKToolModeSelectRect: string;
  export let IKUIFlavorAllowFallback: string;
  export let IKUISizeFlavor: string;
  export let IKUISizeMini: string;
  export let IKUISizeRegular: string;
  export let IKUISizeSmall: string;
  export let IKUImaxSize: string;
  export let IK_ApertureBundleIdentifier: string;
  export let IK_MailBundleIdentifier: string;
  export let IK_PhotosBundleIdentifier: string;
  export let IK_iPhotoBundleIdentifier: string;
  export let QCCompositionInputPaceKey: string;
  export let globalUpdateOK: boolean;
  export let kQuartzFilterApplicationDomain: string;
  export let kQuartzFilterPDFWorkflowDomain: string;
  export let kQuartzFilterPrintingDomain: string;
  export let CATransform3DIdentity: CATransform3D;
  export let kCAOnOrderIn: string;
  export let kCAOnOrderOut: string;
  export let kCARendererColorSpace: string;
  export let kCARendererMetalCommandQueue: string;
  export let kCATransactionAnimationDuration: string;
  export let kCATransactionAnimationTimingFunction: string;
  export let kCATransactionCompletionBlock: string;
  export let kCATransactionDisableActions: string;
  export let kCATransition: string;
}

// Add enums to the already-existing bridged classes
//
// If we didn't do this, these would be duplicated
// (i.e. both NSButton and NSButton$1 would exist
// in global scope)

let global = globalThis as any;

namespace AVAssetExportSession {
  export enum Status {
    Unknown = 0,
    Waiting = 1,
    Exporting = 2,
    Completed = 3,
    Failed = 4,
    Cancelled = 5
  }

  global['AVAssetExportSession']['Status'] = Status;

}

namespace AVAssetImageGenerator {
  export enum Result {
    Succeeded = 0,
    Failed = 1,
    Cancelled = 2
  }

  global['AVAssetImageGenerator']['Result'] = Result;

  // export declare let cleanAperture: string;
  // export declare let encodedPixels: string;
  // export declare let productionAperture: string;
}

namespace AVAssetReader {
  export enum Status {
    Unknown = 0,
    Reading = 1,
    Completed = 2,
    Failed = 3,
    Cancelled = 4
  }

  global['AVAssetReader']['Status'] = Status;

}

namespace AVAssetTrack {
  // export declare let audioFallback: string;
  // export declare let chapterList: string;
  // export declare let forcedSubtitlesOnly: string;
  // export declare let metadataReferent: string;
  // export declare let selectionFollower: string;
  // export declare let timecode: string;
}

namespace AVAssetWriter {
  export enum Status {
    Unknown = 0,
    Writing = 1,
    Completed = 2,
    Failed = 3,
    Cancelled = 4
  }

  global['AVAssetWriter']['Status'] = Status;

}

namespace AVAssetWriterInput {
  // export declare let beforeMainMediaDataNotInterleaved: string;
  // export declare let interleavedWithMainMediaData: string;
}

namespace AVAudioSession {
  export enum CategoryOptions {
    MixWithOthers = 1,
    DuckOthers = 2,
    AllowBluetooth = 4,
    DefaultToSpeaker = 8,
    InterruptSpokenAudioAndMixWithOthers = 17,
    AllowBluetoothA2DP = 32,
    AllowAirPlay = 64
  }

  global['AVAudioSession']['CategoryOptions'] = CategoryOptions;

  export enum IOType {
    NotSpecified = 0,
    Aggregated = 1
  }

  global['AVAudioSession']['IOType'] = IOType;

  export enum InterruptionOptions {
    ShouldResume = 1
  }

  global['AVAudioSession']['InterruptionOptions'] = InterruptionOptions;

  export enum InterruptionType {
    Began = 1,
    Ended = 0
  }

  global['AVAudioSession']['InterruptionType'] = InterruptionType;

  export enum PortOverride {
    None = 0,
    Speaker = 1936747378
  }

  global['AVAudioSession']['PortOverride'] = PortOverride;

  export enum PromptStyle {
    None = 1852796517,
    Short = 1936224884,
    Normal = 1852992876
  }

  global['AVAudioSession']['PromptStyle'] = PromptStyle;

  export enum RecordPermission {
    Undetermined = 1970168948,
    Denied = 1684369017,
    Granted = 1735552628
  }

  global['AVAudioSession']['RecordPermission'] = RecordPermission;

  export enum RouteChangeReason {
    Unknown = 0,
    NewDeviceAvailable = 1,
    OldDeviceUnavailable = 2,
    CategoryChange = 3,
    Override = 4,
    WakeFromSleep = 6,
    NoSuitableRouteForCategory = 7,
    RouteConfigurationChange = 8
  }

  global['AVAudioSession']['RouteChangeReason'] = RouteChangeReason;

  export enum RouteSharingPolicy {
    Default = 0,
    LongFormAudio = 1,
    LongForm = 1,
    Independent = 2,
    LongFormVideo = 3
  }

  global['AVAudioSession']['RouteSharingPolicy'] = RouteSharingPolicy;

  export enum SetActiveOptions {
    NotifyOthersOnDeactivation = 1
  }

  global['AVAudioSession']['SetActiveOptions'] = SetActiveOptions;

  export enum SilenceSecondaryAudioHintType {
    Begin = 1,
    End = 0
  }

  global['AVAudioSession']['SilenceSecondaryAudioHintType'] = SilenceSecondaryAudioHintType;

  // export declare let ambient: string;
  // export declare let audioProcessing: string;
  // export declare let multiRoute: string;
  // export declare let playAndRecord: string;
  // export declare let playback: string;
  // export declare let record: string;
  // export declare let soloAmbient: string;
  // export declare let interruptionNotification: string;
  // export declare let lower: string;
  // export declare let upper: string;
  // export declare let mediaServicesWereLostNotification: string;
  // export declare let mediaServicesWereResetNotification: string;
  // export declare let default_: string;
  // export declare let gameChat: string;
  // export declare let measurement: string;
  // export declare let moviePlayback: string;
  // export declare let spokenAudio: string;
  // export declare let videoChat: string;
  // export declare let videoRecording: string;
  // export declare let voiceChat: string;
  // export declare let voicePrompt: string;
  // export declare let back: string;
  // export declare let bottom: string;
  // export declare let front: string;
  // export declare let left: string;
  // export declare let right: string;
  // export declare let top: string;
  // export declare let cardioid: string;
  // export declare let omnidirectional: string;
  // export declare let subcardioid: string;
  // export declare let airPlay: string;
  // export declare let bluetoothA2DP: string;
  // export declare let bluetoothHFP: string;
  // export declare let bluetoothLE: string;
  // export declare let builtInMic: string;
  // export declare let builtInReceiver: string;
  // export declare let builtInSpeaker: string;
  // export declare let carAudio: string;
  // export declare let HDMI: string;
  // export declare let headphones: string;
  // export declare let headsetMic: string;
  // export declare let lineIn: string;
  // export declare let lineOut: string;
  // export declare let usbAudio: string;
  // export declare let routeChangeNotification: string;
  // export declare let silenceSecondaryAudioHintNotification: string;
}

namespace AVAudioTimePitchAlgorithm {
  // export declare let lowQualityZeroLatency: string;
  // export declare let spectral: string;
  // export declare let timeDomain: string;
  // export declare let varispeed: string;
}

namespace AVAudioUnitComponentManager {
  // export declare let registrationsChangedNotification: string;
}

namespace AVCaptureDevice {
  export enum AutoFocusRangeRestriction {
    None = 0,
    Near = 1,
    Far = 2
  }

  global['AVCaptureDevice']['AutoFocusRangeRestriction'] = AutoFocusRangeRestriction;

  export enum Position {
    Unspecified = 0,
    Back = 1,
    Front = 2
  }

  global['AVCaptureDevice']['Position'] = Position;

  export enum TransportControlsPlaybackMode {
    NotPlayingMode = 0,
    PlayingMode = 1
  }

  global['AVCaptureDevice']['TransportControlsPlaybackMode'] = TransportControlsPlaybackMode;

  export enum ExposureMode {
    Locked = 0,
    AutoExpose = 1,
    ContinuousAutoExposure = 2,
    Custom = 3
  }

  global['AVCaptureDevice']['ExposureMode'] = ExposureMode;

  export enum FlashMode {
    Off = 0,
    On = 1,
    Auto = 2
  }

  global['AVCaptureDevice']['FlashMode'] = FlashMode;

  export enum FocusMode {
    Locked = 0,
    AutoFocus = 1,
    ContinuousAutoFocus = 2
  }

  global['AVCaptureDevice']['FocusMode'] = FocusMode;

  export enum LensStabilizationStatus {
    Unsupported = 0,
    Off = 1,
    Active = 2,
    OutOfRange = 3,
    Unavailable = 4
  }

  global['AVCaptureDevice']['LensStabilizationStatus'] = LensStabilizationStatus;

  export enum TorchMode {
    Off = 0,
    On = 1,
    Auto = 2
  }

  global['AVCaptureDevice']['TorchMode'] = TorchMode;

  export enum WhiteBalanceMode {
    Locked = 0,
    AutoWhiteBalance = 1,
    ContinuousAutoWhiteBalance = 2
  }

  global['AVCaptureDevice']['WhiteBalanceMode'] = WhiteBalanceMode;

  // export declare let builtInDualCamera: string;
  // export declare let builtInDualWideCamera: string;
  // export declare let builtInDuoCamera: string;
  // export declare let builtInMicrophone: string;
  // export declare let builtInTelephotoCamera: string;
  // export declare let builtInTripleCamera: string;
  // export declare let builtInTrueDepthCamera: string;
  // export declare let builtInUltraWideCamera: string;
  // export declare let builtInWideAngleCamera: string;
  // export declare let externalUnknown: string;
  // export declare let currentExposureDuration: CMTime;
  // export declare let currentExposureTargetBias: number;
  // export declare let currentISO: number;
  // export declare let currentLensPosition: number;
  // export declare let maxAvailableTorchLevel: number;
  // export declare let currentWhiteBalanceGains: AVCaptureDevice.WhiteBalanceGains;
}

namespace AVCaptureOutput {
  export enum DataDroppedReason {
    None = 0,
    LateData = 1,
    OutOfBuffers = 2,
    Discontinuity = 3
  }

  global['AVCaptureOutput']['DataDroppedReason'] = DataDroppedReason;

}

namespace AVCapturePhotoOutput {
  export enum QualityPrioritization {
    Speed = 1,
    Balanced = 2,
    Quality = 3
  }

  global['AVCapturePhotoOutput']['QualityPrioritization'] = QualityPrioritization;

}

namespace AVCaptureSession {
  export enum InterruptionReason {
    VideoDeviceNotAvailableInBackground = 1,
    AudioDeviceInUseByAnotherClient = 2,
    VideoDeviceInUseByAnotherClient = 3,
    VideoDeviceNotAvailableWithMultipleForegroundApps = 4,
    VideoDeviceNotAvailableDueToSystemPressure = 5
  }

  global['AVCaptureSession']['InterruptionReason'] = InterruptionReason;

  // export declare let hd1280x720: string;
  // export declare let hd1920x1080: string;
  // export declare let qvga320x240: string;
  // export declare let cif352x288: string;
  // export declare let hd4K3840x2160: string;
  // export declare let vga640x480: string;
  // export declare let qHD960x540: string;
  // export declare let high: string;
  // export declare let inputPriority: string;
  // export declare let low: string;
  // export declare let medium: string;
  // export declare let photo: string;
  // export declare let iFrame1280x720: string;
  // export declare let iFrame960x540: string;
}

namespace AVContentKeyRequest {
  export enum Status {
    RequestingResponse = 0,
    ReceivedResponse = 1,
    Renewed = 2,
    Retried = 3,
    Cancelled = 4,
    Failed = 5
  }

  global['AVContentKeyRequest']['Status'] = Status;

  // export declare let receivedObsoleteContentKey: string;
  // export declare let receivedResponseWithExpiredLease: string;
  // export declare let timedOut: string;
}

namespace AVContentKeySessionServerPlaybackContextOption {
  // export declare let protocolVersions: string;
  // export declare let serverChallenge: string;
}

namespace AVContentKeySystem {
  // export declare let authorizationToken: string;
  // export declare let clearKey: string;
  // export declare let fairPlayStreaming: string;
}

namespace AVDepthData {
  export enum Accuracy {
    Relative = 0,
    Absolute = 1
  }

  global['AVDepthData']['Accuracy'] = Accuracy;

  export enum Quality {
    Low = 0,
    High = 1
  }

  global['AVDepthData']['Quality'] = Quality;

}

namespace AVFileType {
  // export declare let mobile3GPP: string;
  // export declare let mobile3GPP2: string;
  // export declare let ac3: string;
  // export declare let aifc: string;
  // export declare let aiff: string;
  // export declare let amr: string;
  // export declare let avci: string;
  // export declare let m4a: string;
  // export declare let m4v: string;
  // export declare let caf: string;
  // export declare let dng: string;
  // export declare let eac3: string;
  // export declare let heic: string;
  // export declare let heif: string;
  // export declare let jpg: string;
  // export declare let mp4: string;
  // export declare let mp3: string;
  // export declare let mov: string;
  // export declare let au: string;
  // export declare let tif: string;
  // export declare let wav: string;
}

namespace AVLayerVideoGravity {
  // export declare let resize: string;
  // export declare let resizeAspect: string;
  // export declare let resizeAspectFill: string;
}

namespace AVMediaCharacteristic {
  // export declare let audible: string;
  // export declare let containsAlphaChannel: string;
  // export declare let containsOnlyForcedSubtitles: string;
  // export declare let describesMusicAndSoundForAccessibility: string;
  // export declare let describesVideoForAccessibility: string;
  // export declare let dubbedTranslation: string;
  // export declare let easyToRead: string;
  // export declare let frameBased: string;
  // export declare let isAuxiliaryContent: string;
  // export declare let isMainProgramContent: string;
  // export declare let isOriginalContent: string;
  // export declare let languageTranslation: string;
  // export declare let legible: string;
  // export declare let transcribesSpokenDialogForAccessibility: string;
  // export declare let usesWideGamutColorSpace: string;
  // export declare let visual: string;
  // export declare let voiceOverTranslation: string;
}

namespace AVMediaType {
  // export declare let audio: string;
  // export declare let closedCaption: string;
  // export declare let depthData: string;
  // export declare let metadata: string;
  // export declare let metadataObject: string;
  // export declare let muxed: string;
  // export declare let subtitle: string;
  // export declare let text: string;
  // export declare let timecode: string;
  // export declare let video: string;
}

namespace AVMetadataExtraAttributeKey {
  // export declare let baseURI: string;
  // export declare let info: string;
  // export declare let valueURI: string;
}

namespace AVMetadataFormat {
  // export declare let hlsMetadata: string;
  // export declare let id3Metadata: string;
  // export declare let isoUserData: string;
  // export declare let quickTimeMetadata: string;
  // export declare let quickTimeUserData: string;
  // export declare let unknown: string;
  // export declare let iTunesMetadata: string;
}

namespace AVMetadataIdentifier {
  // export declare let commonIdentifierAlbumName: string;
  // export declare let commonIdentifierArtist: string;
  // export declare let commonIdentifierArtwork: string;
  // export declare let commonIdentifierAssetIdentifier: string;
  // export declare let commonIdentifierAuthor: string;
  // export declare let commonIdentifierContributor: string;
  // export declare let commonIdentifierCopyrights: string;
  // export declare let commonIdentifierCreationDate: string;
  // export declare let commonIdentifierCreator: string;
  // export declare let commonIdentifierDescription: string;
  // export declare let commonIdentifierFormat: string;
  // export declare let commonIdentifierLanguage: string;
  // export declare let commonIdentifierLastModifiedDate: string;
  // export declare let commonIdentifierLocation: string;
  // export declare let commonIdentifierMake: string;
  // export declare let commonIdentifierModel: string;
  // export declare let commonIdentifierPublisher: string;
  // export declare let commonIdentifierRelation: string;
  // export declare let commonIdentifierSoftware: string;
  // export declare let commonIdentifierSource: string;
  // export declare let commonIdentifierSubject: string;
  // export declare let commonIdentifierTitle: string;
  // export declare let commonIdentifierType: string;
  // export declare let identifier3GPUserDataAlbumAndTrack: string;
  // export declare let identifier3GPUserDataAuthor: string;
  // export declare let identifier3GPUserDataCollection: string;
  // export declare let identifier3GPUserDataCopyright: string;
  // export declare let identifier3GPUserDataDescription: string;
  // export declare let identifier3GPUserDataGenre: string;
  // export declare let identifier3GPUserDataKeywordList: string;
  // export declare let identifier3GPUserDataLocation: string;
  // export declare let identifier3GPUserDataMediaClassification: string;
  // export declare let identifier3GPUserDataMediaRating: string;
  // export declare let identifier3GPUserDataPerformer: string;
  // export declare let identifier3GPUserDataRecordingYear: string;
  // export declare let identifier3GPUserDataThumbnail: string;
  // export declare let identifier3GPUserDataTitle: string;
  // export declare let identifier3GPUserDataUserRating: string;
  // export declare let id3MetadataAlbumSortOrder: string;
  // export declare let id3MetadataAlbumTitle: string;
  // export declare let id3MetadataAttachedPicture: string;
  // export declare let id3MetadataAudioEncryption: string;
  // export declare let id3MetadataAudioSeekPointIndex: string;
  // export declare let id3MetadataBand: string;
  // export declare let id3MetadataBeatsPerMinute: string;
  // export declare let id3MetadataComments: string;
  // export declare let id3MetadataCommercial: string;
  // export declare let id3MetadataCommercialInformation: string;
  // export declare let id3MetadataComposer: string;
  // export declare let id3MetadataConductor: string;
  // export declare let id3MetadataContentGroupDescription: string;
  // export declare let id3MetadataContentType: string;
  // export declare let id3MetadataCopyright: string;
  // export declare let id3MetadataCopyrightInformation: string;
  // export declare let id3MetadataDate: string;
  // export declare let id3MetadataEncodedBy: string;
  // export declare let id3MetadataEncodedWith: string;
  // export declare let id3MetadataEncodingTime: string;
  // export declare let id3MetadataEncryption: string;
  // export declare let id3MetadataEqualization: string;
  // export declare let id3MetadataEqualization2: string;
  // export declare let id3MetadataEventTimingCodes: string;
  // export declare let id3MetadataFileOwner: string;
  // export declare let id3MetadataFileType: string;
  // export declare let id3MetadataGeneralEncapsulatedObject: string;
  // export declare let id3MetadataGroupIdentifier: string;
  // export declare let id3MetadataInitialKey: string;
  // export declare let id3MetadataInternationalStandardRecordingCode: string;
  // export declare let id3MetadataInternetRadioStationName: string;
  // export declare let id3MetadataInternetRadioStationOwner: string;
  // export declare let id3MetadataInvolvedPeopleList_v23: string;
  // export declare let id3MetadataInvolvedPeopleList_v24: string;
  // export declare let id3MetadataLanguage: string;
  // export declare let id3MetadataLeadPerformer: string;
  // export declare let id3MetadataLength: string;
  // export declare let id3MetadataLink: string;
  // export declare let id3MetadataLyricist: string;
  // export declare let id3MetadataMPEGLocationLookupTable: string;
  // export declare let id3MetadataMediaType: string;
  // export declare let id3MetadataModifiedBy: string;
  // export declare let id3MetadataMood: string;
  // export declare let id3MetadataMusicCDIdentifier: string;
  // export declare let id3MetadataMusicianCreditsList: string;
  // export declare let id3MetadataOfficialArtistWebpage: string;
  // export declare let id3MetadataOfficialAudioFileWebpage: string;
  // export declare let id3MetadataOfficialAudioSourceWebpage: string;
  // export declare let id3MetadataOfficialInternetRadioStationHomepage: string;
  // export declare let id3MetadataOfficialPublisherWebpage: string;
  // export declare let id3MetadataOriginalAlbumTitle: string;
  // export declare let id3MetadataOriginalArtist: string;
  // export declare let id3MetadataOriginalFilename: string;
  // export declare let id3MetadataOriginalLyricist: string;
  // export declare let id3MetadataOriginalReleaseTime: string;
  // export declare let id3MetadataOriginalReleaseYear: string;
  // export declare let id3MetadataOwnership: string;
  // export declare let id3MetadataPartOfASet: string;
  // export declare let id3MetadataPayment: string;
  // export declare let id3MetadataPerformerSortOrder: string;
  // export declare let id3MetadataPlayCounter: string;
  // export declare let id3MetadataPlaylistDelay: string;
  // export declare let id3MetadataPopularimeter: string;
  // export declare let id3MetadataPositionSynchronization: string;
  // export declare let id3MetadataPrivate: string;
  // export declare let id3MetadataProducedNotice: string;
  // export declare let id3MetadataPublisher: string;
  // export declare let id3MetadataRecommendedBufferSize: string;
  // export declare let id3MetadataRecordingDates: string;
  // export declare let id3MetadataRecordingTime: string;
  // export declare let id3MetadataRelativeVolumeAdjustment: string;
  // export declare let id3MetadataRelativeVolumeAdjustment2: string;
  // export declare let id3MetadataReleaseTime: string;
  // export declare let id3MetadataReverb: string;
  // export declare let id3MetadataSeek: string;
  // export declare let id3MetadataSetSubtitle: string;
  // export declare let id3MetadataSignature: string;
  // export declare let id3MetadataSize: string;
  // export declare let id3MetadataSubTitle: string;
  // export declare let id3MetadataSynchronizedLyric: string;
  // export declare let id3MetadataSynchronizedTempoCodes: string;
  // export declare let id3MetadataTaggingTime: string;
  // export declare let id3MetadataTermsOfUse: string;
  // export declare let id3MetadataTime: string;
  // export declare let id3MetadataTitleDescription: string;
  // export declare let id3MetadataTitleSortOrder: string;
  // export declare let id3MetadataTrackNumber: string;
  // export declare let id3MetadataUniqueFileIdentifier: string;
  // export declare let id3MetadataUnsynchronizedLyric: string;
  // export declare let id3MetadataUserText: string;
  // export declare let id3MetadataUserURL: string;
  // export declare let id3MetadataYear: string;
  // export declare let isoUserDataCopyright: string;
  // export declare let isoUserDataDate: string;
  // export declare let isoUserDataTaggedCharacteristic: string;
  // export declare let icyMetadataStreamTitle: string;
  // export declare let icyMetadataStreamURL: string;
  // export declare let quickTimeMetadataAlbum: string;
  // export declare let quickTimeMetadataArranger: string;
  // export declare let quickTimeMetadataArtist: string;
  // export declare let quickTimeMetadataArtwork: string;
  // export declare let quickTimeMetadataAuthor: string;
  // export declare let quickTimeMetadataAutoLivePhoto: string;
  // export declare let quickTimeMetadataCameraFrameReadoutTime: string;
  // export declare let quickTimeMetadataCameraIdentifier: string;
  // export declare let quickTimeMetadataCollectionUser: string;
  // export declare let quickTimeMetadataComment: string;
  // export declare let quickTimeMetadataComposer: string;
  // export declare let quickTimeMetadataContentIdentifier: string;
  // export declare let quickTimeMetadataCopyright: string;
  // export declare let quickTimeMetadataCreationDate: string;
  // export declare let quickTimeMetadataCredits: string;
  // export declare let quickTimeMetadataDescription: string;
  // export declare let quickTimeMetadataDetectedCatBody: string;
  // export declare let quickTimeMetadataDetectedDogBody: string;
  // export declare let quickTimeMetadataDetectedFace: string;
  // export declare let quickTimeMetadataDetectedHumanBody: string;
  // export declare let quickTimeMetadataDetectedSalientObject: string;
  // export declare let quickTimeMetadataDirectionFacing: string;
  // export declare let quickTimeMetadataDirectionMotion: string;
  // export declare let quickTimeMetadataDirector: string;
  // export declare let quickTimeMetadataDisplayName: string;
  // export declare let quickTimeMetadataEncodedBy: string;
  // export declare let quickTimeMetadataGenre: string;
  // export declare let quickTimeMetadataInformation: string;
  // export declare let quickTimeMetadataKeywords: string;
  // export declare let quickTimeMetadataLivePhotoVitalityScore: string;
  // export declare let quickTimeMetadataLivePhotoVitalityScoringVersion: string;
  // export declare let quickTimeMetadataLocationBody: string;
  // export declare let quickTimeMetadataLocationDate: string;
  // export declare let quickTimeMetadataLocationISO6709: string;
  // export declare let quickTimeMetadataLocationName: string;
  // export declare let quickTimeMetadataLocationNote: string;
  // export declare let quickTimeMetadataLocationRole: string;
  // export declare let quickTimeMetadataMake: string;
  // export declare let quickTimeMetadataModel: string;
  // export declare let quickTimeMetadataOriginalArtist: string;
  // export declare let quickTimeMetadataPerformer: string;
  // export declare let quickTimeMetadataPhonogramRights: string;
  // export declare let quickTimeMetadataPreferredAffineTransform: string;
  // export declare let quickTimeMetadataProducer: string;
  // export declare let quickTimeMetadataPublisher: string;
  // export declare let quickTimeMetadataRatingUser: string;
  // export declare let quickTimeMetadataSoftware: string;
  // export declare let quickTimeMetadataSpatialOverCaptureQualityScore: string;
  // export declare let quickTimeMetadataSpatialOverCaptureQualityScoringVersion: string;
  // export declare let quickTimeMetadataTitle: string;
  // export declare let quickTimeMetadataVideoOrientation: string;
  // export declare let quickTimeMetadataYear: string;
  // export declare let quickTimeMetadataiXML: string;
  // export declare let quickTimeUserDataAlbum: string;
  // export declare let quickTimeUserDataArranger: string;
  // export declare let quickTimeUserDataArtist: string;
  // export declare let quickTimeUserDataAuthor: string;
  // export declare let quickTimeUserDataChapter: string;
  // export declare let quickTimeUserDataComment: string;
  // export declare let quickTimeUserDataComposer: string;
  // export declare let quickTimeUserDataCopyright: string;
  // export declare let quickTimeUserDataCreationDate: string;
  // export declare let quickTimeUserDataCredits: string;
  // export declare let quickTimeUserDataDescription: string;
  // export declare let quickTimeUserDataDirector: string;
  // export declare let quickTimeUserDataDisclaimer: string;
  // export declare let quickTimeUserDataEncodedBy: string;
  // export declare let quickTimeUserDataFullName: string;
  // export declare let quickTimeUserDataGenre: string;
  // export declare let quickTimeUserDataHostComputer: string;
  // export declare let quickTimeUserDataInformation: string;
  // export declare let quickTimeUserDataKeywords: string;
  // export declare let quickTimeUserDataLocationISO6709: string;
  // export declare let quickTimeUserDataMake: string;
  // export declare let quickTimeUserDataModel: string;
  // export declare let quickTimeUserDataOriginalArtist: string;
  // export declare let quickTimeUserDataOriginalFormat: string;
  // export declare let quickTimeUserDataOriginalSource: string;
  // export declare let quickTimeUserDataPerformers: string;
  // export declare let quickTimeUserDataPhonogramRights: string;
  // export declare let quickTimeUserDataProducer: string;
  // export declare let quickTimeUserDataProduct: string;
  // export declare let quickTimeUserDataPublisher: string;
  // export declare let quickTimeUserDataSoftware: string;
  // export declare let quickTimeUserDataSpecialPlaybackRequirements: string;
  // export declare let quickTimeUserDataTaggedCharacteristic: string;
  // export declare let quickTimeUserDataTrack: string;
  // export declare let quickTimeUserDataTrackName: string;
  // export declare let quickTimeUserDataURLLink: string;
  // export declare let quickTimeUserDataWarning: string;
  // export declare let quickTimeUserDataWriter: string;
  // export declare let iTunesMetadataAccountKind: string;
  // export declare let iTunesMetadataAcknowledgement: string;
  // export declare let iTunesMetadataAlbum: string;
  // export declare let iTunesMetadataAlbumArtist: string;
  // export declare let iTunesMetadataAppleID: string;
  // export declare let iTunesMetadataArranger: string;
  // export declare let iTunesMetadataArtDirector: string;
  // export declare let iTunesMetadataArtist: string;
  // export declare let iTunesMetadataArtistID: string;
  // export declare let iTunesMetadataAuthor: string;
  // export declare let iTunesMetadataBeatsPerMin: string;
  // export declare let iTunesMetadataComposer: string;
  // export declare let iTunesMetadataConductor: string;
  // export declare let iTunesMetadataContentRating: string;
  // export declare let iTunesMetadataCopyright: string;
  // export declare let iTunesMetadataCoverArt: string;
  // export declare let iTunesMetadataCredits: string;
  // export declare let iTunesMetadataDescription: string;
  // export declare let iTunesMetadataDirector: string;
  // export declare let iTunesMetadataDiscCompilation: string;
  // export declare let iTunesMetadataDiscNumber: string;
  // export declare let iTunesMetadataEQ: string;
  // export declare let iTunesMetadataEncodedBy: string;
  // export declare let iTunesMetadataEncodingTool: string;
  // export declare let iTunesMetadataExecProducer: string;
  // export declare let iTunesMetadataGenreID: string;
  // export declare let iTunesMetadataGrouping: string;
  // export declare let iTunesMetadataLinerNotes: string;
  // export declare let iTunesMetadataLyrics: string;
  // export declare let iTunesMetadataOnlineExtras: string;
  // export declare let iTunesMetadataOriginalArtist: string;
  // export declare let iTunesMetadataPerformer: string;
  // export declare let iTunesMetadataPhonogramRights: string;
  // export declare let iTunesMetadataPlaylistID: string;
  // export declare let iTunesMetadataPredefinedGenre: string;
  // export declare let iTunesMetadataProducer: string;
  // export declare let iTunesMetadataPublisher: string;
  // export declare let iTunesMetadataRecordCompany: string;
  // export declare let iTunesMetadataReleaseDate: string;
  // export declare let iTunesMetadataSoloist: string;
  // export declare let iTunesMetadataSongID: string;
  // export declare let iTunesMetadataSongName: string;
  // export declare let iTunesMetadataSoundEngineer: string;
  // export declare let iTunesMetadataThanks: string;
  // export declare let iTunesMetadataTrackNumber: string;
  // export declare let iTunesMetadataTrackSubTitle: string;
  // export declare let iTunesMetadataUserComment: string;
  // export declare let iTunesMetadataUserGenre: string;
}

namespace AVMetadataKey {
  // export declare let metadata3GPUserDataKeyAlbumAndTrack: string;
  // export declare let metadata3GPUserDataKeyAuthor: string;
  // export declare let metadata3GPUserDataKeyCollection: string;
  // export declare let metadata3GPUserDataKeyCopyright: string;
  // export declare let metadata3GPUserDataKeyDescription: string;
  // export declare let metadata3GPUserDataKeyGenre: string;
  // export declare let metadata3GPUserDataKeyKeywordList: string;
  // export declare let metadata3GPUserDataKeyLocation: string;
  // export declare let metadata3GPUserDataKeyMediaClassification: string;
  // export declare let metadata3GPUserDataKeyMediaRating: string;
  // export declare let metadata3GPUserDataKeyPerformer: string;
  // export declare let metadata3GPUserDataKeyRecordingYear: string;
  // export declare let metadata3GPUserDataKeyThumbnail: string;
  // export declare let metadata3GPUserDataKeyTitle: string;
  // export declare let metadata3GPUserDataKeyUserRating: string;
  // export declare let commonKeyAlbumName: string;
  // export declare let commonKeyArtist: string;
  // export declare let commonKeyArtwork: string;
  // export declare let commonKeyAuthor: string;
  // export declare let commonKeyContributor: string;
  // export declare let commonKeyCopyrights: string;
  // export declare let commonKeyCreationDate: string;
  // export declare let commonKeyCreator: string;
  // export declare let commonKeyDescription: string;
  // export declare let commonKeyFormat: string;
  // export declare let commonKeyIdentifier: string;
  // export declare let commonKeyLanguage: string;
  // export declare let commonKeyLastModifiedDate: string;
  // export declare let commonKeyLocation: string;
  // export declare let commonKeyMake: string;
  // export declare let commonKeyModel: string;
  // export declare let commonKeyPublisher: string;
  // export declare let commonKeyRelation: string;
  // export declare let commonKeySoftware: string;
  // export declare let commonKeySource: string;
  // export declare let commonKeySubject: string;
  // export declare let commonKeyTitle: string;
  // export declare let commonKeyType: string;
  // export declare let id3MetadataKeyAlbumSortOrder: string;
  // export declare let id3MetadataKeyAlbumTitle: string;
  // export declare let id3MetadataKeyAttachedPicture: string;
  // export declare let id3MetadataKeyAudioEncryption: string;
  // export declare let id3MetadataKeyAudioSeekPointIndex: string;
  // export declare let id3MetadataKeyBand: string;
  // export declare let id3MetadataKeyBeatsPerMinute: string;
  // export declare let id3MetadataKeyComments: string;
  // export declare let id3MetadataKeyCommercial: string;
  // export declare let id3MetadataKeyCommercialInformation: string;
  // export declare let id3MetadataKeyComposer: string;
  // export declare let id3MetadataKeyConductor: string;
  // export declare let id3MetadataKeyContentGroupDescription: string;
  // export declare let id3MetadataKeyContentType: string;
  // export declare let id3MetadataKeyCopyright: string;
  // export declare let id3MetadataKeyCopyrightInformation: string;
  // export declare let id3MetadataKeyDate: string;
  // export declare let id3MetadataKeyEncodedBy: string;
  // export declare let id3MetadataKeyEncodedWith: string;
  // export declare let id3MetadataKeyEncodingTime: string;
  // export declare let id3MetadataKeyEncryption: string;
  // export declare let id3MetadataKeyEqualization: string;
  // export declare let id3MetadataKeyEqualization2: string;
  // export declare let id3MetadataKeyEventTimingCodes: string;
  // export declare let id3MetadataKeyFileOwner: string;
  // export declare let id3MetadataKeyFileType: string;
  // export declare let id3MetadataKeyGeneralEncapsulatedObject: string;
  // export declare let id3MetadataKeyGroupIdentifier: string;
  // export declare let id3MetadataKeyInitialKey: string;
  // export declare let id3MetadataKeyInternationalStandardRecordingCode: string;
  // export declare let id3MetadataKeyInternetRadioStationName: string;
  // export declare let id3MetadataKeyInternetRadioStationOwner: string;
  // export declare let id3MetadataKeyInvolvedPeopleList_v23: string;
  // export declare let id3MetadataKeyInvolvedPeopleList_v24: string;
  // export declare let id3MetadataKeyLanguage: string;
  // export declare let id3MetadataKeyLeadPerformer: string;
  // export declare let id3MetadataKeyLength: string;
  // export declare let id3MetadataKeyLink: string;
  // export declare let id3MetadataKeyLyricist: string;
  // export declare let id3MetadataKeyMPEGLocationLookupTable: string;
  // export declare let id3MetadataKeyMediaType: string;
  // export declare let id3MetadataKeyModifiedBy: string;
  // export declare let id3MetadataKeyMood: string;
  // export declare let id3MetadataKeyMusicCDIdentifier: string;
  // export declare let id3MetadataKeyMusicianCreditsList: string;
  // export declare let id3MetadataKeyOfficialArtistWebpage: string;
  // export declare let id3MetadataKeyOfficialAudioFileWebpage: string;
  // export declare let id3MetadataKeyOfficialAudioSourceWebpage: string;
  // export declare let id3MetadataKeyOfficialInternetRadioStationHomepage: string;
  // export declare let id3MetadataKeyOfficialPublisherWebpage: string;
  // export declare let id3MetadataKeyOriginalAlbumTitle: string;
  // export declare let id3MetadataKeyOriginalArtist: string;
  // export declare let id3MetadataKeyOriginalFilename: string;
  // export declare let id3MetadataKeyOriginalLyricist: string;
  // export declare let id3MetadataKeyOriginalReleaseTime: string;
  // export declare let id3MetadataKeyOriginalReleaseYear: string;
  // export declare let id3MetadataKeyOwnership: string;
  // export declare let id3MetadataKeyPartOfASet: string;
  // export declare let id3MetadataKeyPayment: string;
  // export declare let id3MetadataKeyPerformerSortOrder: string;
  // export declare let id3MetadataKeyPlayCounter: string;
  // export declare let id3MetadataKeyPlaylistDelay: string;
  // export declare let id3MetadataKeyPopularimeter: string;
  // export declare let id3MetadataKeyPositionSynchronization: string;
  // export declare let id3MetadataKeyPrivate: string;
  // export declare let id3MetadataKeyProducedNotice: string;
  // export declare let id3MetadataKeyPublisher: string;
  // export declare let id3MetadataKeyRecommendedBufferSize: string;
  // export declare let id3MetadataKeyRecordingDates: string;
  // export declare let id3MetadataKeyRecordingTime: string;
  // export declare let id3MetadataKeyRelativeVolumeAdjustment: string;
  // export declare let id3MetadataKeyRelativeVolumeAdjustment2: string;
  // export declare let id3MetadataKeyReleaseTime: string;
  // export declare let id3MetadataKeyReverb: string;
  // export declare let id3MetadataKeySeek: string;
  // export declare let id3MetadataKeySetSubtitle: string;
  // export declare let id3MetadataKeySignature: string;
  // export declare let id3MetadataKeySize: string;
  // export declare let id3MetadataKeySubTitle: string;
  // export declare let id3MetadataKeySynchronizedLyric: string;
  // export declare let id3MetadataKeySynchronizedTempoCodes: string;
  // export declare let id3MetadataKeyTaggingTime: string;
  // export declare let id3MetadataKeyTermsOfUse: string;
  // export declare let id3MetadataKeyTime: string;
  // export declare let id3MetadataKeyTitleDescription: string;
  // export declare let id3MetadataKeyTitleSortOrder: string;
  // export declare let id3MetadataKeyTrackNumber: string;
  // export declare let id3MetadataKeyUniqueFileIdentifier: string;
  // export declare let id3MetadataKeyUnsynchronizedLyric: string;
  // export declare let id3MetadataKeyUserText: string;
  // export declare let id3MetadataKeyUserURL: string;
  // export declare let id3MetadataKeyYear: string;
  // export declare let isoUserDataKeyCopyright: string;
  // export declare let isoUserDataKeyDate: string;
  // export declare let isoUserDataKeyTaggedCharacteristic: string;
  // export declare let icyMetadataKeyStreamTitle: string;
  // export declare let icyMetadataKeyStreamURL: string;
  // export declare let quickTimeMetadataKeyAlbum: string;
  // export declare let quickTimeMetadataKeyArranger: string;
  // export declare let quickTimeMetadataKeyArtist: string;
  // export declare let quickTimeMetadataKeyArtwork: string;
  // export declare let quickTimeMetadataKeyAuthor: string;
  // export declare let quickTimeMetadataKeyCameraFrameReadoutTime: string;
  // export declare let quickTimeMetadataKeyCameraIdentifier: string;
  // export declare let quickTimeMetadataKeyCollectionUser: string;
  // export declare let quickTimeMetadataKeyComment: string;
  // export declare let quickTimeMetadataKeyComposer: string;
  // export declare let quickTimeMetadataKeyContentIdentifier: string;
  // export declare let quickTimeMetadataKeyCopyright: string;
  // export declare let quickTimeMetadataKeyCreationDate: string;
  // export declare let quickTimeMetadataKeyCredits: string;
  // export declare let quickTimeMetadataKeyDescription: string;
  // export declare let quickTimeMetadataKeyDirectionFacing: string;
  // export declare let quickTimeMetadataKeyDirectionMotion: string;
  // export declare let quickTimeMetadataKeyDirector: string;
  // export declare let quickTimeMetadataKeyDisplayName: string;
  // export declare let quickTimeMetadataKeyEncodedBy: string;
  // export declare let quickTimeMetadataKeyGenre: string;
  // export declare let quickTimeMetadataKeyInformation: string;
  // export declare let quickTimeMetadataKeyKeywords: string;
  // export declare let quickTimeMetadataKeyLocationBody: string;
  // export declare let quickTimeMetadataKeyLocationDate: string;
  // export declare let quickTimeMetadataKeyLocationISO6709: string;
  // export declare let quickTimeMetadataKeyLocationName: string;
  // export declare let quickTimeMetadataKeyLocationNote: string;
  // export declare let quickTimeMetadataKeyLocationRole: string;
  // export declare let quickTimeMetadataKeyMake: string;
  // export declare let quickTimeMetadataKeyModel: string;
  // export declare let quickTimeMetadataKeyOriginalArtist: string;
  // export declare let quickTimeMetadataKeyPerformer: string;
  // export declare let quickTimeMetadataKeyPhonogramRights: string;
  // export declare let quickTimeMetadataKeyProducer: string;
  // export declare let quickTimeMetadataKeyPublisher: string;
  // export declare let quickTimeMetadataKeyRatingUser: string;
  // export declare let quickTimeMetadataKeySoftware: string;
  // export declare let quickTimeMetadataKeyTitle: string;
  // export declare let quickTimeMetadataKeyYear: string;
  // export declare let quickTimeMetadataKeyiXML: string;
  // export declare let quickTimeUserDataKeyAlbum: string;
  // export declare let quickTimeUserDataKeyArranger: string;
  // export declare let quickTimeUserDataKeyArtist: string;
  // export declare let quickTimeUserDataKeyAuthor: string;
  // export declare let quickTimeUserDataKeyChapter: string;
  // export declare let quickTimeUserDataKeyComment: string;
  // export declare let quickTimeUserDataKeyComposer: string;
  // export declare let quickTimeUserDataKeyCopyright: string;
  // export declare let quickTimeUserDataKeyCreationDate: string;
  // export declare let quickTimeUserDataKeyCredits: string;
  // export declare let quickTimeUserDataKeyDescription: string;
  // export declare let quickTimeUserDataKeyDirector: string;
  // export declare let quickTimeUserDataKeyDisclaimer: string;
  // export declare let quickTimeUserDataKeyEncodedBy: string;
  // export declare let quickTimeUserDataKeyFullName: string;
  // export declare let quickTimeUserDataKeyGenre: string;
  // export declare let quickTimeUserDataKeyHostComputer: string;
  // export declare let quickTimeUserDataKeyInformation: string;
  // export declare let quickTimeUserDataKeyKeywords: string;
  // export declare let quickTimeUserDataKeyLocationISO6709: string;
  // export declare let quickTimeUserDataKeyMake: string;
  // export declare let quickTimeUserDataKeyModel: string;
  // export declare let quickTimeUserDataKeyOriginalArtist: string;
  // export declare let quickTimeUserDataKeyOriginalFormat: string;
  // export declare let quickTimeUserDataKeyOriginalSource: string;
  // export declare let quickTimeUserDataKeyPerformers: string;
  // export declare let quickTimeUserDataKeyPhonogramRights: string;
  // export declare let quickTimeUserDataKeyProducer: string;
  // export declare let quickTimeUserDataKeyProduct: string;
  // export declare let quickTimeUserDataKeyPublisher: string;
  // export declare let quickTimeUserDataKeySoftware: string;
  // export declare let quickTimeUserDataKeySpecialPlaybackRequirements: string;
  // export declare let quickTimeUserDataKeyTaggedCharacteristic: string;
  // export declare let quickTimeUserDataKeyTrack: string;
  // export declare let quickTimeUserDataKeyTrackName: string;
  // export declare let quickTimeUserDataKeyURLLink: string;
  // export declare let quickTimeUserDataKeyWarning: string;
  // export declare let quickTimeUserDataKeyWriter: string;
  // export declare let iTunesMetadataKeyAccountKind: string;
  // export declare let iTunesMetadataKeyAcknowledgement: string;
  // export declare let iTunesMetadataKeyAlbum: string;
  // export declare let iTunesMetadataKeyAlbumArtist: string;
  // export declare let iTunesMetadataKeyAppleID: string;
  // export declare let iTunesMetadataKeyArranger: string;
  // export declare let iTunesMetadataKeyArtDirector: string;
  // export declare let iTunesMetadataKeyArtist: string;
  // export declare let iTunesMetadataKeyArtistID: string;
  // export declare let iTunesMetadataKeyAuthor: string;
  // export declare let iTunesMetadataKeyBeatsPerMin: string;
  // export declare let iTunesMetadataKeyComposer: string;
  // export declare let iTunesMetadataKeyConductor: string;
  // export declare let iTunesMetadataKeyContentRating: string;
  // export declare let iTunesMetadataKeyCopyright: string;
  // export declare let iTunesMetadataKeyCoverArt: string;
  // export declare let iTunesMetadataKeyCredits: string;
  // export declare let iTunesMetadataKeyDescription: string;
  // export declare let iTunesMetadataKeyDirector: string;
  // export declare let iTunesMetadataKeyDiscCompilation: string;
  // export declare let iTunesMetadataKeyDiscNumber: string;
  // export declare let iTunesMetadataKeyEQ: string;
  // export declare let iTunesMetadataKeyEncodedBy: string;
  // export declare let iTunesMetadataKeyEncodingTool: string;
  // export declare let iTunesMetadataKeyExecProducer: string;
  // export declare let iTunesMetadataKeyGenreID: string;
  // export declare let iTunesMetadataKeyGrouping: string;
  // export declare let iTunesMetadataKeyLinerNotes: string;
  // export declare let iTunesMetadataKeyLyrics: string;
  // export declare let iTunesMetadataKeyOnlineExtras: string;
  // export declare let iTunesMetadataKeyOriginalArtist: string;
  // export declare let iTunesMetadataKeyPerformer: string;
  // export declare let iTunesMetadataKeyPhonogramRights: string;
  // export declare let iTunesMetadataKeyPlaylistID: string;
  // export declare let iTunesMetadataKeyPredefinedGenre: string;
  // export declare let iTunesMetadataKeyProducer: string;
  // export declare let iTunesMetadataKeyPublisher: string;
  // export declare let iTunesMetadataKeyRecordCompany: string;
  // export declare let iTunesMetadataKeyReleaseDate: string;
  // export declare let iTunesMetadataKeySoloist: string;
  // export declare let iTunesMetadataKeySongID: string;
  // export declare let iTunesMetadataKeySongName: string;
  // export declare let iTunesMetadataKeySoundEngineer: string;
  // export declare let iTunesMetadataKeyThanks: string;
  // export declare let iTunesMetadataKeyTrackNumber: string;
  // export declare let iTunesMetadataKeyTrackSubTitle: string;
  // export declare let iTunesMetadataKeyUserComment: string;
  // export declare let iTunesMetadataKeyUserGenre: string;
}

namespace AVMetadataKeySpace {
  // export declare let audioFile: string;
  // export declare let common: string;
  // export declare let hlsDateRange: string;
  // export declare let id3: string;
  // export declare let isoUserData: string;
  // export declare let icy: string;
  // export declare let quickTimeMetadata: string;
  // export declare let quickTimeUserData: string;
  // export declare let iTunes: string;
}

namespace AVMetadataObject {
  // export declare let aztec: string;
  // export declare let catBody: string;
  // export declare let code128: string;
  // export declare let code39: string;
  // export declare let code39Mod43: string;
  // export declare let code93: string;
  // export declare let dataMatrix: string;
  // export declare let dogBody: string;
  // export declare let ean13: string;
  // export declare let ean8: string;
  // export declare let face: string;
  // export declare let humanBody: string;
  // export declare let itf14: string;
  // export declare let interleaved2of5: string;
  // export declare let pdf417: string;
  // export declare let qr: string;
  // export declare let salientObject: string;
  // export declare let upce: string;
}

namespace AVOutputSettingsPreset {
  // export declare let preset1280x720: string;
  // export declare let preset1920x1080: string;
  // export declare let preset3840x2160: string;
  // export declare let preset640x480: string;
  // export declare let preset960x540: string;
  // export declare let hevc1920x1080: string;
  // export declare let hevc1920x1080WithAlpha: string;
  // export declare let hevc3840x2160: string;
  // export declare let hevc3840x2160WithAlpha: string;
}

namespace AVPlayer {
  export enum ActionAtItemEnd {
    Advance = 0,
    Pause = 1,
    None = 2
  }

  global['AVPlayer']['ActionAtItemEnd'] = ActionAtItemEnd;

  export enum HDRMode {
    HLG = 1,
    HDR10 = 2,
    DolbyVision = 4
  }

  global['AVPlayer']['HDRMode'] = HDRMode;

  export enum Status {
    Unknown = 0,
    ReadyToPlay = 1,
    Failed = 2
  }

  global['AVPlayer']['Status'] = Status;

  export enum TimeControlStatus {
    Paused = 0,
    WaitingToPlayAtSpecifiedRate = 1,
    Playing = 2
  }

  global['AVPlayer']['TimeControlStatus'] = TimeControlStatus;

  // export declare let eligibleForHDRPlaybackDidChangeNotification: string;
  // export declare let toMinimizeStalls: string;
  // export declare let evaluatingBufferingRate: string;
  // export declare let noItemToPlay: string;
}

namespace AVPlayerItem {
  export enum Status {
    Unknown = 0,
    ReadyToPlay = 1,
    Failed = 2
  }

  global['AVPlayerItem']['Status'] = Status;

  // export declare let mediaSelectionDidChangeNotification: string;
  // export declare let recommendedTimeOffsetFromLiveDidChangeNotification: string;
}

namespace AVPlayerItemLegibleOutput {
  // export declare let default_: string;
  // export declare let sourceAndRulesOnly: string;
}

namespace AVPlayerLooper {
  export enum Status {
    Unknown = 0,
    Ready = 1,
    Failed = 2,
    Cancelled = 3
  }

  global['AVPlayerLooper']['Status'] = Status;

}

namespace AVSampleBufferRenderSynchronizer {
  // export declare let rateDidChangeNotification: string;
}

namespace AVSampleBufferRequest {
  export enum Direction {
    Forward = 1,
    None = 0,
    Reverse = -1
  }

  global['AVSampleBufferRequest']['Direction'] = Direction;

  export enum Mode {
    Immediate = 0,
    Scheduled = 1,
    Opportunistic = 2
  }

  global['AVSampleBufferRequest']['Mode'] = Mode;

}

namespace AVSemanticSegmentationMatte {
  // export declare let hair: string;
  // export declare let skin: string;
  // export declare let teeth: string;
}

namespace AVVideoApertureMode {
  // export declare let cleanAperture: string;
  // export declare let encodedPixels: string;
  // export declare let productionAperture: string;
}

namespace AVVideoCodecType {
  // export declare let proRes422: string;
  // export declare let proRes422HQ: string;
  // export declare let proRes422LT: string;
  // export declare let proRes422Proxy: string;
  // export declare let proRes4444: string;
  // export declare let h264: string;
  // export declare let hevc: string;
  // export declare let hevcWithAlpha: string;
  // export declare let jpeg: string;
}

namespace Bundle {
  // export declare let didLoadNotification: string;
}

namespace ByteCountFormatter {
  export enum CountStyle {
    File = 0,
    Memory = 1,
    Decimal = 2,
    Binary = 3
  }

  global['ByteCountFormatter']['CountStyle'] = CountStyle;

  export enum Units {
    UseDefault = 0,
    UseBytes = 1,
    UseKB = 2,
    UseMB = 4,
    UseGB = 8,
    UseTB = 16,
    UsePB = 32,
    UseEB = 64,
    UseZB = 128,
    UseYBOrHigher = 65280,
    UseAll = 65535
  }

  global['ByteCountFormatter']['Units'] = Units;

}

namespace CAAnimationCalculationMode {
  // export declare let cubic: string;
  // export declare let cubicPaced: string;
  // export declare let discrete: string;
  // export declare let linear: string;
  // export declare let paced: string;
}

namespace CAAnimationRotationMode {
  // export declare let rotateAuto: string;
  // export declare let rotateAutoReverse: string;
}

namespace CAEmitterLayerEmitterMode {
  // export declare let outline: string;
  // export declare let points: string;
  // export declare let surface: string;
  // export declare let volume: string;
}

namespace CAEmitterLayerEmitterShape {
  // export declare let circle: string;
  // export declare let cuboid: string;
  // export declare let line: string;
  // export declare let point: string;
  // export declare let rectangle: string;
  // export declare let sphere: string;
}

namespace CAEmitterLayerRenderMode {
  // export declare let additive: string;
  // export declare let backToFront: string;
  // export declare let oldestFirst: string;
  // export declare let oldestLast: string;
  // export declare let unordered: string;
}

namespace CAGradientLayerType {
  // export declare let axial: string;
  // export declare let conic: string;
  // export declare let radial: string;
}

namespace CALayerContentsFilter {
  // export declare let linear: string;
  // export declare let nearest: string;
  // export declare let trilinear: string;
}

namespace CALayerContentsFormat {
  // export declare let gray8Uint: string;
  // export declare let RGBA16Float: string;
  // export declare let RGBA8Uint: string;
}

namespace CALayerContentsGravity {
  // export declare let bottom: string;
  // export declare let bottomLeft: string;
  // export declare let bottomRight: string;
  // export declare let center: string;
  // export declare let left: string;
  // export declare let resize: string;
  // export declare let resizeAspect: string;
  // export declare let resizeAspectFill: string;
  // export declare let right: string;
  // export declare let top: string;
  // export declare let topLeft: string;
  // export declare let topRight: string;
}

namespace CALayerCornerCurve {
  // export declare let circular: string;
  // export declare let continuous: string;
}

namespace CAMediaTimingFillMode {
  // export declare let backwards: string;
  // export declare let both: string;
  // export declare let forwards: string;
  // export declare let removed: string;
}

namespace CAMediaTimingFunctionName {
  // export declare let default_: string;
  // export declare let easeIn: string;
  // export declare let easeInEaseOut: string;
  // export declare let easeOut: string;
  // export declare let linear: string;
}

namespace CAScrollLayerScrollMode {
  // export declare let both: string;
  // export declare let horizontally: string;
  // export declare let none: string;
  // export declare let vertically: string;
}

namespace CAShapeLayerFillRule {
  // export declare let evenOdd: string;
  // export declare let nonZero: string;
}

namespace CAShapeLayerLineCap {
  // export declare let butt: string;
  // export declare let round: string;
  // export declare let square: string;
}

namespace CAShapeLayerLineJoin {
  // export declare let bevel: string;
  // export declare let miter: string;
  // export declare let round: string;
}

namespace CATextLayerAlignmentMode {
  // export declare let center: string;
  // export declare let justified: string;
  // export declare let left: string;
  // export declare let natural: string;
  // export declare let right: string;
}

namespace CATextLayerTruncationMode {
  // export declare let end: string;
  // export declare let middle: string;
  // export declare let none: string;
  // export declare let start: string;
}

namespace CATransitionSubtype {
  // export declare let fromBottom: string;
  // export declare let fromLeft: string;
  // export declare let fromRight: string;
  // export declare let fromTop: string;
}

namespace CATransitionType {
  // export declare let fade: string;
  // export declare let moveIn: string;
  // export declare let push: string;
  // export declare let reveal: string;
}

namespace CAValueFunctionName {
  // export declare let rotateX: string;
  // export declare let rotateY: string;
  // export declare let rotateZ: string;
  // export declare let scale: string;
  // export declare let scaleX: string;
  // export declare let scaleY: string;
  // export declare let scaleZ: string;
  // export declare let translate: string;
  // export declare let translateX: string;
  // export declare let translateY: string;
  // export declare let translateZ: string;
}

namespace CFCalendarIdentifier {
  // export declare let buddhistCalendar: any;
  // export declare let chineseCalendar: any;
  // export declare let gregorianCalendar: any;
  // export declare let hebrewCalendar: any;
  // export declare let cfiso8601Calendar: any;
  // export declare let indianCalendar: any;
  // export declare let islamicCalendar: any;
  // export declare let islamicCivilCalendar: any;
  // export declare let islamicTabularCalendar: any;
  // export declare let islamicUmmAlQuraCalendar: any;
  // export declare let japaneseCalendar: any;
  // export declare let persianCalendar: any;
  // export declare let republicOfChinaCalendar: any;
}

namespace CFDateFormatterKey {
  // export declare let amSymbol: any;
  // export declare let calendar: any;
  // export declare let calendarName: any;
  // export declare let defaultDate: any;
  // export declare let defaultFormat: any;
  // export declare let doesRelativeDateFormattingKey: any;
  // export declare let eraSymbols: any;
  // export declare let gregorianStartDate: any;
  // export declare let isLenient: any;
  // export declare let longEraSymbols: any;
  // export declare let monthSymbols: any;
  // export declare let pmSymbol: any;
  // export declare let quarterSymbols: any;
  // export declare let shortMonthSymbols: any;
  // export declare let shortQuarterSymbols: any;
  // export declare let shortStandaloneMonthSymbols: any;
  // export declare let shortStandaloneQuarterSymbols: any;
  // export declare let shortStandaloneWeekdaySymbols: any;
  // export declare let shortWeekdaySymbols: any;
  // export declare let standaloneMonthSymbols: any;
  // export declare let standaloneQuarterSymbols: any;
  // export declare let standaloneWeekdaySymbols: any;
  // export declare let timeZone: any;
  // export declare let twoDigitStartDate: any;
  // export declare let veryShortMonthSymbols: any;
  // export declare let veryShortStandaloneMonthSymbols: any;
  // export declare let veryShortStandaloneWeekdaySymbols: any;
  // export declare let veryShortWeekdaySymbols: any;
  // export declare let weekdaySymbols: any;
}

namespace CFLocaleKey {
  // export declare let alternateQuotationBeginDelimiterKey: any;
  // export declare let alternateQuotationEndDelimiterKey: any;
  // export declare let calendar: any;
  // export declare let calendarIdentifier: any;
  // export declare let collationIdentifier: any;
  // export declare let collatorIdentifier: any;
  // export declare let countryCode: any;
  // export declare let currencyCode: any;
  // export declare let currencySymbol: any;
  // export declare let decimalSeparator: any;
  // export declare let exemplarCharacterSet: any;
  // export declare let groupingSeparator: any;
  // export declare let identifier: any;
  // export declare let languageCode: any;
  // export declare let measurementSystem: any;
  // export declare let quotationBeginDelimiterKey: any;
  // export declare let quotationEndDelimiterKey: any;
  // export declare let scriptCode: any;
  // export declare let usesMetricSystem: any;
  // export declare let variantCode: any;
}

namespace CFNotificationName {
  // export declare let cfLocaleCurrentLocaleDidChange: any;
  // export declare let cfTimeZoneSystemTimeZoneDidChange: any;
}

namespace CFNumberFormatterKey {
  // export declare let alwaysShowDecimalSeparator: any;
  // export declare let currencyCode: any;
  // export declare let currencyDecimalSeparator: any;
  // export declare let currencyGroupingSeparator: any;
  // export declare let currencySymbol: any;
  // export declare let decimalSeparator: any;
  // export declare let defaultFormat: any;
  // export declare let exponentSymbol: any;
  // export declare let formatWidth: any;
  // export declare let groupingSeparator: any;
  // export declare let groupingSize: any;
  // export declare let infinitySymbol: any;
  // export declare let internationalCurrencySymbol: any;
  // export declare let isLenient: any;
  // export declare let maxFractionDigits: any;
  // export declare let maxIntegerDigits: any;
  // export declare let maxSignificantDigits: any;
  // export declare let minFractionDigits: any;
  // export declare let minIntegerDigits: any;
  // export declare let minSignificantDigits: any;
  // export declare let minusSign: any;
  // export declare let multiplier: any;
  // export declare let naNSymbol: any;
  // export declare let negativePrefix: any;
  // export declare let negativeSuffix: any;
  // export declare let paddingCharacter: any;
  // export declare let paddingPosition: any;
  // export declare let perMillSymbol: any;
  // export declare let percentSymbol: any;
  // export declare let plusSign: any;
  // export declare let positivePrefix: any;
  // export declare let positiveSuffix: any;
  // export declare let roundingIncrement: any;
  // export declare let roundingMode: any;
  // export declare let secondaryGroupingSize: any;
  // export declare let useGroupingSeparator: any;
  // export declare let useSignificantDigits: any;
  // export declare let zeroSymbol: any;
}

namespace CFRunLoopMode {
  // export declare let commonModes: any;
  // export declare let defaultMode: any;
}

namespace CFStreamPropertyKey {
  // export declare let appendToFile: any;
  // export declare let dataWritten: any;
  // export declare let fileCurrentOffset: any;
  // export declare let socketNativeHandle: any;
  // export declare let socketRemoteHostName: any;
  // export declare let socketRemotePortNumber: any;
}

namespace CGAffineTransform {
  // export declare let identity: CGAffineTransform;
}

namespace CGColor {
  // export declare let __blackColorName: string;
  // export declare let __clearColorName: string;
  // export declare let conversionBlackPointCompensation: string;
  // export declare let conversionTRCSize: string;
  // export declare let __whiteColorName: string;
}

namespace CGColorSpace {
  // export declare let acescgLinear: string;
  // export declare let adobeRGB1998: string;
  // export declare let dcip3: string;
  // export declare let displayP3: string;
  // export declare let displayP3_HLG: string;
  // export declare let displayP3_PQ_EOTF: string;
  // export declare let extendedGray: string;
  // export declare let extendedLinearDisplayP3: string;
  // export declare let extendedLinearGray: string;
  // export declare let extendedLinearITUR_2020: string;
  // export declare let extendedLinearSRGB: string;
  // export declare let extendedSRGB: string;
  // export declare let genericCMYK: string;
  // export declare let genericGray: string;
  // export declare let genericGrayGamma2_2: string;
  // export declare let genericLab: string;
  // export declare let genericRGB: string;
  // export declare let genericRGBLinear: string;
  // export declare let genericXYZ: string;
  // export declare let itur_2020: string;
  // export declare let itur_2020_HLG: string;
  // export declare let itur_2020_PQ_EOTF: string;
  // export declare let itur_709: string;
  // export declare let linearGray: string;
  // export declare let linearSRGB: string;
  // export declare let rommrgb: string;
  // export declare let sRGB: string;
}

namespace CGDisplayStream {
  // export declare let colorSpace: string;
  // export declare let destinationRect: string;
  // export declare let minimumFrameTime: string;
  // export declare let preserveAspectRatio: string;
  // export declare let queueDepth: string;
  // export declare let showCursor: string;
  // export declare let sourceRect: string;
  // export declare let yCbCrMatrix: string;
  // export declare let yCbCrMatrix_ITU_R_601_4: string;
  // export declare let yCbCrMatrix_ITU_R_709_2: string;
  // export declare let yCbCrMatrix_SMPTE_240M_1995: string;
}

namespace CGFont {
  // export declare let variationAxisDefaultValue: string;
  // export declare let variationAxisMaxValue: string;
  // export declare let variationAxisMinValue: string;
  // export declare let variationAxisName: string;
}

namespace CGPDFTagProperty {
  // export declare let actualText: any;
  // export declare let alternativeText: any;
  // export declare let languageText: any;
  // export declare let titleText: any;
}

namespace CGPoint {
  // export declare let zero: CGPoint;
}

namespace CGRect {
  // export declare let infinite: CGRect;
  // export declare let null: CGRect;
  // export declare let zero: CGRect;
}

namespace CGSize {
  // export declare let zero: CGSize;
}

namespace CIContextOption {
  // export declare let allowLowPower: string;
  // export declare let cacheIntermediates: string;
  // export declare let highQualityDownsample: string;
  // export declare let outputColorSpace: string;
  // export declare let outputPremultiplied: string;
  // export declare let priorityRequestLow: string;
  // export declare let useSoftwareRenderer: string;
  // export declare let workingColorSpace: string;
  // export declare let workingFormat: string;
}

namespace CIFormat {
  // export declare let A16: number;
  // export declare let A8: number;
  // export declare let ABGR8: number;
  // export declare let ARGB8: number;
  // export declare let Af: number;
  // export declare let Ah: number;
  // export declare let BGRA8: number;
  // export declare let L16: number;
  // export declare let L8: number;
  // export declare let LA16: number;
  // export declare let LA8: number;
  // export declare let LAf: number;
  // export declare let LAh: number;
  // export declare let Lf: number;
  // export declare let Lh: number;
  // export declare let R16: number;
  // export declare let R8: number;
  // export declare let RG16: number;
  // export declare let RG8: number;
  // export declare let RGBA16: number;
  // export declare let RGBA8: number;
  // export declare let RGBAf: number;
  // export declare let RGBAh: number;
  // export declare let RGf: number;
  // export declare let RGh: number;
  // export declare let Rf: number;
  // export declare let Rh: number;
}

namespace CIImageAutoAdjustmentOption {
  // export declare let crop: string;
  // export declare let enhance: string;
  // export declare let features: string;
  // export declare let level: string;
  // export declare let redEye: string;
}

namespace CIImageOption {
  // export declare let applyOrientationProperty: string;
  // export declare let auxiliaryDepth: string;
  // export declare let auxiliaryDisparity: string;
  // export declare let auxiliaryPortraitEffectsMatte: string;
  // export declare let auxiliarySemanticSegmentationHairMatte: string;
  // export declare let auxiliarySemanticSegmentationSkinMatte: string;
  // export declare let auxiliarySemanticSegmentationTeethMatte: string;
  // export declare let colorSpace: string;
  // export declare let nearestSampling: string;
  // export declare let properties: string;
  // export declare let providerTileSize: string;
  // export declare let providerUserInfo: string;
}

namespace CIImageRepresentationOption {
  // export declare let avDepthData: string;
  // export declare let avPortraitEffectsMatte: string;
  // export declare let avSemanticSegmentationMattes: string;
  // export declare let depthImage: string;
  // export declare let disparityImage: string;
  // export declare let portraitEffectsMatteImage: string;
  // export declare let semanticSegmentationHairMatteImage: string;
  // export declare let semanticSegmentationSkinMatteImage: string;
  // export declare let semanticSegmentationTeethMatteImage: string;
}

namespace CIRAWFilterOption {
  // export declare let activeKeys: string;
  // export declare let allowDraftMode: string;
  // export declare let baselineExposure: string;
  // export declare let boostAmount: string;
  // export declare let boostShadowAmount: string;
  // export declare let colorNoiseReductionAmount: string;
  // export declare let decoderVersion: string;
  // export declare let disableGamutMap: string;
  // export declare let enableChromaticNoiseTracking: string;
  // export declare let enableSharpening: string;
  // export declare let enableVendorLensCorrection: string;
  // export declare let ignoreImageOrientation: string;
  // export declare let imageOrientation: string;
  // export declare let linearSpaceFilter: string;
  // export declare let luminanceNoiseReductionAmount: string;
  // export declare let moireAmount: string;
  // export declare let neutralChromaticityX: string;
  // export declare let neutralChromaticityY: string;
  // export declare let neutralLocation: string;
  // export declare let neutralTemperature: string;
  // export declare let neutralTint: string;
  // export declare let noiseReductionAmount: string;
  // export declare let noiseReductionContrastAmount: string;
  // export declare let noiseReductionDetailAmount: string;
  // export declare let noiseReductionSharpnessAmount: string;
  // export declare let scaleFactor: string;
  // export declare let outputNativeSize: string;
  // export declare let supportedDecoderVersions: string;
}

namespace CMImageDescriptionFlavor {
  // export declare let mobile3GPFamily: any;
  // export declare let isoFamily: any;
  // export declare let quickTimeMovie: any;
}

namespace CMSampleTimingInfo {
  // export declare let invalid: CMSampleTimingInfo;
}

namespace CMSoundDescriptionFlavor {
  // export declare let mobile3GPFamily: any;
  // export declare let isoFamily: any;
  // export declare let quickTimeMovie: any;
  // export declare let quickTimeMovieV2: any;
}

namespace CMTime {
  // export declare let indefinite: CMTime;
  // export declare let invalid: CMTime;
  // export declare let negativeInfinity: CMTime;
  // export declare let positiveInfinity: CMTime;
  // export declare let zero: CMTime;
}

namespace CMTimeMapping {
  // export declare let invalid: CMTimeMapping;
}

namespace CMTimeRange {
  // export declare let invalid: CMTimeRange;
  // export declare let zero: CMTimeRange;
}

namespace DateComponentsFormatter {
  export enum UnitsStyle {
    Positional = 0,
    Abbreviated = 1,
    Short = 2,
    Full = 3,
    SpellOut = 4,
    Brief = 5
  }

  global['DateComponentsFormatter']['UnitsStyle'] = UnitsStyle;

  export enum ZeroFormattingBehavior {
    None = 0,
    Default = 1,
    DropLeading = 2,
    DropMiddle = 4,
    DropTrailing = 8,
    DropAll = 14,
    Pad = 65536
  }

  global['DateComponentsFormatter']['ZeroFormattingBehavior'] = ZeroFormattingBehavior;

}

namespace DateFormatter {
  export enum Behavior {
    BehaviorDefault = 0,
    Behavior10_0 = 1000,
    Behavior10_4 = 1040
  }

  global['DateFormatter']['Behavior'] = Behavior;

  export enum Style {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4
  }

  global['DateFormatter']['Style'] = Style;

}

namespace DateIntervalFormatter {
  export enum Style {
    NoStyle = 0,
    ShortStyle = 1,
    MediumStyle = 2,
    LongStyle = 3,
    FullStyle = 4
  }

  global['DateIntervalFormatter']['Style'] = Style;

}

namespace DistributedNotificationCenter {
  export enum Options {
    DeliverImmediately = 1,
    PostToAllSessions = 2
  }

  global['DistributedNotificationCenter']['Options'] = Options;

  export enum SuspensionBehavior {
    Drop = 1,
    Coalesce = 2,
    Hold = 3,
    DeliverImmediately = 4
  }

  global['DistributedNotificationCenter']['SuspensionBehavior'] = SuspensionBehavior;

  // export declare let localNotificationCenterType: string;
}

namespace EnergyFormatter {
  export enum Unit {
    Joule = 11,
    Kilojoule = 14,
    Calorie = 1793,
    Kilocalorie = 1794
  }

  global['EnergyFormatter']['Unit'] = Unit;

}

namespace FileAttributeKey {
  // export declare let appendOnly: string;
  // export declare let busy: string;
  // export declare let creationDate: string;
  // export declare let deviceIdentifier: string;
  // export declare let extensionHidden: string;
  // export declare let groupOwnerAccountID: string;
  // export declare let groupOwnerAccountName: string;
  // export declare let hfsCreatorCode: string;
  // export declare let hfsTypeCode: string;
  // export declare let immutable: string;
  // export declare let modificationDate: string;
  // export declare let ownerAccountID: string;
  // export declare let ownerAccountName: string;
  // export declare let posixPermissions: string;
  // export declare let protectionKey: string;
  // export declare let referenceCount: string;
  // export declare let size: string;
  // export declare let systemFileNumber: string;
  // export declare let systemFreeNodes: string;
  // export declare let systemFreeSize: string;
  // export declare let systemNodes: string;
  // export declare let systemNumber: string;
  // export declare let systemSize: string;
  // export declare let type: string;
}

namespace FileAttributeType {
  // export declare let typeBlockSpecial: string;
  // export declare let typeCharacterSpecial: string;
  // export declare let typeDirectory: string;
  // export declare let typeRegular: string;
  // export declare let typeSocket: string;
  // export declare let typeSymbolicLink: string;
  // export declare let typeUnknown: string;
}

namespace FileHandle {
  // export declare let readCompletionNotification: string;
}

namespace FileManager {
  export enum DirectoryEnumerationOptions {
    SkipsSubdirectoryDescendants = 1,
    SkipsPackageDescendants = 2,
    SkipsHiddenFiles = 4,
    IncludesDirectoriesPostOrder = 8,
    ProducesRelativePathURLs = 16
  }

  global['FileManager']['DirectoryEnumerationOptions'] = DirectoryEnumerationOptions;

  export enum ItemReplacementOptions {
    UsingNewMetadataOnly = 1,
    WithoutDeletingBackupItem = 2
  }

  global['FileManager']['ItemReplacementOptions'] = ItemReplacementOptions;

  export enum UnmountOptions {
    AllPartitionsAndEjectDisk = 1,
    WithoutUI = 2
  }

  global['FileManager']['UnmountOptions'] = UnmountOptions;

  export enum SearchPathDirectory {
    ApplicationDirectory = 1,
    DemoApplicationDirectory = 2,
    DeveloperApplicationDirectory = 3,
    AdminApplicationDirectory = 4,
    LibraryDirectory = 5,
    DeveloperDirectory = 6,
    UserDirectory = 7,
    DocumentationDirectory = 8,
    DocumentDirectory = 9,
    CoreServiceDirectory = 10,
    AutosavedInformationDirectory = 11,
    DesktopDirectory = 12,
    CachesDirectory = 13,
    ApplicationSupportDirectory = 14,
    DownloadsDirectory = 15,
    InputMethodsDirectory = 16,
    MoviesDirectory = 17,
    MusicDirectory = 18,
    PicturesDirectory = 19,
    PrinterDescriptionDirectory = 20,
    SharedPublicDirectory = 21,
    PreferencePanesDirectory = 22,
    ApplicationScriptsDirectory = 23,
    ItemReplacementDirectory = 99,
    AllApplicationsDirectory = 100,
    AllLibrariesDirectory = 101,
    TrashDirectory = 102
  }

  global['FileManager']['SearchPathDirectory'] = SearchPathDirectory;

  export enum SearchPathDomainMask {
    UserDomainMask = 1,
    LocalDomainMask = 2,
    NetworkDomainMask = 4,
    SystemDomainMask = 8,
    AllDomainsMask = 65535
  }

  global['FileManager']['SearchPathDomainMask'] = SearchPathDomainMask;

  export enum URLRelationship {
    Contains = 0,
    Same = 1,
    Other = 2
  }

  global['FileManager']['URLRelationship'] = URLRelationship;

  export enum VolumeEnumerationOptions {
    SkipHiddenVolumes = 2,
    ProduceFileReferenceURLs = 4
  }

  global['FileManager']['VolumeEnumerationOptions'] = VolumeEnumerationOptions;

}

namespace FileProtectionType {
  // export declare let complete: string;
  // export declare let completeUnlessOpen: string;
  // export declare let completeUntilFirstUserAuthentication: string;
  // export declare let none: string;
}

namespace FileWrapper {
  export enum ReadingOptions {
    Immediate = 1,
    WithoutMapping = 2
  }

  global['FileWrapper']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    Atomic = 1,
    WithNameUpdating = 2
  }

  global['FileWrapper']['WritingOptions'] = WritingOptions;

}

namespace Formatter {
  export enum Context {
    Unknown = 0,
    Dynamic = 1,
    Standalone = 2,
    ListItem = 3,
    BeginningOfSentence = 4,
    MiddleOfSentence = 5
  }

  global['Formatter']['Context'] = Context;

  export enum UnitStyle {
    Short = 1,
    Medium = 2,
    Long = 3
  }

  global['Formatter']['UnitStyle'] = UnitStyle;

}

namespace HTTPCookie {
  export enum AcceptPolicy {
    Always = 0,
    Never = 1,
    OnlyFromMainDocumentDomain = 2
  }

  global['HTTPCookie']['AcceptPolicy'] = AcceptPolicy;

}

namespace HTTPCookiePropertyKey {
  // export declare let comment: string;
  // export declare let commentURL: string;
  // export declare let discard: string;
  // export declare let domain: string;
  // export declare let expires: string;
  // export declare let maximumAge: string;
  // export declare let name: string;
  // export declare let originURL: string;
  // export declare let path: string;
  // export declare let port: string;
  // export declare let sameSitePolicy: string;
  // export declare let secure: string;
  // export declare let value: string;
  // export declare let version: string;
}

namespace HTTPCookieStringPolicy {
  // export declare let sameSiteLax: string;
  // export declare let sameSiteStrict: string;
}

namespace ISO8601DateFormatter {
  export enum Options {
    WithYear = 1,
    WithMonth = 2,
    WithWeekOfYear = 4,
    WithDay = 16,
    WithTime = 32,
    WithTimeZone = 64,
    WithSpaceBetweenDateAndTime = 128,
    WithDashSeparatorInDate = 256,
    WithColonSeparatorInTime = 512,
    WithColonSeparatorInTimeZone = 1024,
    WithFractionalSeconds = 2048,
    WithFullDate = 275,
    WithFullTime = 1632,
    WithInternetDateTime = 1907
  }

  global['ISO8601DateFormatter']['Options'] = Options;

}

namespace JSONSerialization {
  export enum ReadingOptions {
    MutableContainers = 1,
    MutableLeaves = 2,
    FragmentsAllowed = 4,
    AllowFragments = 4
  }

  global['JSONSerialization']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    PrettyPrinted = 1,
    SortedKeys = 2,
    FragmentsAllowed = 4,
    WithoutEscapingSlashes = 8
  }

  global['JSONSerialization']['WritingOptions'] = WritingOptions;

}

namespace LengthFormatter {
  export enum Unit {
    Millimeter = 8,
    Centimeter = 9,
    Meter = 11,
    Kilometer = 14,
    Inch = 1281,
    Foot = 1282,
    Yard = 1283,
    Mile = 1284
  }

  global['LengthFormatter']['Unit'] = Unit;

}

namespace MassFormatter {
  export enum Unit {
    Gram = 11,
    Kilogram = 14,
    Ounce = 1537,
    Pound = 1538,
    Stone = 1539
  }

  global['MassFormatter']['Unit'] = Unit;

}

namespace MeasurementFormatter {
  export enum UnitOptions {
    ProvidedUnit = 1,
    NaturalScale = 2,
    TemperatureWithoutUnit = 4
  }

  global['MeasurementFormatter']['UnitOptions'] = UnitOptions;

}

namespace NSAccessibility {
  export enum AnnotationPosition {
    FullRange = 0,
    Start = 1,
    End = 2
  }

  global['NSAccessibility']['AnnotationPosition'] = AnnotationPosition;

  export enum Orientation {
    Unknown = 0,
    Vertical = 1,
    Horizontal = 2
  }

  global['NSAccessibility']['Orientation'] = Orientation;

  export enum RulerMarkerType {
    Unknown = 0,
    TabStopLeft = 1,
    TabStopRight = 2,
    TabStopCenter = 3,
    TabStopDecimal = 4,
    IndentHead = 5,
    IndentTail = 6,
    IndentFirstLine = 7
  }

  global['NSAccessibility']['RulerMarkerType'] = RulerMarkerType;

  export enum SortDirection {
    Unknown = 0,
    Ascending = 1,
    Descending = 2
  }

  global['NSAccessibility']['SortDirection'] = SortDirection;

  export enum Units {
    Unknown = 0,
    Inches = 1,
    Centimeters = 2,
    Points = 3,
    Picas = 4
  }

  global['NSAccessibility']['Units'] = Units;

  // export declare let activationPoint: string;
  // export declare let allowedValues: string;
  // export declare let alternateUIVisible: string;
  // export declare let element: string;
  // export declare let label: string;
  // export declare let location: string;
  // export declare let announcement: string;
  // export declare let announcementRequested: string;
  // export declare let applicationActivated: string;
  // export declare let applicationDeactivated: string;
  // export declare let applicationHidden: string;
  // export declare let application: string;
  // export declare let applicationShown: string;
  // export declare let ascending: string;
  // export declare let attributedStringForRange: string;
  // export declare let boundsForRange: string;
  // export declare let browser: string;
  // export declare let busyIndicator: string;
  // export declare let button: string;
  // export declare let cancel: string;
  // export declare let cancelButton: string;
  // export declare let cellForColumnAndRow: string;
  // export declare let cell: string;
  // export declare let centerTabStop: string;
  // export declare let centimeters: string;
  // export declare let checkBox: string;
  // export declare let children: string;
  // export declare let clearButton: string;
  // export declare let closeButton: string;
  // export declare let collectionListSubrole: string;
  // export declare let colorWell: string;
  // export declare let columnCount: string;
  // export declare let columnHeaderUIElements: string;
  // export declare let columnIndexRange: string;
  // export declare let column: string;
  // export declare let columnTitles: string;
  // export declare let columns: string;
  // export declare let comboBox: string;
  // export declare let confirm: string;
  // export declare let containsProtectedContent: string;
  // export declare let contentList: string;
  // export declare let contents: string;
  // export declare let created: string;
  // export declare let criticalValue: string;
  // export declare let decimalTabStop: string;
  // export declare let decrement: string;
  // export declare let decrementArrow: string;
  // export declare let decrementButton: string;
  // export declare let decrementPage: string;
  // export declare let defaultButton: string;
  // export declare let definitionList: string;
  // export declare let delete_: string;
  // export declare let descending: string;
  // export declare let description: string;
  // export declare let descriptionList: string;
  // export declare let dialog: string;
  // export declare let disclosedByRow: string;
  // export declare let disclosedRows: string;
  // export declare let disclosing: string;
  // export declare let disclosureLevel: string;
  // export declare let disclosureTriangle: string;
  // export declare let document: string;
  // export declare let drawerCreated: string;
  // export declare let drawer: string;
  // export declare let edited: string;
  // export declare let enabled: string;
  // export declare let ErrorCodeExceptionInfo: string;
  // export declare let expanded: string;
  // export declare let extrasMenuBar: string;
  // export declare let filename: string;
  // export declare let firstLineIndent: string;
  // export declare let floatingWindow: string;
  // export declare let focused: string;
  // export declare let focusedUIElement: string;
  // export declare let focusedUIElementChanged: string;
  // export declare let focusedWindow: string;
  // export declare let focusedWindowChanged: string;
  // export declare let fontFamily: string;
  // export declare let fontName: string;
  // export declare let fontSize: string;
  // export declare let frontmost: string;
  // export declare let fullScreenButton: string;
  // export declare let grid: string;
  // export declare let group: string;
  // export declare let growArea: string;
  // export declare let handle: string;
  // export declare let handles: string;
  // export declare let headIndent: string;
  // export declare let header: string;
  // export declare let help: string;
  // export declare let helpTagCreated: string;
  // export declare let helpTag: string;
  // export declare let hidden: string;
  // export declare let horizontal: string;
  // export declare let horizontalScrollBar: string;
  // export declare let horizontalUnitDescription: string;
  // export declare let horizontalUnits: string;
  // export declare let identifier: string;
  // export declare let image: string;
  // export declare let inches: string;
  // export declare let increment: string;
  // export declare let incrementArrow: string;
  // export declare let incrementButton: string;
  // export declare let incrementPage: string;
  // export declare let incrementor: string;
  // export declare let index: string;
  // export declare let insertionPointLineNumber: string;
  // export declare let labelUIElements: string;
  // export declare let labelValue: string;
  // export declare let layoutArea: string;
  // export declare let layoutChanged: string;
  // export declare let layoutItem: string;
  // export declare let layoutPointForScreenPoint: string;
  // export declare let layoutSizeForScreenSize: string;
  // export declare let leftTabStop: string;
  // export declare let levelIndicator: string;
  // export declare let lineForIndex: string;
  // export declare let link: string;
  // export declare let linkedUIElements: string;
  // export declare let list: string;
  // export declare let main: string;
  // export declare let mainWindow: string;
  // export declare let mainWindowChanged: string;
  // export declare let markerGroupUIElement: string;
  // export declare let markerType: string;
  // export declare let markerTypeDescription: string;
  // export declare let markerUIElements: string;
  // export declare let markerValues: string;
  // export declare let matte: string;
  // export declare let maxValue: string;
  // export declare let menuBar: string;
  // export declare let menuBarItem: string;
  // export declare let menuButton: string;
  // export declare let menuItem: string;
  // export declare let menu: string;
  // export declare let minValue: string;
  // export declare let minimizeButton: string;
  // export declare let minimized: string;
  // export declare let modal: string;
  // export declare let moved: string;
  // export declare let nextContents: string;
  // export declare let numberOfCharacters: string;
  // export declare let orderedByRow: string;
  // export declare let orientation: string;
  // export declare let outline: string;
  // export declare let outlineRow: string;
  // export declare let overflowButton: string;
  // export declare let pageRole: string;
  // export declare let parent: string;
  // export declare let picas: string;
  // export declare let pick: string;
  // export declare let placeholderValue: string;
  // export declare let points: string;
  // export declare let popUpButton: string;
  // export declare let popover: string;
  // export declare let position: string;
  // export declare let press: string;
  // export declare let previousContents: string;
  // export declare let priority: string;
  // export declare let progressIndicator: string;
  // export declare let proxy: string;
  // export declare let rtfForRange: string;
  // export declare let radioButton: string;
  // export declare let radioGroup: string;
  // export declare let raise: string;
  // export declare let rangeForIndex: string;
  // export declare let rangeForLine: string;
  // export declare let rangeForPosition: string;
  // export declare let ratingIndicator: string;
  // export declare let relevanceIndicator: string;
  // export declare let required: string;
  // export declare let resized: string;
  // export declare let rightTabStop: string;
  // export declare let role: string;
  // export declare let roleDescription: string;
  // export declare let rowCollapsed: string;
  // export declare let rowCount: string;
  // export declare let rowCountChanged: string;
  // export declare let rowExpanded: string;
  // export declare let rowHeaderUIElements: string;
  // export declare let rowIndexRange: string;
  // export declare let row: string;
  // export declare let rows: string;
  // export declare let rulerMarker: string;
  // export declare let ruler: string;
  // export declare let screenPointForLayoutPoint: string;
  // export declare let screenSizeForLayoutSize: string;
  // export declare let scrollArea: string;
  // export declare let scrollBar: string;
  // export declare let searchButton: string;
  // export declare let searchField: string;
  // export declare let searchMenu: string;
  // export declare let sectionListSubrole: string;
  // export declare let secureTextField: string;
  // export declare let selected: string;
  // export declare let selectedCells: string;
  // export declare let selectedCellsChanged: string;
  // export declare let selectedChildren: string;
  // export declare let selectedChildrenChanged: string;
  // export declare let selectedChildrenMoved: string;
  // export declare let selectedColumns: string;
  // export declare let selectedColumnsChanged: string;
  // export declare let selectedRows: string;
  // export declare let selectedRowsChanged: string;
  // export declare let selectedText: string;
  // export declare let selectedTextChanged: string;
  // export declare let selectedTextRange: string;
  // export declare let selectedTextRanges: string;
  // export declare let servesAsTitleForUIElements: string;
  // export declare let sharedCharacterRange: string;
  // export declare let sharedFocusElements: string;
  // export declare let sharedTextUIElements: string;
  // export declare let sheetCreated: string;
  // export declare let sheet: string;
  // export declare let showAlternateUI: string;
  // export declare let showDefaultUI: string;
  // export declare let showMenu: string;
  // export declare let shownMenu: string;
  // export declare let size: string;
  // export declare let slider: string;
  // export declare let sortButton: string;
  // export declare let sortDirection: string;
  // export declare let splitGroup: string;
  // export declare let splitter: string;
  // export declare let splitters: string;
  // export declare let standardWindow: string;
  // export declare let staticText: string;
  // export declare let stringForRange: string;
  // export declare let styleRangeForIndex: string;
  // export declare let subrole: string;
  // export declare let switch_: string;
  // export declare let systemDialog: string;
  // export declare let systemFloatingWindow: string;
  // export declare let systemWide: string;
  // export declare let tabButtonSubrole: string;
  // export declare let tabGroup: string;
  // export declare let table: string;
  // export declare let tableRow: string;
  // export declare let tabs: string;
  // export declare let tailIndent: string;
  // export declare let textArea: string;
  // export declare let textAttachment: string;
  // export declare let textField: string;
  // export declare let textLink: string;
  // export declare let timeline: string;
  // export declare let title: string;
  // export declare let titleChanged: string;
  // export declare let titleUIElement: string;
  // export declare let toggle: string;
  // export declare let toolbarButton: string;
  // export declare let toolbar: string;
  // export declare let topLevelUIElement: string;
  // export declare let uiElementDestroyed: string;
  // export declare let uiElements: string;
  // export declare let url: string;
  // export declare let unitDescription: string;
  // export declare let units: string;
  // export declare let unitsChanged: string;
  // export declare let unknown: string;
  // export declare let value: string;
  // export declare let valueChanged: string;
  // export declare let valueDescription: string;
  // export declare let valueIndicator: string;
  // export declare let vertical: string;
  // export declare let verticalScrollBar: string;
  // export declare let verticalUnitDescription: string;
  // export declare let verticalUnits: string;
  // export declare let visibleCells: string;
  // export declare let visibleCharacterRange: string;
  // export declare let visibleChildren: string;
  // export declare let visibleColumns: string;
  // export declare let visibleName: string;
  // export declare let visibleRows: string;
  // export declare let warningValue: string;
  // export declare let window: string;
  // export declare let windowCreated: string;
  // export declare let windowDeminiaturized: string;
  // export declare let windowMiniaturized: string;
  // export declare let windowMoved: string;
  // export declare let windowResized: string;
  // export declare let windows: string;
  // export declare let zoomButton: string;
}

namespace NSAccessibilityCustomRotor {
  export enum SearchDirection {
    Previous = 0,
    Next = 1
  }

  global['NSAccessibilityCustomRotor']['SearchDirection'] = SearchDirection;

  export enum RotorType {
    Custom = 0,
    Any = 1,
    Annotation = 2,
    BoldText = 3,
    Heading = 4,
    HeadingLevel1 = 5,
    HeadingLevel2 = 6,
    HeadingLevel3 = 7,
    HeadingLevel4 = 8,
    HeadingLevel5 = 9,
    HeadingLevel6 = 10,
    Image = 11,
    ItalicText = 12,
    Landmark = 13,
    Link = 14,
    List = 15,
    MisspelledWord = 16,
    Table = 17,
    TextField = 18,
    UnderlinedText = 19,
    VisitedLink = 20
  }

  global['NSAccessibilityCustomRotor']['RotorType'] = RotorType;

}

namespace NSAlert {
  export enum Style {
    Warning = 0,
    Informational = 1,
    Critical = 2
  }

  global['NSAlert']['Style'] = Style;

}

namespace NSAnimation {
  export enum BlockingMode {
    Blocking = 0,
    Nonblocking = 1,
    NonblockingThreaded = 2
  }

  global['NSAnimation']['BlockingMode'] = BlockingMode;

  export enum Curve {
    EaseInOut = 0,
    EaseIn = 1,
    EaseOut = 2,
    Linear = 3
  }

  global['NSAnimation']['Curve'] = Curve;

  // export declare let progressMarkUserInfoKey: string;
  // export declare let progressMarkNotification: string;
  // export type Progress = number;
  // export type Progress = number;
}

namespace NSAppKitVersion {
  // export declare let current: number;
  // export declare let macOS10_0: number;
  // export declare let macOS10_1: number;
  // export declare let macOS10_10: number;
  // export declare let macOS10_10_2: number;
  // export declare let macOS10_10_3: number;
  // export declare let macOS10_10_4: number;
  // export declare let macOS10_10_5: number;
  // export declare let macOS10_10_Max: number;
  // export declare let macOS10_11: number;
  // export declare let macOS10_11_1: number;
  // export declare let macOS10_11_2: number;
  // export declare let macOS10_11_3: number;
  // export declare let macOS10_12: number;
  // export declare let macOS10_12_1: number;
  // export declare let macOS10_12_2: number;
  // export declare let macOS10_13: number;
  // export declare let macOS10_13_1: number;
  // export declare let macOS10_13_2: number;
  // export declare let macOS10_13_4: number;
  // export declare let number10_14: number;
  // export declare let number10_14_1: number;
  // export declare let number10_14_2: number;
  // export declare let number10_14_3: number;
  // export declare let number10_14_4: number;
  // export declare let number10_14_5: number;
  // export declare let macOS10_2: number;
  // export declare let macOS10_2_3: number;
  // export declare let macOS10_3: number;
  // export declare let macOS10_3_2: number;
  // export declare let macOS10_3_3: number;
  // export declare let macOS10_3_5: number;
  // export declare let macOS10_3_7: number;
  // export declare let macOS10_3_9: number;
  // export declare let macOS10_4: number;
  // export declare let macOS10_4_1: number;
  // export declare let macOS10_4_3: number;
  // export declare let macOS10_4_4: number;
  // export declare let macOS10_4_7: number;
  // export declare let macOS10_5: number;
  // export declare let macOS10_5_2: number;
  // export declare let macOS10_5_3: number;
  // export declare let macOS10_6: number;
  // export declare let macOS10_7: number;
  // export declare let macOS10_7_2: number;
  // export declare let macOS10_7_3: number;
  // export declare let macOS10_7_4: number;
  // export declare let macOS10_8: number;
  // export declare let macOS10_9: number;
  // export declare let numberWithColumnResizingBrowser: number;
  // export declare let numberWithContinuousScrollingBrowser: number;
  // export declare let numberWithCursorSizeSupport: number;
  // export declare let numberWithCustomSheetPosition: number;
  // export declare let numberWithDeferredWindowDisplaySupport: number;
  // export declare let numberWithDirectionalTabs: number;
  // export declare let numberWithDockTilePlugInSupport: number;
  // export declare let numberWithPatternColorLeakFix: number;
}

namespace NSAppearance {
  // export declare let accessibilityHighContrastAqua: string;
  // export declare let accessibilityHighContrastDarkAqua: string;
  // export declare let accessibilityHighContrastVibrantDark: string;
  // export declare let accessibilityHighContrastVibrantLight: string;
  // export declare let aqua: string;
  // export declare let darkAqua: string;
  // export declare let vibrantDark: string;
  // export declare let vibrantLight: string;
}

namespace NSAppleEventDescriptor {
  export enum SendOptions {
    NoReply = 1,
    QueueReply = 2,
    WaitForReply = 3,
    NeverInteract = 16,
    CanInteract = 32,
    AlwaysInteract = 48,
    CanSwitchLayer = 64,
    DontRecord = 4096,
    DontExecute = 8192,
    DontAnnotate = 65536,
    DefaultOptions = 35
  }

  global['NSAppleEventDescriptor']['SendOptions'] = SendOptions;

}

namespace NSAppleEventManager {
  // export type SuspensionID = OpaquePointer;
  // export type SuspensionID = OpaquePointer;
}

namespace NSAppleScript {
  // export declare let errorAppName: string;
  // export declare let errorBriefMessage: string;
  // export declare let errorMessage: string;
  // export declare let errorNumber: string;
  // export declare let errorRange: string;
}

namespace NSApplication {
  export enum ActivationOptions {
    ActivateAllWindows = 1,
    ActivateIgnoringOtherApps = 2
  }

  global['NSApplication']['ActivationOptions'] = ActivationOptions;

  export enum ActivationPolicy {
    Regular = 0,
    Accessory = 1,
    Prohibited = 2
  }

  global['NSApplication']['ActivationPolicy'] = ActivationPolicy;

  export enum DelegateReply {
    Success = 0,
    Cancel = 1,
    Failure = 2
  }

  global['NSApplication']['DelegateReply'] = DelegateReply;

  export enum OcclusionState {
    Visible = 2
  }

  global['NSApplication']['OcclusionState'] = OcclusionState;

  export enum PresentationOptions {
    Default = 0,
    AutoHideDock = 1,
    HideDock = 2,
    AutoHideMenuBar = 4,
    HideMenuBar = 8,
    DisableAppleMenu = 16,
    DisableProcessSwitching = 32,
    DisableForceQuit = 64,
    DisableSessionTermination = 128,
    DisableHideApplication = 256,
    DisableMenuBarTransparency = 512,
    FullScreen = 1024,
    AutoHideToolbar = 2048,
    DisableCursorLocationAssistance = 4096
  }

  global['NSApplication']['PresentationOptions'] = PresentationOptions;

  export enum PrintReply {
    PrintingCancelled = 0,
    PrintingSuccess = 1,
    PrintingFailure = 3,
    PrintingReplyLater = 2
  }

  global['NSApplication']['PrintReply'] = PrintReply;

  export enum TerminateReply {
    TerminateCancel = 0,
    TerminateNow = 1,
    TerminateLater = 2
  }

  global['NSApplication']['TerminateReply'] = TerminateReply;

  export enum RemoteNotificationType {
    None = 0,
    Badge = 1,
    Sound = 2,
    Alert = 4
  }

  global['NSApplication']['RemoteNotificationType'] = RemoteNotificationType;

  export enum RequestUserAttentionType {
    CriticalRequest = 0,
    InformationalRequest = 10
  }

  global['NSApplication']['RequestUserAttentionType'] = RequestUserAttentionType;

  export enum WindowListOptions {
    OrderedFrontToBack = 1
  }

  global['NSApplication']['WindowListOptions'] = WindowListOptions;

  // export declare let applicationIcon: string;
  // export declare let applicationName: string;
  // export declare let applicationVersion: string;
  // export declare let credits: string;
  // export declare let version: string;
  // export declare let alertFirstButtonReturn: number;
  // export declare let alertSecondButtonReturn: number;
  // export declare let alertThirdButtonReturn: number;
  // export declare let didBecomeActiveNotification: string;
  // export declare let didChangeOcclusionStateNotification: string;
  // export declare let didChangeScreenParametersNotification: string;
  // export declare let didFinishLaunchingNotification: string;
  // export declare let didFinishRestoringWindowsNotification: string;
  // export declare let didHideNotification: string;
  // export declare let didResignActiveNotification: string;
  // export declare let didUnhideNotification: string;
  // export declare let didUpdateNotification: string;
  // export declare let launchIsDefaultUserInfoKey: string;
  // export declare let launchUserNotificationUserInfoKey: string;
  // export declare let willBecomeActiveNotification: string;
  // export declare let willFinishLaunchingNotification: string;
  // export declare let willHideNotification: string;
  // export declare let willResignActiveNotification: string;
  // export declare let willTerminateNotification: string;
  // export declare let willUnhideNotification: string;
  // export declare let willUpdateNotification: string;
  // export declare let abort: number;
  // export declare let cancel: number;
  // export declare let continue_: number;
  // export declare let OK: number;
  // export declare let stop: number;
  // export type ModalSession = OpaquePointer;
  // export type ModalSession = OpaquePointer;
}

namespace NSArray {
  // export type Iterator = NSFastEnumerationIterator;
  // export type Iterator = NSFastEnumerationIterator;
}

namespace NSAttributedString {
  export enum SpellingState {
    SpellingFlag = 1,
    GrammarFlag = 2
  }

  global['NSAttributedString']['SpellingState'] = SpellingState;

  export enum EnumerationOptions {
    Reverse = 2,
    LongestEffectiveRangeNotRequired = 1048576
  }

  global['NSAttributedString']['EnumerationOptions'] = EnumerationOptions;

  // export declare let accessibilityAnnotationTextAttribute: string;
  // export declare let accessibilityAttachment: string;
  // export declare let accessibilityAutocorrected: string;
  // export declare let accessibilityBackgroundColor: string;
  // export declare let accessibilityCustomText: string;
  // export declare let accessibilityFont: string;
  // export declare let accessibilityForegroundColor: string;
  // export declare let accessibilityLanguage: string;
  // export declare let accessibilityLink: string;
  // export declare let accessibilityListItemIndex: string;
  // export declare let accessibilityListItemLevel: string;
  // export declare let accessibilityListItemPrefix: string;
  // export declare let accessibilityMarkedMisspelled: string;
  // export declare let accessibilityMisspelled: string;
  // export declare let accessibilityShadow: string;
  // export declare let accessibilityStrikethroughColor: string;
  // export declare let accessibilityStrikethrough: string;
  // export declare let accessibilitySuperscript: string;
  // export declare let accessibilityAlignment: string;
  // export declare let accessibilityUnderlineColor: string;
  // export declare let accessibilityUnderline: string;
  // export declare let appearance: string;
  // export declare let attachment: string;
  // export declare let author: string;
  // export declare let backgroundColor: string;
  // export declare let baseURL: string;
  // export declare let baselineOffset: string;
  // export declare let bottomMargin: string;
  // export declare let category: string;
  // export declare let characterEncoding: string;
  // export declare let cocoaVersion: string;
  // export declare let comment: string;
  // export declare let company: string;
  // export declare let converted: string;
  // export declare let copyright: string;
  // export declare let creationTime: string;
  // export declare let cursor: string;
  // export declare let defaultAttributes: string;
  // export declare let defaultTabInterval: string;
  // export declare let docFormat: string;
  // export declare let documentType: string;
  // export declare let editor: string;
  // export declare let excludedElements: string;
  // export declare let expansion: string;
  // export declare let fileType: string;
  // export declare let font: string;
  // export declare let foregroundColor: string;
  // export declare let glyphInfo: string;
  // export declare let html: string;
  // export declare let hyphenationFactor: string;
  // export declare let kern: string;
  // export declare let keywords: string;
  // export declare let leftMargin: string;
  // export declare let ligature: string;
  // export declare let link: string;
  // export declare let macSimpleText: string;
  // export declare let manager: string;
  // export declare let markedClauseSegment: string;
  // export declare let modificationTime: string;
  // export declare let obliqueness: string;
  // export declare let officeOpenXML: string;
  // export declare let openDocument: string;
  // export declare let paperSize: string;
  // export declare let paragraphStyle: string;
  // export declare let plain: string;
  // export declare let prefixSpaces: string;
  // export declare let rtfd: string;
  // export declare let rtf: string;
  // export declare let readOnly: string;
  // export declare let rightMargin: string;
  // export declare let shadow: string;
  // export declare let sourceTextScaling: string;
  // export declare let spellingState: string;
  // export declare let strikethroughColor: string;
  // export declare let strikethroughStyle: string;
  // export declare let strokeColor: string;
  // export declare let strokeWidth: string;
  // export declare let subject: string;
  // export declare let superscript: string;
  // export declare let targetTextScaling: string;
  // export declare let textAlternatives: string;
  // export declare let textEffect: string;
  // export declare let letterpressStyle: string;
  // export declare let textEncodingName: string;
  // export declare let orientation: string;
  // export declare let range: string;
  // export declare let textLayoutSections: string;
  // export declare let textScaling: string;
  // export declare let textSizeMultiplier: string;
  // export declare let timeout: string;
  // export declare let title: string;
  // export declare let toolTip: string;
  // export declare let topMargin: string;
  // export declare let underlineColor: string;
  // export declare let underlineStyle: string;
  // export declare let verticalGlyphForm: string;
  // export declare let viewMode: string;
  // export declare let viewSize: string;
  // export declare let viewZoom: string;
  // export declare let webArchive: string;
  // export declare let webPreferences: string;
  // export declare let webResourceLoadDelegate: string;
  // export declare let wordML: string;
  // export declare let writingDirection: string;
}

namespace NSBackgroundActivityScheduler {
  export enum Result {
    Finished = 1,
    Deferred = 2
  }

  global['NSBackgroundActivityScheduler']['Result'] = Result;

}

namespace NSBezierPath {
  export enum ElementType {
    MoveTo = 0,
    LineTo = 1,
    CurveTo = 2,
    ClosePath = 3
  }

  global['NSBezierPath']['ElementType'] = ElementType;

  export enum LineCapStyle {
    Butt = 0,
    Round = 1,
    Square = 2
  }

  global['NSBezierPath']['LineCapStyle'] = LineCapStyle;

  export enum LineJoinStyle {
    Miter = 0,
    Round = 1,
    Bevel = 2
  }

  global['NSBezierPath']['LineJoinStyle'] = LineJoinStyle;

  export enum WindingRule {
    NonZero = 0,
    EvenOdd = 1
  }

  global['NSBezierPath']['WindingRule'] = WindingRule;

  // export declare let bevel: NSBezierPath.LineJoinStyle;
  // export declare let butt: NSBezierPath.LineCapStyle;
  // export declare let closePath: NSBezierPath.ElementType;
  // export declare let curveTo: NSBezierPath.ElementType;
  // export declare let evenOdd: NSBezierPath.WindingRule;
  // export declare let lineTo: NSBezierPath.ElementType;
  // export declare let miter: NSBezierPath.LineJoinStyle;
  // export declare let moveTo: NSBezierPath.ElementType;
  // export declare let nonZero: NSBezierPath.WindingRule;
  // export declare let round: NSBezierPath.LineCapStyle;
  // export declare let square: NSBezierPath.LineCapStyle;
}

namespace NSBindingInfoKey {
  // export declare let observedKeyPath: string;
  // export declare let observedObject: string;
  // export declare let options: string;
}

namespace NSBindingName {
  // export declare let alignment: string;
  // export declare let alternateImage: string;
  // export declare let alternateTitle: string;
  // export declare let animate: string;
  // export declare let animationDelay: string;
  // export declare let argument: string;
  // export declare let attributedString: string;
  // export declare let contentArray: string;
  // export declare let contentArrayForMultipleSelection: string;
  // export declare let content: string;
  // export declare let contentDictionary: string;
  // export declare let contentHeight: string;
  // export declare let contentObject: string;
  // export declare let contentObjects: string;
  // export declare let contentSet: string;
  // export declare let contentValues: string;
  // export declare let contentWidth: string;
  // export declare let criticalValue: string;
  // export declare let data: string;
  // export declare let displayPatternTitle: string;
  // export declare let displayPatternValue: string;
  // export declare let documentEdited: string;
  // export declare let doubleClickArgument: string;
  // export declare let doubleClickTarget: string;
  // export declare let editable: string;
  // export declare let enabled: string;
  // export declare let excludedKeys: string;
  // export declare let filterPredicate: string;
  // export declare let font: string;
  // export declare let fontBold: string;
  // export declare let fontFamilyName: string;
  // export declare let fontItalic: string;
  // export declare let fontName: string;
  // export declare let fontSize: string;
  // export declare let headerTitle: string;
  // export declare let hidden: string;
  // export declare let image: string;
  // export declare let includedKeys: string;
  // export declare let initialKey: string;
  // export declare let initialValue: string;
  // export declare let isIndeterminate: string;
  // export declare let label: string;
  // export declare let localizedKeyDictionary: string;
  // export declare let managedObjectContext: string;
  // export declare let maxValue: string;
  // export declare let maxWidth: string;
  // export declare let maximumRecents: string;
  // export declare let minValue: string;
  // export declare let minWidth: string;
  // export declare let mixedStateImage: string;
  // export declare let offStateImage: string;
  // export declare let onStateImage: string;
  // export declare let positioningRect: string;
  // export declare let predicate: string;
  // export declare let recentSearches: string;
  // export declare let representedFilename: string;
  // export declare let rowHeight: string;
  // export declare let selectedIdentifier: string;
  // export declare let selectedIndex: string;
  // export declare let selectedLabel: string;
  // export declare let selectedObject: string;
  // export declare let selectedObjects: string;
  // export declare let selectedTag: string;
  // export declare let selectedValue: string;
  // export declare let selectedValues: string;
  // export declare let selectionIndexPaths: string;
  // export declare let selectionIndexes: string;
  // export declare let sortDescriptors: string;
  // export declare let target: string;
  // export declare let textColor: string;
  // export declare let title: string;
  // export declare let toolTip: string;
  // export declare let transparent: string;
  // export declare let value: string;
  // export declare let valuePath: string;
  // export declare let valueURL: string;
  // export declare let visible: string;
  // export declare let warningValue: string;
  // export declare let width: string;
}

namespace NSBindingOption {
  // export declare let allowsEditingMultipleValuesSelection: string;
  // export declare let allowsNullArgument: string;
  // export declare let alwaysPresentsApplicationModalAlerts: string;
  // export declare let conditionallySetsEditable: string;
  // export declare let conditionallySetsEnabled: string;
  // export declare let conditionallySetsHidden: string;
  // export declare let contentPlacementTag: string;
  // export declare let continuouslyUpdatesValue: string;
  // export declare let createsSortDescriptor: string;
  // export declare let deletesObjectsOnRemove: string;
  // export declare let displayName: string;
  // export declare let displayPattern: string;
  // export declare let handlesContentAsCompoundValue: string;
  // export declare let insertsNullPlaceholder: string;
  // export declare let invokesSeparatelyWithArrayObjects: string;
  // export declare let multipleValuesPlaceholder: string;
  // export declare let noSelectionPlaceholder: string;
  // export declare let notApplicablePlaceholder: string;
  // export declare let nullPlaceholder: string;
  // export declare let predicateFormat: string;
  // export declare let raisesForNotApplicableKeys: string;
  // export declare let selectorName: string;
  // export declare let selectsAllWhenSettingContent: string;
  // export declare let validatesImmediately: string;
  // export declare let valueTransformer: string;
  // export declare let valueTransformerName: string;
}

namespace NSBitmapImageRep {
  export enum Format {
    AlphaFirst = 1,
    AlphaNonpremultiplied = 2,
    FloatingPointSamples = 4,
    SixteenBitLittleEndian = 256,
    ThirtyTwoBitLittleEndian = 512,
    SixteenBitBigEndian = 1024,
    ThirtyTwoBitBigEndian = 2048
  }

  global['NSBitmapImageRep']['Format'] = Format;

  export enum FileType {
    TIFF = 0,
    BMP = 1,
    GIF = 2,
    JPEG = 3,
    PNG = 4,
    JPEG2000 = 5
  }

  global['NSBitmapImageRep']['FileType'] = FileType;

  export enum LoadStatus {
    UnknownType = -1,
    ReadingHeader = -2,
    WillNeedAllData = -3,
    InvalidData = -4,
    UnexpectedEOF = -5,
    Completed = -6
  }

  global['NSBitmapImageRep']['LoadStatus'] = LoadStatus;

  export enum TIFFCompression {
    None = 1,
    CCITTFAX3 = 3,
    CCITTFAX4 = 4,
    LZW = 5,
    JPEG = 6,
    NEXT = 32766,
    PackBits = 32773,
    OldJPEG = 32865
  }

  global['NSBitmapImageRep']['TIFFCompression'] = TIFFCompression;

  // export declare let colorSyncProfileData: string;
  // export declare let compressionFactor: string;
  // export declare let compressionMethod: string;
  // export declare let currentFrame: string;
  // export declare let currentFrameDuration: string;
  // export declare let ditherTransparency: string;
  // export declare let exifData: string;
  // export declare let fallbackBackgroundColor: string;
  // export declare let frameCount: string;
  // export declare let gamma: string;
  // export declare let interlaced: string;
  // export declare let loopCount: string;
  // export declare let progressive: string;
  // export declare let rgbColorTable: string;
}

namespace NSBox {
  export enum BoxType {
    Primary = 0,
    Separator = 2,
    Custom = 4
  }

  global['NSBox']['BoxType'] = BoxType;

  export enum TitlePosition {
    NoTitle = 0,
    AboveTop = 1,
    AtTop = 2,
    BelowTop = 3,
    AboveBottom = 4,
    AtBottom = 5,
    BelowBottom = 6
  }

  global['NSBox']['TitlePosition'] = TitlePosition;

  // export declare let primary: NSBox.BoxType;
}

namespace NSBrowser {
  export enum ColumnResizingType {
    NoColumnResizing = 0,
    AutoColumnResizing = 1,
    UserColumnResizing = 2
  }

  global['NSBrowser']['ColumnResizingType'] = ColumnResizingType;

  export enum DropOperation {
    On = 0,
    Above = 1
  }

  global['NSBrowser']['DropOperation'] = DropOperation;

  // export declare let columnConfigurationDidChangeNotification: string;
  // export type ColumnsAutosaveName = String;
  // export type ColumnsAutosaveName = String;
}

namespace NSButton {
  export enum BezelStyle {
    Rounded = 1,
    RegularSquare = 2,
    Disclosure = 5,
    ShadowlessSquare = 6,
    Circular = 7,
    TexturedSquare = 8,
    HelpButton = 9,
    SmallSquare = 10,
    TexturedRounded = 11,
    RoundRect = 12,
    Recessed = 13,
    RoundedDisclosure = 14,
    Inline = 15
  }

  global['NSButton']['BezelStyle'] = BezelStyle;

  export enum ButtonType {
    MomentaryLight = 0,
    PushOnPushOff = 1,
    Toggle = 2,
    Switch = 3,
    Radio = 4,
    MomentaryChange = 5,
    OnOff = 6,
    MomentaryPushIn = 7,
    Accelerator = 8,
    MultiLevelAccelerator = 9
  }

  global['NSButton']['ButtonType'] = ButtonType;

}

namespace NSCalendar {
  export enum Options {
    WrapComponents = 1,
    MatchStrictly = 2,
    SearchBackwards = 4,
    MatchPreviousTimePreservingSmallerUnits = 256,
    MatchNextTimePreservingSmallerUnits = 512,
    MatchNextTime = 1024,
    MatchFirst = 4096,
    MatchLast = 8192
  }

  global['NSCalendar']['Options'] = Options;

  export enum Unit {
    CalendarUnitEra = 2,
    CalendarUnitYear = 4,
    CalendarUnitMonth = 8,
    CalendarUnitDay = 16,
    CalendarUnitHour = 32,
    CalendarUnitMinute = 64,
    CalendarUnitSecond = 128,
    CalendarUnitWeekday = 512,
    CalendarUnitWeekdayOrdinal = 1024,
    CalendarUnitQuarter = 2048,
    CalendarUnitWeekOfMonth = 4096,
    CalendarUnitWeekOfYear = 8192,
    CalendarUnitYearForWeekOfYear = 16384,
    CalendarUnitNanosecond = 32768,
    CalendarUnitCalendar = 1048576,
    CalendarUnitTimeZone = 2097152,
    EraCalendarUnit = 2,
    YearCalendarUnit = 4,
    MonthCalendarUnit = 8,
    DayCalendarUnit = 16,
    HourCalendarUnit = 32,
    MinuteCalendarUnit = 64,
    SecondCalendarUnit = 128,
    WeekCalendarUnit = 256,
    WeekdayCalendarUnit = 512,
    WeekdayOrdinalCalendarUnit = 1024,
    QuarterCalendarUnit = 2048,
    WeekOfMonthCalendarUnit = 4096,
    WeekOfYearCalendarUnit = 8192,
    YearForWeekOfYearCalendarUnit = 16384,
    CalendarCalendarUnit = 1048576,
    TimeZoneCalendarUnit = 2097152
  }

  global['NSCalendar']['Unit'] = Unit;

  // export declare let buddhist: string;
  // export declare let chinese: string;
  // export declare let coptic: string;
  // export declare let ethiopicAmeteAlem: string;
  // export declare let ethiopicAmeteMihret: string;
  // export declare let gregorian: string;
  // export declare let hebrew: string;
  // export declare let ISO8601: string;
  // export declare let indian: string;
  // export declare let islamic: string;
  // export declare let islamicCivil: string;
  // export declare let islamicTabular: string;
  // export declare let islamicUmmAlQura: string;
  // export declare let japanese: string;
  // export declare let persian: string;
  // export declare let republicOfChina: string;
}

namespace NSCell {
  export enum Attribute {
    CellDisabled = 0,
    CellState = 1,
    PushInCell = 2,
    CellEditable = 3,
    ChangeGrayCell = 4,
    CellHighlighted = 5,
    CellLightsByContents = 6,
    CellLightsByGray = 7,
    ChangeBackgroundCell = 8,
    CellLightsByBackground = 9,
    CellIsBordered = 10,
    CellHasOverlappingImage = 11,
    CellHasImageHorizontal = 12,
    CellHasImageOnLeftOrBottom = 13,
    CellChangesContents = 14,
    CellIsInsetButton = 15,
    CellAllowsMixedState = 16
  }

  global['NSCell']['Attribute'] = Attribute;

  export enum HitResult {
    None = 0,
    ContentArea = 1,
    EditableTextArea = 2,
    TrackableArea = 4
  }

  global['NSCell']['HitResult'] = HitResult;

  export enum StyleMask {
    NoCellMask = 0,
    ContentsCellMask = 1,
    PushInCellMask = 2,
    ChangeGrayCellMask = 4,
    ChangeBackgroundCellMask = 8
  }

  global['NSCell']['StyleMask'] = StyleMask;

  export enum CellType {
    NullCellType = 0,
    TextCellType = 1,
    ImageCellType = 2
  }

  global['NSCell']['CellType'] = CellType;

}

namespace NSCoder {
  export enum DecodingFailurePolicy {
    RaiseException = 0,
    SetErrorAndReturn = 1
  }

  global['NSCoder']['DecodingFailurePolicy'] = DecodingFailurePolicy;

}

namespace NSCollectionView {
  export enum UpdateAction {
    Insert = 0,
    Delete = 1,
    Reload = 2,
    Move = 3,
    None = 4
  }

  global['NSCollectionView']['UpdateAction'] = UpdateAction;

  export enum DropOperation {
    On = 0,
    Before = 1
  }

  global['NSCollectionView']['DropOperation'] = DropOperation;

  export enum ScrollDirection {
    Vertical = 0,
    Horizontal = 1
  }

  global['NSCollectionView']['ScrollDirection'] = ScrollDirection;

  export enum ScrollPosition {
    None = 0,
    Top = 1,
    CenteredVertically = 2,
    Bottom = 4,
    NearestHorizontalEdge = 512,
    Left = 8,
    CenteredHorizontally = 16,
    Right = 32,
    LeadingEdge = 64,
    TrailingEdge = 128,
    NearestVerticalEdge = 256
  }

  global['NSCollectionView']['ScrollPosition'] = ScrollPosition;

  // export declare let elementKindInterItemGapIndicator: string;
  // export declare let elementKindSectionFooter: string;
  // export declare let elementKindSectionHeader: string;
  // export type DecorationElementKind = String;
  // export type SupplementaryElementKind = String;
  // export type DecorationElementKind = String;
  // export type SupplementaryElementKind = String;
}

namespace NSCollectionViewItem {
  export enum HighlightState {
    None = 0,
    ForSelection = 1,
    ForDeselection = 2,
    AsDropTarget = 3
  }

  global['NSCollectionViewItem']['HighlightState'] = HighlightState;

}

namespace NSCollectionViewTransitionLayout {
  // export type AnimatedKey = String;
  // export type AnimatedKey = String;
}

namespace NSColor {
  export enum SystemEffect {
    None = 0,
    Pressed = 1,
    DeepPressed = 2,
    Disabled = 3,
    Rollover = 4
  }

  global['NSColor']['SystemEffect'] = SystemEffect;

  export enum ColorType {
    ComponentBased = 0,
    Pattern = 1,
    Catalog = 2
  }

  global['NSColor']['ColorType'] = ColorType;

  // export declare let currentControlTintDidChangeNotification: string;
  // export declare let systemColorsDidChangeNotification: string;
  // export type Name = String;
  // export type Name = String;
}

namespace NSColorList {
  // export declare let didChangeNotification: string;
  // export type Name = String;
  // export type Name = String;
}

namespace NSColorPanel {
  export enum Mode {
    None = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    HSB = 3,
    CustomPalette = 4,
    ColorList = 5,
    Wheel = 6,
    Crayon = 7
  }

  global['NSColorPanel']['Mode'] = Mode;

  export enum Options {
    GrayModeMask = 1,
    RGBModeMask = 2,
    CMYKModeMask = 4,
    HSBModeMask = 8,
    CustomPaletteModeMask = 16,
    ColorListModeMask = 32,
    WheelModeMask = 64,
    CrayonModeMask = 128,
    AllModesMask = 65535
  }

  global['NSColorPanel']['Options'] = Options;

  // export declare let colorDidChangeNotification: string;
}

namespace NSColorSpace {
  export enum Model {
    Unknown = -1,
    Gray = 0,
    RGB = 1,
    CMYK = 2,
    LAB = 3,
    DeviceN = 4,
    Indexed = 5,
    Patterned = 6
  }

  global['NSColorSpace']['Model'] = Model;

}

namespace NSColorSpaceName {
  // export declare let calibratedRGB: string;
  // export declare let calibratedWhite: string;
  // export declare let custom: string;
  // export declare let deviceCMYK: string;
  // export declare let deviceRGB: string;
  // export declare let deviceWhite: string;
  // export declare let named: string;
  // export declare let pattern: string;
}

namespace NSComboBox {
  // export declare let selectionDidChangeNotification: string;
  // export declare let selectionIsChangingNotification: string;
  // export declare let willDismissNotification: string;
  // export declare let willPopUpNotification: string;
}

namespace NSComparisonPredicate {
  export enum Modifier {
    DirectPredicateModifier = 0,
    AllPredicateModifier = 1,
    AnyPredicateModifier = 2
  }

  global['NSComparisonPredicate']['Modifier'] = Modifier;

  export enum Options {
    CaseInsensitivePredicateOption = 1,
    DiacriticInsensitivePredicateOption = 2,
    NormalizedPredicateOption = 4
  }

  global['NSComparisonPredicate']['Options'] = Options;

  export enum Operator {
    LessThanPredicateOperatorType = 0,
    LessThanOrEqualToPredicateOperatorType = 1,
    GreaterThanPredicateOperatorType = 2,
    GreaterThanOrEqualToPredicateOperatorType = 3,
    EqualToPredicateOperatorType = 4,
    NotEqualToPredicateOperatorType = 5,
    MatchesPredicateOperatorType = 6,
    LikePredicateOperatorType = 7,
    BeginsWithPredicateOperatorType = 8,
    EndsWithPredicateOperatorType = 9,
    InPredicateOperatorType = 10,
    CustomSelectorPredicateOperatorType = 11,
    ContainsPredicateOperatorType = 99,
    BetweenPredicateOperatorType = 100
  }

  global['NSComparisonPredicate']['Operator'] = Operator;

}

namespace NSCompoundPredicate {
  export enum LogicalType {
    NotPredicateType = 0,
    AndPredicateType = 1,
    OrPredicateType = 2
  }

  global['NSCompoundPredicate']['LogicalType'] = LogicalType;

}

namespace NSControl {
  export enum ImagePosition {
    NoImage = 0,
    ImageOnly = 1,
    ImageLeft = 2,
    ImageRight = 3,
    ImageBelow = 4,
    ImageAbove = 5,
    ImageOverlaps = 6,
    ImageLeading = 7,
    ImageTrailing = 8
  }

  global['NSControl']['ImagePosition'] = ImagePosition;

  export enum ControlSize {
    Regular = 0,
    Small = 1,
    Mini = 2
  }

  global['NSControl']['ControlSize'] = ControlSize;

  // export declare let mixed: number;
  // export declare let off: number;
  // export declare let on: number;
  // export declare let textDidBeginEditingNotification: string;
  // export declare let textDidChangeNotification: string;
  // export declare let textDidEndEditingNotification: string;
}

namespace NSData {
  export enum Base64DecodingOptions {
    IgnoreUnknownCharacters = 1
  }

  global['NSData']['Base64DecodingOptions'] = Base64DecodingOptions;

  export enum Base64EncodingOptions {
    Encoding64CharacterLineLength = 1,
    Encoding76CharacterLineLength = 2,
    EncodingEndLineWithCarriageReturn = 16,
    EncodingEndLineWithLineFeed = 32
  }

  global['NSData']['Base64EncodingOptions'] = Base64EncodingOptions;

  export enum CompressionAlgorithm {
    LZFSE = 0,
    LZ4 = 1,
    LZMA = 2,
    Zlib = 3
  }

  global['NSData']['CompressionAlgorithm'] = CompressionAlgorithm;

  export enum ReadingOptions {
    DataReadingMappedIfSafe = 1,
    DataReadingUncached = 2,
    DataReadingMappedAlways = 8,
    DataReadingMapped = 1,
    MappedRead = 1,
    UncachedRead = 2
  }

  global['NSData']['ReadingOptions'] = ReadingOptions;

  export enum SearchOptions {
    Backwards = 1,
    Anchored = 2
  }

  global['NSData']['SearchOptions'] = SearchOptions;

  export enum WritingOptions {
    DataWritingAtomic = 1,
    DataWritingWithoutOverwriting = 2,
    DataWritingFileProtectionNone = 268435456,
    DataWritingFileProtectionComplete = 536870912,
    DataWritingFileProtectionCompleteUnlessOpen = 805306368,
    DataWritingFileProtectionCompleteUntilFirstUserAuthentication = 1073741824,
    DataWritingFileProtectionMask = 4026531840,
    AtomicWrite = 1
  }

  global['NSData']['WritingOptions'] = WritingOptions;

  // export type Element = number;
  // export type Index = number;
  // export type Iterator = IndexingIterator;
  // export type SubSequence = Slice;
  // export type Indices = Range;
  // export type Element = number;
  // export type Index = number;
  // export type Iterator = IndexingIterator;
  // export type SubSequence = Slice;
  // export type Indices = Range;
}

namespace NSDatePicker {
  export enum ElementFlags {
    HourMinute = 12,
    HourMinuteSecond = 14,
    TimeZone = 16,
    YearMonth = 192,
    YearMonthDay = 224,
    Era = 256
  }

  global['NSDatePicker']['ElementFlags'] = ElementFlags;

  export enum Mode {
    Single = 0,
    Range = 1
  }

  global['NSDatePicker']['Mode'] = Mode;

  export enum Style {
    TextFieldAndStepper = 0,
    ClockAndCalendar = 1,
    TextField = 2
  }

  global['NSDatePicker']['Style'] = Style;

  // export declare let clockAndCalendar: NSDatePicker.Style;
  // export declare let era: NSDatePicker.ElementFlags;
  // export declare let hourMinute: NSDatePicker.ElementFlags;
  // export declare let hourMinuteSecond: NSDatePicker.ElementFlags;
  // export declare let range: NSDatePicker.Mode;
  // export declare let single: NSDatePicker.Mode;
  // export declare let textFieldAndStepper: NSDatePicker.Style;
  // export declare let textField: NSDatePicker.Style;
  // export declare let timeZone: NSDatePicker.ElementFlags;
  // export declare let yearMonth: NSDatePicker.ElementFlags;
  // export declare let yearMonthDay: NSDatePicker.ElementFlags;
}

namespace NSDecimalNumber {
  export enum CalculationError {
    NoError = 0,
    LossOfPrecision = 1,
    Underflow = 2,
    Overflow = 3,
    DivideByZero = 4
  }

  global['NSDecimalNumber']['CalculationError'] = CalculationError;

  export enum RoundingMode {
    Plain = 0,
    Down = 1,
    Up = 2,
    Bankers = 3
  }

  global['NSDecimalNumber']['RoundingMode'] = RoundingMode;

}

namespace NSDeviceDescriptionKey {
  // export declare let bitsPerSample: string;
  // export declare let colorSpaceName: string;
  // export declare let isPrinter: string;
  // export declare let isScreen: string;
  // export declare let resolution: string;
  // export declare let size: string;
}

namespace NSDocument {
  export enum ChangeType {
    ChangeDone = 0,
    ChangeUndone = 1,
    ChangeRedone = 5,
    ChangeCleared = 2,
    ChangeReadOtherContents = 3,
    ChangeAutosaved = 4,
    ChangeDiscardable = 256
  }

  global['NSDocument']['ChangeType'] = ChangeType;

  export enum SaveOperationType {
    SaveOperation = 0,
    SaveAsOperation = 1,
    SaveToOperation = 2,
    AutosaveInPlaceOperation = 4,
    AutosaveElsewhereOperation = 3,
    AutosaveAsOperation = 5,
    AutosaveOperation = 3
  }

  global['NSDocument']['SaveOperationType'] = SaveOperationType;

}

namespace NSDraggingItem {
  // export declare let icon: string;
  // export declare let label: string;
}

namespace NSDrawer {
  export enum State {
    ClosedState = 0,
    OpeningState = 1,
    OpenState = 2,
    ClosingState = 3
  }

  global['NSDrawer']['State'] = State;

}

namespace NSEnumerator {
  // export type Iterator = NSFastEnumerationIterator;
  // export type Iterator = NSFastEnumerationIterator;
}

namespace NSError {
  // export type UserInfoKey = string;
  // export type UserInfoKey = string;
}

namespace NSEvent {
  export enum ButtonMask {
    PenTip = 1,
    PenLowerSide = 2,
    PenUpperSide = 4
  }

  global['NSEvent']['ButtonMask'] = ButtonMask;

  export enum GestureAxis {
    None = 0,
    Horizontal = 1,
    Vertical = 2
  }

  global['NSEvent']['GestureAxis'] = GestureAxis;

  export enum EventTypeMask {
    LeftMouseDown = 2,
    LeftMouseUp = 4,
    RightMouseDown = 8,
    RightMouseUp = 16,
    MouseMoved = 32,
    LeftMouseDragged = 64,
    RightMouseDragged = 128,
    MouseEntered = 256,
    MouseExited = 512,
    KeyDown = 1024,
    KeyUp = 2048,
    FlagsChanged = 4096,
    AppKitDefined = 8192,
    SystemDefined = 16384,
    ApplicationDefined = 32768,
    Periodic = 65536,
    CursorUpdate = 131072,
    ScrollWheel = 4194304,
    TabletPoint = 8388608,
    TabletProximity = 16777216,
    OtherMouseDown = 33554432,
    OtherMouseUp = 67108864,
    OtherMouseDragged = 134217728,
    Gesture = 536870912,
    Magnify = 1073741824,
    Swipe = 2147483648,
    Rotate = 262144,
    BeginGesture = 524288,
    EndGesture = 1048576,
    SmartMagnify = 4294967296,
    Pressure = 17179869184,
    DirectTouch = 137438953472,
    ChangeMode = 274877906944,
    Any = -1
  }

  global['NSEvent']['EventTypeMask'] = EventTypeMask;

  export enum ModifierFlags {
    CapsLock = 65536,
    Shift = 131072,
    Control = 262144,
    Option = 524288,
    Command = 1048576,
    NumericPad = 2097152,
    Help = 4194304,
    Function = 8388608,
    DeviceIndependentFlagsMask = 4294901760
  }

  global['NSEvent']['ModifierFlags'] = ModifierFlags;

  export enum Phase {
    None = 0,
    Began = 1,
    Stationary = 2,
    Changed = 4,
    Ended = 8,
    Cancelled = 16,
    MayBegin = 32
  }

  global['NSEvent']['Phase'] = Phase;

  export enum EventSubtype {
    WindowExposed = 0,
    ApplicationActivated = 1,
    ApplicationDeactivated = 2,
    WindowMoved = 4,
    ScreenChanged = 8,
    PowerOff = 1,
    MouseEvent = 0,
    TabletPoint = 1,
    TabletProximity = 2,
    Touch = 3
  }

  global['NSEvent']['EventSubtype'] = EventSubtype;

  export enum SwipeTrackingOptions {
    LockDirection = 1,
    ClampGestureAmount = 2
  }

  global['NSEvent']['SwipeTrackingOptions'] = SwipeTrackingOptions;

  export enum EventType {
    LeftMouseDown = 1,
    LeftMouseUp = 2,
    RightMouseDown = 3,
    RightMouseUp = 4,
    MouseMoved = 5,
    LeftMouseDragged = 6,
    RightMouseDragged = 7,
    MouseEntered = 8,
    MouseExited = 9,
    KeyDown = 10,
    KeyUp = 11,
    FlagsChanged = 12,
    AppKitDefined = 13,
    SystemDefined = 14,
    ApplicationDefined = 15,
    Periodic = 16,
    CursorUpdate = 17,
    ScrollWheel = 22,
    TabletPoint = 23,
    TabletProximity = 24,
    OtherMouseDown = 25,
    OtherMouseUp = 26,
    OtherMouseDragged = 27,
    Gesture = 29,
    Magnify = 30,
    Swipe = 31,
    Rotate = 18,
    BeginGesture = 19,
    EndGesture = 20,
    SmartMagnify = 32,
    QuickLook = 33,
    Pressure = 34,
    DirectTouch = 37,
    ChangeMode = 38
  }

  global['NSEvent']['EventType'] = EventType;

  export enum PointingDeviceType {
    Unknown = 0,
    Pen = 1,
    Cursor = 2,
    Eraser = 3
  }

  global['NSEvent']['PointingDeviceType'] = PointingDeviceType;

  export enum PressureBehavior {
    Unknown = -1,
    PrimaryDefault = 0,
    PrimaryClick = 1,
    PrimaryGeneric = 2,
    PrimaryAccelerator = 3,
    PrimaryDeepClick = 5,
    PrimaryDeepDrag = 6
  }

  global['NSEvent']['PressureBehavior'] = PressureBehavior;

  // export declare let foreverDuration: number;
}

namespace NSExceptionName {
  // export declare let abortModalException: string;
  // export declare let abortPrintingException: string;
  // export declare let appKitIgnoredException: string;
  // export declare let appKitVirtualMemoryException: string;
  // export declare let badBitmapParametersException: string;
  // export declare let badComparisonException: string;
  // export declare let badRTFColorTableException: string;
  // export declare let badRTFDirectiveException: string;
  // export declare let badRTFFontTableException: string;
  // export declare let badRTFStyleSheetException: string;
  // export declare let browserIllegalDelegateException: string;
  // export declare let colorListIOException: string;
  // export declare let colorListNotEditableException: string;
  // export declare let draggingException: string;
  // export declare let fontUnavailableException: string;
  // export declare let illegalSelectorException: string;
  // export declare let imageCacheException: string;
  // export declare let nibLoadingException: string;
  // export declare let NSPPDIncludeNotFoundException: string;
  // export declare let NSPPDIncludeStackOverflowException: string;
  // export declare let NSPPDIncludeStackUnderflowException: string;
  // export declare let NSPPDParseException: string;
  // export declare let pasteboardCommunicationException: string;
  // export declare let printOperationExistsException: string;
  // export declare let printPackageException: string;
  // export declare let printingCommunicationException: string;
  // export declare let NSRTFPropertyStackOverflowException: string;
  // export declare let NSTIFFException: string;
  // export declare let textLineTooLongException: string;
  // export declare let textNoSelectionException: string;
  // export declare let textReadException: string;
  // export declare let textWriteException: string;
  // export declare let typedStreamVersionException: string;
  // export declare let windowServerCommunicationException: string;
  // export declare let wordTablesReadException: string;
  // export declare let wordTablesWriteException: string;
  // export declare let characterConversionException: string;
  // export declare let decimalNumberDivideByZeroException: string;
  // export declare let decimalNumberExactnessException: string;
  // export declare let decimalNumberOverflowException: string;
  // export declare let decimalNumberUnderflowException: string;
  // export declare let destinationInvalidException: string;
  // export declare let fileHandleOperationException: string;
  // export declare let genericException: string;
  // export declare let inconsistentArchiveException: string;
  // export declare let internalInconsistencyException: string;
  // export declare let invalidArchiveOperationException: string;
  // export declare let invalidArgumentException: string;
  // export declare let invalidReceivePortException: string;
  // export declare let invalidSendPortException: string;
  // export declare let invalidUnarchiveOperationException: string;
  // export declare let invocationOperationCancelledException: string;
  // export declare let invocationOperationVoidResultException: string;
  // export declare let mallocException: string;
  // export declare let objectInaccessibleException: string;
  // export declare let objectNotAvailableException: string;
  // export declare let oldStyleException: string;
  // export declare let parseErrorException: string;
  // export declare let portReceiveException: string;
  // export declare let portSendException: string;
  // export declare let portTimeoutException: string;
  // export declare let rangeException: string;
  // export declare let undefinedKeyException: string;
}

namespace NSExpression {
  export enum ExpressionType {
    ConstantValueExpressionType = 0,
    EvaluatedObjectExpressionType = 1,
    VariableExpressionType = 2,
    KeyPathExpressionType = 3,
    FunctionExpressionType = 4,
    UnionSetExpressionType = 5,
    IntersectSetExpressionType = 6,
    MinusSetExpressionType = 7,
    SubqueryExpressionType = 13,
    AggregateExpressionType = 14,
    AnyKeyExpressionType = 15,
    BlockExpressionType = 19,
    ConditionalExpressionType = 20
  }

  global['NSExpression']['ExpressionType'] = ExpressionType;

}

namespace NSFileCoordinator {
  export enum ReadingOptions {
    WithoutChanges = 1,
    ResolvesSymbolicLink = 2,
    ImmediatelyAvailableMetadataOnly = 4,
    ForUploading = 8
  }

  global['NSFileCoordinator']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    ForDeleting = 1,
    ForMoving = 2,
    ForMerging = 4,
    ForReplacing = 8,
    ContentIndependentMetadataOnly = 16
  }

  global['NSFileCoordinator']['WritingOptions'] = WritingOptions;

}

namespace NSFileVersion {
  export enum AddingOptions {
    ByMoving = 1
  }

  global['NSFileVersion']['AddingOptions'] = AddingOptions;

  export enum ReplacingOptions {
    ByMoving = 1
  }

  global['NSFileVersion']['ReplacingOptions'] = ReplacingOptions;

}

namespace NSFont {
  // export declare let antialiasThresholdChangedNotification: string;
  // export declare let identityMatrix: number;
  // export declare let fontSetChangedNotification: string;
  // export declare let black: number;
  // export declare let bold: number;
  // export declare let heavy: number;
  // export declare let light: number;
  // export declare let medium: number;
  // export declare let regular: number;
  // export declare let semibold: number;
  // export declare let thin: number;
  // export declare let ultraLight: number;
}

namespace NSFontAssetRequest {
  export enum Options {
    UsesStandardUI = 1
  }

  global['NSFontAssetRequest']['Options'] = Options;

}

namespace NSFontCollection {
  export enum Visibility {
    Process = 1,
    User = 2,
    Computer = 4
  }

  global['NSFontCollection']['Visibility'] = Visibility;

  // export declare let actionUserInfoKey: string;
  // export declare let allFonts: string;
  // export declare let didChangeNotification: string;
  // export declare let favorites: string;
  // export declare let nameUserInfoKey: string;
  // export declare let oldNameUserInfoKey: string;
  // export declare let recentlyUsed: string;
  // export declare let user: string;
  // export declare let visibilityUserInfoKey: string;
  // export declare let hidden: string;
  // export declare let renamed: string;
  // export declare let shown: string;
}

namespace NSFontDescriptor {
  export enum SymbolicTraits {
    TraitItalic = 1,
    TraitBold = 2,
    TraitExpanded = 32,
    TraitCondensed = 64,
    TraitMonoSpace = 1024,
    TraitVertical = 2048,
    TraitUIOptimized = 4096,
    TraitTightLeading = 32768,
    TraitLooseLeading = 65536,
    ClassMask = 4026531840,
    ClassUnknown = 0,
    ClassOldStyleSerifs = 268435456,
    ClassTransitionalSerifs = 536870912,
    ClassModernSerifs = 805306368,
    ClassClarendonSerifs = 1073741824,
    ClassSlabSerifs = 1342177280,
    ClassFreeformSerifs = 1879048192,
    ClassSansSerif = 2147483648,
    ClassOrnamentals = 2415919104,
    ClassScripts = 2684354560,
    ClassSymbolic = 3221225472
  }

  global['NSFontDescriptor']['SymbolicTraits'] = SymbolicTraits;

  // export declare let cascadeList: string;
  // export declare let characterSet: string;
  // export declare let default_: string;
  // export declare let monospaced: string;
  // export declare let rounded: string;
  // export declare let serif: string;
  // export declare let face: string;
  // export declare let family: string;
  // export declare let selectorIdentifier: string;
  // export declare let featureSettings: string;
  // export declare let typeIdentifier: string;
  // export declare let fixedAdvance: string;
  // export declare let matrix: string;
  // export declare let name: string;
  // export declare let size: string;
  // export declare let slant: string;
  // export declare let symbolic: string;
  // export declare let traits: string;
  // export declare let variation: string;
  // export declare let defaultValue: string;
  // export declare let identifier: string;
  // export declare let maximumValue: string;
  // export declare let minimumValue: string;
  // export declare let visibleName: string;
  // export declare let weight: string;
  // export declare let width: string;
}

namespace NSFontPanel {
  export enum ModeMask {
    ModeMaskFace = 1,
    ModeMaskSize = 2,
    ModeMaskCollection = 4,
    ModeMaskUnderlineEffect = 256,
    ModeMaskStrikethroughEffect = 512,
    ModeMaskTextColorEffect = 1024,
    ModeMaskDocumentColorEffect = 2048,
    ModeMaskShadowEffect = 4096,
    ModeMaskAllEffects = 1048320,
    ModesMaskStandardModes = 65535,
    ModesMaskAllModes = 4294967295
  }

  global['NSFontPanel']['ModeMask'] = ModeMask;

}

namespace NSGestureRecognizer {
  export enum State {
    Possible = 0,
    Began = 1,
    Changed = 2,
    Ended = 3,
    Cancelled = 4,
    Failed = 5,
    Recognized = 3
  }

  global['NSGestureRecognizer']['State'] = State;

}

namespace NSGradient {
  export enum DrawingOptions {
    DrawsBeforeStartingLocation = 1,
    DrawsAfterEndingLocation = 2
  }

  global['NSGradient']['DrawingOptions'] = DrawingOptions;

}

namespace NSGraphicsContext {
  // export declare let destination: string;
  // export declare let pdf: string;
  // export declare let postScript: string;
  // export declare let representationFormat: string;
}

namespace NSGridCell {
  export enum Placement {
    Inherited = 0,
    None = 1,
    Leading = 2,
    Top = 2,
    Trailing = 3,
    Bottom = 3,
    Center = 4,
    Fill = 5
  }

  global['NSGridCell']['Placement'] = Placement;

}

namespace NSGridRow {
  export enum Alignment {
    Inherited = 0,
    None = 1,
    FirstBaseline = 2,
    LastBaseline = 3
  }

  global['NSGridRow']['Alignment'] = Alignment;

}

namespace NSGridView {
  // export declare let sizedForContent: number;
}

namespace NSHapticFeedbackManager {
  export enum FeedbackPattern {
    Generic = 0,
    Alignment = 1,
    LevelChange = 2
  }

  global['NSHapticFeedbackManager']['FeedbackPattern'] = FeedbackPattern;

  export enum PerformanceTime {
    Default = 0,
    Now = 1,
    DrawCompleted = 2
  }

  global['NSHapticFeedbackManager']['PerformanceTime'] = PerformanceTime;

}

namespace NSHelpManager {
  // export declare let contextHelpModeDidActivateNotification: string;
  // export declare let contextHelpModeDidDeactivateNotification: string;
  // export type BookName = String;
  // export type AnchorName = String;
  // export type ContextHelpKey = String;
  // export type BookName = String;
  // export type AnchorName = String;
  // export type ContextHelpKey = String;
}

namespace NSImage {
  export enum CacheMode {
    Default = 0,
    Always = 1,
    BySize = 2,
    Never = 3
  }

  global['NSImage']['CacheMode'] = CacheMode;

  export enum LayoutDirection {
    Unspecified = -1,
    LeftToRight = 2,
    RightToLeft = 3
  }

  global['NSImage']['LayoutDirection'] = LayoutDirection;

  export enum LoadStatus {
    Completed = 0,
    Cancelled = 1,
    InvalidData = 2,
    UnexpectedEOF = 3,
    ReadError = 4
  }

  global['NSImage']['LoadStatus'] = LoadStatus;

  export enum ResizingMode {
    Stretch = 0,
    Tile = 1
  }

  global['NSImage']['ResizingMode'] = ResizingMode;

  // export declare let actionTemplateName: string;
  // export declare let addTemplateName: string;
  // export declare let advancedName: string;
  // export declare let applicationIconName: string;
  // export declare let bluetoothTemplateName: string;
  // export declare let bonjourName: string;
  // export declare let bookmarksTemplateName: string;
  // export declare let cautionName: string;
  // export declare let colorPanelName: string;
  // export declare let columnViewTemplateName: string;
  // export declare let computerName: string;
  // export declare let enterFullScreenTemplateName: string;
  // export declare let everyoneName: string;
  // export declare let exitFullScreenTemplateName: string;
  // export declare let flowViewTemplateName: string;
  // export declare let folderName: string;
  // export declare let folderBurnableName: string;
  // export declare let folderSmartName: string;
  // export declare let followLinkFreestandingTemplateName: string;
  // export declare let fontPanelName: string;
  // export declare let goBackTemplateName: string;
  // export declare let goForwardTemplateName: string;
  // export declare let goLeftTemplateName: string;
  // export declare let goRightTemplateName: string;
  // export declare let homeTemplateName: string;
  // export declare let iChatTheaterTemplateName: string;
  // export declare let iconViewTemplateName: string;
  // export declare let infoName: string;
  // export declare let invalidDataFreestandingTemplateName: string;
  // export declare let leftFacingTriangleTemplateName: string;
  // export declare let listViewTemplateName: string;
  // export declare let lockLockedTemplateName: string;
  // export declare let lockUnlockedTemplateName: string;
  // export declare let menuMixedStateTemplateName: string;
  // export declare let menuOnStateTemplateName: string;
  // export declare let mobileMeName: string;
  // export declare let multipleDocumentsName: string;
  // export declare let networkName: string;
  // export declare let pathTemplateName: string;
  // export declare let preferencesGeneralName: string;
  // export declare let quickLookTemplateName: string;
  // export declare let refreshFreestandingTemplateName: string;
  // export declare let refreshTemplateName: string;
  // export declare let removeTemplateName: string;
  // export declare let revealFreestandingTemplateName: string;
  // export declare let rightFacingTriangleTemplateName: string;
  // export declare let shareTemplateName: string;
  // export declare let slideshowTemplateName: string;
  // export declare let smartBadgeTemplateName: string;
  // export declare let statusAvailableName: string;
  // export declare let statusNoneName: string;
  // export declare let statusPartiallyAvailableName: string;
  // export declare let statusUnavailableName: string;
  // export declare let stopProgressFreestandingTemplateName: string;
  // export declare let stopProgressTemplateName: string;
  // export declare let touchBarAddDetailTemplateName: string;
  // export declare let touchBarAddTemplateName: string;
  // export declare let touchBarAlarmTemplateName: string;
  // export declare let touchBarAudioInputMuteTemplateName: string;
  // export declare let touchBarAudioInputTemplateName: string;
  // export declare let touchBarAudioOutputMuteTemplateName: string;
  // export declare let touchBarAudioOutputVolumeHighTemplateName: string;
  // export declare let touchBarAudioOutputVolumeLowTemplateName: string;
  // export declare let touchBarAudioOutputVolumeMediumTemplateName: string;
  // export declare let touchBarAudioOutputVolumeOffTemplateName: string;
  // export declare let touchBarBookmarksTemplateName: string;
  // export declare let touchBarColorPickerFillName: string;
  // export declare let touchBarColorPickerFontName: string;
  // export declare let touchBarColorPickerStrokeName: string;
  // export declare let touchBarCommunicationAudioTemplateName: string;
  // export declare let touchBarCommunicationVideoTemplateName: string;
  // export declare let touchBarComposeTemplateName: string;
  // export declare let touchBarDeleteTemplateName: string;
  // export declare let touchBarDownloadTemplateName: string;
  // export declare let touchBarEnterFullScreenTemplateName: string;
  // export declare let touchBarExitFullScreenTemplateName: string;
  // export declare let touchBarFastForwardTemplateName: string;
  // export declare let touchBarFolderCopyToTemplateName: string;
  // export declare let touchBarFolderMoveToTemplateName: string;
  // export declare let touchBarFolderTemplateName: string;
  // export declare let touchBarGetInfoTemplateName: string;
  // export declare let touchBarGoBackTemplateName: string;
  // export declare let touchBarGoDownTemplateName: string;
  // export declare let touchBarGoForwardTemplateName: string;
  // export declare let touchBarGoUpTemplateName: string;
  // export declare let touchBarHistoryTemplateName: string;
  // export declare let touchBarIconViewTemplateName: string;
  // export declare let touchBarListViewTemplateName: string;
  // export declare let touchBarMailTemplateName: string;
  // export declare let touchBarNewFolderTemplateName: string;
  // export declare let touchBarNewMessageTemplateName: string;
  // export declare let touchBarOpenInBrowserTemplateName: string;
  // export declare let touchBarPauseTemplateName: string;
  // export declare let touchBarPlayPauseTemplateName: string;
  // export declare let touchBarPlayTemplateName: string;
  // export declare let touchBarPlayheadTemplateName: string;
  // export declare let touchBarQuickLookTemplateName: string;
  // export declare let touchBarRecordStartTemplateName: string;
  // export declare let touchBarRecordStopTemplateName: string;
  // export declare let touchBarRefreshTemplateName: string;
  // export declare let touchBarRemoveTemplateName: string;
  // export declare let touchBarRewindTemplateName: string;
  // export declare let touchBarRotateLeftTemplateName: string;
  // export declare let touchBarRotateRightTemplateName: string;
  // export declare let touchBarSearchTemplateName: string;
  // export declare let touchBarShareTemplateName: string;
  // export declare let touchBarSidebarTemplateName: string;
  // export declare let touchBarSkipAhead15SecondsTemplateName: string;
  // export declare let touchBarSkipAhead30SecondsTemplateName: string;
  // export declare let touchBarSkipAheadTemplateName: string;
  // export declare let touchBarSkipBack15SecondsTemplateName: string;
  // export declare let touchBarSkipBack30SecondsTemplateName: string;
  // export declare let touchBarSkipBackTemplateName: string;
  // export declare let touchBarSkipToEndTemplateName: string;
  // export declare let touchBarSkipToStartTemplateName: string;
  // export declare let touchBarSlideshowTemplateName: string;
  // export declare let touchBarTagIconTemplateName: string;
  // export declare let touchBarTextBoldTemplateName: string;
  // export declare let touchBarTextBoxTemplateName: string;
  // export declare let touchBarTextCenterAlignTemplateName: string;
  // export declare let touchBarTextItalicTemplateName: string;
  // export declare let touchBarTextJustifiedAlignTemplateName: string;
  // export declare let touchBarTextLeftAlignTemplateName: string;
  // export declare let touchBarTextListTemplateName: string;
  // export declare let touchBarTextRightAlignTemplateName: string;
  // export declare let touchBarTextStrikethroughTemplateName: string;
  // export declare let touchBarTextUnderlineTemplateName: string;
  // export declare let touchBarUserAddTemplateName: string;
  // export declare let touchBarUserGroupTemplateName: string;
  // export declare let touchBarUserTemplateName: string;
  // export declare let touchBarVolumeDownTemplateName: string;
  // export declare let touchBarVolumeUpTemplateName: string;
  // export declare let trashEmptyName: string;
  // export declare let trashFullName: string;
  // export declare let userName: string;
  // export declare let userAccountsName: string;
  // export declare let userGroupName: string;
  // export declare let userGuestName: string;
  // export type Name = String;
  // export type Name = String;
}

namespace NSImageRep {
  // export declare let ctm: string;
  // export declare let interpolation: string;
  // export declare let userInterfaceLayoutDirection: string;
  // export declare let registryDidChangeNotification: string;
}

namespace NSImageView {
  export enum FrameStyle {
    None = 0,
    Photo = 1,
    GrayBezel = 2,
    Groove = 3,
    Button = 4
  }

  global['NSImageView']['FrameStyle'] = FrameStyle;

}

namespace NSIndexSet {
  // export type Element = NSIndexSetIterator;
  // export type Iterator = NSIndexSetIterator;
  // export type Element = NSIndexSetIterator;
  // export type Iterator = NSIndexSetIterator;
}

namespace NSItemProvider {
  export enum ErrorCode {
    UnknownError = -1,
    ItemUnavailableError = -1000,
    UnexpectedValueClassError = -1100,
    UnavailableCoercionError = -1200
  }

  global['NSItemProvider']['ErrorCode'] = ErrorCode;

  // export declare let errorDomain: string;
}

namespace NSKeyValueChangeKey {
  // export declare let indexesKey: string;
  // export declare let kindKey: string;
  // export declare let newKey: string;
  // export declare let notificationIsPriorKey: string;
  // export declare let oldKey: string;
}

namespace NSKeyValueOperator {
  // export declare let averageKeyValueOperator: string;
  // export declare let countKeyValueOperator: string;
  // export declare let distinctUnionOfArraysKeyValueOperator: string;
  // export declare let distinctUnionOfObjectsKeyValueOperator: string;
  // export declare let distinctUnionOfSetsKeyValueOperator: string;
  // export declare let maximumKeyValueOperator: string;
  // export declare let minimumKeyValueOperator: string;
  // export declare let sumKeyValueOperator: string;
  // export declare let unionOfArraysKeyValueOperator: string;
  // export declare let unionOfObjectsKeyValueOperator: string;
  // export declare let unionOfSetsKeyValueOperator: string;
}

namespace NSLayoutConstraint {
  export enum Attribute {
    Left = 1,
    Right = 2,
    Top = 3,
    Bottom = 4,
    Leading = 5,
    Trailing = 6,
    Width = 7,
    Height = 8,
    CenterX = 9,
    CenterY = 10,
    LastBaseline = 11,
    Baseline = 11,
    FirstBaseline = 12,
    NotAnAttribute = 0
  }

  global['NSLayoutConstraint']['Attribute'] = Attribute;

  export enum Orientation {
    Horizontal = 0,
    Vertical = 1
  }

  global['NSLayoutConstraint']['Orientation'] = Orientation;

  export enum FormatOptions {
    AlignAllLeft = 2,
    AlignAllRight = 4,
    AlignAllTop = 8,
    AlignAllBottom = 16,
    AlignAllLeading = 32,
    AlignAllTrailing = 64,
    AlignAllCenterX = 512,
    AlignAllCenterY = 1024,
    AlignAllLastBaseline = 2048,
    AlignAllFirstBaseline = 4096,
    AlignAllBaseline = 2048,
    AlignmentMask = 65535,
    DirectionLeadingToTrailing = 0,
    DirectionLeftToRight = 65536,
    DirectionRightToLeft = 131072,
    DirectionMask = 196608
  }

  global['NSLayoutConstraint']['FormatOptions'] = FormatOptions;

  export enum Relation {
    LessThanOrEqual = -1,
    Equal = 0,
    GreaterThanOrEqual = 1
  }

  global['NSLayoutConstraint']['Relation'] = Relation;

  // export declare let defaultHigh: number;
  // export declare let defaultLow: number;
  // export declare let dragThatCanResizeWindow: number;
  // export declare let dragThatCannotResizeWindow: number;
  // export declare let fittingSizeCompression: number;
  // export declare let required: number;
  // export declare let windowSizeStayPut: number;
}

namespace NSLayoutManager {
  export enum ControlCharacterAction {
    ZeroAdvancement = 1,
    Whitespace = 2,
    HorizontalTab = 4,
    LineBreak = 8,
    ParagraphBreak = 16,
    ContainerBreak = 32
  }

  global['NSLayoutManager']['ControlCharacterAction'] = ControlCharacterAction;

  export enum GlyphProperty {
    Null = 1,
    ControlCharacter = 2,
    Elastic = 4,
    NonBaseCharacter = 8
  }

  global['NSLayoutManager']['GlyphProperty'] = GlyphProperty;

  export enum TextLayoutOrientation {
    Horizontal = 0,
    Vertical = 1
  }

  global['NSLayoutManager']['TextLayoutOrientation'] = TextLayoutOrientation;

  export enum TypesetterBehavior {
    LatestBehavior = -1,
    OriginalBehavior = 0,
    Behavior_10_2_WithCompatibility = 1,
    Behavior_10_2 = 2,
    Behavior_10_3 = 3,
    Behavior_10_4 = 4
  }

  global['NSLayoutManager']['TypesetterBehavior'] = TypesetterBehavior;

}

namespace NSLevelIndicator {
  export enum PlaceholderVisibility {
    Automatic = 0,
    Always = 1,
    WhileEditing = 2
  }

  global['NSLevelIndicator']['PlaceholderVisibility'] = PlaceholderVisibility;

  export enum Style {
    Relevancy = 0,
    ContinuousCapacity = 1,
    DiscreteCapacity = 2,
    Rating = 3
  }

  global['NSLevelIndicator']['Style'] = Style;

}

namespace NSLinguisticTag {
  // export declare let adjective: string;
  // export declare let adverb: string;
  // export declare let classifier: string;
  // export declare let closeParenthesis: string;
  // export declare let closeQuote: string;
  // export declare let conjunction: string;
  // export declare let dash: string;
  // export declare let determiner: string;
  // export declare let idiom: string;
  // export declare let interjection: string;
  // export declare let noun: string;
  // export declare let number: string;
  // export declare let openParenthesis: string;
  // export declare let openQuote: string;
  // export declare let organizationName: string;
  // export declare let other: string;
  // export declare let otherPunctuation: string;
  // export declare let otherWhitespace: string;
  // export declare let otherWord: string;
  // export declare let paragraphBreak: string;
  // export declare let particle: string;
  // export declare let personalName: string;
  // export declare let placeName: string;
  // export declare let preposition: string;
  // export declare let pronoun: string;
  // export declare let punctuation: string;
  // export declare let sentenceTerminator: string;
  // export declare let verb: string;
  // export declare let whitespace: string;
  // export declare let word: string;
  // export declare let wordJoiner: string;
}

namespace NSLinguisticTagScheme {
  // export declare let language: string;
  // export declare let lemma: string;
  // export declare let lexicalClass: string;
  // export declare let nameType: string;
  // export declare let nameTypeOrLexicalClass: string;
  // export declare let script: string;
  // export declare let tokenType: string;
}

namespace NSLinguisticTagger {
  export enum Options {
    OmitWords = 1,
    OmitPunctuation = 2,
    OmitWhitespace = 4,
    OmitOther = 8,
    JoinNames = 16
  }

  global['NSLinguisticTagger']['Options'] = Options;

}

namespace NSLocale {
  export enum LanguageDirection {
    Unknown = 0,
    LeftToRight = 1,
    RightToLeft = 2,
    TopToBottom = 3,
    BottomToTop = 4
  }

  global['NSLocale']['LanguageDirection'] = LanguageDirection;

  // export declare let currentLocaleDidChangeNotification: string;
  // export declare let alternateQuotationBeginDelimiterKey: string;
  // export declare let alternateQuotationEndDelimiterKey: string;
  // export declare let calendar: string;
  // export declare let collationIdentifier: string;
  // export declare let collatorIdentifier: string;
  // export declare let countryCode: string;
  // export declare let currencyCode: string;
  // export declare let currencySymbol: string;
  // export declare let decimalSeparator: string;
  // export declare let exemplarCharacterSet: string;
  // export declare let groupingSeparator: string;
  // export declare let identifier: string;
  // export declare let languageCode: string;
  // export declare let measurementSystem: string;
  // export declare let quotationBeginDelimiterKey: string;
  // export declare let quotationEndDelimiterKey: string;
  // export declare let scriptCode: string;
  // export declare let usesMetricSystem: string;
  // export declare let variantCode: string;
}

namespace NSMachPort {
  export enum Options {
    DeallocateNone = 0,
    DeallocateSendRight = 1,
    DeallocateReceiveRight = 2
  }

  global['NSMachPort']['Options'] = Options;

}

namespace NSMatrix {
  export enum Mode {
    RadioModeMatrix = 0,
    HighlightModeMatrix = 1,
    ListModeMatrix = 2,
    TrackModeMatrix = 3
  }

  global['NSMatrix']['Mode'] = Mode;

}

namespace NSMediaLibraryBrowserController {
  export enum Library {
    Audio = 1,
    Image = 2,
    Movie = 4
  }

  global['NSMediaLibraryBrowserController']['Library'] = Library;

}

namespace NSMenu {
  export enum Properties {
    PropertyItemTitle = 1,
    PropertyItemAttributedTitle = 2,
    PropertyItemKeyEquivalent = 4,
    PropertyItemImage = 8,
    PropertyItemEnabled = 16,
    PropertyItemAccessibilityDescription = 32
  }

  global['NSMenu']['Properties'] = Properties;

  // export declare let didAddItemNotification: string;
  // export declare let didBeginTrackingNotification: string;
  // export declare let didChangeItemNotification: string;
  // export declare let didEndTrackingNotification: string;
  // export declare let didRemoveItemNotification: string;
  // export declare let didSendActionNotification: string;
  // export declare let willSendActionNotification: string;
}

namespace NSMenuItem {
  // export declare let importFromDeviceIdentifier: string;
}

namespace NSNib {
  // export type Name = String;
  // export type Name = String;
}

namespace NSNotification {
  // export declare let AVAssetChapterMetadataGroupsDidChange: string;
  // export declare let AVAssetContainsFragmentsDidChange: string;
  // export declare let AVAssetDurationDidChange: string;
  // export declare let AVAssetMediaSelectionGroupsDidChange: string;
  // export declare let AVAssetTrackSegmentsDidChange: string;
  // export declare let AVAssetTrackTimeRangeDidChange: string;
  // export declare let AVAssetTrackTrackAssociationsDidChange: string;
  // export declare let AVAssetWasDefragmented: string;
  // export declare let AVAudioEngineConfigurationChange: string;
  // export declare let AVAudioUnitComponentTagsDidChange: string;
  // export declare let AVCaptureDeviceSubjectAreaDidChange: string;
  // export declare let AVCaptureDeviceWasConnected: string;
  // export declare let AVCaptureDeviceWasDisconnected: string;
  // export declare let AVCaptureInputPortFormatDescriptionDidChange: string;
  // export declare let AVCaptureSessionDidStartRunning: string;
  // export declare let AVCaptureSessionDidStopRunning: string;
  // export declare let AVCaptureSessionInterruptionEnded: string;
  // export declare let AVCaptureSessionRuntimeError: string;
  // export declare let AVCaptureSessionWasInterrupted: string;
  // export declare let AVFragmentedMovieContainsMovieFragmentsDidChange: string;
  // export declare let AVFragmentedMovieDurationDidChange: string;
  // export declare let AVFragmentedMovieTrackSegmentsDidChange: string;
  // export declare let AVFragmentedMovieTrackTimeRangeDidChange: string;
  // export declare let AVFragmentedMovieWasDefragmented: string;
  // export declare let AVPlayerAvailableHDRModesDidChange: string;
  // export declare let AVPlayerItemDidPlayToEndTime: string;
  // export declare let AVPlayerItemFailedToPlayToEndTime: string;
  // export declare let AVPlayerItemNewAccessLogEntry: string;
  // export declare let AVPlayerItemNewErrorLogEntry: string;
  // export declare let AVPlayerItemPlaybackStalled: string;
  // export declare let AVPlayerItemTimeJumped: string;
  // export declare let AVRouteDetectorMultipleRoutesDetectedDidChange: string;
  // export declare let AVSampleBufferAudioRendererWasFlushedAutomatically: string;
  // export declare let AVSampleBufferDisplayLayerFailedToDecode: string;
  // export declare let NSAppleEventManagerWillProcessFirstEvent: string;
  // export declare let NSBundleResourceRequestLowDiskSpace: string;
  // export declare let NSCalendarDayChanged: string;
  // export declare let NSClassDescriptionNeededForClass: string;
  // export declare let NSDidBecomeSingleThreaded: string;
  // export declare let NSExtensionHostDidBecomeActive: string;
  // export declare let NSExtensionHostDidEnterBackground: string;
  // export declare let NSExtensionHostWillEnterForeground: string;
  // export declare let NSExtensionHostWillResignActive: string;
  // export declare let NSFileHandleConnectionAccepted: string;
  // export declare let NSFileHandleDataAvailable: string;
  // export declare let NSFileHandleReadToEndOfFileCompletion: string;
  // export declare let NSHTTPCookieManagerAcceptPolicyChanged: string;
  // export declare let NSHTTPCookieManagerCookiesChanged: string;
  // export declare let NSMetadataQueryDidFinishGathering: string;
  // export declare let NSMetadataQueryDidStartGathering: string;
  // export declare let NSMetadataQueryDidUpdate: string;
  // export declare let NSMetadataQueryGatheringProgress: string;
  // export declare let NSProcessInfoPowerStateDidChange: string;
  // export declare let NSSystemClockDidChange: string;
  // export declare let NSSystemTimeZoneDidChange: string;
  // export declare let NSThreadWillExit: string;
  // export declare let NSURLCredentialStorageChanged: string;
  // export declare let NSUbiquityIdentityDidChange: string;
  // export declare let NSUndoManagerCheckpoint: string;
  // export declare let NSUndoManagerDidCloseUndoGroup: string;
  // export declare let NSUndoManagerDidOpenUndoGroup: string;
  // export declare let NSUndoManagerDidRedoChange: string;
  // export declare let NSUndoManagerDidUndoChange: string;
  // export declare let NSUndoManagerWillCloseUndoGroup: string;
  // export declare let NSUndoManagerWillRedoChange: string;
  // export declare let NSUndoManagerWillUndoChange: string;
  // export declare let NSWillBecomeMultiThreaded: string;
  // export declare let IKFilterBrowserFilterDoubleClick: string;
  // export declare let IKFilterBrowserFilterSelected: string;
  // export declare let IKFilterBrowserWillPreviewFilter: string;
  // export declare let quartzFilterManagerDidAddFilter: string;
  // export declare let quartzFilterManagerDidModifyFilter: string;
  // export declare let quartzFilterManagerDidRemoveFilter: string;
  // export declare let quartzFilterManagerDidSelectFilter: string;
}

namespace NSNumber {
  // export type BooleanLiteralType = boolean;
  // export type IntegerLiteralType = number;
  // export type FloatLiteralType = number;
  // export type BooleanLiteralType = boolean;
  // export type IntegerLiteralType = number;
  // export type FloatLiteralType = number;
}

namespace NSOrderedSet {
  // export type Iterator = NSFastEnumerationIterator;
  // export type Iterator = NSFastEnumerationIterator;
}

namespace NSOutlineView {
  // export declare let columnDidMoveNotification: string;
  // export declare let columnDidResizeNotification: string;
  // export declare let disclosureButtonIdentifier: string;
  // export declare let itemDidCollapseNotification: string;
  // export declare let itemDidExpandNotification: string;
  // export declare let itemWillCollapseNotification: string;
  // export declare let itemWillExpandNotification: string;
  // export declare let selectionDidChangeNotification: string;
  // export declare let selectionIsChangingNotification: string;
  // export declare let showHideButtonIdentifier: string;
}

namespace NSPDFPanel {
  export enum Options {
    ShowsPaperSize = 4,
    ShowsOrientation = 8,
    RequestsParentDirectory = 16777216
  }

  global['NSPDFPanel']['Options'] = Options;

}

namespace NSPageController {
  export enum TransitionStyle {
    StackHistory = 0,
    StackBook = 1,
    HorizontalStrip = 2
  }

  global['NSPageController']['TransitionStyle'] = TransitionStyle;

  // export type ObjectIdentifier = String;
  // export type ObjectIdentifier = String;
}

namespace NSParagraphStyle {
  export enum TextTabType {
    LeftTabStopType = 0,
    RightTabStopType = 1,
    CenterTabStopType = 2,
    DecimalTabStopType = 3
  }

  global['NSParagraphStyle']['TextTabType'] = TextTabType;

  // LineBreakStrategy
  export enum LineBreakStrategy {
    pushOut,
    hangulWordPriority,
    standard
  }

}

namespace NSPasteboard {
  export enum ContentsOptions {
    CurrentHostOnly = 1
  }

  global['NSPasteboard']['ContentsOptions'] = ContentsOptions;

  export enum ReadingOptions {
    AsData = 0,
    AsString = 1,
    AsPropertyList = 2,
    AsKeyedArchive = 4
  }

  global['NSPasteboard']['ReadingOptions'] = ReadingOptions;

  export enum WritingOptions {
    Promised = 512
  }

  global['NSPasteboard']['WritingOptions'] = WritingOptions;

  // export declare let fileContents: string;
  // export declare let findPanelSearchOptions: string;
  // export declare let drag: string;
  // export declare let find: string;
  // export declare let font: string;
  // export declare let general: string;
  // export declare let ruler: string;
  // export declare let color: string;
  // export declare let fileURL: string;
  // export declare let html: string;
  // export declare let multipleTextSelection: string;
  // export declare let pdf: string;
  // export declare let png: string;
  // export declare let rtf: string;
  // export declare let rtfd: string;
  // export declare let sound: string;
  // export declare let string: string;
  // export declare let tiff: string;
  // export declare let tabularText: string;
  // export declare let textFinderOptions: string;
  // export declare let URL: string;
  // export declare let urlReadingContentsConformToTypes: string;
  // export declare let urlReadingFileURLsOnly: string;
  // export declare let soundPboardType: string;
}

namespace NSPathControl {
  export enum Style {
    Standard = 0,
    PopUp = 2,
    NavigationBar = 1
  }

  global['NSPathControl']['Style'] = Style;

}

namespace NSPickerTouchBarItem {
  export enum ControlRepresentation {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2
  }

  global['NSPickerTouchBarItem']['ControlRepresentation'] = ControlRepresentation;

  export enum SelectionMode {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2
  }

  global['NSPickerTouchBarItem']['SelectionMode'] = SelectionMode;

}

namespace NSPointerFunctions {
  export enum Options {
    StrongMemory = 0,
    ZeroingWeakMemory = 1,
    OpaqueMemory = 2,
    MallocMemory = 3,
    MachVirtualMemory = 4,
    WeakMemory = 5,
    ObjectPersonality = 0,
    OpaquePersonality = 256,
    ObjectPointerPersonality = 512,
    CStringPersonality = 768,
    StructPersonality = 1024,
    IntegerPersonality = 1280,
    CopyIn = 65536
  }

  global['NSPointerFunctions']['Options'] = Options;

}

namespace NSPopUpButton {
  export enum ArrowPosition {
    NoArrow = 0,
    ArrowAtCenter = 1,
    ArrowAtBottom = 2
  }

  global['NSPopUpButton']['ArrowPosition'] = ArrowPosition;

  // export declare let willPopUpNotification: string;
}

namespace NSPopUpButtonCell {
  // export declare let willPopUpNotification: string;
}

namespace NSPopover {
  export enum Behavior {
    ApplicationDefined = 0,
    Transient = 1,
    Semitransient = 2
  }

  global['NSPopover']['Behavior'] = Behavior;

  // export declare let detachToWindow: string;
  // export declare let closeReasonUserInfoKey: string;
  // export declare let standard: string;
  // export declare let didCloseNotification: string;
  // export declare let didShowNotification: string;
  // export declare let willCloseNotification: string;
  // export declare let willShowNotification: string;
}

namespace NSPositionalSpecifier {
  export enum InsertionPosition {
    PositionAfter = 0,
    PositionBefore = 1,
    PositionBeginning = 2,
    PositionEnd = 3,
    PositionReplace = 4
  }

  global['NSPositionalSpecifier']['InsertionPosition'] = InsertionPosition;

}

namespace NSPrintInfo {
  export enum PaperOrientation {
    Portrait = 0,
    Landscape = 1
  }

  global['NSPrintInfo']['PaperOrientation'] = PaperOrientation;

  export enum PaginationMode {
    Automatic = 0,
    Fit = 1,
    Clip = 2
  }

  global['NSPrintInfo']['PaginationMode'] = PaginationMode;

  // export declare let automatic: NSPrintInfo.PaginationMode;
  // export declare let clip: NSPrintInfo.PaginationMode;
  // export declare let fit: NSPrintInfo.PaginationMode;
  // export declare let allPages: string;
  // export declare let bottomMargin: string;
  // export declare let cancel: string;
  // export declare let copies: string;
  // export declare let detailedErrorReporting: string;
  // export declare let faxNumber: string;
  // export declare let firstPage: string;
  // export declare let headerAndFooter: string;
  // export declare let horizontalPagination: string;
  // export declare let horizontallyCentered: string;
  // export declare let jobDisposition: string;
  // export declare let jobSavingFileNameExtensionHidden: string;
  // export declare let jobSavingURL: string;
  // export declare let lastPage: string;
  // export declare let leftMargin: string;
  // export declare let mustCollate: string;
  // export declare let orientation: string;
  // export declare let pagesAcross: string;
  // export declare let pagesDown: string;
  // export declare let paperName: string;
  // export declare let paperSize: string;
  // export declare let preview: string;
  // export declare let printer: string;
  // export declare let printerName: string;
  // export declare let reversePageOrder: string;
  // export declare let rightMargin: string;
  // export declare let save: string;
  // export declare let scalingFactor: string;
  // export declare let selectionOnly: string;
  // export declare let spool: string;
  // export declare let time: string;
  // export declare let topMargin: string;
  // export declare let verticalPagination: string;
  // export declare let verticallyCentered: string;
  // export type SettingKey = String;
  // export type SettingKey = String;
}

namespace NSPrintOperation {
  export enum RenderingQuality {
    Best = 0,
    Responsive = 1
  }

  global['NSPrintOperation']['RenderingQuality'] = RenderingQuality;

  export enum PageOrder {
    DescendingPageOrder = -1,
    SpecialPageOrder = 0,
    AscendingPageOrder = 1,
    UnknownPageOrder = 2
  }

  global['NSPrintOperation']['PageOrder'] = PageOrder;

}

namespace NSPrintPanel {
  export enum Options {
    ShowsCopies = 1,
    ShowsPageRange = 2,
    ShowsPaperSize = 4,
    ShowsOrientation = 8,
    ShowsScaling = 16,
    ShowsPrintSelection = 32,
    ShowsPageSetupAccessory = 256,
    ShowsPreview = 131072
  }

  global['NSPrintPanel']['Options'] = Options;

  // export declare let allPresets: string;
  // export declare let noPresets: string;
  // export declare let itemDescription: string;
  // export declare let itemName: string;
  // export declare let photo: string;
}

namespace NSPrinter {
  export enum TableStatus {
    OK = 0,
    NotFound = 1,
    Error = 2
  }

  global['NSPrinter']['TableStatus'] = TableStatus;

}

namespace NSProgressIndicator {
  export enum Style {
    Bar = 0,
    Spinning = 1
  }

  global['NSProgressIndicator']['Style'] = Style;

}

namespace NSRegularExpression {
  export enum MatchingFlags {
    Progress = 1,
    Completed = 2,
    HitEnd = 4,
    RequiredEnd = 8,
    InternalError = 16
  }

  global['NSRegularExpression']['MatchingFlags'] = MatchingFlags;

  export enum MatchingOptions {
    ReportProgress = 1,
    ReportCompletion = 2,
    Anchored = 4,
    WithTransparentBounds = 8,
    WithoutAnchoringBounds = 16
  }

  global['NSRegularExpression']['MatchingOptions'] = MatchingOptions;

  export enum Options {
    CaseInsensitive = 1,
    AllowCommentsAndWhitespace = 2,
    IgnoreMetacharacters = 4,
    DotMatchesLineSeparators = 8,
    AnchorsMatchLines = 16,
    UseUnixLineSeparators = 32,
    UseUnicodeWordBoundaries = 64
  }

  global['NSRegularExpression']['Options'] = Options;

}

namespace NSRelativeSpecifier {
  export enum RelativePosition {
    After = 0,
    Before = 1
  }

  global['NSRelativeSpecifier']['RelativePosition'] = RelativePosition;

}

namespace NSRuleEditor {
  export enum NestingMode {
    Single = 0,
    List = 1,
    Compound = 2,
    Simple = 3
  }

  global['NSRuleEditor']['NestingMode'] = NestingMode;

  export enum RowType {
    Simple = 0,
    Compound = 1
  }

  global['NSRuleEditor']['RowType'] = RowType;

  // export declare let comparisonModifier: string;
  // export declare let compoundType: string;
  // export declare let customSelector: string;
  // export declare let leftExpression: string;
  // export declare let operatorType: string;
  // export declare let options: string;
  // export declare let rightExpression: string;
  // export declare let rowsDidChangeNotification: string;
}

namespace NSRulerView {
  export enum Orientation {
    HorizontalRuler = 0,
    VerticalRuler = 1
  }

  global['NSRulerView']['Orientation'] = Orientation;

  // export declare let centimeters: string;
  // export declare let inches: string;
  // export declare let picas: string;
  // export declare let points: string;
}

namespace NSScreen {
  // export declare let colorSpaceDidChangeNotification: string;
}

namespace NSScrollView {
  export enum Elasticity {
    Automatic = 0,
    None = 1,
    Allowed = 2
  }

  global['NSScrollView']['Elasticity'] = Elasticity;

  export enum FindBarPosition {
    AboveHorizontalRuler = 0,
    AboveContent = 1,
    BelowContent = 2
  }

  global['NSScrollView']['FindBarPosition'] = FindBarPosition;

  // export declare let didEndLiveMagnifyNotification: string;
  // export declare let didEndLiveScrollNotification: string;
  // export declare let didLiveScrollNotification: string;
  // export declare let willStartLiveMagnifyNotification: string;
  // export declare let willStartLiveScrollNotification: string;
}

namespace NSScroller {
  export enum KnobStyle {
    Default = 0,
    Dark = 1,
    Light = 2
  }

  global['NSScroller']['KnobStyle'] = KnobStyle;

  export enum Part {
    NoPart = 0,
    DecrementPage = 1,
    Knob = 2,
    IncrementPage = 3,
    DecrementLine = 4,
    IncrementLine = 5,
    KnobSlot = 6
  }

  global['NSScroller']['Part'] = Part;

  export enum Style {
    Legacy = 0,
    Overlay = 1
  }

  global['NSScroller']['Style'] = Style;

  export enum UsableParts {
    NoScrollerParts = 0,
    OnlyScrollerArrows = 1,
    AllScrollerParts = 2
  }

  global['NSScroller']['UsableParts'] = UsableParts;

  // export declare let preferredScrollerStyleDidChangeNotification: string;
}

namespace NSScrubber {
  export enum Alignment {
    None = 0,
    Leading = 1,
    Trailing = 2,
    Center = 3
  }

  global['NSScrubber']['Alignment'] = Alignment;

  export enum Mode {
    Fixed = 0,
    Free = 1
  }

  global['NSScrubber']['Mode'] = Mode;

}

namespace NSSearchField {
  // export declare let clearRecentsMenuItemTag: number;
  // export declare let noRecentsMenuItemTag: number;
  // export declare let recentsMenuItemTag: number;
  // export declare let recentsTitleMenuItemTag: number;
  // export type RecentsAutosaveName = String;
  // export type RecentsAutosaveName = String;
}

namespace NSSegmentedControl {
  export enum Distribution {
    Fit = 0,
    Fill = 1,
    FillEqually = 2,
    FillProportionally = 3
  }

  global['NSSegmentedControl']['Distribution'] = Distribution;

  export enum Style {
    Automatic = 0,
    Rounded = 1,
    RoundRect = 3,
    TexturedSquare = 4,
    SmallSquare = 6,
    Separated = 8,
    TexturedRounded = 2,
    Capsule = 5
  }

  global['NSSegmentedControl']['Style'] = Style;

  export enum SwitchTracking {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2,
    MomentaryAccelerator = 3
  }

  global['NSSegmentedControl']['SwitchTracking'] = SwitchTracking;

}

namespace NSSet {
  // export type Iterator = NSFastEnumerationIterator;
  // export type Iterator = NSFastEnumerationIterator;
}

namespace NSSharingService {
  export enum CloudKitOptions {
    Standard = 0,
    AllowPublic = 1,
    AllowPrivate = 2,
    AllowReadOnly = 16,
    AllowReadWrite = 32
  }

  global['NSSharingService']['CloudKitOptions'] = CloudKitOptions;

  export enum SharingContentScope {
    Item = 0,
    Partial = 1,
    Full = 2
  }

  global['NSSharingService']['SharingContentScope'] = SharingContentScope;

  // export declare let addToAperture: string;
  // export declare let addToIPhoto: string;
  // export declare let addToSafariReadingList: string;
  // export declare let cloudSharing: string;
  // export declare let composeEmail: string;
  // export declare let composeMessage: string;
  // export declare let sendViaAirDrop: string;
  // export declare let useAsDesktopPicture: string;
}

namespace NSSlider {
  export enum SliderType {
    Linear = 0,
    Circular = 1
  }

  global['NSSlider']['SliderType'] = SliderType;

  export enum TickMarkPosition {
    Below = 0,
    Above = 1,
    Leading = 1,
    Trailing = 0
  }

  global['NSSlider']['TickMarkPosition'] = TickMarkPosition;

}

namespace NSSliderAccessory {
  // export declare let default_: number;
  // export declare let wide: number;
}

namespace NSSound {
  // export type Name = String;
  // export type PlaybackDeviceIdentifier = String;
  // export type Name = String;
  // export type PlaybackDeviceIdentifier = String;
}

namespace NSSpecifierTest {
  export enum TestComparisonOperation {
    EqualToComparison = 0,
    LessThanOrEqualToComparison = 1,
    LessThanComparison = 2,
    GreaterThanOrEqualToComparison = 3,
    GreaterThanComparison = 4,
    BeginsWithComparison = 5,
    EndsWithComparison = 6,
    ContainsComparison = 7
  }

  global['NSSpecifierTest']['TestComparisonOperation'] = TestComparisonOperation;

}

namespace NSSpeechSynthesizer {
  export enum Boundary {
    ImmediateBoundary = 0,
    WordBoundary = 1,
    SentenceBoundary = 2
  }

  global['NSSpeechSynthesizer']['Boundary'] = Boundary;

  // export declare let characterMode: string;
  // export declare let commandDelimiter: string;
  // export declare let currentVoice: string;
  // export declare let abbreviations: string;
  // export declare let entryPhonemes: string;
  // export declare let entrySpelling: string;
  // export declare let localeIdentifier: string;
  // export declare let modificationDate: string;
  // export declare let pronunciations: string;
  // export declare let errors: string;
  // export declare let inputMode: string;
  // export declare let numberMode: string;
  // export declare let outputToFileURL: string;
  // export declare let phonemeSymbols: string;
  // export declare let pitchBase: string;
  // export declare let pitchMod: string;
  // export declare let rate: string;
  // export declare let recentSync: string;
  // export declare let reset: string;
  // export declare let status: string;
  // export declare let synthesizerInfo: string;
  // export declare let volume: string;
  // export declare let age: string;
  // export declare let demoText: string;
  // export declare let gender: string;
  // export declare let female: string;
  // export declare let male: string;
  // export declare let neuter: string;
  // export declare let identifier: string;
  // export declare let individuallySpokenCharacters: string;
  // export declare let name: string;
  // export declare let supportedCharacters: string;
}

namespace NSSpellChecker {
  export enum CorrectionIndicatorType {
    Default = 0,
    Reversion = 1,
    Guesses = 2
  }

  global['NSSpellChecker']['CorrectionIndicatorType'] = CorrectionIndicatorType;

  export enum CorrectionResponse {
    None = 0,
    Accepted = 1,
    Rejected = 2,
    Ignored = 3,
    Edited = 4,
    Reverted = 5
  }

  global['NSSpellChecker']['CorrectionResponse'] = CorrectionResponse;

  // export declare let didChangeAutomaticCapitalizationNotification: string;
  // export declare let didChangeAutomaticDashSubstitutionNotification: string;
  // export declare let didChangeAutomaticPeriodSubstitutionNotification: string;
  // export declare let didChangeAutomaticQuoteSubstitutionNotification: string;
  // export declare let didChangeAutomaticSpellingCorrectionNotification: string;
  // export declare let didChangeAutomaticTextCompletionNotification: string;
  // export declare let didChangeAutomaticTextReplacementNotification: string;
  // export declare let documentAuthor: string;
  // export declare let documentTitle: string;
  // export declare let documentURL: string;
  // export declare let orthography: string;
  // export declare let quotes: string;
  // export declare let referenceDate: string;
  // export declare let referenceTimeZone: string;
  // export declare let regularExpressions: string;
  // export declare let replacements: string;
  // export declare let selectedRange: string;
}

namespace NSSplitView {
  export enum DividerStyle {
    Thick = 1,
    Thin = 2,
    PaneSplitter = 3
  }

  global['NSSplitView']['DividerStyle'] = DividerStyle;

  // export declare let didResizeSubviewsNotification: string;
  // export declare let willResizeSubviewsNotification: string;
  // export type AutosaveName = String;
  // export type AutosaveName = String;
}

namespace NSSplitViewController {
  // export declare let automaticDimension: number;
}

namespace NSSplitViewItem {
  export enum Behavior {
    Default = 0,
    Sidebar = 1,
    ContentList = 2
  }

  global['NSSplitViewItem']['Behavior'] = Behavior;

  export enum CollapseBehavior {
    Default = 0,
    PreferResizingSplitViewWithFixedSiblings = 1,
    PreferResizingSiblingsWithFixedSplitView = 2,
    UseConstraints = 3
  }

  global['NSSplitViewItem']['CollapseBehavior'] = CollapseBehavior;

  // export declare let unspecifiedDimension: number;
}

namespace NSStackView {
  export enum Distribution {
    GravityAreas = -1,
    Fill = 0,
    FillEqually = 1,
    FillProportionally = 2,
    EqualSpacing = 3,
    EqualCentering = 4
  }

  global['NSStackView']['Distribution'] = Distribution;

  export enum Gravity {
    Top = 1,
    Leading = 1,
    Center = 2,
    Bottom = 3,
    Trailing = 3
  }

  global['NSStackView']['Gravity'] = Gravity;

  // export declare let useDefaultSpacing: number;
  // export declare let detachOnlyIfNecessary: number;
  // export declare let mustHold: number;
  // export declare let notVisible: number;
}

namespace NSStatusItem {
  export enum Behavior {
    RemovalAllowed = 2,
    TerminationOnRemoval = 4
  }

  global['NSStatusItem']['Behavior'] = Behavior;

  // export declare let squareLength: number;
  // export declare let variableLength: number;
  // export type AutosaveName = String;
  // export type AutosaveName = String;
}

namespace NSStoryboard {
  // export type Name = String;
  // export type SceneIdentifier = String;
  // export type Name = String;
  // export type SceneIdentifier = String;
}

namespace NSStoryboardSegue {
  // export type Identifier = String;
  // export type Identifier = String;
}

namespace NSString {
  export enum DrawingOptions {
    UsesLineFragmentOrigin = 1,
    UsesFontLeading = 2,
    UsesDeviceMetrics = 8,
    TruncatesLastVisibleLine = 32,
    DisableScreenFontSubstitution = 4,
    OneShot = 16
  }

  global['NSString']['DrawingOptions'] = DrawingOptions;

  export enum CompareOptions {
    CaseInsensitiveSearch = 1,
    LiteralSearch = 2,
    BackwardsSearch = 4,
    AnchoredSearch = 8,
    NumericSearch = 64,
    DiacriticInsensitiveSearch = 128,
    WidthInsensitiveSearch = 256,
    ForcedOrderingSearch = 512,
    RegularExpressionSearch = 1024
  }

  global['NSString']['CompareOptions'] = CompareOptions;

  export enum EncodingConversionOptions {
    AllowLossy = 1,
    ExternalRepresentation = 2
  }

  global['NSString']['EncodingConversionOptions'] = EncodingConversionOptions;

  export enum EnumerationOptions {
    ByLines = 0,
    ByParagraphs = 1,
    ByComposedCharacterSequences = 2,
    ByWords = 3,
    BySentences = 4,
    Reverse = 256,
    SubstringNotRequired = 512,
    Localized = 1024
  }

  global['NSString']['EnumerationOptions'] = EnumerationOptions;

  // export type StringLiteralType = string;
  // export type ExtendedGraphemeClusterLiteralType = string;
  // export type UnicodeScalarLiteralType = string;
  // export type StringLiteralType = string;
  // export type ExtendedGraphemeClusterLiteralType = string;
  // export type UnicodeScalarLiteralType = string;
}

namespace NSTabView {
  export enum TabPosition {
    None = 0,
    Top = 1,
    Left = 2,
    Bottom = 3,
    Right = 4
  }

  global['NSTabView']['TabPosition'] = TabPosition;

  export enum TabViewBorderType {
    None = 0,
    Line = 1,
    Bezel = 2
  }

  global['NSTabView']['TabViewBorderType'] = TabViewBorderType;

  export enum TabType {
    TopTabsBezelBorder = 0,
    LeftTabsBezelBorder = 1,
    BottomTabsBezelBorder = 2,
    RightTabsBezelBorder = 3,
    NoTabsBezelBorder = 4,
    NoTabsLineBorder = 5,
    NoTabsNoBorder = 6
  }

  global['NSTabView']['TabType'] = TabType;

}

namespace NSTabViewController {
  export enum TabStyle {
    SegmentedControlOnTop = 0,
    SegmentedControlOnBottom = 1,
    Toolbar = 2,
    Unspecified = -1
  }

  global['NSTabViewController']['TabStyle'] = TabStyle;

}

namespace NSTabViewItem {
  export enum State {
    SelectedTab = 0,
    BackgroundTab = 1,
    PressedTab = 2
  }

  global['NSTabViewItem']['State'] = State;

}

namespace NSTableColumn {
  export enum ResizingOptions {
    NoResizing = 0,
    AutoresizingMask = 1,
    UserResizingMask = 2
  }

  global['NSTableColumn']['ResizingOptions'] = ResizingOptions;

}

namespace NSTableView {
  export enum RowActionEdge {
    Leading = 0,
    Trailing = 1
  }

  global['NSTableView']['RowActionEdge'] = RowActionEdge;

  export enum AnimationOptions {
    EffectNone = 0,
    EffectFade = 1,
    EffectGap = 2,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 48,
    SlideRight = 64
  }

  global['NSTableView']['AnimationOptions'] = AnimationOptions;

  export enum ColumnAutoresizingStyle {
    NoColumnAutoresizing = 0,
    UniformColumnAutoresizingStyle = 1,
    SequentialColumnAutoresizingStyle = 2,
    ReverseSequentialColumnAutoresizingStyle = 3,
    LastColumnOnlyAutoresizingStyle = 4,
    FirstColumnOnlyAutoresizingStyle = 5
  }

  global['NSTableView']['ColumnAutoresizingStyle'] = ColumnAutoresizingStyle;

  export enum DraggingDestinationFeedbackStyle {
    None = -1,
    Regular = 0,
    SourceList = 1,
    Gap = 2
  }

  global['NSTableView']['DraggingDestinationFeedbackStyle'] = DraggingDestinationFeedbackStyle;

  export enum DropOperation {
    On = 0,
    Above = 1
  }

  global['NSTableView']['DropOperation'] = DropOperation;

  export enum GridLineStyle {
    GridNone = 0,
    SolidVerticalGridLineMask = 1,
    SolidHorizontalGridLineMask = 2,
    DashedHorizontalGridLineMask = 8
  }

  global['NSTableView']['GridLineStyle'] = GridLineStyle;

  export enum RowSizeStyle {
    Default = -1,
    Custom = 0,
    Small = 1,
    Medium = 2,
    Large = 3
  }

  global['NSTableView']['RowSizeStyle'] = RowSizeStyle;

  export enum SelectionHighlightStyle {
    None = -1,
    Regular = 0,
    SourceList = 1
  }

  global['NSTableView']['SelectionHighlightStyle'] = SelectionHighlightStyle;

  // export declare let columnDidMoveNotification: string;
  // export declare let columnDidResizeNotification: string;
  // export declare let rowViewIdentifier: string;
  // export declare let selectionDidChangeNotification: string;
  // export declare let selectionIsChangingNotification: string;
  // export type AutosaveName = String;
  // export type AutosaveName = String;
}

namespace NSTableViewRowAction {
  export enum Style {
    Regular = 0,
    Destructive = 1
  }

  global['NSTableViewRowAction']['Style'] = Style;

}

namespace NSText {
  // export declare let didBeginEditingNotification: string;
  // export declare let didChangeNotification: string;
  // export declare let didEndEditingNotification: string;
  // export declare let movementUserInfoKey: string;
}

namespace NSTextAlternatives {
  // export declare let selectedAlternativeStringNotification: string;
}

namespace NSTextBlock {
  export enum Dimension {
    Width = 0,
    MinimumWidth = 1,
    MaximumWidth = 2,
    Height = 4,
    MinimumHeight = 5,
    MaximumHeight = 6
  }

  global['NSTextBlock']['Dimension'] = Dimension;

  export enum Layer {
    Padding = -1,
    Border = 0,
    Margin = 1
  }

  global['NSTextBlock']['Layer'] = Layer;

  export enum ValueType {
    AbsoluteValueType = 0,
    PercentageValueType = 1
  }

  global['NSTextBlock']['ValueType'] = ValueType;

  export enum VerticalAlignment {
    TopAlignment = 0,
    MiddleAlignment = 1,
    BottomAlignment = 2,
    BaselineAlignment = 3
  }

  global['NSTextBlock']['VerticalAlignment'] = VerticalAlignment;

}

namespace NSTextCheckingKey {
  // export declare let airline: string;
  // export declare let city: string;
  // export declare let country: string;
  // export declare let flight: string;
  // export declare let jobTitle: string;
  // export declare let name: string;
  // export declare let organization: string;
  // export declare let phone: string;
  // export declare let state: string;
  // export declare let street: string;
  // export declare let zip: string;
}

namespace NSTextCheckingResult {
  export enum CheckingType {
    Orthography = 1,
    Spelling = 2,
    Grammar = 4,
    Date = 8,
    Address = 16,
    Link = 32,
    Quote = 64,
    Dash = 128,
    Replacement = 256,
    Correction = 512,
    RegularExpression = 1024,
    PhoneNumber = 2048,
    TransitInformation = 4096
  }

  global['NSTextCheckingResult']['CheckingType'] = CheckingType;

}

namespace NSTextField {
  export enum BezelStyle {
    SquareBezel = 0,
    RoundedBezel = 1
  }

  global['NSTextField']['BezelStyle'] = BezelStyle;

}

namespace NSTextFinder {
  export enum Action {
    ShowFindInterface = 1,
    NextMatch = 2,
    PreviousMatch = 3,
    ReplaceAll = 4,
    Replace = 5,
    ReplaceAndFind = 6,
    SetSearchString = 7,
    ReplaceAllInSelection = 8,
    SelectAll = 9,
    SelectAllInSelection = 10,
    HideFindInterface = 11,
    ShowReplaceInterface = 12,
    HideReplaceInterface = 13
  }

  global['NSTextFinder']['Action'] = Action;

  export enum MatchingType {
    Contains = 0,
    StartsWith = 1,
    FullWord = 2,
    EndsWith = 3
  }

  global['NSTextFinder']['MatchingType'] = MatchingType;

}

namespace NSTextInputContext {
  // export declare let keyboardSelectionDidChangeNotification: string;
}

namespace NSTextList {
  export enum Options {
    PrependEnclosingMarker = 1
  }

  global['NSTextList']['Options'] = Options;

  // export declare let box: string;
  // export declare let check: string;
  // export declare let circle: string;
  // export declare let decimal: string;
  // export declare let diamond: string;
  // export declare let disc: string;
  // export declare let hyphen: string;
  // export declare let lowercaseAlpha: string;
  // export declare let lowercaseHexadecimal: string;
  // export declare let lowercaseLatin: string;
  // export declare let lowercaseRoman: string;
  // export declare let octal: string;
  // export declare let square: string;
  // export declare let uppercaseAlpha: string;
  // export declare let uppercaseHexadecimal: string;
  // export declare let uppercaseLatin: string;
  // export declare let uppercaseRoman: string;
}

namespace NSTextStorage {
  // export declare let didProcessEditingNotification: string;
  // export declare let willProcessEditingNotification: string;
}

namespace NSTextTab {
  // export declare let columnTerminators: string;
}

namespace NSTextTable {
  export enum LayoutAlgorithm {
    AutomaticLayoutAlgorithm = 0,
    FixedLayoutAlgorithm = 1
  }

  global['NSTextTable']['LayoutAlgorithm'] = LayoutAlgorithm;

}

namespace NSTextView {
  // export declare let didChangeSelectionNotification: string;
  // export declare let didChangeTypingAttributesNotification: string;
  // export declare let willChangeNotifyingTextViewNotification: string;
}

namespace NSTimeZone {
  export enum NameStyle {
    Standard = 0,
    ShortStandard = 1,
    DaylightSaving = 2,
    ShortDaylightSaving = 3,
    Generic = 4,
    ShortGeneric = 5
  }

  global['NSTimeZone']['NameStyle'] = NameStyle;

}

namespace NSTokenField {
  export enum TokenStyle {
    Default = 0,
    None = 1,
    Rounded = 2,
    Squared = 3,
    PlainSquared = 4
  }

  global['NSTokenField']['TokenStyle'] = TokenStyle;

}

namespace NSToolbar {
  export enum DisplayMode {
    Default = 0,
    IconAndLabel = 1,
    IconOnly = 2,
    LabelOnly = 3
  }

  global['NSToolbar']['DisplayMode'] = DisplayMode;

  export enum SizeMode {
    Default = 0,
    Regular = 1,
    Small = 2
  }

  global['NSToolbar']['SizeMode'] = SizeMode;

  // export declare let didRemoveItemNotification: string;
  // export declare let willAddItemNotification: string;
  // export type Identifier = String;
  // export type Identifier = String;
}

namespace NSToolbarItem {
  // export declare let cloudSharing: string;
  // export declare let customizeToolbar: string;
  // export declare let flexibleSpace: string;
  // export declare let high: number;
  // export declare let low: number;
  // export declare let standard: number;
  // export declare let user: number;
  // export declare let print: string;
  // export declare let separator: string;
  // export declare let showColors: string;
  // export declare let showFonts: string;
  // export declare let space: string;
  // export declare let toggleSidebar: string;
}

namespace NSToolbarItemGroup {
  export enum ControlRepresentation {
    Automatic = 0,
    Expanded = 1,
    Collapsed = 2
  }

  global['NSToolbarItemGroup']['ControlRepresentation'] = ControlRepresentation;

  export enum SelectionMode {
    SelectOne = 0,
    SelectAny = 1,
    Momentary = 2
  }

  global['NSToolbarItemGroup']['SelectionMode'] = SelectionMode;

}

namespace NSTouch {
  export enum Phase {
    Began = 1,
    Moved = 2,
    Stationary = 4,
    Ended = 8,
    Cancelled = 16,
    Touching = 7,
    Any = -1
  }

  global['NSTouch']['Phase'] = Phase;

  export enum TouchType {
    Direct = 0,
    Indirect = 1
  }

  global['NSTouch']['TouchType'] = TouchType;

  export enum TouchTypeMask {
    Direct = 1,
    Indirect = 2
  }

  global['NSTouch']['TouchTypeMask'] = TouchTypeMask;

}

namespace NSTouchBar {
  // export type CustomizationIdentifier = String;
  // export type CustomizationIdentifier = String;
}

namespace NSTouchBarItem {
  // export declare let candidateList: string;
  // export declare let characterPicker: string;
  // export declare let fixedSpaceLarge: string;
  // export declare let fixedSpaceSmall: string;
  // export declare let flexibleSpace: string;
  // export declare let otherItemsProxy: string;
  // export declare let textAlignment: string;
  // export declare let textColorPicker: string;
  // export declare let textFormat: string;
  // export declare let textList: string;
  // export declare let textStyle: string;
  // export declare let high: number;
  // export declare let low: number;
  // export declare let normal: number;
}

namespace NSTrackingArea {
  export enum Options {
    MouseEnteredAndExited = 1,
    MouseMoved = 2,
    CursorUpdate = 4,
    ActiveWhenFirstResponder = 16,
    ActiveInKeyWindow = 32,
    ActiveInActiveApp = 64,
    ActiveAlways = 128,
    AssumeInside = 256,
    InVisibleRect = 512,
    EnabledDuringMouseDrag = 1024
  }

  global['NSTrackingArea']['Options'] = Options;

}

namespace NSURL {
  export enum BookmarkCreationOptions {
    PreferFileIDResolution = 256,
    MinimalBookmark = 512,
    SuitableForBookmarkFile = 1024,
    WithSecurityScope = 2048,
    SecurityScopeAllowOnlyReadAccess = 4096
  }

  global['NSURL']['BookmarkCreationOptions'] = BookmarkCreationOptions;

  export enum BookmarkResolutionOptions {
    WithoutUI = 256,
    WithoutMounting = 512,
    WithSecurityScope = 1024
  }

  global['NSURL']['BookmarkResolutionOptions'] = BookmarkResolutionOptions;

  // export type BookmarkFileCreationOptions = number;
  // export type BookmarkFileCreationOptions = number;
}

namespace NSURLHandle {
  export enum Status {
    NotLoaded = 0,
    LoadSucceeded = 1,
    LoadInProgress = 2,
    LoadFailed = 3
  }

  global['NSURLHandle']['Status'] = Status;

}

namespace NSURLRequest {
  export enum CachePolicy {
    UseProtocolCachePolicy = 0,
    ReloadIgnoringLocalCacheData = 1,
    ReloadIgnoringLocalAndRemoteCacheData = 4,
    ReloadIgnoringCacheData = 1,
    ReturnCacheDataElseLoad = 2,
    ReturnCacheDataDontLoad = 3,
    ReloadRevalidatingCacheData = 5
  }

  global['NSURLRequest']['CachePolicy'] = CachePolicy;

  export enum NetworkServiceType {
    NetworkServiceTypeDefault = 0,
    NetworkServiceTypeVoIP = 1,
    NetworkServiceTypeVideo = 2,
    NetworkServiceTypeBackground = 3,
    NetworkServiceTypeVoice = 4,
    NetworkServiceTypeResponsiveData = 6,
    NetworkServiceTypeAVStreaming = 8,
    NetworkServiceTypeResponsiveAV = 9,
    NetworkServiceTypeCallSignaling = 11
  }

  global['NSURLRequest']['NetworkServiceType'] = NetworkServiceType;

}

namespace NSUbiquitousKeyValueStore {
  // export declare let didChangeExternallyNotification: string;
}

namespace NSUserNotification {
  export enum ActivationType {
    None = 0,
    ContentsClicked = 1,
    ActionButtonClicked = 2,
    Replied = 3,
    AdditionalActionClicked = 4
  }

  global['NSUserNotification']['ActivationType'] = ActivationType;

}

namespace NSValueTransformerName {
  // export declare let isNilTransformerName: string;
  // export declare let isNotNilTransformerName: string;
  // export declare let negateBooleanTransformerName: string;
  // export declare let secureUnarchiveFromDataTransformerName: string;
}

namespace NSView {
  export enum AutoresizingMask {
    ViewNotSizable = 0,
    ViewMinXMargin = 1,
    ViewWidthSizable = 2,
    ViewMaxXMargin = 4,
    ViewMinYMargin = 8,
    ViewHeightSizable = 16,
    ViewMaxYMargin = 32
  }

  global['NSView']['AutoresizingMask'] = AutoresizingMask;

  export enum BackgroundStyle {
    Normal = 0,
    Emphasized = 1,
    Raised = 2,
    Lowered = 3
  }

  global['NSView']['BackgroundStyle'] = BackgroundStyle;

  export enum LayerContentsPlacement {
    ScaleAxesIndependently = 0,
    ScaleProportionallyToFit = 1,
    ScaleProportionallyToFill = 2,
    Center = 3,
    Top = 4,
    TopRight = 5,
    Right = 6,
    BottomRight = 7,
    Bottom = 8,
    BottomLeft = 9,
    Left = 10,
    TopLeft = 11
  }

  global['NSView']['LayerContentsPlacement'] = LayerContentsPlacement;

  export enum LayerContentsRedrawPolicy {
    Never = 0,
    OnSetNeedsDisplay = 1,
    DuringViewResize = 2,
    BeforeViewResize = 3,
    Crossfade = 4
  }

  global['NSView']['LayerContentsRedrawPolicy'] = LayerContentsRedrawPolicy;

  // export declare let emphasized: NSView.BackgroundStyle;
  // export declare let normal: NSView.BackgroundStyle;
  // export declare let dictionaryApplication: string;
  // export declare let presentationType: string;
  // export declare let overlay: string;
  // export declare let fullScreenModeAllScreens: string;
  // export declare let fullScreenModeApplicationPresentationOptions: string;
  // export declare let fullScreenModeSetting: string;
  // export declare let fullScreenModeWindowLevel: string;
  // export declare let boundsDidChangeNotification: string;
  // export declare let didUpdateTrackingAreasNotification: string;
  // export declare let frameDidChangeNotification: string;
  // export declare let noIntrinsicMetric: number;
  // export type TrackingRectTag = number;
  // export type ToolTipTag = number;
  // export type TrackingRectTag = number;
  // export type ToolTipTag = number;
}

namespace NSViewAnimation {
  // export declare let effect: string;
  // export declare let endFrame: string;
  // export declare let fadeIn: string;
  // export declare let fadeOut: string;
  // export declare let startFrame: string;
  // export declare let target: string;
}

namespace NSViewController {
  export enum TransitionOptions {
    None = 0,
    Crossfade = 1,
    SlideUp = 16,
    SlideDown = 32,
    SlideLeft = 64,
    SlideRight = 128,
    SlideForward = 320,
    SlideBackward = 384,
    AllowUserInteraction = 4096
  }

  global['NSViewController']['TransitionOptions'] = TransitionOptions;

}

namespace NSVisualEffectView {
  export enum BlendingMode {
    BehindWindow = 0,
    WithinWindow = 1
  }

  global['NSVisualEffectView']['BlendingMode'] = BlendingMode;

  export enum Material {
    Titlebar = 3,
    Selection = 4,
    Menu = 5,
    Popover = 6,
    Sidebar = 7,
    HeaderView = 10,
    Sheet = 11,
    WindowBackground = 12,
    HUDWindow = 13,
    FullScreenUI = 15,
    ToolTip = 17,
    ContentBackground = 18,
    UnderWindowBackground = 21,
    UnderPageBackground = 22,
    AppearanceBased = 0,
    Light = 1,
    Dark = 2,
    MediumLight = 8,
    UltraDark = 9
  }

  global['NSVisualEffectView']['Material'] = Material;

  export enum State {
    FollowsWindowActiveState = 0,
    Active = 1,
    Inactive = 2
  }

  global['NSVisualEffectView']['State'] = State;

}

namespace NSWhoseSpecifier {
  export enum SubelementIdentifier {
    IndexSubelement = 0,
    EverySubelement = 1,
    MiddleSubelement = 2,
    RandomSubelement = 3,
    NoSubelement = 4
  }

  global['NSWhoseSpecifier']['SubelementIdentifier'] = SubelementIdentifier;

}

namespace NSWindow {
  export enum BackingStoreType {
    Retained = 0,
    Nonretained = 1,
    Buffered = 2
  }

  global['NSWindow']['BackingStoreType'] = BackingStoreType;

  export enum SelectionDirection {
    DirectSelection = 0,
    SelectingNext = 1,
    SelectingPrevious = 2
  }

  global['NSWindow']['SelectionDirection'] = SelectionDirection;

  export enum AnimationBehavior {
    Default = 0,
    None = 2,
    DocumentWindow = 3,
    UtilityWindow = 4,
    AlertPanel = 5
  }

  global['NSWindow']['AnimationBehavior'] = AnimationBehavior;

  export enum ButtonType {
    CloseButton = 0,
    MiniaturizeButton = 1,
    ZoomButton = 2,
    ToolbarButton = 3,
    DocumentIconButton = 4,
    DocumentVersionsButton = 6
  }

  global['NSWindow']['ButtonType'] = ButtonType;

  export enum CollectionBehavior {
    Default = 0,
    CanJoinAllSpaces = 1,
    MoveToActiveSpace = 2,
    Managed = 4,
    Transient = 8,
    Stationary = 16,
    ParticipatesInCycle = 32,
    IgnoresCycle = 64,
    FullScreenPrimary = 128,
    FullScreenAuxiliary = 256,
    FullScreenNone = 512,
    FullScreenAllowsTiling = 2048,
    FullScreenDisallowsTiling = 4096
  }

  global['NSWindow']['CollectionBehavior'] = CollectionBehavior;

  export enum Depth {
    TwentyfourBitRGB = 520,
    SixtyfourBitRGB = 528,
    OnehundredtwentyeightBitRGB = 544
  }

  global['NSWindow']['Depth'] = Depth;

  export enum NumberListOptions {
    AllApplications = 1,
    AllSpaces = 16
  }

  global['NSWindow']['NumberListOptions'] = NumberListOptions;

  export enum OcclusionState {
    Visible = 2
  }

  global['NSWindow']['OcclusionState'] = OcclusionState;

  export enum OrderingMode {
    Above = 1,
    Below = -1,
    Out = 0
  }

  global['NSWindow']['OrderingMode'] = OrderingMode;

  export enum SharingType {
    None = 0,
    ReadOnly = 1,
    ReadWrite = 2
  }

  global['NSWindow']['SharingType'] = SharingType;

  export enum StyleMask {
    Borderless = 0,
    Titled = 1,
    Closable = 2,
    Miniaturizable = 4,
    Resizable = 8,
    TexturedBackground = 256,
    UnifiedTitleAndToolbar = 4096,
    FullScreen = 16384,
    FullSizeContentView = 32768,
    UtilityWindow = 16,
    DocModalWindow = 64,
    NonactivatingPanel = 128,
    HUDWindow = 8192
  }

  global['NSWindow']['StyleMask'] = StyleMask;

  export enum TabbingMode {
    Automatic = 0,
    Preferred = 1,
    Disallowed = 2
  }

  global['NSWindow']['TabbingMode'] = TabbingMode;

  export enum TitleVisibility {
    Visible = 0,
    Hidden = 1
  }

  global['NSWindow']['TitleVisibility'] = TitleVisibility;

  export enum UserTabbingPreference {
    Manual = 0,
    Always = 1,
    InFullScreen = 2
  }

  global['NSWindow']['UserTabbingPreference'] = UserTabbingPreference;

  // export declare let oldColorSpaceUserInfoKey: string;
  // export declare let oldScaleFactorUserInfoKey: string;
  // export declare let floating: number;
  // export declare let mainMenu: number;
  // export declare let modalPanel: number;
  // export declare let normal: number;
  // export declare let popUpMenu: number;
  // export declare let screenSaver: number;
  // export declare let statusBar: number;
  // export declare let submenu: number;
  // export declare let tornOffMenu: number;
  // export declare let didBecomeKeyNotification: string;
  // export declare let didBecomeMainNotification: string;
  // export declare let didChangeBackingPropertiesNotification: string;
  // export declare let didChangeOcclusionStateNotification: string;
  // export declare let didChangeScreenNotification: string;
  // export declare let didChangeScreenProfileNotification: string;
  // export declare let didDeminiaturizeNotification: string;
  // export declare let didEndLiveResizeNotification: string;
  // export declare let didEndSheetNotification: string;
  // export declare let didEnterFullScreenNotification: string;
  // export declare let didEnterVersionBrowserNotification: string;
  // export declare let didExitFullScreenNotification: string;
  // export declare let didExitVersionBrowserNotification: string;
  // export declare let didExposeNotification: string;
  // export declare let didMiniaturizeNotification: string;
  // export declare let didMoveNotification: string;
  // export declare let didResignKeyNotification: string;
  // export declare let didResignMainNotification: string;
  // export declare let didResizeNotification: string;
  // export declare let didUpdateNotification: string;
  // export declare let willBeginSheetNotification: string;
  // export declare let willCloseNotification: string;
  // export declare let willEnterFullScreenNotification: string;
  // export declare let willEnterVersionBrowserNotification: string;
  // export declare let willExitFullScreenNotification: string;
  // export declare let willExitVersionBrowserNotification: string;
  // export declare let willMiniaturizeNotification: string;
  // export declare let willMoveNotification: string;
  // export declare let willStartLiveResizeNotification: string;
  // export type FrameAutosaveName = String;
  // export type PersistableFrameDescriptor = String;
  // export type TabbingIdentifier = String;
  // export type FrameAutosaveName = String;
  // export type PersistableFrameDescriptor = String;
  // export type TabbingIdentifier = String;
}

namespace NSWorkspace {
  export enum AuthorizationType {
    CreateSymbolicLink = 0,
    SetAttributes = 1,
    ReplaceFile = 2
  }

  global['NSWorkspace']['AuthorizationType'] = AuthorizationType;

  export enum IconCreationOptions {
    ExcludeQuickDrawElementsIconCreationOption = 2,
    Exclude10_4ElementsIconCreationOption = 4
  }

  global['NSWorkspace']['IconCreationOptions'] = IconCreationOptions;

  export enum LaunchOptions {
    AndPrint = 2,
    WithErrorPresentation = 64,
    InhibitingBackgroundOnly = 128,
    WithoutAddingToRecents = 256,
    WithoutActivation = 512,
    Async = 65536,
    NewInstance = 524288,
    AndHide = 1048576,
    AndHideOthers = 2097152,
    Default = 65536,
    AllowingClassicStartup = 131072,
    PreferringClassic = 262144
  }

  global['NSWorkspace']['LaunchOptions'] = LaunchOptions;

  // export declare let accessibilityDisplayOptionsDidChangeNotification: string;
  // export declare let activeSpaceDidChangeNotification: string;
  // export declare let applicationUserInfoKey: string;
  // export declare let allowClipping: string;
  // export declare let fillColor: string;
  // export declare let imageScaling: string;
  // export declare let didActivateApplicationNotification: string;
  // export declare let didChangeFileLabelsNotification: string;
  // export declare let didDeactivateApplicationNotification: string;
  // export declare let didHideApplicationNotification: string;
  // export declare let didLaunchApplicationNotification: string;
  // export declare let didMountNotification: string;
  // export declare let didRenameVolumeNotification: string;
  // export declare let didTerminateApplicationNotification: string;
  // export declare let didUnhideApplicationNotification: string;
  // export declare let didUnmountNotification: string;
  // export declare let didWakeNotification: string;
  // export declare let appleEvent: string;
  // export declare let architecture: string;
  // export declare let arguments_: string;
  // export declare let environment: string;
  // export declare let screensDidSleepNotification: string;
  // export declare let screensDidWakeNotification: string;
  // export declare let sessionDidBecomeActiveNotification: string;
  // export declare let sessionDidResignActiveNotification: string;
  // export declare let localizedVolumeNameUserInfoKey: string;
  // export declare let oldLocalizedVolumeNameUserInfoKey: string;
  // export declare let oldVolumeURLUserInfoKey: string;
  // export declare let volumeURLUserInfoKey: string;
  // export declare let willLaunchApplicationNotification: string;
  // export declare let willPowerOffNotification: string;
  // export declare let willSleepNotification: string;
  // export declare let willUnmountNotification: string;
}

namespace NSXPCConnection {
  export enum Options {
    Privileged = 4096
  }

  global['NSXPCConnection']['Options'] = Options;

}

namespace NetService {
  // Options
  export enum Options {
    noAutoRename,
    listenForConnections,
    center,
    name,
    object
  }

}

namespace NotificationQueue {
  export enum NotificationCoalescing {
    NoCoalescing = 0,
    CoalescingOnName = 1,
    CoalescingOnSender = 2
  }

  global['NotificationQueue']['NotificationCoalescing'] = NotificationCoalescing;

  export enum PostingStyle {
    WhenIdle = 1,
    ASAP = 2,
    Now = 3
  }

  global['NotificationQueue']['PostingStyle'] = PostingStyle;

}

namespace NumberFormatter {
  export enum Behavior {
    BehaviorDefault = 0,
    Behavior10_0 = 1000,
    Behavior10_4 = 1040
  }

  global['NumberFormatter']['Behavior'] = Behavior;

  export enum PadPosition {
    BeforePrefix = 0,
    AfterPrefix = 1,
    BeforeSuffix = 2,
    AfterSuffix = 3
  }

  global['NumberFormatter']['PadPosition'] = PadPosition;

  export enum RoundingMode {
    Ceiling = 0,
    Floor = 1,
    Down = 2,
    Up = 3,
    HalfEven = 4,
    HalfDown = 5,
    HalfUp = 6
  }

  global['NumberFormatter']['RoundingMode'] = RoundingMode;

  export enum Style {
    NoStyle = 0,
    DecimalStyle = 1,
    CurrencyStyle = 2,
    PercentStyle = 3,
    ScientificStyle = 4,
    SpellOutStyle = 5,
    OrdinalStyle = 6,
    CurrencyISOCodeStyle = 8,
    CurrencyPluralStyle = 9,
    CurrencyAccountingStyle = 10
  }

  global['NumberFormatter']['Style'] = Style;

}

namespace Operation {
  export enum QueuePriority {
    VeryLow = -8,
    Low = -4,
    Normal = 0,
    High = 4,
    VeryHigh = 8
  }

  global['Operation']['QueuePriority'] = QueuePriority;

}

namespace OperationQueue {
  // export declare let defaultMaxConcurrentOperationCount: number;
}

namespace PersonNameComponentsFormatter {
  export enum Options {
    Phonetic = 2
  }

  global['PersonNameComponentsFormatter']['Options'] = Options;

  export enum Style {
    Default = 0,
    Short = 1,
    Medium = 2,
    Long = 3,
    Abbreviated = 4
  }

  global['PersonNameComponentsFormatter']['Style'] = Style;

}

namespace Port {
  // export declare let didBecomeInvalidNotification: string;
}

namespace Process {
  export enum TerminationReason {
    Exit = 1,
    UncaughtSignal = 2
  }

  global['Process']['TerminationReason'] = TerminationReason;

  // export declare let didTerminateNotification: string;
}

namespace ProcessInfo {
  export enum ActivityOptions {
    IdleDisplaySleepDisabled = 1099511627776,
    IdleSystemSleepDisabled = 1048576,
    SuddenTerminationDisabled = 16384,
    AutomaticTerminationDisabled = 32768,
    UserInitiated = 16777215,
    UserInitiatedAllowingIdleSystemSleep = 15728639,
    Background = 255,
    LatencyCritical = 1095216660480
  }

  global['ProcessInfo']['ActivityOptions'] = ActivityOptions;

  export enum ThermalState {
    Nominal = 0,
    Fair = 1,
    Serious = 2,
    Critical = 3
  }

  global['ProcessInfo']['ThermalState'] = ThermalState;

  // export declare let thermalStateDidChangeNotification: string;
}

namespace Progress {
  // export declare let copying: string;
  // export declare let decompressingAfterDownloading: string;
  // export declare let downloading: string;
  // export declare let receiving: string;
}

namespace ProgressKind {
  // export declare let file: string;
}

namespace ProgressUserInfoKey {
  // export declare let estimatedTimeRemainingKey: string;
  // export declare let fileAnimationImageKey: string;
  // export declare let fileAnimationImageOriginalRectKey: string;
  // export declare let fileCompletedCountKey: string;
  // export declare let fileIconKey: string;
  // export declare let fileOperationKindKey: string;
  // export declare let fileTotalCountKey: string;
  // export declare let fileURLKey: string;
  // export declare let throughputKey: string;
}

namespace PropertyListSerialization {
  export enum PropertyListFormat {
    OpenStepFormat = 1,
    XMLFormat_v1_0 = 100,
    BinaryFormat_v1_0 = 200
  }

  global['PropertyListSerialization']['PropertyListFormat'] = PropertyListFormat;

  export enum MutabilityOptions {
    Immutable = 0,
    MutableContainers = 1,
    MutableContainersAndLeaves = 2
  }

  global['PropertyListSerialization']['MutabilityOptions'] = MutabilityOptions;

  // export type ReadOptions = PropertyListSerialization;
  // export type WriteOptions = number;
  // export type ReadOptions = PropertyListSerialization;
  // export type WriteOptions = number;
}

namespace RelativeDateTimeFormatter {
  export enum DateTimeStyle {
    Numeric = 0,
    Named = 1
  }

  global['RelativeDateTimeFormatter']['DateTimeStyle'] = DateTimeStyle;

  export enum UnitsStyle {
    Full = 0,
    SpellOut = 1,
    Short = 2,
    Abbreviated = 3
  }

  global['RelativeDateTimeFormatter']['UnitsStyle'] = UnitsStyle;

}

namespace RunLoop {
  // export declare let eventTracking: string;
  // export declare let modalPanel: string;
  // export declare let default_: string;
  // export declare let common: string;
}

namespace Stream {
  export enum Event {
    None = 0,
    OpenCompleted = 1,
    HasBytesAvailable = 2,
    HasSpaceAvailable = 4,
    ErrorOccurred = 8,
    EndEncountered = 16
  }

  global['Stream']['Event'] = Event;

  export enum Status {
    NotOpen = 0,
    Opening = 1,
    Open = 2,
    Reading = 3,
    Writing = 4,
    AtEnd = 5,
    Closed = 6,
    Error = 7
  }

  global['Stream']['Status'] = Status;

  // export declare let dataWrittenToMemoryStreamKey: string;
  // export declare let fileCurrentOffsetKey: string;
  // export declare let networkServiceType: string;
  // export declare let socksProxyConfigurationKey: string;
  // export declare let socketSecurityLevelKey: string;
}

namespace StreamNetworkServiceTypeValue {
  // export declare let background: string;
  // export declare let callSignaling: string;
  // export declare let video: string;
  // export declare let voIP: string;
  // export declare let voice: string;
}

namespace StreamSOCKSProxyConfiguration {
  // export declare let hostKey: string;
  // export declare let passwordKey: string;
  // export declare let portKey: string;
  // export declare let userKey: string;
  // export declare let versionKey: string;
}

namespace StreamSOCKSProxyVersion {
  // export declare let version4: string;
  // export declare let version5: string;
}

namespace StreamSocketSecurityLevel {
  // export declare let negotiatedSSL: string;
  // export declare let none: string;
  // export declare let ssLv2: string;
  // export declare let ssLv3: string;
  // export declare let tlSv1: string;
}

namespace StringEncodingDetectionOptionsKey {
  // export declare let allowLossyKey: string;
  // export declare let disallowedEncodingsKey: string;
  // export declare let fromWindowsKey: string;
  // export declare let likelyLanguageKey: string;
  // export declare let lossySubstitutionKey: string;
  // export declare let suggestedEncodingsKey: string;
  // export declare let useOnlySuggestedEncodingsKey: string;
}

namespace StringTransform {
  // export declare let fullwidthToHalfwidth: string;
  // export declare let hiraganaToKatakana: string;
  // export declare let latinToArabic: string;
  // export declare let latinToCyrillic: string;
  // export declare let latinToGreek: string;
  // export declare let latinToHangul: string;
  // export declare let latinToHebrew: string;
  // export declare let latinToHiragana: string;
  // export declare let latinToKatakana: string;
  // export declare let latinToThai: string;
  // export declare let mandarinToLatin: string;
  // export declare let stripCombiningMarks: string;
  // export declare let stripDiacritics: string;
  // export declare let toLatin: string;
  // export declare let toUnicodeName: string;
  // export declare let toXMLHex: string;
}

namespace SystemPressureState {
  // Factors
  export enum Factors {
    systemTemperature,
    peakPower,
    depthModuleTemperature
  }

}

namespace URLCache {
  export enum StoragePolicy {
    Allowed = 0,
    AllowedInMemoryOnly = 1,
    NotAllowed = 2
  }

  global['URLCache']['StoragePolicy'] = StoragePolicy;

}

namespace URLCredential {
  export enum Persistence {
    None = 0,
    ForSession = 1,
    Permanent = 2,
    Synchronizable = 3
  }

  global['URLCredential']['Persistence'] = Persistence;

}

namespace URLFileProtection {
  // export declare let complete: string;
  // export declare let completeUnlessOpen: string;
  // export declare let completeUntilFirstUserAuthentication: string;
  // export declare let none: string;
}

namespace URLFileResourceType {
  // export declare let blockSpecial: string;
  // export declare let characterSpecial: string;
  // export declare let directory: string;
  // export declare let namedPipe: string;
  // export declare let regular: string;
  // export declare let socket: string;
  // export declare let symbolicLink: string;
  // export declare let unknown: string;
}

namespace URLResourceKey {
  // export declare let addedToDirectoryDateKey: string;
  // export declare let applicationIsScriptableKey: string;
  // export declare let attributeModificationDateKey: string;
  // export declare let canonicalPathKey: string;
  // export declare let contentAccessDateKey: string;
  // export declare let contentModificationDateKey: string;
  // export declare let creationDateKey: string;
  // export declare let customIconKey: string;
  // export declare let documentIdentifierKey: string;
  // export declare let effectiveIconKey: string;
  // export declare let fileAllocatedSizeKey: string;
  // export declare let fileProtectionKey: string;
  // export declare let fileResourceIdentifierKey: string;
  // export declare let fileResourceTypeKey: string;
  // export declare let fileSecurityKey: string;
  // export declare let fileSizeKey: string;
  // export declare let generationIdentifierKey: string;
  // export declare let hasHiddenExtensionKey: string;
  // export declare let isAliasFileKey: string;
  // export declare let isApplicationKey: string;
  // export declare let isDirectoryKey: string;
  // export declare let isExcludedFromBackupKey: string;
  // export declare let isExecutableKey: string;
  // export declare let isHiddenKey: string;
  // export declare let isMountTriggerKey: string;
  // export declare let isPackageKey: string;
  // export declare let isReadableKey: string;
  // export declare let isRegularFileKey: string;
  // export declare let isSymbolicLinkKey: string;
  // export declare let isSystemImmutableKey: string;
  // export declare let isUbiquitousItemKey: string;
  // export declare let isUserImmutableKey: string;
  // export declare let isVolumeKey: string;
  // export declare let isWritableKey: string;
  // export declare let keysOfUnsetValuesKey: string;
  // export declare let labelColorKey: string;
  // export declare let labelNumberKey: string;
  // export declare let linkCountKey: string;
  // export declare let localizedLabelKey: string;
  // export declare let localizedNameKey: string;
  // export declare let localizedTypeDescriptionKey: string;
  // export declare let nameKey: string;
  // export declare let parentDirectoryURLKey: string;
  // export declare let pathKey: string;
  // export declare let preferredIOBlockSizeKey: string;
  // export declare let quarantinePropertiesKey: string;
  // export declare let tagNamesKey: string;
  // export declare let thumbnailDictionaryKey: string;
  // export declare let thumbnailKey: string;
  // export declare let totalFileAllocatedSizeKey: string;
  // export declare let totalFileSizeKey: string;
  // export declare let typeIdentifierKey: string;
  // export declare let ubiquitousItemContainerDisplayNameKey: string;
  // export declare let ubiquitousItemDownloadRequestedKey: string;
  // export declare let ubiquitousItemDownloadingErrorKey: string;
  // export declare let ubiquitousItemDownloadingStatusKey: string;
  // export declare let ubiquitousItemHasUnresolvedConflictsKey: string;
  // export declare let ubiquitousItemIsDownloadingKey: string;
  // export declare let ubiquitousItemIsSharedKey: string;
  // export declare let ubiquitousItemIsUploadedKey: string;
  // export declare let ubiquitousItemIsUploadingKey: string;
  // export declare let ubiquitousItemUploadingErrorKey: string;
  // export declare let ubiquitousSharedItemCurrentUserPermissionsKey: string;
  // export declare let ubiquitousSharedItemCurrentUserRoleKey: string;
  // export declare let ubiquitousSharedItemMostRecentEditorNameComponentsKey: string;
  // export declare let ubiquitousSharedItemOwnerNameComponentsKey: string;
  // export declare let volumeAvailableCapacityForImportantUsageKey: string;
  // export declare let volumeAvailableCapacityForOpportunisticUsageKey: string;
  // export declare let volumeAvailableCapacityKey: string;
  // export declare let volumeCreationDateKey: string;
  // export declare let volumeIdentifierKey: string;
  // export declare let volumeIsAutomountedKey: string;
  // export declare let volumeIsBrowsableKey: string;
  // export declare let volumeIsEjectableKey: string;
  // export declare let volumeIsEncryptedKey: string;
  // export declare let volumeIsInternalKey: string;
  // export declare let volumeIsJournalingKey: string;
  // export declare let volumeIsLocalKey: string;
  // export declare let volumeIsReadOnlyKey: string;
  // export declare let volumeIsRemovableKey: string;
  // export declare let volumeIsRootFileSystemKey: string;
  // export declare let volumeLocalizedFormatDescriptionKey: string;
  // export declare let volumeLocalizedNameKey: string;
  // export declare let volumeMaximumFileSizeKey: string;
  // export declare let volumeNameKey: string;
  // export declare let volumeResourceCountKey: string;
  // export declare let volumeSupportsAccessPermissionsKey: string;
  // export declare let volumeSupportsAdvisoryFileLockingKey: string;
  // export declare let volumeSupportsCasePreservedNamesKey: string;
  // export declare let volumeSupportsCaseSensitiveNamesKey: string;
  // export declare let volumeSupportsCompressionKey: string;
  // export declare let volumeSupportsExclusiveRenamingKey: string;
  // export declare let volumeSupportsExtendedSecurityKey: string;
  // export declare let volumeSupportsFileCloningKey: string;
  // export declare let volumeSupportsHardLinksKey: string;
  // export declare let volumeSupportsImmutableFilesKey: string;
  // export declare let volumeSupportsJournalingKey: string;
  // export declare let volumeSupportsPersistentIDsKey: string;
  // export declare let volumeSupportsRenamingKey: string;
  // export declare let volumeSupportsRootDirectoryDatesKey: string;
  // export declare let volumeSupportsSparseFilesKey: string;
  // export declare let volumeSupportsSwapRenamingKey: string;
  // export declare let volumeSupportsSymbolicLinksKey: string;
  // export declare let volumeSupportsVolumeSizesKey: string;
  // export declare let volumeSupportsZeroRunsKey: string;
  // export declare let volumeTotalCapacityKey: string;
  // export declare let volumeURLForRemountingKey: string;
  // export declare let volumeURLKey: string;
  // export declare let volumeUUIDStringKey: string;
}

namespace URLSession {
  export enum AuthChallengeDisposition {
    UseCredential = 0,
    PerformDefaultHandling = 1,
    CancelAuthenticationChallenge = 2,
    RejectProtectionSpace = 3
  }

  global['URLSession']['AuthChallengeDisposition'] = AuthChallengeDisposition;

  export enum ResponseDisposition {
    Cancel = 0,
    Allow = 1,
    BecomeDownload = 2,
    BecomeStream = 3
  }

  global['URLSession']['ResponseDisposition'] = ResponseDisposition;

}

namespace URLSessionTask {
  export enum State {
    Running = 0,
    Suspended = 1,
    Canceling = 2,
    Completed = 3
  }

  global['URLSessionTask']['State'] = State;

  // export declare let defaultPriority: number;
  // export declare let highPriority: number;
  // export declare let lowPriority: number;
}

namespace URLSessionTaskMetrics {
  export enum ResourceFetchType {
    Unknown = 0,
    NetworkLoad = 1,
    ServerPush = 2,
    LocalCache = 3
  }

  global['URLSessionTaskMetrics']['ResourceFetchType'] = ResourceFetchType;

}

namespace URLSessionWebSocketTask {
  export enum CloseCode {
    Invalid = 0,
    NormalClosure = 1000,
    GoingAway = 1001,
    ProtocolError = 1002,
    UnsupportedData = 1003,
    NoStatusReceived = 1005,
    AbnormalClosure = 1006,
    InvalidFramePayloadData = 1007,
    PolicyViolation = 1008,
    MessageTooBig = 1009,
    MandatoryExtensionMissing = 1010,
    InternalServerError = 1011,
    TLSHandshakeFailure = 1015
  }

  global['URLSessionWebSocketTask']['CloseCode'] = CloseCode;

}

namespace URLThumbnailDictionaryItem {
  // export declare let NSThumbnail1024x1024SizeKey: string;
}

namespace URLUbiquitousItemDownloadingStatus {
  // export declare let current: string;
  // export declare let downloaded: string;
  // export declare let notDownloaded: string;
}

namespace URLUbiquitousSharedItemPermissions {
  // export declare let readOnly: string;
  // export declare let readWrite: string;
}

namespace URLUbiquitousSharedItemRole {
  // export declare let owner: string;
  // export declare let participant: string;
}

namespace UserDefaults {
  // export declare let argumentDomain: string;
  // export declare let globalDomain: string;
  // export declare let registrationDomain: string;
  // export declare let completedInitialCloudSyncNotification: string;
  // export declare let didChangeCloudAccountsNotification: string;
  // export declare let noCloudAccountNotification: string;
  // export declare let didChangeNotification: string;
  // export declare let sizeLimitExceededNotification: string;
}

namespace XMLDTDNode {
  export enum DTDKind {
    EntityGeneralKind = 1,
    EntityParsedKind = 2,
    EntityUnparsedKind = 3,
    EntityParameterKind = 4,
    EntityPredefined = 5,
    AttributeCDATAKind = 6,
    AttributeIDKind = 7,
    AttributeIDRefKind = 8,
    AttributeIDRefsKind = 9,
    AttributeEntityKind = 10,
    AttributeEntitiesKind = 11,
    AttributeNMTokenKind = 12,
    AttributeNMTokensKind = 13,
    AttributeEnumerationKind = 14,
    AttributeNotationKind = 15,
    ElementDeclarationUndefinedKind = 16,
    ElementDeclarationEmptyKind = 17,
    ElementDeclarationAnyKind = 18,
    ElementDeclarationMixedKind = 19,
    ElementDeclarationElementKind = 20
  }

  global['XMLDTDNode']['DTDKind'] = DTDKind;

}

namespace XMLDocument {
  export enum ContentKind {
    XMLKind = 0,
    XHTMLKind = 1,
    HTMLKind = 2,
    TextKind = 3
  }

  global['XMLDocument']['ContentKind'] = ContentKind;

}

namespace XMLNode {
  export enum Kind {
    InvalidKind = 0,
    DocumentKind = 1,
    ElementKind = 2,
    AttributeKind = 3,
    NamespaceKind = 4,
    ProcessingInstructionKind = 5,
    CommentKind = 6,
    TextKind = 7,
    DTDKind = 8,
    EntityDeclarationKind = 9,
    AttributeDeclarationKind = 10,
    ElementDeclarationKind = 11,
    NotationDeclarationKind = 12
  }

  global['XMLNode']['Kind'] = Kind;

  export enum Options {
    NodeOptionsNone = 0,
    NodeIsCDATA = 1,
    NodeExpandEmptyElement = 2,
    NodeCompactEmptyElement = 4,
    NodeUseSingleQuotes = 8,
    NodeUseDoubleQuotes = 16,
    NodeNeverEscapeContents = 32,
    DocumentTidyHTML = 512,
    DocumentTidyXML = 1024,
    DocumentValidate = 8192,
    NodeLoadExternalEntitiesAlways = 16384,
    NodeLoadExternalEntitiesSameOriginOnly = 32768,
    NodeLoadExternalEntitiesNever = 524288,
    DocumentXInclude = 65536,
    NodePrettyPrint = 131072,
    DocumentIncludeContentTypeDeclaration = 262144,
    NodePreserveNamespaceOrder = 1048576,
    NodePreserveAttributeOrder = 2097152,
    NodePreserveEntities = 4194304,
    NodePreservePrefixes = 8388608,
    NodePreserveCDATA = 16777216,
    NodePreserveWhitespace = 33554432,
    NodePreserveDTD = 67108864,
    NodePreserveCharacterReferences = 134217728,
    NodePromoteSignificantWhitespace = 268435456,
    NodePreserveEmptyElements = 6,
    NodePreserveQuotes = 24,
    NodePreserveAll = 4293918750
  }

  global['XMLNode']['Options'] = Options;

}

namespace XMLParser {
  export enum ErrorCode {
    InternalError = 1,
    OutOfMemoryError = 2,
    DocumentStartError = 3,
    EmptyDocumentError = 4,
    PrematureDocumentEndError = 5,
    InvalidHexCharacterRefError = 6,
    InvalidDecimalCharacterRefError = 7,
    InvalidCharacterRefError = 8,
    InvalidCharacterError = 9,
    CharacterRefAtEOFError = 10,
    CharacterRefInPrologError = 11,
    CharacterRefInEpilogError = 12,
    CharacterRefInDTDError = 13,
    EntityRefAtEOFError = 14,
    EntityRefInPrologError = 15,
    EntityRefInEpilogError = 16,
    EntityRefInDTDError = 17,
    ParsedEntityRefAtEOFError = 18,
    ParsedEntityRefInPrologError = 19,
    ParsedEntityRefInEpilogError = 20,
    ParsedEntityRefInInternalSubsetError = 21,
    EntityReferenceWithoutNameError = 22,
    EntityReferenceMissingSemiError = 23,
    ParsedEntityRefNoNameError = 24,
    ParsedEntityRefMissingSemiError = 25,
    UndeclaredEntityError = 26,
    UnparsedEntityError = 28,
    EntityIsExternalError = 29,
    EntityIsParameterError = 30,
    UnknownEncodingError = 31,
    EncodingNotSupportedError = 32,
    StringNotStartedError = 33,
    StringNotClosedError = 34,
    NamespaceDeclarationError = 35,
    EntityNotStartedError = 36,
    EntityNotFinishedError = 37,
    LessThanSymbolInAttributeError = 38,
    AttributeNotStartedError = 39,
    AttributeNotFinishedError = 40,
    AttributeHasNoValueError = 41,
    AttributeRedefinedError = 42,
    LiteralNotStartedError = 43,
    LiteralNotFinishedError = 44,
    CommentNotFinishedError = 45,
    ProcessingInstructionNotStartedError = 46,
    ProcessingInstructionNotFinishedError = 47,
    NotationNotStartedError = 48,
    NotationNotFinishedError = 49,
    AttributeListNotStartedError = 50,
    AttributeListNotFinishedError = 51,
    MixedContentDeclNotStartedError = 52,
    MixedContentDeclNotFinishedError = 53,
    ElementContentDeclNotStartedError = 54,
    ElementContentDeclNotFinishedError = 55,
    XMLDeclNotStartedError = 56,
    XMLDeclNotFinishedError = 57,
    ConditionalSectionNotStartedError = 58,
    ConditionalSectionNotFinishedError = 59,
    ExternalSubsetNotFinishedError = 60,
    DOCTYPEDeclNotFinishedError = 61,
    MisplacedCDATAEndStringError = 62,
    CDATANotFinishedError = 63,
    MisplacedXMLDeclarationError = 64,
    SpaceRequiredError = 65,
    SeparatorRequiredError = 66,
    NMTOKENRequiredError = 67,
    NAMERequiredError = 68,
    PCDATARequiredError = 69,
    URIRequiredError = 70,
    PublicIdentifierRequiredError = 71,
    LTRequiredError = 72,
    GTRequiredError = 73,
    LTSlashRequiredError = 74,
    EqualExpectedError = 75,
    TagNameMismatchError = 76,
    UnfinishedTagError = 77,
    StandaloneValueError = 78,
    InvalidEncodingNameError = 79,
    CommentContainsDoubleHyphenError = 80,
    InvalidEncodingError = 81,
    ExternalStandaloneEntityError = 82,
    InvalidConditionalSectionError = 83,
    EntityValueRequiredError = 84,
    NotWellBalancedError = 85,
    ExtraContentError = 86,
    InvalidCharacterInEntityError = 87,
    ParsedEntityRefInInternalError = 88,
    EntityRefLoopError = 89,
    EntityBoundaryError = 90,
    InvalidURIError = 91,
    URIFragmentError = 92,
    NoDTDError = 94,
    DelegateAbortedParseError = 512
  }

  global['XMLParser']['ErrorCode'] = ErrorCode;

  export enum ExternalEntityResolvingPolicy {
    ResolveExternalEntitiesNever = 0,
    ResolveExternalEntitiesNoNetwork = 1,
    ResolveExternalEntitiesSameOriginOnly = 2,
    ResolveExternalEntitiesAlways = 3
  }

  global['XMLParser']['ExternalEntityResolvingPolicy'] = ExternalEntityResolvingPolicy;

  // export declare let errorDomain: string;
}

export enum AVAssetReferenceRestrictions {
  forbidRemoteReferenceToLocal,
  forbidLocalReferenceToRemote,
  forbidCrossSiteReference,
  forbidLocalReferenceToLocal,
  forbidAll,
  defaultPolicy,
}

global['AVAssetReferenceRestrictions'] = AVAssetReferenceRestrictions;

export enum AVAudioPlayerNodeBufferOptions {
  byteSwapped,
  scalarCount,
  loops,
  interrupts,
  interruptsAtLoop,
}

global['AVAudioPlayerNodeBufferOptions'] = AVAudioPlayerNodeBufferOptions;

export enum AVAudioSpatializationFormats {
  monoAndStereo,
  multichannel,
  monoStereoAndMultichannel,
}

global['AVAudioSpatializationFormats'] = AVAudioSpatializationFormats;

export enum AVMovieWritingOptions {
  errorDomain,
  unknown,
  outOfMemory,
  sessionNotRunning,
  deviceAlreadyUsedByAnotherSession,
  noDataCaptured,
  sessionConfigurationChanged,
  diskFull,
  deviceWasDisconnected,
  mediaChanged,
  maximumDurationReached,
  maximumFileSizeReached,
  mediaDiscontinuity,
  maximumNumberOfSamplesForFileFormatReached,
  deviceNotConnected,
  deviceInUseByAnotherApplication,
  deviceLockedForConfigurationByAnotherProcess,
  exportFailed,
  decodeFailed,
  invalidSourceMedia,
  fileAlreadyExists,
  compositionTrackSegmentsNotContiguous,
  invalidCompositionTrackSegmentDuration,
  invalidCompositionTrackSegmentSourceStartTime,
  invalidCompositionTrackSegmentSourceDuration,
  fileFormatNotRecognized,
  fileFailedToParse,
  maximumStillImageCaptureRequestsExceeded,
  contentIsProtected,
  noImageAtTime,
  decoderNotFound,
  encoderNotFound,
  contentIsNotAuthorized,
  applicationIsNotAuthorized,
  operationNotSupportedForAsset,
  decoderTemporarilyUnavailable,
  encoderTemporarilyUnavailable,
  invalidVideoComposition,
  referenceForbiddenByReferencePolicy,
  invalidOutputURLPathExtension,
  screenCaptureFailed,
  displayWasDisabled,
  torchLevelUnavailable,
  incompatibleAsset,
  failedToLoadMediaData,
  serverIncorrectlyConfigured,
  applicationIsNotAuthorizedToUseDevice,
  failedToParse,
  fileTypeDoesNotSupportSampleReferences,
  undecodableMediaData,
  airPlayControllerRequiresInternet,
  airPlayReceiverRequiresInternet,
  videoCompositorFailed,
  createContentKeyRequestFailed,
  unsupportedOutputSettings,
  operationNotAllowed,
  contentIsUnavailable,
  formatUnsupported,
  malformedDepth,
  contentNotUpdated,
  noLongerPlayable,
  noCompatibleAlternatesForExternalDisplay,
  noSourceTrack,
  externalPlaybackNotSupportedForAsset,
  operationNotSupportedForPreset,
  incorrectlyConfigured,
  segmentStartedWithNonSyncSample,
  rosettaNotInstalled,
  addMovieHeaderToDestination,
  truncateDestinationToMovieHeaderOnly,
}

global['AVMovieWritingOptions'] = AVMovieWritingOptions;

export enum AVMusicSequenceLoadOptions {
  smfChannelsToTracks,
  scalarCount,
}

global['AVMusicSequenceLoadOptions'] = AVMusicSequenceLoadOptions;

export enum AlignmentOptions {
  alignMinXInward,
  alignMinYInward,
  alignMaxXInward,
  alignMaxYInward,
  alignWidthInward,
  alignHeightInward,
  alignMinXOutward,
  alignMinYOutward,
  alignMaxXOutward,
  alignMaxYOutward,
  alignWidthOutward,
  alignHeightOutward,
  alignMinXNearest,
  alignMinYNearest,
  alignMaxXNearest,
  alignMaxYNearest,
  alignWidthNearest,
  alignHeightNearest,
  alignRectFlipped,
  alignAllEdgesInward,
  alignAllEdgesOutward,
  alignAllEdgesNearest,
}

global['AlignmentOptions'] = AlignmentOptions;

export enum AnyObject {
  byteSwapped,
  scalarCount,
  assureMemoryNow,
  alwaysCopyData,
  dontOptimizeDepth,
  permitEmptyReference,
}

global['AnyObject'] = AnyObject;

export enum CAAutoresizingMask {
  layerMinXMargin,
  layerWidthSizable,
  layerMaxXMargin,
  layerMinYMargin,
  layerHeightSizable,
  layerMaxYMargin,
}

global['CAAutoresizingMask'] = CAAutoresizingMask;

export enum CACornerMask {
  layerMinXMinYCorner,
  layerMaxXMinYCorner,
  layerMinXMaxYCorner,
  layerMaxXMaxYCorner,
}

global['CACornerMask'] = CACornerMask;

export enum CAEdgeAntialiasingMask {
  layerLeftEdge,
  layerRightEdge,
  layerBottomEdge,
  layerTopEdge,
}

global['CAEdgeAntialiasingMask'] = CAEdgeAntialiasingMask;

export enum CFCalendarUnit {
  magnitude,
  byteSwapped,
  scalarCount,
  era,
  year,
  month,
  day,
  hour,
  minute,
  second,
  week,
  weekday,
  weekdayOrdinal,
  quarter,
  weekOfMonth,
  weekOfYear,
  yearForWeekOfYear,
}

global['CFCalendarUnit'] = CFCalendarUnit;

export enum CFDataSearchFlags {
  backwards,
  anchored,
}

global['CFDataSearchFlags'] = CFDataSearchFlags;

export enum CFFileSecurityClearOptions {
  magnitude,
  byteSwapped,
  scalarCount,
  owner,
  group,
  mode,
  ownerUUID,
  groupUUID,
  accessControlList,
}

global['CFFileSecurityClearOptions'] = CFFileSecurityClearOptions;

export enum CFGregorianUnitFlags {
  unitsYears,
  unitsMonths,
  unitsDays,
  unitsHours,
  unitsMinutes,
  unitsSeconds,
  allUnits,
}

global['CFGregorianUnitFlags'] = CFGregorianUnitFlags;

export enum CFISO8601DateFormatOptions {
  byteSwapped,
  scalarCount,
  withYear,
  withMonth,
  withWeekOfYear,
  withDay,
  withTime,
  withTimeZone,
  withSpaceBetweenDateAndTime,
  withDashSeparatorInDate,
  withColonSeparatorInTime,
  withColonSeparatorInTimeZone,
  withFractionalSeconds,
  withFullDate,
  withFullTime,
  withInternetDateTime,
}

global['CFISO8601DateFormatOptions'] = CFISO8601DateFormatOptions;

export enum CFNumberFormatterOptionFlags {
  magnitude,
  byteSwapped,
  scalarCount,
  parseIntegersOnly,
}

global['CFNumberFormatterOptionFlags'] = CFNumberFormatterOptionFlags;

export enum CFPropertyListMutabilityOptions {
  byteSwapped,
  scalarCount,
  mutableContainers,
  mutableContainersAndLeaves,
}

global['CFPropertyListMutabilityOptions'] = CFPropertyListMutabilityOptions;

export enum CFRunLoopActivity {
  entry,
  beforeTimers,
  beforeSources,
  beforeWaiting,
  afterWaiting,
  exit,
  allActivities,
}

global['CFRunLoopActivity'] = CFRunLoopActivity;

export enum CFSocketCallBackType {
  readCallBack,
  acceptCallBack,
  dataCallBack,
  connectCallBack,
  writeCallBack,
}

global['CFSocketCallBackType'] = CFSocketCallBackType;

export enum CFStreamEventType {
  magnitude,
  byteSwapped,
  scalarCount,
  openCompleted,
  hasBytesAvailable,
  canAcceptBytes,
  errorOccurred,
  endEncountered,
}

global['CFStreamEventType'] = CFStreamEventType;

export enum CFStringCompareFlags {
  compareCaseInsensitive,
  compareBackwards,
  compareAnchored,
  compareNonliteral,
  compareLocalized,
  compareNumerically,
  compareDiacriticInsensitive,
  compareWidthInsensitive,
  compareForcedOrdering,
}

global['CFStringCompareFlags'] = CFStringCompareFlags;

export enum CFStringTokenizerTokenType {
  byteSwapped,
  scalarCount,
  normal,
  hasSubTokensMask,
  hasDerivedSubTokensMask,
  hasHasNumbersMask,
  hasNonLettersMask,
  isCJWordMask,
}

global['CFStringTokenizerTokenType'] = CFStringTokenizerTokenType;

export enum CFURLBookmarkCreationOptions {
  byteSwapped,
  scalarCount,
  minimalBookmarkMask,
  suitableForBookmarkFile,
  withSecurityScope,
  securityScopeAllowOnlyReadAccess,
}

global['CFURLBookmarkCreationOptions'] = CFURLBookmarkCreationOptions;

export enum CFURLBookmarkResolutionOptions {
  byteSwapped,
  scalarCount,
  cfurlBookmarkResolutionWithoutUIMask,
  cfurlBookmarkResolutionWithoutMountingMask,
  cfurlBookmarkResolutionWithSecurityScope,
  cfBookmarkResolutionWithoutUIMask,
  cfBookmarkResolutionWithoutMountingMask,
}

global['CFURLBookmarkResolutionOptions'] = CFURLBookmarkResolutionOptions;

export enum CFURLEnumeratorOptions {
  descendRecursively,
  skipInvisibles,
  generateFileReferenceURLs,
  skipPackageContents,
  includeDirectoriesPreOrder,
  includeDirectoriesPostOrder,
  generateRelativePathURLs,
}

global['CFURLEnumeratorOptions'] = CFURLEnumeratorOptions;

export enum CFXMLParserOptions {
  validateDocument,
  skipMetaData,
  replacePhysicalEntities,
  skipWhitespace,
  resolveExternalEntities,
  addImpliedAttributes,
  allOptions,
}

global['CFXMLParserOptions'] = CFXMLParserOptions;

export enum CFXMLParserStatusCode {
  statusParseNotBegun,
  statusParseInProgress,
  errorUnexpectedEOF,
  errorUnknownEncoding,
  errorEncodingConversionFailure,
  errorMalformedProcessingInstruction,
  errorMalformedDTD,
  errorMalformedName,
  errorMalformedCDSect,
  errorMalformedCloseTag,
  errorMalformedStartTag,
  errorMalformedDocument,
  errorElementlessDocument,
  errorMalformedComment,
  errorMalformedCharacterReference,
  errorMalformedParsedCharacterData,
  errorNoData,
}

global['CFXMLParserStatusCode'] = CFXMLParserStatusCode;

export enum CGBitmapInfo {
  alphaInfoMask,
  floatInfoMask,
  floatComponents,
  byteOrderMask,
  byteOrder16Little,
  byteOrder32Little,
  byteOrder16Big,
  byteOrder32Big,
}

global['CGBitmapInfo'] = CGBitmapInfo;

export enum CGCaptureOptions {
  byteSwapped,
  scalarCount,
  noFill,
}

global['CGCaptureOptions'] = CGCaptureOptions;

export enum CGConfigureOption {
  byteSwapped,
  scalarCount,
  forAppOnly,
  forSession,
  permanently,
}

global['CGConfigureOption'] = CGConfigureOption;

export enum CGDisplayChangeSummaryFlags {
  byteSwapped,
  scalarCount,
  beginConfigurationFlag,
  movedFlag,
  setMainFlag,
  setModeFlag,
  addFlag,
  removeFlag,
  enabledFlag,
  disabledFlag,
  mirrorFlag,
  unMirrorFlag,
  desktopShapeChangedFlag,
}

global['CGDisplayChangeSummaryFlags'] = CGDisplayChangeSummaryFlags;

export enum CGEventFilterMask {
  byteSwapped,
  scalarCount,
  permitLocalMouseEvents,
  permitLocalKeyboardEvents,
  permitSystemDefinedEvents,
}

global['CGEventFilterMask'] = CGEventFilterMask;

export enum CGEventFlags {
  maskAlphaShift,
  maskShift,
  maskControl,
  maskAlternate,
  maskCommand,
  maskHelp,
  maskSecondaryFn,
  maskNumericPad,
  maskNonCoalesced,
}

global['CGEventFlags'] = CGEventFlags;

export enum CGGradientDrawingOptions {
  byteSwapped,
  scalarCount,
  drawsBeforeStartLocation,
  drawsAfterEndLocation,
}

global['CGGradientDrawingOptions'] = CGGradientDrawingOptions;

export enum CGPDFAccessPermissions {
  byteSwapped,
  scalarCount,
  allowsLowQualityPrinting,
  allowsHighQualityPrinting,
  allowsDocumentChanges,
  allowsDocumentAssembly,
  allowsContentCopying,
  allowsContentAccessibility,
  allowsCommenting,
  allowsFormFieldEntry,
}

global['CGPDFAccessPermissions'] = CGPDFAccessPermissions;

export enum CGScreenUpdateOperation {
  byteSwapped,
  scalarCount,
  refresh,
  move,
  reducedDirtyRectangleCount,
}

global['CGScreenUpdateOperation'] = CGScreenUpdateOperation;

export enum CGWindowImageOption {
  byteSwapped,
  scalarCount,
  boundsIgnoreFraming,
  shouldBeOpaque,
  onlyShadows,
  bestResolution,
  nominalResolution,
}

global['CGWindowImageOption'] = CGWindowImageOption;

export enum CGWindowListOption {
  magnitude,
  byteSwapped,
  scalarCount,
  optionAll,
  optionOnScreenOnly,
  optionOnScreenAboveWindow,
  optionOnScreenBelowWindow,
  optionIncludingWindow,
  excludeDesktopElements,
}

global['CGWindowListOption'] = CGWindowListOption;

export enum CKContainer_Application_Permissions {
  userDiscoverability,
}

global['CKContainer_Application_Permissions'] = CKContainer_Application_Permissions;

export enum CMSampleBuffer {
  audioBufferListAssure16ByteAlignment,
}

global['CMSampleBuffer'] = CMSampleBuffer;

export enum CMTimeFlags {
  magnitude,
  byteSwapped,
  scalarCount,
  valid,
  hasBeenRounded,
  positiveInfinity,
  negativeInfinity,
  indefinite,
  impliedValueFlagsMask,
}

global['CMTimeFlags'] = CMTimeFlags;

export enum Character {
  request,
  session,
  ascii,
  nextstep,
  japaneseEUC,
  utf8,
  isoLatin1,
  symbol,
  nonLossyASCII,
  shiftJIS,
  isoLatin2,
  unicode,
  windowsCP1251,
  windowsCP1252,
  windowsCP1253,
  windowsCP1254,
  windowsCP1250,
  iso2022JP,
  macOSRoman,
  utf16,
  utf16BigEndian,
  utf16LittleEndian,
  utf32,
  utf32BigEndian,
  utf32LittleEndian,
}

global['Character'] = Character;

export enum Data {
  video,
  audio,
  muxed,
  text,
  closedCaption,
  subtitle,
  timeCode,
  metadata,
  linearPCM,
  ac3,
  iec60958AC3,
  appleIMA4,
  mpeg4AAC,
  mpeg4CELP,
  mpeg4HVXC,
  mpeg4TwinVQ,
  mace3,
  mace6,
  uLaw,
  aLaw,
  qDesign,
  qDesign2,
  qualcomm,
  mpegLayer1,
  mpegLayer2,
  mpegLayer3,
  midiStream,
  parameterValueStream,
  appleLossless,
  mpeg4AAC_HE,
  mpeg4AAC_LD,
  mpeg4AAC_ELD,
  mpeg4AAC_ELD_SBR,
  mpeg4AAC_ELD_V2,
  mpeg4AAC_HE_V2,
  mpeg4AAC_Spatial,
  mpegD_USAC,
  amr,
  amr_WB,
  audible,
  iLBC,
  dviIntelIMA,
  microsoftGSM,
  aes3,
  enhancedAC3,
  flac,
  opus,
  aacLCProtected,
  aacAudibleProtected,
  pixelFormat_32ARGB,
  pixelFormat_32BGRA,
  pixelFormat_24RGB,
  pixelFormat_16BE555,
  pixelFormat_16BE565,
  pixelFormat_16LE555,
  pixelFormat_16LE565,
  pixelFormat_16LE5551,
  pixelFormat_422YpCbCr8,
  pixelFormat_422YpCbCr8_yuvs,
  pixelFormat_444YpCbCr8,
  pixelFormat_4444YpCbCrA8,
  pixelFormat_422YpCbCr16,
  pixelFormat_422YpCbCr10,
  pixelFormat_444YpCbCr10,
  pixelFormat_8IndexedGray_WhiteIsZero,
  animation,
  cinepak,
  jpeg,
  jpeg_OpenDML,
  sorensonVideo,
  sorensonVideo3,
  h263,
  h264,
  hevc,
  hevcWithAlpha,
  mpeg4Video,
  mpeg2Video,
  mpeg1Video,
  dvcNTSC,
  dvcPAL,
  dvcProPAL,
  dvcPro50NTSC,
  dvcPro50PAL,
  dvcPROHD720p60,
  dvcPROHD720p50,
  dvcPROHD1080i60,
  dvcPROHD1080i50,
  dvcPROHD1080p30,
  dvcPROHD1080p25,
  proRes4444XQ,
  proRes4444,
  proRes422HQ,
  proRes422,
  proRes422LT,
  proRes422Proxy,
  proResRAW,
  proResRAWHQ,
  mpeg1System,
  mpeg2Transport,
  mpeg2Program,
  dv,
  cea608,
  cea708,
  atsc,
  qt,
  mobile3GPP,
  webVTT,
  timeCode32,
  timeCode64,
  counter32,
  counter64,
  icy,
  id3,
  boxed,
  emsg,
  streamBasicDescription,
  magicCookie,
  channelLayout,
  extensions,
  all,
  startIndex,
  endIndex,
}

global['Data'] = Data;

export enum Int {
  byteSwapped,
  scalarCount,
}

global['Int'] = Int;

export enum NSBinarySearchingOptions {
  firstEqual,
  lastEqual,
  insertionIndex,
}

global['NSBinarySearchingOptions'] = NSBinarySearchingOptions;

export enum NSDirectionalRectEdge {
  top,
  leading,
  bottom,
  trailing,
  all,
}

global['NSDirectionalRectEdge'] = NSDirectionalRectEdge;

export enum NSDragOperation {
  copy,
  link,
  generic,
  private,
  move,
  delete,
  every,
  all_Obsolete,
  all,
}

global['NSDragOperation'] = NSDragOperation;

export enum NSDraggingItemEnumerationOptions {
  concurrent,
  clearNonenumeratedImages,
}

global['NSDraggingItemEnumerationOptions'] = NSDraggingItemEnumerationOptions;

export enum NSEnumerationOptions {
  concurrent,
  reverse,
}

global['NSEnumerationOptions'] = NSEnumerationOptions;

export enum NSFontCollectionOptions {
  applicationOnlyMask,
}

global['NSFontCollectionOptions'] = NSFontCollectionOptions;

export enum NSFontTraitMask {
  byteSwapped,
  scalarCount,
  italicFontMask,
  boldFontMask,
  unboldFontMask,
  nonStandardCharacterSetFontMask,
  narrowFontMask,
  expandedFontMask,
  condensedFontMask,
  smallCapsFontMask,
  posterFontMask,
  compressedFontMask,
  fixedPitchFontMask,
  unitalicFontMask,
}

global['NSFontTraitMask'] = NSFontTraitMask;

export enum NSItemProviderFileOptions {
  openInPlace,
}

global['NSItemProviderFileOptions'] = NSItemProviderFileOptions;

export enum NSKeyValueObservingOptions {
  new,
  old,
  initial,
  prior,
}

global['NSKeyValueObservingOptions'] = NSKeyValueObservingOptions;

export enum NSOrderedCollectionDifferenceCalculationOptions {
  magnitude,
  timeInterval,
  hashValue,
  omitInsertedObjects,
  omitRemovedObjects,
  inferMoves,
}

global['NSOrderedCollectionDifferenceCalculationOptions'] = NSOrderedCollectionDifferenceCalculationOptions;

export enum NSSortOptions {
  magnitude,
  byteSwapped,
  scalarCount,
  concurrent,
  stable,
}

global['NSSortOptions'] = NSSortOptions;

export enum NSSpringLoadingOptions {
  disabled,
  enabled,
  continuousActivation,
  noHover,
}

global['NSSpringLoadingOptions'] = NSSpringLoadingOptions;

export enum NSTextStorageEditActions {
  editedAttributes,
  editedCharacters,
}

global['NSTextStorageEditActions'] = NSTextStorageEditActions;

export enum NSTypesetterControlCharacterAction {
  magnitude,
  byteSwapped,
  scalarCount,
  zeroAdvancementAction,
  whitespaceAction,
  horizontalTabAction,
  lineBreakAction,
  paragraphBreakAction,
  containerBreakAction,
}

global['NSTypesetterControlCharacterAction'] = NSTypesetterControlCharacterAction;

export enum NSUnderlineStyle {
  single,
  thick,
  double,
  patternDot,
  patternDash,
  patternDashDot,
  patternDashDotDot,
  byWord,
}

global['NSUnderlineStyle'] = NSUnderlineStyle;

export enum UInt {
  magnitude,
  byteSwapped,
  scalarCount,
  hashValue,
  bitWidth,
  leadingZeroBitCount,
  trailingZeroBitCount,
  nonzeroBitCount,
  count,
  startIndex,
  endIndex,
  indices,
  words,
}

global['UInt'] = UInt;

export enum UInt8 {
  regions,
  startIndex,
  endIndex,
  indices,
  hashValue,
  autoupdatingCurrent,
  current,
}

global['UInt8'] = UInt8;

export enum AVAssetReferenceRestrictions {
  ForbidNone = 0,
  ForbidRemoteReferenceToLocal = 1,
  ForbidLocalReferenceToRemote = 2,
  ForbidCrossSiteReference = 4,
  ForbidLocalReferenceToLocal = 8,
  ForbidAll = 65535,
  DefaultPolicy = 2
}

global['AVAssetReferenceRestrictions'] = AVAssetReferenceRestrictions;

export enum AVAudio3DMixingPointSourceInHeadMode {
  Mono = 0,
  Bypass = 1
}

global['AVAudio3DMixingPointSourceInHeadMode'] = AVAudio3DMixingPointSourceInHeadMode;

export enum AVAudio3DMixingRenderingAlgorithm {
  EqualPowerPanning = 0,
  SphericalHead = 1,
  HRTF = 2,
  SoundField = 3,
  StereoPassThrough = 5,
  HRTFHQ = 6,
  Auto = 7
}

global['AVAudio3DMixingRenderingAlgorithm'] = AVAudio3DMixingRenderingAlgorithm;

export enum AVAudio3DMixingSourceMode {
  SpatializeIfMono = 0,
  Bypass = 1,
  PointSource = 2,
  AmbienceBed = 3
}

global['AVAudio3DMixingSourceMode'] = AVAudio3DMixingSourceMode;

export enum AVAudioCommonFormat {
  OtherFormat = 0,
  PCMFormatFloat32 = 1,
  PCMFormatFloat64 = 2,
  PCMFormatInt16 = 3,
  PCMFormatInt32 = 4
}

global['AVAudioCommonFormat'] = AVAudioCommonFormat;

export enum AVAudioConverterInputStatus {
  HaveData = 0,
  NoDataNow = 1,
  EndOfStream = 2
}

global['AVAudioConverterInputStatus'] = AVAudioConverterInputStatus;

export enum AVAudioConverterOutputStatus {
  HaveData = 0,
  InputRanDry = 1,
  EndOfStream = 2,
  Error = 3
}

global['AVAudioConverterOutputStatus'] = AVAudioConverterOutputStatus;

export enum AVAudioConverterPrimeMethod {
  Pre = 0,
  Normal = 1,
  None = 2
}

global['AVAudioConverterPrimeMethod'] = AVAudioConverterPrimeMethod;

export enum AVAudioEngineManualRenderingError {
  InvalidMode = -80800,
  Initialized = -80801,
  NotRunning = -80802
}

global['AVAudioEngineManualRenderingError'] = AVAudioEngineManualRenderingError;

export enum AVAudioEngineManualRenderingMode {
  Offline = 0,
  Realtime = 1
}

global['AVAudioEngineManualRenderingMode'] = AVAudioEngineManualRenderingMode;

export enum AVAudioEngineManualRenderingStatus {
  Error = -1,
  Success = 0,
  InsufficientDataFromInputNode = 1,
  CannotDoInCurrentContext = 2
}

global['AVAudioEngineManualRenderingStatus'] = AVAudioEngineManualRenderingStatus;

export enum AVAudioEnvironmentDistanceAttenuationModel {
  Exponential = 1,
  Inverse = 2,
  Linear = 3
}

global['AVAudioEnvironmentDistanceAttenuationModel'] = AVAudioEnvironmentDistanceAttenuationModel;

export enum AVAudioEnvironmentOutputType {
  Auto = 0,
  Headphones = 1,
  BuiltInSpeakers = 2,
  ExternalSpeakers = 3
}

global['AVAudioEnvironmentOutputType'] = AVAudioEnvironmentOutputType;

export enum AVAudioPlayerNodeBufferOptions {
  Loops = 1,
  Interrupts = 2,
  InterruptsAtLoop = 4
}

global['AVAudioPlayerNodeBufferOptions'] = AVAudioPlayerNodeBufferOptions;

export enum AVAudioPlayerNodeCompletionCallbackType {
  DataConsumed = 0,
  DataRendered = 1,
  DataPlayedBack = 2
}

global['AVAudioPlayerNodeCompletionCallbackType'] = AVAudioPlayerNodeCompletionCallbackType;

export enum AVAudioQuality {
  Min = 0,
  Low = 32,
  Medium = 64,
  High = 96,
  Max = 127
}

global['AVAudioQuality'] = AVAudioQuality;

export enum AVAudioSessionActivationOptions {
  None = 0
}

global['AVAudioSessionActivationOptions'] = AVAudioSessionActivationOptions;

export enum AVAudioUnitDistortionPreset {
  DrumsBitBrush = 0,
  DrumsBufferBeats = 1,
  DrumsLoFi = 2,
  MultiBrokenSpeaker = 3,
  MultiCellphoneConcert = 4,
  MultiDecimated1 = 5,
  MultiDecimated2 = 6,
  MultiDecimated3 = 7,
  MultiDecimated4 = 8,
  MultiDistortedFunk = 9,
  MultiDistortedCubed = 10,
  MultiDistortedSquared = 11,
  MultiEcho1 = 12,
  MultiEcho2 = 13,
  MultiEchoTight1 = 14,
  MultiEchoTight2 = 15,
  MultiEverythingIsBroken = 16,
  SpeechAlienChatter = 17,
  SpeechCosmicInterference = 18,
  SpeechGoldenPi = 19,
  SpeechRadioTower = 20,
  SpeechWaves = 21
}

global['AVAudioUnitDistortionPreset'] = AVAudioUnitDistortionPreset;

export enum AVAudioUnitEQFilterType {
  Parametric = 0,
  LowPass = 1,
  HighPass = 2,
  ResonantLowPass = 3,
  ResonantHighPass = 4,
  BandPass = 5,
  BandStop = 6,
  LowShelf = 7,
  HighShelf = 8,
  ResonantLowShelf = 9,
  ResonantHighShelf = 10
}

global['AVAudioUnitEQFilterType'] = AVAudioUnitEQFilterType;

export enum AVAudioUnitReverbPreset {
  SmallRoom = 0,
  MediumRoom = 1,
  LargeRoom = 2,
  MediumHall = 3,
  LargeHall = 4,
  Plate = 5,
  MediumChamber = 6,
  LargeChamber = 7,
  Cathedral = 8,
  LargeRoom2 = 9,
  MediumHall2 = 10,
  MediumHall3 = 11,
  LargeHall2 = 12
}

global['AVAudioUnitReverbPreset'] = AVAudioUnitReverbPreset;

export enum AVAuthorizationStatus {
  NotDetermined = 0,
  Restricted = 1,
  Denied = 2,
  Authorized = 3
}

global['AVAuthorizationStatus'] = AVAuthorizationStatus;

export enum AVCaptureColorSpace {
  sRGB = 0,
  P3_D65 = 1
}

global['AVCaptureColorSpace'] = AVCaptureColorSpace;

export enum AVCaptureVideoOrientation {
  Portrait = 1,
  PortraitUpsideDown = 2,
  LandscapeRight = 3,
  LandscapeLeft = 4
}

global['AVCaptureVideoOrientation'] = AVCaptureVideoOrientation;

export enum AVContentAuthorizationStatus {
  Unknown = 0,
  Completed = 1,
  Cancelled = 2,
  TimedOut = 3,
  Busy = 4,
  NotAvailable = 5,
  NotPossible = 6
}

global['AVContentAuthorizationStatus'] = AVContentAuthorizationStatus;

export enum AVError {
  Unknown = -11800,
  OutOfMemory = -11801,
  SessionNotRunning = -11803,
  DeviceAlreadyUsedByAnotherSession = -11804,
  NoDataCaptured = -11805,
  SessionConfigurationChanged = -11806,
  DiskFull = -11807,
  DeviceWasDisconnected = -11808,
  MediaChanged = -11809,
  MaximumDurationReached = -11810,
  MaximumFileSizeReached = -11811,
  MediaDiscontinuity = -11812,
  MaximumNumberOfSamplesForFileFormatReached = -11813,
  DeviceNotConnected = -11814,
  DeviceInUseByAnotherApplication = -11815,
  DeviceLockedForConfigurationByAnotherProcess = -11817,
  ExportFailed = -11820,
  DecodeFailed = -11821,
  InvalidSourceMedia = -11822,
  FileAlreadyExists = -11823,
  CompositionTrackSegmentsNotContiguous = -11824,
  InvalidCompositionTrackSegmentDuration = -11825,
  InvalidCompositionTrackSegmentSourceStartTime = -11826,
  InvalidCompositionTrackSegmentSourceDuration = -11827,
  FileFormatNotRecognized = -11828,
  FileFailedToParse = -11829,
  MaximumStillImageCaptureRequestsExceeded = -11830,
  ContentIsProtected = -11831,
  NoImageAtTime = -11832,
  DecoderNotFound = -11833,
  EncoderNotFound = -11834,
  ContentIsNotAuthorized = -11835,
  ApplicationIsNotAuthorized = -11836,
  OperationNotSupportedForAsset = -11838,
  DecoderTemporarilyUnavailable = -11839,
  EncoderTemporarilyUnavailable = -11840,
  InvalidVideoComposition = -11841,
  ReferenceForbiddenByReferencePolicy = -11842,
  InvalidOutputURLPathExtension = -11843,
  ScreenCaptureFailed = -11844,
  DisplayWasDisabled = -11845,
  TorchLevelUnavailable = -11846,
  IncompatibleAsset = -11848,
  FailedToLoadMediaData = -11849,
  ServerIncorrectlyConfigured = -11850,
  ApplicationIsNotAuthorizedToUseDevice = -11852,
  FailedToParse = -11853,
  FileTypeDoesNotSupportSampleReferences = -11854,
  UndecodableMediaData = -11855,
  AirPlayControllerRequiresInternet = -11856,
  AirPlayReceiverRequiresInternet = -11857,
  VideoCompositorFailed = -11858,
  CreateContentKeyRequestFailed = -11860,
  UnsupportedOutputSettings = -11861,
  OperationNotAllowed = -11862,
  ContentIsUnavailable = -11863,
  FormatUnsupported = -11864,
  MalformedDepth = -11865,
  ContentNotUpdated = -11866,
  NoLongerPlayable = -11867,
  NoCompatibleAlternatesForExternalDisplay = -11868,
  NoSourceTrack = -11869,
  ExternalPlaybackNotSupportedForAsset = -11870,
  OperationNotSupportedForPreset = -11871,
  SessionHardwareCostOverage = -11872,
  UnsupportedDeviceActiveFormat = -11873
}

global['AVError'] = AVError;

export enum AVKeyValueStatus {
  Unknown = 0,
  Loading = 1,
  Loaded = 2,
  Failed = 3,
  Cancelled = 4
}

global['AVKeyValueStatus'] = AVKeyValueStatus;

export enum AVMovieWritingOptions {
  AddMovieHeaderToDestination = 0,
  TruncateDestinationToMovieHeaderOnly = 1
}

global['AVMovieWritingOptions'] = AVMovieWritingOptions;

export enum AVMusicSequenceLoadOptions {
  SMF_PreserveTracks = 0,
  SMF_ChannelsToTracks = 1
}

global['AVMusicSequenceLoadOptions'] = AVMusicSequenceLoadOptions;

export enum AVMusicTrackLoopCount {
  Forever = -1
}

global['AVMusicTrackLoopCount'] = AVMusicTrackLoopCount;

export enum AVQueuedSampleBufferRenderingStatus {
  Unknown = 0,
  Rendering = 1,
  Failed = 2
}

global['AVQueuedSampleBufferRenderingStatus'] = AVQueuedSampleBufferRenderingStatus;

export enum AVSpeechBoundary {
  Immediate = 0,
  Word = 1
}

global['AVSpeechBoundary'] = AVSpeechBoundary;

export enum AVSpeechSynthesisVoiceGender {
  Unspecified = 0,
  Male = 1,
  Female = 2
}

global['AVSpeechSynthesisVoiceGender'] = AVSpeechSynthesisVoiceGender;

export enum AVSpeechSynthesisVoiceQuality {
  Default = 1,
  Enhanced = 2
}

global['AVSpeechSynthesisVoiceQuality'] = AVSpeechSynthesisVoiceQuality;

export enum AVVideoFieldMode {
  Both = 0,
  TopOnly = 1,
  BottomOnly = 2,
  Deinterlace = 3
}

global['AVVideoFieldMode'] = AVVideoFieldMode;

export enum AVCaptureViewControlsStyle {
  Inline = 0,
  Floating = 1,
  InlineDeviceSelection = 2,
  Default = 0
}

global['AVCaptureViewControlsStyle'] = AVCaptureViewControlsStyle;

export enum AVPlayerViewControlsStyle {
  None = 0,
  Inline = 1,
  Floating = 2,
  Minimal = 3,
  Default = 1
}

global['AVPlayerViewControlsStyle'] = AVPlayerViewControlsStyle;

export enum AVPlayerViewTrimResult {
  OKButton = 0,
  CancelButton = 1
}

global['AVPlayerViewTrimResult'] = AVPlayerViewTrimResult;

export enum AVRoutePickerViewButtonState {
  Normal = 0,
  NormalHighlighted = 1,
  Active = 2,
  ActiveHighlighted = 3
}

global['AVRoutePickerViewButtonState'] = AVRoutePickerViewButtonState;

export enum NSAccessibilityPriorityLevel {
  Low = 10,
  Medium = 50,
  High = 90
}

global['NSAccessibilityPriorityLevel'] = NSAccessibilityPriorityLevel;

export enum NSAnimationEffect {
  DisappearingItemDefault = 0,
  Poof = 10
}

global['NSAnimationEffect'] = NSAnimationEffect;

export enum NSBorderType {
  NoBorder = 0,
  LineBorder = 1,
  BezelBorder = 2,
  GrooveBorder = 3
}

global['NSBorderType'] = NSBorderType;

export enum NSCharacterCollection {
  IdentityMappingCharacterCollection = 0,
  AdobeCNS1CharacterCollection = 1,
  AdobeGB1CharacterCollection = 2,
  AdobeJapan1CharacterCollection = 3,
  AdobeJapan2CharacterCollection = 4,
  AdobeKorea1CharacterCollection = 5
}

global['NSCharacterCollection'] = NSCharacterCollection;

export enum NSCollectionElementCategory {
  Item = 0,
  SupplementaryView = 1,
  DecorationView = 2,
  InterItemGap = 3
}

global['NSCollectionElementCategory'] = NSCollectionElementCategory;

export enum NSCollectionLayoutSectionOrthogonalScrollingBehavior {
  None = 0,
  Continuous = 1,
  ContinuousGroupLeadingBoundary = 2,
  Paging = 3,
  GroupPaging = 4,
  GroupPagingCentered = 5
}

global['NSCollectionLayoutSectionOrthogonalScrollingBehavior'] = NSCollectionLayoutSectionOrthogonalScrollingBehavior;

export enum NSColorRenderingIntent {
  Default = 0,
  AbsoluteColorimetric = 1,
  RelativeColorimetric = 2,
  Perceptual = 3,
  Saturation = 4
}

global['NSColorRenderingIntent'] = NSColorRenderingIntent;

export enum NSCompositingOperation {
  Clear = 0,
  Copy = 1,
  SourceOver = 2,
  SourceIn = 3,
  SourceOut = 4,
  SourceAtop = 5,
  DestinationOver = 6,
  DestinationIn = 7,
  DestinationOut = 8,
  DestinationAtop = 9,
  XOR = 10,
  PlusDarker = 11,
  Highlight = 12,
  PlusLighter = 13,
  Multiply = 14,
  Screen = 15,
  Overlay = 16,
  Darken = 17,
  Lighten = 18,
  ColorDodge = 19,
  ColorBurn = 20,
  SoftLight = 21,
  HardLight = 22,
  Difference = 23,
  Exclusion = 24,
  Hue = 25,
  Saturation = 26,
  Color = 27,
  Luminosity = 28
}

global['NSCompositingOperation'] = NSCompositingOperation;

export enum NSControlTint {
  DefaultControlTint = 0,
  BlueControlTint = 1,
  GraphiteControlTint = 6,
  ClearControlTint = 7
}

global['NSControlTint'] = NSControlTint;

export enum NSDirectionalRectEdge {
  None = 0,
  Top = 1,
  Leading = 2,
  Bottom = 4,
  Trailing = 8,
  All = 15
}

global['NSDirectionalRectEdge'] = NSDirectionalRectEdge;

export enum NSDisplayGamut {
  SRGB = 1,
  P3 = 2
}

global['NSDisplayGamut'] = NSDisplayGamut;

export enum NSDragOperation {
  None = 0,
  Copy = 1,
  Link = 2,
  Generic = 4,
  Private = 8,
  Move = 16,
  Delete = 32,
  Every = -1,
  All_Obsolete = 15,
  All = 15
}

global['NSDragOperation'] = NSDragOperation;

export enum NSDraggingContext {
  OutsideApplication = 0,
  WithinApplication = 1
}

global['NSDraggingContext'] = NSDraggingContext;

export enum NSDraggingFormation {
  Default = 0,
  None = 1,
  Pile = 2,
  List = 3,
  Stack = 4
}

global['NSDraggingFormation'] = NSDraggingFormation;

export enum NSDraggingItemEnumerationOptions {
  Concurrent = 1,
  ClearNonenumeratedImages = 65536
}

global['NSDraggingItemEnumerationOptions'] = NSDraggingItemEnumerationOptions;

export enum NSFindPanelAction {
  ShowFindPanel = 1,
  Next = 2,
  Previous = 3,
  ReplaceAll = 4,
  Replace = 5,
  ReplaceAndFind = 6,
  SetFindString = 7,
  ReplaceAllInSelection = 8,
  SelectAll = 9,
  SelectAllInSelection = 10
}

global['NSFindPanelAction'] = NSFindPanelAction;

export enum NSFindPanelSubstringMatchType {
  Contains = 0,
  StartsWith = 1,
  FullWord = 2,
  EndsWith = 3
}

global['NSFindPanelSubstringMatchType'] = NSFindPanelSubstringMatchType;

export enum NSFocusRingPlacement {
  Only = 0,
  Below = 1,
  Above = 2
}

global['NSFocusRingPlacement'] = NSFocusRingPlacement;

export enum NSFocusRingType {
  Default = 0,
  None = 1,
  Exterior = 2
}

global['NSFocusRingType'] = NSFocusRingType;

export enum NSFontAction {
  NoFontChangeAction = 0,
  ViaPanelFontAction = 1,
  AddTraitFontAction = 2,
  SizeUpFontAction = 3,
  SizeDownFontAction = 4,
  HeavierFontAction = 5,
  LighterFontAction = 6,
  RemoveTraitFontAction = 7
}

global['NSFontAction'] = NSFontAction;

export enum NSFontCollectionOptions {
  ApplicationOnlyMask = 1
}

global['NSFontCollectionOptions'] = NSFontCollectionOptions;

export enum NSFontRenderingMode {
  DefaultRenderingMode = 0,
  AntialiasedRenderingMode = 1,
  IntegerAdvancementsRenderingMode = 2,
  AntialiasedIntegerAdvancementsRenderingMode = 3
}

global['NSFontRenderingMode'] = NSFontRenderingMode;

export enum NSFontTraitMask {
  ItalicFontMask = 1,
  BoldFontMask = 2,
  UnboldFontMask = 4,
  NonStandardCharacterSetFontMask = 8,
  NarrowFontMask = 16,
  ExpandedFontMask = 32,
  CondensedFontMask = 64,
  SmallCapsFontMask = 128,
  PosterFontMask = 256,
  CompressedFontMask = 512,
  FixedPitchFontMask = 1024,
  UnitalicFontMask = 16777216
}

global['NSFontTraitMask'] = NSFontTraitMask;

export enum NSImageAlignment {
  Center = 0,
  Top = 1,
  TopLeft = 2,
  TopRight = 3,
  Left = 4,
  Bottom = 5,
  BottomLeft = 6,
  BottomRight = 7,
  Right = 8
}

global['NSImageAlignment'] = NSImageAlignment;

export enum NSImageInterpolation {
  Default = 0,
  None = 1,
  Low = 2,
  Medium = 4,
  High = 3
}

global['NSImageInterpolation'] = NSImageInterpolation;

export enum NSImageScaling {
  ImageScaleProportionallyDown = 0,
  ImageScaleAxesIndependently = 1,
  ImageScaleNone = 2,
  ImageScaleProportionallyUpOrDown = 3,
  ScaleProportionally = 0,
  ScaleToFit = 1,
  ScaleNone = 2
}

global['NSImageScaling'] = NSImageScaling;

export enum NSLineBreakMode {
  ByWordWrapping = 0,
  ByCharWrapping = 1,
  ByClipping = 2,
  ByTruncatingHead = 3,
  ByTruncatingTail = 4,
  ByTruncatingMiddle = 5
}

global['NSLineBreakMode'] = NSLineBreakMode;

export enum NSLineMovementDirection {
  DoesntMove = 0,
  MovesLeft = 1,
  MovesRight = 2,
  MovesDown = 3,
  MovesUp = 4
}

global['NSLineMovementDirection'] = NSLineMovementDirection;

export enum NSLineSweepDirection {
  Left = 0,
  Right = 1,
  Down = 2,
  Up = 3
}

global['NSLineSweepDirection'] = NSLineSweepDirection;

export enum NSRectAlignment {
  None = 0,
  Top = 1,
  TopLeading = 2,
  Leading = 3,
  BottomLeading = 4,
  Bottom = 5,
  BottomTrailing = 6,
  Trailing = 7,
  TopTrailing = 8
}

global['NSRectAlignment'] = NSRectAlignment;

export enum NSSelectionAffinity {
  Upstream = 0,
  Downstream = 1
}

global['NSSelectionAffinity'] = NSSelectionAffinity;

export enum NSSelectionGranularity {
  ByCharacter = 0,
  ByWord = 1,
  ByParagraph = 2
}

global['NSSelectionGranularity'] = NSSelectionGranularity;

export enum NSSpringLoadingHighlight {
  None = 0,
  Standard = 1,
  Emphasized = 2
}

global['NSSpringLoadingHighlight'] = NSSpringLoadingHighlight;

export enum NSSpringLoadingOptions {
  Disabled = 0,
  Enabled = 1,
  ContinuousActivation = 2,
  NoHover = 8
}

global['NSSpringLoadingOptions'] = NSSpringLoadingOptions;

export enum NSTextAlignment {
  Left = 0,
  Right = 1,
  Center = 2,
  Justified = 3,
  Natural = 4
}

global['NSTextAlignment'] = NSTextAlignment;

export enum NSTextInputTraitType {
  Default = 0,
  No = 1,
  Yes = 2
}

global['NSTextInputTraitType'] = NSTextInputTraitType;

export enum NSTextMovement {
  Return = 16,
  Tab = 17,
  Backtab = 18,
  Left = 19,
  Right = 20,
  Up = 21,
  Down = 22,
  Cancel = 23,
  Other = 0
}

global['NSTextMovement'] = NSTextMovement;

export enum NSTextScalingType {
  Standard = 0,
  iOS = 1
}

global['NSTextScalingType'] = NSTextScalingType;

export enum NSTextStorageEditActions {
  EditedAttributes = 1,
  EditedCharacters = 2
}

global['NSTextStorageEditActions'] = NSTextStorageEditActions;

export enum NSTypesetterControlCharacterAction {
  ZeroAdvancementAction = 1,
  WhitespaceAction = 2,
  HorizontalTabAction = 4,
  LineBreakAction = 8,
  ParagraphBreakAction = 16,
  ContainerBreakAction = 32
}

global['NSTypesetterControlCharacterAction'] = NSTypesetterControlCharacterAction;

export enum NSUnderlineStyle {
  None = 0,
  Single = 1,
  Thick = 2,
  Double = 9,
  PatternSolid = 0,
  PatternDot = 256,
  PatternDash = 512,
  PatternDashDot = 768,
  PatternDashDotDot = 1024,
  ByWord = 32768
}

global['NSUnderlineStyle'] = NSUnderlineStyle;

export enum NSUserInterfaceLayoutDirection {
  LeftToRight = 0,
  RightToLeft = 1
}

global['NSUserInterfaceLayoutDirection'] = NSUserInterfaceLayoutDirection;

export enum NSUserInterfaceLayoutOrientation {
  Horizontal = 0,
  Vertical = 1
}

global['NSUserInterfaceLayoutOrientation'] = NSUserInterfaceLayoutOrientation;

export enum NSWritingDirection {
  Natural = -1,
  LeftToRight = 0,
  RightToLeft = 1
}

global['NSWritingDirection'] = NSWritingDirection;

export enum NSWritingDirectionFormatType {
  Embedding = 0,
  Override = 2
}

global['NSWritingDirectionFormatType'] = NSWritingDirectionFormatType;

export enum NSAttributeType {
  UndefinedAttributeType = 0,
  Integer16AttributeType = 100,
  Integer32AttributeType = 200,
  Integer64AttributeType = 300,
  DecimalAttributeType = 400,
  DoubleAttributeType = 500,
  FloatAttributeType = 600,
  StringAttributeType = 700,
  BooleanAttributeType = 800,
  DateAttributeType = 900,
  BinaryDataAttributeType = 1000,
  UUIDAttributeType = 1100,
  URIAttributeType = 1200,
  TransformableAttributeType = 1800,
  ObjectIDAttributeType = 2000
}

global['NSAttributeType'] = NSAttributeType;

export enum NSBatchDeleteRequestResultType {
  ResultTypeStatusOnly = 0,
  ResultTypeObjectIDs = 1,
  ResultTypeCount = 2
}

global['NSBatchDeleteRequestResultType'] = NSBatchDeleteRequestResultType;

export enum NSBatchInsertRequestResultType {
  StatusOnly = 0,
  ObjectIDs = 1,
  Count = 2
}

global['NSBatchInsertRequestResultType'] = NSBatchInsertRequestResultType;

export enum NSBatchUpdateRequestResultType {
  StatusOnlyResultType = 0,
  UpdatedObjectIDsResultType = 1,
  UpdatedObjectsCountResultType = 2
}

global['NSBatchUpdateRequestResultType'] = NSBatchUpdateRequestResultType;

export enum NSDeleteRule {
  NoActionDeleteRule = 0,
  NullifyDeleteRule = 1,
  CascadeDeleteRule = 2,
  DenyDeleteRule = 3
}

global['NSDeleteRule'] = NSDeleteRule;

export enum NSEntityMappingType {
  UndefinedEntityMappingType = 0,
  CustomEntityMappingType = 1,
  AddEntityMappingType = 2,
  RemoveEntityMappingType = 3,
  CopyEntityMappingType = 4,
  TransformEntityMappingType = 5
}

global['NSEntityMappingType'] = NSEntityMappingType;

export enum NSFetchIndexElementType {
  Binary = 0,
  RTree = 1
}

global['NSFetchIndexElementType'] = NSFetchIndexElementType;

export enum NSFetchRequestResultType {
  ManagedObjectResultType = 0,
  ManagedObjectIDResultType = 1,
  DictionaryResultType = 2,
  CountResultType = 4
}

global['NSFetchRequestResultType'] = NSFetchRequestResultType;

export enum NSFetchedResultsChangeType {
  Insert = 1,
  Delete = 2,
  Move = 3,
  Update = 4
}

global['NSFetchedResultsChangeType'] = NSFetchedResultsChangeType;

export enum NSManagedObjectContextConcurrencyType {
  ConfinementConcurrencyType = 0,
  PrivateQueueConcurrencyType = 1,
  MainQueueConcurrencyType = 2
}

global['NSManagedObjectContextConcurrencyType'] = NSManagedObjectContextConcurrencyType;

export enum NSMergePolicyType {
  ErrorMergePolicyType = 0,
  MergeByPropertyStoreTrumpMergePolicyType = 1,
  MergeByPropertyObjectTrumpMergePolicyType = 2,
  OverwriteMergePolicyType = 3,
  RollbackMergePolicyType = 4
}

global['NSMergePolicyType'] = NSMergePolicyType;

export enum NSPersistentCloudKitContainerSchemaInitializationOptions {
  None = 0,
  DryRun = 2,
  PrintSchema = 4
}

global['NSPersistentCloudKitContainerSchemaInitializationOptions'] = NSPersistentCloudKitContainerSchemaInitializationOptions;

export enum NSPersistentHistoryChangeType {
  Insert = 0,
  Update = 1,
  Delete = 2
}

global['NSPersistentHistoryChangeType'] = NSPersistentHistoryChangeType;

export enum NSPersistentHistoryResultType {
  StatusOnly = 0,
  ObjectIDs = 1,
  Count = 2,
  TransactionsOnly = 3,
  ChangesOnly = 4,
  TransactionsAndChanges = 5
}

global['NSPersistentHistoryResultType'] = NSPersistentHistoryResultType;

export enum NSPersistentStoreRequestType {
  FetchRequestType = 1,
  SaveRequestType = 2,
  BatchInsertRequestType = 5,
  BatchUpdateRequestType = 6,
  BatchDeleteRequestType = 7
}

global['NSPersistentStoreRequestType'] = NSPersistentStoreRequestType;

export enum NSSnapshotEventType {
  UndoInsertion = 2,
  UndoDeletion = 4,
  UndoUpdate = 8,
  Rollback = 16,
  Refresh = 32,
  MergePolicy = 64
}

global['NSSnapshotEventType'] = NSSnapshotEventType;

export enum CFCalendarUnit {
  kCFCalendarUnitEra = 2,
  kCFCalendarUnitYear = 4,
  kCFCalendarUnitMonth = 8,
  kCFCalendarUnitDay = 16,
  kCFCalendarUnitHour = 32,
  kCFCalendarUnitMinute = 64,
  kCFCalendarUnitSecond = 128,
  kCFCalendarUnitWeek = 256,
  kCFCalendarUnitWeekday = 512,
  kCFCalendarUnitWeekdayOrdinal = 1024,
  kCFCalendarUnitQuarter = 2048,
  kCFCalendarUnitWeekOfMonth = 4096,
  kCFCalendarUnitWeekOfYear = 8192,
  kCFCalendarUnitYearForWeekOfYear = 16384
}

global['CFCalendarUnit'] = CFCalendarUnit;

export enum CFCharacterSetPredefinedSet {
  kCFCharacterSetControl = 1,
  kCFCharacterSetWhitespace = 2,
  kCFCharacterSetWhitespaceAndNewline = 3,
  kCFCharacterSetDecimalDigit = 4,
  kCFCharacterSetLetter = 5,
  kCFCharacterSetLowercaseLetter = 6,
  kCFCharacterSetUppercaseLetter = 7,
  kCFCharacterSetNonBase = 8,
  kCFCharacterSetDecomposable = 9,
  kCFCharacterSetAlphaNumeric = 10,
  kCFCharacterSetPunctuation = 11,
  kCFCharacterSetCapitalizedLetter = 13,
  kCFCharacterSetSymbol = 14,
  kCFCharacterSetNewline = 15,
  kCFCharacterSetIllegal = 12
}

global['CFCharacterSetPredefinedSet'] = CFCharacterSetPredefinedSet;

export enum CFComparisonResult {
  kCFCompareLessThan = -1,
  kCFCompareEqualTo = 0,
  kCFCompareGreaterThan = 1
}

global['CFComparisonResult'] = CFComparisonResult;

export enum CFDataSearchFlags {
  kCFDataSearchBackwards = 1,
  kCFDataSearchAnchored = 2
}

global['CFDataSearchFlags'] = CFDataSearchFlags;

export enum CFDateFormatterStyle {
  kCFDateFormatterNoStyle = 0,
  kCFDateFormatterShortStyle = 1,
  kCFDateFormatterMediumStyle = 2,
  kCFDateFormatterLongStyle = 3,
  kCFDateFormatterFullStyle = 4
}

global['CFDateFormatterStyle'] = CFDateFormatterStyle;

export enum CFFileSecurityClearOptions {
  kCFFileSecurityClearOwner = 1,
  kCFFileSecurityClearGroup = 2,
  kCFFileSecurityClearMode = 4,
  kCFFileSecurityClearOwnerUUID = 8,
  kCFFileSecurityClearGroupUUID = 16,
  kCFFileSecurityClearAccessControlList = 32
}

global['CFFileSecurityClearOptions'] = CFFileSecurityClearOptions;

export enum CFGregorianUnitFlags {
  kCFGregorianUnitsYears = 1,
  kCFGregorianUnitsMonths = 2,
  kCFGregorianUnitsDays = 4,
  kCFGregorianUnitsHours = 8,
  kCFGregorianUnitsMinutes = 16,
  kCFGregorianUnitsSeconds = 32,
  kCFGregorianAllUnits = 16777215
}

global['CFGregorianUnitFlags'] = CFGregorianUnitFlags;

export enum CFISO8601DateFormatOptions {
  kCFISO8601DateFormatWithYear = 1,
  kCFISO8601DateFormatWithMonth = 2,
  kCFISO8601DateFormatWithWeekOfYear = 4,
  kCFISO8601DateFormatWithDay = 16,
  kCFISO8601DateFormatWithTime = 32,
  kCFISO8601DateFormatWithTimeZone = 64,
  kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128,
  kCFISO8601DateFormatWithDashSeparatorInDate = 256,
  kCFISO8601DateFormatWithColonSeparatorInTime = 512,
  kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024,
  kCFISO8601DateFormatWithFractionalSeconds = 2048,
  kCFISO8601DateFormatWithFullDate = 275,
  kCFISO8601DateFormatWithFullTime = 1632,
  kCFISO8601DateFormatWithInternetDateTime = 1907
}

global['CFISO8601DateFormatOptions'] = CFISO8601DateFormatOptions;

export enum CFLocaleLanguageDirection {
  kCFLocaleLanguageDirectionUnknown = 0,
  kCFLocaleLanguageDirectionLeftToRight = 1,
  kCFLocaleLanguageDirectionRightToLeft = 2,
  kCFLocaleLanguageDirectionTopToBottom = 3,
  kCFLocaleLanguageDirectionBottomToTop = 4
}

global['CFLocaleLanguageDirection'] = CFLocaleLanguageDirection;

export enum CFNotificationSuspensionBehavior {
  Drop = 1,
  Coalesce = 2,
  Hold = 3,
  DeliverImmediately = 4
}

global['CFNotificationSuspensionBehavior'] = CFNotificationSuspensionBehavior;

export enum CFNumberFormatterOptionFlags {
  kCFNumberFormatterParseIntegersOnly = 1
}

global['CFNumberFormatterOptionFlags'] = CFNumberFormatterOptionFlags;

export enum CFNumberFormatterPadPosition {
  kCFNumberFormatterPadBeforePrefix = 0,
  kCFNumberFormatterPadAfterPrefix = 1,
  kCFNumberFormatterPadBeforeSuffix = 2,
  kCFNumberFormatterPadAfterSuffix = 3
}

global['CFNumberFormatterPadPosition'] = CFNumberFormatterPadPosition;

export enum CFNumberFormatterRoundingMode {
  kCFNumberFormatterRoundCeiling = 0,
  kCFNumberFormatterRoundFloor = 1,
  kCFNumberFormatterRoundDown = 2,
  kCFNumberFormatterRoundUp = 3,
  kCFNumberFormatterRoundHalfEven = 4,
  kCFNumberFormatterRoundHalfDown = 5,
  kCFNumberFormatterRoundHalfUp = 6
}

global['CFNumberFormatterRoundingMode'] = CFNumberFormatterRoundingMode;

export enum CFNumberFormatterStyle {
  kCFNumberFormatterNoStyle = 0,
  kCFNumberFormatterDecimalStyle = 1,
  kCFNumberFormatterCurrencyStyle = 2,
  kCFNumberFormatterPercentStyle = 3,
  kCFNumberFormatterScientificStyle = 4,
  kCFNumberFormatterSpellOutStyle = 5,
  kCFNumberFormatterOrdinalStyle = 6,
  kCFNumberFormatterCurrencyISOCodeStyle = 8,
  kCFNumberFormatterCurrencyPluralStyle = 9,
  kCFNumberFormatterCurrencyAccountingStyle = 10
}

global['CFNumberFormatterStyle'] = CFNumberFormatterStyle;

export enum CFNumberType {
  kCFNumberSInt8Type = 1,
  kCFNumberSInt16Type = 2,
  kCFNumberSInt32Type = 3,
  kCFNumberSInt64Type = 4,
  kCFNumberFloat32Type = 5,
  kCFNumberFloat64Type = 6,
  kCFNumberCharType = 7,
  kCFNumberShortType = 8,
  kCFNumberIntType = 9,
  kCFNumberLongType = 10,
  kCFNumberLongLongType = 11,
  kCFNumberFloatType = 12,
  kCFNumberDoubleType = 13,
  kCFNumberCFIndexType = 14,
  kCFNumberNSIntegerType = 15,
  kCFNumberCGFloatType = 16,
  kCFNumberMaxType = 16
}

global['CFNumberType'] = CFNumberType;

export enum CFPropertyListFormat {
  kCFPropertyListOpenStepFormat = 1,
  kCFPropertyListXMLFormat_v1_0 = 100,
  kCFPropertyListBinaryFormat_v1_0 = 200
}

global['CFPropertyListFormat'] = CFPropertyListFormat;

export enum CFPropertyListMutabilityOptions {
  kCFPropertyListImmutable = 0,
  kCFPropertyListMutableContainers = 1,
  kCFPropertyListMutableContainersAndLeaves = 2
}

global['CFPropertyListMutabilityOptions'] = CFPropertyListMutabilityOptions;

export enum CFRunLoopActivity {
  kCFRunLoopEntry = 1,
  kCFRunLoopBeforeTimers = 2,
  kCFRunLoopBeforeSources = 4,
  kCFRunLoopBeforeWaiting = 32,
  kCFRunLoopAfterWaiting = 64,
  kCFRunLoopExit = 128,
  kCFRunLoopAllActivities = 268435455
}

global['CFRunLoopActivity'] = CFRunLoopActivity;

export enum CFRunLoopRunResult {
  kCFRunLoopRunFinished = 1,
  kCFRunLoopRunStopped = 2,
  kCFRunLoopRunTimedOut = 3,
  kCFRunLoopRunHandledSource = 4
}

global['CFRunLoopRunResult'] = CFRunLoopRunResult;

export enum CFSocketCallBackType {
  kCFSocketNoCallBack = 0,
  kCFSocketReadCallBack = 1,
  kCFSocketAcceptCallBack = 2,
  kCFSocketDataCallBack = 3,
  kCFSocketConnectCallBack = 4,
  kCFSocketWriteCallBack = 8
}

global['CFSocketCallBackType'] = CFSocketCallBackType;

export enum CFSocketError {
  kCFSocketSuccess = 0,
  kCFSocketError = -1,
  kCFSocketTimeout = -2
}

global['CFSocketError'] = CFSocketError;

export enum CFStreamErrorDomain {
  kCFStreamErrorDomainCustom = -1,
  kCFStreamErrorDomainPOSIX = 1,
  kCFStreamErrorDomainMacOSStatus = 2
}

global['CFStreamErrorDomain'] = CFStreamErrorDomain;

export enum CFStreamEventType {
  kCFStreamEventNone = 0,
  kCFStreamEventOpenCompleted = 1,
  kCFStreamEventHasBytesAvailable = 2,
  kCFStreamEventCanAcceptBytes = 4,
  kCFStreamEventErrorOccurred = 8,
  kCFStreamEventEndEncountered = 16
}

global['CFStreamEventType'] = CFStreamEventType;

export enum CFStreamStatus {
  kCFStreamStatusNotOpen = 0,
  kCFStreamStatusOpening = 1,
  kCFStreamStatusOpen = 2,
  kCFStreamStatusReading = 3,
  kCFStreamStatusWriting = 4,
  kCFStreamStatusAtEnd = 5,
  kCFStreamStatusClosed = 6,
  kCFStreamStatusError = 7
}

global['CFStreamStatus'] = CFStreamStatus;

export enum CFStringBuiltInEncodings {
  kCFStringEncodingMacRoman = 0,
  kCFStringEncodingWindowsLatin1 = 1280,
  kCFStringEncodingISOLatin1 = 513,
  kCFStringEncodingNextStepLatin = 2817,
  kCFStringEncodingASCII = 1536,
  kCFStringEncodingUnicode = 256,
  kCFStringEncodingUTF8 = 134217984,
  kCFStringEncodingNonLossyASCII = 3071,
  kCFStringEncodingUTF16 = 256,
  kCFStringEncodingUTF16BE = 268435712,
  kCFStringEncodingUTF16LE = 335544576,
  kCFStringEncodingUTF32 = 201326848,
  kCFStringEncodingUTF32BE = 402653440,
  kCFStringEncodingUTF32LE = 469762304
}

global['CFStringBuiltInEncodings'] = CFStringBuiltInEncodings;

export enum CFStringCompareFlags {
  kCFCompareCaseInsensitive = 1,
  kCFCompareBackwards = 4,
  kCFCompareAnchored = 8,
  kCFCompareNonliteral = 16,
  kCFCompareLocalized = 32,
  kCFCompareNumerically = 64,
  kCFCompareDiacriticInsensitive = 128,
  kCFCompareWidthInsensitive = 256,
  kCFCompareForcedOrdering = 512
}

global['CFStringCompareFlags'] = CFStringCompareFlags;

export enum CFStringEncodings {
  kCFStringEncodingMacJapanese = 1,
  kCFStringEncodingMacChineseTrad = 2,
  kCFStringEncodingMacKorean = 3,
  kCFStringEncodingMacArabic = 4,
  kCFStringEncodingMacHebrew = 5,
  kCFStringEncodingMacGreek = 6,
  kCFStringEncodingMacCyrillic = 7,
  kCFStringEncodingMacDevanagari = 9,
  kCFStringEncodingMacGurmukhi = 10,
  kCFStringEncodingMacGujarati = 11,
  kCFStringEncodingMacOriya = 12,
  kCFStringEncodingMacBengali = 13,
  kCFStringEncodingMacTamil = 14,
  kCFStringEncodingMacTelugu = 15,
  kCFStringEncodingMacKannada = 16,
  kCFStringEncodingMacMalayalam = 17,
  kCFStringEncodingMacSinhalese = 18,
  kCFStringEncodingMacBurmese = 19,
  kCFStringEncodingMacKhmer = 20,
  kCFStringEncodingMacThai = 21,
  kCFStringEncodingMacLaotian = 22,
  kCFStringEncodingMacGeorgian = 23,
  kCFStringEncodingMacArmenian = 24,
  kCFStringEncodingMacChineseSimp = 25,
  kCFStringEncodingMacTibetan = 26,
  kCFStringEncodingMacMongolian = 27,
  kCFStringEncodingMacEthiopic = 28,
  kCFStringEncodingMacCentralEurRoman = 29,
  kCFStringEncodingMacVietnamese = 30,
  kCFStringEncodingMacExtArabic = 31,
  kCFStringEncodingMacSymbol = 33,
  kCFStringEncodingMacDingbats = 34,
  kCFStringEncodingMacTurkish = 35,
  kCFStringEncodingMacCroatian = 36,
  kCFStringEncodingMacIcelandic = 37,
  kCFStringEncodingMacRomanian = 38,
  kCFStringEncodingMacCeltic = 39,
  kCFStringEncodingMacGaelic = 40,
  kCFStringEncodingMacFarsi = 140,
  kCFStringEncodingMacUkrainian = 152,
  kCFStringEncodingMacInuit = 236,
  kCFStringEncodingMacVT100 = 252,
  kCFStringEncodingMacHFS = 255,
  kCFStringEncodingISOLatin2 = 514,
  kCFStringEncodingISOLatin3 = 515,
  kCFStringEncodingISOLatin4 = 516,
  kCFStringEncodingISOLatinCyrillic = 517,
  kCFStringEncodingISOLatinArabic = 518,
  kCFStringEncodingISOLatinGreek = 519,
  kCFStringEncodingISOLatinHebrew = 520,
  kCFStringEncodingISOLatin5 = 521,
  kCFStringEncodingISOLatin6 = 522,
  kCFStringEncodingISOLatinThai = 523,
  kCFStringEncodingISOLatin7 = 525,
  kCFStringEncodingISOLatin8 = 526,
  kCFStringEncodingISOLatin9 = 527,
  kCFStringEncodingISOLatin10 = 528,
  kCFStringEncodingDOSLatinUS = 1024,
  kCFStringEncodingDOSGreek = 1029,
  kCFStringEncodingDOSBalticRim = 1030,
  kCFStringEncodingDOSLatin1 = 1040,
  kCFStringEncodingDOSGreek1 = 1041,
  kCFStringEncodingDOSLatin2 = 1042,
  kCFStringEncodingDOSCyrillic = 1043,
  kCFStringEncodingDOSTurkish = 1044,
  kCFStringEncodingDOSPortuguese = 1045,
  kCFStringEncodingDOSIcelandic = 1046,
  kCFStringEncodingDOSHebrew = 1047,
  kCFStringEncodingDOSCanadianFrench = 1048,
  kCFStringEncodingDOSArabic = 1049,
  kCFStringEncodingDOSNordic = 1050,
  kCFStringEncodingDOSRussian = 1051,
  kCFStringEncodingDOSGreek2 = 1052,
  kCFStringEncodingDOSThai = 1053,
  kCFStringEncodingDOSJapanese = 1056,
  kCFStringEncodingDOSChineseSimplif = 1057,
  kCFStringEncodingDOSKorean = 1058,
  kCFStringEncodingDOSChineseTrad = 1059,
  kCFStringEncodingWindowsLatin2 = 1281,
  kCFStringEncodingWindowsCyrillic = 1282,
  kCFStringEncodingWindowsGreek = 1283,
  kCFStringEncodingWindowsLatin5 = 1284,
  kCFStringEncodingWindowsHebrew = 1285,
  kCFStringEncodingWindowsArabic = 1286,
  kCFStringEncodingWindowsBalticRim = 1287,
  kCFStringEncodingWindowsVietnamese = 1288,
  kCFStringEncodingWindowsKoreanJohab = 1296,
  kCFStringEncodingANSEL = 1537,
  kCFStringEncodingJIS_X0201_76 = 1568,
  kCFStringEncodingJIS_X0208_83 = 1569,
  kCFStringEncodingJIS_X0208_90 = 1570,
  kCFStringEncodingJIS_X0212_90 = 1571,
  kCFStringEncodingJIS_C6226_78 = 1572,
  kCFStringEncodingShiftJIS_X0213 = 1576,
  kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577,
  kCFStringEncodingGB_2312_80 = 1584,
  kCFStringEncodingGBK_95 = 1585,
  kCFStringEncodingGB_18030_2000 = 1586,
  kCFStringEncodingKSC_5601_87 = 1600,
  kCFStringEncodingKSC_5601_92_Johab = 1601,
  kCFStringEncodingCNS_11643_92_P1 = 1617,
  kCFStringEncodingCNS_11643_92_P2 = 1618,
  kCFStringEncodingCNS_11643_92_P3 = 1619,
  kCFStringEncodingISO_2022_JP = 2080,
  kCFStringEncodingISO_2022_JP_2 = 2081,
  kCFStringEncodingISO_2022_JP_1 = 2082,
  kCFStringEncodingISO_2022_JP_3 = 2083,
  kCFStringEncodingISO_2022_CN = 2096,
  kCFStringEncodingISO_2022_CN_EXT = 2097,
  kCFStringEncodingISO_2022_KR = 2112,
  kCFStringEncodingEUC_JP = 2336,
  kCFStringEncodingEUC_CN = 2352,
  kCFStringEncodingEUC_TW = 2353,
  kCFStringEncodingEUC_KR = 2368,
  kCFStringEncodingShiftJIS = 2561,
  kCFStringEncodingKOI8_R = 2562,
  kCFStringEncodingBig5 = 2563,
  kCFStringEncodingMacRomanLatin1 = 2564,
  kCFStringEncodingHZ_GB_2312 = 2565,
  kCFStringEncodingBig5_HKSCS_1999 = 2566,
  kCFStringEncodingVISCII = 2567,
  kCFStringEncodingKOI8_U = 2568,
  kCFStringEncodingBig5_E = 2569,
  kCFStringEncodingNextStepJapanese = 2818,
  kCFStringEncodingEBCDIC_US = 3073,
  kCFStringEncodingEBCDIC_CP037 = 3074,
  kCFStringEncodingUTF7 = 67109120,
  kCFStringEncodingUTF7_IMAP = 2576,
  kCFStringEncodingShiftJIS_X0213_00 = 1576
}

global['CFStringEncodings'] = CFStringEncodings;

export enum CFStringNormalizationForm {
  kCFStringNormalizationFormD = 0,
  kCFStringNormalizationFormKD = 1,
  kCFStringNormalizationFormC = 2,
  kCFStringNormalizationFormKC = 3
}

global['CFStringNormalizationForm'] = CFStringNormalizationForm;

export enum CFStringTokenizerTokenType {
  kCFStringTokenizerTokenNone = 0,
  kCFStringTokenizerTokenNormal = 1,
  kCFStringTokenizerTokenHasSubTokensMask = 2,
  kCFStringTokenizerTokenHasDerivedSubTokensMask = 4,
  kCFStringTokenizerTokenHasHasNumbersMask = 8,
  kCFStringTokenizerTokenHasNonLettersMask = 16,
  kCFStringTokenizerTokenIsCJWordMask = 32
}

global['CFStringTokenizerTokenType'] = CFStringTokenizerTokenType;

export enum CFTimeZoneNameStyle {
  kCFTimeZoneNameStyleStandard = 0,
  kCFTimeZoneNameStyleShortStandard = 1,
  kCFTimeZoneNameStyleDaylightSaving = 2,
  kCFTimeZoneNameStyleShortDaylightSaving = 3,
  kCFTimeZoneNameStyleGeneric = 4,
  kCFTimeZoneNameStyleShortGeneric = 5
}

global['CFTimeZoneNameStyle'] = CFTimeZoneNameStyle;

export enum CFURLBookmarkCreationOptions {
  kCFURLBookmarkCreationMinimalBookmarkMask = 512,
  kCFURLBookmarkCreationSuitableForBookmarkFile = 1024,
  kCFURLBookmarkCreationWithSecurityScope = 2048,
  kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096,
  kCFURLBookmarkCreationPreferFileIDResolutionMask = 256
}

global['CFURLBookmarkCreationOptions'] = CFURLBookmarkCreationOptions;

export enum CFURLBookmarkResolutionOptions {
  kCFURLBookmarkResolutionWithoutUIMask = 256,
  kCFURLBookmarkResolutionWithoutMountingMask = 512,
  kCFURLBookmarkResolutionWithSecurityScope = 1024,
  kCFBookmarkResolutionWithoutUIMask = 256,
  kCFBookmarkResolutionWithoutMountingMask = 512
}

global['CFURLBookmarkResolutionOptions'] = CFURLBookmarkResolutionOptions;

export enum CFURLComponentType {
  kCFURLComponentScheme = 1,
  kCFURLComponentNetLocation = 2,
  kCFURLComponentPath = 3,
  kCFURLComponentResourceSpecifier = 4,
  kCFURLComponentUser = 5,
  kCFURLComponentPassword = 6,
  kCFURLComponentUserInfo = 7,
  kCFURLComponentHost = 8,
  kCFURLComponentPort = 9,
  kCFURLComponentParameterString = 10,
  kCFURLComponentQuery = 11,
  kCFURLComponentFragment = 12
}

global['CFURLComponentType'] = CFURLComponentType;

export enum CFURLEnumeratorOptions {
  kCFURLEnumeratorDefaultBehavior = 0,
  kCFURLEnumeratorDescendRecursively = 1,
  kCFURLEnumeratorSkipInvisibles = 2,
  kCFURLEnumeratorGenerateFileReferenceURLs = 4,
  kCFURLEnumeratorSkipPackageContents = 8,
  kCFURLEnumeratorIncludeDirectoriesPreOrder = 16,
  kCFURLEnumeratorIncludeDirectoriesPostOrder = 32,
  kCFURLEnumeratorGenerateRelativePathURLs = 64
}

global['CFURLEnumeratorOptions'] = CFURLEnumeratorOptions;

export enum CFURLEnumeratorResult {
  kCFURLEnumeratorSuccess = 1,
  kCFURLEnumeratorEnd = 2,
  kCFURLEnumeratorError = 3,
  kCFURLEnumeratorDirectoryPostOrderSuccess = 4
}

global['CFURLEnumeratorResult'] = CFURLEnumeratorResult;

export enum CFURLPathStyle {
  kCFURLPOSIXPathStyle = 0,
  kCFURLHFSPathStyle = 1,
  kCFURLWindowsPathStyle = 2
}

global['CFURLPathStyle'] = CFURLPathStyle;

export enum CFXMLEntityTypeCode {
  kCFXMLEntityTypeParameter = 0,
  kCFXMLEntityTypeParsedInternal = 1,
  kCFXMLEntityTypeParsedExternal = 2,
  kCFXMLEntityTypeUnparsed = 3,
  kCFXMLEntityTypeCharacter = 4
}

global['CFXMLEntityTypeCode'] = CFXMLEntityTypeCode;

export enum CFXMLNodeTypeCode {
  kCFXMLNodeTypeDocument = 1,
  kCFXMLNodeTypeElement = 2,
  kCFXMLNodeTypeAttribute = 3,
  kCFXMLNodeTypeProcessingInstruction = 4,
  kCFXMLNodeTypeComment = 5,
  kCFXMLNodeTypeText = 6,
  kCFXMLNodeTypeCDATASection = 7,
  kCFXMLNodeTypeDocumentFragment = 8,
  kCFXMLNodeTypeEntity = 9,
  kCFXMLNodeTypeEntityReference = 10,
  kCFXMLNodeTypeDocumentType = 11,
  kCFXMLNodeTypeWhitespace = 12,
  kCFXMLNodeTypeNotation = 13,
  kCFXMLNodeTypeElementTypeDeclaration = 14,
  kCFXMLNodeTypeAttributeListDeclaration = 15
}

global['CFXMLNodeTypeCode'] = CFXMLNodeTypeCode;

export enum CFXMLParserOptions {
  kCFXMLParserValidateDocument = 1,
  kCFXMLParserSkipMetaData = 2,
  kCFXMLParserReplacePhysicalEntities = 4,
  kCFXMLParserSkipWhitespace = 8,
  kCFXMLParserResolveExternalEntities = 16,
  kCFXMLParserAddImpliedAttributes = 32,
  kCFXMLParserAllOptions = 16777215,
  kCFXMLParserNoOptions = 0
}

global['CFXMLParserOptions'] = CFXMLParserOptions;

export enum CFXMLParserStatusCode {
  kCFXMLStatusParseNotBegun = -2,
  kCFXMLStatusParseInProgress = -1,
  kCFXMLStatusParseSuccessful = 0,
  kCFXMLErrorUnexpectedEOF = 1,
  kCFXMLErrorUnknownEncoding = 2,
  kCFXMLErrorEncodingConversionFailure = 3,
  kCFXMLErrorMalformedProcessingInstruction = 4,
  kCFXMLErrorMalformedDTD = 5,
  kCFXMLErrorMalformedName = 6,
  kCFXMLErrorMalformedCDSect = 7,
  kCFXMLErrorMalformedCloseTag = 8,
  kCFXMLErrorMalformedStartTag = 9,
  kCFXMLErrorMalformedDocument = 10,
  kCFXMLErrorElementlessDocument = 11,
  kCFXMLErrorMalformedComment = 12,
  kCFXMLErrorMalformedCharacterReference = 13,
  kCFXMLErrorMalformedParsedCharacterData = 14,
  kCFXMLErrorNoData = 15
}

global['CFXMLParserStatusCode'] = CFXMLParserStatusCode;

export enum __CFByteOrder {
  CFByteOrderUnknown = 0,
  CFByteOrderLittleEndian = 1,
  CFByteOrderBigEndian = 2
}

global['__CFByteOrder'] = __CFByteOrder;

export enum CGBitmapInfo {
  kCGBitmapAlphaInfoMask = 31,
  kCGBitmapFloatInfoMask = 3840,
  kCGBitmapFloatComponents = 256,
  kCGBitmapByteOrderMask = 28672,
  kCGBitmapByteOrderDefault = 0,
  kCGBitmapByteOrder16Little = 4096,
  kCGBitmapByteOrder32Little = 8192,
  kCGBitmapByteOrder16Big = 12288,
  kCGBitmapByteOrder32Big = 16384
}

global['CGBitmapInfo'] = CGBitmapInfo;

export enum CGBlendMode {
  kCGBlendModeNormal = 0,
  kCGBlendModeMultiply = 1,
  kCGBlendModeScreen = 2,
  kCGBlendModeOverlay = 3,
  kCGBlendModeDarken = 4,
  kCGBlendModeLighten = 5,
  kCGBlendModeColorDodge = 6,
  kCGBlendModeColorBurn = 7,
  kCGBlendModeSoftLight = 8,
  kCGBlendModeHardLight = 9,
  kCGBlendModeDifference = 10,
  kCGBlendModeExclusion = 11,
  kCGBlendModeHue = 12,
  kCGBlendModeSaturation = 13,
  kCGBlendModeColor = 14,
  kCGBlendModeLuminosity = 15,
  kCGBlendModeClear = 16,
  kCGBlendModeCopy = 17,
  kCGBlendModeSourceIn = 18,
  kCGBlendModeSourceOut = 19,
  kCGBlendModeSourceAtop = 20,
  kCGBlendModeDestinationOver = 21,
  kCGBlendModeDestinationIn = 22,
  kCGBlendModeDestinationOut = 23,
  kCGBlendModeDestinationAtop = 24,
  kCGBlendModeXOR = 25,
  kCGBlendModePlusDarker = 26,
  kCGBlendModePlusLighter = 27
}

global['CGBlendMode'] = CGBlendMode;

export enum CGCaptureOptions {
  kCGCaptureNoOptions = 0,
  kCGCaptureNoFill = 1
}

global['CGCaptureOptions'] = CGCaptureOptions;

export enum CGColorConversionInfoTransformType {
  kCGColorConversionTransformFromSpace = 0,
  kCGColorConversionTransformToSpace = 1,
  kCGColorConversionTransformApplySpace = 2
}

global['CGColorConversionInfoTransformType'] = CGColorConversionInfoTransformType;

export enum CGColorRenderingIntent {
  kCGRenderingIntentDefault = 0,
  kCGRenderingIntentAbsoluteColorimetric = 1,
  kCGRenderingIntentRelativeColorimetric = 2,
  kCGRenderingIntentPerceptual = 3,
  kCGRenderingIntentSaturation = 4
}

global['CGColorRenderingIntent'] = CGColorRenderingIntent;

export enum CGColorSpaceModel {
  kCGColorSpaceModelUnknown = -1,
  kCGColorSpaceModelMonochrome = 0,
  kCGColorSpaceModelRGB = 1,
  kCGColorSpaceModelCMYK = 2,
  kCGColorSpaceModelLab = 3,
  kCGColorSpaceModelDeviceN = 4,
  kCGColorSpaceModelIndexed = 5,
  kCGColorSpaceModelPattern = 6,
  kCGColorSpaceModelXYZ = 7
}

global['CGColorSpaceModel'] = CGColorSpaceModel;

export enum CGConfigureOption {
  kCGConfigureForAppOnly = 0,
  kCGConfigureForSession = 1,
  kCGConfigurePermanently = 2
}

global['CGConfigureOption'] = CGConfigureOption;

export enum CGDisplayChangeSummaryFlags {
  kCGDisplayBeginConfigurationFlag = 1,
  kCGDisplayMovedFlag = 2,
  kCGDisplaySetMainFlag = 4,
  kCGDisplaySetModeFlag = 8,
  kCGDisplayAddFlag = 16,
  kCGDisplayRemoveFlag = 32,
  kCGDisplayEnabledFlag = 256,
  kCGDisplayDisabledFlag = 512,
  kCGDisplayMirrorFlag = 1024,
  kCGDisplayUnMirrorFlag = 2048,
  kCGDisplayDesktopShapeChangedFlag = 4096
}

global['CGDisplayChangeSummaryFlags'] = CGDisplayChangeSummaryFlags;

export enum CGDisplayStreamFrameStatus {
  kCGDisplayStreamFrameStatusFrameComplete = 0,
  kCGDisplayStreamFrameStatusFrameIdle = 1,
  kCGDisplayStreamFrameStatusFrameBlank = 2,
  kCGDisplayStreamFrameStatusStopped = 3
}

global['CGDisplayStreamFrameStatus'] = CGDisplayStreamFrameStatus;

export enum CGDisplayStreamUpdateRectType {
  kCGDisplayStreamUpdateRefreshedRects = 0,
  kCGDisplayStreamUpdateMovedRects = 1,
  kCGDisplayStreamUpdateDirtyRects = 2,
  kCGDisplayStreamUpdateReducedDirtyRects = 3
}

global['CGDisplayStreamUpdateRectType'] = CGDisplayStreamUpdateRectType;

export enum CGError {
  kCGErrorSuccess = 0,
  kCGErrorFailure = 1000,
  kCGErrorIllegalArgument = 1001,
  kCGErrorInvalidConnection = 1002,
  kCGErrorInvalidContext = 1003,
  kCGErrorCannotComplete = 1004,
  kCGErrorNotImplemented = 1006,
  kCGErrorRangeCheck = 1007,
  kCGErrorTypeCheck = 1008,
  kCGErrorInvalidOperation = 1010,
  kCGErrorNoneAvailable = 1011
}

global['CGError'] = CGError;

export enum CGEventField {
  kCGMouseEventNumber = 0,
  kCGMouseEventClickState = 1,
  kCGMouseEventPressure = 2,
  kCGMouseEventButtonNumber = 3,
  kCGMouseEventDeltaX = 4,
  kCGMouseEventDeltaY = 5,
  kCGMouseEventInstantMouser = 6,
  kCGMouseEventSubtype = 7,
  kCGKeyboardEventAutorepeat = 8,
  kCGKeyboardEventKeycode = 9,
  kCGKeyboardEventKeyboardType = 10,
  kCGScrollWheelEventDeltaAxis1 = 11,
  kCGScrollWheelEventDeltaAxis2 = 12,
  kCGScrollWheelEventDeltaAxis3 = 13,
  kCGScrollWheelEventFixedPtDeltaAxis1 = 93,
  kCGScrollWheelEventFixedPtDeltaAxis2 = 94,
  kCGScrollWheelEventFixedPtDeltaAxis3 = 95,
  kCGScrollWheelEventPointDeltaAxis1 = 96,
  kCGScrollWheelEventPointDeltaAxis2 = 97,
  kCGScrollWheelEventPointDeltaAxis3 = 98,
  kCGScrollWheelEventScrollPhase = 99,
  kCGScrollWheelEventScrollCount = 100,
  kCGScrollWheelEventMomentumPhase = 123,
  kCGScrollWheelEventInstantMouser = 14,
  kCGTabletEventPointX = 15,
  kCGTabletEventPointY = 16,
  kCGTabletEventPointZ = 17,
  kCGTabletEventPointButtons = 18,
  kCGTabletEventPointPressure = 19,
  kCGTabletEventTiltX = 20,
  kCGTabletEventTiltY = 21,
  kCGTabletEventRotation = 22,
  kCGTabletEventTangentialPressure = 23,
  kCGTabletEventDeviceID = 24,
  kCGTabletEventVendor1 = 25,
  kCGTabletEventVendor2 = 26,
  kCGTabletEventVendor3 = 27,
  kCGTabletProximityEventVendorID = 28,
  kCGTabletProximityEventTabletID = 29,
  kCGTabletProximityEventPointerID = 30,
  kCGTabletProximityEventDeviceID = 31,
  kCGTabletProximityEventSystemTabletID = 32,
  kCGTabletProximityEventVendorPointerType = 33,
  kCGTabletProximityEventVendorPointerSerialNumber = 34,
  kCGTabletProximityEventVendorUniqueID = 35,
  kCGTabletProximityEventCapabilityMask = 36,
  kCGTabletProximityEventPointerType = 37,
  kCGTabletProximityEventEnterProximity = 38,
  kCGEventTargetProcessSerialNumber = 39,
  kCGEventTargetUnixProcessID = 40,
  kCGEventSourceUnixProcessID = 41,
  kCGEventSourceUserData = 42,
  kCGEventSourceUserID = 43,
  kCGEventSourceGroupID = 44,
  kCGEventSourceStateID = 45,
  kCGScrollWheelEventIsContinuous = 88,
  kCGMouseEventWindowUnderMousePointer = 91,
  kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92,
  kCGEventUnacceleratedPointerMovementX = 170,
  kCGEventUnacceleratedPointerMovementY = 171
}

global['CGEventField'] = CGEventField;

export enum CGEventFilterMask {
  kCGEventFilterMaskPermitLocalMouseEvents = 1,
  kCGEventFilterMaskPermitLocalKeyboardEvents = 2,
  kCGEventFilterMaskPermitSystemDefinedEvents = 4
}

global['CGEventFilterMask'] = CGEventFilterMask;

export enum CGEventFlags {
  kCGEventFlagMaskAlphaShift = 65536,
  kCGEventFlagMaskShift = 131072,
  kCGEventFlagMaskControl = 262144,
  kCGEventFlagMaskAlternate = 524288,
  kCGEventFlagMaskCommand = 1048576,
  kCGEventFlagMaskHelp = 4194304,
  kCGEventFlagMaskSecondaryFn = 8388608,
  kCGEventFlagMaskNumericPad = 2097152,
  kCGEventFlagMaskNonCoalesced = 256
}

global['CGEventFlags'] = CGEventFlags;

export enum CGEventMouseSubtype {
  kCGEventMouseSubtypeDefault = 0,
  kCGEventMouseSubtypeTabletPoint = 1,
  kCGEventMouseSubtypeTabletProximity = 2
}

global['CGEventMouseSubtype'] = CGEventMouseSubtype;

export enum CGEventSourceStateID {
  kCGEventSourceStatePrivate = -1,
  kCGEventSourceStateCombinedSessionState = 0,
  kCGEventSourceStateHIDSystemState = 1
}

global['CGEventSourceStateID'] = CGEventSourceStateID;

export enum CGEventSuppressionState {
  kCGEventSuppressionStateSuppressionInterval = 0,
  kCGEventSuppressionStateRemoteMouseDrag = 1,
  kCGNumberOfEventSuppressionStates = 2
}

global['CGEventSuppressionState'] = CGEventSuppressionState;

export enum CGEventTapLocation {
  kCGHIDEventTap = 0,
  kCGSessionEventTap = 1,
  kCGAnnotatedSessionEventTap = 2
}

global['CGEventTapLocation'] = CGEventTapLocation;

export enum CGEventTapOptions {
  kCGEventTapOptionDefault = 0,
  kCGEventTapOptionListenOnly = 1
}

global['CGEventTapOptions'] = CGEventTapOptions;

export enum CGEventTapPlacement {
  kCGHeadInsertEventTap = 0,
  kCGTailAppendEventTap = 1
}

global['CGEventTapPlacement'] = CGEventTapPlacement;

export enum CGEventType {
  kCGEventNull = 0,
  kCGEventLeftMouseDown = 1,
  kCGEventLeftMouseUp = 2,
  kCGEventRightMouseDown = 3,
  kCGEventRightMouseUp = 4,
  kCGEventMouseMoved = 5,
  kCGEventLeftMouseDragged = 6,
  kCGEventRightMouseDragged = 7,
  kCGEventKeyDown = 10,
  kCGEventKeyUp = 11,
  kCGEventFlagsChanged = 12,
  kCGEventScrollWheel = 22,
  kCGEventTabletPointer = 23,
  kCGEventTabletProximity = 24,
  kCGEventOtherMouseDown = 25,
  kCGEventOtherMouseUp = 26,
  kCGEventOtherMouseDragged = 27,
  kCGEventTapDisabledByTimeout = 4294967294,
  kCGEventTapDisabledByUserInput = 4294967295
}

global['CGEventType'] = CGEventType;

export enum CGFontPostScriptFormat {
  kCGFontPostScriptFormatType1 = 1,
  kCGFontPostScriptFormatType3 = 3,
  kCGFontPostScriptFormatType42 = 42
}

global['CGFontPostScriptFormat'] = CGFontPostScriptFormat;

export enum CGGesturePhase {
  kCGGesturePhaseNone = 0,
  kCGGesturePhaseBegan = 1,
  kCGGesturePhaseChanged = 2,
  kCGGesturePhaseEnded = 4,
  kCGGesturePhaseCancelled = 8,
  kCGGesturePhaseMayBegin = 128
}

global['CGGesturePhase'] = CGGesturePhase;

export enum CGGlyphDeprecatedEnum {
  Min = 0,
  Max = 1
}

global['CGGlyphDeprecatedEnum'] = CGGlyphDeprecatedEnum;

export enum CGGradientDrawingOptions {
  kCGGradientDrawsBeforeStartLocation = 1,
  kCGGradientDrawsAfterEndLocation = 2
}

global['CGGradientDrawingOptions'] = CGGradientDrawingOptions;

export enum CGImageAlphaInfo {
  kCGImageAlphaNone = 0,
  kCGImageAlphaPremultipliedLast = 1,
  kCGImageAlphaPremultipliedFirst = 2,
  kCGImageAlphaLast = 3,
  kCGImageAlphaFirst = 4,
  kCGImageAlphaNoneSkipLast = 5,
  kCGImageAlphaNoneSkipFirst = 6,
  kCGImageAlphaOnly = 7
}

global['CGImageAlphaInfo'] = CGImageAlphaInfo;

export enum CGImageByteOrderInfo {
  kCGImageByteOrderMask = 28672,
  kCGImageByteOrderDefault = 0,
  kCGImageByteOrder16Little = 4096,
  kCGImageByteOrder32Little = 8192,
  kCGImageByteOrder16Big = 12288,
  kCGImageByteOrder32Big = 16384
}

global['CGImageByteOrderInfo'] = CGImageByteOrderInfo;

export enum CGImagePixelFormatInfo {
  kCGImagePixelFormatMask = 983040,
  kCGImagePixelFormatPacked = 0,
  kCGImagePixelFormatRGB555 = 65536,
  kCGImagePixelFormatRGB565 = 131072,
  kCGImagePixelFormatRGB101010 = 196608,
  kCGImagePixelFormatRGBCIF10 = 262144
}

global['CGImagePixelFormatInfo'] = CGImagePixelFormatInfo;

export enum CGInterpolationQuality {
  kCGInterpolationDefault = 0,
  kCGInterpolationNone = 1,
  kCGInterpolationLow = 2,
  kCGInterpolationMedium = 4,
  kCGInterpolationHigh = 3
}

global['CGInterpolationQuality'] = CGInterpolationQuality;

export enum CGLineCap {
  kCGLineCapButt = 0,
  kCGLineCapRound = 1,
  kCGLineCapSquare = 2
}

global['CGLineCap'] = CGLineCap;

export enum CGLineJoin {
  kCGLineJoinMiter = 0,
  kCGLineJoinRound = 1,
  kCGLineJoinBevel = 2
}

global['CGLineJoin'] = CGLineJoin;

export enum CGMomentumScrollPhase {
  kCGMomentumScrollPhaseNone = 0,
  kCGMomentumScrollPhaseBegin = 1,
  kCGMomentumScrollPhaseContinue = 2,
  kCGMomentumScrollPhaseEnd = 3
}

global['CGMomentumScrollPhase'] = CGMomentumScrollPhase;

export enum CGMouseButton {
  kCGMouseButtonLeft = 0,
  kCGMouseButtonRight = 1,
  kCGMouseButtonCenter = 2
}

global['CGMouseButton'] = CGMouseButton;

export enum CGPDFAccessPermissions {
  kCGPDFAllowsLowQualityPrinting = 1,
  kCGPDFAllowsHighQualityPrinting = 2,
  kCGPDFAllowsDocumentChanges = 4,
  kCGPDFAllowsDocumentAssembly = 8,
  kCGPDFAllowsContentCopying = 16,
  kCGPDFAllowsContentAccessibility = 32,
  kCGPDFAllowsCommenting = 64,
  kCGPDFAllowsFormFieldEntry = 128
}

global['CGPDFAccessPermissions'] = CGPDFAccessPermissions;

export enum CGPDFBox {
  kCGPDFMediaBox = 0,
  kCGPDFCropBox = 1,
  kCGPDFBleedBox = 2,
  kCGPDFTrimBox = 3,
  kCGPDFArtBox = 4
}

global['CGPDFBox'] = CGPDFBox;

export enum CGPDFDataFormat {
  Raw = 0,
  JPEGEncoded = 1,
  JPEG2000 = 2
}

global['CGPDFDataFormat'] = CGPDFDataFormat;

export enum CGPDFObjectType {
  kCGPDFObjectTypeNull = 1,
  kCGPDFObjectTypeBoolean = 2,
  kCGPDFObjectTypeInteger = 3,
  kCGPDFObjectTypeReal = 4,
  kCGPDFObjectTypeName = 5,
  kCGPDFObjectTypeString = 6,
  kCGPDFObjectTypeArray = 7,
  kCGPDFObjectTypeDictionary = 8,
  kCGPDFObjectTypeStream = 9
}

global['CGPDFObjectType'] = CGPDFObjectType;

export enum CGPDFTagType {
  Document = 100,
  Part = 101,
  Art = 102,
  Section = 103,
  Div = 104,
  BlockQuote = 105,
  Caption = 106,
  TOC = 107,
  TOCI = 108,
  Index = 109,
  NonStructure = 110,
  Private = 111,
  Paragraph = 200,
  Header = 201,
  Header1 = 202,
  Header2 = 203,
  Header3 = 204,
  Header4 = 205,
  Header5 = 206,
  Header6 = 207,
  List = 300,
  ListItem = 301,
  Label = 302,
  ListBody = 303,
  Table = 400,
  TableRow = 401,
  TableHeaderCell = 402,
  TableDataCell = 403,
  TableHeader = 404,
  TableBody = 405,
  TableFooter = 406,
  Span = 500,
  Quote = 501,
  Note = 502,
  Reference = 503,
  Bibliography = 504,
  Code = 505,
  Link = 506,
  Annotation = 507,
  Ruby = 600,
  RubyBaseText = 601,
  RubyAnnotationText = 602,
  RubyPunctuation = 603,
  Warichu = 604,
  WarichuText = 605,
  WarichuPunctiation = 606,
  Figure = 700,
  Formula = 701,
  Form = 702
}

global['CGPDFTagType'] = CGPDFTagType;

export enum CGPathDrawingMode {
  kCGPathFill = 0,
  kCGPathEOFill = 1,
  kCGPathStroke = 2,
  kCGPathFillStroke = 3,
  kCGPathEOFillStroke = 4
}

global['CGPathDrawingMode'] = CGPathDrawingMode;

export enum CGPathElementType {
  kCGPathElementMoveToPoint = 0,
  kCGPathElementAddLineToPoint = 1,
  kCGPathElementAddQuadCurveToPoint = 2,
  kCGPathElementAddCurveToPoint = 3,
  kCGPathElementCloseSubpath = 4
}

global['CGPathElementType'] = CGPathElementType;

export enum CGPatternTiling {
  kCGPatternTilingNoDistortion = 0,
  kCGPatternTilingConstantSpacingMinimalDistortion = 1,
  kCGPatternTilingConstantSpacing = 2
}

global['CGPatternTiling'] = CGPatternTiling;

export enum CGRectEdge {
  MinXEdge = 0,
  MinYEdge = 1,
  MaxXEdge = 2,
  MaxYEdge = 3
}

global['CGRectEdge'] = CGRectEdge;

export enum CGScreenUpdateOperation {
  kCGScreenUpdateOperationRefresh = 0,
  kCGScreenUpdateOperationMove = 1,
  kCGScreenUpdateOperationReducedDirtyRectangleCount = 2147483648
}

global['CGScreenUpdateOperation'] = CGScreenUpdateOperation;

export enum CGScrollEventUnit {
  kCGScrollEventUnitPixel = 0,
  kCGScrollEventUnitLine = 1
}

global['CGScrollEventUnit'] = CGScrollEventUnit;

export enum CGScrollPhase {
  kCGScrollPhaseBegan = 1,
  kCGScrollPhaseChanged = 2,
  kCGScrollPhaseEnded = 4,
  kCGScrollPhaseCancelled = 8,
  kCGScrollPhaseMayBegin = 128
}

global['CGScrollPhase'] = CGScrollPhase;

export enum CGTextDrawingMode {
  kCGTextFill = 0,
  kCGTextStroke = 1,
  kCGTextFillStroke = 2,
  kCGTextInvisible = 3,
  kCGTextFillClip = 4,
  kCGTextStrokeClip = 5,
  kCGTextFillStrokeClip = 6,
  kCGTextClip = 7
}

global['CGTextDrawingMode'] = CGTextDrawingMode;

export enum CGWindowBackingType {
  kCGBackingStoreRetained = 0,
  kCGBackingStoreNonretained = 1,
  kCGBackingStoreBuffered = 2
}

global['CGWindowBackingType'] = CGWindowBackingType;

export enum CGWindowImageOption {
  kCGWindowImageDefault = 0,
  kCGWindowImageBoundsIgnoreFraming = 1,
  kCGWindowImageShouldBeOpaque = 2,
  kCGWindowImageOnlyShadows = 4,
  kCGWindowImageBestResolution = 8,
  kCGWindowImageNominalResolution = 16
}

global['CGWindowImageOption'] = CGWindowImageOption;

export enum CGWindowLevelKey {
  kCGBaseWindowLevelKey = 0,
  kCGMinimumWindowLevelKey = 1,
  kCGDesktopWindowLevelKey = 2,
  kCGBackstopMenuLevelKey = 3,
  kCGNormalWindowLevelKey = 4,
  kCGFloatingWindowLevelKey = 5,
  kCGTornOffMenuWindowLevelKey = 6,
  kCGDockWindowLevelKey = 7,
  kCGMainMenuWindowLevelKey = 8,
  kCGStatusWindowLevelKey = 9,
  kCGModalPanelWindowLevelKey = 10,
  kCGPopUpMenuWindowLevelKey = 11,
  kCGDraggingWindowLevelKey = 12,
  kCGScreenSaverWindowLevelKey = 13,
  kCGMaximumWindowLevelKey = 14,
  kCGOverlayWindowLevelKey = 15,
  kCGHelpWindowLevelKey = 16,
  kCGUtilityWindowLevelKey = 17,
  kCGDesktopIconWindowLevelKey = 18,
  kCGCursorWindowLevelKey = 19,
  kCGAssistiveTechHighWindowLevelKey = 20,
  kCGNumberOfWindowLevelKeys = 21
}

global['CGWindowLevelKey'] = CGWindowLevelKey;

export enum CGWindowListOption {
  kCGWindowListOptionAll = 0,
  kCGWindowListOptionOnScreenOnly = 1,
  kCGWindowListOptionOnScreenAboveWindow = 2,
  kCGWindowListOptionOnScreenBelowWindow = 4,
  kCGWindowListOptionIncludingWindow = 8,
  kCGWindowListExcludeDesktopElements = 16
}

global['CGWindowListOption'] = CGWindowListOption;

export enum CGWindowSharingType {
  kCGWindowSharingNone = 0,
  kCGWindowSharingReadOnly = 1,
  kCGWindowSharingReadWrite = 2
}

global['CGWindowSharingType'] = CGWindowSharingType;

export enum CIDataMatrixCodeECCVersion {
  Version000 = 0,
  Version050 = 50,
  Version080 = 80,
  Version100 = 100,
  Version140 = 140,
  Version200 = 200
}

global['CIDataMatrixCodeECCVersion'] = CIDataMatrixCodeECCVersion;

export enum CIQRCodeErrorCorrectionLevel {
  L = 76,
  M = 77,
  Q = 81,
  H = 72
}

global['CIQRCodeErrorCorrectionLevel'] = CIQRCodeErrorCorrectionLevel;

export enum CIRenderDestinationAlphaMode {
  None = 0,
  Premultiplied = 1,
  Unpremultiplied = 2
}

global['CIRenderDestinationAlphaMode'] = CIRenderDestinationAlphaMode;

export enum CMTimeFlags {
  kCMTimeFlags_Valid = 1,
  kCMTimeFlags_HasBeenRounded = 2,
  kCMTimeFlags_PositiveInfinity = 4,
  kCMTimeFlags_NegativeInfinity = 8,
  kCMTimeFlags_Indefinite = 16,
  kCMTimeFlags_ImpliedValueFlagsMask = 28
}

global['CMTimeFlags'] = CMTimeFlags;

export enum CMTimeRoundingMethod {
  kCMTimeRoundingMethod_RoundHalfAwayFromZero = 1,
  kCMTimeRoundingMethod_RoundTowardZero = 2,
  kCMTimeRoundingMethod_RoundAwayFromZero = 3,
  kCMTimeRoundingMethod_QuickTime = 4,
  kCMTimeRoundingMethod_RoundTowardPositiveInfinity = 5,
  kCMTimeRoundingMethod_RoundTowardNegativeInfinity = 6,
  kCMTimeRoundingMethod_Default = 1
}

global['CMTimeRoundingMethod'] = CMTimeRoundingMethod;

export enum AlignmentOptions {
  MinXInward = 1,
  MinYInward = 2,
  MaxXInward = 4,
  MaxYInward = 8,
  WidthInward = 16,
  HeightInward = 32,
  MinXOutward = 256,
  MinYOutward = 512,
  MaxXOutward = 1024,
  MaxYOutward = 2048,
  WidthOutward = 4096,
  HeightOutward = 8192,
  MinXNearest = 65536,
  MinYNearest = 131072,
  MaxXNearest = 262144,
  MaxYNearest = 524288,
  WidthNearest = 1048576,
  HeightNearest = 2097152,
  RectFlipped = -9223372036854775808,
  AllEdgesInward = 15,
  AllEdgesOutward = 3840,
  AllEdgesNearest = 983040
}

global['AlignmentOptions'] = AlignmentOptions;

export enum NSBinarySearchingOptions {
  FirstEqual = 256,
  LastEqual = 512,
  InsertionIndex = 1024
}

global['NSBinarySearchingOptions'] = NSBinarySearchingOptions;

export enum NSCollectionChangeType {
  Insert = 0,
  Remove = 1
}

global['NSCollectionChangeType'] = NSCollectionChangeType;

export enum ComparisonResult {
  OrderedAscending = -1,
  OrderedSame = 0,
  OrderedDescending = 1
}

global['ComparisonResult'] = ComparisonResult;

export enum NSEnumerationOptions {
  Concurrent = 1,
  Reverse = 2
}

global['NSEnumerationOptions'] = NSEnumerationOptions;

export enum NSItemProviderFileOptions {
  OpenInPlace = 1
}

global['NSItemProviderFileOptions'] = NSItemProviderFileOptions;

export enum NSItemProviderRepresentationVisibility {
  All = 0,
  Team = 1,
  Group = 2,
  OwnProcess = 3
}

global['NSItemProviderRepresentationVisibility'] = NSItemProviderRepresentationVisibility;

export enum NSKeyValueChange {
  Setting = 1,
  Insertion = 2,
  Removal = 3,
  Replacement = 4
}

global['NSKeyValueChange'] = NSKeyValueChange;

export enum NSKeyValueObservingOptions {
  New = 1,
  Old = 2,
  Initial = 4,
  Prior = 8
}

global['NSKeyValueObservingOptions'] = NSKeyValueObservingOptions;

export enum NSKeyValueSetMutationKind {
  UnionSetMutation = 1,
  MinusSetMutation = 2,
  IntersectSetMutation = 3,
  SetSetMutation = 4
}

global['NSKeyValueSetMutationKind'] = NSKeyValueSetMutationKind;

export enum NSLinguisticTaggerUnit {
  Word = 0,
  Sentence = 1,
  Paragraph = 2,
  Document = 3
}

global['NSLinguisticTaggerUnit'] = NSLinguisticTaggerUnit;

export enum NSOrderedCollectionDifferenceCalculationOptions {
  OmitInsertedObjects = 1,
  OmitRemovedObjects = 2,
  InferMoves = 4
}

global['NSOrderedCollectionDifferenceCalculationOptions'] = NSOrderedCollectionDifferenceCalculationOptions;

export enum QualityOfService {
  UserInteractive = 33,
  UserInitiated = 25,
  Utility = 17,
  Background = 9,
  Default = -1
}

global['QualityOfService'] = QualityOfService;

export enum NSRectEdge {
  RectEdgeMinX = 0,
  RectEdgeMinY = 1,
  RectEdgeMaxX = 2,
  RectEdgeMaxY = 3,
  MinXEdge = 0,
  MinYEdge = 1,
  MaxXEdge = 2,
  MaxYEdge = 3
}

global['NSRectEdge'] = NSRectEdge;

export enum NSSaveOptions {
  Yes = 0,
  No = 1,
  Ask = 2
}

global['NSSaveOptions'] = NSSaveOptions;

export enum NSSortOptions {
  Concurrent = 1,
  Stable = 16
}

global['NSSortOptions'] = NSSortOptions;

export enum NSURLErrorNetworkUnavailableReason {
  Cellular = 0,
  Expensive = 1,
  Constrained = 2
}

global['NSURLErrorNetworkUnavailableReason'] = NSURLErrorNetworkUnavailableReason;

export enum NSURLSessionDelayedRequestDisposition {
  ContinueLoading = 0,
  UseNewRequest = 1,
  Cancel = 2
}

global['NSURLSessionDelayedRequestDisposition'] = NSURLSessionDelayedRequestDisposition;

export enum NSURLSessionWebSocketMessageType {
  Data = 0,
  String = 1
}

global['NSURLSessionWebSocketMessageType'] = NSURLSessionWebSocketMessageType;

export enum IKCameraDeviceViewDisplayMode {
  None = -1,
  Table = 0,
  Icon = 1
}

global['IKCameraDeviceViewDisplayMode'] = IKCameraDeviceViewDisplayMode;

export enum IKCameraDeviceViewTransferMode {
  FileBased = 0,
  MemoryBased = 1
}

global['IKCameraDeviceViewTransferMode'] = IKCameraDeviceViewTransferMode;

export enum IKDeviceBrowserViewDisplayMode {
  Table = 0,
  Outline = 1,
  Icon = 2
}

global['IKDeviceBrowserViewDisplayMode'] = IKDeviceBrowserViewDisplayMode;

export enum IKImageBrowserCellState {
  StateNoImage = 0,
  StateInvalid = 1,
  StateReady = 2
}

global['IKImageBrowserCellState'] = IKImageBrowserCellState;

export enum IKImageBrowserDropOperation {
  On = 0,
  Before = 1
}

global['IKImageBrowserDropOperation'] = IKImageBrowserDropOperation;

export enum IKScannerDeviceViewDisplayMode {
  None = -1,
  Simple = 0,
  Advanced = 1
}

global['IKScannerDeviceViewDisplayMode'] = IKScannerDeviceViewDisplayMode;

export enum IKScannerDeviceViewTransferMode {
  FileBased = 0,
  MemoryBased = 1
}

global['IKScannerDeviceViewTransferMode'] = IKScannerDeviceViewTransferMode;

export enum QCPlugInExecutionMode {
  kQCPlugInExecutionModeProvider = 1,
  kQCPlugInExecutionModeProcessor = 2,
  kQCPlugInExecutionModeConsumer = 3
}

global['QCPlugInExecutionMode'] = QCPlugInExecutionMode;

export enum QCPlugInTimeMode {
  kQCPlugInTimeModeNone = 0,
  kQCPlugInTimeModeIdle = 1,
  kQCPlugInTimeModeTimeBase = 2
}

global['QCPlugInTimeMode'] = QCPlugInTimeMode;

export enum QLPreviewViewStyle {
  Normal = 0,
  Compact = 1
}

global['QLPreviewViewStyle'] = QLPreviewViewStyle;

export enum CAAutoresizingMask {
  kCALayerNotSizable = 0,
  kCALayerMinXMargin = 1,
  kCALayerWidthSizable = 2,
  kCALayerMaxXMargin = 4,
  kCALayerMinYMargin = 8,
  kCALayerHeightSizable = 16,
  kCALayerMaxYMargin = 32
}

global['CAAutoresizingMask'] = CAAutoresizingMask;

export enum CAConstraintAttribute {
  kCAConstraintMinX = 0,
  kCAConstraintMidX = 1,
  kCAConstraintMaxX = 2,
  kCAConstraintWidth = 3,
  kCAConstraintMinY = 4,
  kCAConstraintMidY = 5,
  kCAConstraintMaxY = 6,
  kCAConstraintHeight = 7
}

global['CAConstraintAttribute'] = CAConstraintAttribute;

export enum CACornerMask {
  kCALayerMinXMinYCorner = 1,
  kCALayerMaxXMinYCorner = 2,
  kCALayerMinXMaxYCorner = 4,
  kCALayerMaxXMaxYCorner = 8
}

global['CACornerMask'] = CACornerMask;

export enum CAEdgeAntialiasingMask {
  kCALayerLeftEdge = 1,
  kCALayerRightEdge = 2,
  kCALayerBottomEdge = 4,
  kCALayerTopEdge = 8
}

global['CAEdgeAntialiasingMask'] = CAEdgeAntialiasingMask;

export let AVAssetExportPreset1280x720: string;
global['AVAssetExportPreset1280x720'] = AVAssetExportPreset1280x720;

export let AVAssetExportPreset1920x1080: string;
global['AVAssetExportPreset1920x1080'] = AVAssetExportPreset1920x1080;

export let AVAssetExportPreset3840x2160: string;
global['AVAssetExportPreset3840x2160'] = AVAssetExportPreset3840x2160;

export let AVAssetExportPreset640x480: string;
global['AVAssetExportPreset640x480'] = AVAssetExportPreset640x480;

export let AVAssetExportPreset960x540: string;
global['AVAssetExportPreset960x540'] = AVAssetExportPreset960x540;

export let AVAssetExportPresetAppleM4A: string;
global['AVAssetExportPresetAppleM4A'] = AVAssetExportPresetAppleM4A;

export let AVAssetExportPresetAppleM4V1080pHD: string;
global['AVAssetExportPresetAppleM4V1080pHD'] = AVAssetExportPresetAppleM4V1080pHD;

export let AVAssetExportPresetAppleM4V480pSD: string;
global['AVAssetExportPresetAppleM4V480pSD'] = AVAssetExportPresetAppleM4V480pSD;

export let AVAssetExportPresetAppleM4V720pHD: string;
global['AVAssetExportPresetAppleM4V720pHD'] = AVAssetExportPresetAppleM4V720pHD;

export let AVAssetExportPresetAppleM4VAppleTV: string;
global['AVAssetExportPresetAppleM4VAppleTV'] = AVAssetExportPresetAppleM4VAppleTV;

export let AVAssetExportPresetAppleM4VCellular: string;
global['AVAssetExportPresetAppleM4VCellular'] = AVAssetExportPresetAppleM4VCellular;

export let AVAssetExportPresetAppleM4VWiFi: string;
global['AVAssetExportPresetAppleM4VWiFi'] = AVAssetExportPresetAppleM4VWiFi;

export let AVAssetExportPresetAppleM4ViPod: string;
global['AVAssetExportPresetAppleM4ViPod'] = AVAssetExportPresetAppleM4ViPod;

export let AVAssetExportPresetAppleProRes422LPCM: string;
global['AVAssetExportPresetAppleProRes422LPCM'] = AVAssetExportPresetAppleProRes422LPCM;

export let AVAssetExportPresetAppleProRes4444LPCM: string;
global['AVAssetExportPresetAppleProRes4444LPCM'] = AVAssetExportPresetAppleProRes4444LPCM;

export let AVAssetExportPresetHEVC1920x1080: string;
global['AVAssetExportPresetHEVC1920x1080'] = AVAssetExportPresetHEVC1920x1080;

export let AVAssetExportPresetHEVC1920x1080WithAlpha: string;
global['AVAssetExportPresetHEVC1920x1080WithAlpha'] = AVAssetExportPresetHEVC1920x1080WithAlpha;

export let AVAssetExportPresetHEVC3840x2160: string;
global['AVAssetExportPresetHEVC3840x2160'] = AVAssetExportPresetHEVC3840x2160;

export let AVAssetExportPresetHEVC3840x2160WithAlpha: string;
global['AVAssetExportPresetHEVC3840x2160WithAlpha'] = AVAssetExportPresetHEVC3840x2160WithAlpha;

export let AVAssetExportPresetHEVCHighestQuality: string;
global['AVAssetExportPresetHEVCHighestQuality'] = AVAssetExportPresetHEVCHighestQuality;

export let AVAssetExportPresetHEVCHighestQualityWithAlpha: string;
global['AVAssetExportPresetHEVCHighestQualityWithAlpha'] = AVAssetExportPresetHEVCHighestQualityWithAlpha;

export let AVAssetExportPresetHighestQuality: string;
global['AVAssetExportPresetHighestQuality'] = AVAssetExportPresetHighestQuality;

export let AVAssetExportPresetLowQuality: string;
global['AVAssetExportPresetLowQuality'] = AVAssetExportPresetLowQuality;

export let AVAssetExportPresetMediumQuality: string;
global['AVAssetExportPresetMediumQuality'] = AVAssetExportPresetMediumQuality;

export let AVAssetExportPresetPassthrough: string;
global['AVAssetExportPresetPassthrough'] = AVAssetExportPresetPassthrough;

export let AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey: string;
global['AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey'] = AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey;

export let AVAudioBitRateStrategy_Constant: string;
global['AVAudioBitRateStrategy_Constant'] = AVAudioBitRateStrategy_Constant;

export let AVAudioBitRateStrategy_LongTermAverage: string;
global['AVAudioBitRateStrategy_LongTermAverage'] = AVAudioBitRateStrategy_LongTermAverage;

export let AVAudioBitRateStrategy_Variable: string;
global['AVAudioBitRateStrategy_Variable'] = AVAudioBitRateStrategy_Variable;

export let AVAudioBitRateStrategy_VariableConstrained: string;
global['AVAudioBitRateStrategy_VariableConstrained'] = AVAudioBitRateStrategy_VariableConstrained;

export let AVAudioFileTypeKey: string;
global['AVAudioFileTypeKey'] = AVAudioFileTypeKey;

export let AVAudioUnitManufacturerNameApple: string;
global['AVAudioUnitManufacturerNameApple'] = AVAudioUnitManufacturerNameApple;

export let AVAudioUnitTypeEffect: string;
global['AVAudioUnitTypeEffect'] = AVAudioUnitTypeEffect;

export let AVAudioUnitTypeFormatConverter: string;
global['AVAudioUnitTypeFormatConverter'] = AVAudioUnitTypeFormatConverter;

export let AVAudioUnitTypeGenerator: string;
global['AVAudioUnitTypeGenerator'] = AVAudioUnitTypeGenerator;

export let AVAudioUnitTypeMIDIProcessor: string;
global['AVAudioUnitTypeMIDIProcessor'] = AVAudioUnitTypeMIDIProcessor;

export let AVAudioUnitTypeMixer: string;
global['AVAudioUnitTypeMixer'] = AVAudioUnitTypeMixer;

export let AVAudioUnitTypeMusicDevice: string;
global['AVAudioUnitTypeMusicDevice'] = AVAudioUnitTypeMusicDevice;

export let AVAudioUnitTypeMusicEffect: string;
global['AVAudioUnitTypeMusicEffect'] = AVAudioUnitTypeMusicEffect;

export let AVAudioUnitTypeOfflineEffect: string;
global['AVAudioUnitTypeOfflineEffect'] = AVAudioUnitTypeOfflineEffect;

export let AVAudioUnitTypeOutput: string;
global['AVAudioUnitTypeOutput'] = AVAudioUnitTypeOutput;

export let AVAudioUnitTypePanner: string;
global['AVAudioUnitTypePanner'] = AVAudioUnitTypePanner;

export let AVCaptureSessionErrorKey: string;
global['AVCaptureSessionErrorKey'] = AVCaptureSessionErrorKey;

export let AVChannelLayoutKey: string;
global['AVChannelLayoutKey'] = AVChannelLayoutKey;

export let AVContentKeyRequestProtocolVersionsKey: string;
global['AVContentKeyRequestProtocolVersionsKey'] = AVContentKeyRequestProtocolVersionsKey;

export let AVContentKeyRequestRequiresValidationDataInSecureTokenKey: string;
global['AVContentKeyRequestRequiresValidationDataInSecureTokenKey'] = AVContentKeyRequestRequiresValidationDataInSecureTokenKey;

export let AVCoreAnimationBeginTimeAtZero: number;
global['AVCoreAnimationBeginTimeAtZero'] = AVCoreAnimationBeginTimeAtZero;

export let AVEncoderAudioQualityForVBRKey: string;
global['AVEncoderAudioQualityForVBRKey'] = AVEncoderAudioQualityForVBRKey;

export let AVEncoderAudioQualityKey: string;
global['AVEncoderAudioQualityKey'] = AVEncoderAudioQualityKey;

export let AVEncoderBitDepthHintKey: string;
global['AVEncoderBitDepthHintKey'] = AVEncoderBitDepthHintKey;

export let AVEncoderBitRateKey: string;
global['AVEncoderBitRateKey'] = AVEncoderBitRateKey;

export let AVEncoderBitRatePerChannelKey: string;
global['AVEncoderBitRatePerChannelKey'] = AVEncoderBitRatePerChannelKey;

export let AVEncoderBitRateStrategyKey: string;
global['AVEncoderBitRateStrategyKey'] = AVEncoderBitRateStrategyKey;

export let AVErrorDeviceKey: string;
global['AVErrorDeviceKey'] = AVErrorDeviceKey;

export let AVErrorDiscontinuityFlagsKey: string;
global['AVErrorDiscontinuityFlagsKey'] = AVErrorDiscontinuityFlagsKey;

export let AVErrorFileSizeKey: string;
global['AVErrorFileSizeKey'] = AVErrorFileSizeKey;

export let AVErrorFileTypeKey: string;
global['AVErrorFileTypeKey'] = AVErrorFileTypeKey;

export let AVErrorMediaSubTypeKey: string;
global['AVErrorMediaSubTypeKey'] = AVErrorMediaSubTypeKey;

export let AVErrorMediaTypeKey: string;
global['AVErrorMediaTypeKey'] = AVErrorMediaTypeKey;

export let AVErrorPIDKey: string;
global['AVErrorPIDKey'] = AVErrorPIDKey;

export let AVErrorPersistentTrackIDKey: string;
global['AVErrorPersistentTrackIDKey'] = AVErrorPersistentTrackIDKey;

export let AVErrorPresentationTimeStampKey: string;
global['AVErrorPresentationTimeStampKey'] = AVErrorPresentationTimeStampKey;

export let AVErrorRecordingSuccessfullyFinishedKey: string;
global['AVErrorRecordingSuccessfullyFinishedKey'] = AVErrorRecordingSuccessfullyFinishedKey;

export let AVErrorTimeKey: string;
global['AVErrorTimeKey'] = AVErrorTimeKey;

export let AVFormatIDKey: string;
global['AVFormatIDKey'] = AVFormatIDKey;

export let AVFoundationErrorDomain: string;
global['AVFoundationErrorDomain'] = AVFoundationErrorDomain;

export let AVLinearPCMBitDepthKey: string;
global['AVLinearPCMBitDepthKey'] = AVLinearPCMBitDepthKey;

export let AVLinearPCMIsBigEndianKey: string;
global['AVLinearPCMIsBigEndianKey'] = AVLinearPCMIsBigEndianKey;

export let AVLinearPCMIsFloatKey: string;
global['AVLinearPCMIsFloatKey'] = AVLinearPCMIsFloatKey;

export let AVLinearPCMIsNonInterleaved: string;
global['AVLinearPCMIsNonInterleaved'] = AVLinearPCMIsNonInterleaved;

export let AVMovieReferenceRestrictionsKey: string;
global['AVMovieReferenceRestrictionsKey'] = AVMovieReferenceRestrictionsKey;

export let AVNumberOfChannelsKey: string;
global['AVNumberOfChannelsKey'] = AVNumberOfChannelsKey;

export let AVPlayerItemFailedToPlayToEndTimeErrorKey: string;
global['AVPlayerItemFailedToPlayToEndTimeErrorKey'] = AVPlayerItemFailedToPlayToEndTimeErrorKey;

export let AVPlayerItemTrackVideoFieldModeDeinterlaceFields: string;
global['AVPlayerItemTrackVideoFieldModeDeinterlaceFields'] = AVPlayerItemTrackVideoFieldModeDeinterlaceFields;

export let AVSampleBufferAudioRendererFlushTimeKey: string;
global['AVSampleBufferAudioRendererFlushTimeKey'] = AVSampleBufferAudioRendererFlushTimeKey;

export let AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey: string;
global['AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey'] = AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey;

export let AVSampleRateConverterAlgorithmKey: string;
global['AVSampleRateConverterAlgorithmKey'] = AVSampleRateConverterAlgorithmKey;

export let AVSampleRateConverterAlgorithm_Mastering: string;
global['AVSampleRateConverterAlgorithm_Mastering'] = AVSampleRateConverterAlgorithm_Mastering;

export let AVSampleRateConverterAlgorithm_MinimumPhase: string;
global['AVSampleRateConverterAlgorithm_MinimumPhase'] = AVSampleRateConverterAlgorithm_MinimumPhase;

export let AVSampleRateConverterAlgorithm_Normal: string;
global['AVSampleRateConverterAlgorithm_Normal'] = AVSampleRateConverterAlgorithm_Normal;

export let AVSampleRateConverterAudioQualityKey: string;
global['AVSampleRateConverterAudioQualityKey'] = AVSampleRateConverterAudioQualityKey;

export let AVSampleRateKey: string;
global['AVSampleRateKey'] = AVSampleRateKey;

export let AVSpeechSynthesisIPANotationAttribute: string;
global['AVSpeechSynthesisIPANotationAttribute'] = AVSpeechSynthesisIPANotationAttribute;

export let AVSpeechSynthesisVoiceIdentifierAlex: string;
global['AVSpeechSynthesisVoiceIdentifierAlex'] = AVSpeechSynthesisVoiceIdentifierAlex;

export let AVSpeechUtteranceDefaultSpeechRate: number;
global['AVSpeechUtteranceDefaultSpeechRate'] = AVSpeechUtteranceDefaultSpeechRate;

export let AVSpeechUtteranceMaximumSpeechRate: number;
global['AVSpeechUtteranceMaximumSpeechRate'] = AVSpeechUtteranceMaximumSpeechRate;

export let AVSpeechUtteranceMinimumSpeechRate: number;
global['AVSpeechUtteranceMinimumSpeechRate'] = AVSpeechUtteranceMinimumSpeechRate;

export let AVStreamingKeyDeliveryContentKeyType: string;
global['AVStreamingKeyDeliveryContentKeyType'] = AVStreamingKeyDeliveryContentKeyType;

export let AVStreamingKeyDeliveryPersistentContentKeyType: string;
global['AVStreamingKeyDeliveryPersistentContentKeyType'] = AVStreamingKeyDeliveryPersistentContentKeyType;

export let AVURLAssetAllowsCellularAccessKey: string;
global['AVURLAssetAllowsCellularAccessKey'] = AVURLAssetAllowsCellularAccessKey;

export let AVURLAssetAllowsConstrainedNetworkAccessKey: string;
global['AVURLAssetAllowsConstrainedNetworkAccessKey'] = AVURLAssetAllowsConstrainedNetworkAccessKey;

export let AVURLAssetAllowsExpensiveNetworkAccessKey: string;
global['AVURLAssetAllowsExpensiveNetworkAccessKey'] = AVURLAssetAllowsExpensiveNetworkAccessKey;

export let AVURLAssetHTTPCookiesKey: string;
global['AVURLAssetHTTPCookiesKey'] = AVURLAssetHTTPCookiesKey;

export let AVURLAssetPreferPreciseDurationAndTimingKey: string;
global['AVURLAssetPreferPreciseDurationAndTimingKey'] = AVURLAssetPreferPreciseDurationAndTimingKey;

export let AVURLAssetReferenceRestrictionsKey: string;
global['AVURLAssetReferenceRestrictionsKey'] = AVURLAssetReferenceRestrictionsKey;

export let AVVideoAllowFrameReorderingKey: string;
global['AVVideoAllowFrameReorderingKey'] = AVVideoAllowFrameReorderingKey;

export let AVVideoAllowWideColorKey: string;
global['AVVideoAllowWideColorKey'] = AVVideoAllowWideColorKey;

export let AVVideoAverageBitRateKey: string;
global['AVVideoAverageBitRateKey'] = AVVideoAverageBitRateKey;

export let AVVideoAverageNonDroppableFrameRateKey: string;
global['AVVideoAverageNonDroppableFrameRateKey'] = AVVideoAverageNonDroppableFrameRateKey;

export let AVVideoCleanApertureHeightKey: string;
global['AVVideoCleanApertureHeightKey'] = AVVideoCleanApertureHeightKey;

export let AVVideoCleanApertureHorizontalOffsetKey: string;
global['AVVideoCleanApertureHorizontalOffsetKey'] = AVVideoCleanApertureHorizontalOffsetKey;

export let AVVideoCleanApertureKey: string;
global['AVVideoCleanApertureKey'] = AVVideoCleanApertureKey;

export let AVVideoCleanApertureVerticalOffsetKey: string;
global['AVVideoCleanApertureVerticalOffsetKey'] = AVVideoCleanApertureVerticalOffsetKey;

export let AVVideoCleanApertureWidthKey: string;
global['AVVideoCleanApertureWidthKey'] = AVVideoCleanApertureWidthKey;

export let AVVideoCodecKey: string;
global['AVVideoCodecKey'] = AVVideoCodecKey;

export let AVVideoColorPrimariesKey: string;
global['AVVideoColorPrimariesKey'] = AVVideoColorPrimariesKey;

export let AVVideoColorPrimaries_EBU_3213: string;
global['AVVideoColorPrimaries_EBU_3213'] = AVVideoColorPrimaries_EBU_3213;

export let AVVideoColorPrimaries_ITU_R_2020: string;
global['AVVideoColorPrimaries_ITU_R_2020'] = AVVideoColorPrimaries_ITU_R_2020;

export let AVVideoColorPrimaries_ITU_R_709_2: string;
global['AVVideoColorPrimaries_ITU_R_709_2'] = AVVideoColorPrimaries_ITU_R_709_2;

export let AVVideoColorPrimaries_P3_D65: string;
global['AVVideoColorPrimaries_P3_D65'] = AVVideoColorPrimaries_P3_D65;

export let AVVideoColorPrimaries_SMPTE_C: string;
global['AVVideoColorPrimaries_SMPTE_C'] = AVVideoColorPrimaries_SMPTE_C;

export let AVVideoColorPropertiesKey: string;
global['AVVideoColorPropertiesKey'] = AVVideoColorPropertiesKey;

export let AVVideoCompressionPropertiesKey: string;
global['AVVideoCompressionPropertiesKey'] = AVVideoCompressionPropertiesKey;

export let AVVideoDecompressionPropertiesKey: string;
global['AVVideoDecompressionPropertiesKey'] = AVVideoDecompressionPropertiesKey;

export let AVVideoEncoderSpecificationKey: string;
global['AVVideoEncoderSpecificationKey'] = AVVideoEncoderSpecificationKey;

export let AVVideoExpectedSourceFrameRateKey: string;
global['AVVideoExpectedSourceFrameRateKey'] = AVVideoExpectedSourceFrameRateKey;

export let AVVideoH264EntropyModeCABAC: string;
global['AVVideoH264EntropyModeCABAC'] = AVVideoH264EntropyModeCABAC;

export let AVVideoH264EntropyModeCAVLC: string;
global['AVVideoH264EntropyModeCAVLC'] = AVVideoH264EntropyModeCAVLC;

export let AVVideoH264EntropyModeKey: string;
global['AVVideoH264EntropyModeKey'] = AVVideoH264EntropyModeKey;

export let AVVideoHeightKey: string;
global['AVVideoHeightKey'] = AVVideoHeightKey;

export let AVVideoMaxKeyFrameIntervalDurationKey: string;
global['AVVideoMaxKeyFrameIntervalDurationKey'] = AVVideoMaxKeyFrameIntervalDurationKey;

export let AVVideoMaxKeyFrameIntervalKey: string;
global['AVVideoMaxKeyFrameIntervalKey'] = AVVideoMaxKeyFrameIntervalKey;

export let AVVideoPixelAspectRatioHorizontalSpacingKey: string;
global['AVVideoPixelAspectRatioHorizontalSpacingKey'] = AVVideoPixelAspectRatioHorizontalSpacingKey;

export let AVVideoPixelAspectRatioKey: string;
global['AVVideoPixelAspectRatioKey'] = AVVideoPixelAspectRatioKey;

export let AVVideoPixelAspectRatioVerticalSpacingKey: string;
global['AVVideoPixelAspectRatioVerticalSpacingKey'] = AVVideoPixelAspectRatioVerticalSpacingKey;

export let AVVideoProfileLevelH264Baseline30: string;
global['AVVideoProfileLevelH264Baseline30'] = AVVideoProfileLevelH264Baseline30;

export let AVVideoProfileLevelH264Baseline31: string;
global['AVVideoProfileLevelH264Baseline31'] = AVVideoProfileLevelH264Baseline31;

export let AVVideoProfileLevelH264Baseline41: string;
global['AVVideoProfileLevelH264Baseline41'] = AVVideoProfileLevelH264Baseline41;

export let AVVideoProfileLevelH264BaselineAutoLevel: string;
global['AVVideoProfileLevelH264BaselineAutoLevel'] = AVVideoProfileLevelH264BaselineAutoLevel;

export let AVVideoProfileLevelH264High40: string;
global['AVVideoProfileLevelH264High40'] = AVVideoProfileLevelH264High40;

export let AVVideoProfileLevelH264High41: string;
global['AVVideoProfileLevelH264High41'] = AVVideoProfileLevelH264High41;

export let AVVideoProfileLevelH264HighAutoLevel: string;
global['AVVideoProfileLevelH264HighAutoLevel'] = AVVideoProfileLevelH264HighAutoLevel;

export let AVVideoProfileLevelH264Main30: string;
global['AVVideoProfileLevelH264Main30'] = AVVideoProfileLevelH264Main30;

export let AVVideoProfileLevelH264Main31: string;
global['AVVideoProfileLevelH264Main31'] = AVVideoProfileLevelH264Main31;

export let AVVideoProfileLevelH264Main32: string;
global['AVVideoProfileLevelH264Main32'] = AVVideoProfileLevelH264Main32;

export let AVVideoProfileLevelH264Main41: string;
global['AVVideoProfileLevelH264Main41'] = AVVideoProfileLevelH264Main41;

export let AVVideoProfileLevelH264MainAutoLevel: string;
global['AVVideoProfileLevelH264MainAutoLevel'] = AVVideoProfileLevelH264MainAutoLevel;

export let AVVideoProfileLevelKey: string;
global['AVVideoProfileLevelKey'] = AVVideoProfileLevelKey;

export let AVVideoQualityKey: string;
global['AVVideoQualityKey'] = AVVideoQualityKey;

export let AVVideoScalingModeFit: string;
global['AVVideoScalingModeFit'] = AVVideoScalingModeFit;

export let AVVideoScalingModeKey: string;
global['AVVideoScalingModeKey'] = AVVideoScalingModeKey;

export let AVVideoScalingModeResize: string;
global['AVVideoScalingModeResize'] = AVVideoScalingModeResize;

export let AVVideoScalingModeResizeAspect: string;
global['AVVideoScalingModeResizeAspect'] = AVVideoScalingModeResizeAspect;

export let AVVideoScalingModeResizeAspectFill: string;
global['AVVideoScalingModeResizeAspectFill'] = AVVideoScalingModeResizeAspectFill;

export let AVVideoTransferFunctionKey: string;
global['AVVideoTransferFunctionKey'] = AVVideoTransferFunctionKey;

export let AVVideoTransferFunction_ITU_R_2100_HLG: string;
global['AVVideoTransferFunction_ITU_R_2100_HLG'] = AVVideoTransferFunction_ITU_R_2100_HLG;

export let AVVideoTransferFunction_ITU_R_709_2: string;
global['AVVideoTransferFunction_ITU_R_709_2'] = AVVideoTransferFunction_ITU_R_709_2;

export let AVVideoTransferFunction_SMPTE_240M_1995: string;
global['AVVideoTransferFunction_SMPTE_240M_1995'] = AVVideoTransferFunction_SMPTE_240M_1995;

export let AVVideoTransferFunction_SMPTE_ST_2084_PQ: string;
global['AVVideoTransferFunction_SMPTE_ST_2084_PQ'] = AVVideoTransferFunction_SMPTE_ST_2084_PQ;

export let AVVideoWidthKey: string;
global['AVVideoWidthKey'] = AVVideoWidthKey;

export let AVVideoYCbCrMatrixKey: string;
global['AVVideoYCbCrMatrixKey'] = AVVideoYCbCrMatrixKey;

export let AVVideoYCbCrMatrix_ITU_R_2020: string;
global['AVVideoYCbCrMatrix_ITU_R_2020'] = AVVideoYCbCrMatrix_ITU_R_2020;

export let AVVideoYCbCrMatrix_ITU_R_601_4: string;
global['AVVideoYCbCrMatrix_ITU_R_601_4'] = AVVideoYCbCrMatrix_ITU_R_601_4;

export let AVVideoYCbCrMatrix_ITU_R_709_2: string;
global['AVVideoYCbCrMatrix_ITU_R_709_2'] = AVVideoYCbCrMatrix_ITU_R_709_2;

export let AVVideoYCbCrMatrix_SMPTE_240M_1995: string;
global['AVVideoYCbCrMatrix_SMPTE_240M_1995'] = AVVideoYCbCrMatrix_SMPTE_240M_1995;

export let NSAllRomanInputSourcesLocaleIdentifier: string;
global['NSAllRomanInputSourcesLocaleIdentifier'] = NSAllRomanInputSourcesLocaleIdentifier;

export let NSAnimationTriggerOrderIn: string;
global['NSAnimationTriggerOrderIn'] = NSAnimationTriggerOrderIn;

export let NSAnimationTriggerOrderOut: string;
global['NSAnimationTriggerOrderOut'] = NSAnimationTriggerOrderOut;

export let NSApp: NSApplication;
global['NSApp'] = NSApp;

export let NSBlack: number;
global['NSBlack'] = NSBlack;

export let NSDarkGray: number;
global['NSDarkGray'] = NSDarkGray;

export let NSDirectionalEdgeInsetsZero: NSDirectionalEdgeInsets;
global['NSDirectionalEdgeInsetsZero'] = NSDirectionalEdgeInsetsZero;

export let NSLightGray: number;
global['NSLightGray'] = NSLightGray;

export let NSMultipleValuesMarker: any;
global['NSMultipleValuesMarker'] = NSMultipleValuesMarker;

export let NSNoSelectionMarker: any;
global['NSNoSelectionMarker'] = NSNoSelectionMarker;

export let NSNotApplicableMarker: any;
global['NSNotApplicableMarker'] = NSNotApplicableMarker;

export let NSTypeIdentifierAddressText: string;
global['NSTypeIdentifierAddressText'] = NSTypeIdentifierAddressText;

export let NSTypeIdentifierDateText: string;
global['NSTypeIdentifierDateText'] = NSTypeIdentifierDateText;

export let NSTypeIdentifierPhoneNumberText: string;
global['NSTypeIdentifierPhoneNumberText'] = NSTypeIdentifierPhoneNumberText;

export let NSTypeIdentifierTransitInformationText: string;
global['NSTypeIdentifierTransitInformationText'] = NSTypeIdentifierTransitInformationText;

export let NSUnderlineByWord: NSUnderlineStyle;
global['NSUnderlineByWord'] = NSUnderlineByWord;

export let NSUnderlinePatternDash: NSUnderlineStyle;
global['NSUnderlinePatternDash'] = NSUnderlinePatternDash;

export let NSUnderlinePatternDashDot: NSUnderlineStyle;
global['NSUnderlinePatternDashDot'] = NSUnderlinePatternDashDot;

export let NSUnderlinePatternDashDotDot: NSUnderlineStyle;
global['NSUnderlinePatternDashDotDot'] = NSUnderlinePatternDashDotDot;

export let NSUnderlinePatternDot: NSUnderlineStyle;
global['NSUnderlinePatternDot'] = NSUnderlinePatternDot;

export let NSUnderlinePatternSolid: NSUnderlineStyle;
global['NSUnderlinePatternSolid'] = NSUnderlinePatternSolid;

export let NSUserActivityDocumentURLKey: string;
global['NSUserActivityDocumentURLKey'] = NSUserActivityDocumentURLKey;

export let NSWhite: number;
global['NSWhite'] = NSWhite;

export let NSAddedPersistentStoresKey: string;
global['NSAddedPersistentStoresKey'] = NSAddedPersistentStoresKey;

export let NSAffectedObjectsErrorKey: string;
global['NSAffectedObjectsErrorKey'] = NSAffectedObjectsErrorKey;

export let NSAffectedStoresErrorKey: string;
global['NSAffectedStoresErrorKey'] = NSAffectedStoresErrorKey;

export let NSBinaryStoreInsecureDecodingCompatibilityOption: string;
global['NSBinaryStoreInsecureDecodingCompatibilityOption'] = NSBinaryStoreInsecureDecodingCompatibilityOption;

export let NSBinaryStoreSecureDecodingClasses: string;
global['NSBinaryStoreSecureDecodingClasses'] = NSBinaryStoreSecureDecodingClasses;

export let NSBinaryStoreType: string;
global['NSBinaryStoreType'] = NSBinaryStoreType;

export let NSCoreDataCoreSpotlightExporter: string;
global['NSCoreDataCoreSpotlightExporter'] = NSCoreDataCoreSpotlightExporter;

export let NSCoreDataVersionNumber: number;
global['NSCoreDataVersionNumber'] = NSCoreDataVersionNumber;

export let NSDeletedObjectsKey: string;
global['NSDeletedObjectsKey'] = NSDeletedObjectsKey;

export let NSDetailedErrorsKey: string;
global['NSDetailedErrorsKey'] = NSDetailedErrorsKey;

export let NSErrorMergePolicy: any;
global['NSErrorMergePolicy'] = NSErrorMergePolicy;

export let NSFetchRequestExpressionType: NSExpression.ExpressionType;
global['NSFetchRequestExpressionType'] = NSFetchRequestExpressionType;

export let NSIgnorePersistentStoreVersioningOption: string;
global['NSIgnorePersistentStoreVersioningOption'] = NSIgnorePersistentStoreVersioningOption;

export let NSInMemoryStoreType: string;
global['NSInMemoryStoreType'] = NSInMemoryStoreType;

export let NSInferMappingModelAutomaticallyOption: string;
global['NSInferMappingModelAutomaticallyOption'] = NSInferMappingModelAutomaticallyOption;

export let NSInsertedObjectsKey: string;
global['NSInsertedObjectsKey'] = NSInsertedObjectsKey;

export let NSInvalidatedAllObjectsKey: string;
global['NSInvalidatedAllObjectsKey'] = NSInvalidatedAllObjectsKey;

export let NSInvalidatedObjectsKey: string;
global['NSInvalidatedObjectsKey'] = NSInvalidatedObjectsKey;

export let NSManagedObjectContextDidSaveNotification: string;
global['NSManagedObjectContextDidSaveNotification'] = NSManagedObjectContextDidSaveNotification;

export let NSManagedObjectContextObjectsDidChangeNotification: string;
global['NSManagedObjectContextObjectsDidChangeNotification'] = NSManagedObjectContextObjectsDidChangeNotification;

export let NSManagedObjectContextQueryGenerationKey: string;
global['NSManagedObjectContextQueryGenerationKey'] = NSManagedObjectContextQueryGenerationKey;

export let NSManagedObjectContextWillSaveNotification: string;
global['NSManagedObjectContextWillSaveNotification'] = NSManagedObjectContextWillSaveNotification;

export let NSMergeByPropertyObjectTrumpMergePolicy: any;
global['NSMergeByPropertyObjectTrumpMergePolicy'] = NSMergeByPropertyObjectTrumpMergePolicy;

export let NSMergeByPropertyStoreTrumpMergePolicy: any;
global['NSMergeByPropertyStoreTrumpMergePolicy'] = NSMergeByPropertyStoreTrumpMergePolicy;

export let NSMigratePersistentStoresAutomaticallyOption: string;
global['NSMigratePersistentStoresAutomaticallyOption'] = NSMigratePersistentStoresAutomaticallyOption;

export let NSMigrationDestinationObjectKey: string;
global['NSMigrationDestinationObjectKey'] = NSMigrationDestinationObjectKey;

export let NSMigrationEntityMappingKey: string;
global['NSMigrationEntityMappingKey'] = NSMigrationEntityMappingKey;

export let NSMigrationEntityPolicyKey: string;
global['NSMigrationEntityPolicyKey'] = NSMigrationEntityPolicyKey;

export let NSMigrationManagerKey: string;
global['NSMigrationManagerKey'] = NSMigrationManagerKey;

export let NSMigrationPropertyMappingKey: string;
global['NSMigrationPropertyMappingKey'] = NSMigrationPropertyMappingKey;

export let NSMigrationSourceObjectKey: string;
global['NSMigrationSourceObjectKey'] = NSMigrationSourceObjectKey;

export let NSOverwriteMergePolicy: any;
global['NSOverwriteMergePolicy'] = NSOverwriteMergePolicy;

export let NSPersistentHistoryTokenKey: string;
global['NSPersistentHistoryTokenKey'] = NSPersistentHistoryTokenKey;

export let NSPersistentHistoryTrackingKey: string;
global['NSPersistentHistoryTrackingKey'] = NSPersistentHistoryTrackingKey;

export let NSPersistentStoreConnectionPoolMaxSizeKey: string;
global['NSPersistentStoreConnectionPoolMaxSizeKey'] = NSPersistentStoreConnectionPoolMaxSizeKey;

export let NSPersistentStoreCoordinatorStoresDidChangeNotification: string;
global['NSPersistentStoreCoordinatorStoresDidChangeNotification'] = NSPersistentStoreCoordinatorStoresDidChangeNotification;

export let NSPersistentStoreCoordinatorStoresWillChangeNotification: string;
global['NSPersistentStoreCoordinatorStoresWillChangeNotification'] = NSPersistentStoreCoordinatorStoresWillChangeNotification;

export let NSPersistentStoreCoordinatorWillRemoveStoreNotification: string;
global['NSPersistentStoreCoordinatorWillRemoveStoreNotification'] = NSPersistentStoreCoordinatorWillRemoveStoreNotification;

export let NSPersistentStoreForceDestroyOption: string;
global['NSPersistentStoreForceDestroyOption'] = NSPersistentStoreForceDestroyOption;

export let NSPersistentStoreOSCompatibility: string;
global['NSPersistentStoreOSCompatibility'] = NSPersistentStoreOSCompatibility;

export let NSPersistentStoreRemoteChangeNotification: string;
global['NSPersistentStoreRemoteChangeNotification'] = NSPersistentStoreRemoteChangeNotification;

export let NSPersistentStoreRemoteChangeNotificationPostOptionKey: string;
global['NSPersistentStoreRemoteChangeNotificationPostOptionKey'] = NSPersistentStoreRemoteChangeNotificationPostOptionKey;

export let NSPersistentStoreSaveConflictsErrorKey: string;
global['NSPersistentStoreSaveConflictsErrorKey'] = NSPersistentStoreSaveConflictsErrorKey;

export let NSPersistentStoreTimeoutOption: string;
global['NSPersistentStoreTimeoutOption'] = NSPersistentStoreTimeoutOption;

export let NSPersistentStoreURLKey: string;
global['NSPersistentStoreURLKey'] = NSPersistentStoreURLKey;

export let NSReadOnlyPersistentStoreOption: string;
global['NSReadOnlyPersistentStoreOption'] = NSReadOnlyPersistentStoreOption;

export let NSRefreshedObjectsKey: string;
global['NSRefreshedObjectsKey'] = NSRefreshedObjectsKey;

export let NSRemovedPersistentStoresKey: string;
global['NSRemovedPersistentStoresKey'] = NSRemovedPersistentStoresKey;

export let NSRollbackMergePolicy: any;
global['NSRollbackMergePolicy'] = NSRollbackMergePolicy;

export let NSSQLiteAnalyzeOption: string;
global['NSSQLiteAnalyzeOption'] = NSSQLiteAnalyzeOption;

export let NSSQLiteErrorDomain: string;
global['NSSQLiteErrorDomain'] = NSSQLiteErrorDomain;

export let NSSQLiteManualVacuumOption: string;
global['NSSQLiteManualVacuumOption'] = NSSQLiteManualVacuumOption;

export let NSSQLitePragmasOption: string;
global['NSSQLitePragmasOption'] = NSSQLitePragmasOption;

export let NSSQLiteStoreType: string;
global['NSSQLiteStoreType'] = NSSQLiteStoreType;

export let NSStoreModelVersionHashesKey: string;
global['NSStoreModelVersionHashesKey'] = NSStoreModelVersionHashesKey;

export let NSStoreModelVersionIdentifiersKey: string;
global['NSStoreModelVersionIdentifiersKey'] = NSStoreModelVersionIdentifiersKey;

export let NSStoreTypeKey: string;
global['NSStoreTypeKey'] = NSStoreTypeKey;

export let NSStoreUUIDKey: string;
global['NSStoreUUIDKey'] = NSStoreUUIDKey;

export let NSUUIDChangedPersistentStoresKey: string;
global['NSUUIDChangedPersistentStoresKey'] = NSUUIDChangedPersistentStoresKey;

export let NSUpdatedObjectsKey: string;
global['NSUpdatedObjectsKey'] = NSUpdatedObjectsKey;

export let NSValidateXMLStoreOption: string;
global['NSValidateXMLStoreOption'] = NSValidateXMLStoreOption;

export let NSValidationKeyErrorKey: string;
global['NSValidationKeyErrorKey'] = NSValidationKeyErrorKey;

export let NSValidationObjectErrorKey: string;
global['NSValidationObjectErrorKey'] = NSValidationObjectErrorKey;

export let NSValidationPredicateErrorKey: string;
global['NSValidationPredicateErrorKey'] = NSValidationPredicateErrorKey;

export let NSValidationValueErrorKey: string;
global['NSValidationValueErrorKey'] = NSValidationValueErrorKey;

export let NSXMLStoreType: string;
global['NSXMLStoreType'] = NSXMLStoreType;

export let kCFAbsoluteTimeIntervalSince1904: number;
global['kCFAbsoluteTimeIntervalSince1904'] = kCFAbsoluteTimeIntervalSince1904;

export let kCFAbsoluteTimeIntervalSince1970: number;
global['kCFAbsoluteTimeIntervalSince1970'] = kCFAbsoluteTimeIntervalSince1970;

export let kCFAllocatorDefault: any;
global['kCFAllocatorDefault'] = kCFAllocatorDefault;

export let kCFAllocatorMalloc: any;
global['kCFAllocatorMalloc'] = kCFAllocatorMalloc;

export let kCFAllocatorMallocZone: any;
global['kCFAllocatorMallocZone'] = kCFAllocatorMallocZone;

export let kCFAllocatorNull: any;
global['kCFAllocatorNull'] = kCFAllocatorNull;

export let kCFAllocatorSystemDefault: any;
global['kCFAllocatorSystemDefault'] = kCFAllocatorSystemDefault;

export let kCFAllocatorUseContext: any;
global['kCFAllocatorUseContext'] = kCFAllocatorUseContext;

export let kCFBooleanFalse: number;
global['kCFBooleanFalse'] = kCFBooleanFalse;

export let kCFBooleanTrue: number;
global['kCFBooleanTrue'] = kCFBooleanTrue;

export let kCFBundleDevelopmentRegionKey: string;
global['kCFBundleDevelopmentRegionKey'] = kCFBundleDevelopmentRegionKey;

export let kCFBundleExecutableKey: string;
global['kCFBundleExecutableKey'] = kCFBundleExecutableKey;

export let kCFBundleIdentifierKey: string;
global['kCFBundleIdentifierKey'] = kCFBundleIdentifierKey;

export let kCFBundleInfoDictionaryVersionKey: string;
global['kCFBundleInfoDictionaryVersionKey'] = kCFBundleInfoDictionaryVersionKey;

export let kCFBundleLocalizationsKey: string;
global['kCFBundleLocalizationsKey'] = kCFBundleLocalizationsKey;

export let kCFBundleNameKey: string;
global['kCFBundleNameKey'] = kCFBundleNameKey;

export let kCFBundleVersionKey: string;
global['kCFBundleVersionKey'] = kCFBundleVersionKey;

export let kCFCopyStringBagCallBacks: CFBagCallBacks;
global['kCFCopyStringBagCallBacks'] = kCFCopyStringBagCallBacks;

export let kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
global['kCFCopyStringDictionaryKeyCallBacks'] = kCFCopyStringDictionaryKeyCallBacks;

export let kCFCopyStringSetCallBacks: CFSetCallBacks;
global['kCFCopyStringSetCallBacks'] = kCFCopyStringSetCallBacks;

export let kCFCoreFoundationVersionNumber: number;
global['kCFCoreFoundationVersionNumber'] = kCFCoreFoundationVersionNumber;

export let kCFErrorDescriptionKey: string;
global['kCFErrorDescriptionKey'] = kCFErrorDescriptionKey;

export let kCFErrorDomainCocoa: any;
global['kCFErrorDomainCocoa'] = kCFErrorDomainCocoa;

export let kCFErrorDomainMach: any;
global['kCFErrorDomainMach'] = kCFErrorDomainMach;

export let kCFErrorDomainOSStatus: any;
global['kCFErrorDomainOSStatus'] = kCFErrorDomainOSStatus;

export let kCFErrorDomainPOSIX: any;
global['kCFErrorDomainPOSIX'] = kCFErrorDomainPOSIX;

export let kCFErrorFilePathKey: string;
global['kCFErrorFilePathKey'] = kCFErrorFilePathKey;

export let kCFErrorLocalizedDescriptionKey: string;
global['kCFErrorLocalizedDescriptionKey'] = kCFErrorLocalizedDescriptionKey;

export let kCFErrorLocalizedFailureKey: string;
global['kCFErrorLocalizedFailureKey'] = kCFErrorLocalizedFailureKey;

export let kCFErrorLocalizedFailureReasonKey: string;
global['kCFErrorLocalizedFailureReasonKey'] = kCFErrorLocalizedFailureReasonKey;

export let kCFErrorLocalizedRecoverySuggestionKey: string;
global['kCFErrorLocalizedRecoverySuggestionKey'] = kCFErrorLocalizedRecoverySuggestionKey;

export let kCFErrorURLKey: string;
global['kCFErrorURLKey'] = kCFErrorURLKey;

export let kCFErrorUnderlyingErrorKey: string;
global['kCFErrorUnderlyingErrorKey'] = kCFErrorUnderlyingErrorKey;

export let kCFNotFound: number;
global['kCFNotFound'] = kCFNotFound;

export let kCFNull: NSNull;
global['kCFNull'] = kCFNull;

export let kCFNumberNaN: number;
global['kCFNumberNaN'] = kCFNumberNaN;

export let kCFNumberNegativeInfinity: number;
global['kCFNumberNegativeInfinity'] = kCFNumberNegativeInfinity;

export let kCFNumberPositiveInfinity: number;
global['kCFNumberPositiveInfinity'] = kCFNumberPositiveInfinity;

export let kCFPlugInDynamicRegisterFunctionKey: string;
global['kCFPlugInDynamicRegisterFunctionKey'] = kCFPlugInDynamicRegisterFunctionKey;

export let kCFPlugInDynamicRegistrationKey: string;
global['kCFPlugInDynamicRegistrationKey'] = kCFPlugInDynamicRegistrationKey;

export let kCFPlugInFactoriesKey: string;
global['kCFPlugInFactoriesKey'] = kCFPlugInFactoriesKey;

export let kCFPlugInTypesKey: string;
global['kCFPlugInTypesKey'] = kCFPlugInTypesKey;

export let kCFPlugInUnloadFunctionKey: string;
global['kCFPlugInUnloadFunctionKey'] = kCFPlugInUnloadFunctionKey;

export let kCFPreferencesAnyApplication: string;
global['kCFPreferencesAnyApplication'] = kCFPreferencesAnyApplication;

export let kCFPreferencesAnyHost: string;
global['kCFPreferencesAnyHost'] = kCFPreferencesAnyHost;

export let kCFPreferencesAnyUser: string;
global['kCFPreferencesAnyUser'] = kCFPreferencesAnyUser;

export let kCFPreferencesCurrentApplication: string;
global['kCFPreferencesCurrentApplication'] = kCFPreferencesCurrentApplication;

export let kCFPreferencesCurrentHost: string;
global['kCFPreferencesCurrentHost'] = kCFPreferencesCurrentHost;

export let kCFPreferencesCurrentUser: string;
global['kCFPreferencesCurrentUser'] = kCFPreferencesCurrentUser;

export let kCFSocketCommandKey: string;
global['kCFSocketCommandKey'] = kCFSocketCommandKey;

export let kCFSocketErrorKey: string;
global['kCFSocketErrorKey'] = kCFSocketErrorKey;

export let kCFSocketNameKey: string;
global['kCFSocketNameKey'] = kCFSocketNameKey;

export let kCFSocketRegisterCommand: string;
global['kCFSocketRegisterCommand'] = kCFSocketRegisterCommand;

export let kCFSocketResultKey: string;
global['kCFSocketResultKey'] = kCFSocketResultKey;

export let kCFSocketRetrieveCommand: string;
global['kCFSocketRetrieveCommand'] = kCFSocketRetrieveCommand;

export let kCFSocketValueKey: string;
global['kCFSocketValueKey'] = kCFSocketValueKey;

export let kCFStreamErrorDomainSOCKS: number;
global['kCFStreamErrorDomainSOCKS'] = kCFStreamErrorDomainSOCKS;

export let kCFStreamErrorDomainSSL: number;
global['kCFStreamErrorDomainSSL'] = kCFStreamErrorDomainSSL;

export let kCFStreamPropertySOCKSPassword: string;
global['kCFStreamPropertySOCKSPassword'] = kCFStreamPropertySOCKSPassword;

export let kCFStreamPropertySOCKSProxy: string;
global['kCFStreamPropertySOCKSProxy'] = kCFStreamPropertySOCKSProxy;

export let kCFStreamPropertySOCKSProxyHost: string;
global['kCFStreamPropertySOCKSProxyHost'] = kCFStreamPropertySOCKSProxyHost;

export let kCFStreamPropertySOCKSProxyPort: string;
global['kCFStreamPropertySOCKSProxyPort'] = kCFStreamPropertySOCKSProxyPort;

export let kCFStreamPropertySOCKSUser: string;
global['kCFStreamPropertySOCKSUser'] = kCFStreamPropertySOCKSUser;

export let kCFStreamPropertySOCKSVersion: string;
global['kCFStreamPropertySOCKSVersion'] = kCFStreamPropertySOCKSVersion;

export let kCFStreamPropertyShouldCloseNativeSocket: string;
global['kCFStreamPropertyShouldCloseNativeSocket'] = kCFStreamPropertyShouldCloseNativeSocket;

export let kCFStreamPropertySocketSecurityLevel: string;
global['kCFStreamPropertySocketSecurityLevel'] = kCFStreamPropertySocketSecurityLevel;

export let kCFStreamSocketSOCKSVersion4: string;
global['kCFStreamSocketSOCKSVersion4'] = kCFStreamSocketSOCKSVersion4;

export let kCFStreamSocketSOCKSVersion5: string;
global['kCFStreamSocketSOCKSVersion5'] = kCFStreamSocketSOCKSVersion5;

export let kCFStreamSocketSecurityLevelNegotiatedSSL: string;
global['kCFStreamSocketSecurityLevelNegotiatedSSL'] = kCFStreamSocketSecurityLevelNegotiatedSSL;

export let kCFStreamSocketSecurityLevelNone: string;
global['kCFStreamSocketSecurityLevelNone'] = kCFStreamSocketSecurityLevelNone;

export let kCFStreamSocketSecurityLevelTLSv1: string;
global['kCFStreamSocketSecurityLevelTLSv1'] = kCFStreamSocketSecurityLevelTLSv1;

export let kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
global['kCFStringBinaryHeapCallBacks'] = kCFStringBinaryHeapCallBacks;

export let kCFStringTransformFullwidthHalfwidth: string;
global['kCFStringTransformFullwidthHalfwidth'] = kCFStringTransformFullwidthHalfwidth;

export let kCFStringTransformHiraganaKatakana: string;
global['kCFStringTransformHiraganaKatakana'] = kCFStringTransformHiraganaKatakana;

export let kCFStringTransformLatinArabic: string;
global['kCFStringTransformLatinArabic'] = kCFStringTransformLatinArabic;

export let kCFStringTransformLatinCyrillic: string;
global['kCFStringTransformLatinCyrillic'] = kCFStringTransformLatinCyrillic;

export let kCFStringTransformLatinGreek: string;
global['kCFStringTransformLatinGreek'] = kCFStringTransformLatinGreek;

export let kCFStringTransformLatinHangul: string;
global['kCFStringTransformLatinHangul'] = kCFStringTransformLatinHangul;

export let kCFStringTransformLatinHebrew: string;
global['kCFStringTransformLatinHebrew'] = kCFStringTransformLatinHebrew;

export let kCFStringTransformLatinHiragana: string;
global['kCFStringTransformLatinHiragana'] = kCFStringTransformLatinHiragana;

export let kCFStringTransformLatinKatakana: string;
global['kCFStringTransformLatinKatakana'] = kCFStringTransformLatinKatakana;

export let kCFStringTransformLatinThai: string;
global['kCFStringTransformLatinThai'] = kCFStringTransformLatinThai;

export let kCFStringTransformMandarinLatin: string;
global['kCFStringTransformMandarinLatin'] = kCFStringTransformMandarinLatin;

export let kCFStringTransformStripCombiningMarks: string;
global['kCFStringTransformStripCombiningMarks'] = kCFStringTransformStripCombiningMarks;

export let kCFStringTransformStripDiacritics: string;
global['kCFStringTransformStripDiacritics'] = kCFStringTransformStripDiacritics;

export let kCFStringTransformToLatin: string;
global['kCFStringTransformToLatin'] = kCFStringTransformToLatin;

export let kCFStringTransformToUnicodeName: string;
global['kCFStringTransformToUnicodeName'] = kCFStringTransformToUnicodeName;

export let kCFStringTransformToXMLHex: string;
global['kCFStringTransformToXMLHex'] = kCFStringTransformToXMLHex;

export let kCFTypeArrayCallBacks: CFArrayCallBacks;
global['kCFTypeArrayCallBacks'] = kCFTypeArrayCallBacks;

export let kCFTypeBagCallBacks: CFBagCallBacks;
global['kCFTypeBagCallBacks'] = kCFTypeBagCallBacks;

export let kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
global['kCFTypeDictionaryKeyCallBacks'] = kCFTypeDictionaryKeyCallBacks;

export let kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
global['kCFTypeDictionaryValueCallBacks'] = kCFTypeDictionaryValueCallBacks;

export let kCFTypeSetCallBacks: CFSetCallBacks;
global['kCFTypeSetCallBacks'] = kCFTypeSetCallBacks;

export let kCFURLAddedToDirectoryDateKey: string;
global['kCFURLAddedToDirectoryDateKey'] = kCFURLAddedToDirectoryDateKey;

export let kCFURLApplicationIsScriptableKey: string;
global['kCFURLApplicationIsScriptableKey'] = kCFURLApplicationIsScriptableKey;

export let kCFURLAttributeModificationDateKey: string;
global['kCFURLAttributeModificationDateKey'] = kCFURLAttributeModificationDateKey;

export let kCFURLCanonicalPathKey: string;
global['kCFURLCanonicalPathKey'] = kCFURLCanonicalPathKey;

export let kCFURLContentAccessDateKey: string;
global['kCFURLContentAccessDateKey'] = kCFURLContentAccessDateKey;

export let kCFURLContentModificationDateKey: string;
global['kCFURLContentModificationDateKey'] = kCFURLContentModificationDateKey;

export let kCFURLCreationDateKey: string;
global['kCFURLCreationDateKey'] = kCFURLCreationDateKey;

export let kCFURLDocumentIdentifierKey: string;
global['kCFURLDocumentIdentifierKey'] = kCFURLDocumentIdentifierKey;

export let kCFURLFileAllocatedSizeKey: string;
global['kCFURLFileAllocatedSizeKey'] = kCFURLFileAllocatedSizeKey;

export let kCFURLFileResourceIdentifierKey: string;
global['kCFURLFileResourceIdentifierKey'] = kCFURLFileResourceIdentifierKey;

export let kCFURLFileResourceTypeBlockSpecial: string;
global['kCFURLFileResourceTypeBlockSpecial'] = kCFURLFileResourceTypeBlockSpecial;

export let kCFURLFileResourceTypeCharacterSpecial: string;
global['kCFURLFileResourceTypeCharacterSpecial'] = kCFURLFileResourceTypeCharacterSpecial;

export let kCFURLFileResourceTypeDirectory: string;
global['kCFURLFileResourceTypeDirectory'] = kCFURLFileResourceTypeDirectory;

export let kCFURLFileResourceTypeKey: string;
global['kCFURLFileResourceTypeKey'] = kCFURLFileResourceTypeKey;

export let kCFURLFileResourceTypeNamedPipe: string;
global['kCFURLFileResourceTypeNamedPipe'] = kCFURLFileResourceTypeNamedPipe;

export let kCFURLFileResourceTypeRegular: string;
global['kCFURLFileResourceTypeRegular'] = kCFURLFileResourceTypeRegular;

export let kCFURLFileResourceTypeSocket: string;
global['kCFURLFileResourceTypeSocket'] = kCFURLFileResourceTypeSocket;

export let kCFURLFileResourceTypeSymbolicLink: string;
global['kCFURLFileResourceTypeSymbolicLink'] = kCFURLFileResourceTypeSymbolicLink;

export let kCFURLFileResourceTypeUnknown: string;
global['kCFURLFileResourceTypeUnknown'] = kCFURLFileResourceTypeUnknown;

export let kCFURLFileSecurityKey: string;
global['kCFURLFileSecurityKey'] = kCFURLFileSecurityKey;

export let kCFURLFileSizeKey: string;
global['kCFURLFileSizeKey'] = kCFURLFileSizeKey;

export let kCFURLGenerationIdentifierKey: string;
global['kCFURLGenerationIdentifierKey'] = kCFURLGenerationIdentifierKey;

export let kCFURLHasHiddenExtensionKey: string;
global['kCFURLHasHiddenExtensionKey'] = kCFURLHasHiddenExtensionKey;

export let kCFURLIsAliasFileKey: string;
global['kCFURLIsAliasFileKey'] = kCFURLIsAliasFileKey;

export let kCFURLIsApplicationKey: string;
global['kCFURLIsApplicationKey'] = kCFURLIsApplicationKey;

export let kCFURLIsDirectoryKey: string;
global['kCFURLIsDirectoryKey'] = kCFURLIsDirectoryKey;

export let kCFURLIsExcludedFromBackupKey: string;
global['kCFURLIsExcludedFromBackupKey'] = kCFURLIsExcludedFromBackupKey;

export let kCFURLIsExecutableKey: string;
global['kCFURLIsExecutableKey'] = kCFURLIsExecutableKey;

export let kCFURLIsHiddenKey: string;
global['kCFURLIsHiddenKey'] = kCFURLIsHiddenKey;

export let kCFURLIsMountTriggerKey: string;
global['kCFURLIsMountTriggerKey'] = kCFURLIsMountTriggerKey;

export let kCFURLIsPackageKey: string;
global['kCFURLIsPackageKey'] = kCFURLIsPackageKey;

export let kCFURLIsReadableKey: string;
global['kCFURLIsReadableKey'] = kCFURLIsReadableKey;

export let kCFURLIsRegularFileKey: string;
global['kCFURLIsRegularFileKey'] = kCFURLIsRegularFileKey;

export let kCFURLIsSymbolicLinkKey: string;
global['kCFURLIsSymbolicLinkKey'] = kCFURLIsSymbolicLinkKey;

export let kCFURLIsSystemImmutableKey: string;
global['kCFURLIsSystemImmutableKey'] = kCFURLIsSystemImmutableKey;

export let kCFURLIsUbiquitousItemKey: string;
global['kCFURLIsUbiquitousItemKey'] = kCFURLIsUbiquitousItemKey;

export let kCFURLIsUserImmutableKey: string;
global['kCFURLIsUserImmutableKey'] = kCFURLIsUserImmutableKey;

export let kCFURLIsVolumeKey: string;
global['kCFURLIsVolumeKey'] = kCFURLIsVolumeKey;

export let kCFURLIsWritableKey: string;
global['kCFURLIsWritableKey'] = kCFURLIsWritableKey;

export let kCFURLKeysOfUnsetValuesKey: string;
global['kCFURLKeysOfUnsetValuesKey'] = kCFURLKeysOfUnsetValuesKey;

export let kCFURLLabelNumberKey: string;
global['kCFURLLabelNumberKey'] = kCFURLLabelNumberKey;

export let kCFURLLinkCountKey: string;
global['kCFURLLinkCountKey'] = kCFURLLinkCountKey;

export let kCFURLLocalizedLabelKey: string;
global['kCFURLLocalizedLabelKey'] = kCFURLLocalizedLabelKey;

export let kCFURLLocalizedNameKey: string;
global['kCFURLLocalizedNameKey'] = kCFURLLocalizedNameKey;

export let kCFURLLocalizedTypeDescriptionKey: string;
global['kCFURLLocalizedTypeDescriptionKey'] = kCFURLLocalizedTypeDescriptionKey;

export let kCFURLNameKey: string;
global['kCFURLNameKey'] = kCFURLNameKey;

export let kCFURLParentDirectoryURLKey: string;
global['kCFURLParentDirectoryURLKey'] = kCFURLParentDirectoryURLKey;

export let kCFURLPathKey: string;
global['kCFURLPathKey'] = kCFURLPathKey;

export let kCFURLPreferredIOBlockSizeKey: string;
global['kCFURLPreferredIOBlockSizeKey'] = kCFURLPreferredIOBlockSizeKey;

export let kCFURLQuarantinePropertiesKey: string;
global['kCFURLQuarantinePropertiesKey'] = kCFURLQuarantinePropertiesKey;

export let kCFURLTagNamesKey: string;
global['kCFURLTagNamesKey'] = kCFURLTagNamesKey;

export let kCFURLTotalFileAllocatedSizeKey: string;
global['kCFURLTotalFileAllocatedSizeKey'] = kCFURLTotalFileAllocatedSizeKey;

export let kCFURLTotalFileSizeKey: string;
global['kCFURLTotalFileSizeKey'] = kCFURLTotalFileSizeKey;

export let kCFURLTypeIdentifierKey: string;
global['kCFURLTypeIdentifierKey'] = kCFURLTypeIdentifierKey;

export let kCFURLUbiquitousItemDownloadingErrorKey: string;
global['kCFURLUbiquitousItemDownloadingErrorKey'] = kCFURLUbiquitousItemDownloadingErrorKey;

export let kCFURLUbiquitousItemDownloadingStatusCurrent: string;
global['kCFURLUbiquitousItemDownloadingStatusCurrent'] = kCFURLUbiquitousItemDownloadingStatusCurrent;

export let kCFURLUbiquitousItemDownloadingStatusDownloaded: string;
global['kCFURLUbiquitousItemDownloadingStatusDownloaded'] = kCFURLUbiquitousItemDownloadingStatusDownloaded;

export let kCFURLUbiquitousItemDownloadingStatusKey: string;
global['kCFURLUbiquitousItemDownloadingStatusKey'] = kCFURLUbiquitousItemDownloadingStatusKey;

export let kCFURLUbiquitousItemDownloadingStatusNotDownloaded: string;
global['kCFURLUbiquitousItemDownloadingStatusNotDownloaded'] = kCFURLUbiquitousItemDownloadingStatusNotDownloaded;

export let kCFURLUbiquitousItemHasUnresolvedConflictsKey: string;
global['kCFURLUbiquitousItemHasUnresolvedConflictsKey'] = kCFURLUbiquitousItemHasUnresolvedConflictsKey;

export let kCFURLUbiquitousItemIsDownloadingKey: string;
global['kCFURLUbiquitousItemIsDownloadingKey'] = kCFURLUbiquitousItemIsDownloadingKey;

export let kCFURLUbiquitousItemIsUploadedKey: string;
global['kCFURLUbiquitousItemIsUploadedKey'] = kCFURLUbiquitousItemIsUploadedKey;

export let kCFURLUbiquitousItemIsUploadingKey: string;
global['kCFURLUbiquitousItemIsUploadingKey'] = kCFURLUbiquitousItemIsUploadingKey;

export let kCFURLUbiquitousItemUploadingErrorKey: string;
global['kCFURLUbiquitousItemUploadingErrorKey'] = kCFURLUbiquitousItemUploadingErrorKey;

export let kCFURLVolumeAvailableCapacityForImportantUsageKey: string;
global['kCFURLVolumeAvailableCapacityForImportantUsageKey'] = kCFURLVolumeAvailableCapacityForImportantUsageKey;

export let kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: string;
global['kCFURLVolumeAvailableCapacityForOpportunisticUsageKey'] = kCFURLVolumeAvailableCapacityForOpportunisticUsageKey;

export let kCFURLVolumeAvailableCapacityKey: string;
global['kCFURLVolumeAvailableCapacityKey'] = kCFURLVolumeAvailableCapacityKey;

export let kCFURLVolumeCreationDateKey: string;
global['kCFURLVolumeCreationDateKey'] = kCFURLVolumeCreationDateKey;

export let kCFURLVolumeIdentifierKey: string;
global['kCFURLVolumeIdentifierKey'] = kCFURLVolumeIdentifierKey;

export let kCFURLVolumeIsAutomountedKey: string;
global['kCFURLVolumeIsAutomountedKey'] = kCFURLVolumeIsAutomountedKey;

export let kCFURLVolumeIsBrowsableKey: string;
global['kCFURLVolumeIsBrowsableKey'] = kCFURLVolumeIsBrowsableKey;

export let kCFURLVolumeIsEjectableKey: string;
global['kCFURLVolumeIsEjectableKey'] = kCFURLVolumeIsEjectableKey;

export let kCFURLVolumeIsEncryptedKey: string;
global['kCFURLVolumeIsEncryptedKey'] = kCFURLVolumeIsEncryptedKey;

export let kCFURLVolumeIsInternalKey: string;
global['kCFURLVolumeIsInternalKey'] = kCFURLVolumeIsInternalKey;

export let kCFURLVolumeIsJournalingKey: string;
global['kCFURLVolumeIsJournalingKey'] = kCFURLVolumeIsJournalingKey;

export let kCFURLVolumeIsLocalKey: string;
global['kCFURLVolumeIsLocalKey'] = kCFURLVolumeIsLocalKey;

export let kCFURLVolumeIsReadOnlyKey: string;
global['kCFURLVolumeIsReadOnlyKey'] = kCFURLVolumeIsReadOnlyKey;

export let kCFURLVolumeIsRemovableKey: string;
global['kCFURLVolumeIsRemovableKey'] = kCFURLVolumeIsRemovableKey;

export let kCFURLVolumeIsRootFileSystemKey: string;
global['kCFURLVolumeIsRootFileSystemKey'] = kCFURLVolumeIsRootFileSystemKey;

export let kCFURLVolumeLocalizedFormatDescriptionKey: string;
global['kCFURLVolumeLocalizedFormatDescriptionKey'] = kCFURLVolumeLocalizedFormatDescriptionKey;

export let kCFURLVolumeLocalizedNameKey: string;
global['kCFURLVolumeLocalizedNameKey'] = kCFURLVolumeLocalizedNameKey;

export let kCFURLVolumeMaximumFileSizeKey: string;
global['kCFURLVolumeMaximumFileSizeKey'] = kCFURLVolumeMaximumFileSizeKey;

export let kCFURLVolumeNameKey: string;
global['kCFURLVolumeNameKey'] = kCFURLVolumeNameKey;

export let kCFURLVolumeResourceCountKey: string;
global['kCFURLVolumeResourceCountKey'] = kCFURLVolumeResourceCountKey;

export let kCFURLVolumeSupportsAccessPermissionsKey: string;
global['kCFURLVolumeSupportsAccessPermissionsKey'] = kCFURLVolumeSupportsAccessPermissionsKey;

export let kCFURLVolumeSupportsAdvisoryFileLockingKey: string;
global['kCFURLVolumeSupportsAdvisoryFileLockingKey'] = kCFURLVolumeSupportsAdvisoryFileLockingKey;

export let kCFURLVolumeSupportsCasePreservedNamesKey: string;
global['kCFURLVolumeSupportsCasePreservedNamesKey'] = kCFURLVolumeSupportsCasePreservedNamesKey;

export let kCFURLVolumeSupportsCaseSensitiveNamesKey: string;
global['kCFURLVolumeSupportsCaseSensitiveNamesKey'] = kCFURLVolumeSupportsCaseSensitiveNamesKey;

export let kCFURLVolumeSupportsCompressionKey: string;
global['kCFURLVolumeSupportsCompressionKey'] = kCFURLVolumeSupportsCompressionKey;

export let kCFURLVolumeSupportsExclusiveRenamingKey: string;
global['kCFURLVolumeSupportsExclusiveRenamingKey'] = kCFURLVolumeSupportsExclusiveRenamingKey;

export let kCFURLVolumeSupportsExtendedSecurityKey: string;
global['kCFURLVolumeSupportsExtendedSecurityKey'] = kCFURLVolumeSupportsExtendedSecurityKey;

export let kCFURLVolumeSupportsFileCloningKey: string;
global['kCFURLVolumeSupportsFileCloningKey'] = kCFURLVolumeSupportsFileCloningKey;

export let kCFURLVolumeSupportsHardLinksKey: string;
global['kCFURLVolumeSupportsHardLinksKey'] = kCFURLVolumeSupportsHardLinksKey;

export let kCFURLVolumeSupportsImmutableFilesKey: string;
global['kCFURLVolumeSupportsImmutableFilesKey'] = kCFURLVolumeSupportsImmutableFilesKey;

export let kCFURLVolumeSupportsJournalingKey: string;
global['kCFURLVolumeSupportsJournalingKey'] = kCFURLVolumeSupportsJournalingKey;

export let kCFURLVolumeSupportsPersistentIDsKey: string;
global['kCFURLVolumeSupportsPersistentIDsKey'] = kCFURLVolumeSupportsPersistentIDsKey;

export let kCFURLVolumeSupportsRenamingKey: string;
global['kCFURLVolumeSupportsRenamingKey'] = kCFURLVolumeSupportsRenamingKey;

export let kCFURLVolumeSupportsRootDirectoryDatesKey: string;
global['kCFURLVolumeSupportsRootDirectoryDatesKey'] = kCFURLVolumeSupportsRootDirectoryDatesKey;

export let kCFURLVolumeSupportsSparseFilesKey: string;
global['kCFURLVolumeSupportsSparseFilesKey'] = kCFURLVolumeSupportsSparseFilesKey;

export let kCFURLVolumeSupportsSwapRenamingKey: string;
global['kCFURLVolumeSupportsSwapRenamingKey'] = kCFURLVolumeSupportsSwapRenamingKey;

export let kCFURLVolumeSupportsSymbolicLinksKey: string;
global['kCFURLVolumeSupportsSymbolicLinksKey'] = kCFURLVolumeSupportsSymbolicLinksKey;

export let kCFURLVolumeSupportsVolumeSizesKey: string;
global['kCFURLVolumeSupportsVolumeSizesKey'] = kCFURLVolumeSupportsVolumeSizesKey;

export let kCFURLVolumeSupportsZeroRunsKey: string;
global['kCFURLVolumeSupportsZeroRunsKey'] = kCFURLVolumeSupportsZeroRunsKey;

export let kCFURLVolumeTotalCapacityKey: string;
global['kCFURLVolumeTotalCapacityKey'] = kCFURLVolumeTotalCapacityKey;

export let kCFURLVolumeURLForRemountingKey: string;
global['kCFURLVolumeURLForRemountingKey'] = kCFURLVolumeURLForRemountingKey;

export let kCFURLVolumeURLKey: string;
global['kCFURLVolumeURLKey'] = kCFURLVolumeURLKey;

export let kCFURLVolumeUUIDStringKey: string;
global['kCFURLVolumeUUIDStringKey'] = kCFURLVolumeUUIDStringKey;

export let kCFUserNotificationAlertHeaderKey: string;
global['kCFUserNotificationAlertHeaderKey'] = kCFUserNotificationAlertHeaderKey;

export let kCFUserNotificationAlertMessageKey: string;
global['kCFUserNotificationAlertMessageKey'] = kCFUserNotificationAlertMessageKey;

export let kCFUserNotificationAlertTopMostKey: string;
global['kCFUserNotificationAlertTopMostKey'] = kCFUserNotificationAlertTopMostKey;

export let kCFUserNotificationAlternateButtonTitleKey: string;
global['kCFUserNotificationAlternateButtonTitleKey'] = kCFUserNotificationAlternateButtonTitleKey;

export let kCFUserNotificationCheckBoxTitlesKey: string;
global['kCFUserNotificationCheckBoxTitlesKey'] = kCFUserNotificationCheckBoxTitlesKey;

export let kCFUserNotificationDefaultButtonTitleKey: string;
global['kCFUserNotificationDefaultButtonTitleKey'] = kCFUserNotificationDefaultButtonTitleKey;

export let kCFUserNotificationIconURLKey: string;
global['kCFUserNotificationIconURLKey'] = kCFUserNotificationIconURLKey;

export let kCFUserNotificationKeyboardTypesKey: string;
global['kCFUserNotificationKeyboardTypesKey'] = kCFUserNotificationKeyboardTypesKey;

export let kCFUserNotificationLocalizationURLKey: string;
global['kCFUserNotificationLocalizationURLKey'] = kCFUserNotificationLocalizationURLKey;

export let kCFUserNotificationOtherButtonTitleKey: string;
global['kCFUserNotificationOtherButtonTitleKey'] = kCFUserNotificationOtherButtonTitleKey;

export let kCFUserNotificationPopUpSelectionKey: string;
global['kCFUserNotificationPopUpSelectionKey'] = kCFUserNotificationPopUpSelectionKey;

export let kCFUserNotificationPopUpTitlesKey: string;
global['kCFUserNotificationPopUpTitlesKey'] = kCFUserNotificationPopUpTitlesKey;

export let kCFUserNotificationProgressIndicatorValueKey: string;
global['kCFUserNotificationProgressIndicatorValueKey'] = kCFUserNotificationProgressIndicatorValueKey;

export let kCFUserNotificationSoundURLKey: string;
global['kCFUserNotificationSoundURLKey'] = kCFUserNotificationSoundURLKey;

export let kCFUserNotificationTextFieldTitlesKey: string;
global['kCFUserNotificationTextFieldTitlesKey'] = kCFUserNotificationTextFieldTitlesKey;

export let kCFUserNotificationTextFieldValuesKey: string;
global['kCFUserNotificationTextFieldValuesKey'] = kCFUserNotificationTextFieldValuesKey;

export let kCFXMLTreeErrorDescription: string;
global['kCFXMLTreeErrorDescription'] = kCFXMLTreeErrorDescription;

export let kCFXMLTreeErrorLineNumber: string;
global['kCFXMLTreeErrorLineNumber'] = kCFXMLTreeErrorLineNumber;

export let kCFXMLTreeErrorLocation: string;
global['kCFXMLTreeErrorLocation'] = kCFXMLTreeErrorLocation;

export let kCFXMLTreeErrorStatusCode: string;
global['kCFXMLTreeErrorStatusCode'] = kCFXMLTreeErrorStatusCode;

export let kCGDisplayShowDuplicateLowResolutionModes: string;
global['kCGDisplayShowDuplicateLowResolutionModes'] = kCGDisplayShowDuplicateLowResolutionModes;

export let kCGFontIndexInvalid: number;
global['kCGFontIndexInvalid'] = kCGFontIndexInvalid;

export let kCGFontIndexMax: number;
global['kCGFontIndexMax'] = kCGFontIndexMax;

export let kCGGlyphMax: number;
global['kCGGlyphMax'] = kCGGlyphMax;

export let kCGPDFContextAccessPermissions: string;
global['kCGPDFContextAccessPermissions'] = kCGPDFContextAccessPermissions;

export let kCGPDFContextAllowsCopying: string;
global['kCGPDFContextAllowsCopying'] = kCGPDFContextAllowsCopying;

export let kCGPDFContextAllowsPrinting: string;
global['kCGPDFContextAllowsPrinting'] = kCGPDFContextAllowsPrinting;

export let kCGPDFContextArtBox: string;
global['kCGPDFContextArtBox'] = kCGPDFContextArtBox;

export let kCGPDFContextAuthor: string;
global['kCGPDFContextAuthor'] = kCGPDFContextAuthor;

export let kCGPDFContextBleedBox: string;
global['kCGPDFContextBleedBox'] = kCGPDFContextBleedBox;

export let kCGPDFContextCreator: string;
global['kCGPDFContextCreator'] = kCGPDFContextCreator;

export let kCGPDFContextCropBox: string;
global['kCGPDFContextCropBox'] = kCGPDFContextCropBox;

export let kCGPDFContextEncryptionKeyLength: string;
global['kCGPDFContextEncryptionKeyLength'] = kCGPDFContextEncryptionKeyLength;

export let kCGPDFContextKeywords: string;
global['kCGPDFContextKeywords'] = kCGPDFContextKeywords;

export let kCGPDFContextMediaBox: string;
global['kCGPDFContextMediaBox'] = kCGPDFContextMediaBox;

export let kCGPDFContextOutputIntent: string;
global['kCGPDFContextOutputIntent'] = kCGPDFContextOutputIntent;

export let kCGPDFContextOutputIntents: string;
global['kCGPDFContextOutputIntents'] = kCGPDFContextOutputIntents;

export let kCGPDFContextOwnerPassword: string;
global['kCGPDFContextOwnerPassword'] = kCGPDFContextOwnerPassword;

export let kCGPDFContextSubject: string;
global['kCGPDFContextSubject'] = kCGPDFContextSubject;

export let kCGPDFContextTitle: string;
global['kCGPDFContextTitle'] = kCGPDFContextTitle;

export let kCGPDFContextTrimBox: string;
global['kCGPDFContextTrimBox'] = kCGPDFContextTrimBox;

export let kCGPDFContextUserPassword: string;
global['kCGPDFContextUserPassword'] = kCGPDFContextUserPassword;

export let kCGPDFOutlineChildren: string;
global['kCGPDFOutlineChildren'] = kCGPDFOutlineChildren;

export let kCGPDFOutlineDestination: string;
global['kCGPDFOutlineDestination'] = kCGPDFOutlineDestination;

export let kCGPDFOutlineDestinationRect: string;
global['kCGPDFOutlineDestinationRect'] = kCGPDFOutlineDestinationRect;

export let kCGPDFOutlineTitle: string;
global['kCGPDFOutlineTitle'] = kCGPDFOutlineTitle;

export let kCGPDFXDestinationOutputProfile: string;
global['kCGPDFXDestinationOutputProfile'] = kCGPDFXDestinationOutputProfile;

export let kCGPDFXInfo: string;
global['kCGPDFXInfo'] = kCGPDFXInfo;

export let kCGPDFXOutputCondition: string;
global['kCGPDFXOutputCondition'] = kCGPDFXOutputCondition;

export let kCGPDFXOutputConditionIdentifier: string;
global['kCGPDFXOutputConditionIdentifier'] = kCGPDFXOutputConditionIdentifier;

export let kCGPDFXOutputIntentSubtype: string;
global['kCGPDFXOutputIntentSubtype'] = kCGPDFXOutputIntentSubtype;

export let kCGPDFXRegistryName: string;
global['kCGPDFXRegistryName'] = kCGPDFXRegistryName;

export let kCGWindowAlpha: string;
global['kCGWindowAlpha'] = kCGWindowAlpha;

export let kCGWindowBackingLocationVideoMemory: string;
global['kCGWindowBackingLocationVideoMemory'] = kCGWindowBackingLocationVideoMemory;

export let kCGWindowBounds: string;
global['kCGWindowBounds'] = kCGWindowBounds;

export let kCGWindowIsOnscreen: string;
global['kCGWindowIsOnscreen'] = kCGWindowIsOnscreen;

export let kCGWindowLayer: string;
global['kCGWindowLayer'] = kCGWindowLayer;

export let kCGWindowMemoryUsage: string;
global['kCGWindowMemoryUsage'] = kCGWindowMemoryUsage;

export let kCGWindowName: string;
global['kCGWindowName'] = kCGWindowName;

export let kCGWindowNumber: string;
global['kCGWindowNumber'] = kCGWindowNumber;

export let kCGWindowOwnerName: string;
global['kCGWindowOwnerName'] = kCGWindowOwnerName;

export let kCGWindowOwnerPID: string;
global['kCGWindowOwnerPID'] = kCGWindowOwnerPID;

export let kCGWindowSharingState: string;
global['kCGWindowSharingState'] = kCGWindowSharingState;

export let kCGWindowStoreType: string;
global['kCGWindowStoreType'] = kCGWindowStoreType;

export let CIDetectorAccuracy: string;
global['CIDetectorAccuracy'] = CIDetectorAccuracy;

export let CIDetectorAccuracyHigh: string;
global['CIDetectorAccuracyHigh'] = CIDetectorAccuracyHigh;

export let CIDetectorAccuracyLow: string;
global['CIDetectorAccuracyLow'] = CIDetectorAccuracyLow;

export let CIDetectorAspectRatio: string;
global['CIDetectorAspectRatio'] = CIDetectorAspectRatio;

export let CIDetectorEyeBlink: string;
global['CIDetectorEyeBlink'] = CIDetectorEyeBlink;

export let CIDetectorFocalLength: string;
global['CIDetectorFocalLength'] = CIDetectorFocalLength;

export let CIDetectorImageOrientation: string;
global['CIDetectorImageOrientation'] = CIDetectorImageOrientation;

export let CIDetectorMaxFeatureCount: string;
global['CIDetectorMaxFeatureCount'] = CIDetectorMaxFeatureCount;

export let CIDetectorMinFeatureSize: string;
global['CIDetectorMinFeatureSize'] = CIDetectorMinFeatureSize;

export let CIDetectorNumberOfAngles: string;
global['CIDetectorNumberOfAngles'] = CIDetectorNumberOfAngles;

export let CIDetectorReturnSubFeatures: string;
global['CIDetectorReturnSubFeatures'] = CIDetectorReturnSubFeatures;

export let CIDetectorSmile: string;
global['CIDetectorSmile'] = CIDetectorSmile;

export let CIDetectorTracking: string;
global['CIDetectorTracking'] = CIDetectorTracking;

export let CIDetectorTypeFace: string;
global['CIDetectorTypeFace'] = CIDetectorTypeFace;

export let CIDetectorTypeQRCode: string;
global['CIDetectorTypeQRCode'] = CIDetectorTypeQRCode;

export let CIDetectorTypeRectangle: string;
global['CIDetectorTypeRectangle'] = CIDetectorTypeRectangle;

export let CIDetectorTypeText: string;
global['CIDetectorTypeText'] = CIDetectorTypeText;

export let CIFeatureTypeFace: string;
global['CIFeatureTypeFace'] = CIFeatureTypeFace;

export let CIFeatureTypeQRCode: string;
global['CIFeatureTypeQRCode'] = CIFeatureTypeQRCode;

export let CIFeatureTypeRectangle: string;
global['CIFeatureTypeRectangle'] = CIFeatureTypeRectangle;

export let CIFeatureTypeText: string;
global['CIFeatureTypeText'] = CIFeatureTypeText;

export let kCIApplyOptionColorSpace: string;
global['kCIApplyOptionColorSpace'] = kCIApplyOptionColorSpace;

export let kCIApplyOptionDefinition: string;
global['kCIApplyOptionDefinition'] = kCIApplyOptionDefinition;

export let kCIApplyOptionExtent: string;
global['kCIApplyOptionExtent'] = kCIApplyOptionExtent;

export let kCIApplyOptionUserInfo: string;
global['kCIApplyOptionUserInfo'] = kCIApplyOptionUserInfo;

export let kCIAttributeClass: string;
global['kCIAttributeClass'] = kCIAttributeClass;

export let kCIAttributeDefault: string;
global['kCIAttributeDefault'] = kCIAttributeDefault;

export let kCIAttributeDescription: string;
global['kCIAttributeDescription'] = kCIAttributeDescription;

export let kCIAttributeDisplayName: string;
global['kCIAttributeDisplayName'] = kCIAttributeDisplayName;

export let kCIAttributeFilterAvailable_Mac: string;
global['kCIAttributeFilterAvailable_Mac'] = kCIAttributeFilterAvailable_Mac;

export let kCIAttributeFilterAvailable_iOS: string;
global['kCIAttributeFilterAvailable_iOS'] = kCIAttributeFilterAvailable_iOS;

export let kCIAttributeFilterCategories: string;
global['kCIAttributeFilterCategories'] = kCIAttributeFilterCategories;

export let kCIAttributeFilterDisplayName: string;
global['kCIAttributeFilterDisplayName'] = kCIAttributeFilterDisplayName;

export let kCIAttributeFilterName: string;
global['kCIAttributeFilterName'] = kCIAttributeFilterName;

export let kCIAttributeIdentity: string;
global['kCIAttributeIdentity'] = kCIAttributeIdentity;

export let kCIAttributeMax: string;
global['kCIAttributeMax'] = kCIAttributeMax;

export let kCIAttributeMin: string;
global['kCIAttributeMin'] = kCIAttributeMin;

export let kCIAttributeName: string;
global['kCIAttributeName'] = kCIAttributeName;

export let kCIAttributeReferenceDocumentation: string;
global['kCIAttributeReferenceDocumentation'] = kCIAttributeReferenceDocumentation;

export let kCIAttributeSliderMax: string;
global['kCIAttributeSliderMax'] = kCIAttributeSliderMax;

export let kCIAttributeSliderMin: string;
global['kCIAttributeSliderMin'] = kCIAttributeSliderMin;

export let kCIAttributeType: string;
global['kCIAttributeType'] = kCIAttributeType;

export let kCIAttributeTypeAngle: string;
global['kCIAttributeTypeAngle'] = kCIAttributeTypeAngle;

export let kCIAttributeTypeBoolean: string;
global['kCIAttributeTypeBoolean'] = kCIAttributeTypeBoolean;

export let kCIAttributeTypeColor: string;
global['kCIAttributeTypeColor'] = kCIAttributeTypeColor;

export let kCIAttributeTypeCount: string;
global['kCIAttributeTypeCount'] = kCIAttributeTypeCount;

export let kCIAttributeTypeDistance: string;
global['kCIAttributeTypeDistance'] = kCIAttributeTypeDistance;

export let kCIAttributeTypeGradient: string;
global['kCIAttributeTypeGradient'] = kCIAttributeTypeGradient;

export let kCIAttributeTypeImage: string;
global['kCIAttributeTypeImage'] = kCIAttributeTypeImage;

export let kCIAttributeTypeInteger: string;
global['kCIAttributeTypeInteger'] = kCIAttributeTypeInteger;

export let kCIAttributeTypeOffset: string;
global['kCIAttributeTypeOffset'] = kCIAttributeTypeOffset;

export let kCIAttributeTypeOpaqueColor: string;
global['kCIAttributeTypeOpaqueColor'] = kCIAttributeTypeOpaqueColor;

export let kCIAttributeTypePosition: string;
global['kCIAttributeTypePosition'] = kCIAttributeTypePosition;

export let kCIAttributeTypePosition3: string;
global['kCIAttributeTypePosition3'] = kCIAttributeTypePosition3;

export let kCIAttributeTypeRectangle: string;
global['kCIAttributeTypeRectangle'] = kCIAttributeTypeRectangle;

export let kCIAttributeTypeScalar: string;
global['kCIAttributeTypeScalar'] = kCIAttributeTypeScalar;

export let kCIAttributeTypeTime: string;
global['kCIAttributeTypeTime'] = kCIAttributeTypeTime;

export let kCIAttributeTypeTransform: string;
global['kCIAttributeTypeTransform'] = kCIAttributeTypeTransform;

export let kCICategoryBlur: string;
global['kCICategoryBlur'] = kCICategoryBlur;

export let kCICategoryBuiltIn: string;
global['kCICategoryBuiltIn'] = kCICategoryBuiltIn;

export let kCICategoryColorAdjustment: string;
global['kCICategoryColorAdjustment'] = kCICategoryColorAdjustment;

export let kCICategoryColorEffect: string;
global['kCICategoryColorEffect'] = kCICategoryColorEffect;

export let kCICategoryCompositeOperation: string;
global['kCICategoryCompositeOperation'] = kCICategoryCompositeOperation;

export let kCICategoryDistortionEffect: string;
global['kCICategoryDistortionEffect'] = kCICategoryDistortionEffect;

export let kCICategoryFilterGenerator: string;
global['kCICategoryFilterGenerator'] = kCICategoryFilterGenerator;

export let kCICategoryGenerator: string;
global['kCICategoryGenerator'] = kCICategoryGenerator;

export let kCICategoryGeometryAdjustment: string;
global['kCICategoryGeometryAdjustment'] = kCICategoryGeometryAdjustment;

export let kCICategoryGradient: string;
global['kCICategoryGradient'] = kCICategoryGradient;

export let kCICategoryHalftoneEffect: string;
global['kCICategoryHalftoneEffect'] = kCICategoryHalftoneEffect;

export let kCICategoryHighDynamicRange: string;
global['kCICategoryHighDynamicRange'] = kCICategoryHighDynamicRange;

export let kCICategoryInterlaced: string;
global['kCICategoryInterlaced'] = kCICategoryInterlaced;

export let kCICategoryNonSquarePixels: string;
global['kCICategoryNonSquarePixels'] = kCICategoryNonSquarePixels;

export let kCICategoryReduction: string;
global['kCICategoryReduction'] = kCICategoryReduction;

export let kCICategorySharpen: string;
global['kCICategorySharpen'] = kCICategorySharpen;

export let kCICategoryStillImage: string;
global['kCICategoryStillImage'] = kCICategoryStillImage;

export let kCICategoryStylize: string;
global['kCICategoryStylize'] = kCICategoryStylize;

export let kCICategoryTileEffect: string;
global['kCICategoryTileEffect'] = kCICategoryTileEffect;

export let kCICategoryTransition: string;
global['kCICategoryTransition'] = kCICategoryTransition;

export let kCICategoryVideo: string;
global['kCICategoryVideo'] = kCICategoryVideo;

export let kCIFilterGeneratorExportedKey: string;
global['kCIFilterGeneratorExportedKey'] = kCIFilterGeneratorExportedKey;

export let kCIFilterGeneratorExportedKeyName: string;
global['kCIFilterGeneratorExportedKeyName'] = kCIFilterGeneratorExportedKeyName;

export let kCIFilterGeneratorExportedKeyTargetObject: string;
global['kCIFilterGeneratorExportedKeyTargetObject'] = kCIFilterGeneratorExportedKeyTargetObject;

export let kCIInputAmountKey: string;
global['kCIInputAmountKey'] = kCIInputAmountKey;

export let kCIInputAngleKey: string;
global['kCIInputAngleKey'] = kCIInputAngleKey;

export let kCIInputAspectRatioKey: string;
global['kCIInputAspectRatioKey'] = kCIInputAspectRatioKey;

export let kCIInputBackgroundImageKey: string;
global['kCIInputBackgroundImageKey'] = kCIInputBackgroundImageKey;

export let kCIInputBiasKey: string;
global['kCIInputBiasKey'] = kCIInputBiasKey;

export let kCIInputBrightnessKey: string;
global['kCIInputBrightnessKey'] = kCIInputBrightnessKey;

export let kCIInputCenterKey: string;
global['kCIInputCenterKey'] = kCIInputCenterKey;

export let kCIInputColorKey: string;
global['kCIInputColorKey'] = kCIInputColorKey;

export let kCIInputContrastKey: string;
global['kCIInputContrastKey'] = kCIInputContrastKey;

export let kCIInputDepthImageKey: string;
global['kCIInputDepthImageKey'] = kCIInputDepthImageKey;

export let kCIInputDisparityImageKey: string;
global['kCIInputDisparityImageKey'] = kCIInputDisparityImageKey;

export let kCIInputEVKey: string;
global['kCIInputEVKey'] = kCIInputEVKey;

export let kCIInputEnableEDRModeKey: string;
global['kCIInputEnableEDRModeKey'] = kCIInputEnableEDRModeKey;

export let kCIInputExtentKey: string;
global['kCIInputExtentKey'] = kCIInputExtentKey;

export let kCIInputGradientImageKey: string;
global['kCIInputGradientImageKey'] = kCIInputGradientImageKey;

export let kCIInputImageKey: string;
global['kCIInputImageKey'] = kCIInputImageKey;

export let kCIInputIntensityKey: string;
global['kCIInputIntensityKey'] = kCIInputIntensityKey;

export let kCIInputMaskImageKey: string;
global['kCIInputMaskImageKey'] = kCIInputMaskImageKey;

export let kCIInputMatteImageKey: string;
global['kCIInputMatteImageKey'] = kCIInputMatteImageKey;

export let kCIInputRadiusKey: string;
global['kCIInputRadiusKey'] = kCIInputRadiusKey;

export let kCIInputRefractionKey: string;
global['kCIInputRefractionKey'] = kCIInputRefractionKey;

export let kCIInputSaturationKey: string;
global['kCIInputSaturationKey'] = kCIInputSaturationKey;

export let kCIInputScaleKey: string;
global['kCIInputScaleKey'] = kCIInputScaleKey;

export let kCIInputShadingImageKey: string;
global['kCIInputShadingImageKey'] = kCIInputShadingImageKey;

export let kCIInputSharpnessKey: string;
global['kCIInputSharpnessKey'] = kCIInputSharpnessKey;

export let kCIInputTargetImageKey: string;
global['kCIInputTargetImageKey'] = kCIInputTargetImageKey;

export let kCIInputTimeKey: string;
global['kCIInputTimeKey'] = kCIInputTimeKey;

export let kCIInputTransformKey: string;
global['kCIInputTransformKey'] = kCIInputTransformKey;

export let kCIInputVersionKey: string;
global['kCIInputVersionKey'] = kCIInputVersionKey;

export let kCIInputWeightsKey: string;
global['kCIInputWeightsKey'] = kCIInputWeightsKey;

export let kCIInputWidthKey: string;
global['kCIInputWidthKey'] = kCIInputWidthKey;

export let kCIOutputImageKey: string;
global['kCIOutputImageKey'] = kCIOutputImageKey;

export let kCISamplerAffineMatrix: string;
global['kCISamplerAffineMatrix'] = kCISamplerAffineMatrix;

export let kCISamplerColorSpace: string;
global['kCISamplerColorSpace'] = kCISamplerColorSpace;

export let kCISamplerFilterLinear: string;
global['kCISamplerFilterLinear'] = kCISamplerFilterLinear;

export let kCISamplerFilterMode: string;
global['kCISamplerFilterMode'] = kCISamplerFilterMode;

export let kCISamplerFilterNearest: string;
global['kCISamplerFilterNearest'] = kCISamplerFilterNearest;

export let kCISamplerWrapBlack: string;
global['kCISamplerWrapBlack'] = kCISamplerWrapBlack;

export let kCISamplerWrapClamp: string;
global['kCISamplerWrapClamp'] = kCISamplerWrapClamp;

export let kCISamplerWrapMode: string;
global['kCISamplerWrapMode'] = kCISamplerWrapMode;

export let kCIUIParameterSet: string;
global['kCIUIParameterSet'] = kCIUIParameterSet;

export let kCIUISetAdvanced: string;
global['kCIUISetAdvanced'] = kCIUISetAdvanced;

export let kCIUISetBasic: string;
global['kCIUISetBasic'] = kCIUISetBasic;

export let kCIUISetDevelopment: string;
global['kCIUISetDevelopment'] = kCIUISetDevelopment;

export let kCIUISetIntermediate: string;
global['kCIUISetIntermediate'] = kCIUISetIntermediate;

export let kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha: string;
global['kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha'] = kCMFormatDescriptionAlphaChannelMode_PremultipliedAlpha;

export let kCMFormatDescriptionAlphaChannelMode_StraightAlpha: string;
global['kCMFormatDescriptionAlphaChannelMode_StraightAlpha'] = kCMFormatDescriptionAlphaChannelMode_StraightAlpha;

export let kCMFormatDescriptionChromaLocation_Bottom: string;
global['kCMFormatDescriptionChromaLocation_Bottom'] = kCMFormatDescriptionChromaLocation_Bottom;

export let kCMFormatDescriptionChromaLocation_BottomLeft: string;
global['kCMFormatDescriptionChromaLocation_BottomLeft'] = kCMFormatDescriptionChromaLocation_BottomLeft;

export let kCMFormatDescriptionChromaLocation_Center: string;
global['kCMFormatDescriptionChromaLocation_Center'] = kCMFormatDescriptionChromaLocation_Center;

export let kCMFormatDescriptionChromaLocation_DV420: string;
global['kCMFormatDescriptionChromaLocation_DV420'] = kCMFormatDescriptionChromaLocation_DV420;

export let kCMFormatDescriptionChromaLocation_Left: string;
global['kCMFormatDescriptionChromaLocation_Left'] = kCMFormatDescriptionChromaLocation_Left;

export let kCMFormatDescriptionChromaLocation_Top: string;
global['kCMFormatDescriptionChromaLocation_Top'] = kCMFormatDescriptionChromaLocation_Top;

export let kCMFormatDescriptionChromaLocation_TopLeft: string;
global['kCMFormatDescriptionChromaLocation_TopLeft'] = kCMFormatDescriptionChromaLocation_TopLeft;

export let kCMFormatDescriptionColorPrimaries_DCI_P3: string;
global['kCMFormatDescriptionColorPrimaries_DCI_P3'] = kCMFormatDescriptionColorPrimaries_DCI_P3;

export let kCMFormatDescriptionColorPrimaries_EBU_3213: string;
global['kCMFormatDescriptionColorPrimaries_EBU_3213'] = kCMFormatDescriptionColorPrimaries_EBU_3213;

export let kCMFormatDescriptionColorPrimaries_ITU_R_2020: string;
global['kCMFormatDescriptionColorPrimaries_ITU_R_2020'] = kCMFormatDescriptionColorPrimaries_ITU_R_2020;

export let kCMFormatDescriptionColorPrimaries_ITU_R_709_2: string;
global['kCMFormatDescriptionColorPrimaries_ITU_R_709_2'] = kCMFormatDescriptionColorPrimaries_ITU_R_709_2;

export let kCMFormatDescriptionColorPrimaries_P22: string;
global['kCMFormatDescriptionColorPrimaries_P22'] = kCMFormatDescriptionColorPrimaries_P22;

export let kCMFormatDescriptionColorPrimaries_P3_D65: string;
global['kCMFormatDescriptionColorPrimaries_P3_D65'] = kCMFormatDescriptionColorPrimaries_P3_D65;

export let kCMFormatDescriptionColorPrimaries_SMPTE_C: string;
global['kCMFormatDescriptionColorPrimaries_SMPTE_C'] = kCMFormatDescriptionColorPrimaries_SMPTE_C;

export let kCMFormatDescriptionConformsToMPEG2VideoProfile: string;
global['kCMFormatDescriptionConformsToMPEG2VideoProfile'] = kCMFormatDescriptionConformsToMPEG2VideoProfile;

export let kCMFormatDescriptionExtensionKey_MetadataKeyTable: string;
global['kCMFormatDescriptionExtensionKey_MetadataKeyTable'] = kCMFormatDescriptionExtensionKey_MetadataKeyTable;

export let kCMFormatDescriptionExtension_AlphaChannelMode: string;
global['kCMFormatDescriptionExtension_AlphaChannelMode'] = kCMFormatDescriptionExtension_AlphaChannelMode;

export let kCMFormatDescriptionExtension_AlternativeTransferCharacteristics: string;
global['kCMFormatDescriptionExtension_AlternativeTransferCharacteristics'] = kCMFormatDescriptionExtension_AlternativeTransferCharacteristics;

export let kCMFormatDescriptionExtension_AuxiliaryTypeInfo: string;
global['kCMFormatDescriptionExtension_AuxiliaryTypeInfo'] = kCMFormatDescriptionExtension_AuxiliaryTypeInfo;

export let kCMFormatDescriptionExtension_BytesPerRow: string;
global['kCMFormatDescriptionExtension_BytesPerRow'] = kCMFormatDescriptionExtension_BytesPerRow;

export let kCMFormatDescriptionExtension_ChromaLocationBottomField: string;
global['kCMFormatDescriptionExtension_ChromaLocationBottomField'] = kCMFormatDescriptionExtension_ChromaLocationBottomField;

export let kCMFormatDescriptionExtension_ChromaLocationTopField: string;
global['kCMFormatDescriptionExtension_ChromaLocationTopField'] = kCMFormatDescriptionExtension_ChromaLocationTopField;

export let kCMFormatDescriptionExtension_CleanAperture: string;
global['kCMFormatDescriptionExtension_CleanAperture'] = kCMFormatDescriptionExtension_CleanAperture;

export let kCMFormatDescriptionExtension_ColorPrimaries: string;
global['kCMFormatDescriptionExtension_ColorPrimaries'] = kCMFormatDescriptionExtension_ColorPrimaries;

export let kCMFormatDescriptionExtension_ContainsAlphaChannel: string;
global['kCMFormatDescriptionExtension_ContainsAlphaChannel'] = kCMFormatDescriptionExtension_ContainsAlphaChannel;

export let kCMFormatDescriptionExtension_ContentLightLevelInfo: string;
global['kCMFormatDescriptionExtension_ContentLightLevelInfo'] = kCMFormatDescriptionExtension_ContentLightLevelInfo;

export let kCMFormatDescriptionExtension_Depth: string;
global['kCMFormatDescriptionExtension_Depth'] = kCMFormatDescriptionExtension_Depth;

export let kCMFormatDescriptionExtension_FieldCount: string;
global['kCMFormatDescriptionExtension_FieldCount'] = kCMFormatDescriptionExtension_FieldCount;

export let kCMFormatDescriptionExtension_FieldDetail: string;
global['kCMFormatDescriptionExtension_FieldDetail'] = kCMFormatDescriptionExtension_FieldDetail;

export let kCMFormatDescriptionExtension_FormatName: string;
global['kCMFormatDescriptionExtension_FormatName'] = kCMFormatDescriptionExtension_FormatName;

export let kCMFormatDescriptionExtension_FullRangeVideo: string;
global['kCMFormatDescriptionExtension_FullRangeVideo'] = kCMFormatDescriptionExtension_FullRangeVideo;

export let kCMFormatDescriptionExtension_GammaLevel: string;
global['kCMFormatDescriptionExtension_GammaLevel'] = kCMFormatDescriptionExtension_GammaLevel;

export let kCMFormatDescriptionExtension_ICCProfile: string;
global['kCMFormatDescriptionExtension_ICCProfile'] = kCMFormatDescriptionExtension_ICCProfile;

export let kCMFormatDescriptionExtension_MasteringDisplayColorVolume: string;
global['kCMFormatDescriptionExtension_MasteringDisplayColorVolume'] = kCMFormatDescriptionExtension_MasteringDisplayColorVolume;

export let kCMFormatDescriptionExtension_OriginalCompressionSettings: string;
global['kCMFormatDescriptionExtension_OriginalCompressionSettings'] = kCMFormatDescriptionExtension_OriginalCompressionSettings;

export let kCMFormatDescriptionExtension_PixelAspectRatio: string;
global['kCMFormatDescriptionExtension_PixelAspectRatio'] = kCMFormatDescriptionExtension_PixelAspectRatio;

export let kCMFormatDescriptionExtension_RevisionLevel: string;
global['kCMFormatDescriptionExtension_RevisionLevel'] = kCMFormatDescriptionExtension_RevisionLevel;

export let kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms: string;
global['kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms'] = kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms;

export let kCMFormatDescriptionExtension_SpatialQuality: string;
global['kCMFormatDescriptionExtension_SpatialQuality'] = kCMFormatDescriptionExtension_SpatialQuality;

export let kCMFormatDescriptionExtension_TemporalQuality: string;
global['kCMFormatDescriptionExtension_TemporalQuality'] = kCMFormatDescriptionExtension_TemporalQuality;

export let kCMFormatDescriptionExtension_TransferFunction: string;
global['kCMFormatDescriptionExtension_TransferFunction'] = kCMFormatDescriptionExtension_TransferFunction;

export let kCMFormatDescriptionExtension_Vendor: string;
global['kCMFormatDescriptionExtension_Vendor'] = kCMFormatDescriptionExtension_Vendor;

export let kCMFormatDescriptionExtension_VerbatimISOSampleEntry: string;
global['kCMFormatDescriptionExtension_VerbatimISOSampleEntry'] = kCMFormatDescriptionExtension_VerbatimISOSampleEntry;

export let kCMFormatDescriptionExtension_VerbatimImageDescription: string;
global['kCMFormatDescriptionExtension_VerbatimImageDescription'] = kCMFormatDescriptionExtension_VerbatimImageDescription;

export let kCMFormatDescriptionExtension_VerbatimSampleDescription: string;
global['kCMFormatDescriptionExtension_VerbatimSampleDescription'] = kCMFormatDescriptionExtension_VerbatimSampleDescription;

export let kCMFormatDescriptionExtension_Version: string;
global['kCMFormatDescriptionExtension_Version'] = kCMFormatDescriptionExtension_Version;

export let kCMFormatDescriptionExtension_YCbCrMatrix: string;
global['kCMFormatDescriptionExtension_YCbCrMatrix'] = kCMFormatDescriptionExtension_YCbCrMatrix;

export let kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly: string;
global['kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly'] = kCMFormatDescriptionFieldDetail_SpatialFirstLineEarly;

export let kCMFormatDescriptionFieldDetail_SpatialFirstLineLate: string;
global['kCMFormatDescriptionFieldDetail_SpatialFirstLineLate'] = kCMFormatDescriptionFieldDetail_SpatialFirstLineLate;

export let kCMFormatDescriptionFieldDetail_TemporalBottomFirst: string;
global['kCMFormatDescriptionFieldDetail_TemporalBottomFirst'] = kCMFormatDescriptionFieldDetail_TemporalBottomFirst;

export let kCMFormatDescriptionFieldDetail_TemporalTopFirst: string;
global['kCMFormatDescriptionFieldDetail_TemporalTopFirst'] = kCMFormatDescriptionFieldDetail_TemporalTopFirst;

export let kCMFormatDescriptionKey_CleanApertureHeight: string;
global['kCMFormatDescriptionKey_CleanApertureHeight'] = kCMFormatDescriptionKey_CleanApertureHeight;

export let kCMFormatDescriptionKey_CleanApertureHeightRational: string;
global['kCMFormatDescriptionKey_CleanApertureHeightRational'] = kCMFormatDescriptionKey_CleanApertureHeightRational;

export let kCMFormatDescriptionKey_CleanApertureHorizontalOffset: string;
global['kCMFormatDescriptionKey_CleanApertureHorizontalOffset'] = kCMFormatDescriptionKey_CleanApertureHorizontalOffset;

export let kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational: string;
global['kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational'] = kCMFormatDescriptionKey_CleanApertureHorizontalOffsetRational;

export let kCMFormatDescriptionKey_CleanApertureVerticalOffset: string;
global['kCMFormatDescriptionKey_CleanApertureVerticalOffset'] = kCMFormatDescriptionKey_CleanApertureVerticalOffset;

export let kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational: string;
global['kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational'] = kCMFormatDescriptionKey_CleanApertureVerticalOffsetRational;

export let kCMFormatDescriptionKey_CleanApertureWidth: string;
global['kCMFormatDescriptionKey_CleanApertureWidth'] = kCMFormatDescriptionKey_CleanApertureWidth;

export let kCMFormatDescriptionKey_CleanApertureWidthRational: string;
global['kCMFormatDescriptionKey_CleanApertureWidthRational'] = kCMFormatDescriptionKey_CleanApertureWidthRational;

export let kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing: string;
global['kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing'] = kCMFormatDescriptionKey_PixelAspectRatioHorizontalSpacing;

export let kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing: string;
global['kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing'] = kCMFormatDescriptionKey_PixelAspectRatioVerticalSpacing;

export let kCMFormatDescriptionTransferFunction_ITU_R_2020: string;
global['kCMFormatDescriptionTransferFunction_ITU_R_2020'] = kCMFormatDescriptionTransferFunction_ITU_R_2020;

export let kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG: string;
global['kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG'] = kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG;

export let kCMFormatDescriptionTransferFunction_ITU_R_709_2: string;
global['kCMFormatDescriptionTransferFunction_ITU_R_709_2'] = kCMFormatDescriptionTransferFunction_ITU_R_709_2;

export let kCMFormatDescriptionTransferFunction_Linear: string;
global['kCMFormatDescriptionTransferFunction_Linear'] = kCMFormatDescriptionTransferFunction_Linear;

export let kCMFormatDescriptionTransferFunction_SMPTE_240M_1995: string;
global['kCMFormatDescriptionTransferFunction_SMPTE_240M_1995'] = kCMFormatDescriptionTransferFunction_SMPTE_240M_1995;

export let kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ: string;
global['kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ'] = kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ;

export let kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1: string;
global['kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1'] = kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1;

export let kCMFormatDescriptionTransferFunction_UseGamma: string;
global['kCMFormatDescriptionTransferFunction_UseGamma'] = kCMFormatDescriptionTransferFunction_UseGamma;

export let kCMFormatDescriptionTransferFunction_sRGB: string;
global['kCMFormatDescriptionTransferFunction_sRGB'] = kCMFormatDescriptionTransferFunction_sRGB;

export let kCMFormatDescriptionVendor_Apple: string;
global['kCMFormatDescriptionVendor_Apple'] = kCMFormatDescriptionVendor_Apple;

export let kCMFormatDescriptionYCbCrMatrix_ITU_R_2020: string;
global['kCMFormatDescriptionYCbCrMatrix_ITU_R_2020'] = kCMFormatDescriptionYCbCrMatrix_ITU_R_2020;

export let kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4: string;
global['kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4'] = kCMFormatDescriptionYCbCrMatrix_ITU_R_601_4;

export let kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2: string;
global['kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2'] = kCMFormatDescriptionYCbCrMatrix_ITU_R_709_2;

export let kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995: string;
global['kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995'] = kCMFormatDescriptionYCbCrMatrix_SMPTE_240M_1995;

export let kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags: string;
global['kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags'] = kCMHEVCTemporalLevelInfoKey_ConstraintIndicatorFlags;

export let kCMHEVCTemporalLevelInfoKey_LevelIndex: string;
global['kCMHEVCTemporalLevelInfoKey_LevelIndex'] = kCMHEVCTemporalLevelInfoKey_LevelIndex;

export let kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags: string;
global['kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags'] = kCMHEVCTemporalLevelInfoKey_ProfileCompatibilityFlags;

export let kCMHEVCTemporalLevelInfoKey_ProfileIndex: string;
global['kCMHEVCTemporalLevelInfoKey_ProfileIndex'] = kCMHEVCTemporalLevelInfoKey_ProfileIndex;

export let kCMHEVCTemporalLevelInfoKey_ProfileSpace: string;
global['kCMHEVCTemporalLevelInfoKey_ProfileSpace'] = kCMHEVCTemporalLevelInfoKey_ProfileSpace;

export let kCMHEVCTemporalLevelInfoKey_TemporalLevel: string;
global['kCMHEVCTemporalLevelInfoKey_TemporalLevel'] = kCMHEVCTemporalLevelInfoKey_TemporalLevel;

export let kCMHEVCTemporalLevelInfoKey_TierFlag: string;
global['kCMHEVCTemporalLevelInfoKey_TierFlag'] = kCMHEVCTemporalLevelInfoKey_TierFlag;

export let kCMMemoryPoolOption_AgeOutPeriod: string;
global['kCMMemoryPoolOption_AgeOutPeriod'] = kCMMemoryPoolOption_AgeOutPeriod;

export let kCMMetadataBaseDataType_AffineTransformF64: string;
global['kCMMetadataBaseDataType_AffineTransformF64'] = kCMMetadataBaseDataType_AffineTransformF64;

export let kCMMetadataBaseDataType_BMP: string;
global['kCMMetadataBaseDataType_BMP'] = kCMMetadataBaseDataType_BMP;

export let kCMMetadataBaseDataType_DimensionsF32: string;
global['kCMMetadataBaseDataType_DimensionsF32'] = kCMMetadataBaseDataType_DimensionsF32;

export let kCMMetadataBaseDataType_Float32: string;
global['kCMMetadataBaseDataType_Float32'] = kCMMetadataBaseDataType_Float32;

export let kCMMetadataBaseDataType_Float64: string;
global['kCMMetadataBaseDataType_Float64'] = kCMMetadataBaseDataType_Float64;

export let kCMMetadataBaseDataType_GIF: string;
global['kCMMetadataBaseDataType_GIF'] = kCMMetadataBaseDataType_GIF;

export let kCMMetadataBaseDataType_JPEG: string;
global['kCMMetadataBaseDataType_JPEG'] = kCMMetadataBaseDataType_JPEG;

export let kCMMetadataBaseDataType_JSON: string;
global['kCMMetadataBaseDataType_JSON'] = kCMMetadataBaseDataType_JSON;

export let kCMMetadataBaseDataType_PNG: string;
global['kCMMetadataBaseDataType_PNG'] = kCMMetadataBaseDataType_PNG;

export let kCMMetadataBaseDataType_PerspectiveTransformF64: string;
global['kCMMetadataBaseDataType_PerspectiveTransformF64'] = kCMMetadataBaseDataType_PerspectiveTransformF64;

export let kCMMetadataBaseDataType_PointF32: string;
global['kCMMetadataBaseDataType_PointF32'] = kCMMetadataBaseDataType_PointF32;

export let kCMMetadataBaseDataType_PolygonF32: string;
global['kCMMetadataBaseDataType_PolygonF32'] = kCMMetadataBaseDataType_PolygonF32;

export let kCMMetadataBaseDataType_PolylineF32: string;
global['kCMMetadataBaseDataType_PolylineF32'] = kCMMetadataBaseDataType_PolylineF32;

export let kCMMetadataBaseDataType_RawData: string;
global['kCMMetadataBaseDataType_RawData'] = kCMMetadataBaseDataType_RawData;

export let kCMMetadataBaseDataType_RectF32: string;
global['kCMMetadataBaseDataType_RectF32'] = kCMMetadataBaseDataType_RectF32;

export let kCMMetadataBaseDataType_SInt16: string;
global['kCMMetadataBaseDataType_SInt16'] = kCMMetadataBaseDataType_SInt16;

export let kCMMetadataBaseDataType_SInt32: string;
global['kCMMetadataBaseDataType_SInt32'] = kCMMetadataBaseDataType_SInt32;

export let kCMMetadataBaseDataType_SInt64: string;
global['kCMMetadataBaseDataType_SInt64'] = kCMMetadataBaseDataType_SInt64;

export let kCMMetadataBaseDataType_SInt8: string;
global['kCMMetadataBaseDataType_SInt8'] = kCMMetadataBaseDataType_SInt8;

export let kCMMetadataBaseDataType_UInt16: string;
global['kCMMetadataBaseDataType_UInt16'] = kCMMetadataBaseDataType_UInt16;

export let kCMMetadataBaseDataType_UInt32: string;
global['kCMMetadataBaseDataType_UInt32'] = kCMMetadataBaseDataType_UInt32;

export let kCMMetadataBaseDataType_UInt64: string;
global['kCMMetadataBaseDataType_UInt64'] = kCMMetadataBaseDataType_UInt64;

export let kCMMetadataBaseDataType_UInt8: string;
global['kCMMetadataBaseDataType_UInt8'] = kCMMetadataBaseDataType_UInt8;

export let kCMMetadataBaseDataType_UTF16: string;
global['kCMMetadataBaseDataType_UTF16'] = kCMMetadataBaseDataType_UTF16;

export let kCMMetadataBaseDataType_UTF8: string;
global['kCMMetadataBaseDataType_UTF8'] = kCMMetadataBaseDataType_UTF8;

export let kCMMetadataDataType_QuickTimeMetadataDirection: string;
global['kCMMetadataDataType_QuickTimeMetadataDirection'] = kCMMetadataDataType_QuickTimeMetadataDirection;

export let kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709: string;
global['kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709'] = kCMMetadataDataType_QuickTimeMetadataLocation_ISO6709;

export let kCMMetadataFormatDescriptionKey_ConformingDataTypes: string;
global['kCMMetadataFormatDescriptionKey_ConformingDataTypes'] = kCMMetadataFormatDescriptionKey_ConformingDataTypes;

export let kCMMetadataFormatDescriptionKey_DataType: string;
global['kCMMetadataFormatDescriptionKey_DataType'] = kCMMetadataFormatDescriptionKey_DataType;

export let kCMMetadataFormatDescriptionKey_DataTypeNamespace: string;
global['kCMMetadataFormatDescriptionKey_DataTypeNamespace'] = kCMMetadataFormatDescriptionKey_DataTypeNamespace;

export let kCMMetadataFormatDescriptionKey_LanguageTag: string;
global['kCMMetadataFormatDescriptionKey_LanguageTag'] = kCMMetadataFormatDescriptionKey_LanguageTag;

export let kCMMetadataFormatDescriptionKey_LocalID: string;
global['kCMMetadataFormatDescriptionKey_LocalID'] = kCMMetadataFormatDescriptionKey_LocalID;

export let kCMMetadataFormatDescriptionKey_Namespace: string;
global['kCMMetadataFormatDescriptionKey_Namespace'] = kCMMetadataFormatDescriptionKey_Namespace;

export let kCMMetadataFormatDescriptionKey_SetupData: string;
global['kCMMetadataFormatDescriptionKey_SetupData'] = kCMMetadataFormatDescriptionKey_SetupData;

export let kCMMetadataFormatDescriptionKey_StructuralDependency: string;
global['kCMMetadataFormatDescriptionKey_StructuralDependency'] = kCMMetadataFormatDescriptionKey_StructuralDependency;

export let kCMMetadataFormatDescriptionKey_Value: string;
global['kCMMetadataFormatDescriptionKey_Value'] = kCMMetadataFormatDescriptionKey_Value;

export let kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType: string;
global['kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType;

export let kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag: string;
global['kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag;

export let kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier: string;
global['kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier;

export let kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData: string;
global['kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_SetupData;

export let kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency: string;
global['kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency'] = kCMMetadataFormatDescriptionMetadataSpecificationKey_StructuralDependency;

export let kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag: string;
global['kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag'] = kCMMetadataFormatDescription_StructuralDependencyKey_DependencyIsInvalidFlag;

export let kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing: string;
global['kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing'] = kCMMetadataIdentifier_QuickTimeMetadataDirection_Facing;

export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform: string;
global['kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform'] = kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransform;

export let kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions: string;
global['kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions'] = kCMMetadataIdentifier_QuickTimeMetadataLivePhotoStillImageTransformReferenceDimensions;

export let kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709: string;
global['kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709'] = kCMMetadataIdentifier_QuickTimeMetadataLocation_ISO6709;

export let kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform: string;
global['kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform'] = kCMMetadataIdentifier_QuickTimeMetadataPreferredAffineTransform;

export let kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation: string;
global['kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation'] = kCMMetadataIdentifier_QuickTimeMetadataVideoOrientation;

export let kCMMetadataKeySpace_HLSDateRange: string;
global['kCMMetadataKeySpace_HLSDateRange'] = kCMMetadataKeySpace_HLSDateRange;

export let kCMMetadataKeySpace_ID3: string;
global['kCMMetadataKeySpace_ID3'] = kCMMetadataKeySpace_ID3;

export let kCMMetadataKeySpace_ISOUserData: string;
global['kCMMetadataKeySpace_ISOUserData'] = kCMMetadataKeySpace_ISOUserData;

export let kCMMetadataKeySpace_Icy: string;
global['kCMMetadataKeySpace_Icy'] = kCMMetadataKeySpace_Icy;

export let kCMMetadataKeySpace_QuickTimeMetadata: string;
global['kCMMetadataKeySpace_QuickTimeMetadata'] = kCMMetadataKeySpace_QuickTimeMetadata;

export let kCMMetadataKeySpace_QuickTimeUserData: string;
global['kCMMetadataKeySpace_QuickTimeUserData'] = kCMMetadataKeySpace_QuickTimeUserData;

export let kCMMetadataKeySpace_iTunes: string;
global['kCMMetadataKeySpace_iTunes'] = kCMMetadataKeySpace_iTunes;

export let kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount: string;
global['kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount'] = kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount;

export let kCMSampleAttachmentKey_DependsOnOthers: string;
global['kCMSampleAttachmentKey_DependsOnOthers'] = kCMSampleAttachmentKey_DependsOnOthers;

export let kCMSampleAttachmentKey_DisplayImmediately: string;
global['kCMSampleAttachmentKey_DisplayImmediately'] = kCMSampleAttachmentKey_DisplayImmediately;

export let kCMSampleAttachmentKey_DoNotDisplay: string;
global['kCMSampleAttachmentKey_DoNotDisplay'] = kCMSampleAttachmentKey_DoNotDisplay;

export let kCMSampleAttachmentKey_EarlierDisplayTimesAllowed: string;
global['kCMSampleAttachmentKey_EarlierDisplayTimesAllowed'] = kCMSampleAttachmentKey_EarlierDisplayTimesAllowed;

export let kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess: string;
global['kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess'] = kCMSampleAttachmentKey_HEVCStepwiseTemporalSubLayerAccess;

export let kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType: string;
global['kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType'] = kCMSampleAttachmentKey_HEVCSyncSampleNALUnitType;

export let kCMSampleAttachmentKey_HEVCTemporalLevelInfo: string;
global['kCMSampleAttachmentKey_HEVCTemporalLevelInfo'] = kCMSampleAttachmentKey_HEVCTemporalLevelInfo;

export let kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess: string;
global['kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess'] = kCMSampleAttachmentKey_HEVCTemporalSubLayerAccess;

export let kCMSampleAttachmentKey_HasRedundantCoding: string;
global['kCMSampleAttachmentKey_HasRedundantCoding'] = kCMSampleAttachmentKey_HasRedundantCoding;

export let kCMSampleAttachmentKey_IsDependedOnByOthers: string;
global['kCMSampleAttachmentKey_IsDependedOnByOthers'] = kCMSampleAttachmentKey_IsDependedOnByOthers;

export let kCMSampleAttachmentKey_NotSync: string;
global['kCMSampleAttachmentKey_NotSync'] = kCMSampleAttachmentKey_NotSync;

export let kCMSampleAttachmentKey_PartialSync: string;
global['kCMSampleAttachmentKey_PartialSync'] = kCMSampleAttachmentKey_PartialSync;

export let kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix: string;
global['kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix'] = kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix;

export let kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately: string;
global['kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately'] = kCMSampleBufferAttachmentKey_DisplayEmptyMediaImmediately;

export let kCMSampleBufferAttachmentKey_DrainAfterDecoding: string;
global['kCMSampleBufferAttachmentKey_DrainAfterDecoding'] = kCMSampleBufferAttachmentKey_DrainAfterDecoding;

export let kCMSampleBufferAttachmentKey_DroppedFrameReason: string;
global['kCMSampleBufferAttachmentKey_DroppedFrameReason'] = kCMSampleBufferAttachmentKey_DroppedFrameReason;

export let kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo: string;
global['kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo'] = kCMSampleBufferAttachmentKey_DroppedFrameReasonInfo;

export let kCMSampleBufferAttachmentKey_EmptyMedia: string;
global['kCMSampleBufferAttachmentKey_EmptyMedia'] = kCMSampleBufferAttachmentKey_EmptyMedia;

export let kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration: string;
global['kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration'] = kCMSampleBufferAttachmentKey_EndsPreviousSampleDuration;

export let kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence: string;
global['kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence'] = kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence;

export let kCMSampleBufferAttachmentKey_ForceKeyFrame: string;
global['kCMSampleBufferAttachmentKey_ForceKeyFrame'] = kCMSampleBufferAttachmentKey_ForceKeyFrame;

export let kCMSampleBufferAttachmentKey_GradualDecoderRefresh: string;
global['kCMSampleBufferAttachmentKey_GradualDecoderRefresh'] = kCMSampleBufferAttachmentKey_GradualDecoderRefresh;

export let kCMSampleBufferAttachmentKey_PermanentEmptyMedia: string;
global['kCMSampleBufferAttachmentKey_PermanentEmptyMedia'] = kCMSampleBufferAttachmentKey_PermanentEmptyMedia;

export let kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed: string;
global['kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed'] = kCMSampleBufferAttachmentKey_PostNotificationWhenConsumed;

export let kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding: string;
global['kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding'] = kCMSampleBufferAttachmentKey_ResetDecoderBeforeDecoding;

export let kCMSampleBufferAttachmentKey_ResumeOutput: string;
global['kCMSampleBufferAttachmentKey_ResumeOutput'] = kCMSampleBufferAttachmentKey_ResumeOutput;

export let kCMSampleBufferAttachmentKey_Reverse: string;
global['kCMSampleBufferAttachmentKey_Reverse'] = kCMSampleBufferAttachmentKey_Reverse;

export let kCMSampleBufferAttachmentKey_SampleReferenceByteOffset: string;
global['kCMSampleBufferAttachmentKey_SampleReferenceByteOffset'] = kCMSampleBufferAttachmentKey_SampleReferenceByteOffset;

export let kCMSampleBufferAttachmentKey_SampleReferenceURL: string;
global['kCMSampleBufferAttachmentKey_SampleReferenceURL'] = kCMSampleBufferAttachmentKey_SampleReferenceURL;

export let kCMSampleBufferAttachmentKey_SpeedMultiplier: string;
global['kCMSampleBufferAttachmentKey_SpeedMultiplier'] = kCMSampleBufferAttachmentKey_SpeedMultiplier;

export let kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo: string;
global['kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo'] = kCMSampleBufferAttachmentKey_StillImageLensStabilizationInfo;

export let kCMSampleBufferAttachmentKey_TransitionID: string;
global['kCMSampleBufferAttachmentKey_TransitionID'] = kCMSampleBufferAttachmentKey_TransitionID;

export let kCMSampleBufferAttachmentKey_TrimDurationAtEnd: string;
global['kCMSampleBufferAttachmentKey_TrimDurationAtEnd'] = kCMSampleBufferAttachmentKey_TrimDurationAtEnd;

export let kCMSampleBufferAttachmentKey_TrimDurationAtStart: string;
global['kCMSampleBufferAttachmentKey_TrimDurationAtStart'] = kCMSampleBufferAttachmentKey_TrimDurationAtStart;

export let kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS: string;
global['kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS'] = kCMSampleBufferConduitNotificationParameter_MaxUpcomingOutputPTS;

export let kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS: string;
global['kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS'] = kCMSampleBufferConduitNotificationParameter_MinUpcomingOutputPTS;

export let kCMSampleBufferConduitNotificationParameter_ResumeTag: string;
global['kCMSampleBufferConduitNotificationParameter_ResumeTag'] = kCMSampleBufferConduitNotificationParameter_ResumeTag;

export let kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange: string;
global['kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange'] = kCMSampleBufferConduitNotificationParameter_UpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange;

export let kCMSampleBufferConduitNotification_InhibitOutputUntil: string;
global['kCMSampleBufferConduitNotification_InhibitOutputUntil'] = kCMSampleBufferConduitNotification_InhibitOutputUntil;

export let kCMSampleBufferConduitNotification_ResetOutput: string;
global['kCMSampleBufferConduitNotification_ResetOutput'] = kCMSampleBufferConduitNotification_ResetOutput;

export let kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged: string;
global['kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged'] = kCMSampleBufferConduitNotification_UpcomingOutputPTSRangeChanged;

export let kCMSampleBufferConsumerNotification_BufferConsumed: string;
global['kCMSampleBufferConsumerNotification_BufferConsumed'] = kCMSampleBufferConsumerNotification_BufferConsumed;

export let kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch: string;
global['kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch'] = kCMSampleBufferDroppedFrameReasonInfo_CameraModeSwitch;

export let kCMSampleBufferDroppedFrameReason_Discontinuity: string;
global['kCMSampleBufferDroppedFrameReason_Discontinuity'] = kCMSampleBufferDroppedFrameReason_Discontinuity;

export let kCMSampleBufferDroppedFrameReason_FrameWasLate: string;
global['kCMSampleBufferDroppedFrameReason_FrameWasLate'] = kCMSampleBufferDroppedFrameReason_FrameWasLate;

export let kCMSampleBufferDroppedFrameReason_OutOfBuffers: string;
global['kCMSampleBufferDroppedFrameReason_OutOfBuffers'] = kCMSampleBufferDroppedFrameReason_OutOfBuffers;

export let kCMSampleBufferLensStabilizationInfo_Active: string;
global['kCMSampleBufferLensStabilizationInfo_Active'] = kCMSampleBufferLensStabilizationInfo_Active;

export let kCMSampleBufferLensStabilizationInfo_Off: string;
global['kCMSampleBufferLensStabilizationInfo_Off'] = kCMSampleBufferLensStabilizationInfo_Off;

export let kCMSampleBufferLensStabilizationInfo_OutOfRange: string;
global['kCMSampleBufferLensStabilizationInfo_OutOfRange'] = kCMSampleBufferLensStabilizationInfo_OutOfRange;

export let kCMSampleBufferLensStabilizationInfo_Unavailable: string;
global['kCMSampleBufferLensStabilizationInfo_Unavailable'] = kCMSampleBufferLensStabilizationInfo_Unavailable;

export let kCMSampleBufferNotificationParameter_OSStatus: string;
global['kCMSampleBufferNotificationParameter_OSStatus'] = kCMSampleBufferNotificationParameter_OSStatus;

export let kCMSampleBufferNotification_DataBecameReady: string;
global['kCMSampleBufferNotification_DataBecameReady'] = kCMSampleBufferNotification_DataBecameReady;

export let kCMSampleBufferNotification_DataFailed: string;
global['kCMSampleBufferNotification_DataFailed'] = kCMSampleBufferNotification_DataFailed;

export let kCMTextFormatDescriptionColor_Alpha: string;
global['kCMTextFormatDescriptionColor_Alpha'] = kCMTextFormatDescriptionColor_Alpha;

export let kCMTextFormatDescriptionColor_Blue: string;
global['kCMTextFormatDescriptionColor_Blue'] = kCMTextFormatDescriptionColor_Blue;

export let kCMTextFormatDescriptionColor_Green: string;
global['kCMTextFormatDescriptionColor_Green'] = kCMTextFormatDescriptionColor_Green;

export let kCMTextFormatDescriptionColor_Red: string;
global['kCMTextFormatDescriptionColor_Red'] = kCMTextFormatDescriptionColor_Red;

export let kCMTextFormatDescriptionExtension_BackgroundColor: string;
global['kCMTextFormatDescriptionExtension_BackgroundColor'] = kCMTextFormatDescriptionExtension_BackgroundColor;

export let kCMTextFormatDescriptionExtension_DefaultFontName: string;
global['kCMTextFormatDescriptionExtension_DefaultFontName'] = kCMTextFormatDescriptionExtension_DefaultFontName;

export let kCMTextFormatDescriptionExtension_DefaultStyle: string;
global['kCMTextFormatDescriptionExtension_DefaultStyle'] = kCMTextFormatDescriptionExtension_DefaultStyle;

export let kCMTextFormatDescriptionExtension_DefaultTextBox: string;
global['kCMTextFormatDescriptionExtension_DefaultTextBox'] = kCMTextFormatDescriptionExtension_DefaultTextBox;

export let kCMTextFormatDescriptionExtension_DisplayFlags: string;
global['kCMTextFormatDescriptionExtension_DisplayFlags'] = kCMTextFormatDescriptionExtension_DisplayFlags;

export let kCMTextFormatDescriptionExtension_FontTable: string;
global['kCMTextFormatDescriptionExtension_FontTable'] = kCMTextFormatDescriptionExtension_FontTable;

export let kCMTextFormatDescriptionExtension_HorizontalJustification: string;
global['kCMTextFormatDescriptionExtension_HorizontalJustification'] = kCMTextFormatDescriptionExtension_HorizontalJustification;

export let kCMTextFormatDescriptionExtension_TextJustification: string;
global['kCMTextFormatDescriptionExtension_TextJustification'] = kCMTextFormatDescriptionExtension_TextJustification;

export let kCMTextFormatDescriptionExtension_VerticalJustification: string;
global['kCMTextFormatDescriptionExtension_VerticalJustification'] = kCMTextFormatDescriptionExtension_VerticalJustification;

export let kCMTextFormatDescriptionRect_Bottom: string;
global['kCMTextFormatDescriptionRect_Bottom'] = kCMTextFormatDescriptionRect_Bottom;

export let kCMTextFormatDescriptionRect_Left: string;
global['kCMTextFormatDescriptionRect_Left'] = kCMTextFormatDescriptionRect_Left;

export let kCMTextFormatDescriptionRect_Right: string;
global['kCMTextFormatDescriptionRect_Right'] = kCMTextFormatDescriptionRect_Right;

export let kCMTextFormatDescriptionRect_Top: string;
global['kCMTextFormatDescriptionRect_Top'] = kCMTextFormatDescriptionRect_Top;

export let kCMTextFormatDescriptionStyle_Ascent: string;
global['kCMTextFormatDescriptionStyle_Ascent'] = kCMTextFormatDescriptionStyle_Ascent;

export let kCMTextFormatDescriptionStyle_EndChar: string;
global['kCMTextFormatDescriptionStyle_EndChar'] = kCMTextFormatDescriptionStyle_EndChar;

export let kCMTextFormatDescriptionStyle_Font: string;
global['kCMTextFormatDescriptionStyle_Font'] = kCMTextFormatDescriptionStyle_Font;

export let kCMTextFormatDescriptionStyle_FontFace: string;
global['kCMTextFormatDescriptionStyle_FontFace'] = kCMTextFormatDescriptionStyle_FontFace;

export let kCMTextFormatDescriptionStyle_FontSize: string;
global['kCMTextFormatDescriptionStyle_FontSize'] = kCMTextFormatDescriptionStyle_FontSize;

export let kCMTextFormatDescriptionStyle_ForegroundColor: string;
global['kCMTextFormatDescriptionStyle_ForegroundColor'] = kCMTextFormatDescriptionStyle_ForegroundColor;

export let kCMTextFormatDescriptionStyle_Height: string;
global['kCMTextFormatDescriptionStyle_Height'] = kCMTextFormatDescriptionStyle_Height;

export let kCMTextFormatDescriptionStyle_StartChar: string;
global['kCMTextFormatDescriptionStyle_StartChar'] = kCMTextFormatDescriptionStyle_StartChar;

export let kCMTextMarkupAlignmentType_End: string;
global['kCMTextMarkupAlignmentType_End'] = kCMTextMarkupAlignmentType_End;

export let kCMTextMarkupAlignmentType_Left: string;
global['kCMTextMarkupAlignmentType_Left'] = kCMTextMarkupAlignmentType_Left;

export let kCMTextMarkupAlignmentType_Middle: string;
global['kCMTextMarkupAlignmentType_Middle'] = kCMTextMarkupAlignmentType_Middle;

export let kCMTextMarkupAlignmentType_Right: string;
global['kCMTextMarkupAlignmentType_Right'] = kCMTextMarkupAlignmentType_Right;

export let kCMTextMarkupAlignmentType_Start: string;
global['kCMTextMarkupAlignmentType_Start'] = kCMTextMarkupAlignmentType_Start;

export let kCMTextMarkupAttribute_Alignment: string;
global['kCMTextMarkupAttribute_Alignment'] = kCMTextMarkupAttribute_Alignment;

export let kCMTextMarkupAttribute_BackgroundColorARGB: string;
global['kCMTextMarkupAttribute_BackgroundColorARGB'] = kCMTextMarkupAttribute_BackgroundColorARGB;

export let kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight: string;
global['kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight'] = kCMTextMarkupAttribute_BaseFontSizePercentageRelativeToVideoHeight;

export let kCMTextMarkupAttribute_BoldStyle: string;
global['kCMTextMarkupAttribute_BoldStyle'] = kCMTextMarkupAttribute_BoldStyle;

export let kCMTextMarkupAttribute_CharacterBackgroundColorARGB: string;
global['kCMTextMarkupAttribute_CharacterBackgroundColorARGB'] = kCMTextMarkupAttribute_CharacterBackgroundColorARGB;

export let kCMTextMarkupAttribute_CharacterEdgeStyle: string;
global['kCMTextMarkupAttribute_CharacterEdgeStyle'] = kCMTextMarkupAttribute_CharacterEdgeStyle;

export let kCMTextMarkupAttribute_FontFamilyName: string;
global['kCMTextMarkupAttribute_FontFamilyName'] = kCMTextMarkupAttribute_FontFamilyName;

export let kCMTextMarkupAttribute_ForegroundColorARGB: string;
global['kCMTextMarkupAttribute_ForegroundColorARGB'] = kCMTextMarkupAttribute_ForegroundColorARGB;

export let kCMTextMarkupAttribute_GenericFontFamilyName: string;
global['kCMTextMarkupAttribute_GenericFontFamilyName'] = kCMTextMarkupAttribute_GenericFontFamilyName;

export let kCMTextMarkupAttribute_ItalicStyle: string;
global['kCMTextMarkupAttribute_ItalicStyle'] = kCMTextMarkupAttribute_ItalicStyle;

export let kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection: string;
global['kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection'] = kCMTextMarkupAttribute_OrthogonalLinePositionPercentageRelativeToWritingDirection;

export let kCMTextMarkupAttribute_RelativeFontSize: string;
global['kCMTextMarkupAttribute_RelativeFontSize'] = kCMTextMarkupAttribute_RelativeFontSize;

export let kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection: string;
global['kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection'] = kCMTextMarkupAttribute_TextPositionPercentageRelativeToWritingDirection;

export let kCMTextMarkupAttribute_UnderlineStyle: string;
global['kCMTextMarkupAttribute_UnderlineStyle'] = kCMTextMarkupAttribute_UnderlineStyle;

export let kCMTextMarkupAttribute_VerticalLayout: string;
global['kCMTextMarkupAttribute_VerticalLayout'] = kCMTextMarkupAttribute_VerticalLayout;

export let kCMTextMarkupAttribute_WritingDirectionSizePercentage: string;
global['kCMTextMarkupAttribute_WritingDirectionSizePercentage'] = kCMTextMarkupAttribute_WritingDirectionSizePercentage;

export let kCMTextMarkupCharacterEdgeStyle_Depressed: string;
global['kCMTextMarkupCharacterEdgeStyle_Depressed'] = kCMTextMarkupCharacterEdgeStyle_Depressed;

export let kCMTextMarkupCharacterEdgeStyle_DropShadow: string;
global['kCMTextMarkupCharacterEdgeStyle_DropShadow'] = kCMTextMarkupCharacterEdgeStyle_DropShadow;

export let kCMTextMarkupCharacterEdgeStyle_None: string;
global['kCMTextMarkupCharacterEdgeStyle_None'] = kCMTextMarkupCharacterEdgeStyle_None;

export let kCMTextMarkupCharacterEdgeStyle_Raised: string;
global['kCMTextMarkupCharacterEdgeStyle_Raised'] = kCMTextMarkupCharacterEdgeStyle_Raised;

export let kCMTextMarkupCharacterEdgeStyle_Uniform: string;
global['kCMTextMarkupCharacterEdgeStyle_Uniform'] = kCMTextMarkupCharacterEdgeStyle_Uniform;

export let kCMTextMarkupGenericFontName_Casual: string;
global['kCMTextMarkupGenericFontName_Casual'] = kCMTextMarkupGenericFontName_Casual;

export let kCMTextMarkupGenericFontName_Cursive: string;
global['kCMTextMarkupGenericFontName_Cursive'] = kCMTextMarkupGenericFontName_Cursive;

export let kCMTextMarkupGenericFontName_Default: string;
global['kCMTextMarkupGenericFontName_Default'] = kCMTextMarkupGenericFontName_Default;

export let kCMTextMarkupGenericFontName_Fantasy: string;
global['kCMTextMarkupGenericFontName_Fantasy'] = kCMTextMarkupGenericFontName_Fantasy;

export let kCMTextMarkupGenericFontName_Monospace: string;
global['kCMTextMarkupGenericFontName_Monospace'] = kCMTextMarkupGenericFontName_Monospace;

export let kCMTextMarkupGenericFontName_MonospaceSansSerif: string;
global['kCMTextMarkupGenericFontName_MonospaceSansSerif'] = kCMTextMarkupGenericFontName_MonospaceSansSerif;

export let kCMTextMarkupGenericFontName_MonospaceSerif: string;
global['kCMTextMarkupGenericFontName_MonospaceSerif'] = kCMTextMarkupGenericFontName_MonospaceSerif;

export let kCMTextMarkupGenericFontName_ProportionalSansSerif: string;
global['kCMTextMarkupGenericFontName_ProportionalSansSerif'] = kCMTextMarkupGenericFontName_ProportionalSansSerif;

export let kCMTextMarkupGenericFontName_ProportionalSerif: string;
global['kCMTextMarkupGenericFontName_ProportionalSerif'] = kCMTextMarkupGenericFontName_ProportionalSerif;

export let kCMTextMarkupGenericFontName_SansSerif: string;
global['kCMTextMarkupGenericFontName_SansSerif'] = kCMTextMarkupGenericFontName_SansSerif;

export let kCMTextMarkupGenericFontName_Serif: string;
global['kCMTextMarkupGenericFontName_Serif'] = kCMTextMarkupGenericFontName_Serif;

export let kCMTextMarkupGenericFontName_SmallCapital: string;
global['kCMTextMarkupGenericFontName_SmallCapital'] = kCMTextMarkupGenericFontName_SmallCapital;

export let kCMTextVerticalLayout_LeftToRight: string;
global['kCMTextVerticalLayout_LeftToRight'] = kCMTextVerticalLayout_LeftToRight;

export let kCMTextVerticalLayout_RightToLeft: string;
global['kCMTextVerticalLayout_RightToLeft'] = kCMTextVerticalLayout_RightToLeft;

export let kCMTimeCodeFormatDescriptionExtension_SourceReferenceName: string;
global['kCMTimeCodeFormatDescriptionExtension_SourceReferenceName'] = kCMTimeCodeFormatDescriptionExtension_SourceReferenceName;

export let kCMTimeCodeFormatDescriptionKey_LangCode: string;
global['kCMTimeCodeFormatDescriptionKey_LangCode'] = kCMTimeCodeFormatDescriptionKey_LangCode;

export let kCMTimeCodeFormatDescriptionKey_Value: string;
global['kCMTimeCodeFormatDescriptionKey_Value'] = kCMTimeCodeFormatDescriptionKey_Value;

export let kCMTimeEpochKey: string;
global['kCMTimeEpochKey'] = kCMTimeEpochKey;

export let kCMTimeFlagsKey: string;
global['kCMTimeFlagsKey'] = kCMTimeFlagsKey;

export let kCMTimeMappingSourceKey: string;
global['kCMTimeMappingSourceKey'] = kCMTimeMappingSourceKey;

export let kCMTimeMappingTargetKey: string;
global['kCMTimeMappingTargetKey'] = kCMTimeMappingTargetKey;

export let kCMTimeRangeDurationKey: string;
global['kCMTimeRangeDurationKey'] = kCMTimeRangeDurationKey;

export let kCMTimeRangeStartKey: string;
global['kCMTimeRangeStartKey'] = kCMTimeRangeStartKey;

export let kCMTimeScaleKey: string;
global['kCMTimeScaleKey'] = kCMTimeScaleKey;

export let kCMTimeValueKey: string;
global['kCMTimeValueKey'] = kCMTimeValueKey;

export let kCMTimebaseNotificationKey_EventTime: string;
global['kCMTimebaseNotificationKey_EventTime'] = kCMTimebaseNotificationKey_EventTime;

export let kCMTimebaseNotification_EffectiveRateChanged: string;
global['kCMTimebaseNotification_EffectiveRateChanged'] = kCMTimebaseNotification_EffectiveRateChanged;

export let kCMTimebaseNotification_TimeJumped: string;
global['kCMTimebaseNotification_TimeJumped'] = kCMTimebaseNotification_TimeJumped;

export let kCMIOBlockBufferAttachmentKey_CVPixelBufferReference: string;
global['kCMIOBlockBufferAttachmentKey_CVPixelBufferReference'] = kCMIOBlockBufferAttachmentKey_CVPixelBufferReference;

export let kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp: string;
global['kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp'] = kCMIOSampleBufferAttachmentKey_CAAudioTimeStamp;

export let kCMIOSampleBufferAttachmentKey_ClientSequenceID: string;
global['kCMIOSampleBufferAttachmentKey_ClientSequenceID'] = kCMIOSampleBufferAttachmentKey_ClientSequenceID;

export let kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer: string;
global['kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer'] = kCMIOSampleBufferAttachmentKey_ClosedCaptionSampleBuffer;

export let kCMIOSampleBufferAttachmentKey_DiscontinuityFlags: string;
global['kCMIOSampleBufferAttachmentKey_DiscontinuityFlags'] = kCMIOSampleBufferAttachmentKey_DiscontinuityFlags;

export let kCMIOSampleBufferAttachmentKey_HDV1_PackData: string;
global['kCMIOSampleBufferAttachmentKey_HDV1_PackData'] = kCMIOSampleBufferAttachmentKey_HDV1_PackData;

export let kCMIOSampleBufferAttachmentKey_HDV2_VAUX: string;
global['kCMIOSampleBufferAttachmentKey_HDV2_VAUX'] = kCMIOSampleBufferAttachmentKey_HDV2_VAUX;

export let kCMIOSampleBufferAttachmentKey_HostTime: string;
global['kCMIOSampleBufferAttachmentKey_HostTime'] = kCMIOSampleBufferAttachmentKey_HostTime;

export let kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers: string;
global['kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers'] = kCMIOSampleBufferAttachmentKey_MouseAndKeyboardModifiers;

export let kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp: string;
global['kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp'] = kCMIOSampleBufferAttachmentKey_MuxedSourcePresentationTimeStamp;

export let kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount: string;
global['kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount'] = kCMIOSampleBufferAttachmentKey_NativeSMPTEFrameCount;

export let kCMIOSampleBufferAttachmentKey_NoDataMarker: string;
global['kCMIOSampleBufferAttachmentKey_NoDataMarker'] = kCMIOSampleBufferAttachmentKey_NoDataMarker;

export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer: string;
global['kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer'] = kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInBuffer;

export let kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP: string;
global['kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP'] = kCMIOSampleBufferAttachmentKey_NumberOfVideoFramesInGOP;

export let kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo: string;
global['kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo'] = kCMIOSampleBufferAttachmentKey_PulldownCadenceInfo;

export let kCMIOSampleBufferAttachmentKey_RepeatedBufferContents: string;
global['kCMIOSampleBufferAttachmentKey_RepeatedBufferContents'] = kCMIOSampleBufferAttachmentKey_RepeatedBufferContents;

export let kCMIOSampleBufferAttachmentKey_SMPTETime: string;
global['kCMIOSampleBufferAttachmentKey_SMPTETime'] = kCMIOSampleBufferAttachmentKey_SMPTETime;

export let kCMIOSampleBufferAttachmentKey_SequenceNumber: string;
global['kCMIOSampleBufferAttachmentKey_SequenceNumber'] = kCMIOSampleBufferAttachmentKey_SequenceNumber;

export let kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription: string;
global['kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription'] = kCMIOSampleBufferAttachmentKey_SourceAudioFormatDescription;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorFrameRect;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsDrawnInFramebuffer;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorIsVisible;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionX;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorPositionY;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorReference;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorScale;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_CursorSeed;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiers;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_KeyboardModifiersEvent;

export let kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState: string;
global['kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState'] = kCMIOSampleBufferAttachment_MouseAndKeyboardModifiersKey_MouseButtonState;

export let NSAppleEventTimeOutDefault: number;
global['NSAppleEventTimeOutDefault'] = NSAppleEventTimeOutDefault;

export let NSAppleEventTimeOutNone: number;
global['NSAppleEventTimeOutNone'] = NSAppleEventTimeOutNone;

export let NSAssertionHandlerKey: string;
global['NSAssertionHandlerKey'] = NSAssertionHandlerKey;

export let NSCocoaErrorDomain: string;
global['NSCocoaErrorDomain'] = NSCocoaErrorDomain;

export let NSDeallocateZombies: boolean;
global['NSDeallocateZombies'] = NSDeallocateZombies;

export let NSDebugDescriptionErrorKey: string;
global['NSDebugDescriptionErrorKey'] = NSDebugDescriptionErrorKey;

export let NSDebugEnabled: boolean;
global['NSDebugEnabled'] = NSDebugEnabled;

export let NSEdgeInsetsZero: NSEdgeInsets;
global['NSEdgeInsetsZero'] = NSEdgeInsetsZero;

export let NSExtensionItemAttachmentsKey: string;
global['NSExtensionItemAttachmentsKey'] = NSExtensionItemAttachmentsKey;

export let NSExtensionItemAttributedContentTextKey: string;
global['NSExtensionItemAttributedContentTextKey'] = NSExtensionItemAttributedContentTextKey;

export let NSExtensionItemAttributedTitleKey: string;
global['NSExtensionItemAttributedTitleKey'] = NSExtensionItemAttributedTitleKey;

export let NSExtensionItemsAndErrorsKey: string;
global['NSExtensionItemsAndErrorsKey'] = NSExtensionItemsAndErrorsKey;

export let NSExtensionJavaScriptPreprocessingResultsKey: string;
global['NSExtensionJavaScriptPreprocessingResultsKey'] = NSExtensionJavaScriptPreprocessingResultsKey;

export let NSFileHandleNotificationDataItem: string;
global['NSFileHandleNotificationDataItem'] = NSFileHandleNotificationDataItem;

export let NSFileHandleNotificationFileHandleItem: string;
global['NSFileHandleNotificationFileHandleItem'] = NSFileHandleNotificationFileHandleItem;

export let NSFileManagerUnmountDissentingProcessIdentifierErrorKey: string;
global['NSFileManagerUnmountDissentingProcessIdentifierErrorKey'] = NSFileManagerUnmountDissentingProcessIdentifierErrorKey;

export let NSFilePathErrorKey: string;
global['NSFilePathErrorKey'] = NSFilePathErrorKey;

export let NSFoundationVersionNumber: number;
global['NSFoundationVersionNumber'] = NSFoundationVersionNumber;

export let NSGrammarCorrections: string;
global['NSGrammarCorrections'] = NSGrammarCorrections;

export let NSGrammarRange: string;
global['NSGrammarRange'] = NSGrammarRange;

export let NSGrammarUserDescription: string;
global['NSGrammarUserDescription'] = NSGrammarUserDescription;

export let NSHashTableCopyIn: NSPointerFunctions.Options;
global['NSHashTableCopyIn'] = NSHashTableCopyIn;

export let NSHashTableObjectPointerPersonality: NSPointerFunctions.Options;
global['NSHashTableObjectPointerPersonality'] = NSHashTableObjectPointerPersonality;

export let NSHashTableStrongMemory: NSPointerFunctions.Options;
global['NSHashTableStrongMemory'] = NSHashTableStrongMemory;

export let NSHashTableWeakMemory: NSPointerFunctions.Options;
global['NSHashTableWeakMemory'] = NSHashTableWeakMemory;

export let NSHelpAnchorErrorKey: string;
global['NSHelpAnchorErrorKey'] = NSHelpAnchorErrorKey;

export let NSIntegerHashCallBacks: NSHashTableCallBacks;
global['NSIntegerHashCallBacks'] = NSIntegerHashCallBacks;

export let NSIntegerMapKeyCallBacks: NSMapTableKeyCallBacks;
global['NSIntegerMapKeyCallBacks'] = NSIntegerMapKeyCallBacks;

export let NSIntegerMapValueCallBacks: NSMapTableValueCallBacks;
global['NSIntegerMapValueCallBacks'] = NSIntegerMapValueCallBacks;

export let NSItemProviderPreferredImageSizeKey: string;
global['NSItemProviderPreferredImageSizeKey'] = NSItemProviderPreferredImageSizeKey;

export let NSKeepAllocationStatistics: boolean;
global['NSKeepAllocationStatistics'] = NSKeepAllocationStatistics;

export let NSKeyedArchiveRootObjectKey: string;
global['NSKeyedArchiveRootObjectKey'] = NSKeyedArchiveRootObjectKey;

export let NSLoadedClasses: string;
global['NSLoadedClasses'] = NSLoadedClasses;

export let NSLocalizedDescriptionKey: string;
global['NSLocalizedDescriptionKey'] = NSLocalizedDescriptionKey;

export let NSLocalizedFailureErrorKey: string;
global['NSLocalizedFailureErrorKey'] = NSLocalizedFailureErrorKey;

export let NSLocalizedFailureReasonErrorKey: string;
global['NSLocalizedFailureReasonErrorKey'] = NSLocalizedFailureReasonErrorKey;

export let NSLocalizedRecoveryOptionsErrorKey: string;
global['NSLocalizedRecoveryOptionsErrorKey'] = NSLocalizedRecoveryOptionsErrorKey;

export let NSLocalizedRecoverySuggestionErrorKey: string;
global['NSLocalizedRecoverySuggestionErrorKey'] = NSLocalizedRecoverySuggestionErrorKey;

export let NSMachErrorDomain: string;
global['NSMachErrorDomain'] = NSMachErrorDomain;

export let NSMapTableCopyIn: NSPointerFunctions.Options;
global['NSMapTableCopyIn'] = NSMapTableCopyIn;

export let NSMapTableObjectPointerPersonality: NSPointerFunctions.Options;
global['NSMapTableObjectPointerPersonality'] = NSMapTableObjectPointerPersonality;

export let NSMapTableStrongMemory: NSPointerFunctions.Options;
global['NSMapTableStrongMemory'] = NSMapTableStrongMemory;

export let NSMapTableWeakMemory: NSPointerFunctions.Options;
global['NSMapTableWeakMemory'] = NSMapTableWeakMemory;

export let NSMetadataItemAcquisitionMakeKey: string;
global['NSMetadataItemAcquisitionMakeKey'] = NSMetadataItemAcquisitionMakeKey;

export let NSMetadataItemAcquisitionModelKey: string;
global['NSMetadataItemAcquisitionModelKey'] = NSMetadataItemAcquisitionModelKey;

export let NSMetadataItemAlbumKey: string;
global['NSMetadataItemAlbumKey'] = NSMetadataItemAlbumKey;

export let NSMetadataItemAltitudeKey: string;
global['NSMetadataItemAltitudeKey'] = NSMetadataItemAltitudeKey;

export let NSMetadataItemApertureKey: string;
global['NSMetadataItemApertureKey'] = NSMetadataItemApertureKey;

export let NSMetadataItemAppleLoopDescriptorsKey: string;
global['NSMetadataItemAppleLoopDescriptorsKey'] = NSMetadataItemAppleLoopDescriptorsKey;

export let NSMetadataItemAppleLoopsKeyFilterTypeKey: string;
global['NSMetadataItemAppleLoopsKeyFilterTypeKey'] = NSMetadataItemAppleLoopsKeyFilterTypeKey;

export let NSMetadataItemAppleLoopsLoopModeKey: string;
global['NSMetadataItemAppleLoopsLoopModeKey'] = NSMetadataItemAppleLoopsLoopModeKey;

export let NSMetadataItemAppleLoopsRootKeyKey: string;
global['NSMetadataItemAppleLoopsRootKeyKey'] = NSMetadataItemAppleLoopsRootKeyKey;

export let NSMetadataItemApplicationCategoriesKey: string;
global['NSMetadataItemApplicationCategoriesKey'] = NSMetadataItemApplicationCategoriesKey;

export let NSMetadataItemAttributeChangeDateKey: string;
global['NSMetadataItemAttributeChangeDateKey'] = NSMetadataItemAttributeChangeDateKey;

export let NSMetadataItemAudiencesKey: string;
global['NSMetadataItemAudiencesKey'] = NSMetadataItemAudiencesKey;

export let NSMetadataItemAudioBitRateKey: string;
global['NSMetadataItemAudioBitRateKey'] = NSMetadataItemAudioBitRateKey;

export let NSMetadataItemAudioChannelCountKey: string;
global['NSMetadataItemAudioChannelCountKey'] = NSMetadataItemAudioChannelCountKey;

export let NSMetadataItemAudioEncodingApplicationKey: string;
global['NSMetadataItemAudioEncodingApplicationKey'] = NSMetadataItemAudioEncodingApplicationKey;

export let NSMetadataItemAudioSampleRateKey: string;
global['NSMetadataItemAudioSampleRateKey'] = NSMetadataItemAudioSampleRateKey;

export let NSMetadataItemAudioTrackNumberKey: string;
global['NSMetadataItemAudioTrackNumberKey'] = NSMetadataItemAudioTrackNumberKey;

export let NSMetadataItemAuthorAddressesKey: string;
global['NSMetadataItemAuthorAddressesKey'] = NSMetadataItemAuthorAddressesKey;

export let NSMetadataItemAuthorEmailAddressesKey: string;
global['NSMetadataItemAuthorEmailAddressesKey'] = NSMetadataItemAuthorEmailAddressesKey;

export let NSMetadataItemAuthorsKey: string;
global['NSMetadataItemAuthorsKey'] = NSMetadataItemAuthorsKey;

export let NSMetadataItemBitsPerSampleKey: string;
global['NSMetadataItemBitsPerSampleKey'] = NSMetadataItemBitsPerSampleKey;

export let NSMetadataItemCFBundleIdentifierKey: string;
global['NSMetadataItemCFBundleIdentifierKey'] = NSMetadataItemCFBundleIdentifierKey;

export let NSMetadataItemCameraOwnerKey: string;
global['NSMetadataItemCameraOwnerKey'] = NSMetadataItemCameraOwnerKey;

export let NSMetadataItemCityKey: string;
global['NSMetadataItemCityKey'] = NSMetadataItemCityKey;

export let NSMetadataItemCodecsKey: string;
global['NSMetadataItemCodecsKey'] = NSMetadataItemCodecsKey;

export let NSMetadataItemColorSpaceKey: string;
global['NSMetadataItemColorSpaceKey'] = NSMetadataItemColorSpaceKey;

export let NSMetadataItemCommentKey: string;
global['NSMetadataItemCommentKey'] = NSMetadataItemCommentKey;

export let NSMetadataItemComposerKey: string;
global['NSMetadataItemComposerKey'] = NSMetadataItemComposerKey;

export let NSMetadataItemContactKeywordsKey: string;
global['NSMetadataItemContactKeywordsKey'] = NSMetadataItemContactKeywordsKey;

export let NSMetadataItemContentCreationDateKey: string;
global['NSMetadataItemContentCreationDateKey'] = NSMetadataItemContentCreationDateKey;

export let NSMetadataItemContentModificationDateKey: string;
global['NSMetadataItemContentModificationDateKey'] = NSMetadataItemContentModificationDateKey;

export let NSMetadataItemContentTypeKey: string;
global['NSMetadataItemContentTypeKey'] = NSMetadataItemContentTypeKey;

export let NSMetadataItemContentTypeTreeKey: string;
global['NSMetadataItemContentTypeTreeKey'] = NSMetadataItemContentTypeTreeKey;

export let NSMetadataItemContributorsKey: string;
global['NSMetadataItemContributorsKey'] = NSMetadataItemContributorsKey;

export let NSMetadataItemCopyrightKey: string;
global['NSMetadataItemCopyrightKey'] = NSMetadataItemCopyrightKey;

export let NSMetadataItemCountryKey: string;
global['NSMetadataItemCountryKey'] = NSMetadataItemCountryKey;

export let NSMetadataItemCoverageKey: string;
global['NSMetadataItemCoverageKey'] = NSMetadataItemCoverageKey;

export let NSMetadataItemCreatorKey: string;
global['NSMetadataItemCreatorKey'] = NSMetadataItemCreatorKey;

export let NSMetadataItemDateAddedKey: string;
global['NSMetadataItemDateAddedKey'] = NSMetadataItemDateAddedKey;

export let NSMetadataItemDeliveryTypeKey: string;
global['NSMetadataItemDeliveryTypeKey'] = NSMetadataItemDeliveryTypeKey;

export let NSMetadataItemDescriptionKey: string;
global['NSMetadataItemDescriptionKey'] = NSMetadataItemDescriptionKey;

export let NSMetadataItemDirectorKey: string;
global['NSMetadataItemDirectorKey'] = NSMetadataItemDirectorKey;

export let NSMetadataItemDisplayNameKey: string;
global['NSMetadataItemDisplayNameKey'] = NSMetadataItemDisplayNameKey;

export let NSMetadataItemDownloadedDateKey: string;
global['NSMetadataItemDownloadedDateKey'] = NSMetadataItemDownloadedDateKey;

export let NSMetadataItemDueDateKey: string;
global['NSMetadataItemDueDateKey'] = NSMetadataItemDueDateKey;

export let NSMetadataItemDurationSecondsKey: string;
global['NSMetadataItemDurationSecondsKey'] = NSMetadataItemDurationSecondsKey;

export let NSMetadataItemEXIFGPSVersionKey: string;
global['NSMetadataItemEXIFGPSVersionKey'] = NSMetadataItemEXIFGPSVersionKey;

export let NSMetadataItemEXIFVersionKey: string;
global['NSMetadataItemEXIFVersionKey'] = NSMetadataItemEXIFVersionKey;

export let NSMetadataItemEditorsKey: string;
global['NSMetadataItemEditorsKey'] = NSMetadataItemEditorsKey;

export let NSMetadataItemEmailAddressesKey: string;
global['NSMetadataItemEmailAddressesKey'] = NSMetadataItemEmailAddressesKey;

export let NSMetadataItemEncodingApplicationsKey: string;
global['NSMetadataItemEncodingApplicationsKey'] = NSMetadataItemEncodingApplicationsKey;

export let NSMetadataItemExecutableArchitecturesKey: string;
global['NSMetadataItemExecutableArchitecturesKey'] = NSMetadataItemExecutableArchitecturesKey;

export let NSMetadataItemExecutablePlatformKey: string;
global['NSMetadataItemExecutablePlatformKey'] = NSMetadataItemExecutablePlatformKey;

export let NSMetadataItemExposureModeKey: string;
global['NSMetadataItemExposureModeKey'] = NSMetadataItemExposureModeKey;

export let NSMetadataItemExposureProgramKey: string;
global['NSMetadataItemExposureProgramKey'] = NSMetadataItemExposureProgramKey;

export let NSMetadataItemExposureTimeSecondsKey: string;
global['NSMetadataItemExposureTimeSecondsKey'] = NSMetadataItemExposureTimeSecondsKey;

export let NSMetadataItemExposureTimeStringKey: string;
global['NSMetadataItemExposureTimeStringKey'] = NSMetadataItemExposureTimeStringKey;

export let NSMetadataItemFNumberKey: string;
global['NSMetadataItemFNumberKey'] = NSMetadataItemFNumberKey;

export let NSMetadataItemFSContentChangeDateKey: string;
global['NSMetadataItemFSContentChangeDateKey'] = NSMetadataItemFSContentChangeDateKey;

export let NSMetadataItemFSCreationDateKey: string;
global['NSMetadataItemFSCreationDateKey'] = NSMetadataItemFSCreationDateKey;

export let NSMetadataItemFSNameKey: string;
global['NSMetadataItemFSNameKey'] = NSMetadataItemFSNameKey;

export let NSMetadataItemFSSizeKey: string;
global['NSMetadataItemFSSizeKey'] = NSMetadataItemFSSizeKey;

export let NSMetadataItemFinderCommentKey: string;
global['NSMetadataItemFinderCommentKey'] = NSMetadataItemFinderCommentKey;

export let NSMetadataItemFlashOnOffKey: string;
global['NSMetadataItemFlashOnOffKey'] = NSMetadataItemFlashOnOffKey;

export let NSMetadataItemFocalLength35mmKey: string;
global['NSMetadataItemFocalLength35mmKey'] = NSMetadataItemFocalLength35mmKey;

export let NSMetadataItemFocalLengthKey: string;
global['NSMetadataItemFocalLengthKey'] = NSMetadataItemFocalLengthKey;

export let NSMetadataItemFontsKey: string;
global['NSMetadataItemFontsKey'] = NSMetadataItemFontsKey;

export let NSMetadataItemGPSAreaInformationKey: string;
global['NSMetadataItemGPSAreaInformationKey'] = NSMetadataItemGPSAreaInformationKey;

export let NSMetadataItemGPSDOPKey: string;
global['NSMetadataItemGPSDOPKey'] = NSMetadataItemGPSDOPKey;

export let NSMetadataItemGPSDateStampKey: string;
global['NSMetadataItemGPSDateStampKey'] = NSMetadataItemGPSDateStampKey;

export let NSMetadataItemGPSDestBearingKey: string;
global['NSMetadataItemGPSDestBearingKey'] = NSMetadataItemGPSDestBearingKey;

export let NSMetadataItemGPSDestDistanceKey: string;
global['NSMetadataItemGPSDestDistanceKey'] = NSMetadataItemGPSDestDistanceKey;

export let NSMetadataItemGPSDestLatitudeKey: string;
global['NSMetadataItemGPSDestLatitudeKey'] = NSMetadataItemGPSDestLatitudeKey;

export let NSMetadataItemGPSDestLongitudeKey: string;
global['NSMetadataItemGPSDestLongitudeKey'] = NSMetadataItemGPSDestLongitudeKey;

export let NSMetadataItemGPSDifferentalKey: string;
global['NSMetadataItemGPSDifferentalKey'] = NSMetadataItemGPSDifferentalKey;

export let NSMetadataItemGPSMapDatumKey: string;
global['NSMetadataItemGPSMapDatumKey'] = NSMetadataItemGPSMapDatumKey;

export let NSMetadataItemGPSMeasureModeKey: string;
global['NSMetadataItemGPSMeasureModeKey'] = NSMetadataItemGPSMeasureModeKey;

export let NSMetadataItemGPSProcessingMethodKey: string;
global['NSMetadataItemGPSProcessingMethodKey'] = NSMetadataItemGPSProcessingMethodKey;

export let NSMetadataItemGPSStatusKey: string;
global['NSMetadataItemGPSStatusKey'] = NSMetadataItemGPSStatusKey;

export let NSMetadataItemGPSTrackKey: string;
global['NSMetadataItemGPSTrackKey'] = NSMetadataItemGPSTrackKey;

export let NSMetadataItemGenreKey: string;
global['NSMetadataItemGenreKey'] = NSMetadataItemGenreKey;

export let NSMetadataItemHasAlphaChannelKey: string;
global['NSMetadataItemHasAlphaChannelKey'] = NSMetadataItemHasAlphaChannelKey;

export let NSMetadataItemHeadlineKey: string;
global['NSMetadataItemHeadlineKey'] = NSMetadataItemHeadlineKey;

export let NSMetadataItemISOSpeedKey: string;
global['NSMetadataItemISOSpeedKey'] = NSMetadataItemISOSpeedKey;

export let NSMetadataItemIdentifierKey: string;
global['NSMetadataItemIdentifierKey'] = NSMetadataItemIdentifierKey;

export let NSMetadataItemImageDirectionKey: string;
global['NSMetadataItemImageDirectionKey'] = NSMetadataItemImageDirectionKey;

export let NSMetadataItemInformationKey: string;
global['NSMetadataItemInformationKey'] = NSMetadataItemInformationKey;

export let NSMetadataItemInstantMessageAddressesKey: string;
global['NSMetadataItemInstantMessageAddressesKey'] = NSMetadataItemInstantMessageAddressesKey;

export let NSMetadataItemInstructionsKey: string;
global['NSMetadataItemInstructionsKey'] = NSMetadataItemInstructionsKey;

export let NSMetadataItemIsApplicationManagedKey: string;
global['NSMetadataItemIsApplicationManagedKey'] = NSMetadataItemIsApplicationManagedKey;

export let NSMetadataItemIsGeneralMIDISequenceKey: string;
global['NSMetadataItemIsGeneralMIDISequenceKey'] = NSMetadataItemIsGeneralMIDISequenceKey;

export let NSMetadataItemIsLikelyJunkKey: string;
global['NSMetadataItemIsLikelyJunkKey'] = NSMetadataItemIsLikelyJunkKey;

export let NSMetadataItemIsUbiquitousKey: string;
global['NSMetadataItemIsUbiquitousKey'] = NSMetadataItemIsUbiquitousKey;

export let NSMetadataItemKeySignatureKey: string;
global['NSMetadataItemKeySignatureKey'] = NSMetadataItemKeySignatureKey;

export let NSMetadataItemKeywordsKey: string;
global['NSMetadataItemKeywordsKey'] = NSMetadataItemKeywordsKey;

export let NSMetadataItemKindKey: string;
global['NSMetadataItemKindKey'] = NSMetadataItemKindKey;

export let NSMetadataItemLanguagesKey: string;
global['NSMetadataItemLanguagesKey'] = NSMetadataItemLanguagesKey;

export let NSMetadataItemLastUsedDateKey: string;
global['NSMetadataItemLastUsedDateKey'] = NSMetadataItemLastUsedDateKey;

export let NSMetadataItemLatitudeKey: string;
global['NSMetadataItemLatitudeKey'] = NSMetadataItemLatitudeKey;

export let NSMetadataItemLayerNamesKey: string;
global['NSMetadataItemLayerNamesKey'] = NSMetadataItemLayerNamesKey;

export let NSMetadataItemLensModelKey: string;
global['NSMetadataItemLensModelKey'] = NSMetadataItemLensModelKey;

export let NSMetadataItemLongitudeKey: string;
global['NSMetadataItemLongitudeKey'] = NSMetadataItemLongitudeKey;

export let NSMetadataItemLyricistKey: string;
global['NSMetadataItemLyricistKey'] = NSMetadataItemLyricistKey;

export let NSMetadataItemMaxApertureKey: string;
global['NSMetadataItemMaxApertureKey'] = NSMetadataItemMaxApertureKey;

export let NSMetadataItemMediaTypesKey: string;
global['NSMetadataItemMediaTypesKey'] = NSMetadataItemMediaTypesKey;

export let NSMetadataItemMeteringModeKey: string;
global['NSMetadataItemMeteringModeKey'] = NSMetadataItemMeteringModeKey;

export let NSMetadataItemMusicalGenreKey: string;
global['NSMetadataItemMusicalGenreKey'] = NSMetadataItemMusicalGenreKey;

export let NSMetadataItemMusicalInstrumentCategoryKey: string;
global['NSMetadataItemMusicalInstrumentCategoryKey'] = NSMetadataItemMusicalInstrumentCategoryKey;

export let NSMetadataItemMusicalInstrumentNameKey: string;
global['NSMetadataItemMusicalInstrumentNameKey'] = NSMetadataItemMusicalInstrumentNameKey;

export let NSMetadataItemNamedLocationKey: string;
global['NSMetadataItemNamedLocationKey'] = NSMetadataItemNamedLocationKey;

export let NSMetadataItemNumberOfPagesKey: string;
global['NSMetadataItemNumberOfPagesKey'] = NSMetadataItemNumberOfPagesKey;

export let NSMetadataItemOrganizationsKey: string;
global['NSMetadataItemOrganizationsKey'] = NSMetadataItemOrganizationsKey;

export let NSMetadataItemOrientationKey: string;
global['NSMetadataItemOrientationKey'] = NSMetadataItemOrientationKey;

export let NSMetadataItemOriginalFormatKey: string;
global['NSMetadataItemOriginalFormatKey'] = NSMetadataItemOriginalFormatKey;

export let NSMetadataItemOriginalSourceKey: string;
global['NSMetadataItemOriginalSourceKey'] = NSMetadataItemOriginalSourceKey;

export let NSMetadataItemPageHeightKey: string;
global['NSMetadataItemPageHeightKey'] = NSMetadataItemPageHeightKey;

export let NSMetadataItemPageWidthKey: string;
global['NSMetadataItemPageWidthKey'] = NSMetadataItemPageWidthKey;

export let NSMetadataItemParticipantsKey: string;
global['NSMetadataItemParticipantsKey'] = NSMetadataItemParticipantsKey;

export let NSMetadataItemPathKey: string;
global['NSMetadataItemPathKey'] = NSMetadataItemPathKey;

export let NSMetadataItemPerformersKey: string;
global['NSMetadataItemPerformersKey'] = NSMetadataItemPerformersKey;

export let NSMetadataItemPhoneNumbersKey: string;
global['NSMetadataItemPhoneNumbersKey'] = NSMetadataItemPhoneNumbersKey;

export let NSMetadataItemPixelCountKey: string;
global['NSMetadataItemPixelCountKey'] = NSMetadataItemPixelCountKey;

export let NSMetadataItemPixelHeightKey: string;
global['NSMetadataItemPixelHeightKey'] = NSMetadataItemPixelHeightKey;

export let NSMetadataItemPixelWidthKey: string;
global['NSMetadataItemPixelWidthKey'] = NSMetadataItemPixelWidthKey;

export let NSMetadataItemProducerKey: string;
global['NSMetadataItemProducerKey'] = NSMetadataItemProducerKey;

export let NSMetadataItemProfileNameKey: string;
global['NSMetadataItemProfileNameKey'] = NSMetadataItemProfileNameKey;

export let NSMetadataItemProjectsKey: string;
global['NSMetadataItemProjectsKey'] = NSMetadataItemProjectsKey;

export let NSMetadataItemPublishersKey: string;
global['NSMetadataItemPublishersKey'] = NSMetadataItemPublishersKey;

export let NSMetadataItemRecipientAddressesKey: string;
global['NSMetadataItemRecipientAddressesKey'] = NSMetadataItemRecipientAddressesKey;

export let NSMetadataItemRecipientEmailAddressesKey: string;
global['NSMetadataItemRecipientEmailAddressesKey'] = NSMetadataItemRecipientEmailAddressesKey;

export let NSMetadataItemRecipientsKey: string;
global['NSMetadataItemRecipientsKey'] = NSMetadataItemRecipientsKey;

export let NSMetadataItemRecordingDateKey: string;
global['NSMetadataItemRecordingDateKey'] = NSMetadataItemRecordingDateKey;

export let NSMetadataItemRecordingYearKey: string;
global['NSMetadataItemRecordingYearKey'] = NSMetadataItemRecordingYearKey;

export let NSMetadataItemRedEyeOnOffKey: string;
global['NSMetadataItemRedEyeOnOffKey'] = NSMetadataItemRedEyeOnOffKey;

export let NSMetadataItemResolutionHeightDPIKey: string;
global['NSMetadataItemResolutionHeightDPIKey'] = NSMetadataItemResolutionHeightDPIKey;

export let NSMetadataItemResolutionWidthDPIKey: string;
global['NSMetadataItemResolutionWidthDPIKey'] = NSMetadataItemResolutionWidthDPIKey;

export let NSMetadataItemRightsKey: string;
global['NSMetadataItemRightsKey'] = NSMetadataItemRightsKey;

export let NSMetadataItemSecurityMethodKey: string;
global['NSMetadataItemSecurityMethodKey'] = NSMetadataItemSecurityMethodKey;

export let NSMetadataItemSpeedKey: string;
global['NSMetadataItemSpeedKey'] = NSMetadataItemSpeedKey;

export let NSMetadataItemStarRatingKey: string;
global['NSMetadataItemStarRatingKey'] = NSMetadataItemStarRatingKey;

export let NSMetadataItemStateOrProvinceKey: string;
global['NSMetadataItemStateOrProvinceKey'] = NSMetadataItemStateOrProvinceKey;

export let NSMetadataItemStreamableKey: string;
global['NSMetadataItemStreamableKey'] = NSMetadataItemStreamableKey;

export let NSMetadataItemSubjectKey: string;
global['NSMetadataItemSubjectKey'] = NSMetadataItemSubjectKey;

export let NSMetadataItemTempoKey: string;
global['NSMetadataItemTempoKey'] = NSMetadataItemTempoKey;

export let NSMetadataItemTextContentKey: string;
global['NSMetadataItemTextContentKey'] = NSMetadataItemTextContentKey;

export let NSMetadataItemThemeKey: string;
global['NSMetadataItemThemeKey'] = NSMetadataItemThemeKey;

export let NSMetadataItemTimeSignatureKey: string;
global['NSMetadataItemTimeSignatureKey'] = NSMetadataItemTimeSignatureKey;

export let NSMetadataItemTimestampKey: string;
global['NSMetadataItemTimestampKey'] = NSMetadataItemTimestampKey;

export let NSMetadataItemTitleKey: string;
global['NSMetadataItemTitleKey'] = NSMetadataItemTitleKey;

export let NSMetadataItemTotalBitRateKey: string;
global['NSMetadataItemTotalBitRateKey'] = NSMetadataItemTotalBitRateKey;

export let NSMetadataItemURLKey: string;
global['NSMetadataItemURLKey'] = NSMetadataItemURLKey;

export let NSMetadataItemVersionKey: string;
global['NSMetadataItemVersionKey'] = NSMetadataItemVersionKey;

export let NSMetadataItemVideoBitRateKey: string;
global['NSMetadataItemVideoBitRateKey'] = NSMetadataItemVideoBitRateKey;

export let NSMetadataItemWhereFromsKey: string;
global['NSMetadataItemWhereFromsKey'] = NSMetadataItemWhereFromsKey;

export let NSMetadataItemWhiteBalanceKey: string;
global['NSMetadataItemWhiteBalanceKey'] = NSMetadataItemWhiteBalanceKey;

export let NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope: string;
global['NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope'] = NSMetadataQueryAccessibleUbiquitousExternalDocumentsScope;

export let NSMetadataQueryIndexedLocalComputerScope: string;
global['NSMetadataQueryIndexedLocalComputerScope'] = NSMetadataQueryIndexedLocalComputerScope;

export let NSMetadataQueryIndexedNetworkScope: string;
global['NSMetadataQueryIndexedNetworkScope'] = NSMetadataQueryIndexedNetworkScope;

export let NSMetadataQueryLocalComputerScope: string;
global['NSMetadataQueryLocalComputerScope'] = NSMetadataQueryLocalComputerScope;

export let NSMetadataQueryNetworkScope: string;
global['NSMetadataQueryNetworkScope'] = NSMetadataQueryNetworkScope;

export let NSMetadataQueryResultContentRelevanceAttribute: string;
global['NSMetadataQueryResultContentRelevanceAttribute'] = NSMetadataQueryResultContentRelevanceAttribute;

export let NSMetadataQueryUbiquitousDataScope: string;
global['NSMetadataQueryUbiquitousDataScope'] = NSMetadataQueryUbiquitousDataScope;

export let NSMetadataQueryUbiquitousDocumentsScope: string;
global['NSMetadataQueryUbiquitousDocumentsScope'] = NSMetadataQueryUbiquitousDocumentsScope;

export let NSMetadataQueryUpdateAddedItemsKey: string;
global['NSMetadataQueryUpdateAddedItemsKey'] = NSMetadataQueryUpdateAddedItemsKey;

export let NSMetadataQueryUpdateChangedItemsKey: string;
global['NSMetadataQueryUpdateChangedItemsKey'] = NSMetadataQueryUpdateChangedItemsKey;

export let NSMetadataQueryUpdateRemovedItemsKey: string;
global['NSMetadataQueryUpdateRemovedItemsKey'] = NSMetadataQueryUpdateRemovedItemsKey;

export let NSMetadataQueryUserHomeScope: string;
global['NSMetadataQueryUserHomeScope'] = NSMetadataQueryUserHomeScope;

export let NSMetadataUbiquitousItemContainerDisplayNameKey: string;
global['NSMetadataUbiquitousItemContainerDisplayNameKey'] = NSMetadataUbiquitousItemContainerDisplayNameKey;

export let NSMetadataUbiquitousItemDownloadRequestedKey: string;
global['NSMetadataUbiquitousItemDownloadRequestedKey'] = NSMetadataUbiquitousItemDownloadRequestedKey;

export let NSMetadataUbiquitousItemDownloadingErrorKey: string;
global['NSMetadataUbiquitousItemDownloadingErrorKey'] = NSMetadataUbiquitousItemDownloadingErrorKey;

export let NSMetadataUbiquitousItemDownloadingStatusCurrent: string;
global['NSMetadataUbiquitousItemDownloadingStatusCurrent'] = NSMetadataUbiquitousItemDownloadingStatusCurrent;

export let NSMetadataUbiquitousItemDownloadingStatusDownloaded: string;
global['NSMetadataUbiquitousItemDownloadingStatusDownloaded'] = NSMetadataUbiquitousItemDownloadingStatusDownloaded;

export let NSMetadataUbiquitousItemDownloadingStatusKey: string;
global['NSMetadataUbiquitousItemDownloadingStatusKey'] = NSMetadataUbiquitousItemDownloadingStatusKey;

export let NSMetadataUbiquitousItemDownloadingStatusNotDownloaded: string;
global['NSMetadataUbiquitousItemDownloadingStatusNotDownloaded'] = NSMetadataUbiquitousItemDownloadingStatusNotDownloaded;

export let NSMetadataUbiquitousItemHasUnresolvedConflictsKey: string;
global['NSMetadataUbiquitousItemHasUnresolvedConflictsKey'] = NSMetadataUbiquitousItemHasUnresolvedConflictsKey;

export let NSMetadataUbiquitousItemIsDownloadingKey: string;
global['NSMetadataUbiquitousItemIsDownloadingKey'] = NSMetadataUbiquitousItemIsDownloadingKey;

export let NSMetadataUbiquitousItemIsExternalDocumentKey: string;
global['NSMetadataUbiquitousItemIsExternalDocumentKey'] = NSMetadataUbiquitousItemIsExternalDocumentKey;

export let NSMetadataUbiquitousItemIsSharedKey: string;
global['NSMetadataUbiquitousItemIsSharedKey'] = NSMetadataUbiquitousItemIsSharedKey;

export let NSMetadataUbiquitousItemIsUploadedKey: string;
global['NSMetadataUbiquitousItemIsUploadedKey'] = NSMetadataUbiquitousItemIsUploadedKey;

export let NSMetadataUbiquitousItemIsUploadingKey: string;
global['NSMetadataUbiquitousItemIsUploadingKey'] = NSMetadataUbiquitousItemIsUploadingKey;

export let NSMetadataUbiquitousItemPercentDownloadedKey: string;
global['NSMetadataUbiquitousItemPercentDownloadedKey'] = NSMetadataUbiquitousItemPercentDownloadedKey;

export let NSMetadataUbiquitousItemPercentUploadedKey: string;
global['NSMetadataUbiquitousItemPercentUploadedKey'] = NSMetadataUbiquitousItemPercentUploadedKey;

export let NSMetadataUbiquitousItemURLInLocalContainerKey: string;
global['NSMetadataUbiquitousItemURLInLocalContainerKey'] = NSMetadataUbiquitousItemURLInLocalContainerKey;

export let NSMetadataUbiquitousItemUploadingErrorKey: string;
global['NSMetadataUbiquitousItemUploadingErrorKey'] = NSMetadataUbiquitousItemUploadingErrorKey;

export let NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey: string;
global['NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey'] = NSMetadataUbiquitousSharedItemCurrentUserPermissionsKey;

export let NSMetadataUbiquitousSharedItemCurrentUserRoleKey: string;
global['NSMetadataUbiquitousSharedItemCurrentUserRoleKey'] = NSMetadataUbiquitousSharedItemCurrentUserRoleKey;

export let NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey: string;
global['NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey'] = NSMetadataUbiquitousSharedItemMostRecentEditorNameComponentsKey;

export let NSMetadataUbiquitousSharedItemOwnerNameComponentsKey: string;
global['NSMetadataUbiquitousSharedItemOwnerNameComponentsKey'] = NSMetadataUbiquitousSharedItemOwnerNameComponentsKey;

export let NSMetadataUbiquitousSharedItemPermissionsReadOnly: string;
global['NSMetadataUbiquitousSharedItemPermissionsReadOnly'] = NSMetadataUbiquitousSharedItemPermissionsReadOnly;

export let NSMetadataUbiquitousSharedItemPermissionsReadWrite: string;
global['NSMetadataUbiquitousSharedItemPermissionsReadWrite'] = NSMetadataUbiquitousSharedItemPermissionsReadWrite;

export let NSMetadataUbiquitousSharedItemRoleOwner: string;
global['NSMetadataUbiquitousSharedItemRoleOwner'] = NSMetadataUbiquitousSharedItemRoleOwner;

export let NSMetadataUbiquitousSharedItemRoleParticipant: string;
global['NSMetadataUbiquitousSharedItemRoleParticipant'] = NSMetadataUbiquitousSharedItemRoleParticipant;

export let NSNonOwnedPointerHashCallBacks: NSHashTableCallBacks;
global['NSNonOwnedPointerHashCallBacks'] = NSNonOwnedPointerHashCallBacks;

export let NSNonOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
global['NSNonOwnedPointerMapKeyCallBacks'] = NSNonOwnedPointerMapKeyCallBacks;

export let NSNonOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
global['NSNonOwnedPointerMapValueCallBacks'] = NSNonOwnedPointerMapValueCallBacks;

export let NSNonOwnedPointerOrNullMapKeyCallBacks: NSMapTableKeyCallBacks;
global['NSNonOwnedPointerOrNullMapKeyCallBacks'] = NSNonOwnedPointerOrNullMapKeyCallBacks;

export let NSNonRetainedObjectHashCallBacks: NSHashTableCallBacks;
global['NSNonRetainedObjectHashCallBacks'] = NSNonRetainedObjectHashCallBacks;

export let NSNonRetainedObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
global['NSNonRetainedObjectMapKeyCallBacks'] = NSNonRetainedObjectMapKeyCallBacks;

export let NSNonRetainedObjectMapValueCallBacks: NSMapTableValueCallBacks;
global['NSNonRetainedObjectMapValueCallBacks'] = NSNonRetainedObjectMapValueCallBacks;

export let NSNotFound: number;
global['NSNotFound'] = NSNotFound;

export let NSNotificationDeliverImmediately: DistributedNotificationCenter.Options;
global['NSNotificationDeliverImmediately'] = NSNotificationDeliverImmediately;

export let NSNotificationPostToAllSessions: DistributedNotificationCenter.Options;
global['NSNotificationPostToAllSessions'] = NSNotificationPostToAllSessions;

export let NSOSStatusErrorDomain: string;
global['NSOSStatusErrorDomain'] = NSOSStatusErrorDomain;

export let NSObjectHashCallBacks: NSHashTableCallBacks;
global['NSObjectHashCallBacks'] = NSObjectHashCallBacks;

export let NSObjectMapKeyCallBacks: NSMapTableKeyCallBacks;
global['NSObjectMapKeyCallBacks'] = NSObjectMapKeyCallBacks;

export let NSObjectMapValueCallBacks: NSMapTableValueCallBacks;
global['NSObjectMapValueCallBacks'] = NSObjectMapValueCallBacks;

export let NSOperationNotSupportedForKeyException: string;
global['NSOperationNotSupportedForKeyException'] = NSOperationNotSupportedForKeyException;

export let NSOwnedObjectIdentityHashCallBacks: NSHashTableCallBacks;
global['NSOwnedObjectIdentityHashCallBacks'] = NSOwnedObjectIdentityHashCallBacks;

export let NSOwnedPointerHashCallBacks: NSHashTableCallBacks;
global['NSOwnedPointerHashCallBacks'] = NSOwnedPointerHashCallBacks;

export let NSOwnedPointerMapKeyCallBacks: NSMapTableKeyCallBacks;
global['NSOwnedPointerMapKeyCallBacks'] = NSOwnedPointerMapKeyCallBacks;

export let NSOwnedPointerMapValueCallBacks: NSMapTableValueCallBacks;
global['NSOwnedPointerMapValueCallBacks'] = NSOwnedPointerMapValueCallBacks;

export let NSPOSIXErrorDomain: string;
global['NSPOSIXErrorDomain'] = NSPOSIXErrorDomain;

export let NSPersonNameComponentDelimiter: string;
global['NSPersonNameComponentDelimiter'] = NSPersonNameComponentDelimiter;

export let NSPersonNameComponentFamilyName: string;
global['NSPersonNameComponentFamilyName'] = NSPersonNameComponentFamilyName;

export let NSPersonNameComponentGivenName: string;
global['NSPersonNameComponentGivenName'] = NSPersonNameComponentGivenName;

export let NSPersonNameComponentKey: string;
global['NSPersonNameComponentKey'] = NSPersonNameComponentKey;

export let NSPersonNameComponentMiddleName: string;
global['NSPersonNameComponentMiddleName'] = NSPersonNameComponentMiddleName;

export let NSPersonNameComponentNickname: string;
global['NSPersonNameComponentNickname'] = NSPersonNameComponentNickname;

export let NSPersonNameComponentPrefix: string;
global['NSPersonNameComponentPrefix'] = NSPersonNameComponentPrefix;

export let NSPersonNameComponentSuffix: string;
global['NSPersonNameComponentSuffix'] = NSPersonNameComponentSuffix;

export let NSPointerToStructHashCallBacks: NSHashTableCallBacks;
global['NSPointerToStructHashCallBacks'] = NSPointerToStructHashCallBacks;

export let NSRecoveryAttempterErrorKey: string;
global['NSRecoveryAttempterErrorKey'] = NSRecoveryAttempterErrorKey;

export let NSStreamSOCKSErrorDomain: string;
global['NSStreamSOCKSErrorDomain'] = NSStreamSOCKSErrorDomain;

export let NSStreamSocketSSLErrorDomain: string;
global['NSStreamSocketSSLErrorDomain'] = NSStreamSocketSSLErrorDomain;

export let NSStringEncodingErrorKey: string;
global['NSStringEncodingErrorKey'] = NSStringEncodingErrorKey;

export let NSURLAuthenticationMethodClientCertificate: string;
global['NSURLAuthenticationMethodClientCertificate'] = NSURLAuthenticationMethodClientCertificate;

export let NSURLAuthenticationMethodDefault: string;
global['NSURLAuthenticationMethodDefault'] = NSURLAuthenticationMethodDefault;

export let NSURLAuthenticationMethodHTMLForm: string;
global['NSURLAuthenticationMethodHTMLForm'] = NSURLAuthenticationMethodHTMLForm;

export let NSURLAuthenticationMethodHTTPBasic: string;
global['NSURLAuthenticationMethodHTTPBasic'] = NSURLAuthenticationMethodHTTPBasic;

export let NSURLAuthenticationMethodHTTPDigest: string;
global['NSURLAuthenticationMethodHTTPDigest'] = NSURLAuthenticationMethodHTTPDigest;

export let NSURLAuthenticationMethodNTLM: string;
global['NSURLAuthenticationMethodNTLM'] = NSURLAuthenticationMethodNTLM;

export let NSURLAuthenticationMethodNegotiate: string;
global['NSURLAuthenticationMethodNegotiate'] = NSURLAuthenticationMethodNegotiate;

export let NSURLAuthenticationMethodServerTrust: string;
global['NSURLAuthenticationMethodServerTrust'] = NSURLAuthenticationMethodServerTrust;

export let NSURLCredentialStorageRemoveSynchronizableCredentials: string;
global['NSURLCredentialStorageRemoveSynchronizableCredentials'] = NSURLCredentialStorageRemoveSynchronizableCredentials;

export let NSURLErrorBackgroundTaskCancelledReasonKey: string;
global['NSURLErrorBackgroundTaskCancelledReasonKey'] = NSURLErrorBackgroundTaskCancelledReasonKey;

export let NSURLErrorDomain: string;
global['NSURLErrorDomain'] = NSURLErrorDomain;

export let NSURLErrorFailingURLErrorKey: string;
global['NSURLErrorFailingURLErrorKey'] = NSURLErrorFailingURLErrorKey;

export let NSURLErrorFailingURLPeerTrustErrorKey: string;
global['NSURLErrorFailingURLPeerTrustErrorKey'] = NSURLErrorFailingURLPeerTrustErrorKey;

export let NSURLErrorFailingURLStringErrorKey: string;
global['NSURLErrorFailingURLStringErrorKey'] = NSURLErrorFailingURLStringErrorKey;

export let NSURLErrorKey: string;
global['NSURLErrorKey'] = NSURLErrorKey;

export let NSURLErrorNetworkUnavailableReasonKey: string;
global['NSURLErrorNetworkUnavailableReasonKey'] = NSURLErrorNetworkUnavailableReasonKey;

export let NSURLFileScheme: string;
global['NSURLFileScheme'] = NSURLFileScheme;

export let NSURLProtectionSpaceFTP: string;
global['NSURLProtectionSpaceFTP'] = NSURLProtectionSpaceFTP;

export let NSURLProtectionSpaceFTPProxy: string;
global['NSURLProtectionSpaceFTPProxy'] = NSURLProtectionSpaceFTPProxy;

export let NSURLProtectionSpaceHTTP: string;
global['NSURLProtectionSpaceHTTP'] = NSURLProtectionSpaceHTTP;

export let NSURLProtectionSpaceHTTPProxy: string;
global['NSURLProtectionSpaceHTTPProxy'] = NSURLProtectionSpaceHTTPProxy;

export let NSURLProtectionSpaceHTTPS: string;
global['NSURLProtectionSpaceHTTPS'] = NSURLProtectionSpaceHTTPS;

export let NSURLProtectionSpaceHTTPSProxy: string;
global['NSURLProtectionSpaceHTTPSProxy'] = NSURLProtectionSpaceHTTPSProxy;

export let NSURLProtectionSpaceSOCKSProxy: string;
global['NSURLProtectionSpaceSOCKSProxy'] = NSURLProtectionSpaceSOCKSProxy;

export let NSURLSessionDownloadTaskResumeData: string;
global['NSURLSessionDownloadTaskResumeData'] = NSURLSessionDownloadTaskResumeData;

export let NSURLSessionTransferSizeUnknown: number;
global['NSURLSessionTransferSizeUnknown'] = NSURLSessionTransferSizeUnknown;

export let NSUbiquitousKeyValueStoreChangeReasonKey: string;
global['NSUbiquitousKeyValueStoreChangeReasonKey'] = NSUbiquitousKeyValueStoreChangeReasonKey;

export let NSUbiquitousKeyValueStoreChangedKeysKey: string;
global['NSUbiquitousKeyValueStoreChangedKeysKey'] = NSUbiquitousKeyValueStoreChangedKeysKey;

export let NSUnderlyingErrorKey: string;
global['NSUnderlyingErrorKey'] = NSUnderlyingErrorKey;

export let NSUndoCloseGroupingRunLoopOrdering: number;
global['NSUndoCloseGroupingRunLoopOrdering'] = NSUndoCloseGroupingRunLoopOrdering;

export let NSUndoManagerGroupIsDiscardableKey: string;
global['NSUndoManagerGroupIsDiscardableKey'] = NSUndoManagerGroupIsDiscardableKey;

export let NSUserActivityTypeBrowsingWeb: string;
global['NSUserActivityTypeBrowsingWeb'] = NSUserActivityTypeBrowsingWeb;

export let NSUserNotificationDefaultSoundName: string;
global['NSUserNotificationDefaultSoundName'] = NSUserNotificationDefaultSoundName;

export let NSZeroPoint: CGPoint;
global['NSZeroPoint'] = NSZeroPoint;

export let NSZeroRect: CGRect;
global['NSZeroRect'] = NSZeroRect;

export let NSZeroSize: CGSize;
global['NSZeroSize'] = NSZeroSize;

export let NSZombieEnabled: boolean;
global['NSZombieEnabled'] = NSZombieEnabled;

export let IKFilterBrowserDefaultInputImage: string;
global['IKFilterBrowserDefaultInputImage'] = IKFilterBrowserDefaultInputImage;

export let IKFilterBrowserExcludeCategories: string;
global['IKFilterBrowserExcludeCategories'] = IKFilterBrowserExcludeCategories;

export let IKFilterBrowserExcludeFilters: string;
global['IKFilterBrowserExcludeFilters'] = IKFilterBrowserExcludeFilters;

export let IKFilterBrowserShowCategories: string;
global['IKFilterBrowserShowCategories'] = IKFilterBrowserShowCategories;

export let IKFilterBrowserShowPreview: string;
global['IKFilterBrowserShowPreview'] = IKFilterBrowserShowPreview;

export let IKImageBrowserBackgroundColorKey: string;
global['IKImageBrowserBackgroundColorKey'] = IKImageBrowserBackgroundColorKey;

export let IKImageBrowserCGImageRepresentationType: string;
global['IKImageBrowserCGImageRepresentationType'] = IKImageBrowserCGImageRepresentationType;

export let IKImageBrowserCGImageSourceRepresentationType: string;
global['IKImageBrowserCGImageSourceRepresentationType'] = IKImageBrowserCGImageSourceRepresentationType;

export let IKImageBrowserCellBackgroundLayer: string;
global['IKImageBrowserCellBackgroundLayer'] = IKImageBrowserCellBackgroundLayer;

export let IKImageBrowserCellForegroundLayer: string;
global['IKImageBrowserCellForegroundLayer'] = IKImageBrowserCellForegroundLayer;

export let IKImageBrowserCellPlaceHolderLayer: string;
global['IKImageBrowserCellPlaceHolderLayer'] = IKImageBrowserCellPlaceHolderLayer;

export let IKImageBrowserCellSelectionLayer: string;
global['IKImageBrowserCellSelectionLayer'] = IKImageBrowserCellSelectionLayer;

export let IKImageBrowserCellsHighlightedTitleAttributesKey: string;
global['IKImageBrowserCellsHighlightedTitleAttributesKey'] = IKImageBrowserCellsHighlightedTitleAttributesKey;

export let IKImageBrowserCellsOutlineColorKey: string;
global['IKImageBrowserCellsOutlineColorKey'] = IKImageBrowserCellsOutlineColorKey;

export let IKImageBrowserCellsSubtitleAttributesKey: string;
global['IKImageBrowserCellsSubtitleAttributesKey'] = IKImageBrowserCellsSubtitleAttributesKey;

export let IKImageBrowserCellsTitleAttributesKey: string;
global['IKImageBrowserCellsTitleAttributesKey'] = IKImageBrowserCellsTitleAttributesKey;

export let IKImageBrowserGroupBackgroundColorKey: string;
global['IKImageBrowserGroupBackgroundColorKey'] = IKImageBrowserGroupBackgroundColorKey;

export let IKImageBrowserGroupFooterLayer: string;
global['IKImageBrowserGroupFooterLayer'] = IKImageBrowserGroupFooterLayer;

export let IKImageBrowserGroupHeaderLayer: string;
global['IKImageBrowserGroupHeaderLayer'] = IKImageBrowserGroupHeaderLayer;

export let IKImageBrowserGroupRangeKey: string;
global['IKImageBrowserGroupRangeKey'] = IKImageBrowserGroupRangeKey;

export let IKImageBrowserGroupStyleKey: string;
global['IKImageBrowserGroupStyleKey'] = IKImageBrowserGroupStyleKey;

export let IKImageBrowserGroupTitleKey: string;
global['IKImageBrowserGroupTitleKey'] = IKImageBrowserGroupTitleKey;

export let IKImageBrowserIconRefPathRepresentationType: string;
global['IKImageBrowserIconRefPathRepresentationType'] = IKImageBrowserIconRefPathRepresentationType;

export let IKImageBrowserIconRefRepresentationType: string;
global['IKImageBrowserIconRefRepresentationType'] = IKImageBrowserIconRefRepresentationType;

export let IKImageBrowserNSBitmapImageRepresentationType: string;
global['IKImageBrowserNSBitmapImageRepresentationType'] = IKImageBrowserNSBitmapImageRepresentationType;

export let IKImageBrowserNSDataRepresentationType: string;
global['IKImageBrowserNSDataRepresentationType'] = IKImageBrowserNSDataRepresentationType;

export let IKImageBrowserNSImageRepresentationType: string;
global['IKImageBrowserNSImageRepresentationType'] = IKImageBrowserNSImageRepresentationType;

export let IKImageBrowserNSURLRepresentationType: string;
global['IKImageBrowserNSURLRepresentationType'] = IKImageBrowserNSURLRepresentationType;

export let IKImageBrowserPDFPageRepresentationType: string;
global['IKImageBrowserPDFPageRepresentationType'] = IKImageBrowserPDFPageRepresentationType;

export let IKImageBrowserPathRepresentationType: string;
global['IKImageBrowserPathRepresentationType'] = IKImageBrowserPathRepresentationType;

export let IKImageBrowserQCCompositionPathRepresentationType: string;
global['IKImageBrowserQCCompositionPathRepresentationType'] = IKImageBrowserQCCompositionPathRepresentationType;

export let IKImageBrowserQCCompositionRepresentationType: string;
global['IKImageBrowserQCCompositionRepresentationType'] = IKImageBrowserQCCompositionRepresentationType;

export let IKImageBrowserQTMoviePathRepresentationType: string;
global['IKImageBrowserQTMoviePathRepresentationType'] = IKImageBrowserQTMoviePathRepresentationType;

export let IKImageBrowserQTMovieRepresentationType: string;
global['IKImageBrowserQTMovieRepresentationType'] = IKImageBrowserQTMovieRepresentationType;

export let IKImageBrowserQuickLookPathRepresentationType: string;
global['IKImageBrowserQuickLookPathRepresentationType'] = IKImageBrowserQuickLookPathRepresentationType;

export let IKImageBrowserSelectionColorKey: string;
global['IKImageBrowserSelectionColorKey'] = IKImageBrowserSelectionColorKey;

export let IKOverlayTypeBackground: string;
global['IKOverlayTypeBackground'] = IKOverlayTypeBackground;

export let IKOverlayTypeImage: string;
global['IKOverlayTypeImage'] = IKOverlayTypeImage;

export let IKPictureTakerAllowsEditingKey: string;
global['IKPictureTakerAllowsEditingKey'] = IKPictureTakerAllowsEditingKey;

export let IKPictureTakerAllowsFileChoosingKey: string;
global['IKPictureTakerAllowsFileChoosingKey'] = IKPictureTakerAllowsFileChoosingKey;

export let IKPictureTakerAllowsVideoCaptureKey: string;
global['IKPictureTakerAllowsVideoCaptureKey'] = IKPictureTakerAllowsVideoCaptureKey;

export let IKPictureTakerCropAreaSizeKey: string;
global['IKPictureTakerCropAreaSizeKey'] = IKPictureTakerCropAreaSizeKey;

export let IKPictureTakerImageTransformsKey: string;
global['IKPictureTakerImageTransformsKey'] = IKPictureTakerImageTransformsKey;

export let IKPictureTakerInformationalTextKey: string;
global['IKPictureTakerInformationalTextKey'] = IKPictureTakerInformationalTextKey;

export let IKPictureTakerOutputImageMaxSizeKey: string;
global['IKPictureTakerOutputImageMaxSizeKey'] = IKPictureTakerOutputImageMaxSizeKey;

export let IKPictureTakerRemainOpenAfterValidateKey: string;
global['IKPictureTakerRemainOpenAfterValidateKey'] = IKPictureTakerRemainOpenAfterValidateKey;

export let IKPictureTakerShowAddressBookPicture: string;
global['IKPictureTakerShowAddressBookPicture'] = IKPictureTakerShowAddressBookPicture;

export let IKPictureTakerShowAddressBookPictureKey: string;
global['IKPictureTakerShowAddressBookPictureKey'] = IKPictureTakerShowAddressBookPictureKey;

export let IKPictureTakerShowEffectsKey: string;
global['IKPictureTakerShowEffectsKey'] = IKPictureTakerShowEffectsKey;

export let IKPictureTakerShowEmptyPicture: string;
global['IKPictureTakerShowEmptyPicture'] = IKPictureTakerShowEmptyPicture;

export let IKPictureTakerShowEmptyPictureKey: string;
global['IKPictureTakerShowEmptyPictureKey'] = IKPictureTakerShowEmptyPictureKey;

export let IKPictureTakerShowRecentPictureKey: string;
global['IKPictureTakerShowRecentPictureKey'] = IKPictureTakerShowRecentPictureKey;

export let IKPictureTakerUpdateRecentPictureKey: string;
global['IKPictureTakerUpdateRecentPictureKey'] = IKPictureTakerUpdateRecentPictureKey;

export let IKSlideshowAudioFile: string;
global['IKSlideshowAudioFile'] = IKSlideshowAudioFile;

export let IKSlideshowModeImages: string;
global['IKSlideshowModeImages'] = IKSlideshowModeImages;

export let IKSlideshowModeOther: string;
global['IKSlideshowModeOther'] = IKSlideshowModeOther;

export let IKSlideshowModePDF: string;
global['IKSlideshowModePDF'] = IKSlideshowModePDF;

export let IKSlideshowPDFDisplayBox: string;
global['IKSlideshowPDFDisplayBox'] = IKSlideshowPDFDisplayBox;

export let IKSlideshowPDFDisplayMode: string;
global['IKSlideshowPDFDisplayMode'] = IKSlideshowPDFDisplayMode;

export let IKSlideshowPDFDisplaysAsBook: string;
global['IKSlideshowPDFDisplaysAsBook'] = IKSlideshowPDFDisplaysAsBook;

export let IKSlideshowScreen: string;
global['IKSlideshowScreen'] = IKSlideshowScreen;

export let IKSlideshowStartIndex: string;
global['IKSlideshowStartIndex'] = IKSlideshowStartIndex;

export let IKSlideshowStartPaused: string;
global['IKSlideshowStartPaused'] = IKSlideshowStartPaused;

export let IKSlideshowWrapAround: string;
global['IKSlideshowWrapAround'] = IKSlideshowWrapAround;

export let IKToolModeAnnotate: string;
global['IKToolModeAnnotate'] = IKToolModeAnnotate;

export let IKToolModeCrop: string;
global['IKToolModeCrop'] = IKToolModeCrop;

export let IKToolModeMove: string;
global['IKToolModeMove'] = IKToolModeMove;

export let IKToolModeNone: string;
global['IKToolModeNone'] = IKToolModeNone;

export let IKToolModeRotate: string;
global['IKToolModeRotate'] = IKToolModeRotate;

export let IKToolModeSelect: string;
global['IKToolModeSelect'] = IKToolModeSelect;

export let IKToolModeSelectEllipse: string;
global['IKToolModeSelectEllipse'] = IKToolModeSelectEllipse;

export let IKToolModeSelectLasso: string;
global['IKToolModeSelectLasso'] = IKToolModeSelectLasso;

export let IKToolModeSelectRect: string;
global['IKToolModeSelectRect'] = IKToolModeSelectRect;

export let IKUIFlavorAllowFallback: string;
global['IKUIFlavorAllowFallback'] = IKUIFlavorAllowFallback;

export let IKUISizeFlavor: string;
global['IKUISizeFlavor'] = IKUISizeFlavor;

export let IKUISizeMini: string;
global['IKUISizeMini'] = IKUISizeMini;

export let IKUISizeRegular: string;
global['IKUISizeRegular'] = IKUISizeRegular;

export let IKUISizeSmall: string;
global['IKUISizeSmall'] = IKUISizeSmall;

export let IKUImaxSize: string;
global['IKUImaxSize'] = IKUImaxSize;

export let IK_ApertureBundleIdentifier: string;
global['IK_ApertureBundleIdentifier'] = IK_ApertureBundleIdentifier;

export let IK_MailBundleIdentifier: string;
global['IK_MailBundleIdentifier'] = IK_MailBundleIdentifier;

export let IK_PhotosBundleIdentifier: string;
global['IK_PhotosBundleIdentifier'] = IK_PhotosBundleIdentifier;

export let IK_iPhotoBundleIdentifier: string;
global['IK_iPhotoBundleIdentifier'] = IK_iPhotoBundleIdentifier;

export let QCCompositionInputPaceKey: string;
global['QCCompositionInputPaceKey'] = QCCompositionInputPaceKey;

export let globalUpdateOK: boolean;
global['globalUpdateOK'] = globalUpdateOK;

export let kQuartzFilterApplicationDomain: string;
global['kQuartzFilterApplicationDomain'] = kQuartzFilterApplicationDomain;

export let kQuartzFilterPDFWorkflowDomain: string;
global['kQuartzFilterPDFWorkflowDomain'] = kQuartzFilterPDFWorkflowDomain;

export let kQuartzFilterPrintingDomain: string;
global['kQuartzFilterPrintingDomain'] = kQuartzFilterPrintingDomain;

export let CATransform3DIdentity: CATransform3D;
global['CATransform3DIdentity'] = CATransform3DIdentity;

export let kCAOnOrderIn: string;
global['kCAOnOrderIn'] = kCAOnOrderIn;

export let kCAOnOrderOut: string;
global['kCAOnOrderOut'] = kCAOnOrderOut;

export let kCARendererColorSpace: string;
global['kCARendererColorSpace'] = kCARendererColorSpace;

export let kCARendererMetalCommandQueue: string;
global['kCARendererMetalCommandQueue'] = kCARendererMetalCommandQueue;

export let kCATransactionAnimationDuration: string;
global['kCATransactionAnimationDuration'] = kCATransactionAnimationDuration;

export let kCATransactionAnimationTimingFunction: string;
global['kCATransactionAnimationTimingFunction'] = kCATransactionAnimationTimingFunction;

export let kCATransactionCompletionBlock: string;
global['kCATransactionCompletionBlock'] = kCATransactionCompletionBlock;

export let kCATransactionDisableActions: string;
global['kCATransactionDisableActions'] = kCATransactionDisableActions;

export let kCATransition: string;
global['kCATransition'] = kCATransition;

export {
  AVAsset,
  AVAssetCache,
  AVAssetExportSession,
  AVAssetImageGenerator,
  AVAssetReader,
  AVAssetReaderAudioMixOutput,
  AVAssetReaderOutput,
  AVAssetReaderOutputMetadataAdaptor,
  AVAssetReaderSampleReferenceOutput,
  AVAssetReaderTrackOutput,
  AVAssetReaderVideoCompositionOutput,
  AVAssetResourceLoader,
  AVAssetResourceLoaderDelegate,
  AVAssetResourceLoadingContentInformationRequest,
  AVAssetResourceLoadingDataRequest,
  AVAssetResourceLoadingRequest,
  AVAssetResourceLoadingRequestor,
  AVAssetResourceRenewalRequest,
  AVAssetTrack,
  AVAssetTrackGroup,
  AVAssetTrackSegment,
  AVAssetWriter,
  AVAssetWriterInput,
  AVAssetWriterInputGroup,
  AVAssetWriterInputMetadataAdaptor,
  AVAssetWriterInputPassDescription,
  AVAssetWriterInputPixelBufferAdaptor,
  AVAsynchronousCIImageFilteringRequest,
  AVAsynchronousKeyValueLoading,
  AVAsynchronousVideoCompositionRequest,
  AVAudio3DMixing,
  AVAudioBuffer,
  AVAudioChannelLayout,
  AVAudioCompressedBuffer,
  AVAudioConnectionPoint,
  AVAudioConverter,
  AVAudioEngine,
  AVAudioEnvironmentDistanceAttenuationParameters,
  AVAudioEnvironmentNode,
  AVAudioEnvironmentReverbParameters,
  AVAudioFile,
  AVAudioFormat,
  AVAudioIONode,
  AVAudioInputNode,
  AVAudioMix,
  AVAudioMixInputParameters,
  AVAudioMixerNode,
  AVAudioMixing,
  AVAudioMixingDestination,
  AVAudioNode,
  AVAudioOutputNode,
  AVAudioPCMBuffer,
  AVAudioPlayer,
  AVAudioPlayerDelegate,
  AVAudioPlayerNode,
  AVAudioRecorder,
  AVAudioRecorderDelegate,
  AVAudioSequencer,
  AVAudioSession,
  AVAudioSinkNode,
  AVAudioSourceNode,
  AVAudioStereoMixing,
  AVAudioTime,
  AVAudioTimePitchAlgorithm,
  AVAudioUnit,
  AVAudioUnitComponent,
  AVAudioUnitComponentManager,
  AVAudioUnitDelay,
  AVAudioUnitDistortion,
  AVAudioUnitEQ,
  AVAudioUnitEQFilterParameters,
  AVAudioUnitEffect,
  AVAudioUnitGenerator,
  AVAudioUnitMIDIInstrument,
  AVAudioUnitReverb,
  AVAudioUnitSampler,
  AVAudioUnitTimeEffect,
  AVAudioUnitTimePitch,
  AVAudioUnitVarispeed,
  AVCameraCalibrationData,
  AVCaptureAudioChannel,
  AVCaptureAudioDataOutput,
  AVCaptureAudioDataOutputSampleBufferDelegate,
  AVCaptureAudioFileOutput,
  AVCaptureAudioPreviewOutput,
  AVCaptureConnection,
  AVCaptureDevice,
  AVCaptureDeviceInput,
  AVCaptureFileOutput,
  AVCaptureFileOutputDelegate,
  AVCaptureFileOutputRecordingDelegate,
  AVCaptureInput,
  AVCaptureMovieFileOutput,
  AVCaptureOutput,
  AVCapturePhoto,
  AVCapturePhotoCaptureDelegate,
  AVCapturePhotoOutput,
  AVCapturePhotoSettings,
  AVCaptureResolvedPhotoSettings,
  AVCaptureScreenInput,
  AVCaptureSession,
  AVCaptureVideoDataOutput,
  AVCaptureVideoDataOutputSampleBufferDelegate,
  AVCaptureVideoPreviewLayer,
  AVCaptureView,
  AVCaptureViewDelegate,
  AVComposition,
  AVCompositionTrack,
  AVCompositionTrackFormatDescriptionReplacement,
  AVCompositionTrackSegment,
  AVContentKeyRecipient,
  AVContentKeyRequest,
  AVContentKeyResponse,
  AVContentKeySession,
  AVContentKeySessionDelegate,
  AVContentKeySessionServerPlaybackContextOption,
  AVContentKeySystem,
  AVDateRangeMetadataGroup,
  AVDepthData,
  AVFileType,
  AVFragmentMinding,
  AVFragmentedAsset,
  AVFragmentedAssetMinder,
  AVFragmentedAssetTrack,
  AVFragmentedMovie,
  AVFragmentedMovieMinder,
  AVFragmentedMovieTrack,
  AVFrameRateRange,
  AVLayerVideoGravity,
  AVMIDIPlayer,
  AVMediaCharacteristic,
  AVMediaDataStorage,
  AVMediaSelection,
  AVMediaSelectionGroup,
  AVMediaSelectionOption,
  AVMediaType,
  AVMetadataBodyObject,
  AVMetadataCatBodyObject,
  AVMetadataDogBodyObject,
  AVMetadataExtraAttributeKey,
  AVMetadataFaceObject,
  AVMetadataFormat,
  AVMetadataGroup,
  AVMetadataHumanBodyObject,
  AVMetadataIdentifier,
  AVMetadataItem,
  AVMetadataItemFilter,
  AVMetadataItemValueRequest,
  AVMetadataKey,
  AVMetadataKeySpace,
  AVMetadataMachineReadableCodeObject,
  AVMetadataObject,
  AVMetadataSalientObject,
  AVMovie,
  AVMovieTrack,
  AVMusicTrack,
  AVMutableAudioMix,
  AVMutableAudioMixInputParameters,
  AVMutableComposition,
  AVMutableCompositionTrack,
  AVMutableDateRangeMetadataGroup,
  AVMutableMediaSelection,
  AVMutableMetadataItem,
  AVMutableMovie,
  AVMutableMovieTrack,
  AVMutableTimedMetadataGroup,
  AVMutableVideoComposition,
  AVMutableVideoCompositionInstruction,
  AVMutableVideoCompositionLayerInstruction,
  AVOutputSettingsAssistant,
  AVOutputSettingsPreset,
  AVPersistableContentKeyRequest,
  AVPictureInPictureController,
  AVPictureInPictureControllerDelegate,
  AVPlayer,
  AVPlayerItem,
  AVPlayerItemAccessLog,
  AVPlayerItemAccessLogEvent,
  AVPlayerItemErrorLog,
  AVPlayerItemErrorLogEvent,
  AVPlayerItemLegibleOutput,
  AVPlayerItemLegibleOutputPushDelegate,
  AVPlayerItemMediaDataCollector,
  AVPlayerItemMetadataCollector,
  AVPlayerItemMetadataCollectorPushDelegate,
  AVPlayerItemMetadataOutput,
  AVPlayerItemMetadataOutputPushDelegate,
  AVPlayerItemOutput,
  AVPlayerItemOutputPullDelegate,
  AVPlayerItemOutputPushDelegate,
  AVPlayerItemTrack,
  AVPlayerItemVideoOutput,
  AVPlayerLayer,
  AVPlayerLooper,
  AVPlayerMediaSelectionCriteria,
  AVPlayerView,
  AVPlayerViewPictureInPictureDelegate,
  AVPortraitEffectsMatte,
  AVQueuePlayer,
  AVQueuedSampleBufferRendering,
  AVRouteDetector,
  AVRoutePickerView,
  AVRoutePickerViewDelegate,
  AVSampleBufferAudioRenderer,
  AVSampleBufferDisplayLayer,
  AVSampleBufferGenerator,
  AVSampleBufferRenderSynchronizer,
  AVSampleBufferRequest,
  AVSampleCursor,
  AVSemanticSegmentationMatte,
  AVSpeechSynthesisVoice,
  AVSpeechSynthesizer,
  AVSpeechSynthesizerDelegate,
  AVSpeechUtterance,
  AVSynchronizedLayer,
  AVTextStyleRule,
  AVTimedMetadataGroup,
  AVURLAsset,
  AVVideoApertureMode,
  AVVideoCodecType,
  AVVideoCompositing,
  AVVideoComposition,
  AVVideoCompositionCoreAnimationTool,
  AVVideoCompositionInstruction,
  AVVideoCompositionLayerInstruction,
  AVVideoCompositionRenderContext,
  AVVideoCompositionRenderHint,
  AVVideoCompositionValidationHandling,
  Authorization,
  BlockOperation,
  Bundle,
  ByteCountFormatter,
  CAAction,
  CAAnimation,
  CAAnimationCalculationMode,
  CAAnimationDelegate,
  CAAnimationGroup,
  CAAnimationRotationMode,
  CABasicAnimation,
  CAConstraint,
  CAConstraintLayoutManager,
  CAEDRMetadata,
  CAEmitterCell,
  CAEmitterLayer,
  CAEmitterLayerEmitterMode,
  CAEmitterLayerEmitterShape,
  CAEmitterLayerRenderMode,
  CAGradientLayer,
  CAGradientLayerType,
  CAKeyframeAnimation,
  CALayer,
  CALayerContentsFilter,
  CALayerContentsFormat,
  CALayerContentsGravity,
  CALayerCornerCurve,
  CALayerDelegate,
  CALayoutManager,
  CAMediaTiming,
  CAMediaTimingFillMode,
  CAMediaTimingFunction,
  CAMediaTimingFunctionName,
  // CAMetalDrawable,
  CAMetalLayer,
  CAPropertyAnimation,
  CARemoteLayerClient,
  CARemoteLayerServer,
  CARenderer,
  CAReplicatorLayer,
  CAScrollLayer,
  CAScrollLayerScrollMode,
  CAShapeLayer,
  CAShapeLayerFillRule,
  CAShapeLayerLineCap,
  CAShapeLayerLineJoin,
  CASpringAnimation,
  CATextLayer,
  CATextLayerAlignmentMode,
  CATextLayerTruncationMode,
  CATiledLayer,
  CATransaction,
  CATransformLayer,
  CATransition,
  CATransitionSubtype,
  CATransitionType,
  CAValueFunction,
  CAValueFunctionName,
  CFCalendarIdentifier,
  CFDateFormatterKey,
  CFLocaleKey,
  CFNotificationName,
  CFNumberFormatterKey,
  CFRunLoopMode,
  CFStreamPropertyKey,
  CGAffineTransform,
  CGColor,
  CGColorSpace,
  CGDisplayStream,
  CGFont,
  CGPDFTagProperty,
  CGPoint,
  CGRect,
  CGSize,
  CIAccordionFoldTransition,
  CIAffineClamp,
  CIAffineTile,
  CIAttributedTextImageGenerator,
  CIAztecCodeDescriptor,
  CIAztecCodeGenerator,
  CIBarcodeDescriptor,
  CIBarcodeGenerator,
  CIBarsSwipeTransition,
  CIBicubicScaleTransform,
  CIBlendKernel,
  CIBlendWithMask,
  CIBloom,
  CIBokehBlur,
  CIBoxBlur,
  CICMYKHalftone,
  CICheckerboardGenerator,
  CICircularScreen,
  CICode128BarcodeGenerator,
  CIColor,
  CIColorClamp,
  CIColorControls,
  CIColorCrossPolynomial,
  CIColorCube,
  CIColorCubeWithColorSpace,
  CIColorCubesMixedWithMask,
  CIColorCurves,
  CIColorInvert,
  CIColorKernel,
  CIColorMap,
  CIColorMatrix,
  CIColorMonochrome,
  CIColorPolynomial,
  CIColorPosterize,
  CIComicEffect,
  CICompositeOperation,
  CIContext,
  CIContextOption,
  CIConvolution,
  CICopyMachineTransition,
  CICoreMLModel,
  CICrystallize,
  CIDataMatrixCodeDescriptor,
  CIDepthOfField,
  CIDepthToDisparity,
  CIDetector,
  CIDiscBlur,
  CIDisintegrateWithMaskTransition,
  CIDisparityToDepth,
  CIDissolveTransition,
  CIDither,
  CIDocumentEnhancer,
  CIDotScreen,
  CIEdgePreserveUpsample,
  CIEdgeWork,
  CIEdges,
  CIEightfoldReflectedTile,
  CIExposureAdjust,
  CIFaceFeature,
  CIFalseColor,
  CIFeature,
  CIFilter,
  CIFilterConstructor,
  CIFilterGenerator,
  CIFilterShape,
  CIFlashTransition,
  CIFormat,
  CIFourCoordinateGeometryFilter,
  CIFourfoldReflectedTile,
  CIFourfoldRotatedTile,
  CIFourfoldTranslatedTile,
  CIGaborGradients,
  CIGammaAdjust,
  CIGaussianBlur,
  CIGaussianGradient,
  CIGlideReflectedTile,
  CIGloom,
  CIHatchedScreen,
  CIHeightFieldFromMask,
  CIHexagonalPixellate,
  CIHighlightShadowAdjust,
  CIHueAdjust,
  CIHueSaturationValueGradient,
  CIImage,
  CIImageAccumulator,
  CIImageAutoAdjustmentOption,
  CIImageOption,
  CIImageProcessorInput,
  CIImageProcessorKernel,
  CIImageProcessorOutput,
  CIImageRepresentationOption,
  CIKaleidoscope,
  CIKernel,
  CIKeystoneCorrectionCombined,
  CIKeystoneCorrectionHorizontal,
  CIKeystoneCorrectionVertical,
  CILabDeltaE,
  CILanczosScaleTransform,
  CILenticularHaloGenerator,
  CILineOverlay,
  CILineScreen,
  CILinearGradient,
  CILinearToSRGBToneCurve,
  CIMaskToAlpha,
  CIMaskedVariableBlur,
  CIMaximumComponent,
  CIMedian,
  CIMeshGenerator,
  CIMinimumComponent,
  CIMix,
  CIModTransition,
  CIMorphologyGradient,
  CIMorphologyMaximum,
  CIMorphologyMinimum,
  CIMorphologyRectangleMaximum,
  CIMorphologyRectangleMinimum,
  CIMotionBlur,
  CINoiseReduction,
  CIOpTile,
  CIPDF417BarcodeGenerator,
  CIPDF417CodeDescriptor,
  CIPageCurlTransition,
  CIPageCurlWithShadowTransition,
  CIPaletteCentroid,
  CIPalettize,
  CIParallelogramTile,
  CIPerspectiveCorrection,
  CIPerspectiveRotate,
  CIPerspectiveTile,
  CIPerspectiveTransform,
  CIPerspectiveTransformWithExtent,
  CIPhotoEffect,
  CIPixellate,
  CIPlugIn,
  CIPlugInRegistration,
  CIPointillize,
  CIQRCodeDescriptor,
  CIQRCodeFeature,
  CIQRCodeGenerator,
  CIRAWFilterOption,
  CIRadialGradient,
  CIRandomGenerator,
  CIRectangleFeature,
  CIRenderDestination,
  CIRenderInfo,
  CIRenderTask,
  CIRippleTransition,
  CIRoundedRectangleGenerator,
  CISRGBToneCurveToLinear,
  CISaliencyMap,
  CISampler,
  CISepiaTone,
  CIShadedMaterial,
  CISharpenLuminance,
  CISixfoldReflectedTile,
  CISixfoldRotatedTile,
  CISmoothLinearGradient,
  CISpotColor,
  CISpotLight,
  CIStarShineGenerator,
  CIStraighten,
  CIStripesGenerator,
  CISunbeamsGenerator,
  CISwipeTransition,
  CITemperatureAndTint,
  CITextFeature,
  CITextImageGenerator,
  CIThermal,
  CIToneCurve,
  CITransitionFilter,
  CITriangleKaleidoscope,
  CITriangleTile,
  CITwelvefoldReflectedTile,
  CIUnsharpMask,
  CIVector,
  CIVibrance,
  CIVignette,
  CIVignetteEffect,
  CIWarpKernel,
  CIWhitePointAdjust,
  CIXRay,
  CIZoomBlur,
  CMImageDescriptionFlavor,
  CMSampleTimingInfo,
  CMSoundDescriptionFlavor,
  CMTime,
  CMTimeMapping,
  CMTimeRange,
  CachedURLResponse,
  DateComponentsFormatter,
  DateFormatter,
  DateIntervalFormatter,
  Dimension,
  DirectoryEnumerator,
  DiscoverySession,
  DistributedNotificationCenter,
  EnergyFormatter,
  FileAttributeKey,
  FileAttributeType,
  FileHandle,
  FileManager,
  FileManagerDelegate,
  FileProtectionType,
  FileWrapper,
  Format,
  Formatter,
  HTTPCookie,
  HTTPCookiePropertyKey,
  HTTPCookieStorage,
  HTTPCookieStringPolicy,
  HTTPURLResponse,
  Host,
  IKCameraDeviceView,
  IKCameraDeviceViewDelegate,
  IKDeviceBrowserView,
  IKDeviceBrowserViewDelegate,
  IKFilterBrowserPanel,
  IKFilterBrowserView,
  IKFilterCustomUIProvider,
  IKFilterUIView,
  IKImageBrowserCell,
  IKImageEditPanel,
  IKImageEditPanelDataSource,
  IKImageView,
  IKPictureTaker,
  IKSaveOptions,
  IKScannerDeviceView,
  IKScannerDeviceViewDelegate,
  IKSlideshow,
  IKSlideshowDataSource,
  ISO8601DateFormatter,
  InputSource,
  InputStream,
  ItemResult,
  JSONSerialization,
  LengthFormatter,
  ListFormatter,
  MassFormatter,
  MeasurementFormatter,
  MessagePort,
  NSATSTypesetter,
  NSAccessibility,
  NSAccessibilityButton,
  NSAccessibilityCheckBox,
  NSAccessibilityContainsTransientUI,
  NSAccessibilityCustomAction,
  NSAccessibilityCustomRotor,
  NSAccessibilityCustomRotorItemSearchDelegate,
  NSAccessibilityElement,
  NSAccessibilityElementLoading,
  NSAccessibilityGroup,
  NSAccessibilityImage,
  NSAccessibilityLayoutArea,
  NSAccessibilityLayoutItem,
  NSAccessibilityList,
  NSAccessibilityNavigableStaticText,
  NSAccessibilityOutline,
  NSAccessibilityProgressIndicator,
  NSAccessibilityRadioButton,
  NSAccessibilityRow,
  NSAccessibilitySlider,
  NSAccessibilityStaticText,
  NSAccessibilityStepper,
  NSAccessibilitySwitch,
  NSAccessibilityTable,
  NSActionCell,
  NSAffineTransform,
  NSAlert,
  NSAlertDelegate,
  NSAlignmentFeedbackFilter,
  NSAlignmentFeedbackToken,
  NSAnimatablePropertyContainer,
  NSAnimation,
  NSAnimationContext,
  NSAnimationDelegate,
  NSAppKitVersion,
  NSAppearance,
  NSAppearanceCustomization,
  NSAppleEventDescriptor,
  NSAppleEventManager,
  NSAppleScript,
  NSApplication,
  NSApplicationDelegate,
  NSArray,
  NSArrayController,
  NSAssertionHandler,
  NSAsynchronousFetchRequest,
  NSAsynchronousFetchResult,
  NSAtomicStore,
  NSAtomicStoreCacheNode,
  NSAttributeDescription,
  NSAttributedString,
  NSAutoreleasePool,
  NSBackgroundActivityScheduler,
  NSBatchDeleteRequest,
  NSBatchDeleteResult,
  NSBatchInsertRequest,
  NSBatchInsertResult,
  NSBatchUpdateRequest,
  NSBatchUpdateResult,
  NSBezierPath,
  NSBindingInfoKey,
  NSBindingName,
  NSBindingOption,
  NSBindingSelectionMarker,
  NSBitmapImageRep,
  NSBox,
  NSBrowser,
  NSBrowserCell,
  NSBrowserDelegate,
  NSButton,
  NSButtonCell,
  NSButtonTouchBarItem,
  NSCIImageRep,
  NSCache,
  NSCacheDelegate,
  NSCalendar,
  NSCandidateListTouchBarItem,
  NSCandidateListTouchBarItemDelegate,
  NSCell,
  NSChangeSpelling,
  NSCharacterSet,
  NSClassDescription,
  NSClickGestureRecognizer,
  NSClipView,
  NSCloneCommand,
  NSCloseCommand,
  NSCloudSharingServiceDelegate,
  NSCloudSharingValidation,
  NSCoder,
  NSCoding,
  NSCollectionLayoutAnchor,
  NSCollectionLayoutBoundarySupplementaryItem,
  NSCollectionLayoutContainer,
  NSCollectionLayoutDecorationItem,
  NSCollectionLayoutDimension,
  NSCollectionLayoutEdgeSpacing,
  NSCollectionLayoutEnvironment,
  NSCollectionLayoutGroup,
  NSCollectionLayoutGroupCustomItem,
  NSCollectionLayoutItem,
  NSCollectionLayoutSection,
  NSCollectionLayoutSize,
  NSCollectionLayoutSpacing,
  NSCollectionLayoutSupplementaryItem,
  NSCollectionLayoutVisibleItem,
  NSCollectionView,
  NSCollectionViewCompositionalLayout,
  NSCollectionViewCompositionalLayoutConfiguration,
  NSCollectionViewDataSource,
  NSCollectionViewDelegate,
  NSCollectionViewDelegateFlowLayout,
  NSCollectionViewDiffableDataSourceReference,
  NSCollectionViewElement,
  NSCollectionViewFlowLayout,
  NSCollectionViewFlowLayoutInvalidationContext,
  NSCollectionViewGridLayout,
  NSCollectionViewItem,
  NSCollectionViewLayout,
  NSCollectionViewLayoutAttributes,
  NSCollectionViewLayoutInvalidationContext,
  NSCollectionViewPrefetching,
  NSCollectionViewSectionHeaderView,
  NSCollectionViewTransitionLayout,
  NSCollectionViewUpdateItem,
  NSColor,
  NSColorChanging,
  NSColorList,
  NSColorPanel,
  NSColorPicker,
  NSColorPickerTouchBarItem,
  NSColorPickingCustom,
  NSColorPickingDefault,
  NSColorSampler,
  NSColorSpace,
  NSColorSpaceName,
  NSColorWell,
  NSComboBox,
  NSComboBoxCell,
  NSComboBoxCellDataSource,
  NSComboBoxDataSource,
  NSComboBoxDelegate,
  NSComparisonPredicate,
  NSCompoundPredicate,
  NSCondition,
  NSConditionLock,
  NSConstraintConflict,
  NSControl,
  NSControlTextEditingDelegate,
  NSController,
  NSCopying,
  NSCoreDataCoreSpotlightDelegate,
  NSCountCommand,
  NSCountedSet,
  NSCreateCommand,
  NSCursor,
  NSCustomImageRep,
  NSCustomTouchBarItem,
  NSData,
  NSDataAsset,
  NSDataDetector,
  NSDate,
  NSDateComponents,
  NSDateInterval,
  NSDatePicker,
  NSDatePickerCell,
  NSDatePickerCellDelegate,
  NSDecimalNumber,
  NSDecimalNumberBehaviors,
  NSDecimalNumberHandler,
  NSDeleteCommand,
  NSDerivedAttributeDescription,
  NSDeviceDescriptionKey,
  NSDictionary,
  NSDictionaryController,
  NSDictionaryControllerKeyValuePair,
  NSDiffableDataSourceSnapshotReference,
  NSDiscardableContent,
  NSDistributedLock,
  NSDockTile,
  NSDockTilePlugIn,
  NSDocument,
  NSDocumentController,
  NSDraggingDestination,
  NSDraggingImageComponent,
  NSDraggingInfo,
  NSDraggingItem,
  NSDraggingSession,
  NSDraggingSource,
  NSDrawer,
  NSDrawerDelegate,
  NSEPSImageRep,
  NSEditor,
  NSEditorRegistration,
  NSEntityDescription,
  NSEntityMapping,
  NSEntityMigrationPolicy,
  NSEnumerator,
  NSError,
  NSEvent,
  NSException,
  NSExceptionName,
  NSExistsCommand,
  NSExpression,
  NSExpressionDescription,
  NSExtensionContext,
  NSExtensionItem,
  NSExtensionRequestHandling,
  NSFastEnumeration,
  NSFetchIndexDescription,
  NSFetchIndexElementDescription,
  NSFetchRequest,
  NSFetchRequestExpression,
  NSFetchRequestResult,
  NSFetchedPropertyDescription,
  NSFetchedResultsController,
  NSFetchedResultsControllerDelegate,
  NSFetchedResultsSectionInfo,
  NSFileAccessIntent,
  NSFileCoordinator,
  NSFilePresenter,
  NSFilePromiseProvider,
  NSFilePromiseProviderDelegate,
  NSFilePromiseReceiver,
  NSFileProviderService,
  NSFileSecurity,
  NSFileVersion,
  NSFont,
  NSFontAssetRequest,
  NSFontChanging,
  NSFontCollection,
  NSFontDescriptor,
  NSFontManager,
  NSFontPanel,
  NSFormCell,
  NSGestureRecognizer,
  NSGestureRecognizerDelegate,
  NSGetCommand,
  NSGlyphGenerator,
  NSGlyphInfo,
  NSGlyphStorage,
  NSGradient,
  NSGraphicsContext,
  NSGridCell,
  NSGridColumn,
  NSGridRow,
  NSGridView,
  NSGroupTouchBarItem,
  NSHapticFeedbackManager,
  NSHapticFeedbackPerformer,
  NSHashTable,
  NSHelpManager,
  NSIgnoreMisspelledWords,
  NSImage,
  NSImageCell,
  NSImageDelegate,
  NSImageRep,
  NSImageView,
  NSIncrementalStore,
  NSIncrementalStoreNode,
  NSIndexPath,
  NSIndexSet,
  NSIndexSpecifier,
  NSInputServerMouseTracker,
  NSInputServiceProvider,
  NSItemProvider,
  NSItemProviderReading,
  NSItemProviderWriting,
  NSKeyValueChangeKey,
  NSKeyValueOperator,
  NSKeyedArchiver,
  NSKeyedArchiverDelegate,
  NSKeyedUnarchiver,
  NSKeyedUnarchiverDelegate,
  NSLayoutAnchor,
  NSLayoutConstraint,
  NSLayoutDimension,
  NSLayoutGuide,
  NSLayoutManager,
  NSLayoutManagerDelegate,
  NSLayoutXAxisAnchor,
  NSLayoutYAxisAnchor,
  NSLevelIndicator,
  NSLevelIndicatorCell,
  NSLinguisticTag,
  NSLinguisticTagScheme,
  NSLinguisticTagger,
  NSLocale,
  NSLock,
  NSLocking,
  NSLogicalTest,
  NSMachPort,
  NSMachPortDelegate,
  NSMagnificationGestureRecognizer,
  NSManagedObject,
  NSManagedObjectContext,
  NSManagedObjectID,
  NSManagedObjectModel,
  NSMapTable,
  NSMappingModel,
  NSMatrix,
  NSMatrixDelegate,
  NSMeasurement,
  NSMediaLibraryBrowserController,
  NSMenu,
  NSMenuDelegate,
  NSMenuItem,
  NSMenuItemCell,
  NSMenuItemValidation,
  NSMenuToolbarItem,
  NSMergeConflict,
  NSMergePolicy,
  NSMetadataItem,
  NSMetadataQuery,
  NSMetadataQueryAttributeValueTuple,
  NSMetadataQueryDelegate,
  NSMetadataQueryResultGroup,
  NSMiddleSpecifier,
  NSMigrationManager,
  NSMoveCommand,
  NSMutableArray,
  NSMutableAttributedString,
  NSMutableCharacterSet,
  NSMutableCopying,
  NSMutableData,
  NSMutableDictionary,
  NSMutableFontCollection,
  NSMutableIndexSet,
  NSMutableOrderedSet,
  NSMutableParagraphStyle,
  NSMutableSet,
  NSMutableString,
  NSMutableURLRequest,
  NSNameSpecifier,
  NSNib,
  NSNotification,
  NSNull,
  NSNumber,
  NSObjectController,
  NSOpenPanel,
  NSOpenSavePanelDelegate,
  NSOrderedCollectionChange,
  NSOrderedCollectionDifference,
  NSOrderedSet,
  NSOrthography,
  NSOutlineView,
  NSOutlineViewDataSource,
  NSOutlineViewDelegate,
  NSPDFImageRep,
  NSPDFInfo,
  NSPDFPanel,
  NSPICTImageRep,
  NSPageController,
  NSPageControllerDelegate,
  NSPageLayout,
  NSPanGestureRecognizer,
  NSPanel,
  NSParagraphStyle,
  NSPasteboard,
  NSPasteboardItem,
  NSPasteboardItemDataProvider,
  NSPasteboardReading,
  NSPasteboardTypeOwner,
  NSPasteboardWriting,
  NSPathCell,
  NSPathCellDelegate,
  NSPathComponentCell,
  NSPathControl,
  NSPathControlDelegate,
  NSPathControlItem,
  // NSPersistentCloudKitContainer,
  // NSPersistentCloudKitContainerOptions,
  NSPersistentContainer,
  NSPersistentDocument,
  NSPersistentHistoryChange,
  NSPersistentHistoryChangeRequest,
  NSPersistentHistoryResult,
  NSPersistentHistoryToken,
  NSPersistentHistoryTransaction,
  NSPersistentStore,
  NSPersistentStoreAsynchronousResult,
  NSPersistentStoreCoordinator,
  NSPersistentStoreDescription,
  NSPersistentStoreRequest,
  NSPersistentStoreResult,
  NSPersonNameComponents,
  NSPickerTouchBarItem,
  NSPointerArray,
  NSPointerFunctions,
  NSPopUpButton,
  NSPopUpButtonCell,
  NSPopover,
  NSPopoverDelegate,
  NSPopoverTouchBarItem,
  NSPositionalSpecifier,
  NSPredicate,
  NSPredicateEditor,
  NSPredicateEditorRowTemplate,
  NSPressGestureRecognizer,
  NSPressureConfiguration,
  NSPrintInfo,
  NSPrintOperation,
  NSPrintPanel,
  NSPrintPanelAccessorizing,
  NSPrinter,
  NSProgressIndicator,
  NSPropertyDescription,
  NSPropertyMapping,
  NSPropertySpecifier,
  NSProtocolChecker,
  NSProxy,
  NSPurgeableData,
  NSQueryGenerationToken,
  NSQuitCommand,
  NSRandomSpecifier,
  NSRangeSpecifier,
  NSRecursiveLock,
  NSRegularExpression,
  NSRelationshipDescription,
  NSRelativeSpecifier,
  NSResponder,
  NSRotationGestureRecognizer,
  NSRuleEditor,
  NSRuleEditorDelegate,
  NSRulerMarker,
  NSRulerView,
  NSRunningApplication,
  NSSaveChangesRequest,
  NSSavePanel,
  NSScreen,
  NSScriptClassDescription,
  NSScriptCoercionHandler,
  NSScriptCommand,
  NSScriptCommandDescription,
  NSScriptExecutionContext,
  NSScriptObjectSpecifier,
  NSScriptSuiteRegistry,
  NSScriptWhoseTest,
  NSScrollView,
  NSScroller,
  NSScrubber,
  NSScrubberArrangedView,
  NSScrubberDataSource,
  NSScrubberDelegate,
  NSScrubberFlowLayout,
  NSScrubberFlowLayoutDelegate,
  NSScrubberImageItemView,
  NSScrubberItemView,
  NSScrubberLayout,
  NSScrubberLayoutAttributes,
  NSScrubberProportionalLayout,
  NSScrubberSelectionStyle,
  NSScrubberSelectionView,
  NSScrubberTextItemView,
  NSSearchField,
  NSSearchFieldCell,
  NSSearchFieldDelegate,
  NSSecureCoding,
  NSSecureTextField,
  NSSecureTextFieldCell,
  NSSecureUnarchiveFromDataTransformer,
  NSSegmentedCell,
  NSSegmentedControl,
  NSSeguePerforming,
  NSServicesMenuRequestor,
  NSSet,
  NSSetCommand,
  NSShadow,
  NSSharingService,
  NSSharingServiceDelegate,
  NSSharingServicePicker,
  NSSharingServicePickerDelegate,
  NSSharingServicePickerToolbarItem,
  NSSharingServicePickerToolbarItemDelegate,
  NSSharingServicePickerTouchBarItem,
  NSSharingServicePickerTouchBarItemDelegate,
  NSSlider,
  NSSliderAccessory,
  NSSliderAccessoryBehavior,
  NSSliderCell,
  NSSliderTouchBarItem,
  NSSortDescriptor,
  NSSound,
  NSSoundDelegate,
  NSSpecifierTest,
  NSSpeechRecognizer,
  NSSpeechRecognizerDelegate,
  NSSpeechSynthesizer,
  NSSpeechSynthesizerDelegate,
  NSSpellChecker,
  NSSpellServer,
  NSSpellServerDelegate,
  NSSplitView,
  NSSplitViewController,
  NSSplitViewDelegate,
  NSSplitViewItem,
  NSSpringLoadingDestination,
  NSStackView,
  NSStackViewDelegate,
  NSStandardKeyBindingResponding,
  NSStatusBar,
  NSStatusBarButton,
  NSStatusItem,
  NSStepper,
  NSStepperCell,
  NSStepperTouchBarItem,
  NSStoryboard,
  NSStoryboardSegue,
  NSString,
  NSStringDrawingContext,
  NSSwitch,
  NSTabView,
  NSTabViewController,
  NSTabViewDelegate,
  NSTabViewItem,
  NSTableCellView,
  NSTableColumn,
  NSTableHeaderCell,
  NSTableHeaderView,
  NSTableRowView,
  NSTableView,
  NSTableViewDataSource,
  NSTableViewDelegate,
  NSTableViewRowAction,
  NSText,
  NSTextAlternatives,
  NSTextAttachment,
  NSTextAttachmentCell,
  NSTextAttachmentContainer,
  NSTextBlock,
  NSTextCheckingClient,
  NSTextCheckingController,
  NSTextCheckingKey,
  NSTextCheckingResult,
  NSTextContainer,
  NSTextDelegate,
  NSTextField,
  NSTextFieldCell,
  NSTextFieldDelegate,
  NSTextFinder,
  NSTextFinderBarContainer,
  NSTextFinderClient,
  NSTextInput,
  NSTextInputClient,
  NSTextInputContext,
  NSTextInputTraits,
  NSTextLayoutOrientationProvider,
  NSTextList,
  NSTextStorage,
  NSTextStorageDelegate,
  NSTextTab,
  NSTextTable,
  NSTextTableBlock,
  NSTextView,
  NSTextViewDelegate,
  NSTimeZone,
  NSTitlebarAccessoryViewController,
  NSTokenField,
  NSTokenFieldCell,
  NSTokenFieldCellDelegate,
  NSTokenFieldDelegate,
  NSToolbar,
  NSToolbarDelegate,
  NSToolbarItem,
  NSToolbarItemGroup,
  NSToolbarItemValidation,
  NSTouch,
  NSTouchBar,
  NSTouchBarDelegate,
  NSTouchBarItem,
  NSTouchBarProvider,
  NSTrackingArea,
  NSTreeController,
  NSTreeNode,
  NSTypesetter,
  NSURL,
  NSURLComponents,
  NSURLConnection,
  NSURLConnectionDataDelegate,
  NSURLConnectionDelegate,
  NSURLConnectionDownloadDelegate,
  NSURLDownload,
  NSURLDownloadDelegate,
  NSURLHandle,
  NSURLQueryItem,
  NSURLRequest,
  NSURLSessionWebSocketMessage,
  NSUUID,
  NSUbiquitousKeyValueStore,
  NSUniqueIDSpecifier,
  NSUnitInformationStorage,
  NSUserActivity,
  NSUserActivityDelegate,
  NSUserActivityRestoring,
  NSUserAppleScriptTask,
  NSUserAutomatorTask,
  NSUserDefaultsController,
  NSUserInterfaceCompression,
  NSUserInterfaceCompressionOptions,
  NSUserInterfaceItemIdentification,
  NSUserInterfaceItemSearching,
  NSUserInterfaceValidations,
  NSUserNotification,
  NSUserNotificationAction,
  NSUserNotificationCenter,
  NSUserNotificationCenterDelegate,
  NSUserScriptTask,
  NSUserUnixTask,
  NSValidatedUserInterfaceItem,
  NSValue,
  NSValueTransformerName,
  NSView,
  NSViewAnimation,
  NSViewController,
  NSViewControllerPresentationAnimator,
  NSViewLayerContentScaleDelegate,
  NSViewToolTipOwner,
  NSVisualEffectView,
  NSWhoseSpecifier,
  NSWindow,
  NSWindowController,
  NSWindowDelegate,
  NSWindowRestoration,
  NSWindowTab,
  NSWindowTabGroup,
  NSWorkspace,
  NSXPCCoder,
  NSXPCConnection,
  NSXPCInterface,
  NSXPCListener,
  NSXPCListenerDelegate,
  NSXPCListenerEndpoint,
  NSXPCProxyCreating,
  NetService,
  NetServiceBrowser,
  NetServiceBrowserDelegate,
  NetServiceDelegate,
  NotificationCenter,
  NotificationQueue,
  NumberFormatter,
  OpenConfiguration,
  Operation,
  OperationQueue,
  OutputStream,
  PersonNameComponentsFormatter,
  Pipe,
  Port,
  PortDelegate,
  PortMessage,
  Process,
  ProcessInfo,
  Progress,
  ProgressKind,
  ProgressReporting,
  ProgressUserInfoKey,
  PropertyListSerialization,
  QLPreviewItem,
  QLPreviewPanel,
  QLPreviewPanelDataSource,
  QLPreviewPanelDelegate,
  QLPreviewView,
  QLPreviewingController,
  QuartzFilter,
  QuartzFilterManager,
  QuartzFilterView,
  RelativeDateTimeFormatter,
  RunLoop,
  Scanner,
  SearchParameters,
  SocketPort,
  Stream,
  StreamDelegate,
  StreamNetworkServiceTypeValue,
  StreamSOCKSProxyConfiguration,
  StreamSOCKSProxyVersion,
  StreamSocketSecurityLevel,
  StringEncodingDetectionOptionsKey,
  StringTransform,
  SystemPressureState,
  Thread,
  Timer,
  URLAuthenticationChallenge,
  URLAuthenticationChallengeSender,
  URLCache,
  URLCredential,
  URLCredentialStorage,
  URLFileProtection,
  URLFileResourceType,
  URLProtectionSpace,
  URLProtocol,
  URLProtocolClient,
  URLResourceKey,
  URLResponse,
  URLSession,
  URLSessionConfiguration,
  URLSessionDataDelegate,
  URLSessionDataTask,
  URLSessionDelegate,
  URLSessionDownloadDelegate,
  URLSessionDownloadTask,
  URLSessionStreamDelegate,
  URLSessionStreamTask,
  URLSessionTask,
  URLSessionTaskDelegate,
  URLSessionTaskMetrics,
  URLSessionTaskTransactionMetrics,
  URLSessionUploadTask,
  URLSessionWebSocketDelegate,
  URLSessionWebSocketTask,
  URLThumbnailDictionaryItem,
  URLUbiquitousItemDownloadingStatus,
  URLUbiquitousSharedItemPermissions,
  URLUbiquitousSharedItemRole,
  UndoManager,
  Unit,
  UnitAcceleration,
  UnitAngle,
  UnitArea,
  UnitConcentrationMass,
  UnitConverter,
  UnitConverterLinear,
  UnitDispersion,
  UnitDuration,
  UnitElectricCharge,
  UnitElectricCurrent,
  UnitElectricPotentialDifference,
  UnitElectricResistance,
  UnitEnergy,
  UnitFrequency,
  UnitFuelEfficiency,
  UnitIlluminance,
  UnitLength,
  UnitMass,
  UnitPower,
  UnitPressure,
  UnitSpeed,
  UnitTemperature,
  UnitVolume,
  UserDefaults,
  ValueTransformer,
  XMLDTD,
  XMLDTDNode,
  XMLDocument,
  XMLElement,
  XMLNode,
  XMLParser,
  XMLParserDelegate,
};
